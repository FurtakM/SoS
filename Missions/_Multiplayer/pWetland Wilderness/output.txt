// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45717 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46032 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 33
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 34
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 36
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 33
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 34
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 35
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 32
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45172 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45172 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45172 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45172 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45172 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45172 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45172 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45172 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5044 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45005 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45005 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45005 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45005 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45005 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45005 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45005 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45005 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45005 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45005 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45005 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45005 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45005 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45005 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45005 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45005 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45172 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45172 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45172 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45172 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45172 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45172 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45172 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45172 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45172 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45172 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45172 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45172 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45172 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45172 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45172 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45172 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45172 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45172 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45172 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45172 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45172 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45172 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45172 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45172 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 41994 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 20
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 69488 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 50326 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 69505 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 50916 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 69546 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 50969 0 3
2939: PPOPN 3
2941: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
// if exist_mode then
2946: LD_VAR 0 2
2950: IFFALSE 2975
// unit := CreateCharacter ( prefix & ident ) else
2952: LD_ADDR_VAR 0 5
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 1
2966: STR
2967: PPUSH
2968: CALL_OW 34
2972: ST_TO_ADDR
2973: GO 2990
// unit := NewCharacter ( ident ) ;
2975: LD_ADDR_VAR 0 5
2979: PUSH
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 25
2989: ST_TO_ADDR
// result := unit ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_VAR 0 5
2999: ST_TO_ADDR
// end ;
3000: LD_VAR 0 4
3004: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3005: LD_INT 0
3007: PPUSH
3008: PPUSH
// if not side or not nation then
3009: LD_VAR 0 1
3013: NOT
3014: PUSH
3015: LD_VAR 0 2
3019: NOT
3020: OR
3021: IFFALSE 3025
// exit ;
3023: GO 3793
// case nation of nation_american :
3025: LD_VAR 0 2
3029: PUSH
3030: LD_INT 1
3032: DOUBLE
3033: EQUAL
3034: IFTRUE 3038
3036: GO 3252
3038: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3039: LD_ADDR_VAR 0 4
3043: PUSH
3044: LD_INT 35
3046: PUSH
3047: LD_INT 45
3049: PUSH
3050: LD_INT 46
3052: PUSH
3053: LD_INT 47
3055: PUSH
3056: LD_INT 82
3058: PUSH
3059: LD_INT 83
3061: PUSH
3062: LD_INT 84
3064: PUSH
3065: LD_INT 85
3067: PUSH
3068: LD_INT 86
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: LD_INT 2
3076: PUSH
3077: LD_INT 6
3079: PUSH
3080: LD_INT 15
3082: PUSH
3083: LD_INT 16
3085: PUSH
3086: LD_INT 7
3088: PUSH
3089: LD_INT 12
3091: PUSH
3092: LD_INT 13
3094: PUSH
3095: LD_INT 10
3097: PUSH
3098: LD_INT 14
3100: PUSH
3101: LD_INT 20
3103: PUSH
3104: LD_INT 21
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 32
3115: PUSH
3116: LD_INT 27
3118: PUSH
3119: LD_INT 36
3121: PUSH
3122: LD_INT 69
3124: PUSH
3125: LD_INT 39
3127: PUSH
3128: LD_INT 34
3130: PUSH
3131: LD_INT 40
3133: PUSH
3134: LD_INT 48
3136: PUSH
3137: LD_INT 49
3139: PUSH
3140: LD_INT 50
3142: PUSH
3143: LD_INT 51
3145: PUSH
3146: LD_INT 52
3148: PUSH
3149: LD_INT 53
3151: PUSH
3152: LD_INT 54
3154: PUSH
3155: LD_INT 55
3157: PUSH
3158: LD_INT 56
3160: PUSH
3161: LD_INT 57
3163: PUSH
3164: LD_INT 58
3166: PUSH
3167: LD_INT 59
3169: PUSH
3170: LD_INT 60
3172: PUSH
3173: LD_INT 61
3175: PUSH
3176: LD_INT 62
3178: PUSH
3179: LD_INT 80
3181: PUSH
3182: LD_INT 82
3184: PUSH
3185: LD_INT 83
3187: PUSH
3188: LD_INT 84
3190: PUSH
3191: LD_INT 85
3193: PUSH
3194: LD_INT 86
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: ST_TO_ADDR
3250: GO 3717
3252: LD_INT 2
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3486
3260: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3261: LD_ADDR_VAR 0 4
3265: PUSH
3266: LD_INT 35
3268: PUSH
3269: LD_INT 45
3271: PUSH
3272: LD_INT 46
3274: PUSH
3275: LD_INT 47
3277: PUSH
3278: LD_INT 82
3280: PUSH
3281: LD_INT 83
3283: PUSH
3284: LD_INT 84
3286: PUSH
3287: LD_INT 85
3289: PUSH
3290: LD_INT 87
3292: PUSH
3293: LD_INT 70
3295: PUSH
3296: LD_INT 1
3298: PUSH
3299: LD_INT 11
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 5
3310: PUSH
3311: LD_INT 6
3313: PUSH
3314: LD_INT 15
3316: PUSH
3317: LD_INT 18
3319: PUSH
3320: LD_INT 7
3322: PUSH
3323: LD_INT 17
3325: PUSH
3326: LD_INT 8
3328: PUSH
3329: LD_INT 20
3331: PUSH
3332: LD_INT 21
3334: PUSH
3335: LD_INT 22
3337: PUSH
3338: LD_INT 72
3340: PUSH
3341: LD_INT 26
3343: PUSH
3344: LD_INT 69
3346: PUSH
3347: LD_INT 39
3349: PUSH
3350: LD_INT 40
3352: PUSH
3353: LD_INT 41
3355: PUSH
3356: LD_INT 42
3358: PUSH
3359: LD_INT 43
3361: PUSH
3362: LD_INT 48
3364: PUSH
3365: LD_INT 49
3367: PUSH
3368: LD_INT 50
3370: PUSH
3371: LD_INT 51
3373: PUSH
3374: LD_INT 52
3376: PUSH
3377: LD_INT 53
3379: PUSH
3380: LD_INT 54
3382: PUSH
3383: LD_INT 55
3385: PUSH
3386: LD_INT 56
3388: PUSH
3389: LD_INT 60
3391: PUSH
3392: LD_INT 61
3394: PUSH
3395: LD_INT 62
3397: PUSH
3398: LD_INT 66
3400: PUSH
3401: LD_INT 67
3403: PUSH
3404: LD_INT 68
3406: PUSH
3407: LD_INT 81
3409: PUSH
3410: LD_INT 82
3412: PUSH
3413: LD_INT 83
3415: PUSH
3416: LD_INT 84
3418: PUSH
3419: LD_INT 85
3421: PUSH
3422: LD_INT 87
3424: PUSH
3425: LD_INT 88
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: ST_TO_ADDR
3484: GO 3717
3486: LD_INT 3
3488: DOUBLE
3489: EQUAL
3490: IFTRUE 3494
3492: GO 3716
3494: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3495: LD_ADDR_VAR 0 4
3499: PUSH
3500: LD_INT 46
3502: PUSH
3503: LD_INT 47
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: LD_INT 2
3511: PUSH
3512: LD_INT 82
3514: PUSH
3515: LD_INT 83
3517: PUSH
3518: LD_INT 84
3520: PUSH
3521: LD_INT 85
3523: PUSH
3524: LD_INT 86
3526: PUSH
3527: LD_INT 11
3529: PUSH
3530: LD_INT 9
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: LD_INT 19
3538: PUSH
3539: LD_INT 21
3541: PUSH
3542: LD_INT 24
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 25
3550: PUSH
3551: LD_INT 28
3553: PUSH
3554: LD_INT 29
3556: PUSH
3557: LD_INT 30
3559: PUSH
3560: LD_INT 31
3562: PUSH
3563: LD_INT 37
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 27
3574: PUSH
3575: LD_INT 33
3577: PUSH
3578: LD_INT 69
3580: PUSH
3581: LD_INT 39
3583: PUSH
3584: LD_INT 34
3586: PUSH
3587: LD_INT 40
3589: PUSH
3590: LD_INT 71
3592: PUSH
3593: LD_INT 23
3595: PUSH
3596: LD_INT 44
3598: PUSH
3599: LD_INT 48
3601: PUSH
3602: LD_INT 49
3604: PUSH
3605: LD_INT 50
3607: PUSH
3608: LD_INT 51
3610: PUSH
3611: LD_INT 52
3613: PUSH
3614: LD_INT 53
3616: PUSH
3617: LD_INT 54
3619: PUSH
3620: LD_INT 55
3622: PUSH
3623: LD_INT 56
3625: PUSH
3626: LD_INT 57
3628: PUSH
3629: LD_INT 58
3631: PUSH
3632: LD_INT 59
3634: PUSH
3635: LD_INT 63
3637: PUSH
3638: LD_INT 64
3640: PUSH
3641: LD_INT 65
3643: PUSH
3644: LD_INT 82
3646: PUSH
3647: LD_INT 83
3649: PUSH
3650: LD_INT 84
3652: PUSH
3653: LD_INT 85
3655: PUSH
3656: LD_INT 86
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: ST_TO_ADDR
3714: GO 3717
3716: POP
// if state > - 1 and state < 3 then
3717: LD_VAR 0 3
3721: PUSH
3722: LD_INT 1
3724: NEG
3725: GREATER
3726: PUSH
3727: LD_VAR 0 3
3731: PUSH
3732: LD_INT 3
3734: LESS
3735: AND
3736: IFFALSE 3793
// for i in result do
3738: LD_ADDR_VAR 0 5
3742: PUSH
3743: LD_VAR 0 4
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3791
// if GetTech ( i , side ) <> state then
3751: LD_VAR 0 5
3755: PPUSH
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 321
3765: PUSH
3766: LD_VAR 0 3
3770: NONEQUAL
3771: IFFALSE 3789
// result := result diff i ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: LD_VAR 0 5
3787: DIFF
3788: ST_TO_ADDR
3789: GO 3748
3791: POP
3792: POP
// end ;
3793: LD_VAR 0 4
3797: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3798: LD_INT 0
3800: PPUSH
3801: PPUSH
3802: PPUSH
// result := true ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: LD_INT 1
3810: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_VAR 0 2
3820: PPUSH
3821: CALL_OW 480
3825: ST_TO_ADDR
// if not tmp then
3826: LD_VAR 0 5
3830: NOT
3831: IFFALSE 3835
// exit ;
3833: GO 3884
// for i in tmp do
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_VAR 0 5
3844: PUSH
3845: FOR_IN
3846: IFFALSE 3882
// if GetTech ( i , side ) <> state_researched then
3848: LD_VAR 0 4
3852: PPUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL_OW 321
3862: PUSH
3863: LD_INT 2
3865: NONEQUAL
3866: IFFALSE 3880
// begin result := false ;
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: LD_INT 0
3875: ST_TO_ADDR
// exit ;
3876: POP
3877: POP
3878: GO 3884
// end ;
3880: GO 3845
3882: POP
3883: POP
// end ;
3884: LD_VAR 0 3
3888: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3889: LD_INT 0
3891: PPUSH
3892: PPUSH
3893: PPUSH
3894: PPUSH
3895: PPUSH
3896: PPUSH
3897: PPUSH
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3904: LD_VAR 0 1
3908: NOT
3909: PUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 257
3919: PUSH
3920: LD_INT 9
3922: NONEQUAL
3923: OR
3924: IFFALSE 3928
// exit ;
3926: GO 4501
// side := GetSide ( unit ) ;
3928: LD_ADDR_VAR 0 9
3932: PUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: CALL_OW 255
3942: ST_TO_ADDR
// tech_space := tech_spacanom ;
3943: LD_ADDR_VAR 0 12
3947: PUSH
3948: LD_INT 29
3950: ST_TO_ADDR
// tech_time := tech_taurad ;
3951: LD_ADDR_VAR 0 13
3955: PUSH
3956: LD_INT 28
3958: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3959: LD_ADDR_VAR 0 11
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 310
3973: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3974: LD_VAR 0 11
3978: PPUSH
3979: CALL_OW 247
3983: PUSH
3984: LD_INT 2
3986: EQUAL
3987: IFFALSE 3991
// exit ;
3989: GO 4501
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3991: LD_ADDR_VAR 0 8
3995: PUSH
3996: LD_INT 81
3998: PUSH
3999: LD_VAR 0 9
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 21
4013: PUSH
4014: LD_INT 3
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PPUSH
4029: CALL_OW 69
4033: ST_TO_ADDR
// if not tmp then
4034: LD_VAR 0 8
4038: NOT
4039: IFFALSE 4043
// exit ;
4041: GO 4501
// if in_unit then
4043: LD_VAR 0 11
4047: IFFALSE 4071
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4049: LD_ADDR_VAR 0 10
4053: PUSH
4054: LD_VAR 0 8
4058: PPUSH
4059: LD_VAR 0 11
4063: PPUSH
4064: CALL_OW 74
4068: ST_TO_ADDR
4069: GO 4091
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4071: LD_ADDR_VAR 0 10
4075: PUSH
4076: LD_VAR 0 8
4080: PPUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: CALL_OW 74
4090: ST_TO_ADDR
// if not enemy then
4091: LD_VAR 0 10
4095: NOT
4096: IFFALSE 4100
// exit ;
4098: GO 4501
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4100: LD_VAR 0 11
4104: PUSH
4105: LD_VAR 0 11
4109: PPUSH
4110: LD_VAR 0 10
4114: PPUSH
4115: CALL_OW 296
4119: PUSH
4120: LD_INT 13
4122: GREATER
4123: AND
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: LD_VAR 0 10
4134: PPUSH
4135: CALL_OW 296
4139: PUSH
4140: LD_INT 12
4142: GREATER
4143: OR
4144: IFFALSE 4148
// exit ;
4146: GO 4501
// missile := [ 1 ] ;
4148: LD_ADDR_VAR 0 14
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: EMPTY
4157: LIST
4158: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4159: LD_VAR 0 9
4163: PPUSH
4164: LD_VAR 0 12
4168: PPUSH
4169: CALL_OW 325
4173: IFFALSE 4202
// missile := Replace ( missile , missile + 1 , 2 ) ;
4175: LD_ADDR_VAR 0 14
4179: PUSH
4180: LD_VAR 0 14
4184: PPUSH
4185: LD_VAR 0 14
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: PPUSH
4194: LD_INT 2
4196: PPUSH
4197: CALL_OW 1
4201: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4202: LD_VAR 0 9
4206: PPUSH
4207: LD_VAR 0 13
4211: PPUSH
4212: CALL_OW 325
4216: PUSH
4217: LD_VAR 0 10
4221: PPUSH
4222: CALL_OW 255
4226: PPUSH
4227: LD_VAR 0 13
4231: PPUSH
4232: CALL_OW 325
4236: NOT
4237: AND
4238: IFFALSE 4267
// missile := Replace ( missile , missile + 1 , 3 ) ;
4240: LD_ADDR_VAR 0 14
4244: PUSH
4245: LD_VAR 0 14
4249: PPUSH
4250: LD_VAR 0 14
4254: PUSH
4255: LD_INT 1
4257: PLUS
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: CALL_OW 1
4266: ST_TO_ADDR
// if missile < 2 then
4267: LD_VAR 0 14
4271: PUSH
4272: LD_INT 2
4274: LESS
4275: IFFALSE 4279
// exit ;
4277: GO 4501
// x := GetX ( enemy ) ;
4279: LD_ADDR_VAR 0 4
4283: PUSH
4284: LD_VAR 0 10
4288: PPUSH
4289: CALL_OW 250
4293: ST_TO_ADDR
// y := GetY ( enemy ) ;
4294: LD_ADDR_VAR 0 5
4298: PUSH
4299: LD_VAR 0 10
4303: PPUSH
4304: CALL_OW 251
4308: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4309: LD_ADDR_VAR 0 6
4313: PUSH
4314: LD_VAR 0 4
4318: PUSH
4319: LD_INT 1
4321: NEG
4322: PPUSH
4323: LD_INT 1
4325: PPUSH
4326: CALL_OW 12
4330: PLUS
4331: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4332: LD_ADDR_VAR 0 7
4336: PUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: NEG
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 12
4353: PLUS
4354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4355: LD_VAR 0 6
4359: PPUSH
4360: LD_VAR 0 7
4364: PPUSH
4365: CALL_OW 488
4369: NOT
4370: IFFALSE 4392
// begin _x := x ;
4372: LD_ADDR_VAR 0 6
4376: PUSH
4377: LD_VAR 0 4
4381: ST_TO_ADDR
// _y := y ;
4382: LD_ADDR_VAR 0 7
4386: PUSH
4387: LD_VAR 0 5
4391: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_VAR 0 14
4404: PPUSH
4405: CALL_OW 12
4409: ST_TO_ADDR
// case i of 1 :
4410: LD_VAR 0 3
4414: PUSH
4415: LD_INT 1
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4440
4423: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4424: LD_VAR 0 1
4428: PPUSH
4429: LD_VAR 0 10
4433: PPUSH
4434: CALL_OW 115
4438: GO 4501
4440: LD_INT 2
4442: DOUBLE
4443: EQUAL
4444: IFTRUE 4448
4446: GO 4470
4448: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_VAR 0 6
4458: PPUSH
4459: LD_VAR 0 7
4463: PPUSH
4464: CALL_OW 153
4468: GO 4501
4470: LD_INT 3
4472: DOUBLE
4473: EQUAL
4474: IFTRUE 4478
4476: GO 4500
4478: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4479: LD_VAR 0 1
4483: PPUSH
4484: LD_VAR 0 6
4488: PPUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: CALL_OW 154
4498: GO 4501
4500: POP
// end ;
4501: LD_VAR 0 2
4505: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// if not unit or not building then
4514: LD_VAR 0 1
4518: NOT
4519: PUSH
4520: LD_VAR 0 2
4524: NOT
4525: OR
4526: IFFALSE 4530
// exit ;
4528: GO 4688
// x := GetX ( building ) ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 250
4544: ST_TO_ADDR
// y := GetY ( building ) ;
4545: LD_ADDR_VAR 0 6
4549: PUSH
4550: LD_VAR 0 2
4554: PPUSH
4555: CALL_OW 251
4559: ST_TO_ADDR
// for i = 0 to 5 do
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: DOUBLE
4566: LD_INT 0
4568: DEC
4569: ST_TO_ADDR
4570: LD_INT 5
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4686
// begin _x := ShiftX ( x , i , 3 ) ;
4576: LD_ADDR_VAR 0 7
4580: PUSH
4581: LD_VAR 0 5
4585: PPUSH
4586: LD_VAR 0 4
4590: PPUSH
4591: LD_INT 3
4593: PPUSH
4594: CALL_OW 272
4598: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4599: LD_ADDR_VAR 0 8
4603: PUSH
4604: LD_VAR 0 6
4608: PPUSH
4609: LD_VAR 0 4
4613: PPUSH
4614: LD_INT 3
4616: PPUSH
4617: CALL_OW 273
4621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4622: LD_VAR 0 7
4626: PPUSH
4627: LD_VAR 0 8
4631: PPUSH
4632: CALL_OW 488
4636: NOT
4637: IFFALSE 4641
// continue ;
4639: GO 4573
// if HexInfo ( _x , _y ) = 0 then
4641: LD_VAR 0 7
4645: PPUSH
4646: LD_VAR 0 8
4650: PPUSH
4651: CALL_OW 428
4655: PUSH
4656: LD_INT 0
4658: EQUAL
4659: IFFALSE 4684
// begin ComMoveXY ( unit , _x , _y ) ;
4661: LD_VAR 0 1
4665: PPUSH
4666: LD_VAR 0 7
4670: PPUSH
4671: LD_VAR 0 8
4675: PPUSH
4676: CALL_OW 111
// exit ;
4680: POP
4681: POP
4682: GO 4688
// end ; end ;
4684: GO 4573
4686: POP
4687: POP
// end ;
4688: LD_VAR 0 3
4692: RET
// export function ScanBase ( side , base_area ) ; begin
4693: LD_INT 0
4695: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_VAR 0 2
4705: PPUSH
4706: LD_INT 81
4708: PUSH
4709: LD_VAR 0 1
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 70
4722: ST_TO_ADDR
// end ;
4723: LD_VAR 0 3
4727: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4728: LD_INT 0
4730: PPUSH
4731: PPUSH
4732: PPUSH
4733: PPUSH
// result := false ;
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: LD_INT 0
4741: ST_TO_ADDR
// side := GetSide ( unit ) ;
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_VAR 0 1
4751: PPUSH
4752: CALL_OW 255
4756: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4757: LD_ADDR_VAR 0 4
4761: PUSH
4762: LD_VAR 0 1
4766: PPUSH
4767: CALL_OW 248
4771: ST_TO_ADDR
// case nat of 1 :
4772: LD_VAR 0 4
4776: PUSH
4777: LD_INT 1
4779: DOUBLE
4780: EQUAL
4781: IFTRUE 4785
4783: GO 4796
4785: POP
// tech := tech_lassight ; 2 :
4786: LD_ADDR_VAR 0 5
4790: PUSH
4791: LD_INT 12
4793: ST_TO_ADDR
4794: GO 4835
4796: LD_INT 2
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 4815
4804: POP
// tech := tech_mortar ; 3 :
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: LD_INT 41
4812: ST_TO_ADDR
4813: GO 4835
4815: LD_INT 3
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4834
4823: POP
// tech := tech_bazooka ; end ;
4824: LD_ADDR_VAR 0 5
4828: PUSH
4829: LD_INT 44
4831: ST_TO_ADDR
4832: GO 4835
4834: POP
// if Researched ( side , tech ) then
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_VAR 0 5
4844: PPUSH
4845: CALL_OW 325
4849: IFFALSE 4876
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 5
4858: PUSH
4859: LD_INT 8
4861: PUSH
4862: LD_INT 9
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_VAR 0 4
4874: ARRAY
4875: ST_TO_ADDR
// end ;
4876: LD_VAR 0 2
4880: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
// if not mines then
4886: LD_VAR 0 2
4890: NOT
4891: IFFALSE 4895
// exit ;
4893: GO 5039
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4895: LD_ADDR_VAR 0 5
4899: PUSH
4900: LD_INT 81
4902: PUSH
4903: LD_VAR 0 1
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 3
4914: PUSH
4915: LD_INT 21
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: ST_TO_ADDR
// for i in mines do
4938: LD_ADDR_VAR 0 4
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: FOR_IN
4949: IFFALSE 5037
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4951: LD_VAR 0 4
4955: PUSH
4956: LD_INT 1
4958: ARRAY
4959: PPUSH
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 2
4967: ARRAY
4968: PPUSH
4969: CALL_OW 458
4973: NOT
4974: IFFALSE 4978
// continue ;
4976: GO 4948
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4978: LD_VAR 0 4
4982: PUSH
4983: LD_INT 1
4985: ARRAY
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 2
4994: ARRAY
4995: PPUSH
4996: CALL_OW 428
5000: PUSH
5001: LD_VAR 0 5
5005: IN
5006: IFFALSE 5035
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5008: LD_VAR 0 4
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 2
5024: ARRAY
5025: PPUSH
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 456
// end ;
5035: GO 4948
5037: POP
5038: POP
// end ;
5039: LD_VAR 0 3
5043: RET
// export function Count ( array ) ; begin
5044: LD_INT 0
5046: PPUSH
// result := array + 0 ;
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_VAR 0 1
5056: PUSH
5057: LD_INT 0
5059: PLUS
5060: ST_TO_ADDR
// end ;
5061: LD_VAR 0 2
5065: RET
// export function IsEmpty ( building ) ; begin
5066: LD_INT 0
5068: PPUSH
// if not building then
5069: LD_VAR 0 1
5073: NOT
5074: IFFALSE 5078
// exit ;
5076: GO 5121
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: LD_VAR 0 1
5087: PUSH
5088: LD_INT 22
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 255
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PUSH
5105: LD_INT 58
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PPUSH
5115: CALL_OW 69
5119: IN
5120: ST_TO_ADDR
// end ;
5121: LD_VAR 0 2
5125: RET
// export function IsNotFull ( building ) ; var places ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
// if not building then
5130: LD_VAR 0 1
5134: NOT
5135: IFFALSE 5139
// exit ;
5137: GO 5167
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_VAR 0 1
5148: PPUSH
5149: LD_INT 3
5151: PUSH
5152: LD_INT 62
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PPUSH
5162: CALL_OW 72
5166: ST_TO_ADDR
// end ;
5167: LD_VAR 0 2
5171: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
5177: PPUSH
// tmp := [ ] ;
5178: LD_ADDR_VAR 0 3
5182: PUSH
5183: EMPTY
5184: ST_TO_ADDR
// list := [ ] ;
5185: LD_ADDR_VAR 0 5
5189: PUSH
5190: EMPTY
5191: ST_TO_ADDR
// for i = 16 to 25 do
5192: LD_ADDR_VAR 0 4
5196: PUSH
5197: DOUBLE
5198: LD_INT 16
5200: DEC
5201: ST_TO_ADDR
5202: LD_INT 25
5204: PUSH
5205: FOR_TO
5206: IFFALSE 5279
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 22
5220: PUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 255
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 91
5237: PUSH
5238: LD_VAR 0 1
5242: PUSH
5243: LD_INT 6
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 30
5253: PUSH
5254: LD_VAR 0 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: PPUSH
5271: CALL_OW 69
5275: ADD
5276: ST_TO_ADDR
5277: GO 5205
5279: POP
5280: POP
// for i = 1 to tmp do
5281: LD_ADDR_VAR 0 4
5285: PUSH
5286: DOUBLE
5287: LD_INT 1
5289: DEC
5290: ST_TO_ADDR
5291: LD_VAR 0 3
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5385
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5299: LD_ADDR_VAR 0 5
5303: PUSH
5304: LD_VAR 0 5
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: CALL_OW 266
5324: PUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PPUSH
5336: CALL_OW 250
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 251
5356: PUSH
5357: LD_VAR 0 3
5361: PUSH
5362: LD_VAR 0 4
5366: ARRAY
5367: PPUSH
5368: CALL_OW 254
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: ADD
5382: ST_TO_ADDR
5383: GO 5296
5385: POP
5386: POP
// result := list ;
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 5
5396: ST_TO_ADDR
// end ;
5397: LD_VAR 0 2
5401: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
// if not factory then
5411: LD_VAR 0 1
5415: NOT
5416: IFFALSE 5420
// exit ;
5418: GO 6013
// if control = control_apeman then
5420: LD_VAR 0 4
5424: PUSH
5425: LD_INT 5
5427: EQUAL
5428: IFFALSE 5537
// begin tmp := UnitsInside ( factory ) ;
5430: LD_ADDR_VAR 0 8
5434: PUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 313
5444: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5445: LD_VAR 0 8
5449: PPUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 12
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 72
5464: NOT
5465: IFFALSE 5475
// control := control_manual ;
5467: LD_ADDR_VAR 0 4
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5475: LD_ADDR_VAR 0 8
5479: PUSH
5480: LD_VAR 0 1
5484: PPUSH
5485: CALL 5172 0 1
5489: ST_TO_ADDR
// if tmp then
5490: LD_VAR 0 8
5494: IFFALSE 5537
// begin for i in tmp do
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 8
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5535
// if i [ 1 ] = b_ext_radio then
5509: LD_VAR 0 7
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: PUSH
5518: LD_INT 22
5520: EQUAL
5521: IFFALSE 5533
// begin control := control_remote ;
5523: LD_ADDR_VAR 0 4
5527: PUSH
5528: LD_INT 2
5530: ST_TO_ADDR
// break ;
5531: GO 5535
// end ;
5533: GO 5506
5535: POP
5536: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: LD_VAR 0 4
5556: PPUSH
5557: LD_VAR 0 5
5561: PPUSH
5562: CALL_OW 448
5566: IFFALSE 5601
// begin result := [ chassis , engine , control , weapon ] ;
5568: LD_ADDR_VAR 0 6
5572: PUSH
5573: LD_VAR 0 2
5577: PUSH
5578: LD_VAR 0 3
5582: PUSH
5583: LD_VAR 0 4
5587: PUSH
5588: LD_VAR 0 5
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: ST_TO_ADDR
// exit ;
5599: GO 6013
// end ; _chassis := AvailableChassisList ( factory ) ;
5601: LD_ADDR_VAR 0 9
5605: PUSH
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 475
5615: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5616: LD_ADDR_VAR 0 11
5620: PUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: CALL_OW 476
5630: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5631: LD_ADDR_VAR 0 12
5635: PUSH
5636: LD_VAR 0 1
5640: PPUSH
5641: CALL_OW 477
5645: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5646: LD_ADDR_VAR 0 10
5650: PUSH
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 478
5660: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5661: LD_VAR 0 9
5665: NOT
5666: PUSH
5667: LD_VAR 0 11
5671: NOT
5672: OR
5673: PUSH
5674: LD_VAR 0 12
5678: NOT
5679: OR
5680: PUSH
5681: LD_VAR 0 10
5685: NOT
5686: OR
5687: IFFALSE 5722
// begin result := [ chassis , engine , control , weapon ] ;
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_VAR 0 3
5703: PUSH
5704: LD_VAR 0 4
5708: PUSH
5709: LD_VAR 0 5
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: ST_TO_ADDR
// exit ;
5720: GO 6013
// end ; if not chassis in _chassis then
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 9
5731: IN
5732: NOT
5733: IFFALSE 5759
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5735: LD_ADDR_VAR 0 2
5739: PUSH
5740: LD_VAR 0 9
5744: PUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_VAR 0 9
5752: PPUSH
5753: CALL_OW 12
5757: ARRAY
5758: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL 6018 0 2
5773: NOT
5774: IFFALSE 5833
// repeat engine := _engine [ 1 ] ;
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_VAR 0 11
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5790: LD_ADDR_VAR 0 11
5794: PUSH
5795: LD_VAR 0 11
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: CALL_OW 3
5807: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 3
5817: PPUSH
5818: CALL 6018 0 2
5822: PUSH
5823: LD_VAR 0 11
5827: PUSH
5828: EMPTY
5829: EQUAL
5830: OR
5831: IFFALSE 5776
// if not control in _control then
5833: LD_VAR 0 4
5837: PUSH
5838: LD_VAR 0 12
5842: IN
5843: NOT
5844: IFFALSE 5870
// control := _control [ rand ( 1 , _control ) ] ;
5846: LD_ADDR_VAR 0 4
5850: PUSH
5851: LD_VAR 0 12
5855: PUSH
5856: LD_INT 1
5858: PPUSH
5859: LD_VAR 0 12
5863: PPUSH
5864: CALL_OW 12
5868: ARRAY
5869: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5870: LD_VAR 0 2
5874: PPUSH
5875: LD_VAR 0 5
5879: PPUSH
5880: CALL 6238 0 2
5884: NOT
5885: IFFALSE 5944
// repeat weapon := _weapon [ 1 ] ;
5887: LD_ADDR_VAR 0 5
5891: PUSH
5892: LD_VAR 0 10
5896: PUSH
5897: LD_INT 1
5899: ARRAY
5900: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5901: LD_ADDR_VAR 0 10
5905: PUSH
5906: LD_VAR 0 10
5910: PPUSH
5911: LD_INT 1
5913: PPUSH
5914: CALL_OW 3
5918: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_VAR 0 5
5928: PPUSH
5929: CALL 6238 0 2
5933: PUSH
5934: LD_VAR 0 10
5938: PUSH
5939: EMPTY
5940: EQUAL
5941: OR
5942: IFFALSE 5887
// result := [ ] ;
5944: LD_ADDR_VAR 0 6
5948: PUSH
5949: EMPTY
5950: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_VAR 0 4
5970: PPUSH
5971: LD_VAR 0 5
5975: PPUSH
5976: CALL_OW 448
5980: IFFALSE 6013
// result := [ chassis , engine , control , weapon ] ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: LD_VAR 0 4
6001: PUSH
6002: LD_VAR 0 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: ST_TO_ADDR
// end ;
6013: LD_VAR 0 6
6017: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6018: LD_INT 0
6020: PPUSH
// if not chassis or not engine then
6021: LD_VAR 0 1
6025: NOT
6026: PUSH
6027: LD_VAR 0 2
6031: NOT
6032: OR
6033: IFFALSE 6037
// exit ;
6035: GO 6233
// case engine of engine_solar :
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 2
6044: DOUBLE
6045: EQUAL
6046: IFTRUE 6050
6048: GO 6088
6050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 11
6058: PUSH
6059: LD_INT 12
6061: PUSH
6062: LD_INT 13
6064: PUSH
6065: LD_INT 14
6067: PUSH
6068: LD_INT 1
6070: PUSH
6071: LD_INT 2
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: ST_TO_ADDR
6086: GO 6217
6088: LD_INT 1
6090: DOUBLE
6091: EQUAL
6092: IFTRUE 6096
6094: GO 6158
6096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6097: LD_ADDR_VAR 0 3
6101: PUSH
6102: LD_INT 11
6104: PUSH
6105: LD_INT 12
6107: PUSH
6108: LD_INT 13
6110: PUSH
6111: LD_INT 14
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: LD_INT 2
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 4
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: LD_INT 21
6131: PUSH
6132: LD_INT 23
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 24
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: ST_TO_ADDR
6156: GO 6217
6158: LD_INT 3
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6216
6166: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6167: LD_ADDR_VAR 0 3
6171: PUSH
6172: LD_INT 13
6174: PUSH
6175: LD_INT 14
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 3
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 23
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: ST_TO_ADDR
6214: GO 6217
6216: POP
// result := ( chassis in result ) ;
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_VAR 0 1
6226: PUSH
6227: LD_VAR 0 3
6231: IN
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 3
6237: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6238: LD_INT 0
6240: PPUSH
// if not chassis or not weapon then
6241: LD_VAR 0 1
6245: NOT
6246: PUSH
6247: LD_VAR 0 2
6251: NOT
6252: OR
6253: IFFALSE 6257
// exit ;
6255: GO 7317
// case weapon of us_machine_gun :
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 2
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6300
6270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 1
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 5
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
6298: GO 7301
6300: LD_INT 3
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6338
6308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6309: LD_ADDR_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: LD_INT 2
6319: PUSH
6320: LD_INT 3
6322: PUSH
6323: LD_INT 4
6325: PUSH
6326: LD_INT 5
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: ST_TO_ADDR
6336: GO 7301
6338: LD_INT 11
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6376
6346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6347: LD_ADDR_VAR 0 3
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: ST_TO_ADDR
6374: GO 7301
6376: LD_INT 4
6378: DOUBLE
6379: EQUAL
6380: IFTRUE 6384
6382: GO 6410
6384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6385: LD_ADDR_VAR 0 3
6389: PUSH
6390: LD_INT 2
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: LD_INT 4
6398: PUSH
6399: LD_INT 5
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: ST_TO_ADDR
6408: GO 7301
6410: LD_INT 5
6412: DOUBLE
6413: EQUAL
6414: IFTRUE 6418
6416: GO 6444
6418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: ST_TO_ADDR
6442: GO 7301
6444: LD_INT 9
6446: DOUBLE
6447: EQUAL
6448: IFTRUE 6452
6450: GO 6478
6452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6453: LD_ADDR_VAR 0 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
6476: GO 7301
6478: LD_INT 7
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6512
6486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6487: LD_ADDR_VAR 0 3
6491: PUSH
6492: LD_INT 2
6494: PUSH
6495: LD_INT 3
6497: PUSH
6498: LD_INT 4
6500: PUSH
6501: LD_INT 5
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
6510: GO 7301
6512: LD_INT 12
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6546
6520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 2
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 4
6534: PUSH
6535: LD_INT 5
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 7301
6546: LD_INT 13
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6580
6554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 5
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
6578: GO 7301
6580: LD_INT 14
6582: DOUBLE
6583: EQUAL
6584: IFTRUE 6588
6586: GO 6606
6588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 4
6596: PUSH
6597: LD_INT 5
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: ST_TO_ADDR
6604: GO 7301
6606: LD_INT 6
6608: DOUBLE
6609: EQUAL
6610: IFTRUE 6614
6612: GO 6632
6614: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_INT 4
6622: PUSH
6623: LD_INT 5
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7301
6632: LD_INT 10
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6658
6640: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: LD_INT 5
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 7301
6658: LD_INT 22
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6692
6666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: LD_INT 11
6674: PUSH
6675: LD_INT 12
6677: PUSH
6678: LD_INT 13
6680: PUSH
6681: LD_INT 14
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: ST_TO_ADDR
6690: GO 7301
6692: LD_INT 23
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6726
6700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_INT 11
6708: PUSH
6709: LD_INT 12
6711: PUSH
6712: LD_INT 13
6714: PUSH
6715: LD_INT 14
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
6724: GO 7301
6726: LD_INT 24
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6760
6734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_INT 11
6742: PUSH
6743: LD_INT 12
6745: PUSH
6746: LD_INT 13
6748: PUSH
6749: LD_INT 14
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7301
6760: LD_INT 30
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6794
6768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 11
6776: PUSH
6777: LD_INT 12
6779: PUSH
6780: LD_INT 13
6782: PUSH
6783: LD_INT 14
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: ST_TO_ADDR
6792: GO 7301
6794: LD_INT 25
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6802
6800: GO 6820
6802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_INT 13
6810: PUSH
6811: LD_INT 14
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7301
6820: LD_INT 27
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6846
6828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6829: LD_ADDR_VAR 0 3
6833: PUSH
6834: LD_INT 13
6836: PUSH
6837: LD_INT 14
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7301
6846: LD_INT 92
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 11
6862: PUSH
6863: LD_INT 12
6865: PUSH
6866: LD_INT 13
6868: PUSH
6869: LD_INT 14
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7301
6880: LD_INT 28
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6906
6888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 13
6896: PUSH
6897: LD_INT 14
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: ST_TO_ADDR
6904: GO 7301
6906: LD_INT 29
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6932
6914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_INT 13
6922: PUSH
6923: LD_INT 14
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7301
6932: LD_INT 31
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 6958
6940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7301
6958: LD_INT 26
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6984
6966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 13
6974: PUSH
6975: LD_INT 14
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 7301
6984: LD_INT 42
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 7018
6992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 23
7006: PUSH
7007: LD_INT 24
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 7301
7018: LD_INT 43
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7052
7026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 23
7040: PUSH
7041: LD_INT 24
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7301
7052: LD_INT 44
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7086
7060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 24
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: ST_TO_ADDR
7084: GO 7301
7086: LD_INT 45
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7120
7094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 7301
7120: LD_INT 49
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7154
7128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 23
7142: PUSH
7143: LD_INT 24
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7301
7154: LD_INT 51
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7188
7162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7301
7188: LD_INT 52
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7222
7196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: LD_INT 24
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 7301
7222: LD_INT 53
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7248
7230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 24
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 7301
7248: LD_INT 46
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7274
7256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 23
7264: PUSH
7265: LD_INT 24
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: ST_TO_ADDR
7272: GO 7301
7274: LD_INT 47
7276: DOUBLE
7277: EQUAL
7278: IFTRUE 7282
7280: GO 7300
7282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 23
7290: PUSH
7291: LD_INT 24
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 7301
7300: POP
// result := ( chassis in result ) ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: LD_VAR 0 3
7315: IN
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 3
7321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// result := array ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7341: LD_VAR 0 1
7345: NOT
7346: PUSH
7347: LD_VAR 0 2
7351: NOT
7352: OR
7353: PUSH
7354: LD_VAR 0 3
7358: NOT
7359: OR
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: LD_VAR 0 1
7370: GREATER
7371: OR
7372: PUSH
7373: LD_VAR 0 3
7377: PUSH
7378: LD_VAR 0 1
7382: GREATER
7383: OR
7384: IFFALSE 7388
// exit ;
7386: GO 7684
// if direction then
7388: LD_VAR 0 4
7392: IFFALSE 7456
// begin d := 1 ;
7394: LD_ADDR_VAR 0 9
7398: PUSH
7399: LD_INT 1
7401: ST_TO_ADDR
// if i_from > i_to then
7402: LD_VAR 0 2
7406: PUSH
7407: LD_VAR 0 3
7411: GREATER
7412: IFFALSE 7438
// length := ( array - i_from ) + i_to else
7414: LD_ADDR_VAR 0 11
7418: PUSH
7419: LD_VAR 0 1
7423: PUSH
7424: LD_VAR 0 2
7428: MINUS
7429: PUSH
7430: LD_VAR 0 3
7434: PLUS
7435: ST_TO_ADDR
7436: GO 7454
// length := i_to - i_from ;
7438: LD_ADDR_VAR 0 11
7442: PUSH
7443: LD_VAR 0 3
7447: PUSH
7448: LD_VAR 0 2
7452: MINUS
7453: ST_TO_ADDR
// end else
7454: GO 7517
// begin d := - 1 ;
7456: LD_ADDR_VAR 0 9
7460: PUSH
7461: LD_INT 1
7463: NEG
7464: ST_TO_ADDR
// if i_from > i_to then
7465: LD_VAR 0 2
7469: PUSH
7470: LD_VAR 0 3
7474: GREATER
7475: IFFALSE 7495
// length := i_from - i_to else
7477: LD_ADDR_VAR 0 11
7481: PUSH
7482: LD_VAR 0 2
7486: PUSH
7487: LD_VAR 0 3
7491: MINUS
7492: ST_TO_ADDR
7493: GO 7517
// length := ( array - i_to ) + i_from ;
7495: LD_ADDR_VAR 0 11
7499: PUSH
7500: LD_VAR 0 1
7504: PUSH
7505: LD_VAR 0 3
7509: MINUS
7510: PUSH
7511: LD_VAR 0 2
7515: PLUS
7516: ST_TO_ADDR
// end ; if not length then
7517: LD_VAR 0 11
7521: NOT
7522: IFFALSE 7526
// exit ;
7524: GO 7684
// tmp := array ;
7526: LD_ADDR_VAR 0 10
7530: PUSH
7531: LD_VAR 0 1
7535: ST_TO_ADDR
// for i = 1 to length do
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 11
7550: PUSH
7551: FOR_TO
7552: IFFALSE 7672
// begin for j = 1 to array do
7554: LD_ADDR_VAR 0 7
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_VAR 0 1
7568: PUSH
7569: FOR_TO
7570: IFFALSE 7658
// begin k := j + d ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_VAR 0 7
7581: PUSH
7582: LD_VAR 0 9
7586: PLUS
7587: ST_TO_ADDR
// if k > array then
7588: LD_VAR 0 8
7592: PUSH
7593: LD_VAR 0 1
7597: GREATER
7598: IFFALSE 7608
// k := 1 ;
7600: LD_ADDR_VAR 0 8
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// if not k then
7608: LD_VAR 0 8
7612: NOT
7613: IFFALSE 7625
// k := array ;
7615: LD_ADDR_VAR 0 8
7619: PUSH
7620: LD_VAR 0 1
7624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7625: LD_ADDR_VAR 0 10
7629: PUSH
7630: LD_VAR 0 10
7634: PPUSH
7635: LD_VAR 0 8
7639: PPUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_VAR 0 7
7649: ARRAY
7650: PPUSH
7651: CALL_OW 1
7655: ST_TO_ADDR
// end ;
7656: GO 7569
7658: POP
7659: POP
// array := tmp ;
7660: LD_ADDR_VAR 0 1
7664: PUSH
7665: LD_VAR 0 10
7669: ST_TO_ADDR
// end ;
7670: GO 7551
7672: POP
7673: POP
// result := array ;
7674: LD_ADDR_VAR 0 5
7678: PUSH
7679: LD_VAR 0 1
7683: ST_TO_ADDR
// end ;
7684: LD_VAR 0 5
7688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
// result := 0 ;
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// if not array or not value in array then
7701: LD_VAR 0 1
7705: NOT
7706: PUSH
7707: LD_VAR 0 2
7711: PUSH
7712: LD_VAR 0 1
7716: IN
7717: NOT
7718: OR
7719: IFFALSE 7723
// exit ;
7721: GO 7777
// for i = 1 to array do
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: DOUBLE
7729: LD_INT 1
7731: DEC
7732: ST_TO_ADDR
7733: LD_VAR 0 1
7737: PUSH
7738: FOR_TO
7739: IFFALSE 7775
// if value = array [ i ] then
7741: LD_VAR 0 2
7745: PUSH
7746: LD_VAR 0 1
7750: PUSH
7751: LD_VAR 0 4
7755: ARRAY
7756: EQUAL
7757: IFFALSE 7773
// begin result := i ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_VAR 0 4
7768: ST_TO_ADDR
// exit ;
7769: POP
7770: POP
7771: GO 7777
// end ;
7773: GO 7738
7775: POP
7776: POP
// end ;
7777: LD_VAR 0 3
7781: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7782: LD_INT 0
7784: PPUSH
// vc_chassis := chassis ;
7785: LD_ADDR_OWVAR 37
7789: PUSH
7790: LD_VAR 0 1
7794: ST_TO_ADDR
// vc_engine := engine ;
7795: LD_ADDR_OWVAR 39
7799: PUSH
7800: LD_VAR 0 2
7804: ST_TO_ADDR
// vc_control := control ;
7805: LD_ADDR_OWVAR 38
7809: PUSH
7810: LD_VAR 0 3
7814: ST_TO_ADDR
// vc_weapon := weapon ;
7815: LD_ADDR_OWVAR 40
7819: PUSH
7820: LD_VAR 0 4
7824: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7825: LD_ADDR_OWVAR 41
7829: PUSH
7830: LD_VAR 0 5
7834: ST_TO_ADDR
// end ;
7835: LD_VAR 0 6
7839: RET
// export function WantPlant ( unit ) ; var task ; begin
7840: LD_INT 0
7842: PPUSH
7843: PPUSH
// result := false ;
7844: LD_ADDR_VAR 0 2
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7852: LD_ADDR_VAR 0 3
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 437
7866: ST_TO_ADDR
// if task then
7867: LD_VAR 0 3
7871: IFFALSE 7899
// if task [ 1 ] [ 1 ] = p then
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PUSH
7882: LD_INT 1
7884: ARRAY
7885: PUSH
7886: LD_STRING p
7888: EQUAL
7889: IFFALSE 7899
// result := true ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// end ;
7899: LD_VAR 0 2
7903: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7904: LD_INT 0
7906: PPUSH
7907: PPUSH
7908: PPUSH
7909: PPUSH
// if pos < 1 then
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 1
7917: LESS
7918: IFFALSE 7922
// exit ;
7920: GO 8225
// if pos = 1 then
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 1
7929: EQUAL
7930: IFFALSE 7963
// result := Replace ( arr , pos [ 1 ] , value ) else
7932: LD_ADDR_VAR 0 4
7936: PUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: LD_VAR 0 2
7946: PUSH
7947: LD_INT 1
7949: ARRAY
7950: PPUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 1
7960: ST_TO_ADDR
7961: GO 8225
// begin tmp := arr ;
7963: LD_ADDR_VAR 0 6
7967: PUSH
7968: LD_VAR 0 1
7972: ST_TO_ADDR
// s_arr := [ tmp ] ;
7973: LD_ADDR_VAR 0 7
7977: PUSH
7978: LD_VAR 0 6
7982: PUSH
7983: EMPTY
7984: LIST
7985: ST_TO_ADDR
// for i = 1 to pos - 1 do
7986: LD_ADDR_VAR 0 5
7990: PUSH
7991: DOUBLE
7992: LD_INT 1
7994: DEC
7995: ST_TO_ADDR
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 1
8003: MINUS
8004: PUSH
8005: FOR_TO
8006: IFFALSE 8051
// begin tmp := tmp [ pos [ i ] ] ;
8008: LD_ADDR_VAR 0 6
8012: PUSH
8013: LD_VAR 0 6
8017: PUSH
8018: LD_VAR 0 2
8022: PUSH
8023: LD_VAR 0 5
8027: ARRAY
8028: ARRAY
8029: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8030: LD_ADDR_VAR 0 7
8034: PUSH
8035: LD_VAR 0 7
8039: PUSH
8040: LD_VAR 0 6
8044: PUSH
8045: EMPTY
8046: LIST
8047: ADD
8048: ST_TO_ADDR
// end ;
8049: GO 8005
8051: POP
8052: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8053: LD_ADDR_VAR 0 6
8057: PUSH
8058: LD_VAR 0 6
8062: PPUSH
8063: LD_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: ARRAY
8073: PPUSH
8074: LD_VAR 0 3
8078: PPUSH
8079: CALL_OW 1
8083: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8084: LD_ADDR_VAR 0 7
8088: PUSH
8089: LD_VAR 0 7
8093: PPUSH
8094: LD_VAR 0 7
8098: PPUSH
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 1
8108: ST_TO_ADDR
// for i = s_arr downto 2 do
8109: LD_ADDR_VAR 0 5
8113: PUSH
8114: DOUBLE
8115: LD_VAR 0 7
8119: INC
8120: ST_TO_ADDR
8121: LD_INT 2
8123: PUSH
8124: FOR_DOWNTO
8125: IFFALSE 8209
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8127: LD_ADDR_VAR 0 6
8131: PUSH
8132: LD_VAR 0 7
8136: PUSH
8137: LD_VAR 0 5
8141: PUSH
8142: LD_INT 1
8144: MINUS
8145: ARRAY
8146: PPUSH
8147: LD_VAR 0 2
8151: PUSH
8152: LD_VAR 0 5
8156: PUSH
8157: LD_INT 1
8159: MINUS
8160: ARRAY
8161: PPUSH
8162: LD_VAR 0 7
8166: PUSH
8167: LD_VAR 0 5
8171: ARRAY
8172: PPUSH
8173: CALL_OW 1
8177: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8178: LD_ADDR_VAR 0 7
8182: PUSH
8183: LD_VAR 0 7
8187: PPUSH
8188: LD_VAR 0 5
8192: PUSH
8193: LD_INT 1
8195: MINUS
8196: PPUSH
8197: LD_VAR 0 6
8201: PPUSH
8202: CALL_OW 1
8206: ST_TO_ADDR
// end ;
8207: GO 8124
8209: POP
8210: POP
// result := s_arr [ 1 ] ;
8211: LD_ADDR_VAR 0 4
8215: PUSH
8216: LD_VAR 0 7
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: ST_TO_ADDR
// end ; end ;
8225: LD_VAR 0 4
8229: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8230: LD_INT 0
8232: PPUSH
8233: PPUSH
// if not list then
8234: LD_VAR 0 1
8238: NOT
8239: IFFALSE 8243
// exit ;
8241: GO 8334
// i := list [ pos1 ] ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_VAR 0 1
8252: PUSH
8253: LD_VAR 0 2
8257: ARRAY
8258: ST_TO_ADDR
// if not i then
8259: LD_VAR 0 5
8263: NOT
8264: IFFALSE 8268
// exit ;
8266: GO 8334
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8268: LD_ADDR_VAR 0 1
8272: PUSH
8273: LD_VAR 0 1
8277: PPUSH
8278: LD_VAR 0 2
8282: PPUSH
8283: LD_VAR 0 1
8287: PUSH
8288: LD_VAR 0 3
8292: ARRAY
8293: PPUSH
8294: CALL_OW 1
8298: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8299: LD_ADDR_VAR 0 1
8303: PUSH
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 3
8313: PPUSH
8314: LD_VAR 0 5
8318: PPUSH
8319: CALL_OW 1
8323: ST_TO_ADDR
// result := list ;
8324: LD_ADDR_VAR 0 4
8328: PUSH
8329: LD_VAR 0 1
8333: ST_TO_ADDR
// end ;
8334: LD_VAR 0 4
8338: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8339: LD_INT 0
8341: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8342: LD_ADDR_VAR 0 5
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 250
8356: PPUSH
8357: LD_VAR 0 1
8361: PPUSH
8362: CALL_OW 251
8366: PPUSH
8367: LD_VAR 0 2
8371: PPUSH
8372: LD_VAR 0 3
8376: PPUSH
8377: LD_VAR 0 4
8381: PPUSH
8382: CALL 8760 0 5
8386: ST_TO_ADDR
// end ;
8387: LD_VAR 0 5
8391: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8392: LD_INT 0
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
// if not list or not unit then
8398: LD_VAR 0 2
8402: NOT
8403: PUSH
8404: LD_VAR 0 1
8408: NOT
8409: OR
8410: IFFALSE 8414
// exit ;
8412: GO 8755
// result := [ ] ;
8414: LD_ADDR_VAR 0 5
8418: PUSH
8419: EMPTY
8420: ST_TO_ADDR
// for i in list do
8421: LD_ADDR_VAR 0 6
8425: PUSH
8426: LD_VAR 0 2
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8650
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8434: LD_ADDR_VAR 0 8
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: LD_VAR 0 6
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: LD_VAR 0 6
8457: PUSH
8458: LD_INT 2
8460: ARRAY
8461: PPUSH
8462: CALL_OW 297
8466: ST_TO_ADDR
// if not Count ( result ) then
8467: LD_VAR 0 5
8471: PPUSH
8472: CALL 5044 0 1
8476: NOT
8477: IFFALSE 8510
// begin result := Join ( result , [ i , tmp ] ) ;
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL 40633 0 2
8507: ST_TO_ADDR
// continue ;
8508: GO 8431
// end ; if result [ result ] [ 2 ] <= tmp then
8510: LD_VAR 0 5
8514: PUSH
8515: LD_VAR 0 5
8519: ARRAY
8520: PUSH
8521: LD_INT 2
8523: ARRAY
8524: PUSH
8525: LD_VAR 0 8
8529: LESSEQUAL
8530: IFFALSE 8563
// result := Join ( result , [ i , tmp ] ) else
8532: LD_ADDR_VAR 0 5
8536: PUSH
8537: LD_VAR 0 5
8541: PPUSH
8542: LD_VAR 0 6
8546: PUSH
8547: LD_VAR 0 8
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL 40633 0 2
8560: ST_TO_ADDR
8561: GO 8648
// begin for j := 1 to Count ( result ) do
8563: LD_ADDR_VAR 0 7
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_VAR 0 5
8577: PPUSH
8578: CALL 5044 0 1
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8646
// begin if tmp < result [ j ] [ 2 ] then
8586: LD_VAR 0 8
8590: PUSH
8591: LD_VAR 0 5
8595: PUSH
8596: LD_VAR 0 7
8600: ARRAY
8601: PUSH
8602: LD_INT 2
8604: ARRAY
8605: LESS
8606: IFFALSE 8644
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8608: LD_ADDR_VAR 0 5
8612: PUSH
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: LD_VAR 0 6
8627: PUSH
8628: LD_VAR 0 8
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 2
8641: ST_TO_ADDR
// break ;
8642: GO 8646
// end ; end ;
8644: GO 8583
8646: POP
8647: POP
// end ; end ;
8648: GO 8431
8650: POP
8651: POP
// if result and not asc then
8652: LD_VAR 0 5
8656: PUSH
8657: LD_VAR 0 3
8661: NOT
8662: AND
8663: IFFALSE 8680
// result := ReverseArray ( result ) ;
8665: LD_ADDR_VAR 0 5
8669: PUSH
8670: LD_VAR 0 5
8674: PPUSH
8675: CALL 35920 0 1
8679: ST_TO_ADDR
// tmp := [ ] ;
8680: LD_ADDR_VAR 0 8
8684: PUSH
8685: EMPTY
8686: ST_TO_ADDR
// if mode then
8687: LD_VAR 0 4
8691: IFFALSE 8755
// begin for i := 1 to result do
8693: LD_ADDR_VAR 0 6
8697: PUSH
8698: DOUBLE
8699: LD_INT 1
8701: DEC
8702: ST_TO_ADDR
8703: LD_VAR 0 5
8707: PUSH
8708: FOR_TO
8709: IFFALSE 8743
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8711: LD_ADDR_VAR 0 8
8715: PUSH
8716: LD_VAR 0 8
8720: PPUSH
8721: LD_VAR 0 5
8725: PUSH
8726: LD_VAR 0 6
8730: ARRAY
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL 40633 0 2
8740: ST_TO_ADDR
8741: GO 8708
8743: POP
8744: POP
// result := tmp ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_VAR 0 8
8754: ST_TO_ADDR
// end ; end ;
8755: LD_VAR 0 5
8759: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// if not list then
8766: LD_VAR 0 3
8770: NOT
8771: IFFALSE 8775
// exit ;
8773: GO 9163
// result := [ ] ;
8775: LD_ADDR_VAR 0 6
8779: PUSH
8780: EMPTY
8781: ST_TO_ADDR
// for i in list do
8782: LD_ADDR_VAR 0 7
8786: PUSH
8787: LD_VAR 0 3
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8995
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8795: LD_ADDR_VAR 0 9
8799: PUSH
8800: LD_VAR 0 7
8804: PPUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 297
8819: ST_TO_ADDR
// if not result then
8820: LD_VAR 0 6
8824: NOT
8825: IFFALSE 8851
// result := [ [ i , tmp ] ] else
8827: LD_ADDR_VAR 0 6
8831: PUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_VAR 0 9
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: ST_TO_ADDR
8849: GO 8993
// begin if result [ result ] [ 2 ] < tmp then
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 6
8860: ARRAY
8861: PUSH
8862: LD_INT 2
8864: ARRAY
8865: PUSH
8866: LD_VAR 0 9
8870: LESS
8871: IFFALSE 8913
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8873: LD_ADDR_VAR 0 6
8877: PUSH
8878: LD_VAR 0 6
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: PLUS
8891: PPUSH
8892: LD_VAR 0 7
8896: PUSH
8897: LD_VAR 0 9
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 2
8910: ST_TO_ADDR
8911: GO 8993
// for j = 1 to result do
8913: LD_ADDR_VAR 0 8
8917: PUSH
8918: DOUBLE
8919: LD_INT 1
8921: DEC
8922: ST_TO_ADDR
8923: LD_VAR 0 6
8927: PUSH
8928: FOR_TO
8929: IFFALSE 8991
// begin if tmp < result [ j ] [ 2 ] then
8931: LD_VAR 0 9
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 8
8945: ARRAY
8946: PUSH
8947: LD_INT 2
8949: ARRAY
8950: LESS
8951: IFFALSE 8989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8953: LD_ADDR_VAR 0 6
8957: PUSH
8958: LD_VAR 0 6
8962: PPUSH
8963: LD_VAR 0 8
8967: PPUSH
8968: LD_VAR 0 7
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 2
8986: ST_TO_ADDR
// break ;
8987: GO 8991
// end ; end ;
8989: GO 8928
8991: POP
8992: POP
// end ; end ;
8993: GO 8792
8995: POP
8996: POP
// if result and not asc then
8997: LD_VAR 0 6
9001: PUSH
9002: LD_VAR 0 4
9006: NOT
9007: AND
9008: IFFALSE 9083
// begin tmp := result ;
9010: LD_ADDR_VAR 0 9
9014: PUSH
9015: LD_VAR 0 6
9019: ST_TO_ADDR
// for i = tmp downto 1 do
9020: LD_ADDR_VAR 0 7
9024: PUSH
9025: DOUBLE
9026: LD_VAR 0 9
9030: INC
9031: ST_TO_ADDR
9032: LD_INT 1
9034: PUSH
9035: FOR_DOWNTO
9036: IFFALSE 9081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9038: LD_ADDR_VAR 0 6
9042: PUSH
9043: LD_VAR 0 6
9047: PPUSH
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 7
9057: MINUS
9058: PUSH
9059: LD_INT 1
9061: PLUS
9062: PPUSH
9063: LD_VAR 0 9
9067: PUSH
9068: LD_VAR 0 7
9072: ARRAY
9073: PPUSH
9074: CALL_OW 1
9078: ST_TO_ADDR
9079: GO 9035
9081: POP
9082: POP
// end ; tmp := [ ] ;
9083: LD_ADDR_VAR 0 9
9087: PUSH
9088: EMPTY
9089: ST_TO_ADDR
// if mode then
9090: LD_VAR 0 5
9094: IFFALSE 9163
// begin for i = 1 to result do
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_VAR 0 6
9110: PUSH
9111: FOR_TO
9112: IFFALSE 9151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: LD_VAR 0 9
9123: PPUSH
9124: LD_VAR 0 7
9128: PPUSH
9129: LD_VAR 0 6
9133: PUSH
9134: LD_VAR 0 7
9138: ARRAY
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: CALL_OW 1
9148: ST_TO_ADDR
9149: GO 9111
9151: POP
9152: POP
// result := tmp ;
9153: LD_ADDR_VAR 0 6
9157: PUSH
9158: LD_VAR 0 9
9162: ST_TO_ADDR
// end ; end ;
9163: LD_VAR 0 6
9167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9168: LD_INT 0
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9176: LD_ADDR_VAR 0 5
9180: PUSH
9181: LD_INT 0
9183: PUSH
9184: LD_INT 0
9186: PUSH
9187: LD_INT 0
9189: PUSH
9190: EMPTY
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: ST_TO_ADDR
// if not x or not y then
9198: LD_VAR 0 2
9202: NOT
9203: PUSH
9204: LD_VAR 0 3
9208: NOT
9209: OR
9210: IFFALSE 9214
// exit ;
9212: GO 10864
// if not range then
9214: LD_VAR 0 4
9218: NOT
9219: IFFALSE 9229
// range := 10 ;
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: LD_INT 10
9228: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9229: LD_ADDR_VAR 0 8
9233: PUSH
9234: LD_INT 81
9236: PUSH
9237: LD_VAR 0 1
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 92
9248: PUSH
9249: LD_VAR 0 2
9253: PUSH
9254: LD_VAR 0 3
9258: PUSH
9259: LD_VAR 0 4
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 21
9275: PUSH
9276: LD_INT 3
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// if not tmp then
9297: LD_VAR 0 8
9301: NOT
9302: IFFALSE 9306
// exit ;
9304: GO 10864
// for i in tmp do
9306: LD_ADDR_VAR 0 6
9310: PUSH
9311: LD_VAR 0 8
9315: PUSH
9316: FOR_IN
9317: IFFALSE 10839
// begin points := [ 0 , 0 , 0 ] ;
9319: LD_ADDR_VAR 0 9
9323: PUSH
9324: LD_INT 0
9326: PUSH
9327: LD_INT 0
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
// bpoints := 1 ;
9338: LD_ADDR_VAR 0 10
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9346: LD_VAR 0 6
9350: PPUSH
9351: CALL_OW 247
9355: PUSH
9356: LD_INT 1
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9942
9364: POP
// begin if GetClass ( i ) = 1 then
9365: LD_VAR 0 6
9369: PPUSH
9370: CALL_OW 257
9374: PUSH
9375: LD_INT 1
9377: EQUAL
9378: IFFALSE 9399
// points := [ 10 , 5 , 3 ] ;
9380: LD_ADDR_VAR 0 9
9384: PUSH
9385: LD_INT 10
9387: PUSH
9388: LD_INT 5
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9399: LD_VAR 0 6
9403: PPUSH
9404: CALL_OW 257
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: LD_INT 4
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: IN
9423: IFFALSE 9444
// points := [ 3 , 2 , 1 ] ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 257
9453: PUSH
9454: LD_INT 5
9456: EQUAL
9457: IFFALSE 9478
// points := [ 130 , 5 , 2 ] ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_INT 130
9466: PUSH
9467: LD_INT 5
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 257
9487: PUSH
9488: LD_INT 8
9490: EQUAL
9491: IFFALSE 9512
// points := [ 35 , 35 , 30 ] ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_INT 35
9500: PUSH
9501: LD_INT 35
9503: PUSH
9504: LD_INT 30
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9512: LD_VAR 0 6
9516: PPUSH
9517: CALL_OW 257
9521: PUSH
9522: LD_INT 9
9524: EQUAL
9525: IFFALSE 9546
// points := [ 20 , 55 , 40 ] ;
9527: LD_ADDR_VAR 0 9
9531: PUSH
9532: LD_INT 20
9534: PUSH
9535: LD_INT 55
9537: PUSH
9538: LD_INT 40
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 257
9555: PUSH
9556: LD_INT 12
9558: PUSH
9559: LD_INT 16
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: IN
9566: IFFALSE 9587
// points := [ 5 , 3 , 2 ] ;
9568: LD_ADDR_VAR 0 9
9572: PUSH
9573: LD_INT 5
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 257
9596: PUSH
9597: LD_INT 17
9599: EQUAL
9600: IFFALSE 9621
// points := [ 100 , 50 , 75 ] ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_INT 100
9609: PUSH
9610: LD_INT 50
9612: PUSH
9613: LD_INT 75
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 15
9633: EQUAL
9634: IFFALSE 9655
// points := [ 10 , 5 , 3 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 10
9643: PUSH
9644: LD_INT 5
9646: PUSH
9647: LD_INT 3
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 14
9667: EQUAL
9668: IFFALSE 9689
// points := [ 10 , 0 , 0 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 10
9677: PUSH
9678: LD_INT 0
9680: PUSH
9681: LD_INT 0
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 11
9701: EQUAL
9702: IFFALSE 9723
// points := [ 30 , 10 , 5 ] ;
9704: LD_ADDR_VAR 0 9
9708: PUSH
9709: LD_INT 30
9711: PUSH
9712: LD_INT 10
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9723: LD_VAR 0 1
9727: PPUSH
9728: LD_INT 5
9730: PPUSH
9731: CALL_OW 321
9735: PUSH
9736: LD_INT 2
9738: EQUAL
9739: IFFALSE 9756
// bpoints := bpoints * 1.8 ;
9741: LD_ADDR_VAR 0 10
9745: PUSH
9746: LD_VAR 0 10
9750: PUSH
9751: LD_REAL  1.80000000000000E+0000
9754: MUL
9755: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9756: LD_VAR 0 6
9760: PPUSH
9761: CALL_OW 257
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 4
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: IN
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 51
9792: PPUSH
9793: CALL_OW 321
9797: PUSH
9798: LD_INT 2
9800: EQUAL
9801: AND
9802: IFFALSE 9819
// bpoints := bpoints * 1.2 ;
9804: LD_ADDR_VAR 0 10
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_REAL  1.20000000000000E+0000
9817: MUL
9818: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9819: LD_VAR 0 6
9823: PPUSH
9824: CALL_OW 257
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 9
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: IN
9843: PUSH
9844: LD_VAR 0 1
9848: PPUSH
9849: LD_INT 52
9851: PPUSH
9852: CALL_OW 321
9856: PUSH
9857: LD_INT 2
9859: EQUAL
9860: AND
9861: IFFALSE 9878
// bpoints := bpoints * 1.5 ;
9863: LD_ADDR_VAR 0 10
9867: PUSH
9868: LD_VAR 0 10
9872: PUSH
9873: LD_REAL  1.50000000000000E+0000
9876: MUL
9877: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 66
9885: PPUSH
9886: CALL_OW 321
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: IFFALSE 9911
// bpoints := bpoints * 1.1 ;
9896: LD_ADDR_VAR 0 10
9900: PUSH
9901: LD_VAR 0 10
9905: PUSH
9906: LD_REAL  1.10000000000000E+0000
9909: MUL
9910: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9911: LD_ADDR_VAR 0 10
9915: PUSH
9916: LD_VAR 0 10
9920: PUSH
9921: LD_VAR 0 6
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: CALL_OW 259
9933: PUSH
9934: LD_REAL  1.15000000000000E+0000
9937: MUL
9938: MUL
9939: ST_TO_ADDR
// end ; unit_vehicle :
9940: GO 10768
9942: LD_INT 2
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10756
9950: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 264
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 42
9966: PUSH
9967: LD_INT 24
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 25 , 5 , 3 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 25
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 43
10011: PUSH
10012: LD_INT 25
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: IN
10020: IFFALSE 10041
// points := [ 40 , 15 , 5 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 40
10029: PUSH
10030: LD_INT 15
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: LD_INT 23
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 7 , 25 , 8 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 7
10070: PUSH
10071: LD_INT 25
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 27
10097: PUSH
10098: LD_INT 44
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: IN
10106: IFFALSE 10127
// points := [ 14 , 50 , 16 ] ;
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_INT 14
10115: PUSH
10116: LD_INT 50
10118: PUSH
10119: LD_INT 16
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10127: LD_VAR 0 6
10131: PPUSH
10132: CALL_OW 264
10136: PUSH
10137: LD_INT 6
10139: PUSH
10140: LD_INT 46
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: IN
10147: IFFALSE 10168
// points := [ 32 , 120 , 70 ] ;
10149: LD_ADDR_VAR 0 9
10153: PUSH
10154: LD_INT 32
10156: PUSH
10157: LD_INT 120
10159: PUSH
10160: LD_INT 70
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 264
10177: PUSH
10178: LD_INT 7
10180: PUSH
10181: LD_INT 28
10183: PUSH
10184: LD_INT 45
10186: PUSH
10187: LD_INT 92
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: IN
10196: IFFALSE 10217
// points := [ 35 , 20 , 45 ] ;
10198: LD_ADDR_VAR 0 9
10202: PUSH
10203: LD_INT 35
10205: PUSH
10206: LD_INT 20
10208: PUSH
10209: LD_INT 45
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 264
10226: PUSH
10227: LD_INT 47
10229: PUSH
10230: EMPTY
10231: LIST
10232: IN
10233: IFFALSE 10254
// points := [ 67 , 45 , 75 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 67
10242: PUSH
10243: LD_INT 45
10245: PUSH
10246: LD_INT 75
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 26
10266: PUSH
10267: EMPTY
10268: LIST
10269: IN
10270: IFFALSE 10291
// points := [ 120 , 30 , 80 ] ;
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_INT 120
10279: PUSH
10280: LD_INT 30
10282: PUSH
10283: LD_INT 80
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: EMPTY
10305: LIST
10306: IN
10307: IFFALSE 10328
// points := [ 40 , 1 , 1 ] ;
10309: LD_ADDR_VAR 0 9
10313: PUSH
10314: LD_INT 40
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10328: LD_VAR 0 6
10332: PPUSH
10333: CALL_OW 264
10337: PUSH
10338: LD_INT 29
10340: PUSH
10341: EMPTY
10342: LIST
10343: IN
10344: IFFALSE 10365
// points := [ 70 , 200 , 400 ] ;
10346: LD_ADDR_VAR 0 9
10350: PUSH
10351: LD_INT 70
10353: PUSH
10354: LD_INT 200
10356: PUSH
10357: LD_INT 400
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10365: LD_VAR 0 6
10369: PPUSH
10370: CALL_OW 264
10374: PUSH
10375: LD_INT 14
10377: PUSH
10378: LD_INT 53
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: IFFALSE 10406
// points := [ 40 , 10 , 20 ] ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_INT 40
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 20
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10406: LD_VAR 0 6
10410: PPUSH
10411: CALL_OW 264
10415: PUSH
10416: LD_INT 9
10418: PUSH
10419: EMPTY
10420: LIST
10421: IN
10422: IFFALSE 10443
// points := [ 5 , 70 , 20 ] ;
10424: LD_ADDR_VAR 0 9
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: LD_INT 70
10434: PUSH
10435: LD_INT 20
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 264
10452: PUSH
10453: LD_INT 10
10455: PUSH
10456: EMPTY
10457: LIST
10458: IN
10459: IFFALSE 10480
// points := [ 35 , 110 , 70 ] ;
10461: LD_ADDR_VAR 0 9
10465: PUSH
10466: LD_INT 35
10468: PUSH
10469: LD_INT 110
10471: PUSH
10472: LD_INT 70
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10480: LD_VAR 0 6
10484: PPUSH
10485: CALL_OW 265
10489: PUSH
10490: LD_INT 25
10492: EQUAL
10493: IFFALSE 10514
// points := [ 80 , 65 , 100 ] ;
10495: LD_ADDR_VAR 0 9
10499: PUSH
10500: LD_INT 80
10502: PUSH
10503: LD_INT 65
10505: PUSH
10506: LD_INT 100
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10514: LD_VAR 0 6
10518: PPUSH
10519: CALL_OW 263
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10529: LD_ADDR_VAR 0 10
10533: PUSH
10534: LD_VAR 0 10
10538: PUSH
10539: LD_VAR 0 6
10543: PPUSH
10544: CALL_OW 311
10548: PPUSH
10549: LD_INT 3
10551: PPUSH
10552: CALL_OW 259
10556: PUSH
10557: LD_INT 4
10559: MUL
10560: MUL
10561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10562: LD_VAR 0 6
10566: PPUSH
10567: CALL_OW 263
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: IFFALSE 10626
// begin j := IsControledBy ( i ) ;
10577: LD_ADDR_VAR 0 7
10581: PUSH
10582: LD_VAR 0 6
10586: PPUSH
10587: CALL_OW 312
10591: ST_TO_ADDR
// if j then
10592: LD_VAR 0 7
10596: IFFALSE 10626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10598: LD_ADDR_VAR 0 10
10602: PUSH
10603: LD_VAR 0 10
10607: PUSH
10608: LD_VAR 0 7
10612: PPUSH
10613: LD_INT 3
10615: PPUSH
10616: CALL_OW 259
10620: PUSH
10621: LD_INT 3
10623: MUL
10624: MUL
10625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10626: LD_VAR 0 6
10630: PPUSH
10631: CALL_OW 264
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 6
10641: PUSH
10642: LD_INT 46
10644: PUSH
10645: LD_INT 44
10647: PUSH
10648: LD_INT 47
10650: PUSH
10651: LD_INT 45
10653: PUSH
10654: LD_INT 28
10656: PUSH
10657: LD_INT 7
10659: PUSH
10660: LD_INT 27
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: IN
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_INT 52
10686: PPUSH
10687: CALL_OW 321
10691: PUSH
10692: LD_INT 2
10694: EQUAL
10695: AND
10696: IFFALSE 10713
// bpoints := bpoints * 1.2 ;
10698: LD_ADDR_VAR 0 10
10702: PUSH
10703: LD_VAR 0 10
10707: PUSH
10708: LD_REAL  1.20000000000000E+0000
10711: MUL
10712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10713: LD_VAR 0 6
10717: PPUSH
10718: CALL_OW 264
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 46
10728: PUSH
10729: LD_INT 47
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: IN
10737: IFFALSE 10754
// bpoints := bpoints * 1.2 ;
10739: LD_ADDR_VAR 0 10
10743: PUSH
10744: LD_VAR 0 10
10748: PUSH
10749: LD_REAL  1.20000000000000E+0000
10752: MUL
10753: ST_TO_ADDR
// end ; unit_building :
10754: GO 10768
10756: LD_INT 3
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10767
10764: POP
// ; end ;
10765: GO 10768
10767: POP
// for j = 1 to 3 do
10768: LD_ADDR_VAR 0 7
10772: PUSH
10773: DOUBLE
10774: LD_INT 1
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 3
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10835
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10784: LD_ADDR_VAR 0 5
10788: PUSH
10789: LD_VAR 0 5
10793: PPUSH
10794: LD_VAR 0 7
10798: PPUSH
10799: LD_VAR 0 5
10803: PUSH
10804: LD_VAR 0 7
10808: ARRAY
10809: PUSH
10810: LD_VAR 0 9
10814: PUSH
10815: LD_VAR 0 7
10819: ARRAY
10820: PUSH
10821: LD_VAR 0 10
10825: MUL
10826: PLUS
10827: PPUSH
10828: CALL_OW 1
10832: ST_TO_ADDR
10833: GO 10781
10835: POP
10836: POP
// end ;
10837: GO 9316
10839: POP
10840: POP
// result := Replace ( result , 4 , tmp ) ;
10841: LD_ADDR_VAR 0 5
10845: PUSH
10846: LD_VAR 0 5
10850: PPUSH
10851: LD_INT 4
10853: PPUSH
10854: LD_VAR 0 8
10858: PPUSH
10859: CALL_OW 1
10863: ST_TO_ADDR
// end ;
10864: LD_VAR 0 5
10868: RET
// export function DangerAtRange ( unit , range ) ; begin
10869: LD_INT 0
10871: PPUSH
// if not unit then
10872: LD_VAR 0 1
10876: NOT
10877: IFFALSE 10881
// exit ;
10879: GO 10926
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 255
10895: PPUSH
10896: LD_VAR 0 1
10900: PPUSH
10901: CALL_OW 250
10905: PPUSH
10906: LD_VAR 0 1
10910: PPUSH
10911: CALL_OW 251
10915: PPUSH
10916: LD_VAR 0 2
10920: PPUSH
10921: CALL 9168 0 4
10925: ST_TO_ADDR
// end ;
10926: LD_VAR 0 3
10930: RET
// export function DangerInArea ( side , area ) ; begin
10931: LD_INT 0
10933: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 81
10946: PUSH
10947: LD_VAR 0 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PPUSH
10956: CALL_OW 70
10960: ST_TO_ADDR
// end ;
10961: LD_VAR 0 3
10965: RET
// export function IsExtension ( b ) ; begin
10966: LD_INT 0
10968: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 23
10981: PUSH
10982: LD_INT 20
10984: PUSH
10985: LD_INT 22
10987: PUSH
10988: LD_INT 17
10990: PUSH
10991: LD_INT 24
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 19
10999: PUSH
11000: LD_INT 16
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 18
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: IN
11021: ST_TO_ADDR
// end ;
11022: LD_VAR 0 2
11026: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
11031: PPUSH
// result := [ ] ;
11032: LD_ADDR_VAR 0 4
11036: PUSH
11037: EMPTY
11038: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11039: LD_ADDR_VAR 0 5
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 3
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 70
11063: ST_TO_ADDR
// if not tmp then
11064: LD_VAR 0 5
11068: NOT
11069: IFFALSE 11073
// exit ;
11071: GO 11137
// if checkLink then
11073: LD_VAR 0 3
11077: IFFALSE 11127
// begin for i in tmp do
11079: LD_ADDR_VAR 0 6
11083: PUSH
11084: LD_VAR 0 5
11088: PUSH
11089: FOR_IN
11090: IFFALSE 11125
// if GetBase ( i ) <> base then
11092: LD_VAR 0 6
11096: PPUSH
11097: CALL_OW 274
11101: PUSH
11102: LD_VAR 0 1
11106: NONEQUAL
11107: IFFALSE 11123
// ComLinkToBase ( base , i ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_VAR 0 6
11118: PPUSH
11119: CALL_OW 169
11123: GO 11089
11125: POP
11126: POP
// end ; result := tmp ;
11127: LD_ADDR_VAR 0 4
11131: PUSH
11132: LD_VAR 0 5
11136: ST_TO_ADDR
// end ;
11137: LD_VAR 0 4
11141: RET
// export function ComComplete ( units , b ) ; var i ; begin
11142: LD_INT 0
11144: PPUSH
11145: PPUSH
// if not units then
11146: LD_VAR 0 1
11150: NOT
11151: IFFALSE 11155
// exit ;
11153: GO 11245
// for i in units do
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: FOR_IN
11166: IFFALSE 11243
// if BuildingStatus ( b ) = bs_build then
11168: LD_VAR 0 2
11172: PPUSH
11173: CALL_OW 461
11177: PUSH
11178: LD_INT 1
11180: EQUAL
11181: IFFALSE 11241
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11183: LD_VAR 0 4
11187: PPUSH
11188: LD_STRING h
11190: PUSH
11191: LD_VAR 0 2
11195: PPUSH
11196: CALL_OW 250
11200: PUSH
11201: LD_VAR 0 2
11205: PPUSH
11206: CALL_OW 251
11210: PUSH
11211: LD_VAR 0 2
11215: PUSH
11216: LD_INT 0
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: LD_INT 0
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: PPUSH
11237: CALL_OW 446
11241: GO 11165
11243: POP
11244: POP
// end ;
11245: LD_VAR 0 3
11249: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11250: LD_INT 0
11252: PPUSH
11253: PPUSH
11254: PPUSH
11255: PPUSH
11256: PPUSH
11257: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11258: LD_VAR 0 1
11262: NOT
11263: PUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 263
11273: PUSH
11274: LD_INT 2
11276: NONEQUAL
11277: OR
11278: IFFALSE 11282
// exit ;
11280: GO 11598
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11282: LD_ADDR_VAR 0 6
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_VAR 0 1
11294: PPUSH
11295: CALL_OW 255
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 30
11309: PUSH
11310: LD_INT 36
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 34
11319: PUSH
11320: LD_INT 31
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: ST_TO_ADDR
// if not tmp then
11341: LD_VAR 0 6
11345: NOT
11346: IFFALSE 11350
// exit ;
11348: GO 11598
// result := [ ] ;
11350: LD_ADDR_VAR 0 2
11354: PUSH
11355: EMPTY
11356: ST_TO_ADDR
// for i in tmp do
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_VAR 0 6
11366: PUSH
11367: FOR_IN
11368: IFFALSE 11439
// begin t := UnitsInside ( i ) ;
11370: LD_ADDR_VAR 0 4
11374: PUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: CALL_OW 313
11384: ST_TO_ADDR
// if t then
11385: LD_VAR 0 4
11389: IFFALSE 11437
// for j in t do
11391: LD_ADDR_VAR 0 7
11395: PUSH
11396: LD_VAR 0 4
11400: PUSH
11401: FOR_IN
11402: IFFALSE 11435
// result := Replace ( result , result + 1 , j ) ;
11404: LD_ADDR_VAR 0 2
11408: PUSH
11409: LD_VAR 0 2
11413: PPUSH
11414: LD_VAR 0 2
11418: PUSH
11419: LD_INT 1
11421: PLUS
11422: PPUSH
11423: LD_VAR 0 7
11427: PPUSH
11428: CALL_OW 1
11432: ST_TO_ADDR
11433: GO 11401
11435: POP
11436: POP
// end ;
11437: GO 11367
11439: POP
11440: POP
// if not result then
11441: LD_VAR 0 2
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 11598
// mech := result [ 1 ] ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_VAR 0 2
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: ST_TO_ADDR
// if result > 1 then
11464: LD_VAR 0 2
11468: PUSH
11469: LD_INT 1
11471: GREATER
11472: IFFALSE 11584
// begin for i = 2 to result do
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: DOUBLE
11480: LD_INT 2
11482: DEC
11483: ST_TO_ADDR
11484: LD_VAR 0 2
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11582
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_VAR 0 2
11501: PUSH
11502: LD_VAR 0 3
11506: ARRAY
11507: PPUSH
11508: LD_INT 3
11510: PPUSH
11511: CALL_OW 259
11515: PUSH
11516: LD_VAR 0 2
11520: PUSH
11521: LD_VAR 0 3
11525: ARRAY
11526: PPUSH
11527: CALL_OW 432
11531: MINUS
11532: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11533: LD_VAR 0 4
11537: PUSH
11538: LD_VAR 0 5
11542: PPUSH
11543: LD_INT 3
11545: PPUSH
11546: CALL_OW 259
11550: PUSH
11551: LD_VAR 0 5
11555: PPUSH
11556: CALL_OW 432
11560: MINUS
11561: GREATEREQUAL
11562: IFFALSE 11580
// mech := result [ i ] ;
11564: LD_ADDR_VAR 0 5
11568: PUSH
11569: LD_VAR 0 2
11573: PUSH
11574: LD_VAR 0 3
11578: ARRAY
11579: ST_TO_ADDR
// end ;
11580: GO 11489
11582: POP
11583: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 5
11593: PPUSH
11594: CALL_OW 135
// end ;
11598: LD_VAR 0 2
11602: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11603: LD_INT 0
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
// result := [ ] ;
11618: LD_ADDR_VAR 0 7
11622: PUSH
11623: EMPTY
11624: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 266
11634: PUSH
11635: LD_INT 0
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: IN
11645: NOT
11646: IFFALSE 11650
// exit ;
11648: GO 13284
// if name then
11650: LD_VAR 0 3
11654: IFFALSE 11670
// SetBName ( base_dep , name ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: CALL_OW 500
// base := GetBase ( base_dep ) ;
11670: LD_ADDR_VAR 0 15
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 274
11684: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11685: LD_ADDR_VAR 0 16
11689: PUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 255
11699: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11700: LD_ADDR_VAR 0 17
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 248
11714: ST_TO_ADDR
// if sources then
11715: LD_VAR 0 5
11719: IFFALSE 11766
// for i = 1 to 3 do
11721: LD_ADDR_VAR 0 8
11725: PUSH
11726: DOUBLE
11727: LD_INT 1
11729: DEC
11730: ST_TO_ADDR
11731: LD_INT 3
11733: PUSH
11734: FOR_TO
11735: IFFALSE 11764
// AddResourceType ( base , i , sources [ i ] ) ;
11737: LD_VAR 0 15
11741: PPUSH
11742: LD_VAR 0 8
11746: PPUSH
11747: LD_VAR 0 5
11751: PUSH
11752: LD_VAR 0 8
11756: ARRAY
11757: PPUSH
11758: CALL_OW 276
11762: GO 11734
11764: POP
11765: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11766: LD_ADDR_VAR 0 18
11770: PUSH
11771: LD_VAR 0 15
11775: PPUSH
11776: LD_VAR 0 2
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL 11027 0 3
11788: ST_TO_ADDR
// InitHc ;
11789: CALL_OW 19
// InitUc ;
11793: CALL_OW 18
// uc_side := side ;
11797: LD_ADDR_OWVAR 20
11801: PUSH
11802: LD_VAR 0 16
11806: ST_TO_ADDR
// uc_nation := nation ;
11807: LD_ADDR_OWVAR 21
11811: PUSH
11812: LD_VAR 0 17
11816: ST_TO_ADDR
// if buildings then
11817: LD_VAR 0 18
11821: IFFALSE 13143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11823: LD_ADDR_VAR 0 19
11827: PUSH
11828: LD_VAR 0 18
11832: PPUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 29
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 30
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 72
11865: ST_TO_ADDR
// if tmp then
11866: LD_VAR 0 19
11870: IFFALSE 11918
// for i in tmp do
11872: LD_ADDR_VAR 0 8
11876: PUSH
11877: LD_VAR 0 19
11881: PUSH
11882: FOR_IN
11883: IFFALSE 11916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11885: LD_VAR 0 8
11889: PPUSH
11890: CALL_OW 250
11894: PPUSH
11895: LD_VAR 0 8
11899: PPUSH
11900: CALL_OW 251
11904: PPUSH
11905: LD_VAR 0 16
11909: PPUSH
11910: CALL_OW 441
11914: GO 11882
11916: POP
11917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11918: LD_VAR 0 18
11922: PPUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 33
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: IFFALSE 12043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11957: LD_ADDR_VAR 0 8
11961: PUSH
11962: LD_VAR 0 18
11966: PPUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 32
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 33
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 72
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12041
// begin if not GetBWeapon ( i ) then
12003: LD_VAR 0 8
12007: PPUSH
12008: CALL_OW 269
12012: NOT
12013: IFFALSE 12039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12015: LD_VAR 0 8
12019: PPUSH
12020: LD_VAR 0 8
12024: PPUSH
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL 13289 0 2
12034: PPUSH
12035: CALL_OW 431
// end ;
12039: GO 12000
12041: POP
12042: POP
// end ; for i = 1 to personel do
12043: LD_ADDR_VAR 0 8
12047: PUSH
12048: DOUBLE
12049: LD_INT 1
12051: DEC
12052: ST_TO_ADDR
12053: LD_VAR 0 6
12057: PUSH
12058: FOR_TO
12059: IFFALSE 13123
// begin if i > 4 then
12061: LD_VAR 0 8
12065: PUSH
12066: LD_INT 4
12068: GREATER
12069: IFFALSE 12073
// break ;
12071: GO 13123
// case i of 1 :
12073: LD_VAR 0 8
12077: PUSH
12078: LD_INT 1
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12166
12086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12087: LD_ADDR_VAR 0 12
12091: PUSH
12092: LD_VAR 0 18
12096: PPUSH
12097: LD_INT 22
12099: PUSH
12100: LD_VAR 0 16
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 58
12111: PUSH
12112: EMPTY
12113: LIST
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 32
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 4
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 30
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 72
12163: ST_TO_ADDR
12164: GO 12388
12166: LD_INT 2
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12236
12174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12175: LD_ADDR_VAR 0 12
12179: PUSH
12180: LD_VAR 0 18
12184: PPUSH
12185: LD_INT 22
12187: PUSH
12188: LD_VAR 0 16
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: LD_INT 30
12202: PUSH
12203: LD_INT 0
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 72
12233: ST_TO_ADDR
12234: GO 12388
12236: LD_INT 3
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12306
12244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12245: LD_ADDR_VAR 0 12
12249: PUSH
12250: LD_VAR 0 18
12254: PPUSH
12255: LD_INT 22
12257: PUSH
12258: LD_VAR 0 16
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: LD_INT 30
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 3
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 72
12303: ST_TO_ADDR
12304: GO 12388
12306: LD_INT 4
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12387
12314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12315: LD_ADDR_VAR 0 12
12319: PUSH
12320: LD_VAR 0 18
12324: PPUSH
12325: LD_INT 22
12327: PUSH
12328: LD_VAR 0 16
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 6
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 7
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 8
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 72
12384: ST_TO_ADDR
12385: GO 12388
12387: POP
// if i = 1 then
12388: LD_VAR 0 8
12392: PUSH
12393: LD_INT 1
12395: EQUAL
12396: IFFALSE 12507
// begin tmp := [ ] ;
12398: LD_ADDR_VAR 0 19
12402: PUSH
12403: EMPTY
12404: ST_TO_ADDR
// for j in f do
12405: LD_ADDR_VAR 0 9
12409: PUSH
12410: LD_VAR 0 12
12414: PUSH
12415: FOR_IN
12416: IFFALSE 12489
// if GetBType ( j ) = b_bunker then
12418: LD_VAR 0 9
12422: PPUSH
12423: CALL_OW 266
12427: PUSH
12428: LD_INT 32
12430: EQUAL
12431: IFFALSE 12458
// tmp := Insert ( tmp , 1 , j ) else
12433: LD_ADDR_VAR 0 19
12437: PUSH
12438: LD_VAR 0 19
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: LD_VAR 0 9
12450: PPUSH
12451: CALL_OW 2
12455: ST_TO_ADDR
12456: GO 12487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12458: LD_ADDR_VAR 0 19
12462: PUSH
12463: LD_VAR 0 19
12467: PPUSH
12468: LD_VAR 0 19
12472: PUSH
12473: LD_INT 1
12475: PLUS
12476: PPUSH
12477: LD_VAR 0 9
12481: PPUSH
12482: CALL_OW 2
12486: ST_TO_ADDR
12487: GO 12415
12489: POP
12490: POP
// if tmp then
12491: LD_VAR 0 19
12495: IFFALSE 12507
// f := tmp ;
12497: LD_ADDR_VAR 0 12
12501: PUSH
12502: LD_VAR 0 19
12506: ST_TO_ADDR
// end ; x := personel [ i ] ;
12507: LD_ADDR_VAR 0 13
12511: PUSH
12512: LD_VAR 0 6
12516: PUSH
12517: LD_VAR 0 8
12521: ARRAY
12522: ST_TO_ADDR
// if x = - 1 then
12523: LD_VAR 0 13
12527: PUSH
12528: LD_INT 1
12530: NEG
12531: EQUAL
12532: IFFALSE 12741
// begin for j in f do
12534: LD_ADDR_VAR 0 9
12538: PUSH
12539: LD_VAR 0 12
12543: PUSH
12544: FOR_IN
12545: IFFALSE 12737
// repeat InitHc ;
12547: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12551: LD_VAR 0 9
12555: PPUSH
12556: CALL_OW 266
12560: PUSH
12561: LD_INT 5
12563: EQUAL
12564: IFFALSE 12634
// begin if UnitsInside ( j ) < 3 then
12566: LD_VAR 0 9
12570: PPUSH
12571: CALL_OW 313
12575: PUSH
12576: LD_INT 3
12578: LESS
12579: IFFALSE 12615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12581: LD_INT 0
12583: PPUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 8
12589: PUSH
12590: LD_INT 9
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_VAR 0 17
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 4
12608: PPUSH
12609: CALL_OW 380
12613: GO 12632
// PrepareHuman ( false , i , skill ) ;
12615: LD_INT 0
12617: PPUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_VAR 0 4
12627: PPUSH
12628: CALL_OW 380
// end else
12632: GO 12651
// PrepareHuman ( false , i , skill ) ;
12634: LD_INT 0
12636: PPUSH
12637: LD_VAR 0 8
12641: PPUSH
12642: LD_VAR 0 4
12646: PPUSH
12647: CALL_OW 380
// un := CreateHuman ;
12651: LD_ADDR_VAR 0 14
12655: PUSH
12656: CALL_OW 44
12660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12661: LD_ADDR_VAR 0 7
12665: PUSH
12666: LD_VAR 0 7
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 14
12678: PPUSH
12679: CALL_OW 2
12683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12684: LD_VAR 0 14
12688: PPUSH
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12698: LD_VAR 0 9
12702: PPUSH
12703: CALL_OW 313
12707: PUSH
12708: LD_INT 6
12710: EQUAL
12711: PUSH
12712: LD_VAR 0 9
12716: PPUSH
12717: CALL_OW 266
12721: PUSH
12722: LD_INT 32
12724: PUSH
12725: LD_INT 31
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: IN
12732: OR
12733: IFFALSE 12547
12735: GO 12544
12737: POP
12738: POP
// end else
12739: GO 13121
// for j = 1 to x do
12741: LD_ADDR_VAR 0 9
12745: PUSH
12746: DOUBLE
12747: LD_INT 1
12749: DEC
12750: ST_TO_ADDR
12751: LD_VAR 0 13
12755: PUSH
12756: FOR_TO
12757: IFFALSE 13119
// begin InitHc ;
12759: CALL_OW 19
// if not f then
12763: LD_VAR 0 12
12767: NOT
12768: IFFALSE 12857
// begin PrepareHuman ( false , i , skill ) ;
12770: LD_INT 0
12772: PPUSH
12773: LD_VAR 0 8
12777: PPUSH
12778: LD_VAR 0 4
12782: PPUSH
12783: CALL_OW 380
// un := CreateHuman ;
12787: LD_ADDR_VAR 0 14
12791: PUSH
12792: CALL_OW 44
12796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12797: LD_ADDR_VAR 0 7
12801: PUSH
12802: LD_VAR 0 7
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 14
12814: PPUSH
12815: CALL_OW 2
12819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12820: LD_VAR 0 14
12824: PPUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 250
12834: PPUSH
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 251
12844: PPUSH
12845: LD_INT 10
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 50
// continue ;
12855: GO 12756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12857: LD_VAR 0 12
12861: PUSH
12862: LD_INT 1
12864: ARRAY
12865: PPUSH
12866: CALL_OW 313
12870: PUSH
12871: LD_VAR 0 12
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: PPUSH
12880: CALL_OW 266
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: LD_INT 31
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: IN
12895: AND
12896: PUSH
12897: LD_VAR 0 12
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PPUSH
12906: CALL_OW 313
12910: PUSH
12911: LD_INT 6
12913: EQUAL
12914: OR
12915: IFFALSE 12935
// f := Delete ( f , 1 ) ;
12917: LD_ADDR_VAR 0 12
12921: PUSH
12922: LD_VAR 0 12
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: CALL_OW 3
12934: ST_TO_ADDR
// if not f then
12935: LD_VAR 0 12
12939: NOT
12940: IFFALSE 12958
// begin x := x + 2 ;
12942: LD_ADDR_VAR 0 13
12946: PUSH
12947: LD_VAR 0 13
12951: PUSH
12952: LD_INT 2
12954: PLUS
12955: ST_TO_ADDR
// continue ;
12956: GO 12756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12958: LD_VAR 0 12
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 266
12971: PUSH
12972: LD_INT 5
12974: EQUAL
12975: IFFALSE 13049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12977: LD_VAR 0 12
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: PPUSH
12986: CALL_OW 313
12990: PUSH
12991: LD_INT 3
12993: LESS
12994: IFFALSE 13030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12996: LD_INT 0
12998: PPUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: LD_INT 9
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_VAR 0 17
13017: ARRAY
13018: PPUSH
13019: LD_VAR 0 4
13023: PPUSH
13024: CALL_OW 380
13028: GO 13047
// PrepareHuman ( false , i , skill ) ;
13030: LD_INT 0
13032: PPUSH
13033: LD_VAR 0 8
13037: PPUSH
13038: LD_VAR 0 4
13042: PPUSH
13043: CALL_OW 380
// end else
13047: GO 13066
// PrepareHuman ( false , i , skill ) ;
13049: LD_INT 0
13051: PPUSH
13052: LD_VAR 0 8
13056: PPUSH
13057: LD_VAR 0 4
13061: PPUSH
13062: CALL_OW 380
// un := CreateHuman ;
13066: LD_ADDR_VAR 0 14
13070: PUSH
13071: CALL_OW 44
13075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13076: LD_ADDR_VAR 0 7
13080: PUSH
13081: LD_VAR 0 7
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_VAR 0 14
13093: PPUSH
13094: CALL_OW 2
13098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13099: LD_VAR 0 14
13103: PPUSH
13104: LD_VAR 0 12
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 52
// end ;
13117: GO 12756
13119: POP
13120: POP
// end ;
13121: GO 12058
13123: POP
13124: POP
// result := result ^ buildings ;
13125: LD_ADDR_VAR 0 7
13129: PUSH
13130: LD_VAR 0 7
13134: PUSH
13135: LD_VAR 0 18
13139: ADD
13140: ST_TO_ADDR
// end else
13141: GO 13284
// begin for i = 1 to personel do
13143: LD_ADDR_VAR 0 8
13147: PUSH
13148: DOUBLE
13149: LD_INT 1
13151: DEC
13152: ST_TO_ADDR
13153: LD_VAR 0 6
13157: PUSH
13158: FOR_TO
13159: IFFALSE 13282
// begin if i > 4 then
13161: LD_VAR 0 8
13165: PUSH
13166: LD_INT 4
13168: GREATER
13169: IFFALSE 13173
// break ;
13171: GO 13282
// x := personel [ i ] ;
13173: LD_ADDR_VAR 0 13
13177: PUSH
13178: LD_VAR 0 6
13182: PUSH
13183: LD_VAR 0 8
13187: ARRAY
13188: ST_TO_ADDR
// if x = - 1 then
13189: LD_VAR 0 13
13193: PUSH
13194: LD_INT 1
13196: NEG
13197: EQUAL
13198: IFFALSE 13202
// continue ;
13200: GO 13158
// PrepareHuman ( false , i , skill ) ;
13202: LD_INT 0
13204: PPUSH
13205: LD_VAR 0 8
13209: PPUSH
13210: LD_VAR 0 4
13214: PPUSH
13215: CALL_OW 380
// un := CreateHuman ;
13219: LD_ADDR_VAR 0 14
13223: PUSH
13224: CALL_OW 44
13228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13229: LD_VAR 0 14
13233: PPUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 250
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 251
13253: PPUSH
13254: LD_INT 10
13256: PPUSH
13257: LD_INT 0
13259: PPUSH
13260: CALL_OW 50
// result := result ^ un ;
13264: LD_ADDR_VAR 0 7
13268: PUSH
13269: LD_VAR 0 7
13273: PUSH
13274: LD_VAR 0 14
13278: ADD
13279: ST_TO_ADDR
// end ;
13280: GO 13158
13282: POP
13283: POP
// end ; end ;
13284: LD_VAR 0 7
13288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
13305: PPUSH
13306: PPUSH
// result := false ;
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13315: LD_VAR 0 1
13319: NOT
13320: PUSH
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 266
13330: PUSH
13331: LD_INT 32
13333: PUSH
13334: LD_INT 33
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: IN
13341: NOT
13342: OR
13343: IFFALSE 13347
// exit ;
13345: GO 14456
// nat := GetNation ( tower ) ;
13347: LD_ADDR_VAR 0 12
13351: PUSH
13352: LD_VAR 0 1
13356: PPUSH
13357: CALL_OW 248
13361: ST_TO_ADDR
// side := GetSide ( tower ) ;
13362: LD_ADDR_VAR 0 16
13366: PUSH
13367: LD_VAR 0 1
13371: PPUSH
13372: CALL_OW 255
13376: ST_TO_ADDR
// x := GetX ( tower ) ;
13377: LD_ADDR_VAR 0 10
13381: PUSH
13382: LD_VAR 0 1
13386: PPUSH
13387: CALL_OW 250
13391: ST_TO_ADDR
// y := GetY ( tower ) ;
13392: LD_ADDR_VAR 0 11
13396: PUSH
13397: LD_VAR 0 1
13401: PPUSH
13402: CALL_OW 251
13406: ST_TO_ADDR
// if not x or not y then
13407: LD_VAR 0 10
13411: NOT
13412: PUSH
13413: LD_VAR 0 11
13417: NOT
13418: OR
13419: IFFALSE 13423
// exit ;
13421: GO 14456
// weapon := 0 ;
13423: LD_ADDR_VAR 0 18
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// fac_list := [ ] ;
13431: LD_ADDR_VAR 0 17
13435: PUSH
13436: EMPTY
13437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13438: LD_ADDR_VAR 0 6
13442: PUSH
13443: LD_VAR 0 1
13447: PPUSH
13448: CALL_OW 274
13452: PPUSH
13453: LD_VAR 0 2
13457: PPUSH
13458: LD_INT 0
13460: PPUSH
13461: CALL 11027 0 3
13465: PPUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 72
13480: ST_TO_ADDR
// if not factories then
13481: LD_VAR 0 6
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 14456
// for i in factories do
13490: LD_ADDR_VAR 0 8
13494: PUSH
13495: LD_VAR 0 6
13499: PUSH
13500: FOR_IN
13501: IFFALSE 13526
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13503: LD_ADDR_VAR 0 17
13507: PUSH
13508: LD_VAR 0 17
13512: PUSH
13513: LD_VAR 0 8
13517: PPUSH
13518: CALL_OW 478
13522: UNION
13523: ST_TO_ADDR
13524: GO 13500
13526: POP
13527: POP
// if not fac_list then
13528: LD_VAR 0 17
13532: NOT
13533: IFFALSE 13537
// exit ;
13535: GO 14456
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13537: LD_ADDR_VAR 0 5
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: LD_INT 9
13550: PUSH
13551: LD_INT 10
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 7
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 27
13574: PUSH
13575: LD_INT 28
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 30
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 43
13592: PUSH
13593: LD_INT 44
13595: PUSH
13596: LD_INT 46
13598: PUSH
13599: LD_INT 45
13601: PUSH
13602: LD_INT 47
13604: PUSH
13605: LD_INT 49
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_VAR 0 12
13625: ARRAY
13626: ST_TO_ADDR
// list := list isect fac_list ;
13627: LD_ADDR_VAR 0 5
13631: PUSH
13632: LD_VAR 0 5
13636: PUSH
13637: LD_VAR 0 17
13641: ISECT
13642: ST_TO_ADDR
// if not list then
13643: LD_VAR 0 5
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 14456
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13652: LD_VAR 0 12
13656: PUSH
13657: LD_INT 3
13659: EQUAL
13660: PUSH
13661: LD_INT 49
13663: PUSH
13664: LD_VAR 0 5
13668: IN
13669: AND
13670: PUSH
13671: LD_INT 31
13673: PPUSH
13674: LD_VAR 0 16
13678: PPUSH
13679: CALL_OW 321
13683: PUSH
13684: LD_INT 2
13686: EQUAL
13687: AND
13688: IFFALSE 13748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 16
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 35
13704: PUSH
13705: LD_INT 49
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 91
13714: PUSH
13715: LD_VAR 0 1
13719: PUSH
13720: LD_INT 10
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: NOT
13738: IFFALSE 13748
// weapon := ru_time_lapser ;
13740: LD_ADDR_VAR 0 18
13744: PUSH
13745: LD_INT 49
13747: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13748: LD_VAR 0 12
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: IN
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_VAR 0 5
13771: IN
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_VAR 0 5
13780: IN
13781: OR
13782: AND
13783: PUSH
13784: LD_INT 6
13786: PPUSH
13787: LD_VAR 0 16
13791: PPUSH
13792: CALL_OW 321
13796: PUSH
13797: LD_INT 2
13799: EQUAL
13800: AND
13801: IFFALSE 13966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13803: LD_INT 22
13805: PUSH
13806: LD_VAR 0 16
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 35
13820: PUSH
13821: LD_INT 11
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 35
13830: PUSH
13831: LD_INT 30
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 91
13845: PUSH
13846: LD_VAR 0 1
13850: PUSH
13851: LD_INT 18
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: NOT
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_VAR 0 16
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 30
13887: PUSH
13888: LD_INT 32
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 33
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 91
13912: PUSH
13913: LD_VAR 0 1
13917: PUSH
13918: LD_INT 12
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: AND
13943: IFFALSE 13966
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13945: LD_ADDR_VAR 0 18
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 30
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_VAR 0 12
13964: ARRAY
13965: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13966: LD_VAR 0 18
13970: NOT
13971: PUSH
13972: LD_INT 40
13974: PPUSH
13975: LD_VAR 0 16
13979: PPUSH
13980: CALL_OW 321
13984: PUSH
13985: LD_INT 2
13987: EQUAL
13988: AND
13989: PUSH
13990: LD_INT 7
13992: PUSH
13993: LD_VAR 0 5
13997: IN
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_VAR 0 5
14006: IN
14007: OR
14008: PUSH
14009: LD_INT 45
14011: PUSH
14012: LD_VAR 0 5
14016: IN
14017: OR
14018: AND
14019: IFFALSE 14273
// begin hex := GetHexInfo ( x , y ) ;
14021: LD_ADDR_VAR 0 4
14025: PUSH
14026: LD_VAR 0 10
14030: PPUSH
14031: LD_VAR 0 11
14035: PPUSH
14036: CALL_OW 546
14040: ST_TO_ADDR
// if hex [ 1 ] then
14041: LD_VAR 0 4
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: IFFALSE 14053
// exit ;
14051: GO 14456
// height := hex [ 2 ] ;
14053: LD_ADDR_VAR 0 15
14057: PUSH
14058: LD_VAR 0 4
14062: PUSH
14063: LD_INT 2
14065: ARRAY
14066: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14067: LD_ADDR_VAR 0 14
14071: PUSH
14072: LD_INT 0
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: LD_INT 5
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: ST_TO_ADDR
// for i in tmp do
14090: LD_ADDR_VAR 0 8
14094: PUSH
14095: LD_VAR 0 14
14099: PUSH
14100: FOR_IN
14101: IFFALSE 14271
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14103: LD_ADDR_VAR 0 9
14107: PUSH
14108: LD_VAR 0 10
14112: PPUSH
14113: LD_VAR 0 8
14117: PPUSH
14118: LD_INT 5
14120: PPUSH
14121: CALL_OW 272
14125: PUSH
14126: LD_VAR 0 11
14130: PPUSH
14131: LD_VAR 0 8
14135: PPUSH
14136: LD_INT 5
14138: PPUSH
14139: CALL_OW 273
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14148: LD_VAR 0 9
14152: PUSH
14153: LD_INT 1
14155: ARRAY
14156: PPUSH
14157: LD_VAR 0 9
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: PPUSH
14166: CALL_OW 488
14170: IFFALSE 14269
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14172: LD_ADDR_VAR 0 4
14176: PUSH
14177: LD_VAR 0 9
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PPUSH
14186: LD_VAR 0 9
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: CALL_OW 546
14199: ST_TO_ADDR
// if hex [ 1 ] then
14200: LD_VAR 0 4
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: IFFALSE 14212
// continue ;
14210: GO 14100
// h := hex [ 2 ] ;
14212: LD_ADDR_VAR 0 13
14216: PUSH
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: ST_TO_ADDR
// if h + 7 < height then
14226: LD_VAR 0 13
14230: PUSH
14231: LD_INT 7
14233: PLUS
14234: PUSH
14235: LD_VAR 0 15
14239: LESS
14240: IFFALSE 14269
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14242: LD_ADDR_VAR 0 18
14246: PUSH
14247: LD_INT 7
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 45
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_VAR 0 12
14265: ARRAY
14266: ST_TO_ADDR
// break ;
14267: GO 14271
// end ; end ; end ;
14269: GO 14100
14271: POP
14272: POP
// end ; if not weapon then
14273: LD_VAR 0 18
14277: NOT
14278: IFFALSE 14338
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14280: LD_ADDR_VAR 0 5
14284: PUSH
14285: LD_VAR 0 5
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: LD_INT 49
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: DIFF
14304: ST_TO_ADDR
// if not list then
14305: LD_VAR 0 5
14309: NOT
14310: IFFALSE 14314
// exit ;
14312: GO 14456
// weapon := list [ rand ( 1 , list ) ] ;
14314: LD_ADDR_VAR 0 18
14318: PUSH
14319: LD_VAR 0 5
14323: PUSH
14324: LD_INT 1
14326: PPUSH
14327: LD_VAR 0 5
14331: PPUSH
14332: CALL_OW 12
14336: ARRAY
14337: ST_TO_ADDR
// end ; if weapon then
14338: LD_VAR 0 18
14342: IFFALSE 14456
// begin tmp := CostOfWeapon ( weapon ) ;
14344: LD_ADDR_VAR 0 14
14348: PUSH
14349: LD_VAR 0 18
14353: PPUSH
14354: CALL_OW 451
14358: ST_TO_ADDR
// j := GetBase ( tower ) ;
14359: LD_ADDR_VAR 0 9
14363: PUSH
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 274
14373: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14374: LD_VAR 0 9
14378: PPUSH
14379: LD_INT 1
14381: PPUSH
14382: CALL_OW 275
14386: PUSH
14387: LD_VAR 0 14
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: GREATEREQUAL
14396: PUSH
14397: LD_VAR 0 9
14401: PPUSH
14402: LD_INT 2
14404: PPUSH
14405: CALL_OW 275
14409: PUSH
14410: LD_VAR 0 14
14414: PUSH
14415: LD_INT 2
14417: ARRAY
14418: GREATEREQUAL
14419: AND
14420: PUSH
14421: LD_VAR 0 9
14425: PPUSH
14426: LD_INT 3
14428: PPUSH
14429: CALL_OW 275
14433: PUSH
14434: LD_VAR 0 14
14438: PUSH
14439: LD_INT 3
14441: ARRAY
14442: GREATEREQUAL
14443: AND
14444: IFFALSE 14456
// result := weapon ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_VAR 0 18
14455: ST_TO_ADDR
// end ; end ;
14456: LD_VAR 0 3
14460: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14461: LD_INT 0
14463: PPUSH
14464: PPUSH
// result := true ;
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// if array1 = array2 then
14473: LD_VAR 0 1
14477: PUSH
14478: LD_VAR 0 2
14482: EQUAL
14483: IFFALSE 14543
// begin for i = 1 to array1 do
14485: LD_ADDR_VAR 0 4
14489: PUSH
14490: DOUBLE
14491: LD_INT 1
14493: DEC
14494: ST_TO_ADDR
14495: LD_VAR 0 1
14499: PUSH
14500: FOR_TO
14501: IFFALSE 14539
// if array1 [ i ] <> array2 [ i ] then
14503: LD_VAR 0 1
14507: PUSH
14508: LD_VAR 0 4
14512: ARRAY
14513: PUSH
14514: LD_VAR 0 2
14518: PUSH
14519: LD_VAR 0 4
14523: ARRAY
14524: NONEQUAL
14525: IFFALSE 14537
// begin result := false ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// break ;
14535: GO 14539
// end ;
14537: GO 14500
14539: POP
14540: POP
// end else
14541: GO 14551
// result := false ;
14543: LD_ADDR_VAR 0 3
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// end ;
14551: LD_VAR 0 3
14555: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14556: LD_INT 0
14558: PPUSH
14559: PPUSH
// if not array1 or not array2 then
14560: LD_VAR 0 1
14564: NOT
14565: PUSH
14566: LD_VAR 0 2
14570: NOT
14571: OR
14572: IFFALSE 14576
// exit ;
14574: GO 14640
// result := true ;
14576: LD_ADDR_VAR 0 3
14580: PUSH
14581: LD_INT 1
14583: ST_TO_ADDR
// for i = 1 to array1 do
14584: LD_ADDR_VAR 0 4
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 1
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14638
// if array1 [ i ] <> array2 [ i ] then
14602: LD_VAR 0 1
14606: PUSH
14607: LD_VAR 0 4
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 2
14617: PUSH
14618: LD_VAR 0 4
14622: ARRAY
14623: NONEQUAL
14624: IFFALSE 14636
// begin result := false ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// break ;
14634: GO 14638
// end ;
14636: GO 14599
14638: POP
14639: POP
// end ;
14640: LD_VAR 0 3
14644: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
14649: PPUSH
// pom := GetBase ( fac ) ;
14650: LD_ADDR_VAR 0 5
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 274
14664: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14665: LD_ADDR_VAR 0 4
14669: PUSH
14670: LD_VAR 0 2
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 2
14686: ARRAY
14687: PPUSH
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 3
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_INT 4
14704: ARRAY
14705: PPUSH
14706: CALL_OW 449
14710: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_VAR 0 5
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 275
14728: PUSH
14729: LD_VAR 0 4
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: GREATEREQUAL
14738: PUSH
14739: LD_VAR 0 5
14743: PPUSH
14744: LD_INT 2
14746: PPUSH
14747: CALL_OW 275
14751: PUSH
14752: LD_VAR 0 4
14756: PUSH
14757: LD_INT 2
14759: ARRAY
14760: GREATEREQUAL
14761: AND
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_INT 3
14770: PPUSH
14771: CALL_OW 275
14775: PUSH
14776: LD_VAR 0 4
14780: PUSH
14781: LD_INT 3
14783: ARRAY
14784: GREATEREQUAL
14785: AND
14786: ST_TO_ADDR
// end ;
14787: LD_VAR 0 3
14791: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
// pom := GetBase ( building ) ;
14798: LD_ADDR_VAR 0 3
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 274
14812: ST_TO_ADDR
// if not pom then
14813: LD_VAR 0 3
14817: NOT
14818: IFFALSE 14822
// exit ;
14820: GO 14992
// btype := GetBType ( building ) ;
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 266
14836: ST_TO_ADDR
// if btype = b_armoury then
14837: LD_VAR 0 5
14841: PUSH
14842: LD_INT 4
14844: EQUAL
14845: IFFALSE 14855
// btype := b_barracks ;
14847: LD_ADDR_VAR 0 5
14851: PUSH
14852: LD_INT 5
14854: ST_TO_ADDR
// if btype = b_depot then
14855: LD_VAR 0 5
14859: PUSH
14860: LD_INT 0
14862: EQUAL
14863: IFFALSE 14873
// btype := b_warehouse ;
14865: LD_ADDR_VAR 0 5
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// if btype = b_workshop then
14873: LD_VAR 0 5
14877: PUSH
14878: LD_INT 2
14880: EQUAL
14881: IFFALSE 14891
// btype := b_factory ;
14883: LD_ADDR_VAR 0 5
14887: PUSH
14888: LD_INT 3
14890: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14891: LD_ADDR_VAR 0 4
14895: PUSH
14896: LD_VAR 0 5
14900: PPUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 248
14910: PPUSH
14911: CALL_OW 450
14915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_VAR 0 3
14925: PPUSH
14926: LD_INT 1
14928: PPUSH
14929: CALL_OW 275
14933: PUSH
14934: LD_VAR 0 4
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: GREATEREQUAL
14943: PUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: CALL_OW 275
14956: PUSH
14957: LD_VAR 0 4
14961: PUSH
14962: LD_INT 2
14964: ARRAY
14965: GREATEREQUAL
14966: AND
14967: PUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 3
14975: PPUSH
14976: CALL_OW 275
14980: PUSH
14981: LD_VAR 0 4
14985: PUSH
14986: LD_INT 3
14988: ARRAY
14989: GREATEREQUAL
14990: AND
14991: ST_TO_ADDR
// end ;
14992: LD_VAR 0 2
14996: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
15001: PPUSH
// pom := GetBase ( building ) ;
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 274
15016: ST_TO_ADDR
// if not pom then
15017: LD_VAR 0 4
15021: NOT
15022: IFFALSE 15026
// exit ;
15024: GO 15127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_VAR 0 2
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 248
15045: PPUSH
15046: CALL_OW 450
15050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 4
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 275
15068: PUSH
15069: LD_VAR 0 5
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: GREATEREQUAL
15078: PUSH
15079: LD_VAR 0 4
15083: PPUSH
15084: LD_INT 2
15086: PPUSH
15087: CALL_OW 275
15091: PUSH
15092: LD_VAR 0 5
15096: PUSH
15097: LD_INT 2
15099: ARRAY
15100: GREATEREQUAL
15101: AND
15102: PUSH
15103: LD_VAR 0 4
15107: PPUSH
15108: LD_INT 3
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 3
15123: ARRAY
15124: GREATEREQUAL
15125: AND
15126: ST_TO_ADDR
// end ;
15127: LD_VAR 0 3
15131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
// result := false ;
15145: LD_ADDR_VAR 0 8
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15153: LD_VAR 0 5
15157: NOT
15158: PUSH
15159: LD_VAR 0 1
15163: NOT
15164: OR
15165: PUSH
15166: LD_VAR 0 2
15170: NOT
15171: OR
15172: PUSH
15173: LD_VAR 0 3
15177: NOT
15178: OR
15179: IFFALSE 15183
// exit ;
15181: GO 15997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15183: LD_ADDR_VAR 0 14
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: LD_VAR 0 2
15197: PPUSH
15198: LD_VAR 0 3
15202: PPUSH
15203: LD_VAR 0 4
15207: PPUSH
15208: LD_VAR 0 5
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PPUSH
15217: CALL_OW 248
15221: PPUSH
15222: LD_INT 0
15224: PPUSH
15225: CALL 17250 0 6
15229: ST_TO_ADDR
// if not hexes then
15230: LD_VAR 0 14
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15997
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15239: LD_ADDR_VAR 0 17
15243: PUSH
15244: LD_VAR 0 5
15248: PPUSH
15249: LD_INT 22
15251: PUSH
15252: LD_VAR 0 13
15256: PPUSH
15257: CALL_OW 255
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 72
15302: ST_TO_ADDR
// for i = 1 to hexes do
15303: LD_ADDR_VAR 0 9
15307: PUSH
15308: DOUBLE
15309: LD_INT 1
15311: DEC
15312: ST_TO_ADDR
15313: LD_VAR 0 14
15317: PUSH
15318: FOR_TO
15319: IFFALSE 15995
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15321: LD_ADDR_VAR 0 13
15325: PUSH
15326: LD_VAR 0 14
15330: PUSH
15331: LD_VAR 0 9
15335: ARRAY
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: PPUSH
15341: LD_VAR 0 14
15345: PUSH
15346: LD_VAR 0 9
15350: ARRAY
15351: PUSH
15352: LD_INT 2
15354: ARRAY
15355: PPUSH
15356: CALL_OW 428
15360: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15361: LD_VAR 0 14
15365: PUSH
15366: LD_VAR 0 9
15370: ARRAY
15371: PUSH
15372: LD_INT 1
15374: ARRAY
15375: PPUSH
15376: LD_VAR 0 14
15380: PUSH
15381: LD_VAR 0 9
15385: ARRAY
15386: PUSH
15387: LD_INT 2
15389: ARRAY
15390: PPUSH
15391: CALL_OW 351
15395: PUSH
15396: LD_VAR 0 14
15400: PUSH
15401: LD_VAR 0 9
15405: ARRAY
15406: PUSH
15407: LD_INT 1
15409: ARRAY
15410: PPUSH
15411: LD_VAR 0 14
15415: PUSH
15416: LD_VAR 0 9
15420: ARRAY
15421: PUSH
15422: LD_INT 2
15424: ARRAY
15425: PPUSH
15426: CALL_OW 488
15430: NOT
15431: OR
15432: PUSH
15433: LD_VAR 0 13
15437: PPUSH
15438: CALL_OW 247
15442: PUSH
15443: LD_INT 3
15445: EQUAL
15446: OR
15447: IFFALSE 15453
// exit ;
15449: POP
15450: POP
15451: GO 15997
// if not tmp then
15453: LD_VAR 0 13
15457: NOT
15458: IFFALSE 15462
// continue ;
15460: GO 15318
// result := true ;
15462: LD_ADDR_VAR 0 8
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15470: LD_VAR 0 6
15474: PUSH
15475: LD_VAR 0 13
15479: PPUSH
15480: CALL_OW 247
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: AND
15489: PUSH
15490: LD_VAR 0 13
15494: PPUSH
15495: CALL_OW 263
15499: PUSH
15500: LD_INT 1
15502: EQUAL
15503: AND
15504: IFFALSE 15668
// begin if IsDrivenBy ( tmp ) then
15506: LD_VAR 0 13
15510: PPUSH
15511: CALL_OW 311
15515: IFFALSE 15519
// continue ;
15517: GO 15318
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15519: LD_VAR 0 6
15523: PPUSH
15524: LD_INT 3
15526: PUSH
15527: LD_INT 60
15529: PUSH
15530: EMPTY
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: LD_INT 55
15542: PUSH
15543: EMPTY
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PPUSH
15554: CALL_OW 72
15558: IFFALSE 15666
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15560: LD_ADDR_VAR 0 18
15564: PUSH
15565: LD_VAR 0 6
15569: PPUSH
15570: LD_INT 3
15572: PUSH
15573: LD_INT 60
15575: PUSH
15576: EMPTY
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 55
15588: PUSH
15589: EMPTY
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PPUSH
15600: CALL_OW 72
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: ST_TO_ADDR
// if IsInUnit ( driver ) then
15609: LD_VAR 0 18
15613: PPUSH
15614: CALL_OW 310
15618: IFFALSE 15629
// ComExit ( driver ) ;
15620: LD_VAR 0 18
15624: PPUSH
15625: CALL 41031 0 1
// AddComEnterUnit ( driver , tmp ) ;
15629: LD_VAR 0 18
15633: PPUSH
15634: LD_VAR 0 13
15638: PPUSH
15639: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15643: LD_VAR 0 18
15647: PPUSH
15648: LD_VAR 0 7
15652: PPUSH
15653: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15657: LD_VAR 0 18
15661: PPUSH
15662: CALL_OW 181
// end ; continue ;
15666: GO 15318
// end ; if not cleaners or not tmp in cleaners then
15668: LD_VAR 0 6
15672: NOT
15673: PUSH
15674: LD_VAR 0 13
15678: PUSH
15679: LD_VAR 0 6
15683: IN
15684: NOT
15685: OR
15686: IFFALSE 15993
// begin if dep then
15688: LD_VAR 0 17
15692: IFFALSE 15828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15694: LD_ADDR_VAR 0 16
15698: PUSH
15699: LD_VAR 0 17
15703: PUSH
15704: LD_INT 1
15706: ARRAY
15707: PPUSH
15708: CALL_OW 250
15712: PPUSH
15713: LD_VAR 0 17
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: CALL_OW 254
15726: PPUSH
15727: LD_INT 5
15729: PPUSH
15730: CALL_OW 272
15734: PUSH
15735: LD_VAR 0 17
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: CALL_OW 251
15748: PPUSH
15749: LD_VAR 0 17
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: CALL_OW 254
15762: PPUSH
15763: LD_INT 5
15765: PPUSH
15766: CALL_OW 273
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15775: LD_VAR 0 16
15779: PUSH
15780: LD_INT 1
15782: ARRAY
15783: PPUSH
15784: LD_VAR 0 16
15788: PUSH
15789: LD_INT 2
15791: ARRAY
15792: PPUSH
15793: CALL_OW 488
15797: IFFALSE 15828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15799: LD_VAR 0 13
15803: PPUSH
15804: LD_VAR 0 16
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: LD_VAR 0 16
15817: PUSH
15818: LD_INT 2
15820: ARRAY
15821: PPUSH
15822: CALL_OW 111
// continue ;
15826: GO 15318
// end ; end ; r := GetDir ( tmp ) ;
15828: LD_ADDR_VAR 0 15
15832: PUSH
15833: LD_VAR 0 13
15837: PPUSH
15838: CALL_OW 254
15842: ST_TO_ADDR
// if r = 5 then
15843: LD_VAR 0 15
15847: PUSH
15848: LD_INT 5
15850: EQUAL
15851: IFFALSE 15861
// r := 0 ;
15853: LD_ADDR_VAR 0 15
15857: PUSH
15858: LD_INT 0
15860: ST_TO_ADDR
// for j = r to 5 do
15861: LD_ADDR_VAR 0 10
15865: PUSH
15866: DOUBLE
15867: LD_VAR 0 15
15871: DEC
15872: ST_TO_ADDR
15873: LD_INT 5
15875: PUSH
15876: FOR_TO
15877: IFFALSE 15991
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15879: LD_ADDR_VAR 0 11
15883: PUSH
15884: LD_VAR 0 13
15888: PPUSH
15889: CALL_OW 250
15893: PPUSH
15894: LD_VAR 0 10
15898: PPUSH
15899: LD_INT 2
15901: PPUSH
15902: CALL_OW 272
15906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15907: LD_ADDR_VAR 0 12
15911: PUSH
15912: LD_VAR 0 13
15916: PPUSH
15917: CALL_OW 251
15921: PPUSH
15922: LD_VAR 0 10
15926: PPUSH
15927: LD_INT 2
15929: PPUSH
15930: CALL_OW 273
15934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15935: LD_VAR 0 11
15939: PPUSH
15940: LD_VAR 0 12
15944: PPUSH
15945: CALL_OW 488
15949: PUSH
15950: LD_VAR 0 11
15954: PPUSH
15955: LD_VAR 0 12
15959: PPUSH
15960: CALL_OW 428
15964: NOT
15965: AND
15966: IFFALSE 15989
// begin ComMoveXY ( tmp , _x , _y ) ;
15968: LD_VAR 0 13
15972: PPUSH
15973: LD_VAR 0 11
15977: PPUSH
15978: LD_VAR 0 12
15982: PPUSH
15983: CALL_OW 111
// break ;
15987: GO 15991
// end ; end ;
15989: GO 15876
15991: POP
15992: POP
// end ; end ;
15993: GO 15318
15995: POP
15996: POP
// end ;
15997: LD_VAR 0 8
16001: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16002: LD_INT 0
16004: PPUSH
// result := true ;
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16013: LD_VAR 0 2
16017: PUSH
16018: LD_INT 24
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16032
16024: LD_INT 33
16026: DOUBLE
16027: EQUAL
16028: IFTRUE 16032
16030: GO 16057
16032: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16033: LD_ADDR_VAR 0 3
16037: PUSH
16038: LD_INT 32
16040: PPUSH
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 321
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: ST_TO_ADDR
16055: GO 16373
16057: LD_INT 20
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16090
16065: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_INT 6
16073: PPUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 321
16083: PUSH
16084: LD_INT 2
16086: EQUAL
16087: ST_TO_ADDR
16088: GO 16373
16090: LD_INT 22
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16104
16096: LD_INT 36
16098: DOUBLE
16099: EQUAL
16100: IFTRUE 16104
16102: GO 16129
16104: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_INT 15
16112: PPUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 321
16122: PUSH
16123: LD_INT 2
16125: EQUAL
16126: ST_TO_ADDR
16127: GO 16373
16129: LD_INT 30
16131: DOUBLE
16132: EQUAL
16133: IFTRUE 16137
16135: GO 16162
16137: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 20
16145: PPUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 321
16155: PUSH
16156: LD_INT 2
16158: EQUAL
16159: ST_TO_ADDR
16160: GO 16373
16162: LD_INT 28
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16176
16168: LD_INT 21
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16201
16176: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 21
16184: PPUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 321
16194: PUSH
16195: LD_INT 2
16197: EQUAL
16198: ST_TO_ADDR
16199: GO 16373
16201: LD_INT 16
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16234
16209: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 84
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 321
16227: PUSH
16228: LD_INT 2
16230: EQUAL
16231: ST_TO_ADDR
16232: GO 16373
16234: LD_INT 19
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16248
16240: LD_INT 23
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16273
16248: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16249: LD_ADDR_VAR 0 3
16253: PUSH
16254: LD_INT 83
16256: PPUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 321
16266: PUSH
16267: LD_INT 2
16269: EQUAL
16270: ST_TO_ADDR
16271: GO 16373
16273: LD_INT 17
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16306
16281: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: LD_INT 39
16289: PPUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 321
16299: PUSH
16300: LD_INT 2
16302: EQUAL
16303: ST_TO_ADDR
16304: GO 16373
16306: LD_INT 18
16308: DOUBLE
16309: EQUAL
16310: IFTRUE 16314
16312: GO 16339
16314: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16315: LD_ADDR_VAR 0 3
16319: PUSH
16320: LD_INT 40
16322: PPUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 321
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: ST_TO_ADDR
16337: GO 16373
16339: LD_INT 27
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16347
16345: GO 16372
16347: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_INT 35
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 321
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: ST_TO_ADDR
16370: GO 16373
16372: POP
// end ;
16373: LD_VAR 0 3
16377: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// result := false ;
16391: LD_ADDR_VAR 0 6
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// if btype = b_depot then
16399: LD_VAR 0 2
16403: PUSH
16404: LD_INT 0
16406: EQUAL
16407: IFFALSE 16419
// begin result := true ;
16409: LD_ADDR_VAR 0 6
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// exit ;
16417: GO 17245
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16419: LD_VAR 0 1
16423: NOT
16424: PUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 266
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: IN
16445: NOT
16446: OR
16447: PUSH
16448: LD_VAR 0 2
16452: NOT
16453: OR
16454: PUSH
16455: LD_VAR 0 5
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 4
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: IN
16486: NOT
16487: OR
16488: PUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_VAR 0 4
16498: PPUSH
16499: CALL_OW 488
16503: NOT
16504: OR
16505: IFFALSE 16509
// exit ;
16507: GO 17245
// side := GetSide ( depot ) ;
16509: LD_ADDR_VAR 0 9
16513: PUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 255
16523: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16524: LD_VAR 0 9
16528: PPUSH
16529: LD_VAR 0 2
16533: PPUSH
16534: CALL 16002 0 2
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 17245
// pom := GetBase ( depot ) ;
16543: LD_ADDR_VAR 0 10
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 274
16557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16558: LD_ADDR_VAR 0 11
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 248
16577: PPUSH
16578: CALL_OW 450
16582: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16583: LD_VAR 0 10
16587: PPUSH
16588: LD_INT 1
16590: PPUSH
16591: CALL_OW 275
16595: PUSH
16596: LD_VAR 0 11
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: GREATEREQUAL
16605: PUSH
16606: LD_VAR 0 10
16610: PPUSH
16611: LD_INT 2
16613: PPUSH
16614: CALL_OW 275
16618: PUSH
16619: LD_VAR 0 11
16623: PUSH
16624: LD_INT 2
16626: ARRAY
16627: GREATEREQUAL
16628: AND
16629: PUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: LD_INT 3
16637: PPUSH
16638: CALL_OW 275
16642: PUSH
16643: LD_VAR 0 11
16647: PUSH
16648: LD_INT 3
16650: ARRAY
16651: GREATEREQUAL
16652: AND
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 17245
// if GetBType ( depot ) = b_depot then
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 266
16667: PUSH
16668: LD_INT 0
16670: EQUAL
16671: IFFALSE 16683
// dist := 28 else
16673: LD_ADDR_VAR 0 14
16677: PUSH
16678: LD_INT 28
16680: ST_TO_ADDR
16681: GO 16691
// dist := 36 ;
16683: LD_ADDR_VAR 0 14
16687: PUSH
16688: LD_INT 36
16690: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16691: LD_VAR 0 1
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_VAR 0 4
16705: PPUSH
16706: CALL_OW 297
16710: PUSH
16711: LD_VAR 0 14
16715: GREATER
16716: IFFALSE 16720
// exit ;
16718: GO 17245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16720: LD_ADDR_VAR 0 12
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: LD_VAR 0 5
16744: PPUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 248
16754: PPUSH
16755: LD_INT 0
16757: PPUSH
16758: CALL 17250 0 6
16762: ST_TO_ADDR
// if not hexes then
16763: LD_VAR 0 12
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 17245
// hex := GetHexInfo ( x , y ) ;
16772: LD_ADDR_VAR 0 15
16776: PUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: CALL_OW 546
16791: ST_TO_ADDR
// if hex [ 1 ] then
16792: LD_VAR 0 15
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: IFFALSE 16804
// exit ;
16802: GO 17245
// height := hex [ 2 ] ;
16804: LD_ADDR_VAR 0 13
16808: PUSH
16809: LD_VAR 0 15
16813: PUSH
16814: LD_INT 2
16816: ARRAY
16817: ST_TO_ADDR
// for i = 1 to hexes do
16818: LD_ADDR_VAR 0 7
16822: PUSH
16823: DOUBLE
16824: LD_INT 1
16826: DEC
16827: ST_TO_ADDR
16828: LD_VAR 0 12
16832: PUSH
16833: FOR_TO
16834: IFFALSE 17164
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16836: LD_VAR 0 12
16840: PUSH
16841: LD_VAR 0 7
16845: ARRAY
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PPUSH
16851: LD_VAR 0 12
16855: PUSH
16856: LD_VAR 0 7
16860: ARRAY
16861: PUSH
16862: LD_INT 2
16864: ARRAY
16865: PPUSH
16866: CALL_OW 488
16870: NOT
16871: PUSH
16872: LD_VAR 0 12
16876: PUSH
16877: LD_VAR 0 7
16881: ARRAY
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: PPUSH
16887: LD_VAR 0 12
16891: PUSH
16892: LD_VAR 0 7
16896: ARRAY
16897: PUSH
16898: LD_INT 2
16900: ARRAY
16901: PPUSH
16902: CALL_OW 428
16906: PUSH
16907: LD_INT 0
16909: GREATER
16910: OR
16911: PUSH
16912: LD_VAR 0 12
16916: PUSH
16917: LD_VAR 0 7
16921: ARRAY
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: LD_VAR 0 12
16931: PUSH
16932: LD_VAR 0 7
16936: ARRAY
16937: PUSH
16938: LD_INT 2
16940: ARRAY
16941: PPUSH
16942: CALL_OW 351
16946: OR
16947: IFFALSE 16953
// exit ;
16949: POP
16950: POP
16951: GO 17245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16953: LD_ADDR_VAR 0 8
16957: PUSH
16958: LD_VAR 0 12
16962: PUSH
16963: LD_VAR 0 7
16967: ARRAY
16968: PUSH
16969: LD_INT 1
16971: ARRAY
16972: PPUSH
16973: LD_VAR 0 12
16977: PUSH
16978: LD_VAR 0 7
16982: ARRAY
16983: PUSH
16984: LD_INT 2
16986: ARRAY
16987: PPUSH
16988: CALL_OW 546
16992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16993: LD_VAR 0 8
16997: PUSH
16998: LD_INT 1
17000: ARRAY
17001: PUSH
17002: LD_VAR 0 8
17006: PUSH
17007: LD_INT 2
17009: ARRAY
17010: PUSH
17011: LD_VAR 0 13
17015: PUSH
17016: LD_INT 2
17018: PLUS
17019: GREATER
17020: OR
17021: PUSH
17022: LD_VAR 0 8
17026: PUSH
17027: LD_INT 2
17029: ARRAY
17030: PUSH
17031: LD_VAR 0 13
17035: PUSH
17036: LD_INT 2
17038: MINUS
17039: LESS
17040: OR
17041: PUSH
17042: LD_VAR 0 8
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: LD_INT 8
17056: PUSH
17057: LD_INT 9
17059: PUSH
17060: LD_INT 10
17062: PUSH
17063: LD_INT 11
17065: PUSH
17066: LD_INT 12
17068: PUSH
17069: LD_INT 13
17071: PUSH
17072: LD_INT 16
17074: PUSH
17075: LD_INT 17
17077: PUSH
17078: LD_INT 18
17080: PUSH
17081: LD_INT 19
17083: PUSH
17084: LD_INT 20
17086: PUSH
17087: LD_INT 21
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: IN
17105: NOT
17106: OR
17107: PUSH
17108: LD_VAR 0 8
17112: PUSH
17113: LD_INT 5
17115: ARRAY
17116: NOT
17117: OR
17118: PUSH
17119: LD_VAR 0 8
17123: PUSH
17124: LD_INT 6
17126: ARRAY
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: LD_INT 7
17136: PUSH
17137: LD_INT 9
17139: PUSH
17140: LD_INT 10
17142: PUSH
17143: LD_INT 11
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: IN
17154: NOT
17155: OR
17156: IFFALSE 17162
// exit ;
17158: POP
17159: POP
17160: GO 17245
// end ;
17162: GO 16833
17164: POP
17165: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17166: LD_VAR 0 9
17170: PPUSH
17171: LD_VAR 0 3
17175: PPUSH
17176: LD_VAR 0 4
17180: PPUSH
17181: LD_INT 20
17183: PPUSH
17184: CALL 9168 0 4
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: IFFALSE 17196
// exit ;
17194: GO 17245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17196: LD_VAR 0 2
17200: PUSH
17201: LD_INT 29
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: IN
17211: PUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_VAR 0 4
17221: PPUSH
17222: LD_VAR 0 9
17226: PPUSH
17227: CALL_OW 440
17231: NOT
17232: AND
17233: IFFALSE 17237
// exit ;
17235: GO 17245
// result := true ;
17237: LD_ADDR_VAR 0 6
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// end ;
17245: LD_VAR 0 6
17249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17250: LD_INT 0
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
// result = [ ] ;
17310: LD_ADDR_VAR 0 7
17314: PUSH
17315: EMPTY
17316: ST_TO_ADDR
// temp_list = [ ] ;
17317: LD_ADDR_VAR 0 9
17321: PUSH
17322: EMPTY
17323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17324: LD_VAR 0 4
17328: PUSH
17329: LD_INT 0
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: LD_INT 4
17343: PUSH
17344: LD_INT 5
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: IN
17355: NOT
17356: PUSH
17357: LD_VAR 0 1
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: IN
17372: PUSH
17373: LD_VAR 0 5
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: IN
17392: NOT
17393: AND
17394: OR
17395: IFFALSE 17399
// exit ;
17397: GO 35790
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 6
17406: PUSH
17407: LD_INT 7
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: LD_INT 13
17415: PUSH
17416: LD_INT 12
17418: PUSH
17419: LD_INT 15
17421: PUSH
17422: LD_INT 11
17424: PUSH
17425: LD_INT 14
17427: PUSH
17428: LD_INT 10
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: IN
17442: IFFALSE 17452
// btype = b_lab ;
17444: LD_ADDR_VAR 0 1
17448: PUSH
17449: LD_INT 6
17451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17452: LD_VAR 0 6
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: IN
17471: NOT
17472: PUSH
17473: LD_VAR 0 1
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: LD_INT 6
17492: PUSH
17493: LD_INT 36
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: LD_INT 5
17501: PUSH
17502: LD_INT 31
17504: PUSH
17505: LD_INT 32
17507: PUSH
17508: LD_INT 33
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: IN
17524: NOT
17525: PUSH
17526: LD_VAR 0 6
17530: PUSH
17531: LD_INT 1
17533: EQUAL
17534: AND
17535: OR
17536: PUSH
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 3
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: IN
17552: NOT
17553: PUSH
17554: LD_VAR 0 6
17558: PUSH
17559: LD_INT 2
17561: EQUAL
17562: AND
17563: OR
17564: IFFALSE 17574
// mode = 0 ;
17566: LD_ADDR_VAR 0 6
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
// case mode of 0 :
17574: LD_VAR 0 6
17578: PUSH
17579: LD_INT 0
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 29040
17587: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17588: LD_ADDR_VAR 0 11
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 1
17608: NEG
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: NEG
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: LD_INT 2
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 1
17695: NEG
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: NEG
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17781: LD_ADDR_VAR 0 12
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: LD_INT 1
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: NEG
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: NEG
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 3
17938: NEG
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 3
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17977: LD_ADDR_VAR 0 13
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: LD_INT 2
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: LD_INT 3
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 3
18136: NEG
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: NEG
18149: PUSH
18150: LD_INT 3
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18176: LD_ADDR_VAR 0 14
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 2
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 3
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 3
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18372: LD_ADDR_VAR 0 15
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: NEG
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18565: LD_ADDR_VAR 0 16
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 3
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 3
18722: PUSH
18723: LD_INT 3
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18758: LD_ADDR_VAR 0 17
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18988: LD_ADDR_VAR 0 18
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 2
19187: NEG
19188: PUSH
19189: LD_INT 2
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19218: LD_ADDR_VAR 0 19
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 0
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: LD_INT 2
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19448: LD_ADDR_VAR 0 20
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: LD_INT 2
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 0
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19678: LD_ADDR_VAR 0 21
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19908: LD_ADDR_VAR 0 22
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 2
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: NEG
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: NEG
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20138: LD_ADDR_VAR 0 23
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: LD_INT 2
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 2
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 3
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 3
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20418: LD_ADDR_VAR 0 24
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: LD_INT 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: LD_INT 2
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 2
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 3
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 3
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20694: LD_ADDR_VAR 0 25
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: LD_INT 2
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 3
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 3
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20968: LD_ADDR_VAR 0 26
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 2
21144: NEG
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: NEG
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21244: LD_ADDR_VAR 0 27
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 0
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: NEG
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: LD_INT 2
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 3
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 3
21489: NEG
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21524: LD_ADDR_VAR 0 28
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: LD_INT 2
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 2
21700: NEG
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: LD_INT 2
21727: NEG
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: LD_INT 3
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 3
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 3
21759: NEG
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 3
21771: NEG
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21806: LD_ADDR_VAR 0 29
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: NEG
21997: PUSH
21998: LD_INT 3
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 3
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 3
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 3
22050: NEG
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22085: LD_ADDR_VAR 0 30
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: NEG
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 3
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22363: LD_ADDR_VAR 0 31
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 3
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 3
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 3
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 3
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22641: LD_ADDR_VAR 0 32
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 2
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: NEG
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 3
22884: NEG
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22919: LD_ADDR_VAR 0 33
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 2
23097: NEG
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 3
23163: NEG
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23198: LD_ADDR_VAR 0 34
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 3
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 3
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23478: LD_ADDR_VAR 0 35
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 2
23569: NEG
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23590: LD_ADDR_VAR 0 36
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 2
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23702: LD_ADDR_VAR 0 37
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23814: LD_ADDR_VAR 0 38
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 0
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23926: LD_ADDR_VAR 0 39
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24038: LD_ADDR_VAR 0 40
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24150: LD_ADDR_VAR 0 41
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: NEG
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: NEG
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 3
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 3
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 3
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 3
24424: NEG
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 3
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 3
24447: NEG
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: LD_INT 3
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24500: LD_ADDR_VAR 0 42
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 2
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 3
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: LD_INT 3
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: LD_INT 3
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 2
24728: NEG
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 3
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 3
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 3
24809: NEG
24810: PUSH
24811: LD_INT 3
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24850: LD_ADDR_VAR 0 43
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 3
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 3
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 3
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 3
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 3
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25198: LD_ADDR_VAR 0 44
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 3
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 3
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 3
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 3
25441: PUSH
25442: LD_INT 3
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 3
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: LD_INT 3
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25548: LD_ADDR_VAR 0 45
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: LD_INT 3
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 3
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 3
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 3
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: LD_INT 3
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 3
25857: NEG
25858: PUSH
25859: LD_INT 3
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25898: LD_ADDR_VAR 0 46
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 3
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 3
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: NEG
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 3
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26246: LD_ADDR_VAR 0 47
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26397: LD_ADDR_VAR 0 48
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26544: LD_ADDR_VAR 0 49
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26688: LD_ADDR_VAR 0 50
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26832: LD_ADDR_VAR 0 51
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26979: LD_ADDR_VAR 0 52
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27130: LD_ADDR_VAR 0 53
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27360: LD_ADDR_VAR 0 54
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27590: LD_ADDR_VAR 0 55
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27820: LD_ADDR_VAR 0 56
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28050: LD_ADDR_VAR 0 57
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28280: LD_ADDR_VAR 0 58
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: NEG
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28510: LD_ADDR_VAR 0 59
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28598: LD_ADDR_VAR 0 60
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28686: LD_ADDR_VAR 0 61
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28774: LD_ADDR_VAR 0 62
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28862: LD_ADDR_VAR 0 63
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28950: LD_ADDR_VAR 0 64
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// end ; 1 :
29038: GO 34935
29040: LD_INT 1
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 31671
29048: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29049: LD_ADDR_VAR 0 11
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 3
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29093: LD_ADDR_VAR 0 12
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 3
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29134: LD_ADDR_VAR 0 13
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29174: LD_ADDR_VAR 0 14
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 3
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29215: LD_ADDR_VAR 0 15
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29259: LD_ADDR_VAR 0 16
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: LD_INT 3
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 3
29290: NEG
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29305: LD_ADDR_VAR 0 17
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 3
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 3
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29349: LD_ADDR_VAR 0 18
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29390: LD_ADDR_VAR 0 19
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: LD_INT 2
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29430: LD_ADDR_VAR 0 20
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29471: LD_ADDR_VAR 0 21
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29515: LD_ADDR_VAR 0 22
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 2
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29561: LD_ADDR_VAR 0 23
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 4
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 3
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29605: LD_ADDR_VAR 0 24
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29646: LD_ADDR_VAR 0 25
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29686: LD_ADDR_VAR 0 26
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: LD_INT 4
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29727: LD_ADDR_VAR 0 27
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29771: LD_ADDR_VAR 0 28
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 3
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 4
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29817: LD_ADDR_VAR 0 29
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 3
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 3
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 4
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 4
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 5
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 5
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 4
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 6
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 6
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 5
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29972: LD_ADDR_VAR 0 30
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 5
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 5
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 5
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 6
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 6
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30115: LD_ADDR_VAR 0 31
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 4
30152: PUSH
30153: LD_INT 3
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 4
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 5
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 6
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 6
30222: PUSH
30223: LD_INT 6
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 5
30232: PUSH
30233: LD_INT 6
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30254: LD_ADDR_VAR 0 32
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 5
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 4
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 6
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 6
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 5
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30397: LD_ADDR_VAR 0 33
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 4
30449: NEG
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 4
30472: NEG
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: NEG
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 5
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 5
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 6
30517: NEG
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 6
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30552: LD_ADDR_VAR 0 34
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 4
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 4
30607: NEG
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 4
30619: NEG
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: LD_INT 5
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 5
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 5
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: LD_INT 6
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 6
30679: NEG
30680: PUSH
30681: LD_INT 5
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 6
30691: NEG
30692: PUSH
30693: LD_INT 6
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30715: LD_ADDR_VAR 0 41
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 2
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30759: LD_ADDR_VAR 0 42
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30800: LD_ADDR_VAR 0 43
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30840: LD_ADDR_VAR 0 44
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30881: LD_ADDR_VAR 0 45
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30925: LD_ADDR_VAR 0 46
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30971: LD_ADDR_VAR 0 47
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31004: LD_ADDR_VAR 0 48
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31035: LD_ADDR_VAR 0 49
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31064: LD_ADDR_VAR 0 50
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31093: LD_ADDR_VAR 0 51
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31124: LD_ADDR_VAR 0 52
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: NEG
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31157: LD_ADDR_VAR 0 53
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 3
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31201: LD_ADDR_VAR 0 54
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31242: LD_ADDR_VAR 0 55
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31282: LD_ADDR_VAR 0 56
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31323: LD_ADDR_VAR 0 57
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31367: LD_ADDR_VAR 0 58
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31413: LD_ADDR_VAR 0 59
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31457: LD_ADDR_VAR 0 60
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31498: LD_ADDR_VAR 0 61
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31538: LD_ADDR_VAR 0 62
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31579: LD_ADDR_VAR 0 63
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31623: LD_ADDR_VAR 0 64
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: ST_TO_ADDR
// end ; 2 :
31669: GO 34935
31671: LD_INT 2
31673: DOUBLE
31674: EQUAL
31675: IFTRUE 31679
31677: GO 34934
31679: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31680: LD_ADDR_VAR 0 29
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 5
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: LD_INT 4
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 4
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 4
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 5
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 5
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 3
31963: NEG
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 4
32019: NEG
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 4
32030: NEG
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: NEG
32066: PUSH
32067: LD_INT 4
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: LD_INT 4
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 4
32113: NEG
32114: PUSH
32115: LD_INT 3
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 5
32125: NEG
32126: PUSH
32127: LD_INT 4
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 5
32137: NEG
32138: PUSH
32139: LD_INT 5
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: LD_INT 5
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: NEG
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32218: LD_ADDR_VAR 0 30
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 4
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 5
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: NEG
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 3
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 4
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 5
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 5
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 5
32487: NEG
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: LD_INT 3
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: LD_INT 4
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 4
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 4
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 5
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 4
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 3
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 3
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: LD_INT 4
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 5
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 5
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32765: LD_ADDR_VAR 0 31
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 5
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: LD_INT 5
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: LD_INT 4
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: LD_INT 5
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: LD_INT 3
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 5
33027: NEG
33028: PUSH
33029: LD_INT 4
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 5
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: LD_INT 5
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 5
33063: NEG
33064: PUSH
33065: LD_INT 3
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 4
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 4
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33315: LD_ADDR_VAR 0 32
33319: PUSH
33320: LD_INT 4
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 5
33378: NEG
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: LD_INT 4
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 5
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 3
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 4
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: LD_INT 5
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 3
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 4
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: LD_INT 4
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 4
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: LD_INT 5
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33862: LD_ADDR_VAR 0 33
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: LD_INT 5
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 5
33929: NEG
33930: PUSH
33931: LD_INT 4
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: LD_INT 5
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: LD_INT 5
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: LD_INT 3
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 4
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 3
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: LD_INT 4
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 4
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 4
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 4
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 5
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34400: LD_ADDR_VAR 0 34
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 4
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 5
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 4
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 5
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: LD_INT 5
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 4
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 4
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 4
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 4
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 5
34622: PUSH
34623: LD_INT 4
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 5
34672: PUSH
34673: LD_INT 3
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: LD_INT 5
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 3
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 4
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 4
34785: NEG
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 4
34796: NEG
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 4
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 5
34841: NEG
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 5
34852: NEG
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 5
34864: NEG
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 3
34876: NEG
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: ST_TO_ADDR
// end ; end ;
34932: GO 34935
34934: POP
// case btype of b_depot , b_warehouse :
34935: LD_VAR 0 1
34939: PUSH
34940: LD_INT 0
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34954
34946: LD_INT 1
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 35155
34954: POP
// case nation of nation_american :
34955: LD_VAR 0 5
34959: PUSH
34960: LD_INT 1
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 35024
34968: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34969: LD_ADDR_VAR 0 9
34973: PUSH
34974: LD_VAR 0 11
34978: PUSH
34979: LD_VAR 0 12
34983: PUSH
34984: LD_VAR 0 13
34988: PUSH
34989: LD_VAR 0 14
34993: PUSH
34994: LD_VAR 0 15
34998: PUSH
34999: LD_VAR 0 16
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: PUSH
35012: LD_VAR 0 4
35016: PUSH
35017: LD_INT 1
35019: PLUS
35020: ARRAY
35021: ST_TO_ADDR
35022: GO 35153
35024: LD_INT 2
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35088
35032: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_VAR 0 17
35042: PUSH
35043: LD_VAR 0 18
35047: PUSH
35048: LD_VAR 0 19
35052: PUSH
35053: LD_VAR 0 20
35057: PUSH
35058: LD_VAR 0 21
35062: PUSH
35063: LD_VAR 0 22
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: PUSH
35076: LD_VAR 0 4
35080: PUSH
35081: LD_INT 1
35083: PLUS
35084: ARRAY
35085: ST_TO_ADDR
35086: GO 35153
35088: LD_INT 3
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35152
35096: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_VAR 0 23
35106: PUSH
35107: LD_VAR 0 24
35111: PUSH
35112: LD_VAR 0 25
35116: PUSH
35117: LD_VAR 0 26
35121: PUSH
35122: LD_VAR 0 27
35126: PUSH
35127: LD_VAR 0 28
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_VAR 0 4
35144: PUSH
35145: LD_INT 1
35147: PLUS
35148: ARRAY
35149: ST_TO_ADDR
35150: GO 35153
35152: POP
35153: GO 35708
35155: LD_INT 2
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35169
35161: LD_INT 3
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35225
35169: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_VAR 0 29
35179: PUSH
35180: LD_VAR 0 30
35184: PUSH
35185: LD_VAR 0 31
35189: PUSH
35190: LD_VAR 0 32
35194: PUSH
35195: LD_VAR 0 33
35199: PUSH
35200: LD_VAR 0 34
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: LD_VAR 0 4
35217: PUSH
35218: LD_INT 1
35220: PLUS
35221: ARRAY
35222: ST_TO_ADDR
35223: GO 35708
35225: LD_INT 16
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35287
35231: LD_INT 17
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35287
35237: LD_INT 18
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35287
35243: LD_INT 19
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35287
35249: LD_INT 22
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35287
35255: LD_INT 20
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35287
35261: LD_INT 21
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35287
35267: LD_INT 23
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35287
35273: LD_INT 24
35275: DOUBLE
35276: EQUAL
35277: IFTRUE 35287
35279: LD_INT 25
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35287
35285: GO 35343
35287: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35288: LD_ADDR_VAR 0 9
35292: PUSH
35293: LD_VAR 0 35
35297: PUSH
35298: LD_VAR 0 36
35302: PUSH
35303: LD_VAR 0 37
35307: PUSH
35308: LD_VAR 0 38
35312: PUSH
35313: LD_VAR 0 39
35317: PUSH
35318: LD_VAR 0 40
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: PUSH
35331: LD_VAR 0 4
35335: PUSH
35336: LD_INT 1
35338: PLUS
35339: ARRAY
35340: ST_TO_ADDR
35341: GO 35708
35343: LD_INT 6
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35399
35349: LD_INT 7
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35399
35355: LD_INT 8
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35399
35361: LD_INT 13
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35399
35367: LD_INT 12
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35399
35373: LD_INT 15
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35399
35379: LD_INT 11
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35399
35385: LD_INT 14
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35399
35391: LD_INT 10
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35455
35399: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35400: LD_ADDR_VAR 0 9
35404: PUSH
35405: LD_VAR 0 41
35409: PUSH
35410: LD_VAR 0 42
35414: PUSH
35415: LD_VAR 0 43
35419: PUSH
35420: LD_VAR 0 44
35424: PUSH
35425: LD_VAR 0 45
35429: PUSH
35430: LD_VAR 0 46
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_VAR 0 4
35447: PUSH
35448: LD_INT 1
35450: PLUS
35451: ARRAY
35452: ST_TO_ADDR
35453: GO 35708
35455: LD_INT 36
35457: DOUBLE
35458: EQUAL
35459: IFTRUE 35463
35461: GO 35519
35463: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35464: LD_ADDR_VAR 0 9
35468: PUSH
35469: LD_VAR 0 47
35473: PUSH
35474: LD_VAR 0 48
35478: PUSH
35479: LD_VAR 0 49
35483: PUSH
35484: LD_VAR 0 50
35488: PUSH
35489: LD_VAR 0 51
35493: PUSH
35494: LD_VAR 0 52
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: PUSH
35507: LD_VAR 0 4
35511: PUSH
35512: LD_INT 1
35514: PLUS
35515: ARRAY
35516: ST_TO_ADDR
35517: GO 35708
35519: LD_INT 4
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35545
35525: LD_INT 5
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35545
35531: LD_INT 34
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35545
35537: LD_INT 37
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35601
35545: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35546: LD_ADDR_VAR 0 9
35550: PUSH
35551: LD_VAR 0 53
35555: PUSH
35556: LD_VAR 0 54
35560: PUSH
35561: LD_VAR 0 55
35565: PUSH
35566: LD_VAR 0 56
35570: PUSH
35571: LD_VAR 0 57
35575: PUSH
35576: LD_VAR 0 58
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: LD_VAR 0 4
35593: PUSH
35594: LD_INT 1
35596: PLUS
35597: ARRAY
35598: ST_TO_ADDR
35599: GO 35708
35601: LD_INT 31
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35651
35607: LD_INT 32
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35651
35613: LD_INT 33
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35651
35619: LD_INT 27
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35651
35625: LD_INT 26
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35651
35631: LD_INT 28
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35651
35637: LD_INT 29
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35651
35643: LD_INT 30
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35707
35651: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_VAR 0 59
35661: PUSH
35662: LD_VAR 0 60
35666: PUSH
35667: LD_VAR 0 61
35671: PUSH
35672: LD_VAR 0 62
35676: PUSH
35677: LD_VAR 0 63
35681: PUSH
35682: LD_VAR 0 64
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_VAR 0 4
35699: PUSH
35700: LD_INT 1
35702: PLUS
35703: ARRAY
35704: ST_TO_ADDR
35705: GO 35708
35707: POP
// temp_list2 = [ ] ;
35708: LD_ADDR_VAR 0 10
35712: PUSH
35713: EMPTY
35714: ST_TO_ADDR
// for i in temp_list do
35715: LD_ADDR_VAR 0 8
35719: PUSH
35720: LD_VAR 0 9
35724: PUSH
35725: FOR_IN
35726: IFFALSE 35778
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35728: LD_ADDR_VAR 0 10
35732: PUSH
35733: LD_VAR 0 10
35737: PUSH
35738: LD_VAR 0 8
35742: PUSH
35743: LD_INT 1
35745: ARRAY
35746: PUSH
35747: LD_VAR 0 2
35751: PLUS
35752: PUSH
35753: LD_VAR 0 8
35757: PUSH
35758: LD_INT 2
35760: ARRAY
35761: PUSH
35762: LD_VAR 0 3
35766: PLUS
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: ADD
35775: ST_TO_ADDR
35776: GO 35725
35778: POP
35779: POP
// result = temp_list2 ;
35780: LD_ADDR_VAR 0 7
35784: PUSH
35785: LD_VAR 0 10
35789: ST_TO_ADDR
// end ;
35790: LD_VAR 0 7
35794: RET
// export function EnemyInRange ( unit , dist ) ; begin
35795: LD_INT 0
35797: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 255
35812: PPUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 250
35822: PPUSH
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL_OW 251
35832: PPUSH
35833: LD_VAR 0 2
35837: PPUSH
35838: CALL 9168 0 4
35842: PUSH
35843: LD_INT 4
35845: ARRAY
35846: ST_TO_ADDR
// end ;
35847: LD_VAR 0 3
35851: RET
// export function PlayerSeeMe ( unit ) ; begin
35852: LD_INT 0
35854: PPUSH
// result := See ( your_side , unit ) ;
35855: LD_ADDR_VAR 0 2
35859: PUSH
35860: LD_OWVAR 2
35864: PPUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 292
35874: ST_TO_ADDR
// end ;
35875: LD_VAR 0 2
35879: RET
// export function ReverseDir ( unit ) ; begin
35880: LD_INT 0
35882: PPUSH
// if not unit then
35883: LD_VAR 0 1
35887: NOT
35888: IFFALSE 35892
// exit ;
35890: GO 35915
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35892: LD_ADDR_VAR 0 2
35896: PUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 254
35906: PUSH
35907: LD_INT 3
35909: PLUS
35910: PUSH
35911: LD_INT 6
35913: MOD
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 2
35919: RET
// export function ReverseArray ( array ) ; var i ; begin
35920: LD_INT 0
35922: PPUSH
35923: PPUSH
// if not array then
35924: LD_VAR 0 1
35928: NOT
35929: IFFALSE 35933
// exit ;
35931: GO 35988
// result := [ ] ;
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: EMPTY
35939: ST_TO_ADDR
// for i := array downto 1 do
35940: LD_ADDR_VAR 0 3
35944: PUSH
35945: DOUBLE
35946: LD_VAR 0 1
35950: INC
35951: ST_TO_ADDR
35952: LD_INT 1
35954: PUSH
35955: FOR_DOWNTO
35956: IFFALSE 35986
// result := Join ( result , array [ i ] ) ;
35958: LD_ADDR_VAR 0 2
35962: PUSH
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 1
35972: PUSH
35973: LD_VAR 0 3
35977: ARRAY
35978: PPUSH
35979: CALL 40633 0 2
35983: ST_TO_ADDR
35984: GO 35955
35986: POP
35987: POP
// end ;
35988: LD_VAR 0 2
35992: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35993: LD_INT 0
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
// if not unit or not hexes then
36001: LD_VAR 0 1
36005: NOT
36006: PUSH
36007: LD_VAR 0 2
36011: NOT
36012: OR
36013: IFFALSE 36017
// exit ;
36015: GO 36140
// dist := 9999 ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_INT 9999
36024: ST_TO_ADDR
// for i = 1 to hexes do
36025: LD_ADDR_VAR 0 4
36029: PUSH
36030: DOUBLE
36031: LD_INT 1
36033: DEC
36034: ST_TO_ADDR
36035: LD_VAR 0 2
36039: PUSH
36040: FOR_TO
36041: IFFALSE 36128
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36043: LD_ADDR_VAR 0 6
36047: PUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_VAR 0 2
36057: PUSH
36058: LD_VAR 0 4
36062: ARRAY
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 4
36077: ARRAY
36078: PUSH
36079: LD_INT 2
36081: ARRAY
36082: PPUSH
36083: CALL_OW 297
36087: ST_TO_ADDR
// if tdist < dist then
36088: LD_VAR 0 6
36092: PUSH
36093: LD_VAR 0 5
36097: LESS
36098: IFFALSE 36126
// begin hex := hexes [ i ] ;
36100: LD_ADDR_VAR 0 8
36104: PUSH
36105: LD_VAR 0 2
36109: PUSH
36110: LD_VAR 0 4
36114: ARRAY
36115: ST_TO_ADDR
// dist := tdist ;
36116: LD_ADDR_VAR 0 5
36120: PUSH
36121: LD_VAR 0 6
36125: ST_TO_ADDR
// end ; end ;
36126: GO 36040
36128: POP
36129: POP
// result := hex ;
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_VAR 0 8
36139: ST_TO_ADDR
// end ;
36140: LD_VAR 0 3
36144: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36149: LD_VAR 0 1
36153: NOT
36154: PUSH
36155: LD_VAR 0 1
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 23
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PPUSH
36184: CALL_OW 69
36188: IN
36189: NOT
36190: OR
36191: IFFALSE 36195
// exit ;
36193: GO 36242
// for i = 1 to 3 do
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: DOUBLE
36201: LD_INT 1
36203: DEC
36204: ST_TO_ADDR
36205: LD_INT 3
36207: PUSH
36208: FOR_TO
36209: IFFALSE 36240
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 250
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 251
36230: PPUSH
36231: LD_INT 1
36233: PPUSH
36234: CALL_OW 453
36238: GO 36208
36240: POP
36241: POP
// end ;
36242: LD_VAR 0 2
36246: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36247: LD_INT 0
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
// if not unit or not enemy_unit then
36255: LD_VAR 0 1
36259: NOT
36260: PUSH
36261: LD_VAR 0 2
36265: NOT
36266: OR
36267: IFFALSE 36271
// exit ;
36269: GO 36738
// if GetLives ( i ) < 250 then
36271: LD_VAR 0 4
36275: PPUSH
36276: CALL_OW 256
36280: PUSH
36281: LD_INT 250
36283: LESS
36284: IFFALSE 36297
// begin ComAutodestruct ( i ) ;
36286: LD_VAR 0 4
36290: PPUSH
36291: CALL 36145 0 1
// exit ;
36295: GO 36738
// end ; x := GetX ( enemy_unit ) ;
36297: LD_ADDR_VAR 0 7
36301: PUSH
36302: LD_VAR 0 2
36306: PPUSH
36307: CALL_OW 250
36311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36312: LD_ADDR_VAR 0 8
36316: PUSH
36317: LD_VAR 0 2
36321: PPUSH
36322: CALL_OW 251
36326: ST_TO_ADDR
// if not x or not y then
36327: LD_VAR 0 7
36331: NOT
36332: PUSH
36333: LD_VAR 0 8
36337: NOT
36338: OR
36339: IFFALSE 36343
// exit ;
36341: GO 36738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36343: LD_ADDR_VAR 0 6
36347: PUSH
36348: LD_VAR 0 7
36352: PPUSH
36353: LD_INT 0
36355: PPUSH
36356: LD_INT 4
36358: PPUSH
36359: CALL_OW 272
36363: PUSH
36364: LD_VAR 0 8
36368: PPUSH
36369: LD_INT 0
36371: PPUSH
36372: LD_INT 4
36374: PPUSH
36375: CALL_OW 273
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_VAR 0 7
36388: PPUSH
36389: LD_INT 1
36391: PPUSH
36392: LD_INT 4
36394: PPUSH
36395: CALL_OW 272
36399: PUSH
36400: LD_VAR 0 8
36404: PPUSH
36405: LD_INT 1
36407: PPUSH
36408: LD_INT 4
36410: PPUSH
36411: CALL_OW 273
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_VAR 0 7
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: LD_INT 4
36430: PPUSH
36431: CALL_OW 272
36435: PUSH
36436: LD_VAR 0 8
36440: PPUSH
36441: LD_INT 2
36443: PPUSH
36444: LD_INT 4
36446: PPUSH
36447: CALL_OW 273
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_VAR 0 7
36460: PPUSH
36461: LD_INT 3
36463: PPUSH
36464: LD_INT 4
36466: PPUSH
36467: CALL_OW 272
36471: PUSH
36472: LD_VAR 0 8
36476: PPUSH
36477: LD_INT 3
36479: PPUSH
36480: LD_INT 4
36482: PPUSH
36483: CALL_OW 273
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: LD_INT 4
36502: PPUSH
36503: CALL_OW 272
36507: PUSH
36508: LD_VAR 0 8
36512: PPUSH
36513: LD_INT 4
36515: PPUSH
36516: LD_INT 4
36518: PPUSH
36519: CALL_OW 273
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_VAR 0 7
36532: PPUSH
36533: LD_INT 5
36535: PPUSH
36536: LD_INT 4
36538: PPUSH
36539: CALL_OW 272
36543: PUSH
36544: LD_VAR 0 8
36548: PPUSH
36549: LD_INT 5
36551: PPUSH
36552: LD_INT 4
36554: PPUSH
36555: CALL_OW 273
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// for i = tmp downto 1 do
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: DOUBLE
36578: LD_VAR 0 6
36582: INC
36583: ST_TO_ADDR
36584: LD_INT 1
36586: PUSH
36587: FOR_DOWNTO
36588: IFFALSE 36689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36590: LD_VAR 0 6
36594: PUSH
36595: LD_VAR 0 4
36599: ARRAY
36600: PUSH
36601: LD_INT 1
36603: ARRAY
36604: PPUSH
36605: LD_VAR 0 6
36609: PUSH
36610: LD_VAR 0 4
36614: ARRAY
36615: PUSH
36616: LD_INT 2
36618: ARRAY
36619: PPUSH
36620: CALL_OW 488
36624: NOT
36625: PUSH
36626: LD_VAR 0 6
36630: PUSH
36631: LD_VAR 0 4
36635: ARRAY
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PPUSH
36641: LD_VAR 0 6
36645: PUSH
36646: LD_VAR 0 4
36650: ARRAY
36651: PUSH
36652: LD_INT 2
36654: ARRAY
36655: PPUSH
36656: CALL_OW 428
36660: PUSH
36661: LD_INT 0
36663: NONEQUAL
36664: OR
36665: IFFALSE 36687
// tmp := Delete ( tmp , i ) ;
36667: LD_ADDR_VAR 0 6
36671: PUSH
36672: LD_VAR 0 6
36676: PPUSH
36677: LD_VAR 0 4
36681: PPUSH
36682: CALL_OW 3
36686: ST_TO_ADDR
36687: GO 36587
36689: POP
36690: POP
// j := GetClosestHex ( unit , tmp ) ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: LD_VAR 0 6
36705: PPUSH
36706: CALL 35993 0 2
36710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_VAR 0 5
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 5
36729: PUSH
36730: LD_INT 2
36732: ARRAY
36733: PPUSH
36734: CALL_OW 111
// end ;
36738: LD_VAR 0 3
36742: RET
// export function PrepareApemanSoldier ( ) ; begin
36743: LD_INT 0
36745: PPUSH
// uc_nation := 0 ;
36746: LD_ADDR_OWVAR 21
36750: PUSH
36751: LD_INT 0
36753: ST_TO_ADDR
// hc_sex := sex_male ;
36754: LD_ADDR_OWVAR 27
36758: PUSH
36759: LD_INT 1
36761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36762: LD_ADDR_OWVAR 28
36766: PUSH
36767: LD_INT 15
36769: ST_TO_ADDR
// hc_gallery :=  ;
36770: LD_ADDR_OWVAR 33
36774: PUSH
36775: LD_STRING 
36777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36778: LD_ADDR_OWVAR 31
36782: PUSH
36783: LD_INT 0
36785: PPUSH
36786: LD_INT 3
36788: PPUSH
36789: CALL_OW 12
36793: PUSH
36794: LD_INT 0
36796: PPUSH
36797: LD_INT 3
36799: PPUSH
36800: CALL_OW 12
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// end ;
36817: LD_VAR 0 1
36821: RET
// export function PrepareApemanEngineer ( ) ; begin
36822: LD_INT 0
36824: PPUSH
// uc_nation := 0 ;
36825: LD_ADDR_OWVAR 21
36829: PUSH
36830: LD_INT 0
36832: ST_TO_ADDR
// hc_sex := sex_male ;
36833: LD_ADDR_OWVAR 27
36837: PUSH
36838: LD_INT 1
36840: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36841: LD_ADDR_OWVAR 28
36845: PUSH
36846: LD_INT 16
36848: ST_TO_ADDR
// hc_gallery :=  ;
36849: LD_ADDR_OWVAR 33
36853: PUSH
36854: LD_STRING 
36856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36857: LD_ADDR_OWVAR 31
36861: PUSH
36862: LD_INT 0
36864: PPUSH
36865: LD_INT 3
36867: PPUSH
36868: CALL_OW 12
36872: PUSH
36873: LD_INT 0
36875: PPUSH
36876: LD_INT 3
36878: PPUSH
36879: CALL_OW 12
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// end ;
36896: LD_VAR 0 1
36900: RET
// export function PrepareApeman ( agressivity ) ; begin
36901: LD_INT 0
36903: PPUSH
// uc_side := 0 ;
36904: LD_ADDR_OWVAR 20
36908: PUSH
36909: LD_INT 0
36911: ST_TO_ADDR
// uc_nation := 0 ;
36912: LD_ADDR_OWVAR 21
36916: PUSH
36917: LD_INT 0
36919: ST_TO_ADDR
// hc_sex := sex_male ;
36920: LD_ADDR_OWVAR 27
36924: PUSH
36925: LD_INT 1
36927: ST_TO_ADDR
// hc_class := class_apeman ;
36928: LD_ADDR_OWVAR 28
36932: PUSH
36933: LD_INT 12
36935: ST_TO_ADDR
// hc_gallery :=  ;
36936: LD_ADDR_OWVAR 33
36940: PUSH
36941: LD_STRING 
36943: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36944: LD_ADDR_OWVAR 35
36948: PUSH
36949: LD_VAR 0 1
36953: NEG
36954: PPUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 12
36964: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36965: LD_ADDR_OWVAR 31
36969: PUSH
36970: LD_INT 0
36972: PPUSH
36973: LD_INT 3
36975: PPUSH
36976: CALL_OW 12
36980: PUSH
36981: LD_INT 0
36983: PPUSH
36984: LD_INT 3
36986: PPUSH
36987: CALL_OW 12
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// end ;
37004: LD_VAR 0 2
37008: RET
// export function PrepareTiger ( agressivity ) ; begin
37009: LD_INT 0
37011: PPUSH
// uc_side := 0 ;
37012: LD_ADDR_OWVAR 20
37016: PUSH
37017: LD_INT 0
37019: ST_TO_ADDR
// uc_nation := 0 ;
37020: LD_ADDR_OWVAR 21
37024: PUSH
37025: LD_INT 0
37027: ST_TO_ADDR
// hc_class := class_tiger ;
37028: LD_ADDR_OWVAR 28
37032: PUSH
37033: LD_INT 14
37035: ST_TO_ADDR
// hc_gallery :=  ;
37036: LD_ADDR_OWVAR 33
37040: PUSH
37041: LD_STRING 
37043: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37044: LD_ADDR_OWVAR 35
37048: PUSH
37049: LD_VAR 0 1
37053: NEG
37054: PPUSH
37055: LD_VAR 0 1
37059: PPUSH
37060: CALL_OW 12
37064: ST_TO_ADDR
// end ;
37065: LD_VAR 0 2
37069: RET
// export function PrepareEnchidna ( ) ; begin
37070: LD_INT 0
37072: PPUSH
// uc_side := 0 ;
37073: LD_ADDR_OWVAR 20
37077: PUSH
37078: LD_INT 0
37080: ST_TO_ADDR
// uc_nation := 0 ;
37081: LD_ADDR_OWVAR 21
37085: PUSH
37086: LD_INT 0
37088: ST_TO_ADDR
// hc_class := class_baggie ;
37089: LD_ADDR_OWVAR 28
37093: PUSH
37094: LD_INT 13
37096: ST_TO_ADDR
// hc_gallery :=  ;
37097: LD_ADDR_OWVAR 33
37101: PUSH
37102: LD_STRING 
37104: ST_TO_ADDR
// end ;
37105: LD_VAR 0 1
37109: RET
// export function PrepareFrog ( ) ; begin
37110: LD_INT 0
37112: PPUSH
// uc_side := 0 ;
37113: LD_ADDR_OWVAR 20
37117: PUSH
37118: LD_INT 0
37120: ST_TO_ADDR
// uc_nation := 0 ;
37121: LD_ADDR_OWVAR 21
37125: PUSH
37126: LD_INT 0
37128: ST_TO_ADDR
// hc_class := class_frog ;
37129: LD_ADDR_OWVAR 28
37133: PUSH
37134: LD_INT 19
37136: ST_TO_ADDR
// hc_gallery :=  ;
37137: LD_ADDR_OWVAR 33
37141: PUSH
37142: LD_STRING 
37144: ST_TO_ADDR
// end ;
37145: LD_VAR 0 1
37149: RET
// export function PrepareFish ( ) ; begin
37150: LD_INT 0
37152: PPUSH
// uc_side := 0 ;
37153: LD_ADDR_OWVAR 20
37157: PUSH
37158: LD_INT 0
37160: ST_TO_ADDR
// uc_nation := 0 ;
37161: LD_ADDR_OWVAR 21
37165: PUSH
37166: LD_INT 0
37168: ST_TO_ADDR
// hc_class := class_fish ;
37169: LD_ADDR_OWVAR 28
37173: PUSH
37174: LD_INT 20
37176: ST_TO_ADDR
// hc_gallery :=  ;
37177: LD_ADDR_OWVAR 33
37181: PUSH
37182: LD_STRING 
37184: ST_TO_ADDR
// end ;
37185: LD_VAR 0 1
37189: RET
// export function PrepareBird ( ) ; begin
37190: LD_INT 0
37192: PPUSH
// uc_side := 0 ;
37193: LD_ADDR_OWVAR 20
37197: PUSH
37198: LD_INT 0
37200: ST_TO_ADDR
// uc_nation := 0 ;
37201: LD_ADDR_OWVAR 21
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// hc_class := class_phororhacos ;
37209: LD_ADDR_OWVAR 28
37213: PUSH
37214: LD_INT 18
37216: ST_TO_ADDR
// hc_gallery :=  ;
37217: LD_ADDR_OWVAR 33
37221: PUSH
37222: LD_STRING 
37224: ST_TO_ADDR
// end ;
37225: LD_VAR 0 1
37229: RET
// export function PrepareHorse ( ) ; begin
37230: LD_INT 0
37232: PPUSH
// uc_side := 0 ;
37233: LD_ADDR_OWVAR 20
37237: PUSH
37238: LD_INT 0
37240: ST_TO_ADDR
// uc_nation := 0 ;
37241: LD_ADDR_OWVAR 21
37245: PUSH
37246: LD_INT 0
37248: ST_TO_ADDR
// hc_class := class_horse ;
37249: LD_ADDR_OWVAR 28
37253: PUSH
37254: LD_INT 21
37256: ST_TO_ADDR
// hc_gallery :=  ;
37257: LD_ADDR_OWVAR 33
37261: PUSH
37262: LD_STRING 
37264: ST_TO_ADDR
// end ;
37265: LD_VAR 0 1
37269: RET
// export function PrepareMastodont ( ) ; begin
37270: LD_INT 0
37272: PPUSH
// uc_side := 0 ;
37273: LD_ADDR_OWVAR 20
37277: PUSH
37278: LD_INT 0
37280: ST_TO_ADDR
// uc_nation := 0 ;
37281: LD_ADDR_OWVAR 21
37285: PUSH
37286: LD_INT 0
37288: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37289: LD_ADDR_OWVAR 37
37293: PUSH
37294: LD_INT 31
37296: ST_TO_ADDR
// vc_control := control_rider ;
37297: LD_ADDR_OWVAR 38
37301: PUSH
37302: LD_INT 4
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 1
37309: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37310: LD_INT 0
37312: PPUSH
37313: PPUSH
37314: PPUSH
// uc_side = 0 ;
37315: LD_ADDR_OWVAR 20
37319: PUSH
37320: LD_INT 0
37322: ST_TO_ADDR
// uc_nation = 0 ;
37323: LD_ADDR_OWVAR 21
37327: PUSH
37328: LD_INT 0
37330: ST_TO_ADDR
// InitHc_All ( ) ;
37331: CALL_OW 584
// InitVc ;
37335: CALL_OW 20
// if mastodonts then
37339: LD_VAR 0 6
37343: IFFALSE 37410
// for i = 1 to mastodonts do
37345: LD_ADDR_VAR 0 11
37349: PUSH
37350: DOUBLE
37351: LD_INT 1
37353: DEC
37354: ST_TO_ADDR
37355: LD_VAR 0 6
37359: PUSH
37360: FOR_TO
37361: IFFALSE 37408
// begin vc_chassis := 31 ;
37363: LD_ADDR_OWVAR 37
37367: PUSH
37368: LD_INT 31
37370: ST_TO_ADDR
// vc_control := control_rider ;
37371: LD_ADDR_OWVAR 38
37375: PUSH
37376: LD_INT 4
37378: ST_TO_ADDR
// animal := CreateVehicle ;
37379: LD_ADDR_VAR 0 12
37383: PUSH
37384: CALL_OW 45
37388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37389: LD_VAR 0 12
37393: PPUSH
37394: LD_VAR 0 8
37398: PPUSH
37399: LD_INT 0
37401: PPUSH
37402: CALL 39538 0 3
// end ;
37406: GO 37360
37408: POP
37409: POP
// if horses then
37410: LD_VAR 0 5
37414: IFFALSE 37481
// for i = 1 to horses do
37416: LD_ADDR_VAR 0 11
37420: PUSH
37421: DOUBLE
37422: LD_INT 1
37424: DEC
37425: ST_TO_ADDR
37426: LD_VAR 0 5
37430: PUSH
37431: FOR_TO
37432: IFFALSE 37479
// begin hc_class := 21 ;
37434: LD_ADDR_OWVAR 28
37438: PUSH
37439: LD_INT 21
37441: ST_TO_ADDR
// hc_gallery :=  ;
37442: LD_ADDR_OWVAR 33
37446: PUSH
37447: LD_STRING 
37449: ST_TO_ADDR
// animal := CreateHuman ;
37450: LD_ADDR_VAR 0 12
37454: PUSH
37455: CALL_OW 44
37459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37460: LD_VAR 0 12
37464: PPUSH
37465: LD_VAR 0 8
37469: PPUSH
37470: LD_INT 0
37472: PPUSH
37473: CALL 39538 0 3
// end ;
37477: GO 37431
37479: POP
37480: POP
// if birds then
37481: LD_VAR 0 1
37485: IFFALSE 37552
// for i = 1 to birds do
37487: LD_ADDR_VAR 0 11
37491: PUSH
37492: DOUBLE
37493: LD_INT 1
37495: DEC
37496: ST_TO_ADDR
37497: LD_VAR 0 1
37501: PUSH
37502: FOR_TO
37503: IFFALSE 37550
// begin hc_class := 18 ;
37505: LD_ADDR_OWVAR 28
37509: PUSH
37510: LD_INT 18
37512: ST_TO_ADDR
// hc_gallery =  ;
37513: LD_ADDR_OWVAR 33
37517: PUSH
37518: LD_STRING 
37520: ST_TO_ADDR
// animal := CreateHuman ;
37521: LD_ADDR_VAR 0 12
37525: PUSH
37526: CALL_OW 44
37530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37531: LD_VAR 0 12
37535: PPUSH
37536: LD_VAR 0 8
37540: PPUSH
37541: LD_INT 0
37543: PPUSH
37544: CALL 39538 0 3
// end ;
37548: GO 37502
37550: POP
37551: POP
// if tigers then
37552: LD_VAR 0 2
37556: IFFALSE 37640
// for i = 1 to tigers do
37558: LD_ADDR_VAR 0 11
37562: PUSH
37563: DOUBLE
37564: LD_INT 1
37566: DEC
37567: ST_TO_ADDR
37568: LD_VAR 0 2
37572: PUSH
37573: FOR_TO
37574: IFFALSE 37638
// begin hc_class = class_tiger ;
37576: LD_ADDR_OWVAR 28
37580: PUSH
37581: LD_INT 14
37583: ST_TO_ADDR
// hc_gallery =  ;
37584: LD_ADDR_OWVAR 33
37588: PUSH
37589: LD_STRING 
37591: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37592: LD_ADDR_OWVAR 35
37596: PUSH
37597: LD_INT 7
37599: NEG
37600: PPUSH
37601: LD_INT 7
37603: PPUSH
37604: CALL_OW 12
37608: ST_TO_ADDR
// animal := CreateHuman ;
37609: LD_ADDR_VAR 0 12
37613: PUSH
37614: CALL_OW 44
37618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37619: LD_VAR 0 12
37623: PPUSH
37624: LD_VAR 0 8
37628: PPUSH
37629: LD_INT 0
37631: PPUSH
37632: CALL 39538 0 3
// end ;
37636: GO 37573
37638: POP
37639: POP
// if apemans then
37640: LD_VAR 0 3
37644: IFFALSE 37767
// for i = 1 to apemans do
37646: LD_ADDR_VAR 0 11
37650: PUSH
37651: DOUBLE
37652: LD_INT 1
37654: DEC
37655: ST_TO_ADDR
37656: LD_VAR 0 3
37660: PUSH
37661: FOR_TO
37662: IFFALSE 37765
// begin hc_class = class_apeman ;
37664: LD_ADDR_OWVAR 28
37668: PUSH
37669: LD_INT 12
37671: ST_TO_ADDR
// hc_gallery =  ;
37672: LD_ADDR_OWVAR 33
37676: PUSH
37677: LD_STRING 
37679: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37680: LD_ADDR_OWVAR 35
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PPUSH
37689: LD_INT 2
37691: PPUSH
37692: CALL_OW 12
37696: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37697: LD_ADDR_OWVAR 31
37701: PUSH
37702: LD_INT 1
37704: PPUSH
37705: LD_INT 3
37707: PPUSH
37708: CALL_OW 12
37712: PUSH
37713: LD_INT 1
37715: PPUSH
37716: LD_INT 3
37718: PPUSH
37719: CALL_OW 12
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// animal := CreateHuman ;
37736: LD_ADDR_VAR 0 12
37740: PUSH
37741: CALL_OW 44
37745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37746: LD_VAR 0 12
37750: PPUSH
37751: LD_VAR 0 8
37755: PPUSH
37756: LD_INT 0
37758: PPUSH
37759: CALL 39538 0 3
// end ;
37763: GO 37661
37765: POP
37766: POP
// if enchidnas then
37767: LD_VAR 0 4
37771: IFFALSE 37838
// for i = 1 to enchidnas do
37773: LD_ADDR_VAR 0 11
37777: PUSH
37778: DOUBLE
37779: LD_INT 1
37781: DEC
37782: ST_TO_ADDR
37783: LD_VAR 0 4
37787: PUSH
37788: FOR_TO
37789: IFFALSE 37836
// begin hc_class = 13 ;
37791: LD_ADDR_OWVAR 28
37795: PUSH
37796: LD_INT 13
37798: ST_TO_ADDR
// hc_gallery =  ;
37799: LD_ADDR_OWVAR 33
37803: PUSH
37804: LD_STRING 
37806: ST_TO_ADDR
// animal := CreateHuman ;
37807: LD_ADDR_VAR 0 12
37811: PUSH
37812: CALL_OW 44
37816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37817: LD_VAR 0 12
37821: PPUSH
37822: LD_VAR 0 8
37826: PPUSH
37827: LD_INT 0
37829: PPUSH
37830: CALL 39538 0 3
// end ;
37834: GO 37788
37836: POP
37837: POP
// if fishes then
37838: LD_VAR 0 7
37842: IFFALSE 37909
// for i = 1 to fishes do
37844: LD_ADDR_VAR 0 11
37848: PUSH
37849: DOUBLE
37850: LD_INT 1
37852: DEC
37853: ST_TO_ADDR
37854: LD_VAR 0 7
37858: PUSH
37859: FOR_TO
37860: IFFALSE 37907
// begin hc_class = 20 ;
37862: LD_ADDR_OWVAR 28
37866: PUSH
37867: LD_INT 20
37869: ST_TO_ADDR
// hc_gallery =  ;
37870: LD_ADDR_OWVAR 33
37874: PUSH
37875: LD_STRING 
37877: ST_TO_ADDR
// animal := CreateHuman ;
37878: LD_ADDR_VAR 0 12
37882: PUSH
37883: CALL_OW 44
37887: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37888: LD_VAR 0 12
37892: PPUSH
37893: LD_VAR 0 9
37897: PPUSH
37898: LD_INT 0
37900: PPUSH
37901: CALL 39538 0 3
// end ;
37905: GO 37859
37907: POP
37908: POP
// end ;
37909: LD_VAR 0 10
37913: RET
// export function WantHeal ( sci , unit ) ; begin
37914: LD_INT 0
37916: PPUSH
// if GetTaskList ( sci ) > 0 then
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 437
37926: PUSH
37927: LD_INT 0
37929: GREATER
37930: IFFALSE 38000
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 437
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PUSH
37946: LD_INT 1
37948: ARRAY
37949: PUSH
37950: LD_STRING l
37952: EQUAL
37953: PUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 437
37963: PUSH
37964: LD_INT 1
37966: ARRAY
37967: PUSH
37968: LD_INT 4
37970: ARRAY
37971: PUSH
37972: LD_VAR 0 2
37976: EQUAL
37977: AND
37978: IFFALSE 37990
// result := true else
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: LD_INT 1
37987: ST_TO_ADDR
37988: GO 37998
// result := false ;
37990: LD_ADDR_VAR 0 3
37994: PUSH
37995: LD_INT 0
37997: ST_TO_ADDR
// end else
37998: GO 38008
// result := false ;
38000: LD_ADDR_VAR 0 3
38004: PUSH
38005: LD_INT 0
38007: ST_TO_ADDR
// end ;
38008: LD_VAR 0 3
38012: RET
// export function HealTarget ( sci ) ; begin
38013: LD_INT 0
38015: PPUSH
// if not sci then
38016: LD_VAR 0 1
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38090
// result := 0 ;
38025: LD_ADDR_VAR 0 2
38029: PUSH
38030: LD_INT 0
38032: ST_TO_ADDR
// if GetTaskList ( sci ) then
38033: LD_VAR 0 1
38037: PPUSH
38038: CALL_OW 437
38042: IFFALSE 38090
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 437
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: PUSH
38062: LD_STRING l
38064: EQUAL
38065: IFFALSE 38090
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38067: LD_ADDR_VAR 0 2
38071: PUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 437
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PUSH
38086: LD_INT 4
38088: ARRAY
38089: ST_TO_ADDR
// end ;
38090: LD_VAR 0 2
38094: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38095: LD_INT 0
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
// if not base_units then
38101: LD_VAR 0 1
38105: NOT
38106: IFFALSE 38110
// exit ;
38108: GO 38197
// result := false ;
38110: LD_ADDR_VAR 0 2
38114: PUSH
38115: LD_INT 0
38117: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38118: LD_ADDR_VAR 0 5
38122: PUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: LD_INT 21
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PPUSH
38138: CALL_OW 72
38142: ST_TO_ADDR
// if not tmp then
38143: LD_VAR 0 5
38147: NOT
38148: IFFALSE 38152
// exit ;
38150: GO 38197
// for i in tmp do
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_VAR 0 5
38161: PUSH
38162: FOR_IN
38163: IFFALSE 38195
// begin result := EnemyInRange ( i , 22 ) ;
38165: LD_ADDR_VAR 0 2
38169: PUSH
38170: LD_VAR 0 3
38174: PPUSH
38175: LD_INT 22
38177: PPUSH
38178: CALL 35795 0 2
38182: ST_TO_ADDR
// if result then
38183: LD_VAR 0 2
38187: IFFALSE 38193
// exit ;
38189: POP
38190: POP
38191: GO 38197
// end ;
38193: GO 38162
38195: POP
38196: POP
// end ;
38197: LD_VAR 0 2
38201: RET
// export function FilterByTag ( units , tag ) ; begin
38202: LD_INT 0
38204: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: LD_INT 120
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 72
38231: ST_TO_ADDR
// end ;
38232: LD_VAR 0 3
38236: RET
// export function IsDriver ( un ) ; begin
38237: LD_INT 0
38239: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38240: LD_ADDR_VAR 0 2
38244: PUSH
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 55
38252: PUSH
38253: EMPTY
38254: LIST
38255: PPUSH
38256: CALL_OW 69
38260: IN
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 2
38266: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
// list := [ ] ;
38271: LD_ADDR_VAR 0 5
38275: PUSH
38276: EMPTY
38277: ST_TO_ADDR
// case d of 0 :
38278: LD_VAR 0 3
38282: PUSH
38283: LD_INT 0
38285: DOUBLE
38286: EQUAL
38287: IFTRUE 38291
38289: GO 38424
38291: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38292: LD_ADDR_VAR 0 5
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_INT 4
38304: MINUS
38305: PUSH
38306: LD_VAR 0 2
38310: PUSH
38311: LD_INT 4
38313: MINUS
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: PUSH
38323: LD_VAR 0 1
38327: PUSH
38328: LD_INT 3
38330: MINUS
38331: PUSH
38332: LD_VAR 0 2
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: PUSH
38345: LD_VAR 0 1
38349: PUSH
38350: LD_INT 4
38352: PLUS
38353: PUSH
38354: LD_VAR 0 2
38358: PUSH
38359: LD_INT 4
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: LD_VAR 0 1
38371: PUSH
38372: LD_INT 3
38374: PLUS
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 3
38383: PLUS
38384: PUSH
38385: LD_INT 5
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_VAR 0 1
38397: PUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_INT 4
38405: PLUS
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// end ; 1 :
38422: GO 39122
38424: LD_INT 1
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 38565
38432: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38433: LD_ADDR_VAR 0 5
38437: PUSH
38438: LD_VAR 0 1
38442: PUSH
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 4
38450: MINUS
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: PUSH
38460: LD_VAR 0 1
38464: PUSH
38465: LD_INT 3
38467: MINUS
38468: PUSH
38469: LD_VAR 0 2
38473: PUSH
38474: LD_INT 3
38476: MINUS
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: PUSH
38486: LD_VAR 0 1
38490: PUSH
38491: LD_INT 4
38493: MINUS
38494: PUSH
38495: LD_VAR 0 2
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: PUSH
38508: LD_VAR 0 1
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_INT 3
38520: PLUS
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_VAR 0 1
38534: PUSH
38535: LD_INT 4
38537: PLUS
38538: PUSH
38539: LD_VAR 0 2
38543: PUSH
38544: LD_INT 4
38546: PLUS
38547: PUSH
38548: LD_INT 5
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// end ; 2 :
38563: GO 39122
38565: LD_INT 2
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38702
38573: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: LD_VAR 0 1
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 3
38591: MINUS
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: PUSH
38601: LD_VAR 0 1
38605: PUSH
38606: LD_INT 4
38608: PLUS
38609: PUSH
38610: LD_VAR 0 2
38614: PUSH
38615: LD_INT 4
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: LD_VAR 0 2
38632: PUSH
38633: LD_INT 4
38635: PLUS
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 3
38652: MINUS
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_INT 4
38674: MINUS
38675: PUSH
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 4
38683: MINUS
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// end ; 3 :
38700: GO 39122
38702: LD_INT 3
38704: DOUBLE
38705: EQUAL
38706: IFTRUE 38710
38708: GO 38843
38710: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38711: LD_ADDR_VAR 0 5
38715: PUSH
38716: LD_VAR 0 1
38720: PUSH
38721: LD_INT 3
38723: PLUS
38724: PUSH
38725: LD_VAR 0 2
38729: PUSH
38730: LD_INT 4
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: LD_INT 4
38745: PLUS
38746: PUSH
38747: LD_VAR 0 2
38751: PUSH
38752: LD_INT 4
38754: PLUS
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: PUSH
38764: LD_VAR 0 1
38768: PUSH
38769: LD_INT 4
38771: MINUS
38772: PUSH
38773: LD_VAR 0 2
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: PUSH
38786: LD_VAR 0 1
38790: PUSH
38791: LD_VAR 0 2
38795: PUSH
38796: LD_INT 4
38798: MINUS
38799: PUSH
38800: LD_INT 3
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: PUSH
38808: LD_VAR 0 1
38812: PUSH
38813: LD_INT 3
38815: MINUS
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_INT 3
38824: MINUS
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: ST_TO_ADDR
// end ; 4 :
38841: GO 39122
38843: LD_INT 4
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 38984
38851: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38852: LD_ADDR_VAR 0 5
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_VAR 0 2
38866: PUSH
38867: LD_INT 4
38869: PLUS
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: PUSH
38879: LD_VAR 0 1
38883: PUSH
38884: LD_INT 3
38886: PLUS
38887: PUSH
38888: LD_VAR 0 2
38892: PUSH
38893: LD_INT 3
38895: PLUS
38896: PUSH
38897: LD_INT 5
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: LD_VAR 0 1
38909: PUSH
38910: LD_INT 4
38912: PLUS
38913: PUSH
38914: LD_VAR 0 2
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 3
38939: MINUS
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: LD_VAR 0 1
38953: PUSH
38954: LD_INT 4
38956: MINUS
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 4
38965: MINUS
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: ST_TO_ADDR
// end ; 5 :
38982: GO 39122
38984: LD_INT 5
38986: DOUBLE
38987: EQUAL
38988: IFTRUE 38992
38990: GO 39121
38992: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38993: LD_ADDR_VAR 0 5
38997: PUSH
38998: LD_VAR 0 1
39002: PUSH
39003: LD_INT 4
39005: MINUS
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: LD_VAR 0 1
39024: PUSH
39025: LD_VAR 0 2
39029: PUSH
39030: LD_INT 4
39032: MINUS
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: PUSH
39042: LD_VAR 0 1
39046: PUSH
39047: LD_INT 4
39049: PLUS
39050: PUSH
39051: LD_VAR 0 2
39055: PUSH
39056: LD_INT 4
39058: PLUS
39059: PUSH
39060: LD_INT 5
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 3
39075: PLUS
39076: PUSH
39077: LD_VAR 0 2
39081: PUSH
39082: LD_INT 4
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: PUSH
39090: LD_VAR 0 1
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 3
39102: PLUS
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
// end ; end ;
39119: GO 39122
39121: POP
// result := list ;
39122: LD_ADDR_VAR 0 4
39126: PUSH
39127: LD_VAR 0 5
39131: ST_TO_ADDR
// end ;
39132: LD_VAR 0 4
39136: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39137: LD_INT 0
39139: PPUSH
39140: PPUSH
39141: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39142: LD_VAR 0 1
39146: NOT
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 3
39161: PUSH
39162: LD_INT 4
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: IN
39171: NOT
39172: OR
39173: IFFALSE 39177
// exit ;
39175: GO 39260
// tmp := [ ] ;
39177: LD_ADDR_VAR 0 5
39181: PUSH
39182: EMPTY
39183: ST_TO_ADDR
// for i in units do
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: LD_VAR 0 1
39193: PUSH
39194: FOR_IN
39195: IFFALSE 39229
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_VAR 0 5
39206: PPUSH
39207: LD_VAR 0 4
39211: PPUSH
39212: LD_VAR 0 2
39216: PPUSH
39217: CALL_OW 259
39221: PPUSH
39222: CALL 40633 0 2
39226: ST_TO_ADDR
39227: GO 39194
39229: POP
39230: POP
// if not tmp then
39231: LD_VAR 0 5
39235: NOT
39236: IFFALSE 39240
// exit ;
39238: GO 39260
// result := SortListByListDesc ( units , tmp ) ;
39240: LD_ADDR_VAR 0 3
39244: PUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: LD_VAR 0 5
39254: PPUSH
39255: CALL_OW 77
39259: ST_TO_ADDR
// end ;
39260: LD_VAR 0 3
39264: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39265: LD_INT 0
39267: PPUSH
39268: PPUSH
39269: PPUSH
// result := false ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: LD_INT 0
39277: ST_TO_ADDR
// if not building then
39278: LD_VAR 0 2
39282: NOT
39283: IFFALSE 39287
// exit ;
39285: GO 39425
// x := GetX ( building ) ;
39287: LD_ADDR_VAR 0 4
39291: PUSH
39292: LD_VAR 0 2
39296: PPUSH
39297: CALL_OW 250
39301: ST_TO_ADDR
// y := GetY ( building ) ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_VAR 0 2
39311: PPUSH
39312: CALL_OW 251
39316: ST_TO_ADDR
// if not x or not y then
39317: LD_VAR 0 4
39321: NOT
39322: PUSH
39323: LD_VAR 0 5
39327: NOT
39328: OR
39329: IFFALSE 39333
// exit ;
39331: GO 39425
// if GetTaskList ( unit ) then
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 437
39342: IFFALSE 39425
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39344: LD_STRING e
39346: PUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: CALL_OW 437
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: PUSH
39361: LD_INT 1
39363: ARRAY
39364: EQUAL
39365: PUSH
39366: LD_VAR 0 4
39370: PUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: CALL_OW 437
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: EQUAL
39389: AND
39390: PUSH
39391: LD_VAR 0 5
39395: PUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: CALL_OW 437
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: PUSH
39410: LD_INT 3
39412: ARRAY
39413: EQUAL
39414: AND
39415: IFFALSE 39425
// result := true end ;
39417: LD_ADDR_VAR 0 3
39421: PUSH
39422: LD_INT 1
39424: ST_TO_ADDR
// end ;
39425: LD_VAR 0 3
39429: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39430: LD_INT 0
39432: PPUSH
// result := false ;
39433: LD_ADDR_VAR 0 4
39437: PUSH
39438: LD_INT 0
39440: ST_TO_ADDR
// if GetTaskList ( unit ) then
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 437
39450: IFFALSE 39533
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39452: LD_STRING M
39454: PUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 437
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: EQUAL
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 437
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: PUSH
39493: LD_INT 2
39495: ARRAY
39496: EQUAL
39497: AND
39498: PUSH
39499: LD_VAR 0 3
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 437
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PUSH
39518: LD_INT 3
39520: ARRAY
39521: EQUAL
39522: AND
39523: IFFALSE 39533
// result := true ;
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: LD_INT 1
39532: ST_TO_ADDR
// end ; end ;
39533: LD_VAR 0 4
39537: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39538: LD_INT 0
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
// if not unit or not area then
39544: LD_VAR 0 1
39548: NOT
39549: PUSH
39550: LD_VAR 0 2
39554: NOT
39555: OR
39556: IFFALSE 39560
// exit ;
39558: GO 39736
// tmp := AreaToList ( area , i ) ;
39560: LD_ADDR_VAR 0 6
39564: PUSH
39565: LD_VAR 0 2
39569: PPUSH
39570: LD_VAR 0 5
39574: PPUSH
39575: CALL_OW 517
39579: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39580: LD_ADDR_VAR 0 5
39584: PUSH
39585: DOUBLE
39586: LD_INT 1
39588: DEC
39589: ST_TO_ADDR
39590: LD_VAR 0 6
39594: PUSH
39595: LD_INT 1
39597: ARRAY
39598: PUSH
39599: FOR_TO
39600: IFFALSE 39734
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39602: LD_ADDR_VAR 0 7
39606: PUSH
39607: LD_VAR 0 6
39611: PUSH
39612: LD_INT 1
39614: ARRAY
39615: PUSH
39616: LD_VAR 0 5
39620: ARRAY
39621: PUSH
39622: LD_VAR 0 6
39626: PUSH
39627: LD_INT 2
39629: ARRAY
39630: PUSH
39631: LD_VAR 0 5
39635: ARRAY
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39641: LD_INT 92
39643: PUSH
39644: LD_VAR 0 7
39648: PUSH
39649: LD_INT 1
39651: ARRAY
39652: PUSH
39653: LD_VAR 0 7
39657: PUSH
39658: LD_INT 2
39660: ARRAY
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: PPUSH
39671: CALL_OW 69
39675: PUSH
39676: LD_INT 0
39678: EQUAL
39679: IFFALSE 39732
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39681: LD_VAR 0 1
39685: PPUSH
39686: LD_VAR 0 7
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: LD_VAR 0 7
39699: PUSH
39700: LD_INT 2
39702: ARRAY
39703: PPUSH
39704: LD_VAR 0 3
39708: PPUSH
39709: CALL_OW 48
// result := IsPlaced ( unit ) ;
39713: LD_ADDR_VAR 0 4
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 305
39727: ST_TO_ADDR
// exit ;
39728: POP
39729: POP
39730: GO 39736
// end ; end ;
39732: GO 39599
39734: POP
39735: POP
// end ;
39736: LD_VAR 0 4
39740: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
39745: PPUSH
// if not side or side > 8 then
39746: LD_VAR 0 1
39750: NOT
39751: PUSH
39752: LD_VAR 0 1
39756: PUSH
39757: LD_INT 8
39759: GREATER
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 39952
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39765: LD_ADDR_VAR 0 4
39769: PUSH
39770: LD_INT 22
39772: PUSH
39773: LD_VAR 0 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 21
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PPUSH
39796: CALL_OW 69
39800: ST_TO_ADDR
// if not tmp then
39801: LD_VAR 0 4
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39952
// enable_addtolog := true ;
39810: LD_ADDR_OWVAR 81
39814: PUSH
39815: LD_INT 1
39817: ST_TO_ADDR
// AddToLog ( [ ) ;
39818: LD_STRING [
39820: PPUSH
39821: CALL_OW 561
// for i in tmp do
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 4
39834: PUSH
39835: FOR_IN
39836: IFFALSE 39943
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39838: LD_STRING [
39840: PUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: CALL_OW 266
39850: STR
39851: PUSH
39852: LD_STRING , 
39854: STR
39855: PUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL_OW 250
39865: STR
39866: PUSH
39867: LD_STRING , 
39869: STR
39870: PUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: CALL_OW 251
39880: STR
39881: PUSH
39882: LD_STRING , 
39884: STR
39885: PUSH
39886: LD_VAR 0 3
39890: PPUSH
39891: CALL_OW 254
39895: STR
39896: PUSH
39897: LD_STRING , 
39899: STR
39900: PUSH
39901: LD_VAR 0 3
39905: PPUSH
39906: LD_INT 1
39908: PPUSH
39909: CALL_OW 268
39913: STR
39914: PUSH
39915: LD_STRING , 
39917: STR
39918: PUSH
39919: LD_VAR 0 3
39923: PPUSH
39924: LD_INT 2
39926: PPUSH
39927: CALL_OW 268
39931: STR
39932: PUSH
39933: LD_STRING ],
39935: STR
39936: PPUSH
39937: CALL_OW 561
// end ;
39941: GO 39835
39943: POP
39944: POP
// AddToLog ( ]; ) ;
39945: LD_STRING ];
39947: PPUSH
39948: CALL_OW 561
// end ;
39952: LD_VAR 0 2
39956: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
// if not area or not rate or not max then
39964: LD_VAR 0 1
39968: NOT
39969: PUSH
39970: LD_VAR 0 2
39974: NOT
39975: OR
39976: PUSH
39977: LD_VAR 0 4
39981: NOT
39982: OR
39983: IFFALSE 39987
// exit ;
39985: GO 40176
// while 1 do
39987: LD_INT 1
39989: IFFALSE 40176
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: LD_INT 1
40003: PPUSH
40004: CALL_OW 287
40008: PUSH
40009: LD_INT 10
40011: MUL
40012: ST_TO_ADDR
// r := rate / 10 ;
40013: LD_ADDR_VAR 0 7
40017: PUSH
40018: LD_VAR 0 2
40022: PUSH
40023: LD_INT 10
40025: DIVREAL
40026: ST_TO_ADDR
// time := 1 1$00 ;
40027: LD_ADDR_VAR 0 8
40031: PUSH
40032: LD_INT 2100
40034: ST_TO_ADDR
// if amount < min then
40035: LD_VAR 0 9
40039: PUSH
40040: LD_VAR 0 3
40044: LESS
40045: IFFALSE 40063
// r := r * 2 else
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 7
40056: PUSH
40057: LD_INT 2
40059: MUL
40060: ST_TO_ADDR
40061: GO 40089
// if amount > max then
40063: LD_VAR 0 9
40067: PUSH
40068: LD_VAR 0 4
40072: GREATER
40073: IFFALSE 40089
// r := r / 2 ;
40075: LD_ADDR_VAR 0 7
40079: PUSH
40080: LD_VAR 0 7
40084: PUSH
40085: LD_INT 2
40087: DIVREAL
40088: ST_TO_ADDR
// time := time / r ;
40089: LD_ADDR_VAR 0 8
40093: PUSH
40094: LD_VAR 0 8
40098: PUSH
40099: LD_VAR 0 7
40103: DIVREAL
40104: ST_TO_ADDR
// if time < 0 then
40105: LD_VAR 0 8
40109: PUSH
40110: LD_INT 0
40112: LESS
40113: IFFALSE 40130
// time := time * - 1 ;
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_VAR 0 8
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: MUL
40129: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40130: LD_VAR 0 8
40134: PUSH
40135: LD_INT 35
40137: PPUSH
40138: LD_INT 875
40140: PPUSH
40141: CALL_OW 12
40145: PLUS
40146: PPUSH
40147: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40151: LD_INT 1
40153: PPUSH
40154: LD_INT 5
40156: PPUSH
40157: CALL_OW 12
40161: PPUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 55
// end ;
40174: GO 39987
// end ;
40176: LD_VAR 0 5
40180: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40181: LD_INT 0
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
// if not turrets or not factories then
40191: LD_VAR 0 1
40195: NOT
40196: PUSH
40197: LD_VAR 0 2
40201: NOT
40202: OR
40203: IFFALSE 40207
// exit ;
40205: GO 40514
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40207: LD_ADDR_VAR 0 10
40211: PUSH
40212: LD_INT 5
40214: PUSH
40215: LD_INT 6
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: LD_INT 5
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 24
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 23
40259: PUSH
40260: LD_INT 27
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 42
40273: PUSH
40274: LD_INT 43
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 44
40283: PUSH
40284: LD_INT 46
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 45
40293: PUSH
40294: LD_INT 47
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: ST_TO_ADDR
// result := [ ] ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: EMPTY
40317: ST_TO_ADDR
// for i in turrets do
40318: LD_ADDR_VAR 0 4
40322: PUSH
40323: LD_VAR 0 1
40327: PUSH
40328: FOR_IN
40329: IFFALSE 40512
// begin nat := GetNation ( i ) ;
40331: LD_ADDR_VAR 0 7
40335: PUSH
40336: LD_VAR 0 4
40340: PPUSH
40341: CALL_OW 248
40345: ST_TO_ADDR
// weapon := 0 ;
40346: LD_ADDR_VAR 0 8
40350: PUSH
40351: LD_INT 0
40353: ST_TO_ADDR
// if not nat then
40354: LD_VAR 0 7
40358: NOT
40359: IFFALSE 40363
// continue ;
40361: GO 40328
// for j in list [ nat ] do
40363: LD_ADDR_VAR 0 5
40367: PUSH
40368: LD_VAR 0 10
40372: PUSH
40373: LD_VAR 0 7
40377: ARRAY
40378: PUSH
40379: FOR_IN
40380: IFFALSE 40421
// if GetBWeapon ( i ) = j [ 1 ] then
40382: LD_VAR 0 4
40386: PPUSH
40387: CALL_OW 269
40391: PUSH
40392: LD_VAR 0 5
40396: PUSH
40397: LD_INT 1
40399: ARRAY
40400: EQUAL
40401: IFFALSE 40419
// begin weapon := j [ 2 ] ;
40403: LD_ADDR_VAR 0 8
40407: PUSH
40408: LD_VAR 0 5
40412: PUSH
40413: LD_INT 2
40415: ARRAY
40416: ST_TO_ADDR
// break ;
40417: GO 40421
// end ;
40419: GO 40379
40421: POP
40422: POP
// if not weapon then
40423: LD_VAR 0 8
40427: NOT
40428: IFFALSE 40432
// continue ;
40430: GO 40328
// for k in factories do
40432: LD_ADDR_VAR 0 6
40436: PUSH
40437: LD_VAR 0 2
40441: PUSH
40442: FOR_IN
40443: IFFALSE 40508
// begin weapons := AvailableWeaponList ( k ) ;
40445: LD_ADDR_VAR 0 9
40449: PUSH
40450: LD_VAR 0 6
40454: PPUSH
40455: CALL_OW 478
40459: ST_TO_ADDR
// if not weapons then
40460: LD_VAR 0 9
40464: NOT
40465: IFFALSE 40469
// continue ;
40467: GO 40442
// if weapon in weapons then
40469: LD_VAR 0 8
40473: PUSH
40474: LD_VAR 0 9
40478: IN
40479: IFFALSE 40506
// begin result := [ i , weapon ] ;
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_VAR 0 4
40490: PUSH
40491: LD_VAR 0 8
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// exit ;
40500: POP
40501: POP
40502: POP
40503: POP
40504: GO 40514
// end ; end ;
40506: GO 40442
40508: POP
40509: POP
// end ;
40510: GO 40328
40512: POP
40513: POP
// end ;
40514: LD_VAR 0 3
40518: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40519: LD_INT 0
40521: PPUSH
// if not side or side > 8 then
40522: LD_VAR 0 3
40526: NOT
40527: PUSH
40528: LD_VAR 0 3
40532: PUSH
40533: LD_INT 8
40535: GREATER
40536: OR
40537: IFFALSE 40541
// exit ;
40539: GO 40600
// if not range then
40541: LD_VAR 0 4
40545: NOT
40546: IFFALSE 40557
// range := - 12 ;
40548: LD_ADDR_VAR 0 4
40552: PUSH
40553: LD_INT 12
40555: NEG
40556: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40557: LD_VAR 0 1
40561: PPUSH
40562: LD_VAR 0 2
40566: PPUSH
40567: LD_VAR 0 3
40571: PPUSH
40572: LD_VAR 0 4
40576: PPUSH
40577: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40581: LD_VAR 0 1
40585: PPUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: LD_VAR 0 3
40595: PPUSH
40596: CALL_OW 331
// end ;
40600: LD_VAR 0 5
40604: RET
// export function Video ( mode ) ; begin
40605: LD_INT 0
40607: PPUSH
// ingame_video = mode ;
40608: LD_ADDR_OWVAR 52
40612: PUSH
40613: LD_VAR 0 1
40617: ST_TO_ADDR
// interface_hidden = mode ;
40618: LD_ADDR_OWVAR 54
40622: PUSH
40623: LD_VAR 0 1
40627: ST_TO_ADDR
// end ;
40628: LD_VAR 0 2
40632: RET
// export function Join ( array , element ) ; begin
40633: LD_INT 0
40635: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: LD_VAR 0 1
40650: PUSH
40651: LD_INT 1
40653: PLUS
40654: PPUSH
40655: LD_VAR 0 2
40659: PPUSH
40660: CALL_OW 1
40664: ST_TO_ADDR
// end ;
40665: LD_VAR 0 3
40669: RET
// export function JoinUnion ( array , element ) ; begin
40670: LD_INT 0
40672: PPUSH
// result := array union element ;
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_VAR 0 1
40682: PUSH
40683: LD_VAR 0 2
40687: UNION
40688: ST_TO_ADDR
// end ;
40689: LD_VAR 0 3
40693: RET
// export function GetBehemoths ( side ) ; begin
40694: LD_INT 0
40696: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40697: LD_ADDR_VAR 0 2
40701: PUSH
40702: LD_INT 22
40704: PUSH
40705: LD_VAR 0 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 31
40716: PUSH
40717: LD_INT 25
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PPUSH
40728: CALL_OW 69
40732: ST_TO_ADDR
// end ;
40733: LD_VAR 0 2
40737: RET
// export function Shuffle ( array ) ; var i , index ; begin
40738: LD_INT 0
40740: PPUSH
40741: PPUSH
40742: PPUSH
// result := [ ] ;
40743: LD_ADDR_VAR 0 2
40747: PUSH
40748: EMPTY
40749: ST_TO_ADDR
// if not array then
40750: LD_VAR 0 1
40754: NOT
40755: IFFALSE 40759
// exit ;
40757: GO 40858
// Randomize ;
40759: CALL_OW 10
// for i = array downto 1 do
40763: LD_ADDR_VAR 0 3
40767: PUSH
40768: DOUBLE
40769: LD_VAR 0 1
40773: INC
40774: ST_TO_ADDR
40775: LD_INT 1
40777: PUSH
40778: FOR_DOWNTO
40779: IFFALSE 40856
// begin index := rand ( 1 , array ) ;
40781: LD_ADDR_VAR 0 4
40785: PUSH
40786: LD_INT 1
40788: PPUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 12
40798: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40799: LD_ADDR_VAR 0 2
40803: PUSH
40804: LD_VAR 0 2
40808: PPUSH
40809: LD_VAR 0 2
40813: PUSH
40814: LD_INT 1
40816: PLUS
40817: PPUSH
40818: LD_VAR 0 1
40822: PUSH
40823: LD_VAR 0 4
40827: ARRAY
40828: PPUSH
40829: CALL_OW 2
40833: ST_TO_ADDR
// array := Delete ( array , index ) ;
40834: LD_ADDR_VAR 0 1
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: LD_VAR 0 4
40848: PPUSH
40849: CALL_OW 3
40853: ST_TO_ADDR
// end ;
40854: GO 40778
40856: POP
40857: POP
// end ;
40858: LD_VAR 0 2
40862: RET
// export function GetBaseMaterials ( base ) ; begin
40863: LD_INT 0
40865: PPUSH
// result := [ 0 , 0 , 0 ] ;
40866: LD_ADDR_VAR 0 2
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// if not base then
40885: LD_VAR 0 1
40889: NOT
40890: IFFALSE 40894
// exit ;
40892: GO 40943
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40894: LD_ADDR_VAR 0 2
40898: PUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_INT 1
40906: PPUSH
40907: CALL_OW 275
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: LD_INT 2
40919: PPUSH
40920: CALL_OW 275
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_INT 3
40932: PPUSH
40933: CALL_OW 275
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 2
40947: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40948: LD_INT 0
40950: PPUSH
40951: PPUSH
// result := array ;
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 1
40961: ST_TO_ADDR
// if size >= result then
40962: LD_VAR 0 2
40966: PUSH
40967: LD_VAR 0 3
40971: GREATEREQUAL
40972: IFFALSE 40976
// exit ;
40974: GO 41026
// if size then
40976: LD_VAR 0 2
40980: IFFALSE 41026
// for i := array downto size do
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: DOUBLE
40988: LD_VAR 0 1
40992: INC
40993: ST_TO_ADDR
40994: LD_VAR 0 2
40998: PUSH
40999: FOR_DOWNTO
41000: IFFALSE 41024
// result := Delete ( result , result ) ;
41002: LD_ADDR_VAR 0 3
41006: PUSH
41007: LD_VAR 0 3
41011: PPUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: CALL_OW 3
41021: ST_TO_ADDR
41022: GO 40999
41024: POP
41025: POP
// end ;
41026: LD_VAR 0 3
41030: RET
// export function ComExit ( unit ) ; var tmp ; begin
41031: LD_INT 0
41033: PPUSH
41034: PPUSH
// if not IsInUnit ( unit ) then
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 310
41044: NOT
41045: IFFALSE 41049
// exit ;
41047: GO 41109
// tmp := IsInUnit ( unit ) ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_VAR 0 1
41058: PPUSH
41059: CALL_OW 310
41063: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41064: LD_VAR 0 3
41068: PPUSH
41069: CALL_OW 247
41073: PUSH
41074: LD_INT 2
41076: EQUAL
41077: IFFALSE 41090
// ComExitVehicle ( unit ) else
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 121
41088: GO 41099
// ComExitBuilding ( unit ) ;
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 122
// result := tmp ;
41099: LD_ADDR_VAR 0 2
41103: PUSH
41104: LD_VAR 0 3
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 2
41113: RET
// export function ComExitAll ( units ) ; var i ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
// if not units then
41118: LD_VAR 0 1
41122: NOT
41123: IFFALSE 41127
// exit ;
41125: GO 41153
// for i in units do
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_VAR 0 1
41136: PUSH
41137: FOR_IN
41138: IFFALSE 41151
// ComExit ( i ) ;
41140: LD_VAR 0 3
41144: PPUSH
41145: CALL 41031 0 1
41149: GO 41137
41151: POP
41152: POP
// end ;
41153: LD_VAR 0 2
41157: RET
// export function ResetHc ; begin
41158: LD_INT 0
41160: PPUSH
// InitHc ;
41161: CALL_OW 19
// hc_importance := 0 ;
41165: LD_ADDR_OWVAR 32
41169: PUSH
41170: LD_INT 0
41172: ST_TO_ADDR
// end ;
41173: LD_VAR 0 1
41177: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41178: LD_INT 0
41180: PPUSH
41181: PPUSH
41182: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41183: LD_ADDR_VAR 0 6
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: LD_VAR 0 3
41197: PLUS
41198: PUSH
41199: LD_INT 2
41201: DIV
41202: ST_TO_ADDR
// if _x < 0 then
41203: LD_VAR 0 6
41207: PUSH
41208: LD_INT 0
41210: LESS
41211: IFFALSE 41228
// _x := _x * - 1 ;
41213: LD_ADDR_VAR 0 6
41217: PUSH
41218: LD_VAR 0 6
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: MUL
41227: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41228: LD_ADDR_VAR 0 7
41232: PUSH
41233: LD_VAR 0 2
41237: PUSH
41238: LD_VAR 0 4
41242: PLUS
41243: PUSH
41244: LD_INT 2
41246: DIV
41247: ST_TO_ADDR
// if _y < 0 then
41248: LD_VAR 0 7
41252: PUSH
41253: LD_INT 0
41255: LESS
41256: IFFALSE 41273
// _y := _y * - 1 ;
41258: LD_ADDR_VAR 0 7
41262: PUSH
41263: LD_VAR 0 7
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: MUL
41272: ST_TO_ADDR
// result := [ _x , _y ] ;
41273: LD_ADDR_VAR 0 5
41277: PUSH
41278: LD_VAR 0 6
41282: PUSH
41283: LD_VAR 0 7
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// end ;
41292: LD_VAR 0 5
41296: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41297: LD_INT 0
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
// task := GetTaskList ( unit ) ;
41303: LD_ADDR_VAR 0 7
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 437
41317: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41318: LD_VAR 0 7
41322: NOT
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: LD_VAR 0 2
41333: PPUSH
41334: CALL_OW 308
41338: NOT
41339: AND
41340: IFFALSE 41344
// exit ;
41342: GO 41462
// if IsInArea ( unit , area ) then
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_VAR 0 2
41353: PPUSH
41354: CALL_OW 308
41358: IFFALSE 41376
// begin ComMoveToArea ( unit , goAway ) ;
41360: LD_VAR 0 1
41364: PPUSH
41365: LD_VAR 0 3
41369: PPUSH
41370: CALL_OW 113
// exit ;
41374: GO 41462
// end ; if task [ 1 ] [ 1 ] <> M then
41376: LD_VAR 0 7
41380: PUSH
41381: LD_INT 1
41383: ARRAY
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PUSH
41389: LD_STRING M
41391: NONEQUAL
41392: IFFALSE 41396
// exit ;
41394: GO 41462
// x := task [ 1 ] [ 2 ] ;
41396: LD_ADDR_VAR 0 5
41400: PUSH
41401: LD_VAR 0 7
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PUSH
41410: LD_INT 2
41412: ARRAY
41413: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41414: LD_ADDR_VAR 0 6
41418: PUSH
41419: LD_VAR 0 7
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: PUSH
41428: LD_INT 3
41430: ARRAY
41431: ST_TO_ADDR
// if InArea ( x , y , area ) then
41432: LD_VAR 0 5
41436: PPUSH
41437: LD_VAR 0 6
41441: PPUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: CALL_OW 309
41451: IFFALSE 41462
// ComStop ( unit ) ;
41453: LD_VAR 0 1
41457: PPUSH
41458: CALL_OW 141
// end ;
41462: LD_VAR 0 4
41466: RET
// export function Abs ( value ) ; begin
41467: LD_INT 0
41469: PPUSH
// result := value ;
41470: LD_ADDR_VAR 0 2
41474: PUSH
41475: LD_VAR 0 1
41479: ST_TO_ADDR
// if value < 0 then
41480: LD_VAR 0 1
41484: PUSH
41485: LD_INT 0
41487: LESS
41488: IFFALSE 41505
// result := value * - 1 ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_VAR 0 1
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: MUL
41504: ST_TO_ADDR
// end ;
41505: LD_VAR 0 2
41509: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41510: LD_INT 0
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
// if not unit or not building then
41520: LD_VAR 0 1
41524: NOT
41525: PUSH
41526: LD_VAR 0 2
41530: NOT
41531: OR
41532: IFFALSE 41536
// exit ;
41534: GO 41762
// x := GetX ( building ) ;
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 2
41545: PPUSH
41546: CALL_OW 250
41550: ST_TO_ADDR
// y := GetY ( building ) ;
41551: LD_ADDR_VAR 0 6
41555: PUSH
41556: LD_VAR 0 2
41560: PPUSH
41561: CALL_OW 251
41565: ST_TO_ADDR
// d := GetDir ( building ) ;
41566: LD_ADDR_VAR 0 8
41570: PUSH
41571: LD_VAR 0 2
41575: PPUSH
41576: CALL_OW 254
41580: ST_TO_ADDR
// r := 4 ;
41581: LD_ADDR_VAR 0 9
41585: PUSH
41586: LD_INT 4
41588: ST_TO_ADDR
// for i := 1 to 5 do
41589: LD_ADDR_VAR 0 10
41593: PUSH
41594: DOUBLE
41595: LD_INT 1
41597: DEC
41598: ST_TO_ADDR
41599: LD_INT 5
41601: PUSH
41602: FOR_TO
41603: IFFALSE 41760
// begin _x := ShiftX ( x , d , r + i ) ;
41605: LD_ADDR_VAR 0 5
41609: PUSH
41610: LD_VAR 0 4
41614: PPUSH
41615: LD_VAR 0 8
41619: PPUSH
41620: LD_VAR 0 9
41624: PUSH
41625: LD_VAR 0 10
41629: PLUS
41630: PPUSH
41631: CALL_OW 272
41635: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41636: LD_ADDR_VAR 0 7
41640: PUSH
41641: LD_VAR 0 6
41645: PPUSH
41646: LD_VAR 0 8
41650: PPUSH
41651: LD_VAR 0 9
41655: PUSH
41656: LD_VAR 0 10
41660: PLUS
41661: PPUSH
41662: CALL_OW 273
41666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41667: LD_VAR 0 5
41671: PPUSH
41672: LD_VAR 0 7
41676: PPUSH
41677: CALL_OW 488
41681: PUSH
41682: LD_VAR 0 5
41686: PPUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: CALL_OW 428
41696: PPUSH
41697: CALL_OW 247
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: IN
41712: NOT
41713: AND
41714: IFFALSE 41758
// begin ComMoveXY ( unit , _x , _y ) ;
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_VAR 0 5
41725: PPUSH
41726: LD_VAR 0 7
41730: PPUSH
41731: CALL_OW 111
// result := [ _x , _y ] ;
41735: LD_ADDR_VAR 0 3
41739: PUSH
41740: LD_VAR 0 5
41744: PUSH
41745: LD_VAR 0 7
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: ST_TO_ADDR
// exit ;
41754: POP
41755: POP
41756: GO 41762
// end ; end ;
41758: GO 41602
41760: POP
41761: POP
// end ;
41762: LD_VAR 0 3
41766: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41767: LD_INT 0
41769: PPUSH
41770: PPUSH
41771: PPUSH
// result := 0 ;
41772: LD_ADDR_VAR 0 3
41776: PUSH
41777: LD_INT 0
41779: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41780: LD_VAR 0 1
41784: PUSH
41785: LD_INT 0
41787: LESS
41788: PUSH
41789: LD_VAR 0 1
41793: PUSH
41794: LD_INT 8
41796: GREATER
41797: OR
41798: PUSH
41799: LD_VAR 0 2
41803: PUSH
41804: LD_INT 0
41806: LESS
41807: OR
41808: PUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_INT 8
41816: GREATER
41817: OR
41818: IFFALSE 41822
// exit ;
41820: GO 41897
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41822: LD_ADDR_VAR 0 4
41826: PUSH
41827: LD_INT 22
41829: PUSH
41830: LD_VAR 0 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PPUSH
41839: CALL_OW 69
41843: PUSH
41844: FOR_IN
41845: IFFALSE 41895
// begin un := UnitShoot ( i ) ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 4
41856: PPUSH
41857: CALL_OW 504
41861: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41862: LD_VAR 0 5
41866: PPUSH
41867: CALL_OW 255
41871: PUSH
41872: LD_VAR 0 1
41876: EQUAL
41877: IFFALSE 41893
// begin result := un ;
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_VAR 0 5
41888: ST_TO_ADDR
// exit ;
41889: POP
41890: POP
41891: GO 41897
// end ; end ;
41893: GO 41844
41895: POP
41896: POP
// end ;
41897: LD_VAR 0 3
41901: RET
// export function GetCargoBay ( units ) ; begin
41902: LD_INT 0
41904: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41905: LD_ADDR_VAR 0 2
41909: PUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 34
41920: PUSH
41921: LD_INT 12
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 34
41930: PUSH
41931: LD_INT 51
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 34
41940: PUSH
41941: LD_INT 32
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 34
41950: PUSH
41951: LD_INT 89
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: PPUSH
41965: CALL_OW 72
41969: ST_TO_ADDR
// end ;
41970: LD_VAR 0 2
41974: RET
// export function Negate ( value ) ; begin
41975: LD_INT 0
41977: PPUSH
// result := not value ;
41978: LD_ADDR_VAR 0 2
41982: PUSH
41983: LD_VAR 0 1
41987: NOT
41988: ST_TO_ADDR
// end ;
41989: LD_VAR 0 2
41993: RET
// export function Inc ( value ) ; begin
41994: LD_INT 0
41996: PPUSH
// result := value + 1 ;
41997: LD_ADDR_VAR 0 2
42001: PUSH
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: PLUS
42010: ST_TO_ADDR
// end ;
42011: LD_VAR 0 2
42015: RET
// export function Dec ( value ) ; begin
42016: LD_INT 0
42018: PPUSH
// result := value - 1 ;
42019: LD_ADDR_VAR 0 2
42023: PUSH
42024: LD_VAR 0 1
42028: PUSH
42029: LD_INT 1
42031: MINUS
42032: ST_TO_ADDR
// end ;
42033: LD_VAR 0 2
42037: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42048: LD_VAR 0 1
42052: PPUSH
42053: LD_VAR 0 2
42057: PPUSH
42058: CALL_OW 488
42062: NOT
42063: PUSH
42064: LD_VAR 0 3
42068: PPUSH
42069: LD_VAR 0 4
42073: PPUSH
42074: CALL_OW 488
42078: NOT
42079: OR
42080: IFFALSE 42093
// begin result := - 1 ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: ST_TO_ADDR
// exit ;
42091: GO 42328
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42093: LD_ADDR_VAR 0 12
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_VAR 0 2
42107: PPUSH
42108: LD_VAR 0 3
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL 41178 0 4
42122: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42123: LD_ADDR_VAR 0 11
42127: PUSH
42128: LD_VAR 0 1
42132: PPUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: LD_VAR 0 12
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 12
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PPUSH
42156: CALL_OW 298
42160: ST_TO_ADDR
// distance := 9999 ;
42161: LD_ADDR_VAR 0 10
42165: PUSH
42166: LD_INT 9999
42168: ST_TO_ADDR
// for i := 0 to 5 do
42169: LD_ADDR_VAR 0 6
42173: PUSH
42174: DOUBLE
42175: LD_INT 0
42177: DEC
42178: ST_TO_ADDR
42179: LD_INT 5
42181: PUSH
42182: FOR_TO
42183: IFFALSE 42326
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42185: LD_ADDR_VAR 0 7
42189: PUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: LD_VAR 0 6
42199: PPUSH
42200: LD_VAR 0 11
42204: PPUSH
42205: CALL_OW 272
42209: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42210: LD_ADDR_VAR 0 8
42214: PUSH
42215: LD_VAR 0 2
42219: PPUSH
42220: LD_VAR 0 6
42224: PPUSH
42225: LD_VAR 0 11
42229: PPUSH
42230: CALL_OW 273
42234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42235: LD_VAR 0 7
42239: PPUSH
42240: LD_VAR 0 8
42244: PPUSH
42245: CALL_OW 488
42249: NOT
42250: IFFALSE 42254
// continue ;
42252: GO 42182
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42254: LD_ADDR_VAR 0 9
42258: PUSH
42259: LD_VAR 0 12
42263: PUSH
42264: LD_INT 1
42266: ARRAY
42267: PPUSH
42268: LD_VAR 0 12
42272: PUSH
42273: LD_INT 2
42275: ARRAY
42276: PPUSH
42277: LD_VAR 0 7
42281: PPUSH
42282: LD_VAR 0 8
42286: PPUSH
42287: CALL_OW 298
42291: ST_TO_ADDR
// if tmp < distance then
42292: LD_VAR 0 9
42296: PUSH
42297: LD_VAR 0 10
42301: LESS
42302: IFFALSE 42324
// begin result := i ;
42304: LD_ADDR_VAR 0 5
42308: PUSH
42309: LD_VAR 0 6
42313: ST_TO_ADDR
// distance := tmp ;
42314: LD_ADDR_VAR 0 10
42318: PUSH
42319: LD_VAR 0 9
42323: ST_TO_ADDR
// end ; end ;
42324: GO 42182
42326: POP
42327: POP
// end ;
42328: LD_VAR 0 5
42332: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42333: LD_INT 0
42335: PPUSH
42336: PPUSH
// if not driver or not IsInUnit ( driver ) then
42337: LD_VAR 0 1
42341: NOT
42342: PUSH
42343: LD_VAR 0 1
42347: PPUSH
42348: CALL_OW 310
42352: NOT
42353: OR
42354: IFFALSE 42358
// exit ;
42356: GO 42448
// vehicle := IsInUnit ( driver ) ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 310
42372: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42373: LD_VAR 0 1
42377: PPUSH
42378: LD_STRING \
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: LD_STRING E
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_VAR 0 3
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PPUSH
42444: CALL_OW 446
// end ;
42448: LD_VAR 0 2
42452: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
// if not driver or not IsInUnit ( driver ) then
42457: LD_VAR 0 1
42461: NOT
42462: PUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL_OW 310
42472: NOT
42473: OR
42474: IFFALSE 42478
// exit ;
42476: GO 42568
// vehicle := IsInUnit ( driver ) ;
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 310
42492: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42493: LD_VAR 0 1
42497: PPUSH
42498: LD_STRING \
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: PUSH
42528: LD_STRING E
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_VAR 0 3
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 447
// end ;
42568: LD_VAR 0 2
42572: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42573: LD_INT 0
42575: PPUSH
42576: PPUSH
42577: PPUSH
// tmp := [ ] ;
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: EMPTY
42584: ST_TO_ADDR
// for i in units do
42585: LD_ADDR_VAR 0 4
42589: PUSH
42590: LD_VAR 0 1
42594: PUSH
42595: FOR_IN
42596: IFFALSE 42634
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: LD_VAR 0 5
42607: PPUSH
42608: LD_VAR 0 5
42612: PUSH
42613: LD_INT 1
42615: PLUS
42616: PPUSH
42617: LD_VAR 0 4
42621: PPUSH
42622: CALL_OW 256
42626: PPUSH
42627: CALL_OW 2
42631: ST_TO_ADDR
42632: GO 42595
42634: POP
42635: POP
// if not tmp then
42636: LD_VAR 0 5
42640: NOT
42641: IFFALSE 42645
// exit ;
42643: GO 42693
// if asc then
42645: LD_VAR 0 2
42649: IFFALSE 42673
// result := SortListByListAsc ( units , tmp ) else
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_VAR 0 1
42660: PPUSH
42661: LD_VAR 0 5
42665: PPUSH
42666: CALL_OW 76
42670: ST_TO_ADDR
42671: GO 42693
// result := SortListByListDesc ( units , tmp ) ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: LD_VAR 0 5
42687: PPUSH
42688: CALL_OW 77
42692: ST_TO_ADDR
// end ;
42693: LD_VAR 0 3
42697: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42698: LD_INT 0
42700: PPUSH
42701: PPUSH
// task := GetTaskList ( mech ) ;
42702: LD_ADDR_VAR 0 4
42706: PUSH
42707: LD_VAR 0 1
42711: PPUSH
42712: CALL_OW 437
42716: ST_TO_ADDR
// if not task then
42717: LD_VAR 0 4
42721: NOT
42722: IFFALSE 42726
// exit ;
42724: GO 42768
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_VAR 0 4
42735: PUSH
42736: LD_INT 1
42738: ARRAY
42739: PUSH
42740: LD_INT 1
42742: ARRAY
42743: PUSH
42744: LD_STRING r
42746: EQUAL
42747: PUSH
42748: LD_VAR 0 4
42752: PUSH
42753: LD_INT 1
42755: ARRAY
42756: PUSH
42757: LD_INT 4
42759: ARRAY
42760: PUSH
42761: LD_VAR 0 2
42765: EQUAL
42766: AND
42767: ST_TO_ADDR
// end ;
42768: LD_VAR 0 3
42772: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42773: LD_INT 0
42775: PPUSH
// SetDir ( unit , d ) ;
42776: LD_VAR 0 1
42780: PPUSH
42781: LD_VAR 0 4
42785: PPUSH
42786: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42790: LD_VAR 0 1
42794: PPUSH
42795: LD_VAR 0 2
42799: PPUSH
42800: LD_VAR 0 3
42804: PPUSH
42805: LD_VAR 0 5
42809: PPUSH
42810: CALL_OW 48
// end ;
42814: LD_VAR 0 6
42818: RET
// export function ToNaturalNumber ( number ) ; begin
42819: LD_INT 0
42821: PPUSH
// result := number div 1 ;
42822: LD_ADDR_VAR 0 2
42826: PUSH
42827: LD_VAR 0 1
42831: PUSH
42832: LD_INT 1
42834: DIV
42835: ST_TO_ADDR
// if number < 0 then
42836: LD_VAR 0 1
42840: PUSH
42841: LD_INT 0
42843: LESS
42844: IFFALSE 42854
// result := 0 ;
42846: LD_ADDR_VAR 0 2
42850: PUSH
42851: LD_INT 0
42853: ST_TO_ADDR
// end ;
42854: LD_VAR 0 2
42858: RET
// export function SortByClass ( units , class ) ; var un ; begin
42859: LD_INT 0
42861: PPUSH
42862: PPUSH
// if not units or not class then
42863: LD_VAR 0 1
42867: NOT
42868: PUSH
42869: LD_VAR 0 2
42873: NOT
42874: OR
42875: IFFALSE 42879
// exit ;
42877: GO 42974
// result := [ ] ;
42879: LD_ADDR_VAR 0 3
42883: PUSH
42884: EMPTY
42885: ST_TO_ADDR
// for un in units do
42886: LD_ADDR_VAR 0 4
42890: PUSH
42891: LD_VAR 0 1
42895: PUSH
42896: FOR_IN
42897: IFFALSE 42972
// if GetClass ( un ) = class then
42899: LD_VAR 0 4
42903: PPUSH
42904: CALL_OW 257
42908: PUSH
42909: LD_VAR 0 2
42913: EQUAL
42914: IFFALSE 42941
// result := Insert ( result , 1 , un ) else
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_VAR 0 3
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: LD_VAR 0 4
42933: PPUSH
42934: CALL_OW 2
42938: ST_TO_ADDR
42939: GO 42970
// result := Replace ( result , result + 1 , un ) ;
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_VAR 0 3
42950: PPUSH
42951: LD_VAR 0 3
42955: PUSH
42956: LD_INT 1
42958: PLUS
42959: PPUSH
42960: LD_VAR 0 4
42964: PPUSH
42965: CALL_OW 1
42969: ST_TO_ADDR
42970: GO 42896
42972: POP
42973: POP
// end ;
42974: LD_VAR 0 3
42978: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42979: LD_INT 0
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
// result := [ ] ;
42988: LD_ADDR_VAR 0 4
42992: PUSH
42993: EMPTY
42994: ST_TO_ADDR
// if x - r < 0 then
42995: LD_VAR 0 1
42999: PUSH
43000: LD_VAR 0 3
43004: MINUS
43005: PUSH
43006: LD_INT 0
43008: LESS
43009: IFFALSE 43021
// min_x := 0 else
43011: LD_ADDR_VAR 0 8
43015: PUSH
43016: LD_INT 0
43018: ST_TO_ADDR
43019: GO 43037
// min_x := x - r ;
43021: LD_ADDR_VAR 0 8
43025: PUSH
43026: LD_VAR 0 1
43030: PUSH
43031: LD_VAR 0 3
43035: MINUS
43036: ST_TO_ADDR
// if y - r < 0 then
43037: LD_VAR 0 2
43041: PUSH
43042: LD_VAR 0 3
43046: MINUS
43047: PUSH
43048: LD_INT 0
43050: LESS
43051: IFFALSE 43063
// min_y := 0 else
43053: LD_ADDR_VAR 0 7
43057: PUSH
43058: LD_INT 0
43060: ST_TO_ADDR
43061: GO 43079
// min_y := y - r ;
43063: LD_ADDR_VAR 0 7
43067: PUSH
43068: LD_VAR 0 2
43072: PUSH
43073: LD_VAR 0 3
43077: MINUS
43078: ST_TO_ADDR
// max_x := x + r ;
43079: LD_ADDR_VAR 0 9
43083: PUSH
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 3
43093: PLUS
43094: ST_TO_ADDR
// max_y := y + r ;
43095: LD_ADDR_VAR 0 10
43099: PUSH
43100: LD_VAR 0 2
43104: PUSH
43105: LD_VAR 0 3
43109: PLUS
43110: ST_TO_ADDR
// for _x = min_x to max_x do
43111: LD_ADDR_VAR 0 5
43115: PUSH
43116: DOUBLE
43117: LD_VAR 0 8
43121: DEC
43122: ST_TO_ADDR
43123: LD_VAR 0 9
43127: PUSH
43128: FOR_TO
43129: IFFALSE 43230
// for _y = min_y to max_y do
43131: LD_ADDR_VAR 0 6
43135: PUSH
43136: DOUBLE
43137: LD_VAR 0 7
43141: DEC
43142: ST_TO_ADDR
43143: LD_VAR 0 10
43147: PUSH
43148: FOR_TO
43149: IFFALSE 43226
// begin if not ValidHex ( _x , _y ) then
43151: LD_VAR 0 5
43155: PPUSH
43156: LD_VAR 0 6
43160: PPUSH
43161: CALL_OW 488
43165: NOT
43166: IFFALSE 43170
// continue ;
43168: GO 43148
// if GetResourceTypeXY ( _x , _y ) then
43170: LD_VAR 0 5
43174: PPUSH
43175: LD_VAR 0 6
43179: PPUSH
43180: CALL_OW 283
43184: IFFALSE 43224
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43186: LD_ADDR_VAR 0 4
43190: PUSH
43191: LD_VAR 0 4
43195: PPUSH
43196: LD_VAR 0 4
43200: PUSH
43201: LD_INT 1
43203: PLUS
43204: PPUSH
43205: LD_VAR 0 5
43209: PUSH
43210: LD_VAR 0 6
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PPUSH
43219: CALL_OW 1
43223: ST_TO_ADDR
// end ;
43224: GO 43148
43226: POP
43227: POP
43228: GO 43128
43230: POP
43231: POP
// end ;
43232: LD_VAR 0 4
43236: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43237: LD_INT 0
43239: PPUSH
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
// if not units then
43247: LD_VAR 0 1
43251: NOT
43252: IFFALSE 43256
// exit ;
43254: GO 43784
// result := UnitFilter ( units , [ f_ok ] ) ;
43256: LD_ADDR_VAR 0 3
43260: PUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: LD_INT 50
43268: PUSH
43269: EMPTY
43270: LIST
43271: PPUSH
43272: CALL_OW 72
43276: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43277: LD_ADDR_VAR 0 8
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_INT 1
43289: ARRAY
43290: PPUSH
43291: CALL_OW 255
43295: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43296: LD_ADDR_VAR 0 10
43300: PUSH
43301: LD_INT 29
43303: PUSH
43304: LD_INT 91
43306: PUSH
43307: LD_INT 49
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// if not result then
43315: LD_VAR 0 3
43319: NOT
43320: IFFALSE 43324
// exit ;
43322: GO 43784
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43324: LD_ADDR_VAR 0 5
43328: PUSH
43329: LD_INT 81
43331: PUSH
43332: LD_VAR 0 8
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PPUSH
43341: CALL_OW 69
43345: ST_TO_ADDR
// for i in result do
43346: LD_ADDR_VAR 0 4
43350: PUSH
43351: LD_VAR 0 3
43355: PUSH
43356: FOR_IN
43357: IFFALSE 43782
// begin tag := GetTag ( i ) + 1 ;
43359: LD_ADDR_VAR 0 9
43363: PUSH
43364: LD_VAR 0 4
43368: PPUSH
43369: CALL_OW 110
43373: PUSH
43374: LD_INT 1
43376: PLUS
43377: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43378: LD_ADDR_VAR 0 7
43382: PUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: CALL_OW 250
43392: PPUSH
43393: LD_VAR 0 4
43397: PPUSH
43398: CALL_OW 251
43402: PPUSH
43403: LD_INT 4
43405: PPUSH
43406: CALL 42979 0 3
43410: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43411: LD_VAR 0 4
43415: PPUSH
43416: CALL_OW 247
43420: PUSH
43421: LD_INT 2
43423: EQUAL
43424: PUSH
43425: LD_VAR 0 7
43429: PUSH
43430: LD_INT 2
43432: GREATER
43433: AND
43434: PUSH
43435: LD_VAR 0 4
43439: PPUSH
43440: CALL_OW 264
43444: PUSH
43445: LD_VAR 0 10
43449: IN
43450: NOT
43451: AND
43452: IFFALSE 43491
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43454: LD_VAR 0 4
43458: PPUSH
43459: LD_VAR 0 7
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: PUSH
43468: LD_INT 1
43470: ARRAY
43471: PPUSH
43472: LD_VAR 0 7
43476: PUSH
43477: LD_INT 1
43479: ARRAY
43480: PUSH
43481: LD_INT 2
43483: ARRAY
43484: PPUSH
43485: CALL_OW 116
43489: GO 43780
// if path > tag then
43491: LD_VAR 0 2
43495: PUSH
43496: LD_VAR 0 9
43500: GREATER
43501: IFFALSE 43709
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43503: LD_ADDR_VAR 0 6
43507: PUSH
43508: LD_VAR 0 5
43512: PPUSH
43513: LD_INT 91
43515: PUSH
43516: LD_VAR 0 4
43520: PUSH
43521: LD_INT 8
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: PPUSH
43529: CALL_OW 72
43533: ST_TO_ADDR
// if nearEnemy then
43534: LD_VAR 0 6
43538: IFFALSE 43607
// begin if GetWeapon ( i ) = ru_time_lapser then
43540: LD_VAR 0 4
43544: PPUSH
43545: CALL_OW 264
43549: PUSH
43550: LD_INT 49
43552: EQUAL
43553: IFFALSE 43581
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43555: LD_VAR 0 4
43559: PPUSH
43560: LD_VAR 0 6
43564: PPUSH
43565: LD_VAR 0 4
43569: PPUSH
43570: CALL_OW 74
43574: PPUSH
43575: CALL_OW 112
43579: GO 43605
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43581: LD_VAR 0 4
43585: PPUSH
43586: LD_VAR 0 6
43590: PPUSH
43591: LD_VAR 0 4
43595: PPUSH
43596: CALL_OW 74
43600: PPUSH
43601: CALL 44855 0 2
// end else
43605: GO 43707
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43607: LD_VAR 0 4
43611: PPUSH
43612: LD_VAR 0 2
43616: PUSH
43617: LD_VAR 0 9
43621: ARRAY
43622: PUSH
43623: LD_INT 1
43625: ARRAY
43626: PPUSH
43627: LD_VAR 0 2
43631: PUSH
43632: LD_VAR 0 9
43636: ARRAY
43637: PUSH
43638: LD_INT 2
43640: ARRAY
43641: PPUSH
43642: CALL_OW 297
43646: PUSH
43647: LD_INT 6
43649: GREATER
43650: IFFALSE 43693
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43652: LD_VAR 0 4
43656: PPUSH
43657: LD_VAR 0 2
43661: PUSH
43662: LD_VAR 0 9
43666: ARRAY
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PPUSH
43672: LD_VAR 0 2
43676: PUSH
43677: LD_VAR 0 9
43681: ARRAY
43682: PUSH
43683: LD_INT 2
43685: ARRAY
43686: PPUSH
43687: CALL_OW 114
43691: GO 43707
// SetTag ( i , tag ) ;
43693: LD_VAR 0 4
43697: PPUSH
43698: LD_VAR 0 9
43702: PPUSH
43703: CALL_OW 109
// end else
43707: GO 43780
// if enemy then
43709: LD_VAR 0 5
43713: IFFALSE 43780
// begin if GetWeapon ( i ) = ru_time_lapser then
43715: LD_VAR 0 4
43719: PPUSH
43720: CALL_OW 264
43724: PUSH
43725: LD_INT 49
43727: EQUAL
43728: IFFALSE 43756
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43730: LD_VAR 0 4
43734: PPUSH
43735: LD_VAR 0 5
43739: PPUSH
43740: LD_VAR 0 4
43744: PPUSH
43745: CALL_OW 74
43749: PPUSH
43750: CALL_OW 112
43754: GO 43780
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43756: LD_VAR 0 4
43760: PPUSH
43761: LD_VAR 0 5
43765: PPUSH
43766: LD_VAR 0 4
43770: PPUSH
43771: CALL_OW 74
43775: PPUSH
43776: CALL 44855 0 2
// end ; end ;
43780: GO 43356
43782: POP
43783: POP
// end ;
43784: LD_VAR 0 3
43788: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43789: LD_INT 0
43791: PPUSH
43792: PPUSH
43793: PPUSH
// if not unit or IsInUnit ( unit ) then
43794: LD_VAR 0 1
43798: NOT
43799: PUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL_OW 310
43809: OR
43810: IFFALSE 43814
// exit ;
43812: GO 43905
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43814: LD_ADDR_VAR 0 4
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 250
43828: PPUSH
43829: LD_VAR 0 2
43833: PPUSH
43834: LD_INT 1
43836: PPUSH
43837: CALL_OW 272
43841: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43842: LD_ADDR_VAR 0 5
43846: PUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: CALL_OW 251
43856: PPUSH
43857: LD_VAR 0 2
43861: PPUSH
43862: LD_INT 1
43864: PPUSH
43865: CALL_OW 273
43869: ST_TO_ADDR
// if ValidHex ( x , y ) then
43870: LD_VAR 0 4
43874: PPUSH
43875: LD_VAR 0 5
43879: PPUSH
43880: CALL_OW 488
43884: IFFALSE 43905
// ComTurnXY ( unit , x , y ) ;
43886: LD_VAR 0 1
43890: PPUSH
43891: LD_VAR 0 4
43895: PPUSH
43896: LD_VAR 0 5
43900: PPUSH
43901: CALL_OW 118
// end ;
43905: LD_VAR 0 3
43909: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43910: LD_INT 0
43912: PPUSH
43913: PPUSH
// result := false ;
43914: LD_ADDR_VAR 0 3
43918: PUSH
43919: LD_INT 0
43921: ST_TO_ADDR
// if not units then
43922: LD_VAR 0 2
43926: NOT
43927: IFFALSE 43931
// exit ;
43929: GO 43976
// for i in units do
43931: LD_ADDR_VAR 0 4
43935: PUSH
43936: LD_VAR 0 2
43940: PUSH
43941: FOR_IN
43942: IFFALSE 43974
// if See ( side , i ) then
43944: LD_VAR 0 1
43948: PPUSH
43949: LD_VAR 0 4
43953: PPUSH
43954: CALL_OW 292
43958: IFFALSE 43972
// begin result := true ;
43960: LD_ADDR_VAR 0 3
43964: PUSH
43965: LD_INT 1
43967: ST_TO_ADDR
// exit ;
43968: POP
43969: POP
43970: GO 43976
// end ;
43972: GO 43941
43974: POP
43975: POP
// end ;
43976: LD_VAR 0 3
43980: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43981: LD_INT 0
43983: PPUSH
43984: PPUSH
43985: PPUSH
43986: PPUSH
// if not unit or not points then
43987: LD_VAR 0 1
43991: NOT
43992: PUSH
43993: LD_VAR 0 2
43997: NOT
43998: OR
43999: IFFALSE 44003
// exit ;
44001: GO 44093
// dist := 99999 ;
44003: LD_ADDR_VAR 0 5
44007: PUSH
44008: LD_INT 99999
44010: ST_TO_ADDR
// for i in points do
44011: LD_ADDR_VAR 0 4
44015: PUSH
44016: LD_VAR 0 2
44020: PUSH
44021: FOR_IN
44022: IFFALSE 44091
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44024: LD_ADDR_VAR 0 6
44028: PUSH
44029: LD_VAR 0 1
44033: PPUSH
44034: LD_VAR 0 4
44038: PUSH
44039: LD_INT 1
44041: ARRAY
44042: PPUSH
44043: LD_VAR 0 4
44047: PUSH
44048: LD_INT 2
44050: ARRAY
44051: PPUSH
44052: CALL_OW 297
44056: ST_TO_ADDR
// if tmpDist < dist then
44057: LD_VAR 0 6
44061: PUSH
44062: LD_VAR 0 5
44066: LESS
44067: IFFALSE 44089
// begin result := i ;
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_VAR 0 4
44078: ST_TO_ADDR
// dist := tmpDist ;
44079: LD_ADDR_VAR 0 5
44083: PUSH
44084: LD_VAR 0 6
44088: ST_TO_ADDR
// end ; end ;
44089: GO 44021
44091: POP
44092: POP
// end ;
44093: LD_VAR 0 3
44097: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44098: LD_INT 0
44100: PPUSH
// uc_side := side ;
44101: LD_ADDR_OWVAR 20
44105: PUSH
44106: LD_VAR 0 1
44110: ST_TO_ADDR
// uc_nation := 3 ;
44111: LD_ADDR_OWVAR 21
44115: PUSH
44116: LD_INT 3
44118: ST_TO_ADDR
// vc_chassis := 25 ;
44119: LD_ADDR_OWVAR 37
44123: PUSH
44124: LD_INT 25
44126: ST_TO_ADDR
// vc_engine := engine_siberite ;
44127: LD_ADDR_OWVAR 39
44131: PUSH
44132: LD_INT 3
44134: ST_TO_ADDR
// vc_control := control_computer ;
44135: LD_ADDR_OWVAR 38
44139: PUSH
44140: LD_INT 3
44142: ST_TO_ADDR
// vc_weapon := 59 ;
44143: LD_ADDR_OWVAR 40
44147: PUSH
44148: LD_INT 59
44150: ST_TO_ADDR
// result := CreateVehicle ;
44151: LD_ADDR_VAR 0 5
44155: PUSH
44156: CALL_OW 45
44160: ST_TO_ADDR
// SetDir ( result , d ) ;
44161: LD_VAR 0 5
44165: PPUSH
44166: LD_VAR 0 4
44170: PPUSH
44171: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44175: LD_VAR 0 5
44179: PPUSH
44180: LD_VAR 0 2
44184: PPUSH
44185: LD_VAR 0 3
44189: PPUSH
44190: LD_INT 0
44192: PPUSH
44193: CALL_OW 48
// end ;
44197: LD_VAR 0 5
44201: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44202: LD_INT 0
44204: PPUSH
44205: PPUSH
44206: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44207: LD_ADDR_VAR 0 2
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44230: LD_VAR 0 1
44234: NOT
44235: PUSH
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 264
44245: PUSH
44246: LD_INT 12
44248: PUSH
44249: LD_INT 51
44251: PUSH
44252: LD_INT 32
44254: PUSH
44255: LD_INT 89
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: IN
44264: NOT
44265: OR
44266: IFFALSE 44270
// exit ;
44268: GO 44368
// for i := 1 to 3 do
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: DOUBLE
44276: LD_INT 1
44278: DEC
44279: ST_TO_ADDR
44280: LD_INT 3
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44366
// begin tmp := GetCargo ( cargo , i ) ;
44286: LD_ADDR_VAR 0 4
44290: PUSH
44291: LD_VAR 0 1
44295: PPUSH
44296: LD_VAR 0 3
44300: PPUSH
44301: CALL_OW 289
44305: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44306: LD_ADDR_VAR 0 2
44310: PUSH
44311: LD_VAR 0 2
44315: PPUSH
44316: LD_VAR 0 3
44320: PPUSH
44321: LD_VAR 0 4
44325: PPUSH
44326: CALL_OW 1
44330: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44331: LD_ADDR_VAR 0 2
44335: PUSH
44336: LD_VAR 0 2
44340: PPUSH
44341: LD_INT 4
44343: PPUSH
44344: LD_VAR 0 2
44348: PUSH
44349: LD_INT 4
44351: ARRAY
44352: PUSH
44353: LD_VAR 0 4
44357: PLUS
44358: PPUSH
44359: CALL_OW 1
44363: ST_TO_ADDR
// end ;
44364: GO 44283
44366: POP
44367: POP
// end ;
44368: LD_VAR 0 2
44372: RET
// export function Length ( array ) ; begin
44373: LD_INT 0
44375: PPUSH
// result := array + 0 ;
44376: LD_ADDR_VAR 0 2
44380: PUSH
44381: LD_VAR 0 1
44385: PUSH
44386: LD_INT 0
44388: PLUS
44389: ST_TO_ADDR
// end ;
44390: LD_VAR 0 2
44394: RET
// export function PrepareArray ( array ) ; begin
44395: LD_INT 0
44397: PPUSH
// result := array diff 0 ;
44398: LD_ADDR_VAR 0 2
44402: PUSH
44403: LD_VAR 0 1
44407: PUSH
44408: LD_INT 0
44410: DIFF
44411: ST_TO_ADDR
// if not result [ 1 ] then
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: NOT
44421: IFFALSE 44441
// result := Delete ( result , 1 ) ;
44423: LD_ADDR_VAR 0 2
44427: PUSH
44428: LD_VAR 0 2
44432: PPUSH
44433: LD_INT 1
44435: PPUSH
44436: CALL_OW 3
44440: ST_TO_ADDR
// end ;
44441: LD_VAR 0 2
44445: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44446: LD_INT 0
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
// sibRocketRange := 25 ;
44452: LD_ADDR_VAR 0 6
44456: PUSH
44457: LD_INT 25
44459: ST_TO_ADDR
// result := false ;
44460: LD_ADDR_VAR 0 4
44464: PUSH
44465: LD_INT 0
44467: ST_TO_ADDR
// for i := 0 to 5 do
44468: LD_ADDR_VAR 0 5
44472: PUSH
44473: DOUBLE
44474: LD_INT 0
44476: DEC
44477: ST_TO_ADDR
44478: LD_INT 5
44480: PUSH
44481: FOR_TO
44482: IFFALSE 44549
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_VAR 0 5
44493: PPUSH
44494: LD_VAR 0 6
44498: PPUSH
44499: CALL_OW 272
44503: PPUSH
44504: LD_VAR 0 2
44508: PPUSH
44509: LD_VAR 0 5
44513: PPUSH
44514: LD_VAR 0 6
44518: PPUSH
44519: CALL_OW 273
44523: PPUSH
44524: LD_VAR 0 3
44528: PPUSH
44529: CALL_OW 309
44533: IFFALSE 44547
// begin result := true ;
44535: LD_ADDR_VAR 0 4
44539: PUSH
44540: LD_INT 1
44542: ST_TO_ADDR
// exit ;
44543: POP
44544: POP
44545: GO 44551
// end ;
44547: GO 44481
44549: POP
44550: POP
// end ;
44551: LD_VAR 0 4
44555: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44556: LD_INT 0
44558: PPUSH
44559: PPUSH
44560: PPUSH
// if btype = b_depot then
44561: LD_VAR 0 2
44565: PUSH
44566: LD_INT 0
44568: EQUAL
44569: IFFALSE 44581
// begin result := true ;
44571: LD_ADDR_VAR 0 3
44575: PUSH
44576: LD_INT 1
44578: ST_TO_ADDR
// exit ;
44579: GO 44697
// end ; pom := GetBase ( depot ) ;
44581: LD_ADDR_VAR 0 4
44585: PUSH
44586: LD_VAR 0 1
44590: PPUSH
44591: CALL_OW 274
44595: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44596: LD_ADDR_VAR 0 5
44600: PUSH
44601: LD_VAR 0 2
44605: PPUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 248
44615: PPUSH
44616: CALL_OW 450
44620: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_VAR 0 4
44630: PPUSH
44631: LD_INT 1
44633: PPUSH
44634: CALL_OW 275
44638: PUSH
44639: LD_VAR 0 5
44643: PUSH
44644: LD_INT 1
44646: ARRAY
44647: GREATEREQUAL
44648: PUSH
44649: LD_VAR 0 4
44653: PPUSH
44654: LD_INT 2
44656: PPUSH
44657: CALL_OW 275
44661: PUSH
44662: LD_VAR 0 5
44666: PUSH
44667: LD_INT 2
44669: ARRAY
44670: GREATEREQUAL
44671: AND
44672: PUSH
44673: LD_VAR 0 4
44677: PPUSH
44678: LD_INT 3
44680: PPUSH
44681: CALL_OW 275
44685: PUSH
44686: LD_VAR 0 5
44690: PUSH
44691: LD_INT 3
44693: ARRAY
44694: GREATEREQUAL
44695: AND
44696: ST_TO_ADDR
// end ;
44697: LD_VAR 0 3
44701: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44702: LD_INT 0
44704: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44705: LD_VAR 0 1
44709: PPUSH
44710: LD_VAR 0 2
44714: PPUSH
44715: LD_INT 0
44717: PPUSH
44718: LD_INT 0
44720: PPUSH
44721: LD_INT 1
44723: PPUSH
44724: LD_INT 0
44726: PPUSH
44727: CALL_OW 587
// end ;
44731: LD_VAR 0 3
44735: RET
// export function CenterOnNow ( unit ) ; begin
44736: LD_INT 0
44738: PPUSH
// result := IsInUnit ( unit ) ;
44739: LD_ADDR_VAR 0 2
44743: PUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: CALL_OW 310
44753: ST_TO_ADDR
// if not result then
44754: LD_VAR 0 2
44758: NOT
44759: IFFALSE 44771
// result := unit ;
44761: LD_ADDR_VAR 0 2
44765: PUSH
44766: LD_VAR 0 1
44770: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL_OW 87
// end ;
44780: LD_VAR 0 2
44784: RET
// export function ComMoveHex ( unit , hex ) ; begin
44785: LD_INT 0
44787: PPUSH
// if not hex then
44788: LD_VAR 0 2
44792: NOT
44793: IFFALSE 44797
// exit ;
44795: GO 44850
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44797: LD_VAR 0 2
44801: PUSH
44802: LD_INT 1
44804: ARRAY
44805: PPUSH
44806: LD_VAR 0 2
44810: PUSH
44811: LD_INT 2
44813: ARRAY
44814: PPUSH
44815: CALL_OW 428
44819: IFFALSE 44823
// exit ;
44821: GO 44850
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44823: LD_VAR 0 1
44827: PPUSH
44828: LD_VAR 0 2
44832: PUSH
44833: LD_INT 1
44835: ARRAY
44836: PPUSH
44837: LD_VAR 0 2
44841: PUSH
44842: LD_INT 2
44844: ARRAY
44845: PPUSH
44846: CALL_OW 111
// end ;
44850: LD_VAR 0 3
44854: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44855: LD_INT 0
44857: PPUSH
44858: PPUSH
44859: PPUSH
// if not unit or not enemy then
44860: LD_VAR 0 1
44864: NOT
44865: PUSH
44866: LD_VAR 0 2
44870: NOT
44871: OR
44872: IFFALSE 44876
// exit ;
44874: GO 45000
// x := GetX ( enemy ) ;
44876: LD_ADDR_VAR 0 4
44880: PUSH
44881: LD_VAR 0 2
44885: PPUSH
44886: CALL_OW 250
44890: ST_TO_ADDR
// y := GetY ( enemy ) ;
44891: LD_ADDR_VAR 0 5
44895: PUSH
44896: LD_VAR 0 2
44900: PPUSH
44901: CALL_OW 251
44905: ST_TO_ADDR
// if ValidHex ( x , y ) then
44906: LD_VAR 0 4
44910: PPUSH
44911: LD_VAR 0 5
44915: PPUSH
44916: CALL_OW 488
44920: IFFALSE 45000
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44922: LD_VAR 0 2
44926: PPUSH
44927: CALL_OW 247
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: IN
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: CALL_OW 255
44952: PPUSH
44953: LD_VAR 0 2
44957: PPUSH
44958: CALL_OW 292
44962: OR
44963: IFFALSE 44981
// ComAttackUnit ( unit , enemy ) else
44965: LD_VAR 0 1
44969: PPUSH
44970: LD_VAR 0 2
44974: PPUSH
44975: CALL_OW 115
44979: GO 45000
// ComAgressiveMove ( unit , x , y ) ;
44981: LD_VAR 0 1
44985: PPUSH
44986: LD_VAR 0 4
44990: PPUSH
44991: LD_VAR 0 5
44995: PPUSH
44996: CALL_OW 114
// end ;
45000: LD_VAR 0 3
45004: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45005: LD_INT 0
45007: PPUSH
45008: PPUSH
45009: PPUSH
// list := AreaToList ( area , 0 ) ;
45010: LD_ADDR_VAR 0 5
45014: PUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: LD_INT 0
45022: PPUSH
45023: CALL_OW 517
45027: ST_TO_ADDR
// if not list then
45028: LD_VAR 0 5
45032: NOT
45033: IFFALSE 45037
// exit ;
45035: GO 45167
// if all then
45037: LD_VAR 0 2
45041: IFFALSE 45129
// begin for i := 1 to list [ 1 ] do
45043: LD_ADDR_VAR 0 4
45047: PUSH
45048: DOUBLE
45049: LD_INT 1
45051: DEC
45052: ST_TO_ADDR
45053: LD_VAR 0 5
45057: PUSH
45058: LD_INT 1
45060: ARRAY
45061: PUSH
45062: FOR_TO
45063: IFFALSE 45125
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45065: LD_ADDR_VAR 0 3
45069: PUSH
45070: LD_VAR 0 3
45074: PPUSH
45075: LD_VAR 0 3
45079: PUSH
45080: LD_INT 1
45082: PLUS
45083: PPUSH
45084: LD_VAR 0 5
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PUSH
45093: LD_VAR 0 4
45097: ARRAY
45098: PUSH
45099: LD_VAR 0 5
45103: PUSH
45104: LD_INT 2
45106: ARRAY
45107: PUSH
45108: LD_VAR 0 4
45112: ARRAY
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PPUSH
45118: CALL_OW 1
45122: ST_TO_ADDR
45123: GO 45062
45125: POP
45126: POP
// exit ;
45127: GO 45167
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45129: LD_ADDR_VAR 0 3
45133: PUSH
45134: LD_VAR 0 5
45138: PUSH
45139: LD_INT 1
45141: ARRAY
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: PUSH
45147: LD_VAR 0 5
45151: PUSH
45152: LD_INT 2
45154: ARRAY
45155: PUSH
45156: LD_INT 1
45158: ARRAY
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: EMPTY
45165: LIST
45166: ST_TO_ADDR
// end ;
45167: LD_VAR 0 3
45171: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45172: LD_INT 0
45174: PPUSH
45175: PPUSH
// list := AreaToList ( area , 0 ) ;
45176: LD_ADDR_VAR 0 4
45180: PUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: LD_INT 0
45188: PPUSH
45189: CALL_OW 517
45193: ST_TO_ADDR
// if not list then
45194: LD_VAR 0 4
45198: NOT
45199: IFFALSE 45203
// exit ;
45201: GO 45244
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45203: LD_ADDR_VAR 0 3
45207: PUSH
45208: LD_VAR 0 4
45212: PUSH
45213: LD_INT 1
45215: ARRAY
45216: PUSH
45217: LD_INT 1
45219: ARRAY
45220: PUSH
45221: LD_VAR 0 4
45225: PUSH
45226: LD_INT 2
45228: ARRAY
45229: PUSH
45230: LD_INT 1
45232: ARRAY
45233: PUSH
45234: LD_VAR 0 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: ST_TO_ADDR
// end ;
45244: LD_VAR 0 3
45248: RET
// export function First ( array ) ; begin
45249: LD_INT 0
45251: PPUSH
// if not array then
45252: LD_VAR 0 1
45256: NOT
45257: IFFALSE 45261
// exit ;
45259: GO 45275
// result := array [ 1 ] ;
45261: LD_ADDR_VAR 0 2
45265: PUSH
45266: LD_VAR 0 1
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: ST_TO_ADDR
// end ;
45275: LD_VAR 0 2
45279: RET
// export function Last ( array ) ; begin
45280: LD_INT 0
45282: PPUSH
// if not array then
45283: LD_VAR 0 1
45287: NOT
45288: IFFALSE 45292
// exit ;
45290: GO 45308
// result := array [ array ] ;
45292: LD_ADDR_VAR 0 2
45296: PUSH
45297: LD_VAR 0 1
45301: PUSH
45302: LD_VAR 0 1
45306: ARRAY
45307: ST_TO_ADDR
// end ;
45308: LD_VAR 0 2
45312: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45313: LD_INT 0
45315: PPUSH
45316: PPUSH
// result := [ ] ;
45317: LD_ADDR_VAR 0 5
45321: PUSH
45322: EMPTY
45323: ST_TO_ADDR
// if not array then
45324: LD_VAR 0 1
45328: NOT
45329: IFFALSE 45333
// exit ;
45331: GO 45445
// for i := 1 to array do
45333: LD_ADDR_VAR 0 6
45337: PUSH
45338: DOUBLE
45339: LD_INT 1
45341: DEC
45342: ST_TO_ADDR
45343: LD_VAR 0 1
45347: PUSH
45348: FOR_TO
45349: IFFALSE 45443
// if array [ i ] [ index ] = value then
45351: LD_VAR 0 1
45355: PUSH
45356: LD_VAR 0 6
45360: ARRAY
45361: PUSH
45362: LD_VAR 0 2
45366: ARRAY
45367: PUSH
45368: LD_VAR 0 3
45372: EQUAL
45373: IFFALSE 45441
// begin if indexColumn then
45375: LD_VAR 0 4
45379: IFFALSE 45415
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45381: LD_ADDR_VAR 0 5
45385: PUSH
45386: LD_VAR 0 5
45390: PPUSH
45391: LD_VAR 0 1
45395: PUSH
45396: LD_VAR 0 6
45400: ARRAY
45401: PUSH
45402: LD_VAR 0 4
45406: ARRAY
45407: PPUSH
45408: CALL 40633 0 2
45412: ST_TO_ADDR
45413: GO 45441
// result := Join ( result , array [ i ] ) ;
45415: LD_ADDR_VAR 0 5
45419: PUSH
45420: LD_VAR 0 5
45424: PPUSH
45425: LD_VAR 0 1
45429: PUSH
45430: LD_VAR 0 6
45434: ARRAY
45435: PPUSH
45436: CALL 40633 0 2
45440: ST_TO_ADDR
// end ;
45441: GO 45348
45443: POP
45444: POP
// end ;
45445: LD_VAR 0 5
45449: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45450: LD_INT 0
45452: PPUSH
// if not vehicles or not parkingPoint then
45453: LD_VAR 0 1
45457: NOT
45458: PUSH
45459: LD_VAR 0 2
45463: NOT
45464: OR
45465: IFFALSE 45469
// exit ;
45467: GO 45567
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45469: LD_ADDR_VAR 0 1
45473: PUSH
45474: LD_VAR 0 1
45478: PPUSH
45479: LD_INT 50
45481: PUSH
45482: EMPTY
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: LD_INT 92
45490: PUSH
45491: LD_VAR 0 2
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PUSH
45500: LD_VAR 0 2
45504: PUSH
45505: LD_INT 2
45507: ARRAY
45508: PUSH
45509: LD_INT 8
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PPUSH
45526: CALL_OW 72
45530: ST_TO_ADDR
// if not vehicles then
45531: LD_VAR 0 1
45535: NOT
45536: IFFALSE 45540
// exit ;
45538: GO 45567
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45540: LD_VAR 0 1
45544: PPUSH
45545: LD_VAR 0 2
45549: PUSH
45550: LD_INT 1
45552: ARRAY
45553: PPUSH
45554: LD_VAR 0 2
45558: PUSH
45559: LD_INT 2
45561: ARRAY
45562: PPUSH
45563: CALL_OW 111
// end ;
45567: LD_VAR 0 3
45571: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45572: LD_INT 0
45574: PPUSH
45575: PPUSH
45576: PPUSH
// if not side or not area then
45577: LD_VAR 0 1
45581: NOT
45582: PUSH
45583: LD_VAR 0 2
45587: NOT
45588: OR
45589: IFFALSE 45593
// exit ;
45591: GO 45712
// tmp := AreaToList ( area , 0 ) ;
45593: LD_ADDR_VAR 0 5
45597: PUSH
45598: LD_VAR 0 2
45602: PPUSH
45603: LD_INT 0
45605: PPUSH
45606: CALL_OW 517
45610: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45611: LD_ADDR_VAR 0 4
45615: PUSH
45616: DOUBLE
45617: LD_INT 1
45619: DEC
45620: ST_TO_ADDR
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PUSH
45630: FOR_TO
45631: IFFALSE 45710
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45633: LD_VAR 0 5
45637: PUSH
45638: LD_INT 1
45640: ARRAY
45641: PUSH
45642: LD_VAR 0 4
45646: ARRAY
45647: PPUSH
45648: LD_VAR 0 5
45652: PUSH
45653: LD_INT 2
45655: ARRAY
45656: PUSH
45657: LD_VAR 0 4
45661: ARRAY
45662: PPUSH
45663: CALL_OW 351
45667: IFFALSE 45708
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45669: LD_VAR 0 5
45673: PUSH
45674: LD_INT 1
45676: ARRAY
45677: PUSH
45678: LD_VAR 0 4
45682: ARRAY
45683: PPUSH
45684: LD_VAR 0 5
45688: PUSH
45689: LD_INT 2
45691: ARRAY
45692: PUSH
45693: LD_VAR 0 4
45697: ARRAY
45698: PPUSH
45699: LD_VAR 0 1
45703: PPUSH
45704: CALL_OW 244
// end ;
45708: GO 45630
45710: POP
45711: POP
// end ; end_of_file
45712: LD_VAR 0 3
45716: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45717: LD_INT 0
45719: PPUSH
45720: PPUSH
// disable ( mpActive ) ;
45721: LD_INT 100
45723: DISABLE_MARKED
// disable ( mpWin ) ;
45724: LD_INT 101
45726: DISABLE_MARKED
// disable ( mpLose ) ;
45727: LD_INT 102
45729: DISABLE_MARKED
// mpGameType := 0 ;
45730: LD_ADDR_EXP 3
45734: PUSH
45735: LD_INT 0
45737: ST_TO_ADDR
// mpGameSettings := [ ] ;
45738: LD_ADDR_EXP 6
45742: PUSH
45743: EMPTY
45744: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45745: LD_ADDR_EXP 4
45749: PUSH
45750: EMPTY
45751: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45752: LD_ADDR_EXP 5
45756: PUSH
45757: EMPTY
45758: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45759: LD_ADDR_EXP 29
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45774: LD_ADDR_EXP 12
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45781: LD_ADDR_EXP 13
45785: PUSH
45786: EMPTY
45787: ST_TO_ADDR
// mpDepots := [ ] ;
45788: LD_ADDR_EXP 14
45792: PUSH
45793: EMPTY
45794: ST_TO_ADDR
// mpBuildings := [ ] ;
45795: LD_ADDR_EXP 17
45799: PUSH
45800: EMPTY
45801: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45802: LD_ADDR_EXP 18
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45809: LD_ADDR_EXP 19
45813: PUSH
45814: EMPTY
45815: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45816: LD_ADDR_EXP 20
45820: PUSH
45821: EMPTY
45822: ST_TO_ADDR
// mpStartingResources := [ ] ;
45823: LD_ADDR_EXP 15
45827: PUSH
45828: EMPTY
45829: ST_TO_ADDR
// mpStartPos := [ ] ;
45830: LD_ADDR_EXP 21
45834: PUSH
45835: EMPTY
45836: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45837: LD_ADDR_EXP 22
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45846: LD_ADDR_EXP 23
45850: PUSH
45851: EMPTY
45852: ST_TO_ADDR
// mpApemans := [ ] ;
45853: LD_ADDR_EXP 30
45857: PUSH
45858: EMPTY
45859: ST_TO_ADDR
// mpApemansArea := [ ] ;
45860: LD_ADDR_EXP 31
45864: PUSH
45865: EMPTY
45866: ST_TO_ADDR
// mpRespawn := [ ] ;
45867: LD_ADDR_EXP 32
45871: PUSH
45872: EMPTY
45873: ST_TO_ADDR
// mpKingArea := 0 ;
45874: LD_ADDR_EXP 33
45878: PUSH
45879: LD_INT 0
45881: ST_TO_ADDR
// mpPoints := [ ] ;
45882: LD_ADDR_EXP 34
45886: PUSH
45887: EMPTY
45888: ST_TO_ADDR
// mpVehicles := 0 ;
45889: LD_ADDR_EXP 35
45893: PUSH
45894: LD_INT 0
45896: ST_TO_ADDR
// mpShipments := 0 ;
45897: LD_ADDR_EXP 27
45901: PUSH
45902: LD_INT 0
45904: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45905: LD_ADDR_EXP 39
45909: PUSH
45910: EMPTY
45911: PUSH
45912: EMPTY
45913: PUSH
45914: EMPTY
45915: PUSH
45916: EMPTY
45917: PUSH
45918: EMPTY
45919: PUSH
45920: EMPTY
45921: PUSH
45922: EMPTY
45923: PUSH
45924: EMPTY
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// mpEmissions := 0 ;
45936: LD_ADDR_EXP 36
45940: PUSH
45941: LD_INT 0
45943: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45944: LD_ADDR_EXP 25
45948: PUSH
45949: LD_INT 3
45951: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45952: LD_ADDR_EXP 24
45956: PUSH
45957: LD_INT 15
45959: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45960: LD_ADDR_EXP 37
45964: PUSH
45965: LD_INT 0
45967: ST_TO_ADDR
// mpGameActive := false ;
45968: LD_ADDR_EXP 38
45972: PUSH
45973: LD_INT 0
45975: ST_TO_ADDR
// mpBlockRespThread := false ;
45976: LD_ADDR_EXP 40
45980: PUSH
45981: LD_INT 0
45983: ST_TO_ADDR
// for i := 1 to 32 do
45984: LD_ADDR_VAR 0 2
45988: PUSH
45989: DOUBLE
45990: LD_INT 1
45992: DEC
45993: ST_TO_ADDR
45994: LD_INT 32
45996: PUSH
45997: FOR_TO
45998: IFFALSE 46025
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46000: LD_ADDR_EXP 6
46004: PUSH
46005: LD_EXP 6
46009: PPUSH
46010: LD_VAR 0 2
46014: PPUSH
46015: LD_INT 0
46017: PPUSH
46018: CALL_OW 1
46022: ST_TO_ADDR
46023: GO 45997
46025: POP
46026: POP
// end ;
46027: LD_VAR 0 1
46031: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46032: LD_INT 0
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46048: LD_ADDR_VAR 0 14
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// for i in gameTypes do
46067: LD_ADDR_VAR 0 2
46071: PUSH
46072: LD_VAR 0 14
46076: PUSH
46077: FOR_IN
46078: IFFALSE 46087
// disable ( i ) ;
46080: LD_VAR 0 2
46084: DISABLE_MARKED
46085: GO 46077
46087: POP
46088: POP
// if Multiplayer then
46089: LD_OWVAR 4
46093: IFFALSE 46277
// begin mpGameType := mp_game_type ;
46095: LD_ADDR_EXP 3
46099: PUSH
46100: LD_OWVAR 6
46104: ST_TO_ADDR
// your_side := mp_player_side ;
46105: LD_ADDR_OWVAR 2
46109: PUSH
46110: LD_OWVAR 7
46114: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46115: LD_ADDR_EXP 7
46119: PUSH
46120: LD_OWVAR 17
46124: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46125: LD_ADDR_EXP 8
46129: PUSH
46130: LD_OWVAR 15
46134: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46135: LD_ADDR_EXP 9
46139: PUSH
46140: LD_OWVAR 16
46144: ST_TO_ADDR
// mpTeams := mp_teams ;
46145: LD_ADDR_EXP 10
46149: PUSH
46150: LD_OWVAR 12
46154: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46155: LD_ADDR_VAR 0 2
46159: PUSH
46160: DOUBLE
46161: LD_INT 1
46163: DEC
46164: ST_TO_ADDR
46165: LD_EXP 4
46169: PPUSH
46170: CALL 5044 0 1
46174: PUSH
46175: FOR_TO
46176: IFFALSE 46252
// begin setting := mpGameSettingsKeys [ i ] ;
46178: LD_ADDR_VAR 0 12
46182: PUSH
46183: LD_EXP 4
46187: PUSH
46188: LD_VAR 0 2
46192: ARRAY
46193: ST_TO_ADDR
// if setting then
46194: LD_VAR 0 12
46198: IFFALSE 46250
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46200: LD_ADDR_EXP 6
46204: PUSH
46205: LD_EXP 6
46209: PPUSH
46210: LD_VAR 0 2
46214: PPUSH
46215: LD_EXP 5
46219: PUSH
46220: LD_VAR 0 2
46224: ARRAY
46225: PUSH
46226: LD_VAR 0 2
46230: PUSH
46231: LD_INT 1
46233: MINUS
46234: PPUSH
46235: CALL_OW 426
46239: PUSH
46240: LD_INT 1
46242: PLUS
46243: ARRAY
46244: PPUSH
46245: CALL_OW 1
46249: ST_TO_ADDR
// end ;
46250: GO 46175
46252: POP
46253: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46254: LD_ADDR_EXP 11
46258: PUSH
46259: LD_EXP 8
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: DIFF
46270: PUSH
46271: LD_INT 1
46273: GREATER
46274: ST_TO_ADDR
// end else
46275: GO 46277
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46277: LD_EXP 3
46281: PPUSH
46282: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46286: LD_EXP 18
46290: PPUSH
46291: CALL 5044 0 1
46295: IFFALSE 46326
// begin for i in mpMarkedAreas do
46297: LD_ADDR_VAR 0 2
46301: PUSH
46302: LD_EXP 18
46306: PUSH
46307: FOR_IN
46308: IFFALSE 46324
// SetAreaMapShow ( i , 0 ) ;
46310: LD_VAR 0 2
46314: PPUSH
46315: LD_INT 0
46317: PPUSH
46318: CALL_OW 424
46322: GO 46307
46324: POP
46325: POP
// end ; for i := 1 to 8 do
46326: LD_ADDR_VAR 0 2
46330: PUSH
46331: DOUBLE
46332: LD_INT 1
46334: DEC
46335: ST_TO_ADDR
46336: LD_INT 8
46338: PUSH
46339: FOR_TO
46340: IFFALSE 47556
// begin if not mpSidePositions [ i ] then
46342: LD_EXP 7
46346: PUSH
46347: LD_VAR 0 2
46351: ARRAY
46352: NOT
46353: IFFALSE 46357
// continue ;
46355: GO 46339
// side := i ;
46357: LD_ADDR_VAR 0 7
46361: PUSH
46362: LD_VAR 0 2
46366: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46367: LD_ADDR_VAR 0 9
46371: PUSH
46372: LD_EXP 9
46376: PUSH
46377: LD_VAR 0 2
46381: ARRAY
46382: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46383: LD_ADDR_VAR 0 8
46387: PUSH
46388: LD_EXP 7
46392: PUSH
46393: LD_VAR 0 2
46397: ARRAY
46398: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46399: LD_EXP 12
46403: PPUSH
46404: CALL 5044 0 1
46408: IFFALSE 46485
// begin for j in mpOilDeposits [ pos ] do
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_EXP 12
46419: PUSH
46420: LD_VAR 0 8
46424: ARRAY
46425: PUSH
46426: FOR_IN
46427: IFFALSE 46483
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46429: LD_VAR 0 3
46433: PUSH
46434: LD_INT 1
46436: ARRAY
46437: PPUSH
46438: LD_VAR 0 3
46442: PUSH
46443: LD_INT 2
46445: ARRAY
46446: PPUSH
46447: LD_INT 2
46449: PPUSH
46450: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46454: LD_VAR 0 3
46458: PUSH
46459: LD_INT 1
46461: ARRAY
46462: PPUSH
46463: LD_VAR 0 3
46467: PUSH
46468: LD_INT 2
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 7
46476: PPUSH
46477: CALL_OW 441
// end ;
46481: GO 46426
46483: POP
46484: POP
// end ; if Count ( mpSibDeposits ) then
46485: LD_EXP 13
46489: PPUSH
46490: CALL 5044 0 1
46494: IFFALSE 46571
// begin for j in mpSibDeposits [ pos ] do
46496: LD_ADDR_VAR 0 3
46500: PUSH
46501: LD_EXP 13
46505: PUSH
46506: LD_VAR 0 8
46510: ARRAY
46511: PUSH
46512: FOR_IN
46513: IFFALSE 46569
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46515: LD_VAR 0 3
46519: PUSH
46520: LD_INT 1
46522: ARRAY
46523: PPUSH
46524: LD_VAR 0 3
46528: PUSH
46529: LD_INT 2
46531: ARRAY
46532: PPUSH
46533: LD_INT 3
46535: PPUSH
46536: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46540: LD_VAR 0 3
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PPUSH
46549: LD_VAR 0 3
46553: PUSH
46554: LD_INT 2
46556: ARRAY
46557: PPUSH
46558: LD_VAR 0 7
46562: PPUSH
46563: CALL_OW 441
// end ;
46567: GO 46512
46569: POP
46570: POP
// end ; InitBc ;
46571: CALL_OW 21
// InitUc ;
46575: CALL_OW 18
// uc_side := side ;
46579: LD_ADDR_OWVAR 20
46583: PUSH
46584: LD_VAR 0 7
46588: ST_TO_ADDR
// uc_nation := nation ;
46589: LD_ADDR_OWVAR 21
46593: PUSH
46594: LD_VAR 0 9
46598: ST_TO_ADDR
// if Count ( mpDepots ) then
46599: LD_EXP 14
46603: PPUSH
46604: CALL 5044 0 1
46608: IFFALSE 46778
// begin bc_level := 0 ;
46610: LD_ADDR_OWVAR 43
46614: PUSH
46615: LD_INT 0
46617: ST_TO_ADDR
// bc_type := b_depot ;
46618: LD_ADDR_OWVAR 42
46622: PUSH
46623: LD_INT 0
46625: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46626: LD_ADDR_VAR 0 4
46630: PUSH
46631: LD_EXP 14
46635: PUSH
46636: LD_VAR 0 8
46640: ARRAY
46641: PUSH
46642: LD_INT 1
46644: ARRAY
46645: PPUSH
46646: LD_EXP 14
46650: PUSH
46651: LD_VAR 0 8
46655: ARRAY
46656: PUSH
46657: LD_INT 2
46659: ARRAY
46660: PPUSH
46661: LD_EXP 14
46665: PUSH
46666: LD_VAR 0 8
46670: ARRAY
46671: PUSH
46672: LD_INT 3
46674: ARRAY
46675: PPUSH
46676: CALL_OW 47
46680: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46681: LD_VAR 0 4
46685: PPUSH
46686: LD_STRING @
46688: PUSH
46689: LD_VAR 0 7
46693: STR
46694: PPUSH
46695: CALL_OW 500
// SetTag ( b , side ) ;
46699: LD_VAR 0 4
46703: PPUSH
46704: LD_VAR 0 7
46708: PPUSH
46709: CALL_OW 109
// if Count ( mpStartingResources ) then
46713: LD_EXP 15
46717: PPUSH
46718: CALL 5044 0 1
46722: IFFALSE 46776
// begin for j := 1 to mpStartingResources do
46724: LD_ADDR_VAR 0 3
46728: PUSH
46729: DOUBLE
46730: LD_INT 1
46732: DEC
46733: ST_TO_ADDR
46734: LD_EXP 15
46738: PUSH
46739: FOR_TO
46740: IFFALSE 46774
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46742: LD_VAR 0 4
46746: PPUSH
46747: CALL_OW 274
46751: PPUSH
46752: LD_VAR 0 3
46756: PPUSH
46757: LD_EXP 15
46761: PUSH
46762: LD_VAR 0 3
46766: ARRAY
46767: PPUSH
46768: CALL_OW 277
46772: GO 46739
46774: POP
46775: POP
// end ; end else
46776: GO 46925
// if Count ( mpStartingResources ) then
46778: LD_EXP 15
46782: PPUSH
46783: CALL 5044 0 1
46787: IFFALSE 46925
// begin for j := 1 to mpStartingResources do
46789: LD_ADDR_VAR 0 3
46793: PUSH
46794: DOUBLE
46795: LD_INT 1
46797: DEC
46798: ST_TO_ADDR
46799: LD_EXP 15
46803: PUSH
46804: FOR_TO
46805: IFFALSE 46923
// begin resources := mpStartingResources [ j ] ;
46807: LD_ADDR_VAR 0 13
46811: PUSH
46812: LD_EXP 15
46816: PUSH
46817: LD_VAR 0 3
46821: ARRAY
46822: ST_TO_ADDR
// repeat if resources >= 50 then
46823: LD_VAR 0 13
46827: PUSH
46828: LD_INT 50
46830: GREATEREQUAL
46831: IFFALSE 46877
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46833: LD_VAR 0 3
46837: PPUSH
46838: LD_INT 5
46840: PPUSH
46841: LD_VAR 0 5
46845: PPUSH
46846: LD_VAR 0 6
46850: PPUSH
46851: LD_INT 4
46853: PPUSH
46854: LD_INT 0
46856: PPUSH
46857: CALL_OW 60
// resources := resources - 50 ;
46861: LD_ADDR_VAR 0 13
46865: PUSH
46866: LD_VAR 0 13
46870: PUSH
46871: LD_INT 50
46873: MINUS
46874: ST_TO_ADDR
// end else
46875: GO 46911
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46877: LD_VAR 0 3
46881: PPUSH
46882: LD_VAR 0 13
46886: PUSH
46887: LD_INT 10
46889: DIV
46890: PPUSH
46891: LD_VAR 0 5
46895: PPUSH
46896: LD_VAR 0 6
46900: PPUSH
46901: LD_INT 4
46903: PPUSH
46904: LD_INT 0
46906: PPUSH
46907: CALL_OW 60
// until resources <= 0 ;
46911: LD_VAR 0 13
46915: PUSH
46916: LD_INT 0
46918: LESSEQUAL
46919: IFFALSE 46823
// end ;
46921: GO 46804
46923: POP
46924: POP
// end ; if Count ( mpBuildings ) then
46925: LD_EXP 17
46929: PPUSH
46930: CALL 5044 0 1
46934: IFFALSE 47012
// begin for j in mpBuildings [ pos ] do
46936: LD_ADDR_VAR 0 3
46940: PUSH
46941: LD_EXP 17
46945: PUSH
46946: LD_VAR 0 8
46950: ARRAY
46951: PUSH
46952: FOR_IN
46953: IFFALSE 47010
// begin bc_level := 0 ;
46955: LD_ADDR_OWVAR 43
46959: PUSH
46960: LD_INT 0
46962: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46963: LD_ADDR_OWVAR 42
46967: PUSH
46968: LD_VAR 0 3
46972: PUSH
46973: LD_INT 1
46975: ARRAY
46976: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46977: LD_VAR 0 3
46981: PUSH
46982: LD_INT 2
46984: ARRAY
46985: PPUSH
46986: LD_VAR 0 3
46990: PUSH
46991: LD_INT 3
46993: ARRAY
46994: PPUSH
46995: LD_VAR 0 3
46999: PUSH
47000: LD_INT 4
47002: ARRAY
47003: PPUSH
47004: CALL_OW 47
// end ;
47008: GO 46952
47010: POP
47011: POP
// end ; if mpBattleFlag > - 1 then
47012: LD_EXP 22
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: GREATER
47021: IFFALSE 47180
// begin x := mpStartPos [ pos ] [ 1 ] ;
47023: LD_ADDR_VAR 0 5
47027: PUSH
47028: LD_EXP 21
47032: PUSH
47033: LD_VAR 0 8
47037: ARRAY
47038: PUSH
47039: LD_INT 1
47041: ARRAY
47042: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47043: LD_ADDR_VAR 0 6
47047: PUSH
47048: LD_EXP 21
47052: PUSH
47053: LD_VAR 0 8
47057: ARRAY
47058: PUSH
47059: LD_INT 2
47061: ARRAY
47062: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47063: LD_VAR 0 5
47067: PPUSH
47068: LD_VAR 0 6
47072: PPUSH
47073: LD_INT 12
47075: PPUSH
47076: LD_INT 2
47078: PPUSH
47079: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47083: LD_ADDR_EXP 23
47087: PUSH
47088: LD_EXP 23
47092: PPUSH
47093: LD_VAR 0 7
47097: PPUSH
47098: LD_VAR 0 7
47102: PPUSH
47103: LD_VAR 0 5
47107: PPUSH
47108: LD_VAR 0 6
47112: PPUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 100
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 70
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: LD_INT 40
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 10
47145: PUSH
47146: LD_INT 25
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 20
47155: PUSH
47156: LD_INT 100
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: PPUSH
47170: CALL_OW 418
47174: PPUSH
47175: CALL_OW 1
47179: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47180: LD_EXP 26
47184: PUSH
47185: LD_INT 20
47187: PPUSH
47188: LD_VAR 0 7
47192: PPUSH
47193: CALL_OW 321
47197: PUSH
47198: LD_INT 1
47200: EQUAL
47201: AND
47202: IFFALSE 47219
// SetTech ( tech_SibDet , side , state_researched ) ;
47204: LD_INT 20
47206: PPUSH
47207: LD_VAR 0 7
47211: PPUSH
47212: LD_INT 2
47214: PPUSH
47215: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47219: LD_INT 24
47221: PPUSH
47222: LD_VAR 0 7
47226: PPUSH
47227: LD_INT 0
47229: PPUSH
47230: CALL_OW 322
// if mpSibBomb = 1 then
47234: LD_EXP 28
47238: PUSH
47239: LD_INT 1
47241: EQUAL
47242: IFFALSE 47261
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47244: LD_INT 25
47246: PPUSH
47247: LD_VAR 0 7
47251: PPUSH
47252: LD_INT 1
47254: PPUSH
47255: CALL_OW 322
// end else
47259: GO 47276
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47261: LD_INT 25
47263: PPUSH
47264: LD_VAR 0 7
47268: PPUSH
47269: LD_INT 0
47271: PPUSH
47272: CALL_OW 322
// end ; if mpVehicles then
47276: LD_EXP 35
47280: IFFALSE 47379
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47282: LD_ADDR_VAR 0 3
47286: PUSH
47287: LD_VAR 0 7
47291: PPUSH
47292: LD_VAR 0 9
47296: PPUSH
47297: LD_EXP 35
47301: PPUSH
47302: CALL 48238 0 3
47306: PUSH
47307: FOR_IN
47308: IFFALSE 47377
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47310: LD_VAR 0 3
47314: PPUSH
47315: LD_INT 0
47317: PPUSH
47318: LD_INT 5
47320: PPUSH
47321: CALL_OW 12
47325: PPUSH
47326: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47330: LD_VAR 0 3
47334: PPUSH
47335: LD_EXP 21
47339: PUSH
47340: LD_VAR 0 8
47344: ARRAY
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: PPUSH
47350: LD_EXP 21
47354: PUSH
47355: LD_VAR 0 8
47359: ARRAY
47360: PUSH
47361: LD_INT 2
47363: ARRAY
47364: PPUSH
47365: LD_INT 12
47367: PPUSH
47368: LD_INT 0
47370: PPUSH
47371: CALL_OW 50
// end ;
47375: GO 47307
47377: POP
47378: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47379: LD_ADDR_VAR 0 11
47383: PUSH
47384: LD_VAR 0 7
47388: PPUSH
47389: LD_VAR 0 9
47393: PPUSH
47394: LD_EXP 24
47398: PPUSH
47399: LD_EXP 25
47403: PPUSH
47404: CALL 47968 0 4
47408: ST_TO_ADDR
// for j in team do
47409: LD_ADDR_VAR 0 3
47413: PUSH
47414: LD_VAR 0 11
47418: PUSH
47419: FOR_IN
47420: IFFALSE 47469
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47422: LD_VAR 0 3
47426: PPUSH
47427: LD_EXP 21
47431: PUSH
47432: LD_VAR 0 8
47436: ARRAY
47437: PUSH
47438: LD_INT 1
47440: ARRAY
47441: PPUSH
47442: LD_EXP 21
47446: PUSH
47447: LD_VAR 0 8
47451: ARRAY
47452: PUSH
47453: LD_INT 2
47455: ARRAY
47456: PPUSH
47457: LD_INT 12
47459: PPUSH
47460: LD_INT 0
47462: PPUSH
47463: CALL_OW 50
47467: GO 47419
47469: POP
47470: POP
// if mpApemans then
47471: LD_EXP 30
47475: IFFALSE 47554
// begin for j := 1 to mpApemans do
47477: LD_ADDR_VAR 0 3
47481: PUSH
47482: DOUBLE
47483: LD_INT 1
47485: DEC
47486: ST_TO_ADDR
47487: LD_EXP 30
47491: PUSH
47492: FOR_TO
47493: IFFALSE 47552
// begin PrepareApeman ( - 5 ) ;
47495: LD_INT 5
47497: NEG
47498: PPUSH
47499: CALL 36901 0 1
// ape := CreateHuman ;
47503: LD_ADDR_VAR 0 10
47507: PUSH
47508: CALL_OW 44
47512: ST_TO_ADDR
// SetTag ( ape , side ) ;
47513: LD_VAR 0 10
47517: PPUSH
47518: LD_VAR 0 7
47522: PPUSH
47523: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47527: LD_VAR 0 10
47531: PPUSH
47532: LD_EXP 31
47536: PUSH
47537: LD_VAR 0 8
47541: ARRAY
47542: PPUSH
47543: LD_INT 0
47545: PPUSH
47546: CALL_OW 49
// end ;
47550: GO 47492
47552: POP
47553: POP
// end ; end ;
47554: GO 46339
47556: POP
47557: POP
// if not mpTeamGame then
47558: LD_EXP 11
47562: NOT
47563: IFFALSE 47661
// begin for i := 1 to 8 do
47565: LD_ADDR_VAR 0 2
47569: PUSH
47570: DOUBLE
47571: LD_INT 1
47573: DEC
47574: ST_TO_ADDR
47575: LD_INT 8
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47657
// for j := 1 to 8 do
47581: LD_ADDR_VAR 0 3
47585: PUSH
47586: DOUBLE
47587: LD_INT 1
47589: DEC
47590: ST_TO_ADDR
47591: LD_INT 8
47593: PUSH
47594: FOR_TO
47595: IFFALSE 47653
// if i <> j then
47597: LD_VAR 0 2
47601: PUSH
47602: LD_VAR 0 3
47606: NONEQUAL
47607: IFFALSE 47631
// SetAttitude ( i , j , att_neutral , true ) else
47609: LD_VAR 0 2
47613: PPUSH
47614: LD_VAR 0 3
47618: PPUSH
47619: LD_INT 0
47621: PPUSH
47622: LD_INT 1
47624: PPUSH
47625: CALL_OW 80
47629: GO 47651
// SetAttitude ( i , j , att_friend , true ) ;
47631: LD_VAR 0 2
47635: PPUSH
47636: LD_VAR 0 3
47640: PPUSH
47641: LD_INT 1
47643: PPUSH
47644: LD_INT 1
47646: PPUSH
47647: CALL_OW 80
47651: GO 47594
47653: POP
47654: POP
47655: GO 47578
47657: POP
47658: POP
// end else
47659: GO 47836
// begin if mpSharedVision then
47661: LD_EXP 16
47665: IFFALSE 47730
// begin for i in mpTeams do
47667: LD_ADDR_VAR 0 2
47671: PUSH
47672: LD_EXP 10
47676: PUSH
47677: FOR_IN
47678: IFFALSE 47728
// for j := 2 to i do
47680: LD_ADDR_VAR 0 3
47684: PUSH
47685: DOUBLE
47686: LD_INT 2
47688: DEC
47689: ST_TO_ADDR
47690: LD_VAR 0 2
47694: PUSH
47695: FOR_TO
47696: IFFALSE 47724
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47698: LD_VAR 0 2
47702: PUSH
47703: LD_VAR 0 3
47707: ARRAY
47708: PPUSH
47709: LD_VAR 0 2
47713: PUSH
47714: LD_INT 1
47716: ARRAY
47717: PPUSH
47718: CALL_OW 343
47722: GO 47695
47724: POP
47725: POP
47726: GO 47677
47728: POP
47729: POP
// end ; for i := 1 to 8 do
47730: LD_ADDR_VAR 0 2
47734: PUSH
47735: DOUBLE
47736: LD_INT 1
47738: DEC
47739: ST_TO_ADDR
47740: LD_INT 8
47742: PUSH
47743: FOR_TO
47744: IFFALSE 47834
// for j := 1 to 8 do
47746: LD_ADDR_VAR 0 3
47750: PUSH
47751: DOUBLE
47752: LD_INT 1
47754: DEC
47755: ST_TO_ADDR
47756: LD_INT 8
47758: PUSH
47759: FOR_TO
47760: IFFALSE 47830
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47762: LD_EXP 8
47766: PUSH
47767: LD_VAR 0 2
47771: ARRAY
47772: PUSH
47773: LD_EXP 8
47777: PUSH
47778: LD_VAR 0 3
47782: ARRAY
47783: EQUAL
47784: IFFALSE 47808
// SetAttitude ( i , j , att_friend , true ) else
47786: LD_VAR 0 2
47790: PPUSH
47791: LD_VAR 0 3
47795: PPUSH
47796: LD_INT 1
47798: PPUSH
47799: LD_INT 1
47801: PPUSH
47802: CALL_OW 80
47806: GO 47828
// SetAttitude ( i , j , att_enemy , true ) ;
47808: LD_VAR 0 2
47812: PPUSH
47813: LD_VAR 0 3
47817: PPUSH
47818: LD_INT 2
47820: PPUSH
47821: LD_INT 1
47823: PPUSH
47824: CALL_OW 80
47828: GO 47759
47830: POP
47831: POP
47832: GO 47743
47834: POP
47835: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47836: LD_ADDR_OWVAR 71
47840: PUSH
47841: LD_EXP 9
47845: PUSH
47846: LD_OWVAR 2
47850: ARRAY
47851: ST_TO_ADDR
// if IAmSpec then
47852: CALL_OW 531
47856: IFFALSE 47897
// begin FogOff ( true ) ;
47858: LD_INT 1
47860: PPUSH
47861: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47865: LD_EXP 29
47869: PUSH
47870: LD_INT 1
47872: ARRAY
47873: PUSH
47874: LD_INT 2
47876: DIV
47877: PPUSH
47878: LD_EXP 29
47882: PUSH
47883: LD_INT 2
47885: ARRAY
47886: PUSH
47887: LD_INT 2
47889: DIV
47890: PPUSH
47891: CALL_OW 86
// end else
47895: GO 47943
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47897: LD_EXP 21
47901: PUSH
47902: LD_EXP 7
47906: PUSH
47907: LD_OWVAR 2
47911: ARRAY
47912: ARRAY
47913: PUSH
47914: LD_INT 1
47916: ARRAY
47917: PPUSH
47918: LD_EXP 21
47922: PUSH
47923: LD_EXP 7
47927: PUSH
47928: LD_OWVAR 2
47932: ARRAY
47933: ARRAY
47934: PUSH
47935: LD_INT 2
47937: ARRAY
47938: PPUSH
47939: CALL_OW 86
// end ; BeginBuildUp ;
47943: CALL 48716 0 0
// enable ( mpActive ) ;
47947: LD_INT 100
47949: ENABLE_MARKED
// enable ( mpGameType ) ;
47950: LD_EXP 3
47954: ENABLE_MARKED
// mpGameActive := true ;
47955: LD_ADDR_EXP 38
47959: PUSH
47960: LD_INT 1
47962: ST_TO_ADDR
// end ;
47963: LD_VAR 0 1
47967: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47968: LD_INT 0
47970: PPUSH
47971: PPUSH
47972: PPUSH
// result := [ ] ;
47973: LD_ADDR_VAR 0 5
47977: PUSH
47978: EMPTY
47979: ST_TO_ADDR
// class := class_soldier ;
47980: LD_ADDR_VAR 0 7
47984: PUSH
47985: LD_INT 1
47987: ST_TO_ADDR
// uc_side := side ;
47988: LD_ADDR_OWVAR 20
47992: PUSH
47993: LD_VAR 0 1
47997: ST_TO_ADDR
// uc_nation := nation ;
47998: LD_ADDR_OWVAR 21
48002: PUSH
48003: LD_VAR 0 2
48007: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48008: LD_ADDR_OWVAR 26
48012: PUSH
48013: LD_OWVAR 19
48017: PUSH
48018: LD_VAR 0 1
48022: ARRAY
48023: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48024: LD_INT 1
48026: PPUSH
48027: LD_INT 2
48029: PPUSH
48030: CALL_OW 12
48034: PPUSH
48035: LD_VAR 0 7
48039: PPUSH
48040: LD_VAR 0 4
48044: PUSH
48045: LD_INT 2
48047: PLUS
48048: PPUSH
48049: CALL_OW 380
// hc_importance := 105 ;
48053: LD_ADDR_OWVAR 32
48057: PUSH
48058: LD_INT 105
48060: ST_TO_ADDR
// if Multiplayer then
48061: LD_OWVAR 4
48065: IFFALSE 48105
// begin hc_gallery := MULTIAVATARS ;
48067: LD_ADDR_OWVAR 33
48071: PUSH
48072: LD_STRING MULTIAVATARS
48074: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48075: LD_ADDR_OWVAR 34
48079: PUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 525
48089: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48090: LD_ADDR_OWVAR 27
48094: PUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: CALL_OW 526
48104: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48105: LD_ADDR_VAR 0 5
48109: PUSH
48110: LD_VAR 0 5
48114: PPUSH
48115: CALL_OW 44
48119: PPUSH
48120: CALL 40633 0 2
48124: ST_TO_ADDR
// InitHc_All ( ) ;
48125: CALL_OW 584
// class := 2 ;
48129: LD_ADDR_VAR 0 7
48133: PUSH
48134: LD_INT 2
48136: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48137: LD_ADDR_VAR 0 6
48141: PUSH
48142: DOUBLE
48143: LD_INT 1
48145: DEC
48146: ST_TO_ADDR
48147: LD_VAR 0 3
48151: PUSH
48152: LD_INT 1
48154: MINUS
48155: PUSH
48156: FOR_TO
48157: IFFALSE 48231
// begin PrepareHuman ( false , class , skill ) ;
48159: LD_INT 0
48161: PPUSH
48162: LD_VAR 0 7
48166: PPUSH
48167: LD_VAR 0 4
48171: PPUSH
48172: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48176: LD_ADDR_VAR 0 5
48180: PUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: CALL_OW 44
48190: PPUSH
48191: CALL 40633 0 2
48195: ST_TO_ADDR
// class := Inc ( class ) ;
48196: LD_ADDR_VAR 0 7
48200: PUSH
48201: LD_VAR 0 7
48205: PPUSH
48206: CALL 41994 0 1
48210: ST_TO_ADDR
// if class = 5 then
48211: LD_VAR 0 7
48215: PUSH
48216: LD_INT 5
48218: EQUAL
48219: IFFALSE 48229
// class := 1 ;
48221: LD_ADDR_VAR 0 7
48225: PUSH
48226: LD_INT 1
48228: ST_TO_ADDR
// end ;
48229: GO 48156
48231: POP
48232: POP
// end ;
48233: LD_VAR 0 5
48237: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48238: LD_INT 0
48240: PPUSH
48241: PPUSH
// result := [ ] ;
48242: LD_ADDR_VAR 0 4
48246: PUSH
48247: EMPTY
48248: ST_TO_ADDR
// if not vehicles then
48249: LD_VAR 0 3
48253: NOT
48254: IFFALSE 48258
// exit ;
48256: GO 48417
// for i := 1 to vehicles [ nation ] do
48258: LD_ADDR_VAR 0 5
48262: PUSH
48263: DOUBLE
48264: LD_INT 1
48266: DEC
48267: ST_TO_ADDR
48268: LD_VAR 0 3
48272: PUSH
48273: LD_VAR 0 2
48277: ARRAY
48278: PUSH
48279: FOR_TO
48280: IFFALSE 48415
// begin uc_side := side ;
48282: LD_ADDR_OWVAR 20
48286: PUSH
48287: LD_VAR 0 1
48291: ST_TO_ADDR
// uc_nation := nation ;
48292: LD_ADDR_OWVAR 21
48296: PUSH
48297: LD_VAR 0 2
48301: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48302: LD_VAR 0 3
48306: PUSH
48307: LD_VAR 0 2
48311: ARRAY
48312: PUSH
48313: LD_VAR 0 5
48317: ARRAY
48318: PUSH
48319: LD_INT 1
48321: ARRAY
48322: PPUSH
48323: LD_VAR 0 3
48327: PUSH
48328: LD_VAR 0 2
48332: ARRAY
48333: PUSH
48334: LD_VAR 0 5
48338: ARRAY
48339: PUSH
48340: LD_INT 2
48342: ARRAY
48343: PPUSH
48344: LD_VAR 0 3
48348: PUSH
48349: LD_VAR 0 2
48353: ARRAY
48354: PUSH
48355: LD_VAR 0 5
48359: ARRAY
48360: PUSH
48361: LD_INT 3
48363: ARRAY
48364: PPUSH
48365: LD_VAR 0 3
48369: PUSH
48370: LD_VAR 0 2
48374: ARRAY
48375: PUSH
48376: LD_VAR 0 5
48380: ARRAY
48381: PUSH
48382: LD_INT 4
48384: ARRAY
48385: PPUSH
48386: LD_INT 80
48388: PPUSH
48389: CALL 7782 0 5
// result := Join ( result , CreateVehicle ) ;
48393: LD_ADDR_VAR 0 4
48397: PUSH
48398: LD_VAR 0 4
48402: PPUSH
48403: CALL_OW 45
48407: PPUSH
48408: CALL 40633 0 2
48412: ST_TO_ADDR
// end ;
48413: GO 48279
48415: POP
48416: POP
// end ;
48417: LD_VAR 0 4
48421: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48422: LD_INT 0
48424: PPUSH
48425: PPUSH
// for i in mpBattleFlags do
48426: LD_ADDR_VAR 0 3
48430: PUSH
48431: LD_EXP 23
48435: PUSH
48436: FOR_IN
48437: IFFALSE 48514
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48439: LD_VAR 0 3
48443: PPUSH
48444: LD_INT 1
48446: PUSH
48447: LD_VAR 0 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_VAR 0 1
48463: PUSH
48464: LD_REAL  7.00000000000000E-0001
48467: MUL
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 3
48475: PUSH
48476: LD_VAR 0 1
48480: PUSH
48481: LD_REAL  4.00000000000000E-0001
48484: MUL
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 20
48492: PUSH
48493: LD_VAR 0 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: PPUSH
48508: CALL_OW 423
48512: GO 48436
48514: POP
48515: POP
// end ;
48516: LD_VAR 0 2
48520: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48521: LD_INT 100
48523: IFFALSE 48618
48525: GO 48527
48527: DISABLE
48528: LD_INT 0
48530: PPUSH
48531: PPUSH
// begin if mpBattleFlag <= 0 then
48532: LD_EXP 22
48536: PUSH
48537: LD_INT 0
48539: LESSEQUAL
48540: IFFALSE 48544
// exit ;
48542: GO 48618
// strength := 100 ;
48544: LD_ADDR_VAR 0 2
48548: PUSH
48549: LD_INT 100
48551: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48552: LD_EXP 22
48556: PPUSH
48557: CALL_OW 67
// strength := Dec ( strength ) ;
48561: LD_ADDR_VAR 0 2
48565: PUSH
48566: LD_VAR 0 2
48570: PPUSH
48571: CALL 42016 0 1
48575: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48576: LD_VAR 0 2
48580: PPUSH
48581: CALL 48422 0 1
// until not strength ;
48585: LD_VAR 0 2
48589: NOT
48590: IFFALSE 48552
// for i in mpBattleFlags do
48592: LD_ADDR_VAR 0 1
48596: PUSH
48597: LD_EXP 23
48601: PUSH
48602: FOR_IN
48603: IFFALSE 48616
// KillBattleFlag ( i ) ;
48605: LD_VAR 0 1
48609: PPUSH
48610: CALL_OW 419
48614: GO 48602
48616: POP
48617: POP
// end ;
48618: PPOPN 2
48620: END
// every 0 0$1 marked mpActive do var side , tmp ;
48621: GO 48623
48623: DISABLE
48624: LD_INT 0
48626: PPUSH
48627: PPUSH
// begin if mpSibBomb <= 1 then
48628: LD_EXP 28
48632: PUSH
48633: LD_INT 1
48635: LESSEQUAL
48636: IFFALSE 48640
// exit ;
48638: GO 48713
// tmp := mpSibBomb ;
48640: LD_ADDR_VAR 0 2
48644: PUSH
48645: LD_EXP 28
48649: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48650: LD_INT 35
48652: PPUSH
48653: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48657: LD_ADDR_VAR 0 2
48661: PUSH
48662: LD_VAR 0 2
48666: PUSH
48667: LD_INT 35
48669: MINUS
48670: ST_TO_ADDR
// until not tmp ;
48671: LD_VAR 0 2
48675: NOT
48676: IFFALSE 48650
// for side := 1 to 8 do
48678: LD_ADDR_VAR 0 1
48682: PUSH
48683: DOUBLE
48684: LD_INT 1
48686: DEC
48687: ST_TO_ADDR
48688: LD_INT 8
48690: PUSH
48691: FOR_TO
48692: IFFALSE 48711
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48694: LD_INT 25
48696: PPUSH
48697: LD_VAR 0 1
48701: PPUSH
48702: LD_INT 1
48704: PPUSH
48705: CALL_OW 322
48709: GO 48691
48711: POP
48712: POP
// end ;
48713: PPOPN 2
48715: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48716: LD_INT 0
48718: PPUSH
48719: PPUSH
48720: PPUSH
// mpBuildUpTimeDelay := 0 ;
48721: LD_ADDR_EXP 41
48725: PUSH
48726: LD_INT 0
48728: ST_TO_ADDR
// if not mpBuildUpTime then
48729: LD_EXP 20
48733: NOT
48734: IFFALSE 48738
// exit ;
48736: GO 48921
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48738: LD_ADDR_EXP 41
48742: PUSH
48743: LD_INT 8400
48745: PUSH
48746: LD_INT 2100
48748: PUSH
48749: LD_EXP 20
48753: MUL
48754: PLUS
48755: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48756: LD_ADDR_EXP 42
48760: PUSH
48761: LD_INT 1
48763: ST_TO_ADDR
// for i := 1 to 8 do
48764: LD_ADDR_VAR 0 2
48768: PUSH
48769: DOUBLE
48770: LD_INT 1
48772: DEC
48773: ST_TO_ADDR
48774: LD_INT 8
48776: PUSH
48777: FOR_TO
48778: IFFALSE 48919
// if mpSidePositions [ i ] then
48780: LD_EXP 7
48784: PUSH
48785: LD_VAR 0 2
48789: ARRAY
48790: IFFALSE 48917
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48792: LD_EXP 19
48796: PUSH
48797: LD_EXP 7
48801: PUSH
48802: LD_VAR 0 2
48806: ARRAY
48807: ARRAY
48808: PPUSH
48809: LD_INT 5
48811: PPUSH
48812: CALL_OW 424
// for j := 1 to 8 do
48816: LD_ADDR_VAR 0 3
48820: PUSH
48821: DOUBLE
48822: LD_INT 1
48824: DEC
48825: ST_TO_ADDR
48826: LD_INT 8
48828: PUSH
48829: FOR_TO
48830: IFFALSE 48915
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48832: LD_EXP 7
48836: PUSH
48837: LD_VAR 0 3
48841: ARRAY
48842: PUSH
48843: LD_EXP 8
48847: PUSH
48848: LD_VAR 0 2
48852: ARRAY
48853: PUSH
48854: LD_EXP 8
48858: PUSH
48859: LD_VAR 0 3
48863: ARRAY
48864: NONEQUAL
48865: PUSH
48866: LD_EXP 11
48870: NOT
48871: PUSH
48872: LD_VAR 0 2
48876: PUSH
48877: LD_VAR 0 3
48881: NONEQUAL
48882: AND
48883: OR
48884: AND
48885: IFFALSE 48913
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48887: LD_VAR 0 3
48891: PPUSH
48892: LD_EXP 19
48896: PUSH
48897: LD_EXP 7
48901: PUSH
48902: LD_VAR 0 2
48906: ARRAY
48907: ARRAY
48908: PPUSH
48909: CALL_OW 333
48913: GO 48829
48915: POP
48916: POP
// end ;
48917: GO 48777
48919: POP
48920: POP
// end ;
48921: LD_VAR 0 1
48925: RET
// function EndBuildUp ; var i , j ; begin
48926: LD_INT 0
48928: PPUSH
48929: PPUSH
48930: PPUSH
// mpBuildUpTimeActive := false ;
48931: LD_ADDR_EXP 42
48935: PUSH
48936: LD_INT 0
48938: ST_TO_ADDR
// for i := 1 to 8 do
48939: LD_ADDR_VAR 0 2
48943: PUSH
48944: DOUBLE
48945: LD_INT 1
48947: DEC
48948: ST_TO_ADDR
48949: LD_INT 8
48951: PUSH
48952: FOR_TO
48953: IFFALSE 49094
// if mpSidePositions [ i ] then
48955: LD_EXP 7
48959: PUSH
48960: LD_VAR 0 2
48964: ARRAY
48965: IFFALSE 49092
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48967: LD_EXP 19
48971: PUSH
48972: LD_EXP 7
48976: PUSH
48977: LD_VAR 0 2
48981: ARRAY
48982: ARRAY
48983: PPUSH
48984: LD_INT 0
48986: PPUSH
48987: CALL_OW 424
// for j := 1 to 8 do
48991: LD_ADDR_VAR 0 3
48995: PUSH
48996: DOUBLE
48997: LD_INT 1
48999: DEC
49000: ST_TO_ADDR
49001: LD_INT 8
49003: PUSH
49004: FOR_TO
49005: IFFALSE 49090
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49007: LD_EXP 7
49011: PUSH
49012: LD_VAR 0 3
49016: ARRAY
49017: PUSH
49018: LD_EXP 8
49022: PUSH
49023: LD_VAR 0 2
49027: ARRAY
49028: PUSH
49029: LD_EXP 8
49033: PUSH
49034: LD_VAR 0 3
49038: ARRAY
49039: NONEQUAL
49040: PUSH
49041: LD_EXP 11
49045: NOT
49046: PUSH
49047: LD_VAR 0 2
49051: PUSH
49052: LD_VAR 0 3
49056: NONEQUAL
49057: AND
49058: OR
49059: AND
49060: IFFALSE 49088
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49062: LD_VAR 0 3
49066: PPUSH
49067: LD_EXP 19
49071: PUSH
49072: LD_EXP 7
49076: PUSH
49077: LD_VAR 0 2
49081: ARRAY
49082: ARRAY
49083: PPUSH
49084: CALL_OW 334
49088: GO 49004
49090: POP
49091: POP
// end ;
49092: GO 48952
49094: POP
49095: POP
// end ;
49096: LD_VAR 0 1
49100: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49101: LD_EXP 42
49105: IFFALSE 49280
49107: GO 49109
49109: DISABLE
49110: LD_INT 0
49112: PPUSH
49113: PPUSH
// begin for i := 1 to 8 do
49114: LD_ADDR_VAR 0 1
49118: PUSH
49119: DOUBLE
49120: LD_INT 1
49122: DEC
49123: ST_TO_ADDR
49124: LD_INT 8
49126: PUSH
49127: FOR_TO
49128: IFFALSE 49277
// if mpSidePositions [ i ] then
49130: LD_EXP 7
49134: PUSH
49135: LD_VAR 0 1
49139: ARRAY
49140: IFFALSE 49275
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49142: LD_ADDR_VAR 0 2
49146: PUSH
49147: LD_EXP 19
49151: PUSH
49152: LD_EXP 7
49156: PUSH
49157: LD_VAR 0 1
49161: ARRAY
49162: ARRAY
49163: PPUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 21
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 21
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 22
49194: PUSH
49195: LD_OWVAR 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PPUSH
49208: CALL_OW 70
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49273
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49216: LD_EXP 8
49220: PUSH
49221: LD_VAR 0 1
49225: ARRAY
49226: PUSH
49227: LD_EXP 8
49231: PUSH
49232: LD_OWVAR 2
49236: ARRAY
49237: NONEQUAL
49238: PUSH
49239: LD_EXP 11
49243: NOT
49244: PUSH
49245: LD_VAR 0 1
49249: PUSH
49250: LD_OWVAR 2
49254: NONEQUAL
49255: AND
49256: OR
49257: IFFALSE 49271
// ComMoveToArea ( un , BuildUpEscape ) ;
49259: LD_VAR 0 2
49263: PPUSH
49264: LD_INT 9
49266: PPUSH
49267: CALL_OW 113
49271: GO 49213
49273: POP
49274: POP
49275: GO 49127
49277: POP
49278: POP
// enable ;
49279: ENABLE
// end ;
49280: PPOPN 2
49282: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49283: LD_EXP 20
49287: IFFALSE 49337
49289: GO 49291
49291: DISABLE
49292: LD_INT 0
49294: PPUSH
// begin tmp := mpBuildUpTime ;
49295: LD_ADDR_VAR 0 1
49299: PUSH
49300: LD_EXP 20
49304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49305: LD_INT 35
49307: PPUSH
49308: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49312: LD_ADDR_VAR 0 1
49316: PUSH
49317: LD_VAR 0 1
49321: PUSH
49322: LD_INT 35
49324: MINUS
49325: ST_TO_ADDR
// until not tmp ;
49326: LD_VAR 0 1
49330: NOT
49331: IFFALSE 49305
// EndBuildUp ;
49333: CALL 48926 0 0
// end ;
49337: PPOPN 1
49339: END
// every 0 0$1 trigger mpActive marked mpWin do
49340: LD_INT 100
49342: IFFALSE 49376
49344: GO 49346
49346: DISABLE
// begin if IAmServer then
49347: CALL_OW 518
49351: IFFALSE 49360
// wait ( 0 0$3 ) ;
49353: LD_INT 105
49355: PPUSH
49356: CALL_OW 67
// if Multiplayer then
49360: LD_OWVAR 4
49364: IFFALSE 49372
// YouWinInMultiplayer else
49366: CALL_OW 106
49370: GO 49376
// YouWin ;
49372: CALL_OW 103
// end ;
49376: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49377: LD_INT 0
49379: PPUSH
// result := false ;
49380: LD_ADDR_VAR 0 3
49384: PUSH
49385: LD_INT 0
49387: ST_TO_ADDR
// case gameType of GameTypeNormal :
49388: LD_VAR 0 1
49392: PUSH
49393: LD_INT 1
49395: DOUBLE
49396: EQUAL
49397: IFTRUE 49401
49399: GO 49474
49401: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49402: LD_ADDR_VAR 0 3
49406: PUSH
49407: LD_INT 22
49409: PUSH
49410: LD_VAR 0 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 21
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 33
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 33
49444: PUSH
49445: LD_INT 5
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PPUSH
49462: CALL_OW 69
49466: PPUSH
49467: CALL 5044 0 1
49471: ST_TO_ADDR
// end ; GameTypeSurvival :
49472: GO 49709
49474: LD_INT 2
49476: DOUBLE
49477: EQUAL
49478: IFTRUE 49482
49480: GO 49610
49482: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49483: LD_ADDR_VAR 0 3
49487: PUSH
49488: LD_INT 22
49490: PUSH
49491: LD_VAR 0 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 30
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PPUSH
49532: CALL_OW 69
49536: PPUSH
49537: CALL 5044 0 1
49541: PUSH
49542: LD_INT 22
49544: PUSH
49545: LD_VAR 0 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 21
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 33
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 33
49579: PUSH
49580: LD_INT 5
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PPUSH
49597: CALL_OW 69
49601: PPUSH
49602: CALL 5044 0 1
49606: AND
49607: ST_TO_ADDR
// end ; GameTypeKing :
49608: GO 49709
49610: LD_INT 3
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49708
49618: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
49619: LD_ADDR_VAR 0 3
49623: PUSH
49624: LD_INT 22
49626: PUSH
49627: LD_VAR 0 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 21
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 33
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 33
49661: PUSH
49662: LD_INT 5
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PPUSH
49679: CALL_OW 69
49683: PPUSH
49684: CALL 5044 0 1
49688: PUSH
49689: LD_VAR 0 2
49693: PPUSH
49694: CALL 52886 0 1
49698: PUSH
49699: LD_EXP 34
49703: GREATEREQUAL
49704: OR
49705: ST_TO_ADDR
// end ; end ;
49706: GO 49709
49708: POP
// end ;
49709: LD_VAR 0 3
49713: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49714: LD_INT 100
49716: IFFALSE 49938
49718: GO 49720
49720: DISABLE
49721: LD_INT 0
49723: PPUSH
49724: PPUSH
// begin if Multiplayer then
49725: LD_OWVAR 4
49729: IFFALSE 49737
// SetPlayerSpectator ( ) else
49731: CALL_OW 572
49735: GO 49746
// FogOff ( your_side ) ;
49737: LD_OWVAR 2
49741: PPUSH
49742: CALL_OW 344
// repeat gameIsOn := false ;
49746: LD_ADDR_VAR 0 1
49750: PUSH
49751: LD_INT 0
49753: ST_TO_ADDR
// for i := 1 to 8 do
49754: LD_ADDR_VAR 0 2
49758: PUSH
49759: DOUBLE
49760: LD_INT 1
49762: DEC
49763: ST_TO_ADDR
49764: LD_INT 8
49766: PUSH
49767: FOR_TO
49768: IFFALSE 49890
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49770: LD_EXP 7
49774: PUSH
49775: LD_VAR 0 2
49779: ARRAY
49780: PUSH
49781: LD_VAR 0 2
49785: PPUSH
49786: CALL_OW 108
49790: AND
49791: PUSH
49792: LD_VAR 0 2
49796: PUSH
49797: LD_OWVAR 2
49801: NONEQUAL
49802: AND
49803: IFFALSE 49888
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49805: LD_EXP 8
49809: PUSH
49810: LD_VAR 0 2
49814: ARRAY
49815: NOT
49816: PUSH
49817: LD_EXP 8
49821: PUSH
49822: LD_VAR 0 2
49826: ARRAY
49827: PUSH
49828: LD_EXP 8
49832: PUSH
49833: LD_OWVAR 2
49837: ARRAY
49838: NONEQUAL
49839: PUSH
49840: LD_OWVAR 2
49844: PPUSH
49845: LD_VAR 0 2
49849: PPUSH
49850: CALL_OW 81
49854: PUSH
49855: LD_INT 1
49857: NONEQUAL
49858: AND
49859: OR
49860: IFFALSE 49888
// if HasPowerByGameType ( mpGameType , i ) then
49862: LD_EXP 3
49866: PPUSH
49867: LD_VAR 0 2
49871: PPUSH
49872: CALL 49377 0 2
49876: IFFALSE 49888
// begin gameIsOn := true ;
49878: LD_ADDR_VAR 0 1
49882: PUSH
49883: LD_INT 1
49885: ST_TO_ADDR
// break ;
49886: GO 49890
// end ;
49888: GO 49767
49890: POP
49891: POP
// wait ( 100 ) ;
49892: LD_INT 100
49894: PPUSH
49895: CALL_OW 67
// until not gameIsOn ;
49899: LD_VAR 0 1
49903: NOT
49904: IFFALSE 49746
// if IAmServer then
49906: CALL_OW 518
49910: IFFALSE 49919
// wait ( 0 0$3 ) ;
49912: LD_INT 105
49914: PPUSH
49915: CALL_OW 67
// if Multiplayer then
49919: LD_OWVAR 4
49923: IFFALSE 49931
// YouLostInMultiplayer else
49925: CALL_OW 107
49929: GO 49938
// YouLost (  ) ;
49931: LD_STRING 
49933: PPUSH
49934: CALL_OW 104
// end ;
49938: PPOPN 2
49940: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49941: LD_EXP 32
49945: IFFALSE 50292
49947: GO 49949
49949: DISABLE
49950: LD_INT 0
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49957: LD_ADDR_VAR 0 5
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: LD_INT 4
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: LD_INT 6
49979: PUSH
49980: LD_INT 7
49982: PUSH
49983: LD_INT 8
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
49996: LD_INT 350
49998: PPUSH
49999: CALL_OW 67
// for i := 1 to 8 do
50003: LD_ADDR_VAR 0 1
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_INT 8
50015: PUSH
50016: FOR_TO
50017: IFFALSE 50262
// begin j := sides [ i ] ;
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: LD_VAR 0 5
50028: PUSH
50029: LD_VAR 0 1
50033: ARRAY
50034: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50035: LD_EXP 39
50039: PUSH
50040: LD_VAR 0 2
50044: ARRAY
50045: PPUSH
50046: CALL 5044 0 1
50050: PUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: CALL_OW 108
50060: AND
50061: PUSH
50062: LD_EXP 3
50066: PPUSH
50067: LD_VAR 0 2
50071: PPUSH
50072: CALL 49377 0 2
50076: AND
50077: IFFALSE 50260
// begin wait ( mpRespawn div 3 ) ;
50079: LD_EXP 32
50083: PUSH
50084: LD_INT 3
50086: DIV
50087: PPUSH
50088: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50092: LD_ADDR_VAR 0 3
50096: PUSH
50097: LD_INT 22
50099: PUSH
50100: LD_VAR 0 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 50
50111: PUSH
50112: EMPTY
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 30
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 30
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: PPUSH
50148: CALL_OW 69
50152: ST_TO_ADDR
// if not tmp then
50153: LD_VAR 0 3
50157: NOT
50158: IFFALSE 50162
// continue ;
50160: GO 50016
// spawn := tmp [ 1 ] ;
50162: LD_ADDR_VAR 0 4
50166: PUSH
50167: LD_VAR 0 3
50171: PUSH
50172: LD_INT 1
50174: ARRAY
50175: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50176: LD_EXP 39
50180: PUSH
50181: LD_VAR 0 2
50185: ARRAY
50186: PUSH
50187: LD_INT 1
50189: ARRAY
50190: PPUSH
50191: LD_VAR 0 4
50195: PPUSH
50196: CALL_OW 250
50200: PPUSH
50201: LD_VAR 0 4
50205: PPUSH
50206: CALL_OW 251
50210: PPUSH
50211: LD_INT 32
50213: PPUSH
50214: LD_INT 1
50216: PPUSH
50217: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50221: LD_ADDR_EXP 39
50225: PUSH
50226: LD_EXP 39
50230: PPUSH
50231: LD_VAR 0 2
50235: PPUSH
50236: LD_EXP 39
50240: PUSH
50241: LD_VAR 0 2
50245: ARRAY
50246: PPUSH
50247: LD_INT 1
50249: PPUSH
50250: CALL_OW 3
50254: PPUSH
50255: CALL_OW 1
50259: ST_TO_ADDR
// end ; end ;
50260: GO 50016
50262: POP
50263: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50264: LD_ADDR_VAR 0 5
50268: PUSH
50269: LD_VAR 0 5
50273: PPUSH
50274: LD_INT 1
50276: PPUSH
50277: LD_INT 8
50279: PPUSH
50280: LD_INT 1
50282: PPUSH
50283: CALL 7322 0 4
50287: ST_TO_ADDR
// until false ;
50288: LD_INT 0
50290: IFFALSE 49996
// end ;
50292: PPOPN 5
50294: END
// every 0 0$1 marked mpActive do
50295: GO 50297
50297: DISABLE
// begin enable ;
50298: ENABLE
// if not mpDisplayStrings then
50299: LD_EXP 37
50303: NOT
50304: IFFALSE 50315
// begin display_strings := [ ] ;
50306: LD_ADDR_OWVAR 47
50310: PUSH
50311: EMPTY
50312: ST_TO_ADDR
// exit ;
50313: GO 50325
// end ; display_strings := mpDisplayStrings ;
50315: LD_ADDR_OWVAR 47
50319: PUSH
50320: LD_EXP 37
50324: ST_TO_ADDR
// end ; end_of_file
50325: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50326: LD_INT 0
50328: PPUSH
50329: PPUSH
50330: PPUSH
50331: PPUSH
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
// if GetType ( un ) = unit_vehicle then
50337: LD_VAR 0 1
50341: PPUSH
50342: CALL_OW 247
50346: PUSH
50347: LD_INT 2
50349: EQUAL
50350: IFFALSE 50354
// exit ;
50352: GO 50911
// side := GetSide ( un ) ;
50354: LD_ADDR_VAR 0 9
50358: PUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: CALL_OW 255
50368: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50369: LD_EXP 3
50373: PUSH
50374: LD_INT 2
50376: EQUAL
50377: IFFALSE 50470
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50379: LD_VAR 0 1
50383: PPUSH
50384: CALL_OW 266
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: IN
50399: PUSH
50400: LD_VAR 0 1
50404: PPUSH
50405: CALL_OW 110
50409: PUSH
50410: LD_VAR 0 9
50414: EQUAL
50415: AND
50416: IFFALSE 50470
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50418: LD_ADDR_VAR 0 3
50422: PUSH
50423: LD_INT 22
50425: PUSH
50426: LD_VAR 0 9
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 21
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PPUSH
50449: CALL_OW 69
50453: PUSH
50454: FOR_IN
50455: IFFALSE 50468
// KillUnit ( i ) ;
50457: LD_VAR 0 3
50461: PPUSH
50462: CALL_OW 66
50466: GO 50454
50468: POP
50469: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50470: LD_VAR 0 1
50474: PPUSH
50475: CALL_OW 257
50479: PUSH
50480: LD_INT 12
50482: PUSH
50483: LD_INT 17
50485: PUSH
50486: LD_INT 15
50488: PUSH
50489: LD_INT 16
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: IN
50498: PUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 263
50508: PUSH
50509: LD_INT 5
50511: EQUAL
50512: OR
50513: IFFALSE 50647
// begin tag := GetTag ( un ) ;
50515: LD_ADDR_VAR 0 5
50519: PUSH
50520: LD_VAR 0 1
50524: PPUSH
50525: CALL_OW 110
50529: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50530: LD_ADDR_VAR 0 7
50534: PUSH
50535: LD_EXP 31
50539: PUSH
50540: LD_EXP 7
50544: PUSH
50545: LD_VAR 0 5
50549: ARRAY
50550: ARRAY
50551: ST_TO_ADDR
// if not area then
50552: LD_VAR 0 7
50556: NOT
50557: IFFALSE 50561
// exit ;
50559: GO 50911
// wait ( 4 4$00 ) ;
50561: LD_INT 8400
50563: PPUSH
50564: CALL_OW 67
// repeat wait ( 10 ) ;
50568: LD_INT 10
50570: PPUSH
50571: CALL_OW 67
// until not mpBlockRespThread ;
50575: LD_EXP 40
50579: NOT
50580: IFFALSE 50568
// mpBlockRespThread := true ;
50582: LD_ADDR_EXP 40
50586: PUSH
50587: LD_INT 1
50589: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
50590: LD_INT 5
50592: NEG
50593: PPUSH
50594: CALL 36901 0 1
// ape := CreateHuman ;
50598: LD_ADDR_VAR 0 4
50602: PUSH
50603: CALL_OW 44
50607: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50608: LD_VAR 0 4
50612: PPUSH
50613: LD_VAR 0 5
50617: PPUSH
50618: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50622: LD_VAR 0 4
50626: PPUSH
50627: LD_VAR 0 7
50631: PPUSH
50632: LD_INT 0
50634: PPUSH
50635: CALL_OW 49
// mpBlockRespThread := false ;
50639: LD_ADDR_EXP 40
50643: PUSH
50644: LD_INT 0
50646: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50647: LD_VAR 0 1
50651: PPUSH
50652: CALL_OW 247
50656: PUSH
50657: LD_INT 1
50659: EQUAL
50660: PUSH
50661: LD_VAR 0 1
50665: PPUSH
50666: CALL_OW 248
50670: PUSH
50671: LD_INT 0
50673: GREATER
50674: AND
50675: IFFALSE 50911
// begin if not mpRespawn then
50677: LD_EXP 32
50681: NOT
50682: IFFALSE 50686
// exit ;
50684: GO 50911
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50686: LD_VAR 0 9
50690: PPUSH
50691: CALL_OW 108
50695: NOT
50696: PUSH
50697: LD_EXP 3
50701: PPUSH
50702: LD_VAR 0 9
50706: PPUSH
50707: CALL 49377 0 2
50711: NOT
50712: AND
50713: IFFALSE 50717
// exit ;
50715: GO 50911
// side := GetSide ( un ) ;
50717: LD_ADDR_VAR 0 9
50721: PUSH
50722: LD_VAR 0 1
50726: PPUSH
50727: CALL_OW 255
50731: ST_TO_ADDR
// nation := GetNation ( un ) ;
50732: LD_ADDR_VAR 0 8
50736: PUSH
50737: LD_VAR 0 1
50741: PPUSH
50742: CALL_OW 248
50746: ST_TO_ADDR
// class := GetClass ( un ) ;
50747: LD_ADDR_VAR 0 6
50751: PUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 257
50761: ST_TO_ADDR
// if class > 4 then
50762: LD_VAR 0 6
50766: PUSH
50767: LD_INT 4
50769: GREATER
50770: IFFALSE 50780
// class := 1 ;
50772: LD_ADDR_VAR 0 6
50776: PUSH
50777: LD_INT 1
50779: ST_TO_ADDR
// repeat wait ( 10 ) ;
50780: LD_INT 10
50782: PPUSH
50783: CALL_OW 67
// until not mpBlockRespThread ;
50787: LD_EXP 40
50791: NOT
50792: IFFALSE 50780
// mpBlockRespThread := true ;
50794: LD_ADDR_EXP 40
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// uc_side := side ;
50802: LD_ADDR_OWVAR 20
50806: PUSH
50807: LD_VAR 0 9
50811: ST_TO_ADDR
// uc_nation := nation ;
50812: LD_ADDR_OWVAR 21
50816: PUSH
50817: LD_VAR 0 8
50821: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50822: LD_INT 0
50824: PPUSH
50825: LD_VAR 0 6
50829: PPUSH
50830: LD_INT 2
50832: PPUSH
50833: CALL_OW 380
// un := CreateHuman ;
50837: LD_ADDR_VAR 0 1
50841: PUSH
50842: CALL_OW 44
50846: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50847: LD_ADDR_EXP 39
50851: PUSH
50852: LD_EXP 39
50856: PPUSH
50857: LD_VAR 0 9
50861: PPUSH
50862: LD_EXP 39
50866: PUSH
50867: LD_VAR 0 9
50871: ARRAY
50872: PPUSH
50873: LD_EXP 39
50877: PUSH
50878: LD_VAR 0 9
50882: ARRAY
50883: PUSH
50884: LD_INT 1
50886: PLUS
50887: PPUSH
50888: LD_VAR 0 1
50892: PPUSH
50893: CALL_OW 1
50897: PPUSH
50898: CALL_OW 1
50902: ST_TO_ADDR
// mpBlockRespThread := false ;
50903: LD_ADDR_EXP 40
50907: PUSH
50908: LD_INT 0
50910: ST_TO_ADDR
// end ; end ;
50911: LD_VAR 0 2
50915: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
50916: LD_INT 0
50918: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
50919: LD_VAR 0 1
50923: PPUSH
50924: CALL_OW 266
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: IN
50939: IFFALSE 50964
// SetBName ( building , @ & GetSide ( building ) ) ;
50941: LD_VAR 0 1
50945: PPUSH
50946: LD_STRING @
50948: PUSH
50949: LD_VAR 0 1
50953: PPUSH
50954: CALL_OW 255
50958: STR
50959: PPUSH
50960: CALL_OW 500
// end ;
50964: LD_VAR 0 2
50968: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50969: LD_INT 0
50971: PPUSH
50972: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50973: LD_EXP 3
50977: PUSH
50978: LD_INT 2
50980: EQUAL
50981: PUSH
50982: LD_VAR 0 1
50986: PPUSH
50987: CALL_OW 266
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: IN
51002: AND
51003: IFFALSE 51068
// begin KillUnit ( building ) ;
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51014: LD_ADDR_VAR 0 5
51018: PUSH
51019: LD_INT 22
51021: PUSH
51022: LD_VAR 0 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 21
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PPUSH
51045: CALL_OW 69
51049: PUSH
51050: FOR_IN
51051: IFFALSE 51064
// KillUnit ( i ) ;
51053: LD_VAR 0 5
51057: PPUSH
51058: CALL_OW 66
51062: GO 51050
51064: POP
51065: POP
// exit ;
51066: GO 51113
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51068: LD_VAR 0 1
51072: PPUSH
51073: CALL_OW 266
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: IN
51088: IFFALSE 51113
// SetBName ( building , @ & GetSide ( building ) ) ;
51090: LD_VAR 0 1
51094: PPUSH
51095: LD_STRING @
51097: PUSH
51098: LD_VAR 0 1
51102: PPUSH
51103: CALL_OW 255
51107: STR
51108: PPUSH
51109: CALL_OW 500
// end ; end_of_file
51113: LD_VAR 0 4
51117: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51118: LD_EXP 38
51122: PUSH
51123: CALL 51328 0 0
51127: AND
51128: PUSH
51129: LD_OWVAR 4
51133: AND
51134: IFFALSE 51325
51136: GO 51138
51138: DISABLE
51139: LD_INT 0
51141: PPUSH
51142: PPUSH
// begin canWin := false ;
51143: LD_ADDR_VAR 0 2
51147: PUSH
51148: LD_INT 0
51150: ST_TO_ADDR
// if not HasPower ( your_side ) then
51151: LD_OWVAR 2
51155: PPUSH
51156: CALL 51368 0 1
51160: NOT
51161: IFFALSE 51172
// begin Multiplayer_Loose_Message ;
51163: CALL_OW 521
// enable ( mpLose ) ;
51167: LD_INT 102
51169: ENABLE_MARKED
// end else
51170: GO 51325
// begin canWin := true ;
51172: LD_ADDR_VAR 0 2
51176: PUSH
51177: LD_INT 1
51179: ST_TO_ADDR
// for i := 1 to 8 do
51180: LD_ADDR_VAR 0 1
51184: PUSH
51185: DOUBLE
51186: LD_INT 1
51188: DEC
51189: ST_TO_ADDR
51190: LD_INT 8
51192: PUSH
51193: FOR_TO
51194: IFFALSE 51311
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51196: LD_EXP 7
51200: PUSH
51201: LD_VAR 0 1
51205: ARRAY
51206: PUSH
51207: LD_VAR 0 1
51211: PPUSH
51212: CALL_OW 108
51216: AND
51217: PUSH
51218: LD_VAR 0 1
51222: PUSH
51223: LD_OWVAR 2
51227: NONEQUAL
51228: AND
51229: IFFALSE 51309
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51231: LD_EXP 8
51235: PUSH
51236: LD_VAR 0 1
51240: ARRAY
51241: NOT
51242: PUSH
51243: LD_EXP 8
51247: PUSH
51248: LD_VAR 0 1
51252: ARRAY
51253: PUSH
51254: LD_EXP 8
51258: PUSH
51259: LD_OWVAR 2
51263: ARRAY
51264: NONEQUAL
51265: PUSH
51266: LD_OWVAR 2
51270: PPUSH
51271: LD_VAR 0 1
51275: PPUSH
51276: CALL_OW 81
51280: PUSH
51281: LD_INT 1
51283: NONEQUAL
51284: AND
51285: OR
51286: IFFALSE 51309
// if HasPower ( i ) then
51288: LD_VAR 0 1
51292: PPUSH
51293: CALL 51368 0 1
51297: IFFALSE 51309
// begin canWin := false ;
51299: LD_ADDR_VAR 0 2
51303: PUSH
51304: LD_INT 0
51306: ST_TO_ADDR
// break ;
51307: GO 51311
// end ;
51309: GO 51193
51311: POP
51312: POP
// if canWin then
51313: LD_VAR 0 2
51317: IFFALSE 51324
// enable ( mpWin ) else
51319: LD_INT 101
51321: ENABLE_MARKED
51322: GO 51325
// enable ;
51324: ENABLE
// end ; end ;
51325: PPOPN 2
51327: END
// function CanWinLoose ; begin
51328: LD_INT 0
51330: PPUSH
// result := true ;
51331: LD_ADDR_VAR 0 1
51335: PUSH
51336: LD_INT 1
51338: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51339: CALL_OW 531
51343: PUSH
51344: CALL_OW 519
51348: PUSH
51349: LD_INT 1
51351: GREATER
51352: AND
51353: IFFALSE 51363
// result := false ;
51355: LD_ADDR_VAR 0 1
51359: PUSH
51360: LD_INT 0
51362: ST_TO_ADDR
// end ;
51363: LD_VAR 0 1
51367: RET
// function HasPower ( i ) ; begin
51368: LD_INT 0
51370: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51371: LD_ADDR_VAR 0 2
51375: PUSH
51376: LD_INT 22
51378: PUSH
51379: LD_VAR 0 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 21
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 33
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 33
51413: PUSH
51414: LD_INT 5
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PPUSH
51431: CALL_OW 69
51435: ST_TO_ADDR
// end ; end_of_file
51436: LD_VAR 0 2
51440: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51441: LD_EXP 38
51445: IFFALSE 51488
51447: GO 51449
51449: DISABLE
51450: LD_INT 0
51452: PPUSH
// begin for i := 1 to 8 do
51453: LD_ADDR_VAR 0 1
51457: PUSH
51458: DOUBLE
51459: LD_INT 1
51461: DEC
51462: ST_TO_ADDR
51463: LD_INT 8
51465: PUSH
51466: FOR_TO
51467: IFFALSE 51486
// SetRestrict ( b_depot , i , state_disabled ) ;
51469: LD_INT 0
51471: PPUSH
51472: LD_VAR 0 1
51476: PPUSH
51477: LD_INT 0
51479: PPUSH
51480: CALL_OW 324
51484: GO 51466
51486: POP
51487: POP
// end ;
51488: PPOPN 1
51490: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51491: LD_EXP 38
51495: PUSH
51496: CALL 51701 0 0
51500: AND
51501: PUSH
51502: LD_OWVAR 4
51506: AND
51507: IFFALSE 51698
51509: GO 51511
51511: DISABLE
51512: LD_INT 0
51514: PPUSH
51515: PPUSH
// begin canWin := false ;
51516: LD_ADDR_VAR 0 2
51520: PUSH
51521: LD_INT 0
51523: ST_TO_ADDR
// if not HasPower ( your_side ) then
51524: LD_OWVAR 2
51528: PPUSH
51529: CALL 51741 0 1
51533: NOT
51534: IFFALSE 51545
// begin Multiplayer_Loose_Message ;
51536: CALL_OW 521
// enable ( mpLose ) ;
51540: LD_INT 102
51542: ENABLE_MARKED
// end else
51543: GO 51698
// begin canWin := true ;
51545: LD_ADDR_VAR 0 2
51549: PUSH
51550: LD_INT 1
51552: ST_TO_ADDR
// for i := 1 to 8 do
51553: LD_ADDR_VAR 0 1
51557: PUSH
51558: DOUBLE
51559: LD_INT 1
51561: DEC
51562: ST_TO_ADDR
51563: LD_INT 8
51565: PUSH
51566: FOR_TO
51567: IFFALSE 51684
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51569: LD_EXP 7
51573: PUSH
51574: LD_VAR 0 1
51578: ARRAY
51579: PUSH
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 108
51589: AND
51590: PUSH
51591: LD_VAR 0 1
51595: PUSH
51596: LD_OWVAR 2
51600: NONEQUAL
51601: AND
51602: IFFALSE 51682
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51604: LD_EXP 8
51608: PUSH
51609: LD_VAR 0 1
51613: ARRAY
51614: NOT
51615: PUSH
51616: LD_EXP 8
51620: PUSH
51621: LD_VAR 0 1
51625: ARRAY
51626: PUSH
51627: LD_EXP 8
51631: PUSH
51632: LD_OWVAR 2
51636: ARRAY
51637: NONEQUAL
51638: PUSH
51639: LD_OWVAR 2
51643: PPUSH
51644: LD_VAR 0 1
51648: PPUSH
51649: CALL_OW 81
51653: PUSH
51654: LD_INT 1
51656: NONEQUAL
51657: AND
51658: OR
51659: IFFALSE 51682
// if HasPower ( i ) then
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL 51741 0 1
51670: IFFALSE 51682
// begin canWin := false ;
51672: LD_ADDR_VAR 0 2
51676: PUSH
51677: LD_INT 0
51679: ST_TO_ADDR
// break ;
51680: GO 51684
// end ;
51682: GO 51566
51684: POP
51685: POP
// if canWin then
51686: LD_VAR 0 2
51690: IFFALSE 51697
// enable ( mpWin ) else
51692: LD_INT 101
51694: ENABLE_MARKED
51695: GO 51698
// enable ;
51697: ENABLE
// end ; end ;
51698: PPOPN 2
51700: END
// function CanWinLoose ; begin
51701: LD_INT 0
51703: PPUSH
// result := true ;
51704: LD_ADDR_VAR 0 1
51708: PUSH
51709: LD_INT 1
51711: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51712: CALL_OW 531
51716: PUSH
51717: CALL_OW 519
51721: PUSH
51722: LD_INT 1
51724: GREATER
51725: AND
51726: IFFALSE 51736
// result := false ;
51728: LD_ADDR_VAR 0 1
51732: PUSH
51733: LD_INT 0
51735: ST_TO_ADDR
// end ;
51736: LD_VAR 0 1
51740: RET
// function HasPower ( i ) ; begin
51741: LD_INT 0
51743: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51744: LD_INT 22
51746: PUSH
51747: LD_VAR 0 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: LD_INT 30
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 30
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PPUSH
51788: CALL_OW 69
51792: NOT
51793: IFFALSE 51797
// exit ;
51795: GO 51862
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51797: LD_ADDR_VAR 0 2
51801: PUSH
51802: LD_INT 22
51804: PUSH
51805: LD_VAR 0 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 21
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 33
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 33
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PPUSH
51857: CALL_OW 69
51861: ST_TO_ADDR
// end ; end_of_file
51862: LD_VAR 0 2
51866: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51867: LD_EXP 38
51871: IFFALSE 52212
51873: GO 51875
51875: DISABLE
51876: LD_INT 0
51878: PPUSH
51879: PPUSH
51880: PPUSH
// begin mpKingPoints := [ ] ;
51881: LD_ADDR_EXP 43
51885: PUSH
51886: EMPTY
51887: ST_TO_ADDR
// if mpTeamGame then
51888: LD_EXP 11
51892: IFFALSE 51946
// begin for i := 1 to Count ( mpTeams ) do
51894: LD_ADDR_VAR 0 1
51898: PUSH
51899: DOUBLE
51900: LD_INT 1
51902: DEC
51903: ST_TO_ADDR
51904: LD_EXP 10
51908: PPUSH
51909: CALL 5044 0 1
51913: PUSH
51914: FOR_TO
51915: IFFALSE 51942
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51917: LD_ADDR_EXP 43
51921: PUSH
51922: LD_EXP 43
51926: PPUSH
51927: LD_VAR 0 1
51931: PPUSH
51932: LD_INT 0
51934: PPUSH
51935: CALL_OW 1
51939: ST_TO_ADDR
51940: GO 51914
51942: POP
51943: POP
// end else
51944: GO 51989
// begin for i := 1 to 8 do
51946: LD_ADDR_VAR 0 1
51950: PUSH
51951: DOUBLE
51952: LD_INT 1
51954: DEC
51955: ST_TO_ADDR
51956: LD_INT 8
51958: PUSH
51959: FOR_TO
51960: IFFALSE 51987
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51962: LD_ADDR_EXP 43
51966: PUSH
51967: LD_EXP 43
51971: PPUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: LD_INT 0
51979: PPUSH
51980: CALL_OW 1
51984: ST_TO_ADDR
51985: GO 51959
51987: POP
51988: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: LD_EXP 2
51998: PPUSH
51999: LD_INT 0
52001: PPUSH
52002: CALL_OW 517
52006: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52007: LD_ADDR_VAR 0 1
52011: PUSH
52012: DOUBLE
52013: LD_INT 1
52015: DEC
52016: ST_TO_ADDR
52017: LD_VAR 0 3
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PUSH
52026: FOR_TO
52027: IFFALSE 52094
// for j := 1 to 8 do
52029: LD_ADDR_VAR 0 2
52033: PUSH
52034: DOUBLE
52035: LD_INT 1
52037: DEC
52038: ST_TO_ADDR
52039: LD_INT 8
52041: PUSH
52042: FOR_TO
52043: IFFALSE 52090
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52045: LD_VAR 0 3
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: PUSH
52054: LD_VAR 0 1
52058: ARRAY
52059: PPUSH
52060: LD_VAR 0 3
52064: PUSH
52065: LD_INT 2
52067: ARRAY
52068: PUSH
52069: LD_VAR 0 1
52073: ARRAY
52074: PPUSH
52075: LD_VAR 0 2
52079: PPUSH
52080: LD_INT 12
52082: NEG
52083: PPUSH
52084: CALL_OW 330
52088: GO 52042
52090: POP
52091: POP
52092: GO 52026
52094: POP
52095: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52096: LD_EXP 33
52100: PPUSH
52101: LD_INT 1
52103: PPUSH
52104: CALL_OW 424
// UpdateCounter ;
52108: CALL 52716 0 0
// repeat wait ( 0 0$1 ) ;
52112: LD_INT 35
52114: PPUSH
52115: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52119: LD_ADDR_VAR 0 3
52123: PUSH
52124: LD_EXP 33
52128: PPUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 57
52134: PUSH
52135: EMPTY
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 50
52144: PUSH
52145: EMPTY
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 30
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 30
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: PPUSH
52181: CALL_OW 70
52185: ST_TO_ADDR
// if not tmp then
52186: LD_VAR 0 3
52190: NOT
52191: IFFALSE 52195
// continue ;
52193: GO 52112
// AddPoints ( tmp ) ;
52195: LD_VAR 0 3
52199: PPUSH
52200: CALL 52394 0 1
// UpdateCounter ;
52204: CALL 52716 0 0
// until false ;
52208: LD_INT 0
52210: IFFALSE 52112
// end ;
52212: PPOPN 3
52214: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52215: LD_EXP 38
52219: PUSH
52220: LD_EXP 36
52224: AND
52225: IFFALSE 52391
52227: GO 52229
52229: DISABLE
52230: LD_INT 0
52232: PPUSH
52233: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52234: LD_ADDR_VAR 0 2
52238: PUSH
52239: LD_EXP 2
52243: PPUSH
52244: LD_INT 0
52246: PPUSH
52247: CALL_OW 517
52251: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52252: LD_ADDR_VAR 0 1
52256: PUSH
52257: DOUBLE
52258: LD_INT 1
52260: DEC
52261: ST_TO_ADDR
52262: LD_VAR 0 2
52266: PUSH
52267: LD_INT 1
52269: ARRAY
52270: PUSH
52271: FOR_TO
52272: IFFALSE 52313
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 1
52281: ARRAY
52282: PUSH
52283: LD_VAR 0 1
52287: ARRAY
52288: PPUSH
52289: LD_VAR 0 2
52293: PUSH
52294: LD_INT 2
52296: ARRAY
52297: PUSH
52298: LD_VAR 0 1
52302: ARRAY
52303: PPUSH
52304: LD_INT 125
52306: PPUSH
52307: CALL_OW 495
52311: GO 52271
52313: POP
52314: POP
// repeat wait ( mpEmissions ) ;
52315: LD_EXP 36
52319: PPUSH
52320: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52324: LD_ADDR_VAR 0 1
52328: PUSH
52329: DOUBLE
52330: LD_INT 1
52332: DEC
52333: ST_TO_ADDR
52334: LD_VAR 0 2
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PUSH
52343: FOR_TO
52344: IFFALSE 52385
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52346: LD_VAR 0 2
52350: PUSH
52351: LD_INT 1
52353: ARRAY
52354: PUSH
52355: LD_VAR 0 1
52359: ARRAY
52360: PPUSH
52361: LD_VAR 0 2
52365: PUSH
52366: LD_INT 2
52368: ARRAY
52369: PUSH
52370: LD_VAR 0 1
52374: ARRAY
52375: PPUSH
52376: LD_INT 15
52378: PPUSH
52379: CALL_OW 495
52383: GO 52343
52385: POP
52386: POP
// until false ;
52387: LD_INT 0
52389: IFFALSE 52315
// end ;
52391: PPOPN 2
52393: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52394: LD_INT 0
52396: PPUSH
52397: PPUSH
52398: PPUSH
52399: PPUSH
52400: PPUSH
// if mpTeamGame then
52401: LD_EXP 11
52405: IFFALSE 52602
// begin first := depots [ 1 ] ;
52407: LD_ADDR_VAR 0 4
52411: PUSH
52412: LD_VAR 0 1
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: ST_TO_ADDR
// side := GetSide ( first ) ;
52421: LD_ADDR_VAR 0 6
52425: PUSH
52426: LD_VAR 0 4
52430: PPUSH
52431: CALL_OW 255
52435: ST_TO_ADDR
// for i := 1 to mpTeams do
52436: LD_ADDR_VAR 0 3
52440: PUSH
52441: DOUBLE
52442: LD_INT 1
52444: DEC
52445: ST_TO_ADDR
52446: LD_EXP 10
52450: PUSH
52451: FOR_TO
52452: IFFALSE 52486
// if side in mpTeams [ i ] then
52454: LD_VAR 0 6
52458: PUSH
52459: LD_EXP 10
52463: PUSH
52464: LD_VAR 0 3
52468: ARRAY
52469: IN
52470: IFFALSE 52484
// begin team := i ;
52472: LD_ADDR_VAR 0 5
52476: PUSH
52477: LD_VAR 0 3
52481: ST_TO_ADDR
// break ;
52482: GO 52486
// end ;
52484: GO 52451
52486: POP
52487: POP
// if not team then
52488: LD_VAR 0 5
52492: NOT
52493: IFFALSE 52497
// exit ;
52495: GO 52711
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52497: LD_EXP 33
52501: PPUSH
52502: LD_INT 81
52504: PUSH
52505: LD_VAR 0 6
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PPUSH
52514: CALL_OW 70
52518: IFFALSE 52522
// exit ;
52520: GO 52711
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52522: LD_ADDR_EXP 43
52526: PUSH
52527: LD_EXP 43
52531: PPUSH
52532: LD_VAR 0 5
52536: PPUSH
52537: LD_EXP 43
52541: PUSH
52542: LD_VAR 0 5
52546: ARRAY
52547: PUSH
52548: LD_INT 1
52550: PLUS
52551: PPUSH
52552: CALL_OW 1
52556: ST_TO_ADDR
// for i in mpTeams [ team ] do
52557: LD_ADDR_VAR 0 3
52561: PUSH
52562: LD_EXP 10
52566: PUSH
52567: LD_VAR 0 5
52571: ARRAY
52572: PUSH
52573: FOR_IN
52574: IFFALSE 52598
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52576: LD_VAR 0 3
52580: PPUSH
52581: LD_EXP 43
52585: PUSH
52586: LD_VAR 0 5
52590: ARRAY
52591: PPUSH
52592: CALL_OW 506
52596: GO 52573
52598: POP
52599: POP
// end else
52600: GO 52711
// begin first := depots [ 1 ] ;
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: LD_VAR 0 1
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: ST_TO_ADDR
// side := GetSide ( first ) ;
52616: LD_ADDR_VAR 0 6
52620: PUSH
52621: LD_VAR 0 4
52625: PPUSH
52626: CALL_OW 255
52630: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52631: LD_EXP 33
52635: PPUSH
52636: LD_INT 81
52638: PUSH
52639: LD_VAR 0 6
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PPUSH
52648: CALL_OW 70
52652: IFFALSE 52656
// exit ;
52654: GO 52711
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52656: LD_ADDR_EXP 43
52660: PUSH
52661: LD_EXP 43
52665: PPUSH
52666: LD_VAR 0 6
52670: PPUSH
52671: LD_EXP 43
52675: PUSH
52676: LD_VAR 0 6
52680: ARRAY
52681: PUSH
52682: LD_INT 1
52684: PLUS
52685: PPUSH
52686: CALL_OW 1
52690: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52691: LD_VAR 0 6
52695: PPUSH
52696: LD_EXP 43
52700: PUSH
52701: LD_VAR 0 6
52705: ARRAY
52706: PPUSH
52707: CALL_OW 506
// end ; end ;
52711: LD_VAR 0 2
52715: RET
// function UpdateCounter ; var i ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
// result := [ ] ;
52720: LD_ADDR_VAR 0 1
52724: PUSH
52725: EMPTY
52726: ST_TO_ADDR
// if mpTeamGame then
52727: LD_EXP 11
52731: IFFALSE 52798
// begin for i := 1 to mpTeams do
52733: LD_ADDR_VAR 0 2
52737: PUSH
52738: DOUBLE
52739: LD_INT 1
52741: DEC
52742: ST_TO_ADDR
52743: LD_EXP 10
52747: PUSH
52748: FOR_TO
52749: IFFALSE 52794
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52751: LD_ADDR_VAR 0 1
52755: PUSH
52756: LD_VAR 0 1
52760: PUSH
52761: LD_STRING #KingoftheHill-Team
52763: PUSH
52764: LD_VAR 0 2
52768: PUSH
52769: LD_EXP 43
52773: PUSH
52774: LD_VAR 0 2
52778: ARRAY
52779: PUSH
52780: LD_EXP 34
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: ADD
52791: ST_TO_ADDR
52792: GO 52748
52794: POP
52795: POP
// end else
52796: GO 52871
// begin for i := 1 to 8 do
52798: LD_ADDR_VAR 0 2
52802: PUSH
52803: DOUBLE
52804: LD_INT 1
52806: DEC
52807: ST_TO_ADDR
52808: LD_INT 8
52810: PUSH
52811: FOR_TO
52812: IFFALSE 52869
// if mpSidePositions [ i ] then
52814: LD_EXP 7
52818: PUSH
52819: LD_VAR 0 2
52823: ARRAY
52824: IFFALSE 52867
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52826: LD_ADDR_VAR 0 1
52830: PUSH
52831: LD_VAR 0 1
52835: PUSH
52836: LD_STRING #KingoftheHill-Player
52838: PUSH
52839: LD_VAR 0 2
52843: PUSH
52844: LD_EXP 43
52848: PUSH
52849: LD_VAR 0 2
52853: ARRAY
52854: PUSH
52855: LD_EXP 34
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: ADD
52866: ST_TO_ADDR
52867: GO 52811
52869: POP
52870: POP
// end ; mpDisplayStrings := result ;
52871: LD_ADDR_EXP 37
52875: PUSH
52876: LD_VAR 0 1
52880: ST_TO_ADDR
// end ;
52881: LD_VAR 0 1
52885: RET
// export function HowMuchPointsKing ( side ) ; begin
52886: LD_INT 0
52888: PPUSH
// result := HowMuchPoints ( side ) ;
52889: LD_ADDR_VAR 0 2
52893: PUSH
52894: LD_VAR 0 1
52898: PPUSH
52899: CALL 52909 0 1
52903: ST_TO_ADDR
// end ;
52904: LD_VAR 0 2
52908: RET
// function HowMuchPoints ( side ) ; var i ; begin
52909: LD_INT 0
52911: PPUSH
52912: PPUSH
// if mpTeamGame then
52913: LD_EXP 11
52917: IFFALSE 52986
// begin for i := 1 to Count ( mpTeams ) do
52919: LD_ADDR_VAR 0 3
52923: PUSH
52924: DOUBLE
52925: LD_INT 1
52927: DEC
52928: ST_TO_ADDR
52929: LD_EXP 10
52933: PPUSH
52934: CALL 5044 0 1
52938: PUSH
52939: FOR_TO
52940: IFFALSE 52982
// begin if side in mpTeams [ i ] then
52942: LD_VAR 0 1
52946: PUSH
52947: LD_EXP 10
52951: PUSH
52952: LD_VAR 0 3
52956: ARRAY
52957: IN
52958: IFFALSE 52980
// begin result := mpKingPoints [ i ] ;
52960: LD_ADDR_VAR 0 2
52964: PUSH
52965: LD_EXP 43
52969: PUSH
52970: LD_VAR 0 3
52974: ARRAY
52975: ST_TO_ADDR
// exit ;
52976: POP
52977: POP
52978: GO 53002
// end ; end ;
52980: GO 52939
52982: POP
52983: POP
// end else
52984: GO 53002
// result := mpKingPoints [ side ] ;
52986: LD_ADDR_VAR 0 2
52990: PUSH
52991: LD_EXP 43
52995: PUSH
52996: LD_VAR 0 1
53000: ARRAY
53001: ST_TO_ADDR
// end ;
53002: LD_VAR 0 2
53006: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53007: LD_EXP 38
53011: PUSH
53012: CALL 53334 0 0
53016: AND
53017: PUSH
53018: LD_OWVAR 4
53022: AND
53023: IFFALSE 53259
53025: GO 53027
53027: DISABLE
53028: LD_INT 0
53030: PPUSH
53031: PPUSH
// begin canWin := false ;
53032: LD_ADDR_VAR 0 2
53036: PUSH
53037: LD_INT 0
53039: ST_TO_ADDR
// if not HasPower ( your_side ) then
53040: LD_OWVAR 2
53044: PPUSH
53045: CALL 53374 0 1
53049: NOT
53050: IFFALSE 53061
// begin Multiplayer_Loose_Message ;
53052: CALL_OW 521
// enable ( mpLose ) ;
53056: LD_INT 102
53058: ENABLE_MARKED
// end else
53059: GO 53259
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53061: LD_ADDR_VAR 0 2
53065: PUSH
53066: LD_OWVAR 2
53070: PPUSH
53071: CALL 52909 0 1
53075: PUSH
53076: LD_EXP 34
53080: GREATEREQUAL
53081: PUSH
53082: LD_OWVAR 2
53086: PPUSH
53087: CALL 53374 0 1
53091: AND
53092: PUSH
53093: CALL 53262 0 0
53097: NOT
53098: OR
53099: ST_TO_ADDR
// for i := 1 to 8 do
53100: LD_ADDR_VAR 0 1
53104: PUSH
53105: DOUBLE
53106: LD_INT 1
53108: DEC
53109: ST_TO_ADDR
53110: LD_INT 8
53112: PUSH
53113: FOR_TO
53114: IFFALSE 53245
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53116: LD_EXP 7
53120: PUSH
53121: LD_VAR 0 1
53125: ARRAY
53126: PUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 108
53136: AND
53137: PUSH
53138: LD_VAR 0 1
53142: PUSH
53143: LD_OWVAR 2
53147: NONEQUAL
53148: AND
53149: IFFALSE 53243
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53151: LD_EXP 8
53155: PUSH
53156: LD_VAR 0 1
53160: ARRAY
53161: NOT
53162: PUSH
53163: LD_EXP 8
53167: PUSH
53168: LD_VAR 0 1
53172: ARRAY
53173: PUSH
53174: LD_EXP 8
53178: PUSH
53179: LD_OWVAR 2
53183: ARRAY
53184: NONEQUAL
53185: PUSH
53186: LD_OWVAR 2
53190: PPUSH
53191: LD_VAR 0 1
53195: PPUSH
53196: CALL_OW 81
53200: PUSH
53201: LD_INT 1
53203: NONEQUAL
53204: AND
53205: OR
53206: IFFALSE 53243
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL 52909 0 1
53217: PUSH
53218: LD_EXP 34
53222: GREATEREQUAL
53223: PUSH
53224: LD_VAR 0 1
53228: PPUSH
53229: CALL 53374 0 1
53233: AND
53234: IFFALSE 53243
// begin enable ( mpLose ) ;
53236: LD_INT 102
53238: ENABLE_MARKED
// exit ;
53239: POP
53240: POP
53241: GO 53259
// end ;
53243: GO 53113
53245: POP
53246: POP
// if canWin then
53247: LD_VAR 0 2
53251: IFFALSE 53258
// enable ( mpWin ) else
53253: LD_INT 101
53255: ENABLE_MARKED
53256: GO 53259
// enable ;
53258: ENABLE
// end ; end ;
53259: PPOPN 2
53261: END
// function EnemiesInGame ; var i ; begin
53262: LD_INT 0
53264: PPUSH
53265: PPUSH
// result := false ;
53266: LD_ADDR_VAR 0 1
53270: PUSH
53271: LD_INT 0
53273: ST_TO_ADDR
// for i := 1 to 8 do
53274: LD_ADDR_VAR 0 2
53278: PUSH
53279: DOUBLE
53280: LD_INT 1
53282: DEC
53283: ST_TO_ADDR
53284: LD_INT 8
53286: PUSH
53287: FOR_TO
53288: IFFALSE 53327
// if i <> your_side and HasPower ( i ) then
53290: LD_VAR 0 2
53294: PUSH
53295: LD_OWVAR 2
53299: NONEQUAL
53300: PUSH
53301: LD_VAR 0 2
53305: PPUSH
53306: CALL 53374 0 1
53310: AND
53311: IFFALSE 53325
// begin result := true ;
53313: LD_ADDR_VAR 0 1
53317: PUSH
53318: LD_INT 1
53320: ST_TO_ADDR
// exit ;
53321: POP
53322: POP
53323: GO 53329
// end ;
53325: GO 53287
53327: POP
53328: POP
// end ;
53329: LD_VAR 0 1
53333: RET
// function CanWinLoose ; begin
53334: LD_INT 0
53336: PPUSH
// result := true ;
53337: LD_ADDR_VAR 0 1
53341: PUSH
53342: LD_INT 1
53344: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53345: CALL_OW 531
53349: PUSH
53350: CALL_OW 519
53354: PUSH
53355: LD_INT 1
53357: GREATER
53358: AND
53359: IFFALSE 53369
// result := false ;
53361: LD_ADDR_VAR 0 1
53365: PUSH
53366: LD_INT 0
53368: ST_TO_ADDR
// end ;
53369: LD_VAR 0 1
53373: RET
// function HasPower ( i ) ; begin
53374: LD_INT 0
53376: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53377: LD_ADDR_VAR 0 2
53381: PUSH
53382: LD_INT 22
53384: PUSH
53385: LD_VAR 0 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 21
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 33
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 33
53419: PUSH
53420: LD_INT 5
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PPUSH
53437: CALL_OW 69
53441: ST_TO_ADDR
// end ; end_of_file end_of_file
53442: LD_VAR 0 2
53446: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53447: LD_VAR 0 1
53451: PPUSH
53452: LD_VAR 0 2
53456: PPUSH
53457: LD_VAR 0 3
53461: PPUSH
53462: LD_VAR 0 4
53466: PPUSH
53467: LD_VAR 0 5
53471: PPUSH
53472: LD_VAR 0 6
53476: PPUSH
53477: CALL 53678 0 6
// end ;
53481: PPOPN 6
53483: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53484: LD_INT 0
53486: PPUSH
// begin if not units then
53487: LD_VAR 0 1
53491: NOT
53492: IFFALSE 53496
// exit ;
53494: GO 53496
// end ;
53496: PPOPN 7
53498: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53499: CALL 53565 0 0
// end ; end_of_file
53503: PPOPN 1
53505: END
// export globalGameSaveCounter ; every 0 0$1 do
53506: GO 53508
53508: DISABLE
// begin enable ;
53509: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53510: LD_STRING updateTimer(
53512: PUSH
53513: LD_OWVAR 1
53517: STR
53518: PUSH
53519: LD_STRING );
53521: STR
53522: PPUSH
53523: CALL_OW 559
// end ;
53527: END
// every 0 0$1 do
53528: GO 53530
53530: DISABLE
// begin globalGameSaveCounter := 0 ;
53531: LD_ADDR_EXP 44
53535: PUSH
53536: LD_INT 0
53538: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53539: LD_STRING setGameSaveCounter(0)
53541: PPUSH
53542: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53546: LD_STRING initStreamRollete();
53548: PPUSH
53549: CALL_OW 559
// InitStreamMode ;
53553: CALL 54896 0 0
// DefineStreamItems ( false ) ;
53557: LD_INT 0
53559: PPUSH
53560: CALL 55360 0 1
// end ;
53564: END
// export function SOS_MapStart ( ) ; begin
53565: LD_INT 0
53567: PPUSH
// if streamModeActive then
53568: LD_EXP 45
53572: IFFALSE 53581
// DefineStreamItems ( true ) ;
53574: LD_INT 1
53576: PPUSH
53577: CALL 55360 0 1
// UpdateLuaVariables ( ) ;
53581: CALL 53598 0 0
// UpdateFactoryWaypoints ( ) ;
53585: CALL 68229 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53589: CALL 68486 0 0
// end ;
53593: LD_VAR 0 1
53597: RET
// function UpdateLuaVariables ( ) ; begin
53598: LD_INT 0
53600: PPUSH
// if globalGameSaveCounter then
53601: LD_EXP 44
53605: IFFALSE 53639
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53607: LD_ADDR_EXP 44
53611: PUSH
53612: LD_EXP 44
53616: PPUSH
53617: CALL 41994 0 1
53621: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53622: LD_STRING setGameSaveCounter(
53624: PUSH
53625: LD_EXP 44
53629: STR
53630: PUSH
53631: LD_STRING )
53633: STR
53634: PPUSH
53635: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53639: LD_STRING setGameDifficulty(
53641: PUSH
53642: LD_OWVAR 67
53646: STR
53647: PUSH
53648: LD_STRING )
53650: STR
53651: PPUSH
53652: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53656: LD_STRING displayDifficulty(
53658: PUSH
53659: LD_OWVAR 67
53663: STR
53664: PUSH
53665: LD_STRING )
53667: STR
53668: PPUSH
53669: CALL_OW 559
// end ;
53673: LD_VAR 0 1
53677: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53678: LD_INT 0
53680: PPUSH
// if p2 = stream_mode then
53681: LD_VAR 0 2
53685: PUSH
53686: LD_INT 100
53688: EQUAL
53689: IFFALSE 54692
// begin if not StreamModeActive then
53691: LD_EXP 45
53695: NOT
53696: IFFALSE 53706
// StreamModeActive := true ;
53698: LD_ADDR_EXP 45
53702: PUSH
53703: LD_INT 1
53705: ST_TO_ADDR
// if p3 = 0 then
53706: LD_VAR 0 3
53710: PUSH
53711: LD_INT 0
53713: EQUAL
53714: IFFALSE 53720
// InitStreamMode ;
53716: CALL 54896 0 0
// if p3 = 1 then
53720: LD_VAR 0 3
53724: PUSH
53725: LD_INT 1
53727: EQUAL
53728: IFFALSE 53738
// sRocket := true ;
53730: LD_ADDR_EXP 50
53734: PUSH
53735: LD_INT 1
53737: ST_TO_ADDR
// if p3 = 2 then
53738: LD_VAR 0 3
53742: PUSH
53743: LD_INT 2
53745: EQUAL
53746: IFFALSE 53756
// sSpeed := true ;
53748: LD_ADDR_EXP 49
53752: PUSH
53753: LD_INT 1
53755: ST_TO_ADDR
// if p3 = 3 then
53756: LD_VAR 0 3
53760: PUSH
53761: LD_INT 3
53763: EQUAL
53764: IFFALSE 53774
// sEngine := true ;
53766: LD_ADDR_EXP 51
53770: PUSH
53771: LD_INT 1
53773: ST_TO_ADDR
// if p3 = 4 then
53774: LD_VAR 0 3
53778: PUSH
53779: LD_INT 4
53781: EQUAL
53782: IFFALSE 53792
// sSpec := true ;
53784: LD_ADDR_EXP 48
53788: PUSH
53789: LD_INT 1
53791: ST_TO_ADDR
// if p3 = 5 then
53792: LD_VAR 0 3
53796: PUSH
53797: LD_INT 5
53799: EQUAL
53800: IFFALSE 53810
// sLevel := true ;
53802: LD_ADDR_EXP 52
53806: PUSH
53807: LD_INT 1
53809: ST_TO_ADDR
// if p3 = 6 then
53810: LD_VAR 0 3
53814: PUSH
53815: LD_INT 6
53817: EQUAL
53818: IFFALSE 53828
// sArmoury := true ;
53820: LD_ADDR_EXP 53
53824: PUSH
53825: LD_INT 1
53827: ST_TO_ADDR
// if p3 = 7 then
53828: LD_VAR 0 3
53832: PUSH
53833: LD_INT 7
53835: EQUAL
53836: IFFALSE 53846
// sRadar := true ;
53838: LD_ADDR_EXP 54
53842: PUSH
53843: LD_INT 1
53845: ST_TO_ADDR
// if p3 = 8 then
53846: LD_VAR 0 3
53850: PUSH
53851: LD_INT 8
53853: EQUAL
53854: IFFALSE 53864
// sBunker := true ;
53856: LD_ADDR_EXP 55
53860: PUSH
53861: LD_INT 1
53863: ST_TO_ADDR
// if p3 = 9 then
53864: LD_VAR 0 3
53868: PUSH
53869: LD_INT 9
53871: EQUAL
53872: IFFALSE 53882
// sHack := true ;
53874: LD_ADDR_EXP 56
53878: PUSH
53879: LD_INT 1
53881: ST_TO_ADDR
// if p3 = 10 then
53882: LD_VAR 0 3
53886: PUSH
53887: LD_INT 10
53889: EQUAL
53890: IFFALSE 53900
// sFire := true ;
53892: LD_ADDR_EXP 57
53896: PUSH
53897: LD_INT 1
53899: ST_TO_ADDR
// if p3 = 11 then
53900: LD_VAR 0 3
53904: PUSH
53905: LD_INT 11
53907: EQUAL
53908: IFFALSE 53918
// sRefresh := true ;
53910: LD_ADDR_EXP 58
53914: PUSH
53915: LD_INT 1
53917: ST_TO_ADDR
// if p3 = 12 then
53918: LD_VAR 0 3
53922: PUSH
53923: LD_INT 12
53925: EQUAL
53926: IFFALSE 53936
// sExp := true ;
53928: LD_ADDR_EXP 59
53932: PUSH
53933: LD_INT 1
53935: ST_TO_ADDR
// if p3 = 13 then
53936: LD_VAR 0 3
53940: PUSH
53941: LD_INT 13
53943: EQUAL
53944: IFFALSE 53954
// sDepot := true ;
53946: LD_ADDR_EXP 60
53950: PUSH
53951: LD_INT 1
53953: ST_TO_ADDR
// if p3 = 14 then
53954: LD_VAR 0 3
53958: PUSH
53959: LD_INT 14
53961: EQUAL
53962: IFFALSE 53972
// sFlag := true ;
53964: LD_ADDR_EXP 61
53968: PUSH
53969: LD_INT 1
53971: ST_TO_ADDR
// if p3 = 15 then
53972: LD_VAR 0 3
53976: PUSH
53977: LD_INT 15
53979: EQUAL
53980: IFFALSE 53990
// sKamikadze := true ;
53982: LD_ADDR_EXP 69
53986: PUSH
53987: LD_INT 1
53989: ST_TO_ADDR
// if p3 = 16 then
53990: LD_VAR 0 3
53994: PUSH
53995: LD_INT 16
53997: EQUAL
53998: IFFALSE 54008
// sTroll := true ;
54000: LD_ADDR_EXP 70
54004: PUSH
54005: LD_INT 1
54007: ST_TO_ADDR
// if p3 = 17 then
54008: LD_VAR 0 3
54012: PUSH
54013: LD_INT 17
54015: EQUAL
54016: IFFALSE 54026
// sSlow := true ;
54018: LD_ADDR_EXP 71
54022: PUSH
54023: LD_INT 1
54025: ST_TO_ADDR
// if p3 = 18 then
54026: LD_VAR 0 3
54030: PUSH
54031: LD_INT 18
54033: EQUAL
54034: IFFALSE 54044
// sLack := true ;
54036: LD_ADDR_EXP 72
54040: PUSH
54041: LD_INT 1
54043: ST_TO_ADDR
// if p3 = 19 then
54044: LD_VAR 0 3
54048: PUSH
54049: LD_INT 19
54051: EQUAL
54052: IFFALSE 54062
// sTank := true ;
54054: LD_ADDR_EXP 74
54058: PUSH
54059: LD_INT 1
54061: ST_TO_ADDR
// if p3 = 20 then
54062: LD_VAR 0 3
54066: PUSH
54067: LD_INT 20
54069: EQUAL
54070: IFFALSE 54080
// sRemote := true ;
54072: LD_ADDR_EXP 75
54076: PUSH
54077: LD_INT 1
54079: ST_TO_ADDR
// if p3 = 21 then
54080: LD_VAR 0 3
54084: PUSH
54085: LD_INT 21
54087: EQUAL
54088: IFFALSE 54098
// sPowell := true ;
54090: LD_ADDR_EXP 76
54094: PUSH
54095: LD_INT 1
54097: ST_TO_ADDR
// if p3 = 22 then
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 22
54105: EQUAL
54106: IFFALSE 54116
// sTeleport := true ;
54108: LD_ADDR_EXP 79
54112: PUSH
54113: LD_INT 1
54115: ST_TO_ADDR
// if p3 = 23 then
54116: LD_VAR 0 3
54120: PUSH
54121: LD_INT 23
54123: EQUAL
54124: IFFALSE 54134
// sOilTower := true ;
54126: LD_ADDR_EXP 81
54130: PUSH
54131: LD_INT 1
54133: ST_TO_ADDR
// if p3 = 24 then
54134: LD_VAR 0 3
54138: PUSH
54139: LD_INT 24
54141: EQUAL
54142: IFFALSE 54152
// sShovel := true ;
54144: LD_ADDR_EXP 82
54148: PUSH
54149: LD_INT 1
54151: ST_TO_ADDR
// if p3 = 25 then
54152: LD_VAR 0 3
54156: PUSH
54157: LD_INT 25
54159: EQUAL
54160: IFFALSE 54170
// sSheik := true ;
54162: LD_ADDR_EXP 83
54166: PUSH
54167: LD_INT 1
54169: ST_TO_ADDR
// if p3 = 26 then
54170: LD_VAR 0 3
54174: PUSH
54175: LD_INT 26
54177: EQUAL
54178: IFFALSE 54188
// sEarthquake := true ;
54180: LD_ADDR_EXP 85
54184: PUSH
54185: LD_INT 1
54187: ST_TO_ADDR
// if p3 = 27 then
54188: LD_VAR 0 3
54192: PUSH
54193: LD_INT 27
54195: EQUAL
54196: IFFALSE 54206
// sAI := true ;
54198: LD_ADDR_EXP 86
54202: PUSH
54203: LD_INT 1
54205: ST_TO_ADDR
// if p3 = 28 then
54206: LD_VAR 0 3
54210: PUSH
54211: LD_INT 28
54213: EQUAL
54214: IFFALSE 54224
// sCargo := true ;
54216: LD_ADDR_EXP 89
54220: PUSH
54221: LD_INT 1
54223: ST_TO_ADDR
// if p3 = 29 then
54224: LD_VAR 0 3
54228: PUSH
54229: LD_INT 29
54231: EQUAL
54232: IFFALSE 54242
// sDLaser := true ;
54234: LD_ADDR_EXP 90
54238: PUSH
54239: LD_INT 1
54241: ST_TO_ADDR
// if p3 = 30 then
54242: LD_VAR 0 3
54246: PUSH
54247: LD_INT 30
54249: EQUAL
54250: IFFALSE 54260
// sExchange := true ;
54252: LD_ADDR_EXP 91
54256: PUSH
54257: LD_INT 1
54259: ST_TO_ADDR
// if p3 = 31 then
54260: LD_VAR 0 3
54264: PUSH
54265: LD_INT 31
54267: EQUAL
54268: IFFALSE 54278
// sFac := true ;
54270: LD_ADDR_EXP 92
54274: PUSH
54275: LD_INT 1
54277: ST_TO_ADDR
// if p3 = 32 then
54278: LD_VAR 0 3
54282: PUSH
54283: LD_INT 32
54285: EQUAL
54286: IFFALSE 54296
// sPower := true ;
54288: LD_ADDR_EXP 93
54292: PUSH
54293: LD_INT 1
54295: ST_TO_ADDR
// if p3 = 33 then
54296: LD_VAR 0 3
54300: PUSH
54301: LD_INT 33
54303: EQUAL
54304: IFFALSE 54314
// sRandom := true ;
54306: LD_ADDR_EXP 94
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// if p3 = 34 then
54314: LD_VAR 0 3
54318: PUSH
54319: LD_INT 34
54321: EQUAL
54322: IFFALSE 54332
// sShield := true ;
54324: LD_ADDR_EXP 95
54328: PUSH
54329: LD_INT 1
54331: ST_TO_ADDR
// if p3 = 35 then
54332: LD_VAR 0 3
54336: PUSH
54337: LD_INT 35
54339: EQUAL
54340: IFFALSE 54350
// sTime := true ;
54342: LD_ADDR_EXP 96
54346: PUSH
54347: LD_INT 1
54349: ST_TO_ADDR
// if p3 = 36 then
54350: LD_VAR 0 3
54354: PUSH
54355: LD_INT 36
54357: EQUAL
54358: IFFALSE 54368
// sTools := true ;
54360: LD_ADDR_EXP 97
54364: PUSH
54365: LD_INT 1
54367: ST_TO_ADDR
// if p3 = 101 then
54368: LD_VAR 0 3
54372: PUSH
54373: LD_INT 101
54375: EQUAL
54376: IFFALSE 54386
// sSold := true ;
54378: LD_ADDR_EXP 62
54382: PUSH
54383: LD_INT 1
54385: ST_TO_ADDR
// if p3 = 102 then
54386: LD_VAR 0 3
54390: PUSH
54391: LD_INT 102
54393: EQUAL
54394: IFFALSE 54404
// sDiff := true ;
54396: LD_ADDR_EXP 63
54400: PUSH
54401: LD_INT 1
54403: ST_TO_ADDR
// if p3 = 103 then
54404: LD_VAR 0 3
54408: PUSH
54409: LD_INT 103
54411: EQUAL
54412: IFFALSE 54422
// sFog := true ;
54414: LD_ADDR_EXP 66
54418: PUSH
54419: LD_INT 1
54421: ST_TO_ADDR
// if p3 = 104 then
54422: LD_VAR 0 3
54426: PUSH
54427: LD_INT 104
54429: EQUAL
54430: IFFALSE 54440
// sReset := true ;
54432: LD_ADDR_EXP 67
54436: PUSH
54437: LD_INT 1
54439: ST_TO_ADDR
// if p3 = 105 then
54440: LD_VAR 0 3
54444: PUSH
54445: LD_INT 105
54447: EQUAL
54448: IFFALSE 54458
// sSun := true ;
54450: LD_ADDR_EXP 68
54454: PUSH
54455: LD_INT 1
54457: ST_TO_ADDR
// if p3 = 106 then
54458: LD_VAR 0 3
54462: PUSH
54463: LD_INT 106
54465: EQUAL
54466: IFFALSE 54476
// sTiger := true ;
54468: LD_ADDR_EXP 64
54472: PUSH
54473: LD_INT 1
54475: ST_TO_ADDR
// if p3 = 107 then
54476: LD_VAR 0 3
54480: PUSH
54481: LD_INT 107
54483: EQUAL
54484: IFFALSE 54494
// sBomb := true ;
54486: LD_ADDR_EXP 65
54490: PUSH
54491: LD_INT 1
54493: ST_TO_ADDR
// if p3 = 108 then
54494: LD_VAR 0 3
54498: PUSH
54499: LD_INT 108
54501: EQUAL
54502: IFFALSE 54512
// sWound := true ;
54504: LD_ADDR_EXP 73
54508: PUSH
54509: LD_INT 1
54511: ST_TO_ADDR
// if p3 = 109 then
54512: LD_VAR 0 3
54516: PUSH
54517: LD_INT 109
54519: EQUAL
54520: IFFALSE 54530
// sBetray := true ;
54522: LD_ADDR_EXP 77
54526: PUSH
54527: LD_INT 1
54529: ST_TO_ADDR
// if p3 = 110 then
54530: LD_VAR 0 3
54534: PUSH
54535: LD_INT 110
54537: EQUAL
54538: IFFALSE 54548
// sContamin := true ;
54540: LD_ADDR_EXP 78
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// if p3 = 111 then
54548: LD_VAR 0 3
54552: PUSH
54553: LD_INT 111
54555: EQUAL
54556: IFFALSE 54566
// sOil := true ;
54558: LD_ADDR_EXP 80
54562: PUSH
54563: LD_INT 1
54565: ST_TO_ADDR
// if p3 = 112 then
54566: LD_VAR 0 3
54570: PUSH
54571: LD_INT 112
54573: EQUAL
54574: IFFALSE 54584
// sStu := true ;
54576: LD_ADDR_EXP 84
54580: PUSH
54581: LD_INT 1
54583: ST_TO_ADDR
// if p3 = 113 then
54584: LD_VAR 0 3
54588: PUSH
54589: LD_INT 113
54591: EQUAL
54592: IFFALSE 54602
// sBazooka := true ;
54594: LD_ADDR_EXP 87
54598: PUSH
54599: LD_INT 1
54601: ST_TO_ADDR
// if p3 = 114 then
54602: LD_VAR 0 3
54606: PUSH
54607: LD_INT 114
54609: EQUAL
54610: IFFALSE 54620
// sMortar := true ;
54612: LD_ADDR_EXP 88
54616: PUSH
54617: LD_INT 1
54619: ST_TO_ADDR
// if p3 = 115 then
54620: LD_VAR 0 3
54624: PUSH
54625: LD_INT 115
54627: EQUAL
54628: IFFALSE 54638
// sRanger := true ;
54630: LD_ADDR_EXP 98
54634: PUSH
54635: LD_INT 1
54637: ST_TO_ADDR
// if p3 = 116 then
54638: LD_VAR 0 3
54642: PUSH
54643: LD_INT 116
54645: EQUAL
54646: IFFALSE 54656
// sComputer := true ;
54648: LD_ADDR_EXP 99
54652: PUSH
54653: LD_INT 1
54655: ST_TO_ADDR
// if p3 = 117 then
54656: LD_VAR 0 3
54660: PUSH
54661: LD_INT 117
54663: EQUAL
54664: IFFALSE 54674
// s30 := true ;
54666: LD_ADDR_EXP 100
54670: PUSH
54671: LD_INT 1
54673: ST_TO_ADDR
// if p3 = 118 then
54674: LD_VAR 0 3
54678: PUSH
54679: LD_INT 118
54681: EQUAL
54682: IFFALSE 54692
// s60 := true ;
54684: LD_ADDR_EXP 101
54688: PUSH
54689: LD_INT 1
54691: ST_TO_ADDR
// end ; if p2 = hack_mode then
54692: LD_VAR 0 2
54696: PUSH
54697: LD_INT 101
54699: EQUAL
54700: IFFALSE 54828
// begin case p3 of 1 :
54702: LD_VAR 0 3
54706: PUSH
54707: LD_INT 1
54709: DOUBLE
54710: EQUAL
54711: IFTRUE 54715
54713: GO 54722
54715: POP
// hHackUnlimitedResources ; 2 :
54716: CALL 66975 0 0
54720: GO 54828
54722: LD_INT 2
54724: DOUBLE
54725: EQUAL
54726: IFTRUE 54730
54728: GO 54737
54730: POP
// hHackSetLevel10 ; 3 :
54731: CALL 67108 0 0
54735: GO 54828
54737: LD_INT 3
54739: DOUBLE
54740: EQUAL
54741: IFTRUE 54745
54743: GO 54752
54745: POP
// hHackSetLevel10YourUnits ; 4 :
54746: CALL 67193 0 0
54750: GO 54828
54752: LD_INT 4
54754: DOUBLE
54755: EQUAL
54756: IFTRUE 54760
54758: GO 54767
54760: POP
// hHackInvincible ; 5 :
54761: CALL 67641 0 0
54765: GO 54828
54767: LD_INT 5
54769: DOUBLE
54770: EQUAL
54771: IFTRUE 54775
54773: GO 54782
54775: POP
// hHackInvisible ; 6 :
54776: CALL 67752 0 0
54780: GO 54828
54782: LD_INT 6
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54797
54790: POP
// hHackChangeYourSide ; 7 :
54791: CALL 67809 0 0
54795: GO 54828
54797: LD_INT 7
54799: DOUBLE
54800: EQUAL
54801: IFTRUE 54805
54803: GO 54812
54805: POP
// hHackChangeUnitSide ; 8 :
54806: CALL 67851 0 0
54810: GO 54828
54812: LD_INT 8
54814: DOUBLE
54815: EQUAL
54816: IFTRUE 54820
54818: GO 54827
54820: POP
// hHackFog ; end ;
54821: CALL 67952 0 0
54825: GO 54828
54827: POP
// end ; if p2 = game_save_mode then
54828: LD_VAR 0 2
54832: PUSH
54833: LD_INT 102
54835: EQUAL
54836: IFFALSE 54891
// begin if p3 = 1 then
54838: LD_VAR 0 3
54842: PUSH
54843: LD_INT 1
54845: EQUAL
54846: IFFALSE 54858
// globalGameSaveCounter := p4 ;
54848: LD_ADDR_EXP 44
54852: PUSH
54853: LD_VAR 0 4
54857: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54858: LD_VAR 0 3
54862: PUSH
54863: LD_INT 2
54865: EQUAL
54866: PUSH
54867: LD_EXP 44
54871: AND
54872: IFFALSE 54891
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54874: LD_STRING setGameSaveCounter(
54876: PUSH
54877: LD_EXP 44
54881: STR
54882: PUSH
54883: LD_STRING )
54885: STR
54886: PPUSH
54887: CALL_OW 559
// end ; end ;
54891: LD_VAR 0 7
54895: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54896: LD_INT 0
54898: PPUSH
// streamModeActive := false ;
54899: LD_ADDR_EXP 45
54903: PUSH
54904: LD_INT 0
54906: ST_TO_ADDR
// normalCounter := 36 ;
54907: LD_ADDR_EXP 46
54911: PUSH
54912: LD_INT 36
54914: ST_TO_ADDR
// hardcoreCounter := 18 ;
54915: LD_ADDR_EXP 47
54919: PUSH
54920: LD_INT 18
54922: ST_TO_ADDR
// sRocket := false ;
54923: LD_ADDR_EXP 50
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// sSpeed := false ;
54931: LD_ADDR_EXP 49
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// sEngine := false ;
54939: LD_ADDR_EXP 51
54943: PUSH
54944: LD_INT 0
54946: ST_TO_ADDR
// sSpec := false ;
54947: LD_ADDR_EXP 48
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// sLevel := false ;
54955: LD_ADDR_EXP 52
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// sArmoury := false ;
54963: LD_ADDR_EXP 53
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// sRadar := false ;
54971: LD_ADDR_EXP 54
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// sBunker := false ;
54979: LD_ADDR_EXP 55
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// sHack := false ;
54987: LD_ADDR_EXP 56
54991: PUSH
54992: LD_INT 0
54994: ST_TO_ADDR
// sFire := false ;
54995: LD_ADDR_EXP 57
54999: PUSH
55000: LD_INT 0
55002: ST_TO_ADDR
// sRefresh := false ;
55003: LD_ADDR_EXP 58
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
// sExp := false ;
55011: LD_ADDR_EXP 59
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// sDepot := false ;
55019: LD_ADDR_EXP 60
55023: PUSH
55024: LD_INT 0
55026: ST_TO_ADDR
// sFlag := false ;
55027: LD_ADDR_EXP 61
55031: PUSH
55032: LD_INT 0
55034: ST_TO_ADDR
// sKamikadze := false ;
55035: LD_ADDR_EXP 69
55039: PUSH
55040: LD_INT 0
55042: ST_TO_ADDR
// sTroll := false ;
55043: LD_ADDR_EXP 70
55047: PUSH
55048: LD_INT 0
55050: ST_TO_ADDR
// sSlow := false ;
55051: LD_ADDR_EXP 71
55055: PUSH
55056: LD_INT 0
55058: ST_TO_ADDR
// sLack := false ;
55059: LD_ADDR_EXP 72
55063: PUSH
55064: LD_INT 0
55066: ST_TO_ADDR
// sTank := false ;
55067: LD_ADDR_EXP 74
55071: PUSH
55072: LD_INT 0
55074: ST_TO_ADDR
// sRemote := false ;
55075: LD_ADDR_EXP 75
55079: PUSH
55080: LD_INT 0
55082: ST_TO_ADDR
// sPowell := false ;
55083: LD_ADDR_EXP 76
55087: PUSH
55088: LD_INT 0
55090: ST_TO_ADDR
// sTeleport := false ;
55091: LD_ADDR_EXP 79
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
// sOilTower := false ;
55099: LD_ADDR_EXP 81
55103: PUSH
55104: LD_INT 0
55106: ST_TO_ADDR
// sShovel := false ;
55107: LD_ADDR_EXP 82
55111: PUSH
55112: LD_INT 0
55114: ST_TO_ADDR
// sSheik := false ;
55115: LD_ADDR_EXP 83
55119: PUSH
55120: LD_INT 0
55122: ST_TO_ADDR
// sEarthquake := false ;
55123: LD_ADDR_EXP 85
55127: PUSH
55128: LD_INT 0
55130: ST_TO_ADDR
// sAI := false ;
55131: LD_ADDR_EXP 86
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
// sCargo := false ;
55139: LD_ADDR_EXP 89
55143: PUSH
55144: LD_INT 0
55146: ST_TO_ADDR
// sDLaser := false ;
55147: LD_ADDR_EXP 90
55151: PUSH
55152: LD_INT 0
55154: ST_TO_ADDR
// sExchange := false ;
55155: LD_ADDR_EXP 91
55159: PUSH
55160: LD_INT 0
55162: ST_TO_ADDR
// sFac := false ;
55163: LD_ADDR_EXP 92
55167: PUSH
55168: LD_INT 0
55170: ST_TO_ADDR
// sPower := false ;
55171: LD_ADDR_EXP 93
55175: PUSH
55176: LD_INT 0
55178: ST_TO_ADDR
// sRandom := false ;
55179: LD_ADDR_EXP 94
55183: PUSH
55184: LD_INT 0
55186: ST_TO_ADDR
// sShield := false ;
55187: LD_ADDR_EXP 95
55191: PUSH
55192: LD_INT 0
55194: ST_TO_ADDR
// sTime := false ;
55195: LD_ADDR_EXP 96
55199: PUSH
55200: LD_INT 0
55202: ST_TO_ADDR
// sTools := false ;
55203: LD_ADDR_EXP 97
55207: PUSH
55208: LD_INT 0
55210: ST_TO_ADDR
// sSold := false ;
55211: LD_ADDR_EXP 62
55215: PUSH
55216: LD_INT 0
55218: ST_TO_ADDR
// sDiff := false ;
55219: LD_ADDR_EXP 63
55223: PUSH
55224: LD_INT 0
55226: ST_TO_ADDR
// sFog := false ;
55227: LD_ADDR_EXP 66
55231: PUSH
55232: LD_INT 0
55234: ST_TO_ADDR
// sReset := false ;
55235: LD_ADDR_EXP 67
55239: PUSH
55240: LD_INT 0
55242: ST_TO_ADDR
// sSun := false ;
55243: LD_ADDR_EXP 68
55247: PUSH
55248: LD_INT 0
55250: ST_TO_ADDR
// sTiger := false ;
55251: LD_ADDR_EXP 64
55255: PUSH
55256: LD_INT 0
55258: ST_TO_ADDR
// sBomb := false ;
55259: LD_ADDR_EXP 65
55263: PUSH
55264: LD_INT 0
55266: ST_TO_ADDR
// sWound := false ;
55267: LD_ADDR_EXP 73
55271: PUSH
55272: LD_INT 0
55274: ST_TO_ADDR
// sBetray := false ;
55275: LD_ADDR_EXP 77
55279: PUSH
55280: LD_INT 0
55282: ST_TO_ADDR
// sContamin := false ;
55283: LD_ADDR_EXP 78
55287: PUSH
55288: LD_INT 0
55290: ST_TO_ADDR
// sOil := false ;
55291: LD_ADDR_EXP 80
55295: PUSH
55296: LD_INT 0
55298: ST_TO_ADDR
// sStu := false ;
55299: LD_ADDR_EXP 84
55303: PUSH
55304: LD_INT 0
55306: ST_TO_ADDR
// sBazooka := false ;
55307: LD_ADDR_EXP 87
55311: PUSH
55312: LD_INT 0
55314: ST_TO_ADDR
// sMortar := false ;
55315: LD_ADDR_EXP 88
55319: PUSH
55320: LD_INT 0
55322: ST_TO_ADDR
// sRanger := false ;
55323: LD_ADDR_EXP 98
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// sComputer := false ;
55331: LD_ADDR_EXP 99
55335: PUSH
55336: LD_INT 0
55338: ST_TO_ADDR
// s30 := false ;
55339: LD_ADDR_EXP 100
55343: PUSH
55344: LD_INT 0
55346: ST_TO_ADDR
// s60 := false ;
55347: LD_ADDR_EXP 101
55351: PUSH
55352: LD_INT 0
55354: ST_TO_ADDR
// end ;
55355: LD_VAR 0 1
55359: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55360: LD_INT 0
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
// result := [ ] ;
55369: LD_ADDR_VAR 0 2
55373: PUSH
55374: EMPTY
55375: ST_TO_ADDR
// if campaign_id = 1 then
55376: LD_OWVAR 69
55380: PUSH
55381: LD_INT 1
55383: EQUAL
55384: IFFALSE 58550
// begin case mission_number of 1 :
55386: LD_OWVAR 70
55390: PUSH
55391: LD_INT 1
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55399
55397: GO 55475
55399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55400: LD_ADDR_VAR 0 2
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: LD_INT 11
55413: PUSH
55414: LD_INT 12
55416: PUSH
55417: LD_INT 15
55419: PUSH
55420: LD_INT 16
55422: PUSH
55423: LD_INT 22
55425: PUSH
55426: LD_INT 23
55428: PUSH
55429: LD_INT 26
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 101
55445: PUSH
55446: LD_INT 102
55448: PUSH
55449: LD_INT 106
55451: PUSH
55452: LD_INT 116
55454: PUSH
55455: LD_INT 117
55457: PUSH
55458: LD_INT 118
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: ST_TO_ADDR
55473: GO 58548
55475: LD_INT 2
55477: DOUBLE
55478: EQUAL
55479: IFTRUE 55483
55481: GO 55567
55483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55484: LD_ADDR_VAR 0 2
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: LD_INT 11
55497: PUSH
55498: LD_INT 12
55500: PUSH
55501: LD_INT 15
55503: PUSH
55504: LD_INT 16
55506: PUSH
55507: LD_INT 22
55509: PUSH
55510: LD_INT 23
55512: PUSH
55513: LD_INT 26
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 101
55529: PUSH
55530: LD_INT 102
55532: PUSH
55533: LD_INT 105
55535: PUSH
55536: LD_INT 106
55538: PUSH
55539: LD_INT 108
55541: PUSH
55542: LD_INT 116
55544: PUSH
55545: LD_INT 117
55547: PUSH
55548: LD_INT 118
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: ST_TO_ADDR
55565: GO 58548
55567: LD_INT 3
55569: DOUBLE
55570: EQUAL
55571: IFTRUE 55575
55573: GO 55663
55575: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55576: LD_ADDR_VAR 0 2
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 4
55586: PUSH
55587: LD_INT 5
55589: PUSH
55590: LD_INT 11
55592: PUSH
55593: LD_INT 12
55595: PUSH
55596: LD_INT 15
55598: PUSH
55599: LD_INT 16
55601: PUSH
55602: LD_INT 22
55604: PUSH
55605: LD_INT 26
55607: PUSH
55608: LD_INT 36
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 101
55625: PUSH
55626: LD_INT 102
55628: PUSH
55629: LD_INT 105
55631: PUSH
55632: LD_INT 106
55634: PUSH
55635: LD_INT 108
55637: PUSH
55638: LD_INT 116
55640: PUSH
55641: LD_INT 117
55643: PUSH
55644: LD_INT 118
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: ST_TO_ADDR
55661: GO 58548
55663: LD_INT 4
55665: DOUBLE
55666: EQUAL
55667: IFTRUE 55671
55669: GO 55767
55671: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55672: LD_ADDR_VAR 0 2
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: LD_INT 5
55685: PUSH
55686: LD_INT 8
55688: PUSH
55689: LD_INT 11
55691: PUSH
55692: LD_INT 12
55694: PUSH
55695: LD_INT 15
55697: PUSH
55698: LD_INT 16
55700: PUSH
55701: LD_INT 22
55703: PUSH
55704: LD_INT 23
55706: PUSH
55707: LD_INT 26
55709: PUSH
55710: LD_INT 36
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 101
55729: PUSH
55730: LD_INT 102
55732: PUSH
55733: LD_INT 105
55735: PUSH
55736: LD_INT 106
55738: PUSH
55739: LD_INT 108
55741: PUSH
55742: LD_INT 116
55744: PUSH
55745: LD_INT 117
55747: PUSH
55748: LD_INT 118
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: ST_TO_ADDR
55765: GO 58548
55767: LD_INT 5
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55775
55773: GO 55887
55775: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55776: LD_ADDR_VAR 0 2
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 4
55786: PUSH
55787: LD_INT 5
55789: PUSH
55790: LD_INT 6
55792: PUSH
55793: LD_INT 8
55795: PUSH
55796: LD_INT 11
55798: PUSH
55799: LD_INT 12
55801: PUSH
55802: LD_INT 15
55804: PUSH
55805: LD_INT 16
55807: PUSH
55808: LD_INT 22
55810: PUSH
55811: LD_INT 23
55813: PUSH
55814: LD_INT 25
55816: PUSH
55817: LD_INT 26
55819: PUSH
55820: LD_INT 36
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 101
55841: PUSH
55842: LD_INT 102
55844: PUSH
55845: LD_INT 105
55847: PUSH
55848: LD_INT 106
55850: PUSH
55851: LD_INT 108
55853: PUSH
55854: LD_INT 109
55856: PUSH
55857: LD_INT 112
55859: PUSH
55860: LD_INT 116
55862: PUSH
55863: LD_INT 117
55865: PUSH
55866: LD_INT 118
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: ST_TO_ADDR
55885: GO 58548
55887: LD_INT 6
55889: DOUBLE
55890: EQUAL
55891: IFTRUE 55895
55893: GO 56027
55895: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 5
55909: PUSH
55910: LD_INT 6
55912: PUSH
55913: LD_INT 8
55915: PUSH
55916: LD_INT 11
55918: PUSH
55919: LD_INT 12
55921: PUSH
55922: LD_INT 15
55924: PUSH
55925: LD_INT 16
55927: PUSH
55928: LD_INT 20
55930: PUSH
55931: LD_INT 21
55933: PUSH
55934: LD_INT 22
55936: PUSH
55937: LD_INT 23
55939: PUSH
55940: LD_INT 25
55942: PUSH
55943: LD_INT 26
55945: PUSH
55946: LD_INT 30
55948: PUSH
55949: LD_INT 31
55951: PUSH
55952: LD_INT 32
55954: PUSH
55955: LD_INT 36
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 101
55981: PUSH
55982: LD_INT 102
55984: PUSH
55985: LD_INT 105
55987: PUSH
55988: LD_INT 106
55990: PUSH
55991: LD_INT 108
55993: PUSH
55994: LD_INT 109
55996: PUSH
55997: LD_INT 112
55999: PUSH
56000: LD_INT 116
56002: PUSH
56003: LD_INT 117
56005: PUSH
56006: LD_INT 118
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: ST_TO_ADDR
56025: GO 58548
56027: LD_INT 7
56029: DOUBLE
56030: EQUAL
56031: IFTRUE 56035
56033: GO 56147
56035: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56036: LD_ADDR_VAR 0 2
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 4
56046: PUSH
56047: LD_INT 5
56049: PUSH
56050: LD_INT 7
56052: PUSH
56053: LD_INT 11
56055: PUSH
56056: LD_INT 12
56058: PUSH
56059: LD_INT 15
56061: PUSH
56062: LD_INT 16
56064: PUSH
56065: LD_INT 20
56067: PUSH
56068: LD_INT 21
56070: PUSH
56071: LD_INT 22
56073: PUSH
56074: LD_INT 23
56076: PUSH
56077: LD_INT 25
56079: PUSH
56080: LD_INT 26
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 101
56101: PUSH
56102: LD_INT 102
56104: PUSH
56105: LD_INT 103
56107: PUSH
56108: LD_INT 105
56110: PUSH
56111: LD_INT 106
56113: PUSH
56114: LD_INT 108
56116: PUSH
56117: LD_INT 112
56119: PUSH
56120: LD_INT 116
56122: PUSH
56123: LD_INT 117
56125: PUSH
56126: LD_INT 118
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: ST_TO_ADDR
56145: GO 58548
56147: LD_INT 8
56149: DOUBLE
56150: EQUAL
56151: IFTRUE 56155
56153: GO 56295
56155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56156: LD_ADDR_VAR 0 2
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 4
56166: PUSH
56167: LD_INT 5
56169: PUSH
56170: LD_INT 6
56172: PUSH
56173: LD_INT 7
56175: PUSH
56176: LD_INT 8
56178: PUSH
56179: LD_INT 11
56181: PUSH
56182: LD_INT 12
56184: PUSH
56185: LD_INT 15
56187: PUSH
56188: LD_INT 16
56190: PUSH
56191: LD_INT 20
56193: PUSH
56194: LD_INT 21
56196: PUSH
56197: LD_INT 22
56199: PUSH
56200: LD_INT 23
56202: PUSH
56203: LD_INT 25
56205: PUSH
56206: LD_INT 26
56208: PUSH
56209: LD_INT 30
56211: PUSH
56212: LD_INT 31
56214: PUSH
56215: LD_INT 32
56217: PUSH
56218: LD_INT 36
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 101
56245: PUSH
56246: LD_INT 102
56248: PUSH
56249: LD_INT 103
56251: PUSH
56252: LD_INT 105
56254: PUSH
56255: LD_INT 106
56257: PUSH
56258: LD_INT 108
56260: PUSH
56261: LD_INT 109
56263: PUSH
56264: LD_INT 112
56266: PUSH
56267: LD_INT 116
56269: PUSH
56270: LD_INT 117
56272: PUSH
56273: LD_INT 118
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: ST_TO_ADDR
56293: GO 58548
56295: LD_INT 9
56297: DOUBLE
56298: EQUAL
56299: IFTRUE 56303
56301: GO 56451
56303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56304: LD_ADDR_VAR 0 2
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 4
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: LD_INT 6
56320: PUSH
56321: LD_INT 7
56323: PUSH
56324: LD_INT 8
56326: PUSH
56327: LD_INT 11
56329: PUSH
56330: LD_INT 12
56332: PUSH
56333: LD_INT 15
56335: PUSH
56336: LD_INT 16
56338: PUSH
56339: LD_INT 20
56341: PUSH
56342: LD_INT 21
56344: PUSH
56345: LD_INT 22
56347: PUSH
56348: LD_INT 23
56350: PUSH
56351: LD_INT 25
56353: PUSH
56354: LD_INT 26
56356: PUSH
56357: LD_INT 28
56359: PUSH
56360: LD_INT 30
56362: PUSH
56363: LD_INT 31
56365: PUSH
56366: LD_INT 32
56368: PUSH
56369: LD_INT 36
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 101
56397: PUSH
56398: LD_INT 102
56400: PUSH
56401: LD_INT 103
56403: PUSH
56404: LD_INT 105
56406: PUSH
56407: LD_INT 106
56409: PUSH
56410: LD_INT 108
56412: PUSH
56413: LD_INT 109
56415: PUSH
56416: LD_INT 112
56418: PUSH
56419: LD_INT 114
56421: PUSH
56422: LD_INT 116
56424: PUSH
56425: LD_INT 117
56427: PUSH
56428: LD_INT 118
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: ST_TO_ADDR
56449: GO 58548
56451: LD_INT 10
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56459
56457: GO 56655
56459: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56460: LD_ADDR_VAR 0 2
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: LD_INT 6
56476: PUSH
56477: LD_INT 7
56479: PUSH
56480: LD_INT 8
56482: PUSH
56483: LD_INT 9
56485: PUSH
56486: LD_INT 10
56488: PUSH
56489: LD_INT 11
56491: PUSH
56492: LD_INT 12
56494: PUSH
56495: LD_INT 13
56497: PUSH
56498: LD_INT 14
56500: PUSH
56501: LD_INT 15
56503: PUSH
56504: LD_INT 16
56506: PUSH
56507: LD_INT 17
56509: PUSH
56510: LD_INT 18
56512: PUSH
56513: LD_INT 19
56515: PUSH
56516: LD_INT 20
56518: PUSH
56519: LD_INT 21
56521: PUSH
56522: LD_INT 22
56524: PUSH
56525: LD_INT 23
56527: PUSH
56528: LD_INT 24
56530: PUSH
56531: LD_INT 25
56533: PUSH
56534: LD_INT 26
56536: PUSH
56537: LD_INT 28
56539: PUSH
56540: LD_INT 30
56542: PUSH
56543: LD_INT 31
56545: PUSH
56546: LD_INT 32
56548: PUSH
56549: LD_INT 36
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 101
56585: PUSH
56586: LD_INT 102
56588: PUSH
56589: LD_INT 103
56591: PUSH
56592: LD_INT 104
56594: PUSH
56595: LD_INT 105
56597: PUSH
56598: LD_INT 106
56600: PUSH
56601: LD_INT 107
56603: PUSH
56604: LD_INT 108
56606: PUSH
56607: LD_INT 109
56609: PUSH
56610: LD_INT 110
56612: PUSH
56613: LD_INT 111
56615: PUSH
56616: LD_INT 112
56618: PUSH
56619: LD_INT 114
56621: PUSH
56622: LD_INT 116
56624: PUSH
56625: LD_INT 117
56627: PUSH
56628: LD_INT 118
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: ST_TO_ADDR
56653: GO 58548
56655: LD_INT 11
56657: DOUBLE
56658: EQUAL
56659: IFTRUE 56663
56661: GO 56867
56663: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56664: LD_ADDR_VAR 0 2
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: LD_INT 5
56680: PUSH
56681: LD_INT 6
56683: PUSH
56684: LD_INT 7
56686: PUSH
56687: LD_INT 8
56689: PUSH
56690: LD_INT 9
56692: PUSH
56693: LD_INT 10
56695: PUSH
56696: LD_INT 11
56698: PUSH
56699: LD_INT 12
56701: PUSH
56702: LD_INT 13
56704: PUSH
56705: LD_INT 14
56707: PUSH
56708: LD_INT 15
56710: PUSH
56711: LD_INT 16
56713: PUSH
56714: LD_INT 17
56716: PUSH
56717: LD_INT 18
56719: PUSH
56720: LD_INT 19
56722: PUSH
56723: LD_INT 20
56725: PUSH
56726: LD_INT 21
56728: PUSH
56729: LD_INT 22
56731: PUSH
56732: LD_INT 23
56734: PUSH
56735: LD_INT 24
56737: PUSH
56738: LD_INT 25
56740: PUSH
56741: LD_INT 26
56743: PUSH
56744: LD_INT 28
56746: PUSH
56747: LD_INT 30
56749: PUSH
56750: LD_INT 31
56752: PUSH
56753: LD_INT 32
56755: PUSH
56756: LD_INT 34
56758: PUSH
56759: LD_INT 36
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 101
56797: PUSH
56798: LD_INT 102
56800: PUSH
56801: LD_INT 103
56803: PUSH
56804: LD_INT 104
56806: PUSH
56807: LD_INT 105
56809: PUSH
56810: LD_INT 106
56812: PUSH
56813: LD_INT 107
56815: PUSH
56816: LD_INT 108
56818: PUSH
56819: LD_INT 109
56821: PUSH
56822: LD_INT 110
56824: PUSH
56825: LD_INT 111
56827: PUSH
56828: LD_INT 112
56830: PUSH
56831: LD_INT 114
56833: PUSH
56834: LD_INT 116
56836: PUSH
56837: LD_INT 117
56839: PUSH
56840: LD_INT 118
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: ST_TO_ADDR
56865: GO 58548
56867: LD_INT 12
56869: DOUBLE
56870: EQUAL
56871: IFTRUE 56875
56873: GO 57095
56875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56876: LD_ADDR_VAR 0 2
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: LD_INT 6
56898: PUSH
56899: LD_INT 7
56901: PUSH
56902: LD_INT 8
56904: PUSH
56905: LD_INT 9
56907: PUSH
56908: LD_INT 10
56910: PUSH
56911: LD_INT 11
56913: PUSH
56914: LD_INT 12
56916: PUSH
56917: LD_INT 13
56919: PUSH
56920: LD_INT 14
56922: PUSH
56923: LD_INT 15
56925: PUSH
56926: LD_INT 16
56928: PUSH
56929: LD_INT 17
56931: PUSH
56932: LD_INT 18
56934: PUSH
56935: LD_INT 19
56937: PUSH
56938: LD_INT 20
56940: PUSH
56941: LD_INT 21
56943: PUSH
56944: LD_INT 22
56946: PUSH
56947: LD_INT 23
56949: PUSH
56950: LD_INT 24
56952: PUSH
56953: LD_INT 25
56955: PUSH
56956: LD_INT 26
56958: PUSH
56959: LD_INT 27
56961: PUSH
56962: LD_INT 28
56964: PUSH
56965: LD_INT 30
56967: PUSH
56968: LD_INT 31
56970: PUSH
56971: LD_INT 32
56973: PUSH
56974: LD_INT 33
56976: PUSH
56977: LD_INT 34
56979: PUSH
56980: LD_INT 36
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 101
57021: PUSH
57022: LD_INT 102
57024: PUSH
57025: LD_INT 103
57027: PUSH
57028: LD_INT 104
57030: PUSH
57031: LD_INT 105
57033: PUSH
57034: LD_INT 106
57036: PUSH
57037: LD_INT 107
57039: PUSH
57040: LD_INT 108
57042: PUSH
57043: LD_INT 109
57045: PUSH
57046: LD_INT 110
57048: PUSH
57049: LD_INT 111
57051: PUSH
57052: LD_INT 112
57054: PUSH
57055: LD_INT 113
57057: PUSH
57058: LD_INT 114
57060: PUSH
57061: LD_INT 116
57063: PUSH
57064: LD_INT 117
57066: PUSH
57067: LD_INT 118
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: ST_TO_ADDR
57093: GO 58548
57095: LD_INT 13
57097: DOUBLE
57098: EQUAL
57099: IFTRUE 57103
57101: GO 57311
57103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57104: LD_ADDR_VAR 0 2
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: LD_INT 5
57123: PUSH
57124: LD_INT 8
57126: PUSH
57127: LD_INT 9
57129: PUSH
57130: LD_INT 10
57132: PUSH
57133: LD_INT 11
57135: PUSH
57136: LD_INT 12
57138: PUSH
57139: LD_INT 14
57141: PUSH
57142: LD_INT 15
57144: PUSH
57145: LD_INT 16
57147: PUSH
57148: LD_INT 17
57150: PUSH
57151: LD_INT 18
57153: PUSH
57154: LD_INT 19
57156: PUSH
57157: LD_INT 20
57159: PUSH
57160: LD_INT 21
57162: PUSH
57163: LD_INT 22
57165: PUSH
57166: LD_INT 23
57168: PUSH
57169: LD_INT 24
57171: PUSH
57172: LD_INT 25
57174: PUSH
57175: LD_INT 26
57177: PUSH
57178: LD_INT 27
57180: PUSH
57181: LD_INT 28
57183: PUSH
57184: LD_INT 30
57186: PUSH
57187: LD_INT 31
57189: PUSH
57190: LD_INT 32
57192: PUSH
57193: LD_INT 33
57195: PUSH
57196: LD_INT 34
57198: PUSH
57199: LD_INT 36
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 101
57237: PUSH
57238: LD_INT 102
57240: PUSH
57241: LD_INT 103
57243: PUSH
57244: LD_INT 104
57246: PUSH
57247: LD_INT 105
57249: PUSH
57250: LD_INT 106
57252: PUSH
57253: LD_INT 107
57255: PUSH
57256: LD_INT 108
57258: PUSH
57259: LD_INT 109
57261: PUSH
57262: LD_INT 110
57264: PUSH
57265: LD_INT 111
57267: PUSH
57268: LD_INT 112
57270: PUSH
57271: LD_INT 113
57273: PUSH
57274: LD_INT 114
57276: PUSH
57277: LD_INT 116
57279: PUSH
57280: LD_INT 117
57282: PUSH
57283: LD_INT 118
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: ST_TO_ADDR
57309: GO 58548
57311: LD_INT 14
57313: DOUBLE
57314: EQUAL
57315: IFTRUE 57319
57317: GO 57543
57319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57320: LD_ADDR_VAR 0 2
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: LD_INT 5
57339: PUSH
57340: LD_INT 6
57342: PUSH
57343: LD_INT 7
57345: PUSH
57346: LD_INT 8
57348: PUSH
57349: LD_INT 9
57351: PUSH
57352: LD_INT 10
57354: PUSH
57355: LD_INT 11
57357: PUSH
57358: LD_INT 12
57360: PUSH
57361: LD_INT 13
57363: PUSH
57364: LD_INT 14
57366: PUSH
57367: LD_INT 15
57369: PUSH
57370: LD_INT 16
57372: PUSH
57373: LD_INT 17
57375: PUSH
57376: LD_INT 18
57378: PUSH
57379: LD_INT 19
57381: PUSH
57382: LD_INT 20
57384: PUSH
57385: LD_INT 21
57387: PUSH
57388: LD_INT 22
57390: PUSH
57391: LD_INT 23
57393: PUSH
57394: LD_INT 24
57396: PUSH
57397: LD_INT 25
57399: PUSH
57400: LD_INT 26
57402: PUSH
57403: LD_INT 27
57405: PUSH
57406: LD_INT 28
57408: PUSH
57409: LD_INT 29
57411: PUSH
57412: LD_INT 30
57414: PUSH
57415: LD_INT 31
57417: PUSH
57418: LD_INT 32
57420: PUSH
57421: LD_INT 33
57423: PUSH
57424: LD_INT 34
57426: PUSH
57427: LD_INT 36
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 101
57469: PUSH
57470: LD_INT 102
57472: PUSH
57473: LD_INT 103
57475: PUSH
57476: LD_INT 104
57478: PUSH
57479: LD_INT 105
57481: PUSH
57482: LD_INT 106
57484: PUSH
57485: LD_INT 107
57487: PUSH
57488: LD_INT 108
57490: PUSH
57491: LD_INT 109
57493: PUSH
57494: LD_INT 110
57496: PUSH
57497: LD_INT 111
57499: PUSH
57500: LD_INT 112
57502: PUSH
57503: LD_INT 113
57505: PUSH
57506: LD_INT 114
57508: PUSH
57509: LD_INT 116
57511: PUSH
57512: LD_INT 117
57514: PUSH
57515: LD_INT 118
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: ST_TO_ADDR
57541: GO 58548
57543: LD_INT 15
57545: DOUBLE
57546: EQUAL
57547: IFTRUE 57551
57549: GO 57775
57551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57552: LD_ADDR_VAR 0 2
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: LD_INT 4
57568: PUSH
57569: LD_INT 5
57571: PUSH
57572: LD_INT 6
57574: PUSH
57575: LD_INT 7
57577: PUSH
57578: LD_INT 8
57580: PUSH
57581: LD_INT 9
57583: PUSH
57584: LD_INT 10
57586: PUSH
57587: LD_INT 11
57589: PUSH
57590: LD_INT 12
57592: PUSH
57593: LD_INT 13
57595: PUSH
57596: LD_INT 14
57598: PUSH
57599: LD_INT 15
57601: PUSH
57602: LD_INT 16
57604: PUSH
57605: LD_INT 17
57607: PUSH
57608: LD_INT 18
57610: PUSH
57611: LD_INT 19
57613: PUSH
57614: LD_INT 20
57616: PUSH
57617: LD_INT 21
57619: PUSH
57620: LD_INT 22
57622: PUSH
57623: LD_INT 23
57625: PUSH
57626: LD_INT 24
57628: PUSH
57629: LD_INT 25
57631: PUSH
57632: LD_INT 26
57634: PUSH
57635: LD_INT 27
57637: PUSH
57638: LD_INT 28
57640: PUSH
57641: LD_INT 29
57643: PUSH
57644: LD_INT 30
57646: PUSH
57647: LD_INT 31
57649: PUSH
57650: LD_INT 32
57652: PUSH
57653: LD_INT 33
57655: PUSH
57656: LD_INT 34
57658: PUSH
57659: LD_INT 36
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 101
57701: PUSH
57702: LD_INT 102
57704: PUSH
57705: LD_INT 103
57707: PUSH
57708: LD_INT 104
57710: PUSH
57711: LD_INT 105
57713: PUSH
57714: LD_INT 106
57716: PUSH
57717: LD_INT 107
57719: PUSH
57720: LD_INT 108
57722: PUSH
57723: LD_INT 109
57725: PUSH
57726: LD_INT 110
57728: PUSH
57729: LD_INT 111
57731: PUSH
57732: LD_INT 112
57734: PUSH
57735: LD_INT 113
57737: PUSH
57738: LD_INT 114
57740: PUSH
57741: LD_INT 116
57743: PUSH
57744: LD_INT 117
57746: PUSH
57747: LD_INT 118
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: ST_TO_ADDR
57773: GO 58548
57775: LD_INT 16
57777: DOUBLE
57778: EQUAL
57779: IFTRUE 57783
57781: GO 57919
57783: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57784: LD_ADDR_VAR 0 2
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: LD_INT 7
57800: PUSH
57801: LD_INT 11
57803: PUSH
57804: LD_INT 12
57806: PUSH
57807: LD_INT 15
57809: PUSH
57810: LD_INT 16
57812: PUSH
57813: LD_INT 20
57815: PUSH
57816: LD_INT 21
57818: PUSH
57819: LD_INT 22
57821: PUSH
57822: LD_INT 23
57824: PUSH
57825: LD_INT 25
57827: PUSH
57828: LD_INT 26
57830: PUSH
57831: LD_INT 30
57833: PUSH
57834: LD_INT 31
57836: PUSH
57837: LD_INT 32
57839: PUSH
57840: LD_INT 33
57842: PUSH
57843: LD_INT 34
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 101
57869: PUSH
57870: LD_INT 102
57872: PUSH
57873: LD_INT 103
57875: PUSH
57876: LD_INT 106
57878: PUSH
57879: LD_INT 108
57881: PUSH
57882: LD_INT 112
57884: PUSH
57885: LD_INT 113
57887: PUSH
57888: LD_INT 114
57890: PUSH
57891: LD_INT 116
57893: PUSH
57894: LD_INT 117
57896: PUSH
57897: LD_INT 118
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: ST_TO_ADDR
57917: GO 58548
57919: LD_INT 17
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57927
57925: GO 58151
57927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57928: LD_ADDR_VAR 0 2
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: LD_INT 5
57947: PUSH
57948: LD_INT 6
57950: PUSH
57951: LD_INT 7
57953: PUSH
57954: LD_INT 8
57956: PUSH
57957: LD_INT 9
57959: PUSH
57960: LD_INT 10
57962: PUSH
57963: LD_INT 11
57965: PUSH
57966: LD_INT 12
57968: PUSH
57969: LD_INT 13
57971: PUSH
57972: LD_INT 14
57974: PUSH
57975: LD_INT 15
57977: PUSH
57978: LD_INT 16
57980: PUSH
57981: LD_INT 17
57983: PUSH
57984: LD_INT 18
57986: PUSH
57987: LD_INT 19
57989: PUSH
57990: LD_INT 20
57992: PUSH
57993: LD_INT 21
57995: PUSH
57996: LD_INT 22
57998: PUSH
57999: LD_INT 23
58001: PUSH
58002: LD_INT 24
58004: PUSH
58005: LD_INT 25
58007: PUSH
58008: LD_INT 26
58010: PUSH
58011: LD_INT 27
58013: PUSH
58014: LD_INT 28
58016: PUSH
58017: LD_INT 29
58019: PUSH
58020: LD_INT 30
58022: PUSH
58023: LD_INT 31
58025: PUSH
58026: LD_INT 32
58028: PUSH
58029: LD_INT 33
58031: PUSH
58032: LD_INT 34
58034: PUSH
58035: LD_INT 36
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 101
58077: PUSH
58078: LD_INT 102
58080: PUSH
58081: LD_INT 103
58083: PUSH
58084: LD_INT 104
58086: PUSH
58087: LD_INT 105
58089: PUSH
58090: LD_INT 106
58092: PUSH
58093: LD_INT 107
58095: PUSH
58096: LD_INT 108
58098: PUSH
58099: LD_INT 109
58101: PUSH
58102: LD_INT 110
58104: PUSH
58105: LD_INT 111
58107: PUSH
58108: LD_INT 112
58110: PUSH
58111: LD_INT 113
58113: PUSH
58114: LD_INT 114
58116: PUSH
58117: LD_INT 116
58119: PUSH
58120: LD_INT 117
58122: PUSH
58123: LD_INT 118
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: ST_TO_ADDR
58149: GO 58548
58151: LD_INT 18
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58159
58157: GO 58307
58159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58160: LD_ADDR_VAR 0 2
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: LD_INT 7
58176: PUSH
58177: LD_INT 11
58179: PUSH
58180: LD_INT 12
58182: PUSH
58183: LD_INT 15
58185: PUSH
58186: LD_INT 16
58188: PUSH
58189: LD_INT 20
58191: PUSH
58192: LD_INT 21
58194: PUSH
58195: LD_INT 22
58197: PUSH
58198: LD_INT 23
58200: PUSH
58201: LD_INT 25
58203: PUSH
58204: LD_INT 26
58206: PUSH
58207: LD_INT 30
58209: PUSH
58210: LD_INT 31
58212: PUSH
58213: LD_INT 32
58215: PUSH
58216: LD_INT 33
58218: PUSH
58219: LD_INT 34
58221: PUSH
58222: LD_INT 35
58224: PUSH
58225: LD_INT 36
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 101
58253: PUSH
58254: LD_INT 102
58256: PUSH
58257: LD_INT 103
58259: PUSH
58260: LD_INT 106
58262: PUSH
58263: LD_INT 108
58265: PUSH
58266: LD_INT 112
58268: PUSH
58269: LD_INT 113
58271: PUSH
58272: LD_INT 114
58274: PUSH
58275: LD_INT 115
58277: PUSH
58278: LD_INT 116
58280: PUSH
58281: LD_INT 117
58283: PUSH
58284: LD_INT 118
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: ST_TO_ADDR
58305: GO 58548
58307: LD_INT 19
58309: DOUBLE
58310: EQUAL
58311: IFTRUE 58315
58313: GO 58547
58315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58316: LD_ADDR_VAR 0 2
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 5
58335: PUSH
58336: LD_INT 6
58338: PUSH
58339: LD_INT 7
58341: PUSH
58342: LD_INT 8
58344: PUSH
58345: LD_INT 9
58347: PUSH
58348: LD_INT 10
58350: PUSH
58351: LD_INT 11
58353: PUSH
58354: LD_INT 12
58356: PUSH
58357: LD_INT 13
58359: PUSH
58360: LD_INT 14
58362: PUSH
58363: LD_INT 15
58365: PUSH
58366: LD_INT 16
58368: PUSH
58369: LD_INT 17
58371: PUSH
58372: LD_INT 18
58374: PUSH
58375: LD_INT 19
58377: PUSH
58378: LD_INT 20
58380: PUSH
58381: LD_INT 21
58383: PUSH
58384: LD_INT 22
58386: PUSH
58387: LD_INT 23
58389: PUSH
58390: LD_INT 24
58392: PUSH
58393: LD_INT 25
58395: PUSH
58396: LD_INT 26
58398: PUSH
58399: LD_INT 27
58401: PUSH
58402: LD_INT 28
58404: PUSH
58405: LD_INT 29
58407: PUSH
58408: LD_INT 30
58410: PUSH
58411: LD_INT 31
58413: PUSH
58414: LD_INT 32
58416: PUSH
58417: LD_INT 33
58419: PUSH
58420: LD_INT 34
58422: PUSH
58423: LD_INT 35
58425: PUSH
58426: LD_INT 36
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 101
58469: PUSH
58470: LD_INT 102
58472: PUSH
58473: LD_INT 103
58475: PUSH
58476: LD_INT 104
58478: PUSH
58479: LD_INT 105
58481: PUSH
58482: LD_INT 106
58484: PUSH
58485: LD_INT 107
58487: PUSH
58488: LD_INT 108
58490: PUSH
58491: LD_INT 109
58493: PUSH
58494: LD_INT 110
58496: PUSH
58497: LD_INT 111
58499: PUSH
58500: LD_INT 112
58502: PUSH
58503: LD_INT 113
58505: PUSH
58506: LD_INT 114
58508: PUSH
58509: LD_INT 115
58511: PUSH
58512: LD_INT 116
58514: PUSH
58515: LD_INT 117
58517: PUSH
58518: LD_INT 118
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: ST_TO_ADDR
58545: GO 58548
58547: POP
// end else
58548: GO 58779
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58550: LD_ADDR_VAR 0 2
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: LD_INT 5
58569: PUSH
58570: LD_INT 6
58572: PUSH
58573: LD_INT 7
58575: PUSH
58576: LD_INT 8
58578: PUSH
58579: LD_INT 9
58581: PUSH
58582: LD_INT 10
58584: PUSH
58585: LD_INT 11
58587: PUSH
58588: LD_INT 12
58590: PUSH
58591: LD_INT 13
58593: PUSH
58594: LD_INT 14
58596: PUSH
58597: LD_INT 15
58599: PUSH
58600: LD_INT 16
58602: PUSH
58603: LD_INT 17
58605: PUSH
58606: LD_INT 18
58608: PUSH
58609: LD_INT 19
58611: PUSH
58612: LD_INT 20
58614: PUSH
58615: LD_INT 21
58617: PUSH
58618: LD_INT 22
58620: PUSH
58621: LD_INT 23
58623: PUSH
58624: LD_INT 24
58626: PUSH
58627: LD_INT 25
58629: PUSH
58630: LD_INT 26
58632: PUSH
58633: LD_INT 27
58635: PUSH
58636: LD_INT 28
58638: PUSH
58639: LD_INT 29
58641: PUSH
58642: LD_INT 30
58644: PUSH
58645: LD_INT 31
58647: PUSH
58648: LD_INT 32
58650: PUSH
58651: LD_INT 33
58653: PUSH
58654: LD_INT 34
58656: PUSH
58657: LD_INT 35
58659: PUSH
58660: LD_INT 36
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 101
58703: PUSH
58704: LD_INT 102
58706: PUSH
58707: LD_INT 103
58709: PUSH
58710: LD_INT 104
58712: PUSH
58713: LD_INT 105
58715: PUSH
58716: LD_INT 106
58718: PUSH
58719: LD_INT 107
58721: PUSH
58722: LD_INT 108
58724: PUSH
58725: LD_INT 109
58727: PUSH
58728: LD_INT 110
58730: PUSH
58731: LD_INT 111
58733: PUSH
58734: LD_INT 112
58736: PUSH
58737: LD_INT 113
58739: PUSH
58740: LD_INT 114
58742: PUSH
58743: LD_INT 115
58745: PUSH
58746: LD_INT 116
58748: PUSH
58749: LD_INT 117
58751: PUSH
58752: LD_INT 118
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// if result then
58779: LD_VAR 0 2
58783: IFFALSE 59569
// begin normal :=  ;
58785: LD_ADDR_VAR 0 5
58789: PUSH
58790: LD_STRING 
58792: ST_TO_ADDR
// hardcore :=  ;
58793: LD_ADDR_VAR 0 6
58797: PUSH
58798: LD_STRING 
58800: ST_TO_ADDR
// active :=  ;
58801: LD_ADDR_VAR 0 7
58805: PUSH
58806: LD_STRING 
58808: ST_TO_ADDR
// for i = 1 to normalCounter do
58809: LD_ADDR_VAR 0 8
58813: PUSH
58814: DOUBLE
58815: LD_INT 1
58817: DEC
58818: ST_TO_ADDR
58819: LD_EXP 46
58823: PUSH
58824: FOR_TO
58825: IFFALSE 58926
// begin tmp := 0 ;
58827: LD_ADDR_VAR 0 3
58831: PUSH
58832: LD_STRING 0
58834: ST_TO_ADDR
// if result [ 1 ] then
58835: LD_VAR 0 2
58839: PUSH
58840: LD_INT 1
58842: ARRAY
58843: IFFALSE 58908
// if result [ 1 ] [ 1 ] = i then
58845: LD_VAR 0 2
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PUSH
58854: LD_INT 1
58856: ARRAY
58857: PUSH
58858: LD_VAR 0 8
58862: EQUAL
58863: IFFALSE 58908
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58865: LD_ADDR_VAR 0 2
58869: PUSH
58870: LD_VAR 0 2
58874: PPUSH
58875: LD_INT 1
58877: PPUSH
58878: LD_VAR 0 2
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: PPUSH
58887: LD_INT 1
58889: PPUSH
58890: CALL_OW 3
58894: PPUSH
58895: CALL_OW 1
58899: ST_TO_ADDR
// tmp := 1 ;
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: LD_STRING 1
58907: ST_TO_ADDR
// end ; normal := normal & tmp ;
58908: LD_ADDR_VAR 0 5
58912: PUSH
58913: LD_VAR 0 5
58917: PUSH
58918: LD_VAR 0 3
58922: STR
58923: ST_TO_ADDR
// end ;
58924: GO 58824
58926: POP
58927: POP
// for i = 1 to hardcoreCounter do
58928: LD_ADDR_VAR 0 8
58932: PUSH
58933: DOUBLE
58934: LD_INT 1
58936: DEC
58937: ST_TO_ADDR
58938: LD_EXP 47
58942: PUSH
58943: FOR_TO
58944: IFFALSE 59049
// begin tmp := 0 ;
58946: LD_ADDR_VAR 0 3
58950: PUSH
58951: LD_STRING 0
58953: ST_TO_ADDR
// if result [ 2 ] then
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 2
58961: ARRAY
58962: IFFALSE 59031
// if result [ 2 ] [ 1 ] = 100 + i then
58964: LD_VAR 0 2
58968: PUSH
58969: LD_INT 2
58971: ARRAY
58972: PUSH
58973: LD_INT 1
58975: ARRAY
58976: PUSH
58977: LD_INT 100
58979: PUSH
58980: LD_VAR 0 8
58984: PLUS
58985: EQUAL
58986: IFFALSE 59031
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58988: LD_ADDR_VAR 0 2
58992: PUSH
58993: LD_VAR 0 2
58997: PPUSH
58998: LD_INT 2
59000: PPUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 2
59008: ARRAY
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: CALL_OW 3
59017: PPUSH
59018: CALL_OW 1
59022: ST_TO_ADDR
// tmp := 1 ;
59023: LD_ADDR_VAR 0 3
59027: PUSH
59028: LD_STRING 1
59030: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59031: LD_ADDR_VAR 0 6
59035: PUSH
59036: LD_VAR 0 6
59040: PUSH
59041: LD_VAR 0 3
59045: STR
59046: ST_TO_ADDR
// end ;
59047: GO 58943
59049: POP
59050: POP
// if isGameLoad then
59051: LD_VAR 0 1
59055: IFFALSE 59530
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59057: LD_ADDR_VAR 0 4
59061: PUSH
59062: LD_EXP 50
59066: PUSH
59067: LD_EXP 49
59071: PUSH
59072: LD_EXP 51
59076: PUSH
59077: LD_EXP 48
59081: PUSH
59082: LD_EXP 52
59086: PUSH
59087: LD_EXP 53
59091: PUSH
59092: LD_EXP 54
59096: PUSH
59097: LD_EXP 55
59101: PUSH
59102: LD_EXP 56
59106: PUSH
59107: LD_EXP 57
59111: PUSH
59112: LD_EXP 58
59116: PUSH
59117: LD_EXP 59
59121: PUSH
59122: LD_EXP 60
59126: PUSH
59127: LD_EXP 61
59131: PUSH
59132: LD_EXP 69
59136: PUSH
59137: LD_EXP 70
59141: PUSH
59142: LD_EXP 71
59146: PUSH
59147: LD_EXP 72
59151: PUSH
59152: LD_EXP 74
59156: PUSH
59157: LD_EXP 75
59161: PUSH
59162: LD_EXP 76
59166: PUSH
59167: LD_EXP 79
59171: PUSH
59172: LD_EXP 81
59176: PUSH
59177: LD_EXP 82
59181: PUSH
59182: LD_EXP 83
59186: PUSH
59187: LD_EXP 85
59191: PUSH
59192: LD_EXP 86
59196: PUSH
59197: LD_EXP 89
59201: PUSH
59202: LD_EXP 90
59206: PUSH
59207: LD_EXP 91
59211: PUSH
59212: LD_EXP 92
59216: PUSH
59217: LD_EXP 93
59221: PUSH
59222: LD_EXP 94
59226: PUSH
59227: LD_EXP 95
59231: PUSH
59232: LD_EXP 96
59236: PUSH
59237: LD_EXP 97
59241: PUSH
59242: LD_EXP 62
59246: PUSH
59247: LD_EXP 63
59251: PUSH
59252: LD_EXP 66
59256: PUSH
59257: LD_EXP 67
59261: PUSH
59262: LD_EXP 68
59266: PUSH
59267: LD_EXP 64
59271: PUSH
59272: LD_EXP 65
59276: PUSH
59277: LD_EXP 73
59281: PUSH
59282: LD_EXP 77
59286: PUSH
59287: LD_EXP 78
59291: PUSH
59292: LD_EXP 80
59296: PUSH
59297: LD_EXP 84
59301: PUSH
59302: LD_EXP 87
59306: PUSH
59307: LD_EXP 88
59311: PUSH
59312: LD_EXP 98
59316: PUSH
59317: LD_EXP 99
59321: PUSH
59322: LD_EXP 100
59326: PUSH
59327: LD_EXP 101
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// tmp :=  ;
59388: LD_ADDR_VAR 0 3
59392: PUSH
59393: LD_STRING 
59395: ST_TO_ADDR
// for i = 1 to normalCounter do
59396: LD_ADDR_VAR 0 8
59400: PUSH
59401: DOUBLE
59402: LD_INT 1
59404: DEC
59405: ST_TO_ADDR
59406: LD_EXP 46
59410: PUSH
59411: FOR_TO
59412: IFFALSE 59448
// begin if flags [ i ] then
59414: LD_VAR 0 4
59418: PUSH
59419: LD_VAR 0 8
59423: ARRAY
59424: IFFALSE 59446
// tmp := tmp & i & ; ;
59426: LD_ADDR_VAR 0 3
59430: PUSH
59431: LD_VAR 0 3
59435: PUSH
59436: LD_VAR 0 8
59440: STR
59441: PUSH
59442: LD_STRING ;
59444: STR
59445: ST_TO_ADDR
// end ;
59446: GO 59411
59448: POP
59449: POP
// for i = 1 to hardcoreCounter do
59450: LD_ADDR_VAR 0 8
59454: PUSH
59455: DOUBLE
59456: LD_INT 1
59458: DEC
59459: ST_TO_ADDR
59460: LD_EXP 47
59464: PUSH
59465: FOR_TO
59466: IFFALSE 59512
// begin if flags [ normalCounter + i ] then
59468: LD_VAR 0 4
59472: PUSH
59473: LD_EXP 46
59477: PUSH
59478: LD_VAR 0 8
59482: PLUS
59483: ARRAY
59484: IFFALSE 59510
// tmp := tmp & ( 100 + i ) & ; ;
59486: LD_ADDR_VAR 0 3
59490: PUSH
59491: LD_VAR 0 3
59495: PUSH
59496: LD_INT 100
59498: PUSH
59499: LD_VAR 0 8
59503: PLUS
59504: STR
59505: PUSH
59506: LD_STRING ;
59508: STR
59509: ST_TO_ADDR
// end ;
59510: GO 59465
59512: POP
59513: POP
// if tmp then
59514: LD_VAR 0 3
59518: IFFALSE 59530
// active := tmp ;
59520: LD_ADDR_VAR 0 7
59524: PUSH
59525: LD_VAR 0 3
59529: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59530: LD_STRING getStreamItemsFromMission("
59532: PUSH
59533: LD_VAR 0 5
59537: STR
59538: PUSH
59539: LD_STRING ","
59541: STR
59542: PUSH
59543: LD_VAR 0 6
59547: STR
59548: PUSH
59549: LD_STRING ","
59551: STR
59552: PUSH
59553: LD_VAR 0 7
59557: STR
59558: PUSH
59559: LD_STRING ")
59561: STR
59562: PPUSH
59563: CALL_OW 559
// end else
59567: GO 59576
// ToLua ( getStreamItemsFromMission("","","") ) ;
59569: LD_STRING getStreamItemsFromMission("","","")
59571: PPUSH
59572: CALL_OW 559
// end ;
59576: LD_VAR 0 2
59580: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59581: LD_EXP 45
59585: PUSH
59586: LD_EXP 50
59590: AND
59591: IFFALSE 59715
59593: GO 59595
59595: DISABLE
59596: LD_INT 0
59598: PPUSH
59599: PPUSH
// begin enable ;
59600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59601: LD_ADDR_VAR 0 2
59605: PUSH
59606: LD_INT 22
59608: PUSH
59609: LD_OWVAR 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 34
59623: PUSH
59624: LD_INT 7
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 34
59633: PUSH
59634: LD_INT 45
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 34
59643: PUSH
59644: LD_INT 28
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 34
59653: PUSH
59654: LD_INT 47
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PPUSH
59672: CALL_OW 69
59676: ST_TO_ADDR
// if not tmp then
59677: LD_VAR 0 2
59681: NOT
59682: IFFALSE 59686
// exit ;
59684: GO 59715
// for i in tmp do
59686: LD_ADDR_VAR 0 1
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: FOR_IN
59697: IFFALSE 59713
// begin SetLives ( i , 0 ) ;
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_INT 0
59706: PPUSH
59707: CALL_OW 234
// end ;
59711: GO 59696
59713: POP
59714: POP
// end ;
59715: PPOPN 2
59717: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59718: LD_EXP 45
59722: PUSH
59723: LD_EXP 51
59727: AND
59728: IFFALSE 59812
59730: GO 59732
59732: DISABLE
59733: LD_INT 0
59735: PPUSH
59736: PPUSH
// begin enable ;
59737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59738: LD_ADDR_VAR 0 2
59742: PUSH
59743: LD_INT 22
59745: PUSH
59746: LD_OWVAR 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 32
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PPUSH
59769: CALL_OW 69
59773: ST_TO_ADDR
// if not tmp then
59774: LD_VAR 0 2
59778: NOT
59779: IFFALSE 59783
// exit ;
59781: GO 59812
// for i in tmp do
59783: LD_ADDR_VAR 0 1
59787: PUSH
59788: LD_VAR 0 2
59792: PUSH
59793: FOR_IN
59794: IFFALSE 59810
// begin SetLives ( i , 0 ) ;
59796: LD_VAR 0 1
59800: PPUSH
59801: LD_INT 0
59803: PPUSH
59804: CALL_OW 234
// end ;
59808: GO 59793
59810: POP
59811: POP
// end ;
59812: PPOPN 2
59814: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59815: LD_EXP 45
59819: PUSH
59820: LD_EXP 48
59824: AND
59825: IFFALSE 59918
59827: GO 59829
59829: DISABLE
59830: LD_INT 0
59832: PPUSH
// begin enable ;
59833: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59834: LD_ADDR_VAR 0 1
59838: PUSH
59839: LD_INT 22
59841: PUSH
59842: LD_OWVAR 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 25
59856: PUSH
59857: LD_INT 5
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 25
59866: PUSH
59867: LD_INT 9
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 25
59876: PUSH
59877: LD_INT 8
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PPUSH
59894: CALL_OW 69
59898: PUSH
59899: FOR_IN
59900: IFFALSE 59916
// begin SetClass ( i , 1 ) ;
59902: LD_VAR 0 1
59906: PPUSH
59907: LD_INT 1
59909: PPUSH
59910: CALL_OW 336
// end ;
59914: GO 59899
59916: POP
59917: POP
// end ;
59918: PPOPN 1
59920: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59921: LD_EXP 45
59925: PUSH
59926: LD_EXP 49
59930: AND
59931: PUSH
59932: LD_OWVAR 65
59936: PUSH
59937: LD_INT 7
59939: LESS
59940: AND
59941: IFFALSE 59955
59943: GO 59945
59945: DISABLE
// begin enable ;
59946: ENABLE
// game_speed := 7 ;
59947: LD_ADDR_OWVAR 65
59951: PUSH
59952: LD_INT 7
59954: ST_TO_ADDR
// end ;
59955: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59956: LD_EXP 45
59960: PUSH
59961: LD_EXP 52
59965: AND
59966: IFFALSE 60168
59968: GO 59970
59970: DISABLE
59971: LD_INT 0
59973: PPUSH
59974: PPUSH
59975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59976: LD_ADDR_VAR 0 3
59980: PUSH
59981: LD_INT 81
59983: PUSH
59984: LD_OWVAR 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 21
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PPUSH
60007: CALL_OW 69
60011: ST_TO_ADDR
// if not tmp then
60012: LD_VAR 0 3
60016: NOT
60017: IFFALSE 60021
// exit ;
60019: GO 60168
// if tmp > 5 then
60021: LD_VAR 0 3
60025: PUSH
60026: LD_INT 5
60028: GREATER
60029: IFFALSE 60041
// k := 5 else
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: LD_INT 5
60038: ST_TO_ADDR
60039: GO 60051
// k := tmp ;
60041: LD_ADDR_VAR 0 2
60045: PUSH
60046: LD_VAR 0 3
60050: ST_TO_ADDR
// for i := 1 to k do
60051: LD_ADDR_VAR 0 1
60055: PUSH
60056: DOUBLE
60057: LD_INT 1
60059: DEC
60060: ST_TO_ADDR
60061: LD_VAR 0 2
60065: PUSH
60066: FOR_TO
60067: IFFALSE 60166
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60069: LD_VAR 0 3
60073: PUSH
60074: LD_VAR 0 1
60078: ARRAY
60079: PPUSH
60080: LD_VAR 0 1
60084: PUSH
60085: LD_INT 4
60087: MOD
60088: PUSH
60089: LD_INT 1
60091: PLUS
60092: PPUSH
60093: CALL_OW 259
60097: PUSH
60098: LD_INT 10
60100: LESS
60101: IFFALSE 60164
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60103: LD_VAR 0 3
60107: PUSH
60108: LD_VAR 0 1
60112: ARRAY
60113: PPUSH
60114: LD_VAR 0 1
60118: PUSH
60119: LD_INT 4
60121: MOD
60122: PUSH
60123: LD_INT 1
60125: PLUS
60126: PPUSH
60127: LD_VAR 0 3
60131: PUSH
60132: LD_VAR 0 1
60136: ARRAY
60137: PPUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_INT 4
60145: MOD
60146: PUSH
60147: LD_INT 1
60149: PLUS
60150: PPUSH
60151: CALL_OW 259
60155: PUSH
60156: LD_INT 1
60158: PLUS
60159: PPUSH
60160: CALL_OW 237
60164: GO 60066
60166: POP
60167: POP
// end ;
60168: PPOPN 3
60170: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60171: LD_EXP 45
60175: PUSH
60176: LD_EXP 53
60180: AND
60181: IFFALSE 60201
60183: GO 60185
60185: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60186: LD_INT 4
60188: PPUSH
60189: LD_OWVAR 2
60193: PPUSH
60194: LD_INT 0
60196: PPUSH
60197: CALL_OW 324
60201: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60202: LD_EXP 45
60206: PUSH
60207: LD_EXP 82
60211: AND
60212: IFFALSE 60232
60214: GO 60216
60216: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60217: LD_INT 19
60219: PPUSH
60220: LD_OWVAR 2
60224: PPUSH
60225: LD_INT 0
60227: PPUSH
60228: CALL_OW 324
60232: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60233: LD_EXP 45
60237: PUSH
60238: LD_EXP 54
60242: AND
60243: IFFALSE 60345
60245: GO 60247
60247: DISABLE
60248: LD_INT 0
60250: PPUSH
60251: PPUSH
// begin enable ;
60252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60253: LD_ADDR_VAR 0 2
60257: PUSH
60258: LD_INT 22
60260: PUSH
60261: LD_OWVAR 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: LD_INT 34
60275: PUSH
60276: LD_INT 11
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 34
60285: PUSH
60286: LD_INT 30
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PPUSH
60302: CALL_OW 69
60306: ST_TO_ADDR
// if not tmp then
60307: LD_VAR 0 2
60311: NOT
60312: IFFALSE 60316
// exit ;
60314: GO 60345
// for i in tmp do
60316: LD_ADDR_VAR 0 1
60320: PUSH
60321: LD_VAR 0 2
60325: PUSH
60326: FOR_IN
60327: IFFALSE 60343
// begin SetLives ( i , 0 ) ;
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_INT 0
60336: PPUSH
60337: CALL_OW 234
// end ;
60341: GO 60326
60343: POP
60344: POP
// end ;
60345: PPOPN 2
60347: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60348: LD_EXP 45
60352: PUSH
60353: LD_EXP 55
60357: AND
60358: IFFALSE 60378
60360: GO 60362
60362: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60363: LD_INT 32
60365: PPUSH
60366: LD_OWVAR 2
60370: PPUSH
60371: LD_INT 0
60373: PPUSH
60374: CALL_OW 324
60378: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60379: LD_EXP 45
60383: PUSH
60384: LD_EXP 56
60388: AND
60389: IFFALSE 60570
60391: GO 60393
60393: DISABLE
60394: LD_INT 0
60396: PPUSH
60397: PPUSH
60398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60399: LD_ADDR_VAR 0 2
60403: PUSH
60404: LD_INT 22
60406: PUSH
60407: LD_OWVAR 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 33
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PPUSH
60430: CALL_OW 69
60434: ST_TO_ADDR
// if not tmp then
60435: LD_VAR 0 2
60439: NOT
60440: IFFALSE 60444
// exit ;
60442: GO 60570
// side := 0 ;
60444: LD_ADDR_VAR 0 3
60448: PUSH
60449: LD_INT 0
60451: ST_TO_ADDR
// for i := 1 to 8 do
60452: LD_ADDR_VAR 0 1
60456: PUSH
60457: DOUBLE
60458: LD_INT 1
60460: DEC
60461: ST_TO_ADDR
60462: LD_INT 8
60464: PUSH
60465: FOR_TO
60466: IFFALSE 60514
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60468: LD_OWVAR 2
60472: PUSH
60473: LD_VAR 0 1
60477: NONEQUAL
60478: PUSH
60479: LD_OWVAR 2
60483: PPUSH
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 81
60493: PUSH
60494: LD_INT 2
60496: EQUAL
60497: AND
60498: IFFALSE 60512
// begin side := i ;
60500: LD_ADDR_VAR 0 3
60504: PUSH
60505: LD_VAR 0 1
60509: ST_TO_ADDR
// break ;
60510: GO 60514
// end ;
60512: GO 60465
60514: POP
60515: POP
// if not side then
60516: LD_VAR 0 3
60520: NOT
60521: IFFALSE 60525
// exit ;
60523: GO 60570
// for i := 1 to tmp do
60525: LD_ADDR_VAR 0 1
60529: PUSH
60530: DOUBLE
60531: LD_INT 1
60533: DEC
60534: ST_TO_ADDR
60535: LD_VAR 0 2
60539: PUSH
60540: FOR_TO
60541: IFFALSE 60568
// if Prob ( 60 ) then
60543: LD_INT 60
60545: PPUSH
60546: CALL_OW 13
60550: IFFALSE 60566
// SetSide ( i , side ) ;
60552: LD_VAR 0 1
60556: PPUSH
60557: LD_VAR 0 3
60561: PPUSH
60562: CALL_OW 235
60566: GO 60540
60568: POP
60569: POP
// end ;
60570: PPOPN 3
60572: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60573: LD_EXP 45
60577: PUSH
60578: LD_EXP 58
60582: AND
60583: IFFALSE 60702
60585: GO 60587
60587: DISABLE
60588: LD_INT 0
60590: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60591: LD_ADDR_VAR 0 1
60595: PUSH
60596: LD_INT 22
60598: PUSH
60599: LD_OWVAR 2
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 21
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 23
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: PPUSH
60640: CALL_OW 69
60644: PUSH
60645: FOR_IN
60646: IFFALSE 60700
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60648: LD_VAR 0 1
60652: PPUSH
60653: CALL_OW 257
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: IN
60676: IFFALSE 60698
// SetClass ( un , rand ( 1 , 4 ) ) ;
60678: LD_VAR 0 1
60682: PPUSH
60683: LD_INT 1
60685: PPUSH
60686: LD_INT 4
60688: PPUSH
60689: CALL_OW 12
60693: PPUSH
60694: CALL_OW 336
60698: GO 60645
60700: POP
60701: POP
// end ;
60702: PPOPN 1
60704: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60705: LD_EXP 45
60709: PUSH
60710: LD_EXP 57
60714: AND
60715: IFFALSE 60794
60717: GO 60719
60719: DISABLE
60720: LD_INT 0
60722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60723: LD_ADDR_VAR 0 1
60727: PUSH
60728: LD_INT 22
60730: PUSH
60731: LD_OWVAR 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 21
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PPUSH
60754: CALL_OW 69
60758: ST_TO_ADDR
// if not tmp then
60759: LD_VAR 0 1
60763: NOT
60764: IFFALSE 60768
// exit ;
60766: GO 60794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60768: LD_VAR 0 1
60772: PUSH
60773: LD_INT 1
60775: PPUSH
60776: LD_VAR 0 1
60780: PPUSH
60781: CALL_OW 12
60785: ARRAY
60786: PPUSH
60787: LD_INT 100
60789: PPUSH
60790: CALL_OW 234
// end ;
60794: PPOPN 1
60796: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60797: LD_EXP 45
60801: PUSH
60802: LD_EXP 59
60806: AND
60807: IFFALSE 60905
60809: GO 60811
60811: DISABLE
60812: LD_INT 0
60814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60815: LD_ADDR_VAR 0 1
60819: PUSH
60820: LD_INT 22
60822: PUSH
60823: LD_OWVAR 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 21
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PPUSH
60846: CALL_OW 69
60850: ST_TO_ADDR
// if not tmp then
60851: LD_VAR 0 1
60855: NOT
60856: IFFALSE 60860
// exit ;
60858: GO 60905
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60860: LD_VAR 0 1
60864: PUSH
60865: LD_INT 1
60867: PPUSH
60868: LD_VAR 0 1
60872: PPUSH
60873: CALL_OW 12
60877: ARRAY
60878: PPUSH
60879: LD_INT 1
60881: PPUSH
60882: LD_INT 4
60884: PPUSH
60885: CALL_OW 12
60889: PPUSH
60890: LD_INT 3000
60892: PPUSH
60893: LD_INT 9000
60895: PPUSH
60896: CALL_OW 12
60900: PPUSH
60901: CALL_OW 492
// end ;
60905: PPOPN 1
60907: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60908: LD_EXP 45
60912: PUSH
60913: LD_EXP 60
60917: AND
60918: IFFALSE 60938
60920: GO 60922
60922: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60923: LD_INT 1
60925: PPUSH
60926: LD_OWVAR 2
60930: PPUSH
60931: LD_INT 0
60933: PPUSH
60934: CALL_OW 324
60938: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60939: LD_EXP 45
60943: PUSH
60944: LD_EXP 61
60948: AND
60949: IFFALSE 61032
60951: GO 60953
60953: DISABLE
60954: LD_INT 0
60956: PPUSH
60957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60958: LD_ADDR_VAR 0 2
60962: PUSH
60963: LD_INT 22
60965: PUSH
60966: LD_OWVAR 2
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 21
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PPUSH
60989: CALL_OW 69
60993: ST_TO_ADDR
// if not tmp then
60994: LD_VAR 0 2
60998: NOT
60999: IFFALSE 61003
// exit ;
61001: GO 61032
// for i in tmp do
61003: LD_ADDR_VAR 0 1
61007: PUSH
61008: LD_VAR 0 2
61012: PUSH
61013: FOR_IN
61014: IFFALSE 61030
// SetBLevel ( i , 10 ) ;
61016: LD_VAR 0 1
61020: PPUSH
61021: LD_INT 10
61023: PPUSH
61024: CALL_OW 241
61028: GO 61013
61030: POP
61031: POP
// end ;
61032: PPOPN 2
61034: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61035: LD_EXP 45
61039: PUSH
61040: LD_EXP 62
61044: AND
61045: IFFALSE 61156
61047: GO 61049
61049: DISABLE
61050: LD_INT 0
61052: PPUSH
61053: PPUSH
61054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61055: LD_ADDR_VAR 0 3
61059: PUSH
61060: LD_INT 22
61062: PUSH
61063: LD_OWVAR 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 25
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PPUSH
61086: CALL_OW 69
61090: ST_TO_ADDR
// if not tmp then
61091: LD_VAR 0 3
61095: NOT
61096: IFFALSE 61100
// exit ;
61098: GO 61156
// un := tmp [ rand ( 1 , tmp ) ] ;
61100: LD_ADDR_VAR 0 2
61104: PUSH
61105: LD_VAR 0 3
61109: PUSH
61110: LD_INT 1
61112: PPUSH
61113: LD_VAR 0 3
61117: PPUSH
61118: CALL_OW 12
61122: ARRAY
61123: ST_TO_ADDR
// if Crawls ( un ) then
61124: LD_VAR 0 2
61128: PPUSH
61129: CALL_OW 318
61133: IFFALSE 61144
// ComWalk ( un ) ;
61135: LD_VAR 0 2
61139: PPUSH
61140: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61144: LD_VAR 0 2
61148: PPUSH
61149: LD_INT 5
61151: PPUSH
61152: CALL_OW 336
// end ;
61156: PPOPN 3
61158: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61159: LD_EXP 45
61163: PUSH
61164: LD_EXP 63
61168: AND
61169: PUSH
61170: LD_OWVAR 67
61174: PUSH
61175: LD_INT 4
61177: LESS
61178: AND
61179: IFFALSE 61198
61181: GO 61183
61183: DISABLE
// begin Difficulty := Difficulty + 1 ;
61184: LD_ADDR_OWVAR 67
61188: PUSH
61189: LD_OWVAR 67
61193: PUSH
61194: LD_INT 1
61196: PLUS
61197: ST_TO_ADDR
// end ;
61198: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61199: LD_EXP 45
61203: PUSH
61204: LD_EXP 64
61208: AND
61209: IFFALSE 61312
61211: GO 61213
61213: DISABLE
61214: LD_INT 0
61216: PPUSH
// begin for i := 1 to 5 do
61217: LD_ADDR_VAR 0 1
61221: PUSH
61222: DOUBLE
61223: LD_INT 1
61225: DEC
61226: ST_TO_ADDR
61227: LD_INT 5
61229: PUSH
61230: FOR_TO
61231: IFFALSE 61310
// begin uc_nation := nation_nature ;
61233: LD_ADDR_OWVAR 21
61237: PUSH
61238: LD_INT 0
61240: ST_TO_ADDR
// uc_side := 0 ;
61241: LD_ADDR_OWVAR 20
61245: PUSH
61246: LD_INT 0
61248: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61249: LD_ADDR_OWVAR 29
61253: PUSH
61254: LD_INT 12
61256: PUSH
61257: LD_INT 12
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// hc_agressivity := 20 ;
61264: LD_ADDR_OWVAR 35
61268: PUSH
61269: LD_INT 20
61271: ST_TO_ADDR
// hc_class := class_tiger ;
61272: LD_ADDR_OWVAR 28
61276: PUSH
61277: LD_INT 14
61279: ST_TO_ADDR
// hc_gallery :=  ;
61280: LD_ADDR_OWVAR 33
61284: PUSH
61285: LD_STRING 
61287: ST_TO_ADDR
// hc_name :=  ;
61288: LD_ADDR_OWVAR 26
61292: PUSH
61293: LD_STRING 
61295: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61296: CALL_OW 44
61300: PPUSH
61301: LD_INT 0
61303: PPUSH
61304: CALL_OW 51
// end ;
61308: GO 61230
61310: POP
61311: POP
// end ;
61312: PPOPN 1
61314: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61315: LD_EXP 45
61319: PUSH
61320: LD_EXP 65
61324: AND
61325: IFFALSE 61334
61327: GO 61329
61329: DISABLE
// StreamSibBomb ;
61330: CALL 61335 0 0
61334: END
// export function StreamSibBomb ; var i , x , y ; begin
61335: LD_INT 0
61337: PPUSH
61338: PPUSH
61339: PPUSH
61340: PPUSH
// result := false ;
61341: LD_ADDR_VAR 0 1
61345: PUSH
61346: LD_INT 0
61348: ST_TO_ADDR
// for i := 1 to 16 do
61349: LD_ADDR_VAR 0 2
61353: PUSH
61354: DOUBLE
61355: LD_INT 1
61357: DEC
61358: ST_TO_ADDR
61359: LD_INT 16
61361: PUSH
61362: FOR_TO
61363: IFFALSE 61562
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61365: LD_ADDR_VAR 0 3
61369: PUSH
61370: LD_INT 10
61372: PUSH
61373: LD_INT 20
61375: PUSH
61376: LD_INT 30
61378: PUSH
61379: LD_INT 40
61381: PUSH
61382: LD_INT 50
61384: PUSH
61385: LD_INT 60
61387: PUSH
61388: LD_INT 70
61390: PUSH
61391: LD_INT 80
61393: PUSH
61394: LD_INT 90
61396: PUSH
61397: LD_INT 100
61399: PUSH
61400: LD_INT 110
61402: PUSH
61403: LD_INT 120
61405: PUSH
61406: LD_INT 130
61408: PUSH
61409: LD_INT 140
61411: PUSH
61412: LD_INT 150
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PPUSH
61435: LD_INT 15
61437: PPUSH
61438: CALL_OW 12
61442: ARRAY
61443: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61444: LD_ADDR_VAR 0 4
61448: PUSH
61449: LD_INT 10
61451: PUSH
61452: LD_INT 20
61454: PUSH
61455: LD_INT 30
61457: PUSH
61458: LD_INT 40
61460: PUSH
61461: LD_INT 50
61463: PUSH
61464: LD_INT 60
61466: PUSH
61467: LD_INT 70
61469: PUSH
61470: LD_INT 80
61472: PUSH
61473: LD_INT 90
61475: PUSH
61476: LD_INT 100
61478: PUSH
61479: LD_INT 110
61481: PUSH
61482: LD_INT 120
61484: PUSH
61485: LD_INT 130
61487: PUSH
61488: LD_INT 140
61490: PUSH
61491: LD_INT 150
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PPUSH
61514: LD_INT 15
61516: PPUSH
61517: CALL_OW 12
61521: ARRAY
61522: ST_TO_ADDR
// if ValidHex ( x , y ) then
61523: LD_VAR 0 3
61527: PPUSH
61528: LD_VAR 0 4
61532: PPUSH
61533: CALL_OW 488
61537: IFFALSE 61560
// begin result := [ x , y ] ;
61539: LD_ADDR_VAR 0 1
61543: PUSH
61544: LD_VAR 0 3
61548: PUSH
61549: LD_VAR 0 4
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// break ;
61558: GO 61562
// end ; end ;
61560: GO 61362
61562: POP
61563: POP
// if result then
61564: LD_VAR 0 1
61568: IFFALSE 61628
// begin ToLua ( playSibBomb() ) ;
61570: LD_STRING playSibBomb()
61572: PPUSH
61573: CALL_OW 559
// wait ( 0 0$14 ) ;
61577: LD_INT 490
61579: PPUSH
61580: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61584: LD_VAR 0 1
61588: PUSH
61589: LD_INT 1
61591: ARRAY
61592: PPUSH
61593: LD_VAR 0 1
61597: PUSH
61598: LD_INT 2
61600: ARRAY
61601: PPUSH
61602: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61606: LD_VAR 0 1
61610: PUSH
61611: LD_INT 1
61613: ARRAY
61614: PPUSH
61615: LD_VAR 0 1
61619: PUSH
61620: LD_INT 2
61622: ARRAY
61623: PPUSH
61624: CALL_OW 429
// end ; end ;
61628: LD_VAR 0 1
61632: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61633: LD_EXP 45
61637: PUSH
61638: LD_EXP 67
61642: AND
61643: IFFALSE 61655
61645: GO 61647
61647: DISABLE
// YouLost (  ) ;
61648: LD_STRING 
61650: PPUSH
61651: CALL_OW 104
61655: END
// every 0 0$1 trigger StreamModeActive and sFog do
61656: LD_EXP 45
61660: PUSH
61661: LD_EXP 66
61665: AND
61666: IFFALSE 61680
61668: GO 61670
61670: DISABLE
// FogOff ( your_side ) ;
61671: LD_OWVAR 2
61675: PPUSH
61676: CALL_OW 344
61680: END
// every 0 0$1 trigger StreamModeActive and sSun do
61681: LD_EXP 45
61685: PUSH
61686: LD_EXP 68
61690: AND
61691: IFFALSE 61719
61693: GO 61695
61695: DISABLE
// begin solar_recharge_percent := 0 ;
61696: LD_ADDR_OWVAR 79
61700: PUSH
61701: LD_INT 0
61703: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61704: LD_INT 10500
61706: PPUSH
61707: CALL_OW 67
// solar_recharge_percent := 100 ;
61711: LD_ADDR_OWVAR 79
61715: PUSH
61716: LD_INT 100
61718: ST_TO_ADDR
// end ;
61719: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61720: LD_EXP 45
61724: PUSH
61725: LD_EXP 69
61729: AND
61730: IFFALSE 61969
61732: GO 61734
61734: DISABLE
61735: LD_INT 0
61737: PPUSH
61738: PPUSH
61739: PPUSH
// begin tmp := [ ] ;
61740: LD_ADDR_VAR 0 3
61744: PUSH
61745: EMPTY
61746: ST_TO_ADDR
// for i := 1 to 6 do
61747: LD_ADDR_VAR 0 1
61751: PUSH
61752: DOUBLE
61753: LD_INT 1
61755: DEC
61756: ST_TO_ADDR
61757: LD_INT 6
61759: PUSH
61760: FOR_TO
61761: IFFALSE 61866
// begin uc_nation := nation_nature ;
61763: LD_ADDR_OWVAR 21
61767: PUSH
61768: LD_INT 0
61770: ST_TO_ADDR
// uc_side := 0 ;
61771: LD_ADDR_OWVAR 20
61775: PUSH
61776: LD_INT 0
61778: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61779: LD_ADDR_OWVAR 29
61783: PUSH
61784: LD_INT 12
61786: PUSH
61787: LD_INT 12
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: ST_TO_ADDR
// hc_agressivity := 20 ;
61794: LD_ADDR_OWVAR 35
61798: PUSH
61799: LD_INT 20
61801: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61802: LD_ADDR_OWVAR 28
61806: PUSH
61807: LD_INT 17
61809: ST_TO_ADDR
// hc_gallery :=  ;
61810: LD_ADDR_OWVAR 33
61814: PUSH
61815: LD_STRING 
61817: ST_TO_ADDR
// hc_name :=  ;
61818: LD_ADDR_OWVAR 26
61822: PUSH
61823: LD_STRING 
61825: ST_TO_ADDR
// un := CreateHuman ;
61826: LD_ADDR_VAR 0 2
61830: PUSH
61831: CALL_OW 44
61835: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61836: LD_VAR 0 2
61840: PPUSH
61841: LD_INT 1
61843: PPUSH
61844: CALL_OW 51
// tmp := tmp ^ un ;
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_VAR 0 3
61857: PUSH
61858: LD_VAR 0 2
61862: ADD
61863: ST_TO_ADDR
// end ;
61864: GO 61760
61866: POP
61867: POP
// repeat wait ( 0 0$1 ) ;
61868: LD_INT 35
61870: PPUSH
61871: CALL_OW 67
// for un in tmp do
61875: LD_ADDR_VAR 0 2
61879: PUSH
61880: LD_VAR 0 3
61884: PUSH
61885: FOR_IN
61886: IFFALSE 61960
// begin if IsDead ( un ) then
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL_OW 301
61897: IFFALSE 61917
// begin tmp := tmp diff un ;
61899: LD_ADDR_VAR 0 3
61903: PUSH
61904: LD_VAR 0 3
61908: PUSH
61909: LD_VAR 0 2
61913: DIFF
61914: ST_TO_ADDR
// continue ;
61915: GO 61885
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61917: LD_VAR 0 2
61921: PPUSH
61922: LD_INT 3
61924: PUSH
61925: LD_INT 22
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PPUSH
61939: CALL_OW 69
61943: PPUSH
61944: LD_VAR 0 2
61948: PPUSH
61949: CALL_OW 74
61953: PPUSH
61954: CALL_OW 115
// end ;
61958: GO 61885
61960: POP
61961: POP
// until not tmp ;
61962: LD_VAR 0 3
61966: NOT
61967: IFFALSE 61868
// end ;
61969: PPOPN 3
61971: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61972: LD_EXP 45
61976: PUSH
61977: LD_EXP 70
61981: AND
61982: IFFALSE 62036
61984: GO 61986
61986: DISABLE
// begin ToLua ( displayTroll(); ) ;
61987: LD_STRING displayTroll();
61989: PPUSH
61990: CALL_OW 559
// wait ( 3 3$00 ) ;
61994: LD_INT 6300
61996: PPUSH
61997: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62001: LD_STRING hideTroll();
62003: PPUSH
62004: CALL_OW 559
// wait ( 1 1$00 ) ;
62008: LD_INT 2100
62010: PPUSH
62011: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62015: LD_STRING displayTroll();
62017: PPUSH
62018: CALL_OW 559
// wait ( 1 1$00 ) ;
62022: LD_INT 2100
62024: PPUSH
62025: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62029: LD_STRING hideTroll();
62031: PPUSH
62032: CALL_OW 559
// end ;
62036: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62037: LD_EXP 45
62041: PUSH
62042: LD_EXP 71
62046: AND
62047: IFFALSE 62110
62049: GO 62051
62051: DISABLE
62052: LD_INT 0
62054: PPUSH
// begin p := 0 ;
62055: LD_ADDR_VAR 0 1
62059: PUSH
62060: LD_INT 0
62062: ST_TO_ADDR
// repeat game_speed := 1 ;
62063: LD_ADDR_OWVAR 65
62067: PUSH
62068: LD_INT 1
62070: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62071: LD_INT 35
62073: PPUSH
62074: CALL_OW 67
// p := p + 1 ;
62078: LD_ADDR_VAR 0 1
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 1
62090: PLUS
62091: ST_TO_ADDR
// until p >= 60 ;
62092: LD_VAR 0 1
62096: PUSH
62097: LD_INT 60
62099: GREATEREQUAL
62100: IFFALSE 62063
// game_speed := 4 ;
62102: LD_ADDR_OWVAR 65
62106: PUSH
62107: LD_INT 4
62109: ST_TO_ADDR
// end ;
62110: PPOPN 1
62112: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62113: LD_EXP 45
62117: PUSH
62118: LD_EXP 72
62122: AND
62123: IFFALSE 62269
62125: GO 62127
62127: DISABLE
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62132: LD_ADDR_VAR 0 1
62136: PUSH
62137: LD_INT 22
62139: PUSH
62140: LD_OWVAR 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 30
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 30
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PPUSH
62181: CALL_OW 69
62185: ST_TO_ADDR
// if not depot then
62186: LD_VAR 0 1
62190: NOT
62191: IFFALSE 62195
// exit ;
62193: GO 62269
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62195: LD_ADDR_VAR 0 2
62199: PUSH
62200: LD_VAR 0 1
62204: PUSH
62205: LD_INT 1
62207: PPUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL_OW 12
62217: ARRAY
62218: PPUSH
62219: CALL_OW 274
62223: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62224: LD_VAR 0 2
62228: PPUSH
62229: LD_INT 1
62231: PPUSH
62232: LD_INT 0
62234: PPUSH
62235: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62239: LD_VAR 0 2
62243: PPUSH
62244: LD_INT 2
62246: PPUSH
62247: LD_INT 0
62249: PPUSH
62250: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62254: LD_VAR 0 2
62258: PPUSH
62259: LD_INT 3
62261: PPUSH
62262: LD_INT 0
62264: PPUSH
62265: CALL_OW 277
// end ;
62269: PPOPN 2
62271: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62272: LD_EXP 45
62276: PUSH
62277: LD_EXP 73
62281: AND
62282: IFFALSE 62379
62284: GO 62286
62286: DISABLE
62287: LD_INT 0
62289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62290: LD_ADDR_VAR 0 1
62294: PUSH
62295: LD_INT 22
62297: PUSH
62298: LD_OWVAR 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 21
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: LD_INT 23
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: PPUSH
62339: CALL_OW 69
62343: ST_TO_ADDR
// if not tmp then
62344: LD_VAR 0 1
62348: NOT
62349: IFFALSE 62353
// exit ;
62351: GO 62379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62353: LD_VAR 0 1
62357: PUSH
62358: LD_INT 1
62360: PPUSH
62361: LD_VAR 0 1
62365: PPUSH
62366: CALL_OW 12
62370: ARRAY
62371: PPUSH
62372: LD_INT 200
62374: PPUSH
62375: CALL_OW 234
// end ;
62379: PPOPN 1
62381: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62382: LD_EXP 45
62386: PUSH
62387: LD_EXP 74
62391: AND
62392: IFFALSE 62471
62394: GO 62396
62396: DISABLE
62397: LD_INT 0
62399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62400: LD_ADDR_VAR 0 1
62404: PUSH
62405: LD_INT 22
62407: PUSH
62408: LD_OWVAR 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 21
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PPUSH
62431: CALL_OW 69
62435: ST_TO_ADDR
// if not tmp then
62436: LD_VAR 0 1
62440: NOT
62441: IFFALSE 62445
// exit ;
62443: GO 62471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62445: LD_VAR 0 1
62449: PUSH
62450: LD_INT 1
62452: PPUSH
62453: LD_VAR 0 1
62457: PPUSH
62458: CALL_OW 12
62462: ARRAY
62463: PPUSH
62464: LD_INT 60
62466: PPUSH
62467: CALL_OW 234
// end ;
62471: PPOPN 1
62473: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62474: LD_EXP 45
62478: PUSH
62479: LD_EXP 75
62483: AND
62484: IFFALSE 62583
62486: GO 62488
62488: DISABLE
62489: LD_INT 0
62491: PPUSH
62492: PPUSH
// begin enable ;
62493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62494: LD_ADDR_VAR 0 1
62498: PUSH
62499: LD_INT 22
62501: PUSH
62502: LD_OWVAR 2
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 61
62513: PUSH
62514: EMPTY
62515: LIST
62516: PUSH
62517: LD_INT 33
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: PPUSH
62532: CALL_OW 69
62536: ST_TO_ADDR
// if not tmp then
62537: LD_VAR 0 1
62541: NOT
62542: IFFALSE 62546
// exit ;
62544: GO 62583
// for i in tmp do
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: FOR_IN
62557: IFFALSE 62581
// if IsControledBy ( i ) then
62559: LD_VAR 0 2
62563: PPUSH
62564: CALL_OW 312
62568: IFFALSE 62579
// ComUnlink ( i ) ;
62570: LD_VAR 0 2
62574: PPUSH
62575: CALL_OW 136
62579: GO 62556
62581: POP
62582: POP
// end ;
62583: PPOPN 2
62585: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62586: LD_EXP 45
62590: PUSH
62591: LD_EXP 76
62595: AND
62596: IFFALSE 62736
62598: GO 62600
62600: DISABLE
62601: LD_INT 0
62603: PPUSH
62604: PPUSH
// begin ToLua ( displayPowell(); ) ;
62605: LD_STRING displayPowell();
62607: PPUSH
62608: CALL_OW 559
// uc_side := 0 ;
62612: LD_ADDR_OWVAR 20
62616: PUSH
62617: LD_INT 0
62619: ST_TO_ADDR
// uc_nation := 2 ;
62620: LD_ADDR_OWVAR 21
62624: PUSH
62625: LD_INT 2
62627: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62628: LD_ADDR_OWVAR 37
62632: PUSH
62633: LD_INT 14
62635: ST_TO_ADDR
// vc_engine := engine_siberite ;
62636: LD_ADDR_OWVAR 39
62640: PUSH
62641: LD_INT 3
62643: ST_TO_ADDR
// vc_control := control_apeman ;
62644: LD_ADDR_OWVAR 38
62648: PUSH
62649: LD_INT 5
62651: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62652: LD_ADDR_OWVAR 40
62656: PUSH
62657: LD_INT 29
62659: ST_TO_ADDR
// un := CreateVehicle ;
62660: LD_ADDR_VAR 0 2
62664: PUSH
62665: CALL_OW 45
62669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62670: LD_VAR 0 2
62674: PPUSH
62675: LD_INT 1
62677: PPUSH
62678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62682: LD_INT 35
62684: PPUSH
62685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62689: LD_VAR 0 2
62693: PPUSH
62694: LD_INT 22
62696: PUSH
62697: LD_OWVAR 2
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PPUSH
62706: CALL_OW 69
62710: PPUSH
62711: LD_VAR 0 2
62715: PPUSH
62716: CALL_OW 74
62720: PPUSH
62721: CALL_OW 115
// until IsDead ( un ) ;
62725: LD_VAR 0 2
62729: PPUSH
62730: CALL_OW 301
62734: IFFALSE 62682
// end ;
62736: PPOPN 2
62738: END
// every 0 0$1 trigger StreamModeActive and sStu do
62739: LD_EXP 45
62743: PUSH
62744: LD_EXP 84
62748: AND
62749: IFFALSE 62765
62751: GO 62753
62753: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62754: LD_STRING displayStucuk();
62756: PPUSH
62757: CALL_OW 559
// ResetFog ;
62761: CALL_OW 335
// end ;
62765: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62766: LD_EXP 45
62770: PUSH
62771: LD_EXP 77
62775: AND
62776: IFFALSE 62917
62778: GO 62780
62780: DISABLE
62781: LD_INT 0
62783: PPUSH
62784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62785: LD_ADDR_VAR 0 2
62789: PUSH
62790: LD_INT 22
62792: PUSH
62793: LD_OWVAR 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 21
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PPUSH
62816: CALL_OW 69
62820: ST_TO_ADDR
// if not tmp then
62821: LD_VAR 0 2
62825: NOT
62826: IFFALSE 62830
// exit ;
62828: GO 62917
// un := tmp [ rand ( 1 , tmp ) ] ;
62830: LD_ADDR_VAR 0 1
62834: PUSH
62835: LD_VAR 0 2
62839: PUSH
62840: LD_INT 1
62842: PPUSH
62843: LD_VAR 0 2
62847: PPUSH
62848: CALL_OW 12
62852: ARRAY
62853: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62854: LD_VAR 0 1
62858: PPUSH
62859: LD_INT 0
62861: PPUSH
62862: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62866: LD_VAR 0 1
62870: PPUSH
62871: LD_OWVAR 3
62875: PUSH
62876: LD_VAR 0 1
62880: DIFF
62881: PPUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 74
62891: PPUSH
62892: CALL_OW 115
// wait ( 0 0$20 ) ;
62896: LD_INT 700
62898: PPUSH
62899: CALL_OW 67
// SetSide ( un , your_side ) ;
62903: LD_VAR 0 1
62907: PPUSH
62908: LD_OWVAR 2
62912: PPUSH
62913: CALL_OW 235
// end ;
62917: PPOPN 2
62919: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62920: LD_EXP 45
62924: PUSH
62925: LD_EXP 78
62929: AND
62930: IFFALSE 63036
62932: GO 62934
62934: DISABLE
62935: LD_INT 0
62937: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62938: LD_ADDR_VAR 0 1
62942: PUSH
62943: LD_INT 22
62945: PUSH
62946: LD_OWVAR 2
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: LD_INT 30
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 30
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: CALL_OW 69
62991: ST_TO_ADDR
// if not depot then
62992: LD_VAR 0 1
62996: NOT
62997: IFFALSE 63001
// exit ;
62999: GO 63036
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63001: LD_VAR 0 1
63005: PUSH
63006: LD_INT 1
63008: ARRAY
63009: PPUSH
63010: CALL_OW 250
63014: PPUSH
63015: LD_VAR 0 1
63019: PUSH
63020: LD_INT 1
63022: ARRAY
63023: PPUSH
63024: CALL_OW 251
63028: PPUSH
63029: LD_INT 70
63031: PPUSH
63032: CALL_OW 495
// end ;
63036: PPOPN 1
63038: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63039: LD_EXP 45
63043: PUSH
63044: LD_EXP 79
63048: AND
63049: IFFALSE 63260
63051: GO 63053
63053: DISABLE
63054: LD_INT 0
63056: PPUSH
63057: PPUSH
63058: PPUSH
63059: PPUSH
63060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63061: LD_ADDR_VAR 0 5
63065: PUSH
63066: LD_INT 22
63068: PUSH
63069: LD_OWVAR 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 21
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PPUSH
63092: CALL_OW 69
63096: ST_TO_ADDR
// if not tmp then
63097: LD_VAR 0 5
63101: NOT
63102: IFFALSE 63106
// exit ;
63104: GO 63260
// for i in tmp do
63106: LD_ADDR_VAR 0 1
63110: PUSH
63111: LD_VAR 0 5
63115: PUSH
63116: FOR_IN
63117: IFFALSE 63258
// begin d := rand ( 0 , 5 ) ;
63119: LD_ADDR_VAR 0 4
63123: PUSH
63124: LD_INT 0
63126: PPUSH
63127: LD_INT 5
63129: PPUSH
63130: CALL_OW 12
63134: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63135: LD_ADDR_VAR 0 2
63139: PUSH
63140: LD_VAR 0 1
63144: PPUSH
63145: CALL_OW 250
63149: PPUSH
63150: LD_VAR 0 4
63154: PPUSH
63155: LD_INT 3
63157: PPUSH
63158: LD_INT 12
63160: PPUSH
63161: CALL_OW 12
63165: PPUSH
63166: CALL_OW 272
63170: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63171: LD_ADDR_VAR 0 3
63175: PUSH
63176: LD_VAR 0 1
63180: PPUSH
63181: CALL_OW 251
63185: PPUSH
63186: LD_VAR 0 4
63190: PPUSH
63191: LD_INT 3
63193: PPUSH
63194: LD_INT 12
63196: PPUSH
63197: CALL_OW 12
63201: PPUSH
63202: CALL_OW 273
63206: ST_TO_ADDR
// if ValidHex ( x , y ) then
63207: LD_VAR 0 2
63211: PPUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: CALL_OW 488
63221: IFFALSE 63256
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63223: LD_VAR 0 1
63227: PPUSH
63228: LD_VAR 0 2
63232: PPUSH
63233: LD_VAR 0 3
63237: PPUSH
63238: LD_INT 3
63240: PPUSH
63241: LD_INT 6
63243: PPUSH
63244: CALL_OW 12
63248: PPUSH
63249: LD_INT 1
63251: PPUSH
63252: CALL_OW 483
// end ;
63256: GO 63116
63258: POP
63259: POP
// end ;
63260: PPOPN 5
63262: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63263: LD_EXP 45
63267: PUSH
63268: LD_EXP 80
63272: AND
63273: IFFALSE 63367
63275: GO 63277
63277: DISABLE
63278: LD_INT 0
63280: PPUSH
63281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63282: LD_ADDR_VAR 0 2
63286: PUSH
63287: LD_INT 22
63289: PUSH
63290: LD_OWVAR 2
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 32
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 21
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: PPUSH
63324: CALL_OW 69
63328: ST_TO_ADDR
// if not tmp then
63329: LD_VAR 0 2
63333: NOT
63334: IFFALSE 63338
// exit ;
63336: GO 63367
// for i in tmp do
63338: LD_ADDR_VAR 0 1
63342: PUSH
63343: LD_VAR 0 2
63347: PUSH
63348: FOR_IN
63349: IFFALSE 63365
// SetFuel ( i , 0 ) ;
63351: LD_VAR 0 1
63355: PPUSH
63356: LD_INT 0
63358: PPUSH
63359: CALL_OW 240
63363: GO 63348
63365: POP
63366: POP
// end ;
63367: PPOPN 2
63369: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63370: LD_EXP 45
63374: PUSH
63375: LD_EXP 81
63379: AND
63380: IFFALSE 63446
63382: GO 63384
63384: DISABLE
63385: LD_INT 0
63387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63388: LD_ADDR_VAR 0 1
63392: PUSH
63393: LD_INT 22
63395: PUSH
63396: LD_OWVAR 2
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 30
63407: PUSH
63408: LD_INT 29
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PPUSH
63419: CALL_OW 69
63423: ST_TO_ADDR
// if not tmp then
63424: LD_VAR 0 1
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63446
// DestroyUnit ( tmp [ 1 ] ) ;
63433: LD_VAR 0 1
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PPUSH
63442: CALL_OW 65
// end ;
63446: PPOPN 1
63448: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63449: LD_EXP 45
63453: PUSH
63454: LD_EXP 83
63458: AND
63459: IFFALSE 63588
63461: GO 63463
63463: DISABLE
63464: LD_INT 0
63466: PPUSH
// begin uc_side := 0 ;
63467: LD_ADDR_OWVAR 20
63471: PUSH
63472: LD_INT 0
63474: ST_TO_ADDR
// uc_nation := nation_arabian ;
63475: LD_ADDR_OWVAR 21
63479: PUSH
63480: LD_INT 2
63482: ST_TO_ADDR
// hc_gallery :=  ;
63483: LD_ADDR_OWVAR 33
63487: PUSH
63488: LD_STRING 
63490: ST_TO_ADDR
// hc_name :=  ;
63491: LD_ADDR_OWVAR 26
63495: PUSH
63496: LD_STRING 
63498: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63499: LD_INT 1
63501: PPUSH
63502: LD_INT 11
63504: PPUSH
63505: LD_INT 10
63507: PPUSH
63508: CALL_OW 380
// un := CreateHuman ;
63512: LD_ADDR_VAR 0 1
63516: PUSH
63517: CALL_OW 44
63521: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_INT 1
63529: PPUSH
63530: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63534: LD_INT 35
63536: PPUSH
63537: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63541: LD_VAR 0 1
63545: PPUSH
63546: LD_INT 22
63548: PUSH
63549: LD_OWVAR 2
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PPUSH
63558: CALL_OW 69
63562: PPUSH
63563: LD_VAR 0 1
63567: PPUSH
63568: CALL_OW 74
63572: PPUSH
63573: CALL_OW 115
// until IsDead ( un ) ;
63577: LD_VAR 0 1
63581: PPUSH
63582: CALL_OW 301
63586: IFFALSE 63534
// end ;
63588: PPOPN 1
63590: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63591: LD_EXP 45
63595: PUSH
63596: LD_EXP 85
63600: AND
63601: IFFALSE 63613
63603: GO 63605
63605: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63606: LD_STRING earthquake(getX(game), 0, 32)
63608: PPUSH
63609: CALL_OW 559
63613: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63614: LD_EXP 45
63618: PUSH
63619: LD_EXP 86
63623: AND
63624: IFFALSE 63715
63626: GO 63628
63628: DISABLE
63629: LD_INT 0
63631: PPUSH
// begin enable ;
63632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63633: LD_ADDR_VAR 0 1
63637: PUSH
63638: LD_INT 22
63640: PUSH
63641: LD_OWVAR 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 21
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 33
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: PPUSH
63675: CALL_OW 69
63679: ST_TO_ADDR
// if not tmp then
63680: LD_VAR 0 1
63684: NOT
63685: IFFALSE 63689
// exit ;
63687: GO 63715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 1
63696: PPUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: CALL_OW 12
63706: ARRAY
63707: PPUSH
63708: LD_INT 1
63710: PPUSH
63711: CALL_OW 234
// end ;
63715: PPOPN 1
63717: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63718: LD_EXP 45
63722: PUSH
63723: LD_EXP 87
63727: AND
63728: IFFALSE 63869
63730: GO 63732
63732: DISABLE
63733: LD_INT 0
63735: PPUSH
63736: PPUSH
63737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_INT 22
63745: PUSH
63746: LD_OWVAR 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 25
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PPUSH
63769: CALL_OW 69
63773: ST_TO_ADDR
// if not tmp then
63774: LD_VAR 0 3
63778: NOT
63779: IFFALSE 63783
// exit ;
63781: GO 63869
// un := tmp [ rand ( 1 , tmp ) ] ;
63783: LD_ADDR_VAR 0 2
63787: PUSH
63788: LD_VAR 0 3
63792: PUSH
63793: LD_INT 1
63795: PPUSH
63796: LD_VAR 0 3
63800: PPUSH
63801: CALL_OW 12
63805: ARRAY
63806: ST_TO_ADDR
// if Crawls ( un ) then
63807: LD_VAR 0 2
63811: PPUSH
63812: CALL_OW 318
63816: IFFALSE 63827
// ComWalk ( un ) ;
63818: LD_VAR 0 2
63822: PPUSH
63823: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63827: LD_VAR 0 2
63831: PPUSH
63832: LD_INT 9
63834: PPUSH
63835: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63839: LD_INT 28
63841: PPUSH
63842: LD_OWVAR 2
63846: PPUSH
63847: LD_INT 2
63849: PPUSH
63850: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63854: LD_INT 29
63856: PPUSH
63857: LD_OWVAR 2
63861: PPUSH
63862: LD_INT 2
63864: PPUSH
63865: CALL_OW 322
// end ;
63869: PPOPN 3
63871: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63872: LD_EXP 45
63876: PUSH
63877: LD_EXP 88
63881: AND
63882: IFFALSE 63993
63884: GO 63886
63886: DISABLE
63887: LD_INT 0
63889: PPUSH
63890: PPUSH
63891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63892: LD_ADDR_VAR 0 3
63896: PUSH
63897: LD_INT 22
63899: PUSH
63900: LD_OWVAR 2
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 25
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PPUSH
63923: CALL_OW 69
63927: ST_TO_ADDR
// if not tmp then
63928: LD_VAR 0 3
63932: NOT
63933: IFFALSE 63937
// exit ;
63935: GO 63993
// un := tmp [ rand ( 1 , tmp ) ] ;
63937: LD_ADDR_VAR 0 2
63941: PUSH
63942: LD_VAR 0 3
63946: PUSH
63947: LD_INT 1
63949: PPUSH
63950: LD_VAR 0 3
63954: PPUSH
63955: CALL_OW 12
63959: ARRAY
63960: ST_TO_ADDR
// if Crawls ( un ) then
63961: LD_VAR 0 2
63965: PPUSH
63966: CALL_OW 318
63970: IFFALSE 63981
// ComWalk ( un ) ;
63972: LD_VAR 0 2
63976: PPUSH
63977: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63981: LD_VAR 0 2
63985: PPUSH
63986: LD_INT 8
63988: PPUSH
63989: CALL_OW 336
// end ;
63993: PPOPN 3
63995: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63996: LD_EXP 45
64000: PUSH
64001: LD_EXP 89
64005: AND
64006: IFFALSE 64150
64008: GO 64010
64010: DISABLE
64011: LD_INT 0
64013: PPUSH
64014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64015: LD_ADDR_VAR 0 2
64019: PUSH
64020: LD_INT 22
64022: PUSH
64023: LD_OWVAR 2
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 21
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: LD_INT 34
64047: PUSH
64048: LD_INT 12
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 34
64057: PUSH
64058: LD_INT 51
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 34
64067: PUSH
64068: LD_INT 32
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: PPUSH
64086: CALL_OW 69
64090: ST_TO_ADDR
// if not tmp then
64091: LD_VAR 0 2
64095: NOT
64096: IFFALSE 64100
// exit ;
64098: GO 64150
// for i in tmp do
64100: LD_ADDR_VAR 0 1
64104: PUSH
64105: LD_VAR 0 2
64109: PUSH
64110: FOR_IN
64111: IFFALSE 64148
// if GetCargo ( i , mat_artifact ) = 0 then
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_INT 4
64120: PPUSH
64121: CALL_OW 289
64125: PUSH
64126: LD_INT 0
64128: EQUAL
64129: IFFALSE 64146
// SetCargo ( i , mat_siberit , 100 ) ;
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_INT 3
64138: PPUSH
64139: LD_INT 100
64141: PPUSH
64142: CALL_OW 290
64146: GO 64110
64148: POP
64149: POP
// end ;
64150: PPOPN 2
64152: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64153: LD_EXP 45
64157: PUSH
64158: LD_EXP 90
64162: AND
64163: IFFALSE 64346
64165: GO 64167
64167: DISABLE
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64172: LD_ADDR_VAR 0 2
64176: PUSH
64177: LD_INT 22
64179: PUSH
64180: LD_OWVAR 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PPUSH
64189: CALL_OW 69
64193: ST_TO_ADDR
// if not tmp then
64194: LD_VAR 0 2
64198: NOT
64199: IFFALSE 64203
// exit ;
64201: GO 64346
// for i := 1 to 2 do
64203: LD_ADDR_VAR 0 1
64207: PUSH
64208: DOUBLE
64209: LD_INT 1
64211: DEC
64212: ST_TO_ADDR
64213: LD_INT 2
64215: PUSH
64216: FOR_TO
64217: IFFALSE 64344
// begin uc_side := your_side ;
64219: LD_ADDR_OWVAR 20
64223: PUSH
64224: LD_OWVAR 2
64228: ST_TO_ADDR
// uc_nation := nation_american ;
64229: LD_ADDR_OWVAR 21
64233: PUSH
64234: LD_INT 1
64236: ST_TO_ADDR
// vc_chassis := us_morphling ;
64237: LD_ADDR_OWVAR 37
64241: PUSH
64242: LD_INT 5
64244: ST_TO_ADDR
// vc_engine := engine_siberite ;
64245: LD_ADDR_OWVAR 39
64249: PUSH
64250: LD_INT 3
64252: ST_TO_ADDR
// vc_control := control_computer ;
64253: LD_ADDR_OWVAR 38
64257: PUSH
64258: LD_INT 3
64260: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64261: LD_ADDR_OWVAR 40
64265: PUSH
64266: LD_INT 10
64268: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 1
64276: ARRAY
64277: PPUSH
64278: CALL_OW 310
64282: NOT
64283: IFFALSE 64330
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64285: CALL_OW 45
64289: PPUSH
64290: LD_VAR 0 2
64294: PUSH
64295: LD_INT 1
64297: ARRAY
64298: PPUSH
64299: CALL_OW 250
64303: PPUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 1
64311: ARRAY
64312: PPUSH
64313: CALL_OW 251
64317: PPUSH
64318: LD_INT 12
64320: PPUSH
64321: LD_INT 1
64323: PPUSH
64324: CALL_OW 50
64328: GO 64342
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64330: CALL_OW 45
64334: PPUSH
64335: LD_INT 1
64337: PPUSH
64338: CALL_OW 51
// end ;
64342: GO 64216
64344: POP
64345: POP
// end ;
64346: PPOPN 2
64348: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64349: LD_EXP 45
64353: PUSH
64354: LD_EXP 91
64358: AND
64359: IFFALSE 64581
64361: GO 64363
64363: DISABLE
64364: LD_INT 0
64366: PPUSH
64367: PPUSH
64368: PPUSH
64369: PPUSH
64370: PPUSH
64371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64372: LD_ADDR_VAR 0 6
64376: PUSH
64377: LD_INT 22
64379: PUSH
64380: LD_OWVAR 2
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 21
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 23
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: LIST
64420: PPUSH
64421: CALL_OW 69
64425: ST_TO_ADDR
// if not tmp then
64426: LD_VAR 0 6
64430: NOT
64431: IFFALSE 64435
// exit ;
64433: GO 64581
// s1 := rand ( 1 , 4 ) ;
64435: LD_ADDR_VAR 0 2
64439: PUSH
64440: LD_INT 1
64442: PPUSH
64443: LD_INT 4
64445: PPUSH
64446: CALL_OW 12
64450: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64451: LD_ADDR_VAR 0 4
64455: PUSH
64456: LD_VAR 0 6
64460: PUSH
64461: LD_INT 1
64463: ARRAY
64464: PPUSH
64465: LD_VAR 0 2
64469: PPUSH
64470: CALL_OW 259
64474: ST_TO_ADDR
// if s1 = 1 then
64475: LD_VAR 0 2
64479: PUSH
64480: LD_INT 1
64482: EQUAL
64483: IFFALSE 64503
// s2 := rand ( 2 , 4 ) else
64485: LD_ADDR_VAR 0 3
64489: PUSH
64490: LD_INT 2
64492: PPUSH
64493: LD_INT 4
64495: PPUSH
64496: CALL_OW 12
64500: ST_TO_ADDR
64501: GO 64511
// s2 := 1 ;
64503: LD_ADDR_VAR 0 3
64507: PUSH
64508: LD_INT 1
64510: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64511: LD_ADDR_VAR 0 5
64515: PUSH
64516: LD_VAR 0 6
64520: PUSH
64521: LD_INT 1
64523: ARRAY
64524: PPUSH
64525: LD_VAR 0 3
64529: PPUSH
64530: CALL_OW 259
64534: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64535: LD_VAR 0 6
64539: PUSH
64540: LD_INT 1
64542: ARRAY
64543: PPUSH
64544: LD_VAR 0 2
64548: PPUSH
64549: LD_VAR 0 5
64553: PPUSH
64554: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64558: LD_VAR 0 6
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: PPUSH
64567: LD_VAR 0 3
64571: PPUSH
64572: LD_VAR 0 4
64576: PPUSH
64577: CALL_OW 237
// end ;
64581: PPOPN 6
64583: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64584: LD_EXP 45
64588: PUSH
64589: LD_EXP 92
64593: AND
64594: IFFALSE 64673
64596: GO 64598
64598: DISABLE
64599: LD_INT 0
64601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64602: LD_ADDR_VAR 0 1
64606: PUSH
64607: LD_INT 22
64609: PUSH
64610: LD_OWVAR 2
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 30
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PPUSH
64633: CALL_OW 69
64637: ST_TO_ADDR
// if not tmp then
64638: LD_VAR 0 1
64642: NOT
64643: IFFALSE 64647
// exit ;
64645: GO 64673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64647: LD_VAR 0 1
64651: PUSH
64652: LD_INT 1
64654: PPUSH
64655: LD_VAR 0 1
64659: PPUSH
64660: CALL_OW 12
64664: ARRAY
64665: PPUSH
64666: LD_INT 1
64668: PPUSH
64669: CALL_OW 234
// end ;
64673: PPOPN 1
64675: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64676: LD_EXP 45
64680: PUSH
64681: LD_EXP 93
64685: AND
64686: IFFALSE 64798
64688: GO 64690
64690: DISABLE
64691: LD_INT 0
64693: PPUSH
64694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64695: LD_ADDR_VAR 0 2
64699: PUSH
64700: LD_INT 22
64702: PUSH
64703: LD_OWVAR 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 30
64717: PUSH
64718: LD_INT 27
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 30
64727: PUSH
64728: LD_INT 26
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 30
64737: PUSH
64738: LD_INT 28
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PPUSH
64755: CALL_OW 69
64759: ST_TO_ADDR
// if not tmp then
64760: LD_VAR 0 2
64764: NOT
64765: IFFALSE 64769
// exit ;
64767: GO 64798
// for i in tmp do
64769: LD_ADDR_VAR 0 1
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: FOR_IN
64780: IFFALSE 64796
// SetLives ( i , 1 ) ;
64782: LD_VAR 0 1
64786: PPUSH
64787: LD_INT 1
64789: PPUSH
64790: CALL_OW 234
64794: GO 64779
64796: POP
64797: POP
// end ;
64798: PPOPN 2
64800: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64801: LD_EXP 45
64805: PUSH
64806: LD_EXP 94
64810: AND
64811: IFFALSE 65098
64813: GO 64815
64815: DISABLE
64816: LD_INT 0
64818: PPUSH
64819: PPUSH
64820: PPUSH
// begin i := rand ( 1 , 7 ) ;
64821: LD_ADDR_VAR 0 1
64825: PUSH
64826: LD_INT 1
64828: PPUSH
64829: LD_INT 7
64831: PPUSH
64832: CALL_OW 12
64836: ST_TO_ADDR
// case i of 1 :
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 1
64844: DOUBLE
64845: EQUAL
64846: IFTRUE 64850
64848: GO 64860
64850: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64851: LD_STRING earthquake(getX(game), 0, 32)
64853: PPUSH
64854: CALL_OW 559
64858: GO 65098
64860: LD_INT 2
64862: DOUBLE
64863: EQUAL
64864: IFTRUE 64868
64866: GO 64882
64868: POP
// begin ToLua ( displayStucuk(); ) ;
64869: LD_STRING displayStucuk();
64871: PPUSH
64872: CALL_OW 559
// ResetFog ;
64876: CALL_OW 335
// end ; 3 :
64880: GO 65098
64882: LD_INT 3
64884: DOUBLE
64885: EQUAL
64886: IFTRUE 64890
64888: GO 64994
64890: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64891: LD_ADDR_VAR 0 2
64895: PUSH
64896: LD_INT 22
64898: PUSH
64899: LD_OWVAR 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 25
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PPUSH
64922: CALL_OW 69
64926: ST_TO_ADDR
// if not tmp then
64927: LD_VAR 0 2
64931: NOT
64932: IFFALSE 64936
// exit ;
64934: GO 65098
// un := tmp [ rand ( 1 , tmp ) ] ;
64936: LD_ADDR_VAR 0 3
64940: PUSH
64941: LD_VAR 0 2
64945: PUSH
64946: LD_INT 1
64948: PPUSH
64949: LD_VAR 0 2
64953: PPUSH
64954: CALL_OW 12
64958: ARRAY
64959: ST_TO_ADDR
// if Crawls ( un ) then
64960: LD_VAR 0 3
64964: PPUSH
64965: CALL_OW 318
64969: IFFALSE 64980
// ComWalk ( un ) ;
64971: LD_VAR 0 3
64975: PPUSH
64976: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64980: LD_VAR 0 3
64984: PPUSH
64985: LD_INT 8
64987: PPUSH
64988: CALL_OW 336
// end ; 4 :
64992: GO 65098
64994: LD_INT 4
64996: DOUBLE
64997: EQUAL
64998: IFTRUE 65002
65000: GO 65076
65002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65003: LD_ADDR_VAR 0 2
65007: PUSH
65008: LD_INT 22
65010: PUSH
65011: LD_OWVAR 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 30
65022: PUSH
65023: LD_INT 29
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PPUSH
65034: CALL_OW 69
65038: ST_TO_ADDR
// if not tmp then
65039: LD_VAR 0 2
65043: NOT
65044: IFFALSE 65048
// exit ;
65046: GO 65098
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65048: LD_VAR 0 2
65052: PUSH
65053: LD_INT 1
65055: ARRAY
65056: PPUSH
65057: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65061: LD_VAR 0 2
65065: PUSH
65066: LD_INT 1
65068: ARRAY
65069: PPUSH
65070: CALL_OW 65
// end ; 5 .. 7 :
65074: GO 65098
65076: LD_INT 5
65078: DOUBLE
65079: GREATEREQUAL
65080: IFFALSE 65088
65082: LD_INT 7
65084: DOUBLE
65085: LESSEQUAL
65086: IFTRUE 65090
65088: GO 65097
65090: POP
// StreamSibBomb ; end ;
65091: CALL 61335 0 0
65095: GO 65098
65097: POP
// end ;
65098: PPOPN 3
65100: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65101: LD_EXP 45
65105: PUSH
65106: LD_EXP 95
65110: AND
65111: IFFALSE 65267
65113: GO 65115
65115: DISABLE
65116: LD_INT 0
65118: PPUSH
65119: PPUSH
65120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65121: LD_ADDR_VAR 0 2
65125: PUSH
65126: LD_INT 81
65128: PUSH
65129: LD_OWVAR 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: LD_INT 21
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 21
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 69
65174: ST_TO_ADDR
// if not tmp then
65175: LD_VAR 0 2
65179: NOT
65180: IFFALSE 65184
// exit ;
65182: GO 65267
// p := 0 ;
65184: LD_ADDR_VAR 0 3
65188: PUSH
65189: LD_INT 0
65191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65192: LD_INT 35
65194: PPUSH
65195: CALL_OW 67
// p := p + 1 ;
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_VAR 0 3
65208: PUSH
65209: LD_INT 1
65211: PLUS
65212: ST_TO_ADDR
// for i in tmp do
65213: LD_ADDR_VAR 0 1
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: FOR_IN
65224: IFFALSE 65255
// if GetLives ( i ) < 1000 then
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 256
65235: PUSH
65236: LD_INT 1000
65238: LESS
65239: IFFALSE 65253
// SetLives ( i , 1000 ) ;
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_INT 1000
65248: PPUSH
65249: CALL_OW 234
65253: GO 65223
65255: POP
65256: POP
// until p > 20 ;
65257: LD_VAR 0 3
65261: PUSH
65262: LD_INT 20
65264: GREATER
65265: IFFALSE 65192
// end ;
65267: PPOPN 3
65269: END
// every 0 0$1 trigger StreamModeActive and sTime do
65270: LD_EXP 45
65274: PUSH
65275: LD_EXP 96
65279: AND
65280: IFFALSE 65315
65282: GO 65284
65284: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65285: LD_INT 28
65287: PPUSH
65288: LD_OWVAR 2
65292: PPUSH
65293: LD_INT 2
65295: PPUSH
65296: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65300: LD_INT 30
65302: PPUSH
65303: LD_OWVAR 2
65307: PPUSH
65308: LD_INT 2
65310: PPUSH
65311: CALL_OW 322
// end ;
65315: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65316: LD_EXP 45
65320: PUSH
65321: LD_EXP 97
65325: AND
65326: IFFALSE 65447
65328: GO 65330
65330: DISABLE
65331: LD_INT 0
65333: PPUSH
65334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65335: LD_ADDR_VAR 0 2
65339: PUSH
65340: LD_INT 22
65342: PUSH
65343: LD_OWVAR 2
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 21
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: LD_INT 23
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: PPUSH
65384: CALL_OW 69
65388: ST_TO_ADDR
// if not tmp then
65389: LD_VAR 0 2
65393: NOT
65394: IFFALSE 65398
// exit ;
65396: GO 65447
// for i in tmp do
65398: LD_ADDR_VAR 0 1
65402: PUSH
65403: LD_VAR 0 2
65407: PUSH
65408: FOR_IN
65409: IFFALSE 65445
// begin if Crawls ( i ) then
65411: LD_VAR 0 1
65415: PPUSH
65416: CALL_OW 318
65420: IFFALSE 65431
// ComWalk ( i ) ;
65422: LD_VAR 0 1
65426: PPUSH
65427: CALL_OW 138
// SetClass ( i , 2 ) ;
65431: LD_VAR 0 1
65435: PPUSH
65436: LD_INT 2
65438: PPUSH
65439: CALL_OW 336
// end ;
65443: GO 65408
65445: POP
65446: POP
// end ;
65447: PPOPN 2
65449: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65450: LD_EXP 45
65454: PUSH
65455: LD_EXP 98
65459: AND
65460: IFFALSE 65748
65462: GO 65464
65464: DISABLE
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
65469: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65470: LD_OWVAR 2
65474: PPUSH
65475: LD_INT 9
65477: PPUSH
65478: LD_INT 1
65480: PPUSH
65481: LD_INT 1
65483: PPUSH
65484: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65488: LD_INT 9
65490: PPUSH
65491: LD_OWVAR 2
65495: PPUSH
65496: CALL_OW 343
// uc_side := 9 ;
65500: LD_ADDR_OWVAR 20
65504: PUSH
65505: LD_INT 9
65507: ST_TO_ADDR
// uc_nation := 2 ;
65508: LD_ADDR_OWVAR 21
65512: PUSH
65513: LD_INT 2
65515: ST_TO_ADDR
// hc_name := Dark Warrior ;
65516: LD_ADDR_OWVAR 26
65520: PUSH
65521: LD_STRING Dark Warrior
65523: ST_TO_ADDR
// hc_gallery :=  ;
65524: LD_ADDR_OWVAR 33
65528: PUSH
65529: LD_STRING 
65531: ST_TO_ADDR
// hc_noskilllimit := true ;
65532: LD_ADDR_OWVAR 76
65536: PUSH
65537: LD_INT 1
65539: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65540: LD_ADDR_OWVAR 31
65544: PUSH
65545: LD_INT 30
65547: PUSH
65548: LD_INT 30
65550: PUSH
65551: LD_INT 30
65553: PUSH
65554: LD_INT 30
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: ST_TO_ADDR
// un := CreateHuman ;
65563: LD_ADDR_VAR 0 3
65567: PUSH
65568: CALL_OW 44
65572: ST_TO_ADDR
// hc_noskilllimit := false ;
65573: LD_ADDR_OWVAR 76
65577: PUSH
65578: LD_INT 0
65580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65581: LD_VAR 0 3
65585: PPUSH
65586: LD_INT 1
65588: PPUSH
65589: CALL_OW 51
// ToLua ( playRanger() ) ;
65593: LD_STRING playRanger()
65595: PPUSH
65596: CALL_OW 559
// p := 0 ;
65600: LD_ADDR_VAR 0 2
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65608: LD_INT 35
65610: PPUSH
65611: CALL_OW 67
// p := p + 1 ;
65615: LD_ADDR_VAR 0 2
65619: PUSH
65620: LD_VAR 0 2
65624: PUSH
65625: LD_INT 1
65627: PLUS
65628: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65629: LD_VAR 0 3
65633: PPUSH
65634: CALL_OW 256
65638: PUSH
65639: LD_INT 1000
65641: LESS
65642: IFFALSE 65656
// SetLives ( un , 1000 ) ;
65644: LD_VAR 0 3
65648: PPUSH
65649: LD_INT 1000
65651: PPUSH
65652: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65656: LD_VAR 0 3
65660: PPUSH
65661: LD_INT 81
65663: PUSH
65664: LD_OWVAR 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 91
65675: PUSH
65676: LD_VAR 0 3
65680: PUSH
65681: LD_INT 30
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PPUSH
65693: CALL_OW 69
65697: PPUSH
65698: LD_VAR 0 3
65702: PPUSH
65703: CALL_OW 74
65707: PPUSH
65708: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65712: LD_VAR 0 2
65716: PUSH
65717: LD_INT 80
65719: GREATER
65720: PUSH
65721: LD_VAR 0 3
65725: PPUSH
65726: CALL_OW 301
65730: OR
65731: IFFALSE 65608
// if un then
65733: LD_VAR 0 3
65737: IFFALSE 65748
// RemoveUnit ( un ) ;
65739: LD_VAR 0 3
65743: PPUSH
65744: CALL_OW 64
// end ;
65748: PPOPN 3
65750: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65751: LD_EXP 99
65755: IFFALSE 65871
65757: GO 65759
65759: DISABLE
65760: LD_INT 0
65762: PPUSH
65763: PPUSH
65764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65765: LD_ADDR_VAR 0 2
65769: PUSH
65770: LD_INT 81
65772: PUSH
65773: LD_OWVAR 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 21
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PPUSH
65796: CALL_OW 69
65800: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65801: LD_STRING playComputer()
65803: PPUSH
65804: CALL_OW 559
// if not tmp then
65808: LD_VAR 0 2
65812: NOT
65813: IFFALSE 65817
// exit ;
65815: GO 65871
// for i in tmp do
65817: LD_ADDR_VAR 0 1
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: FOR_IN
65828: IFFALSE 65869
// for j := 1 to 4 do
65830: LD_ADDR_VAR 0 3
65834: PUSH
65835: DOUBLE
65836: LD_INT 1
65838: DEC
65839: ST_TO_ADDR
65840: LD_INT 4
65842: PUSH
65843: FOR_TO
65844: IFFALSE 65865
// SetSkill ( i , j , 10 ) ;
65846: LD_VAR 0 1
65850: PPUSH
65851: LD_VAR 0 3
65855: PPUSH
65856: LD_INT 10
65858: PPUSH
65859: CALL_OW 237
65863: GO 65843
65865: POP
65866: POP
65867: GO 65827
65869: POP
65870: POP
// end ;
65871: PPOPN 3
65873: END
// every 0 0$1 trigger s30 do var i , tmp ;
65874: LD_EXP 100
65878: IFFALSE 65947
65880: GO 65882
65882: DISABLE
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65887: LD_ADDR_VAR 0 2
65891: PUSH
65892: LD_INT 22
65894: PUSH
65895: LD_OWVAR 2
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PPUSH
65904: CALL_OW 69
65908: ST_TO_ADDR
// if not tmp then
65909: LD_VAR 0 2
65913: NOT
65914: IFFALSE 65918
// exit ;
65916: GO 65947
// for i in tmp do
65918: LD_ADDR_VAR 0 1
65922: PUSH
65923: LD_VAR 0 2
65927: PUSH
65928: FOR_IN
65929: IFFALSE 65945
// SetLives ( i , 300 ) ;
65931: LD_VAR 0 1
65935: PPUSH
65936: LD_INT 300
65938: PPUSH
65939: CALL_OW 234
65943: GO 65928
65945: POP
65946: POP
// end ;
65947: PPOPN 2
65949: END
// every 0 0$1 trigger s60 do var i , tmp ;
65950: LD_EXP 101
65954: IFFALSE 66023
65956: GO 65958
65958: DISABLE
65959: LD_INT 0
65961: PPUSH
65962: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65963: LD_ADDR_VAR 0 2
65967: PUSH
65968: LD_INT 22
65970: PUSH
65971: LD_OWVAR 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PPUSH
65980: CALL_OW 69
65984: ST_TO_ADDR
// if not tmp then
65985: LD_VAR 0 2
65989: NOT
65990: IFFALSE 65994
// exit ;
65992: GO 66023
// for i in tmp do
65994: LD_ADDR_VAR 0 1
65998: PUSH
65999: LD_VAR 0 2
66003: PUSH
66004: FOR_IN
66005: IFFALSE 66021
// SetLives ( i , 600 ) ;
66007: LD_VAR 0 1
66011: PPUSH
66012: LD_INT 600
66014: PPUSH
66015: CALL_OW 234
66019: GO 66004
66021: POP
66022: POP
// end ;
66023: PPOPN 2
66025: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66026: LD_INT 0
66028: PPUSH
// case cmd of 301 :
66029: LD_VAR 0 1
66033: PUSH
66034: LD_INT 301
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66042
66040: GO 66074
66042: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66043: LD_VAR 0 6
66047: PPUSH
66048: LD_VAR 0 7
66052: PPUSH
66053: LD_VAR 0 8
66057: PPUSH
66058: LD_VAR 0 4
66062: PPUSH
66063: LD_VAR 0 5
66067: PPUSH
66068: CALL 67283 0 5
66072: GO 66195
66074: LD_INT 302
66076: DOUBLE
66077: EQUAL
66078: IFTRUE 66082
66080: GO 66119
66082: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66083: LD_VAR 0 6
66087: PPUSH
66088: LD_VAR 0 7
66092: PPUSH
66093: LD_VAR 0 8
66097: PPUSH
66098: LD_VAR 0 9
66102: PPUSH
66103: LD_VAR 0 4
66107: PPUSH
66108: LD_VAR 0 5
66112: PPUSH
66113: CALL 67374 0 6
66117: GO 66195
66119: LD_INT 303
66121: DOUBLE
66122: EQUAL
66123: IFTRUE 66127
66125: GO 66164
66127: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66128: LD_VAR 0 6
66132: PPUSH
66133: LD_VAR 0 7
66137: PPUSH
66138: LD_VAR 0 8
66142: PPUSH
66143: LD_VAR 0 9
66147: PPUSH
66148: LD_VAR 0 4
66152: PPUSH
66153: LD_VAR 0 5
66157: PPUSH
66158: CALL 66200 0 6
66162: GO 66195
66164: LD_INT 304
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66194
66172: POP
// hHackTeleport ( unit , x , y ) ; end ;
66173: LD_VAR 0 2
66177: PPUSH
66178: LD_VAR 0 4
66182: PPUSH
66183: LD_VAR 0 5
66187: PPUSH
66188: CALL 67967 0 3
66192: GO 66195
66194: POP
// end ;
66195: LD_VAR 0 12
66199: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66200: LD_INT 0
66202: PPUSH
66203: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 1
66211: LESS
66212: PUSH
66213: LD_VAR 0 1
66217: PUSH
66218: LD_INT 3
66220: GREATER
66221: OR
66222: PUSH
66223: LD_VAR 0 5
66227: PPUSH
66228: LD_VAR 0 6
66232: PPUSH
66233: CALL_OW 428
66237: OR
66238: IFFALSE 66242
// exit ;
66240: GO 66970
// uc_side := your_side ;
66242: LD_ADDR_OWVAR 20
66246: PUSH
66247: LD_OWVAR 2
66251: ST_TO_ADDR
// uc_nation := nation ;
66252: LD_ADDR_OWVAR 21
66256: PUSH
66257: LD_VAR 0 1
66261: ST_TO_ADDR
// bc_level = 1 ;
66262: LD_ADDR_OWVAR 43
66266: PUSH
66267: LD_INT 1
66269: ST_TO_ADDR
// case btype of 1 :
66270: LD_VAR 0 2
66274: PUSH
66275: LD_INT 1
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66283
66281: GO 66294
66283: POP
// bc_type := b_depot ; 2 :
66284: LD_ADDR_OWVAR 42
66288: PUSH
66289: LD_INT 0
66291: ST_TO_ADDR
66292: GO 66914
66294: LD_INT 2
66296: DOUBLE
66297: EQUAL
66298: IFTRUE 66302
66300: GO 66313
66302: POP
// bc_type := b_warehouse ; 3 :
66303: LD_ADDR_OWVAR 42
66307: PUSH
66308: LD_INT 1
66310: ST_TO_ADDR
66311: GO 66914
66313: LD_INT 3
66315: DOUBLE
66316: EQUAL
66317: IFTRUE 66321
66319: GO 66332
66321: POP
// bc_type := b_lab ; 4 .. 9 :
66322: LD_ADDR_OWVAR 42
66326: PUSH
66327: LD_INT 6
66329: ST_TO_ADDR
66330: GO 66914
66332: LD_INT 4
66334: DOUBLE
66335: GREATEREQUAL
66336: IFFALSE 66344
66338: LD_INT 9
66340: DOUBLE
66341: LESSEQUAL
66342: IFTRUE 66346
66344: GO 66406
66346: POP
// begin bc_type := b_lab_half ;
66347: LD_ADDR_OWVAR 42
66351: PUSH
66352: LD_INT 7
66354: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66355: LD_ADDR_OWVAR 44
66359: PUSH
66360: LD_INT 10
66362: PUSH
66363: LD_INT 11
66365: PUSH
66366: LD_INT 12
66368: PUSH
66369: LD_INT 15
66371: PUSH
66372: LD_INT 14
66374: PUSH
66375: LD_INT 13
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: PUSH
66386: LD_VAR 0 2
66390: PUSH
66391: LD_INT 3
66393: MINUS
66394: ARRAY
66395: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66396: LD_ADDR_OWVAR 45
66400: PUSH
66401: LD_INT 9
66403: ST_TO_ADDR
// end ; 10 .. 13 :
66404: GO 66914
66406: LD_INT 10
66408: DOUBLE
66409: GREATEREQUAL
66410: IFFALSE 66418
66412: LD_INT 13
66414: DOUBLE
66415: LESSEQUAL
66416: IFTRUE 66420
66418: GO 66497
66420: POP
// begin bc_type := b_lab_full ;
66421: LD_ADDR_OWVAR 42
66425: PUSH
66426: LD_INT 8
66428: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66429: LD_ADDR_OWVAR 44
66433: PUSH
66434: LD_INT 10
66436: PUSH
66437: LD_INT 12
66439: PUSH
66440: LD_INT 14
66442: PUSH
66443: LD_INT 13
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: PUSH
66452: LD_VAR 0 2
66456: PUSH
66457: LD_INT 9
66459: MINUS
66460: ARRAY
66461: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66462: LD_ADDR_OWVAR 45
66466: PUSH
66467: LD_INT 11
66469: PUSH
66470: LD_INT 15
66472: PUSH
66473: LD_INT 12
66475: PUSH
66476: LD_INT 15
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: PUSH
66485: LD_VAR 0 2
66489: PUSH
66490: LD_INT 9
66492: MINUS
66493: ARRAY
66494: ST_TO_ADDR
// end ; 14 :
66495: GO 66914
66497: LD_INT 14
66499: DOUBLE
66500: EQUAL
66501: IFTRUE 66505
66503: GO 66516
66505: POP
// bc_type := b_workshop ; 15 :
66506: LD_ADDR_OWVAR 42
66510: PUSH
66511: LD_INT 2
66513: ST_TO_ADDR
66514: GO 66914
66516: LD_INT 15
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66524
66522: GO 66535
66524: POP
// bc_type := b_factory ; 16 :
66525: LD_ADDR_OWVAR 42
66529: PUSH
66530: LD_INT 3
66532: ST_TO_ADDR
66533: GO 66914
66535: LD_INT 16
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66543
66541: GO 66554
66543: POP
// bc_type := b_ext_gun ; 17 :
66544: LD_ADDR_OWVAR 42
66548: PUSH
66549: LD_INT 17
66551: ST_TO_ADDR
66552: GO 66914
66554: LD_INT 17
66556: DOUBLE
66557: EQUAL
66558: IFTRUE 66562
66560: GO 66590
66562: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66563: LD_ADDR_OWVAR 42
66567: PUSH
66568: LD_INT 19
66570: PUSH
66571: LD_INT 23
66573: PUSH
66574: LD_INT 19
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: PUSH
66582: LD_VAR 0 1
66586: ARRAY
66587: ST_TO_ADDR
66588: GO 66914
66590: LD_INT 18
66592: DOUBLE
66593: EQUAL
66594: IFTRUE 66598
66596: GO 66609
66598: POP
// bc_type := b_ext_radar ; 19 :
66599: LD_ADDR_OWVAR 42
66603: PUSH
66604: LD_INT 20
66606: ST_TO_ADDR
66607: GO 66914
66609: LD_INT 19
66611: DOUBLE
66612: EQUAL
66613: IFTRUE 66617
66615: GO 66628
66617: POP
// bc_type := b_ext_radio ; 20 :
66618: LD_ADDR_OWVAR 42
66622: PUSH
66623: LD_INT 22
66625: ST_TO_ADDR
66626: GO 66914
66628: LD_INT 20
66630: DOUBLE
66631: EQUAL
66632: IFTRUE 66636
66634: GO 66647
66636: POP
// bc_type := b_ext_siberium ; 21 :
66637: LD_ADDR_OWVAR 42
66641: PUSH
66642: LD_INT 21
66644: ST_TO_ADDR
66645: GO 66914
66647: LD_INT 21
66649: DOUBLE
66650: EQUAL
66651: IFTRUE 66655
66653: GO 66666
66655: POP
// bc_type := b_ext_computer ; 22 :
66656: LD_ADDR_OWVAR 42
66660: PUSH
66661: LD_INT 24
66663: ST_TO_ADDR
66664: GO 66914
66666: LD_INT 22
66668: DOUBLE
66669: EQUAL
66670: IFTRUE 66674
66672: GO 66685
66674: POP
// bc_type := b_ext_track ; 23 :
66675: LD_ADDR_OWVAR 42
66679: PUSH
66680: LD_INT 16
66682: ST_TO_ADDR
66683: GO 66914
66685: LD_INT 23
66687: DOUBLE
66688: EQUAL
66689: IFTRUE 66693
66691: GO 66704
66693: POP
// bc_type := b_ext_laser ; 24 :
66694: LD_ADDR_OWVAR 42
66698: PUSH
66699: LD_INT 25
66701: ST_TO_ADDR
66702: GO 66914
66704: LD_INT 24
66706: DOUBLE
66707: EQUAL
66708: IFTRUE 66712
66710: GO 66723
66712: POP
// bc_type := b_control_tower ; 25 :
66713: LD_ADDR_OWVAR 42
66717: PUSH
66718: LD_INT 36
66720: ST_TO_ADDR
66721: GO 66914
66723: LD_INT 25
66725: DOUBLE
66726: EQUAL
66727: IFTRUE 66731
66729: GO 66742
66731: POP
// bc_type := b_breastwork ; 26 :
66732: LD_ADDR_OWVAR 42
66736: PUSH
66737: LD_INT 31
66739: ST_TO_ADDR
66740: GO 66914
66742: LD_INT 26
66744: DOUBLE
66745: EQUAL
66746: IFTRUE 66750
66748: GO 66761
66750: POP
// bc_type := b_bunker ; 27 :
66751: LD_ADDR_OWVAR 42
66755: PUSH
66756: LD_INT 32
66758: ST_TO_ADDR
66759: GO 66914
66761: LD_INT 27
66763: DOUBLE
66764: EQUAL
66765: IFTRUE 66769
66767: GO 66780
66769: POP
// bc_type := b_turret ; 28 :
66770: LD_ADDR_OWVAR 42
66774: PUSH
66775: LD_INT 33
66777: ST_TO_ADDR
66778: GO 66914
66780: LD_INT 28
66782: DOUBLE
66783: EQUAL
66784: IFTRUE 66788
66786: GO 66799
66788: POP
// bc_type := b_armoury ; 29 :
66789: LD_ADDR_OWVAR 42
66793: PUSH
66794: LD_INT 4
66796: ST_TO_ADDR
66797: GO 66914
66799: LD_INT 29
66801: DOUBLE
66802: EQUAL
66803: IFTRUE 66807
66805: GO 66818
66807: POP
// bc_type := b_barracks ; 30 :
66808: LD_ADDR_OWVAR 42
66812: PUSH
66813: LD_INT 5
66815: ST_TO_ADDR
66816: GO 66914
66818: LD_INT 30
66820: DOUBLE
66821: EQUAL
66822: IFTRUE 66826
66824: GO 66837
66826: POP
// bc_type := b_solar_power ; 31 :
66827: LD_ADDR_OWVAR 42
66831: PUSH
66832: LD_INT 27
66834: ST_TO_ADDR
66835: GO 66914
66837: LD_INT 31
66839: DOUBLE
66840: EQUAL
66841: IFTRUE 66845
66843: GO 66856
66845: POP
// bc_type := b_oil_power ; 32 :
66846: LD_ADDR_OWVAR 42
66850: PUSH
66851: LD_INT 26
66853: ST_TO_ADDR
66854: GO 66914
66856: LD_INT 32
66858: DOUBLE
66859: EQUAL
66860: IFTRUE 66864
66862: GO 66875
66864: POP
// bc_type := b_siberite_power ; 33 :
66865: LD_ADDR_OWVAR 42
66869: PUSH
66870: LD_INT 28
66872: ST_TO_ADDR
66873: GO 66914
66875: LD_INT 33
66877: DOUBLE
66878: EQUAL
66879: IFTRUE 66883
66881: GO 66894
66883: POP
// bc_type := b_oil_mine ; 34 :
66884: LD_ADDR_OWVAR 42
66888: PUSH
66889: LD_INT 29
66891: ST_TO_ADDR
66892: GO 66914
66894: LD_INT 34
66896: DOUBLE
66897: EQUAL
66898: IFTRUE 66902
66900: GO 66913
66902: POP
// bc_type := b_siberite_mine ; end ;
66903: LD_ADDR_OWVAR 42
66907: PUSH
66908: LD_INT 30
66910: ST_TO_ADDR
66911: GO 66914
66913: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66914: LD_ADDR_VAR 0 8
66918: PUSH
66919: LD_VAR 0 5
66923: PPUSH
66924: LD_VAR 0 6
66928: PPUSH
66929: LD_VAR 0 3
66933: PPUSH
66934: CALL_OW 47
66938: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66939: LD_OWVAR 42
66943: PUSH
66944: LD_INT 32
66946: PUSH
66947: LD_INT 33
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: IN
66954: IFFALSE 66970
// PlaceWeaponTurret ( b , weapon ) ;
66956: LD_VAR 0 8
66960: PPUSH
66961: LD_VAR 0 4
66965: PPUSH
66966: CALL_OW 431
// end ;
66970: LD_VAR 0 7
66974: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66975: LD_INT 0
66977: PPUSH
66978: PPUSH
66979: PPUSH
66980: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66981: LD_ADDR_VAR 0 4
66985: PUSH
66986: LD_INT 22
66988: PUSH
66989: LD_OWVAR 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 30
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 30
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PPUSH
67030: CALL_OW 69
67034: ST_TO_ADDR
// if not tmp then
67035: LD_VAR 0 4
67039: NOT
67040: IFFALSE 67044
// exit ;
67042: GO 67103
// for i in tmp do
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_VAR 0 4
67053: PUSH
67054: FOR_IN
67055: IFFALSE 67101
// for j = 1 to 3 do
67057: LD_ADDR_VAR 0 3
67061: PUSH
67062: DOUBLE
67063: LD_INT 1
67065: DEC
67066: ST_TO_ADDR
67067: LD_INT 3
67069: PUSH
67070: FOR_TO
67071: IFFALSE 67097
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67073: LD_VAR 0 2
67077: PPUSH
67078: CALL_OW 274
67082: PPUSH
67083: LD_VAR 0 3
67087: PPUSH
67088: LD_INT 99999
67090: PPUSH
67091: CALL_OW 277
67095: GO 67070
67097: POP
67098: POP
67099: GO 67054
67101: POP
67102: POP
// end ;
67103: LD_VAR 0 1
67107: RET
// export function hHackSetLevel10 ; var i , j ; begin
67108: LD_INT 0
67110: PPUSH
67111: PPUSH
67112: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67113: LD_ADDR_VAR 0 2
67117: PUSH
67118: LD_INT 21
67120: PUSH
67121: LD_INT 1
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PPUSH
67128: CALL_OW 69
67132: PUSH
67133: FOR_IN
67134: IFFALSE 67186
// if IsSelected ( i ) then
67136: LD_VAR 0 2
67140: PPUSH
67141: CALL_OW 306
67145: IFFALSE 67184
// begin for j := 1 to 4 do
67147: LD_ADDR_VAR 0 3
67151: PUSH
67152: DOUBLE
67153: LD_INT 1
67155: DEC
67156: ST_TO_ADDR
67157: LD_INT 4
67159: PUSH
67160: FOR_TO
67161: IFFALSE 67182
// SetSkill ( i , j , 10 ) ;
67163: LD_VAR 0 2
67167: PPUSH
67168: LD_VAR 0 3
67172: PPUSH
67173: LD_INT 10
67175: PPUSH
67176: CALL_OW 237
67180: GO 67160
67182: POP
67183: POP
// end ;
67184: GO 67133
67186: POP
67187: POP
// end ;
67188: LD_VAR 0 1
67192: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67193: LD_INT 0
67195: PPUSH
67196: PPUSH
67197: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67198: LD_ADDR_VAR 0 2
67202: PUSH
67203: LD_INT 22
67205: PUSH
67206: LD_OWVAR 2
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 21
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PPUSH
67229: CALL_OW 69
67233: PUSH
67234: FOR_IN
67235: IFFALSE 67276
// begin for j := 1 to 4 do
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: DOUBLE
67243: LD_INT 1
67245: DEC
67246: ST_TO_ADDR
67247: LD_INT 4
67249: PUSH
67250: FOR_TO
67251: IFFALSE 67272
// SetSkill ( i , j , 10 ) ;
67253: LD_VAR 0 2
67257: PPUSH
67258: LD_VAR 0 3
67262: PPUSH
67263: LD_INT 10
67265: PPUSH
67266: CALL_OW 237
67270: GO 67250
67272: POP
67273: POP
// end ;
67274: GO 67234
67276: POP
67277: POP
// end ;
67278: LD_VAR 0 1
67282: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67283: LD_INT 0
67285: PPUSH
// uc_side := your_side ;
67286: LD_ADDR_OWVAR 20
67290: PUSH
67291: LD_OWVAR 2
67295: ST_TO_ADDR
// uc_nation := nation ;
67296: LD_ADDR_OWVAR 21
67300: PUSH
67301: LD_VAR 0 1
67305: ST_TO_ADDR
// InitHc ;
67306: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67310: LD_INT 0
67312: PPUSH
67313: LD_VAR 0 2
67317: PPUSH
67318: LD_VAR 0 3
67322: PPUSH
67323: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67327: LD_VAR 0 4
67331: PPUSH
67332: LD_VAR 0 5
67336: PPUSH
67337: CALL_OW 428
67341: PUSH
67342: LD_INT 0
67344: EQUAL
67345: IFFALSE 67369
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67347: CALL_OW 44
67351: PPUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: LD_VAR 0 5
67361: PPUSH
67362: LD_INT 1
67364: PPUSH
67365: CALL_OW 48
// end ;
67369: LD_VAR 0 6
67373: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67374: LD_INT 0
67376: PPUSH
67377: PPUSH
// uc_side := your_side ;
67378: LD_ADDR_OWVAR 20
67382: PUSH
67383: LD_OWVAR 2
67387: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67388: LD_VAR 0 1
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 3
67401: PUSH
67402: LD_INT 4
67404: PUSH
67405: LD_INT 5
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: IN
67415: IFFALSE 67427
// uc_nation := nation_american else
67417: LD_ADDR_OWVAR 21
67421: PUSH
67422: LD_INT 1
67424: ST_TO_ADDR
67425: GO 67470
// if chassis in [ 11 , 12 , 13 , 14 ] then
67427: LD_VAR 0 1
67431: PUSH
67432: LD_INT 11
67434: PUSH
67435: LD_INT 12
67437: PUSH
67438: LD_INT 13
67440: PUSH
67441: LD_INT 14
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: IN
67450: IFFALSE 67462
// uc_nation := nation_arabian else
67452: LD_ADDR_OWVAR 21
67456: PUSH
67457: LD_INT 2
67459: ST_TO_ADDR
67460: GO 67470
// uc_nation := nation_russian ;
67462: LD_ADDR_OWVAR 21
67466: PUSH
67467: LD_INT 3
67469: ST_TO_ADDR
// vc_chassis := chassis ;
67470: LD_ADDR_OWVAR 37
67474: PUSH
67475: LD_VAR 0 1
67479: ST_TO_ADDR
// vc_engine := engine ;
67480: LD_ADDR_OWVAR 39
67484: PUSH
67485: LD_VAR 0 2
67489: ST_TO_ADDR
// vc_control := control ;
67490: LD_ADDR_OWVAR 38
67494: PUSH
67495: LD_VAR 0 3
67499: ST_TO_ADDR
// vc_weapon := weapon ;
67500: LD_ADDR_OWVAR 40
67504: PUSH
67505: LD_VAR 0 4
67509: ST_TO_ADDR
// un := CreateVehicle ;
67510: LD_ADDR_VAR 0 8
67514: PUSH
67515: CALL_OW 45
67519: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67520: LD_VAR 0 8
67524: PPUSH
67525: LD_INT 0
67527: PPUSH
67528: LD_INT 5
67530: PPUSH
67531: CALL_OW 12
67535: PPUSH
67536: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67540: LD_VAR 0 8
67544: PPUSH
67545: LD_VAR 0 5
67549: PPUSH
67550: LD_VAR 0 6
67554: PPUSH
67555: LD_INT 1
67557: PPUSH
67558: CALL_OW 48
// end ;
67562: LD_VAR 0 7
67566: RET
// export hInvincible ; every 1 do
67567: GO 67569
67569: DISABLE
// hInvincible := [ ] ;
67570: LD_ADDR_EXP 102
67574: PUSH
67575: EMPTY
67576: ST_TO_ADDR
67577: END
// every 10 do var i ;
67578: GO 67580
67580: DISABLE
67581: LD_INT 0
67583: PPUSH
// begin enable ;
67584: ENABLE
// if not hInvincible then
67585: LD_EXP 102
67589: NOT
67590: IFFALSE 67594
// exit ;
67592: GO 67638
// for i in hInvincible do
67594: LD_ADDR_VAR 0 1
67598: PUSH
67599: LD_EXP 102
67603: PUSH
67604: FOR_IN
67605: IFFALSE 67636
// if GetLives ( i ) < 1000 then
67607: LD_VAR 0 1
67611: PPUSH
67612: CALL_OW 256
67616: PUSH
67617: LD_INT 1000
67619: LESS
67620: IFFALSE 67634
// SetLives ( i , 1000 ) ;
67622: LD_VAR 0 1
67626: PPUSH
67627: LD_INT 1000
67629: PPUSH
67630: CALL_OW 234
67634: GO 67604
67636: POP
67637: POP
// end ;
67638: PPOPN 1
67640: END
// export function hHackInvincible ; var i ; begin
67641: LD_INT 0
67643: PPUSH
67644: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 21
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 21
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: PPUSH
67678: CALL_OW 69
67682: PUSH
67683: FOR_IN
67684: IFFALSE 67745
// if IsSelected ( i ) then
67686: LD_VAR 0 2
67690: PPUSH
67691: CALL_OW 306
67695: IFFALSE 67743
// begin if i in hInvincible then
67697: LD_VAR 0 2
67701: PUSH
67702: LD_EXP 102
67706: IN
67707: IFFALSE 67727
// hInvincible := hInvincible diff i else
67709: LD_ADDR_EXP 102
67713: PUSH
67714: LD_EXP 102
67718: PUSH
67719: LD_VAR 0 2
67723: DIFF
67724: ST_TO_ADDR
67725: GO 67743
// hInvincible := hInvincible union i ;
67727: LD_ADDR_EXP 102
67731: PUSH
67732: LD_EXP 102
67736: PUSH
67737: LD_VAR 0 2
67741: UNION
67742: ST_TO_ADDR
// end ;
67743: GO 67683
67745: POP
67746: POP
// end ;
67747: LD_VAR 0 1
67751: RET
// export function hHackInvisible ; var i , j ; begin
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
67756: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67757: LD_ADDR_VAR 0 2
67761: PUSH
67762: LD_INT 21
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PPUSH
67772: CALL_OW 69
67776: PUSH
67777: FOR_IN
67778: IFFALSE 67802
// if IsSelected ( i ) then
67780: LD_VAR 0 2
67784: PPUSH
67785: CALL_OW 306
67789: IFFALSE 67800
// ComForceInvisible ( i ) ;
67791: LD_VAR 0 2
67795: PPUSH
67796: CALL_OW 496
67800: GO 67777
67802: POP
67803: POP
// end ;
67804: LD_VAR 0 1
67808: RET
// export function hHackChangeYourSide ; begin
67809: LD_INT 0
67811: PPUSH
// if your_side = 8 then
67812: LD_OWVAR 2
67816: PUSH
67817: LD_INT 8
67819: EQUAL
67820: IFFALSE 67832
// your_side := 0 else
67822: LD_ADDR_OWVAR 2
67826: PUSH
67827: LD_INT 0
67829: ST_TO_ADDR
67830: GO 67846
// your_side := your_side + 1 ;
67832: LD_ADDR_OWVAR 2
67836: PUSH
67837: LD_OWVAR 2
67841: PUSH
67842: LD_INT 1
67844: PLUS
67845: ST_TO_ADDR
// end ;
67846: LD_VAR 0 1
67850: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67851: LD_INT 0
67853: PPUSH
67854: PPUSH
67855: PPUSH
// for i in all_units do
67856: LD_ADDR_VAR 0 2
67860: PUSH
67861: LD_OWVAR 3
67865: PUSH
67866: FOR_IN
67867: IFFALSE 67945
// if IsSelected ( i ) then
67869: LD_VAR 0 2
67873: PPUSH
67874: CALL_OW 306
67878: IFFALSE 67943
// begin j := GetSide ( i ) ;
67880: LD_ADDR_VAR 0 3
67884: PUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: CALL_OW 255
67894: ST_TO_ADDR
// if j = 8 then
67895: LD_VAR 0 3
67899: PUSH
67900: LD_INT 8
67902: EQUAL
67903: IFFALSE 67915
// j := 0 else
67905: LD_ADDR_VAR 0 3
67909: PUSH
67910: LD_INT 0
67912: ST_TO_ADDR
67913: GO 67929
// j := j + 1 ;
67915: LD_ADDR_VAR 0 3
67919: PUSH
67920: LD_VAR 0 3
67924: PUSH
67925: LD_INT 1
67927: PLUS
67928: ST_TO_ADDR
// SetSide ( i , j ) ;
67929: LD_VAR 0 2
67933: PPUSH
67934: LD_VAR 0 3
67938: PPUSH
67939: CALL_OW 235
// end ;
67943: GO 67866
67945: POP
67946: POP
// end ;
67947: LD_VAR 0 1
67951: RET
// export function hHackFog ; begin
67952: LD_INT 0
67954: PPUSH
// FogOff ( true ) ;
67955: LD_INT 1
67957: PPUSH
67958: CALL_OW 344
// end ;
67962: LD_VAR 0 1
67966: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67967: LD_INT 0
67969: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67970: LD_VAR 0 1
67974: PPUSH
67975: LD_VAR 0 2
67979: PPUSH
67980: LD_VAR 0 3
67984: PPUSH
67985: LD_INT 1
67987: PPUSH
67988: LD_INT 1
67990: PPUSH
67991: CALL_OW 483
// CenterOnXY ( x , y ) ;
67995: LD_VAR 0 2
67999: PPUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL_OW 84
// end ;
68009: LD_VAR 0 4
68013: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68014: LD_INT 0
68016: PPUSH
68017: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68018: LD_VAR 0 1
68022: NOT
68023: PUSH
68024: LD_VAR 0 2
68028: PPUSH
68029: LD_VAR 0 3
68033: PPUSH
68034: CALL_OW 488
68038: NOT
68039: OR
68040: PUSH
68041: LD_VAR 0 1
68045: PPUSH
68046: CALL_OW 266
68050: PUSH
68051: LD_INT 3
68053: NONEQUAL
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 247
68064: PUSH
68065: LD_INT 1
68067: EQUAL
68068: NOT
68069: AND
68070: OR
68071: IFFALSE 68075
// exit ;
68073: GO 68224
// if GetType ( factory ) = unit_human then
68075: LD_VAR 0 1
68079: PPUSH
68080: CALL_OW 247
68084: PUSH
68085: LD_INT 1
68087: EQUAL
68088: IFFALSE 68105
// factory := IsInUnit ( factory ) ;
68090: LD_ADDR_VAR 0 1
68094: PUSH
68095: LD_VAR 0 1
68099: PPUSH
68100: CALL_OW 310
68104: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68105: LD_VAR 0 1
68109: PPUSH
68110: CALL_OW 266
68114: PUSH
68115: LD_INT 3
68117: NONEQUAL
68118: IFFALSE 68122
// exit ;
68120: GO 68224
// if HexInfo ( x , y ) = factory then
68122: LD_VAR 0 2
68126: PPUSH
68127: LD_VAR 0 3
68131: PPUSH
68132: CALL_OW 428
68136: PUSH
68137: LD_VAR 0 1
68141: EQUAL
68142: IFFALSE 68169
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68144: LD_ADDR_EXP 103
68148: PUSH
68149: LD_EXP 103
68153: PPUSH
68154: LD_VAR 0 1
68158: PPUSH
68159: LD_INT 0
68161: PPUSH
68162: CALL_OW 1
68166: ST_TO_ADDR
68167: GO 68220
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68169: LD_ADDR_EXP 103
68173: PUSH
68174: LD_EXP 103
68178: PPUSH
68179: LD_VAR 0 1
68183: PPUSH
68184: LD_VAR 0 1
68188: PPUSH
68189: CALL_OW 255
68193: PUSH
68194: LD_VAR 0 1
68198: PUSH
68199: LD_VAR 0 2
68203: PUSH
68204: LD_VAR 0 3
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: PPUSH
68215: CALL_OW 1
68219: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68220: CALL 68229 0 0
// end ;
68224: LD_VAR 0 4
68228: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68229: LD_INT 0
68231: PPUSH
68232: PPUSH
68233: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68234: LD_STRING resetFactoryWaypoint();
68236: PPUSH
68237: CALL_OW 559
// if factoryWaypoints then
68241: LD_EXP 103
68245: IFFALSE 68371
// begin list := PrepareArray ( factoryWaypoints ) ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_EXP 103
68256: PPUSH
68257: CALL 44395 0 1
68261: ST_TO_ADDR
// for i := 1 to list do
68262: LD_ADDR_VAR 0 2
68266: PUSH
68267: DOUBLE
68268: LD_INT 1
68270: DEC
68271: ST_TO_ADDR
68272: LD_VAR 0 3
68276: PUSH
68277: FOR_TO
68278: IFFALSE 68369
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68280: LD_STRING setFactoryWaypointXY(
68282: PUSH
68283: LD_VAR 0 3
68287: PUSH
68288: LD_VAR 0 2
68292: ARRAY
68293: PUSH
68294: LD_INT 1
68296: ARRAY
68297: STR
68298: PUSH
68299: LD_STRING ,
68301: STR
68302: PUSH
68303: LD_VAR 0 3
68307: PUSH
68308: LD_VAR 0 2
68312: ARRAY
68313: PUSH
68314: LD_INT 2
68316: ARRAY
68317: STR
68318: PUSH
68319: LD_STRING ,
68321: STR
68322: PUSH
68323: LD_VAR 0 3
68327: PUSH
68328: LD_VAR 0 2
68332: ARRAY
68333: PUSH
68334: LD_INT 3
68336: ARRAY
68337: STR
68338: PUSH
68339: LD_STRING ,
68341: STR
68342: PUSH
68343: LD_VAR 0 3
68347: PUSH
68348: LD_VAR 0 2
68352: ARRAY
68353: PUSH
68354: LD_INT 4
68356: ARRAY
68357: STR
68358: PUSH
68359: LD_STRING )
68361: STR
68362: PPUSH
68363: CALL_OW 559
68367: GO 68277
68369: POP
68370: POP
// end ; end ;
68371: LD_VAR 0 1
68375: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68376: LD_INT 0
68378: PPUSH
// if HexInfo ( x , y ) = warehouse then
68379: LD_VAR 0 2
68383: PPUSH
68384: LD_VAR 0 3
68388: PPUSH
68389: CALL_OW 428
68393: PUSH
68394: LD_VAR 0 1
68398: EQUAL
68399: IFFALSE 68426
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68401: LD_ADDR_EXP 104
68405: PUSH
68406: LD_EXP 104
68410: PPUSH
68411: LD_VAR 0 1
68415: PPUSH
68416: LD_INT 0
68418: PPUSH
68419: CALL_OW 1
68423: ST_TO_ADDR
68424: GO 68477
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68426: LD_ADDR_EXP 104
68430: PUSH
68431: LD_EXP 104
68435: PPUSH
68436: LD_VAR 0 1
68440: PPUSH
68441: LD_VAR 0 1
68445: PPUSH
68446: CALL_OW 255
68450: PUSH
68451: LD_VAR 0 1
68455: PUSH
68456: LD_VAR 0 2
68460: PUSH
68461: LD_VAR 0 3
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: PPUSH
68472: CALL_OW 1
68476: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68477: CALL 68486 0 0
// end ;
68481: LD_VAR 0 4
68485: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68486: LD_INT 0
68488: PPUSH
68489: PPUSH
68490: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68491: LD_STRING resetWarehouseGatheringPoints();
68493: PPUSH
68494: CALL_OW 559
// if warehouseGatheringPoints then
68498: LD_EXP 104
68502: IFFALSE 68628
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68504: LD_ADDR_VAR 0 3
68508: PUSH
68509: LD_EXP 104
68513: PPUSH
68514: CALL 44395 0 1
68518: ST_TO_ADDR
// for i := 1 to list do
68519: LD_ADDR_VAR 0 2
68523: PUSH
68524: DOUBLE
68525: LD_INT 1
68527: DEC
68528: ST_TO_ADDR
68529: LD_VAR 0 3
68533: PUSH
68534: FOR_TO
68535: IFFALSE 68626
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68537: LD_STRING setWarehouseGatheringPointXY(
68539: PUSH
68540: LD_VAR 0 3
68544: PUSH
68545: LD_VAR 0 2
68549: ARRAY
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: STR
68555: PUSH
68556: LD_STRING ,
68558: STR
68559: PUSH
68560: LD_VAR 0 3
68564: PUSH
68565: LD_VAR 0 2
68569: ARRAY
68570: PUSH
68571: LD_INT 2
68573: ARRAY
68574: STR
68575: PUSH
68576: LD_STRING ,
68578: STR
68579: PUSH
68580: LD_VAR 0 3
68584: PUSH
68585: LD_VAR 0 2
68589: ARRAY
68590: PUSH
68591: LD_INT 3
68593: ARRAY
68594: STR
68595: PUSH
68596: LD_STRING ,
68598: STR
68599: PUSH
68600: LD_VAR 0 3
68604: PUSH
68605: LD_VAR 0 2
68609: ARRAY
68610: PUSH
68611: LD_INT 4
68613: ARRAY
68614: STR
68615: PUSH
68616: LD_STRING )
68618: STR
68619: PPUSH
68620: CALL_OW 559
68624: GO 68534
68626: POP
68627: POP
// end ; end ;
68628: LD_VAR 0 1
68632: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68633: LD_EXP 104
68637: IFFALSE 69322
68639: GO 68641
68641: DISABLE
68642: LD_INT 0
68644: PPUSH
68645: PPUSH
68646: PPUSH
68647: PPUSH
68648: PPUSH
68649: PPUSH
68650: PPUSH
68651: PPUSH
68652: PPUSH
// begin enable ;
68653: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_EXP 104
68663: PPUSH
68664: CALL 44395 0 1
68668: ST_TO_ADDR
// if not list then
68669: LD_VAR 0 3
68673: NOT
68674: IFFALSE 68678
// exit ;
68676: GO 69322
// for i := 1 to list do
68678: LD_ADDR_VAR 0 1
68682: PUSH
68683: DOUBLE
68684: LD_INT 1
68686: DEC
68687: ST_TO_ADDR
68688: LD_VAR 0 3
68692: PUSH
68693: FOR_TO
68694: IFFALSE 69320
// begin depot := list [ i ] [ 2 ] ;
68696: LD_ADDR_VAR 0 8
68700: PUSH
68701: LD_VAR 0 3
68705: PUSH
68706: LD_VAR 0 1
68710: ARRAY
68711: PUSH
68712: LD_INT 2
68714: ARRAY
68715: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: LD_VAR 0 3
68725: PUSH
68726: LD_VAR 0 1
68730: ARRAY
68731: PUSH
68732: LD_INT 1
68734: ARRAY
68735: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68736: LD_VAR 0 8
68740: PPUSH
68741: CALL_OW 301
68745: PUSH
68746: LD_VAR 0 5
68750: PUSH
68751: LD_VAR 0 8
68755: PPUSH
68756: CALL_OW 255
68760: NONEQUAL
68761: OR
68762: IFFALSE 68791
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68764: LD_ADDR_EXP 104
68768: PUSH
68769: LD_EXP 104
68773: PPUSH
68774: LD_VAR 0 8
68778: PPUSH
68779: LD_INT 0
68781: PPUSH
68782: CALL_OW 1
68786: ST_TO_ADDR
// exit ;
68787: POP
68788: POP
68789: GO 69322
// end ; x := list [ i ] [ 3 ] ;
68791: LD_ADDR_VAR 0 6
68795: PUSH
68796: LD_VAR 0 3
68800: PUSH
68801: LD_VAR 0 1
68805: ARRAY
68806: PUSH
68807: LD_INT 3
68809: ARRAY
68810: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68811: LD_ADDR_VAR 0 7
68815: PUSH
68816: LD_VAR 0 3
68820: PUSH
68821: LD_VAR 0 1
68825: ARRAY
68826: PUSH
68827: LD_INT 4
68829: ARRAY
68830: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68831: LD_ADDR_VAR 0 9
68835: PUSH
68836: LD_VAR 0 6
68840: PPUSH
68841: LD_VAR 0 7
68845: PPUSH
68846: LD_INT 16
68848: PPUSH
68849: CALL 42979 0 3
68853: ST_TO_ADDR
// if not cratesNearbyPoint then
68854: LD_VAR 0 9
68858: NOT
68859: IFFALSE 68865
// exit ;
68861: POP
68862: POP
68863: GO 69322
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68865: LD_ADDR_VAR 0 4
68869: PUSH
68870: LD_INT 22
68872: PUSH
68873: LD_VAR 0 5
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 60
68887: PUSH
68888: EMPTY
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 91
68897: PUSH
68898: LD_VAR 0 8
68902: PUSH
68903: LD_INT 6
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 2
68913: PUSH
68914: LD_INT 25
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 25
68926: PUSH
68927: LD_INT 16
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: PPUSH
68945: CALL_OW 69
68949: PUSH
68950: LD_VAR 0 8
68954: PPUSH
68955: CALL_OW 313
68959: PPUSH
68960: LD_INT 3
68962: PUSH
68963: LD_INT 60
68965: PUSH
68966: EMPTY
68967: LIST
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: LD_INT 25
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 25
68988: PUSH
68989: LD_INT 16
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: LIST
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PPUSH
69005: CALL_OW 72
69009: UNION
69010: ST_TO_ADDR
// if tmp then
69011: LD_VAR 0 4
69015: IFFALSE 69095
// begin tmp := ShrinkArray ( tmp , 3 ) ;
69017: LD_ADDR_VAR 0 4
69021: PUSH
69022: LD_VAR 0 4
69026: PPUSH
69027: LD_INT 3
69029: PPUSH
69030: CALL 40948 0 2
69034: ST_TO_ADDR
// for j in tmp do
69035: LD_ADDR_VAR 0 2
69039: PUSH
69040: LD_VAR 0 4
69044: PUSH
69045: FOR_IN
69046: IFFALSE 69089
// begin if IsInUnit ( j ) then
69048: LD_VAR 0 2
69052: PPUSH
69053: CALL_OW 310
69057: IFFALSE 69068
// ComExit ( j ) ;
69059: LD_VAR 0 2
69063: PPUSH
69064: CALL 41031 0 1
// AddComCollect ( j , x , y ) ;
69068: LD_VAR 0 2
69072: PPUSH
69073: LD_VAR 0 6
69077: PPUSH
69078: LD_VAR 0 7
69082: PPUSH
69083: CALL_OW 177
// end ;
69087: GO 69045
69089: POP
69090: POP
// exit ;
69091: POP
69092: POP
69093: GO 69322
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69095: LD_ADDR_VAR 0 4
69099: PUSH
69100: LD_INT 22
69102: PUSH
69103: LD_VAR 0 5
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 91
69114: PUSH
69115: LD_VAR 0 8
69119: PUSH
69120: LD_INT 8
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 34
69133: PUSH
69134: LD_INT 12
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 34
69143: PUSH
69144: LD_INT 51
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 34
69153: PUSH
69154: LD_INT 32
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 34
69163: PUSH
69164: LD_INT 89
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: LIST
69182: PPUSH
69183: CALL_OW 69
69187: ST_TO_ADDR
// if tmp then
69188: LD_VAR 0 4
69192: IFFALSE 69318
// begin for j in tmp do
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: LD_VAR 0 4
69203: PUSH
69204: FOR_IN
69205: IFFALSE 69316
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69207: LD_VAR 0 2
69211: PPUSH
69212: CALL_OW 262
69216: PUSH
69217: LD_INT 3
69219: EQUAL
69220: PUSH
69221: LD_VAR 0 2
69225: PPUSH
69226: CALL_OW 261
69230: PUSH
69231: LD_INT 20
69233: GREATER
69234: OR
69235: PUSH
69236: LD_VAR 0 2
69240: PPUSH
69241: CALL_OW 314
69245: NOT
69246: AND
69247: PUSH
69248: LD_VAR 0 2
69252: PPUSH
69253: CALL_OW 263
69257: PUSH
69258: LD_INT 1
69260: NONEQUAL
69261: PUSH
69262: LD_VAR 0 2
69266: PPUSH
69267: CALL_OW 311
69271: OR
69272: AND
69273: IFFALSE 69314
// begin ComCollect ( j , x , y ) ;
69275: LD_VAR 0 2
69279: PPUSH
69280: LD_VAR 0 6
69284: PPUSH
69285: LD_VAR 0 7
69289: PPUSH
69290: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69294: LD_VAR 0 2
69298: PPUSH
69299: LD_VAR 0 8
69303: PPUSH
69304: CALL_OW 172
// exit ;
69308: POP
69309: POP
69310: POP
69311: POP
69312: GO 69322
// end ;
69314: GO 69204
69316: POP
69317: POP
// end ; end ;
69318: GO 68693
69320: POP
69321: POP
// end ; end_of_file
69322: PPOPN 9
69324: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69325: LD_VAR 0 1
69329: PUSH
69330: LD_INT 200
69332: DOUBLE
69333: GREATEREQUAL
69334: IFFALSE 69342
69336: LD_INT 299
69338: DOUBLE
69339: LESSEQUAL
69340: IFTRUE 69344
69342: GO 69376
69344: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69345: LD_VAR 0 1
69349: PPUSH
69350: LD_VAR 0 2
69354: PPUSH
69355: LD_VAR 0 3
69359: PPUSH
69360: LD_VAR 0 4
69364: PPUSH
69365: LD_VAR 0 5
69369: PPUSH
69370: CALL 70030 0 5
69374: GO 69453
69376: LD_INT 300
69378: DOUBLE
69379: GREATEREQUAL
69380: IFFALSE 69388
69382: LD_INT 399
69384: DOUBLE
69385: LESSEQUAL
69386: IFTRUE 69390
69388: GO 69452
69390: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: LD_VAR 0 3
69405: PPUSH
69406: LD_VAR 0 4
69410: PPUSH
69411: LD_VAR 0 5
69415: PPUSH
69416: LD_VAR 0 6
69420: PPUSH
69421: LD_VAR 0 7
69425: PPUSH
69426: LD_VAR 0 8
69430: PPUSH
69431: LD_VAR 0 9
69435: PPUSH
69436: LD_VAR 0 10
69440: PPUSH
69441: LD_VAR 0 11
69445: PPUSH
69446: CALL 66026 0 11
69450: GO 69453
69452: POP
// end ;
69453: PPOPN 11
69455: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69456: LD_VAR 0 1
69460: PPUSH
69461: LD_VAR 0 2
69465: PPUSH
69466: LD_VAR 0 3
69470: PPUSH
69471: LD_VAR 0 4
69475: PPUSH
69476: LD_VAR 0 5
69480: PPUSH
69481: CALL 69538 0 5
// end ; end_of_file
69485: PPOPN 5
69487: END
// export function SOS_UnitDestroyed ( un ) ; begin
69488: LD_INT 0
69490: PPUSH
// ComRadiation ( un ) ;
69491: LD_VAR 0 1
69495: PPUSH
69496: CALL 70434 0 1
// end ;
69500: LD_VAR 0 2
69504: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69505: LD_INT 0
69507: PPUSH
// ComRadiation ( un ) ;
69508: LD_VAR 0 1
69512: PPUSH
69513: CALL 70434 0 1
// end ;
69517: LD_VAR 0 2
69521: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69522: LD_INT 0
69524: PPUSH
// end ;
69525: LD_VAR 0 4
69529: RET
// export function SOS_Command ( cmd ) ; begin
69530: LD_INT 0
69532: PPUSH
// end ;
69533: LD_VAR 0 2
69537: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69538: LD_INT 0
69540: PPUSH
// end ;
69541: LD_VAR 0 6
69545: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69546: LD_INT 0
69548: PPUSH
69549: PPUSH
69550: PPUSH
69551: PPUSH
// if not vehicle or not factory then
69552: LD_VAR 0 1
69556: NOT
69557: PUSH
69558: LD_VAR 0 2
69562: NOT
69563: OR
69564: IFFALSE 69568
// exit ;
69566: GO 70025
// if factoryWaypoints >= factory then
69568: LD_EXP 103
69572: PUSH
69573: LD_VAR 0 2
69577: GREATEREQUAL
69578: IFFALSE 70025
// if factoryWaypoints [ factory ] then
69580: LD_EXP 103
69584: PUSH
69585: LD_VAR 0 2
69589: ARRAY
69590: IFFALSE 70025
// begin if GetControl ( vehicle ) = control_manual then
69592: LD_VAR 0 1
69596: PPUSH
69597: CALL_OW 263
69601: PUSH
69602: LD_INT 1
69604: EQUAL
69605: IFFALSE 69912
// begin driver := IsDrivenBy ( vehicle ) ;
69607: LD_ADDR_VAR 0 5
69611: PUSH
69612: LD_VAR 0 1
69616: PPUSH
69617: CALL_OW 311
69621: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69622: LD_ADDR_VAR 0 4
69626: PUSH
69627: LD_VAR 0 5
69631: PPUSH
69632: CALL_OW 110
69636: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69637: LD_VAR 0 4
69641: PUSH
69642: LD_INT 501
69644: EQUAL
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: CALL_OW 110
69655: PUSH
69656: LD_INT 501
69658: EQUAL
69659: OR
69660: IFFALSE 69664
// exit ;
69662: GO 70025
// if not HasTask ( driver ) then
69664: LD_VAR 0 5
69668: PPUSH
69669: CALL_OW 314
69673: NOT
69674: IFFALSE 69910
// begin SetTag ( driver , tDriver ) ;
69676: LD_VAR 0 5
69680: PPUSH
69681: LD_INT 501
69683: PPUSH
69684: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69688: LD_VAR 0 1
69692: PPUSH
69693: LD_INT 501
69695: PPUSH
69696: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69700: LD_ADDR_VAR 0 6
69704: PUSH
69705: LD_EXP 103
69709: PUSH
69710: LD_VAR 0 2
69714: ARRAY
69715: PUSH
69716: LD_INT 3
69718: ARRAY
69719: PPUSH
69720: LD_EXP 103
69724: PUSH
69725: LD_VAR 0 2
69729: ARRAY
69730: PUSH
69731: LD_INT 4
69733: ARRAY
69734: PPUSH
69735: CALL_OW 428
69739: ST_TO_ADDR
// if hex then
69740: LD_VAR 0 6
69744: IFFALSE 69762
// ComMoveUnit ( driver , hex ) else
69746: LD_VAR 0 5
69750: PPUSH
69751: LD_VAR 0 6
69755: PPUSH
69756: CALL_OW 112
69760: GO 69801
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69762: LD_VAR 0 5
69766: PPUSH
69767: LD_EXP 103
69771: PUSH
69772: LD_VAR 0 2
69776: ARRAY
69777: PUSH
69778: LD_INT 3
69780: ARRAY
69781: PPUSH
69782: LD_EXP 103
69786: PUSH
69787: LD_VAR 0 2
69791: ARRAY
69792: PUSH
69793: LD_INT 4
69795: ARRAY
69796: PPUSH
69797: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69801: LD_VAR 0 5
69805: PPUSH
69806: CALL_OW 181
// if Multiplayer then
69810: LD_OWVAR 4
69814: IFFALSE 69863
// begin repeat wait ( 10 ) ;
69816: LD_INT 10
69818: PPUSH
69819: CALL_OW 67
// until not IsInUnit ( driver ) ;
69823: LD_VAR 0 5
69827: PPUSH
69828: CALL_OW 310
69832: NOT
69833: IFFALSE 69816
// if not HasTask ( driver ) then
69835: LD_VAR 0 5
69839: PPUSH
69840: CALL_OW 314
69844: NOT
69845: IFFALSE 69861
// ComEnterUnit ( driver , factory ) ;
69847: LD_VAR 0 5
69851: PPUSH
69852: LD_VAR 0 2
69856: PPUSH
69857: CALL_OW 120
// end else
69861: GO 69877
// AddComEnterUnit ( driver , factory ) ;
69863: LD_VAR 0 5
69867: PPUSH
69868: LD_VAR 0 2
69872: PPUSH
69873: CALL_OW 180
// wait ( 0 0$1 ) ;
69877: LD_INT 35
69879: PPUSH
69880: CALL_OW 67
// SetTag ( driver , tag ) ;
69884: LD_VAR 0 5
69888: PPUSH
69889: LD_VAR 0 4
69893: PPUSH
69894: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69898: LD_VAR 0 1
69902: PPUSH
69903: LD_INT 0
69905: PPUSH
69906: CALL_OW 109
// end ; end else
69910: GO 70025
// if GetControl ( vehicle ) = control_remote then
69912: LD_VAR 0 1
69916: PPUSH
69917: CALL_OW 263
69921: PUSH
69922: LD_INT 2
69924: EQUAL
69925: IFFALSE 69986
// begin wait ( 0 0$2 ) ;
69927: LD_INT 70
69929: PPUSH
69930: CALL_OW 67
// if Connect ( vehicle ) then
69934: LD_VAR 0 1
69938: PPUSH
69939: CALL 11250 0 1
69943: IFFALSE 69984
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_EXP 103
69954: PUSH
69955: LD_VAR 0 2
69959: ARRAY
69960: PUSH
69961: LD_INT 3
69963: ARRAY
69964: PPUSH
69965: LD_EXP 103
69969: PUSH
69970: LD_VAR 0 2
69974: ARRAY
69975: PUSH
69976: LD_INT 4
69978: ARRAY
69979: PPUSH
69980: CALL_OW 171
// end else
69984: GO 70025
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_EXP 103
69995: PUSH
69996: LD_VAR 0 2
70000: ARRAY
70001: PUSH
70002: LD_INT 3
70004: ARRAY
70005: PPUSH
70006: LD_EXP 103
70010: PUSH
70011: LD_VAR 0 2
70015: ARRAY
70016: PUSH
70017: LD_INT 4
70019: ARRAY
70020: PPUSH
70021: CALL_OW 171
// end ; end ;
70025: LD_VAR 0 3
70029: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
70030: LD_INT 0
70032: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
70033: LD_VAR 0 1
70037: PUSH
70038: LD_INT 250
70040: EQUAL
70041: PUSH
70042: LD_VAR 0 2
70046: PPUSH
70047: CALL_OW 264
70051: PUSH
70052: LD_INT 81
70054: EQUAL
70055: AND
70056: IFFALSE 70077
// MinerPlaceMine ( unit , x , y ) ;
70058: LD_VAR 0 2
70062: PPUSH
70063: LD_VAR 0 4
70067: PPUSH
70068: LD_VAR 0 5
70072: PPUSH
70073: CALL 73169 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70077: LD_VAR 0 1
70081: PUSH
70082: LD_INT 251
70084: EQUAL
70085: PUSH
70086: LD_VAR 0 2
70090: PPUSH
70091: CALL_OW 264
70095: PUSH
70096: LD_INT 81
70098: EQUAL
70099: AND
70100: IFFALSE 70121
// MinerDetonateMine ( unit , x , y ) ;
70102: LD_VAR 0 2
70106: PPUSH
70107: LD_VAR 0 4
70111: PPUSH
70112: LD_VAR 0 5
70116: PPUSH
70117: CALL 73444 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
70121: LD_VAR 0 1
70125: PUSH
70126: LD_INT 252
70128: EQUAL
70129: PUSH
70130: LD_VAR 0 2
70134: PPUSH
70135: CALL_OW 264
70139: PUSH
70140: LD_INT 81
70142: EQUAL
70143: AND
70144: IFFALSE 70165
// MinerCreateMinefield ( unit , x , y ) ;
70146: LD_VAR 0 2
70150: PPUSH
70151: LD_VAR 0 4
70155: PPUSH
70156: LD_VAR 0 5
70160: PPUSH
70161: CALL 73861 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70165: LD_VAR 0 1
70169: PUSH
70170: LD_INT 253
70172: EQUAL
70173: PUSH
70174: LD_VAR 0 2
70178: PPUSH
70179: CALL_OW 257
70183: PUSH
70184: LD_INT 5
70186: EQUAL
70187: AND
70188: IFFALSE 70209
// ComBinocular ( unit , x , y ) ;
70190: LD_VAR 0 2
70194: PPUSH
70195: LD_VAR 0 4
70199: PPUSH
70200: LD_VAR 0 5
70204: PPUSH
70205: CALL 74230 0 3
// if selectedUnit then
70209: LD_VAR 0 3
70213: IFFALSE 70269
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70215: LD_VAR 0 1
70219: PUSH
70220: LD_INT 254
70222: EQUAL
70223: PUSH
70224: LD_VAR 0 2
70228: PPUSH
70229: CALL_OW 264
70233: PUSH
70234: LD_INT 99
70236: EQUAL
70237: AND
70238: PUSH
70239: LD_VAR 0 3
70243: PPUSH
70244: CALL_OW 263
70248: PUSH
70249: LD_INT 3
70251: EQUAL
70252: AND
70253: IFFALSE 70269
// HackDestroyVehicle ( unit , selectedUnit ) ;
70255: LD_VAR 0 2
70259: PPUSH
70260: LD_VAR 0 3
70264: PPUSH
70265: CALL 72533 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70269: LD_VAR 0 1
70273: PUSH
70274: LD_INT 255
70276: EQUAL
70277: PUSH
70278: LD_VAR 0 2
70282: PPUSH
70283: CALL_OW 264
70287: PUSH
70288: LD_INT 14
70290: PUSH
70291: LD_INT 53
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: IN
70298: AND
70299: PUSH
70300: LD_VAR 0 4
70304: PPUSH
70305: LD_VAR 0 5
70309: PPUSH
70310: CALL_OW 488
70314: AND
70315: IFFALSE 70339
// CutTreeXYR ( unit , x , y , 12 ) ;
70317: LD_VAR 0 2
70321: PPUSH
70322: LD_VAR 0 4
70326: PPUSH
70327: LD_VAR 0 5
70331: PPUSH
70332: LD_INT 12
70334: PPUSH
70335: CALL 70530 0 4
// if cmd = 256 then
70339: LD_VAR 0 1
70343: PUSH
70344: LD_INT 256
70346: EQUAL
70347: IFFALSE 70368
// SetFactoryWaypoint ( unit , x , y ) ;
70349: LD_VAR 0 2
70353: PPUSH
70354: LD_VAR 0 4
70358: PPUSH
70359: LD_VAR 0 5
70363: PPUSH
70364: CALL 68014 0 3
// if cmd = 257 then
70368: LD_VAR 0 1
70372: PUSH
70373: LD_INT 257
70375: EQUAL
70376: IFFALSE 70397
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70378: LD_VAR 0 2
70382: PPUSH
70383: LD_VAR 0 4
70387: PPUSH
70388: LD_VAR 0 5
70392: PPUSH
70393: CALL 68376 0 3
// if cmd = 258 then
70397: LD_VAR 0 1
70401: PUSH
70402: LD_INT 258
70404: EQUAL
70405: IFFALSE 70429
// BurnTreeXYR ( unit , x , y , 8 ) ;
70407: LD_VAR 0 2
70411: PPUSH
70412: LD_VAR 0 4
70416: PPUSH
70417: LD_VAR 0 5
70421: PPUSH
70422: LD_INT 8
70424: PPUSH
70425: CALL 70924 0 4
// end ;
70429: LD_VAR 0 6
70433: RET
// export function ComRadiation ( un ) ; var eff ; begin
70434: LD_INT 0
70436: PPUSH
70437: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 264
70447: PUSH
70448: LD_INT 91
70450: NONEQUAL
70451: IFFALSE 70455
// exit ;
70453: GO 70525
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70455: LD_INT 68
70457: PPUSH
70458: LD_VAR 0 1
70462: PPUSH
70463: CALL_OW 255
70467: PPUSH
70468: CALL_OW 321
70472: PUSH
70473: LD_INT 2
70475: EQUAL
70476: IFFALSE 70488
// eff := 70 else
70478: LD_ADDR_VAR 0 3
70482: PUSH
70483: LD_INT 70
70485: ST_TO_ADDR
70486: GO 70496
// eff := 30 ;
70488: LD_ADDR_VAR 0 3
70492: PUSH
70493: LD_INT 30
70495: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70496: LD_VAR 0 1
70500: PPUSH
70501: CALL_OW 250
70505: PPUSH
70506: LD_VAR 0 1
70510: PPUSH
70511: CALL_OW 251
70515: PPUSH
70516: LD_VAR 0 3
70520: PPUSH
70521: CALL_OW 495
// end ;
70525: LD_VAR 0 2
70529: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70530: LD_INT 0
70532: PPUSH
70533: PPUSH
70534: PPUSH
70535: PPUSH
70536: PPUSH
70537: PPUSH
70538: PPUSH
70539: PPUSH
70540: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70541: LD_VAR 0 1
70545: PPUSH
70546: CALL_OW 302
70550: NOT
70551: PUSH
70552: LD_VAR 0 2
70556: PPUSH
70557: LD_VAR 0 3
70561: PPUSH
70562: CALL_OW 488
70566: NOT
70567: OR
70568: PUSH
70569: LD_VAR 0 4
70573: NOT
70574: OR
70575: IFFALSE 70579
// exit ;
70577: GO 70919
// list := [ ] ;
70579: LD_ADDR_VAR 0 13
70583: PUSH
70584: EMPTY
70585: ST_TO_ADDR
// if x - r < 0 then
70586: LD_VAR 0 2
70590: PUSH
70591: LD_VAR 0 4
70595: MINUS
70596: PUSH
70597: LD_INT 0
70599: LESS
70600: IFFALSE 70612
// min_x := 0 else
70602: LD_ADDR_VAR 0 7
70606: PUSH
70607: LD_INT 0
70609: ST_TO_ADDR
70610: GO 70628
// min_x := x - r ;
70612: LD_ADDR_VAR 0 7
70616: PUSH
70617: LD_VAR 0 2
70621: PUSH
70622: LD_VAR 0 4
70626: MINUS
70627: ST_TO_ADDR
// if y - r < 0 then
70628: LD_VAR 0 3
70632: PUSH
70633: LD_VAR 0 4
70637: MINUS
70638: PUSH
70639: LD_INT 0
70641: LESS
70642: IFFALSE 70654
// min_y := 0 else
70644: LD_ADDR_VAR 0 8
70648: PUSH
70649: LD_INT 0
70651: ST_TO_ADDR
70652: GO 70670
// min_y := y - r ;
70654: LD_ADDR_VAR 0 8
70658: PUSH
70659: LD_VAR 0 3
70663: PUSH
70664: LD_VAR 0 4
70668: MINUS
70669: ST_TO_ADDR
// max_x := x + r ;
70670: LD_ADDR_VAR 0 9
70674: PUSH
70675: LD_VAR 0 2
70679: PUSH
70680: LD_VAR 0 4
70684: PLUS
70685: ST_TO_ADDR
// max_y := y + r ;
70686: LD_ADDR_VAR 0 10
70690: PUSH
70691: LD_VAR 0 3
70695: PUSH
70696: LD_VAR 0 4
70700: PLUS
70701: ST_TO_ADDR
// for _x = min_x to max_x do
70702: LD_ADDR_VAR 0 11
70706: PUSH
70707: DOUBLE
70708: LD_VAR 0 7
70712: DEC
70713: ST_TO_ADDR
70714: LD_VAR 0 9
70718: PUSH
70719: FOR_TO
70720: IFFALSE 70837
// for _y = min_y to max_y do
70722: LD_ADDR_VAR 0 12
70726: PUSH
70727: DOUBLE
70728: LD_VAR 0 8
70732: DEC
70733: ST_TO_ADDR
70734: LD_VAR 0 10
70738: PUSH
70739: FOR_TO
70740: IFFALSE 70833
// begin if not ValidHex ( _x , _y ) then
70742: LD_VAR 0 11
70746: PPUSH
70747: LD_VAR 0 12
70751: PPUSH
70752: CALL_OW 488
70756: NOT
70757: IFFALSE 70761
// continue ;
70759: GO 70739
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70761: LD_VAR 0 11
70765: PPUSH
70766: LD_VAR 0 12
70770: PPUSH
70771: CALL_OW 351
70775: PUSH
70776: LD_VAR 0 11
70780: PPUSH
70781: LD_VAR 0 12
70785: PPUSH
70786: CALL_OW 554
70790: AND
70791: IFFALSE 70831
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70793: LD_ADDR_VAR 0 13
70797: PUSH
70798: LD_VAR 0 13
70802: PPUSH
70803: LD_VAR 0 13
70807: PUSH
70808: LD_INT 1
70810: PLUS
70811: PPUSH
70812: LD_VAR 0 11
70816: PUSH
70817: LD_VAR 0 12
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PPUSH
70826: CALL_OW 2
70830: ST_TO_ADDR
// end ;
70831: GO 70739
70833: POP
70834: POP
70835: GO 70719
70837: POP
70838: POP
// if not list then
70839: LD_VAR 0 13
70843: NOT
70844: IFFALSE 70848
// exit ;
70846: GO 70919
// for i in list do
70848: LD_ADDR_VAR 0 6
70852: PUSH
70853: LD_VAR 0 13
70857: PUSH
70858: FOR_IN
70859: IFFALSE 70917
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70861: LD_VAR 0 1
70865: PPUSH
70866: LD_STRING M
70868: PUSH
70869: LD_VAR 0 6
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PUSH
70878: LD_VAR 0 6
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: EMPTY
70909: LIST
70910: PPUSH
70911: CALL_OW 447
70915: GO 70858
70917: POP
70918: POP
// end ;
70919: LD_VAR 0 5
70923: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70924: LD_INT 0
70926: PPUSH
70927: PPUSH
70928: PPUSH
70929: PPUSH
70930: PPUSH
70931: PPUSH
70932: PPUSH
70933: PPUSH
70934: PPUSH
70935: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70936: LD_VAR 0 1
70940: PPUSH
70941: CALL_OW 302
70945: NOT
70946: PUSH
70947: LD_VAR 0 2
70951: PPUSH
70952: LD_VAR 0 3
70956: PPUSH
70957: CALL_OW 488
70961: NOT
70962: OR
70963: PUSH
70964: LD_VAR 0 4
70968: NOT
70969: OR
70970: IFFALSE 70974
// exit ;
70972: GO 71487
// list := [ ] ;
70974: LD_ADDR_VAR 0 13
70978: PUSH
70979: EMPTY
70980: ST_TO_ADDR
// if x - r < 0 then
70981: LD_VAR 0 2
70985: PUSH
70986: LD_VAR 0 4
70990: MINUS
70991: PUSH
70992: LD_INT 0
70994: LESS
70995: IFFALSE 71007
// min_x := 0 else
70997: LD_ADDR_VAR 0 7
71001: PUSH
71002: LD_INT 0
71004: ST_TO_ADDR
71005: GO 71023
// min_x := x - r ;
71007: LD_ADDR_VAR 0 7
71011: PUSH
71012: LD_VAR 0 2
71016: PUSH
71017: LD_VAR 0 4
71021: MINUS
71022: ST_TO_ADDR
// if y - r < 0 then
71023: LD_VAR 0 3
71027: PUSH
71028: LD_VAR 0 4
71032: MINUS
71033: PUSH
71034: LD_INT 0
71036: LESS
71037: IFFALSE 71049
// min_y := 0 else
71039: LD_ADDR_VAR 0 8
71043: PUSH
71044: LD_INT 0
71046: ST_TO_ADDR
71047: GO 71065
// min_y := y - r ;
71049: LD_ADDR_VAR 0 8
71053: PUSH
71054: LD_VAR 0 3
71058: PUSH
71059: LD_VAR 0 4
71063: MINUS
71064: ST_TO_ADDR
// max_x := x + r ;
71065: LD_ADDR_VAR 0 9
71069: PUSH
71070: LD_VAR 0 2
71074: PUSH
71075: LD_VAR 0 4
71079: PLUS
71080: ST_TO_ADDR
// max_y := y + r ;
71081: LD_ADDR_VAR 0 10
71085: PUSH
71086: LD_VAR 0 3
71090: PUSH
71091: LD_VAR 0 4
71095: PLUS
71096: ST_TO_ADDR
// for _x = min_x to max_x do
71097: LD_ADDR_VAR 0 11
71101: PUSH
71102: DOUBLE
71103: LD_VAR 0 7
71107: DEC
71108: ST_TO_ADDR
71109: LD_VAR 0 9
71113: PUSH
71114: FOR_TO
71115: IFFALSE 71232
// for _y = min_y to max_y do
71117: LD_ADDR_VAR 0 12
71121: PUSH
71122: DOUBLE
71123: LD_VAR 0 8
71127: DEC
71128: ST_TO_ADDR
71129: LD_VAR 0 10
71133: PUSH
71134: FOR_TO
71135: IFFALSE 71228
// begin if not ValidHex ( _x , _y ) then
71137: LD_VAR 0 11
71141: PPUSH
71142: LD_VAR 0 12
71146: PPUSH
71147: CALL_OW 488
71151: NOT
71152: IFFALSE 71156
// continue ;
71154: GO 71134
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71156: LD_VAR 0 11
71160: PPUSH
71161: LD_VAR 0 12
71165: PPUSH
71166: CALL_OW 351
71170: PUSH
71171: LD_VAR 0 11
71175: PPUSH
71176: LD_VAR 0 12
71180: PPUSH
71181: CALL_OW 554
71185: AND
71186: IFFALSE 71226
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71188: LD_ADDR_VAR 0 13
71192: PUSH
71193: LD_VAR 0 13
71197: PPUSH
71198: LD_VAR 0 13
71202: PUSH
71203: LD_INT 1
71205: PLUS
71206: PPUSH
71207: LD_VAR 0 11
71211: PUSH
71212: LD_VAR 0 12
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PPUSH
71221: CALL_OW 2
71225: ST_TO_ADDR
// end ;
71226: GO 71134
71228: POP
71229: POP
71230: GO 71114
71232: POP
71233: POP
// if not list then
71234: LD_VAR 0 13
71238: NOT
71239: IFFALSE 71243
// exit ;
71241: GO 71487
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71243: LD_ADDR_VAR 0 13
71247: PUSH
71248: LD_VAR 0 1
71252: PPUSH
71253: LD_VAR 0 13
71257: PPUSH
71258: LD_INT 1
71260: PPUSH
71261: LD_INT 1
71263: PPUSH
71264: CALL 8392 0 4
71268: ST_TO_ADDR
// ComStop ( flame ) ;
71269: LD_VAR 0 1
71273: PPUSH
71274: CALL_OW 141
// for i in list do
71278: LD_ADDR_VAR 0 6
71282: PUSH
71283: LD_VAR 0 13
71287: PUSH
71288: FOR_IN
71289: IFFALSE 71320
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71291: LD_VAR 0 1
71295: PPUSH
71296: LD_VAR 0 6
71300: PUSH
71301: LD_INT 1
71303: ARRAY
71304: PPUSH
71305: LD_VAR 0 6
71309: PUSH
71310: LD_INT 2
71312: ARRAY
71313: PPUSH
71314: CALL_OW 176
71318: GO 71288
71320: POP
71321: POP
// repeat wait ( 0 0$1 ) ;
71322: LD_INT 35
71324: PPUSH
71325: CALL_OW 67
// task := GetTaskList ( flame ) ;
71329: LD_ADDR_VAR 0 14
71333: PUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 437
71343: ST_TO_ADDR
// if not task then
71344: LD_VAR 0 14
71348: NOT
71349: IFFALSE 71353
// exit ;
71351: GO 71487
// if task [ 1 ] [ 1 ] <> | then
71353: LD_VAR 0 14
71357: PUSH
71358: LD_INT 1
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PUSH
71366: LD_STRING |
71368: NONEQUAL
71369: IFFALSE 71373
// exit ;
71371: GO 71487
// _x := task [ 1 ] [ 2 ] ;
71373: LD_ADDR_VAR 0 11
71377: PUSH
71378: LD_VAR 0 14
71382: PUSH
71383: LD_INT 1
71385: ARRAY
71386: PUSH
71387: LD_INT 2
71389: ARRAY
71390: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71391: LD_ADDR_VAR 0 12
71395: PUSH
71396: LD_VAR 0 14
71400: PUSH
71401: LD_INT 1
71403: ARRAY
71404: PUSH
71405: LD_INT 3
71407: ARRAY
71408: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71409: LD_VAR 0 11
71413: PPUSH
71414: LD_VAR 0 12
71418: PPUSH
71419: CALL_OW 351
71423: NOT
71424: PUSH
71425: LD_VAR 0 11
71429: PPUSH
71430: LD_VAR 0 12
71434: PPUSH
71435: CALL_OW 554
71439: NOT
71440: OR
71441: IFFALSE 71475
// begin task := Delete ( task , 1 ) ;
71443: LD_ADDR_VAR 0 14
71447: PUSH
71448: LD_VAR 0 14
71452: PPUSH
71453: LD_INT 1
71455: PPUSH
71456: CALL_OW 3
71460: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71461: LD_VAR 0 1
71465: PPUSH
71466: LD_VAR 0 14
71470: PPUSH
71471: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 314
71484: NOT
71485: IFFALSE 71322
// end ;
71487: LD_VAR 0 5
71491: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71492: LD_EXP 106
71496: NOT
71497: IFFALSE 71547
71499: GO 71501
71501: DISABLE
// begin initHack := true ;
71502: LD_ADDR_EXP 106
71506: PUSH
71507: LD_INT 1
71509: ST_TO_ADDR
// hackTanks := [ ] ;
71510: LD_ADDR_EXP 107
71514: PUSH
71515: EMPTY
71516: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71517: LD_ADDR_EXP 108
71521: PUSH
71522: EMPTY
71523: ST_TO_ADDR
// hackLimit := 3 ;
71524: LD_ADDR_EXP 109
71528: PUSH
71529: LD_INT 3
71531: ST_TO_ADDR
// hackDist := 12 ;
71532: LD_ADDR_EXP 110
71536: PUSH
71537: LD_INT 12
71539: ST_TO_ADDR
// hackCounter := [ ] ;
71540: LD_ADDR_EXP 111
71544: PUSH
71545: EMPTY
71546: ST_TO_ADDR
// end ;
71547: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71548: LD_EXP 106
71552: PUSH
71553: LD_INT 34
71555: PUSH
71556: LD_INT 99
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PPUSH
71563: CALL_OW 69
71567: AND
71568: IFFALSE 71821
71570: GO 71572
71572: DISABLE
71573: LD_INT 0
71575: PPUSH
71576: PPUSH
// begin enable ;
71577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71578: LD_ADDR_VAR 0 1
71582: PUSH
71583: LD_INT 34
71585: PUSH
71586: LD_INT 99
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PPUSH
71593: CALL_OW 69
71597: PUSH
71598: FOR_IN
71599: IFFALSE 71819
// begin if not i in hackTanks then
71601: LD_VAR 0 1
71605: PUSH
71606: LD_EXP 107
71610: IN
71611: NOT
71612: IFFALSE 71695
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71614: LD_ADDR_EXP 107
71618: PUSH
71619: LD_EXP 107
71623: PPUSH
71624: LD_EXP 107
71628: PUSH
71629: LD_INT 1
71631: PLUS
71632: PPUSH
71633: LD_VAR 0 1
71637: PPUSH
71638: CALL_OW 1
71642: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71643: LD_ADDR_EXP 108
71647: PUSH
71648: LD_EXP 108
71652: PPUSH
71653: LD_EXP 108
71657: PUSH
71658: LD_INT 1
71660: PLUS
71661: PPUSH
71662: EMPTY
71663: PPUSH
71664: CALL_OW 1
71668: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71669: LD_ADDR_EXP 111
71673: PUSH
71674: LD_EXP 111
71678: PPUSH
71679: LD_EXP 111
71683: PUSH
71684: LD_INT 1
71686: PLUS
71687: PPUSH
71688: EMPTY
71689: PPUSH
71690: CALL_OW 1
71694: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71695: LD_VAR 0 1
71699: PPUSH
71700: CALL_OW 302
71704: NOT
71705: IFFALSE 71718
// begin HackUnlinkAll ( i ) ;
71707: LD_VAR 0 1
71711: PPUSH
71712: CALL 71824 0 1
// continue ;
71716: GO 71598
// end ; HackCheckCapturedStatus ( i ) ;
71718: LD_VAR 0 1
71722: PPUSH
71723: CALL 72267 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71727: LD_ADDR_VAR 0 2
71731: PUSH
71732: LD_INT 81
71734: PUSH
71735: LD_VAR 0 1
71739: PPUSH
71740: CALL_OW 255
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 33
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 91
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: LD_EXP 110
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 50
71779: PUSH
71780: EMPTY
71781: LIST
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: PPUSH
71789: CALL_OW 69
71793: ST_TO_ADDR
// if not tmp then
71794: LD_VAR 0 2
71798: NOT
71799: IFFALSE 71803
// continue ;
71801: GO 71598
// HackLink ( i , tmp ) ;
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_VAR 0 2
71812: PPUSH
71813: CALL 71960 0 2
// end ;
71817: GO 71598
71819: POP
71820: POP
// end ;
71821: PPOPN 2
71823: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71824: LD_INT 0
71826: PPUSH
71827: PPUSH
71828: PPUSH
// if not hack in hackTanks then
71829: LD_VAR 0 1
71833: PUSH
71834: LD_EXP 107
71838: IN
71839: NOT
71840: IFFALSE 71844
// exit ;
71842: GO 71955
// index := GetElementIndex ( hackTanks , hack ) ;
71844: LD_ADDR_VAR 0 4
71848: PUSH
71849: LD_EXP 107
71853: PPUSH
71854: LD_VAR 0 1
71858: PPUSH
71859: CALL 7689 0 2
71863: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71864: LD_EXP 108
71868: PUSH
71869: LD_VAR 0 4
71873: ARRAY
71874: IFFALSE 71955
// begin for i in hackTanksCaptured [ index ] do
71876: LD_ADDR_VAR 0 3
71880: PUSH
71881: LD_EXP 108
71885: PUSH
71886: LD_VAR 0 4
71890: ARRAY
71891: PUSH
71892: FOR_IN
71893: IFFALSE 71919
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71895: LD_VAR 0 3
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: PPUSH
71904: LD_VAR 0 3
71908: PUSH
71909: LD_INT 2
71911: ARRAY
71912: PPUSH
71913: CALL_OW 235
71917: GO 71892
71919: POP
71920: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71921: LD_ADDR_EXP 108
71925: PUSH
71926: LD_EXP 108
71930: PPUSH
71931: LD_VAR 0 4
71935: PPUSH
71936: EMPTY
71937: PPUSH
71938: CALL_OW 1
71942: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71943: LD_VAR 0 1
71947: PPUSH
71948: LD_INT 0
71950: PPUSH
71951: CALL_OW 505
// end ; end ;
71955: LD_VAR 0 2
71959: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71960: LD_INT 0
71962: PPUSH
71963: PPUSH
71964: PPUSH
// if not hack in hackTanks or not vehicles then
71965: LD_VAR 0 1
71969: PUSH
71970: LD_EXP 107
71974: IN
71975: NOT
71976: PUSH
71977: LD_VAR 0 2
71981: NOT
71982: OR
71983: IFFALSE 71987
// exit ;
71985: GO 72262
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71987: LD_ADDR_VAR 0 2
71991: PUSH
71992: LD_VAR 0 1
71996: PPUSH
71997: LD_VAR 0 2
72001: PPUSH
72002: LD_INT 1
72004: PPUSH
72005: LD_INT 1
72007: PPUSH
72008: CALL 8339 0 4
72012: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_EXP 107
72022: PPUSH
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL 7689 0 2
72032: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
72033: LD_EXP 108
72037: PUSH
72038: LD_VAR 0 5
72042: ARRAY
72043: PUSH
72044: LD_EXP 109
72048: LESS
72049: IFFALSE 72238
// begin for i := 1 to vehicles do
72051: LD_ADDR_VAR 0 4
72055: PUSH
72056: DOUBLE
72057: LD_INT 1
72059: DEC
72060: ST_TO_ADDR
72061: LD_VAR 0 2
72065: PUSH
72066: FOR_TO
72067: IFFALSE 72236
// begin if hackTanksCaptured [ index ] = hackLimit then
72069: LD_EXP 108
72073: PUSH
72074: LD_VAR 0 5
72078: ARRAY
72079: PUSH
72080: LD_EXP 109
72084: EQUAL
72085: IFFALSE 72089
// break ;
72087: GO 72236
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
72089: LD_ADDR_EXP 111
72093: PUSH
72094: LD_EXP 111
72098: PPUSH
72099: LD_VAR 0 5
72103: PPUSH
72104: LD_EXP 111
72108: PUSH
72109: LD_VAR 0 5
72113: ARRAY
72114: PUSH
72115: LD_INT 1
72117: PLUS
72118: PPUSH
72119: CALL_OW 1
72123: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
72124: LD_ADDR_EXP 108
72128: PUSH
72129: LD_EXP 108
72133: PPUSH
72134: LD_VAR 0 5
72138: PUSH
72139: LD_EXP 108
72143: PUSH
72144: LD_VAR 0 5
72148: ARRAY
72149: PUSH
72150: LD_INT 1
72152: PLUS
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PPUSH
72158: LD_VAR 0 2
72162: PUSH
72163: LD_VAR 0 4
72167: ARRAY
72168: PUSH
72169: LD_VAR 0 2
72173: PUSH
72174: LD_VAR 0 4
72178: ARRAY
72179: PPUSH
72180: CALL_OW 255
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PPUSH
72189: CALL 7904 0 3
72193: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72194: LD_VAR 0 2
72198: PUSH
72199: LD_VAR 0 4
72203: ARRAY
72204: PPUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: CALL_OW 255
72214: PPUSH
72215: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72219: LD_VAR 0 2
72223: PUSH
72224: LD_VAR 0 4
72228: ARRAY
72229: PPUSH
72230: CALL_OW 141
// end ;
72234: GO 72066
72236: POP
72237: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72238: LD_VAR 0 1
72242: PPUSH
72243: LD_EXP 108
72247: PUSH
72248: LD_VAR 0 5
72252: ARRAY
72253: PUSH
72254: LD_INT 0
72256: PLUS
72257: PPUSH
72258: CALL_OW 505
// end ;
72262: LD_VAR 0 3
72266: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72267: LD_INT 0
72269: PPUSH
72270: PPUSH
72271: PPUSH
72272: PPUSH
// if not hack in hackTanks then
72273: LD_VAR 0 1
72277: PUSH
72278: LD_EXP 107
72282: IN
72283: NOT
72284: IFFALSE 72288
// exit ;
72286: GO 72528
// index := GetElementIndex ( hackTanks , hack ) ;
72288: LD_ADDR_VAR 0 4
72292: PUSH
72293: LD_EXP 107
72297: PPUSH
72298: LD_VAR 0 1
72302: PPUSH
72303: CALL 7689 0 2
72307: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72308: LD_ADDR_VAR 0 3
72312: PUSH
72313: DOUBLE
72314: LD_EXP 108
72318: PUSH
72319: LD_VAR 0 4
72323: ARRAY
72324: INC
72325: ST_TO_ADDR
72326: LD_INT 1
72328: PUSH
72329: FOR_DOWNTO
72330: IFFALSE 72502
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72332: LD_ADDR_VAR 0 5
72336: PUSH
72337: LD_EXP 108
72341: PUSH
72342: LD_VAR 0 4
72346: ARRAY
72347: PUSH
72348: LD_VAR 0 3
72352: ARRAY
72353: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72354: LD_VAR 0 5
72358: PUSH
72359: LD_INT 1
72361: ARRAY
72362: PPUSH
72363: CALL_OW 302
72367: NOT
72368: PUSH
72369: LD_VAR 0 5
72373: PUSH
72374: LD_INT 1
72376: ARRAY
72377: PPUSH
72378: CALL_OW 255
72382: PUSH
72383: LD_VAR 0 1
72387: PPUSH
72388: CALL_OW 255
72392: NONEQUAL
72393: OR
72394: IFFALSE 72500
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72396: LD_VAR 0 5
72400: PUSH
72401: LD_INT 1
72403: ARRAY
72404: PPUSH
72405: CALL_OW 305
72409: PUSH
72410: LD_VAR 0 5
72414: PUSH
72415: LD_INT 1
72417: ARRAY
72418: PPUSH
72419: CALL_OW 255
72423: PUSH
72424: LD_VAR 0 1
72428: PPUSH
72429: CALL_OW 255
72433: EQUAL
72434: AND
72435: IFFALSE 72459
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72437: LD_VAR 0 5
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PPUSH
72446: LD_VAR 0 5
72450: PUSH
72451: LD_INT 2
72453: ARRAY
72454: PPUSH
72455: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72459: LD_ADDR_EXP 108
72463: PUSH
72464: LD_EXP 108
72468: PPUSH
72469: LD_VAR 0 4
72473: PPUSH
72474: LD_EXP 108
72478: PUSH
72479: LD_VAR 0 4
72483: ARRAY
72484: PPUSH
72485: LD_VAR 0 3
72489: PPUSH
72490: CALL_OW 3
72494: PPUSH
72495: CALL_OW 1
72499: ST_TO_ADDR
// end ; end ;
72500: GO 72329
72502: POP
72503: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72504: LD_VAR 0 1
72508: PPUSH
72509: LD_EXP 108
72513: PUSH
72514: LD_VAR 0 4
72518: ARRAY
72519: PUSH
72520: LD_INT 0
72522: PLUS
72523: PPUSH
72524: CALL_OW 505
// end ;
72528: LD_VAR 0 2
72532: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72533: LD_INT 0
72535: PPUSH
72536: PPUSH
72537: PPUSH
72538: PPUSH
// if not hack in hackTanks then
72539: LD_VAR 0 1
72543: PUSH
72544: LD_EXP 107
72548: IN
72549: NOT
72550: IFFALSE 72554
// exit ;
72552: GO 72639
// index := GetElementIndex ( hackTanks , hack ) ;
72554: LD_ADDR_VAR 0 5
72558: PUSH
72559: LD_EXP 107
72563: PPUSH
72564: LD_VAR 0 1
72568: PPUSH
72569: CALL 7689 0 2
72573: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72574: LD_ADDR_VAR 0 4
72578: PUSH
72579: DOUBLE
72580: LD_INT 1
72582: DEC
72583: ST_TO_ADDR
72584: LD_EXP 108
72588: PUSH
72589: LD_VAR 0 5
72593: ARRAY
72594: PUSH
72595: FOR_TO
72596: IFFALSE 72637
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72598: LD_EXP 108
72602: PUSH
72603: LD_VAR 0 5
72607: ARRAY
72608: PUSH
72609: LD_VAR 0 4
72613: ARRAY
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PUSH
72619: LD_VAR 0 2
72623: EQUAL
72624: IFFALSE 72635
// KillUnit ( vehicle ) ;
72626: LD_VAR 0 2
72630: PPUSH
72631: CALL_OW 66
72635: GO 72595
72637: POP
72638: POP
// end ;
72639: LD_VAR 0 3
72643: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72644: LD_EXP 112
72648: NOT
72649: IFFALSE 72684
72651: GO 72653
72653: DISABLE
// begin initMiner := true ;
72654: LD_ADDR_EXP 112
72658: PUSH
72659: LD_INT 1
72661: ST_TO_ADDR
// minersList := [ ] ;
72662: LD_ADDR_EXP 113
72666: PUSH
72667: EMPTY
72668: ST_TO_ADDR
// minerMinesList := [ ] ;
72669: LD_ADDR_EXP 114
72673: PUSH
72674: EMPTY
72675: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72676: LD_ADDR_EXP 115
72680: PUSH
72681: LD_INT 5
72683: ST_TO_ADDR
// end ;
72684: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72685: LD_EXP 112
72689: PUSH
72690: LD_INT 34
72692: PUSH
72693: LD_INT 81
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PPUSH
72700: CALL_OW 69
72704: AND
72705: IFFALSE 73166
72707: GO 72709
72709: DISABLE
72710: LD_INT 0
72712: PPUSH
72713: PPUSH
72714: PPUSH
72715: PPUSH
// begin enable ;
72716: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72717: LD_ADDR_VAR 0 1
72721: PUSH
72722: LD_INT 34
72724: PUSH
72725: LD_INT 81
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PPUSH
72732: CALL_OW 69
72736: PUSH
72737: FOR_IN
72738: IFFALSE 72810
// begin if not i in minersList then
72740: LD_VAR 0 1
72744: PUSH
72745: LD_EXP 113
72749: IN
72750: NOT
72751: IFFALSE 72808
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72753: LD_ADDR_EXP 113
72757: PUSH
72758: LD_EXP 113
72762: PPUSH
72763: LD_EXP 113
72767: PUSH
72768: LD_INT 1
72770: PLUS
72771: PPUSH
72772: LD_VAR 0 1
72776: PPUSH
72777: CALL_OW 1
72781: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72782: LD_ADDR_EXP 114
72786: PUSH
72787: LD_EXP 114
72791: PPUSH
72792: LD_EXP 114
72796: PUSH
72797: LD_INT 1
72799: PLUS
72800: PPUSH
72801: EMPTY
72802: PPUSH
72803: CALL_OW 1
72807: ST_TO_ADDR
// end end ;
72808: GO 72737
72810: POP
72811: POP
// for i := minerMinesList downto 1 do
72812: LD_ADDR_VAR 0 1
72816: PUSH
72817: DOUBLE
72818: LD_EXP 114
72822: INC
72823: ST_TO_ADDR
72824: LD_INT 1
72826: PUSH
72827: FOR_DOWNTO
72828: IFFALSE 73164
// begin if IsLive ( minersList [ i ] ) then
72830: LD_EXP 113
72834: PUSH
72835: LD_VAR 0 1
72839: ARRAY
72840: PPUSH
72841: CALL_OW 300
72845: IFFALSE 72873
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72847: LD_EXP 113
72851: PUSH
72852: LD_VAR 0 1
72856: ARRAY
72857: PPUSH
72858: LD_EXP 114
72862: PUSH
72863: LD_VAR 0 1
72867: ARRAY
72868: PPUSH
72869: CALL_OW 505
// if not minerMinesList [ i ] then
72873: LD_EXP 114
72877: PUSH
72878: LD_VAR 0 1
72882: ARRAY
72883: NOT
72884: IFFALSE 72888
// continue ;
72886: GO 72827
// for j := minerMinesList [ i ] downto 1 do
72888: LD_ADDR_VAR 0 2
72892: PUSH
72893: DOUBLE
72894: LD_EXP 114
72898: PUSH
72899: LD_VAR 0 1
72903: ARRAY
72904: INC
72905: ST_TO_ADDR
72906: LD_INT 1
72908: PUSH
72909: FOR_DOWNTO
72910: IFFALSE 73160
// begin side := GetSide ( minersList [ i ] ) ;
72912: LD_ADDR_VAR 0 3
72916: PUSH
72917: LD_EXP 113
72921: PUSH
72922: LD_VAR 0 1
72926: ARRAY
72927: PPUSH
72928: CALL_OW 255
72932: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72933: LD_ADDR_VAR 0 4
72937: PUSH
72938: LD_EXP 114
72942: PUSH
72943: LD_VAR 0 1
72947: ARRAY
72948: PUSH
72949: LD_VAR 0 2
72953: ARRAY
72954: PUSH
72955: LD_INT 1
72957: ARRAY
72958: PPUSH
72959: LD_EXP 114
72963: PUSH
72964: LD_VAR 0 1
72968: ARRAY
72969: PUSH
72970: LD_VAR 0 2
72974: ARRAY
72975: PUSH
72976: LD_INT 2
72978: ARRAY
72979: PPUSH
72980: CALL_OW 428
72984: ST_TO_ADDR
// if not tmp then
72985: LD_VAR 0 4
72989: NOT
72990: IFFALSE 72994
// continue ;
72992: GO 72909
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72994: LD_VAR 0 4
72998: PUSH
72999: LD_INT 81
73001: PUSH
73002: LD_VAR 0 3
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PPUSH
73011: CALL_OW 69
73015: IN
73016: PUSH
73017: LD_EXP 114
73021: PUSH
73022: LD_VAR 0 1
73026: ARRAY
73027: PUSH
73028: LD_VAR 0 2
73032: ARRAY
73033: PUSH
73034: LD_INT 1
73036: ARRAY
73037: PPUSH
73038: LD_EXP 114
73042: PUSH
73043: LD_VAR 0 1
73047: ARRAY
73048: PUSH
73049: LD_VAR 0 2
73053: ARRAY
73054: PUSH
73055: LD_INT 2
73057: ARRAY
73058: PPUSH
73059: CALL_OW 458
73063: AND
73064: IFFALSE 73158
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
73066: LD_EXP 114
73070: PUSH
73071: LD_VAR 0 1
73075: ARRAY
73076: PUSH
73077: LD_VAR 0 2
73081: ARRAY
73082: PUSH
73083: LD_INT 1
73085: ARRAY
73086: PPUSH
73087: LD_EXP 114
73091: PUSH
73092: LD_VAR 0 1
73096: ARRAY
73097: PUSH
73098: LD_VAR 0 2
73102: ARRAY
73103: PUSH
73104: LD_INT 2
73106: ARRAY
73107: PPUSH
73108: LD_VAR 0 3
73112: PPUSH
73113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
73117: LD_ADDR_EXP 114
73121: PUSH
73122: LD_EXP 114
73126: PPUSH
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_EXP 114
73136: PUSH
73137: LD_VAR 0 1
73141: ARRAY
73142: PPUSH
73143: LD_VAR 0 2
73147: PPUSH
73148: CALL_OW 3
73152: PPUSH
73153: CALL_OW 1
73157: ST_TO_ADDR
// end ; end ;
73158: GO 72909
73160: POP
73161: POP
// end ;
73162: GO 72827
73164: POP
73165: POP
// end ;
73166: PPOPN 4
73168: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73169: LD_INT 0
73171: PPUSH
73172: PPUSH
// result := false ;
73173: LD_ADDR_VAR 0 4
73177: PUSH
73178: LD_INT 0
73180: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73181: LD_VAR 0 1
73185: PPUSH
73186: CALL_OW 264
73190: PUSH
73191: LD_INT 81
73193: EQUAL
73194: NOT
73195: IFFALSE 73199
// exit ;
73197: GO 73439
// index := GetElementIndex ( minersList , unit ) ;
73199: LD_ADDR_VAR 0 5
73203: PUSH
73204: LD_EXP 113
73208: PPUSH
73209: LD_VAR 0 1
73213: PPUSH
73214: CALL 7689 0 2
73218: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73219: LD_EXP 114
73223: PUSH
73224: LD_VAR 0 5
73228: ARRAY
73229: PUSH
73230: LD_EXP 115
73234: GREATEREQUAL
73235: IFFALSE 73239
// exit ;
73237: GO 73439
// ComMoveXY ( unit , x , y ) ;
73239: LD_VAR 0 1
73243: PPUSH
73244: LD_VAR 0 2
73248: PPUSH
73249: LD_VAR 0 3
73253: PPUSH
73254: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73258: LD_INT 35
73260: PPUSH
73261: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73265: LD_VAR 0 1
73269: PPUSH
73270: LD_VAR 0 2
73274: PPUSH
73275: LD_VAR 0 3
73279: PPUSH
73280: CALL 39430 0 3
73284: NOT
73285: PUSH
73286: LD_VAR 0 1
73290: PPUSH
73291: CALL_OW 314
73295: AND
73296: IFFALSE 73300
// exit ;
73298: GO 73439
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73300: LD_VAR 0 2
73304: PPUSH
73305: LD_VAR 0 3
73309: PPUSH
73310: CALL_OW 428
73314: PUSH
73315: LD_VAR 0 1
73319: EQUAL
73320: PUSH
73321: LD_VAR 0 1
73325: PPUSH
73326: CALL_OW 314
73330: NOT
73331: AND
73332: IFFALSE 73258
// PlaySoundXY ( x , y , PlantMine ) ;
73334: LD_VAR 0 2
73338: PPUSH
73339: LD_VAR 0 3
73343: PPUSH
73344: LD_STRING PlantMine
73346: PPUSH
73347: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73351: LD_VAR 0 2
73355: PPUSH
73356: LD_VAR 0 3
73360: PPUSH
73361: LD_VAR 0 1
73365: PPUSH
73366: CALL_OW 255
73370: PPUSH
73371: LD_INT 0
73373: PPUSH
73374: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73378: LD_ADDR_EXP 114
73382: PUSH
73383: LD_EXP 114
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_EXP 114
73397: PUSH
73398: LD_VAR 0 5
73402: ARRAY
73403: PUSH
73404: LD_INT 1
73406: PLUS
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PPUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_VAR 0 3
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PPUSH
73426: CALL 7904 0 3
73430: ST_TO_ADDR
// result := true ;
73431: LD_ADDR_VAR 0 4
73435: PUSH
73436: LD_INT 1
73438: ST_TO_ADDR
// end ;
73439: LD_VAR 0 4
73443: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73444: LD_INT 0
73446: PPUSH
73447: PPUSH
73448: PPUSH
// if not unit in minersList then
73449: LD_VAR 0 1
73453: PUSH
73454: LD_EXP 113
73458: IN
73459: NOT
73460: IFFALSE 73464
// exit ;
73462: GO 73856
// index := GetElementIndex ( minersList , unit ) ;
73464: LD_ADDR_VAR 0 6
73468: PUSH
73469: LD_EXP 113
73473: PPUSH
73474: LD_VAR 0 1
73478: PPUSH
73479: CALL 7689 0 2
73483: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73484: LD_ADDR_VAR 0 5
73488: PUSH
73489: DOUBLE
73490: LD_EXP 114
73494: PUSH
73495: LD_VAR 0 6
73499: ARRAY
73500: INC
73501: ST_TO_ADDR
73502: LD_INT 1
73504: PUSH
73505: FOR_DOWNTO
73506: IFFALSE 73667
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73508: LD_EXP 114
73512: PUSH
73513: LD_VAR 0 6
73517: ARRAY
73518: PUSH
73519: LD_VAR 0 5
73523: ARRAY
73524: PUSH
73525: LD_INT 1
73527: ARRAY
73528: PUSH
73529: LD_VAR 0 2
73533: EQUAL
73534: PUSH
73535: LD_EXP 114
73539: PUSH
73540: LD_VAR 0 6
73544: ARRAY
73545: PUSH
73546: LD_VAR 0 5
73550: ARRAY
73551: PUSH
73552: LD_INT 2
73554: ARRAY
73555: PUSH
73556: LD_VAR 0 3
73560: EQUAL
73561: AND
73562: IFFALSE 73665
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73564: LD_EXP 114
73568: PUSH
73569: LD_VAR 0 6
73573: ARRAY
73574: PUSH
73575: LD_VAR 0 5
73579: ARRAY
73580: PUSH
73581: LD_INT 1
73583: ARRAY
73584: PPUSH
73585: LD_EXP 114
73589: PUSH
73590: LD_VAR 0 6
73594: ARRAY
73595: PUSH
73596: LD_VAR 0 5
73600: ARRAY
73601: PUSH
73602: LD_INT 2
73604: ARRAY
73605: PPUSH
73606: LD_VAR 0 1
73610: PPUSH
73611: CALL_OW 255
73615: PPUSH
73616: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73620: LD_ADDR_EXP 114
73624: PUSH
73625: LD_EXP 114
73629: PPUSH
73630: LD_VAR 0 6
73634: PPUSH
73635: LD_EXP 114
73639: PUSH
73640: LD_VAR 0 6
73644: ARRAY
73645: PPUSH
73646: LD_VAR 0 5
73650: PPUSH
73651: CALL_OW 3
73655: PPUSH
73656: CALL_OW 1
73660: ST_TO_ADDR
// exit ;
73661: POP
73662: POP
73663: GO 73856
// end ; end ;
73665: GO 73505
73667: POP
73668: POP
// for i := minerMinesList [ index ] downto 1 do
73669: LD_ADDR_VAR 0 5
73673: PUSH
73674: DOUBLE
73675: LD_EXP 114
73679: PUSH
73680: LD_VAR 0 6
73684: ARRAY
73685: INC
73686: ST_TO_ADDR
73687: LD_INT 1
73689: PUSH
73690: FOR_DOWNTO
73691: IFFALSE 73854
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73693: LD_EXP 114
73697: PUSH
73698: LD_VAR 0 6
73702: ARRAY
73703: PUSH
73704: LD_VAR 0 5
73708: ARRAY
73709: PUSH
73710: LD_INT 1
73712: ARRAY
73713: PPUSH
73714: LD_EXP 114
73718: PUSH
73719: LD_VAR 0 6
73723: ARRAY
73724: PUSH
73725: LD_VAR 0 5
73729: ARRAY
73730: PUSH
73731: LD_INT 2
73733: ARRAY
73734: PPUSH
73735: LD_VAR 0 2
73739: PPUSH
73740: LD_VAR 0 3
73744: PPUSH
73745: CALL_OW 298
73749: PUSH
73750: LD_INT 6
73752: LESS
73753: IFFALSE 73852
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73755: LD_EXP 114
73759: PUSH
73760: LD_VAR 0 6
73764: ARRAY
73765: PUSH
73766: LD_VAR 0 5
73770: ARRAY
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: PPUSH
73776: LD_EXP 114
73780: PUSH
73781: LD_VAR 0 6
73785: ARRAY
73786: PUSH
73787: LD_VAR 0 5
73791: ARRAY
73792: PUSH
73793: LD_INT 2
73795: ARRAY
73796: PPUSH
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 255
73806: PPUSH
73807: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73811: LD_ADDR_EXP 114
73815: PUSH
73816: LD_EXP 114
73820: PPUSH
73821: LD_VAR 0 6
73825: PPUSH
73826: LD_EXP 114
73830: PUSH
73831: LD_VAR 0 6
73835: ARRAY
73836: PPUSH
73837: LD_VAR 0 5
73841: PPUSH
73842: CALL_OW 3
73846: PPUSH
73847: CALL_OW 1
73851: ST_TO_ADDR
// end ; end ;
73852: GO 73690
73854: POP
73855: POP
// end ;
73856: LD_VAR 0 4
73860: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73861: LD_INT 0
73863: PPUSH
73864: PPUSH
73865: PPUSH
73866: PPUSH
73867: PPUSH
73868: PPUSH
73869: PPUSH
73870: PPUSH
73871: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73872: LD_VAR 0 1
73876: PPUSH
73877: CALL_OW 264
73881: PUSH
73882: LD_INT 81
73884: EQUAL
73885: NOT
73886: PUSH
73887: LD_VAR 0 1
73891: PUSH
73892: LD_EXP 113
73896: IN
73897: NOT
73898: OR
73899: IFFALSE 73903
// exit ;
73901: GO 74225
// index := GetElementIndex ( minersList , unit ) ;
73903: LD_ADDR_VAR 0 6
73907: PUSH
73908: LD_EXP 113
73912: PPUSH
73913: LD_VAR 0 1
73917: PPUSH
73918: CALL 7689 0 2
73922: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73923: LD_ADDR_VAR 0 8
73927: PUSH
73928: LD_EXP 115
73932: PUSH
73933: LD_EXP 114
73937: PUSH
73938: LD_VAR 0 6
73942: ARRAY
73943: MINUS
73944: ST_TO_ADDR
// if not minesFreeAmount then
73945: LD_VAR 0 8
73949: NOT
73950: IFFALSE 73954
// exit ;
73952: GO 74225
// tmp := [ ] ;
73954: LD_ADDR_VAR 0 7
73958: PUSH
73959: EMPTY
73960: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73961: LD_ADDR_VAR 0 5
73965: PUSH
73966: DOUBLE
73967: LD_INT 1
73969: DEC
73970: ST_TO_ADDR
73971: LD_VAR 0 8
73975: PUSH
73976: FOR_TO
73977: IFFALSE 74172
// begin _d := rand ( 0 , 5 ) ;
73979: LD_ADDR_VAR 0 11
73983: PUSH
73984: LD_INT 0
73986: PPUSH
73987: LD_INT 5
73989: PPUSH
73990: CALL_OW 12
73994: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73995: LD_ADDR_VAR 0 12
73999: PUSH
74000: LD_INT 2
74002: PPUSH
74003: LD_INT 6
74005: PPUSH
74006: CALL_OW 12
74010: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
74011: LD_ADDR_VAR 0 9
74015: PUSH
74016: LD_VAR 0 2
74020: PPUSH
74021: LD_VAR 0 11
74025: PPUSH
74026: LD_VAR 0 12
74030: PPUSH
74031: CALL_OW 272
74035: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
74036: LD_ADDR_VAR 0 10
74040: PUSH
74041: LD_VAR 0 3
74045: PPUSH
74046: LD_VAR 0 11
74050: PPUSH
74051: LD_VAR 0 12
74055: PPUSH
74056: CALL_OW 273
74060: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
74061: LD_VAR 0 9
74065: PPUSH
74066: LD_VAR 0 10
74070: PPUSH
74071: CALL_OW 488
74075: PUSH
74076: LD_VAR 0 9
74080: PUSH
74081: LD_VAR 0 10
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_VAR 0 7
74094: IN
74095: NOT
74096: AND
74097: PUSH
74098: LD_VAR 0 9
74102: PPUSH
74103: LD_VAR 0 10
74107: PPUSH
74108: CALL_OW 458
74112: NOT
74113: AND
74114: IFFALSE 74156
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
74116: LD_ADDR_VAR 0 7
74120: PUSH
74121: LD_VAR 0 7
74125: PPUSH
74126: LD_VAR 0 7
74130: PUSH
74131: LD_INT 1
74133: PLUS
74134: PPUSH
74135: LD_VAR 0 9
74139: PUSH
74140: LD_VAR 0 10
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PPUSH
74149: CALL_OW 1
74153: ST_TO_ADDR
74154: GO 74170
// i := i - 1 ;
74156: LD_ADDR_VAR 0 5
74160: PUSH
74161: LD_VAR 0 5
74165: PUSH
74166: LD_INT 1
74168: MINUS
74169: ST_TO_ADDR
// end ;
74170: GO 73976
74172: POP
74173: POP
// for i in tmp do
74174: LD_ADDR_VAR 0 5
74178: PUSH
74179: LD_VAR 0 7
74183: PUSH
74184: FOR_IN
74185: IFFALSE 74223
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74187: LD_VAR 0 1
74191: PPUSH
74192: LD_VAR 0 5
74196: PUSH
74197: LD_INT 1
74199: ARRAY
74200: PPUSH
74201: LD_VAR 0 5
74205: PUSH
74206: LD_INT 2
74208: ARRAY
74209: PPUSH
74210: CALL 73169 0 3
74214: NOT
74215: IFFALSE 74221
// exit ;
74217: POP
74218: POP
74219: GO 74225
74221: GO 74184
74223: POP
74224: POP
// end ;
74225: LD_VAR 0 4
74229: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74230: LD_INT 0
74232: PPUSH
74233: PPUSH
74234: PPUSH
74235: PPUSH
74236: PPUSH
74237: PPUSH
74238: PPUSH
74239: PPUSH
74240: PPUSH
// if GetClass ( unit ) <> class_sniper then
74241: LD_VAR 0 1
74245: PPUSH
74246: CALL_OW 257
74250: PUSH
74251: LD_INT 5
74253: NONEQUAL
74254: IFFALSE 74258
// exit ;
74256: GO 74724
// dist := 8 ;
74258: LD_ADDR_VAR 0 5
74262: PUSH
74263: LD_INT 8
74265: ST_TO_ADDR
// viewRange := 12 ;
74266: LD_ADDR_VAR 0 8
74270: PUSH
74271: LD_INT 12
74273: ST_TO_ADDR
// side := GetSide ( unit ) ;
74274: LD_ADDR_VAR 0 6
74278: PUSH
74279: LD_VAR 0 1
74283: PPUSH
74284: CALL_OW 255
74288: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74289: LD_INT 61
74291: PPUSH
74292: LD_VAR 0 6
74296: PPUSH
74297: CALL_OW 321
74301: PUSH
74302: LD_INT 2
74304: EQUAL
74305: IFFALSE 74315
// viewRange := 16 ;
74307: LD_ADDR_VAR 0 8
74311: PUSH
74312: LD_INT 16
74314: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74315: LD_VAR 0 1
74319: PPUSH
74320: LD_VAR 0 2
74324: PPUSH
74325: LD_VAR 0 3
74329: PPUSH
74330: CALL_OW 297
74334: PUSH
74335: LD_VAR 0 5
74339: GREATER
74340: IFFALSE 74419
// begin ComMoveXY ( unit , x , y ) ;
74342: LD_VAR 0 1
74346: PPUSH
74347: LD_VAR 0 2
74351: PPUSH
74352: LD_VAR 0 3
74356: PPUSH
74357: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74361: LD_INT 35
74363: PPUSH
74364: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74368: LD_VAR 0 1
74372: PPUSH
74373: LD_VAR 0 2
74377: PPUSH
74378: LD_VAR 0 3
74382: PPUSH
74383: CALL 39430 0 3
74387: NOT
74388: IFFALSE 74392
// exit ;
74390: GO 74724
// until GetDistUnitXY ( unit , x , y ) < dist ;
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_VAR 0 2
74401: PPUSH
74402: LD_VAR 0 3
74406: PPUSH
74407: CALL_OW 297
74411: PUSH
74412: LD_VAR 0 5
74416: LESS
74417: IFFALSE 74361
// end ; ComTurnXY ( unit , x , y ) ;
74419: LD_VAR 0 1
74423: PPUSH
74424: LD_VAR 0 2
74428: PPUSH
74429: LD_VAR 0 3
74433: PPUSH
74434: CALL_OW 118
// repeat if Multiplayer then
74438: LD_OWVAR 4
74442: IFFALSE 74453
// wait ( 35 ) else
74444: LD_INT 35
74446: PPUSH
74447: CALL_OW 67
74451: GO 74460
// wait ( 5 ) ;
74453: LD_INT 5
74455: PPUSH
74456: CALL_OW 67
// _d := GetDir ( unit ) ;
74460: LD_ADDR_VAR 0 11
74464: PUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: CALL_OW 254
74474: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74475: LD_ADDR_VAR 0 7
74479: PUSH
74480: LD_VAR 0 1
74484: PPUSH
74485: CALL_OW 250
74489: PPUSH
74490: LD_VAR 0 1
74494: PPUSH
74495: CALL_OW 251
74499: PPUSH
74500: LD_VAR 0 2
74504: PPUSH
74505: LD_VAR 0 3
74509: PPUSH
74510: CALL 42038 0 4
74514: ST_TO_ADDR
// until dir = _d ;
74515: LD_VAR 0 7
74519: PUSH
74520: LD_VAR 0 11
74524: EQUAL
74525: IFFALSE 74438
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74527: LD_ADDR_VAR 0 9
74531: PUSH
74532: LD_VAR 0 1
74536: PPUSH
74537: CALL_OW 250
74541: PPUSH
74542: LD_VAR 0 7
74546: PPUSH
74547: LD_VAR 0 5
74551: PPUSH
74552: CALL_OW 272
74556: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74557: LD_ADDR_VAR 0 10
74561: PUSH
74562: LD_VAR 0 1
74566: PPUSH
74567: CALL_OW 251
74571: PPUSH
74572: LD_VAR 0 7
74576: PPUSH
74577: LD_VAR 0 5
74581: PPUSH
74582: CALL_OW 273
74586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74587: LD_VAR 0 9
74591: PPUSH
74592: LD_VAR 0 10
74596: PPUSH
74597: CALL_OW 488
74601: NOT
74602: IFFALSE 74606
// exit ;
74604: GO 74724
// ComAnimCustom ( unit , 1 ) ;
74606: LD_VAR 0 1
74610: PPUSH
74611: LD_INT 1
74613: PPUSH
74614: CALL_OW 592
// p := 0 ;
74618: LD_ADDR_VAR 0 12
74622: PUSH
74623: LD_INT 0
74625: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74626: LD_VAR 0 9
74630: PPUSH
74631: LD_VAR 0 10
74635: PPUSH
74636: LD_VAR 0 6
74640: PPUSH
74641: LD_VAR 0 8
74645: PPUSH
74646: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74650: LD_INT 35
74652: PPUSH
74653: CALL_OW 67
// p := Inc ( p ) ;
74657: LD_ADDR_VAR 0 12
74661: PUSH
74662: LD_VAR 0 12
74666: PPUSH
74667: CALL 41994 0 1
74671: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74672: LD_VAR 0 12
74676: PUSH
74677: LD_INT 3
74679: EQUAL
74680: PUSH
74681: LD_VAR 0 1
74685: PPUSH
74686: CALL_OW 302
74690: NOT
74691: OR
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: CALL_OW 301
74702: OR
74703: IFFALSE 74650
// RemoveSeeing ( _x , _y , side ) ;
74705: LD_VAR 0 9
74709: PPUSH
74710: LD_VAR 0 10
74714: PPUSH
74715: LD_VAR 0 6
74719: PPUSH
74720: CALL_OW 331
// end ;
74724: LD_VAR 0 4
74728: RET
