// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45737 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46052 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 33
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 34
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 36
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 33
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 34
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 35
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 32
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45192 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45192 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45192 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45192 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45192 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45192 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45192 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45192 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5044 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45025 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45025 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45025 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45025 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45025 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45025 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45025 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45025 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45025 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45025 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45025 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45025 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45025 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45025 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45025 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45025 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45192 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45192 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45192 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45192 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45192 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45192 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45192 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45192 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45192 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45192 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45192 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45192 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45192 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45192 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45192 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45192 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45192 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45192 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45192 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45192 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45192 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45192 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45192 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45192 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42014 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 20
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 53871 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 50574 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 53888 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 51177 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 53929 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 51230 0 3
2939: PPOPN 3
2941: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
// if exist_mode then
2946: LD_VAR 0 2
2950: IFFALSE 2975
// unit := CreateCharacter ( prefix & ident ) else
2952: LD_ADDR_VAR 0 5
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 1
2966: STR
2967: PPUSH
2968: CALL_OW 34
2972: ST_TO_ADDR
2973: GO 2990
// unit := NewCharacter ( ident ) ;
2975: LD_ADDR_VAR 0 5
2979: PUSH
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 25
2989: ST_TO_ADDR
// result := unit ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_VAR 0 5
2999: ST_TO_ADDR
// end ;
3000: LD_VAR 0 4
3004: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3005: LD_INT 0
3007: PPUSH
3008: PPUSH
// if not side or not nation then
3009: LD_VAR 0 1
3013: NOT
3014: PUSH
3015: LD_VAR 0 2
3019: NOT
3020: OR
3021: IFFALSE 3025
// exit ;
3023: GO 3793
// case nation of nation_american :
3025: LD_VAR 0 2
3029: PUSH
3030: LD_INT 1
3032: DOUBLE
3033: EQUAL
3034: IFTRUE 3038
3036: GO 3252
3038: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3039: LD_ADDR_VAR 0 4
3043: PUSH
3044: LD_INT 35
3046: PUSH
3047: LD_INT 45
3049: PUSH
3050: LD_INT 46
3052: PUSH
3053: LD_INT 47
3055: PUSH
3056: LD_INT 82
3058: PUSH
3059: LD_INT 83
3061: PUSH
3062: LD_INT 84
3064: PUSH
3065: LD_INT 85
3067: PUSH
3068: LD_INT 86
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: LD_INT 2
3076: PUSH
3077: LD_INT 6
3079: PUSH
3080: LD_INT 15
3082: PUSH
3083: LD_INT 16
3085: PUSH
3086: LD_INT 7
3088: PUSH
3089: LD_INT 12
3091: PUSH
3092: LD_INT 13
3094: PUSH
3095: LD_INT 10
3097: PUSH
3098: LD_INT 14
3100: PUSH
3101: LD_INT 20
3103: PUSH
3104: LD_INT 21
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 32
3115: PUSH
3116: LD_INT 27
3118: PUSH
3119: LD_INT 36
3121: PUSH
3122: LD_INT 69
3124: PUSH
3125: LD_INT 39
3127: PUSH
3128: LD_INT 34
3130: PUSH
3131: LD_INT 40
3133: PUSH
3134: LD_INT 48
3136: PUSH
3137: LD_INT 49
3139: PUSH
3140: LD_INT 50
3142: PUSH
3143: LD_INT 51
3145: PUSH
3146: LD_INT 52
3148: PUSH
3149: LD_INT 53
3151: PUSH
3152: LD_INT 54
3154: PUSH
3155: LD_INT 55
3157: PUSH
3158: LD_INT 56
3160: PUSH
3161: LD_INT 57
3163: PUSH
3164: LD_INT 58
3166: PUSH
3167: LD_INT 59
3169: PUSH
3170: LD_INT 60
3172: PUSH
3173: LD_INT 61
3175: PUSH
3176: LD_INT 62
3178: PUSH
3179: LD_INT 80
3181: PUSH
3182: LD_INT 82
3184: PUSH
3185: LD_INT 83
3187: PUSH
3188: LD_INT 84
3190: PUSH
3191: LD_INT 85
3193: PUSH
3194: LD_INT 86
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: ST_TO_ADDR
3250: GO 3717
3252: LD_INT 2
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3486
3260: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3261: LD_ADDR_VAR 0 4
3265: PUSH
3266: LD_INT 35
3268: PUSH
3269: LD_INT 45
3271: PUSH
3272: LD_INT 46
3274: PUSH
3275: LD_INT 47
3277: PUSH
3278: LD_INT 82
3280: PUSH
3281: LD_INT 83
3283: PUSH
3284: LD_INT 84
3286: PUSH
3287: LD_INT 85
3289: PUSH
3290: LD_INT 87
3292: PUSH
3293: LD_INT 70
3295: PUSH
3296: LD_INT 1
3298: PUSH
3299: LD_INT 11
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 5
3310: PUSH
3311: LD_INT 6
3313: PUSH
3314: LD_INT 15
3316: PUSH
3317: LD_INT 18
3319: PUSH
3320: LD_INT 7
3322: PUSH
3323: LD_INT 17
3325: PUSH
3326: LD_INT 8
3328: PUSH
3329: LD_INT 20
3331: PUSH
3332: LD_INT 21
3334: PUSH
3335: LD_INT 22
3337: PUSH
3338: LD_INT 72
3340: PUSH
3341: LD_INT 26
3343: PUSH
3344: LD_INT 69
3346: PUSH
3347: LD_INT 39
3349: PUSH
3350: LD_INT 40
3352: PUSH
3353: LD_INT 41
3355: PUSH
3356: LD_INT 42
3358: PUSH
3359: LD_INT 43
3361: PUSH
3362: LD_INT 48
3364: PUSH
3365: LD_INT 49
3367: PUSH
3368: LD_INT 50
3370: PUSH
3371: LD_INT 51
3373: PUSH
3374: LD_INT 52
3376: PUSH
3377: LD_INT 53
3379: PUSH
3380: LD_INT 54
3382: PUSH
3383: LD_INT 55
3385: PUSH
3386: LD_INT 56
3388: PUSH
3389: LD_INT 60
3391: PUSH
3392: LD_INT 61
3394: PUSH
3395: LD_INT 62
3397: PUSH
3398: LD_INT 66
3400: PUSH
3401: LD_INT 67
3403: PUSH
3404: LD_INT 68
3406: PUSH
3407: LD_INT 81
3409: PUSH
3410: LD_INT 82
3412: PUSH
3413: LD_INT 83
3415: PUSH
3416: LD_INT 84
3418: PUSH
3419: LD_INT 85
3421: PUSH
3422: LD_INT 87
3424: PUSH
3425: LD_INT 88
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: ST_TO_ADDR
3484: GO 3717
3486: LD_INT 3
3488: DOUBLE
3489: EQUAL
3490: IFTRUE 3494
3492: GO 3716
3494: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3495: LD_ADDR_VAR 0 4
3499: PUSH
3500: LD_INT 46
3502: PUSH
3503: LD_INT 47
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: LD_INT 2
3511: PUSH
3512: LD_INT 82
3514: PUSH
3515: LD_INT 83
3517: PUSH
3518: LD_INT 84
3520: PUSH
3521: LD_INT 85
3523: PUSH
3524: LD_INT 86
3526: PUSH
3527: LD_INT 11
3529: PUSH
3530: LD_INT 9
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: LD_INT 19
3538: PUSH
3539: LD_INT 21
3541: PUSH
3542: LD_INT 24
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 25
3550: PUSH
3551: LD_INT 28
3553: PUSH
3554: LD_INT 29
3556: PUSH
3557: LD_INT 30
3559: PUSH
3560: LD_INT 31
3562: PUSH
3563: LD_INT 37
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 27
3574: PUSH
3575: LD_INT 33
3577: PUSH
3578: LD_INT 69
3580: PUSH
3581: LD_INT 39
3583: PUSH
3584: LD_INT 34
3586: PUSH
3587: LD_INT 40
3589: PUSH
3590: LD_INT 71
3592: PUSH
3593: LD_INT 23
3595: PUSH
3596: LD_INT 44
3598: PUSH
3599: LD_INT 48
3601: PUSH
3602: LD_INT 49
3604: PUSH
3605: LD_INT 50
3607: PUSH
3608: LD_INT 51
3610: PUSH
3611: LD_INT 52
3613: PUSH
3614: LD_INT 53
3616: PUSH
3617: LD_INT 54
3619: PUSH
3620: LD_INT 55
3622: PUSH
3623: LD_INT 56
3625: PUSH
3626: LD_INT 57
3628: PUSH
3629: LD_INT 58
3631: PUSH
3632: LD_INT 59
3634: PUSH
3635: LD_INT 63
3637: PUSH
3638: LD_INT 64
3640: PUSH
3641: LD_INT 65
3643: PUSH
3644: LD_INT 82
3646: PUSH
3647: LD_INT 83
3649: PUSH
3650: LD_INT 84
3652: PUSH
3653: LD_INT 85
3655: PUSH
3656: LD_INT 86
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: ST_TO_ADDR
3714: GO 3717
3716: POP
// if state > - 1 and state < 3 then
3717: LD_VAR 0 3
3721: PUSH
3722: LD_INT 1
3724: NEG
3725: GREATER
3726: PUSH
3727: LD_VAR 0 3
3731: PUSH
3732: LD_INT 3
3734: LESS
3735: AND
3736: IFFALSE 3793
// for i in result do
3738: LD_ADDR_VAR 0 5
3742: PUSH
3743: LD_VAR 0 4
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3791
// if GetTech ( i , side ) <> state then
3751: LD_VAR 0 5
3755: PPUSH
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 321
3765: PUSH
3766: LD_VAR 0 3
3770: NONEQUAL
3771: IFFALSE 3789
// result := result diff i ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: LD_VAR 0 5
3787: DIFF
3788: ST_TO_ADDR
3789: GO 3748
3791: POP
3792: POP
// end ;
3793: LD_VAR 0 4
3797: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3798: LD_INT 0
3800: PPUSH
3801: PPUSH
3802: PPUSH
// result := true ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: LD_INT 1
3810: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_VAR 0 2
3820: PPUSH
3821: CALL_OW 480
3825: ST_TO_ADDR
// if not tmp then
3826: LD_VAR 0 5
3830: NOT
3831: IFFALSE 3835
// exit ;
3833: GO 3884
// for i in tmp do
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_VAR 0 5
3844: PUSH
3845: FOR_IN
3846: IFFALSE 3882
// if GetTech ( i , side ) <> state_researched then
3848: LD_VAR 0 4
3852: PPUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL_OW 321
3862: PUSH
3863: LD_INT 2
3865: NONEQUAL
3866: IFFALSE 3880
// begin result := false ;
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: LD_INT 0
3875: ST_TO_ADDR
// exit ;
3876: POP
3877: POP
3878: GO 3884
// end ;
3880: GO 3845
3882: POP
3883: POP
// end ;
3884: LD_VAR 0 3
3888: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3889: LD_INT 0
3891: PPUSH
3892: PPUSH
3893: PPUSH
3894: PPUSH
3895: PPUSH
3896: PPUSH
3897: PPUSH
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3904: LD_VAR 0 1
3908: NOT
3909: PUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 257
3919: PUSH
3920: LD_INT 9
3922: NONEQUAL
3923: OR
3924: IFFALSE 3928
// exit ;
3926: GO 4501
// side := GetSide ( unit ) ;
3928: LD_ADDR_VAR 0 9
3932: PUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: CALL_OW 255
3942: ST_TO_ADDR
// tech_space := tech_spacanom ;
3943: LD_ADDR_VAR 0 12
3947: PUSH
3948: LD_INT 29
3950: ST_TO_ADDR
// tech_time := tech_taurad ;
3951: LD_ADDR_VAR 0 13
3955: PUSH
3956: LD_INT 28
3958: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3959: LD_ADDR_VAR 0 11
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 310
3973: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3974: LD_VAR 0 11
3978: PPUSH
3979: CALL_OW 247
3983: PUSH
3984: LD_INT 2
3986: EQUAL
3987: IFFALSE 3991
// exit ;
3989: GO 4501
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3991: LD_ADDR_VAR 0 8
3995: PUSH
3996: LD_INT 81
3998: PUSH
3999: LD_VAR 0 9
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 21
4013: PUSH
4014: LD_INT 3
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PPUSH
4029: CALL_OW 69
4033: ST_TO_ADDR
// if not tmp then
4034: LD_VAR 0 8
4038: NOT
4039: IFFALSE 4043
// exit ;
4041: GO 4501
// if in_unit then
4043: LD_VAR 0 11
4047: IFFALSE 4071
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4049: LD_ADDR_VAR 0 10
4053: PUSH
4054: LD_VAR 0 8
4058: PPUSH
4059: LD_VAR 0 11
4063: PPUSH
4064: CALL_OW 74
4068: ST_TO_ADDR
4069: GO 4091
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4071: LD_ADDR_VAR 0 10
4075: PUSH
4076: LD_VAR 0 8
4080: PPUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: CALL_OW 74
4090: ST_TO_ADDR
// if not enemy then
4091: LD_VAR 0 10
4095: NOT
4096: IFFALSE 4100
// exit ;
4098: GO 4501
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4100: LD_VAR 0 11
4104: PUSH
4105: LD_VAR 0 11
4109: PPUSH
4110: LD_VAR 0 10
4114: PPUSH
4115: CALL_OW 296
4119: PUSH
4120: LD_INT 13
4122: GREATER
4123: AND
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: LD_VAR 0 10
4134: PPUSH
4135: CALL_OW 296
4139: PUSH
4140: LD_INT 12
4142: GREATER
4143: OR
4144: IFFALSE 4148
// exit ;
4146: GO 4501
// missile := [ 1 ] ;
4148: LD_ADDR_VAR 0 14
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: EMPTY
4157: LIST
4158: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4159: LD_VAR 0 9
4163: PPUSH
4164: LD_VAR 0 12
4168: PPUSH
4169: CALL_OW 325
4173: IFFALSE 4202
// missile := Replace ( missile , missile + 1 , 2 ) ;
4175: LD_ADDR_VAR 0 14
4179: PUSH
4180: LD_VAR 0 14
4184: PPUSH
4185: LD_VAR 0 14
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: PPUSH
4194: LD_INT 2
4196: PPUSH
4197: CALL_OW 1
4201: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4202: LD_VAR 0 9
4206: PPUSH
4207: LD_VAR 0 13
4211: PPUSH
4212: CALL_OW 325
4216: PUSH
4217: LD_VAR 0 10
4221: PPUSH
4222: CALL_OW 255
4226: PPUSH
4227: LD_VAR 0 13
4231: PPUSH
4232: CALL_OW 325
4236: NOT
4237: AND
4238: IFFALSE 4267
// missile := Replace ( missile , missile + 1 , 3 ) ;
4240: LD_ADDR_VAR 0 14
4244: PUSH
4245: LD_VAR 0 14
4249: PPUSH
4250: LD_VAR 0 14
4254: PUSH
4255: LD_INT 1
4257: PLUS
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: CALL_OW 1
4266: ST_TO_ADDR
// if missile < 2 then
4267: LD_VAR 0 14
4271: PUSH
4272: LD_INT 2
4274: LESS
4275: IFFALSE 4279
// exit ;
4277: GO 4501
// x := GetX ( enemy ) ;
4279: LD_ADDR_VAR 0 4
4283: PUSH
4284: LD_VAR 0 10
4288: PPUSH
4289: CALL_OW 250
4293: ST_TO_ADDR
// y := GetY ( enemy ) ;
4294: LD_ADDR_VAR 0 5
4298: PUSH
4299: LD_VAR 0 10
4303: PPUSH
4304: CALL_OW 251
4308: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4309: LD_ADDR_VAR 0 6
4313: PUSH
4314: LD_VAR 0 4
4318: PUSH
4319: LD_INT 1
4321: NEG
4322: PPUSH
4323: LD_INT 1
4325: PPUSH
4326: CALL_OW 12
4330: PLUS
4331: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4332: LD_ADDR_VAR 0 7
4336: PUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: NEG
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 12
4353: PLUS
4354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4355: LD_VAR 0 6
4359: PPUSH
4360: LD_VAR 0 7
4364: PPUSH
4365: CALL_OW 488
4369: NOT
4370: IFFALSE 4392
// begin _x := x ;
4372: LD_ADDR_VAR 0 6
4376: PUSH
4377: LD_VAR 0 4
4381: ST_TO_ADDR
// _y := y ;
4382: LD_ADDR_VAR 0 7
4386: PUSH
4387: LD_VAR 0 5
4391: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_VAR 0 14
4404: PPUSH
4405: CALL_OW 12
4409: ST_TO_ADDR
// case i of 1 :
4410: LD_VAR 0 3
4414: PUSH
4415: LD_INT 1
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4440
4423: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4424: LD_VAR 0 1
4428: PPUSH
4429: LD_VAR 0 10
4433: PPUSH
4434: CALL_OW 115
4438: GO 4501
4440: LD_INT 2
4442: DOUBLE
4443: EQUAL
4444: IFTRUE 4448
4446: GO 4470
4448: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_VAR 0 6
4458: PPUSH
4459: LD_VAR 0 7
4463: PPUSH
4464: CALL_OW 153
4468: GO 4501
4470: LD_INT 3
4472: DOUBLE
4473: EQUAL
4474: IFTRUE 4478
4476: GO 4500
4478: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4479: LD_VAR 0 1
4483: PPUSH
4484: LD_VAR 0 6
4488: PPUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: CALL_OW 154
4498: GO 4501
4500: POP
// end ;
4501: LD_VAR 0 2
4505: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// if not unit or not building then
4514: LD_VAR 0 1
4518: NOT
4519: PUSH
4520: LD_VAR 0 2
4524: NOT
4525: OR
4526: IFFALSE 4530
// exit ;
4528: GO 4688
// x := GetX ( building ) ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 250
4544: ST_TO_ADDR
// y := GetY ( building ) ;
4545: LD_ADDR_VAR 0 6
4549: PUSH
4550: LD_VAR 0 2
4554: PPUSH
4555: CALL_OW 251
4559: ST_TO_ADDR
// for i = 0 to 5 do
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: DOUBLE
4566: LD_INT 0
4568: DEC
4569: ST_TO_ADDR
4570: LD_INT 5
4572: PUSH
4573: FOR_TO
4574: IFFALSE 4686
// begin _x := ShiftX ( x , i , 3 ) ;
4576: LD_ADDR_VAR 0 7
4580: PUSH
4581: LD_VAR 0 5
4585: PPUSH
4586: LD_VAR 0 4
4590: PPUSH
4591: LD_INT 3
4593: PPUSH
4594: CALL_OW 272
4598: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4599: LD_ADDR_VAR 0 8
4603: PUSH
4604: LD_VAR 0 6
4608: PPUSH
4609: LD_VAR 0 4
4613: PPUSH
4614: LD_INT 3
4616: PPUSH
4617: CALL_OW 273
4621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4622: LD_VAR 0 7
4626: PPUSH
4627: LD_VAR 0 8
4631: PPUSH
4632: CALL_OW 488
4636: NOT
4637: IFFALSE 4641
// continue ;
4639: GO 4573
// if HexInfo ( _x , _y ) = 0 then
4641: LD_VAR 0 7
4645: PPUSH
4646: LD_VAR 0 8
4650: PPUSH
4651: CALL_OW 428
4655: PUSH
4656: LD_INT 0
4658: EQUAL
4659: IFFALSE 4684
// begin ComMoveXY ( unit , _x , _y ) ;
4661: LD_VAR 0 1
4665: PPUSH
4666: LD_VAR 0 7
4670: PPUSH
4671: LD_VAR 0 8
4675: PPUSH
4676: CALL_OW 111
// exit ;
4680: POP
4681: POP
4682: GO 4688
// end ; end ;
4684: GO 4573
4686: POP
4687: POP
// end ;
4688: LD_VAR 0 3
4692: RET
// export function ScanBase ( side , base_area ) ; begin
4693: LD_INT 0
4695: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_VAR 0 2
4705: PPUSH
4706: LD_INT 81
4708: PUSH
4709: LD_VAR 0 1
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 70
4722: ST_TO_ADDR
// end ;
4723: LD_VAR 0 3
4727: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4728: LD_INT 0
4730: PPUSH
4731: PPUSH
4732: PPUSH
4733: PPUSH
// result := false ;
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: LD_INT 0
4741: ST_TO_ADDR
// side := GetSide ( unit ) ;
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_VAR 0 1
4751: PPUSH
4752: CALL_OW 255
4756: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4757: LD_ADDR_VAR 0 4
4761: PUSH
4762: LD_VAR 0 1
4766: PPUSH
4767: CALL_OW 248
4771: ST_TO_ADDR
// case nat of 1 :
4772: LD_VAR 0 4
4776: PUSH
4777: LD_INT 1
4779: DOUBLE
4780: EQUAL
4781: IFTRUE 4785
4783: GO 4796
4785: POP
// tech := tech_lassight ; 2 :
4786: LD_ADDR_VAR 0 5
4790: PUSH
4791: LD_INT 12
4793: ST_TO_ADDR
4794: GO 4835
4796: LD_INT 2
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 4815
4804: POP
// tech := tech_mortar ; 3 :
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: LD_INT 41
4812: ST_TO_ADDR
4813: GO 4835
4815: LD_INT 3
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4834
4823: POP
// tech := tech_bazooka ; end ;
4824: LD_ADDR_VAR 0 5
4828: PUSH
4829: LD_INT 44
4831: ST_TO_ADDR
4832: GO 4835
4834: POP
// if Researched ( side , tech ) then
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_VAR 0 5
4844: PPUSH
4845: CALL_OW 325
4849: IFFALSE 4876
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 5
4858: PUSH
4859: LD_INT 8
4861: PUSH
4862: LD_INT 9
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_VAR 0 4
4874: ARRAY
4875: ST_TO_ADDR
// end ;
4876: LD_VAR 0 2
4880: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
// if not mines then
4886: LD_VAR 0 2
4890: NOT
4891: IFFALSE 4895
// exit ;
4893: GO 5039
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4895: LD_ADDR_VAR 0 5
4899: PUSH
4900: LD_INT 81
4902: PUSH
4903: LD_VAR 0 1
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 3
4914: PUSH
4915: LD_INT 21
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: ST_TO_ADDR
// for i in mines do
4938: LD_ADDR_VAR 0 4
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: FOR_IN
4949: IFFALSE 5037
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4951: LD_VAR 0 4
4955: PUSH
4956: LD_INT 1
4958: ARRAY
4959: PPUSH
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 2
4967: ARRAY
4968: PPUSH
4969: CALL_OW 458
4973: NOT
4974: IFFALSE 4978
// continue ;
4976: GO 4948
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4978: LD_VAR 0 4
4982: PUSH
4983: LD_INT 1
4985: ARRAY
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 2
4994: ARRAY
4995: PPUSH
4996: CALL_OW 428
5000: PUSH
5001: LD_VAR 0 5
5005: IN
5006: IFFALSE 5035
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5008: LD_VAR 0 4
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 2
5024: ARRAY
5025: PPUSH
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 456
// end ;
5035: GO 4948
5037: POP
5038: POP
// end ;
5039: LD_VAR 0 3
5043: RET
// export function Count ( array ) ; begin
5044: LD_INT 0
5046: PPUSH
// result := array + 0 ;
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_VAR 0 1
5056: PUSH
5057: LD_INT 0
5059: PLUS
5060: ST_TO_ADDR
// end ;
5061: LD_VAR 0 2
5065: RET
// export function IsEmpty ( building ) ; begin
5066: LD_INT 0
5068: PPUSH
// if not building then
5069: LD_VAR 0 1
5073: NOT
5074: IFFALSE 5078
// exit ;
5076: GO 5121
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: LD_VAR 0 1
5087: PUSH
5088: LD_INT 22
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 255
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PUSH
5105: LD_INT 58
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PPUSH
5115: CALL_OW 69
5119: IN
5120: ST_TO_ADDR
// end ;
5121: LD_VAR 0 2
5125: RET
// export function IsNotFull ( building ) ; var places ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
// if not building then
5130: LD_VAR 0 1
5134: NOT
5135: IFFALSE 5139
// exit ;
5137: GO 5167
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_VAR 0 1
5148: PPUSH
5149: LD_INT 3
5151: PUSH
5152: LD_INT 62
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PPUSH
5162: CALL_OW 72
5166: ST_TO_ADDR
// end ;
5167: LD_VAR 0 2
5171: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
5177: PPUSH
// tmp := [ ] ;
5178: LD_ADDR_VAR 0 3
5182: PUSH
5183: EMPTY
5184: ST_TO_ADDR
// list := [ ] ;
5185: LD_ADDR_VAR 0 5
5189: PUSH
5190: EMPTY
5191: ST_TO_ADDR
// for i = 16 to 25 do
5192: LD_ADDR_VAR 0 4
5196: PUSH
5197: DOUBLE
5198: LD_INT 16
5200: DEC
5201: ST_TO_ADDR
5202: LD_INT 25
5204: PUSH
5205: FOR_TO
5206: IFFALSE 5279
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 22
5220: PUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 255
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 91
5237: PUSH
5238: LD_VAR 0 1
5242: PUSH
5243: LD_INT 6
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 30
5253: PUSH
5254: LD_VAR 0 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: PPUSH
5271: CALL_OW 69
5275: ADD
5276: ST_TO_ADDR
5277: GO 5205
5279: POP
5280: POP
// for i = 1 to tmp do
5281: LD_ADDR_VAR 0 4
5285: PUSH
5286: DOUBLE
5287: LD_INT 1
5289: DEC
5290: ST_TO_ADDR
5291: LD_VAR 0 3
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5385
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5299: LD_ADDR_VAR 0 5
5303: PUSH
5304: LD_VAR 0 5
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: CALL_OW 266
5324: PUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PPUSH
5336: CALL_OW 250
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 251
5356: PUSH
5357: LD_VAR 0 3
5361: PUSH
5362: LD_VAR 0 4
5366: ARRAY
5367: PPUSH
5368: CALL_OW 254
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: ADD
5382: ST_TO_ADDR
5383: GO 5296
5385: POP
5386: POP
// result := list ;
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 5
5396: ST_TO_ADDR
// end ;
5397: LD_VAR 0 2
5401: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
// if not factory then
5411: LD_VAR 0 1
5415: NOT
5416: IFFALSE 5420
// exit ;
5418: GO 6013
// if control = control_apeman then
5420: LD_VAR 0 4
5424: PUSH
5425: LD_INT 5
5427: EQUAL
5428: IFFALSE 5537
// begin tmp := UnitsInside ( factory ) ;
5430: LD_ADDR_VAR 0 8
5434: PUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 313
5444: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5445: LD_VAR 0 8
5449: PPUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 12
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 72
5464: NOT
5465: IFFALSE 5475
// control := control_manual ;
5467: LD_ADDR_VAR 0 4
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5475: LD_ADDR_VAR 0 8
5479: PUSH
5480: LD_VAR 0 1
5484: PPUSH
5485: CALL 5172 0 1
5489: ST_TO_ADDR
// if tmp then
5490: LD_VAR 0 8
5494: IFFALSE 5537
// begin for i in tmp do
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 8
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5535
// if i [ 1 ] = b_ext_radio then
5509: LD_VAR 0 7
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: PUSH
5518: LD_INT 22
5520: EQUAL
5521: IFFALSE 5533
// begin control := control_remote ;
5523: LD_ADDR_VAR 0 4
5527: PUSH
5528: LD_INT 2
5530: ST_TO_ADDR
// break ;
5531: GO 5535
// end ;
5533: GO 5506
5535: POP
5536: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: LD_VAR 0 4
5556: PPUSH
5557: LD_VAR 0 5
5561: PPUSH
5562: CALL_OW 448
5566: IFFALSE 5601
// begin result := [ chassis , engine , control , weapon ] ;
5568: LD_ADDR_VAR 0 6
5572: PUSH
5573: LD_VAR 0 2
5577: PUSH
5578: LD_VAR 0 3
5582: PUSH
5583: LD_VAR 0 4
5587: PUSH
5588: LD_VAR 0 5
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: ST_TO_ADDR
// exit ;
5599: GO 6013
// end ; _chassis := AvailableChassisList ( factory ) ;
5601: LD_ADDR_VAR 0 9
5605: PUSH
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 475
5615: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5616: LD_ADDR_VAR 0 11
5620: PUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: CALL_OW 476
5630: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5631: LD_ADDR_VAR 0 12
5635: PUSH
5636: LD_VAR 0 1
5640: PPUSH
5641: CALL_OW 477
5645: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5646: LD_ADDR_VAR 0 10
5650: PUSH
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 478
5660: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5661: LD_VAR 0 9
5665: NOT
5666: PUSH
5667: LD_VAR 0 11
5671: NOT
5672: OR
5673: PUSH
5674: LD_VAR 0 12
5678: NOT
5679: OR
5680: PUSH
5681: LD_VAR 0 10
5685: NOT
5686: OR
5687: IFFALSE 5722
// begin result := [ chassis , engine , control , weapon ] ;
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_VAR 0 3
5703: PUSH
5704: LD_VAR 0 4
5708: PUSH
5709: LD_VAR 0 5
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: ST_TO_ADDR
// exit ;
5720: GO 6013
// end ; if not chassis in _chassis then
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 9
5731: IN
5732: NOT
5733: IFFALSE 5759
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5735: LD_ADDR_VAR 0 2
5739: PUSH
5740: LD_VAR 0 9
5744: PUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_VAR 0 9
5752: PPUSH
5753: CALL_OW 12
5757: ARRAY
5758: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL 6018 0 2
5773: NOT
5774: IFFALSE 5833
// repeat engine := _engine [ 1 ] ;
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_VAR 0 11
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5790: LD_ADDR_VAR 0 11
5794: PUSH
5795: LD_VAR 0 11
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: CALL_OW 3
5807: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 3
5817: PPUSH
5818: CALL 6018 0 2
5822: PUSH
5823: LD_VAR 0 11
5827: PUSH
5828: EMPTY
5829: EQUAL
5830: OR
5831: IFFALSE 5776
// if not control in _control then
5833: LD_VAR 0 4
5837: PUSH
5838: LD_VAR 0 12
5842: IN
5843: NOT
5844: IFFALSE 5870
// control := _control [ rand ( 1 , _control ) ] ;
5846: LD_ADDR_VAR 0 4
5850: PUSH
5851: LD_VAR 0 12
5855: PUSH
5856: LD_INT 1
5858: PPUSH
5859: LD_VAR 0 12
5863: PPUSH
5864: CALL_OW 12
5868: ARRAY
5869: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5870: LD_VAR 0 2
5874: PPUSH
5875: LD_VAR 0 5
5879: PPUSH
5880: CALL 6238 0 2
5884: NOT
5885: IFFALSE 5944
// repeat weapon := _weapon [ 1 ] ;
5887: LD_ADDR_VAR 0 5
5891: PUSH
5892: LD_VAR 0 10
5896: PUSH
5897: LD_INT 1
5899: ARRAY
5900: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5901: LD_ADDR_VAR 0 10
5905: PUSH
5906: LD_VAR 0 10
5910: PPUSH
5911: LD_INT 1
5913: PPUSH
5914: CALL_OW 3
5918: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_VAR 0 5
5928: PPUSH
5929: CALL 6238 0 2
5933: PUSH
5934: LD_VAR 0 10
5938: PUSH
5939: EMPTY
5940: EQUAL
5941: OR
5942: IFFALSE 5887
// result := [ ] ;
5944: LD_ADDR_VAR 0 6
5948: PUSH
5949: EMPTY
5950: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_VAR 0 4
5970: PPUSH
5971: LD_VAR 0 5
5975: PPUSH
5976: CALL_OW 448
5980: IFFALSE 6013
// result := [ chassis , engine , control , weapon ] ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: LD_VAR 0 4
6001: PUSH
6002: LD_VAR 0 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: ST_TO_ADDR
// end ;
6013: LD_VAR 0 6
6017: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6018: LD_INT 0
6020: PPUSH
// if not chassis or not engine then
6021: LD_VAR 0 1
6025: NOT
6026: PUSH
6027: LD_VAR 0 2
6031: NOT
6032: OR
6033: IFFALSE 6037
// exit ;
6035: GO 6233
// case engine of engine_solar :
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 2
6044: DOUBLE
6045: EQUAL
6046: IFTRUE 6050
6048: GO 6088
6050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 11
6058: PUSH
6059: LD_INT 12
6061: PUSH
6062: LD_INT 13
6064: PUSH
6065: LD_INT 14
6067: PUSH
6068: LD_INT 1
6070: PUSH
6071: LD_INT 2
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: ST_TO_ADDR
6086: GO 6217
6088: LD_INT 1
6090: DOUBLE
6091: EQUAL
6092: IFTRUE 6096
6094: GO 6158
6096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6097: LD_ADDR_VAR 0 3
6101: PUSH
6102: LD_INT 11
6104: PUSH
6105: LD_INT 12
6107: PUSH
6108: LD_INT 13
6110: PUSH
6111: LD_INT 14
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: LD_INT 2
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 4
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: LD_INT 21
6131: PUSH
6132: LD_INT 23
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 24
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: ST_TO_ADDR
6156: GO 6217
6158: LD_INT 3
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6216
6166: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6167: LD_ADDR_VAR 0 3
6171: PUSH
6172: LD_INT 13
6174: PUSH
6175: LD_INT 14
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 3
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 23
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: ST_TO_ADDR
6214: GO 6217
6216: POP
// result := ( chassis in result ) ;
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_VAR 0 1
6226: PUSH
6227: LD_VAR 0 3
6231: IN
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 3
6237: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6238: LD_INT 0
6240: PPUSH
// if not chassis or not weapon then
6241: LD_VAR 0 1
6245: NOT
6246: PUSH
6247: LD_VAR 0 2
6251: NOT
6252: OR
6253: IFFALSE 6257
// exit ;
6255: GO 7317
// case weapon of us_machine_gun :
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 2
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6300
6270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 1
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 5
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
6298: GO 7301
6300: LD_INT 3
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6338
6308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6309: LD_ADDR_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: LD_INT 2
6319: PUSH
6320: LD_INT 3
6322: PUSH
6323: LD_INT 4
6325: PUSH
6326: LD_INT 5
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: ST_TO_ADDR
6336: GO 7301
6338: LD_INT 11
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6376
6346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6347: LD_ADDR_VAR 0 3
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: ST_TO_ADDR
6374: GO 7301
6376: LD_INT 4
6378: DOUBLE
6379: EQUAL
6380: IFTRUE 6384
6382: GO 6410
6384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6385: LD_ADDR_VAR 0 3
6389: PUSH
6390: LD_INT 2
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: LD_INT 4
6398: PUSH
6399: LD_INT 5
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: ST_TO_ADDR
6408: GO 7301
6410: LD_INT 5
6412: DOUBLE
6413: EQUAL
6414: IFTRUE 6418
6416: GO 6444
6418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: ST_TO_ADDR
6442: GO 7301
6444: LD_INT 9
6446: DOUBLE
6447: EQUAL
6448: IFTRUE 6452
6450: GO 6478
6452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6453: LD_ADDR_VAR 0 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
6476: GO 7301
6478: LD_INT 7
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6512
6486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6487: LD_ADDR_VAR 0 3
6491: PUSH
6492: LD_INT 2
6494: PUSH
6495: LD_INT 3
6497: PUSH
6498: LD_INT 4
6500: PUSH
6501: LD_INT 5
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
6510: GO 7301
6512: LD_INT 12
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6546
6520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 2
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 4
6534: PUSH
6535: LD_INT 5
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 7301
6546: LD_INT 13
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6580
6554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 5
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
6578: GO 7301
6580: LD_INT 14
6582: DOUBLE
6583: EQUAL
6584: IFTRUE 6588
6586: GO 6606
6588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 4
6596: PUSH
6597: LD_INT 5
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: ST_TO_ADDR
6604: GO 7301
6606: LD_INT 6
6608: DOUBLE
6609: EQUAL
6610: IFTRUE 6614
6612: GO 6632
6614: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_INT 4
6622: PUSH
6623: LD_INT 5
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7301
6632: LD_INT 10
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6658
6640: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: LD_INT 5
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 7301
6658: LD_INT 22
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6692
6666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: LD_INT 11
6674: PUSH
6675: LD_INT 12
6677: PUSH
6678: LD_INT 13
6680: PUSH
6681: LD_INT 14
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: ST_TO_ADDR
6690: GO 7301
6692: LD_INT 23
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6726
6700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_INT 11
6708: PUSH
6709: LD_INT 12
6711: PUSH
6712: LD_INT 13
6714: PUSH
6715: LD_INT 14
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
6724: GO 7301
6726: LD_INT 24
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6760
6734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_INT 11
6742: PUSH
6743: LD_INT 12
6745: PUSH
6746: LD_INT 13
6748: PUSH
6749: LD_INT 14
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7301
6760: LD_INT 30
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6794
6768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 11
6776: PUSH
6777: LD_INT 12
6779: PUSH
6780: LD_INT 13
6782: PUSH
6783: LD_INT 14
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: ST_TO_ADDR
6792: GO 7301
6794: LD_INT 25
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6802
6800: GO 6820
6802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_INT 13
6810: PUSH
6811: LD_INT 14
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7301
6820: LD_INT 27
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6846
6828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6829: LD_ADDR_VAR 0 3
6833: PUSH
6834: LD_INT 13
6836: PUSH
6837: LD_INT 14
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7301
6846: LD_INT 92
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 11
6862: PUSH
6863: LD_INT 12
6865: PUSH
6866: LD_INT 13
6868: PUSH
6869: LD_INT 14
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7301
6880: LD_INT 28
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6906
6888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 13
6896: PUSH
6897: LD_INT 14
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: ST_TO_ADDR
6904: GO 7301
6906: LD_INT 29
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6932
6914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_INT 13
6922: PUSH
6923: LD_INT 14
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7301
6932: LD_INT 31
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 6958
6940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7301
6958: LD_INT 26
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6984
6966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 13
6974: PUSH
6975: LD_INT 14
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 7301
6984: LD_INT 42
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 7018
6992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 23
7006: PUSH
7007: LD_INT 24
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 7301
7018: LD_INT 43
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7052
7026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 23
7040: PUSH
7041: LD_INT 24
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7301
7052: LD_INT 44
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7086
7060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 24
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: ST_TO_ADDR
7084: GO 7301
7086: LD_INT 45
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7120
7094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 7301
7120: LD_INT 49
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7154
7128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 23
7142: PUSH
7143: LD_INT 24
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7301
7154: LD_INT 51
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7188
7162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7301
7188: LD_INT 52
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7222
7196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: LD_INT 24
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 7301
7222: LD_INT 53
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7248
7230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 24
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 7301
7248: LD_INT 46
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7274
7256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 23
7264: PUSH
7265: LD_INT 24
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: ST_TO_ADDR
7272: GO 7301
7274: LD_INT 47
7276: DOUBLE
7277: EQUAL
7278: IFTRUE 7282
7280: GO 7300
7282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 23
7290: PUSH
7291: LD_INT 24
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 7301
7300: POP
// result := ( chassis in result ) ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: LD_VAR 0 3
7315: IN
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 3
7321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// result := array ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7341: LD_VAR 0 1
7345: NOT
7346: PUSH
7347: LD_VAR 0 2
7351: NOT
7352: OR
7353: PUSH
7354: LD_VAR 0 3
7358: NOT
7359: OR
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: LD_VAR 0 1
7370: GREATER
7371: OR
7372: PUSH
7373: LD_VAR 0 3
7377: PUSH
7378: LD_VAR 0 1
7382: GREATER
7383: OR
7384: IFFALSE 7388
// exit ;
7386: GO 7684
// if direction then
7388: LD_VAR 0 4
7392: IFFALSE 7456
// begin d := 1 ;
7394: LD_ADDR_VAR 0 9
7398: PUSH
7399: LD_INT 1
7401: ST_TO_ADDR
// if i_from > i_to then
7402: LD_VAR 0 2
7406: PUSH
7407: LD_VAR 0 3
7411: GREATER
7412: IFFALSE 7438
// length := ( array - i_from ) + i_to else
7414: LD_ADDR_VAR 0 11
7418: PUSH
7419: LD_VAR 0 1
7423: PUSH
7424: LD_VAR 0 2
7428: MINUS
7429: PUSH
7430: LD_VAR 0 3
7434: PLUS
7435: ST_TO_ADDR
7436: GO 7454
// length := i_to - i_from ;
7438: LD_ADDR_VAR 0 11
7442: PUSH
7443: LD_VAR 0 3
7447: PUSH
7448: LD_VAR 0 2
7452: MINUS
7453: ST_TO_ADDR
// end else
7454: GO 7517
// begin d := - 1 ;
7456: LD_ADDR_VAR 0 9
7460: PUSH
7461: LD_INT 1
7463: NEG
7464: ST_TO_ADDR
// if i_from > i_to then
7465: LD_VAR 0 2
7469: PUSH
7470: LD_VAR 0 3
7474: GREATER
7475: IFFALSE 7495
// length := i_from - i_to else
7477: LD_ADDR_VAR 0 11
7481: PUSH
7482: LD_VAR 0 2
7486: PUSH
7487: LD_VAR 0 3
7491: MINUS
7492: ST_TO_ADDR
7493: GO 7517
// length := ( array - i_to ) + i_from ;
7495: LD_ADDR_VAR 0 11
7499: PUSH
7500: LD_VAR 0 1
7504: PUSH
7505: LD_VAR 0 3
7509: MINUS
7510: PUSH
7511: LD_VAR 0 2
7515: PLUS
7516: ST_TO_ADDR
// end ; if not length then
7517: LD_VAR 0 11
7521: NOT
7522: IFFALSE 7526
// exit ;
7524: GO 7684
// tmp := array ;
7526: LD_ADDR_VAR 0 10
7530: PUSH
7531: LD_VAR 0 1
7535: ST_TO_ADDR
// for i = 1 to length do
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 11
7550: PUSH
7551: FOR_TO
7552: IFFALSE 7672
// begin for j = 1 to array do
7554: LD_ADDR_VAR 0 7
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_VAR 0 1
7568: PUSH
7569: FOR_TO
7570: IFFALSE 7658
// begin k := j + d ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_VAR 0 7
7581: PUSH
7582: LD_VAR 0 9
7586: PLUS
7587: ST_TO_ADDR
// if k > array then
7588: LD_VAR 0 8
7592: PUSH
7593: LD_VAR 0 1
7597: GREATER
7598: IFFALSE 7608
// k := 1 ;
7600: LD_ADDR_VAR 0 8
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// if not k then
7608: LD_VAR 0 8
7612: NOT
7613: IFFALSE 7625
// k := array ;
7615: LD_ADDR_VAR 0 8
7619: PUSH
7620: LD_VAR 0 1
7624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7625: LD_ADDR_VAR 0 10
7629: PUSH
7630: LD_VAR 0 10
7634: PPUSH
7635: LD_VAR 0 8
7639: PPUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_VAR 0 7
7649: ARRAY
7650: PPUSH
7651: CALL_OW 1
7655: ST_TO_ADDR
// end ;
7656: GO 7569
7658: POP
7659: POP
// array := tmp ;
7660: LD_ADDR_VAR 0 1
7664: PUSH
7665: LD_VAR 0 10
7669: ST_TO_ADDR
// end ;
7670: GO 7551
7672: POP
7673: POP
// result := array ;
7674: LD_ADDR_VAR 0 5
7678: PUSH
7679: LD_VAR 0 1
7683: ST_TO_ADDR
// end ;
7684: LD_VAR 0 5
7688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
// result := 0 ;
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// if not array or not value in array then
7701: LD_VAR 0 1
7705: NOT
7706: PUSH
7707: LD_VAR 0 2
7711: PUSH
7712: LD_VAR 0 1
7716: IN
7717: NOT
7718: OR
7719: IFFALSE 7723
// exit ;
7721: GO 7777
// for i = 1 to array do
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: DOUBLE
7729: LD_INT 1
7731: DEC
7732: ST_TO_ADDR
7733: LD_VAR 0 1
7737: PUSH
7738: FOR_TO
7739: IFFALSE 7775
// if value = array [ i ] then
7741: LD_VAR 0 2
7745: PUSH
7746: LD_VAR 0 1
7750: PUSH
7751: LD_VAR 0 4
7755: ARRAY
7756: EQUAL
7757: IFFALSE 7773
// begin result := i ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_VAR 0 4
7768: ST_TO_ADDR
// exit ;
7769: POP
7770: POP
7771: GO 7777
// end ;
7773: GO 7738
7775: POP
7776: POP
// end ;
7777: LD_VAR 0 3
7781: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7782: LD_INT 0
7784: PPUSH
// vc_chassis := chassis ;
7785: LD_ADDR_OWVAR 37
7789: PUSH
7790: LD_VAR 0 1
7794: ST_TO_ADDR
// vc_engine := engine ;
7795: LD_ADDR_OWVAR 39
7799: PUSH
7800: LD_VAR 0 2
7804: ST_TO_ADDR
// vc_control := control ;
7805: LD_ADDR_OWVAR 38
7809: PUSH
7810: LD_VAR 0 3
7814: ST_TO_ADDR
// vc_weapon := weapon ;
7815: LD_ADDR_OWVAR 40
7819: PUSH
7820: LD_VAR 0 4
7824: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7825: LD_ADDR_OWVAR 41
7829: PUSH
7830: LD_VAR 0 5
7834: ST_TO_ADDR
// end ;
7835: LD_VAR 0 6
7839: RET
// export function WantPlant ( unit ) ; var task ; begin
7840: LD_INT 0
7842: PPUSH
7843: PPUSH
// result := false ;
7844: LD_ADDR_VAR 0 2
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7852: LD_ADDR_VAR 0 3
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 437
7866: ST_TO_ADDR
// if task then
7867: LD_VAR 0 3
7871: IFFALSE 7899
// if task [ 1 ] [ 1 ] = p then
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PUSH
7882: LD_INT 1
7884: ARRAY
7885: PUSH
7886: LD_STRING p
7888: EQUAL
7889: IFFALSE 7899
// result := true ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// end ;
7899: LD_VAR 0 2
7903: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7904: LD_INT 0
7906: PPUSH
7907: PPUSH
7908: PPUSH
7909: PPUSH
// if pos < 1 then
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 1
7917: LESS
7918: IFFALSE 7922
// exit ;
7920: GO 8225
// if pos = 1 then
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 1
7929: EQUAL
7930: IFFALSE 7963
// result := Replace ( arr , pos [ 1 ] , value ) else
7932: LD_ADDR_VAR 0 4
7936: PUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: LD_VAR 0 2
7946: PUSH
7947: LD_INT 1
7949: ARRAY
7950: PPUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 1
7960: ST_TO_ADDR
7961: GO 8225
// begin tmp := arr ;
7963: LD_ADDR_VAR 0 6
7967: PUSH
7968: LD_VAR 0 1
7972: ST_TO_ADDR
// s_arr := [ tmp ] ;
7973: LD_ADDR_VAR 0 7
7977: PUSH
7978: LD_VAR 0 6
7982: PUSH
7983: EMPTY
7984: LIST
7985: ST_TO_ADDR
// for i = 1 to pos - 1 do
7986: LD_ADDR_VAR 0 5
7990: PUSH
7991: DOUBLE
7992: LD_INT 1
7994: DEC
7995: ST_TO_ADDR
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 1
8003: MINUS
8004: PUSH
8005: FOR_TO
8006: IFFALSE 8051
// begin tmp := tmp [ pos [ i ] ] ;
8008: LD_ADDR_VAR 0 6
8012: PUSH
8013: LD_VAR 0 6
8017: PUSH
8018: LD_VAR 0 2
8022: PUSH
8023: LD_VAR 0 5
8027: ARRAY
8028: ARRAY
8029: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8030: LD_ADDR_VAR 0 7
8034: PUSH
8035: LD_VAR 0 7
8039: PUSH
8040: LD_VAR 0 6
8044: PUSH
8045: EMPTY
8046: LIST
8047: ADD
8048: ST_TO_ADDR
// end ;
8049: GO 8005
8051: POP
8052: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8053: LD_ADDR_VAR 0 6
8057: PUSH
8058: LD_VAR 0 6
8062: PPUSH
8063: LD_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: ARRAY
8073: PPUSH
8074: LD_VAR 0 3
8078: PPUSH
8079: CALL_OW 1
8083: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8084: LD_ADDR_VAR 0 7
8088: PUSH
8089: LD_VAR 0 7
8093: PPUSH
8094: LD_VAR 0 7
8098: PPUSH
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 1
8108: ST_TO_ADDR
// for i = s_arr downto 2 do
8109: LD_ADDR_VAR 0 5
8113: PUSH
8114: DOUBLE
8115: LD_VAR 0 7
8119: INC
8120: ST_TO_ADDR
8121: LD_INT 2
8123: PUSH
8124: FOR_DOWNTO
8125: IFFALSE 8209
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8127: LD_ADDR_VAR 0 6
8131: PUSH
8132: LD_VAR 0 7
8136: PUSH
8137: LD_VAR 0 5
8141: PUSH
8142: LD_INT 1
8144: MINUS
8145: ARRAY
8146: PPUSH
8147: LD_VAR 0 2
8151: PUSH
8152: LD_VAR 0 5
8156: PUSH
8157: LD_INT 1
8159: MINUS
8160: ARRAY
8161: PPUSH
8162: LD_VAR 0 7
8166: PUSH
8167: LD_VAR 0 5
8171: ARRAY
8172: PPUSH
8173: CALL_OW 1
8177: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8178: LD_ADDR_VAR 0 7
8182: PUSH
8183: LD_VAR 0 7
8187: PPUSH
8188: LD_VAR 0 5
8192: PUSH
8193: LD_INT 1
8195: MINUS
8196: PPUSH
8197: LD_VAR 0 6
8201: PPUSH
8202: CALL_OW 1
8206: ST_TO_ADDR
// end ;
8207: GO 8124
8209: POP
8210: POP
// result := s_arr [ 1 ] ;
8211: LD_ADDR_VAR 0 4
8215: PUSH
8216: LD_VAR 0 7
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: ST_TO_ADDR
// end ; end ;
8225: LD_VAR 0 4
8229: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8230: LD_INT 0
8232: PPUSH
8233: PPUSH
// if not list then
8234: LD_VAR 0 1
8238: NOT
8239: IFFALSE 8243
// exit ;
8241: GO 8334
// i := list [ pos1 ] ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_VAR 0 1
8252: PUSH
8253: LD_VAR 0 2
8257: ARRAY
8258: ST_TO_ADDR
// if not i then
8259: LD_VAR 0 5
8263: NOT
8264: IFFALSE 8268
// exit ;
8266: GO 8334
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8268: LD_ADDR_VAR 0 1
8272: PUSH
8273: LD_VAR 0 1
8277: PPUSH
8278: LD_VAR 0 2
8282: PPUSH
8283: LD_VAR 0 1
8287: PUSH
8288: LD_VAR 0 3
8292: ARRAY
8293: PPUSH
8294: CALL_OW 1
8298: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8299: LD_ADDR_VAR 0 1
8303: PUSH
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 3
8313: PPUSH
8314: LD_VAR 0 5
8318: PPUSH
8319: CALL_OW 1
8323: ST_TO_ADDR
// result := list ;
8324: LD_ADDR_VAR 0 4
8328: PUSH
8329: LD_VAR 0 1
8333: ST_TO_ADDR
// end ;
8334: LD_VAR 0 4
8338: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8339: LD_INT 0
8341: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8342: LD_ADDR_VAR 0 5
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 250
8356: PPUSH
8357: LD_VAR 0 1
8361: PPUSH
8362: CALL_OW 251
8366: PPUSH
8367: LD_VAR 0 2
8371: PPUSH
8372: LD_VAR 0 3
8376: PPUSH
8377: LD_VAR 0 4
8381: PPUSH
8382: CALL 8760 0 5
8386: ST_TO_ADDR
// end ;
8387: LD_VAR 0 5
8391: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8392: LD_INT 0
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
// if not list or not unit then
8398: LD_VAR 0 2
8402: NOT
8403: PUSH
8404: LD_VAR 0 1
8408: NOT
8409: OR
8410: IFFALSE 8414
// exit ;
8412: GO 8755
// result := [ ] ;
8414: LD_ADDR_VAR 0 5
8418: PUSH
8419: EMPTY
8420: ST_TO_ADDR
// for i in list do
8421: LD_ADDR_VAR 0 6
8425: PUSH
8426: LD_VAR 0 2
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8650
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8434: LD_ADDR_VAR 0 8
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: LD_VAR 0 6
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: LD_VAR 0 6
8457: PUSH
8458: LD_INT 2
8460: ARRAY
8461: PPUSH
8462: CALL_OW 297
8466: ST_TO_ADDR
// if not Count ( result ) then
8467: LD_VAR 0 5
8471: PPUSH
8472: CALL 5044 0 1
8476: NOT
8477: IFFALSE 8510
// begin result := Join ( result , [ i , tmp ] ) ;
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL 40653 0 2
8507: ST_TO_ADDR
// continue ;
8508: GO 8431
// end ; if result [ result ] [ 2 ] <= tmp then
8510: LD_VAR 0 5
8514: PUSH
8515: LD_VAR 0 5
8519: ARRAY
8520: PUSH
8521: LD_INT 2
8523: ARRAY
8524: PUSH
8525: LD_VAR 0 8
8529: LESSEQUAL
8530: IFFALSE 8563
// result := Join ( result , [ i , tmp ] ) else
8532: LD_ADDR_VAR 0 5
8536: PUSH
8537: LD_VAR 0 5
8541: PPUSH
8542: LD_VAR 0 6
8546: PUSH
8547: LD_VAR 0 8
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL 40653 0 2
8560: ST_TO_ADDR
8561: GO 8648
// begin for j := 1 to Count ( result ) do
8563: LD_ADDR_VAR 0 7
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_VAR 0 5
8577: PPUSH
8578: CALL 5044 0 1
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8646
// begin if tmp < result [ j ] [ 2 ] then
8586: LD_VAR 0 8
8590: PUSH
8591: LD_VAR 0 5
8595: PUSH
8596: LD_VAR 0 7
8600: ARRAY
8601: PUSH
8602: LD_INT 2
8604: ARRAY
8605: LESS
8606: IFFALSE 8644
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8608: LD_ADDR_VAR 0 5
8612: PUSH
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: LD_VAR 0 6
8627: PUSH
8628: LD_VAR 0 8
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 2
8641: ST_TO_ADDR
// break ;
8642: GO 8646
// end ; end ;
8644: GO 8583
8646: POP
8647: POP
// end ; end ;
8648: GO 8431
8650: POP
8651: POP
// if result and not asc then
8652: LD_VAR 0 5
8656: PUSH
8657: LD_VAR 0 3
8661: NOT
8662: AND
8663: IFFALSE 8680
// result := ReverseArray ( result ) ;
8665: LD_ADDR_VAR 0 5
8669: PUSH
8670: LD_VAR 0 5
8674: PPUSH
8675: CALL 35920 0 1
8679: ST_TO_ADDR
// tmp := [ ] ;
8680: LD_ADDR_VAR 0 8
8684: PUSH
8685: EMPTY
8686: ST_TO_ADDR
// if mode then
8687: LD_VAR 0 4
8691: IFFALSE 8755
// begin for i := 1 to result do
8693: LD_ADDR_VAR 0 6
8697: PUSH
8698: DOUBLE
8699: LD_INT 1
8701: DEC
8702: ST_TO_ADDR
8703: LD_VAR 0 5
8707: PUSH
8708: FOR_TO
8709: IFFALSE 8743
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8711: LD_ADDR_VAR 0 8
8715: PUSH
8716: LD_VAR 0 8
8720: PPUSH
8721: LD_VAR 0 5
8725: PUSH
8726: LD_VAR 0 6
8730: ARRAY
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL 40653 0 2
8740: ST_TO_ADDR
8741: GO 8708
8743: POP
8744: POP
// result := tmp ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_VAR 0 8
8754: ST_TO_ADDR
// end ; end ;
8755: LD_VAR 0 5
8759: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// if not list then
8766: LD_VAR 0 3
8770: NOT
8771: IFFALSE 8775
// exit ;
8773: GO 9163
// result := [ ] ;
8775: LD_ADDR_VAR 0 6
8779: PUSH
8780: EMPTY
8781: ST_TO_ADDR
// for i in list do
8782: LD_ADDR_VAR 0 7
8786: PUSH
8787: LD_VAR 0 3
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8995
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8795: LD_ADDR_VAR 0 9
8799: PUSH
8800: LD_VAR 0 7
8804: PPUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 297
8819: ST_TO_ADDR
// if not result then
8820: LD_VAR 0 6
8824: NOT
8825: IFFALSE 8851
// result := [ [ i , tmp ] ] else
8827: LD_ADDR_VAR 0 6
8831: PUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_VAR 0 9
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: ST_TO_ADDR
8849: GO 8993
// begin if result [ result ] [ 2 ] < tmp then
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 6
8860: ARRAY
8861: PUSH
8862: LD_INT 2
8864: ARRAY
8865: PUSH
8866: LD_VAR 0 9
8870: LESS
8871: IFFALSE 8913
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8873: LD_ADDR_VAR 0 6
8877: PUSH
8878: LD_VAR 0 6
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: PLUS
8891: PPUSH
8892: LD_VAR 0 7
8896: PUSH
8897: LD_VAR 0 9
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 2
8910: ST_TO_ADDR
8911: GO 8993
// for j = 1 to result do
8913: LD_ADDR_VAR 0 8
8917: PUSH
8918: DOUBLE
8919: LD_INT 1
8921: DEC
8922: ST_TO_ADDR
8923: LD_VAR 0 6
8927: PUSH
8928: FOR_TO
8929: IFFALSE 8991
// begin if tmp < result [ j ] [ 2 ] then
8931: LD_VAR 0 9
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 8
8945: ARRAY
8946: PUSH
8947: LD_INT 2
8949: ARRAY
8950: LESS
8951: IFFALSE 8989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8953: LD_ADDR_VAR 0 6
8957: PUSH
8958: LD_VAR 0 6
8962: PPUSH
8963: LD_VAR 0 8
8967: PPUSH
8968: LD_VAR 0 7
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 2
8986: ST_TO_ADDR
// break ;
8987: GO 8991
// end ; end ;
8989: GO 8928
8991: POP
8992: POP
// end ; end ;
8993: GO 8792
8995: POP
8996: POP
// if result and not asc then
8997: LD_VAR 0 6
9001: PUSH
9002: LD_VAR 0 4
9006: NOT
9007: AND
9008: IFFALSE 9083
// begin tmp := result ;
9010: LD_ADDR_VAR 0 9
9014: PUSH
9015: LD_VAR 0 6
9019: ST_TO_ADDR
// for i = tmp downto 1 do
9020: LD_ADDR_VAR 0 7
9024: PUSH
9025: DOUBLE
9026: LD_VAR 0 9
9030: INC
9031: ST_TO_ADDR
9032: LD_INT 1
9034: PUSH
9035: FOR_DOWNTO
9036: IFFALSE 9081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9038: LD_ADDR_VAR 0 6
9042: PUSH
9043: LD_VAR 0 6
9047: PPUSH
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 7
9057: MINUS
9058: PUSH
9059: LD_INT 1
9061: PLUS
9062: PPUSH
9063: LD_VAR 0 9
9067: PUSH
9068: LD_VAR 0 7
9072: ARRAY
9073: PPUSH
9074: CALL_OW 1
9078: ST_TO_ADDR
9079: GO 9035
9081: POP
9082: POP
// end ; tmp := [ ] ;
9083: LD_ADDR_VAR 0 9
9087: PUSH
9088: EMPTY
9089: ST_TO_ADDR
// if mode then
9090: LD_VAR 0 5
9094: IFFALSE 9163
// begin for i = 1 to result do
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_VAR 0 6
9110: PUSH
9111: FOR_TO
9112: IFFALSE 9151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: LD_VAR 0 9
9123: PPUSH
9124: LD_VAR 0 7
9128: PPUSH
9129: LD_VAR 0 6
9133: PUSH
9134: LD_VAR 0 7
9138: ARRAY
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: CALL_OW 1
9148: ST_TO_ADDR
9149: GO 9111
9151: POP
9152: POP
// result := tmp ;
9153: LD_ADDR_VAR 0 6
9157: PUSH
9158: LD_VAR 0 9
9162: ST_TO_ADDR
// end ; end ;
9163: LD_VAR 0 6
9167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9168: LD_INT 0
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9176: LD_ADDR_VAR 0 5
9180: PUSH
9181: LD_INT 0
9183: PUSH
9184: LD_INT 0
9186: PUSH
9187: LD_INT 0
9189: PUSH
9190: EMPTY
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: ST_TO_ADDR
// if not x or not y then
9198: LD_VAR 0 2
9202: NOT
9203: PUSH
9204: LD_VAR 0 3
9208: NOT
9209: OR
9210: IFFALSE 9214
// exit ;
9212: GO 10864
// if not range then
9214: LD_VAR 0 4
9218: NOT
9219: IFFALSE 9229
// range := 10 ;
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: LD_INT 10
9228: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9229: LD_ADDR_VAR 0 8
9233: PUSH
9234: LD_INT 81
9236: PUSH
9237: LD_VAR 0 1
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 92
9248: PUSH
9249: LD_VAR 0 2
9253: PUSH
9254: LD_VAR 0 3
9258: PUSH
9259: LD_VAR 0 4
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 21
9275: PUSH
9276: LD_INT 3
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// if not tmp then
9297: LD_VAR 0 8
9301: NOT
9302: IFFALSE 9306
// exit ;
9304: GO 10864
// for i in tmp do
9306: LD_ADDR_VAR 0 6
9310: PUSH
9311: LD_VAR 0 8
9315: PUSH
9316: FOR_IN
9317: IFFALSE 10839
// begin points := [ 0 , 0 , 0 ] ;
9319: LD_ADDR_VAR 0 9
9323: PUSH
9324: LD_INT 0
9326: PUSH
9327: LD_INT 0
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
// bpoints := 1 ;
9338: LD_ADDR_VAR 0 10
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9346: LD_VAR 0 6
9350: PPUSH
9351: CALL_OW 247
9355: PUSH
9356: LD_INT 1
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9942
9364: POP
// begin if GetClass ( i ) = 1 then
9365: LD_VAR 0 6
9369: PPUSH
9370: CALL_OW 257
9374: PUSH
9375: LD_INT 1
9377: EQUAL
9378: IFFALSE 9399
// points := [ 10 , 5 , 3 ] ;
9380: LD_ADDR_VAR 0 9
9384: PUSH
9385: LD_INT 10
9387: PUSH
9388: LD_INT 5
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9399: LD_VAR 0 6
9403: PPUSH
9404: CALL_OW 257
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: LD_INT 4
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: IN
9423: IFFALSE 9444
// points := [ 3 , 2 , 1 ] ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 257
9453: PUSH
9454: LD_INT 5
9456: EQUAL
9457: IFFALSE 9478
// points := [ 130 , 5 , 2 ] ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_INT 130
9466: PUSH
9467: LD_INT 5
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 257
9487: PUSH
9488: LD_INT 8
9490: EQUAL
9491: IFFALSE 9512
// points := [ 35 , 35 , 30 ] ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_INT 35
9500: PUSH
9501: LD_INT 35
9503: PUSH
9504: LD_INT 30
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9512: LD_VAR 0 6
9516: PPUSH
9517: CALL_OW 257
9521: PUSH
9522: LD_INT 9
9524: EQUAL
9525: IFFALSE 9546
// points := [ 20 , 55 , 40 ] ;
9527: LD_ADDR_VAR 0 9
9531: PUSH
9532: LD_INT 20
9534: PUSH
9535: LD_INT 55
9537: PUSH
9538: LD_INT 40
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 257
9555: PUSH
9556: LD_INT 12
9558: PUSH
9559: LD_INT 16
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: IN
9566: IFFALSE 9587
// points := [ 5 , 3 , 2 ] ;
9568: LD_ADDR_VAR 0 9
9572: PUSH
9573: LD_INT 5
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 257
9596: PUSH
9597: LD_INT 17
9599: EQUAL
9600: IFFALSE 9621
// points := [ 100 , 50 , 75 ] ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_INT 100
9609: PUSH
9610: LD_INT 50
9612: PUSH
9613: LD_INT 75
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 15
9633: EQUAL
9634: IFFALSE 9655
// points := [ 10 , 5 , 3 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 10
9643: PUSH
9644: LD_INT 5
9646: PUSH
9647: LD_INT 3
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 14
9667: EQUAL
9668: IFFALSE 9689
// points := [ 10 , 0 , 0 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 10
9677: PUSH
9678: LD_INT 0
9680: PUSH
9681: LD_INT 0
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 11
9701: EQUAL
9702: IFFALSE 9723
// points := [ 30 , 10 , 5 ] ;
9704: LD_ADDR_VAR 0 9
9708: PUSH
9709: LD_INT 30
9711: PUSH
9712: LD_INT 10
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9723: LD_VAR 0 1
9727: PPUSH
9728: LD_INT 5
9730: PPUSH
9731: CALL_OW 321
9735: PUSH
9736: LD_INT 2
9738: EQUAL
9739: IFFALSE 9756
// bpoints := bpoints * 1.8 ;
9741: LD_ADDR_VAR 0 10
9745: PUSH
9746: LD_VAR 0 10
9750: PUSH
9751: LD_REAL  1.80000000000000E+0000
9754: MUL
9755: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9756: LD_VAR 0 6
9760: PPUSH
9761: CALL_OW 257
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 4
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: IN
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 51
9792: PPUSH
9793: CALL_OW 321
9797: PUSH
9798: LD_INT 2
9800: EQUAL
9801: AND
9802: IFFALSE 9819
// bpoints := bpoints * 1.2 ;
9804: LD_ADDR_VAR 0 10
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_REAL  1.20000000000000E+0000
9817: MUL
9818: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9819: LD_VAR 0 6
9823: PPUSH
9824: CALL_OW 257
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 9
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: IN
9843: PUSH
9844: LD_VAR 0 1
9848: PPUSH
9849: LD_INT 52
9851: PPUSH
9852: CALL_OW 321
9856: PUSH
9857: LD_INT 2
9859: EQUAL
9860: AND
9861: IFFALSE 9878
// bpoints := bpoints * 1.5 ;
9863: LD_ADDR_VAR 0 10
9867: PUSH
9868: LD_VAR 0 10
9872: PUSH
9873: LD_REAL  1.50000000000000E+0000
9876: MUL
9877: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 66
9885: PPUSH
9886: CALL_OW 321
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: IFFALSE 9911
// bpoints := bpoints * 1.1 ;
9896: LD_ADDR_VAR 0 10
9900: PUSH
9901: LD_VAR 0 10
9905: PUSH
9906: LD_REAL  1.10000000000000E+0000
9909: MUL
9910: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9911: LD_ADDR_VAR 0 10
9915: PUSH
9916: LD_VAR 0 10
9920: PUSH
9921: LD_VAR 0 6
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: CALL_OW 259
9933: PUSH
9934: LD_REAL  1.15000000000000E+0000
9937: MUL
9938: MUL
9939: ST_TO_ADDR
// end ; unit_vehicle :
9940: GO 10768
9942: LD_INT 2
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10756
9950: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 264
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 42
9966: PUSH
9967: LD_INT 24
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 25 , 5 , 3 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 25
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 43
10011: PUSH
10012: LD_INT 25
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: IN
10020: IFFALSE 10041
// points := [ 40 , 15 , 5 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 40
10029: PUSH
10030: LD_INT 15
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: LD_INT 23
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 7 , 25 , 8 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 7
10070: PUSH
10071: LD_INT 25
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 27
10097: PUSH
10098: LD_INT 44
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: IN
10106: IFFALSE 10127
// points := [ 14 , 50 , 16 ] ;
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_INT 14
10115: PUSH
10116: LD_INT 50
10118: PUSH
10119: LD_INT 16
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10127: LD_VAR 0 6
10131: PPUSH
10132: CALL_OW 264
10136: PUSH
10137: LD_INT 6
10139: PUSH
10140: LD_INT 46
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: IN
10147: IFFALSE 10168
// points := [ 32 , 120 , 70 ] ;
10149: LD_ADDR_VAR 0 9
10153: PUSH
10154: LD_INT 32
10156: PUSH
10157: LD_INT 120
10159: PUSH
10160: LD_INT 70
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 264
10177: PUSH
10178: LD_INT 7
10180: PUSH
10181: LD_INT 28
10183: PUSH
10184: LD_INT 45
10186: PUSH
10187: LD_INT 92
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: IN
10196: IFFALSE 10217
// points := [ 35 , 20 , 45 ] ;
10198: LD_ADDR_VAR 0 9
10202: PUSH
10203: LD_INT 35
10205: PUSH
10206: LD_INT 20
10208: PUSH
10209: LD_INT 45
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 264
10226: PUSH
10227: LD_INT 47
10229: PUSH
10230: EMPTY
10231: LIST
10232: IN
10233: IFFALSE 10254
// points := [ 67 , 45 , 75 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 67
10242: PUSH
10243: LD_INT 45
10245: PUSH
10246: LD_INT 75
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 26
10266: PUSH
10267: EMPTY
10268: LIST
10269: IN
10270: IFFALSE 10291
// points := [ 120 , 30 , 80 ] ;
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_INT 120
10279: PUSH
10280: LD_INT 30
10282: PUSH
10283: LD_INT 80
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: EMPTY
10305: LIST
10306: IN
10307: IFFALSE 10328
// points := [ 40 , 1 , 1 ] ;
10309: LD_ADDR_VAR 0 9
10313: PUSH
10314: LD_INT 40
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10328: LD_VAR 0 6
10332: PPUSH
10333: CALL_OW 264
10337: PUSH
10338: LD_INT 29
10340: PUSH
10341: EMPTY
10342: LIST
10343: IN
10344: IFFALSE 10365
// points := [ 70 , 200 , 400 ] ;
10346: LD_ADDR_VAR 0 9
10350: PUSH
10351: LD_INT 70
10353: PUSH
10354: LD_INT 200
10356: PUSH
10357: LD_INT 400
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10365: LD_VAR 0 6
10369: PPUSH
10370: CALL_OW 264
10374: PUSH
10375: LD_INT 14
10377: PUSH
10378: LD_INT 53
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: IFFALSE 10406
// points := [ 40 , 10 , 20 ] ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_INT 40
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 20
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10406: LD_VAR 0 6
10410: PPUSH
10411: CALL_OW 264
10415: PUSH
10416: LD_INT 9
10418: PUSH
10419: EMPTY
10420: LIST
10421: IN
10422: IFFALSE 10443
// points := [ 5 , 70 , 20 ] ;
10424: LD_ADDR_VAR 0 9
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: LD_INT 70
10434: PUSH
10435: LD_INT 20
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 264
10452: PUSH
10453: LD_INT 10
10455: PUSH
10456: EMPTY
10457: LIST
10458: IN
10459: IFFALSE 10480
// points := [ 35 , 110 , 70 ] ;
10461: LD_ADDR_VAR 0 9
10465: PUSH
10466: LD_INT 35
10468: PUSH
10469: LD_INT 110
10471: PUSH
10472: LD_INT 70
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10480: LD_VAR 0 6
10484: PPUSH
10485: CALL_OW 265
10489: PUSH
10490: LD_INT 25
10492: EQUAL
10493: IFFALSE 10514
// points := [ 80 , 65 , 100 ] ;
10495: LD_ADDR_VAR 0 9
10499: PUSH
10500: LD_INT 80
10502: PUSH
10503: LD_INT 65
10505: PUSH
10506: LD_INT 100
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10514: LD_VAR 0 6
10518: PPUSH
10519: CALL_OW 263
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10529: LD_ADDR_VAR 0 10
10533: PUSH
10534: LD_VAR 0 10
10538: PUSH
10539: LD_VAR 0 6
10543: PPUSH
10544: CALL_OW 311
10548: PPUSH
10549: LD_INT 3
10551: PPUSH
10552: CALL_OW 259
10556: PUSH
10557: LD_INT 4
10559: MUL
10560: MUL
10561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10562: LD_VAR 0 6
10566: PPUSH
10567: CALL_OW 263
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: IFFALSE 10626
// begin j := IsControledBy ( i ) ;
10577: LD_ADDR_VAR 0 7
10581: PUSH
10582: LD_VAR 0 6
10586: PPUSH
10587: CALL_OW 312
10591: ST_TO_ADDR
// if j then
10592: LD_VAR 0 7
10596: IFFALSE 10626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10598: LD_ADDR_VAR 0 10
10602: PUSH
10603: LD_VAR 0 10
10607: PUSH
10608: LD_VAR 0 7
10612: PPUSH
10613: LD_INT 3
10615: PPUSH
10616: CALL_OW 259
10620: PUSH
10621: LD_INT 3
10623: MUL
10624: MUL
10625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10626: LD_VAR 0 6
10630: PPUSH
10631: CALL_OW 264
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 6
10641: PUSH
10642: LD_INT 46
10644: PUSH
10645: LD_INT 44
10647: PUSH
10648: LD_INT 47
10650: PUSH
10651: LD_INT 45
10653: PUSH
10654: LD_INT 28
10656: PUSH
10657: LD_INT 7
10659: PUSH
10660: LD_INT 27
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: IN
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_INT 52
10686: PPUSH
10687: CALL_OW 321
10691: PUSH
10692: LD_INT 2
10694: EQUAL
10695: AND
10696: IFFALSE 10713
// bpoints := bpoints * 1.2 ;
10698: LD_ADDR_VAR 0 10
10702: PUSH
10703: LD_VAR 0 10
10707: PUSH
10708: LD_REAL  1.20000000000000E+0000
10711: MUL
10712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10713: LD_VAR 0 6
10717: PPUSH
10718: CALL_OW 264
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 46
10728: PUSH
10729: LD_INT 47
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: IN
10737: IFFALSE 10754
// bpoints := bpoints * 1.2 ;
10739: LD_ADDR_VAR 0 10
10743: PUSH
10744: LD_VAR 0 10
10748: PUSH
10749: LD_REAL  1.20000000000000E+0000
10752: MUL
10753: ST_TO_ADDR
// end ; unit_building :
10754: GO 10768
10756: LD_INT 3
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10767
10764: POP
// ; end ;
10765: GO 10768
10767: POP
// for j = 1 to 3 do
10768: LD_ADDR_VAR 0 7
10772: PUSH
10773: DOUBLE
10774: LD_INT 1
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 3
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10835
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10784: LD_ADDR_VAR 0 5
10788: PUSH
10789: LD_VAR 0 5
10793: PPUSH
10794: LD_VAR 0 7
10798: PPUSH
10799: LD_VAR 0 5
10803: PUSH
10804: LD_VAR 0 7
10808: ARRAY
10809: PUSH
10810: LD_VAR 0 9
10814: PUSH
10815: LD_VAR 0 7
10819: ARRAY
10820: PUSH
10821: LD_VAR 0 10
10825: MUL
10826: PLUS
10827: PPUSH
10828: CALL_OW 1
10832: ST_TO_ADDR
10833: GO 10781
10835: POP
10836: POP
// end ;
10837: GO 9316
10839: POP
10840: POP
// result := Replace ( result , 4 , tmp ) ;
10841: LD_ADDR_VAR 0 5
10845: PUSH
10846: LD_VAR 0 5
10850: PPUSH
10851: LD_INT 4
10853: PPUSH
10854: LD_VAR 0 8
10858: PPUSH
10859: CALL_OW 1
10863: ST_TO_ADDR
// end ;
10864: LD_VAR 0 5
10868: RET
// export function DangerAtRange ( unit , range ) ; begin
10869: LD_INT 0
10871: PPUSH
// if not unit then
10872: LD_VAR 0 1
10876: NOT
10877: IFFALSE 10881
// exit ;
10879: GO 10926
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 255
10895: PPUSH
10896: LD_VAR 0 1
10900: PPUSH
10901: CALL_OW 250
10905: PPUSH
10906: LD_VAR 0 1
10910: PPUSH
10911: CALL_OW 251
10915: PPUSH
10916: LD_VAR 0 2
10920: PPUSH
10921: CALL 9168 0 4
10925: ST_TO_ADDR
// end ;
10926: LD_VAR 0 3
10930: RET
// export function DangerInArea ( side , area ) ; begin
10931: LD_INT 0
10933: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 81
10946: PUSH
10947: LD_VAR 0 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PPUSH
10956: CALL_OW 70
10960: ST_TO_ADDR
// end ;
10961: LD_VAR 0 3
10965: RET
// export function IsExtension ( b ) ; begin
10966: LD_INT 0
10968: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 23
10981: PUSH
10982: LD_INT 20
10984: PUSH
10985: LD_INT 22
10987: PUSH
10988: LD_INT 17
10990: PUSH
10991: LD_INT 24
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 19
10999: PUSH
11000: LD_INT 16
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 18
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: IN
11021: ST_TO_ADDR
// end ;
11022: LD_VAR 0 2
11026: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
11031: PPUSH
// result := [ ] ;
11032: LD_ADDR_VAR 0 4
11036: PUSH
11037: EMPTY
11038: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11039: LD_ADDR_VAR 0 5
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 3
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 70
11063: ST_TO_ADDR
// if not tmp then
11064: LD_VAR 0 5
11068: NOT
11069: IFFALSE 11073
// exit ;
11071: GO 11137
// if checkLink then
11073: LD_VAR 0 3
11077: IFFALSE 11127
// begin for i in tmp do
11079: LD_ADDR_VAR 0 6
11083: PUSH
11084: LD_VAR 0 5
11088: PUSH
11089: FOR_IN
11090: IFFALSE 11125
// if GetBase ( i ) <> base then
11092: LD_VAR 0 6
11096: PPUSH
11097: CALL_OW 274
11101: PUSH
11102: LD_VAR 0 1
11106: NONEQUAL
11107: IFFALSE 11123
// ComLinkToBase ( base , i ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_VAR 0 6
11118: PPUSH
11119: CALL_OW 169
11123: GO 11089
11125: POP
11126: POP
// end ; result := tmp ;
11127: LD_ADDR_VAR 0 4
11131: PUSH
11132: LD_VAR 0 5
11136: ST_TO_ADDR
// end ;
11137: LD_VAR 0 4
11141: RET
// export function ComComplete ( units , b ) ; var i ; begin
11142: LD_INT 0
11144: PPUSH
11145: PPUSH
// if not units then
11146: LD_VAR 0 1
11150: NOT
11151: IFFALSE 11155
// exit ;
11153: GO 11245
// for i in units do
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: FOR_IN
11166: IFFALSE 11243
// if BuildingStatus ( b ) = bs_build then
11168: LD_VAR 0 2
11172: PPUSH
11173: CALL_OW 461
11177: PUSH
11178: LD_INT 1
11180: EQUAL
11181: IFFALSE 11241
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11183: LD_VAR 0 4
11187: PPUSH
11188: LD_STRING h
11190: PUSH
11191: LD_VAR 0 2
11195: PPUSH
11196: CALL_OW 250
11200: PUSH
11201: LD_VAR 0 2
11205: PPUSH
11206: CALL_OW 251
11210: PUSH
11211: LD_VAR 0 2
11215: PUSH
11216: LD_INT 0
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: LD_INT 0
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: PPUSH
11237: CALL_OW 446
11241: GO 11165
11243: POP
11244: POP
// end ;
11245: LD_VAR 0 3
11249: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11250: LD_INT 0
11252: PPUSH
11253: PPUSH
11254: PPUSH
11255: PPUSH
11256: PPUSH
11257: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11258: LD_VAR 0 1
11262: NOT
11263: PUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 263
11273: PUSH
11274: LD_INT 2
11276: NONEQUAL
11277: OR
11278: IFFALSE 11282
// exit ;
11280: GO 11598
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11282: LD_ADDR_VAR 0 6
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_VAR 0 1
11294: PPUSH
11295: CALL_OW 255
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 30
11309: PUSH
11310: LD_INT 36
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 34
11319: PUSH
11320: LD_INT 31
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: ST_TO_ADDR
// if not tmp then
11341: LD_VAR 0 6
11345: NOT
11346: IFFALSE 11350
// exit ;
11348: GO 11598
// result := [ ] ;
11350: LD_ADDR_VAR 0 2
11354: PUSH
11355: EMPTY
11356: ST_TO_ADDR
// for i in tmp do
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_VAR 0 6
11366: PUSH
11367: FOR_IN
11368: IFFALSE 11439
// begin t := UnitsInside ( i ) ;
11370: LD_ADDR_VAR 0 4
11374: PUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: CALL_OW 313
11384: ST_TO_ADDR
// if t then
11385: LD_VAR 0 4
11389: IFFALSE 11437
// for j in t do
11391: LD_ADDR_VAR 0 7
11395: PUSH
11396: LD_VAR 0 4
11400: PUSH
11401: FOR_IN
11402: IFFALSE 11435
// result := Replace ( result , result + 1 , j ) ;
11404: LD_ADDR_VAR 0 2
11408: PUSH
11409: LD_VAR 0 2
11413: PPUSH
11414: LD_VAR 0 2
11418: PUSH
11419: LD_INT 1
11421: PLUS
11422: PPUSH
11423: LD_VAR 0 7
11427: PPUSH
11428: CALL_OW 1
11432: ST_TO_ADDR
11433: GO 11401
11435: POP
11436: POP
// end ;
11437: GO 11367
11439: POP
11440: POP
// if not result then
11441: LD_VAR 0 2
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 11598
// mech := result [ 1 ] ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_VAR 0 2
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: ST_TO_ADDR
// if result > 1 then
11464: LD_VAR 0 2
11468: PUSH
11469: LD_INT 1
11471: GREATER
11472: IFFALSE 11584
// begin for i = 2 to result do
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: DOUBLE
11480: LD_INT 2
11482: DEC
11483: ST_TO_ADDR
11484: LD_VAR 0 2
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11582
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_VAR 0 2
11501: PUSH
11502: LD_VAR 0 3
11506: ARRAY
11507: PPUSH
11508: LD_INT 3
11510: PPUSH
11511: CALL_OW 259
11515: PUSH
11516: LD_VAR 0 2
11520: PUSH
11521: LD_VAR 0 3
11525: ARRAY
11526: PPUSH
11527: CALL_OW 432
11531: MINUS
11532: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11533: LD_VAR 0 4
11537: PUSH
11538: LD_VAR 0 5
11542: PPUSH
11543: LD_INT 3
11545: PPUSH
11546: CALL_OW 259
11550: PUSH
11551: LD_VAR 0 5
11555: PPUSH
11556: CALL_OW 432
11560: MINUS
11561: GREATEREQUAL
11562: IFFALSE 11580
// mech := result [ i ] ;
11564: LD_ADDR_VAR 0 5
11568: PUSH
11569: LD_VAR 0 2
11573: PUSH
11574: LD_VAR 0 3
11578: ARRAY
11579: ST_TO_ADDR
// end ;
11580: GO 11489
11582: POP
11583: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 5
11593: PPUSH
11594: CALL_OW 135
// end ;
11598: LD_VAR 0 2
11602: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11603: LD_INT 0
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
// result := [ ] ;
11618: LD_ADDR_VAR 0 7
11622: PUSH
11623: EMPTY
11624: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 266
11634: PUSH
11635: LD_INT 0
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: IN
11645: NOT
11646: IFFALSE 11650
// exit ;
11648: GO 13284
// if name then
11650: LD_VAR 0 3
11654: IFFALSE 11670
// SetBName ( base_dep , name ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: CALL_OW 500
// base := GetBase ( base_dep ) ;
11670: LD_ADDR_VAR 0 15
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 274
11684: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11685: LD_ADDR_VAR 0 16
11689: PUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 255
11699: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11700: LD_ADDR_VAR 0 17
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 248
11714: ST_TO_ADDR
// if sources then
11715: LD_VAR 0 5
11719: IFFALSE 11766
// for i = 1 to 3 do
11721: LD_ADDR_VAR 0 8
11725: PUSH
11726: DOUBLE
11727: LD_INT 1
11729: DEC
11730: ST_TO_ADDR
11731: LD_INT 3
11733: PUSH
11734: FOR_TO
11735: IFFALSE 11764
// AddResourceType ( base , i , sources [ i ] ) ;
11737: LD_VAR 0 15
11741: PPUSH
11742: LD_VAR 0 8
11746: PPUSH
11747: LD_VAR 0 5
11751: PUSH
11752: LD_VAR 0 8
11756: ARRAY
11757: PPUSH
11758: CALL_OW 276
11762: GO 11734
11764: POP
11765: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11766: LD_ADDR_VAR 0 18
11770: PUSH
11771: LD_VAR 0 15
11775: PPUSH
11776: LD_VAR 0 2
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL 11027 0 3
11788: ST_TO_ADDR
// InitHc ;
11789: CALL_OW 19
// InitUc ;
11793: CALL_OW 18
// uc_side := side ;
11797: LD_ADDR_OWVAR 20
11801: PUSH
11802: LD_VAR 0 16
11806: ST_TO_ADDR
// uc_nation := nation ;
11807: LD_ADDR_OWVAR 21
11811: PUSH
11812: LD_VAR 0 17
11816: ST_TO_ADDR
// if buildings then
11817: LD_VAR 0 18
11821: IFFALSE 13143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11823: LD_ADDR_VAR 0 19
11827: PUSH
11828: LD_VAR 0 18
11832: PPUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 29
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 30
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 72
11865: ST_TO_ADDR
// if tmp then
11866: LD_VAR 0 19
11870: IFFALSE 11918
// for i in tmp do
11872: LD_ADDR_VAR 0 8
11876: PUSH
11877: LD_VAR 0 19
11881: PUSH
11882: FOR_IN
11883: IFFALSE 11916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11885: LD_VAR 0 8
11889: PPUSH
11890: CALL_OW 250
11894: PPUSH
11895: LD_VAR 0 8
11899: PPUSH
11900: CALL_OW 251
11904: PPUSH
11905: LD_VAR 0 16
11909: PPUSH
11910: CALL_OW 441
11914: GO 11882
11916: POP
11917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11918: LD_VAR 0 18
11922: PPUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 33
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: IFFALSE 12043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11957: LD_ADDR_VAR 0 8
11961: PUSH
11962: LD_VAR 0 18
11966: PPUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 32
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 30
11982: PUSH
11983: LD_INT 33
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 72
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12041
// begin if not GetBWeapon ( i ) then
12003: LD_VAR 0 8
12007: PPUSH
12008: CALL_OW 269
12012: NOT
12013: IFFALSE 12039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12015: LD_VAR 0 8
12019: PPUSH
12020: LD_VAR 0 8
12024: PPUSH
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL 13289 0 2
12034: PPUSH
12035: CALL_OW 431
// end ;
12039: GO 12000
12041: POP
12042: POP
// end ; for i = 1 to personel do
12043: LD_ADDR_VAR 0 8
12047: PUSH
12048: DOUBLE
12049: LD_INT 1
12051: DEC
12052: ST_TO_ADDR
12053: LD_VAR 0 6
12057: PUSH
12058: FOR_TO
12059: IFFALSE 13123
// begin if i > 4 then
12061: LD_VAR 0 8
12065: PUSH
12066: LD_INT 4
12068: GREATER
12069: IFFALSE 12073
// break ;
12071: GO 13123
// case i of 1 :
12073: LD_VAR 0 8
12077: PUSH
12078: LD_INT 1
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12166
12086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12087: LD_ADDR_VAR 0 12
12091: PUSH
12092: LD_VAR 0 18
12096: PPUSH
12097: LD_INT 22
12099: PUSH
12100: LD_VAR 0 16
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 58
12111: PUSH
12112: EMPTY
12113: LIST
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 32
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 4
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 30
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 72
12163: ST_TO_ADDR
12164: GO 12388
12166: LD_INT 2
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12236
12174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12175: LD_ADDR_VAR 0 12
12179: PUSH
12180: LD_VAR 0 18
12184: PPUSH
12185: LD_INT 22
12187: PUSH
12188: LD_VAR 0 16
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: LD_INT 30
12202: PUSH
12203: LD_INT 0
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 72
12233: ST_TO_ADDR
12234: GO 12388
12236: LD_INT 3
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12306
12244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12245: LD_ADDR_VAR 0 12
12249: PUSH
12250: LD_VAR 0 18
12254: PPUSH
12255: LD_INT 22
12257: PUSH
12258: LD_VAR 0 16
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: LD_INT 30
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 3
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 72
12303: ST_TO_ADDR
12304: GO 12388
12306: LD_INT 4
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12387
12314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12315: LD_ADDR_VAR 0 12
12319: PUSH
12320: LD_VAR 0 18
12324: PPUSH
12325: LD_INT 22
12327: PUSH
12328: LD_VAR 0 16
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 6
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 7
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 8
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 72
12384: ST_TO_ADDR
12385: GO 12388
12387: POP
// if i = 1 then
12388: LD_VAR 0 8
12392: PUSH
12393: LD_INT 1
12395: EQUAL
12396: IFFALSE 12507
// begin tmp := [ ] ;
12398: LD_ADDR_VAR 0 19
12402: PUSH
12403: EMPTY
12404: ST_TO_ADDR
// for j in f do
12405: LD_ADDR_VAR 0 9
12409: PUSH
12410: LD_VAR 0 12
12414: PUSH
12415: FOR_IN
12416: IFFALSE 12489
// if GetBType ( j ) = b_bunker then
12418: LD_VAR 0 9
12422: PPUSH
12423: CALL_OW 266
12427: PUSH
12428: LD_INT 32
12430: EQUAL
12431: IFFALSE 12458
// tmp := Insert ( tmp , 1 , j ) else
12433: LD_ADDR_VAR 0 19
12437: PUSH
12438: LD_VAR 0 19
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: LD_VAR 0 9
12450: PPUSH
12451: CALL_OW 2
12455: ST_TO_ADDR
12456: GO 12487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12458: LD_ADDR_VAR 0 19
12462: PUSH
12463: LD_VAR 0 19
12467: PPUSH
12468: LD_VAR 0 19
12472: PUSH
12473: LD_INT 1
12475: PLUS
12476: PPUSH
12477: LD_VAR 0 9
12481: PPUSH
12482: CALL_OW 2
12486: ST_TO_ADDR
12487: GO 12415
12489: POP
12490: POP
// if tmp then
12491: LD_VAR 0 19
12495: IFFALSE 12507
// f := tmp ;
12497: LD_ADDR_VAR 0 12
12501: PUSH
12502: LD_VAR 0 19
12506: ST_TO_ADDR
// end ; x := personel [ i ] ;
12507: LD_ADDR_VAR 0 13
12511: PUSH
12512: LD_VAR 0 6
12516: PUSH
12517: LD_VAR 0 8
12521: ARRAY
12522: ST_TO_ADDR
// if x = - 1 then
12523: LD_VAR 0 13
12527: PUSH
12528: LD_INT 1
12530: NEG
12531: EQUAL
12532: IFFALSE 12741
// begin for j in f do
12534: LD_ADDR_VAR 0 9
12538: PUSH
12539: LD_VAR 0 12
12543: PUSH
12544: FOR_IN
12545: IFFALSE 12737
// repeat InitHc ;
12547: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12551: LD_VAR 0 9
12555: PPUSH
12556: CALL_OW 266
12560: PUSH
12561: LD_INT 5
12563: EQUAL
12564: IFFALSE 12634
// begin if UnitsInside ( j ) < 3 then
12566: LD_VAR 0 9
12570: PPUSH
12571: CALL_OW 313
12575: PUSH
12576: LD_INT 3
12578: LESS
12579: IFFALSE 12615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12581: LD_INT 0
12583: PPUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 8
12589: PUSH
12590: LD_INT 9
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_VAR 0 17
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 4
12608: PPUSH
12609: CALL_OW 380
12613: GO 12632
// PrepareHuman ( false , i , skill ) ;
12615: LD_INT 0
12617: PPUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_VAR 0 4
12627: PPUSH
12628: CALL_OW 380
// end else
12632: GO 12651
// PrepareHuman ( false , i , skill ) ;
12634: LD_INT 0
12636: PPUSH
12637: LD_VAR 0 8
12641: PPUSH
12642: LD_VAR 0 4
12646: PPUSH
12647: CALL_OW 380
// un := CreateHuman ;
12651: LD_ADDR_VAR 0 14
12655: PUSH
12656: CALL_OW 44
12660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12661: LD_ADDR_VAR 0 7
12665: PUSH
12666: LD_VAR 0 7
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 14
12678: PPUSH
12679: CALL_OW 2
12683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12684: LD_VAR 0 14
12688: PPUSH
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12698: LD_VAR 0 9
12702: PPUSH
12703: CALL_OW 313
12707: PUSH
12708: LD_INT 6
12710: EQUAL
12711: PUSH
12712: LD_VAR 0 9
12716: PPUSH
12717: CALL_OW 266
12721: PUSH
12722: LD_INT 32
12724: PUSH
12725: LD_INT 31
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: IN
12732: OR
12733: IFFALSE 12547
12735: GO 12544
12737: POP
12738: POP
// end else
12739: GO 13121
// for j = 1 to x do
12741: LD_ADDR_VAR 0 9
12745: PUSH
12746: DOUBLE
12747: LD_INT 1
12749: DEC
12750: ST_TO_ADDR
12751: LD_VAR 0 13
12755: PUSH
12756: FOR_TO
12757: IFFALSE 13119
// begin InitHc ;
12759: CALL_OW 19
// if not f then
12763: LD_VAR 0 12
12767: NOT
12768: IFFALSE 12857
// begin PrepareHuman ( false , i , skill ) ;
12770: LD_INT 0
12772: PPUSH
12773: LD_VAR 0 8
12777: PPUSH
12778: LD_VAR 0 4
12782: PPUSH
12783: CALL_OW 380
// un := CreateHuman ;
12787: LD_ADDR_VAR 0 14
12791: PUSH
12792: CALL_OW 44
12796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12797: LD_ADDR_VAR 0 7
12801: PUSH
12802: LD_VAR 0 7
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 14
12814: PPUSH
12815: CALL_OW 2
12819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12820: LD_VAR 0 14
12824: PPUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 250
12834: PPUSH
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 251
12844: PPUSH
12845: LD_INT 10
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 50
// continue ;
12855: GO 12756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12857: LD_VAR 0 12
12861: PUSH
12862: LD_INT 1
12864: ARRAY
12865: PPUSH
12866: CALL_OW 313
12870: PUSH
12871: LD_VAR 0 12
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: PPUSH
12880: CALL_OW 266
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: LD_INT 31
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: IN
12895: AND
12896: PUSH
12897: LD_VAR 0 12
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PPUSH
12906: CALL_OW 313
12910: PUSH
12911: LD_INT 6
12913: EQUAL
12914: OR
12915: IFFALSE 12935
// f := Delete ( f , 1 ) ;
12917: LD_ADDR_VAR 0 12
12921: PUSH
12922: LD_VAR 0 12
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: CALL_OW 3
12934: ST_TO_ADDR
// if not f then
12935: LD_VAR 0 12
12939: NOT
12940: IFFALSE 12958
// begin x := x + 2 ;
12942: LD_ADDR_VAR 0 13
12946: PUSH
12947: LD_VAR 0 13
12951: PUSH
12952: LD_INT 2
12954: PLUS
12955: ST_TO_ADDR
// continue ;
12956: GO 12756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12958: LD_VAR 0 12
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 266
12971: PUSH
12972: LD_INT 5
12974: EQUAL
12975: IFFALSE 13049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12977: LD_VAR 0 12
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: PPUSH
12986: CALL_OW 313
12990: PUSH
12991: LD_INT 3
12993: LESS
12994: IFFALSE 13030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12996: LD_INT 0
12998: PPUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: LD_INT 9
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_VAR 0 17
13017: ARRAY
13018: PPUSH
13019: LD_VAR 0 4
13023: PPUSH
13024: CALL_OW 380
13028: GO 13047
// PrepareHuman ( false , i , skill ) ;
13030: LD_INT 0
13032: PPUSH
13033: LD_VAR 0 8
13037: PPUSH
13038: LD_VAR 0 4
13042: PPUSH
13043: CALL_OW 380
// end else
13047: GO 13066
// PrepareHuman ( false , i , skill ) ;
13049: LD_INT 0
13051: PPUSH
13052: LD_VAR 0 8
13056: PPUSH
13057: LD_VAR 0 4
13061: PPUSH
13062: CALL_OW 380
// un := CreateHuman ;
13066: LD_ADDR_VAR 0 14
13070: PUSH
13071: CALL_OW 44
13075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13076: LD_ADDR_VAR 0 7
13080: PUSH
13081: LD_VAR 0 7
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_VAR 0 14
13093: PPUSH
13094: CALL_OW 2
13098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13099: LD_VAR 0 14
13103: PPUSH
13104: LD_VAR 0 12
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 52
// end ;
13117: GO 12756
13119: POP
13120: POP
// end ;
13121: GO 12058
13123: POP
13124: POP
// result := result ^ buildings ;
13125: LD_ADDR_VAR 0 7
13129: PUSH
13130: LD_VAR 0 7
13134: PUSH
13135: LD_VAR 0 18
13139: ADD
13140: ST_TO_ADDR
// end else
13141: GO 13284
// begin for i = 1 to personel do
13143: LD_ADDR_VAR 0 8
13147: PUSH
13148: DOUBLE
13149: LD_INT 1
13151: DEC
13152: ST_TO_ADDR
13153: LD_VAR 0 6
13157: PUSH
13158: FOR_TO
13159: IFFALSE 13282
// begin if i > 4 then
13161: LD_VAR 0 8
13165: PUSH
13166: LD_INT 4
13168: GREATER
13169: IFFALSE 13173
// break ;
13171: GO 13282
// x := personel [ i ] ;
13173: LD_ADDR_VAR 0 13
13177: PUSH
13178: LD_VAR 0 6
13182: PUSH
13183: LD_VAR 0 8
13187: ARRAY
13188: ST_TO_ADDR
// if x = - 1 then
13189: LD_VAR 0 13
13193: PUSH
13194: LD_INT 1
13196: NEG
13197: EQUAL
13198: IFFALSE 13202
// continue ;
13200: GO 13158
// PrepareHuman ( false , i , skill ) ;
13202: LD_INT 0
13204: PPUSH
13205: LD_VAR 0 8
13209: PPUSH
13210: LD_VAR 0 4
13214: PPUSH
13215: CALL_OW 380
// un := CreateHuman ;
13219: LD_ADDR_VAR 0 14
13223: PUSH
13224: CALL_OW 44
13228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13229: LD_VAR 0 14
13233: PPUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 250
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 251
13253: PPUSH
13254: LD_INT 10
13256: PPUSH
13257: LD_INT 0
13259: PPUSH
13260: CALL_OW 50
// result := result ^ un ;
13264: LD_ADDR_VAR 0 7
13268: PUSH
13269: LD_VAR 0 7
13273: PUSH
13274: LD_VAR 0 14
13278: ADD
13279: ST_TO_ADDR
// end ;
13280: GO 13158
13282: POP
13283: POP
// end ; end ;
13284: LD_VAR 0 7
13288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
13305: PPUSH
13306: PPUSH
// result := false ;
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13315: LD_VAR 0 1
13319: NOT
13320: PUSH
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 266
13330: PUSH
13331: LD_INT 32
13333: PUSH
13334: LD_INT 33
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: IN
13341: NOT
13342: OR
13343: IFFALSE 13347
// exit ;
13345: GO 14456
// nat := GetNation ( tower ) ;
13347: LD_ADDR_VAR 0 12
13351: PUSH
13352: LD_VAR 0 1
13356: PPUSH
13357: CALL_OW 248
13361: ST_TO_ADDR
// side := GetSide ( tower ) ;
13362: LD_ADDR_VAR 0 16
13366: PUSH
13367: LD_VAR 0 1
13371: PPUSH
13372: CALL_OW 255
13376: ST_TO_ADDR
// x := GetX ( tower ) ;
13377: LD_ADDR_VAR 0 10
13381: PUSH
13382: LD_VAR 0 1
13386: PPUSH
13387: CALL_OW 250
13391: ST_TO_ADDR
// y := GetY ( tower ) ;
13392: LD_ADDR_VAR 0 11
13396: PUSH
13397: LD_VAR 0 1
13401: PPUSH
13402: CALL_OW 251
13406: ST_TO_ADDR
// if not x or not y then
13407: LD_VAR 0 10
13411: NOT
13412: PUSH
13413: LD_VAR 0 11
13417: NOT
13418: OR
13419: IFFALSE 13423
// exit ;
13421: GO 14456
// weapon := 0 ;
13423: LD_ADDR_VAR 0 18
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// fac_list := [ ] ;
13431: LD_ADDR_VAR 0 17
13435: PUSH
13436: EMPTY
13437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13438: LD_ADDR_VAR 0 6
13442: PUSH
13443: LD_VAR 0 1
13447: PPUSH
13448: CALL_OW 274
13452: PPUSH
13453: LD_VAR 0 2
13457: PPUSH
13458: LD_INT 0
13460: PPUSH
13461: CALL 11027 0 3
13465: PPUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 72
13480: ST_TO_ADDR
// if not factories then
13481: LD_VAR 0 6
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 14456
// for i in factories do
13490: LD_ADDR_VAR 0 8
13494: PUSH
13495: LD_VAR 0 6
13499: PUSH
13500: FOR_IN
13501: IFFALSE 13526
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13503: LD_ADDR_VAR 0 17
13507: PUSH
13508: LD_VAR 0 17
13512: PUSH
13513: LD_VAR 0 8
13517: PPUSH
13518: CALL_OW 478
13522: UNION
13523: ST_TO_ADDR
13524: GO 13500
13526: POP
13527: POP
// if not fac_list then
13528: LD_VAR 0 17
13532: NOT
13533: IFFALSE 13537
// exit ;
13535: GO 14456
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13537: LD_ADDR_VAR 0 5
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: LD_INT 9
13550: PUSH
13551: LD_INT 10
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 7
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 27
13574: PUSH
13575: LD_INT 28
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 30
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 43
13592: PUSH
13593: LD_INT 44
13595: PUSH
13596: LD_INT 46
13598: PUSH
13599: LD_INT 45
13601: PUSH
13602: LD_INT 47
13604: PUSH
13605: LD_INT 49
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_VAR 0 12
13625: ARRAY
13626: ST_TO_ADDR
// list := list isect fac_list ;
13627: LD_ADDR_VAR 0 5
13631: PUSH
13632: LD_VAR 0 5
13636: PUSH
13637: LD_VAR 0 17
13641: ISECT
13642: ST_TO_ADDR
// if not list then
13643: LD_VAR 0 5
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 14456
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13652: LD_VAR 0 12
13656: PUSH
13657: LD_INT 3
13659: EQUAL
13660: PUSH
13661: LD_INT 49
13663: PUSH
13664: LD_VAR 0 5
13668: IN
13669: AND
13670: PUSH
13671: LD_INT 31
13673: PPUSH
13674: LD_VAR 0 16
13678: PPUSH
13679: CALL_OW 321
13683: PUSH
13684: LD_INT 2
13686: EQUAL
13687: AND
13688: IFFALSE 13748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 16
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 35
13704: PUSH
13705: LD_INT 49
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 91
13714: PUSH
13715: LD_VAR 0 1
13719: PUSH
13720: LD_INT 10
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: NOT
13738: IFFALSE 13748
// weapon := ru_time_lapser ;
13740: LD_ADDR_VAR 0 18
13744: PUSH
13745: LD_INT 49
13747: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13748: LD_VAR 0 12
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: IN
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_VAR 0 5
13771: IN
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_VAR 0 5
13780: IN
13781: OR
13782: AND
13783: PUSH
13784: LD_INT 6
13786: PPUSH
13787: LD_VAR 0 16
13791: PPUSH
13792: CALL_OW 321
13796: PUSH
13797: LD_INT 2
13799: EQUAL
13800: AND
13801: IFFALSE 13966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13803: LD_INT 22
13805: PUSH
13806: LD_VAR 0 16
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 35
13820: PUSH
13821: LD_INT 11
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 35
13830: PUSH
13831: LD_INT 30
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 91
13845: PUSH
13846: LD_VAR 0 1
13850: PUSH
13851: LD_INT 18
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: NOT
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_VAR 0 16
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 30
13887: PUSH
13888: LD_INT 32
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 33
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 91
13912: PUSH
13913: LD_VAR 0 1
13917: PUSH
13918: LD_INT 12
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: AND
13943: IFFALSE 13966
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13945: LD_ADDR_VAR 0 18
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 30
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_VAR 0 12
13964: ARRAY
13965: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13966: LD_VAR 0 18
13970: NOT
13971: PUSH
13972: LD_INT 40
13974: PPUSH
13975: LD_VAR 0 16
13979: PPUSH
13980: CALL_OW 321
13984: PUSH
13985: LD_INT 2
13987: EQUAL
13988: AND
13989: PUSH
13990: LD_INT 7
13992: PUSH
13993: LD_VAR 0 5
13997: IN
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_VAR 0 5
14006: IN
14007: OR
14008: PUSH
14009: LD_INT 45
14011: PUSH
14012: LD_VAR 0 5
14016: IN
14017: OR
14018: AND
14019: IFFALSE 14273
// begin hex := GetHexInfo ( x , y ) ;
14021: LD_ADDR_VAR 0 4
14025: PUSH
14026: LD_VAR 0 10
14030: PPUSH
14031: LD_VAR 0 11
14035: PPUSH
14036: CALL_OW 546
14040: ST_TO_ADDR
// if hex [ 1 ] then
14041: LD_VAR 0 4
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: IFFALSE 14053
// exit ;
14051: GO 14456
// height := hex [ 2 ] ;
14053: LD_ADDR_VAR 0 15
14057: PUSH
14058: LD_VAR 0 4
14062: PUSH
14063: LD_INT 2
14065: ARRAY
14066: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14067: LD_ADDR_VAR 0 14
14071: PUSH
14072: LD_INT 0
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: LD_INT 5
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: ST_TO_ADDR
// for i in tmp do
14090: LD_ADDR_VAR 0 8
14094: PUSH
14095: LD_VAR 0 14
14099: PUSH
14100: FOR_IN
14101: IFFALSE 14271
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14103: LD_ADDR_VAR 0 9
14107: PUSH
14108: LD_VAR 0 10
14112: PPUSH
14113: LD_VAR 0 8
14117: PPUSH
14118: LD_INT 5
14120: PPUSH
14121: CALL_OW 272
14125: PUSH
14126: LD_VAR 0 11
14130: PPUSH
14131: LD_VAR 0 8
14135: PPUSH
14136: LD_INT 5
14138: PPUSH
14139: CALL_OW 273
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14148: LD_VAR 0 9
14152: PUSH
14153: LD_INT 1
14155: ARRAY
14156: PPUSH
14157: LD_VAR 0 9
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: PPUSH
14166: CALL_OW 488
14170: IFFALSE 14269
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14172: LD_ADDR_VAR 0 4
14176: PUSH
14177: LD_VAR 0 9
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PPUSH
14186: LD_VAR 0 9
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: CALL_OW 546
14199: ST_TO_ADDR
// if hex [ 1 ] then
14200: LD_VAR 0 4
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: IFFALSE 14212
// continue ;
14210: GO 14100
// h := hex [ 2 ] ;
14212: LD_ADDR_VAR 0 13
14216: PUSH
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: ST_TO_ADDR
// if h + 7 < height then
14226: LD_VAR 0 13
14230: PUSH
14231: LD_INT 7
14233: PLUS
14234: PUSH
14235: LD_VAR 0 15
14239: LESS
14240: IFFALSE 14269
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14242: LD_ADDR_VAR 0 18
14246: PUSH
14247: LD_INT 7
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 45
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_VAR 0 12
14265: ARRAY
14266: ST_TO_ADDR
// break ;
14267: GO 14271
// end ; end ; end ;
14269: GO 14100
14271: POP
14272: POP
// end ; if not weapon then
14273: LD_VAR 0 18
14277: NOT
14278: IFFALSE 14338
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14280: LD_ADDR_VAR 0 5
14284: PUSH
14285: LD_VAR 0 5
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: LD_INT 49
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: DIFF
14304: ST_TO_ADDR
// if not list then
14305: LD_VAR 0 5
14309: NOT
14310: IFFALSE 14314
// exit ;
14312: GO 14456
// weapon := list [ rand ( 1 , list ) ] ;
14314: LD_ADDR_VAR 0 18
14318: PUSH
14319: LD_VAR 0 5
14323: PUSH
14324: LD_INT 1
14326: PPUSH
14327: LD_VAR 0 5
14331: PPUSH
14332: CALL_OW 12
14336: ARRAY
14337: ST_TO_ADDR
// end ; if weapon then
14338: LD_VAR 0 18
14342: IFFALSE 14456
// begin tmp := CostOfWeapon ( weapon ) ;
14344: LD_ADDR_VAR 0 14
14348: PUSH
14349: LD_VAR 0 18
14353: PPUSH
14354: CALL_OW 451
14358: ST_TO_ADDR
// j := GetBase ( tower ) ;
14359: LD_ADDR_VAR 0 9
14363: PUSH
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 274
14373: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14374: LD_VAR 0 9
14378: PPUSH
14379: LD_INT 1
14381: PPUSH
14382: CALL_OW 275
14386: PUSH
14387: LD_VAR 0 14
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: GREATEREQUAL
14396: PUSH
14397: LD_VAR 0 9
14401: PPUSH
14402: LD_INT 2
14404: PPUSH
14405: CALL_OW 275
14409: PUSH
14410: LD_VAR 0 14
14414: PUSH
14415: LD_INT 2
14417: ARRAY
14418: GREATEREQUAL
14419: AND
14420: PUSH
14421: LD_VAR 0 9
14425: PPUSH
14426: LD_INT 3
14428: PPUSH
14429: CALL_OW 275
14433: PUSH
14434: LD_VAR 0 14
14438: PUSH
14439: LD_INT 3
14441: ARRAY
14442: GREATEREQUAL
14443: AND
14444: IFFALSE 14456
// result := weapon ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_VAR 0 18
14455: ST_TO_ADDR
// end ; end ;
14456: LD_VAR 0 3
14460: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14461: LD_INT 0
14463: PPUSH
14464: PPUSH
// result := true ;
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// if array1 = array2 then
14473: LD_VAR 0 1
14477: PUSH
14478: LD_VAR 0 2
14482: EQUAL
14483: IFFALSE 14543
// begin for i = 1 to array1 do
14485: LD_ADDR_VAR 0 4
14489: PUSH
14490: DOUBLE
14491: LD_INT 1
14493: DEC
14494: ST_TO_ADDR
14495: LD_VAR 0 1
14499: PUSH
14500: FOR_TO
14501: IFFALSE 14539
// if array1 [ i ] <> array2 [ i ] then
14503: LD_VAR 0 1
14507: PUSH
14508: LD_VAR 0 4
14512: ARRAY
14513: PUSH
14514: LD_VAR 0 2
14518: PUSH
14519: LD_VAR 0 4
14523: ARRAY
14524: NONEQUAL
14525: IFFALSE 14537
// begin result := false ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// break ;
14535: GO 14539
// end ;
14537: GO 14500
14539: POP
14540: POP
// end else
14541: GO 14551
// result := false ;
14543: LD_ADDR_VAR 0 3
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// end ;
14551: LD_VAR 0 3
14555: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14556: LD_INT 0
14558: PPUSH
14559: PPUSH
// if not array1 or not array2 then
14560: LD_VAR 0 1
14564: NOT
14565: PUSH
14566: LD_VAR 0 2
14570: NOT
14571: OR
14572: IFFALSE 14576
// exit ;
14574: GO 14640
// result := true ;
14576: LD_ADDR_VAR 0 3
14580: PUSH
14581: LD_INT 1
14583: ST_TO_ADDR
// for i = 1 to array1 do
14584: LD_ADDR_VAR 0 4
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 1
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14638
// if array1 [ i ] <> array2 [ i ] then
14602: LD_VAR 0 1
14606: PUSH
14607: LD_VAR 0 4
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 2
14617: PUSH
14618: LD_VAR 0 4
14622: ARRAY
14623: NONEQUAL
14624: IFFALSE 14636
// begin result := false ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// break ;
14634: GO 14638
// end ;
14636: GO 14599
14638: POP
14639: POP
// end ;
14640: LD_VAR 0 3
14644: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
14649: PPUSH
// pom := GetBase ( fac ) ;
14650: LD_ADDR_VAR 0 5
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 274
14664: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14665: LD_ADDR_VAR 0 4
14669: PUSH
14670: LD_VAR 0 2
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 2
14686: ARRAY
14687: PPUSH
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 3
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_INT 4
14704: ARRAY
14705: PPUSH
14706: CALL_OW 449
14710: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_VAR 0 5
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 275
14728: PUSH
14729: LD_VAR 0 4
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: GREATEREQUAL
14738: PUSH
14739: LD_VAR 0 5
14743: PPUSH
14744: LD_INT 2
14746: PPUSH
14747: CALL_OW 275
14751: PUSH
14752: LD_VAR 0 4
14756: PUSH
14757: LD_INT 2
14759: ARRAY
14760: GREATEREQUAL
14761: AND
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_INT 3
14770: PPUSH
14771: CALL_OW 275
14775: PUSH
14776: LD_VAR 0 4
14780: PUSH
14781: LD_INT 3
14783: ARRAY
14784: GREATEREQUAL
14785: AND
14786: ST_TO_ADDR
// end ;
14787: LD_VAR 0 3
14791: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
// pom := GetBase ( building ) ;
14798: LD_ADDR_VAR 0 3
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 274
14812: ST_TO_ADDR
// if not pom then
14813: LD_VAR 0 3
14817: NOT
14818: IFFALSE 14822
// exit ;
14820: GO 14992
// btype := GetBType ( building ) ;
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 266
14836: ST_TO_ADDR
// if btype = b_armoury then
14837: LD_VAR 0 5
14841: PUSH
14842: LD_INT 4
14844: EQUAL
14845: IFFALSE 14855
// btype := b_barracks ;
14847: LD_ADDR_VAR 0 5
14851: PUSH
14852: LD_INT 5
14854: ST_TO_ADDR
// if btype = b_depot then
14855: LD_VAR 0 5
14859: PUSH
14860: LD_INT 0
14862: EQUAL
14863: IFFALSE 14873
// btype := b_warehouse ;
14865: LD_ADDR_VAR 0 5
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// if btype = b_workshop then
14873: LD_VAR 0 5
14877: PUSH
14878: LD_INT 2
14880: EQUAL
14881: IFFALSE 14891
// btype := b_factory ;
14883: LD_ADDR_VAR 0 5
14887: PUSH
14888: LD_INT 3
14890: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14891: LD_ADDR_VAR 0 4
14895: PUSH
14896: LD_VAR 0 5
14900: PPUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 248
14910: PPUSH
14911: CALL_OW 450
14915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_VAR 0 3
14925: PPUSH
14926: LD_INT 1
14928: PPUSH
14929: CALL_OW 275
14933: PUSH
14934: LD_VAR 0 4
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: GREATEREQUAL
14943: PUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: CALL_OW 275
14956: PUSH
14957: LD_VAR 0 4
14961: PUSH
14962: LD_INT 2
14964: ARRAY
14965: GREATEREQUAL
14966: AND
14967: PUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 3
14975: PPUSH
14976: CALL_OW 275
14980: PUSH
14981: LD_VAR 0 4
14985: PUSH
14986: LD_INT 3
14988: ARRAY
14989: GREATEREQUAL
14990: AND
14991: ST_TO_ADDR
// end ;
14992: LD_VAR 0 2
14996: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
15001: PPUSH
// pom := GetBase ( building ) ;
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 274
15016: ST_TO_ADDR
// if not pom then
15017: LD_VAR 0 4
15021: NOT
15022: IFFALSE 15026
// exit ;
15024: GO 15127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_VAR 0 2
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 248
15045: PPUSH
15046: CALL_OW 450
15050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 4
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 275
15068: PUSH
15069: LD_VAR 0 5
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: GREATEREQUAL
15078: PUSH
15079: LD_VAR 0 4
15083: PPUSH
15084: LD_INT 2
15086: PPUSH
15087: CALL_OW 275
15091: PUSH
15092: LD_VAR 0 5
15096: PUSH
15097: LD_INT 2
15099: ARRAY
15100: GREATEREQUAL
15101: AND
15102: PUSH
15103: LD_VAR 0 4
15107: PPUSH
15108: LD_INT 3
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 3
15123: ARRAY
15124: GREATEREQUAL
15125: AND
15126: ST_TO_ADDR
// end ;
15127: LD_VAR 0 3
15131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
// result := false ;
15145: LD_ADDR_VAR 0 8
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15153: LD_VAR 0 5
15157: NOT
15158: PUSH
15159: LD_VAR 0 1
15163: NOT
15164: OR
15165: PUSH
15166: LD_VAR 0 2
15170: NOT
15171: OR
15172: PUSH
15173: LD_VAR 0 3
15177: NOT
15178: OR
15179: IFFALSE 15183
// exit ;
15181: GO 15997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15183: LD_ADDR_VAR 0 14
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: LD_VAR 0 2
15197: PPUSH
15198: LD_VAR 0 3
15202: PPUSH
15203: LD_VAR 0 4
15207: PPUSH
15208: LD_VAR 0 5
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PPUSH
15217: CALL_OW 248
15221: PPUSH
15222: LD_INT 0
15224: PPUSH
15225: CALL 17250 0 6
15229: ST_TO_ADDR
// if not hexes then
15230: LD_VAR 0 14
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15997
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15239: LD_ADDR_VAR 0 17
15243: PUSH
15244: LD_VAR 0 5
15248: PPUSH
15249: LD_INT 22
15251: PUSH
15252: LD_VAR 0 13
15256: PPUSH
15257: CALL_OW 255
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 72
15302: ST_TO_ADDR
// for i = 1 to hexes do
15303: LD_ADDR_VAR 0 9
15307: PUSH
15308: DOUBLE
15309: LD_INT 1
15311: DEC
15312: ST_TO_ADDR
15313: LD_VAR 0 14
15317: PUSH
15318: FOR_TO
15319: IFFALSE 15995
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15321: LD_ADDR_VAR 0 13
15325: PUSH
15326: LD_VAR 0 14
15330: PUSH
15331: LD_VAR 0 9
15335: ARRAY
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: PPUSH
15341: LD_VAR 0 14
15345: PUSH
15346: LD_VAR 0 9
15350: ARRAY
15351: PUSH
15352: LD_INT 2
15354: ARRAY
15355: PPUSH
15356: CALL_OW 428
15360: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15361: LD_VAR 0 14
15365: PUSH
15366: LD_VAR 0 9
15370: ARRAY
15371: PUSH
15372: LD_INT 1
15374: ARRAY
15375: PPUSH
15376: LD_VAR 0 14
15380: PUSH
15381: LD_VAR 0 9
15385: ARRAY
15386: PUSH
15387: LD_INT 2
15389: ARRAY
15390: PPUSH
15391: CALL_OW 351
15395: PUSH
15396: LD_VAR 0 14
15400: PUSH
15401: LD_VAR 0 9
15405: ARRAY
15406: PUSH
15407: LD_INT 1
15409: ARRAY
15410: PPUSH
15411: LD_VAR 0 14
15415: PUSH
15416: LD_VAR 0 9
15420: ARRAY
15421: PUSH
15422: LD_INT 2
15424: ARRAY
15425: PPUSH
15426: CALL_OW 488
15430: NOT
15431: OR
15432: PUSH
15433: LD_VAR 0 13
15437: PPUSH
15438: CALL_OW 247
15442: PUSH
15443: LD_INT 3
15445: EQUAL
15446: OR
15447: IFFALSE 15453
// exit ;
15449: POP
15450: POP
15451: GO 15997
// if not tmp then
15453: LD_VAR 0 13
15457: NOT
15458: IFFALSE 15462
// continue ;
15460: GO 15318
// result := true ;
15462: LD_ADDR_VAR 0 8
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15470: LD_VAR 0 6
15474: PUSH
15475: LD_VAR 0 13
15479: PPUSH
15480: CALL_OW 247
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: AND
15489: PUSH
15490: LD_VAR 0 13
15494: PPUSH
15495: CALL_OW 263
15499: PUSH
15500: LD_INT 1
15502: EQUAL
15503: AND
15504: IFFALSE 15668
// begin if IsDrivenBy ( tmp ) then
15506: LD_VAR 0 13
15510: PPUSH
15511: CALL_OW 311
15515: IFFALSE 15519
// continue ;
15517: GO 15318
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15519: LD_VAR 0 6
15523: PPUSH
15524: LD_INT 3
15526: PUSH
15527: LD_INT 60
15529: PUSH
15530: EMPTY
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: LD_INT 55
15542: PUSH
15543: EMPTY
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PPUSH
15554: CALL_OW 72
15558: IFFALSE 15666
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15560: LD_ADDR_VAR 0 18
15564: PUSH
15565: LD_VAR 0 6
15569: PPUSH
15570: LD_INT 3
15572: PUSH
15573: LD_INT 60
15575: PUSH
15576: EMPTY
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 55
15588: PUSH
15589: EMPTY
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PPUSH
15600: CALL_OW 72
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: ST_TO_ADDR
// if IsInUnit ( driver ) then
15609: LD_VAR 0 18
15613: PPUSH
15614: CALL_OW 310
15618: IFFALSE 15629
// ComExit ( driver ) ;
15620: LD_VAR 0 18
15624: PPUSH
15625: CALL 41051 0 1
// AddComEnterUnit ( driver , tmp ) ;
15629: LD_VAR 0 18
15633: PPUSH
15634: LD_VAR 0 13
15638: PPUSH
15639: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15643: LD_VAR 0 18
15647: PPUSH
15648: LD_VAR 0 7
15652: PPUSH
15653: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15657: LD_VAR 0 18
15661: PPUSH
15662: CALL_OW 181
// end ; continue ;
15666: GO 15318
// end ; if not cleaners or not tmp in cleaners then
15668: LD_VAR 0 6
15672: NOT
15673: PUSH
15674: LD_VAR 0 13
15678: PUSH
15679: LD_VAR 0 6
15683: IN
15684: NOT
15685: OR
15686: IFFALSE 15993
// begin if dep then
15688: LD_VAR 0 17
15692: IFFALSE 15828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15694: LD_ADDR_VAR 0 16
15698: PUSH
15699: LD_VAR 0 17
15703: PUSH
15704: LD_INT 1
15706: ARRAY
15707: PPUSH
15708: CALL_OW 250
15712: PPUSH
15713: LD_VAR 0 17
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: CALL_OW 254
15726: PPUSH
15727: LD_INT 5
15729: PPUSH
15730: CALL_OW 272
15734: PUSH
15735: LD_VAR 0 17
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: CALL_OW 251
15748: PPUSH
15749: LD_VAR 0 17
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: CALL_OW 254
15762: PPUSH
15763: LD_INT 5
15765: PPUSH
15766: CALL_OW 273
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15775: LD_VAR 0 16
15779: PUSH
15780: LD_INT 1
15782: ARRAY
15783: PPUSH
15784: LD_VAR 0 16
15788: PUSH
15789: LD_INT 2
15791: ARRAY
15792: PPUSH
15793: CALL_OW 488
15797: IFFALSE 15828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15799: LD_VAR 0 13
15803: PPUSH
15804: LD_VAR 0 16
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: LD_VAR 0 16
15817: PUSH
15818: LD_INT 2
15820: ARRAY
15821: PPUSH
15822: CALL_OW 111
// continue ;
15826: GO 15318
// end ; end ; r := GetDir ( tmp ) ;
15828: LD_ADDR_VAR 0 15
15832: PUSH
15833: LD_VAR 0 13
15837: PPUSH
15838: CALL_OW 254
15842: ST_TO_ADDR
// if r = 5 then
15843: LD_VAR 0 15
15847: PUSH
15848: LD_INT 5
15850: EQUAL
15851: IFFALSE 15861
// r := 0 ;
15853: LD_ADDR_VAR 0 15
15857: PUSH
15858: LD_INT 0
15860: ST_TO_ADDR
// for j = r to 5 do
15861: LD_ADDR_VAR 0 10
15865: PUSH
15866: DOUBLE
15867: LD_VAR 0 15
15871: DEC
15872: ST_TO_ADDR
15873: LD_INT 5
15875: PUSH
15876: FOR_TO
15877: IFFALSE 15991
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15879: LD_ADDR_VAR 0 11
15883: PUSH
15884: LD_VAR 0 13
15888: PPUSH
15889: CALL_OW 250
15893: PPUSH
15894: LD_VAR 0 10
15898: PPUSH
15899: LD_INT 2
15901: PPUSH
15902: CALL_OW 272
15906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15907: LD_ADDR_VAR 0 12
15911: PUSH
15912: LD_VAR 0 13
15916: PPUSH
15917: CALL_OW 251
15921: PPUSH
15922: LD_VAR 0 10
15926: PPUSH
15927: LD_INT 2
15929: PPUSH
15930: CALL_OW 273
15934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15935: LD_VAR 0 11
15939: PPUSH
15940: LD_VAR 0 12
15944: PPUSH
15945: CALL_OW 488
15949: PUSH
15950: LD_VAR 0 11
15954: PPUSH
15955: LD_VAR 0 12
15959: PPUSH
15960: CALL_OW 428
15964: NOT
15965: AND
15966: IFFALSE 15989
// begin ComMoveXY ( tmp , _x , _y ) ;
15968: LD_VAR 0 13
15972: PPUSH
15973: LD_VAR 0 11
15977: PPUSH
15978: LD_VAR 0 12
15982: PPUSH
15983: CALL_OW 111
// break ;
15987: GO 15991
// end ; end ;
15989: GO 15876
15991: POP
15992: POP
// end ; end ;
15993: GO 15318
15995: POP
15996: POP
// end ;
15997: LD_VAR 0 8
16001: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16002: LD_INT 0
16004: PPUSH
// result := true ;
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16013: LD_VAR 0 2
16017: PUSH
16018: LD_INT 24
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16032
16024: LD_INT 33
16026: DOUBLE
16027: EQUAL
16028: IFTRUE 16032
16030: GO 16057
16032: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16033: LD_ADDR_VAR 0 3
16037: PUSH
16038: LD_INT 32
16040: PPUSH
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 321
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: ST_TO_ADDR
16055: GO 16373
16057: LD_INT 20
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16090
16065: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_INT 6
16073: PPUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 321
16083: PUSH
16084: LD_INT 2
16086: EQUAL
16087: ST_TO_ADDR
16088: GO 16373
16090: LD_INT 22
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16104
16096: LD_INT 36
16098: DOUBLE
16099: EQUAL
16100: IFTRUE 16104
16102: GO 16129
16104: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_INT 15
16112: PPUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 321
16122: PUSH
16123: LD_INT 2
16125: EQUAL
16126: ST_TO_ADDR
16127: GO 16373
16129: LD_INT 30
16131: DOUBLE
16132: EQUAL
16133: IFTRUE 16137
16135: GO 16162
16137: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 20
16145: PPUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 321
16155: PUSH
16156: LD_INT 2
16158: EQUAL
16159: ST_TO_ADDR
16160: GO 16373
16162: LD_INT 28
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16176
16168: LD_INT 21
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16201
16176: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 21
16184: PPUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 321
16194: PUSH
16195: LD_INT 2
16197: EQUAL
16198: ST_TO_ADDR
16199: GO 16373
16201: LD_INT 16
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16234
16209: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 84
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 321
16227: PUSH
16228: LD_INT 2
16230: EQUAL
16231: ST_TO_ADDR
16232: GO 16373
16234: LD_INT 19
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16248
16240: LD_INT 23
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16273
16248: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16249: LD_ADDR_VAR 0 3
16253: PUSH
16254: LD_INT 83
16256: PPUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 321
16266: PUSH
16267: LD_INT 2
16269: EQUAL
16270: ST_TO_ADDR
16271: GO 16373
16273: LD_INT 17
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16306
16281: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: LD_INT 39
16289: PPUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 321
16299: PUSH
16300: LD_INT 2
16302: EQUAL
16303: ST_TO_ADDR
16304: GO 16373
16306: LD_INT 18
16308: DOUBLE
16309: EQUAL
16310: IFTRUE 16314
16312: GO 16339
16314: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16315: LD_ADDR_VAR 0 3
16319: PUSH
16320: LD_INT 40
16322: PPUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 321
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: ST_TO_ADDR
16337: GO 16373
16339: LD_INT 27
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16347
16345: GO 16372
16347: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_INT 35
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 321
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: ST_TO_ADDR
16370: GO 16373
16372: POP
// end ;
16373: LD_VAR 0 3
16377: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// result := false ;
16391: LD_ADDR_VAR 0 6
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// if btype = b_depot then
16399: LD_VAR 0 2
16403: PUSH
16404: LD_INT 0
16406: EQUAL
16407: IFFALSE 16419
// begin result := true ;
16409: LD_ADDR_VAR 0 6
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// exit ;
16417: GO 17245
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16419: LD_VAR 0 1
16423: NOT
16424: PUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 266
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: IN
16445: NOT
16446: OR
16447: PUSH
16448: LD_VAR 0 2
16452: NOT
16453: OR
16454: PUSH
16455: LD_VAR 0 5
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 4
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: IN
16486: NOT
16487: OR
16488: PUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_VAR 0 4
16498: PPUSH
16499: CALL_OW 488
16503: NOT
16504: OR
16505: IFFALSE 16509
// exit ;
16507: GO 17245
// side := GetSide ( depot ) ;
16509: LD_ADDR_VAR 0 9
16513: PUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 255
16523: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16524: LD_VAR 0 9
16528: PPUSH
16529: LD_VAR 0 2
16533: PPUSH
16534: CALL 16002 0 2
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 17245
// pom := GetBase ( depot ) ;
16543: LD_ADDR_VAR 0 10
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 274
16557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16558: LD_ADDR_VAR 0 11
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 248
16577: PPUSH
16578: CALL_OW 450
16582: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16583: LD_VAR 0 10
16587: PPUSH
16588: LD_INT 1
16590: PPUSH
16591: CALL_OW 275
16595: PUSH
16596: LD_VAR 0 11
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: GREATEREQUAL
16605: PUSH
16606: LD_VAR 0 10
16610: PPUSH
16611: LD_INT 2
16613: PPUSH
16614: CALL_OW 275
16618: PUSH
16619: LD_VAR 0 11
16623: PUSH
16624: LD_INT 2
16626: ARRAY
16627: GREATEREQUAL
16628: AND
16629: PUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: LD_INT 3
16637: PPUSH
16638: CALL_OW 275
16642: PUSH
16643: LD_VAR 0 11
16647: PUSH
16648: LD_INT 3
16650: ARRAY
16651: GREATEREQUAL
16652: AND
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 17245
// if GetBType ( depot ) = b_depot then
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 266
16667: PUSH
16668: LD_INT 0
16670: EQUAL
16671: IFFALSE 16683
// dist := 28 else
16673: LD_ADDR_VAR 0 14
16677: PUSH
16678: LD_INT 28
16680: ST_TO_ADDR
16681: GO 16691
// dist := 36 ;
16683: LD_ADDR_VAR 0 14
16687: PUSH
16688: LD_INT 36
16690: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16691: LD_VAR 0 1
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_VAR 0 4
16705: PPUSH
16706: CALL_OW 297
16710: PUSH
16711: LD_VAR 0 14
16715: GREATER
16716: IFFALSE 16720
// exit ;
16718: GO 17245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16720: LD_ADDR_VAR 0 12
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: LD_VAR 0 5
16744: PPUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 248
16754: PPUSH
16755: LD_INT 0
16757: PPUSH
16758: CALL 17250 0 6
16762: ST_TO_ADDR
// if not hexes then
16763: LD_VAR 0 12
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 17245
// hex := GetHexInfo ( x , y ) ;
16772: LD_ADDR_VAR 0 15
16776: PUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: CALL_OW 546
16791: ST_TO_ADDR
// if hex [ 1 ] then
16792: LD_VAR 0 15
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: IFFALSE 16804
// exit ;
16802: GO 17245
// height := hex [ 2 ] ;
16804: LD_ADDR_VAR 0 13
16808: PUSH
16809: LD_VAR 0 15
16813: PUSH
16814: LD_INT 2
16816: ARRAY
16817: ST_TO_ADDR
// for i = 1 to hexes do
16818: LD_ADDR_VAR 0 7
16822: PUSH
16823: DOUBLE
16824: LD_INT 1
16826: DEC
16827: ST_TO_ADDR
16828: LD_VAR 0 12
16832: PUSH
16833: FOR_TO
16834: IFFALSE 17164
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16836: LD_VAR 0 12
16840: PUSH
16841: LD_VAR 0 7
16845: ARRAY
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PPUSH
16851: LD_VAR 0 12
16855: PUSH
16856: LD_VAR 0 7
16860: ARRAY
16861: PUSH
16862: LD_INT 2
16864: ARRAY
16865: PPUSH
16866: CALL_OW 488
16870: NOT
16871: PUSH
16872: LD_VAR 0 12
16876: PUSH
16877: LD_VAR 0 7
16881: ARRAY
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: PPUSH
16887: LD_VAR 0 12
16891: PUSH
16892: LD_VAR 0 7
16896: ARRAY
16897: PUSH
16898: LD_INT 2
16900: ARRAY
16901: PPUSH
16902: CALL_OW 428
16906: PUSH
16907: LD_INT 0
16909: GREATER
16910: OR
16911: PUSH
16912: LD_VAR 0 12
16916: PUSH
16917: LD_VAR 0 7
16921: ARRAY
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: LD_VAR 0 12
16931: PUSH
16932: LD_VAR 0 7
16936: ARRAY
16937: PUSH
16938: LD_INT 2
16940: ARRAY
16941: PPUSH
16942: CALL_OW 351
16946: OR
16947: IFFALSE 16953
// exit ;
16949: POP
16950: POP
16951: GO 17245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16953: LD_ADDR_VAR 0 8
16957: PUSH
16958: LD_VAR 0 12
16962: PUSH
16963: LD_VAR 0 7
16967: ARRAY
16968: PUSH
16969: LD_INT 1
16971: ARRAY
16972: PPUSH
16973: LD_VAR 0 12
16977: PUSH
16978: LD_VAR 0 7
16982: ARRAY
16983: PUSH
16984: LD_INT 2
16986: ARRAY
16987: PPUSH
16988: CALL_OW 546
16992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16993: LD_VAR 0 8
16997: PUSH
16998: LD_INT 1
17000: ARRAY
17001: PUSH
17002: LD_VAR 0 8
17006: PUSH
17007: LD_INT 2
17009: ARRAY
17010: PUSH
17011: LD_VAR 0 13
17015: PUSH
17016: LD_INT 2
17018: PLUS
17019: GREATER
17020: OR
17021: PUSH
17022: LD_VAR 0 8
17026: PUSH
17027: LD_INT 2
17029: ARRAY
17030: PUSH
17031: LD_VAR 0 13
17035: PUSH
17036: LD_INT 2
17038: MINUS
17039: LESS
17040: OR
17041: PUSH
17042: LD_VAR 0 8
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: LD_INT 8
17056: PUSH
17057: LD_INT 9
17059: PUSH
17060: LD_INT 10
17062: PUSH
17063: LD_INT 11
17065: PUSH
17066: LD_INT 12
17068: PUSH
17069: LD_INT 13
17071: PUSH
17072: LD_INT 16
17074: PUSH
17075: LD_INT 17
17077: PUSH
17078: LD_INT 18
17080: PUSH
17081: LD_INT 19
17083: PUSH
17084: LD_INT 20
17086: PUSH
17087: LD_INT 21
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: IN
17105: NOT
17106: OR
17107: PUSH
17108: LD_VAR 0 8
17112: PUSH
17113: LD_INT 5
17115: ARRAY
17116: NOT
17117: OR
17118: PUSH
17119: LD_VAR 0 8
17123: PUSH
17124: LD_INT 6
17126: ARRAY
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: LD_INT 7
17136: PUSH
17137: LD_INT 9
17139: PUSH
17140: LD_INT 10
17142: PUSH
17143: LD_INT 11
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: IN
17154: NOT
17155: OR
17156: IFFALSE 17162
// exit ;
17158: POP
17159: POP
17160: GO 17245
// end ;
17162: GO 16833
17164: POP
17165: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17166: LD_VAR 0 9
17170: PPUSH
17171: LD_VAR 0 3
17175: PPUSH
17176: LD_VAR 0 4
17180: PPUSH
17181: LD_INT 20
17183: PPUSH
17184: CALL 9168 0 4
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: IFFALSE 17196
// exit ;
17194: GO 17245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17196: LD_VAR 0 2
17200: PUSH
17201: LD_INT 29
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: IN
17211: PUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_VAR 0 4
17221: PPUSH
17222: LD_VAR 0 9
17226: PPUSH
17227: CALL_OW 440
17231: NOT
17232: AND
17233: IFFALSE 17237
// exit ;
17235: GO 17245
// result := true ;
17237: LD_ADDR_VAR 0 6
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// end ;
17245: LD_VAR 0 6
17249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17250: LD_INT 0
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
// result = [ ] ;
17310: LD_ADDR_VAR 0 7
17314: PUSH
17315: EMPTY
17316: ST_TO_ADDR
// temp_list = [ ] ;
17317: LD_ADDR_VAR 0 9
17321: PUSH
17322: EMPTY
17323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17324: LD_VAR 0 4
17328: PUSH
17329: LD_INT 0
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: LD_INT 4
17343: PUSH
17344: LD_INT 5
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: IN
17355: NOT
17356: PUSH
17357: LD_VAR 0 1
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: IN
17372: PUSH
17373: LD_VAR 0 5
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: IN
17392: NOT
17393: AND
17394: OR
17395: IFFALSE 17399
// exit ;
17397: GO 35790
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 6
17406: PUSH
17407: LD_INT 7
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: LD_INT 13
17415: PUSH
17416: LD_INT 12
17418: PUSH
17419: LD_INT 15
17421: PUSH
17422: LD_INT 11
17424: PUSH
17425: LD_INT 14
17427: PUSH
17428: LD_INT 10
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: IN
17442: IFFALSE 17452
// btype = b_lab ;
17444: LD_ADDR_VAR 0 1
17448: PUSH
17449: LD_INT 6
17451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17452: LD_VAR 0 6
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: IN
17471: NOT
17472: PUSH
17473: LD_VAR 0 1
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: LD_INT 6
17492: PUSH
17493: LD_INT 36
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: LD_INT 5
17501: PUSH
17502: LD_INT 31
17504: PUSH
17505: LD_INT 32
17507: PUSH
17508: LD_INT 33
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: IN
17524: NOT
17525: PUSH
17526: LD_VAR 0 6
17530: PUSH
17531: LD_INT 1
17533: EQUAL
17534: AND
17535: OR
17536: PUSH
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 3
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: IN
17552: NOT
17553: PUSH
17554: LD_VAR 0 6
17558: PUSH
17559: LD_INT 2
17561: EQUAL
17562: AND
17563: OR
17564: IFFALSE 17574
// mode = 0 ;
17566: LD_ADDR_VAR 0 6
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
// case mode of 0 :
17574: LD_VAR 0 6
17578: PUSH
17579: LD_INT 0
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 29040
17587: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17588: LD_ADDR_VAR 0 11
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 1
17608: NEG
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: NEG
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: LD_INT 2
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 1
17695: NEG
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: NEG
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17781: LD_ADDR_VAR 0 12
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: LD_INT 1
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: NEG
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: NEG
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 3
17938: NEG
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 3
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17977: LD_ADDR_VAR 0 13
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: LD_INT 2
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: LD_INT 3
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 3
18136: NEG
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: NEG
18149: PUSH
18150: LD_INT 3
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18176: LD_ADDR_VAR 0 14
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 2
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 3
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 3
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18372: LD_ADDR_VAR 0 15
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: NEG
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18565: LD_ADDR_VAR 0 16
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 3
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 3
18722: PUSH
18723: LD_INT 3
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18758: LD_ADDR_VAR 0 17
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18988: LD_ADDR_VAR 0 18
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 2
19187: NEG
19188: PUSH
19189: LD_INT 2
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19218: LD_ADDR_VAR 0 19
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 0
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: LD_INT 2
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19448: LD_ADDR_VAR 0 20
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: LD_INT 2
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 0
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19678: LD_ADDR_VAR 0 21
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19908: LD_ADDR_VAR 0 22
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 2
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: NEG
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: NEG
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20138: LD_ADDR_VAR 0 23
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: LD_INT 2
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 2
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 3
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 3
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20418: LD_ADDR_VAR 0 24
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: LD_INT 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: LD_INT 2
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 2
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 3
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 3
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20694: LD_ADDR_VAR 0 25
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: LD_INT 2
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 3
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 3
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20968: LD_ADDR_VAR 0 26
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 2
21144: NEG
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: NEG
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21244: LD_ADDR_VAR 0 27
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 0
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: NEG
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: LD_INT 2
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 3
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 3
21489: NEG
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21524: LD_ADDR_VAR 0 28
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: LD_INT 2
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 2
21700: NEG
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: LD_INT 2
21727: NEG
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: LD_INT 3
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 3
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 3
21759: NEG
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 3
21771: NEG
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21806: LD_ADDR_VAR 0 29
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: NEG
21997: PUSH
21998: LD_INT 3
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 3
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 3
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 3
22050: NEG
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22085: LD_ADDR_VAR 0 30
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: NEG
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 3
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22363: LD_ADDR_VAR 0 31
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 3
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 3
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 3
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 3
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22641: LD_ADDR_VAR 0 32
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 2
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: NEG
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 3
22884: NEG
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22919: LD_ADDR_VAR 0 33
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 2
23097: NEG
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 3
23163: NEG
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23198: LD_ADDR_VAR 0 34
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 2
23354: NEG
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 3
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 3
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23478: LD_ADDR_VAR 0 35
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 2
23569: NEG
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23590: LD_ADDR_VAR 0 36
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 2
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23702: LD_ADDR_VAR 0 37
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23814: LD_ADDR_VAR 0 38
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 0
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23926: LD_ADDR_VAR 0 39
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24038: LD_ADDR_VAR 0 40
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24150: LD_ADDR_VAR 0 41
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: NEG
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: NEG
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 3
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 3
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 3
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 3
24424: NEG
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 3
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 3
24447: NEG
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: LD_INT 3
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24500: LD_ADDR_VAR 0 42
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 2
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 3
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: LD_INT 3
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: LD_INT 3
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 2
24728: NEG
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 3
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 3
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 3
24809: NEG
24810: PUSH
24811: LD_INT 3
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24850: LD_ADDR_VAR 0 43
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 3
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 3
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 3
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 3
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 3
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25198: LD_ADDR_VAR 0 44
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 3
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 3
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 3
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 3
25441: PUSH
25442: LD_INT 3
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 3
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: LD_INT 3
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25548: LD_ADDR_VAR 0 45
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: LD_INT 3
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 3
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 3
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 3
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: LD_INT 3
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 3
25857: NEG
25858: PUSH
25859: LD_INT 3
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25898: LD_ADDR_VAR 0 46
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 3
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 3
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: NEG
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 3
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26246: LD_ADDR_VAR 0 47
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26397: LD_ADDR_VAR 0 48
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26544: LD_ADDR_VAR 0 49
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26688: LD_ADDR_VAR 0 50
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26832: LD_ADDR_VAR 0 51
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26979: LD_ADDR_VAR 0 52
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27130: LD_ADDR_VAR 0 53
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27360: LD_ADDR_VAR 0 54
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27590: LD_ADDR_VAR 0 55
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27820: LD_ADDR_VAR 0 56
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28050: LD_ADDR_VAR 0 57
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28280: LD_ADDR_VAR 0 58
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: NEG
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28510: LD_ADDR_VAR 0 59
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28598: LD_ADDR_VAR 0 60
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28686: LD_ADDR_VAR 0 61
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28774: LD_ADDR_VAR 0 62
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28862: LD_ADDR_VAR 0 63
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28950: LD_ADDR_VAR 0 64
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// end ; 1 :
29038: GO 34935
29040: LD_INT 1
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 31671
29048: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29049: LD_ADDR_VAR 0 11
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 3
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29093: LD_ADDR_VAR 0 12
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 3
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29134: LD_ADDR_VAR 0 13
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29174: LD_ADDR_VAR 0 14
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 3
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29215: LD_ADDR_VAR 0 15
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29259: LD_ADDR_VAR 0 16
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: LD_INT 3
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 3
29290: NEG
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29305: LD_ADDR_VAR 0 17
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 3
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 3
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29349: LD_ADDR_VAR 0 18
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29390: LD_ADDR_VAR 0 19
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: LD_INT 2
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29430: LD_ADDR_VAR 0 20
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29471: LD_ADDR_VAR 0 21
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29515: LD_ADDR_VAR 0 22
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 2
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29561: LD_ADDR_VAR 0 23
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 4
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 3
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29605: LD_ADDR_VAR 0 24
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29646: LD_ADDR_VAR 0 25
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29686: LD_ADDR_VAR 0 26
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: LD_INT 4
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29727: LD_ADDR_VAR 0 27
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29771: LD_ADDR_VAR 0 28
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 3
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 4
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29817: LD_ADDR_VAR 0 29
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 3
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 3
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 4
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 4
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 5
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 5
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 4
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 6
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 6
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 5
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29972: LD_ADDR_VAR 0 30
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 5
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 5
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 5
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 6
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 6
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30115: LD_ADDR_VAR 0 31
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 4
30152: PUSH
30153: LD_INT 3
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 4
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 5
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 6
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 6
30222: PUSH
30223: LD_INT 6
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 5
30232: PUSH
30233: LD_INT 6
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30254: LD_ADDR_VAR 0 32
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 5
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 4
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 6
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 6
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 5
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30397: LD_ADDR_VAR 0 33
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 4
30449: NEG
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 4
30472: NEG
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: NEG
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 5
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 5
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 6
30517: NEG
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 6
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30552: LD_ADDR_VAR 0 34
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 4
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 4
30607: NEG
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 4
30619: NEG
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: LD_INT 5
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 5
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 5
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: LD_INT 6
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 6
30679: NEG
30680: PUSH
30681: LD_INT 5
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 6
30691: NEG
30692: PUSH
30693: LD_INT 6
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30715: LD_ADDR_VAR 0 41
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 2
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30759: LD_ADDR_VAR 0 42
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30800: LD_ADDR_VAR 0 43
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30840: LD_ADDR_VAR 0 44
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30881: LD_ADDR_VAR 0 45
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30925: LD_ADDR_VAR 0 46
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30971: LD_ADDR_VAR 0 47
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31004: LD_ADDR_VAR 0 48
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31035: LD_ADDR_VAR 0 49
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31064: LD_ADDR_VAR 0 50
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31093: LD_ADDR_VAR 0 51
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31124: LD_ADDR_VAR 0 52
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: NEG
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31157: LD_ADDR_VAR 0 53
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 3
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31201: LD_ADDR_VAR 0 54
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31242: LD_ADDR_VAR 0 55
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31282: LD_ADDR_VAR 0 56
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31323: LD_ADDR_VAR 0 57
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31367: LD_ADDR_VAR 0 58
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31413: LD_ADDR_VAR 0 59
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31457: LD_ADDR_VAR 0 60
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31498: LD_ADDR_VAR 0 61
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31538: LD_ADDR_VAR 0 62
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31579: LD_ADDR_VAR 0 63
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31623: LD_ADDR_VAR 0 64
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: ST_TO_ADDR
// end ; 2 :
31669: GO 34935
31671: LD_INT 2
31673: DOUBLE
31674: EQUAL
31675: IFTRUE 31679
31677: GO 34934
31679: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31680: LD_ADDR_VAR 0 29
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 5
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: LD_INT 4
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 4
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 4
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 5
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 5
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 3
31963: NEG
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 4
32019: NEG
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 4
32030: NEG
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: NEG
32066: PUSH
32067: LD_INT 4
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: LD_INT 4
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 4
32113: NEG
32114: PUSH
32115: LD_INT 3
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 5
32125: NEG
32126: PUSH
32127: LD_INT 4
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 5
32137: NEG
32138: PUSH
32139: LD_INT 5
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: LD_INT 5
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: NEG
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32218: LD_ADDR_VAR 0 30
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 4
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 5
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: NEG
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 3
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 4
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 5
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 5
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 5
32487: NEG
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: LD_INT 3
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: LD_INT 4
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 4
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 4
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 5
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 4
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 3
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 3
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: LD_INT 4
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 5
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 5
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32765: LD_ADDR_VAR 0 31
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 5
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: LD_INT 5
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: LD_INT 4
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: LD_INT 5
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: LD_INT 3
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 5
33027: NEG
33028: PUSH
33029: LD_INT 4
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 5
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: LD_INT 5
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 5
33063: NEG
33064: PUSH
33065: LD_INT 3
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 4
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 4
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33315: LD_ADDR_VAR 0 32
33319: PUSH
33320: LD_INT 4
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 5
33378: NEG
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: LD_INT 4
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 5
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 3
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 4
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: LD_INT 5
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 3
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 4
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: LD_INT 4
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 4
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: LD_INT 5
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33862: LD_ADDR_VAR 0 33
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: LD_INT 5
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 5
33929: NEG
33930: PUSH
33931: LD_INT 4
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: LD_INT 5
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: LD_INT 5
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: LD_INT 3
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 4
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 3
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: LD_INT 4
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 4
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 4
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 4
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 5
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34400: LD_ADDR_VAR 0 34
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 4
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 5
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 4
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 5
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: LD_INT 5
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 4
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 4
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 4
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 4
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 5
34622: PUSH
34623: LD_INT 4
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 5
34672: PUSH
34673: LD_INT 3
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: LD_INT 5
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 3
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 4
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 4
34785: NEG
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 4
34796: NEG
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 4
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 5
34841: NEG
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 5
34852: NEG
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 5
34864: NEG
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 3
34876: NEG
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: ST_TO_ADDR
// end ; end ;
34932: GO 34935
34934: POP
// case btype of b_depot , b_warehouse :
34935: LD_VAR 0 1
34939: PUSH
34940: LD_INT 0
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34954
34946: LD_INT 1
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 35155
34954: POP
// case nation of nation_american :
34955: LD_VAR 0 5
34959: PUSH
34960: LD_INT 1
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 35024
34968: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34969: LD_ADDR_VAR 0 9
34973: PUSH
34974: LD_VAR 0 11
34978: PUSH
34979: LD_VAR 0 12
34983: PUSH
34984: LD_VAR 0 13
34988: PUSH
34989: LD_VAR 0 14
34993: PUSH
34994: LD_VAR 0 15
34998: PUSH
34999: LD_VAR 0 16
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: PUSH
35012: LD_VAR 0 4
35016: PUSH
35017: LD_INT 1
35019: PLUS
35020: ARRAY
35021: ST_TO_ADDR
35022: GO 35153
35024: LD_INT 2
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35088
35032: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_VAR 0 17
35042: PUSH
35043: LD_VAR 0 18
35047: PUSH
35048: LD_VAR 0 19
35052: PUSH
35053: LD_VAR 0 20
35057: PUSH
35058: LD_VAR 0 21
35062: PUSH
35063: LD_VAR 0 22
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: PUSH
35076: LD_VAR 0 4
35080: PUSH
35081: LD_INT 1
35083: PLUS
35084: ARRAY
35085: ST_TO_ADDR
35086: GO 35153
35088: LD_INT 3
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35152
35096: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_VAR 0 23
35106: PUSH
35107: LD_VAR 0 24
35111: PUSH
35112: LD_VAR 0 25
35116: PUSH
35117: LD_VAR 0 26
35121: PUSH
35122: LD_VAR 0 27
35126: PUSH
35127: LD_VAR 0 28
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_VAR 0 4
35144: PUSH
35145: LD_INT 1
35147: PLUS
35148: ARRAY
35149: ST_TO_ADDR
35150: GO 35153
35152: POP
35153: GO 35708
35155: LD_INT 2
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35169
35161: LD_INT 3
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35225
35169: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_VAR 0 29
35179: PUSH
35180: LD_VAR 0 30
35184: PUSH
35185: LD_VAR 0 31
35189: PUSH
35190: LD_VAR 0 32
35194: PUSH
35195: LD_VAR 0 33
35199: PUSH
35200: LD_VAR 0 34
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: LD_VAR 0 4
35217: PUSH
35218: LD_INT 1
35220: PLUS
35221: ARRAY
35222: ST_TO_ADDR
35223: GO 35708
35225: LD_INT 16
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35287
35231: LD_INT 17
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35287
35237: LD_INT 18
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35287
35243: LD_INT 19
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35287
35249: LD_INT 22
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35287
35255: LD_INT 20
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35287
35261: LD_INT 21
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35287
35267: LD_INT 23
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35287
35273: LD_INT 24
35275: DOUBLE
35276: EQUAL
35277: IFTRUE 35287
35279: LD_INT 25
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35287
35285: GO 35343
35287: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35288: LD_ADDR_VAR 0 9
35292: PUSH
35293: LD_VAR 0 35
35297: PUSH
35298: LD_VAR 0 36
35302: PUSH
35303: LD_VAR 0 37
35307: PUSH
35308: LD_VAR 0 38
35312: PUSH
35313: LD_VAR 0 39
35317: PUSH
35318: LD_VAR 0 40
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: PUSH
35331: LD_VAR 0 4
35335: PUSH
35336: LD_INT 1
35338: PLUS
35339: ARRAY
35340: ST_TO_ADDR
35341: GO 35708
35343: LD_INT 6
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35399
35349: LD_INT 7
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35399
35355: LD_INT 8
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35399
35361: LD_INT 13
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35399
35367: LD_INT 12
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35399
35373: LD_INT 15
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35399
35379: LD_INT 11
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35399
35385: LD_INT 14
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35399
35391: LD_INT 10
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35455
35399: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35400: LD_ADDR_VAR 0 9
35404: PUSH
35405: LD_VAR 0 41
35409: PUSH
35410: LD_VAR 0 42
35414: PUSH
35415: LD_VAR 0 43
35419: PUSH
35420: LD_VAR 0 44
35424: PUSH
35425: LD_VAR 0 45
35429: PUSH
35430: LD_VAR 0 46
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_VAR 0 4
35447: PUSH
35448: LD_INT 1
35450: PLUS
35451: ARRAY
35452: ST_TO_ADDR
35453: GO 35708
35455: LD_INT 36
35457: DOUBLE
35458: EQUAL
35459: IFTRUE 35463
35461: GO 35519
35463: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35464: LD_ADDR_VAR 0 9
35468: PUSH
35469: LD_VAR 0 47
35473: PUSH
35474: LD_VAR 0 48
35478: PUSH
35479: LD_VAR 0 49
35483: PUSH
35484: LD_VAR 0 50
35488: PUSH
35489: LD_VAR 0 51
35493: PUSH
35494: LD_VAR 0 52
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: PUSH
35507: LD_VAR 0 4
35511: PUSH
35512: LD_INT 1
35514: PLUS
35515: ARRAY
35516: ST_TO_ADDR
35517: GO 35708
35519: LD_INT 4
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35545
35525: LD_INT 5
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35545
35531: LD_INT 34
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35545
35537: LD_INT 37
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35601
35545: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35546: LD_ADDR_VAR 0 9
35550: PUSH
35551: LD_VAR 0 53
35555: PUSH
35556: LD_VAR 0 54
35560: PUSH
35561: LD_VAR 0 55
35565: PUSH
35566: LD_VAR 0 56
35570: PUSH
35571: LD_VAR 0 57
35575: PUSH
35576: LD_VAR 0 58
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: LD_VAR 0 4
35593: PUSH
35594: LD_INT 1
35596: PLUS
35597: ARRAY
35598: ST_TO_ADDR
35599: GO 35708
35601: LD_INT 31
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35651
35607: LD_INT 32
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35651
35613: LD_INT 33
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35651
35619: LD_INT 27
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35651
35625: LD_INT 26
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35651
35631: LD_INT 28
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35651
35637: LD_INT 29
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35651
35643: LD_INT 30
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35707
35651: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_VAR 0 59
35661: PUSH
35662: LD_VAR 0 60
35666: PUSH
35667: LD_VAR 0 61
35671: PUSH
35672: LD_VAR 0 62
35676: PUSH
35677: LD_VAR 0 63
35681: PUSH
35682: LD_VAR 0 64
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_VAR 0 4
35699: PUSH
35700: LD_INT 1
35702: PLUS
35703: ARRAY
35704: ST_TO_ADDR
35705: GO 35708
35707: POP
// temp_list2 = [ ] ;
35708: LD_ADDR_VAR 0 10
35712: PUSH
35713: EMPTY
35714: ST_TO_ADDR
// for i in temp_list do
35715: LD_ADDR_VAR 0 8
35719: PUSH
35720: LD_VAR 0 9
35724: PUSH
35725: FOR_IN
35726: IFFALSE 35778
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35728: LD_ADDR_VAR 0 10
35732: PUSH
35733: LD_VAR 0 10
35737: PUSH
35738: LD_VAR 0 8
35742: PUSH
35743: LD_INT 1
35745: ARRAY
35746: PUSH
35747: LD_VAR 0 2
35751: PLUS
35752: PUSH
35753: LD_VAR 0 8
35757: PUSH
35758: LD_INT 2
35760: ARRAY
35761: PUSH
35762: LD_VAR 0 3
35766: PLUS
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: ADD
35775: ST_TO_ADDR
35776: GO 35725
35778: POP
35779: POP
// result = temp_list2 ;
35780: LD_ADDR_VAR 0 7
35784: PUSH
35785: LD_VAR 0 10
35789: ST_TO_ADDR
// end ;
35790: LD_VAR 0 7
35794: RET
// export function EnemyInRange ( unit , dist ) ; begin
35795: LD_INT 0
35797: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 255
35812: PPUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 250
35822: PPUSH
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL_OW 251
35832: PPUSH
35833: LD_VAR 0 2
35837: PPUSH
35838: CALL 9168 0 4
35842: PUSH
35843: LD_INT 4
35845: ARRAY
35846: ST_TO_ADDR
// end ;
35847: LD_VAR 0 3
35851: RET
// export function PlayerSeeMe ( unit ) ; begin
35852: LD_INT 0
35854: PPUSH
// result := See ( your_side , unit ) ;
35855: LD_ADDR_VAR 0 2
35859: PUSH
35860: LD_OWVAR 2
35864: PPUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 292
35874: ST_TO_ADDR
// end ;
35875: LD_VAR 0 2
35879: RET
// export function ReverseDir ( unit ) ; begin
35880: LD_INT 0
35882: PPUSH
// if not unit then
35883: LD_VAR 0 1
35887: NOT
35888: IFFALSE 35892
// exit ;
35890: GO 35915
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35892: LD_ADDR_VAR 0 2
35896: PUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 254
35906: PUSH
35907: LD_INT 3
35909: PLUS
35910: PUSH
35911: LD_INT 6
35913: MOD
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 2
35919: RET
// export function ReverseArray ( array ) ; var i ; begin
35920: LD_INT 0
35922: PPUSH
35923: PPUSH
// if not array then
35924: LD_VAR 0 1
35928: NOT
35929: IFFALSE 35933
// exit ;
35931: GO 35988
// result := [ ] ;
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: EMPTY
35939: ST_TO_ADDR
// for i := array downto 1 do
35940: LD_ADDR_VAR 0 3
35944: PUSH
35945: DOUBLE
35946: LD_VAR 0 1
35950: INC
35951: ST_TO_ADDR
35952: LD_INT 1
35954: PUSH
35955: FOR_DOWNTO
35956: IFFALSE 35986
// result := Join ( result , array [ i ] ) ;
35958: LD_ADDR_VAR 0 2
35962: PUSH
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 1
35972: PUSH
35973: LD_VAR 0 3
35977: ARRAY
35978: PPUSH
35979: CALL 40653 0 2
35983: ST_TO_ADDR
35984: GO 35955
35986: POP
35987: POP
// end ;
35988: LD_VAR 0 2
35992: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35993: LD_INT 0
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
// if not unit or not hexes then
36001: LD_VAR 0 1
36005: NOT
36006: PUSH
36007: LD_VAR 0 2
36011: NOT
36012: OR
36013: IFFALSE 36017
// exit ;
36015: GO 36140
// dist := 9999 ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_INT 9999
36024: ST_TO_ADDR
// for i = 1 to hexes do
36025: LD_ADDR_VAR 0 4
36029: PUSH
36030: DOUBLE
36031: LD_INT 1
36033: DEC
36034: ST_TO_ADDR
36035: LD_VAR 0 2
36039: PUSH
36040: FOR_TO
36041: IFFALSE 36128
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36043: LD_ADDR_VAR 0 6
36047: PUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_VAR 0 2
36057: PUSH
36058: LD_VAR 0 4
36062: ARRAY
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 4
36077: ARRAY
36078: PUSH
36079: LD_INT 2
36081: ARRAY
36082: PPUSH
36083: CALL_OW 297
36087: ST_TO_ADDR
// if tdist < dist then
36088: LD_VAR 0 6
36092: PUSH
36093: LD_VAR 0 5
36097: LESS
36098: IFFALSE 36126
// begin hex := hexes [ i ] ;
36100: LD_ADDR_VAR 0 8
36104: PUSH
36105: LD_VAR 0 2
36109: PUSH
36110: LD_VAR 0 4
36114: ARRAY
36115: ST_TO_ADDR
// dist := tdist ;
36116: LD_ADDR_VAR 0 5
36120: PUSH
36121: LD_VAR 0 6
36125: ST_TO_ADDR
// end ; end ;
36126: GO 36040
36128: POP
36129: POP
// result := hex ;
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_VAR 0 8
36139: ST_TO_ADDR
// end ;
36140: LD_VAR 0 3
36144: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36149: LD_VAR 0 1
36153: NOT
36154: PUSH
36155: LD_VAR 0 1
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 23
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PPUSH
36184: CALL_OW 69
36188: IN
36189: NOT
36190: OR
36191: IFFALSE 36195
// exit ;
36193: GO 36242
// for i = 1 to 3 do
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: DOUBLE
36201: LD_INT 1
36203: DEC
36204: ST_TO_ADDR
36205: LD_INT 3
36207: PUSH
36208: FOR_TO
36209: IFFALSE 36240
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 250
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 251
36230: PPUSH
36231: LD_INT 1
36233: PPUSH
36234: CALL_OW 453
36238: GO 36208
36240: POP
36241: POP
// end ;
36242: LD_VAR 0 2
36246: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36247: LD_INT 0
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
// if not unit or not enemy_unit then
36255: LD_VAR 0 1
36259: NOT
36260: PUSH
36261: LD_VAR 0 2
36265: NOT
36266: OR
36267: IFFALSE 36271
// exit ;
36269: GO 36738
// if GetLives ( i ) < 250 then
36271: LD_VAR 0 4
36275: PPUSH
36276: CALL_OW 256
36280: PUSH
36281: LD_INT 250
36283: LESS
36284: IFFALSE 36297
// begin ComAutodestruct ( i ) ;
36286: LD_VAR 0 4
36290: PPUSH
36291: CALL 36145 0 1
// exit ;
36295: GO 36738
// end ; x := GetX ( enemy_unit ) ;
36297: LD_ADDR_VAR 0 7
36301: PUSH
36302: LD_VAR 0 2
36306: PPUSH
36307: CALL_OW 250
36311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36312: LD_ADDR_VAR 0 8
36316: PUSH
36317: LD_VAR 0 2
36321: PPUSH
36322: CALL_OW 251
36326: ST_TO_ADDR
// if not x or not y then
36327: LD_VAR 0 7
36331: NOT
36332: PUSH
36333: LD_VAR 0 8
36337: NOT
36338: OR
36339: IFFALSE 36343
// exit ;
36341: GO 36738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36343: LD_ADDR_VAR 0 6
36347: PUSH
36348: LD_VAR 0 7
36352: PPUSH
36353: LD_INT 0
36355: PPUSH
36356: LD_INT 4
36358: PPUSH
36359: CALL_OW 272
36363: PUSH
36364: LD_VAR 0 8
36368: PPUSH
36369: LD_INT 0
36371: PPUSH
36372: LD_INT 4
36374: PPUSH
36375: CALL_OW 273
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_VAR 0 7
36388: PPUSH
36389: LD_INT 1
36391: PPUSH
36392: LD_INT 4
36394: PPUSH
36395: CALL_OW 272
36399: PUSH
36400: LD_VAR 0 8
36404: PPUSH
36405: LD_INT 1
36407: PPUSH
36408: LD_INT 4
36410: PPUSH
36411: CALL_OW 273
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_VAR 0 7
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: LD_INT 4
36430: PPUSH
36431: CALL_OW 272
36435: PUSH
36436: LD_VAR 0 8
36440: PPUSH
36441: LD_INT 2
36443: PPUSH
36444: LD_INT 4
36446: PPUSH
36447: CALL_OW 273
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_VAR 0 7
36460: PPUSH
36461: LD_INT 3
36463: PPUSH
36464: LD_INT 4
36466: PPUSH
36467: CALL_OW 272
36471: PUSH
36472: LD_VAR 0 8
36476: PPUSH
36477: LD_INT 3
36479: PPUSH
36480: LD_INT 4
36482: PPUSH
36483: CALL_OW 273
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: LD_INT 4
36502: PPUSH
36503: CALL_OW 272
36507: PUSH
36508: LD_VAR 0 8
36512: PPUSH
36513: LD_INT 4
36515: PPUSH
36516: LD_INT 4
36518: PPUSH
36519: CALL_OW 273
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_VAR 0 7
36532: PPUSH
36533: LD_INT 5
36535: PPUSH
36536: LD_INT 4
36538: PPUSH
36539: CALL_OW 272
36543: PUSH
36544: LD_VAR 0 8
36548: PPUSH
36549: LD_INT 5
36551: PPUSH
36552: LD_INT 4
36554: PPUSH
36555: CALL_OW 273
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
// for i = tmp downto 1 do
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: DOUBLE
36578: LD_VAR 0 6
36582: INC
36583: ST_TO_ADDR
36584: LD_INT 1
36586: PUSH
36587: FOR_DOWNTO
36588: IFFALSE 36689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36590: LD_VAR 0 6
36594: PUSH
36595: LD_VAR 0 4
36599: ARRAY
36600: PUSH
36601: LD_INT 1
36603: ARRAY
36604: PPUSH
36605: LD_VAR 0 6
36609: PUSH
36610: LD_VAR 0 4
36614: ARRAY
36615: PUSH
36616: LD_INT 2
36618: ARRAY
36619: PPUSH
36620: CALL_OW 488
36624: NOT
36625: PUSH
36626: LD_VAR 0 6
36630: PUSH
36631: LD_VAR 0 4
36635: ARRAY
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PPUSH
36641: LD_VAR 0 6
36645: PUSH
36646: LD_VAR 0 4
36650: ARRAY
36651: PUSH
36652: LD_INT 2
36654: ARRAY
36655: PPUSH
36656: CALL_OW 428
36660: PUSH
36661: LD_INT 0
36663: NONEQUAL
36664: OR
36665: IFFALSE 36687
// tmp := Delete ( tmp , i ) ;
36667: LD_ADDR_VAR 0 6
36671: PUSH
36672: LD_VAR 0 6
36676: PPUSH
36677: LD_VAR 0 4
36681: PPUSH
36682: CALL_OW 3
36686: ST_TO_ADDR
36687: GO 36587
36689: POP
36690: POP
// j := GetClosestHex ( unit , tmp ) ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: LD_VAR 0 6
36705: PPUSH
36706: CALL 35993 0 2
36710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_VAR 0 5
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 5
36729: PUSH
36730: LD_INT 2
36732: ARRAY
36733: PPUSH
36734: CALL_OW 111
// end ;
36738: LD_VAR 0 3
36742: RET
// export function PrepareApemanSoldier ( ) ; begin
36743: LD_INT 0
36745: PPUSH
// uc_nation := 0 ;
36746: LD_ADDR_OWVAR 21
36750: PUSH
36751: LD_INT 0
36753: ST_TO_ADDR
// hc_sex := sex_male ;
36754: LD_ADDR_OWVAR 27
36758: PUSH
36759: LD_INT 1
36761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36762: LD_ADDR_OWVAR 28
36766: PUSH
36767: LD_INT 15
36769: ST_TO_ADDR
// hc_gallery :=  ;
36770: LD_ADDR_OWVAR 33
36774: PUSH
36775: LD_STRING 
36777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36778: LD_ADDR_OWVAR 31
36782: PUSH
36783: LD_INT 0
36785: PPUSH
36786: LD_INT 3
36788: PPUSH
36789: CALL_OW 12
36793: PUSH
36794: LD_INT 0
36796: PPUSH
36797: LD_INT 3
36799: PPUSH
36800: CALL_OW 12
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// end ;
36817: LD_VAR 0 1
36821: RET
// export function PrepareApemanEngineer ( ) ; begin
36822: LD_INT 0
36824: PPUSH
// uc_nation := 0 ;
36825: LD_ADDR_OWVAR 21
36829: PUSH
36830: LD_INT 0
36832: ST_TO_ADDR
// hc_sex := sex_male ;
36833: LD_ADDR_OWVAR 27
36837: PUSH
36838: LD_INT 1
36840: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36841: LD_ADDR_OWVAR 28
36845: PUSH
36846: LD_INT 16
36848: ST_TO_ADDR
// hc_gallery :=  ;
36849: LD_ADDR_OWVAR 33
36853: PUSH
36854: LD_STRING 
36856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36857: LD_ADDR_OWVAR 31
36861: PUSH
36862: LD_INT 0
36864: PPUSH
36865: LD_INT 3
36867: PPUSH
36868: CALL_OW 12
36872: PUSH
36873: LD_INT 0
36875: PPUSH
36876: LD_INT 3
36878: PPUSH
36879: CALL_OW 12
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// end ;
36896: LD_VAR 0 1
36900: RET
// export function PrepareApeman ( agressivity ) ; begin
36901: LD_INT 0
36903: PPUSH
// uc_side := 0 ;
36904: LD_ADDR_OWVAR 20
36908: PUSH
36909: LD_INT 0
36911: ST_TO_ADDR
// uc_nation := 0 ;
36912: LD_ADDR_OWVAR 21
36916: PUSH
36917: LD_INT 0
36919: ST_TO_ADDR
// hc_sex := sex_male ;
36920: LD_ADDR_OWVAR 27
36924: PUSH
36925: LD_INT 1
36927: ST_TO_ADDR
// hc_class := class_apeman ;
36928: LD_ADDR_OWVAR 28
36932: PUSH
36933: LD_INT 12
36935: ST_TO_ADDR
// hc_gallery :=  ;
36936: LD_ADDR_OWVAR 33
36940: PUSH
36941: LD_STRING 
36943: ST_TO_ADDR
// if agressivity = 0 then
36944: LD_VAR 0 1
36948: PUSH
36949: LD_INT 0
36951: EQUAL
36952: IFFALSE 36964
// hc_agressivity := 0 else
36954: LD_ADDR_OWVAR 35
36958: PUSH
36959: LD_INT 0
36961: ST_TO_ADDR
36962: GO 36985
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36964: LD_ADDR_OWVAR 35
36968: PUSH
36969: LD_VAR 0 1
36973: NEG
36974: PPUSH
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL_OW 12
36984: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36985: LD_ADDR_OWVAR 31
36989: PUSH
36990: LD_INT 0
36992: PPUSH
36993: LD_INT 3
36995: PPUSH
36996: CALL_OW 12
37000: PUSH
37001: LD_INT 0
37003: PPUSH
37004: LD_INT 3
37006: PPUSH
37007: CALL_OW 12
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
// end ;
37024: LD_VAR 0 2
37028: RET
// export function PrepareTiger ( agressivity ) ; begin
37029: LD_INT 0
37031: PPUSH
// uc_side := 0 ;
37032: LD_ADDR_OWVAR 20
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// uc_nation := 0 ;
37040: LD_ADDR_OWVAR 21
37044: PUSH
37045: LD_INT 0
37047: ST_TO_ADDR
// hc_class := class_tiger ;
37048: LD_ADDR_OWVAR 28
37052: PUSH
37053: LD_INT 14
37055: ST_TO_ADDR
// hc_gallery :=  ;
37056: LD_ADDR_OWVAR 33
37060: PUSH
37061: LD_STRING 
37063: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37064: LD_ADDR_OWVAR 35
37068: PUSH
37069: LD_VAR 0 1
37073: NEG
37074: PPUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 12
37084: ST_TO_ADDR
// end ;
37085: LD_VAR 0 2
37089: RET
// export function PrepareEnchidna ( ) ; begin
37090: LD_INT 0
37092: PPUSH
// uc_side := 0 ;
37093: LD_ADDR_OWVAR 20
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// uc_nation := 0 ;
37101: LD_ADDR_OWVAR 21
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// hc_class := class_baggie ;
37109: LD_ADDR_OWVAR 28
37113: PUSH
37114: LD_INT 13
37116: ST_TO_ADDR
// hc_gallery :=  ;
37117: LD_ADDR_OWVAR 33
37121: PUSH
37122: LD_STRING 
37124: ST_TO_ADDR
// end ;
37125: LD_VAR 0 1
37129: RET
// export function PrepareFrog ( ) ; begin
37130: LD_INT 0
37132: PPUSH
// uc_side := 0 ;
37133: LD_ADDR_OWVAR 20
37137: PUSH
37138: LD_INT 0
37140: ST_TO_ADDR
// uc_nation := 0 ;
37141: LD_ADDR_OWVAR 21
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// hc_class := class_frog ;
37149: LD_ADDR_OWVAR 28
37153: PUSH
37154: LD_INT 19
37156: ST_TO_ADDR
// hc_gallery :=  ;
37157: LD_ADDR_OWVAR 33
37161: PUSH
37162: LD_STRING 
37164: ST_TO_ADDR
// end ;
37165: LD_VAR 0 1
37169: RET
// export function PrepareFish ( ) ; begin
37170: LD_INT 0
37172: PPUSH
// uc_side := 0 ;
37173: LD_ADDR_OWVAR 20
37177: PUSH
37178: LD_INT 0
37180: ST_TO_ADDR
// uc_nation := 0 ;
37181: LD_ADDR_OWVAR 21
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// hc_class := class_fish ;
37189: LD_ADDR_OWVAR 28
37193: PUSH
37194: LD_INT 20
37196: ST_TO_ADDR
// hc_gallery :=  ;
37197: LD_ADDR_OWVAR 33
37201: PUSH
37202: LD_STRING 
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 1
37209: RET
// export function PrepareBird ( ) ; begin
37210: LD_INT 0
37212: PPUSH
// uc_side := 0 ;
37213: LD_ADDR_OWVAR 20
37217: PUSH
37218: LD_INT 0
37220: ST_TO_ADDR
// uc_nation := 0 ;
37221: LD_ADDR_OWVAR 21
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// hc_class := class_phororhacos ;
37229: LD_ADDR_OWVAR 28
37233: PUSH
37234: LD_INT 18
37236: ST_TO_ADDR
// hc_gallery :=  ;
37237: LD_ADDR_OWVAR 33
37241: PUSH
37242: LD_STRING 
37244: ST_TO_ADDR
// end ;
37245: LD_VAR 0 1
37249: RET
// export function PrepareHorse ( ) ; begin
37250: LD_INT 0
37252: PPUSH
// uc_side := 0 ;
37253: LD_ADDR_OWVAR 20
37257: PUSH
37258: LD_INT 0
37260: ST_TO_ADDR
// uc_nation := 0 ;
37261: LD_ADDR_OWVAR 21
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// hc_class := class_horse ;
37269: LD_ADDR_OWVAR 28
37273: PUSH
37274: LD_INT 21
37276: ST_TO_ADDR
// hc_gallery :=  ;
37277: LD_ADDR_OWVAR 33
37281: PUSH
37282: LD_STRING 
37284: ST_TO_ADDR
// end ;
37285: LD_VAR 0 1
37289: RET
// export function PrepareMastodont ( ) ; begin
37290: LD_INT 0
37292: PPUSH
// uc_side := 0 ;
37293: LD_ADDR_OWVAR 20
37297: PUSH
37298: LD_INT 0
37300: ST_TO_ADDR
// uc_nation := 0 ;
37301: LD_ADDR_OWVAR 21
37305: PUSH
37306: LD_INT 0
37308: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37309: LD_ADDR_OWVAR 37
37313: PUSH
37314: LD_INT 31
37316: ST_TO_ADDR
// vc_control := control_rider ;
37317: LD_ADDR_OWVAR 38
37321: PUSH
37322: LD_INT 4
37324: ST_TO_ADDR
// end ;
37325: LD_VAR 0 1
37329: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37330: LD_INT 0
37332: PPUSH
37333: PPUSH
37334: PPUSH
// uc_side = 0 ;
37335: LD_ADDR_OWVAR 20
37339: PUSH
37340: LD_INT 0
37342: ST_TO_ADDR
// uc_nation = 0 ;
37343: LD_ADDR_OWVAR 21
37347: PUSH
37348: LD_INT 0
37350: ST_TO_ADDR
// InitHc_All ( ) ;
37351: CALL_OW 584
// InitVc ;
37355: CALL_OW 20
// if mastodonts then
37359: LD_VAR 0 6
37363: IFFALSE 37430
// for i = 1 to mastodonts do
37365: LD_ADDR_VAR 0 11
37369: PUSH
37370: DOUBLE
37371: LD_INT 1
37373: DEC
37374: ST_TO_ADDR
37375: LD_VAR 0 6
37379: PUSH
37380: FOR_TO
37381: IFFALSE 37428
// begin vc_chassis := 31 ;
37383: LD_ADDR_OWVAR 37
37387: PUSH
37388: LD_INT 31
37390: ST_TO_ADDR
// vc_control := control_rider ;
37391: LD_ADDR_OWVAR 38
37395: PUSH
37396: LD_INT 4
37398: ST_TO_ADDR
// animal := CreateVehicle ;
37399: LD_ADDR_VAR 0 12
37403: PUSH
37404: CALL_OW 45
37408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37409: LD_VAR 0 12
37413: PPUSH
37414: LD_VAR 0 8
37418: PPUSH
37419: LD_INT 0
37421: PPUSH
37422: CALL 39558 0 3
// end ;
37426: GO 37380
37428: POP
37429: POP
// if horses then
37430: LD_VAR 0 5
37434: IFFALSE 37501
// for i = 1 to horses do
37436: LD_ADDR_VAR 0 11
37440: PUSH
37441: DOUBLE
37442: LD_INT 1
37444: DEC
37445: ST_TO_ADDR
37446: LD_VAR 0 5
37450: PUSH
37451: FOR_TO
37452: IFFALSE 37499
// begin hc_class := 21 ;
37454: LD_ADDR_OWVAR 28
37458: PUSH
37459: LD_INT 21
37461: ST_TO_ADDR
// hc_gallery :=  ;
37462: LD_ADDR_OWVAR 33
37466: PUSH
37467: LD_STRING 
37469: ST_TO_ADDR
// animal := CreateHuman ;
37470: LD_ADDR_VAR 0 12
37474: PUSH
37475: CALL_OW 44
37479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37480: LD_VAR 0 12
37484: PPUSH
37485: LD_VAR 0 8
37489: PPUSH
37490: LD_INT 0
37492: PPUSH
37493: CALL 39558 0 3
// end ;
37497: GO 37451
37499: POP
37500: POP
// if birds then
37501: LD_VAR 0 1
37505: IFFALSE 37572
// for i = 1 to birds do
37507: LD_ADDR_VAR 0 11
37511: PUSH
37512: DOUBLE
37513: LD_INT 1
37515: DEC
37516: ST_TO_ADDR
37517: LD_VAR 0 1
37521: PUSH
37522: FOR_TO
37523: IFFALSE 37570
// begin hc_class := 18 ;
37525: LD_ADDR_OWVAR 28
37529: PUSH
37530: LD_INT 18
37532: ST_TO_ADDR
// hc_gallery =  ;
37533: LD_ADDR_OWVAR 33
37537: PUSH
37538: LD_STRING 
37540: ST_TO_ADDR
// animal := CreateHuman ;
37541: LD_ADDR_VAR 0 12
37545: PUSH
37546: CALL_OW 44
37550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37551: LD_VAR 0 12
37555: PPUSH
37556: LD_VAR 0 8
37560: PPUSH
37561: LD_INT 0
37563: PPUSH
37564: CALL 39558 0 3
// end ;
37568: GO 37522
37570: POP
37571: POP
// if tigers then
37572: LD_VAR 0 2
37576: IFFALSE 37660
// for i = 1 to tigers do
37578: LD_ADDR_VAR 0 11
37582: PUSH
37583: DOUBLE
37584: LD_INT 1
37586: DEC
37587: ST_TO_ADDR
37588: LD_VAR 0 2
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37658
// begin hc_class = class_tiger ;
37596: LD_ADDR_OWVAR 28
37600: PUSH
37601: LD_INT 14
37603: ST_TO_ADDR
// hc_gallery =  ;
37604: LD_ADDR_OWVAR 33
37608: PUSH
37609: LD_STRING 
37611: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37612: LD_ADDR_OWVAR 35
37616: PUSH
37617: LD_INT 7
37619: NEG
37620: PPUSH
37621: LD_INT 7
37623: PPUSH
37624: CALL_OW 12
37628: ST_TO_ADDR
// animal := CreateHuman ;
37629: LD_ADDR_VAR 0 12
37633: PUSH
37634: CALL_OW 44
37638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37639: LD_VAR 0 12
37643: PPUSH
37644: LD_VAR 0 8
37648: PPUSH
37649: LD_INT 0
37651: PPUSH
37652: CALL 39558 0 3
// end ;
37656: GO 37593
37658: POP
37659: POP
// if apemans then
37660: LD_VAR 0 3
37664: IFFALSE 37787
// for i = 1 to apemans do
37666: LD_ADDR_VAR 0 11
37670: PUSH
37671: DOUBLE
37672: LD_INT 1
37674: DEC
37675: ST_TO_ADDR
37676: LD_VAR 0 3
37680: PUSH
37681: FOR_TO
37682: IFFALSE 37785
// begin hc_class = class_apeman ;
37684: LD_ADDR_OWVAR 28
37688: PUSH
37689: LD_INT 12
37691: ST_TO_ADDR
// hc_gallery =  ;
37692: LD_ADDR_OWVAR 33
37696: PUSH
37697: LD_STRING 
37699: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37700: LD_ADDR_OWVAR 35
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PPUSH
37709: LD_INT 2
37711: PPUSH
37712: CALL_OW 12
37716: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37717: LD_ADDR_OWVAR 31
37721: PUSH
37722: LD_INT 1
37724: PPUSH
37725: LD_INT 3
37727: PPUSH
37728: CALL_OW 12
37732: PUSH
37733: LD_INT 1
37735: PPUSH
37736: LD_INT 3
37738: PPUSH
37739: CALL_OW 12
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// animal := CreateHuman ;
37756: LD_ADDR_VAR 0 12
37760: PUSH
37761: CALL_OW 44
37765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37766: LD_VAR 0 12
37770: PPUSH
37771: LD_VAR 0 8
37775: PPUSH
37776: LD_INT 0
37778: PPUSH
37779: CALL 39558 0 3
// end ;
37783: GO 37681
37785: POP
37786: POP
// if enchidnas then
37787: LD_VAR 0 4
37791: IFFALSE 37858
// for i = 1 to enchidnas do
37793: LD_ADDR_VAR 0 11
37797: PUSH
37798: DOUBLE
37799: LD_INT 1
37801: DEC
37802: ST_TO_ADDR
37803: LD_VAR 0 4
37807: PUSH
37808: FOR_TO
37809: IFFALSE 37856
// begin hc_class = 13 ;
37811: LD_ADDR_OWVAR 28
37815: PUSH
37816: LD_INT 13
37818: ST_TO_ADDR
// hc_gallery =  ;
37819: LD_ADDR_OWVAR 33
37823: PUSH
37824: LD_STRING 
37826: ST_TO_ADDR
// animal := CreateHuman ;
37827: LD_ADDR_VAR 0 12
37831: PUSH
37832: CALL_OW 44
37836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37837: LD_VAR 0 12
37841: PPUSH
37842: LD_VAR 0 8
37846: PPUSH
37847: LD_INT 0
37849: PPUSH
37850: CALL 39558 0 3
// end ;
37854: GO 37808
37856: POP
37857: POP
// if fishes then
37858: LD_VAR 0 7
37862: IFFALSE 37929
// for i = 1 to fishes do
37864: LD_ADDR_VAR 0 11
37868: PUSH
37869: DOUBLE
37870: LD_INT 1
37872: DEC
37873: ST_TO_ADDR
37874: LD_VAR 0 7
37878: PUSH
37879: FOR_TO
37880: IFFALSE 37927
// begin hc_class = 20 ;
37882: LD_ADDR_OWVAR 28
37886: PUSH
37887: LD_INT 20
37889: ST_TO_ADDR
// hc_gallery =  ;
37890: LD_ADDR_OWVAR 33
37894: PUSH
37895: LD_STRING 
37897: ST_TO_ADDR
// animal := CreateHuman ;
37898: LD_ADDR_VAR 0 12
37902: PUSH
37903: CALL_OW 44
37907: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37908: LD_VAR 0 12
37912: PPUSH
37913: LD_VAR 0 9
37917: PPUSH
37918: LD_INT 0
37920: PPUSH
37921: CALL 39558 0 3
// end ;
37925: GO 37879
37927: POP
37928: POP
// end ;
37929: LD_VAR 0 10
37933: RET
// export function WantHeal ( sci , unit ) ; begin
37934: LD_INT 0
37936: PPUSH
// if GetTaskList ( sci ) > 0 then
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 437
37946: PUSH
37947: LD_INT 0
37949: GREATER
37950: IFFALSE 38020
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 437
37961: PUSH
37962: LD_INT 1
37964: ARRAY
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: PUSH
37970: LD_STRING l
37972: EQUAL
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 437
37983: PUSH
37984: LD_INT 1
37986: ARRAY
37987: PUSH
37988: LD_INT 4
37990: ARRAY
37991: PUSH
37992: LD_VAR 0 2
37996: EQUAL
37997: AND
37998: IFFALSE 38010
// result := true else
38000: LD_ADDR_VAR 0 3
38004: PUSH
38005: LD_INT 1
38007: ST_TO_ADDR
38008: GO 38018
// result := false ;
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: LD_INT 0
38017: ST_TO_ADDR
// end else
38018: GO 38028
// result := false ;
38020: LD_ADDR_VAR 0 3
38024: PUSH
38025: LD_INT 0
38027: ST_TO_ADDR
// end ;
38028: LD_VAR 0 3
38032: RET
// export function HealTarget ( sci ) ; begin
38033: LD_INT 0
38035: PPUSH
// if not sci then
38036: LD_VAR 0 1
38040: NOT
38041: IFFALSE 38045
// exit ;
38043: GO 38110
// result := 0 ;
38045: LD_ADDR_VAR 0 2
38049: PUSH
38050: LD_INT 0
38052: ST_TO_ADDR
// if GetTaskList ( sci ) then
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 437
38062: IFFALSE 38110
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38064: LD_VAR 0 1
38068: PPUSH
38069: CALL_OW 437
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PUSH
38082: LD_STRING l
38084: EQUAL
38085: IFFALSE 38110
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38087: LD_ADDR_VAR 0 2
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 437
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: PUSH
38106: LD_INT 4
38108: ARRAY
38109: ST_TO_ADDR
// end ;
38110: LD_VAR 0 2
38114: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
// if not base_units then
38121: LD_VAR 0 1
38125: NOT
38126: IFFALSE 38130
// exit ;
38128: GO 38217
// result := false ;
38130: LD_ADDR_VAR 0 2
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38138: LD_ADDR_VAR 0 5
38142: PUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: LD_INT 21
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PPUSH
38158: CALL_OW 72
38162: ST_TO_ADDR
// if not tmp then
38163: LD_VAR 0 5
38167: NOT
38168: IFFALSE 38172
// exit ;
38170: GO 38217
// for i in tmp do
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_VAR 0 5
38181: PUSH
38182: FOR_IN
38183: IFFALSE 38215
// begin result := EnemyInRange ( i , 22 ) ;
38185: LD_ADDR_VAR 0 2
38189: PUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: LD_INT 22
38197: PPUSH
38198: CALL 35795 0 2
38202: ST_TO_ADDR
// if result then
38203: LD_VAR 0 2
38207: IFFALSE 38213
// exit ;
38209: POP
38210: POP
38211: GO 38217
// end ;
38213: GO 38182
38215: POP
38216: POP
// end ;
38217: LD_VAR 0 2
38221: RET
// export function FilterByTag ( units , tag ) ; begin
38222: LD_INT 0
38224: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: LD_INT 120
38237: PUSH
38238: LD_VAR 0 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PPUSH
38247: CALL_OW 72
38251: ST_TO_ADDR
// end ;
38252: LD_VAR 0 3
38256: RET
// export function IsDriver ( un ) ; begin
38257: LD_INT 0
38259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38260: LD_ADDR_VAR 0 2
38264: PUSH
38265: LD_VAR 0 1
38269: PUSH
38270: LD_INT 55
38272: PUSH
38273: EMPTY
38274: LIST
38275: PPUSH
38276: CALL_OW 69
38280: IN
38281: ST_TO_ADDR
// end ;
38282: LD_VAR 0 2
38286: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38287: LD_INT 0
38289: PPUSH
38290: PPUSH
// list := [ ] ;
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: EMPTY
38297: ST_TO_ADDR
// case d of 0 :
38298: LD_VAR 0 3
38302: PUSH
38303: LD_INT 0
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38444
38311: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_VAR 0 1
38321: PUSH
38322: LD_INT 4
38324: MINUS
38325: PUSH
38326: LD_VAR 0 2
38330: PUSH
38331: LD_INT 4
38333: MINUS
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: PUSH
38343: LD_VAR 0 1
38347: PUSH
38348: LD_INT 3
38350: MINUS
38351: PUSH
38352: LD_VAR 0 2
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: PUSH
38365: LD_VAR 0 1
38369: PUSH
38370: LD_INT 4
38372: PLUS
38373: PUSH
38374: LD_VAR 0 2
38378: PUSH
38379: LD_INT 4
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: PUSH
38387: LD_VAR 0 1
38391: PUSH
38392: LD_INT 3
38394: PLUS
38395: PUSH
38396: LD_VAR 0 2
38400: PUSH
38401: LD_INT 3
38403: PLUS
38404: PUSH
38405: LD_INT 5
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: PUSH
38413: LD_VAR 0 1
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_INT 4
38425: PLUS
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: ST_TO_ADDR
// end ; 1 :
38442: GO 39142
38444: LD_INT 1
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38452
38450: GO 38585
38452: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 1
38462: PUSH
38463: LD_VAR 0 2
38467: PUSH
38468: LD_INT 4
38470: MINUS
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: PUSH
38480: LD_VAR 0 1
38484: PUSH
38485: LD_INT 3
38487: MINUS
38488: PUSH
38489: LD_VAR 0 2
38493: PUSH
38494: LD_INT 3
38496: MINUS
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 4
38513: MINUS
38514: PUSH
38515: LD_VAR 0 2
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: PUSH
38528: LD_VAR 0 1
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_INT 3
38540: PLUS
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: PUSH
38550: LD_VAR 0 1
38554: PUSH
38555: LD_INT 4
38557: PLUS
38558: PUSH
38559: LD_VAR 0 2
38563: PUSH
38564: LD_INT 4
38566: PLUS
38567: PUSH
38568: LD_INT 5
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// end ; 2 :
38583: GO 39142
38585: LD_INT 2
38587: DOUBLE
38588: EQUAL
38589: IFTRUE 38593
38591: GO 38722
38593: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38594: LD_ADDR_VAR 0 5
38598: PUSH
38599: LD_VAR 0 1
38603: PUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 3
38611: MINUS
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: PUSH
38621: LD_VAR 0 1
38625: PUSH
38626: LD_INT 4
38628: PLUS
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_INT 4
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: PUSH
38643: LD_VAR 0 1
38647: PUSH
38648: LD_VAR 0 2
38652: PUSH
38653: LD_INT 4
38655: PLUS
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_INT 3
38672: MINUS
38673: PUSH
38674: LD_VAR 0 2
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 4
38694: MINUS
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 4
38703: MINUS
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// end ; 3 :
38720: GO 39142
38722: LD_INT 3
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38863
38730: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38731: LD_ADDR_VAR 0 5
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: LD_INT 3
38743: PLUS
38744: PUSH
38745: LD_VAR 0 2
38749: PUSH
38750: LD_INT 4
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: PUSH
38758: LD_VAR 0 1
38762: PUSH
38763: LD_INT 4
38765: PLUS
38766: PUSH
38767: LD_VAR 0 2
38771: PUSH
38772: LD_INT 4
38774: PLUS
38775: PUSH
38776: LD_INT 5
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: PUSH
38784: LD_VAR 0 1
38788: PUSH
38789: LD_INT 4
38791: MINUS
38792: PUSH
38793: LD_VAR 0 2
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_VAR 0 2
38815: PUSH
38816: LD_INT 4
38818: MINUS
38819: PUSH
38820: LD_INT 3
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: LD_VAR 0 1
38832: PUSH
38833: LD_INT 3
38835: MINUS
38836: PUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_INT 3
38844: MINUS
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: ST_TO_ADDR
// end ; 4 :
38861: GO 39142
38863: LD_INT 4
38865: DOUBLE
38866: EQUAL
38867: IFTRUE 38871
38869: GO 39004
38871: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: LD_VAR 0 1
38881: PUSH
38882: LD_VAR 0 2
38886: PUSH
38887: LD_INT 4
38889: PLUS
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: PUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_INT 3
38906: PLUS
38907: PUSH
38908: LD_VAR 0 2
38912: PUSH
38913: LD_INT 3
38915: PLUS
38916: PUSH
38917: LD_INT 5
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: PUSH
38925: LD_VAR 0 1
38929: PUSH
38930: LD_INT 4
38932: PLUS
38933: PUSH
38934: LD_VAR 0 2
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_VAR 0 1
38951: PUSH
38952: LD_VAR 0 2
38956: PUSH
38957: LD_INT 3
38959: MINUS
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: PUSH
38969: LD_VAR 0 1
38973: PUSH
38974: LD_INT 4
38976: MINUS
38977: PUSH
38978: LD_VAR 0 2
38982: PUSH
38983: LD_INT 4
38985: MINUS
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// end ; 5 :
39002: GO 39142
39004: LD_INT 5
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39012
39010: GO 39141
39012: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39013: LD_ADDR_VAR 0 5
39017: PUSH
39018: LD_VAR 0 1
39022: PUSH
39023: LD_INT 4
39025: MINUS
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: PUSH
39040: LD_VAR 0 1
39044: PUSH
39045: LD_VAR 0 2
39049: PUSH
39050: LD_INT 4
39052: MINUS
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: PUSH
39062: LD_VAR 0 1
39066: PUSH
39067: LD_INT 4
39069: PLUS
39070: PUSH
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 4
39078: PLUS
39079: PUSH
39080: LD_INT 5
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: PUSH
39088: LD_VAR 0 1
39092: PUSH
39093: LD_INT 3
39095: PLUS
39096: PUSH
39097: LD_VAR 0 2
39101: PUSH
39102: LD_INT 4
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PUSH
39110: LD_VAR 0 1
39114: PUSH
39115: LD_VAR 0 2
39119: PUSH
39120: LD_INT 3
39122: PLUS
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// end ; end ;
39139: GO 39142
39141: POP
// result := list ;
39142: LD_ADDR_VAR 0 4
39146: PUSH
39147: LD_VAR 0 5
39151: ST_TO_ADDR
// end ;
39152: LD_VAR 0 4
39156: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
39161: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39162: LD_VAR 0 1
39166: NOT
39167: PUSH
39168: LD_VAR 0 2
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: LD_INT 4
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: IN
39191: NOT
39192: OR
39193: IFFALSE 39197
// exit ;
39195: GO 39280
// tmp := [ ] ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: EMPTY
39203: ST_TO_ADDR
// for i in units do
39204: LD_ADDR_VAR 0 4
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: FOR_IN
39215: IFFALSE 39249
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 5
39226: PPUSH
39227: LD_VAR 0 4
39231: PPUSH
39232: LD_VAR 0 2
39236: PPUSH
39237: CALL_OW 259
39241: PPUSH
39242: CALL 40653 0 2
39246: ST_TO_ADDR
39247: GO 39214
39249: POP
39250: POP
// if not tmp then
39251: LD_VAR 0 5
39255: NOT
39256: IFFALSE 39260
// exit ;
39258: GO 39280
// result := SortListByListDesc ( units , tmp ) ;
39260: LD_ADDR_VAR 0 3
39264: PUSH
39265: LD_VAR 0 1
39269: PPUSH
39270: LD_VAR 0 5
39274: PPUSH
39275: CALL_OW 77
39279: ST_TO_ADDR
// end ;
39280: LD_VAR 0 3
39284: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39285: LD_INT 0
39287: PPUSH
39288: PPUSH
39289: PPUSH
// result := false ;
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_INT 0
39297: ST_TO_ADDR
// if not building then
39298: LD_VAR 0 2
39302: NOT
39303: IFFALSE 39307
// exit ;
39305: GO 39445
// x := GetX ( building ) ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: CALL_OW 250
39321: ST_TO_ADDR
// y := GetY ( building ) ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 2
39331: PPUSH
39332: CALL_OW 251
39336: ST_TO_ADDR
// if not x or not y then
39337: LD_VAR 0 4
39341: NOT
39342: PUSH
39343: LD_VAR 0 5
39347: NOT
39348: OR
39349: IFFALSE 39353
// exit ;
39351: GO 39445
// if GetTaskList ( unit ) then
39353: LD_VAR 0 1
39357: PPUSH
39358: CALL_OW 437
39362: IFFALSE 39445
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39364: LD_STRING e
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 437
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: EQUAL
39385: PUSH
39386: LD_VAR 0 4
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 437
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PUSH
39405: LD_INT 2
39407: ARRAY
39408: EQUAL
39409: AND
39410: PUSH
39411: LD_VAR 0 5
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 437
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PUSH
39430: LD_INT 3
39432: ARRAY
39433: EQUAL
39434: AND
39435: IFFALSE 39445
// result := true end ;
39437: LD_ADDR_VAR 0 3
39441: PUSH
39442: LD_INT 1
39444: ST_TO_ADDR
// end ;
39445: LD_VAR 0 3
39449: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39450: LD_INT 0
39452: PPUSH
// result := false ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_INT 0
39460: ST_TO_ADDR
// if GetTaskList ( unit ) then
39461: LD_VAR 0 1
39465: PPUSH
39466: CALL_OW 437
39470: IFFALSE 39553
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39472: LD_STRING M
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 437
39484: PUSH
39485: LD_INT 1
39487: ARRAY
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: EQUAL
39493: PUSH
39494: LD_VAR 0 2
39498: PUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 437
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: EQUAL
39517: AND
39518: PUSH
39519: LD_VAR 0 3
39523: PUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 437
39533: PUSH
39534: LD_INT 1
39536: ARRAY
39537: PUSH
39538: LD_INT 3
39540: ARRAY
39541: EQUAL
39542: AND
39543: IFFALSE 39553
// result := true ;
39545: LD_ADDR_VAR 0 4
39549: PUSH
39550: LD_INT 1
39552: ST_TO_ADDR
// end ; end ;
39553: LD_VAR 0 4
39557: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39558: LD_INT 0
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
// if not unit or not area then
39564: LD_VAR 0 1
39568: NOT
39569: PUSH
39570: LD_VAR 0 2
39574: NOT
39575: OR
39576: IFFALSE 39580
// exit ;
39578: GO 39756
// tmp := AreaToList ( area , i ) ;
39580: LD_ADDR_VAR 0 6
39584: PUSH
39585: LD_VAR 0 2
39589: PPUSH
39590: LD_VAR 0 5
39594: PPUSH
39595: CALL_OW 517
39599: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39600: LD_ADDR_VAR 0 5
39604: PUSH
39605: DOUBLE
39606: LD_INT 1
39608: DEC
39609: ST_TO_ADDR
39610: LD_VAR 0 6
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PUSH
39619: FOR_TO
39620: IFFALSE 39754
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39622: LD_ADDR_VAR 0 7
39626: PUSH
39627: LD_VAR 0 6
39631: PUSH
39632: LD_INT 1
39634: ARRAY
39635: PUSH
39636: LD_VAR 0 5
39640: ARRAY
39641: PUSH
39642: LD_VAR 0 6
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: PUSH
39651: LD_VAR 0 5
39655: ARRAY
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39661: LD_INT 92
39663: PUSH
39664: LD_VAR 0 7
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PUSH
39673: LD_VAR 0 7
39677: PUSH
39678: LD_INT 2
39680: ARRAY
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: PPUSH
39691: CALL_OW 69
39695: PUSH
39696: LD_INT 0
39698: EQUAL
39699: IFFALSE 39752
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39701: LD_VAR 0 1
39705: PPUSH
39706: LD_VAR 0 7
39710: PUSH
39711: LD_INT 1
39713: ARRAY
39714: PPUSH
39715: LD_VAR 0 7
39719: PUSH
39720: LD_INT 2
39722: ARRAY
39723: PPUSH
39724: LD_VAR 0 3
39728: PPUSH
39729: CALL_OW 48
// result := IsPlaced ( unit ) ;
39733: LD_ADDR_VAR 0 4
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 305
39747: ST_TO_ADDR
// exit ;
39748: POP
39749: POP
39750: GO 39756
// end ; end ;
39752: GO 39619
39754: POP
39755: POP
// end ;
39756: LD_VAR 0 4
39760: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39761: LD_INT 0
39763: PPUSH
39764: PPUSH
39765: PPUSH
// if not side or side > 8 then
39766: LD_VAR 0 1
39770: NOT
39771: PUSH
39772: LD_VAR 0 1
39776: PUSH
39777: LD_INT 8
39779: GREATER
39780: OR
39781: IFFALSE 39785
// exit ;
39783: GO 39972
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39785: LD_ADDR_VAR 0 4
39789: PUSH
39790: LD_INT 22
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 21
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PPUSH
39816: CALL_OW 69
39820: ST_TO_ADDR
// if not tmp then
39821: LD_VAR 0 4
39825: NOT
39826: IFFALSE 39830
// exit ;
39828: GO 39972
// enable_addtolog := true ;
39830: LD_ADDR_OWVAR 81
39834: PUSH
39835: LD_INT 1
39837: ST_TO_ADDR
// AddToLog ( [ ) ;
39838: LD_STRING [
39840: PPUSH
39841: CALL_OW 561
// for i in tmp do
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_VAR 0 4
39854: PUSH
39855: FOR_IN
39856: IFFALSE 39963
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39858: LD_STRING [
39860: PUSH
39861: LD_VAR 0 3
39865: PPUSH
39866: CALL_OW 266
39870: STR
39871: PUSH
39872: LD_STRING , 
39874: STR
39875: PUSH
39876: LD_VAR 0 3
39880: PPUSH
39881: CALL_OW 250
39885: STR
39886: PUSH
39887: LD_STRING , 
39889: STR
39890: PUSH
39891: LD_VAR 0 3
39895: PPUSH
39896: CALL_OW 251
39900: STR
39901: PUSH
39902: LD_STRING , 
39904: STR
39905: PUSH
39906: LD_VAR 0 3
39910: PPUSH
39911: CALL_OW 254
39915: STR
39916: PUSH
39917: LD_STRING , 
39919: STR
39920: PUSH
39921: LD_VAR 0 3
39925: PPUSH
39926: LD_INT 1
39928: PPUSH
39929: CALL_OW 268
39933: STR
39934: PUSH
39935: LD_STRING , 
39937: STR
39938: PUSH
39939: LD_VAR 0 3
39943: PPUSH
39944: LD_INT 2
39946: PPUSH
39947: CALL_OW 268
39951: STR
39952: PUSH
39953: LD_STRING ],
39955: STR
39956: PPUSH
39957: CALL_OW 561
// end ;
39961: GO 39855
39963: POP
39964: POP
// AddToLog ( ]; ) ;
39965: LD_STRING ];
39967: PPUSH
39968: CALL_OW 561
// end ;
39972: LD_VAR 0 2
39976: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
// if not area or not rate or not max then
39984: LD_VAR 0 1
39988: NOT
39989: PUSH
39990: LD_VAR 0 2
39994: NOT
39995: OR
39996: PUSH
39997: LD_VAR 0 4
40001: NOT
40002: OR
40003: IFFALSE 40007
// exit ;
40005: GO 40196
// while 1 do
40007: LD_INT 1
40009: IFFALSE 40196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: LD_INT 1
40023: PPUSH
40024: CALL_OW 287
40028: PUSH
40029: LD_INT 10
40031: MUL
40032: ST_TO_ADDR
// r := rate / 10 ;
40033: LD_ADDR_VAR 0 7
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_INT 10
40045: DIVREAL
40046: ST_TO_ADDR
// time := 1 1$00 ;
40047: LD_ADDR_VAR 0 8
40051: PUSH
40052: LD_INT 2100
40054: ST_TO_ADDR
// if amount < min then
40055: LD_VAR 0 9
40059: PUSH
40060: LD_VAR 0 3
40064: LESS
40065: IFFALSE 40083
// r := r * 2 else
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_VAR 0 7
40076: PUSH
40077: LD_INT 2
40079: MUL
40080: ST_TO_ADDR
40081: GO 40109
// if amount > max then
40083: LD_VAR 0 9
40087: PUSH
40088: LD_VAR 0 4
40092: GREATER
40093: IFFALSE 40109
// r := r / 2 ;
40095: LD_ADDR_VAR 0 7
40099: PUSH
40100: LD_VAR 0 7
40104: PUSH
40105: LD_INT 2
40107: DIVREAL
40108: ST_TO_ADDR
// time := time / r ;
40109: LD_ADDR_VAR 0 8
40113: PUSH
40114: LD_VAR 0 8
40118: PUSH
40119: LD_VAR 0 7
40123: DIVREAL
40124: ST_TO_ADDR
// if time < 0 then
40125: LD_VAR 0 8
40129: PUSH
40130: LD_INT 0
40132: LESS
40133: IFFALSE 40150
// time := time * - 1 ;
40135: LD_ADDR_VAR 0 8
40139: PUSH
40140: LD_VAR 0 8
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: MUL
40149: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40150: LD_VAR 0 8
40154: PUSH
40155: LD_INT 35
40157: PPUSH
40158: LD_INT 875
40160: PPUSH
40161: CALL_OW 12
40165: PLUS
40166: PPUSH
40167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40171: LD_INT 1
40173: PPUSH
40174: LD_INT 5
40176: PPUSH
40177: CALL_OW 12
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: LD_INT 1
40189: PPUSH
40190: CALL_OW 55
// end ;
40194: GO 40007
// end ;
40196: LD_VAR 0 5
40200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40201: LD_INT 0
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
// if not turrets or not factories then
40211: LD_VAR 0 1
40215: NOT
40216: PUSH
40217: LD_VAR 0 2
40221: NOT
40222: OR
40223: IFFALSE 40227
// exit ;
40225: GO 40534
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40227: LD_ADDR_VAR 0 10
40231: PUSH
40232: LD_INT 5
40234: PUSH
40235: LD_INT 6
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 4
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 5
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 24
40269: PUSH
40270: LD_INT 25
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 23
40279: PUSH
40280: LD_INT 27
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 42
40293: PUSH
40294: LD_INT 43
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 44
40303: PUSH
40304: LD_INT 46
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 45
40313: PUSH
40314: LD_INT 47
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// result := [ ] ;
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: EMPTY
40337: ST_TO_ADDR
// for i in turrets do
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: LD_VAR 0 1
40347: PUSH
40348: FOR_IN
40349: IFFALSE 40532
// begin nat := GetNation ( i ) ;
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: LD_VAR 0 4
40360: PPUSH
40361: CALL_OW 248
40365: ST_TO_ADDR
// weapon := 0 ;
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_INT 0
40373: ST_TO_ADDR
// if not nat then
40374: LD_VAR 0 7
40378: NOT
40379: IFFALSE 40383
// continue ;
40381: GO 40348
// for j in list [ nat ] do
40383: LD_ADDR_VAR 0 5
40387: PUSH
40388: LD_VAR 0 10
40392: PUSH
40393: LD_VAR 0 7
40397: ARRAY
40398: PUSH
40399: FOR_IN
40400: IFFALSE 40441
// if GetBWeapon ( i ) = j [ 1 ] then
40402: LD_VAR 0 4
40406: PPUSH
40407: CALL_OW 269
40411: PUSH
40412: LD_VAR 0 5
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: EQUAL
40421: IFFALSE 40439
// begin weapon := j [ 2 ] ;
40423: LD_ADDR_VAR 0 8
40427: PUSH
40428: LD_VAR 0 5
40432: PUSH
40433: LD_INT 2
40435: ARRAY
40436: ST_TO_ADDR
// break ;
40437: GO 40441
// end ;
40439: GO 40399
40441: POP
40442: POP
// if not weapon then
40443: LD_VAR 0 8
40447: NOT
40448: IFFALSE 40452
// continue ;
40450: GO 40348
// for k in factories do
40452: LD_ADDR_VAR 0 6
40456: PUSH
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_IN
40463: IFFALSE 40528
// begin weapons := AvailableWeaponList ( k ) ;
40465: LD_ADDR_VAR 0 9
40469: PUSH
40470: LD_VAR 0 6
40474: PPUSH
40475: CALL_OW 478
40479: ST_TO_ADDR
// if not weapons then
40480: LD_VAR 0 9
40484: NOT
40485: IFFALSE 40489
// continue ;
40487: GO 40462
// if weapon in weapons then
40489: LD_VAR 0 8
40493: PUSH
40494: LD_VAR 0 9
40498: IN
40499: IFFALSE 40526
// begin result := [ i , weapon ] ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_VAR 0 4
40510: PUSH
40511: LD_VAR 0 8
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: ST_TO_ADDR
// exit ;
40520: POP
40521: POP
40522: POP
40523: POP
40524: GO 40534
// end ; end ;
40526: GO 40462
40528: POP
40529: POP
// end ;
40530: GO 40348
40532: POP
40533: POP
// end ;
40534: LD_VAR 0 3
40538: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40539: LD_INT 0
40541: PPUSH
// if not side or side > 8 then
40542: LD_VAR 0 3
40546: NOT
40547: PUSH
40548: LD_VAR 0 3
40552: PUSH
40553: LD_INT 8
40555: GREATER
40556: OR
40557: IFFALSE 40561
// exit ;
40559: GO 40620
// if not range then
40561: LD_VAR 0 4
40565: NOT
40566: IFFALSE 40577
// range := - 12 ;
40568: LD_ADDR_VAR 0 4
40572: PUSH
40573: LD_INT 12
40575: NEG
40576: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40577: LD_VAR 0 1
40581: PPUSH
40582: LD_VAR 0 2
40586: PPUSH
40587: LD_VAR 0 3
40591: PPUSH
40592: LD_VAR 0 4
40596: PPUSH
40597: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40601: LD_VAR 0 1
40605: PPUSH
40606: LD_VAR 0 2
40610: PPUSH
40611: LD_VAR 0 3
40615: PPUSH
40616: CALL_OW 331
// end ;
40620: LD_VAR 0 5
40624: RET
// export function Video ( mode ) ; begin
40625: LD_INT 0
40627: PPUSH
// ingame_video = mode ;
40628: LD_ADDR_OWVAR 52
40632: PUSH
40633: LD_VAR 0 1
40637: ST_TO_ADDR
// interface_hidden = mode ;
40638: LD_ADDR_OWVAR 54
40642: PUSH
40643: LD_VAR 0 1
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 2
40652: RET
// export function Join ( array , element ) ; begin
40653: LD_INT 0
40655: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: LD_VAR 0 1
40670: PUSH
40671: LD_INT 1
40673: PLUS
40674: PPUSH
40675: LD_VAR 0 2
40679: PPUSH
40680: CALL_OW 1
40684: ST_TO_ADDR
// end ;
40685: LD_VAR 0 3
40689: RET
// export function JoinUnion ( array , element ) ; begin
40690: LD_INT 0
40692: PPUSH
// result := array union element ;
40693: LD_ADDR_VAR 0 3
40697: PUSH
40698: LD_VAR 0 1
40702: PUSH
40703: LD_VAR 0 2
40707: UNION
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 3
40713: RET
// export function GetBehemoths ( side ) ; begin
40714: LD_INT 0
40716: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40717: LD_ADDR_VAR 0 2
40721: PUSH
40722: LD_INT 22
40724: PUSH
40725: LD_VAR 0 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 31
40736: PUSH
40737: LD_INT 25
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 69
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 2
40757: RET
// export function Shuffle ( array ) ; var i , index ; begin
40758: LD_INT 0
40760: PPUSH
40761: PPUSH
40762: PPUSH
// result := [ ] ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: EMPTY
40769: ST_TO_ADDR
// if not array then
40770: LD_VAR 0 1
40774: NOT
40775: IFFALSE 40779
// exit ;
40777: GO 40878
// Randomize ;
40779: CALL_OW 10
// for i = array downto 1 do
40783: LD_ADDR_VAR 0 3
40787: PUSH
40788: DOUBLE
40789: LD_VAR 0 1
40793: INC
40794: ST_TO_ADDR
40795: LD_INT 1
40797: PUSH
40798: FOR_DOWNTO
40799: IFFALSE 40876
// begin index := rand ( 1 , array ) ;
40801: LD_ADDR_VAR 0 4
40805: PUSH
40806: LD_INT 1
40808: PPUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: CALL_OW 12
40818: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40819: LD_ADDR_VAR 0 2
40823: PUSH
40824: LD_VAR 0 2
40828: PPUSH
40829: LD_VAR 0 2
40833: PUSH
40834: LD_INT 1
40836: PLUS
40837: PPUSH
40838: LD_VAR 0 1
40842: PUSH
40843: LD_VAR 0 4
40847: ARRAY
40848: PPUSH
40849: CALL_OW 2
40853: ST_TO_ADDR
// array := Delete ( array , index ) ;
40854: LD_ADDR_VAR 0 1
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_VAR 0 4
40868: PPUSH
40869: CALL_OW 3
40873: ST_TO_ADDR
// end ;
40874: GO 40798
40876: POP
40877: POP
// end ;
40878: LD_VAR 0 2
40882: RET
// export function GetBaseMaterials ( base ) ; begin
40883: LD_INT 0
40885: PPUSH
// result := [ 0 , 0 , 0 ] ;
40886: LD_ADDR_VAR 0 2
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// if not base then
40905: LD_VAR 0 1
40909: NOT
40910: IFFALSE 40914
// exit ;
40912: GO 40963
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40914: LD_ADDR_VAR 0 2
40918: PUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_INT 1
40926: PPUSH
40927: CALL_OW 275
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: LD_INT 2
40939: PPUSH
40940: CALL_OW 275
40944: PUSH
40945: LD_VAR 0 1
40949: PPUSH
40950: LD_INT 3
40952: PPUSH
40953: CALL_OW 275
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: ST_TO_ADDR
// end ;
40963: LD_VAR 0 2
40967: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40968: LD_INT 0
40970: PPUSH
40971: PPUSH
// result := array ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_VAR 0 1
40981: ST_TO_ADDR
// if size >= result then
40982: LD_VAR 0 2
40986: PUSH
40987: LD_VAR 0 3
40991: GREATEREQUAL
40992: IFFALSE 40996
// exit ;
40994: GO 41046
// if size then
40996: LD_VAR 0 2
41000: IFFALSE 41046
// for i := array downto size do
41002: LD_ADDR_VAR 0 4
41006: PUSH
41007: DOUBLE
41008: LD_VAR 0 1
41012: INC
41013: ST_TO_ADDR
41014: LD_VAR 0 2
41018: PUSH
41019: FOR_DOWNTO
41020: IFFALSE 41044
// result := Delete ( result , result ) ;
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: LD_VAR 0 3
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: CALL_OW 3
41041: ST_TO_ADDR
41042: GO 41019
41044: POP
41045: POP
// end ;
41046: LD_VAR 0 3
41050: RET
// export function ComExit ( unit ) ; var tmp ; begin
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
// if not IsInUnit ( unit ) then
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 310
41064: NOT
41065: IFFALSE 41069
// exit ;
41067: GO 41129
// tmp := IsInUnit ( unit ) ;
41069: LD_ADDR_VAR 0 3
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 310
41083: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41084: LD_VAR 0 3
41088: PPUSH
41089: CALL_OW 247
41093: PUSH
41094: LD_INT 2
41096: EQUAL
41097: IFFALSE 41110
// ComExitVehicle ( unit ) else
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 121
41108: GO 41119
// ComExitBuilding ( unit ) ;
41110: LD_VAR 0 1
41114: PPUSH
41115: CALL_OW 122
// result := tmp ;
41119: LD_ADDR_VAR 0 2
41123: PUSH
41124: LD_VAR 0 3
41128: ST_TO_ADDR
// end ;
41129: LD_VAR 0 2
41133: RET
// export function ComExitAll ( units ) ; var i ; begin
41134: LD_INT 0
41136: PPUSH
41137: PPUSH
// if not units then
41138: LD_VAR 0 1
41142: NOT
41143: IFFALSE 41147
// exit ;
41145: GO 41173
// for i in units do
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_VAR 0 1
41156: PUSH
41157: FOR_IN
41158: IFFALSE 41171
// ComExit ( i ) ;
41160: LD_VAR 0 3
41164: PPUSH
41165: CALL 41051 0 1
41169: GO 41157
41171: POP
41172: POP
// end ;
41173: LD_VAR 0 2
41177: RET
// export function ResetHc ; begin
41178: LD_INT 0
41180: PPUSH
// InitHc ;
41181: CALL_OW 19
// hc_importance := 0 ;
41185: LD_ADDR_OWVAR 32
41189: PUSH
41190: LD_INT 0
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 1
41197: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
41202: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41203: LD_ADDR_VAR 0 6
41207: PUSH
41208: LD_VAR 0 1
41212: PUSH
41213: LD_VAR 0 3
41217: PLUS
41218: PUSH
41219: LD_INT 2
41221: DIV
41222: ST_TO_ADDR
// if _x < 0 then
41223: LD_VAR 0 6
41227: PUSH
41228: LD_INT 0
41230: LESS
41231: IFFALSE 41248
// _x := _x * - 1 ;
41233: LD_ADDR_VAR 0 6
41237: PUSH
41238: LD_VAR 0 6
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: MUL
41247: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41248: LD_ADDR_VAR 0 7
41252: PUSH
41253: LD_VAR 0 2
41257: PUSH
41258: LD_VAR 0 4
41262: PLUS
41263: PUSH
41264: LD_INT 2
41266: DIV
41267: ST_TO_ADDR
// if _y < 0 then
41268: LD_VAR 0 7
41272: PUSH
41273: LD_INT 0
41275: LESS
41276: IFFALSE 41293
// _y := _y * - 1 ;
41278: LD_ADDR_VAR 0 7
41282: PUSH
41283: LD_VAR 0 7
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: MUL
41292: ST_TO_ADDR
// result := [ _x , _y ] ;
41293: LD_ADDR_VAR 0 5
41297: PUSH
41298: LD_VAR 0 6
41302: PUSH
41303: LD_VAR 0 7
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// end ;
41312: LD_VAR 0 5
41316: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41317: LD_INT 0
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
// task := GetTaskList ( unit ) ;
41323: LD_ADDR_VAR 0 7
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL_OW 437
41337: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41338: LD_VAR 0 7
41342: NOT
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_VAR 0 2
41353: PPUSH
41354: CALL_OW 308
41358: NOT
41359: AND
41360: IFFALSE 41364
// exit ;
41362: GO 41482
// if IsInArea ( unit , area ) then
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 2
41373: PPUSH
41374: CALL_OW 308
41378: IFFALSE 41396
// begin ComMoveToArea ( unit , goAway ) ;
41380: LD_VAR 0 1
41384: PPUSH
41385: LD_VAR 0 3
41389: PPUSH
41390: CALL_OW 113
// exit ;
41394: GO 41482
// end ; if task [ 1 ] [ 1 ] <> M then
41396: LD_VAR 0 7
41400: PUSH
41401: LD_INT 1
41403: ARRAY
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PUSH
41409: LD_STRING M
41411: NONEQUAL
41412: IFFALSE 41416
// exit ;
41414: GO 41482
// x := task [ 1 ] [ 2 ] ;
41416: LD_ADDR_VAR 0 5
41420: PUSH
41421: LD_VAR 0 7
41425: PUSH
41426: LD_INT 1
41428: ARRAY
41429: PUSH
41430: LD_INT 2
41432: ARRAY
41433: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41434: LD_ADDR_VAR 0 6
41438: PUSH
41439: LD_VAR 0 7
41443: PUSH
41444: LD_INT 1
41446: ARRAY
41447: PUSH
41448: LD_INT 3
41450: ARRAY
41451: ST_TO_ADDR
// if InArea ( x , y , area ) then
41452: LD_VAR 0 5
41456: PPUSH
41457: LD_VAR 0 6
41461: PPUSH
41462: LD_VAR 0 2
41466: PPUSH
41467: CALL_OW 309
41471: IFFALSE 41482
// ComStop ( unit ) ;
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 141
// end ;
41482: LD_VAR 0 4
41486: RET
// export function Abs ( value ) ; begin
41487: LD_INT 0
41489: PPUSH
// result := value ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_VAR 0 1
41499: ST_TO_ADDR
// if value < 0 then
41500: LD_VAR 0 1
41504: PUSH
41505: LD_INT 0
41507: LESS
41508: IFFALSE 41525
// result := value * - 1 ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_VAR 0 1
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: MUL
41524: ST_TO_ADDR
// end ;
41525: LD_VAR 0 2
41529: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41530: LD_INT 0
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
// if not unit or not building then
41540: LD_VAR 0 1
41544: NOT
41545: PUSH
41546: LD_VAR 0 2
41550: NOT
41551: OR
41552: IFFALSE 41556
// exit ;
41554: GO 41782
// x := GetX ( building ) ;
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: LD_VAR 0 2
41565: PPUSH
41566: CALL_OW 250
41570: ST_TO_ADDR
// y := GetY ( building ) ;
41571: LD_ADDR_VAR 0 6
41575: PUSH
41576: LD_VAR 0 2
41580: PPUSH
41581: CALL_OW 251
41585: ST_TO_ADDR
// d := GetDir ( building ) ;
41586: LD_ADDR_VAR 0 8
41590: PUSH
41591: LD_VAR 0 2
41595: PPUSH
41596: CALL_OW 254
41600: ST_TO_ADDR
// r := 4 ;
41601: LD_ADDR_VAR 0 9
41605: PUSH
41606: LD_INT 4
41608: ST_TO_ADDR
// for i := 1 to 5 do
41609: LD_ADDR_VAR 0 10
41613: PUSH
41614: DOUBLE
41615: LD_INT 1
41617: DEC
41618: ST_TO_ADDR
41619: LD_INT 5
41621: PUSH
41622: FOR_TO
41623: IFFALSE 41780
// begin _x := ShiftX ( x , d , r + i ) ;
41625: LD_ADDR_VAR 0 5
41629: PUSH
41630: LD_VAR 0 4
41634: PPUSH
41635: LD_VAR 0 8
41639: PPUSH
41640: LD_VAR 0 9
41644: PUSH
41645: LD_VAR 0 10
41649: PLUS
41650: PPUSH
41651: CALL_OW 272
41655: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41656: LD_ADDR_VAR 0 7
41660: PUSH
41661: LD_VAR 0 6
41665: PPUSH
41666: LD_VAR 0 8
41670: PPUSH
41671: LD_VAR 0 9
41675: PUSH
41676: LD_VAR 0 10
41680: PLUS
41681: PPUSH
41682: CALL_OW 273
41686: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41687: LD_VAR 0 5
41691: PPUSH
41692: LD_VAR 0 7
41696: PPUSH
41697: CALL_OW 488
41701: PUSH
41702: LD_VAR 0 5
41706: PPUSH
41707: LD_VAR 0 7
41711: PPUSH
41712: CALL_OW 428
41716: PPUSH
41717: CALL_OW 247
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: IN
41732: NOT
41733: AND
41734: IFFALSE 41778
// begin ComMoveXY ( unit , _x , _y ) ;
41736: LD_VAR 0 1
41740: PPUSH
41741: LD_VAR 0 5
41745: PPUSH
41746: LD_VAR 0 7
41750: PPUSH
41751: CALL_OW 111
// result := [ _x , _y ] ;
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_VAR 0 5
41764: PUSH
41765: LD_VAR 0 7
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: ST_TO_ADDR
// exit ;
41774: POP
41775: POP
41776: GO 41782
// end ; end ;
41778: GO 41622
41780: POP
41781: POP
// end ;
41782: LD_VAR 0 3
41786: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41787: LD_INT 0
41789: PPUSH
41790: PPUSH
41791: PPUSH
// result := 0 ;
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_INT 0
41799: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41800: LD_VAR 0 1
41804: PUSH
41805: LD_INT 0
41807: LESS
41808: PUSH
41809: LD_VAR 0 1
41813: PUSH
41814: LD_INT 8
41816: GREATER
41817: OR
41818: PUSH
41819: LD_VAR 0 2
41823: PUSH
41824: LD_INT 0
41826: LESS
41827: OR
41828: PUSH
41829: LD_VAR 0 2
41833: PUSH
41834: LD_INT 8
41836: GREATER
41837: OR
41838: IFFALSE 41842
// exit ;
41840: GO 41917
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41842: LD_ADDR_VAR 0 4
41846: PUSH
41847: LD_INT 22
41849: PUSH
41850: LD_VAR 0 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PPUSH
41859: CALL_OW 69
41863: PUSH
41864: FOR_IN
41865: IFFALSE 41915
// begin un := UnitShoot ( i ) ;
41867: LD_ADDR_VAR 0 5
41871: PUSH
41872: LD_VAR 0 4
41876: PPUSH
41877: CALL_OW 504
41881: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41882: LD_VAR 0 5
41886: PPUSH
41887: CALL_OW 255
41891: PUSH
41892: LD_VAR 0 1
41896: EQUAL
41897: IFFALSE 41913
// begin result := un ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_VAR 0 5
41908: ST_TO_ADDR
// exit ;
41909: POP
41910: POP
41911: GO 41917
// end ; end ;
41913: GO 41864
41915: POP
41916: POP
// end ;
41917: LD_VAR 0 3
41921: RET
// export function GetCargoBay ( units ) ; begin
41922: LD_INT 0
41924: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41925: LD_ADDR_VAR 0 2
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 34
41940: PUSH
41941: LD_INT 12
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 34
41950: PUSH
41951: LD_INT 51
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 34
41960: PUSH
41961: LD_INT 32
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 34
41970: PUSH
41971: LD_INT 89
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: PPUSH
41985: CALL_OW 72
41989: ST_TO_ADDR
// end ;
41990: LD_VAR 0 2
41994: RET
// export function Negate ( value ) ; begin
41995: LD_INT 0
41997: PPUSH
// result := not value ;
41998: LD_ADDR_VAR 0 2
42002: PUSH
42003: LD_VAR 0 1
42007: NOT
42008: ST_TO_ADDR
// end ;
42009: LD_VAR 0 2
42013: RET
// export function Inc ( value ) ; begin
42014: LD_INT 0
42016: PPUSH
// result := value + 1 ;
42017: LD_ADDR_VAR 0 2
42021: PUSH
42022: LD_VAR 0 1
42026: PUSH
42027: LD_INT 1
42029: PLUS
42030: ST_TO_ADDR
// end ;
42031: LD_VAR 0 2
42035: RET
// export function Dec ( value ) ; begin
42036: LD_INT 0
42038: PPUSH
// result := value - 1 ;
42039: LD_ADDR_VAR 0 2
42043: PUSH
42044: LD_VAR 0 1
42048: PUSH
42049: LD_INT 1
42051: MINUS
42052: ST_TO_ADDR
// end ;
42053: LD_VAR 0 2
42057: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42068: LD_VAR 0 1
42072: PPUSH
42073: LD_VAR 0 2
42077: PPUSH
42078: CALL_OW 488
42082: NOT
42083: PUSH
42084: LD_VAR 0 3
42088: PPUSH
42089: LD_VAR 0 4
42093: PPUSH
42094: CALL_OW 488
42098: NOT
42099: OR
42100: IFFALSE 42113
// begin result := - 1 ;
42102: LD_ADDR_VAR 0 5
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: ST_TO_ADDR
// exit ;
42111: GO 42348
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42113: LD_ADDR_VAR 0 12
42117: PUSH
42118: LD_VAR 0 1
42122: PPUSH
42123: LD_VAR 0 2
42127: PPUSH
42128: LD_VAR 0 3
42132: PPUSH
42133: LD_VAR 0 4
42137: PPUSH
42138: CALL 41198 0 4
42142: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42143: LD_ADDR_VAR 0 11
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_VAR 0 2
42157: PPUSH
42158: LD_VAR 0 12
42162: PUSH
42163: LD_INT 1
42165: ARRAY
42166: PPUSH
42167: LD_VAR 0 12
42171: PUSH
42172: LD_INT 2
42174: ARRAY
42175: PPUSH
42176: CALL_OW 298
42180: ST_TO_ADDR
// distance := 9999 ;
42181: LD_ADDR_VAR 0 10
42185: PUSH
42186: LD_INT 9999
42188: ST_TO_ADDR
// for i := 0 to 5 do
42189: LD_ADDR_VAR 0 6
42193: PUSH
42194: DOUBLE
42195: LD_INT 0
42197: DEC
42198: ST_TO_ADDR
42199: LD_INT 5
42201: PUSH
42202: FOR_TO
42203: IFFALSE 42346
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42205: LD_ADDR_VAR 0 7
42209: PUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: LD_VAR 0 6
42219: PPUSH
42220: LD_VAR 0 11
42224: PPUSH
42225: CALL_OW 272
42229: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42230: LD_ADDR_VAR 0 8
42234: PUSH
42235: LD_VAR 0 2
42239: PPUSH
42240: LD_VAR 0 6
42244: PPUSH
42245: LD_VAR 0 11
42249: PPUSH
42250: CALL_OW 273
42254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42255: LD_VAR 0 7
42259: PPUSH
42260: LD_VAR 0 8
42264: PPUSH
42265: CALL_OW 488
42269: NOT
42270: IFFALSE 42274
// continue ;
42272: GO 42202
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42274: LD_ADDR_VAR 0 9
42278: PUSH
42279: LD_VAR 0 12
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: PPUSH
42288: LD_VAR 0 12
42292: PUSH
42293: LD_INT 2
42295: ARRAY
42296: PPUSH
42297: LD_VAR 0 7
42301: PPUSH
42302: LD_VAR 0 8
42306: PPUSH
42307: CALL_OW 298
42311: ST_TO_ADDR
// if tmp < distance then
42312: LD_VAR 0 9
42316: PUSH
42317: LD_VAR 0 10
42321: LESS
42322: IFFALSE 42344
// begin result := i ;
42324: LD_ADDR_VAR 0 5
42328: PUSH
42329: LD_VAR 0 6
42333: ST_TO_ADDR
// distance := tmp ;
42334: LD_ADDR_VAR 0 10
42338: PUSH
42339: LD_VAR 0 9
42343: ST_TO_ADDR
// end ; end ;
42344: GO 42202
42346: POP
42347: POP
// end ;
42348: LD_VAR 0 5
42352: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42353: LD_INT 0
42355: PPUSH
42356: PPUSH
// if not driver or not IsInUnit ( driver ) then
42357: LD_VAR 0 1
42361: NOT
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 310
42372: NOT
42373: OR
42374: IFFALSE 42378
// exit ;
42376: GO 42468
// vehicle := IsInUnit ( driver ) ;
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: LD_VAR 0 1
42387: PPUSH
42388: CALL_OW 310
42392: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42393: LD_VAR 0 1
42397: PPUSH
42398: LD_STRING \
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: PUSH
42428: LD_STRING E
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_VAR 0 3
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 446
// end ;
42468: LD_VAR 0 2
42472: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
// if not driver or not IsInUnit ( driver ) then
42477: LD_VAR 0 1
42481: NOT
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 310
42492: NOT
42493: OR
42494: IFFALSE 42498
// exit ;
42496: GO 42588
// vehicle := IsInUnit ( driver ) ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 310
42512: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42513: LD_VAR 0 1
42517: PPUSH
42518: LD_STRING \
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: PUSH
42548: LD_STRING E
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_VAR 0 3
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PPUSH
42584: CALL_OW 447
// end ;
42588: LD_VAR 0 2
42592: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42593: LD_INT 0
42595: PPUSH
42596: PPUSH
42597: PPUSH
// tmp := [ ] ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: EMPTY
42604: ST_TO_ADDR
// for i in units do
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: LD_VAR 0 1
42614: PUSH
42615: FOR_IN
42616: IFFALSE 42654
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42618: LD_ADDR_VAR 0 5
42622: PUSH
42623: LD_VAR 0 5
42627: PPUSH
42628: LD_VAR 0 5
42632: PUSH
42633: LD_INT 1
42635: PLUS
42636: PPUSH
42637: LD_VAR 0 4
42641: PPUSH
42642: CALL_OW 256
42646: PPUSH
42647: CALL_OW 2
42651: ST_TO_ADDR
42652: GO 42615
42654: POP
42655: POP
// if not tmp then
42656: LD_VAR 0 5
42660: NOT
42661: IFFALSE 42665
// exit ;
42663: GO 42713
// if asc then
42665: LD_VAR 0 2
42669: IFFALSE 42693
// result := SortListByListAsc ( units , tmp ) else
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_VAR 0 1
42680: PPUSH
42681: LD_VAR 0 5
42685: PPUSH
42686: CALL_OW 76
42690: ST_TO_ADDR
42691: GO 42713
// result := SortListByListDesc ( units , tmp ) ;
42693: LD_ADDR_VAR 0 3
42697: PUSH
42698: LD_VAR 0 1
42702: PPUSH
42703: LD_VAR 0 5
42707: PPUSH
42708: CALL_OW 77
42712: ST_TO_ADDR
// end ;
42713: LD_VAR 0 3
42717: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42718: LD_INT 0
42720: PPUSH
42721: PPUSH
// task := GetTaskList ( mech ) ;
42722: LD_ADDR_VAR 0 4
42726: PUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: CALL_OW 437
42736: ST_TO_ADDR
// if not task then
42737: LD_VAR 0 4
42741: NOT
42742: IFFALSE 42746
// exit ;
42744: GO 42788
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_VAR 0 4
42755: PUSH
42756: LD_INT 1
42758: ARRAY
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: PUSH
42764: LD_STRING r
42766: EQUAL
42767: PUSH
42768: LD_VAR 0 4
42772: PUSH
42773: LD_INT 1
42775: ARRAY
42776: PUSH
42777: LD_INT 4
42779: ARRAY
42780: PUSH
42781: LD_VAR 0 2
42785: EQUAL
42786: AND
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 3
42792: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42793: LD_INT 0
42795: PPUSH
// SetDir ( unit , d ) ;
42796: LD_VAR 0 1
42800: PPUSH
42801: LD_VAR 0 4
42805: PPUSH
42806: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42810: LD_VAR 0 1
42814: PPUSH
42815: LD_VAR 0 2
42819: PPUSH
42820: LD_VAR 0 3
42824: PPUSH
42825: LD_VAR 0 5
42829: PPUSH
42830: CALL_OW 48
// end ;
42834: LD_VAR 0 6
42838: RET
// export function ToNaturalNumber ( number ) ; begin
42839: LD_INT 0
42841: PPUSH
// result := number div 1 ;
42842: LD_ADDR_VAR 0 2
42846: PUSH
42847: LD_VAR 0 1
42851: PUSH
42852: LD_INT 1
42854: DIV
42855: ST_TO_ADDR
// if number < 0 then
42856: LD_VAR 0 1
42860: PUSH
42861: LD_INT 0
42863: LESS
42864: IFFALSE 42874
// result := 0 ;
42866: LD_ADDR_VAR 0 2
42870: PUSH
42871: LD_INT 0
42873: ST_TO_ADDR
// end ;
42874: LD_VAR 0 2
42878: RET
// export function SortByClass ( units , class ) ; var un ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
// if not units or not class then
42883: LD_VAR 0 1
42887: NOT
42888: PUSH
42889: LD_VAR 0 2
42893: NOT
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 42994
// result := [ ] ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: EMPTY
42905: ST_TO_ADDR
// for un in units do
42906: LD_ADDR_VAR 0 4
42910: PUSH
42911: LD_VAR 0 1
42915: PUSH
42916: FOR_IN
42917: IFFALSE 42992
// if GetClass ( un ) = class then
42919: LD_VAR 0 4
42923: PPUSH
42924: CALL_OW 257
42928: PUSH
42929: LD_VAR 0 2
42933: EQUAL
42934: IFFALSE 42961
// result := Insert ( result , 1 , un ) else
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: LD_INT 1
42948: PPUSH
42949: LD_VAR 0 4
42953: PPUSH
42954: CALL_OW 2
42958: ST_TO_ADDR
42959: GO 42990
// result := Replace ( result , result + 1 , un ) ;
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_VAR 0 3
42970: PPUSH
42971: LD_VAR 0 3
42975: PUSH
42976: LD_INT 1
42978: PLUS
42979: PPUSH
42980: LD_VAR 0 4
42984: PPUSH
42985: CALL_OW 1
42989: ST_TO_ADDR
42990: GO 42916
42992: POP
42993: POP
// end ;
42994: LD_VAR 0 3
42998: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42999: LD_INT 0
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
// result := [ ] ;
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: EMPTY
43014: ST_TO_ADDR
// if x - r < 0 then
43015: LD_VAR 0 1
43019: PUSH
43020: LD_VAR 0 3
43024: MINUS
43025: PUSH
43026: LD_INT 0
43028: LESS
43029: IFFALSE 43041
// min_x := 0 else
43031: LD_ADDR_VAR 0 8
43035: PUSH
43036: LD_INT 0
43038: ST_TO_ADDR
43039: GO 43057
// min_x := x - r ;
43041: LD_ADDR_VAR 0 8
43045: PUSH
43046: LD_VAR 0 1
43050: PUSH
43051: LD_VAR 0 3
43055: MINUS
43056: ST_TO_ADDR
// if y - r < 0 then
43057: LD_VAR 0 2
43061: PUSH
43062: LD_VAR 0 3
43066: MINUS
43067: PUSH
43068: LD_INT 0
43070: LESS
43071: IFFALSE 43083
// min_y := 0 else
43073: LD_ADDR_VAR 0 7
43077: PUSH
43078: LD_INT 0
43080: ST_TO_ADDR
43081: GO 43099
// min_y := y - r ;
43083: LD_ADDR_VAR 0 7
43087: PUSH
43088: LD_VAR 0 2
43092: PUSH
43093: LD_VAR 0 3
43097: MINUS
43098: ST_TO_ADDR
// max_x := x + r ;
43099: LD_ADDR_VAR 0 9
43103: PUSH
43104: LD_VAR 0 1
43108: PUSH
43109: LD_VAR 0 3
43113: PLUS
43114: ST_TO_ADDR
// max_y := y + r ;
43115: LD_ADDR_VAR 0 10
43119: PUSH
43120: LD_VAR 0 2
43124: PUSH
43125: LD_VAR 0 3
43129: PLUS
43130: ST_TO_ADDR
// for _x = min_x to max_x do
43131: LD_ADDR_VAR 0 5
43135: PUSH
43136: DOUBLE
43137: LD_VAR 0 8
43141: DEC
43142: ST_TO_ADDR
43143: LD_VAR 0 9
43147: PUSH
43148: FOR_TO
43149: IFFALSE 43250
// for _y = min_y to max_y do
43151: LD_ADDR_VAR 0 6
43155: PUSH
43156: DOUBLE
43157: LD_VAR 0 7
43161: DEC
43162: ST_TO_ADDR
43163: LD_VAR 0 10
43167: PUSH
43168: FOR_TO
43169: IFFALSE 43246
// begin if not ValidHex ( _x , _y ) then
43171: LD_VAR 0 5
43175: PPUSH
43176: LD_VAR 0 6
43180: PPUSH
43181: CALL_OW 488
43185: NOT
43186: IFFALSE 43190
// continue ;
43188: GO 43168
// if GetResourceTypeXY ( _x , _y ) then
43190: LD_VAR 0 5
43194: PPUSH
43195: LD_VAR 0 6
43199: PPUSH
43200: CALL_OW 283
43204: IFFALSE 43244
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43206: LD_ADDR_VAR 0 4
43210: PUSH
43211: LD_VAR 0 4
43215: PPUSH
43216: LD_VAR 0 4
43220: PUSH
43221: LD_INT 1
43223: PLUS
43224: PPUSH
43225: LD_VAR 0 5
43229: PUSH
43230: LD_VAR 0 6
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PPUSH
43239: CALL_OW 1
43243: ST_TO_ADDR
// end ;
43244: GO 43168
43246: POP
43247: POP
43248: GO 43148
43250: POP
43251: POP
// end ;
43252: LD_VAR 0 4
43256: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43257: LD_INT 0
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
// if not units then
43267: LD_VAR 0 1
43271: NOT
43272: IFFALSE 43276
// exit ;
43274: GO 43804
// result := UnitFilter ( units , [ f_ok ] ) ;
43276: LD_ADDR_VAR 0 3
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_INT 50
43288: PUSH
43289: EMPTY
43290: LIST
43291: PPUSH
43292: CALL_OW 72
43296: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43297: LD_ADDR_VAR 0 8
43301: PUSH
43302: LD_VAR 0 1
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PPUSH
43311: CALL_OW 255
43315: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43316: LD_ADDR_VAR 0 10
43320: PUSH
43321: LD_INT 29
43323: PUSH
43324: LD_INT 91
43326: PUSH
43327: LD_INT 49
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// if not result then
43335: LD_VAR 0 3
43339: NOT
43340: IFFALSE 43344
// exit ;
43342: GO 43804
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43344: LD_ADDR_VAR 0 5
43348: PUSH
43349: LD_INT 81
43351: PUSH
43352: LD_VAR 0 8
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PPUSH
43361: CALL_OW 69
43365: ST_TO_ADDR
// for i in result do
43366: LD_ADDR_VAR 0 4
43370: PUSH
43371: LD_VAR 0 3
43375: PUSH
43376: FOR_IN
43377: IFFALSE 43802
// begin tag := GetTag ( i ) + 1 ;
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_VAR 0 4
43388: PPUSH
43389: CALL_OW 110
43393: PUSH
43394: LD_INT 1
43396: PLUS
43397: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43398: LD_ADDR_VAR 0 7
43402: PUSH
43403: LD_VAR 0 4
43407: PPUSH
43408: CALL_OW 250
43412: PPUSH
43413: LD_VAR 0 4
43417: PPUSH
43418: CALL_OW 251
43422: PPUSH
43423: LD_INT 4
43425: PPUSH
43426: CALL 42999 0 3
43430: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43431: LD_VAR 0 4
43435: PPUSH
43436: CALL_OW 247
43440: PUSH
43441: LD_INT 2
43443: EQUAL
43444: PUSH
43445: LD_VAR 0 7
43449: PUSH
43450: LD_INT 2
43452: GREATER
43453: AND
43454: PUSH
43455: LD_VAR 0 4
43459: PPUSH
43460: CALL_OW 264
43464: PUSH
43465: LD_VAR 0 10
43469: IN
43470: NOT
43471: AND
43472: IFFALSE 43511
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43474: LD_VAR 0 4
43478: PPUSH
43479: LD_VAR 0 7
43483: PUSH
43484: LD_INT 1
43486: ARRAY
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: PPUSH
43492: LD_VAR 0 7
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PUSH
43501: LD_INT 2
43503: ARRAY
43504: PPUSH
43505: CALL_OW 116
43509: GO 43800
// if path > tag then
43511: LD_VAR 0 2
43515: PUSH
43516: LD_VAR 0 9
43520: GREATER
43521: IFFALSE 43729
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43523: LD_ADDR_VAR 0 6
43527: PUSH
43528: LD_VAR 0 5
43532: PPUSH
43533: LD_INT 91
43535: PUSH
43536: LD_VAR 0 4
43540: PUSH
43541: LD_INT 8
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: LIST
43548: PPUSH
43549: CALL_OW 72
43553: ST_TO_ADDR
// if nearEnemy then
43554: LD_VAR 0 6
43558: IFFALSE 43627
// begin if GetWeapon ( i ) = ru_time_lapser then
43560: LD_VAR 0 4
43564: PPUSH
43565: CALL_OW 264
43569: PUSH
43570: LD_INT 49
43572: EQUAL
43573: IFFALSE 43601
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43575: LD_VAR 0 4
43579: PPUSH
43580: LD_VAR 0 6
43584: PPUSH
43585: LD_VAR 0 4
43589: PPUSH
43590: CALL_OW 74
43594: PPUSH
43595: CALL_OW 112
43599: GO 43625
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43601: LD_VAR 0 4
43605: PPUSH
43606: LD_VAR 0 6
43610: PPUSH
43611: LD_VAR 0 4
43615: PPUSH
43616: CALL_OW 74
43620: PPUSH
43621: CALL 44875 0 2
// end else
43625: GO 43727
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43627: LD_VAR 0 4
43631: PPUSH
43632: LD_VAR 0 2
43636: PUSH
43637: LD_VAR 0 9
43641: ARRAY
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PPUSH
43647: LD_VAR 0 2
43651: PUSH
43652: LD_VAR 0 9
43656: ARRAY
43657: PUSH
43658: LD_INT 2
43660: ARRAY
43661: PPUSH
43662: CALL_OW 297
43666: PUSH
43667: LD_INT 6
43669: GREATER
43670: IFFALSE 43713
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43672: LD_VAR 0 4
43676: PPUSH
43677: LD_VAR 0 2
43681: PUSH
43682: LD_VAR 0 9
43686: ARRAY
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: PPUSH
43692: LD_VAR 0 2
43696: PUSH
43697: LD_VAR 0 9
43701: ARRAY
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: PPUSH
43707: CALL_OW 114
43711: GO 43727
// SetTag ( i , tag ) ;
43713: LD_VAR 0 4
43717: PPUSH
43718: LD_VAR 0 9
43722: PPUSH
43723: CALL_OW 109
// end else
43727: GO 43800
// if enemy then
43729: LD_VAR 0 5
43733: IFFALSE 43800
// begin if GetWeapon ( i ) = ru_time_lapser then
43735: LD_VAR 0 4
43739: PPUSH
43740: CALL_OW 264
43744: PUSH
43745: LD_INT 49
43747: EQUAL
43748: IFFALSE 43776
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43750: LD_VAR 0 4
43754: PPUSH
43755: LD_VAR 0 5
43759: PPUSH
43760: LD_VAR 0 4
43764: PPUSH
43765: CALL_OW 74
43769: PPUSH
43770: CALL_OW 112
43774: GO 43800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43776: LD_VAR 0 4
43780: PPUSH
43781: LD_VAR 0 5
43785: PPUSH
43786: LD_VAR 0 4
43790: PPUSH
43791: CALL_OW 74
43795: PPUSH
43796: CALL 44875 0 2
// end ; end ;
43800: GO 43376
43802: POP
43803: POP
// end ;
43804: LD_VAR 0 3
43808: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43809: LD_INT 0
43811: PPUSH
43812: PPUSH
43813: PPUSH
// if not unit or IsInUnit ( unit ) then
43814: LD_VAR 0 1
43818: NOT
43819: PUSH
43820: LD_VAR 0 1
43824: PPUSH
43825: CALL_OW 310
43829: OR
43830: IFFALSE 43834
// exit ;
43832: GO 43925
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43834: LD_ADDR_VAR 0 4
43838: PUSH
43839: LD_VAR 0 1
43843: PPUSH
43844: CALL_OW 250
43848: PPUSH
43849: LD_VAR 0 2
43853: PPUSH
43854: LD_INT 1
43856: PPUSH
43857: CALL_OW 272
43861: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: LD_VAR 0 1
43871: PPUSH
43872: CALL_OW 251
43876: PPUSH
43877: LD_VAR 0 2
43881: PPUSH
43882: LD_INT 1
43884: PPUSH
43885: CALL_OW 273
43889: ST_TO_ADDR
// if ValidHex ( x , y ) then
43890: LD_VAR 0 4
43894: PPUSH
43895: LD_VAR 0 5
43899: PPUSH
43900: CALL_OW 488
43904: IFFALSE 43925
// ComTurnXY ( unit , x , y ) ;
43906: LD_VAR 0 1
43910: PPUSH
43911: LD_VAR 0 4
43915: PPUSH
43916: LD_VAR 0 5
43920: PPUSH
43921: CALL_OW 118
// end ;
43925: LD_VAR 0 3
43929: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43930: LD_INT 0
43932: PPUSH
43933: PPUSH
// result := false ;
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 0
43941: ST_TO_ADDR
// if not units then
43942: LD_VAR 0 2
43946: NOT
43947: IFFALSE 43951
// exit ;
43949: GO 43996
// for i in units do
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_VAR 0 2
43960: PUSH
43961: FOR_IN
43962: IFFALSE 43994
// if See ( side , i ) then
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_VAR 0 4
43973: PPUSH
43974: CALL_OW 292
43978: IFFALSE 43992
// begin result := true ;
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_INT 1
43987: ST_TO_ADDR
// exit ;
43988: POP
43989: POP
43990: GO 43996
// end ;
43992: GO 43961
43994: POP
43995: POP
// end ;
43996: LD_VAR 0 3
44000: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44001: LD_INT 0
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
// if not unit or not points then
44007: LD_VAR 0 1
44011: NOT
44012: PUSH
44013: LD_VAR 0 2
44017: NOT
44018: OR
44019: IFFALSE 44023
// exit ;
44021: GO 44113
// dist := 99999 ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_INT 99999
44030: ST_TO_ADDR
// for i in points do
44031: LD_ADDR_VAR 0 4
44035: PUSH
44036: LD_VAR 0 2
44040: PUSH
44041: FOR_IN
44042: IFFALSE 44111
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44044: LD_ADDR_VAR 0 6
44048: PUSH
44049: LD_VAR 0 1
44053: PPUSH
44054: LD_VAR 0 4
44058: PUSH
44059: LD_INT 1
44061: ARRAY
44062: PPUSH
44063: LD_VAR 0 4
44067: PUSH
44068: LD_INT 2
44070: ARRAY
44071: PPUSH
44072: CALL_OW 297
44076: ST_TO_ADDR
// if tmpDist < dist then
44077: LD_VAR 0 6
44081: PUSH
44082: LD_VAR 0 5
44086: LESS
44087: IFFALSE 44109
// begin result := i ;
44089: LD_ADDR_VAR 0 3
44093: PUSH
44094: LD_VAR 0 4
44098: ST_TO_ADDR
// dist := tmpDist ;
44099: LD_ADDR_VAR 0 5
44103: PUSH
44104: LD_VAR 0 6
44108: ST_TO_ADDR
// end ; end ;
44109: GO 44041
44111: POP
44112: POP
// end ;
44113: LD_VAR 0 3
44117: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44118: LD_INT 0
44120: PPUSH
// uc_side := side ;
44121: LD_ADDR_OWVAR 20
44125: PUSH
44126: LD_VAR 0 1
44130: ST_TO_ADDR
// uc_nation := 3 ;
44131: LD_ADDR_OWVAR 21
44135: PUSH
44136: LD_INT 3
44138: ST_TO_ADDR
// vc_chassis := 25 ;
44139: LD_ADDR_OWVAR 37
44143: PUSH
44144: LD_INT 25
44146: ST_TO_ADDR
// vc_engine := engine_siberite ;
44147: LD_ADDR_OWVAR 39
44151: PUSH
44152: LD_INT 3
44154: ST_TO_ADDR
// vc_control := control_computer ;
44155: LD_ADDR_OWVAR 38
44159: PUSH
44160: LD_INT 3
44162: ST_TO_ADDR
// vc_weapon := 59 ;
44163: LD_ADDR_OWVAR 40
44167: PUSH
44168: LD_INT 59
44170: ST_TO_ADDR
// result := CreateVehicle ;
44171: LD_ADDR_VAR 0 5
44175: PUSH
44176: CALL_OW 45
44180: ST_TO_ADDR
// SetDir ( result , d ) ;
44181: LD_VAR 0 5
44185: PPUSH
44186: LD_VAR 0 4
44190: PPUSH
44191: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44195: LD_VAR 0 5
44199: PPUSH
44200: LD_VAR 0 2
44204: PPUSH
44205: LD_VAR 0 3
44209: PPUSH
44210: LD_INT 0
44212: PPUSH
44213: CALL_OW 48
// end ;
44217: LD_VAR 0 5
44221: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44222: LD_INT 0
44224: PPUSH
44225: PPUSH
44226: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44250: LD_VAR 0 1
44254: NOT
44255: PUSH
44256: LD_VAR 0 1
44260: PPUSH
44261: CALL_OW 264
44265: PUSH
44266: LD_INT 12
44268: PUSH
44269: LD_INT 51
44271: PUSH
44272: LD_INT 32
44274: PUSH
44275: LD_INT 89
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: IN
44284: NOT
44285: OR
44286: IFFALSE 44290
// exit ;
44288: GO 44388
// for i := 1 to 3 do
44290: LD_ADDR_VAR 0 3
44294: PUSH
44295: DOUBLE
44296: LD_INT 1
44298: DEC
44299: ST_TO_ADDR
44300: LD_INT 3
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44386
// begin tmp := GetCargo ( cargo , i ) ;
44306: LD_ADDR_VAR 0 4
44310: PUSH
44311: LD_VAR 0 1
44315: PPUSH
44316: LD_VAR 0 3
44320: PPUSH
44321: CALL_OW 289
44325: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44326: LD_ADDR_VAR 0 2
44330: PUSH
44331: LD_VAR 0 2
44335: PPUSH
44336: LD_VAR 0 3
44340: PPUSH
44341: LD_VAR 0 4
44345: PPUSH
44346: CALL_OW 1
44350: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44351: LD_ADDR_VAR 0 2
44355: PUSH
44356: LD_VAR 0 2
44360: PPUSH
44361: LD_INT 4
44363: PPUSH
44364: LD_VAR 0 2
44368: PUSH
44369: LD_INT 4
44371: ARRAY
44372: PUSH
44373: LD_VAR 0 4
44377: PLUS
44378: PPUSH
44379: CALL_OW 1
44383: ST_TO_ADDR
// end ;
44384: GO 44303
44386: POP
44387: POP
// end ;
44388: LD_VAR 0 2
44392: RET
// export function Length ( array ) ; begin
44393: LD_INT 0
44395: PPUSH
// result := array + 0 ;
44396: LD_ADDR_VAR 0 2
44400: PUSH
44401: LD_VAR 0 1
44405: PUSH
44406: LD_INT 0
44408: PLUS
44409: ST_TO_ADDR
// end ;
44410: LD_VAR 0 2
44414: RET
// export function PrepareArray ( array ) ; begin
44415: LD_INT 0
44417: PPUSH
// result := array diff 0 ;
44418: LD_ADDR_VAR 0 2
44422: PUSH
44423: LD_VAR 0 1
44427: PUSH
44428: LD_INT 0
44430: DIFF
44431: ST_TO_ADDR
// if not result [ 1 ] then
44432: LD_VAR 0 2
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: NOT
44441: IFFALSE 44461
// result := Delete ( result , 1 ) ;
44443: LD_ADDR_VAR 0 2
44447: PUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_INT 1
44455: PPUSH
44456: CALL_OW 3
44460: ST_TO_ADDR
// end ;
44461: LD_VAR 0 2
44465: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44466: LD_INT 0
44468: PPUSH
44469: PPUSH
44470: PPUSH
44471: PPUSH
// sibRocketRange := 25 ;
44472: LD_ADDR_VAR 0 6
44476: PUSH
44477: LD_INT 25
44479: ST_TO_ADDR
// result := false ;
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: LD_INT 0
44487: ST_TO_ADDR
// for i := 0 to 5 do
44488: LD_ADDR_VAR 0 5
44492: PUSH
44493: DOUBLE
44494: LD_INT 0
44496: DEC
44497: ST_TO_ADDR
44498: LD_INT 5
44500: PUSH
44501: FOR_TO
44502: IFFALSE 44569
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44504: LD_VAR 0 1
44508: PPUSH
44509: LD_VAR 0 5
44513: PPUSH
44514: LD_VAR 0 6
44518: PPUSH
44519: CALL_OW 272
44523: PPUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: LD_VAR 0 5
44533: PPUSH
44534: LD_VAR 0 6
44538: PPUSH
44539: CALL_OW 273
44543: PPUSH
44544: LD_VAR 0 3
44548: PPUSH
44549: CALL_OW 309
44553: IFFALSE 44567
// begin result := true ;
44555: LD_ADDR_VAR 0 4
44559: PUSH
44560: LD_INT 1
44562: ST_TO_ADDR
// exit ;
44563: POP
44564: POP
44565: GO 44571
// end ;
44567: GO 44501
44569: POP
44570: POP
// end ;
44571: LD_VAR 0 4
44575: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44576: LD_INT 0
44578: PPUSH
44579: PPUSH
44580: PPUSH
// if btype = b_depot then
44581: LD_VAR 0 2
44585: PUSH
44586: LD_INT 0
44588: EQUAL
44589: IFFALSE 44601
// begin result := true ;
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 1
44598: ST_TO_ADDR
// exit ;
44599: GO 44717
// end ; pom := GetBase ( depot ) ;
44601: LD_ADDR_VAR 0 4
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 274
44615: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44616: LD_ADDR_VAR 0 5
44620: PUSH
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: CALL_OW 248
44635: PPUSH
44636: CALL_OW 450
44640: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44641: LD_ADDR_VAR 0 3
44645: PUSH
44646: LD_VAR 0 4
44650: PPUSH
44651: LD_INT 1
44653: PPUSH
44654: CALL_OW 275
44658: PUSH
44659: LD_VAR 0 5
44663: PUSH
44664: LD_INT 1
44666: ARRAY
44667: GREATEREQUAL
44668: PUSH
44669: LD_VAR 0 4
44673: PPUSH
44674: LD_INT 2
44676: PPUSH
44677: CALL_OW 275
44681: PUSH
44682: LD_VAR 0 5
44686: PUSH
44687: LD_INT 2
44689: ARRAY
44690: GREATEREQUAL
44691: AND
44692: PUSH
44693: LD_VAR 0 4
44697: PPUSH
44698: LD_INT 3
44700: PPUSH
44701: CALL_OW 275
44705: PUSH
44706: LD_VAR 0 5
44710: PUSH
44711: LD_INT 3
44713: ARRAY
44714: GREATEREQUAL
44715: AND
44716: ST_TO_ADDR
// end ;
44717: LD_VAR 0 3
44721: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44722: LD_INT 0
44724: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44725: LD_VAR 0 1
44729: PPUSH
44730: LD_VAR 0 2
44734: PPUSH
44735: LD_INT 0
44737: PPUSH
44738: LD_INT 0
44740: PPUSH
44741: LD_INT 1
44743: PPUSH
44744: LD_INT 0
44746: PPUSH
44747: CALL_OW 587
// end ;
44751: LD_VAR 0 3
44755: RET
// export function CenterOnNow ( unit ) ; begin
44756: LD_INT 0
44758: PPUSH
// result := IsInUnit ( unit ) ;
44759: LD_ADDR_VAR 0 2
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: CALL_OW 310
44773: ST_TO_ADDR
// if not result then
44774: LD_VAR 0 2
44778: NOT
44779: IFFALSE 44791
// result := unit ;
44781: LD_ADDR_VAR 0 2
44785: PUSH
44786: LD_VAR 0 1
44790: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 87
// end ;
44800: LD_VAR 0 2
44804: RET
// export function ComMoveHex ( unit , hex ) ; begin
44805: LD_INT 0
44807: PPUSH
// if not hex then
44808: LD_VAR 0 2
44812: NOT
44813: IFFALSE 44817
// exit ;
44815: GO 44870
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44817: LD_VAR 0 2
44821: PUSH
44822: LD_INT 1
44824: ARRAY
44825: PPUSH
44826: LD_VAR 0 2
44830: PUSH
44831: LD_INT 2
44833: ARRAY
44834: PPUSH
44835: CALL_OW 428
44839: IFFALSE 44843
// exit ;
44841: GO 44870
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44843: LD_VAR 0 1
44847: PPUSH
44848: LD_VAR 0 2
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: PPUSH
44857: LD_VAR 0 2
44861: PUSH
44862: LD_INT 2
44864: ARRAY
44865: PPUSH
44866: CALL_OW 111
// end ;
44870: LD_VAR 0 3
44874: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44875: LD_INT 0
44877: PPUSH
44878: PPUSH
44879: PPUSH
// if not unit or not enemy then
44880: LD_VAR 0 1
44884: NOT
44885: PUSH
44886: LD_VAR 0 2
44890: NOT
44891: OR
44892: IFFALSE 44896
// exit ;
44894: GO 45020
// x := GetX ( enemy ) ;
44896: LD_ADDR_VAR 0 4
44900: PUSH
44901: LD_VAR 0 2
44905: PPUSH
44906: CALL_OW 250
44910: ST_TO_ADDR
// y := GetY ( enemy ) ;
44911: LD_ADDR_VAR 0 5
44915: PUSH
44916: LD_VAR 0 2
44920: PPUSH
44921: CALL_OW 251
44925: ST_TO_ADDR
// if ValidHex ( x , y ) then
44926: LD_VAR 0 4
44930: PPUSH
44931: LD_VAR 0 5
44935: PPUSH
44936: CALL_OW 488
44940: IFFALSE 45020
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44942: LD_VAR 0 2
44946: PPUSH
44947: CALL_OW 247
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: IN
44962: PUSH
44963: LD_VAR 0 1
44967: PPUSH
44968: CALL_OW 255
44972: PPUSH
44973: LD_VAR 0 2
44977: PPUSH
44978: CALL_OW 292
44982: OR
44983: IFFALSE 45001
// ComAttackUnit ( unit , enemy ) else
44985: LD_VAR 0 1
44989: PPUSH
44990: LD_VAR 0 2
44994: PPUSH
44995: CALL_OW 115
44999: GO 45020
// ComAgressiveMove ( unit , x , y ) ;
45001: LD_VAR 0 1
45005: PPUSH
45006: LD_VAR 0 4
45010: PPUSH
45011: LD_VAR 0 5
45015: PPUSH
45016: CALL_OW 114
// end ;
45020: LD_VAR 0 3
45024: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45025: LD_INT 0
45027: PPUSH
45028: PPUSH
45029: PPUSH
// list := AreaToList ( area , 0 ) ;
45030: LD_ADDR_VAR 0 5
45034: PUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: LD_INT 0
45042: PPUSH
45043: CALL_OW 517
45047: ST_TO_ADDR
// if not list then
45048: LD_VAR 0 5
45052: NOT
45053: IFFALSE 45057
// exit ;
45055: GO 45187
// if all then
45057: LD_VAR 0 2
45061: IFFALSE 45149
// begin for i := 1 to list [ 1 ] do
45063: LD_ADDR_VAR 0 4
45067: PUSH
45068: DOUBLE
45069: LD_INT 1
45071: DEC
45072: ST_TO_ADDR
45073: LD_VAR 0 5
45077: PUSH
45078: LD_INT 1
45080: ARRAY
45081: PUSH
45082: FOR_TO
45083: IFFALSE 45145
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45085: LD_ADDR_VAR 0 3
45089: PUSH
45090: LD_VAR 0 3
45094: PPUSH
45095: LD_VAR 0 3
45099: PUSH
45100: LD_INT 1
45102: PLUS
45103: PPUSH
45104: LD_VAR 0 5
45108: PUSH
45109: LD_INT 1
45111: ARRAY
45112: PUSH
45113: LD_VAR 0 4
45117: ARRAY
45118: PUSH
45119: LD_VAR 0 5
45123: PUSH
45124: LD_INT 2
45126: ARRAY
45127: PUSH
45128: LD_VAR 0 4
45132: ARRAY
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 1
45142: ST_TO_ADDR
45143: GO 45082
45145: POP
45146: POP
// exit ;
45147: GO 45187
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_VAR 0 5
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: PUSH
45163: LD_INT 1
45165: ARRAY
45166: PUSH
45167: LD_VAR 0 5
45171: PUSH
45172: LD_INT 2
45174: ARRAY
45175: PUSH
45176: LD_INT 1
45178: ARRAY
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: EMPTY
45185: LIST
45186: ST_TO_ADDR
// end ;
45187: LD_VAR 0 3
45191: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45192: LD_INT 0
45194: PPUSH
45195: PPUSH
// list := AreaToList ( area , 0 ) ;
45196: LD_ADDR_VAR 0 4
45200: PUSH
45201: LD_VAR 0 1
45205: PPUSH
45206: LD_INT 0
45208: PPUSH
45209: CALL_OW 517
45213: ST_TO_ADDR
// if not list then
45214: LD_VAR 0 4
45218: NOT
45219: IFFALSE 45223
// exit ;
45221: GO 45264
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45223: LD_ADDR_VAR 0 3
45227: PUSH
45228: LD_VAR 0 4
45232: PUSH
45233: LD_INT 1
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PUSH
45241: LD_VAR 0 4
45245: PUSH
45246: LD_INT 2
45248: ARRAY
45249: PUSH
45250: LD_INT 1
45252: ARRAY
45253: PUSH
45254: LD_VAR 0 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// end ;
45264: LD_VAR 0 3
45268: RET
// export function First ( array ) ; begin
45269: LD_INT 0
45271: PPUSH
// if not array then
45272: LD_VAR 0 1
45276: NOT
45277: IFFALSE 45281
// exit ;
45279: GO 45295
// result := array [ 1 ] ;
45281: LD_ADDR_VAR 0 2
45285: PUSH
45286: LD_VAR 0 1
45290: PUSH
45291: LD_INT 1
45293: ARRAY
45294: ST_TO_ADDR
// end ;
45295: LD_VAR 0 2
45299: RET
// export function Last ( array ) ; begin
45300: LD_INT 0
45302: PPUSH
// if not array then
45303: LD_VAR 0 1
45307: NOT
45308: IFFALSE 45312
// exit ;
45310: GO 45328
// result := array [ array ] ;
45312: LD_ADDR_VAR 0 2
45316: PUSH
45317: LD_VAR 0 1
45321: PUSH
45322: LD_VAR 0 1
45326: ARRAY
45327: ST_TO_ADDR
// end ;
45328: LD_VAR 0 2
45332: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45333: LD_INT 0
45335: PPUSH
45336: PPUSH
// result := [ ] ;
45337: LD_ADDR_VAR 0 5
45341: PUSH
45342: EMPTY
45343: ST_TO_ADDR
// if not array then
45344: LD_VAR 0 1
45348: NOT
45349: IFFALSE 45353
// exit ;
45351: GO 45465
// for i := 1 to array do
45353: LD_ADDR_VAR 0 6
45357: PUSH
45358: DOUBLE
45359: LD_INT 1
45361: DEC
45362: ST_TO_ADDR
45363: LD_VAR 0 1
45367: PUSH
45368: FOR_TO
45369: IFFALSE 45463
// if array [ i ] [ index ] = value then
45371: LD_VAR 0 1
45375: PUSH
45376: LD_VAR 0 6
45380: ARRAY
45381: PUSH
45382: LD_VAR 0 2
45386: ARRAY
45387: PUSH
45388: LD_VAR 0 3
45392: EQUAL
45393: IFFALSE 45461
// begin if indexColumn then
45395: LD_VAR 0 4
45399: IFFALSE 45435
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: LD_VAR 0 5
45410: PPUSH
45411: LD_VAR 0 1
45415: PUSH
45416: LD_VAR 0 6
45420: ARRAY
45421: PUSH
45422: LD_VAR 0 4
45426: ARRAY
45427: PPUSH
45428: CALL 40653 0 2
45432: ST_TO_ADDR
45433: GO 45461
// result := Join ( result , array [ i ] ) ;
45435: LD_ADDR_VAR 0 5
45439: PUSH
45440: LD_VAR 0 5
45444: PPUSH
45445: LD_VAR 0 1
45449: PUSH
45450: LD_VAR 0 6
45454: ARRAY
45455: PPUSH
45456: CALL 40653 0 2
45460: ST_TO_ADDR
// end ;
45461: GO 45368
45463: POP
45464: POP
// end ;
45465: LD_VAR 0 5
45469: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45470: LD_INT 0
45472: PPUSH
// if not vehicles or not parkingPoint then
45473: LD_VAR 0 1
45477: NOT
45478: PUSH
45479: LD_VAR 0 2
45483: NOT
45484: OR
45485: IFFALSE 45489
// exit ;
45487: GO 45587
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45489: LD_ADDR_VAR 0 1
45493: PUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_INT 50
45501: PUSH
45502: EMPTY
45503: LIST
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: LD_INT 92
45510: PUSH
45511: LD_VAR 0 2
45515: PUSH
45516: LD_INT 1
45518: ARRAY
45519: PUSH
45520: LD_VAR 0 2
45524: PUSH
45525: LD_INT 2
45527: ARRAY
45528: PUSH
45529: LD_INT 8
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PPUSH
45546: CALL_OW 72
45550: ST_TO_ADDR
// if not vehicles then
45551: LD_VAR 0 1
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 45587
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45560: LD_VAR 0 1
45564: PPUSH
45565: LD_VAR 0 2
45569: PUSH
45570: LD_INT 1
45572: ARRAY
45573: PPUSH
45574: LD_VAR 0 2
45578: PUSH
45579: LD_INT 2
45581: ARRAY
45582: PPUSH
45583: CALL_OW 111
// end ;
45587: LD_VAR 0 3
45591: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45592: LD_INT 0
45594: PPUSH
45595: PPUSH
45596: PPUSH
// if not side or not area then
45597: LD_VAR 0 1
45601: NOT
45602: PUSH
45603: LD_VAR 0 2
45607: NOT
45608: OR
45609: IFFALSE 45613
// exit ;
45611: GO 45732
// tmp := AreaToList ( area , 0 ) ;
45613: LD_ADDR_VAR 0 5
45617: PUSH
45618: LD_VAR 0 2
45622: PPUSH
45623: LD_INT 0
45625: PPUSH
45626: CALL_OW 517
45630: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45631: LD_ADDR_VAR 0 4
45635: PUSH
45636: DOUBLE
45637: LD_INT 1
45639: DEC
45640: ST_TO_ADDR
45641: LD_VAR 0 5
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: PUSH
45650: FOR_TO
45651: IFFALSE 45730
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45653: LD_VAR 0 5
45657: PUSH
45658: LD_INT 1
45660: ARRAY
45661: PUSH
45662: LD_VAR 0 4
45666: ARRAY
45667: PPUSH
45668: LD_VAR 0 5
45672: PUSH
45673: LD_INT 2
45675: ARRAY
45676: PUSH
45677: LD_VAR 0 4
45681: ARRAY
45682: PPUSH
45683: CALL_OW 351
45687: IFFALSE 45728
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45689: LD_VAR 0 5
45693: PUSH
45694: LD_INT 1
45696: ARRAY
45697: PUSH
45698: LD_VAR 0 4
45702: ARRAY
45703: PPUSH
45704: LD_VAR 0 5
45708: PUSH
45709: LD_INT 2
45711: ARRAY
45712: PUSH
45713: LD_VAR 0 4
45717: ARRAY
45718: PPUSH
45719: LD_VAR 0 1
45723: PPUSH
45724: CALL_OW 244
// end ;
45728: GO 45650
45730: POP
45731: POP
// end ; end_of_file
45732: LD_VAR 0 3
45736: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45737: LD_INT 0
45739: PPUSH
45740: PPUSH
// disable ( mpActive ) ;
45741: LD_INT 100
45743: DISABLE_MARKED
// disable ( mpWin ) ;
45744: LD_INT 101
45746: DISABLE_MARKED
// disable ( mpLose ) ;
45747: LD_INT 102
45749: DISABLE_MARKED
// mpGameType := 0 ;
45750: LD_ADDR_EXP 3
45754: PUSH
45755: LD_INT 0
45757: ST_TO_ADDR
// mpGameSettings := [ ] ;
45758: LD_ADDR_EXP 6
45762: PUSH
45763: EMPTY
45764: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45765: LD_ADDR_EXP 4
45769: PUSH
45770: EMPTY
45771: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45772: LD_ADDR_EXP 5
45776: PUSH
45777: EMPTY
45778: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45779: LD_ADDR_EXP 29
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45794: LD_ADDR_EXP 12
45798: PUSH
45799: EMPTY
45800: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45801: LD_ADDR_EXP 13
45805: PUSH
45806: EMPTY
45807: ST_TO_ADDR
// mpDepots := [ ] ;
45808: LD_ADDR_EXP 14
45812: PUSH
45813: EMPTY
45814: ST_TO_ADDR
// mpBuildings := [ ] ;
45815: LD_ADDR_EXP 17
45819: PUSH
45820: EMPTY
45821: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45822: LD_ADDR_EXP 18
45826: PUSH
45827: EMPTY
45828: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45829: LD_ADDR_EXP 19
45833: PUSH
45834: EMPTY
45835: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45836: LD_ADDR_EXP 20
45840: PUSH
45841: EMPTY
45842: ST_TO_ADDR
// mpStartingResources := [ ] ;
45843: LD_ADDR_EXP 15
45847: PUSH
45848: EMPTY
45849: ST_TO_ADDR
// mpStartPos := [ ] ;
45850: LD_ADDR_EXP 21
45854: PUSH
45855: EMPTY
45856: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45857: LD_ADDR_EXP 22
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45866: LD_ADDR_EXP 23
45870: PUSH
45871: EMPTY
45872: ST_TO_ADDR
// mpApemans := [ ] ;
45873: LD_ADDR_EXP 30
45877: PUSH
45878: EMPTY
45879: ST_TO_ADDR
// mpApemansArea := [ ] ;
45880: LD_ADDR_EXP 31
45884: PUSH
45885: EMPTY
45886: ST_TO_ADDR
// mpRespawn := [ ] ;
45887: LD_ADDR_EXP 32
45891: PUSH
45892: EMPTY
45893: ST_TO_ADDR
// mpKingArea := 0 ;
45894: LD_ADDR_EXP 33
45898: PUSH
45899: LD_INT 0
45901: ST_TO_ADDR
// mpPoints := [ ] ;
45902: LD_ADDR_EXP 34
45906: PUSH
45907: EMPTY
45908: ST_TO_ADDR
// mpVehicles := 0 ;
45909: LD_ADDR_EXP 35
45913: PUSH
45914: LD_INT 0
45916: ST_TO_ADDR
// mpShipments := 0 ;
45917: LD_ADDR_EXP 27
45921: PUSH
45922: LD_INT 0
45924: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45925: LD_ADDR_EXP 39
45929: PUSH
45930: EMPTY
45931: PUSH
45932: EMPTY
45933: PUSH
45934: EMPTY
45935: PUSH
45936: EMPTY
45937: PUSH
45938: EMPTY
45939: PUSH
45940: EMPTY
45941: PUSH
45942: EMPTY
45943: PUSH
45944: EMPTY
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// mpEmissions := 0 ;
45956: LD_ADDR_EXP 36
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45964: LD_ADDR_EXP 25
45968: PUSH
45969: LD_INT 3
45971: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45972: LD_ADDR_EXP 24
45976: PUSH
45977: LD_INT 15
45979: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45980: LD_ADDR_EXP 37
45984: PUSH
45985: LD_INT 0
45987: ST_TO_ADDR
// mpGameActive := false ;
45988: LD_ADDR_EXP 38
45992: PUSH
45993: LD_INT 0
45995: ST_TO_ADDR
// mpBlockRespThread := false ;
45996: LD_ADDR_EXP 40
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// for i := 1 to 32 do
46004: LD_ADDR_VAR 0 2
46008: PUSH
46009: DOUBLE
46010: LD_INT 1
46012: DEC
46013: ST_TO_ADDR
46014: LD_INT 32
46016: PUSH
46017: FOR_TO
46018: IFFALSE 46045
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46020: LD_ADDR_EXP 6
46024: PUSH
46025: LD_EXP 6
46029: PPUSH
46030: LD_VAR 0 2
46034: PPUSH
46035: LD_INT 0
46037: PPUSH
46038: CALL_OW 1
46042: ST_TO_ADDR
46043: GO 46017
46045: POP
46046: POP
// end ;
46047: LD_VAR 0 1
46051: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46052: LD_INT 0
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46068: LD_ADDR_VAR 0 14
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// for i in gameTypes do
46087: LD_ADDR_VAR 0 2
46091: PUSH
46092: LD_VAR 0 14
46096: PUSH
46097: FOR_IN
46098: IFFALSE 46107
// disable ( i ) ;
46100: LD_VAR 0 2
46104: DISABLE_MARKED
46105: GO 46097
46107: POP
46108: POP
// if Multiplayer then
46109: LD_OWVAR 4
46113: IFFALSE 46297
// begin mpGameType := mp_game_type ;
46115: LD_ADDR_EXP 3
46119: PUSH
46120: LD_OWVAR 6
46124: ST_TO_ADDR
// your_side := mp_player_side ;
46125: LD_ADDR_OWVAR 2
46129: PUSH
46130: LD_OWVAR 7
46134: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46135: LD_ADDR_EXP 7
46139: PUSH
46140: LD_OWVAR 17
46144: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46145: LD_ADDR_EXP 8
46149: PUSH
46150: LD_OWVAR 15
46154: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46155: LD_ADDR_EXP 9
46159: PUSH
46160: LD_OWVAR 16
46164: ST_TO_ADDR
// mpTeams := mp_teams ;
46165: LD_ADDR_EXP 10
46169: PUSH
46170: LD_OWVAR 12
46174: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46175: LD_ADDR_VAR 0 2
46179: PUSH
46180: DOUBLE
46181: LD_INT 1
46183: DEC
46184: ST_TO_ADDR
46185: LD_EXP 4
46189: PPUSH
46190: CALL 5044 0 1
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46272
// begin setting := mpGameSettingsKeys [ i ] ;
46198: LD_ADDR_VAR 0 12
46202: PUSH
46203: LD_EXP 4
46207: PUSH
46208: LD_VAR 0 2
46212: ARRAY
46213: ST_TO_ADDR
// if setting then
46214: LD_VAR 0 12
46218: IFFALSE 46270
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46220: LD_ADDR_EXP 6
46224: PUSH
46225: LD_EXP 6
46229: PPUSH
46230: LD_VAR 0 2
46234: PPUSH
46235: LD_EXP 5
46239: PUSH
46240: LD_VAR 0 2
46244: ARRAY
46245: PUSH
46246: LD_VAR 0 2
46250: PUSH
46251: LD_INT 1
46253: MINUS
46254: PPUSH
46255: CALL_OW 426
46259: PUSH
46260: LD_INT 1
46262: PLUS
46263: ARRAY
46264: PPUSH
46265: CALL_OW 1
46269: ST_TO_ADDR
// end ;
46270: GO 46195
46272: POP
46273: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46274: LD_ADDR_EXP 11
46278: PUSH
46279: LD_EXP 8
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: DIFF
46290: PUSH
46291: LD_INT 1
46293: GREATER
46294: ST_TO_ADDR
// end else
46295: GO 46297
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46297: LD_EXP 3
46301: PPUSH
46302: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46306: LD_EXP 18
46310: PPUSH
46311: CALL 5044 0 1
46315: IFFALSE 46346
// begin for i in mpMarkedAreas do
46317: LD_ADDR_VAR 0 2
46321: PUSH
46322: LD_EXP 18
46326: PUSH
46327: FOR_IN
46328: IFFALSE 46344
// SetAreaMapShow ( i , 0 ) ;
46330: LD_VAR 0 2
46334: PPUSH
46335: LD_INT 0
46337: PPUSH
46338: CALL_OW 424
46342: GO 46327
46344: POP
46345: POP
// end ; for i := 1 to 8 do
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: DOUBLE
46352: LD_INT 1
46354: DEC
46355: ST_TO_ADDR
46356: LD_INT 8
46358: PUSH
46359: FOR_TO
46360: IFFALSE 47576
// begin if not mpSidePositions [ i ] then
46362: LD_EXP 7
46366: PUSH
46367: LD_VAR 0 2
46371: ARRAY
46372: NOT
46373: IFFALSE 46377
// continue ;
46375: GO 46359
// side := i ;
46377: LD_ADDR_VAR 0 7
46381: PUSH
46382: LD_VAR 0 2
46386: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_EXP 9
46396: PUSH
46397: LD_VAR 0 2
46401: ARRAY
46402: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46403: LD_ADDR_VAR 0 8
46407: PUSH
46408: LD_EXP 7
46412: PUSH
46413: LD_VAR 0 2
46417: ARRAY
46418: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46419: LD_EXP 12
46423: PPUSH
46424: CALL 5044 0 1
46428: IFFALSE 46505
// begin for j in mpOilDeposits [ pos ] do
46430: LD_ADDR_VAR 0 3
46434: PUSH
46435: LD_EXP 12
46439: PUSH
46440: LD_VAR 0 8
46444: ARRAY
46445: PUSH
46446: FOR_IN
46447: IFFALSE 46503
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46449: LD_VAR 0 3
46453: PUSH
46454: LD_INT 1
46456: ARRAY
46457: PPUSH
46458: LD_VAR 0 3
46462: PUSH
46463: LD_INT 2
46465: ARRAY
46466: PPUSH
46467: LD_INT 2
46469: PPUSH
46470: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46474: LD_VAR 0 3
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: PPUSH
46483: LD_VAR 0 3
46487: PUSH
46488: LD_INT 2
46490: ARRAY
46491: PPUSH
46492: LD_VAR 0 7
46496: PPUSH
46497: CALL_OW 441
// end ;
46501: GO 46446
46503: POP
46504: POP
// end ; if Count ( mpSibDeposits ) then
46505: LD_EXP 13
46509: PPUSH
46510: CALL 5044 0 1
46514: IFFALSE 46591
// begin for j in mpSibDeposits [ pos ] do
46516: LD_ADDR_VAR 0 3
46520: PUSH
46521: LD_EXP 13
46525: PUSH
46526: LD_VAR 0 8
46530: ARRAY
46531: PUSH
46532: FOR_IN
46533: IFFALSE 46589
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46535: LD_VAR 0 3
46539: PUSH
46540: LD_INT 1
46542: ARRAY
46543: PPUSH
46544: LD_VAR 0 3
46548: PUSH
46549: LD_INT 2
46551: ARRAY
46552: PPUSH
46553: LD_INT 3
46555: PPUSH
46556: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46560: LD_VAR 0 3
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: LD_VAR 0 3
46573: PUSH
46574: LD_INT 2
46576: ARRAY
46577: PPUSH
46578: LD_VAR 0 7
46582: PPUSH
46583: CALL_OW 441
// end ;
46587: GO 46532
46589: POP
46590: POP
// end ; InitBc ;
46591: CALL_OW 21
// InitUc ;
46595: CALL_OW 18
// uc_side := side ;
46599: LD_ADDR_OWVAR 20
46603: PUSH
46604: LD_VAR 0 7
46608: ST_TO_ADDR
// uc_nation := nation ;
46609: LD_ADDR_OWVAR 21
46613: PUSH
46614: LD_VAR 0 9
46618: ST_TO_ADDR
// if Count ( mpDepots ) then
46619: LD_EXP 14
46623: PPUSH
46624: CALL 5044 0 1
46628: IFFALSE 46798
// begin bc_level := 0 ;
46630: LD_ADDR_OWVAR 43
46634: PUSH
46635: LD_INT 0
46637: ST_TO_ADDR
// bc_type := b_depot ;
46638: LD_ADDR_OWVAR 42
46642: PUSH
46643: LD_INT 0
46645: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46646: LD_ADDR_VAR 0 4
46650: PUSH
46651: LD_EXP 14
46655: PUSH
46656: LD_VAR 0 8
46660: ARRAY
46661: PUSH
46662: LD_INT 1
46664: ARRAY
46665: PPUSH
46666: LD_EXP 14
46670: PUSH
46671: LD_VAR 0 8
46675: ARRAY
46676: PUSH
46677: LD_INT 2
46679: ARRAY
46680: PPUSH
46681: LD_EXP 14
46685: PUSH
46686: LD_VAR 0 8
46690: ARRAY
46691: PUSH
46692: LD_INT 3
46694: ARRAY
46695: PPUSH
46696: CALL_OW 47
46700: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46701: LD_VAR 0 4
46705: PPUSH
46706: LD_STRING @
46708: PUSH
46709: LD_VAR 0 7
46713: STR
46714: PPUSH
46715: CALL_OW 500
// SetTag ( b , side ) ;
46719: LD_VAR 0 4
46723: PPUSH
46724: LD_VAR 0 7
46728: PPUSH
46729: CALL_OW 109
// if Count ( mpStartingResources ) then
46733: LD_EXP 15
46737: PPUSH
46738: CALL 5044 0 1
46742: IFFALSE 46796
// begin for j := 1 to mpStartingResources do
46744: LD_ADDR_VAR 0 3
46748: PUSH
46749: DOUBLE
46750: LD_INT 1
46752: DEC
46753: ST_TO_ADDR
46754: LD_EXP 15
46758: PUSH
46759: FOR_TO
46760: IFFALSE 46794
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46762: LD_VAR 0 4
46766: PPUSH
46767: CALL_OW 274
46771: PPUSH
46772: LD_VAR 0 3
46776: PPUSH
46777: LD_EXP 15
46781: PUSH
46782: LD_VAR 0 3
46786: ARRAY
46787: PPUSH
46788: CALL_OW 277
46792: GO 46759
46794: POP
46795: POP
// end ; end else
46796: GO 46945
// if Count ( mpStartingResources ) then
46798: LD_EXP 15
46802: PPUSH
46803: CALL 5044 0 1
46807: IFFALSE 46945
// begin for j := 1 to mpStartingResources do
46809: LD_ADDR_VAR 0 3
46813: PUSH
46814: DOUBLE
46815: LD_INT 1
46817: DEC
46818: ST_TO_ADDR
46819: LD_EXP 15
46823: PUSH
46824: FOR_TO
46825: IFFALSE 46943
// begin resources := mpStartingResources [ j ] ;
46827: LD_ADDR_VAR 0 13
46831: PUSH
46832: LD_EXP 15
46836: PUSH
46837: LD_VAR 0 3
46841: ARRAY
46842: ST_TO_ADDR
// repeat if resources >= 50 then
46843: LD_VAR 0 13
46847: PUSH
46848: LD_INT 50
46850: GREATEREQUAL
46851: IFFALSE 46897
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46853: LD_VAR 0 3
46857: PPUSH
46858: LD_INT 5
46860: PPUSH
46861: LD_VAR 0 5
46865: PPUSH
46866: LD_VAR 0 6
46870: PPUSH
46871: LD_INT 4
46873: PPUSH
46874: LD_INT 0
46876: PPUSH
46877: CALL_OW 60
// resources := resources - 50 ;
46881: LD_ADDR_VAR 0 13
46885: PUSH
46886: LD_VAR 0 13
46890: PUSH
46891: LD_INT 50
46893: MINUS
46894: ST_TO_ADDR
// end else
46895: GO 46931
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46897: LD_VAR 0 3
46901: PPUSH
46902: LD_VAR 0 13
46906: PUSH
46907: LD_INT 10
46909: DIV
46910: PPUSH
46911: LD_VAR 0 5
46915: PPUSH
46916: LD_VAR 0 6
46920: PPUSH
46921: LD_INT 4
46923: PPUSH
46924: LD_INT 0
46926: PPUSH
46927: CALL_OW 60
// until resources <= 0 ;
46931: LD_VAR 0 13
46935: PUSH
46936: LD_INT 0
46938: LESSEQUAL
46939: IFFALSE 46843
// end ;
46941: GO 46824
46943: POP
46944: POP
// end ; if Count ( mpBuildings ) then
46945: LD_EXP 17
46949: PPUSH
46950: CALL 5044 0 1
46954: IFFALSE 47032
// begin for j in mpBuildings [ pos ] do
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_EXP 17
46965: PUSH
46966: LD_VAR 0 8
46970: ARRAY
46971: PUSH
46972: FOR_IN
46973: IFFALSE 47030
// begin bc_level := 0 ;
46975: LD_ADDR_OWVAR 43
46979: PUSH
46980: LD_INT 0
46982: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46983: LD_ADDR_OWVAR 42
46987: PUSH
46988: LD_VAR 0 3
46992: PUSH
46993: LD_INT 1
46995: ARRAY
46996: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46997: LD_VAR 0 3
47001: PUSH
47002: LD_INT 2
47004: ARRAY
47005: PPUSH
47006: LD_VAR 0 3
47010: PUSH
47011: LD_INT 3
47013: ARRAY
47014: PPUSH
47015: LD_VAR 0 3
47019: PUSH
47020: LD_INT 4
47022: ARRAY
47023: PPUSH
47024: CALL_OW 47
// end ;
47028: GO 46972
47030: POP
47031: POP
// end ; if mpBattleFlag > - 1 then
47032: LD_EXP 22
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: GREATER
47041: IFFALSE 47200
// begin x := mpStartPos [ pos ] [ 1 ] ;
47043: LD_ADDR_VAR 0 5
47047: PUSH
47048: LD_EXP 21
47052: PUSH
47053: LD_VAR 0 8
47057: ARRAY
47058: PUSH
47059: LD_INT 1
47061: ARRAY
47062: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47063: LD_ADDR_VAR 0 6
47067: PUSH
47068: LD_EXP 21
47072: PUSH
47073: LD_VAR 0 8
47077: ARRAY
47078: PUSH
47079: LD_INT 2
47081: ARRAY
47082: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47083: LD_VAR 0 5
47087: PPUSH
47088: LD_VAR 0 6
47092: PPUSH
47093: LD_INT 12
47095: PPUSH
47096: LD_INT 2
47098: PPUSH
47099: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47103: LD_ADDR_EXP 23
47107: PUSH
47108: LD_EXP 23
47112: PPUSH
47113: LD_VAR 0 7
47117: PPUSH
47118: LD_VAR 0 7
47122: PPUSH
47123: LD_VAR 0 5
47127: PPUSH
47128: LD_VAR 0 6
47132: PPUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 100
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 70
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 40
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 10
47165: PUSH
47166: LD_INT 25
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 20
47175: PUSH
47176: LD_INT 100
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: PPUSH
47190: CALL_OW 418
47194: PPUSH
47195: CALL_OW 1
47199: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47200: LD_EXP 26
47204: PUSH
47205: LD_INT 20
47207: PPUSH
47208: LD_VAR 0 7
47212: PPUSH
47213: CALL_OW 321
47217: PUSH
47218: LD_INT 1
47220: EQUAL
47221: AND
47222: IFFALSE 47239
// SetTech ( tech_SibDet , side , state_researched ) ;
47224: LD_INT 20
47226: PPUSH
47227: LD_VAR 0 7
47231: PPUSH
47232: LD_INT 2
47234: PPUSH
47235: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47239: LD_INT 24
47241: PPUSH
47242: LD_VAR 0 7
47246: PPUSH
47247: LD_INT 0
47249: PPUSH
47250: CALL_OW 322
// if mpSibBomb = 1 then
47254: LD_EXP 28
47258: PUSH
47259: LD_INT 1
47261: EQUAL
47262: IFFALSE 47281
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47264: LD_INT 25
47266: PPUSH
47267: LD_VAR 0 7
47271: PPUSH
47272: LD_INT 1
47274: PPUSH
47275: CALL_OW 322
// end else
47279: GO 47296
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47281: LD_INT 25
47283: PPUSH
47284: LD_VAR 0 7
47288: PPUSH
47289: LD_INT 0
47291: PPUSH
47292: CALL_OW 322
// end ; if mpVehicles then
47296: LD_EXP 35
47300: IFFALSE 47399
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47302: LD_ADDR_VAR 0 3
47306: PUSH
47307: LD_VAR 0 7
47311: PPUSH
47312: LD_VAR 0 9
47316: PPUSH
47317: LD_EXP 35
47321: PPUSH
47322: CALL 48486 0 3
47326: PUSH
47327: FOR_IN
47328: IFFALSE 47397
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47330: LD_VAR 0 3
47334: PPUSH
47335: LD_INT 0
47337: PPUSH
47338: LD_INT 5
47340: PPUSH
47341: CALL_OW 12
47345: PPUSH
47346: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47350: LD_VAR 0 3
47354: PPUSH
47355: LD_EXP 21
47359: PUSH
47360: LD_VAR 0 8
47364: ARRAY
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PPUSH
47370: LD_EXP 21
47374: PUSH
47375: LD_VAR 0 8
47379: ARRAY
47380: PUSH
47381: LD_INT 2
47383: ARRAY
47384: PPUSH
47385: LD_INT 12
47387: PPUSH
47388: LD_INT 0
47390: PPUSH
47391: CALL_OW 50
// end ;
47395: GO 47327
47397: POP
47398: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47399: LD_ADDR_VAR 0 11
47403: PUSH
47404: LD_VAR 0 7
47408: PPUSH
47409: LD_VAR 0 9
47413: PPUSH
47414: LD_EXP 24
47418: PPUSH
47419: LD_EXP 25
47423: PPUSH
47424: CALL 47988 0 4
47428: ST_TO_ADDR
// for j in team do
47429: LD_ADDR_VAR 0 3
47433: PUSH
47434: LD_VAR 0 11
47438: PUSH
47439: FOR_IN
47440: IFFALSE 47489
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47442: LD_VAR 0 3
47446: PPUSH
47447: LD_EXP 21
47451: PUSH
47452: LD_VAR 0 8
47456: ARRAY
47457: PUSH
47458: LD_INT 1
47460: ARRAY
47461: PPUSH
47462: LD_EXP 21
47466: PUSH
47467: LD_VAR 0 8
47471: ARRAY
47472: PUSH
47473: LD_INT 2
47475: ARRAY
47476: PPUSH
47477: LD_INT 12
47479: PPUSH
47480: LD_INT 0
47482: PPUSH
47483: CALL_OW 50
47487: GO 47439
47489: POP
47490: POP
// if mpApemans then
47491: LD_EXP 30
47495: IFFALSE 47574
// begin for j := 1 to mpApemans do
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: DOUBLE
47503: LD_INT 1
47505: DEC
47506: ST_TO_ADDR
47507: LD_EXP 30
47511: PUSH
47512: FOR_TO
47513: IFFALSE 47572
// begin PrepareApeman ( - 5 ) ;
47515: LD_INT 5
47517: NEG
47518: PPUSH
47519: CALL 36901 0 1
// ape := CreateHuman ;
47523: LD_ADDR_VAR 0 10
47527: PUSH
47528: CALL_OW 44
47532: ST_TO_ADDR
// SetTag ( ape , side ) ;
47533: LD_VAR 0 10
47537: PPUSH
47538: LD_VAR 0 7
47542: PPUSH
47543: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47547: LD_VAR 0 10
47551: PPUSH
47552: LD_EXP 31
47556: PUSH
47557: LD_VAR 0 8
47561: ARRAY
47562: PPUSH
47563: LD_INT 0
47565: PPUSH
47566: CALL_OW 49
// end ;
47570: GO 47512
47572: POP
47573: POP
// end ; end ;
47574: GO 46359
47576: POP
47577: POP
// if not mpTeamGame then
47578: LD_EXP 11
47582: NOT
47583: IFFALSE 47681
// begin for i := 1 to 8 do
47585: LD_ADDR_VAR 0 2
47589: PUSH
47590: DOUBLE
47591: LD_INT 1
47593: DEC
47594: ST_TO_ADDR
47595: LD_INT 8
47597: PUSH
47598: FOR_TO
47599: IFFALSE 47677
// for j := 1 to 8 do
47601: LD_ADDR_VAR 0 3
47605: PUSH
47606: DOUBLE
47607: LD_INT 1
47609: DEC
47610: ST_TO_ADDR
47611: LD_INT 8
47613: PUSH
47614: FOR_TO
47615: IFFALSE 47673
// if i <> j then
47617: LD_VAR 0 2
47621: PUSH
47622: LD_VAR 0 3
47626: NONEQUAL
47627: IFFALSE 47651
// SetAttitude ( i , j , att_neutral , true ) else
47629: LD_VAR 0 2
47633: PPUSH
47634: LD_VAR 0 3
47638: PPUSH
47639: LD_INT 0
47641: PPUSH
47642: LD_INT 1
47644: PPUSH
47645: CALL_OW 80
47649: GO 47671
// SetAttitude ( i , j , att_friend , true ) ;
47651: LD_VAR 0 2
47655: PPUSH
47656: LD_VAR 0 3
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: LD_INT 1
47666: PPUSH
47667: CALL_OW 80
47671: GO 47614
47673: POP
47674: POP
47675: GO 47598
47677: POP
47678: POP
// end else
47679: GO 47856
// begin if mpSharedVision then
47681: LD_EXP 16
47685: IFFALSE 47750
// begin for i in mpTeams do
47687: LD_ADDR_VAR 0 2
47691: PUSH
47692: LD_EXP 10
47696: PUSH
47697: FOR_IN
47698: IFFALSE 47748
// for j := 2 to i do
47700: LD_ADDR_VAR 0 3
47704: PUSH
47705: DOUBLE
47706: LD_INT 2
47708: DEC
47709: ST_TO_ADDR
47710: LD_VAR 0 2
47714: PUSH
47715: FOR_TO
47716: IFFALSE 47744
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47718: LD_VAR 0 2
47722: PUSH
47723: LD_VAR 0 3
47727: ARRAY
47728: PPUSH
47729: LD_VAR 0 2
47733: PUSH
47734: LD_INT 1
47736: ARRAY
47737: PPUSH
47738: CALL_OW 343
47742: GO 47715
47744: POP
47745: POP
47746: GO 47697
47748: POP
47749: POP
// end ; for i := 1 to 8 do
47750: LD_ADDR_VAR 0 2
47754: PUSH
47755: DOUBLE
47756: LD_INT 1
47758: DEC
47759: ST_TO_ADDR
47760: LD_INT 8
47762: PUSH
47763: FOR_TO
47764: IFFALSE 47854
// for j := 1 to 8 do
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: DOUBLE
47772: LD_INT 1
47774: DEC
47775: ST_TO_ADDR
47776: LD_INT 8
47778: PUSH
47779: FOR_TO
47780: IFFALSE 47850
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47782: LD_EXP 8
47786: PUSH
47787: LD_VAR 0 2
47791: ARRAY
47792: PUSH
47793: LD_EXP 8
47797: PUSH
47798: LD_VAR 0 3
47802: ARRAY
47803: EQUAL
47804: IFFALSE 47828
// SetAttitude ( i , j , att_friend , true ) else
47806: LD_VAR 0 2
47810: PPUSH
47811: LD_VAR 0 3
47815: PPUSH
47816: LD_INT 1
47818: PPUSH
47819: LD_INT 1
47821: PPUSH
47822: CALL_OW 80
47826: GO 47848
// SetAttitude ( i , j , att_enemy , true ) ;
47828: LD_VAR 0 2
47832: PPUSH
47833: LD_VAR 0 3
47837: PPUSH
47838: LD_INT 2
47840: PPUSH
47841: LD_INT 1
47843: PPUSH
47844: CALL_OW 80
47848: GO 47779
47850: POP
47851: POP
47852: GO 47763
47854: POP
47855: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47856: LD_ADDR_OWVAR 71
47860: PUSH
47861: LD_EXP 9
47865: PUSH
47866: LD_OWVAR 2
47870: ARRAY
47871: ST_TO_ADDR
// if IAmSpec then
47872: CALL_OW 531
47876: IFFALSE 47917
// begin FogOff ( true ) ;
47878: LD_INT 1
47880: PPUSH
47881: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47885: LD_EXP 29
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: PUSH
47894: LD_INT 2
47896: DIV
47897: PPUSH
47898: LD_EXP 29
47902: PUSH
47903: LD_INT 2
47905: ARRAY
47906: PUSH
47907: LD_INT 2
47909: DIV
47910: PPUSH
47911: CALL_OW 86
// end else
47915: GO 47963
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47917: LD_EXP 21
47921: PUSH
47922: LD_EXP 7
47926: PUSH
47927: LD_OWVAR 2
47931: ARRAY
47932: ARRAY
47933: PUSH
47934: LD_INT 1
47936: ARRAY
47937: PPUSH
47938: LD_EXP 21
47942: PUSH
47943: LD_EXP 7
47947: PUSH
47948: LD_OWVAR 2
47952: ARRAY
47953: ARRAY
47954: PUSH
47955: LD_INT 2
47957: ARRAY
47958: PPUSH
47959: CALL_OW 86
// end ; BeginBuildUp ;
47963: CALL 48964 0 0
// enable ( mpActive ) ;
47967: LD_INT 100
47969: ENABLE_MARKED
// enable ( mpGameType ) ;
47970: LD_EXP 3
47974: ENABLE_MARKED
// mpGameActive := true ;
47975: LD_ADDR_EXP 38
47979: PUSH
47980: LD_INT 1
47982: ST_TO_ADDR
// end ;
47983: LD_VAR 0 1
47987: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47988: LD_INT 0
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
// result := [ ] ;
47994: LD_ADDR_VAR 0 5
47998: PUSH
47999: EMPTY
48000: ST_TO_ADDR
// class := class_soldier ;
48001: LD_ADDR_VAR 0 8
48005: PUSH
48006: LD_INT 1
48008: ST_TO_ADDR
// uc_side := side ;
48009: LD_ADDR_OWVAR 20
48013: PUSH
48014: LD_VAR 0 1
48018: ST_TO_ADDR
// uc_nation := nation ;
48019: LD_ADDR_OWVAR 21
48023: PUSH
48024: LD_VAR 0 2
48028: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48029: LD_ADDR_OWVAR 26
48033: PUSH
48034: LD_OWVAR 19
48038: PUSH
48039: LD_VAR 0 1
48043: ARRAY
48044: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48045: LD_INT 1
48047: PPUSH
48048: LD_INT 2
48050: PPUSH
48051: CALL_OW 12
48055: PPUSH
48056: LD_VAR 0 8
48060: PPUSH
48061: LD_VAR 0 4
48065: PUSH
48066: LD_INT 2
48068: PLUS
48069: PPUSH
48070: CALL_OW 380
// hc_importance := 105 ;
48074: LD_ADDR_OWVAR 32
48078: PUSH
48079: LD_INT 105
48081: ST_TO_ADDR
// if Multiplayer then
48082: LD_OWVAR 4
48086: IFFALSE 48126
// begin hc_gallery := MULTIAVATARS ;
48088: LD_ADDR_OWVAR 33
48092: PUSH
48093: LD_STRING MULTIAVATARS
48095: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48096: LD_ADDR_OWVAR 34
48100: PUSH
48101: LD_VAR 0 1
48105: PPUSH
48106: CALL_OW 525
48110: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48111: LD_ADDR_OWVAR 27
48115: PUSH
48116: LD_VAR 0 1
48120: PPUSH
48121: CALL_OW 526
48125: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48126: LD_ADDR_VAR 0 5
48130: PUSH
48131: LD_VAR 0 5
48135: PPUSH
48136: CALL_OW 44
48140: PPUSH
48141: CALL 40653 0 2
48145: ST_TO_ADDR
// if mpTeamPreset then
48146: LD_LOC 1
48150: IFFALSE 48246
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48152: LD_LOC 1
48156: PUSH
48157: LD_INT 1
48159: ARRAY
48160: PPUSH
48161: LD_VAR 0 5
48165: PUSH
48166: LD_VAR 0 5
48170: ARRAY
48171: PPUSH
48172: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48176: LD_VAR 0 5
48180: PUSH
48181: LD_VAR 0 5
48185: ARRAY
48186: PPUSH
48187: LD_INT 1
48189: PPUSH
48190: LD_LOC 1
48194: PUSH
48195: LD_INT 1
48197: ARRAY
48198: PPUSH
48199: LD_INT 1
48201: PPUSH
48202: CALL_OW 260
48206: PPUSH
48207: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48211: LD_VAR 0 5
48215: PUSH
48216: LD_VAR 0 5
48220: ARRAY
48221: PPUSH
48222: LD_INT 2
48224: PPUSH
48225: LD_LOC 1
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: LD_INT 2
48236: PPUSH
48237: CALL_OW 260
48241: PPUSH
48242: CALL_OW 239
// end ; InitHc_All ( ) ;
48246: CALL_OW 584
// class := 2 ;
48250: LD_ADDR_VAR 0 8
48254: PUSH
48255: LD_INT 2
48257: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48258: LD_ADDR_VAR 0 6
48262: PUSH
48263: DOUBLE
48264: LD_INT 1
48266: DEC
48267: ST_TO_ADDR
48268: LD_VAR 0 3
48272: PUSH
48273: LD_INT 1
48275: MINUS
48276: PUSH
48277: FOR_TO
48278: IFFALSE 48462
// begin PrepareHuman ( false , class , skill ) ;
48280: LD_INT 0
48282: PPUSH
48283: LD_VAR 0 8
48287: PPUSH
48288: LD_VAR 0 4
48292: PPUSH
48293: CALL_OW 380
// un := CreateHuman ;
48297: LD_ADDR_VAR 0 7
48301: PUSH
48302: CALL_OW 44
48306: ST_TO_ADDR
// result := Join ( result , un ) ;
48307: LD_ADDR_VAR 0 5
48311: PUSH
48312: LD_VAR 0 5
48316: PPUSH
48317: LD_VAR 0 7
48321: PPUSH
48322: CALL 40653 0 2
48326: ST_TO_ADDR
// if mpTeamPreset then
48327: LD_LOC 1
48331: IFFALSE 48427
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48333: LD_LOC 1
48337: PUSH
48338: LD_VAR 0 6
48342: PUSH
48343: LD_INT 1
48345: PLUS
48346: ARRAY
48347: PPUSH
48348: LD_VAR 0 7
48352: PPUSH
48353: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48357: LD_VAR 0 7
48361: PPUSH
48362: LD_INT 1
48364: PPUSH
48365: LD_LOC 1
48369: PUSH
48370: LD_VAR 0 6
48374: PUSH
48375: LD_INT 1
48377: PLUS
48378: ARRAY
48379: PPUSH
48380: LD_INT 1
48382: PPUSH
48383: CALL_OW 260
48387: PPUSH
48388: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48392: LD_VAR 0 7
48396: PPUSH
48397: LD_INT 2
48399: PPUSH
48400: LD_LOC 1
48404: PUSH
48405: LD_VAR 0 6
48409: PUSH
48410: LD_INT 1
48412: PLUS
48413: ARRAY
48414: PPUSH
48415: LD_INT 2
48417: PPUSH
48418: CALL_OW 260
48422: PPUSH
48423: CALL_OW 239
// end ; class := Inc ( class ) ;
48427: LD_ADDR_VAR 0 8
48431: PUSH
48432: LD_VAR 0 8
48436: PPUSH
48437: CALL 42014 0 1
48441: ST_TO_ADDR
// if class = 5 then
48442: LD_VAR 0 8
48446: PUSH
48447: LD_INT 5
48449: EQUAL
48450: IFFALSE 48460
// class := 1 ;
48452: LD_ADDR_VAR 0 8
48456: PUSH
48457: LD_INT 1
48459: ST_TO_ADDR
// end ;
48460: GO 48277
48462: POP
48463: POP
// if not mpTeamPreset then
48464: LD_LOC 1
48468: NOT
48469: IFFALSE 48481
// mpTeamPreset := result ;
48471: LD_ADDR_LOC 1
48475: PUSH
48476: LD_VAR 0 5
48480: ST_TO_ADDR
// end ;
48481: LD_VAR 0 5
48485: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48486: LD_INT 0
48488: PPUSH
48489: PPUSH
// result := [ ] ;
48490: LD_ADDR_VAR 0 4
48494: PUSH
48495: EMPTY
48496: ST_TO_ADDR
// if not vehicles then
48497: LD_VAR 0 3
48501: NOT
48502: IFFALSE 48506
// exit ;
48504: GO 48665
// for i := 1 to vehicles [ nation ] do
48506: LD_ADDR_VAR 0 5
48510: PUSH
48511: DOUBLE
48512: LD_INT 1
48514: DEC
48515: ST_TO_ADDR
48516: LD_VAR 0 3
48520: PUSH
48521: LD_VAR 0 2
48525: ARRAY
48526: PUSH
48527: FOR_TO
48528: IFFALSE 48663
// begin uc_side := side ;
48530: LD_ADDR_OWVAR 20
48534: PUSH
48535: LD_VAR 0 1
48539: ST_TO_ADDR
// uc_nation := nation ;
48540: LD_ADDR_OWVAR 21
48544: PUSH
48545: LD_VAR 0 2
48549: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48550: LD_VAR 0 3
48554: PUSH
48555: LD_VAR 0 2
48559: ARRAY
48560: PUSH
48561: LD_VAR 0 5
48565: ARRAY
48566: PUSH
48567: LD_INT 1
48569: ARRAY
48570: PPUSH
48571: LD_VAR 0 3
48575: PUSH
48576: LD_VAR 0 2
48580: ARRAY
48581: PUSH
48582: LD_VAR 0 5
48586: ARRAY
48587: PUSH
48588: LD_INT 2
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 3
48596: PUSH
48597: LD_VAR 0 2
48601: ARRAY
48602: PUSH
48603: LD_VAR 0 5
48607: ARRAY
48608: PUSH
48609: LD_INT 3
48611: ARRAY
48612: PPUSH
48613: LD_VAR 0 3
48617: PUSH
48618: LD_VAR 0 2
48622: ARRAY
48623: PUSH
48624: LD_VAR 0 5
48628: ARRAY
48629: PUSH
48630: LD_INT 4
48632: ARRAY
48633: PPUSH
48634: LD_INT 80
48636: PPUSH
48637: CALL 7782 0 5
// result := Join ( result , CreateVehicle ) ;
48641: LD_ADDR_VAR 0 4
48645: PUSH
48646: LD_VAR 0 4
48650: PPUSH
48651: CALL_OW 45
48655: PPUSH
48656: CALL 40653 0 2
48660: ST_TO_ADDR
// end ;
48661: GO 48527
48663: POP
48664: POP
// end ;
48665: LD_VAR 0 4
48669: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48670: LD_INT 0
48672: PPUSH
48673: PPUSH
// for i in mpBattleFlags do
48674: LD_ADDR_VAR 0 3
48678: PUSH
48679: LD_EXP 23
48683: PUSH
48684: FOR_IN
48685: IFFALSE 48762
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48687: LD_VAR 0 3
48691: PPUSH
48692: LD_INT 1
48694: PUSH
48695: LD_VAR 0 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_VAR 0 1
48711: PUSH
48712: LD_REAL  7.00000000000000E-0001
48715: MUL
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: LD_VAR 0 1
48728: PUSH
48729: LD_REAL  4.00000000000000E-0001
48732: MUL
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 20
48740: PUSH
48741: LD_VAR 0 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: PPUSH
48756: CALL_OW 423
48760: GO 48684
48762: POP
48763: POP
// end ;
48764: LD_VAR 0 2
48768: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48769: LD_INT 100
48771: IFFALSE 48866
48773: GO 48775
48775: DISABLE
48776: LD_INT 0
48778: PPUSH
48779: PPUSH
// begin if mpBattleFlag <= 0 then
48780: LD_EXP 22
48784: PUSH
48785: LD_INT 0
48787: LESSEQUAL
48788: IFFALSE 48792
// exit ;
48790: GO 48866
// strength := 100 ;
48792: LD_ADDR_VAR 0 2
48796: PUSH
48797: LD_INT 100
48799: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48800: LD_EXP 22
48804: PPUSH
48805: CALL_OW 67
// strength := Dec ( strength ) ;
48809: LD_ADDR_VAR 0 2
48813: PUSH
48814: LD_VAR 0 2
48818: PPUSH
48819: CALL 42036 0 1
48823: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48824: LD_VAR 0 2
48828: PPUSH
48829: CALL 48670 0 1
// until not strength ;
48833: LD_VAR 0 2
48837: NOT
48838: IFFALSE 48800
// for i in mpBattleFlags do
48840: LD_ADDR_VAR 0 1
48844: PUSH
48845: LD_EXP 23
48849: PUSH
48850: FOR_IN
48851: IFFALSE 48864
// KillBattleFlag ( i ) ;
48853: LD_VAR 0 1
48857: PPUSH
48858: CALL_OW 419
48862: GO 48850
48864: POP
48865: POP
// end ;
48866: PPOPN 2
48868: END
// every 0 0$1 marked mpActive do var side , tmp ;
48869: GO 48871
48871: DISABLE
48872: LD_INT 0
48874: PPUSH
48875: PPUSH
// begin if mpSibBomb <= 1 then
48876: LD_EXP 28
48880: PUSH
48881: LD_INT 1
48883: LESSEQUAL
48884: IFFALSE 48888
// exit ;
48886: GO 48961
// tmp := mpSibBomb ;
48888: LD_ADDR_VAR 0 2
48892: PUSH
48893: LD_EXP 28
48897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48898: LD_INT 35
48900: PPUSH
48901: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48905: LD_ADDR_VAR 0 2
48909: PUSH
48910: LD_VAR 0 2
48914: PUSH
48915: LD_INT 35
48917: MINUS
48918: ST_TO_ADDR
// until not tmp ;
48919: LD_VAR 0 2
48923: NOT
48924: IFFALSE 48898
// for side := 1 to 8 do
48926: LD_ADDR_VAR 0 1
48930: PUSH
48931: DOUBLE
48932: LD_INT 1
48934: DEC
48935: ST_TO_ADDR
48936: LD_INT 8
48938: PUSH
48939: FOR_TO
48940: IFFALSE 48959
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48942: LD_INT 25
48944: PPUSH
48945: LD_VAR 0 1
48949: PPUSH
48950: LD_INT 1
48952: PPUSH
48953: CALL_OW 322
48957: GO 48939
48959: POP
48960: POP
// end ;
48961: PPOPN 2
48963: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48964: LD_INT 0
48966: PPUSH
48967: PPUSH
48968: PPUSH
// mpBuildUpTimeDelay := 0 ;
48969: LD_ADDR_EXP 41
48973: PUSH
48974: LD_INT 0
48976: ST_TO_ADDR
// if not mpBuildUpTime then
48977: LD_EXP 20
48981: NOT
48982: IFFALSE 48986
// exit ;
48984: GO 49169
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48986: LD_ADDR_EXP 41
48990: PUSH
48991: LD_INT 8400
48993: PUSH
48994: LD_INT 2100
48996: PUSH
48997: LD_EXP 20
49001: MUL
49002: PLUS
49003: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49004: LD_ADDR_EXP 42
49008: PUSH
49009: LD_INT 1
49011: ST_TO_ADDR
// for i := 1 to 8 do
49012: LD_ADDR_VAR 0 2
49016: PUSH
49017: DOUBLE
49018: LD_INT 1
49020: DEC
49021: ST_TO_ADDR
49022: LD_INT 8
49024: PUSH
49025: FOR_TO
49026: IFFALSE 49167
// if mpSidePositions [ i ] then
49028: LD_EXP 7
49032: PUSH
49033: LD_VAR 0 2
49037: ARRAY
49038: IFFALSE 49165
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49040: LD_EXP 19
49044: PUSH
49045: LD_EXP 7
49049: PUSH
49050: LD_VAR 0 2
49054: ARRAY
49055: ARRAY
49056: PPUSH
49057: LD_INT 5
49059: PPUSH
49060: CALL_OW 424
// for j := 1 to 8 do
49064: LD_ADDR_VAR 0 3
49068: PUSH
49069: DOUBLE
49070: LD_INT 1
49072: DEC
49073: ST_TO_ADDR
49074: LD_INT 8
49076: PUSH
49077: FOR_TO
49078: IFFALSE 49163
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49080: LD_EXP 7
49084: PUSH
49085: LD_VAR 0 3
49089: ARRAY
49090: PUSH
49091: LD_EXP 8
49095: PUSH
49096: LD_VAR 0 2
49100: ARRAY
49101: PUSH
49102: LD_EXP 8
49106: PUSH
49107: LD_VAR 0 3
49111: ARRAY
49112: NONEQUAL
49113: PUSH
49114: LD_EXP 11
49118: NOT
49119: PUSH
49120: LD_VAR 0 2
49124: PUSH
49125: LD_VAR 0 3
49129: NONEQUAL
49130: AND
49131: OR
49132: AND
49133: IFFALSE 49161
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49135: LD_VAR 0 3
49139: PPUSH
49140: LD_EXP 19
49144: PUSH
49145: LD_EXP 7
49149: PUSH
49150: LD_VAR 0 2
49154: ARRAY
49155: ARRAY
49156: PPUSH
49157: CALL_OW 333
49161: GO 49077
49163: POP
49164: POP
// end ;
49165: GO 49025
49167: POP
49168: POP
// end ;
49169: LD_VAR 0 1
49173: RET
// function EndBuildUp ; var i , j ; begin
49174: LD_INT 0
49176: PPUSH
49177: PPUSH
49178: PPUSH
// mpBuildUpTimeActive := false ;
49179: LD_ADDR_EXP 42
49183: PUSH
49184: LD_INT 0
49186: ST_TO_ADDR
// for i := 1 to 8 do
49187: LD_ADDR_VAR 0 2
49191: PUSH
49192: DOUBLE
49193: LD_INT 1
49195: DEC
49196: ST_TO_ADDR
49197: LD_INT 8
49199: PUSH
49200: FOR_TO
49201: IFFALSE 49342
// if mpSidePositions [ i ] then
49203: LD_EXP 7
49207: PUSH
49208: LD_VAR 0 2
49212: ARRAY
49213: IFFALSE 49340
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49215: LD_EXP 19
49219: PUSH
49220: LD_EXP 7
49224: PUSH
49225: LD_VAR 0 2
49229: ARRAY
49230: ARRAY
49231: PPUSH
49232: LD_INT 0
49234: PPUSH
49235: CALL_OW 424
// for j := 1 to 8 do
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: DOUBLE
49245: LD_INT 1
49247: DEC
49248: ST_TO_ADDR
49249: LD_INT 8
49251: PUSH
49252: FOR_TO
49253: IFFALSE 49338
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49255: LD_EXP 7
49259: PUSH
49260: LD_VAR 0 3
49264: ARRAY
49265: PUSH
49266: LD_EXP 8
49270: PUSH
49271: LD_VAR 0 2
49275: ARRAY
49276: PUSH
49277: LD_EXP 8
49281: PUSH
49282: LD_VAR 0 3
49286: ARRAY
49287: NONEQUAL
49288: PUSH
49289: LD_EXP 11
49293: NOT
49294: PUSH
49295: LD_VAR 0 2
49299: PUSH
49300: LD_VAR 0 3
49304: NONEQUAL
49305: AND
49306: OR
49307: AND
49308: IFFALSE 49336
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49310: LD_VAR 0 3
49314: PPUSH
49315: LD_EXP 19
49319: PUSH
49320: LD_EXP 7
49324: PUSH
49325: LD_VAR 0 2
49329: ARRAY
49330: ARRAY
49331: PPUSH
49332: CALL_OW 334
49336: GO 49252
49338: POP
49339: POP
// end ;
49340: GO 49200
49342: POP
49343: POP
// end ;
49344: LD_VAR 0 1
49348: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49349: LD_EXP 42
49353: IFFALSE 49528
49355: GO 49357
49357: DISABLE
49358: LD_INT 0
49360: PPUSH
49361: PPUSH
// begin for i := 1 to 8 do
49362: LD_ADDR_VAR 0 1
49366: PUSH
49367: DOUBLE
49368: LD_INT 1
49370: DEC
49371: ST_TO_ADDR
49372: LD_INT 8
49374: PUSH
49375: FOR_TO
49376: IFFALSE 49525
// if mpSidePositions [ i ] then
49378: LD_EXP 7
49382: PUSH
49383: LD_VAR 0 1
49387: ARRAY
49388: IFFALSE 49523
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49390: LD_ADDR_VAR 0 2
49394: PUSH
49395: LD_EXP 19
49399: PUSH
49400: LD_EXP 7
49404: PUSH
49405: LD_VAR 0 1
49409: ARRAY
49410: ARRAY
49411: PPUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 21
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 21
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 22
49442: PUSH
49443: LD_OWVAR 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PPUSH
49456: CALL_OW 70
49460: PUSH
49461: FOR_IN
49462: IFFALSE 49521
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49464: LD_EXP 8
49468: PUSH
49469: LD_VAR 0 1
49473: ARRAY
49474: PUSH
49475: LD_EXP 8
49479: PUSH
49480: LD_OWVAR 2
49484: ARRAY
49485: NONEQUAL
49486: PUSH
49487: LD_EXP 11
49491: NOT
49492: PUSH
49493: LD_VAR 0 1
49497: PUSH
49498: LD_OWVAR 2
49502: NONEQUAL
49503: AND
49504: OR
49505: IFFALSE 49519
// ComMoveToArea ( un , BuildUpEscape ) ;
49507: LD_VAR 0 2
49511: PPUSH
49512: LD_INT 9
49514: PPUSH
49515: CALL_OW 113
49519: GO 49461
49521: POP
49522: POP
49523: GO 49375
49525: POP
49526: POP
// enable ;
49527: ENABLE
// end ;
49528: PPOPN 2
49530: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49531: LD_EXP 20
49535: IFFALSE 49585
49537: GO 49539
49539: DISABLE
49540: LD_INT 0
49542: PPUSH
// begin tmp := mpBuildUpTime ;
49543: LD_ADDR_VAR 0 1
49547: PUSH
49548: LD_EXP 20
49552: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49553: LD_INT 35
49555: PPUSH
49556: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49560: LD_ADDR_VAR 0 1
49564: PUSH
49565: LD_VAR 0 1
49569: PUSH
49570: LD_INT 35
49572: MINUS
49573: ST_TO_ADDR
// until not tmp ;
49574: LD_VAR 0 1
49578: NOT
49579: IFFALSE 49553
// EndBuildUp ;
49581: CALL 49174 0 0
// end ;
49585: PPOPN 1
49587: END
// every 0 0$1 trigger mpActive marked mpWin do
49588: LD_INT 100
49590: IFFALSE 49624
49592: GO 49594
49594: DISABLE
// begin if IAmServer then
49595: CALL_OW 518
49599: IFFALSE 49608
// wait ( 0 0$3 ) ;
49601: LD_INT 105
49603: PPUSH
49604: CALL_OW 67
// if Multiplayer then
49608: LD_OWVAR 4
49612: IFFALSE 49620
// YouWinInMultiplayer else
49614: CALL_OW 106
49618: GO 49624
// YouWin ;
49620: CALL_OW 103
// end ;
49624: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49625: LD_INT 0
49627: PPUSH
// result := false ;
49628: LD_ADDR_VAR 0 3
49632: PUSH
49633: LD_INT 0
49635: ST_TO_ADDR
// case gameType of GameTypeNormal :
49636: LD_VAR 0 1
49640: PUSH
49641: LD_INT 1
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49649
49647: GO 49722
49649: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_INT 22
49657: PUSH
49658: LD_VAR 0 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 21
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 33
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 33
49692: PUSH
49693: LD_INT 5
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PPUSH
49710: CALL_OW 69
49714: PPUSH
49715: CALL 5044 0 1
49719: ST_TO_ADDR
// end ; GameTypeSurvival :
49720: GO 49957
49722: LD_INT 2
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49730
49728: GO 49858
49730: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49731: LD_ADDR_VAR 0 3
49735: PUSH
49736: LD_INT 22
49738: PUSH
49739: LD_VAR 0 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 30
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 30
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PPUSH
49780: CALL_OW 69
49784: PPUSH
49785: CALL 5044 0 1
49789: PUSH
49790: LD_INT 22
49792: PUSH
49793: LD_VAR 0 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 21
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 33
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 33
49827: PUSH
49828: LD_INT 5
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PPUSH
49845: CALL_OW 69
49849: PPUSH
49850: CALL 5044 0 1
49854: AND
49855: ST_TO_ADDR
// end ; GameTypeKing :
49856: GO 49957
49858: LD_INT 3
49860: DOUBLE
49861: EQUAL
49862: IFTRUE 49866
49864: GO 49956
49866: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49867: LD_ADDR_VAR 0 3
49871: PUSH
49872: LD_INT 22
49874: PUSH
49875: LD_VAR 0 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 21
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 33
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 33
49909: PUSH
49910: LD_INT 5
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PPUSH
49927: CALL_OW 69
49931: PPUSH
49932: CALL 5044 0 1
49936: PUSH
49937: LD_VAR 0 2
49941: PPUSH
49942: CALL 53147 0 1
49946: PUSH
49947: LD_EXP 34
49951: LESS
49952: AND
49953: ST_TO_ADDR
// end ; end ;
49954: GO 49957
49956: POP
// end ;
49957: LD_VAR 0 3
49961: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49962: LD_INT 100
49964: IFFALSE 50186
49966: GO 49968
49968: DISABLE
49969: LD_INT 0
49971: PPUSH
49972: PPUSH
// begin if Multiplayer then
49973: LD_OWVAR 4
49977: IFFALSE 49985
// SetPlayerSpectator ( ) else
49979: CALL_OW 572
49983: GO 49994
// FogOff ( your_side ) ;
49985: LD_OWVAR 2
49989: PPUSH
49990: CALL_OW 344
// repeat gameIsOn := false ;
49994: LD_ADDR_VAR 0 1
49998: PUSH
49999: LD_INT 0
50001: ST_TO_ADDR
// for i := 1 to 8 do
50002: LD_ADDR_VAR 0 2
50006: PUSH
50007: DOUBLE
50008: LD_INT 1
50010: DEC
50011: ST_TO_ADDR
50012: LD_INT 8
50014: PUSH
50015: FOR_TO
50016: IFFALSE 50138
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50018: LD_EXP 7
50022: PUSH
50023: LD_VAR 0 2
50027: ARRAY
50028: PUSH
50029: LD_VAR 0 2
50033: PPUSH
50034: CALL_OW 108
50038: AND
50039: PUSH
50040: LD_VAR 0 2
50044: PUSH
50045: LD_OWVAR 2
50049: NONEQUAL
50050: AND
50051: IFFALSE 50136
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50053: LD_EXP 8
50057: PUSH
50058: LD_VAR 0 2
50062: ARRAY
50063: NOT
50064: PUSH
50065: LD_EXP 8
50069: PUSH
50070: LD_VAR 0 2
50074: ARRAY
50075: PUSH
50076: LD_EXP 8
50080: PUSH
50081: LD_OWVAR 2
50085: ARRAY
50086: NONEQUAL
50087: PUSH
50088: LD_OWVAR 2
50092: PPUSH
50093: LD_VAR 0 2
50097: PPUSH
50098: CALL_OW 81
50102: PUSH
50103: LD_INT 1
50105: NONEQUAL
50106: AND
50107: OR
50108: IFFALSE 50136
// if HasPowerByGameType ( mpGameType , i ) then
50110: LD_EXP 3
50114: PPUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: CALL 49625 0 2
50124: IFFALSE 50136
// begin gameIsOn := true ;
50126: LD_ADDR_VAR 0 1
50130: PUSH
50131: LD_INT 1
50133: ST_TO_ADDR
// break ;
50134: GO 50138
// end ;
50136: GO 50015
50138: POP
50139: POP
// wait ( 100 ) ;
50140: LD_INT 100
50142: PPUSH
50143: CALL_OW 67
// until not gameIsOn ;
50147: LD_VAR 0 1
50151: NOT
50152: IFFALSE 49994
// if IAmServer then
50154: CALL_OW 518
50158: IFFALSE 50167
// wait ( 0 0$3 ) ;
50160: LD_INT 105
50162: PPUSH
50163: CALL_OW 67
// if Multiplayer then
50167: LD_OWVAR 4
50171: IFFALSE 50179
// YouLostInMultiplayer else
50173: CALL_OW 107
50177: GO 50186
// YouLost (  ) ;
50179: LD_STRING 
50181: PPUSH
50182: CALL_OW 104
// end ;
50186: PPOPN 2
50188: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50189: LD_EXP 32
50193: IFFALSE 50540
50195: GO 50197
50197: DISABLE
50198: LD_INT 0
50200: PPUSH
50201: PPUSH
50202: PPUSH
50203: PPUSH
50204: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50205: LD_ADDR_VAR 0 5
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: LD_INT 4
50221: PUSH
50222: LD_INT 5
50224: PUSH
50225: LD_INT 6
50227: PUSH
50228: LD_INT 7
50230: PUSH
50231: LD_INT 8
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50244: LD_INT 350
50246: PPUSH
50247: CALL_OW 67
// for i := 1 to 8 do
50251: LD_ADDR_VAR 0 1
50255: PUSH
50256: DOUBLE
50257: LD_INT 1
50259: DEC
50260: ST_TO_ADDR
50261: LD_INT 8
50263: PUSH
50264: FOR_TO
50265: IFFALSE 50510
// begin j := sides [ i ] ;
50267: LD_ADDR_VAR 0 2
50271: PUSH
50272: LD_VAR 0 5
50276: PUSH
50277: LD_VAR 0 1
50281: ARRAY
50282: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50283: LD_EXP 39
50287: PUSH
50288: LD_VAR 0 2
50292: ARRAY
50293: PPUSH
50294: CALL 5044 0 1
50298: PUSH
50299: LD_VAR 0 2
50303: PPUSH
50304: CALL_OW 108
50308: AND
50309: PUSH
50310: LD_EXP 3
50314: PPUSH
50315: LD_VAR 0 2
50319: PPUSH
50320: CALL 49625 0 2
50324: AND
50325: IFFALSE 50508
// begin wait ( mpRespawn div 3 ) ;
50327: LD_EXP 32
50331: PUSH
50332: LD_INT 3
50334: DIV
50335: PPUSH
50336: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50340: LD_ADDR_VAR 0 3
50344: PUSH
50345: LD_INT 22
50347: PUSH
50348: LD_VAR 0 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 50
50359: PUSH
50360: EMPTY
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 30
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 30
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: PPUSH
50396: CALL_OW 69
50400: ST_TO_ADDR
// if not tmp then
50401: LD_VAR 0 3
50405: NOT
50406: IFFALSE 50410
// continue ;
50408: GO 50264
// spawn := tmp [ 1 ] ;
50410: LD_ADDR_VAR 0 4
50414: PUSH
50415: LD_VAR 0 3
50419: PUSH
50420: LD_INT 1
50422: ARRAY
50423: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50424: LD_EXP 39
50428: PUSH
50429: LD_VAR 0 2
50433: ARRAY
50434: PUSH
50435: LD_INT 1
50437: ARRAY
50438: PPUSH
50439: LD_VAR 0 4
50443: PPUSH
50444: CALL_OW 250
50448: PPUSH
50449: LD_VAR 0 4
50453: PPUSH
50454: CALL_OW 251
50458: PPUSH
50459: LD_INT 32
50461: PPUSH
50462: LD_INT 1
50464: PPUSH
50465: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50469: LD_ADDR_EXP 39
50473: PUSH
50474: LD_EXP 39
50478: PPUSH
50479: LD_VAR 0 2
50483: PPUSH
50484: LD_EXP 39
50488: PUSH
50489: LD_VAR 0 2
50493: ARRAY
50494: PPUSH
50495: LD_INT 1
50497: PPUSH
50498: CALL_OW 3
50502: PPUSH
50503: CALL_OW 1
50507: ST_TO_ADDR
// end ; end ;
50508: GO 50264
50510: POP
50511: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50512: LD_ADDR_VAR 0 5
50516: PUSH
50517: LD_VAR 0 5
50521: PPUSH
50522: LD_INT 1
50524: PPUSH
50525: LD_INT 8
50527: PPUSH
50528: LD_INT 1
50530: PPUSH
50531: CALL 7322 0 4
50535: ST_TO_ADDR
// until false ;
50536: LD_INT 0
50538: IFFALSE 50244
// end ;
50540: PPOPN 5
50542: END
// every 0 0$1 marked mpActive do
50543: GO 50545
50545: DISABLE
// begin enable ;
50546: ENABLE
// if not mpDisplayStrings then
50547: LD_EXP 37
50551: NOT
50552: IFFALSE 50563
// begin display_strings := [ ] ;
50554: LD_ADDR_OWVAR 47
50558: PUSH
50559: EMPTY
50560: ST_TO_ADDR
// exit ;
50561: GO 50573
// end ; display_strings := mpDisplayStrings ;
50563: LD_ADDR_OWVAR 47
50567: PUSH
50568: LD_EXP 37
50572: ST_TO_ADDR
// end ; end_of_file
50573: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50574: LD_INT 0
50576: PPUSH
50577: PPUSH
50578: PPUSH
50579: PPUSH
50580: PPUSH
50581: PPUSH
50582: PPUSH
50583: PPUSH
50584: PPUSH
// if GetType ( un ) = unit_vehicle then
50585: LD_VAR 0 1
50589: PPUSH
50590: CALL_OW 247
50594: PUSH
50595: LD_INT 2
50597: EQUAL
50598: IFFALSE 50602
// exit ;
50600: GO 51172
// side := GetSide ( un ) ;
50602: LD_ADDR_VAR 0 9
50606: PUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 255
50616: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50617: LD_EXP 3
50621: PUSH
50622: LD_INT 2
50624: EQUAL
50625: IFFALSE 50718
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50627: LD_VAR 0 1
50631: PPUSH
50632: CALL_OW 266
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: IN
50647: PUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 110
50657: PUSH
50658: LD_VAR 0 9
50662: EQUAL
50663: AND
50664: IFFALSE 50718
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50666: LD_ADDR_VAR 0 3
50670: PUSH
50671: LD_INT 22
50673: PUSH
50674: LD_VAR 0 9
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 21
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PPUSH
50697: CALL_OW 69
50701: PUSH
50702: FOR_IN
50703: IFFALSE 50716
// KillUnit ( i ) ;
50705: LD_VAR 0 3
50709: PPUSH
50710: CALL_OW 66
50714: GO 50702
50716: POP
50717: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50718: LD_VAR 0 1
50722: PPUSH
50723: CALL_OW 257
50727: PUSH
50728: LD_INT 12
50730: PUSH
50731: LD_INT 17
50733: PUSH
50734: LD_INT 15
50736: PUSH
50737: LD_INT 16
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: IN
50746: PUSH
50747: LD_VAR 0 1
50751: PPUSH
50752: CALL_OW 263
50756: PUSH
50757: LD_INT 5
50759: EQUAL
50760: OR
50761: IFFALSE 50901
// begin tag := GetTag ( un ) ;
50763: LD_ADDR_VAR 0 5
50767: PUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 110
50777: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50778: LD_ADDR_VAR 0 7
50782: PUSH
50783: LD_EXP 31
50787: PUSH
50788: LD_EXP 7
50792: PUSH
50793: LD_VAR 0 5
50797: ARRAY
50798: ARRAY
50799: ST_TO_ADDR
// if not area then
50800: LD_VAR 0 7
50804: NOT
50805: IFFALSE 50809
// exit ;
50807: GO 51172
// wait ( 4 4$00 ) ;
50809: LD_INT 8400
50811: PPUSH
50812: CALL_OW 67
// repeat wait ( 10 ) ;
50816: LD_INT 10
50818: PPUSH
50819: CALL_OW 67
// until not mpBlockRespThread ;
50823: LD_EXP 40
50827: NOT
50828: IFFALSE 50816
// mpBlockRespThread := true ;
50830: LD_ADDR_EXP 40
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50838: LD_INT 0
50840: PPUSH
50841: CALL 36901 0 1
// ape := CreateHuman ;
50845: LD_ADDR_VAR 0 4
50849: PUSH
50850: CALL_OW 44
50854: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50855: LD_VAR 0 4
50859: PPUSH
50860: LD_VAR 0 5
50864: PPUSH
50865: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50869: LD_VAR 0 4
50873: PPUSH
50874: LD_VAR 0 7
50878: PPUSH
50879: LD_INT 0
50881: PPUSH
50882: CALL_OW 49
// wait ( 10 ) ;
50886: LD_INT 10
50888: PPUSH
50889: CALL_OW 67
// mpBlockRespThread := false ;
50893: LD_ADDR_EXP 40
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 247
50910: PUSH
50911: LD_INT 1
50913: EQUAL
50914: PUSH
50915: LD_VAR 0 1
50919: PPUSH
50920: CALL_OW 248
50924: PUSH
50925: LD_INT 0
50927: GREATER
50928: AND
50929: IFFALSE 51172
// begin if not mpRespawn then
50931: LD_EXP 32
50935: NOT
50936: IFFALSE 50940
// exit ;
50938: GO 51172
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50940: LD_VAR 0 9
50944: PPUSH
50945: CALL_OW 108
50949: NOT
50950: PUSH
50951: LD_EXP 3
50955: PPUSH
50956: LD_VAR 0 9
50960: PPUSH
50961: CALL 49625 0 2
50965: NOT
50966: AND
50967: IFFALSE 50971
// exit ;
50969: GO 51172
// side := GetSide ( un ) ;
50971: LD_ADDR_VAR 0 9
50975: PUSH
50976: LD_VAR 0 1
50980: PPUSH
50981: CALL_OW 255
50985: ST_TO_ADDR
// nation := GetNation ( un ) ;
50986: LD_ADDR_VAR 0 8
50990: PUSH
50991: LD_VAR 0 1
50995: PPUSH
50996: CALL_OW 248
51000: ST_TO_ADDR
// class := GetClass ( un ) ;
51001: LD_ADDR_VAR 0 6
51005: PUSH
51006: LD_VAR 0 1
51010: PPUSH
51011: CALL_OW 257
51015: ST_TO_ADDR
// if class > 4 then
51016: LD_VAR 0 6
51020: PUSH
51021: LD_INT 4
51023: GREATER
51024: IFFALSE 51034
// class := 1 ;
51026: LD_ADDR_VAR 0 6
51030: PUSH
51031: LD_INT 1
51033: ST_TO_ADDR
// repeat wait ( 10 ) ;
51034: LD_INT 10
51036: PPUSH
51037: CALL_OW 67
// until not mpBlockRespThread ;
51041: LD_EXP 40
51045: NOT
51046: IFFALSE 51034
// mpBlockRespThread := true ;
51048: LD_ADDR_EXP 40
51052: PUSH
51053: LD_INT 1
51055: ST_TO_ADDR
// uc_side := side ;
51056: LD_ADDR_OWVAR 20
51060: PUSH
51061: LD_VAR 0 9
51065: ST_TO_ADDR
// uc_nation := nation ;
51066: LD_ADDR_OWVAR 21
51070: PUSH
51071: LD_VAR 0 8
51075: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51076: LD_INT 0
51078: PPUSH
51079: LD_VAR 0 6
51083: PPUSH
51084: LD_INT 2
51086: PPUSH
51087: CALL_OW 380
// un := CreateHuman ;
51091: LD_ADDR_VAR 0 1
51095: PUSH
51096: CALL_OW 44
51100: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51101: LD_ADDR_EXP 39
51105: PUSH
51106: LD_EXP 39
51110: PPUSH
51111: LD_VAR 0 9
51115: PPUSH
51116: LD_EXP 39
51120: PUSH
51121: LD_VAR 0 9
51125: ARRAY
51126: PPUSH
51127: LD_EXP 39
51131: PUSH
51132: LD_VAR 0 9
51136: ARRAY
51137: PUSH
51138: LD_INT 1
51140: PLUS
51141: PPUSH
51142: LD_VAR 0 1
51146: PPUSH
51147: CALL_OW 1
51151: PPUSH
51152: CALL_OW 1
51156: ST_TO_ADDR
// wait ( 10 ) ;
51157: LD_INT 10
51159: PPUSH
51160: CALL_OW 67
// mpBlockRespThread := false ;
51164: LD_ADDR_EXP 40
51168: PUSH
51169: LD_INT 0
51171: ST_TO_ADDR
// end ; end ;
51172: LD_VAR 0 2
51176: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51177: LD_INT 0
51179: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51180: LD_VAR 0 1
51184: PPUSH
51185: CALL_OW 266
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: IN
51200: IFFALSE 51225
// SetBName ( building , @ & GetSide ( building ) ) ;
51202: LD_VAR 0 1
51206: PPUSH
51207: LD_STRING @
51209: PUSH
51210: LD_VAR 0 1
51214: PPUSH
51215: CALL_OW 255
51219: STR
51220: PPUSH
51221: CALL_OW 500
// end ;
51225: LD_VAR 0 2
51229: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51230: LD_INT 0
51232: PPUSH
51233: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51234: LD_EXP 3
51238: PUSH
51239: LD_INT 2
51241: EQUAL
51242: PUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 266
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: IN
51263: AND
51264: IFFALSE 51329
// begin KillUnit ( building ) ;
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51275: LD_ADDR_VAR 0 5
51279: PUSH
51280: LD_INT 22
51282: PUSH
51283: LD_VAR 0 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 21
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PPUSH
51306: CALL_OW 69
51310: PUSH
51311: FOR_IN
51312: IFFALSE 51325
// KillUnit ( i ) ;
51314: LD_VAR 0 5
51318: PPUSH
51319: CALL_OW 66
51323: GO 51311
51325: POP
51326: POP
// exit ;
51327: GO 51374
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51329: LD_VAR 0 1
51333: PPUSH
51334: CALL_OW 266
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: IN
51349: IFFALSE 51374
// SetBName ( building , @ & GetSide ( building ) ) ;
51351: LD_VAR 0 1
51355: PPUSH
51356: LD_STRING @
51358: PUSH
51359: LD_VAR 0 1
51363: PPUSH
51364: CALL_OW 255
51368: STR
51369: PPUSH
51370: CALL_OW 500
// end ; end_of_file
51374: LD_VAR 0 4
51378: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51379: LD_EXP 38
51383: PUSH
51384: CALL 51589 0 0
51388: AND
51389: PUSH
51390: LD_OWVAR 4
51394: AND
51395: IFFALSE 51586
51397: GO 51399
51399: DISABLE
51400: LD_INT 0
51402: PPUSH
51403: PPUSH
// begin canWin := false ;
51404: LD_ADDR_VAR 0 2
51408: PUSH
51409: LD_INT 0
51411: ST_TO_ADDR
// if not HasPower ( your_side ) then
51412: LD_OWVAR 2
51416: PPUSH
51417: CALL 51629 0 1
51421: NOT
51422: IFFALSE 51433
// begin Multiplayer_Loose_Message ;
51424: CALL_OW 521
// enable ( mpLose ) ;
51428: LD_INT 102
51430: ENABLE_MARKED
// end else
51431: GO 51586
// begin canWin := true ;
51433: LD_ADDR_VAR 0 2
51437: PUSH
51438: LD_INT 1
51440: ST_TO_ADDR
// for i := 1 to 8 do
51441: LD_ADDR_VAR 0 1
51445: PUSH
51446: DOUBLE
51447: LD_INT 1
51449: DEC
51450: ST_TO_ADDR
51451: LD_INT 8
51453: PUSH
51454: FOR_TO
51455: IFFALSE 51572
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51457: LD_EXP 7
51461: PUSH
51462: LD_VAR 0 1
51466: ARRAY
51467: PUSH
51468: LD_VAR 0 1
51472: PPUSH
51473: CALL_OW 108
51477: AND
51478: PUSH
51479: LD_VAR 0 1
51483: PUSH
51484: LD_OWVAR 2
51488: NONEQUAL
51489: AND
51490: IFFALSE 51570
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51492: LD_EXP 8
51496: PUSH
51497: LD_VAR 0 1
51501: ARRAY
51502: NOT
51503: PUSH
51504: LD_EXP 8
51508: PUSH
51509: LD_VAR 0 1
51513: ARRAY
51514: PUSH
51515: LD_EXP 8
51519: PUSH
51520: LD_OWVAR 2
51524: ARRAY
51525: NONEQUAL
51526: PUSH
51527: LD_OWVAR 2
51531: PPUSH
51532: LD_VAR 0 1
51536: PPUSH
51537: CALL_OW 81
51541: PUSH
51542: LD_INT 1
51544: NONEQUAL
51545: AND
51546: OR
51547: IFFALSE 51570
// if HasPower ( i ) then
51549: LD_VAR 0 1
51553: PPUSH
51554: CALL 51629 0 1
51558: IFFALSE 51570
// begin canWin := false ;
51560: LD_ADDR_VAR 0 2
51564: PUSH
51565: LD_INT 0
51567: ST_TO_ADDR
// break ;
51568: GO 51572
// end ;
51570: GO 51454
51572: POP
51573: POP
// if canWin then
51574: LD_VAR 0 2
51578: IFFALSE 51585
// enable ( mpWin ) else
51580: LD_INT 101
51582: ENABLE_MARKED
51583: GO 51586
// enable ;
51585: ENABLE
// end ; end ;
51586: PPOPN 2
51588: END
// function CanWinLoose ; begin
51589: LD_INT 0
51591: PPUSH
// result := true ;
51592: LD_ADDR_VAR 0 1
51596: PUSH
51597: LD_INT 1
51599: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51600: CALL_OW 531
51604: PUSH
51605: CALL_OW 519
51609: PUSH
51610: LD_INT 1
51612: GREATER
51613: AND
51614: IFFALSE 51624
// result := false ;
51616: LD_ADDR_VAR 0 1
51620: PUSH
51621: LD_INT 0
51623: ST_TO_ADDR
// end ;
51624: LD_VAR 0 1
51628: RET
// function HasPower ( i ) ; begin
51629: LD_INT 0
51631: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51632: LD_ADDR_VAR 0 2
51636: PUSH
51637: LD_INT 22
51639: PUSH
51640: LD_VAR 0 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 21
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 33
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 33
51674: PUSH
51675: LD_INT 5
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PPUSH
51692: CALL_OW 69
51696: ST_TO_ADDR
// end ; end_of_file
51697: LD_VAR 0 2
51701: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51702: LD_EXP 38
51706: IFFALSE 51749
51708: GO 51710
51710: DISABLE
51711: LD_INT 0
51713: PPUSH
// begin for i := 1 to 8 do
51714: LD_ADDR_VAR 0 1
51718: PUSH
51719: DOUBLE
51720: LD_INT 1
51722: DEC
51723: ST_TO_ADDR
51724: LD_INT 8
51726: PUSH
51727: FOR_TO
51728: IFFALSE 51747
// SetRestrict ( b_depot , i , state_disabled ) ;
51730: LD_INT 0
51732: PPUSH
51733: LD_VAR 0 1
51737: PPUSH
51738: LD_INT 0
51740: PPUSH
51741: CALL_OW 324
51745: GO 51727
51747: POP
51748: POP
// end ;
51749: PPOPN 1
51751: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51752: LD_EXP 38
51756: PUSH
51757: CALL 51962 0 0
51761: AND
51762: PUSH
51763: LD_OWVAR 4
51767: AND
51768: IFFALSE 51959
51770: GO 51772
51772: DISABLE
51773: LD_INT 0
51775: PPUSH
51776: PPUSH
// begin canWin := false ;
51777: LD_ADDR_VAR 0 2
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// if not HasPower ( your_side ) then
51785: LD_OWVAR 2
51789: PPUSH
51790: CALL 52002 0 1
51794: NOT
51795: IFFALSE 51806
// begin Multiplayer_Loose_Message ;
51797: CALL_OW 521
// enable ( mpLose ) ;
51801: LD_INT 102
51803: ENABLE_MARKED
// end else
51804: GO 51959
// begin canWin := true ;
51806: LD_ADDR_VAR 0 2
51810: PUSH
51811: LD_INT 1
51813: ST_TO_ADDR
// for i := 1 to 8 do
51814: LD_ADDR_VAR 0 1
51818: PUSH
51819: DOUBLE
51820: LD_INT 1
51822: DEC
51823: ST_TO_ADDR
51824: LD_INT 8
51826: PUSH
51827: FOR_TO
51828: IFFALSE 51945
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51830: LD_EXP 7
51834: PUSH
51835: LD_VAR 0 1
51839: ARRAY
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 108
51850: AND
51851: PUSH
51852: LD_VAR 0 1
51856: PUSH
51857: LD_OWVAR 2
51861: NONEQUAL
51862: AND
51863: IFFALSE 51943
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51865: LD_EXP 8
51869: PUSH
51870: LD_VAR 0 1
51874: ARRAY
51875: NOT
51876: PUSH
51877: LD_EXP 8
51881: PUSH
51882: LD_VAR 0 1
51886: ARRAY
51887: PUSH
51888: LD_EXP 8
51892: PUSH
51893: LD_OWVAR 2
51897: ARRAY
51898: NONEQUAL
51899: PUSH
51900: LD_OWVAR 2
51904: PPUSH
51905: LD_VAR 0 1
51909: PPUSH
51910: CALL_OW 81
51914: PUSH
51915: LD_INT 1
51917: NONEQUAL
51918: AND
51919: OR
51920: IFFALSE 51943
// if HasPower ( i ) then
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL 52002 0 1
51931: IFFALSE 51943
// begin canWin := false ;
51933: LD_ADDR_VAR 0 2
51937: PUSH
51938: LD_INT 0
51940: ST_TO_ADDR
// break ;
51941: GO 51945
// end ;
51943: GO 51827
51945: POP
51946: POP
// if canWin then
51947: LD_VAR 0 2
51951: IFFALSE 51958
// enable ( mpWin ) else
51953: LD_INT 101
51955: ENABLE_MARKED
51956: GO 51959
// enable ;
51958: ENABLE
// end ; end ;
51959: PPOPN 2
51961: END
// function CanWinLoose ; begin
51962: LD_INT 0
51964: PPUSH
// result := true ;
51965: LD_ADDR_VAR 0 1
51969: PUSH
51970: LD_INT 1
51972: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51973: CALL_OW 531
51977: PUSH
51978: CALL_OW 519
51982: PUSH
51983: LD_INT 1
51985: GREATER
51986: AND
51987: IFFALSE 51997
// result := false ;
51989: LD_ADDR_VAR 0 1
51993: PUSH
51994: LD_INT 0
51996: ST_TO_ADDR
// end ;
51997: LD_VAR 0 1
52001: RET
// function HasPower ( i ) ; begin
52002: LD_INT 0
52004: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52005: LD_INT 22
52007: PUSH
52008: LD_VAR 0 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 30
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 30
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PPUSH
52049: CALL_OW 69
52053: NOT
52054: IFFALSE 52058
// exit ;
52056: GO 52123
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52058: LD_ADDR_VAR 0 2
52062: PUSH
52063: LD_INT 22
52065: PUSH
52066: LD_VAR 0 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 21
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 33
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 33
52100: PUSH
52101: LD_INT 5
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PPUSH
52118: CALL_OW 69
52122: ST_TO_ADDR
// end ; end_of_file
52123: LD_VAR 0 2
52127: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52128: LD_EXP 38
52132: IFFALSE 52473
52134: GO 52136
52136: DISABLE
52137: LD_INT 0
52139: PPUSH
52140: PPUSH
52141: PPUSH
// begin mpKingPoints := [ ] ;
52142: LD_ADDR_EXP 43
52146: PUSH
52147: EMPTY
52148: ST_TO_ADDR
// if mpTeamGame then
52149: LD_EXP 11
52153: IFFALSE 52207
// begin for i := 1 to Count ( mpTeams ) do
52155: LD_ADDR_VAR 0 1
52159: PUSH
52160: DOUBLE
52161: LD_INT 1
52163: DEC
52164: ST_TO_ADDR
52165: LD_EXP 10
52169: PPUSH
52170: CALL 5044 0 1
52174: PUSH
52175: FOR_TO
52176: IFFALSE 52203
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52178: LD_ADDR_EXP 43
52182: PUSH
52183: LD_EXP 43
52187: PPUSH
52188: LD_VAR 0 1
52192: PPUSH
52193: LD_INT 0
52195: PPUSH
52196: CALL_OW 1
52200: ST_TO_ADDR
52201: GO 52175
52203: POP
52204: POP
// end else
52205: GO 52250
// begin for i := 1 to 8 do
52207: LD_ADDR_VAR 0 1
52211: PUSH
52212: DOUBLE
52213: LD_INT 1
52215: DEC
52216: ST_TO_ADDR
52217: LD_INT 8
52219: PUSH
52220: FOR_TO
52221: IFFALSE 52248
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52223: LD_ADDR_EXP 43
52227: PUSH
52228: LD_EXP 43
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: LD_INT 0
52240: PPUSH
52241: CALL_OW 1
52245: ST_TO_ADDR
52246: GO 52220
52248: POP
52249: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52250: LD_ADDR_VAR 0 3
52254: PUSH
52255: LD_EXP 2
52259: PPUSH
52260: LD_INT 0
52262: PPUSH
52263: CALL_OW 517
52267: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52268: LD_ADDR_VAR 0 1
52272: PUSH
52273: DOUBLE
52274: LD_INT 1
52276: DEC
52277: ST_TO_ADDR
52278: LD_VAR 0 3
52282: PUSH
52283: LD_INT 1
52285: ARRAY
52286: PUSH
52287: FOR_TO
52288: IFFALSE 52355
// for j := 1 to 8 do
52290: LD_ADDR_VAR 0 2
52294: PUSH
52295: DOUBLE
52296: LD_INT 1
52298: DEC
52299: ST_TO_ADDR
52300: LD_INT 8
52302: PUSH
52303: FOR_TO
52304: IFFALSE 52351
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52306: LD_VAR 0 3
52310: PUSH
52311: LD_INT 1
52313: ARRAY
52314: PUSH
52315: LD_VAR 0 1
52319: ARRAY
52320: PPUSH
52321: LD_VAR 0 3
52325: PUSH
52326: LD_INT 2
52328: ARRAY
52329: PUSH
52330: LD_VAR 0 1
52334: ARRAY
52335: PPUSH
52336: LD_VAR 0 2
52340: PPUSH
52341: LD_INT 12
52343: NEG
52344: PPUSH
52345: CALL_OW 330
52349: GO 52303
52351: POP
52352: POP
52353: GO 52287
52355: POP
52356: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52357: LD_EXP 33
52361: PPUSH
52362: LD_INT 1
52364: PPUSH
52365: CALL_OW 424
// UpdateCounter ;
52369: CALL 52977 0 0
// repeat wait ( 0 0$1 ) ;
52373: LD_INT 35
52375: PPUSH
52376: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52380: LD_ADDR_VAR 0 3
52384: PUSH
52385: LD_EXP 33
52389: PPUSH
52390: LD_INT 3
52392: PUSH
52393: LD_INT 57
52395: PUSH
52396: EMPTY
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 50
52405: PUSH
52406: EMPTY
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 30
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 30
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PPUSH
52442: CALL_OW 70
52446: ST_TO_ADDR
// if not tmp then
52447: LD_VAR 0 3
52451: NOT
52452: IFFALSE 52456
// continue ;
52454: GO 52373
// AddPoints ( tmp ) ;
52456: LD_VAR 0 3
52460: PPUSH
52461: CALL 52655 0 1
// UpdateCounter ;
52465: CALL 52977 0 0
// until false ;
52469: LD_INT 0
52471: IFFALSE 52373
// end ;
52473: PPOPN 3
52475: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52476: LD_EXP 38
52480: PUSH
52481: LD_EXP 36
52485: AND
52486: IFFALSE 52652
52488: GO 52490
52490: DISABLE
52491: LD_INT 0
52493: PPUSH
52494: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52495: LD_ADDR_VAR 0 2
52499: PUSH
52500: LD_EXP 2
52504: PPUSH
52505: LD_INT 0
52507: PPUSH
52508: CALL_OW 517
52512: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52513: LD_ADDR_VAR 0 1
52517: PUSH
52518: DOUBLE
52519: LD_INT 1
52521: DEC
52522: ST_TO_ADDR
52523: LD_VAR 0 2
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PUSH
52532: FOR_TO
52533: IFFALSE 52574
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52535: LD_VAR 0 2
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PUSH
52544: LD_VAR 0 1
52548: ARRAY
52549: PPUSH
52550: LD_VAR 0 2
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: PUSH
52559: LD_VAR 0 1
52563: ARRAY
52564: PPUSH
52565: LD_INT 125
52567: PPUSH
52568: CALL_OW 495
52572: GO 52532
52574: POP
52575: POP
// repeat wait ( mpEmissions ) ;
52576: LD_EXP 36
52580: PPUSH
52581: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52585: LD_ADDR_VAR 0 1
52589: PUSH
52590: DOUBLE
52591: LD_INT 1
52593: DEC
52594: ST_TO_ADDR
52595: LD_VAR 0 2
52599: PUSH
52600: LD_INT 1
52602: ARRAY
52603: PUSH
52604: FOR_TO
52605: IFFALSE 52646
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52607: LD_VAR 0 2
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PUSH
52616: LD_VAR 0 1
52620: ARRAY
52621: PPUSH
52622: LD_VAR 0 2
52626: PUSH
52627: LD_INT 2
52629: ARRAY
52630: PUSH
52631: LD_VAR 0 1
52635: ARRAY
52636: PPUSH
52637: LD_INT 15
52639: PPUSH
52640: CALL_OW 495
52644: GO 52604
52646: POP
52647: POP
// until false ;
52648: LD_INT 0
52650: IFFALSE 52576
// end ;
52652: PPOPN 2
52654: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52655: LD_INT 0
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// if mpTeamGame then
52662: LD_EXP 11
52666: IFFALSE 52863
// begin first := depots [ 1 ] ;
52668: LD_ADDR_VAR 0 4
52672: PUSH
52673: LD_VAR 0 1
52677: PUSH
52678: LD_INT 1
52680: ARRAY
52681: ST_TO_ADDR
// side := GetSide ( first ) ;
52682: LD_ADDR_VAR 0 6
52686: PUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: CALL_OW 255
52696: ST_TO_ADDR
// for i := 1 to mpTeams do
52697: LD_ADDR_VAR 0 3
52701: PUSH
52702: DOUBLE
52703: LD_INT 1
52705: DEC
52706: ST_TO_ADDR
52707: LD_EXP 10
52711: PUSH
52712: FOR_TO
52713: IFFALSE 52747
// if side in mpTeams [ i ] then
52715: LD_VAR 0 6
52719: PUSH
52720: LD_EXP 10
52724: PUSH
52725: LD_VAR 0 3
52729: ARRAY
52730: IN
52731: IFFALSE 52745
// begin team := i ;
52733: LD_ADDR_VAR 0 5
52737: PUSH
52738: LD_VAR 0 3
52742: ST_TO_ADDR
// break ;
52743: GO 52747
// end ;
52745: GO 52712
52747: POP
52748: POP
// if not team then
52749: LD_VAR 0 5
52753: NOT
52754: IFFALSE 52758
// exit ;
52756: GO 52972
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52758: LD_EXP 33
52762: PPUSH
52763: LD_INT 81
52765: PUSH
52766: LD_VAR 0 6
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PPUSH
52775: CALL_OW 70
52779: IFFALSE 52783
// exit ;
52781: GO 52972
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52783: LD_ADDR_EXP 43
52787: PUSH
52788: LD_EXP 43
52792: PPUSH
52793: LD_VAR 0 5
52797: PPUSH
52798: LD_EXP 43
52802: PUSH
52803: LD_VAR 0 5
52807: ARRAY
52808: PUSH
52809: LD_INT 1
52811: PLUS
52812: PPUSH
52813: CALL_OW 1
52817: ST_TO_ADDR
// for i in mpTeams [ team ] do
52818: LD_ADDR_VAR 0 3
52822: PUSH
52823: LD_EXP 10
52827: PUSH
52828: LD_VAR 0 5
52832: ARRAY
52833: PUSH
52834: FOR_IN
52835: IFFALSE 52859
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52837: LD_VAR 0 3
52841: PPUSH
52842: LD_EXP 43
52846: PUSH
52847: LD_VAR 0 5
52851: ARRAY
52852: PPUSH
52853: CALL_OW 506
52857: GO 52834
52859: POP
52860: POP
// end else
52861: GO 52972
// begin first := depots [ 1 ] ;
52863: LD_ADDR_VAR 0 4
52867: PUSH
52868: LD_VAR 0 1
52872: PUSH
52873: LD_INT 1
52875: ARRAY
52876: ST_TO_ADDR
// side := GetSide ( first ) ;
52877: LD_ADDR_VAR 0 6
52881: PUSH
52882: LD_VAR 0 4
52886: PPUSH
52887: CALL_OW 255
52891: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52892: LD_EXP 33
52896: PPUSH
52897: LD_INT 81
52899: PUSH
52900: LD_VAR 0 6
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PPUSH
52909: CALL_OW 70
52913: IFFALSE 52917
// exit ;
52915: GO 52972
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52917: LD_ADDR_EXP 43
52921: PUSH
52922: LD_EXP 43
52926: PPUSH
52927: LD_VAR 0 6
52931: PPUSH
52932: LD_EXP 43
52936: PUSH
52937: LD_VAR 0 6
52941: ARRAY
52942: PUSH
52943: LD_INT 1
52945: PLUS
52946: PPUSH
52947: CALL_OW 1
52951: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52952: LD_VAR 0 6
52956: PPUSH
52957: LD_EXP 43
52961: PUSH
52962: LD_VAR 0 6
52966: ARRAY
52967: PPUSH
52968: CALL_OW 506
// end ; end ;
52972: LD_VAR 0 2
52976: RET
// function UpdateCounter ; var i ; begin
52977: LD_INT 0
52979: PPUSH
52980: PPUSH
// result := [ ] ;
52981: LD_ADDR_VAR 0 1
52985: PUSH
52986: EMPTY
52987: ST_TO_ADDR
// if mpTeamGame then
52988: LD_EXP 11
52992: IFFALSE 53059
// begin for i := 1 to mpTeams do
52994: LD_ADDR_VAR 0 2
52998: PUSH
52999: DOUBLE
53000: LD_INT 1
53002: DEC
53003: ST_TO_ADDR
53004: LD_EXP 10
53008: PUSH
53009: FOR_TO
53010: IFFALSE 53055
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53012: LD_ADDR_VAR 0 1
53016: PUSH
53017: LD_VAR 0 1
53021: PUSH
53022: LD_STRING #KingoftheHill-Team
53024: PUSH
53025: LD_VAR 0 2
53029: PUSH
53030: LD_EXP 43
53034: PUSH
53035: LD_VAR 0 2
53039: ARRAY
53040: PUSH
53041: LD_EXP 34
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: ADD
53052: ST_TO_ADDR
53053: GO 53009
53055: POP
53056: POP
// end else
53057: GO 53132
// begin for i := 1 to 8 do
53059: LD_ADDR_VAR 0 2
53063: PUSH
53064: DOUBLE
53065: LD_INT 1
53067: DEC
53068: ST_TO_ADDR
53069: LD_INT 8
53071: PUSH
53072: FOR_TO
53073: IFFALSE 53130
// if mpSidePositions [ i ] then
53075: LD_EXP 7
53079: PUSH
53080: LD_VAR 0 2
53084: ARRAY
53085: IFFALSE 53128
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53087: LD_ADDR_VAR 0 1
53091: PUSH
53092: LD_VAR 0 1
53096: PUSH
53097: LD_STRING #KingoftheHill-Player
53099: PUSH
53100: LD_VAR 0 2
53104: PUSH
53105: LD_EXP 43
53109: PUSH
53110: LD_VAR 0 2
53114: ARRAY
53115: PUSH
53116: LD_EXP 34
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: ADD
53127: ST_TO_ADDR
53128: GO 53072
53130: POP
53131: POP
// end ; mpDisplayStrings := result ;
53132: LD_ADDR_EXP 37
53136: PUSH
53137: LD_VAR 0 1
53141: ST_TO_ADDR
// end ;
53142: LD_VAR 0 1
53146: RET
// export function HowMuchPointsKing ( side ) ; begin
53147: LD_INT 0
53149: PPUSH
// result := HowMuchPoints ( side ) ;
53150: LD_ADDR_VAR 0 2
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL 53170 0 1
53164: ST_TO_ADDR
// end ;
53165: LD_VAR 0 2
53169: RET
// function HowMuchPoints ( side ) ; var i ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
// if mpTeamGame then
53174: LD_EXP 11
53178: IFFALSE 53247
// begin for i := 1 to Count ( mpTeams ) do
53180: LD_ADDR_VAR 0 3
53184: PUSH
53185: DOUBLE
53186: LD_INT 1
53188: DEC
53189: ST_TO_ADDR
53190: LD_EXP 10
53194: PPUSH
53195: CALL 5044 0 1
53199: PUSH
53200: FOR_TO
53201: IFFALSE 53243
// begin if side in mpTeams [ i ] then
53203: LD_VAR 0 1
53207: PUSH
53208: LD_EXP 10
53212: PUSH
53213: LD_VAR 0 3
53217: ARRAY
53218: IN
53219: IFFALSE 53241
// begin result := mpKingPoints [ i ] ;
53221: LD_ADDR_VAR 0 2
53225: PUSH
53226: LD_EXP 43
53230: PUSH
53231: LD_VAR 0 3
53235: ARRAY
53236: ST_TO_ADDR
// exit ;
53237: POP
53238: POP
53239: GO 53263
// end ; end ;
53241: GO 53200
53243: POP
53244: POP
// end else
53245: GO 53263
// result := mpKingPoints [ side ] ;
53247: LD_ADDR_VAR 0 2
53251: PUSH
53252: LD_EXP 43
53256: PUSH
53257: LD_VAR 0 1
53261: ARRAY
53262: ST_TO_ADDR
// end ;
53263: LD_VAR 0 2
53267: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53268: LD_EXP 38
53272: PUSH
53273: CALL 53595 0 0
53277: AND
53278: PUSH
53279: LD_OWVAR 4
53283: AND
53284: IFFALSE 53520
53286: GO 53288
53288: DISABLE
53289: LD_INT 0
53291: PPUSH
53292: PPUSH
// begin canWin := false ;
53293: LD_ADDR_VAR 0 2
53297: PUSH
53298: LD_INT 0
53300: ST_TO_ADDR
// if not HasPower ( your_side ) then
53301: LD_OWVAR 2
53305: PPUSH
53306: CALL 53635 0 1
53310: NOT
53311: IFFALSE 53322
// begin Multiplayer_Loose_Message ;
53313: CALL_OW 521
// enable ( mpLose ) ;
53317: LD_INT 102
53319: ENABLE_MARKED
// end else
53320: GO 53520
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53322: LD_ADDR_VAR 0 2
53326: PUSH
53327: LD_OWVAR 2
53331: PPUSH
53332: CALL 53170 0 1
53336: PUSH
53337: LD_EXP 34
53341: GREATEREQUAL
53342: PUSH
53343: LD_OWVAR 2
53347: PPUSH
53348: CALL 53635 0 1
53352: AND
53353: PUSH
53354: CALL 53523 0 0
53358: NOT
53359: OR
53360: ST_TO_ADDR
// for i := 1 to 8 do
53361: LD_ADDR_VAR 0 1
53365: PUSH
53366: DOUBLE
53367: LD_INT 1
53369: DEC
53370: ST_TO_ADDR
53371: LD_INT 8
53373: PUSH
53374: FOR_TO
53375: IFFALSE 53506
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53377: LD_EXP 7
53381: PUSH
53382: LD_VAR 0 1
53386: ARRAY
53387: PUSH
53388: LD_VAR 0 1
53392: PPUSH
53393: CALL_OW 108
53397: AND
53398: PUSH
53399: LD_VAR 0 1
53403: PUSH
53404: LD_OWVAR 2
53408: NONEQUAL
53409: AND
53410: IFFALSE 53504
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53412: LD_EXP 8
53416: PUSH
53417: LD_VAR 0 1
53421: ARRAY
53422: NOT
53423: PUSH
53424: LD_EXP 8
53428: PUSH
53429: LD_VAR 0 1
53433: ARRAY
53434: PUSH
53435: LD_EXP 8
53439: PUSH
53440: LD_OWVAR 2
53444: ARRAY
53445: NONEQUAL
53446: PUSH
53447: LD_OWVAR 2
53451: PPUSH
53452: LD_VAR 0 1
53456: PPUSH
53457: CALL_OW 81
53461: PUSH
53462: LD_INT 1
53464: NONEQUAL
53465: AND
53466: OR
53467: IFFALSE 53504
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL 53170 0 1
53478: PUSH
53479: LD_EXP 34
53483: GREATEREQUAL
53484: PUSH
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL 53635 0 1
53494: AND
53495: IFFALSE 53504
// begin enable ( mpLose ) ;
53497: LD_INT 102
53499: ENABLE_MARKED
// exit ;
53500: POP
53501: POP
53502: GO 53520
// end ;
53504: GO 53374
53506: POP
53507: POP
// if canWin then
53508: LD_VAR 0 2
53512: IFFALSE 53519
// enable ( mpWin ) else
53514: LD_INT 101
53516: ENABLE_MARKED
53517: GO 53520
// enable ;
53519: ENABLE
// end ; end ;
53520: PPOPN 2
53522: END
// function EnemiesInGame ; var i ; begin
53523: LD_INT 0
53525: PPUSH
53526: PPUSH
// result := false ;
53527: LD_ADDR_VAR 0 1
53531: PUSH
53532: LD_INT 0
53534: ST_TO_ADDR
// for i := 1 to 8 do
53535: LD_ADDR_VAR 0 2
53539: PUSH
53540: DOUBLE
53541: LD_INT 1
53543: DEC
53544: ST_TO_ADDR
53545: LD_INT 8
53547: PUSH
53548: FOR_TO
53549: IFFALSE 53588
// if i <> your_side and HasPower ( i ) then
53551: LD_VAR 0 2
53555: PUSH
53556: LD_OWVAR 2
53560: NONEQUAL
53561: PUSH
53562: LD_VAR 0 2
53566: PPUSH
53567: CALL 53635 0 1
53571: AND
53572: IFFALSE 53586
// begin result := true ;
53574: LD_ADDR_VAR 0 1
53578: PUSH
53579: LD_INT 1
53581: ST_TO_ADDR
// exit ;
53582: POP
53583: POP
53584: GO 53590
// end ;
53586: GO 53548
53588: POP
53589: POP
// end ;
53590: LD_VAR 0 1
53594: RET
// function CanWinLoose ; begin
53595: LD_INT 0
53597: PPUSH
// result := true ;
53598: LD_ADDR_VAR 0 1
53602: PUSH
53603: LD_INT 1
53605: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53606: CALL_OW 531
53610: PUSH
53611: CALL_OW 519
53615: PUSH
53616: LD_INT 1
53618: GREATER
53619: AND
53620: IFFALSE 53630
// result := false ;
53622: LD_ADDR_VAR 0 1
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// end ;
53630: LD_VAR 0 1
53634: RET
// function HasPower ( i ) ; begin
53635: LD_INT 0
53637: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53638: LD_ADDR_VAR 0 2
53642: PUSH
53643: LD_INT 22
53645: PUSH
53646: LD_VAR 0 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 21
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 33
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 33
53680: PUSH
53681: LD_INT 5
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PPUSH
53698: CALL_OW 69
53702: ST_TO_ADDR
// end ; end_of_file end_of_file
53703: LD_VAR 0 2
53707: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53708: LD_VAR 0 1
53712: PUSH
53713: LD_INT 200
53715: DOUBLE
53716: GREATEREQUAL
53717: IFFALSE 53725
53719: LD_INT 299
53721: DOUBLE
53722: LESSEQUAL
53723: IFTRUE 53727
53725: GO 53759
53727: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53728: LD_VAR 0 1
53732: PPUSH
53733: LD_VAR 0 2
53737: PPUSH
53738: LD_VAR 0 3
53742: PPUSH
53743: LD_VAR 0 4
53747: PPUSH
53748: LD_VAR 0 5
53752: PPUSH
53753: CALL 54456 0 5
53757: GO 53836
53759: LD_INT 300
53761: DOUBLE
53762: GREATEREQUAL
53763: IFFALSE 53771
53765: LD_INT 399
53767: DOUBLE
53768: LESSEQUAL
53769: IFTRUE 53773
53771: GO 53835
53773: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53774: LD_VAR 0 1
53778: PPUSH
53779: LD_VAR 0 2
53783: PPUSH
53784: LD_VAR 0 3
53788: PPUSH
53789: LD_VAR 0 4
53793: PPUSH
53794: LD_VAR 0 5
53798: PPUSH
53799: LD_VAR 0 6
53803: PPUSH
53804: LD_VAR 0 7
53808: PPUSH
53809: LD_VAR 0 8
53813: PPUSH
53814: LD_VAR 0 9
53818: PPUSH
53819: LD_VAR 0 10
53823: PPUSH
53824: LD_VAR 0 11
53828: PPUSH
53829: CALL 59203 0 11
53833: GO 53836
53835: POP
// end ;
53836: PPOPN 11
53838: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53839: LD_VAR 0 1
53843: PPUSH
53844: LD_VAR 0 2
53848: PPUSH
53849: LD_VAR 0 3
53853: PPUSH
53854: LD_VAR 0 4
53858: PPUSH
53859: LD_VAR 0 5
53863: PPUSH
53864: CALL 53921 0 5
// end ; end_of_file
53868: PPOPN 5
53870: END
// export function SOS_UnitDestroyed ( un ) ; begin
53871: LD_INT 0
53873: PPUSH
// ComRadiation ( un ) ;
53874: LD_VAR 0 1
53878: PPUSH
53879: CALL 54860 0 1
// end ;
53883: LD_VAR 0 2
53887: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53888: LD_INT 0
53890: PPUSH
// ComRadiation ( un ) ;
53891: LD_VAR 0 1
53895: PPUSH
53896: CALL 54860 0 1
// end ;
53900: LD_VAR 0 2
53904: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53905: LD_INT 0
53907: PPUSH
// end ;
53908: LD_VAR 0 4
53912: RET
// export function SOS_Command ( cmd ) ; begin
53913: LD_INT 0
53915: PPUSH
// end ;
53916: LD_VAR 0 2
53920: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53921: LD_INT 0
53923: PPUSH
// end ;
53924: LD_VAR 0 6
53928: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53929: LD_INT 0
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
// if not vehicle or not factory then
53936: LD_VAR 0 1
53940: NOT
53941: PUSH
53942: LD_VAR 0 2
53946: NOT
53947: OR
53948: IFFALSE 53952
// exit ;
53950: GO 54451
// if not factoryWaypoints then
53952: LD_EXP 54
53956: NOT
53957: IFFALSE 53961
// exit ;
53959: GO 54451
// for i := 1 to Count ( factoryWaypoints ) do
53961: LD_ADDR_VAR 0 4
53965: PUSH
53966: DOUBLE
53967: LD_INT 1
53969: DEC
53970: ST_TO_ADDR
53971: LD_EXP 54
53975: PPUSH
53976: CALL 5044 0 1
53980: PUSH
53981: FOR_TO
53982: IFFALSE 54449
// if factoryWaypoints [ i ] [ 2 ] = factory then
53984: LD_EXP 54
53988: PUSH
53989: LD_VAR 0 4
53993: ARRAY
53994: PUSH
53995: LD_INT 2
53997: ARRAY
53998: PUSH
53999: LD_VAR 0 2
54003: EQUAL
54004: IFFALSE 54447
// begin if GetControl ( vehicle ) = control_manual then
54006: LD_VAR 0 1
54010: PPUSH
54011: CALL_OW 263
54015: PUSH
54016: LD_INT 1
54018: EQUAL
54019: IFFALSE 54330
// begin driver := IsDrivenBy ( vehicle ) ;
54021: LD_ADDR_VAR 0 6
54025: PUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: CALL_OW 311
54035: ST_TO_ADDR
// tag := GetTag ( driver ) ;
54036: LD_ADDR_VAR 0 5
54040: PUSH
54041: LD_VAR 0 6
54045: PPUSH
54046: CALL_OW 110
54050: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
54051: LD_VAR 0 5
54055: PUSH
54056: LD_INT 501
54058: EQUAL
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 110
54069: PUSH
54070: LD_INT 501
54072: EQUAL
54073: OR
54074: IFFALSE 54080
// exit ;
54076: POP
54077: POP
54078: GO 54451
// if not HasTask ( driver ) then
54080: LD_VAR 0 6
54084: PPUSH
54085: CALL_OW 314
54089: NOT
54090: IFFALSE 54328
// begin SetTag ( driver , tDriver ) ;
54092: LD_VAR 0 6
54096: PPUSH
54097: LD_INT 501
54099: PPUSH
54100: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54104: LD_VAR 0 1
54108: PPUSH
54109: LD_INT 501
54111: PPUSH
54112: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54116: LD_ADDR_VAR 0 7
54120: PUSH
54121: LD_EXP 54
54125: PUSH
54126: LD_VAR 0 4
54130: ARRAY
54131: PUSH
54132: LD_INT 3
54134: ARRAY
54135: PPUSH
54136: LD_EXP 54
54140: PUSH
54141: LD_VAR 0 4
54145: ARRAY
54146: PUSH
54147: LD_INT 4
54149: ARRAY
54150: PPUSH
54151: CALL_OW 428
54155: ST_TO_ADDR
// if hex then
54156: LD_VAR 0 7
54160: IFFALSE 54178
// ComMoveUnit ( driver , hex ) else
54162: LD_VAR 0 6
54166: PPUSH
54167: LD_VAR 0 7
54171: PPUSH
54172: CALL_OW 112
54176: GO 54217
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54178: LD_VAR 0 6
54182: PPUSH
54183: LD_EXP 54
54187: PUSH
54188: LD_VAR 0 4
54192: ARRAY
54193: PUSH
54194: LD_INT 3
54196: ARRAY
54197: PPUSH
54198: LD_EXP 54
54202: PUSH
54203: LD_VAR 0 4
54207: ARRAY
54208: PUSH
54209: LD_INT 4
54211: ARRAY
54212: PPUSH
54213: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54217: LD_VAR 0 6
54221: PPUSH
54222: CALL_OW 181
// if Multiplayer then
54226: LD_OWVAR 4
54230: IFFALSE 54279
// begin repeat wait ( 10 ) ;
54232: LD_INT 10
54234: PPUSH
54235: CALL_OW 67
// until not IsInUnit ( driver ) ;
54239: LD_VAR 0 6
54243: PPUSH
54244: CALL_OW 310
54248: NOT
54249: IFFALSE 54232
// if not HasTask ( driver ) then
54251: LD_VAR 0 6
54255: PPUSH
54256: CALL_OW 314
54260: NOT
54261: IFFALSE 54277
// ComEnterUnit ( driver , factory ) ;
54263: LD_VAR 0 6
54267: PPUSH
54268: LD_VAR 0 2
54272: PPUSH
54273: CALL_OW 120
// end else
54277: GO 54293
// AddComEnterUnit ( driver , factory ) ;
54279: LD_VAR 0 6
54283: PPUSH
54284: LD_VAR 0 2
54288: PPUSH
54289: CALL_OW 180
// wait ( 0 0$1 ) ;
54293: LD_INT 35
54295: PPUSH
54296: CALL_OW 67
// SetTag ( driver , tag ) ;
54300: LD_VAR 0 6
54304: PPUSH
54305: LD_VAR 0 5
54309: PPUSH
54310: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54314: LD_VAR 0 1
54318: PPUSH
54319: LD_INT 0
54321: PPUSH
54322: CALL_OW 109
// break ;
54326: GO 54449
// end ; end else
54328: GO 54447
// if GetControl ( vehicle ) = control_remote then
54330: LD_VAR 0 1
54334: PPUSH
54335: CALL_OW 263
54339: PUSH
54340: LD_INT 2
54342: EQUAL
54343: IFFALSE 54406
// begin wait ( 0 0$2 ) ;
54345: LD_INT 70
54347: PPUSH
54348: CALL_OW 67
// if Connect ( vehicle ) then
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL 11250 0 1
54361: IFFALSE 54402
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54363: LD_VAR 0 1
54367: PPUSH
54368: LD_EXP 54
54372: PUSH
54373: LD_VAR 0 4
54377: ARRAY
54378: PUSH
54379: LD_INT 3
54381: ARRAY
54382: PPUSH
54383: LD_EXP 54
54387: PUSH
54388: LD_VAR 0 4
54392: ARRAY
54393: PUSH
54394: LD_INT 4
54396: ARRAY
54397: PPUSH
54398: CALL_OW 171
// break ;
54402: GO 54449
// end else
54404: GO 54447
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54406: LD_VAR 0 1
54410: PPUSH
54411: LD_EXP 54
54415: PUSH
54416: LD_VAR 0 4
54420: ARRAY
54421: PUSH
54422: LD_INT 3
54424: ARRAY
54425: PPUSH
54426: LD_EXP 54
54430: PUSH
54431: LD_VAR 0 4
54435: ARRAY
54436: PUSH
54437: LD_INT 4
54439: ARRAY
54440: PPUSH
54441: CALL_OW 171
// break ;
54445: GO 54449
// end ; end ;
54447: GO 53981
54449: POP
54450: POP
// end ;
54451: LD_VAR 0 3
54455: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54456: LD_INT 0
54458: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54459: LD_VAR 0 1
54463: PUSH
54464: LD_INT 250
54466: EQUAL
54467: PUSH
54468: LD_VAR 0 2
54472: PPUSH
54473: CALL_OW 264
54477: PUSH
54478: LD_INT 81
54480: EQUAL
54481: AND
54482: IFFALSE 54503
// MinerPlaceMine ( unit , x , y ) ;
54484: LD_VAR 0 2
54488: PPUSH
54489: LD_VAR 0 4
54493: PPUSH
54494: LD_VAR 0 5
54498: PPUSH
54499: CALL 57595 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54503: LD_VAR 0 1
54507: PUSH
54508: LD_INT 251
54510: EQUAL
54511: PUSH
54512: LD_VAR 0 2
54516: PPUSH
54517: CALL_OW 264
54521: PUSH
54522: LD_INT 81
54524: EQUAL
54525: AND
54526: IFFALSE 54547
// MinerDetonateMine ( unit , x , y ) ;
54528: LD_VAR 0 2
54532: PPUSH
54533: LD_VAR 0 4
54537: PPUSH
54538: LD_VAR 0 5
54542: PPUSH
54543: CALL 57870 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54547: LD_VAR 0 1
54551: PUSH
54552: LD_INT 252
54554: EQUAL
54555: PUSH
54556: LD_VAR 0 2
54560: PPUSH
54561: CALL_OW 264
54565: PUSH
54566: LD_INT 81
54568: EQUAL
54569: AND
54570: IFFALSE 54591
// MinerCreateMinefield ( unit , x , y ) ;
54572: LD_VAR 0 2
54576: PPUSH
54577: LD_VAR 0 4
54581: PPUSH
54582: LD_VAR 0 5
54586: PPUSH
54587: CALL 58287 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54591: LD_VAR 0 1
54595: PUSH
54596: LD_INT 253
54598: EQUAL
54599: PUSH
54600: LD_VAR 0 2
54604: PPUSH
54605: CALL_OW 257
54609: PUSH
54610: LD_INT 5
54612: EQUAL
54613: AND
54614: IFFALSE 54635
// ComBinocular ( unit , x , y ) ;
54616: LD_VAR 0 2
54620: PPUSH
54621: LD_VAR 0 4
54625: PPUSH
54626: LD_VAR 0 5
54630: PPUSH
54631: CALL 58656 0 3
// if selectedUnit then
54635: LD_VAR 0 3
54639: IFFALSE 54695
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54641: LD_VAR 0 1
54645: PUSH
54646: LD_INT 254
54648: EQUAL
54649: PUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: CALL_OW 264
54659: PUSH
54660: LD_INT 99
54662: EQUAL
54663: AND
54664: PUSH
54665: LD_VAR 0 3
54669: PPUSH
54670: CALL_OW 263
54674: PUSH
54675: LD_INT 3
54677: EQUAL
54678: AND
54679: IFFALSE 54695
// HackDestroyVehicle ( unit , selectedUnit ) ;
54681: LD_VAR 0 2
54685: PPUSH
54686: LD_VAR 0 3
54690: PPUSH
54691: CALL 56959 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54695: LD_VAR 0 1
54699: PUSH
54700: LD_INT 255
54702: EQUAL
54703: PUSH
54704: LD_VAR 0 2
54708: PPUSH
54709: CALL_OW 264
54713: PUSH
54714: LD_INT 14
54716: PUSH
54717: LD_INT 53
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: IN
54724: AND
54725: PUSH
54726: LD_VAR 0 4
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: CALL_OW 488
54740: AND
54741: IFFALSE 54765
// CutTreeXYR ( unit , x , y , 12 ) ;
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 4
54752: PPUSH
54753: LD_VAR 0 5
54757: PPUSH
54758: LD_INT 12
54760: PPUSH
54761: CALL 54956 0 4
// if cmd = 256 then
54765: LD_VAR 0 1
54769: PUSH
54770: LD_INT 256
54772: EQUAL
54773: IFFALSE 54794
// SetFactoryWaypoint ( unit , x , y ) ;
54775: LD_VAR 0 2
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: CALL 59211 0 3
// if cmd = 257 then
54794: LD_VAR 0 1
54798: PUSH
54799: LD_INT 257
54801: EQUAL
54802: IFFALSE 54823
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54804: LD_VAR 0 2
54808: PPUSH
54809: LD_VAR 0 4
54813: PPUSH
54814: LD_VAR 0 5
54818: PPUSH
54819: CALL 59701 0 3
// if cmd = 258 then
54823: LD_VAR 0 1
54827: PUSH
54828: LD_INT 258
54830: EQUAL
54831: IFFALSE 54855
// BurnTreeXYR ( unit , x , y , 8 ) ;
54833: LD_VAR 0 2
54837: PPUSH
54838: LD_VAR 0 4
54842: PPUSH
54843: LD_VAR 0 5
54847: PPUSH
54848: LD_INT 8
54850: PPUSH
54851: CALL 55350 0 4
// end ;
54855: LD_VAR 0 6
54859: RET
// export function ComRadiation ( un ) ; var eff ; begin
54860: LD_INT 0
54862: PPUSH
54863: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 264
54873: PUSH
54874: LD_INT 91
54876: NONEQUAL
54877: IFFALSE 54881
// exit ;
54879: GO 54951
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54881: LD_INT 68
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 255
54893: PPUSH
54894: CALL_OW 321
54898: PUSH
54899: LD_INT 2
54901: EQUAL
54902: IFFALSE 54914
// eff := 70 else
54904: LD_ADDR_VAR 0 3
54908: PUSH
54909: LD_INT 70
54911: ST_TO_ADDR
54912: GO 54922
// eff := 30 ;
54914: LD_ADDR_VAR 0 3
54918: PUSH
54919: LD_INT 30
54921: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54922: LD_VAR 0 1
54926: PPUSH
54927: CALL_OW 250
54931: PPUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: CALL_OW 251
54941: PPUSH
54942: LD_VAR 0 3
54946: PPUSH
54947: CALL_OW 495
// end ;
54951: LD_VAR 0 2
54955: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54956: LD_INT 0
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54967: LD_VAR 0 1
54971: PPUSH
54972: CALL_OW 302
54976: NOT
54977: PUSH
54978: LD_VAR 0 2
54982: PPUSH
54983: LD_VAR 0 3
54987: PPUSH
54988: CALL_OW 488
54992: NOT
54993: OR
54994: PUSH
54995: LD_VAR 0 4
54999: NOT
55000: OR
55001: IFFALSE 55005
// exit ;
55003: GO 55345
// list := [ ] ;
55005: LD_ADDR_VAR 0 13
55009: PUSH
55010: EMPTY
55011: ST_TO_ADDR
// if x - r < 0 then
55012: LD_VAR 0 2
55016: PUSH
55017: LD_VAR 0 4
55021: MINUS
55022: PUSH
55023: LD_INT 0
55025: LESS
55026: IFFALSE 55038
// min_x := 0 else
55028: LD_ADDR_VAR 0 7
55032: PUSH
55033: LD_INT 0
55035: ST_TO_ADDR
55036: GO 55054
// min_x := x - r ;
55038: LD_ADDR_VAR 0 7
55042: PUSH
55043: LD_VAR 0 2
55047: PUSH
55048: LD_VAR 0 4
55052: MINUS
55053: ST_TO_ADDR
// if y - r < 0 then
55054: LD_VAR 0 3
55058: PUSH
55059: LD_VAR 0 4
55063: MINUS
55064: PUSH
55065: LD_INT 0
55067: LESS
55068: IFFALSE 55080
// min_y := 0 else
55070: LD_ADDR_VAR 0 8
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
55078: GO 55096
// min_y := y - r ;
55080: LD_ADDR_VAR 0 8
55084: PUSH
55085: LD_VAR 0 3
55089: PUSH
55090: LD_VAR 0 4
55094: MINUS
55095: ST_TO_ADDR
// max_x := x + r ;
55096: LD_ADDR_VAR 0 9
55100: PUSH
55101: LD_VAR 0 2
55105: PUSH
55106: LD_VAR 0 4
55110: PLUS
55111: ST_TO_ADDR
// max_y := y + r ;
55112: LD_ADDR_VAR 0 10
55116: PUSH
55117: LD_VAR 0 3
55121: PUSH
55122: LD_VAR 0 4
55126: PLUS
55127: ST_TO_ADDR
// for _x = min_x to max_x do
55128: LD_ADDR_VAR 0 11
55132: PUSH
55133: DOUBLE
55134: LD_VAR 0 7
55138: DEC
55139: ST_TO_ADDR
55140: LD_VAR 0 9
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55263
// for _y = min_y to max_y do
55148: LD_ADDR_VAR 0 12
55152: PUSH
55153: DOUBLE
55154: LD_VAR 0 8
55158: DEC
55159: ST_TO_ADDR
55160: LD_VAR 0 10
55164: PUSH
55165: FOR_TO
55166: IFFALSE 55259
// begin if not ValidHex ( _x , _y ) then
55168: LD_VAR 0 11
55172: PPUSH
55173: LD_VAR 0 12
55177: PPUSH
55178: CALL_OW 488
55182: NOT
55183: IFFALSE 55187
// continue ;
55185: GO 55165
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55187: LD_VAR 0 11
55191: PPUSH
55192: LD_VAR 0 12
55196: PPUSH
55197: CALL_OW 351
55201: PUSH
55202: LD_VAR 0 11
55206: PPUSH
55207: LD_VAR 0 12
55211: PPUSH
55212: CALL_OW 554
55216: AND
55217: IFFALSE 55257
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55219: LD_ADDR_VAR 0 13
55223: PUSH
55224: LD_VAR 0 13
55228: PPUSH
55229: LD_VAR 0 13
55233: PUSH
55234: LD_INT 1
55236: PLUS
55237: PPUSH
55238: LD_VAR 0 11
55242: PUSH
55243: LD_VAR 0 12
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PPUSH
55252: CALL_OW 2
55256: ST_TO_ADDR
// end ;
55257: GO 55165
55259: POP
55260: POP
55261: GO 55145
55263: POP
55264: POP
// if not list then
55265: LD_VAR 0 13
55269: NOT
55270: IFFALSE 55274
// exit ;
55272: GO 55345
// for i in list do
55274: LD_ADDR_VAR 0 6
55278: PUSH
55279: LD_VAR 0 13
55283: PUSH
55284: FOR_IN
55285: IFFALSE 55343
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_STRING M
55294: PUSH
55295: LD_VAR 0 6
55299: PUSH
55300: LD_INT 1
55302: ARRAY
55303: PUSH
55304: LD_VAR 0 6
55308: PUSH
55309: LD_INT 2
55311: ARRAY
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: PPUSH
55337: CALL_OW 447
55341: GO 55284
55343: POP
55344: POP
// end ;
55345: LD_VAR 0 5
55349: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55350: LD_INT 0
55352: PPUSH
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55362: LD_VAR 0 1
55366: PPUSH
55367: CALL_OW 302
55371: NOT
55372: PUSH
55373: LD_VAR 0 2
55377: PPUSH
55378: LD_VAR 0 3
55382: PPUSH
55383: CALL_OW 488
55387: NOT
55388: OR
55389: PUSH
55390: LD_VAR 0 4
55394: NOT
55395: OR
55396: IFFALSE 55400
// exit ;
55398: GO 55913
// list := [ ] ;
55400: LD_ADDR_VAR 0 13
55404: PUSH
55405: EMPTY
55406: ST_TO_ADDR
// if x - r < 0 then
55407: LD_VAR 0 2
55411: PUSH
55412: LD_VAR 0 4
55416: MINUS
55417: PUSH
55418: LD_INT 0
55420: LESS
55421: IFFALSE 55433
// min_x := 0 else
55423: LD_ADDR_VAR 0 7
55427: PUSH
55428: LD_INT 0
55430: ST_TO_ADDR
55431: GO 55449
// min_x := x - r ;
55433: LD_ADDR_VAR 0 7
55437: PUSH
55438: LD_VAR 0 2
55442: PUSH
55443: LD_VAR 0 4
55447: MINUS
55448: ST_TO_ADDR
// if y - r < 0 then
55449: LD_VAR 0 3
55453: PUSH
55454: LD_VAR 0 4
55458: MINUS
55459: PUSH
55460: LD_INT 0
55462: LESS
55463: IFFALSE 55475
// min_y := 0 else
55465: LD_ADDR_VAR 0 8
55469: PUSH
55470: LD_INT 0
55472: ST_TO_ADDR
55473: GO 55491
// min_y := y - r ;
55475: LD_ADDR_VAR 0 8
55479: PUSH
55480: LD_VAR 0 3
55484: PUSH
55485: LD_VAR 0 4
55489: MINUS
55490: ST_TO_ADDR
// max_x := x + r ;
55491: LD_ADDR_VAR 0 9
55495: PUSH
55496: LD_VAR 0 2
55500: PUSH
55501: LD_VAR 0 4
55505: PLUS
55506: ST_TO_ADDR
// max_y := y + r ;
55507: LD_ADDR_VAR 0 10
55511: PUSH
55512: LD_VAR 0 3
55516: PUSH
55517: LD_VAR 0 4
55521: PLUS
55522: ST_TO_ADDR
// for _x = min_x to max_x do
55523: LD_ADDR_VAR 0 11
55527: PUSH
55528: DOUBLE
55529: LD_VAR 0 7
55533: DEC
55534: ST_TO_ADDR
55535: LD_VAR 0 9
55539: PUSH
55540: FOR_TO
55541: IFFALSE 55658
// for _y = min_y to max_y do
55543: LD_ADDR_VAR 0 12
55547: PUSH
55548: DOUBLE
55549: LD_VAR 0 8
55553: DEC
55554: ST_TO_ADDR
55555: LD_VAR 0 10
55559: PUSH
55560: FOR_TO
55561: IFFALSE 55654
// begin if not ValidHex ( _x , _y ) then
55563: LD_VAR 0 11
55567: PPUSH
55568: LD_VAR 0 12
55572: PPUSH
55573: CALL_OW 488
55577: NOT
55578: IFFALSE 55582
// continue ;
55580: GO 55560
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55582: LD_VAR 0 11
55586: PPUSH
55587: LD_VAR 0 12
55591: PPUSH
55592: CALL_OW 351
55596: PUSH
55597: LD_VAR 0 11
55601: PPUSH
55602: LD_VAR 0 12
55606: PPUSH
55607: CALL_OW 554
55611: AND
55612: IFFALSE 55652
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55614: LD_ADDR_VAR 0 13
55618: PUSH
55619: LD_VAR 0 13
55623: PPUSH
55624: LD_VAR 0 13
55628: PUSH
55629: LD_INT 1
55631: PLUS
55632: PPUSH
55633: LD_VAR 0 11
55637: PUSH
55638: LD_VAR 0 12
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PPUSH
55647: CALL_OW 2
55651: ST_TO_ADDR
// end ;
55652: GO 55560
55654: POP
55655: POP
55656: GO 55540
55658: POP
55659: POP
// if not list then
55660: LD_VAR 0 13
55664: NOT
55665: IFFALSE 55669
// exit ;
55667: GO 55913
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55669: LD_ADDR_VAR 0 13
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: LD_VAR 0 13
55683: PPUSH
55684: LD_INT 1
55686: PPUSH
55687: LD_INT 1
55689: PPUSH
55690: CALL 8392 0 4
55694: ST_TO_ADDR
// ComStop ( flame ) ;
55695: LD_VAR 0 1
55699: PPUSH
55700: CALL_OW 141
// for i in list do
55704: LD_ADDR_VAR 0 6
55708: PUSH
55709: LD_VAR 0 13
55713: PUSH
55714: FOR_IN
55715: IFFALSE 55746
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55717: LD_VAR 0 1
55721: PPUSH
55722: LD_VAR 0 6
55726: PUSH
55727: LD_INT 1
55729: ARRAY
55730: PPUSH
55731: LD_VAR 0 6
55735: PUSH
55736: LD_INT 2
55738: ARRAY
55739: PPUSH
55740: CALL_OW 176
55744: GO 55714
55746: POP
55747: POP
// repeat wait ( 0 0$1 ) ;
55748: LD_INT 35
55750: PPUSH
55751: CALL_OW 67
// task := GetTaskList ( flame ) ;
55755: LD_ADDR_VAR 0 14
55759: PUSH
55760: LD_VAR 0 1
55764: PPUSH
55765: CALL_OW 437
55769: ST_TO_ADDR
// if not task then
55770: LD_VAR 0 14
55774: NOT
55775: IFFALSE 55779
// exit ;
55777: GO 55913
// if task [ 1 ] [ 1 ] <> | then
55779: LD_VAR 0 14
55783: PUSH
55784: LD_INT 1
55786: ARRAY
55787: PUSH
55788: LD_INT 1
55790: ARRAY
55791: PUSH
55792: LD_STRING |
55794: NONEQUAL
55795: IFFALSE 55799
// exit ;
55797: GO 55913
// _x := task [ 1 ] [ 2 ] ;
55799: LD_ADDR_VAR 0 11
55803: PUSH
55804: LD_VAR 0 14
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PUSH
55813: LD_INT 2
55815: ARRAY
55816: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55817: LD_ADDR_VAR 0 12
55821: PUSH
55822: LD_VAR 0 14
55826: PUSH
55827: LD_INT 1
55829: ARRAY
55830: PUSH
55831: LD_INT 3
55833: ARRAY
55834: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55835: LD_VAR 0 11
55839: PPUSH
55840: LD_VAR 0 12
55844: PPUSH
55845: CALL_OW 351
55849: NOT
55850: PUSH
55851: LD_VAR 0 11
55855: PPUSH
55856: LD_VAR 0 12
55860: PPUSH
55861: CALL_OW 554
55865: NOT
55866: OR
55867: IFFALSE 55901
// begin task := Delete ( task , 1 ) ;
55869: LD_ADDR_VAR 0 14
55873: PUSH
55874: LD_VAR 0 14
55878: PPUSH
55879: LD_INT 1
55881: PPUSH
55882: CALL_OW 3
55886: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 14
55896: PPUSH
55897: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55901: LD_VAR 0 1
55905: PPUSH
55906: CALL_OW 314
55910: NOT
55911: IFFALSE 55748
// end ;
55913: LD_VAR 0 5
55917: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55918: LD_EXP 44
55922: NOT
55923: IFFALSE 55973
55925: GO 55927
55927: DISABLE
// begin initHack := true ;
55928: LD_ADDR_EXP 44
55932: PUSH
55933: LD_INT 1
55935: ST_TO_ADDR
// hackTanks := [ ] ;
55936: LD_ADDR_EXP 45
55940: PUSH
55941: EMPTY
55942: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55943: LD_ADDR_EXP 46
55947: PUSH
55948: EMPTY
55949: ST_TO_ADDR
// hackLimit := 3 ;
55950: LD_ADDR_EXP 47
55954: PUSH
55955: LD_INT 3
55957: ST_TO_ADDR
// hackDist := 12 ;
55958: LD_ADDR_EXP 48
55962: PUSH
55963: LD_INT 12
55965: ST_TO_ADDR
// hackCounter := [ ] ;
55966: LD_ADDR_EXP 49
55970: PUSH
55971: EMPTY
55972: ST_TO_ADDR
// end ;
55973: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55974: LD_EXP 44
55978: PUSH
55979: LD_INT 34
55981: PUSH
55982: LD_INT 99
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PPUSH
55989: CALL_OW 69
55993: AND
55994: IFFALSE 56247
55996: GO 55998
55998: DISABLE
55999: LD_INT 0
56001: PPUSH
56002: PPUSH
// begin enable ;
56003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56004: LD_ADDR_VAR 0 1
56008: PUSH
56009: LD_INT 34
56011: PUSH
56012: LD_INT 99
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PPUSH
56019: CALL_OW 69
56023: PUSH
56024: FOR_IN
56025: IFFALSE 56245
// begin if not i in hackTanks then
56027: LD_VAR 0 1
56031: PUSH
56032: LD_EXP 45
56036: IN
56037: NOT
56038: IFFALSE 56121
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56040: LD_ADDR_EXP 45
56044: PUSH
56045: LD_EXP 45
56049: PPUSH
56050: LD_EXP 45
56054: PUSH
56055: LD_INT 1
56057: PLUS
56058: PPUSH
56059: LD_VAR 0 1
56063: PPUSH
56064: CALL_OW 1
56068: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56069: LD_ADDR_EXP 46
56073: PUSH
56074: LD_EXP 46
56078: PPUSH
56079: LD_EXP 46
56083: PUSH
56084: LD_INT 1
56086: PLUS
56087: PPUSH
56088: EMPTY
56089: PPUSH
56090: CALL_OW 1
56094: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56095: LD_ADDR_EXP 49
56099: PUSH
56100: LD_EXP 49
56104: PPUSH
56105: LD_EXP 49
56109: PUSH
56110: LD_INT 1
56112: PLUS
56113: PPUSH
56114: EMPTY
56115: PPUSH
56116: CALL_OW 1
56120: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56121: LD_VAR 0 1
56125: PPUSH
56126: CALL_OW 302
56130: NOT
56131: IFFALSE 56144
// begin HackUnlinkAll ( i ) ;
56133: LD_VAR 0 1
56137: PPUSH
56138: CALL 56250 0 1
// continue ;
56142: GO 56024
// end ; HackCheckCapturedStatus ( i ) ;
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL 56693 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56153: LD_ADDR_VAR 0 2
56157: PUSH
56158: LD_INT 81
56160: PUSH
56161: LD_VAR 0 1
56165: PPUSH
56166: CALL_OW 255
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 33
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 91
56187: PUSH
56188: LD_VAR 0 1
56192: PUSH
56193: LD_EXP 48
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 50
56205: PUSH
56206: EMPTY
56207: LIST
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: PPUSH
56215: CALL_OW 69
56219: ST_TO_ADDR
// if not tmp then
56220: LD_VAR 0 2
56224: NOT
56225: IFFALSE 56229
// continue ;
56227: GO 56024
// HackLink ( i , tmp ) ;
56229: LD_VAR 0 1
56233: PPUSH
56234: LD_VAR 0 2
56238: PPUSH
56239: CALL 56386 0 2
// end ;
56243: GO 56024
56245: POP
56246: POP
// end ;
56247: PPOPN 2
56249: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56250: LD_INT 0
56252: PPUSH
56253: PPUSH
56254: PPUSH
// if not hack in hackTanks then
56255: LD_VAR 0 1
56259: PUSH
56260: LD_EXP 45
56264: IN
56265: NOT
56266: IFFALSE 56270
// exit ;
56268: GO 56381
// index := GetElementIndex ( hackTanks , hack ) ;
56270: LD_ADDR_VAR 0 4
56274: PUSH
56275: LD_EXP 45
56279: PPUSH
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL 7689 0 2
56289: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56290: LD_EXP 46
56294: PUSH
56295: LD_VAR 0 4
56299: ARRAY
56300: IFFALSE 56381
// begin for i in hackTanksCaptured [ index ] do
56302: LD_ADDR_VAR 0 3
56306: PUSH
56307: LD_EXP 46
56311: PUSH
56312: LD_VAR 0 4
56316: ARRAY
56317: PUSH
56318: FOR_IN
56319: IFFALSE 56345
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56321: LD_VAR 0 3
56325: PUSH
56326: LD_INT 1
56328: ARRAY
56329: PPUSH
56330: LD_VAR 0 3
56334: PUSH
56335: LD_INT 2
56337: ARRAY
56338: PPUSH
56339: CALL_OW 235
56343: GO 56318
56345: POP
56346: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56347: LD_ADDR_EXP 46
56351: PUSH
56352: LD_EXP 46
56356: PPUSH
56357: LD_VAR 0 4
56361: PPUSH
56362: EMPTY
56363: PPUSH
56364: CALL_OW 1
56368: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56369: LD_VAR 0 1
56373: PPUSH
56374: LD_INT 0
56376: PPUSH
56377: CALL_OW 505
// end ; end ;
56381: LD_VAR 0 2
56385: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56386: LD_INT 0
56388: PPUSH
56389: PPUSH
56390: PPUSH
// if not hack in hackTanks or not vehicles then
56391: LD_VAR 0 1
56395: PUSH
56396: LD_EXP 45
56400: IN
56401: NOT
56402: PUSH
56403: LD_VAR 0 2
56407: NOT
56408: OR
56409: IFFALSE 56413
// exit ;
56411: GO 56688
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56413: LD_ADDR_VAR 0 2
56417: PUSH
56418: LD_VAR 0 1
56422: PPUSH
56423: LD_VAR 0 2
56427: PPUSH
56428: LD_INT 1
56430: PPUSH
56431: LD_INT 1
56433: PPUSH
56434: CALL 8339 0 4
56438: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56439: LD_ADDR_VAR 0 5
56443: PUSH
56444: LD_EXP 45
56448: PPUSH
56449: LD_VAR 0 1
56453: PPUSH
56454: CALL 7689 0 2
56458: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56459: LD_EXP 46
56463: PUSH
56464: LD_VAR 0 5
56468: ARRAY
56469: PUSH
56470: LD_EXP 47
56474: LESS
56475: IFFALSE 56664
// begin for i := 1 to vehicles do
56477: LD_ADDR_VAR 0 4
56481: PUSH
56482: DOUBLE
56483: LD_INT 1
56485: DEC
56486: ST_TO_ADDR
56487: LD_VAR 0 2
56491: PUSH
56492: FOR_TO
56493: IFFALSE 56662
// begin if hackTanksCaptured [ index ] = hackLimit then
56495: LD_EXP 46
56499: PUSH
56500: LD_VAR 0 5
56504: ARRAY
56505: PUSH
56506: LD_EXP 47
56510: EQUAL
56511: IFFALSE 56515
// break ;
56513: GO 56662
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56515: LD_ADDR_EXP 49
56519: PUSH
56520: LD_EXP 49
56524: PPUSH
56525: LD_VAR 0 5
56529: PPUSH
56530: LD_EXP 49
56534: PUSH
56535: LD_VAR 0 5
56539: ARRAY
56540: PUSH
56541: LD_INT 1
56543: PLUS
56544: PPUSH
56545: CALL_OW 1
56549: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56550: LD_ADDR_EXP 46
56554: PUSH
56555: LD_EXP 46
56559: PPUSH
56560: LD_VAR 0 5
56564: PUSH
56565: LD_EXP 46
56569: PUSH
56570: LD_VAR 0 5
56574: ARRAY
56575: PUSH
56576: LD_INT 1
56578: PLUS
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PPUSH
56584: LD_VAR 0 2
56588: PUSH
56589: LD_VAR 0 4
56593: ARRAY
56594: PUSH
56595: LD_VAR 0 2
56599: PUSH
56600: LD_VAR 0 4
56604: ARRAY
56605: PPUSH
56606: CALL_OW 255
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PPUSH
56615: CALL 7904 0 3
56619: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56620: LD_VAR 0 2
56624: PUSH
56625: LD_VAR 0 4
56629: ARRAY
56630: PPUSH
56631: LD_VAR 0 1
56635: PPUSH
56636: CALL_OW 255
56640: PPUSH
56641: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56645: LD_VAR 0 2
56649: PUSH
56650: LD_VAR 0 4
56654: ARRAY
56655: PPUSH
56656: CALL_OW 141
// end ;
56660: GO 56492
56662: POP
56663: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56664: LD_VAR 0 1
56668: PPUSH
56669: LD_EXP 46
56673: PUSH
56674: LD_VAR 0 5
56678: ARRAY
56679: PUSH
56680: LD_INT 0
56682: PLUS
56683: PPUSH
56684: CALL_OW 505
// end ;
56688: LD_VAR 0 3
56692: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56693: LD_INT 0
56695: PPUSH
56696: PPUSH
56697: PPUSH
56698: PPUSH
// if not hack in hackTanks then
56699: LD_VAR 0 1
56703: PUSH
56704: LD_EXP 45
56708: IN
56709: NOT
56710: IFFALSE 56714
// exit ;
56712: GO 56954
// index := GetElementIndex ( hackTanks , hack ) ;
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: LD_EXP 45
56723: PPUSH
56724: LD_VAR 0 1
56728: PPUSH
56729: CALL 7689 0 2
56733: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56734: LD_ADDR_VAR 0 3
56738: PUSH
56739: DOUBLE
56740: LD_EXP 46
56744: PUSH
56745: LD_VAR 0 4
56749: ARRAY
56750: INC
56751: ST_TO_ADDR
56752: LD_INT 1
56754: PUSH
56755: FOR_DOWNTO
56756: IFFALSE 56928
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56758: LD_ADDR_VAR 0 5
56762: PUSH
56763: LD_EXP 46
56767: PUSH
56768: LD_VAR 0 4
56772: ARRAY
56773: PUSH
56774: LD_VAR 0 3
56778: ARRAY
56779: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56780: LD_VAR 0 5
56784: PUSH
56785: LD_INT 1
56787: ARRAY
56788: PPUSH
56789: CALL_OW 302
56793: NOT
56794: PUSH
56795: LD_VAR 0 5
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: PPUSH
56804: CALL_OW 255
56808: PUSH
56809: LD_VAR 0 1
56813: PPUSH
56814: CALL_OW 255
56818: NONEQUAL
56819: OR
56820: IFFALSE 56926
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56822: LD_VAR 0 5
56826: PUSH
56827: LD_INT 1
56829: ARRAY
56830: PPUSH
56831: CALL_OW 305
56835: PUSH
56836: LD_VAR 0 5
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: PPUSH
56845: CALL_OW 255
56849: PUSH
56850: LD_VAR 0 1
56854: PPUSH
56855: CALL_OW 255
56859: EQUAL
56860: AND
56861: IFFALSE 56885
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56863: LD_VAR 0 5
56867: PUSH
56868: LD_INT 1
56870: ARRAY
56871: PPUSH
56872: LD_VAR 0 5
56876: PUSH
56877: LD_INT 2
56879: ARRAY
56880: PPUSH
56881: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56885: LD_ADDR_EXP 46
56889: PUSH
56890: LD_EXP 46
56894: PPUSH
56895: LD_VAR 0 4
56899: PPUSH
56900: LD_EXP 46
56904: PUSH
56905: LD_VAR 0 4
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 3
56915: PPUSH
56916: CALL_OW 3
56920: PPUSH
56921: CALL_OW 1
56925: ST_TO_ADDR
// end ; end ;
56926: GO 56755
56928: POP
56929: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56930: LD_VAR 0 1
56934: PPUSH
56935: LD_EXP 46
56939: PUSH
56940: LD_VAR 0 4
56944: ARRAY
56945: PUSH
56946: LD_INT 0
56948: PLUS
56949: PPUSH
56950: CALL_OW 505
// end ;
56954: LD_VAR 0 2
56958: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56959: LD_INT 0
56961: PPUSH
56962: PPUSH
56963: PPUSH
56964: PPUSH
// if not hack in hackTanks then
56965: LD_VAR 0 1
56969: PUSH
56970: LD_EXP 45
56974: IN
56975: NOT
56976: IFFALSE 56980
// exit ;
56978: GO 57065
// index := GetElementIndex ( hackTanks , hack ) ;
56980: LD_ADDR_VAR 0 5
56984: PUSH
56985: LD_EXP 45
56989: PPUSH
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL 7689 0 2
56999: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57000: LD_ADDR_VAR 0 4
57004: PUSH
57005: DOUBLE
57006: LD_INT 1
57008: DEC
57009: ST_TO_ADDR
57010: LD_EXP 46
57014: PUSH
57015: LD_VAR 0 5
57019: ARRAY
57020: PUSH
57021: FOR_TO
57022: IFFALSE 57063
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57024: LD_EXP 46
57028: PUSH
57029: LD_VAR 0 5
57033: ARRAY
57034: PUSH
57035: LD_VAR 0 4
57039: ARRAY
57040: PUSH
57041: LD_INT 1
57043: ARRAY
57044: PUSH
57045: LD_VAR 0 2
57049: EQUAL
57050: IFFALSE 57061
// KillUnit ( vehicle ) ;
57052: LD_VAR 0 2
57056: PPUSH
57057: CALL_OW 66
57061: GO 57021
57063: POP
57064: POP
// end ;
57065: LD_VAR 0 3
57069: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57070: LD_EXP 50
57074: NOT
57075: IFFALSE 57110
57077: GO 57079
57079: DISABLE
// begin initMiner := true ;
57080: LD_ADDR_EXP 50
57084: PUSH
57085: LD_INT 1
57087: ST_TO_ADDR
// minersList := [ ] ;
57088: LD_ADDR_EXP 51
57092: PUSH
57093: EMPTY
57094: ST_TO_ADDR
// minerMinesList := [ ] ;
57095: LD_ADDR_EXP 52
57099: PUSH
57100: EMPTY
57101: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57102: LD_ADDR_EXP 53
57106: PUSH
57107: LD_INT 5
57109: ST_TO_ADDR
// end ;
57110: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57111: LD_EXP 50
57115: PUSH
57116: LD_INT 34
57118: PUSH
57119: LD_INT 81
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PPUSH
57126: CALL_OW 69
57130: AND
57131: IFFALSE 57592
57133: GO 57135
57135: DISABLE
57136: LD_INT 0
57138: PPUSH
57139: PPUSH
57140: PPUSH
57141: PPUSH
// begin enable ;
57142: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57143: LD_ADDR_VAR 0 1
57147: PUSH
57148: LD_INT 34
57150: PUSH
57151: LD_INT 81
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PPUSH
57158: CALL_OW 69
57162: PUSH
57163: FOR_IN
57164: IFFALSE 57236
// begin if not i in minersList then
57166: LD_VAR 0 1
57170: PUSH
57171: LD_EXP 51
57175: IN
57176: NOT
57177: IFFALSE 57234
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57179: LD_ADDR_EXP 51
57183: PUSH
57184: LD_EXP 51
57188: PPUSH
57189: LD_EXP 51
57193: PUSH
57194: LD_INT 1
57196: PLUS
57197: PPUSH
57198: LD_VAR 0 1
57202: PPUSH
57203: CALL_OW 1
57207: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57208: LD_ADDR_EXP 52
57212: PUSH
57213: LD_EXP 52
57217: PPUSH
57218: LD_EXP 52
57222: PUSH
57223: LD_INT 1
57225: PLUS
57226: PPUSH
57227: EMPTY
57228: PPUSH
57229: CALL_OW 1
57233: ST_TO_ADDR
// end end ;
57234: GO 57163
57236: POP
57237: POP
// for i := minerMinesList downto 1 do
57238: LD_ADDR_VAR 0 1
57242: PUSH
57243: DOUBLE
57244: LD_EXP 52
57248: INC
57249: ST_TO_ADDR
57250: LD_INT 1
57252: PUSH
57253: FOR_DOWNTO
57254: IFFALSE 57590
// begin if IsLive ( minersList [ i ] ) then
57256: LD_EXP 51
57260: PUSH
57261: LD_VAR 0 1
57265: ARRAY
57266: PPUSH
57267: CALL_OW 300
57271: IFFALSE 57299
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57273: LD_EXP 51
57277: PUSH
57278: LD_VAR 0 1
57282: ARRAY
57283: PPUSH
57284: LD_EXP 52
57288: PUSH
57289: LD_VAR 0 1
57293: ARRAY
57294: PPUSH
57295: CALL_OW 505
// if not minerMinesList [ i ] then
57299: LD_EXP 52
57303: PUSH
57304: LD_VAR 0 1
57308: ARRAY
57309: NOT
57310: IFFALSE 57314
// continue ;
57312: GO 57253
// for j := minerMinesList [ i ] downto 1 do
57314: LD_ADDR_VAR 0 2
57318: PUSH
57319: DOUBLE
57320: LD_EXP 52
57324: PUSH
57325: LD_VAR 0 1
57329: ARRAY
57330: INC
57331: ST_TO_ADDR
57332: LD_INT 1
57334: PUSH
57335: FOR_DOWNTO
57336: IFFALSE 57586
// begin side := GetSide ( minersList [ i ] ) ;
57338: LD_ADDR_VAR 0 3
57342: PUSH
57343: LD_EXP 51
57347: PUSH
57348: LD_VAR 0 1
57352: ARRAY
57353: PPUSH
57354: CALL_OW 255
57358: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57359: LD_ADDR_VAR 0 4
57363: PUSH
57364: LD_EXP 52
57368: PUSH
57369: LD_VAR 0 1
57373: ARRAY
57374: PUSH
57375: LD_VAR 0 2
57379: ARRAY
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PPUSH
57385: LD_EXP 52
57389: PUSH
57390: LD_VAR 0 1
57394: ARRAY
57395: PUSH
57396: LD_VAR 0 2
57400: ARRAY
57401: PUSH
57402: LD_INT 2
57404: ARRAY
57405: PPUSH
57406: CALL_OW 428
57410: ST_TO_ADDR
// if not tmp then
57411: LD_VAR 0 4
57415: NOT
57416: IFFALSE 57420
// continue ;
57418: GO 57335
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57420: LD_VAR 0 4
57424: PUSH
57425: LD_INT 81
57427: PUSH
57428: LD_VAR 0 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PPUSH
57437: CALL_OW 69
57441: IN
57442: PUSH
57443: LD_EXP 52
57447: PUSH
57448: LD_VAR 0 1
57452: ARRAY
57453: PUSH
57454: LD_VAR 0 2
57458: ARRAY
57459: PUSH
57460: LD_INT 1
57462: ARRAY
57463: PPUSH
57464: LD_EXP 52
57468: PUSH
57469: LD_VAR 0 1
57473: ARRAY
57474: PUSH
57475: LD_VAR 0 2
57479: ARRAY
57480: PUSH
57481: LD_INT 2
57483: ARRAY
57484: PPUSH
57485: CALL_OW 458
57489: AND
57490: IFFALSE 57584
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57492: LD_EXP 52
57496: PUSH
57497: LD_VAR 0 1
57501: ARRAY
57502: PUSH
57503: LD_VAR 0 2
57507: ARRAY
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: LD_EXP 52
57517: PUSH
57518: LD_VAR 0 1
57522: ARRAY
57523: PUSH
57524: LD_VAR 0 2
57528: ARRAY
57529: PUSH
57530: LD_INT 2
57532: ARRAY
57533: PPUSH
57534: LD_VAR 0 3
57538: PPUSH
57539: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57543: LD_ADDR_EXP 52
57547: PUSH
57548: LD_EXP 52
57552: PPUSH
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_EXP 52
57562: PUSH
57563: LD_VAR 0 1
57567: ARRAY
57568: PPUSH
57569: LD_VAR 0 2
57573: PPUSH
57574: CALL_OW 3
57578: PPUSH
57579: CALL_OW 1
57583: ST_TO_ADDR
// end ; end ;
57584: GO 57335
57586: POP
57587: POP
// end ;
57588: GO 57253
57590: POP
57591: POP
// end ;
57592: PPOPN 4
57594: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57595: LD_INT 0
57597: PPUSH
57598: PPUSH
// result := false ;
57599: LD_ADDR_VAR 0 4
57603: PUSH
57604: LD_INT 0
57606: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57607: LD_VAR 0 1
57611: PPUSH
57612: CALL_OW 264
57616: PUSH
57617: LD_INT 81
57619: EQUAL
57620: NOT
57621: IFFALSE 57625
// exit ;
57623: GO 57865
// index := GetElementIndex ( minersList , unit ) ;
57625: LD_ADDR_VAR 0 5
57629: PUSH
57630: LD_EXP 51
57634: PPUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: CALL 7689 0 2
57644: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57645: LD_EXP 52
57649: PUSH
57650: LD_VAR 0 5
57654: ARRAY
57655: PUSH
57656: LD_EXP 53
57660: GREATEREQUAL
57661: IFFALSE 57665
// exit ;
57663: GO 57865
// ComMoveXY ( unit , x , y ) ;
57665: LD_VAR 0 1
57669: PPUSH
57670: LD_VAR 0 2
57674: PPUSH
57675: LD_VAR 0 3
57679: PPUSH
57680: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57684: LD_INT 35
57686: PPUSH
57687: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57691: LD_VAR 0 1
57695: PPUSH
57696: LD_VAR 0 2
57700: PPUSH
57701: LD_VAR 0 3
57705: PPUSH
57706: CALL 39450 0 3
57710: NOT
57711: PUSH
57712: LD_VAR 0 1
57716: PPUSH
57717: CALL_OW 314
57721: AND
57722: IFFALSE 57726
// exit ;
57724: GO 57865
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57726: LD_VAR 0 2
57730: PPUSH
57731: LD_VAR 0 3
57735: PPUSH
57736: CALL_OW 428
57740: PUSH
57741: LD_VAR 0 1
57745: EQUAL
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: CALL_OW 314
57756: NOT
57757: AND
57758: IFFALSE 57684
// PlaySoundXY ( x , y , PlantMine ) ;
57760: LD_VAR 0 2
57764: PPUSH
57765: LD_VAR 0 3
57769: PPUSH
57770: LD_STRING PlantMine
57772: PPUSH
57773: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57777: LD_VAR 0 2
57781: PPUSH
57782: LD_VAR 0 3
57786: PPUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: CALL_OW 255
57796: PPUSH
57797: LD_INT 0
57799: PPUSH
57800: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57804: LD_ADDR_EXP 52
57808: PUSH
57809: LD_EXP 52
57813: PPUSH
57814: LD_VAR 0 5
57818: PUSH
57819: LD_EXP 52
57823: PUSH
57824: LD_VAR 0 5
57828: ARRAY
57829: PUSH
57830: LD_INT 1
57832: PLUS
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PPUSH
57838: LD_VAR 0 2
57842: PUSH
57843: LD_VAR 0 3
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PPUSH
57852: CALL 7904 0 3
57856: ST_TO_ADDR
// result := true ;
57857: LD_ADDR_VAR 0 4
57861: PUSH
57862: LD_INT 1
57864: ST_TO_ADDR
// end ;
57865: LD_VAR 0 4
57869: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57870: LD_INT 0
57872: PPUSH
57873: PPUSH
57874: PPUSH
// if not unit in minersList then
57875: LD_VAR 0 1
57879: PUSH
57880: LD_EXP 51
57884: IN
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 58282
// index := GetElementIndex ( minersList , unit ) ;
57890: LD_ADDR_VAR 0 6
57894: PUSH
57895: LD_EXP 51
57899: PPUSH
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL 7689 0 2
57909: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57910: LD_ADDR_VAR 0 5
57914: PUSH
57915: DOUBLE
57916: LD_EXP 52
57920: PUSH
57921: LD_VAR 0 6
57925: ARRAY
57926: INC
57927: ST_TO_ADDR
57928: LD_INT 1
57930: PUSH
57931: FOR_DOWNTO
57932: IFFALSE 58093
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57934: LD_EXP 52
57938: PUSH
57939: LD_VAR 0 6
57943: ARRAY
57944: PUSH
57945: LD_VAR 0 5
57949: ARRAY
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PUSH
57955: LD_VAR 0 2
57959: EQUAL
57960: PUSH
57961: LD_EXP 52
57965: PUSH
57966: LD_VAR 0 6
57970: ARRAY
57971: PUSH
57972: LD_VAR 0 5
57976: ARRAY
57977: PUSH
57978: LD_INT 2
57980: ARRAY
57981: PUSH
57982: LD_VAR 0 3
57986: EQUAL
57987: AND
57988: IFFALSE 58091
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57990: LD_EXP 52
57994: PUSH
57995: LD_VAR 0 6
57999: ARRAY
58000: PUSH
58001: LD_VAR 0 5
58005: ARRAY
58006: PUSH
58007: LD_INT 1
58009: ARRAY
58010: PPUSH
58011: LD_EXP 52
58015: PUSH
58016: LD_VAR 0 6
58020: ARRAY
58021: PUSH
58022: LD_VAR 0 5
58026: ARRAY
58027: PUSH
58028: LD_INT 2
58030: ARRAY
58031: PPUSH
58032: LD_VAR 0 1
58036: PPUSH
58037: CALL_OW 255
58041: PPUSH
58042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58046: LD_ADDR_EXP 52
58050: PUSH
58051: LD_EXP 52
58055: PPUSH
58056: LD_VAR 0 6
58060: PPUSH
58061: LD_EXP 52
58065: PUSH
58066: LD_VAR 0 6
58070: ARRAY
58071: PPUSH
58072: LD_VAR 0 5
58076: PPUSH
58077: CALL_OW 3
58081: PPUSH
58082: CALL_OW 1
58086: ST_TO_ADDR
// exit ;
58087: POP
58088: POP
58089: GO 58282
// end ; end ;
58091: GO 57931
58093: POP
58094: POP
// for i := minerMinesList [ index ] downto 1 do
58095: LD_ADDR_VAR 0 5
58099: PUSH
58100: DOUBLE
58101: LD_EXP 52
58105: PUSH
58106: LD_VAR 0 6
58110: ARRAY
58111: INC
58112: ST_TO_ADDR
58113: LD_INT 1
58115: PUSH
58116: FOR_DOWNTO
58117: IFFALSE 58280
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58119: LD_EXP 52
58123: PUSH
58124: LD_VAR 0 6
58128: ARRAY
58129: PUSH
58130: LD_VAR 0 5
58134: ARRAY
58135: PUSH
58136: LD_INT 1
58138: ARRAY
58139: PPUSH
58140: LD_EXP 52
58144: PUSH
58145: LD_VAR 0 6
58149: ARRAY
58150: PUSH
58151: LD_VAR 0 5
58155: ARRAY
58156: PUSH
58157: LD_INT 2
58159: ARRAY
58160: PPUSH
58161: LD_VAR 0 2
58165: PPUSH
58166: LD_VAR 0 3
58170: PPUSH
58171: CALL_OW 298
58175: PUSH
58176: LD_INT 6
58178: LESS
58179: IFFALSE 58278
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58181: LD_EXP 52
58185: PUSH
58186: LD_VAR 0 6
58190: ARRAY
58191: PUSH
58192: LD_VAR 0 5
58196: ARRAY
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PPUSH
58202: LD_EXP 52
58206: PUSH
58207: LD_VAR 0 6
58211: ARRAY
58212: PUSH
58213: LD_VAR 0 5
58217: ARRAY
58218: PUSH
58219: LD_INT 2
58221: ARRAY
58222: PPUSH
58223: LD_VAR 0 1
58227: PPUSH
58228: CALL_OW 255
58232: PPUSH
58233: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58237: LD_ADDR_EXP 52
58241: PUSH
58242: LD_EXP 52
58246: PPUSH
58247: LD_VAR 0 6
58251: PPUSH
58252: LD_EXP 52
58256: PUSH
58257: LD_VAR 0 6
58261: ARRAY
58262: PPUSH
58263: LD_VAR 0 5
58267: PPUSH
58268: CALL_OW 3
58272: PPUSH
58273: CALL_OW 1
58277: ST_TO_ADDR
// end ; end ;
58278: GO 58116
58280: POP
58281: POP
// end ;
58282: LD_VAR 0 4
58286: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58287: LD_INT 0
58289: PPUSH
58290: PPUSH
58291: PPUSH
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58298: LD_VAR 0 1
58302: PPUSH
58303: CALL_OW 264
58307: PUSH
58308: LD_INT 81
58310: EQUAL
58311: NOT
58312: PUSH
58313: LD_VAR 0 1
58317: PUSH
58318: LD_EXP 51
58322: IN
58323: NOT
58324: OR
58325: IFFALSE 58329
// exit ;
58327: GO 58651
// index := GetElementIndex ( minersList , unit ) ;
58329: LD_ADDR_VAR 0 6
58333: PUSH
58334: LD_EXP 51
58338: PPUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: CALL 7689 0 2
58348: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58349: LD_ADDR_VAR 0 8
58353: PUSH
58354: LD_EXP 53
58358: PUSH
58359: LD_EXP 52
58363: PUSH
58364: LD_VAR 0 6
58368: ARRAY
58369: MINUS
58370: ST_TO_ADDR
// if not minesFreeAmount then
58371: LD_VAR 0 8
58375: NOT
58376: IFFALSE 58380
// exit ;
58378: GO 58651
// tmp := [ ] ;
58380: LD_ADDR_VAR 0 7
58384: PUSH
58385: EMPTY
58386: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58387: LD_ADDR_VAR 0 5
58391: PUSH
58392: DOUBLE
58393: LD_INT 1
58395: DEC
58396: ST_TO_ADDR
58397: LD_VAR 0 8
58401: PUSH
58402: FOR_TO
58403: IFFALSE 58598
// begin _d := rand ( 0 , 5 ) ;
58405: LD_ADDR_VAR 0 11
58409: PUSH
58410: LD_INT 0
58412: PPUSH
58413: LD_INT 5
58415: PPUSH
58416: CALL_OW 12
58420: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58421: LD_ADDR_VAR 0 12
58425: PUSH
58426: LD_INT 2
58428: PPUSH
58429: LD_INT 6
58431: PPUSH
58432: CALL_OW 12
58436: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58437: LD_ADDR_VAR 0 9
58441: PUSH
58442: LD_VAR 0 2
58446: PPUSH
58447: LD_VAR 0 11
58451: PPUSH
58452: LD_VAR 0 12
58456: PPUSH
58457: CALL_OW 272
58461: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58462: LD_ADDR_VAR 0 10
58466: PUSH
58467: LD_VAR 0 3
58471: PPUSH
58472: LD_VAR 0 11
58476: PPUSH
58477: LD_VAR 0 12
58481: PPUSH
58482: CALL_OW 273
58486: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58487: LD_VAR 0 9
58491: PPUSH
58492: LD_VAR 0 10
58496: PPUSH
58497: CALL_OW 488
58501: PUSH
58502: LD_VAR 0 9
58506: PUSH
58507: LD_VAR 0 10
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_VAR 0 7
58520: IN
58521: NOT
58522: AND
58523: PUSH
58524: LD_VAR 0 9
58528: PPUSH
58529: LD_VAR 0 10
58533: PPUSH
58534: CALL_OW 458
58538: NOT
58539: AND
58540: IFFALSE 58582
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58542: LD_ADDR_VAR 0 7
58546: PUSH
58547: LD_VAR 0 7
58551: PPUSH
58552: LD_VAR 0 7
58556: PUSH
58557: LD_INT 1
58559: PLUS
58560: PPUSH
58561: LD_VAR 0 9
58565: PUSH
58566: LD_VAR 0 10
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PPUSH
58575: CALL_OW 1
58579: ST_TO_ADDR
58580: GO 58596
// i := i - 1 ;
58582: LD_ADDR_VAR 0 5
58586: PUSH
58587: LD_VAR 0 5
58591: PUSH
58592: LD_INT 1
58594: MINUS
58595: ST_TO_ADDR
// end ;
58596: GO 58402
58598: POP
58599: POP
// for i in tmp do
58600: LD_ADDR_VAR 0 5
58604: PUSH
58605: LD_VAR 0 7
58609: PUSH
58610: FOR_IN
58611: IFFALSE 58649
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58613: LD_VAR 0 1
58617: PPUSH
58618: LD_VAR 0 5
58622: PUSH
58623: LD_INT 1
58625: ARRAY
58626: PPUSH
58627: LD_VAR 0 5
58631: PUSH
58632: LD_INT 2
58634: ARRAY
58635: PPUSH
58636: CALL 57595 0 3
58640: NOT
58641: IFFALSE 58647
// exit ;
58643: POP
58644: POP
58645: GO 58651
58647: GO 58610
58649: POP
58650: POP
// end ;
58651: LD_VAR 0 4
58655: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58656: LD_INT 0
58658: PPUSH
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
58663: PPUSH
58664: PPUSH
58665: PPUSH
58666: PPUSH
// if GetClass ( unit ) <> class_sniper then
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 257
58676: PUSH
58677: LD_INT 5
58679: NONEQUAL
58680: IFFALSE 58684
// exit ;
58682: GO 59150
// dist := 8 ;
58684: LD_ADDR_VAR 0 5
58688: PUSH
58689: LD_INT 8
58691: ST_TO_ADDR
// viewRange := 12 ;
58692: LD_ADDR_VAR 0 8
58696: PUSH
58697: LD_INT 12
58699: ST_TO_ADDR
// side := GetSide ( unit ) ;
58700: LD_ADDR_VAR 0 6
58704: PUSH
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 255
58714: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58715: LD_INT 61
58717: PPUSH
58718: LD_VAR 0 6
58722: PPUSH
58723: CALL_OW 321
58727: PUSH
58728: LD_INT 2
58730: EQUAL
58731: IFFALSE 58741
// viewRange := 16 ;
58733: LD_ADDR_VAR 0 8
58737: PUSH
58738: LD_INT 16
58740: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58741: LD_VAR 0 1
58745: PPUSH
58746: LD_VAR 0 2
58750: PPUSH
58751: LD_VAR 0 3
58755: PPUSH
58756: CALL_OW 297
58760: PUSH
58761: LD_VAR 0 5
58765: GREATER
58766: IFFALSE 58845
// begin ComMoveXY ( unit , x , y ) ;
58768: LD_VAR 0 1
58772: PPUSH
58773: LD_VAR 0 2
58777: PPUSH
58778: LD_VAR 0 3
58782: PPUSH
58783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58787: LD_INT 35
58789: PPUSH
58790: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58794: LD_VAR 0 1
58798: PPUSH
58799: LD_VAR 0 2
58803: PPUSH
58804: LD_VAR 0 3
58808: PPUSH
58809: CALL 39450 0 3
58813: NOT
58814: IFFALSE 58818
// exit ;
58816: GO 59150
// until GetDistUnitXY ( unit , x , y ) < dist ;
58818: LD_VAR 0 1
58822: PPUSH
58823: LD_VAR 0 2
58827: PPUSH
58828: LD_VAR 0 3
58832: PPUSH
58833: CALL_OW 297
58837: PUSH
58838: LD_VAR 0 5
58842: LESS
58843: IFFALSE 58787
// end ; ComTurnXY ( unit , x , y ) ;
58845: LD_VAR 0 1
58849: PPUSH
58850: LD_VAR 0 2
58854: PPUSH
58855: LD_VAR 0 3
58859: PPUSH
58860: CALL_OW 118
// repeat if Multiplayer then
58864: LD_OWVAR 4
58868: IFFALSE 58879
// wait ( 35 ) else
58870: LD_INT 35
58872: PPUSH
58873: CALL_OW 67
58877: GO 58886
// wait ( 5 ) ;
58879: LD_INT 5
58881: PPUSH
58882: CALL_OW 67
// _d := GetDir ( unit ) ;
58886: LD_ADDR_VAR 0 11
58890: PUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: CALL_OW 254
58900: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58901: LD_ADDR_VAR 0 7
58905: PUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL_OW 250
58915: PPUSH
58916: LD_VAR 0 1
58920: PPUSH
58921: CALL_OW 251
58925: PPUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: LD_VAR 0 3
58935: PPUSH
58936: CALL 42058 0 4
58940: ST_TO_ADDR
// until dir = _d ;
58941: LD_VAR 0 7
58945: PUSH
58946: LD_VAR 0 11
58950: EQUAL
58951: IFFALSE 58864
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58953: LD_ADDR_VAR 0 9
58957: PUSH
58958: LD_VAR 0 1
58962: PPUSH
58963: CALL_OW 250
58967: PPUSH
58968: LD_VAR 0 7
58972: PPUSH
58973: LD_VAR 0 5
58977: PPUSH
58978: CALL_OW 272
58982: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58983: LD_ADDR_VAR 0 10
58987: PUSH
58988: LD_VAR 0 1
58992: PPUSH
58993: CALL_OW 251
58997: PPUSH
58998: LD_VAR 0 7
59002: PPUSH
59003: LD_VAR 0 5
59007: PPUSH
59008: CALL_OW 273
59012: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59013: LD_VAR 0 9
59017: PPUSH
59018: LD_VAR 0 10
59022: PPUSH
59023: CALL_OW 488
59027: NOT
59028: IFFALSE 59032
// exit ;
59030: GO 59150
// ComAnimCustom ( unit , 1 ) ;
59032: LD_VAR 0 1
59036: PPUSH
59037: LD_INT 1
59039: PPUSH
59040: CALL_OW 592
// p := 0 ;
59044: LD_ADDR_VAR 0 12
59048: PUSH
59049: LD_INT 0
59051: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59052: LD_VAR 0 9
59056: PPUSH
59057: LD_VAR 0 10
59061: PPUSH
59062: LD_VAR 0 6
59066: PPUSH
59067: LD_VAR 0 8
59071: PPUSH
59072: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59076: LD_INT 35
59078: PPUSH
59079: CALL_OW 67
// p := Inc ( p ) ;
59083: LD_ADDR_VAR 0 12
59087: PUSH
59088: LD_VAR 0 12
59092: PPUSH
59093: CALL 42014 0 1
59097: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59098: LD_VAR 0 12
59102: PUSH
59103: LD_INT 3
59105: EQUAL
59106: PUSH
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 302
59116: NOT
59117: OR
59118: PUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 301
59128: OR
59129: IFFALSE 59076
// RemoveSeeing ( _x , _y , side ) ;
59131: LD_VAR 0 9
59135: PPUSH
59136: LD_VAR 0 10
59140: PPUSH
59141: LD_VAR 0 6
59145: PPUSH
59146: CALL_OW 331
// end ; end_of_file
59150: LD_VAR 0 4
59154: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59155: PPOPN 6
59157: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59158: CALL 59187 0 0
// end ; end_of_file
59162: PPOPN 1
59164: END
// every 0 0$1 do
59165: GO 59167
59167: DISABLE
// begin enable ;
59168: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59169: LD_STRING updateTimer(
59171: PUSH
59172: LD_OWVAR 1
59176: STR
59177: PUSH
59178: LD_STRING );
59180: STR
59181: PPUSH
59182: CALL_OW 559
// end ;
59186: END
// export function SOS_MapStart ( ) ; begin
59187: LD_INT 0
59189: PPUSH
// UpdateFactoryWaypoints ( ) ;
59190: CALL 59559 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59194: CALL 59811 0 0
// end ;
59198: LD_VAR 0 1
59202: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59203: LD_INT 0
59205: PPUSH
// end ;
59206: LD_VAR 0 12
59210: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59211: LD_INT 0
59213: PPUSH
59214: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59215: LD_VAR 0 1
59219: NOT
59220: PUSH
59221: LD_VAR 0 2
59225: PPUSH
59226: LD_VAR 0 3
59230: PPUSH
59231: CALL_OW 488
59235: NOT
59236: OR
59237: PUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 266
59247: PUSH
59248: LD_INT 3
59250: NONEQUAL
59251: PUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 247
59261: PUSH
59262: LD_INT 1
59264: EQUAL
59265: NOT
59266: AND
59267: OR
59268: IFFALSE 59272
// exit ;
59270: GO 59554
// if GetType ( factory ) = unit_human then
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 247
59281: PUSH
59282: LD_INT 1
59284: EQUAL
59285: IFFALSE 59302
// factory := IsInUnit ( factory ) ;
59287: LD_ADDR_VAR 0 1
59291: PUSH
59292: LD_VAR 0 1
59296: PPUSH
59297: CALL_OW 310
59301: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59302: LD_VAR 0 1
59306: PPUSH
59307: CALL_OW 266
59311: PUSH
59312: LD_INT 3
59314: NONEQUAL
59315: IFFALSE 59319
// exit ;
59317: GO 59554
// for i := 1 to Count ( factoryWaypoints ) do
59319: LD_ADDR_VAR 0 5
59323: PUSH
59324: DOUBLE
59325: LD_INT 1
59327: DEC
59328: ST_TO_ADDR
59329: LD_EXP 54
59333: PPUSH
59334: CALL 5044 0 1
59338: PUSH
59339: FOR_TO
59340: IFFALSE 59502
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59342: LD_VAR 0 2
59346: PPUSH
59347: LD_VAR 0 3
59351: PPUSH
59352: CALL_OW 428
59356: PUSH
59357: LD_EXP 54
59361: PUSH
59362: LD_VAR 0 5
59366: ARRAY
59367: PUSH
59368: LD_INT 2
59370: ARRAY
59371: EQUAL
59372: IFFALSE 59404
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59374: LD_ADDR_EXP 54
59378: PUSH
59379: LD_EXP 54
59383: PPUSH
59384: LD_VAR 0 5
59388: PPUSH
59389: CALL_OW 3
59393: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59394: CALL 59559 0 0
// exit ;
59398: POP
59399: POP
59400: GO 59554
// end else
59402: GO 59500
// if factory = factoryWaypoints [ i ] [ 2 ] then
59404: LD_VAR 0 1
59408: PUSH
59409: LD_EXP 54
59413: PUSH
59414: LD_VAR 0 5
59418: ARRAY
59419: PUSH
59420: LD_INT 2
59422: ARRAY
59423: EQUAL
59424: IFFALSE 59500
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59426: LD_ADDR_EXP 54
59430: PUSH
59431: LD_EXP 54
59435: PPUSH
59436: LD_VAR 0 5
59440: PPUSH
59441: CALL_OW 3
59445: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59446: LD_ADDR_EXP 54
59450: PUSH
59451: LD_EXP 54
59455: PPUSH
59456: LD_VAR 0 1
59460: PPUSH
59461: CALL_OW 255
59465: PUSH
59466: LD_VAR 0 1
59470: PUSH
59471: LD_VAR 0 2
59475: PUSH
59476: LD_VAR 0 3
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: PPUSH
59487: CALL 40653 0 2
59491: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59492: CALL 59559 0 0
// exit ;
59496: POP
59497: POP
59498: GO 59554
// end ; end ;
59500: GO 59339
59502: POP
59503: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59504: LD_ADDR_EXP 54
59508: PUSH
59509: LD_EXP 54
59513: PPUSH
59514: LD_VAR 0 1
59518: PPUSH
59519: CALL_OW 255
59523: PUSH
59524: LD_VAR 0 1
59528: PUSH
59529: LD_VAR 0 2
59533: PUSH
59534: LD_VAR 0 3
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: PPUSH
59545: CALL 40653 0 2
59549: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59550: CALL 59559 0 0
// end ;
59554: LD_VAR 0 4
59558: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59559: LD_INT 0
59561: PPUSH
59562: PPUSH
59563: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59564: LD_STRING resetFactoryWaypoint();
59566: PPUSH
59567: CALL_OW 559
// if factoryWaypoints then
59571: LD_EXP 54
59575: IFFALSE 59696
// begin list := factoryWaypoints ;
59577: LD_ADDR_VAR 0 3
59581: PUSH
59582: LD_EXP 54
59586: ST_TO_ADDR
// for i := 1 to list do
59587: LD_ADDR_VAR 0 2
59591: PUSH
59592: DOUBLE
59593: LD_INT 1
59595: DEC
59596: ST_TO_ADDR
59597: LD_VAR 0 3
59601: PUSH
59602: FOR_TO
59603: IFFALSE 59694
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59605: LD_STRING setFactoryWaypointXY(
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_INT 1
59621: ARRAY
59622: STR
59623: PUSH
59624: LD_STRING ,
59626: STR
59627: PUSH
59628: LD_VAR 0 3
59632: PUSH
59633: LD_VAR 0 2
59637: ARRAY
59638: PUSH
59639: LD_INT 2
59641: ARRAY
59642: STR
59643: PUSH
59644: LD_STRING ,
59646: STR
59647: PUSH
59648: LD_VAR 0 3
59652: PUSH
59653: LD_VAR 0 2
59657: ARRAY
59658: PUSH
59659: LD_INT 3
59661: ARRAY
59662: STR
59663: PUSH
59664: LD_STRING ,
59666: STR
59667: PUSH
59668: LD_VAR 0 3
59672: PUSH
59673: LD_VAR 0 2
59677: ARRAY
59678: PUSH
59679: LD_INT 4
59681: ARRAY
59682: STR
59683: PUSH
59684: LD_STRING )
59686: STR
59687: PPUSH
59688: CALL_OW 559
59692: GO 59602
59694: POP
59695: POP
// end ; end ;
59696: LD_VAR 0 1
59700: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59701: LD_INT 0
59703: PPUSH
// if HexInfo ( x , y ) = warehouse then
59704: LD_VAR 0 2
59708: PPUSH
59709: LD_VAR 0 3
59713: PPUSH
59714: CALL_OW 428
59718: PUSH
59719: LD_VAR 0 1
59723: EQUAL
59724: IFFALSE 59751
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59726: LD_ADDR_EXP 55
59730: PUSH
59731: LD_EXP 55
59735: PPUSH
59736: LD_VAR 0 1
59740: PPUSH
59741: LD_INT 0
59743: PPUSH
59744: CALL_OW 1
59748: ST_TO_ADDR
59749: GO 59802
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59751: LD_ADDR_EXP 55
59755: PUSH
59756: LD_EXP 55
59760: PPUSH
59761: LD_VAR 0 1
59765: PPUSH
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL_OW 255
59775: PUSH
59776: LD_VAR 0 1
59780: PUSH
59781: LD_VAR 0 2
59785: PUSH
59786: LD_VAR 0 3
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: PPUSH
59797: CALL_OW 1
59801: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59802: CALL 59811 0 0
// end ;
59806: LD_VAR 0 4
59810: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59811: LD_INT 0
59813: PPUSH
59814: PPUSH
59815: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59816: LD_STRING resetWarehouseGatheringPoints();
59818: PPUSH
59819: CALL_OW 559
// if warehouseGatheringPoints then
59823: LD_EXP 55
59827: IFFALSE 59953
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59829: LD_ADDR_VAR 0 3
59833: PUSH
59834: LD_EXP 55
59838: PPUSH
59839: CALL 44415 0 1
59843: ST_TO_ADDR
// for i := 1 to list do
59844: LD_ADDR_VAR 0 2
59848: PUSH
59849: DOUBLE
59850: LD_INT 1
59852: DEC
59853: ST_TO_ADDR
59854: LD_VAR 0 3
59858: PUSH
59859: FOR_TO
59860: IFFALSE 59951
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59862: LD_STRING setWarehouseGatheringPointXY(
59864: PUSH
59865: LD_VAR 0 3
59869: PUSH
59870: LD_VAR 0 2
59874: ARRAY
59875: PUSH
59876: LD_INT 1
59878: ARRAY
59879: STR
59880: PUSH
59881: LD_STRING ,
59883: STR
59884: PUSH
59885: LD_VAR 0 3
59889: PUSH
59890: LD_VAR 0 2
59894: ARRAY
59895: PUSH
59896: LD_INT 2
59898: ARRAY
59899: STR
59900: PUSH
59901: LD_STRING ,
59903: STR
59904: PUSH
59905: LD_VAR 0 3
59909: PUSH
59910: LD_VAR 0 2
59914: ARRAY
59915: PUSH
59916: LD_INT 3
59918: ARRAY
59919: STR
59920: PUSH
59921: LD_STRING ,
59923: STR
59924: PUSH
59925: LD_VAR 0 3
59929: PUSH
59930: LD_VAR 0 2
59934: ARRAY
59935: PUSH
59936: LD_INT 4
59938: ARRAY
59939: STR
59940: PUSH
59941: LD_STRING )
59943: STR
59944: PPUSH
59945: CALL_OW 559
59949: GO 59859
59951: POP
59952: POP
// end ; end ;
59953: LD_VAR 0 1
59957: RET
