// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45827 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46173 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45282 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45282 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45282 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45282 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45282 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45282 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45282 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45282 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5128 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45115 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45115 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45115 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45115 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45115 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45115 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45115 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45115 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45115 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45115 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45115 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45115 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45115 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45115 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45115 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45115 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45282 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45282 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45282 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45282 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45282 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45282 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45282 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45282 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45282 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45282 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45282 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45282 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45282 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45282 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45282 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45282 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45282 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45282 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45282 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45282 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45282 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45282 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45282 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45282 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42098 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 30
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 54118 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 50759 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 54135 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 51424 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 54176 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 51477 0 3
2939: PPOPN 3
2941: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
// if exist_mode then
2946: LD_VAR 0 2
2950: IFFALSE 2996
// begin unit := CreateCharacter ( prefix & ident ) ;
2952: LD_ADDR_VAR 0 5
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 1
2966: STR
2967: PPUSH
2968: CALL_OW 34
2972: ST_TO_ADDR
// if unit then
2973: LD_VAR 0 5
2977: IFFALSE 2994
// DeleteCharacters ( prefix & ident ) ;
2979: LD_VAR 0 3
2983: PUSH
2984: LD_VAR 0 1
2988: STR
2989: PPUSH
2990: CALL_OW 40
// end else
2994: GO 3011
// unit := NewCharacter ( ident ) ;
2996: LD_ADDR_VAR 0 5
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: CALL_OW 25
3010: ST_TO_ADDR
// result := unit ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: LD_VAR 0 5
3020: ST_TO_ADDR
// end ;
3021: LD_VAR 0 4
3025: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3026: LD_INT 0
3028: PPUSH
3029: PPUSH
// if exist_mode then
3030: LD_VAR 0 2
3034: IFFALSE 3059
// unit := CreateCharacter ( prefix & ident ) else
3036: LD_ADDR_VAR 0 5
3040: PUSH
3041: LD_VAR 0 3
3045: PUSH
3046: LD_VAR 0 1
3050: STR
3051: PPUSH
3052: CALL_OW 34
3056: ST_TO_ADDR
3057: GO 3074
// unit := NewCharacter ( ident ) ;
3059: LD_ADDR_VAR 0 5
3063: PUSH
3064: LD_VAR 0 1
3068: PPUSH
3069: CALL_OW 25
3073: ST_TO_ADDR
// result := unit ;
3074: LD_ADDR_VAR 0 4
3078: PUSH
3079: LD_VAR 0 5
3083: ST_TO_ADDR
// end ;
3084: LD_VAR 0 4
3088: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// if not side or not nation then
3093: LD_VAR 0 1
3097: NOT
3098: PUSH
3099: LD_VAR 0 2
3103: NOT
3104: OR
3105: IFFALSE 3109
// exit ;
3107: GO 3877
// case nation of nation_american :
3109: LD_VAR 0 2
3113: PUSH
3114: LD_INT 1
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3336
3122: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3123: LD_ADDR_VAR 0 4
3127: PUSH
3128: LD_INT 35
3130: PUSH
3131: LD_INT 45
3133: PUSH
3134: LD_INT 46
3136: PUSH
3137: LD_INT 47
3139: PUSH
3140: LD_INT 82
3142: PUSH
3143: LD_INT 83
3145: PUSH
3146: LD_INT 84
3148: PUSH
3149: LD_INT 85
3151: PUSH
3152: LD_INT 86
3154: PUSH
3155: LD_INT 1
3157: PUSH
3158: LD_INT 2
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: LD_INT 15
3166: PUSH
3167: LD_INT 16
3169: PUSH
3170: LD_INT 7
3172: PUSH
3173: LD_INT 12
3175: PUSH
3176: LD_INT 13
3178: PUSH
3179: LD_INT 10
3181: PUSH
3182: LD_INT 14
3184: PUSH
3185: LD_INT 20
3187: PUSH
3188: LD_INT 21
3190: PUSH
3191: LD_INT 22
3193: PUSH
3194: LD_INT 25
3196: PUSH
3197: LD_INT 32
3199: PUSH
3200: LD_INT 27
3202: PUSH
3203: LD_INT 36
3205: PUSH
3206: LD_INT 69
3208: PUSH
3209: LD_INT 39
3211: PUSH
3212: LD_INT 34
3214: PUSH
3215: LD_INT 40
3217: PUSH
3218: LD_INT 48
3220: PUSH
3221: LD_INT 49
3223: PUSH
3224: LD_INT 50
3226: PUSH
3227: LD_INT 51
3229: PUSH
3230: LD_INT 52
3232: PUSH
3233: LD_INT 53
3235: PUSH
3236: LD_INT 54
3238: PUSH
3239: LD_INT 55
3241: PUSH
3242: LD_INT 56
3244: PUSH
3245: LD_INT 57
3247: PUSH
3248: LD_INT 58
3250: PUSH
3251: LD_INT 59
3253: PUSH
3254: LD_INT 60
3256: PUSH
3257: LD_INT 61
3259: PUSH
3260: LD_INT 62
3262: PUSH
3263: LD_INT 80
3265: PUSH
3266: LD_INT 82
3268: PUSH
3269: LD_INT 83
3271: PUSH
3272: LD_INT 84
3274: PUSH
3275: LD_INT 85
3277: PUSH
3278: LD_INT 86
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: ST_TO_ADDR
3334: GO 3801
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3570
3344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3345: LD_ADDR_VAR 0 4
3349: PUSH
3350: LD_INT 35
3352: PUSH
3353: LD_INT 45
3355: PUSH
3356: LD_INT 46
3358: PUSH
3359: LD_INT 47
3361: PUSH
3362: LD_INT 82
3364: PUSH
3365: LD_INT 83
3367: PUSH
3368: LD_INT 84
3370: PUSH
3371: LD_INT 85
3373: PUSH
3374: LD_INT 87
3376: PUSH
3377: LD_INT 70
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 11
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 5
3394: PUSH
3395: LD_INT 6
3397: PUSH
3398: LD_INT 15
3400: PUSH
3401: LD_INT 18
3403: PUSH
3404: LD_INT 7
3406: PUSH
3407: LD_INT 17
3409: PUSH
3410: LD_INT 8
3412: PUSH
3413: LD_INT 20
3415: PUSH
3416: LD_INT 21
3418: PUSH
3419: LD_INT 22
3421: PUSH
3422: LD_INT 72
3424: PUSH
3425: LD_INT 26
3427: PUSH
3428: LD_INT 69
3430: PUSH
3431: LD_INT 39
3433: PUSH
3434: LD_INT 40
3436: PUSH
3437: LD_INT 41
3439: PUSH
3440: LD_INT 42
3442: PUSH
3443: LD_INT 43
3445: PUSH
3446: LD_INT 48
3448: PUSH
3449: LD_INT 49
3451: PUSH
3452: LD_INT 50
3454: PUSH
3455: LD_INT 51
3457: PUSH
3458: LD_INT 52
3460: PUSH
3461: LD_INT 53
3463: PUSH
3464: LD_INT 54
3466: PUSH
3467: LD_INT 55
3469: PUSH
3470: LD_INT 56
3472: PUSH
3473: LD_INT 60
3475: PUSH
3476: LD_INT 61
3478: PUSH
3479: LD_INT 62
3481: PUSH
3482: LD_INT 66
3484: PUSH
3485: LD_INT 67
3487: PUSH
3488: LD_INT 68
3490: PUSH
3491: LD_INT 81
3493: PUSH
3494: LD_INT 82
3496: PUSH
3497: LD_INT 83
3499: PUSH
3500: LD_INT 84
3502: PUSH
3503: LD_INT 85
3505: PUSH
3506: LD_INT 87
3508: PUSH
3509: LD_INT 88
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: ST_TO_ADDR
3568: GO 3801
3570: LD_INT 3
3572: DOUBLE
3573: EQUAL
3574: IFTRUE 3578
3576: GO 3800
3578: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3579: LD_ADDR_VAR 0 4
3583: PUSH
3584: LD_INT 46
3586: PUSH
3587: LD_INT 47
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: LD_INT 2
3595: PUSH
3596: LD_INT 82
3598: PUSH
3599: LD_INT 83
3601: PUSH
3602: LD_INT 84
3604: PUSH
3605: LD_INT 85
3607: PUSH
3608: LD_INT 86
3610: PUSH
3611: LD_INT 11
3613: PUSH
3614: LD_INT 9
3616: PUSH
3617: LD_INT 20
3619: PUSH
3620: LD_INT 19
3622: PUSH
3623: LD_INT 21
3625: PUSH
3626: LD_INT 24
3628: PUSH
3629: LD_INT 22
3631: PUSH
3632: LD_INT 25
3634: PUSH
3635: LD_INT 28
3637: PUSH
3638: LD_INT 29
3640: PUSH
3641: LD_INT 30
3643: PUSH
3644: LD_INT 31
3646: PUSH
3647: LD_INT 37
3649: PUSH
3650: LD_INT 38
3652: PUSH
3653: LD_INT 32
3655: PUSH
3656: LD_INT 27
3658: PUSH
3659: LD_INT 33
3661: PUSH
3662: LD_INT 69
3664: PUSH
3665: LD_INT 39
3667: PUSH
3668: LD_INT 34
3670: PUSH
3671: LD_INT 40
3673: PUSH
3674: LD_INT 71
3676: PUSH
3677: LD_INT 23
3679: PUSH
3680: LD_INT 44
3682: PUSH
3683: LD_INT 48
3685: PUSH
3686: LD_INT 49
3688: PUSH
3689: LD_INT 50
3691: PUSH
3692: LD_INT 51
3694: PUSH
3695: LD_INT 52
3697: PUSH
3698: LD_INT 53
3700: PUSH
3701: LD_INT 54
3703: PUSH
3704: LD_INT 55
3706: PUSH
3707: LD_INT 56
3709: PUSH
3710: LD_INT 57
3712: PUSH
3713: LD_INT 58
3715: PUSH
3716: LD_INT 59
3718: PUSH
3719: LD_INT 63
3721: PUSH
3722: LD_INT 64
3724: PUSH
3725: LD_INT 65
3727: PUSH
3728: LD_INT 82
3730: PUSH
3731: LD_INT 83
3733: PUSH
3734: LD_INT 84
3736: PUSH
3737: LD_INT 85
3739: PUSH
3740: LD_INT 86
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: ST_TO_ADDR
3798: GO 3801
3800: POP
// if state > - 1 and state < 3 then
3801: LD_VAR 0 3
3805: PUSH
3806: LD_INT 1
3808: NEG
3809: GREATER
3810: PUSH
3811: LD_VAR 0 3
3815: PUSH
3816: LD_INT 3
3818: LESS
3819: AND
3820: IFFALSE 3877
// for i in result do
3822: LD_ADDR_VAR 0 5
3826: PUSH
3827: LD_VAR 0 4
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3875
// if GetTech ( i , side ) <> state then
3835: LD_VAR 0 5
3839: PPUSH
3840: LD_VAR 0 1
3844: PPUSH
3845: CALL_OW 321
3849: PUSH
3850: LD_VAR 0 3
3854: NONEQUAL
3855: IFFALSE 3873
// result := result diff i ;
3857: LD_ADDR_VAR 0 4
3861: PUSH
3862: LD_VAR 0 4
3866: PUSH
3867: LD_VAR 0 5
3871: DIFF
3872: ST_TO_ADDR
3873: GO 3832
3875: POP
3876: POP
// end ;
3877: LD_VAR 0 4
3881: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3882: LD_INT 0
3884: PPUSH
3885: PPUSH
3886: PPUSH
// result := true ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3895: LD_ADDR_VAR 0 5
3899: PUSH
3900: LD_VAR 0 2
3904: PPUSH
3905: CALL_OW 480
3909: ST_TO_ADDR
// if not tmp then
3910: LD_VAR 0 5
3914: NOT
3915: IFFALSE 3919
// exit ;
3917: GO 3968
// for i in tmp do
3919: LD_ADDR_VAR 0 4
3923: PUSH
3924: LD_VAR 0 5
3928: PUSH
3929: FOR_IN
3930: IFFALSE 3966
// if GetTech ( i , side ) <> state_researched then
3932: LD_VAR 0 4
3936: PPUSH
3937: LD_VAR 0 1
3941: PPUSH
3942: CALL_OW 321
3946: PUSH
3947: LD_INT 2
3949: NONEQUAL
3950: IFFALSE 3964
// begin result := false ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// exit ;
3960: POP
3961: POP
3962: GO 3968
// end ;
3964: GO 3929
3966: POP
3967: POP
// end ;
3968: LD_VAR 0 3
3972: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
3978: PPUSH
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
3987: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3988: LD_VAR 0 1
3992: NOT
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 257
4003: PUSH
4004: LD_INT 9
4006: NONEQUAL
4007: OR
4008: IFFALSE 4012
// exit ;
4010: GO 4585
// side := GetSide ( unit ) ;
4012: LD_ADDR_VAR 0 9
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 255
4026: ST_TO_ADDR
// tech_space := tech_spacanom ;
4027: LD_ADDR_VAR 0 12
4031: PUSH
4032: LD_INT 29
4034: ST_TO_ADDR
// tech_time := tech_taurad ;
4035: LD_ADDR_VAR 0 13
4039: PUSH
4040: LD_INT 28
4042: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4043: LD_ADDR_VAR 0 11
4047: PUSH
4048: LD_VAR 0 1
4052: PPUSH
4053: CALL_OW 310
4057: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4058: LD_VAR 0 11
4062: PPUSH
4063: CALL_OW 247
4067: PUSH
4068: LD_INT 2
4070: EQUAL
4071: IFFALSE 4075
// exit ;
4073: GO 4585
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4075: LD_ADDR_VAR 0 8
4079: PUSH
4080: LD_INT 81
4082: PUSH
4083: LD_VAR 0 9
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 3
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PPUSH
4113: CALL_OW 69
4117: ST_TO_ADDR
// if not tmp then
4118: LD_VAR 0 8
4122: NOT
4123: IFFALSE 4127
// exit ;
4125: GO 4585
// if in_unit then
4127: LD_VAR 0 11
4131: IFFALSE 4155
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4133: LD_ADDR_VAR 0 10
4137: PUSH
4138: LD_VAR 0 8
4142: PPUSH
4143: LD_VAR 0 11
4147: PPUSH
4148: CALL_OW 74
4152: ST_TO_ADDR
4153: GO 4175
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4155: LD_ADDR_VAR 0 10
4159: PUSH
4160: LD_VAR 0 8
4164: PPUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 74
4174: ST_TO_ADDR
// if not enemy then
4175: LD_VAR 0 10
4179: NOT
4180: IFFALSE 4184
// exit ;
4182: GO 4585
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4184: LD_VAR 0 11
4188: PUSH
4189: LD_VAR 0 11
4193: PPUSH
4194: LD_VAR 0 10
4198: PPUSH
4199: CALL_OW 296
4203: PUSH
4204: LD_INT 13
4206: GREATER
4207: AND
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: LD_VAR 0 10
4218: PPUSH
4219: CALL_OW 296
4223: PUSH
4224: LD_INT 12
4226: GREATER
4227: OR
4228: IFFALSE 4232
// exit ;
4230: GO 4585
// missile := [ 1 ] ;
4232: LD_ADDR_VAR 0 14
4236: PUSH
4237: LD_INT 1
4239: PUSH
4240: EMPTY
4241: LIST
4242: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4243: LD_VAR 0 9
4247: PPUSH
4248: LD_VAR 0 12
4252: PPUSH
4253: CALL_OW 325
4257: IFFALSE 4286
// missile := Replace ( missile , missile + 1 , 2 ) ;
4259: LD_ADDR_VAR 0 14
4263: PUSH
4264: LD_VAR 0 14
4268: PPUSH
4269: LD_VAR 0 14
4273: PUSH
4274: LD_INT 1
4276: PLUS
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: CALL_OW 1
4285: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4286: LD_VAR 0 9
4290: PPUSH
4291: LD_VAR 0 13
4295: PPUSH
4296: CALL_OW 325
4300: PUSH
4301: LD_VAR 0 10
4305: PPUSH
4306: CALL_OW 255
4310: PPUSH
4311: LD_VAR 0 13
4315: PPUSH
4316: CALL_OW 325
4320: NOT
4321: AND
4322: IFFALSE 4351
// missile := Replace ( missile , missile + 1 , 3 ) ;
4324: LD_ADDR_VAR 0 14
4328: PUSH
4329: LD_VAR 0 14
4333: PPUSH
4334: LD_VAR 0 14
4338: PUSH
4339: LD_INT 1
4341: PLUS
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 1
4350: ST_TO_ADDR
// if missile < 2 then
4351: LD_VAR 0 14
4355: PUSH
4356: LD_INT 2
4358: LESS
4359: IFFALSE 4363
// exit ;
4361: GO 4585
// x := GetX ( enemy ) ;
4363: LD_ADDR_VAR 0 4
4367: PUSH
4368: LD_VAR 0 10
4372: PPUSH
4373: CALL_OW 250
4377: ST_TO_ADDR
// y := GetY ( enemy ) ;
4378: LD_ADDR_VAR 0 5
4382: PUSH
4383: LD_VAR 0 10
4387: PPUSH
4388: CALL_OW 251
4392: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4393: LD_ADDR_VAR 0 6
4397: PUSH
4398: LD_VAR 0 4
4402: PUSH
4403: LD_INT 1
4405: NEG
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 12
4414: PLUS
4415: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4416: LD_ADDR_VAR 0 7
4420: PUSH
4421: LD_VAR 0 5
4425: PUSH
4426: LD_INT 1
4428: NEG
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: CALL_OW 12
4437: PLUS
4438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4439: LD_VAR 0 6
4443: PPUSH
4444: LD_VAR 0 7
4448: PPUSH
4449: CALL_OW 488
4453: NOT
4454: IFFALSE 4476
// begin _x := x ;
4456: LD_ADDR_VAR 0 6
4460: PUSH
4461: LD_VAR 0 4
4465: ST_TO_ADDR
// _y := y ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_VAR 0 5
4475: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: LD_INT 1
4483: PPUSH
4484: LD_VAR 0 14
4488: PPUSH
4489: CALL_OW 12
4493: ST_TO_ADDR
// case i of 1 :
4494: LD_VAR 0 3
4498: PUSH
4499: LD_INT 1
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4524
4507: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4508: LD_VAR 0 1
4512: PPUSH
4513: LD_VAR 0 10
4517: PPUSH
4518: CALL_OW 115
4522: GO 4585
4524: LD_INT 2
4526: DOUBLE
4527: EQUAL
4528: IFTRUE 4532
4530: GO 4554
4532: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4533: LD_VAR 0 1
4537: PPUSH
4538: LD_VAR 0 6
4542: PPUSH
4543: LD_VAR 0 7
4547: PPUSH
4548: CALL_OW 153
4552: GO 4585
4554: LD_INT 3
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4584
4562: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4563: LD_VAR 0 1
4567: PPUSH
4568: LD_VAR 0 6
4572: PPUSH
4573: LD_VAR 0 7
4577: PPUSH
4578: CALL_OW 154
4582: GO 4585
4584: POP
// end ;
4585: LD_VAR 0 2
4589: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4590: LD_INT 0
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
// if not unit or not building then
4598: LD_VAR 0 1
4602: NOT
4603: PUSH
4604: LD_VAR 0 2
4608: NOT
4609: OR
4610: IFFALSE 4614
// exit ;
4612: GO 4772
// x := GetX ( building ) ;
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_VAR 0 2
4623: PPUSH
4624: CALL_OW 250
4628: ST_TO_ADDR
// y := GetY ( building ) ;
4629: LD_ADDR_VAR 0 6
4633: PUSH
4634: LD_VAR 0 2
4638: PPUSH
4639: CALL_OW 251
4643: ST_TO_ADDR
// for i = 0 to 5 do
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: DOUBLE
4650: LD_INT 0
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 5
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4770
// begin _x := ShiftX ( x , i , 3 ) ;
4660: LD_ADDR_VAR 0 7
4664: PUSH
4665: LD_VAR 0 5
4669: PPUSH
4670: LD_VAR 0 4
4674: PPUSH
4675: LD_INT 3
4677: PPUSH
4678: CALL_OW 272
4682: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4683: LD_ADDR_VAR 0 8
4687: PUSH
4688: LD_VAR 0 6
4692: PPUSH
4693: LD_VAR 0 4
4697: PPUSH
4698: LD_INT 3
4700: PPUSH
4701: CALL_OW 273
4705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4706: LD_VAR 0 7
4710: PPUSH
4711: LD_VAR 0 8
4715: PPUSH
4716: CALL_OW 488
4720: NOT
4721: IFFALSE 4725
// continue ;
4723: GO 4657
// if HexInfo ( _x , _y ) = 0 then
4725: LD_VAR 0 7
4729: PPUSH
4730: LD_VAR 0 8
4734: PPUSH
4735: CALL_OW 428
4739: PUSH
4740: LD_INT 0
4742: EQUAL
4743: IFFALSE 4768
// begin ComMoveXY ( unit , _x , _y ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: LD_VAR 0 7
4754: PPUSH
4755: LD_VAR 0 8
4759: PPUSH
4760: CALL_OW 111
// exit ;
4764: POP
4765: POP
4766: GO 4772
// end ; end ;
4768: GO 4657
4770: POP
4771: POP
// end ;
4772: LD_VAR 0 3
4776: RET
// export function ScanBase ( side , base_area ) ; begin
4777: LD_INT 0
4779: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: LD_INT 81
4792: PUSH
4793: LD_VAR 0 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 70
4806: ST_TO_ADDR
// end ;
4807: LD_VAR 0 3
4811: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4812: LD_INT 0
4814: PPUSH
4815: PPUSH
4816: PPUSH
4817: PPUSH
// result := false ;
4818: LD_ADDR_VAR 0 2
4822: PUSH
4823: LD_INT 0
4825: ST_TO_ADDR
// side := GetSide ( unit ) ;
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_VAR 0 1
4835: PPUSH
4836: CALL_OW 255
4840: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4841: LD_ADDR_VAR 0 4
4845: PUSH
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 248
4855: ST_TO_ADDR
// case nat of 1 :
4856: LD_VAR 0 4
4860: PUSH
4861: LD_INT 1
4863: DOUBLE
4864: EQUAL
4865: IFTRUE 4869
4867: GO 4880
4869: POP
// tech := tech_lassight ; 2 :
4870: LD_ADDR_VAR 0 5
4874: PUSH
4875: LD_INT 12
4877: ST_TO_ADDR
4878: GO 4919
4880: LD_INT 2
4882: DOUBLE
4883: EQUAL
4884: IFTRUE 4888
4886: GO 4899
4888: POP
// tech := tech_mortar ; 3 :
4889: LD_ADDR_VAR 0 5
4893: PUSH
4894: LD_INT 41
4896: ST_TO_ADDR
4897: GO 4919
4899: LD_INT 3
4901: DOUBLE
4902: EQUAL
4903: IFTRUE 4907
4905: GO 4918
4907: POP
// tech := tech_bazooka ; end ;
4908: LD_ADDR_VAR 0 5
4912: PUSH
4913: LD_INT 44
4915: ST_TO_ADDR
4916: GO 4919
4918: POP
// if Researched ( side , tech ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: LD_VAR 0 5
4928: PPUSH
4929: CALL_OW 325
4933: IFFALSE 4960
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 5
4942: PUSH
4943: LD_INT 8
4945: PUSH
4946: LD_INT 9
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_VAR 0 4
4958: ARRAY
4959: ST_TO_ADDR
// end ;
4960: LD_VAR 0 2
4964: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4965: LD_INT 0
4967: PPUSH
4968: PPUSH
4969: PPUSH
// if not mines then
4970: LD_VAR 0 2
4974: NOT
4975: IFFALSE 4979
// exit ;
4977: GO 5123
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4979: LD_ADDR_VAR 0 5
4983: PUSH
4984: LD_INT 81
4986: PUSH
4987: LD_VAR 0 1
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: LD_INT 21
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: ST_TO_ADDR
// for i in mines do
5022: LD_ADDR_VAR 0 4
5026: PUSH
5027: LD_VAR 0 2
5031: PUSH
5032: FOR_IN
5033: IFFALSE 5121
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5035: LD_VAR 0 4
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 4
5048: PUSH
5049: LD_INT 2
5051: ARRAY
5052: PPUSH
5053: CALL_OW 458
5057: NOT
5058: IFFALSE 5062
// continue ;
5060: GO 5032
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 1
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 4
5075: PUSH
5076: LD_INT 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 428
5084: PUSH
5085: LD_VAR 0 5
5089: IN
5090: IFFALSE 5119
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5092: LD_VAR 0 4
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: LD_VAR 0 4
5105: PUSH
5106: LD_INT 2
5108: ARRAY
5109: PPUSH
5110: LD_VAR 0 1
5114: PPUSH
5115: CALL_OW 456
// end ;
5119: GO 5032
5121: POP
5122: POP
// end ;
5123: LD_VAR 0 3
5127: RET
// export function Count ( array ) ; begin
5128: LD_INT 0
5130: PPUSH
// result := array + 0 ;
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_VAR 0 1
5140: PUSH
5141: LD_INT 0
5143: PLUS
5144: ST_TO_ADDR
// end ;
5145: LD_VAR 0 2
5149: RET
// export function IsEmpty ( building ) ; begin
5150: LD_INT 0
5152: PPUSH
// if not building then
5153: LD_VAR 0 1
5157: NOT
5158: IFFALSE 5162
// exit ;
5160: GO 5205
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 1
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 255
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 58
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 69
5203: IN
5204: ST_TO_ADDR
// end ;
5205: LD_VAR 0 2
5209: RET
// export function IsNotFull ( building ) ; var places ; begin
5210: LD_INT 0
5212: PPUSH
5213: PPUSH
// if not building then
5214: LD_VAR 0 1
5218: NOT
5219: IFFALSE 5223
// exit ;
5221: GO 5251
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5223: LD_ADDR_VAR 0 2
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_INT 3
5235: PUSH
5236: LD_INT 62
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 72
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 2
5255: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
// tmp := [ ] ;
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: EMPTY
5268: ST_TO_ADDR
// list := [ ] ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: EMPTY
5275: ST_TO_ADDR
// for i = 16 to 25 do
5276: LD_ADDR_VAR 0 4
5280: PUSH
5281: DOUBLE
5282: LD_INT 16
5284: DEC
5285: ST_TO_ADDR
5286: LD_INT 25
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5363
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_VAR 0 3
5301: PUSH
5302: LD_INT 22
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 255
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 91
5321: PUSH
5322: LD_VAR 0 1
5326: PUSH
5327: LD_INT 6
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 30
5337: PUSH
5338: LD_VAR 0 4
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: PPUSH
5355: CALL_OW 69
5359: ADD
5360: ST_TO_ADDR
5361: GO 5289
5363: POP
5364: POP
// for i = 1 to tmp do
5365: LD_ADDR_VAR 0 4
5369: PUSH
5370: DOUBLE
5371: LD_INT 1
5373: DEC
5374: ST_TO_ADDR
5375: LD_VAR 0 3
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5469
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5383: LD_ADDR_VAR 0 5
5387: PUSH
5388: LD_VAR 0 5
5392: PUSH
5393: LD_VAR 0 3
5397: PUSH
5398: LD_VAR 0 4
5402: ARRAY
5403: PPUSH
5404: CALL_OW 266
5408: PUSH
5409: LD_VAR 0 3
5413: PUSH
5414: LD_VAR 0 4
5418: ARRAY
5419: PPUSH
5420: CALL_OW 250
5424: PUSH
5425: LD_VAR 0 3
5429: PUSH
5430: LD_VAR 0 4
5434: ARRAY
5435: PPUSH
5436: CALL_OW 251
5440: PUSH
5441: LD_VAR 0 3
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PPUSH
5452: CALL_OW 254
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: ADD
5466: ST_TO_ADDR
5467: GO 5380
5469: POP
5470: POP
// result := list ;
5471: LD_ADDR_VAR 0 2
5475: PUSH
5476: LD_VAR 0 5
5480: ST_TO_ADDR
// end ;
5481: LD_VAR 0 2
5485: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5486: LD_INT 0
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
// if not factory then
5495: LD_VAR 0 1
5499: NOT
5500: IFFALSE 5504
// exit ;
5502: GO 6097
// if control = control_apeman then
5504: LD_VAR 0 4
5508: PUSH
5509: LD_INT 5
5511: EQUAL
5512: IFFALSE 5621
// begin tmp := UnitsInside ( factory ) ;
5514: LD_ADDR_VAR 0 8
5518: PUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 313
5528: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5529: LD_VAR 0 8
5533: PPUSH
5534: LD_INT 25
5536: PUSH
5537: LD_INT 12
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 72
5548: NOT
5549: IFFALSE 5559
// control := control_manual ;
5551: LD_ADDR_VAR 0 4
5555: PUSH
5556: LD_INT 1
5558: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL 5256 0 1
5573: ST_TO_ADDR
// if tmp then
5574: LD_VAR 0 8
5578: IFFALSE 5621
// begin for i in tmp do
5580: LD_ADDR_VAR 0 7
5584: PUSH
5585: LD_VAR 0 8
5589: PUSH
5590: FOR_IN
5591: IFFALSE 5619
// if i [ 1 ] = b_ext_radio then
5593: LD_VAR 0 7
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PUSH
5602: LD_INT 22
5604: EQUAL
5605: IFFALSE 5617
// begin control := control_remote ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_INT 2
5614: ST_TO_ADDR
// break ;
5615: GO 5619
// end ;
5617: GO 5590
5619: POP
5620: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5621: LD_VAR 0 1
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_VAR 0 3
5635: PPUSH
5636: LD_VAR 0 4
5640: PPUSH
5641: LD_VAR 0 5
5645: PPUSH
5646: CALL_OW 448
5650: IFFALSE 5685
// begin result := [ chassis , engine , control , weapon ] ;
5652: LD_ADDR_VAR 0 6
5656: PUSH
5657: LD_VAR 0 2
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_VAR 0 4
5671: PUSH
5672: LD_VAR 0 5
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: ST_TO_ADDR
// exit ;
5683: GO 6097
// end ; _chassis := AvailableChassisList ( factory ) ;
5685: LD_ADDR_VAR 0 9
5689: PUSH
5690: LD_VAR 0 1
5694: PPUSH
5695: CALL_OW 475
5699: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5700: LD_ADDR_VAR 0 11
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 476
5714: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5715: LD_ADDR_VAR 0 12
5719: PUSH
5720: LD_VAR 0 1
5724: PPUSH
5725: CALL_OW 477
5729: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5730: LD_ADDR_VAR 0 10
5734: PUSH
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 478
5744: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5745: LD_VAR 0 9
5749: NOT
5750: PUSH
5751: LD_VAR 0 11
5755: NOT
5756: OR
5757: PUSH
5758: LD_VAR 0 12
5762: NOT
5763: OR
5764: PUSH
5765: LD_VAR 0 10
5769: NOT
5770: OR
5771: IFFALSE 5806
// begin result := [ chassis , engine , control , weapon ] ;
5773: LD_ADDR_VAR 0 6
5777: PUSH
5778: LD_VAR 0 2
5782: PUSH
5783: LD_VAR 0 3
5787: PUSH
5788: LD_VAR 0 4
5792: PUSH
5793: LD_VAR 0 5
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: ST_TO_ADDR
// exit ;
5804: GO 6097
// end ; if not chassis in _chassis then
5806: LD_VAR 0 2
5810: PUSH
5811: LD_VAR 0 9
5815: IN
5816: NOT
5817: IFFALSE 5843
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_VAR 0 9
5828: PUSH
5829: LD_INT 1
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 12
5841: ARRAY
5842: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 3
5852: PPUSH
5853: CALL 6102 0 2
5857: NOT
5858: IFFALSE 5917
// repeat engine := _engine [ 1 ] ;
5860: LD_ADDR_VAR 0 3
5864: PUSH
5865: LD_VAR 0 11
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5874: LD_ADDR_VAR 0 11
5878: PUSH
5879: LD_VAR 0 11
5883: PPUSH
5884: LD_INT 1
5886: PPUSH
5887: CALL_OW 3
5891: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5892: LD_VAR 0 2
5896: PPUSH
5897: LD_VAR 0 3
5901: PPUSH
5902: CALL 6102 0 2
5906: PUSH
5907: LD_VAR 0 11
5911: PUSH
5912: EMPTY
5913: EQUAL
5914: OR
5915: IFFALSE 5860
// if not control in _control then
5917: LD_VAR 0 4
5921: PUSH
5922: LD_VAR 0 12
5926: IN
5927: NOT
5928: IFFALSE 5954
// control := _control [ rand ( 1 , _control ) ] ;
5930: LD_ADDR_VAR 0 4
5934: PUSH
5935: LD_VAR 0 12
5939: PUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_VAR 0 12
5947: PPUSH
5948: CALL_OW 12
5952: ARRAY
5953: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_VAR 0 5
5963: PPUSH
5964: CALL 6322 0 2
5968: NOT
5969: IFFALSE 6028
// repeat weapon := _weapon [ 1 ] ;
5971: LD_ADDR_VAR 0 5
5975: PUSH
5976: LD_VAR 0 10
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5985: LD_ADDR_VAR 0 10
5989: PUSH
5990: LD_VAR 0 10
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 3
6002: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 5
6012: PPUSH
6013: CALL 6322 0 2
6017: PUSH
6018: LD_VAR 0 10
6022: PUSH
6023: EMPTY
6024: EQUAL
6025: OR
6026: IFFALSE 5971
// result := [ ] ;
6028: LD_ADDR_VAR 0 6
6032: PUSH
6033: EMPTY
6034: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6035: LD_VAR 0 1
6039: PPUSH
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_VAR 0 3
6049: PPUSH
6050: LD_VAR 0 4
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 448
6064: IFFALSE 6097
// result := [ chassis , engine , control , weapon ] ;
6066: LD_ADDR_VAR 0 6
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_VAR 0 5
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: ST_TO_ADDR
// end ;
6097: LD_VAR 0 6
6101: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6102: LD_INT 0
6104: PPUSH
// if not chassis or not engine then
6105: LD_VAR 0 1
6109: NOT
6110: PUSH
6111: LD_VAR 0 2
6115: NOT
6116: OR
6117: IFFALSE 6121
// exit ;
6119: GO 6317
// case engine of engine_solar :
6121: LD_VAR 0 2
6125: PUSH
6126: LD_INT 2
6128: DOUBLE
6129: EQUAL
6130: IFTRUE 6134
6132: GO 6172
6134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6135: LD_ADDR_VAR 0 3
6139: PUSH
6140: LD_INT 11
6142: PUSH
6143: LD_INT 12
6145: PUSH
6146: LD_INT 13
6148: PUSH
6149: LD_INT 14
6151: PUSH
6152: LD_INT 1
6154: PUSH
6155: LD_INT 2
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: ST_TO_ADDR
6170: GO 6301
6172: LD_INT 1
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6242
6180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6181: LD_ADDR_VAR 0 3
6185: PUSH
6186: LD_INT 11
6188: PUSH
6189: LD_INT 12
6191: PUSH
6192: LD_INT 13
6194: PUSH
6195: LD_INT 14
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: LD_INT 21
6215: PUSH
6216: LD_INT 23
6218: PUSH
6219: LD_INT 22
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: ST_TO_ADDR
6240: GO 6301
6242: LD_INT 3
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6250
6248: GO 6300
6250: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: LD_INT 13
6258: PUSH
6259: LD_INT 14
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: LD_INT 4
6270: PUSH
6271: LD_INT 5
6273: PUSH
6274: LD_INT 21
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 23
6282: PUSH
6283: LD_INT 24
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
6298: GO 6301
6300: POP
// result := ( chassis in result ) ;
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: LD_VAR 0 1
6310: PUSH
6311: LD_VAR 0 3
6315: IN
6316: ST_TO_ADDR
// end ;
6317: LD_VAR 0 3
6321: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6322: LD_INT 0
6324: PPUSH
// if not chassis or not weapon then
6325: LD_VAR 0 1
6329: NOT
6330: PUSH
6331: LD_VAR 0 2
6335: NOT
6336: OR
6337: IFFALSE 6341
// exit ;
6339: GO 7401
// case weapon of us_machine_gun :
6341: LD_VAR 0 2
6345: PUSH
6346: LD_INT 2
6348: DOUBLE
6349: EQUAL
6350: IFTRUE 6354
6352: GO 6384
6354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6355: LD_ADDR_VAR 0 3
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: LD_INT 5
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: ST_TO_ADDR
6382: GO 7385
6384: LD_INT 3
6386: DOUBLE
6387: EQUAL
6388: IFTRUE 6392
6390: GO 6422
6392: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: LD_INT 2
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: LD_INT 4
6409: PUSH
6410: LD_INT 5
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: ST_TO_ADDR
6420: GO 7385
6422: LD_INT 11
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6460
6430: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6431: LD_ADDR_VAR 0 3
6435: PUSH
6436: LD_INT 1
6438: PUSH
6439: LD_INT 2
6441: PUSH
6442: LD_INT 3
6444: PUSH
6445: LD_INT 4
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: ST_TO_ADDR
6458: GO 7385
6460: LD_INT 4
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6494
6468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6469: LD_ADDR_VAR 0 3
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 4
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: ST_TO_ADDR
6492: GO 7385
6494: LD_INT 5
6496: DOUBLE
6497: EQUAL
6498: IFTRUE 6502
6500: GO 6528
6502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: LD_INT 3
6513: PUSH
6514: LD_INT 4
6516: PUSH
6517: LD_INT 5
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: ST_TO_ADDR
6526: GO 7385
6528: LD_INT 9
6530: DOUBLE
6531: EQUAL
6532: IFTRUE 6536
6534: GO 6562
6536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 3
6547: PUSH
6548: LD_INT 4
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: ST_TO_ADDR
6560: GO 7385
6562: LD_INT 7
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6596
6570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
6594: GO 7385
6596: LD_INT 12
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6630
6604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6605: LD_ADDR_VAR 0 3
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7385
6630: LD_INT 13
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6664
6638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 7385
6664: LD_INT 14
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6690
6672: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 4
6680: PUSH
6681: LD_INT 5
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: ST_TO_ADDR
6688: GO 7385
6690: LD_INT 6
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6716
6698: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6699: LD_ADDR_VAR 0 3
6703: PUSH
6704: LD_INT 4
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: ST_TO_ADDR
6714: GO 7385
6716: LD_INT 10
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6742
6724: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6725: LD_ADDR_VAR 0 3
6729: PUSH
6730: LD_INT 4
6732: PUSH
6733: LD_INT 5
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: ST_TO_ADDR
6740: GO 7385
6742: LD_INT 22
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6776
6750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6751: LD_ADDR_VAR 0 3
6755: PUSH
6756: LD_INT 11
6758: PUSH
6759: LD_INT 12
6761: PUSH
6762: LD_INT 13
6764: PUSH
6765: LD_INT 14
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 7385
6776: LD_INT 23
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6810
6784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 12
6795: PUSH
6796: LD_INT 13
6798: PUSH
6799: LD_INT 14
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
6808: GO 7385
6810: LD_INT 24
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6844
6818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_INT 11
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 13
6832: PUSH
6833: LD_INT 14
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: ST_TO_ADDR
6842: GO 7385
6844: LD_INT 30
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6878
6852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6853: LD_ADDR_VAR 0 3
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: ST_TO_ADDR
6876: GO 7385
6878: LD_INT 25
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6904
6886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 13
6894: PUSH
6895: LD_INT 14
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: ST_TO_ADDR
6902: GO 7385
6904: LD_INT 27
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6930
6912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 13
6920: PUSH
6921: LD_INT 14
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: ST_TO_ADDR
6928: GO 7385
6930: LD_INT 92
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6938
6936: GO 6964
6938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: LD_INT 11
6946: PUSH
6947: LD_INT 12
6949: PUSH
6950: LD_INT 13
6952: PUSH
6953: LD_INT 14
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
6962: GO 7385
6964: LD_INT 28
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6990
6972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 13
6980: PUSH
6981: LD_INT 14
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: ST_TO_ADDR
6988: GO 7385
6990: LD_INT 29
6992: DOUBLE
6993: EQUAL
6994: IFTRUE 6998
6996: GO 7016
6998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: LD_INT 13
7006: PUSH
7007: LD_INT 14
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7385
7016: LD_INT 31
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7042
7024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 13
7032: PUSH
7033: LD_INT 14
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
7040: GO 7385
7042: LD_INT 26
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7068
7050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7051: LD_ADDR_VAR 0 3
7055: PUSH
7056: LD_INT 13
7058: PUSH
7059: LD_INT 14
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: ST_TO_ADDR
7066: GO 7385
7068: LD_INT 42
7070: DOUBLE
7071: EQUAL
7072: IFTRUE 7076
7074: GO 7102
7076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: LD_INT 21
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_INT 23
7090: PUSH
7091: LD_INT 24
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7385
7102: LD_INT 43
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7136
7110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 21
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 23
7124: PUSH
7125: LD_INT 24
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: ST_TO_ADDR
7134: GO 7385
7136: LD_INT 44
7138: DOUBLE
7139: EQUAL
7140: IFTRUE 7144
7142: GO 7170
7144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 23
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: ST_TO_ADDR
7168: GO 7385
7170: LD_INT 45
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7204
7178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 21
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 23
7192: PUSH
7193: LD_INT 24
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7385
7204: LD_INT 49
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7238
7212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 21
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 23
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: ST_TO_ADDR
7236: GO 7385
7238: LD_INT 51
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7272
7246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 21
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: ST_TO_ADDR
7270: GO 7385
7272: LD_INT 52
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7306
7280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: ST_TO_ADDR
7304: GO 7385
7306: LD_INT 53
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7332
7314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 23
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 7385
7332: LD_INT 46
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7358
7340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_INT 23
7348: PUSH
7349: LD_INT 24
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: ST_TO_ADDR
7356: GO 7385
7358: LD_INT 47
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7366
7364: GO 7384
7366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 23
7374: PUSH
7375: LD_INT 24
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 7385
7384: POP
// result := ( chassis in result ) ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_VAR 0 1
7394: PUSH
7395: LD_VAR 0 3
7399: IN
7400: ST_TO_ADDR
// end ;
7401: LD_VAR 0 3
7405: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7406: LD_INT 0
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
// result := array ;
7415: LD_ADDR_VAR 0 5
7419: PUSH
7420: LD_VAR 0 1
7424: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7425: LD_VAR 0 1
7429: NOT
7430: PUSH
7431: LD_VAR 0 2
7435: NOT
7436: OR
7437: PUSH
7438: LD_VAR 0 3
7442: NOT
7443: OR
7444: PUSH
7445: LD_VAR 0 2
7449: PUSH
7450: LD_VAR 0 1
7454: GREATER
7455: OR
7456: PUSH
7457: LD_VAR 0 3
7461: PUSH
7462: LD_VAR 0 1
7466: GREATER
7467: OR
7468: IFFALSE 7472
// exit ;
7470: GO 7768
// if direction then
7472: LD_VAR 0 4
7476: IFFALSE 7540
// begin d := 1 ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if i_from > i_to then
7486: LD_VAR 0 2
7490: PUSH
7491: LD_VAR 0 3
7495: GREATER
7496: IFFALSE 7522
// length := ( array - i_from ) + i_to else
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 1
7507: PUSH
7508: LD_VAR 0 2
7512: MINUS
7513: PUSH
7514: LD_VAR 0 3
7518: PLUS
7519: ST_TO_ADDR
7520: GO 7538
// length := i_to - i_from ;
7522: LD_ADDR_VAR 0 11
7526: PUSH
7527: LD_VAR 0 3
7531: PUSH
7532: LD_VAR 0 2
7536: MINUS
7537: ST_TO_ADDR
// end else
7538: GO 7601
// begin d := - 1 ;
7540: LD_ADDR_VAR 0 9
7544: PUSH
7545: LD_INT 1
7547: NEG
7548: ST_TO_ADDR
// if i_from > i_to then
7549: LD_VAR 0 2
7553: PUSH
7554: LD_VAR 0 3
7558: GREATER
7559: IFFALSE 7579
// length := i_from - i_to else
7561: LD_ADDR_VAR 0 11
7565: PUSH
7566: LD_VAR 0 2
7570: PUSH
7571: LD_VAR 0 3
7575: MINUS
7576: ST_TO_ADDR
7577: GO 7601
// length := ( array - i_to ) + i_from ;
7579: LD_ADDR_VAR 0 11
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: LD_VAR 0 3
7593: MINUS
7594: PUSH
7595: LD_VAR 0 2
7599: PLUS
7600: ST_TO_ADDR
// end ; if not length then
7601: LD_VAR 0 11
7605: NOT
7606: IFFALSE 7610
// exit ;
7608: GO 7768
// tmp := array ;
7610: LD_ADDR_VAR 0 10
7614: PUSH
7615: LD_VAR 0 1
7619: ST_TO_ADDR
// for i = 1 to length do
7620: LD_ADDR_VAR 0 6
7624: PUSH
7625: DOUBLE
7626: LD_INT 1
7628: DEC
7629: ST_TO_ADDR
7630: LD_VAR 0 11
7634: PUSH
7635: FOR_TO
7636: IFFALSE 7756
// begin for j = 1 to array do
7638: LD_ADDR_VAR 0 7
7642: PUSH
7643: DOUBLE
7644: LD_INT 1
7646: DEC
7647: ST_TO_ADDR
7648: LD_VAR 0 1
7652: PUSH
7653: FOR_TO
7654: IFFALSE 7742
// begin k := j + d ;
7656: LD_ADDR_VAR 0 8
7660: PUSH
7661: LD_VAR 0 7
7665: PUSH
7666: LD_VAR 0 9
7670: PLUS
7671: ST_TO_ADDR
// if k > array then
7672: LD_VAR 0 8
7676: PUSH
7677: LD_VAR 0 1
7681: GREATER
7682: IFFALSE 7692
// k := 1 ;
7684: LD_ADDR_VAR 0 8
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// if not k then
7692: LD_VAR 0 8
7696: NOT
7697: IFFALSE 7709
// k := array ;
7699: LD_ADDR_VAR 0 8
7703: PUSH
7704: LD_VAR 0 1
7708: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7709: LD_ADDR_VAR 0 10
7713: PUSH
7714: LD_VAR 0 10
7718: PPUSH
7719: LD_VAR 0 8
7723: PPUSH
7724: LD_VAR 0 1
7728: PUSH
7729: LD_VAR 0 7
7733: ARRAY
7734: PPUSH
7735: CALL_OW 1
7739: ST_TO_ADDR
// end ;
7740: GO 7653
7742: POP
7743: POP
// array := tmp ;
7744: LD_ADDR_VAR 0 1
7748: PUSH
7749: LD_VAR 0 10
7753: ST_TO_ADDR
// end ;
7754: GO 7635
7756: POP
7757: POP
// result := array ;
7758: LD_ADDR_VAR 0 5
7762: PUSH
7763: LD_VAR 0 1
7767: ST_TO_ADDR
// end ;
7768: LD_VAR 0 5
7772: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7773: LD_INT 0
7775: PPUSH
7776: PPUSH
// result := 0 ;
7777: LD_ADDR_VAR 0 3
7781: PUSH
7782: LD_INT 0
7784: ST_TO_ADDR
// if not array or not value in array then
7785: LD_VAR 0 1
7789: NOT
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: LD_VAR 0 1
7800: IN
7801: NOT
7802: OR
7803: IFFALSE 7807
// exit ;
7805: GO 7861
// for i = 1 to array do
7807: LD_ADDR_VAR 0 4
7811: PUSH
7812: DOUBLE
7813: LD_INT 1
7815: DEC
7816: ST_TO_ADDR
7817: LD_VAR 0 1
7821: PUSH
7822: FOR_TO
7823: IFFALSE 7859
// if value = array [ i ] then
7825: LD_VAR 0 2
7829: PUSH
7830: LD_VAR 0 1
7834: PUSH
7835: LD_VAR 0 4
7839: ARRAY
7840: EQUAL
7841: IFFALSE 7857
// begin result := i ;
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_VAR 0 4
7852: ST_TO_ADDR
// exit ;
7853: POP
7854: POP
7855: GO 7861
// end ;
7857: GO 7822
7859: POP
7860: POP
// end ;
7861: LD_VAR 0 3
7865: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7866: LD_INT 0
7868: PPUSH
// vc_chassis := chassis ;
7869: LD_ADDR_OWVAR 37
7873: PUSH
7874: LD_VAR 0 1
7878: ST_TO_ADDR
// vc_engine := engine ;
7879: LD_ADDR_OWVAR 39
7883: PUSH
7884: LD_VAR 0 2
7888: ST_TO_ADDR
// vc_control := control ;
7889: LD_ADDR_OWVAR 38
7893: PUSH
7894: LD_VAR 0 3
7898: ST_TO_ADDR
// vc_weapon := weapon ;
7899: LD_ADDR_OWVAR 40
7903: PUSH
7904: LD_VAR 0 4
7908: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7909: LD_ADDR_OWVAR 41
7913: PUSH
7914: LD_VAR 0 5
7918: ST_TO_ADDR
// end ;
7919: LD_VAR 0 6
7923: RET
// export function WantPlant ( unit ) ; var task ; begin
7924: LD_INT 0
7926: PPUSH
7927: PPUSH
// result := false ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 437
7950: ST_TO_ADDR
// if task then
7951: LD_VAR 0 3
7955: IFFALSE 7983
// if task [ 1 ] [ 1 ] = p then
7957: LD_VAR 0 3
7961: PUSH
7962: LD_INT 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PUSH
7970: LD_STRING p
7972: EQUAL
7973: IFFALSE 7983
// result := true ;
7975: LD_ADDR_VAR 0 2
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// end ;
7983: LD_VAR 0 2
7987: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7988: LD_INT 0
7990: PPUSH
7991: PPUSH
7992: PPUSH
7993: PPUSH
// if pos < 1 then
7994: LD_VAR 0 2
7998: PUSH
7999: LD_INT 1
8001: LESS
8002: IFFALSE 8006
// exit ;
8004: GO 8309
// if pos = 1 then
8006: LD_VAR 0 2
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: IFFALSE 8047
// result := Replace ( arr , pos [ 1 ] , value ) else
8016: LD_ADDR_VAR 0 4
8020: PUSH
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_VAR 0 2
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_VAR 0 3
8039: PPUSH
8040: CALL_OW 1
8044: ST_TO_ADDR
8045: GO 8309
// begin tmp := arr ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_VAR 0 1
8056: ST_TO_ADDR
// s_arr := [ tmp ] ;
8057: LD_ADDR_VAR 0 7
8061: PUSH
8062: LD_VAR 0 6
8066: PUSH
8067: EMPTY
8068: LIST
8069: ST_TO_ADDR
// for i = 1 to pos - 1 do
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: DOUBLE
8076: LD_INT 1
8078: DEC
8079: ST_TO_ADDR
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 1
8087: MINUS
8088: PUSH
8089: FOR_TO
8090: IFFALSE 8135
// begin tmp := tmp [ pos [ i ] ] ;
8092: LD_ADDR_VAR 0 6
8096: PUSH
8097: LD_VAR 0 6
8101: PUSH
8102: LD_VAR 0 2
8106: PUSH
8107: LD_VAR 0 5
8111: ARRAY
8112: ARRAY
8113: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8114: LD_ADDR_VAR 0 7
8118: PUSH
8119: LD_VAR 0 7
8123: PUSH
8124: LD_VAR 0 6
8128: PUSH
8129: EMPTY
8130: LIST
8131: ADD
8132: ST_TO_ADDR
// end ;
8133: GO 8089
8135: POP
8136: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_VAR 0 6
8146: PPUSH
8147: LD_VAR 0 2
8151: PUSH
8152: LD_VAR 0 2
8156: ARRAY
8157: PPUSH
8158: LD_VAR 0 3
8162: PPUSH
8163: CALL_OW 1
8167: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8168: LD_ADDR_VAR 0 7
8172: PUSH
8173: LD_VAR 0 7
8177: PPUSH
8178: LD_VAR 0 7
8182: PPUSH
8183: LD_VAR 0 6
8187: PPUSH
8188: CALL_OW 1
8192: ST_TO_ADDR
// for i = s_arr downto 2 do
8193: LD_ADDR_VAR 0 5
8197: PUSH
8198: DOUBLE
8199: LD_VAR 0 7
8203: INC
8204: ST_TO_ADDR
8205: LD_INT 2
8207: PUSH
8208: FOR_DOWNTO
8209: IFFALSE 8293
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8211: LD_ADDR_VAR 0 6
8215: PUSH
8216: LD_VAR 0 7
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 1
8228: MINUS
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 2
8235: PUSH
8236: LD_VAR 0 5
8240: PUSH
8241: LD_INT 1
8243: MINUS
8244: ARRAY
8245: PPUSH
8246: LD_VAR 0 7
8250: PUSH
8251: LD_VAR 0 5
8255: ARRAY
8256: PPUSH
8257: CALL_OW 1
8261: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: LD_VAR 0 7
8271: PPUSH
8272: LD_VAR 0 5
8276: PUSH
8277: LD_INT 1
8279: MINUS
8280: PPUSH
8281: LD_VAR 0 6
8285: PPUSH
8286: CALL_OW 1
8290: ST_TO_ADDR
// end ;
8291: GO 8208
8293: POP
8294: POP
// result := s_arr [ 1 ] ;
8295: LD_ADDR_VAR 0 4
8299: PUSH
8300: LD_VAR 0 7
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: ST_TO_ADDR
// end ; end ;
8309: LD_VAR 0 4
8313: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8314: LD_INT 0
8316: PPUSH
8317: PPUSH
// if not list then
8318: LD_VAR 0 1
8322: NOT
8323: IFFALSE 8327
// exit ;
8325: GO 8418
// i := list [ pos1 ] ;
8327: LD_ADDR_VAR 0 5
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: LD_VAR 0 2
8341: ARRAY
8342: ST_TO_ADDR
// if not i then
8343: LD_VAR 0 5
8347: NOT
8348: IFFALSE 8352
// exit ;
8350: GO 8418
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8352: LD_ADDR_VAR 0 1
8356: PUSH
8357: LD_VAR 0 1
8361: PPUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_VAR 0 1
8371: PUSH
8372: LD_VAR 0 3
8376: ARRAY
8377: PPUSH
8378: CALL_OW 1
8382: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: LD_VAR 0 3
8397: PPUSH
8398: LD_VAR 0 5
8402: PPUSH
8403: CALL_OW 1
8407: ST_TO_ADDR
// result := list ;
8408: LD_ADDR_VAR 0 4
8412: PUSH
8413: LD_VAR 0 1
8417: ST_TO_ADDR
// end ;
8418: LD_VAR 0 4
8422: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8423: LD_INT 0
8425: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8426: LD_ADDR_VAR 0 5
8430: PUSH
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 250
8440: PPUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 251
8450: PPUSH
8451: LD_VAR 0 2
8455: PPUSH
8456: LD_VAR 0 3
8460: PPUSH
8461: LD_VAR 0 4
8465: PPUSH
8466: CALL 8844 0 5
8470: ST_TO_ADDR
// end ;
8471: LD_VAR 0 5
8475: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
// if not list or not unit then
8482: LD_VAR 0 2
8486: NOT
8487: PUSH
8488: LD_VAR 0 1
8492: NOT
8493: OR
8494: IFFALSE 8498
// exit ;
8496: GO 8839
// result := [ ] ;
8498: LD_ADDR_VAR 0 5
8502: PUSH
8503: EMPTY
8504: ST_TO_ADDR
// for i in list do
8505: LD_ADDR_VAR 0 6
8509: PUSH
8510: LD_VAR 0 2
8514: PUSH
8515: FOR_IN
8516: IFFALSE 8734
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8518: LD_ADDR_VAR 0 8
8522: PUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_VAR 0 6
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 2
8544: ARRAY
8545: PPUSH
8546: CALL_OW 297
8550: ST_TO_ADDR
// if not Count ( result ) then
8551: LD_VAR 0 5
8555: PPUSH
8556: CALL 5128 0 1
8560: NOT
8561: IFFALSE 8594
// begin result := Join ( result , [ i , tmp ] ) ;
8563: LD_ADDR_VAR 0 5
8567: PUSH
8568: LD_VAR 0 5
8572: PPUSH
8573: LD_VAR 0 6
8577: PUSH
8578: LD_VAR 0 8
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL 40737 0 2
8591: ST_TO_ADDR
// continue ;
8592: GO 8515
// end ; if result [ result ] [ 2 ] <= tmp then
8594: LD_VAR 0 5
8598: PUSH
8599: LD_VAR 0 5
8603: ARRAY
8604: PUSH
8605: LD_INT 2
8607: ARRAY
8608: PUSH
8609: LD_VAR 0 8
8613: LESSEQUAL
8614: IFFALSE 8647
// result := Join ( result , [ i , tmp ] ) else
8616: LD_ADDR_VAR 0 5
8620: PUSH
8621: LD_VAR 0 5
8625: PPUSH
8626: LD_VAR 0 6
8630: PUSH
8631: LD_VAR 0 8
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL 40737 0 2
8644: ST_TO_ADDR
8645: GO 8732
// begin for j := 1 to Count ( result ) do
8647: LD_ADDR_VAR 0 7
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_VAR 0 5
8661: PPUSH
8662: CALL 5128 0 1
8666: PUSH
8667: FOR_TO
8668: IFFALSE 8730
// begin if tmp < result [ j ] [ 2 ] then
8670: LD_VAR 0 8
8674: PUSH
8675: LD_VAR 0 5
8679: PUSH
8680: LD_VAR 0 7
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: LESS
8690: IFFALSE 8728
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8692: LD_ADDR_VAR 0 5
8696: PUSH
8697: LD_VAR 0 5
8701: PPUSH
8702: LD_VAR 0 7
8706: PPUSH
8707: LD_VAR 0 6
8711: PUSH
8712: LD_VAR 0 8
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PPUSH
8721: CALL_OW 2
8725: ST_TO_ADDR
// break ;
8726: GO 8730
// end ; end ;
8728: GO 8667
8730: POP
8731: POP
// end ; end ;
8732: GO 8515
8734: POP
8735: POP
// if result and not asc then
8736: LD_VAR 0 5
8740: PUSH
8741: LD_VAR 0 3
8745: NOT
8746: AND
8747: IFFALSE 8764
// result := ReverseArray ( result ) ;
8749: LD_ADDR_VAR 0 5
8753: PUSH
8754: LD_VAR 0 5
8758: PPUSH
8759: CALL 36004 0 1
8763: ST_TO_ADDR
// tmp := [ ] ;
8764: LD_ADDR_VAR 0 8
8768: PUSH
8769: EMPTY
8770: ST_TO_ADDR
// if mode then
8771: LD_VAR 0 4
8775: IFFALSE 8839
// begin for i := 1 to result do
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: DOUBLE
8783: LD_INT 1
8785: DEC
8786: ST_TO_ADDR
8787: LD_VAR 0 5
8791: PUSH
8792: FOR_TO
8793: IFFALSE 8827
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8795: LD_ADDR_VAR 0 8
8799: PUSH
8800: LD_VAR 0 8
8804: PPUSH
8805: LD_VAR 0 5
8809: PUSH
8810: LD_VAR 0 6
8814: ARRAY
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: PPUSH
8820: CALL 40737 0 2
8824: ST_TO_ADDR
8825: GO 8792
8827: POP
8828: POP
// result := tmp ;
8829: LD_ADDR_VAR 0 5
8833: PUSH
8834: LD_VAR 0 8
8838: ST_TO_ADDR
// end ; end ;
8839: LD_VAR 0 5
8843: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
// if not list then
8850: LD_VAR 0 3
8854: NOT
8855: IFFALSE 8859
// exit ;
8857: GO 9247
// result := [ ] ;
8859: LD_ADDR_VAR 0 6
8863: PUSH
8864: EMPTY
8865: ST_TO_ADDR
// for i in list do
8866: LD_ADDR_VAR 0 7
8870: PUSH
8871: LD_VAR 0 3
8875: PUSH
8876: FOR_IN
8877: IFFALSE 9079
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_VAR 0 7
8888: PPUSH
8889: LD_VAR 0 1
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 297
8903: ST_TO_ADDR
// if not result then
8904: LD_VAR 0 6
8908: NOT
8909: IFFALSE 8935
// result := [ [ i , tmp ] ] else
8911: LD_ADDR_VAR 0 6
8915: PUSH
8916: LD_VAR 0 7
8920: PUSH
8921: LD_VAR 0 9
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: ST_TO_ADDR
8933: GO 9077
// begin if result [ result ] [ 2 ] <= tmp then
8935: LD_VAR 0 6
8939: PUSH
8940: LD_VAR 0 6
8944: ARRAY
8945: PUSH
8946: LD_INT 2
8948: ARRAY
8949: PUSH
8950: LD_VAR 0 9
8954: LESSEQUAL
8955: IFFALSE 8997
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8957: LD_ADDR_VAR 0 6
8961: PUSH
8962: LD_VAR 0 6
8966: PPUSH
8967: LD_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: PLUS
8975: PPUSH
8976: LD_VAR 0 7
8980: PUSH
8981: LD_VAR 0 9
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 2
8994: ST_TO_ADDR
8995: GO 9077
// for j := 1 to result do
8997: LD_ADDR_VAR 0 8
9001: PUSH
9002: DOUBLE
9003: LD_INT 1
9005: DEC
9006: ST_TO_ADDR
9007: LD_VAR 0 6
9011: PUSH
9012: FOR_TO
9013: IFFALSE 9075
// begin if tmp < result [ j ] [ 2 ] then
9015: LD_VAR 0 9
9019: PUSH
9020: LD_VAR 0 6
9024: PUSH
9025: LD_VAR 0 8
9029: ARRAY
9030: PUSH
9031: LD_INT 2
9033: ARRAY
9034: LESS
9035: IFFALSE 9073
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9037: LD_ADDR_VAR 0 6
9041: PUSH
9042: LD_VAR 0 6
9046: PPUSH
9047: LD_VAR 0 8
9051: PPUSH
9052: LD_VAR 0 7
9056: PUSH
9057: LD_VAR 0 9
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PPUSH
9066: CALL_OW 2
9070: ST_TO_ADDR
// break ;
9071: GO 9075
// end ; end ;
9073: GO 9012
9075: POP
9076: POP
// end ; end ;
9077: GO 8876
9079: POP
9080: POP
// if result and not asc then
9081: LD_VAR 0 6
9085: PUSH
9086: LD_VAR 0 4
9090: NOT
9091: AND
9092: IFFALSE 9167
// begin tmp := result ;
9094: LD_ADDR_VAR 0 9
9098: PUSH
9099: LD_VAR 0 6
9103: ST_TO_ADDR
// for i = tmp downto 1 do
9104: LD_ADDR_VAR 0 7
9108: PUSH
9109: DOUBLE
9110: LD_VAR 0 9
9114: INC
9115: ST_TO_ADDR
9116: LD_INT 1
9118: PUSH
9119: FOR_DOWNTO
9120: IFFALSE 9165
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9122: LD_ADDR_VAR 0 6
9126: PUSH
9127: LD_VAR 0 6
9131: PPUSH
9132: LD_VAR 0 9
9136: PUSH
9137: LD_VAR 0 7
9141: MINUS
9142: PUSH
9143: LD_INT 1
9145: PLUS
9146: PPUSH
9147: LD_VAR 0 9
9151: PUSH
9152: LD_VAR 0 7
9156: ARRAY
9157: PPUSH
9158: CALL_OW 1
9162: ST_TO_ADDR
9163: GO 9119
9165: POP
9166: POP
// end ; tmp := [ ] ;
9167: LD_ADDR_VAR 0 9
9171: PUSH
9172: EMPTY
9173: ST_TO_ADDR
// if mode then
9174: LD_VAR 0 5
9178: IFFALSE 9247
// begin for i = 1 to result do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_VAR 0 6
9194: PUSH
9195: FOR_TO
9196: IFFALSE 9235
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9198: LD_ADDR_VAR 0 9
9202: PUSH
9203: LD_VAR 0 9
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: LD_VAR 0 6
9217: PUSH
9218: LD_VAR 0 7
9222: ARRAY
9223: PUSH
9224: LD_INT 1
9226: ARRAY
9227: PPUSH
9228: CALL_OW 1
9232: ST_TO_ADDR
9233: GO 9195
9235: POP
9236: POP
// result := tmp ;
9237: LD_ADDR_VAR 0 6
9241: PUSH
9242: LD_VAR 0 9
9246: ST_TO_ADDR
// end ; end ;
9247: LD_VAR 0 6
9251: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9252: LD_INT 0
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9260: LD_ADDR_VAR 0 5
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: LD_INT 0
9270: PUSH
9271: LD_INT 0
9273: PUSH
9274: EMPTY
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: ST_TO_ADDR
// if not x or not y then
9282: LD_VAR 0 2
9286: NOT
9287: PUSH
9288: LD_VAR 0 3
9292: NOT
9293: OR
9294: IFFALSE 9298
// exit ;
9296: GO 10948
// if not range then
9298: LD_VAR 0 4
9302: NOT
9303: IFFALSE 9313
// range := 10 ;
9305: LD_ADDR_VAR 0 4
9309: PUSH
9310: LD_INT 10
9312: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9313: LD_ADDR_VAR 0 8
9317: PUSH
9318: LD_INT 81
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 92
9332: PUSH
9333: LD_VAR 0 2
9337: PUSH
9338: LD_VAR 0 3
9342: PUSH
9343: LD_VAR 0 4
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: LD_INT 21
9359: PUSH
9360: LD_INT 3
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: PPUSH
9376: CALL_OW 69
9380: ST_TO_ADDR
// if not tmp then
9381: LD_VAR 0 8
9385: NOT
9386: IFFALSE 9390
// exit ;
9388: GO 10948
// for i in tmp do
9390: LD_ADDR_VAR 0 6
9394: PUSH
9395: LD_VAR 0 8
9399: PUSH
9400: FOR_IN
9401: IFFALSE 10923
// begin points := [ 0 , 0 , 0 ] ;
9403: LD_ADDR_VAR 0 9
9407: PUSH
9408: LD_INT 0
9410: PUSH
9411: LD_INT 0
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: ST_TO_ADDR
// bpoints := 1 ;
9422: LD_ADDR_VAR 0 10
9426: PUSH
9427: LD_INT 1
9429: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9430: LD_VAR 0 6
9434: PPUSH
9435: CALL_OW 247
9439: PUSH
9440: LD_INT 1
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 10026
9448: POP
// begin if GetClass ( i ) = 1 then
9449: LD_VAR 0 6
9453: PPUSH
9454: CALL_OW 257
9458: PUSH
9459: LD_INT 1
9461: EQUAL
9462: IFFALSE 9483
// points := [ 10 , 5 , 3 ] ;
9464: LD_ADDR_VAR 0 9
9468: PUSH
9469: LD_INT 10
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9483: LD_VAR 0 6
9487: PPUSH
9488: CALL_OW 257
9492: PUSH
9493: LD_INT 2
9495: PUSH
9496: LD_INT 3
9498: PUSH
9499: LD_INT 4
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: IN
9507: IFFALSE 9528
// points := [ 3 , 2 , 1 ] ;
9509: LD_ADDR_VAR 0 9
9513: PUSH
9514: LD_INT 3
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: LD_INT 1
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9528: LD_VAR 0 6
9532: PPUSH
9533: CALL_OW 257
9537: PUSH
9538: LD_INT 5
9540: EQUAL
9541: IFFALSE 9562
// points := [ 130 , 5 , 2 ] ;
9543: LD_ADDR_VAR 0 9
9547: PUSH
9548: LD_INT 130
9550: PUSH
9551: LD_INT 5
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 257
9571: PUSH
9572: LD_INT 8
9574: EQUAL
9575: IFFALSE 9596
// points := [ 35 , 35 , 30 ] ;
9577: LD_ADDR_VAR 0 9
9581: PUSH
9582: LD_INT 35
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 30
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9596: LD_VAR 0 6
9600: PPUSH
9601: CALL_OW 257
9605: PUSH
9606: LD_INT 9
9608: EQUAL
9609: IFFALSE 9630
// points := [ 20 , 55 , 40 ] ;
9611: LD_ADDR_VAR 0 9
9615: PUSH
9616: LD_INT 20
9618: PUSH
9619: LD_INT 55
9621: PUSH
9622: LD_INT 40
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9630: LD_VAR 0 6
9634: PPUSH
9635: CALL_OW 257
9639: PUSH
9640: LD_INT 12
9642: PUSH
9643: LD_INT 16
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: IN
9650: IFFALSE 9671
// points := [ 5 , 3 , 2 ] ;
9652: LD_ADDR_VAR 0 9
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 257
9680: PUSH
9681: LD_INT 17
9683: EQUAL
9684: IFFALSE 9705
// points := [ 100 , 50 , 75 ] ;
9686: LD_ADDR_VAR 0 9
9690: PUSH
9691: LD_INT 100
9693: PUSH
9694: LD_INT 50
9696: PUSH
9697: LD_INT 75
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9705: LD_VAR 0 6
9709: PPUSH
9710: CALL_OW 257
9714: PUSH
9715: LD_INT 15
9717: EQUAL
9718: IFFALSE 9739
// points := [ 10 , 5 , 3 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 257
9748: PUSH
9749: LD_INT 14
9751: EQUAL
9752: IFFALSE 9773
// points := [ 10 , 0 , 0 ] ;
9754: LD_ADDR_VAR 0 9
9758: PUSH
9759: LD_INT 10
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: LD_INT 0
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9773: LD_VAR 0 6
9777: PPUSH
9778: CALL_OW 257
9782: PUSH
9783: LD_INT 11
9785: EQUAL
9786: IFFALSE 9807
// points := [ 30 , 10 , 5 ] ;
9788: LD_ADDR_VAR 0 9
9792: PUSH
9793: LD_INT 30
9795: PUSH
9796: LD_INT 10
9798: PUSH
9799: LD_INT 5
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9807: LD_VAR 0 1
9811: PPUSH
9812: LD_INT 5
9814: PPUSH
9815: CALL_OW 321
9819: PUSH
9820: LD_INT 2
9822: EQUAL
9823: IFFALSE 9840
// bpoints := bpoints * 1.8 ;
9825: LD_ADDR_VAR 0 10
9829: PUSH
9830: LD_VAR 0 10
9834: PUSH
9835: LD_REAL  1.80000000000000E+0000
9838: MUL
9839: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9840: LD_VAR 0 6
9844: PPUSH
9845: CALL_OW 257
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 4
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: IN
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_INT 51
9876: PPUSH
9877: CALL_OW 321
9881: PUSH
9882: LD_INT 2
9884: EQUAL
9885: AND
9886: IFFALSE 9903
// bpoints := bpoints * 1.2 ;
9888: LD_ADDR_VAR 0 10
9892: PUSH
9893: LD_VAR 0 10
9897: PUSH
9898: LD_REAL  1.20000000000000E+0000
9901: MUL
9902: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 257
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 7
9918: PUSH
9919: LD_INT 9
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: IN
9927: PUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 52
9935: PPUSH
9936: CALL_OW 321
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: AND
9945: IFFALSE 9962
// bpoints := bpoints * 1.5 ;
9947: LD_ADDR_VAR 0 10
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_REAL  1.50000000000000E+0000
9960: MUL
9961: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9962: LD_VAR 0 1
9966: PPUSH
9967: LD_INT 66
9969: PPUSH
9970: CALL_OW 321
9974: PUSH
9975: LD_INT 2
9977: EQUAL
9978: IFFALSE 9995
// bpoints := bpoints * 1.1 ;
9980: LD_ADDR_VAR 0 10
9984: PUSH
9985: LD_VAR 0 10
9989: PUSH
9990: LD_REAL  1.10000000000000E+0000
9993: MUL
9994: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9995: LD_ADDR_VAR 0 10
9999: PUSH
10000: LD_VAR 0 10
10004: PUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 259
10017: PUSH
10018: LD_REAL  1.15000000000000E+0000
10021: MUL
10022: MUL
10023: ST_TO_ADDR
// end ; unit_vehicle :
10024: GO 10852
10026: LD_INT 2
10028: DOUBLE
10029: EQUAL
10030: IFTRUE 10034
10032: GO 10840
10034: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10035: LD_VAR 0 6
10039: PPUSH
10040: CALL_OW 264
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 42
10050: PUSH
10051: LD_INT 24
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: IN
10059: IFFALSE 10080
// points := [ 25 , 5 , 3 ] ;
10061: LD_ADDR_VAR 0 9
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 5
10071: PUSH
10072: LD_INT 3
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10080: LD_VAR 0 6
10084: PPUSH
10085: CALL_OW 264
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: LD_INT 43
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: IN
10104: IFFALSE 10125
// points := [ 40 , 15 , 5 ] ;
10106: LD_ADDR_VAR 0 9
10110: PUSH
10111: LD_INT 40
10113: PUSH
10114: LD_INT 15
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10125: LD_VAR 0 6
10129: PPUSH
10130: CALL_OW 264
10134: PUSH
10135: LD_INT 3
10137: PUSH
10138: LD_INT 23
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: IN
10145: IFFALSE 10166
// points := [ 7 , 25 , 8 ] ;
10147: LD_ADDR_VAR 0 9
10151: PUSH
10152: LD_INT 7
10154: PUSH
10155: LD_INT 25
10157: PUSH
10158: LD_INT 8
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10166: LD_VAR 0 6
10170: PPUSH
10171: CALL_OW 264
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: LD_INT 27
10181: PUSH
10182: LD_INT 44
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: IN
10190: IFFALSE 10211
// points := [ 14 , 50 , 16 ] ;
10192: LD_ADDR_VAR 0 9
10196: PUSH
10197: LD_INT 14
10199: PUSH
10200: LD_INT 50
10202: PUSH
10203: LD_INT 16
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10211: LD_VAR 0 6
10215: PPUSH
10216: CALL_OW 264
10220: PUSH
10221: LD_INT 6
10223: PUSH
10224: LD_INT 46
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 32 , 120 , 70 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 32
10240: PUSH
10241: LD_INT 120
10243: PUSH
10244: LD_INT 70
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 7
10264: PUSH
10265: LD_INT 28
10267: PUSH
10268: LD_INT 45
10270: PUSH
10271: LD_INT 92
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: IN
10280: IFFALSE 10301
// points := [ 35 , 20 , 45 ] ;
10282: LD_ADDR_VAR 0 9
10286: PUSH
10287: LD_INT 35
10289: PUSH
10290: LD_INT 20
10292: PUSH
10293: LD_INT 45
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10301: LD_VAR 0 6
10305: PPUSH
10306: CALL_OW 264
10310: PUSH
10311: LD_INT 47
10313: PUSH
10314: EMPTY
10315: LIST
10316: IN
10317: IFFALSE 10338
// points := [ 67 , 45 , 75 ] ;
10319: LD_ADDR_VAR 0 9
10323: PUSH
10324: LD_INT 67
10326: PUSH
10327: LD_INT 45
10329: PUSH
10330: LD_INT 75
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10338: LD_VAR 0 6
10342: PPUSH
10343: CALL_OW 264
10347: PUSH
10348: LD_INT 26
10350: PUSH
10351: EMPTY
10352: LIST
10353: IN
10354: IFFALSE 10375
// points := [ 120 , 30 , 80 ] ;
10356: LD_ADDR_VAR 0 9
10360: PUSH
10361: LD_INT 120
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: LD_INT 80
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10375: LD_VAR 0 6
10379: PPUSH
10380: CALL_OW 264
10384: PUSH
10385: LD_INT 22
10387: PUSH
10388: EMPTY
10389: LIST
10390: IN
10391: IFFALSE 10412
// points := [ 40 , 1 , 1 ] ;
10393: LD_ADDR_VAR 0 9
10397: PUSH
10398: LD_INT 40
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10412: LD_VAR 0 6
10416: PPUSH
10417: CALL_OW 264
10421: PUSH
10422: LD_INT 29
10424: PUSH
10425: EMPTY
10426: LIST
10427: IN
10428: IFFALSE 10449
// points := [ 70 , 200 , 400 ] ;
10430: LD_ADDR_VAR 0 9
10434: PUSH
10435: LD_INT 70
10437: PUSH
10438: LD_INT 200
10440: PUSH
10441: LD_INT 400
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: LIST
10448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10449: LD_VAR 0 6
10453: PPUSH
10454: CALL_OW 264
10458: PUSH
10459: LD_INT 14
10461: PUSH
10462: LD_INT 53
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: IN
10469: IFFALSE 10490
// points := [ 40 , 10 , 20 ] ;
10471: LD_ADDR_VAR 0 9
10475: PUSH
10476: LD_INT 40
10478: PUSH
10479: LD_INT 10
10481: PUSH
10482: LD_INT 20
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10490: LD_VAR 0 6
10494: PPUSH
10495: CALL_OW 264
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: EMPTY
10504: LIST
10505: IN
10506: IFFALSE 10527
// points := [ 5 , 70 , 20 ] ;
10508: LD_ADDR_VAR 0 9
10512: PUSH
10513: LD_INT 5
10515: PUSH
10516: LD_INT 70
10518: PUSH
10519: LD_INT 20
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10527: LD_VAR 0 6
10531: PPUSH
10532: CALL_OW 264
10536: PUSH
10537: LD_INT 10
10539: PUSH
10540: EMPTY
10541: LIST
10542: IN
10543: IFFALSE 10564
// points := [ 35 , 110 , 70 ] ;
10545: LD_ADDR_VAR 0 9
10549: PUSH
10550: LD_INT 35
10552: PUSH
10553: LD_INT 110
10555: PUSH
10556: LD_INT 70
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10564: LD_VAR 0 6
10568: PPUSH
10569: CALL_OW 265
10573: PUSH
10574: LD_INT 25
10576: EQUAL
10577: IFFALSE 10598
// points := [ 80 , 65 , 100 ] ;
10579: LD_ADDR_VAR 0 9
10583: PUSH
10584: LD_INT 80
10586: PUSH
10587: LD_INT 65
10589: PUSH
10590: LD_INT 100
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10598: LD_VAR 0 6
10602: PPUSH
10603: CALL_OW 263
10607: PUSH
10608: LD_INT 1
10610: EQUAL
10611: IFFALSE 10646
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10613: LD_ADDR_VAR 0 10
10617: PUSH
10618: LD_VAR 0 10
10622: PUSH
10623: LD_VAR 0 6
10627: PPUSH
10628: CALL_OW 311
10632: PPUSH
10633: LD_INT 3
10635: PPUSH
10636: CALL_OW 259
10640: PUSH
10641: LD_INT 4
10643: MUL
10644: MUL
10645: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10646: LD_VAR 0 6
10650: PPUSH
10651: CALL_OW 263
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: IFFALSE 10710
// begin j := IsControledBy ( i ) ;
10661: LD_ADDR_VAR 0 7
10665: PUSH
10666: LD_VAR 0 6
10670: PPUSH
10671: CALL_OW 312
10675: ST_TO_ADDR
// if j then
10676: LD_VAR 0 7
10680: IFFALSE 10710
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10682: LD_ADDR_VAR 0 10
10686: PUSH
10687: LD_VAR 0 10
10691: PUSH
10692: LD_VAR 0 7
10696: PPUSH
10697: LD_INT 3
10699: PPUSH
10700: CALL_OW 259
10704: PUSH
10705: LD_INT 3
10707: MUL
10708: MUL
10709: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10710: LD_VAR 0 6
10714: PPUSH
10715: CALL_OW 264
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 46
10728: PUSH
10729: LD_INT 44
10731: PUSH
10732: LD_INT 47
10734: PUSH
10735: LD_INT 45
10737: PUSH
10738: LD_INT 28
10740: PUSH
10741: LD_INT 7
10743: PUSH
10744: LD_INT 27
10746: PUSH
10747: LD_INT 29
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: IN
10762: PUSH
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 52
10770: PPUSH
10771: CALL_OW 321
10775: PUSH
10776: LD_INT 2
10778: EQUAL
10779: AND
10780: IFFALSE 10797
// bpoints := bpoints * 1.2 ;
10782: LD_ADDR_VAR 0 10
10786: PUSH
10787: LD_VAR 0 10
10791: PUSH
10792: LD_REAL  1.20000000000000E+0000
10795: MUL
10796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10797: LD_VAR 0 6
10801: PPUSH
10802: CALL_OW 264
10806: PUSH
10807: LD_INT 6
10809: PUSH
10810: LD_INT 46
10812: PUSH
10813: LD_INT 47
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: IN
10821: IFFALSE 10838
// bpoints := bpoints * 1.2 ;
10823: LD_ADDR_VAR 0 10
10827: PUSH
10828: LD_VAR 0 10
10832: PUSH
10833: LD_REAL  1.20000000000000E+0000
10836: MUL
10837: ST_TO_ADDR
// end ; unit_building :
10838: GO 10852
10840: LD_INT 3
10842: DOUBLE
10843: EQUAL
10844: IFTRUE 10848
10846: GO 10851
10848: POP
// ; end ;
10849: GO 10852
10851: POP
// for j = 1 to 3 do
10852: LD_ADDR_VAR 0 7
10856: PUSH
10857: DOUBLE
10858: LD_INT 1
10860: DEC
10861: ST_TO_ADDR
10862: LD_INT 3
10864: PUSH
10865: FOR_TO
10866: IFFALSE 10919
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10868: LD_ADDR_VAR 0 5
10872: PUSH
10873: LD_VAR 0 5
10877: PPUSH
10878: LD_VAR 0 7
10882: PPUSH
10883: LD_VAR 0 5
10887: PUSH
10888: LD_VAR 0 7
10892: ARRAY
10893: PUSH
10894: LD_VAR 0 9
10898: PUSH
10899: LD_VAR 0 7
10903: ARRAY
10904: PUSH
10905: LD_VAR 0 10
10909: MUL
10910: PLUS
10911: PPUSH
10912: CALL_OW 1
10916: ST_TO_ADDR
10917: GO 10865
10919: POP
10920: POP
// end ;
10921: GO 9400
10923: POP
10924: POP
// result := Replace ( result , 4 , tmp ) ;
10925: LD_ADDR_VAR 0 5
10929: PUSH
10930: LD_VAR 0 5
10934: PPUSH
10935: LD_INT 4
10937: PPUSH
10938: LD_VAR 0 8
10942: PPUSH
10943: CALL_OW 1
10947: ST_TO_ADDR
// end ;
10948: LD_VAR 0 5
10952: RET
// export function DangerAtRange ( unit , range ) ; begin
10953: LD_INT 0
10955: PPUSH
// if not unit then
10956: LD_VAR 0 1
10960: NOT
10961: IFFALSE 10965
// exit ;
10963: GO 11010
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 255
10979: PPUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 250
10989: PPUSH
10990: LD_VAR 0 1
10994: PPUSH
10995: CALL_OW 251
10999: PPUSH
11000: LD_VAR 0 2
11004: PPUSH
11005: CALL 9252 0 4
11009: ST_TO_ADDR
// end ;
11010: LD_VAR 0 3
11014: RET
// export function DangerInArea ( side , area ) ; begin
11015: LD_INT 0
11017: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_INT 81
11030: PUSH
11031: LD_VAR 0 1
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL_OW 70
11044: ST_TO_ADDR
// end ;
11045: LD_VAR 0 3
11049: RET
// export function IsExtension ( b ) ; begin
11050: LD_INT 0
11052: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_VAR 0 1
11062: PUSH
11063: LD_INT 23
11065: PUSH
11066: LD_INT 20
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 17
11074: PUSH
11075: LD_INT 24
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 19
11083: PUSH
11084: LD_INT 16
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 18
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: IN
11105: ST_TO_ADDR
// end ;
11106: LD_VAR 0 2
11110: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11111: LD_INT 0
11113: PPUSH
11114: PPUSH
11115: PPUSH
// result := [ ] ;
11116: LD_ADDR_VAR 0 4
11120: PUSH
11121: EMPTY
11122: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: LD_INT 21
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: ST_TO_ADDR
// if not tmp then
11148: LD_VAR 0 5
11152: NOT
11153: IFFALSE 11157
// exit ;
11155: GO 11221
// if checkLink then
11157: LD_VAR 0 3
11161: IFFALSE 11211
// begin for i in tmp do
11163: LD_ADDR_VAR 0 6
11167: PUSH
11168: LD_VAR 0 5
11172: PUSH
11173: FOR_IN
11174: IFFALSE 11209
// if GetBase ( i ) <> base then
11176: LD_VAR 0 6
11180: PPUSH
11181: CALL_OW 274
11185: PUSH
11186: LD_VAR 0 1
11190: NONEQUAL
11191: IFFALSE 11207
// ComLinkToBase ( base , i ) ;
11193: LD_VAR 0 1
11197: PPUSH
11198: LD_VAR 0 6
11202: PPUSH
11203: CALL_OW 169
11207: GO 11173
11209: POP
11210: POP
// end ; result := tmp ;
11211: LD_ADDR_VAR 0 4
11215: PUSH
11216: LD_VAR 0 5
11220: ST_TO_ADDR
// end ;
11221: LD_VAR 0 4
11225: RET
// export function ComComplete ( units , b ) ; var i ; begin
11226: LD_INT 0
11228: PPUSH
11229: PPUSH
// if not units then
11230: LD_VAR 0 1
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11329
// for i in units do
11239: LD_ADDR_VAR 0 4
11243: PUSH
11244: LD_VAR 0 1
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11327
// if BuildingStatus ( b ) = bs_build then
11252: LD_VAR 0 2
11256: PPUSH
11257: CALL_OW 461
11261: PUSH
11262: LD_INT 1
11264: EQUAL
11265: IFFALSE 11325
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11267: LD_VAR 0 4
11271: PPUSH
11272: LD_STRING h
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 250
11284: PUSH
11285: LD_VAR 0 2
11289: PPUSH
11290: CALL_OW 251
11294: PUSH
11295: LD_VAR 0 2
11299: PUSH
11300: LD_INT 0
11302: PUSH
11303: LD_INT 0
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: PPUSH
11321: CALL_OW 446
11325: GO 11249
11327: POP
11328: POP
// end ;
11329: LD_VAR 0 3
11333: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11334: LD_INT 0
11336: PPUSH
11337: PPUSH
11338: PPUSH
11339: PPUSH
11340: PPUSH
11341: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11342: LD_VAR 0 1
11346: NOT
11347: PUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 263
11357: PUSH
11358: LD_INT 2
11360: NONEQUAL
11361: OR
11362: IFFALSE 11366
// exit ;
11364: GO 11682
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11366: LD_ADDR_VAR 0 6
11370: PUSH
11371: LD_INT 22
11373: PUSH
11374: LD_VAR 0 1
11378: PPUSH
11379: CALL_OW 255
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: LD_INT 30
11393: PUSH
11394: LD_INT 36
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 34
11403: PUSH
11404: LD_INT 31
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 69
11424: ST_TO_ADDR
// if not tmp then
11425: LD_VAR 0 6
11429: NOT
11430: IFFALSE 11434
// exit ;
11432: GO 11682
// result := [ ] ;
11434: LD_ADDR_VAR 0 2
11438: PUSH
11439: EMPTY
11440: ST_TO_ADDR
// for i in tmp do
11441: LD_ADDR_VAR 0 3
11445: PUSH
11446: LD_VAR 0 6
11450: PUSH
11451: FOR_IN
11452: IFFALSE 11523
// begin t := UnitsInside ( i ) ;
11454: LD_ADDR_VAR 0 4
11458: PUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: CALL_OW 313
11468: ST_TO_ADDR
// if t then
11469: LD_VAR 0 4
11473: IFFALSE 11521
// for j in t do
11475: LD_ADDR_VAR 0 7
11479: PUSH
11480: LD_VAR 0 4
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11519
// result := Replace ( result , result + 1 , j ) ;
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: LD_VAR 0 2
11497: PPUSH
11498: LD_VAR 0 2
11502: PUSH
11503: LD_INT 1
11505: PLUS
11506: PPUSH
11507: LD_VAR 0 7
11511: PPUSH
11512: CALL_OW 1
11516: ST_TO_ADDR
11517: GO 11485
11519: POP
11520: POP
// end ;
11521: GO 11451
11523: POP
11524: POP
// if not result then
11525: LD_VAR 0 2
11529: NOT
11530: IFFALSE 11534
// exit ;
11532: GO 11682
// mech := result [ 1 ] ;
11534: LD_ADDR_VAR 0 5
11538: PUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_INT 1
11546: ARRAY
11547: ST_TO_ADDR
// if result > 1 then
11548: LD_VAR 0 2
11552: PUSH
11553: LD_INT 1
11555: GREATER
11556: IFFALSE 11668
// begin for i = 2 to result do
11558: LD_ADDR_VAR 0 3
11562: PUSH
11563: DOUBLE
11564: LD_INT 2
11566: DEC
11567: ST_TO_ADDR
11568: LD_VAR 0 2
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11666
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11576: LD_ADDR_VAR 0 4
11580: PUSH
11581: LD_VAR 0 2
11585: PUSH
11586: LD_VAR 0 3
11590: ARRAY
11591: PPUSH
11592: LD_INT 3
11594: PPUSH
11595: CALL_OW 259
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 3
11609: ARRAY
11610: PPUSH
11611: CALL_OW 432
11615: MINUS
11616: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11617: LD_VAR 0 4
11621: PUSH
11622: LD_VAR 0 5
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 259
11634: PUSH
11635: LD_VAR 0 5
11639: PPUSH
11640: CALL_OW 432
11644: MINUS
11645: GREATEREQUAL
11646: IFFALSE 11664
// mech := result [ i ] ;
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_VAR 0 2
11657: PUSH
11658: LD_VAR 0 3
11662: ARRAY
11663: ST_TO_ADDR
// end ;
11664: GO 11573
11666: POP
11667: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11668: LD_VAR 0 1
11672: PPUSH
11673: LD_VAR 0 5
11677: PPUSH
11678: CALL_OW 135
// end ;
11682: LD_VAR 0 2
11686: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11687: LD_INT 0
11689: PPUSH
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
// result := [ ] ;
11702: LD_ADDR_VAR 0 7
11706: PUSH
11707: EMPTY
11708: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 266
11718: PUSH
11719: LD_INT 0
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: IN
11729: NOT
11730: IFFALSE 11734
// exit ;
11732: GO 13368
// if name then
11734: LD_VAR 0 3
11738: IFFALSE 11754
// SetBName ( base_dep , name ) ;
11740: LD_VAR 0 1
11744: PPUSH
11745: LD_VAR 0 3
11749: PPUSH
11750: CALL_OW 500
// base := GetBase ( base_dep ) ;
11754: LD_ADDR_VAR 0 15
11758: PUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 274
11768: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11769: LD_ADDR_VAR 0 16
11773: PUSH
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 255
11783: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11784: LD_ADDR_VAR 0 17
11788: PUSH
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 248
11798: ST_TO_ADDR
// if sources then
11799: LD_VAR 0 5
11803: IFFALSE 11850
// for i = 1 to 3 do
11805: LD_ADDR_VAR 0 8
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_INT 3
11817: PUSH
11818: FOR_TO
11819: IFFALSE 11848
// AddResourceType ( base , i , sources [ i ] ) ;
11821: LD_VAR 0 15
11825: PPUSH
11826: LD_VAR 0 8
11830: PPUSH
11831: LD_VAR 0 5
11835: PUSH
11836: LD_VAR 0 8
11840: ARRAY
11841: PPUSH
11842: CALL_OW 276
11846: GO 11818
11848: POP
11849: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11850: LD_ADDR_VAR 0 18
11854: PUSH
11855: LD_VAR 0 15
11859: PPUSH
11860: LD_VAR 0 2
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL 11111 0 3
11872: ST_TO_ADDR
// InitHc ;
11873: CALL_OW 19
// InitUc ;
11877: CALL_OW 18
// uc_side := side ;
11881: LD_ADDR_OWVAR 20
11885: PUSH
11886: LD_VAR 0 16
11890: ST_TO_ADDR
// uc_nation := nation ;
11891: LD_ADDR_OWVAR 21
11895: PUSH
11896: LD_VAR 0 17
11900: ST_TO_ADDR
// if buildings then
11901: LD_VAR 0 18
11905: IFFALSE 13227
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11907: LD_ADDR_VAR 0 19
11911: PUSH
11912: LD_VAR 0 18
11916: PPUSH
11917: LD_INT 2
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 29
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 30
11932: PUSH
11933: LD_INT 30
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 72
11949: ST_TO_ADDR
// if tmp then
11950: LD_VAR 0 19
11954: IFFALSE 12002
// for i in tmp do
11956: LD_ADDR_VAR 0 8
11960: PUSH
11961: LD_VAR 0 19
11965: PUSH
11966: FOR_IN
11967: IFFALSE 12000
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11969: LD_VAR 0 8
11973: PPUSH
11974: CALL_OW 250
11978: PPUSH
11979: LD_VAR 0 8
11983: PPUSH
11984: CALL_OW 251
11988: PPUSH
11989: LD_VAR 0 16
11993: PPUSH
11994: CALL_OW 441
11998: GO 11966
12000: POP
12001: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12002: LD_VAR 0 18
12006: PPUSH
12007: LD_INT 2
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 32
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 30
12022: PUSH
12023: LD_INT 33
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: PPUSH
12035: CALL_OW 72
12039: IFFALSE 12127
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12041: LD_ADDR_VAR 0 8
12045: PUSH
12046: LD_VAR 0 18
12050: PPUSH
12051: LD_INT 2
12053: PUSH
12054: LD_INT 30
12056: PUSH
12057: LD_INT 32
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 30
12066: PUSH
12067: LD_INT 33
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 72
12083: PUSH
12084: FOR_IN
12085: IFFALSE 12125
// begin if not GetBWeapon ( i ) then
12087: LD_VAR 0 8
12091: PPUSH
12092: CALL_OW 269
12096: NOT
12097: IFFALSE 12123
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12099: LD_VAR 0 8
12103: PPUSH
12104: LD_VAR 0 8
12108: PPUSH
12109: LD_VAR 0 2
12113: PPUSH
12114: CALL 13373 0 2
12118: PPUSH
12119: CALL_OW 431
// end ;
12123: GO 12084
12125: POP
12126: POP
// end ; for i = 1 to personel do
12127: LD_ADDR_VAR 0 8
12131: PUSH
12132: DOUBLE
12133: LD_INT 1
12135: DEC
12136: ST_TO_ADDR
12137: LD_VAR 0 6
12141: PUSH
12142: FOR_TO
12143: IFFALSE 13207
// begin if i > 4 then
12145: LD_VAR 0 8
12149: PUSH
12150: LD_INT 4
12152: GREATER
12153: IFFALSE 12157
// break ;
12155: GO 13207
// case i of 1 :
12157: LD_VAR 0 8
12161: PUSH
12162: LD_INT 1
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12250
12170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12171: LD_ADDR_VAR 0 12
12175: PUSH
12176: LD_VAR 0 18
12180: PPUSH
12181: LD_INT 22
12183: PUSH
12184: LD_VAR 0 16
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 58
12195: PUSH
12196: EMPTY
12197: LIST
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 32
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 30
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 30
12224: PUSH
12225: LD_INT 5
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 72
12247: ST_TO_ADDR
12248: GO 12472
12250: LD_INT 2
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12320
12258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12259: LD_ADDR_VAR 0 12
12263: PUSH
12264: LD_VAR 0 18
12268: PPUSH
12269: LD_INT 22
12271: PUSH
12272: LD_VAR 0 16
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 0
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 72
12317: ST_TO_ADDR
12318: GO 12472
12320: LD_INT 3
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12390
12328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12329: LD_ADDR_VAR 0 12
12333: PUSH
12334: LD_VAR 0 18
12338: PPUSH
12339: LD_INT 22
12341: PUSH
12342: LD_VAR 0 16
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: LD_INT 30
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: ST_TO_ADDR
12388: GO 12472
12390: LD_INT 4
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12471
12398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12399: LD_ADDR_VAR 0 12
12403: PUSH
12404: LD_VAR 0 18
12408: PPUSH
12409: LD_INT 22
12411: PUSH
12412: LD_VAR 0 16
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 30
12426: PUSH
12427: LD_INT 6
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 30
12436: PUSH
12437: LD_INT 7
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 30
12446: PUSH
12447: LD_INT 8
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 72
12468: ST_TO_ADDR
12469: GO 12472
12471: POP
// if i = 1 then
12472: LD_VAR 0 8
12476: PUSH
12477: LD_INT 1
12479: EQUAL
12480: IFFALSE 12591
// begin tmp := [ ] ;
12482: LD_ADDR_VAR 0 19
12486: PUSH
12487: EMPTY
12488: ST_TO_ADDR
// for j in f do
12489: LD_ADDR_VAR 0 9
12493: PUSH
12494: LD_VAR 0 12
12498: PUSH
12499: FOR_IN
12500: IFFALSE 12573
// if GetBType ( j ) = b_bunker then
12502: LD_VAR 0 9
12506: PPUSH
12507: CALL_OW 266
12511: PUSH
12512: LD_INT 32
12514: EQUAL
12515: IFFALSE 12542
// tmp := Insert ( tmp , 1 , j ) else
12517: LD_ADDR_VAR 0 19
12521: PUSH
12522: LD_VAR 0 19
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_VAR 0 9
12534: PPUSH
12535: CALL_OW 2
12539: ST_TO_ADDR
12540: GO 12571
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12542: LD_ADDR_VAR 0 19
12546: PUSH
12547: LD_VAR 0 19
12551: PPUSH
12552: LD_VAR 0 19
12556: PUSH
12557: LD_INT 1
12559: PLUS
12560: PPUSH
12561: LD_VAR 0 9
12565: PPUSH
12566: CALL_OW 2
12570: ST_TO_ADDR
12571: GO 12499
12573: POP
12574: POP
// if tmp then
12575: LD_VAR 0 19
12579: IFFALSE 12591
// f := tmp ;
12581: LD_ADDR_VAR 0 12
12585: PUSH
12586: LD_VAR 0 19
12590: ST_TO_ADDR
// end ; x := personel [ i ] ;
12591: LD_ADDR_VAR 0 13
12595: PUSH
12596: LD_VAR 0 6
12600: PUSH
12601: LD_VAR 0 8
12605: ARRAY
12606: ST_TO_ADDR
// if x = - 1 then
12607: LD_VAR 0 13
12611: PUSH
12612: LD_INT 1
12614: NEG
12615: EQUAL
12616: IFFALSE 12825
// begin for j in f do
12618: LD_ADDR_VAR 0 9
12622: PUSH
12623: LD_VAR 0 12
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12821
// repeat InitHc ;
12631: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12635: LD_VAR 0 9
12639: PPUSH
12640: CALL_OW 266
12644: PUSH
12645: LD_INT 5
12647: EQUAL
12648: IFFALSE 12718
// begin if UnitsInside ( j ) < 3 then
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 313
12659: PUSH
12660: LD_INT 3
12662: LESS
12663: IFFALSE 12699
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12665: LD_INT 0
12667: PPUSH
12668: LD_INT 5
12670: PUSH
12671: LD_INT 8
12673: PUSH
12674: LD_INT 9
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: PUSH
12682: LD_VAR 0 17
12686: ARRAY
12687: PPUSH
12688: LD_VAR 0 4
12692: PPUSH
12693: CALL_OW 380
12697: GO 12716
// PrepareHuman ( false , i , skill ) ;
12699: LD_INT 0
12701: PPUSH
12702: LD_VAR 0 8
12706: PPUSH
12707: LD_VAR 0 4
12711: PPUSH
12712: CALL_OW 380
// end else
12716: GO 12735
// PrepareHuman ( false , i , skill ) ;
12718: LD_INT 0
12720: PPUSH
12721: LD_VAR 0 8
12725: PPUSH
12726: LD_VAR 0 4
12730: PPUSH
12731: CALL_OW 380
// un := CreateHuman ;
12735: LD_ADDR_VAR 0 14
12739: PUSH
12740: CALL_OW 44
12744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12745: LD_ADDR_VAR 0 7
12749: PUSH
12750: LD_VAR 0 7
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: LD_VAR 0 14
12762: PPUSH
12763: CALL_OW 2
12767: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12768: LD_VAR 0 14
12772: PPUSH
12773: LD_VAR 0 9
12777: PPUSH
12778: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12782: LD_VAR 0 9
12786: PPUSH
12787: CALL_OW 313
12791: PUSH
12792: LD_INT 6
12794: EQUAL
12795: PUSH
12796: LD_VAR 0 9
12800: PPUSH
12801: CALL_OW 266
12805: PUSH
12806: LD_INT 32
12808: PUSH
12809: LD_INT 31
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: IN
12816: OR
12817: IFFALSE 12631
12819: GO 12628
12821: POP
12822: POP
// end else
12823: GO 13205
// for j = 1 to x do
12825: LD_ADDR_VAR 0 9
12829: PUSH
12830: DOUBLE
12831: LD_INT 1
12833: DEC
12834: ST_TO_ADDR
12835: LD_VAR 0 13
12839: PUSH
12840: FOR_TO
12841: IFFALSE 13203
// begin InitHc ;
12843: CALL_OW 19
// if not f then
12847: LD_VAR 0 12
12851: NOT
12852: IFFALSE 12941
// begin PrepareHuman ( false , i , skill ) ;
12854: LD_INT 0
12856: PPUSH
12857: LD_VAR 0 8
12861: PPUSH
12862: LD_VAR 0 4
12866: PPUSH
12867: CALL_OW 380
// un := CreateHuman ;
12871: LD_ADDR_VAR 0 14
12875: PUSH
12876: CALL_OW 44
12880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12881: LD_ADDR_VAR 0 7
12885: PUSH
12886: LD_VAR 0 7
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: LD_VAR 0 14
12898: PPUSH
12899: CALL_OW 2
12903: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12904: LD_VAR 0 14
12908: PPUSH
12909: LD_VAR 0 1
12913: PPUSH
12914: CALL_OW 250
12918: PPUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 251
12928: PPUSH
12929: LD_INT 10
12931: PPUSH
12932: LD_INT 0
12934: PPUSH
12935: CALL_OW 50
// continue ;
12939: GO 12840
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12941: LD_VAR 0 12
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: CALL_OW 313
12954: PUSH
12955: LD_VAR 0 12
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: CALL_OW 266
12968: PUSH
12969: LD_INT 32
12971: PUSH
12972: LD_INT 31
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: IN
12979: AND
12980: PUSH
12981: LD_VAR 0 12
12985: PUSH
12986: LD_INT 1
12988: ARRAY
12989: PPUSH
12990: CALL_OW 313
12994: PUSH
12995: LD_INT 6
12997: EQUAL
12998: OR
12999: IFFALSE 13019
// f := Delete ( f , 1 ) ;
13001: LD_ADDR_VAR 0 12
13005: PUSH
13006: LD_VAR 0 12
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 3
13018: ST_TO_ADDR
// if not f then
13019: LD_VAR 0 12
13023: NOT
13024: IFFALSE 13042
// begin x := x + 2 ;
13026: LD_ADDR_VAR 0 13
13030: PUSH
13031: LD_VAR 0 13
13035: PUSH
13036: LD_INT 2
13038: PLUS
13039: ST_TO_ADDR
// continue ;
13040: GO 12840
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13042: LD_VAR 0 12
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: PPUSH
13051: CALL_OW 266
13055: PUSH
13056: LD_INT 5
13058: EQUAL
13059: IFFALSE 13133
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13061: LD_VAR 0 12
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: CALL_OW 313
13074: PUSH
13075: LD_INT 3
13077: LESS
13078: IFFALSE 13114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13080: LD_INT 0
13082: PPUSH
13083: LD_INT 5
13085: PUSH
13086: LD_INT 8
13088: PUSH
13089: LD_INT 9
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: LD_VAR 0 17
13101: ARRAY
13102: PPUSH
13103: LD_VAR 0 4
13107: PPUSH
13108: CALL_OW 380
13112: GO 13131
// PrepareHuman ( false , i , skill ) ;
13114: LD_INT 0
13116: PPUSH
13117: LD_VAR 0 8
13121: PPUSH
13122: LD_VAR 0 4
13126: PPUSH
13127: CALL_OW 380
// end else
13131: GO 13150
// PrepareHuman ( false , i , skill ) ;
13133: LD_INT 0
13135: PPUSH
13136: LD_VAR 0 8
13140: PPUSH
13141: LD_VAR 0 4
13145: PPUSH
13146: CALL_OW 380
// un := CreateHuman ;
13150: LD_ADDR_VAR 0 14
13154: PUSH
13155: CALL_OW 44
13159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13160: LD_ADDR_VAR 0 7
13164: PUSH
13165: LD_VAR 0 7
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: LD_VAR 0 14
13177: PPUSH
13178: CALL_OW 2
13182: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13183: LD_VAR 0 14
13187: PPUSH
13188: LD_VAR 0 12
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 52
// end ;
13201: GO 12840
13203: POP
13204: POP
// end ;
13205: GO 12142
13207: POP
13208: POP
// result := result ^ buildings ;
13209: LD_ADDR_VAR 0 7
13213: PUSH
13214: LD_VAR 0 7
13218: PUSH
13219: LD_VAR 0 18
13223: ADD
13224: ST_TO_ADDR
// end else
13225: GO 13368
// begin for i = 1 to personel do
13227: LD_ADDR_VAR 0 8
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_VAR 0 6
13241: PUSH
13242: FOR_TO
13243: IFFALSE 13366
// begin if i > 4 then
13245: LD_VAR 0 8
13249: PUSH
13250: LD_INT 4
13252: GREATER
13253: IFFALSE 13257
// break ;
13255: GO 13366
// x := personel [ i ] ;
13257: LD_ADDR_VAR 0 13
13261: PUSH
13262: LD_VAR 0 6
13266: PUSH
13267: LD_VAR 0 8
13271: ARRAY
13272: ST_TO_ADDR
// if x = - 1 then
13273: LD_VAR 0 13
13277: PUSH
13278: LD_INT 1
13280: NEG
13281: EQUAL
13282: IFFALSE 13286
// continue ;
13284: GO 13242
// PrepareHuman ( false , i , skill ) ;
13286: LD_INT 0
13288: PPUSH
13289: LD_VAR 0 8
13293: PPUSH
13294: LD_VAR 0 4
13298: PPUSH
13299: CALL_OW 380
// un := CreateHuman ;
13303: LD_ADDR_VAR 0 14
13307: PUSH
13308: CALL_OW 44
13312: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13313: LD_VAR 0 14
13317: PPUSH
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 250
13327: PPUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 251
13337: PPUSH
13338: LD_INT 10
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 50
// result := result ^ un ;
13348: LD_ADDR_VAR 0 7
13352: PUSH
13353: LD_VAR 0 7
13357: PUSH
13358: LD_VAR 0 14
13362: ADD
13363: ST_TO_ADDR
// end ;
13364: GO 13242
13366: POP
13367: POP
// end ; end ;
13368: LD_VAR 0 7
13372: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
13386: PPUSH
13387: PPUSH
13388: PPUSH
13389: PPUSH
13390: PPUSH
// result := false ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_INT 0
13398: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13399: LD_VAR 0 1
13403: NOT
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 266
13414: PUSH
13415: LD_INT 32
13417: PUSH
13418: LD_INT 33
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: IN
13425: NOT
13426: OR
13427: IFFALSE 13431
// exit ;
13429: GO 14540
// nat := GetNation ( tower ) ;
13431: LD_ADDR_VAR 0 12
13435: PUSH
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 248
13445: ST_TO_ADDR
// side := GetSide ( tower ) ;
13446: LD_ADDR_VAR 0 16
13450: PUSH
13451: LD_VAR 0 1
13455: PPUSH
13456: CALL_OW 255
13460: ST_TO_ADDR
// x := GetX ( tower ) ;
13461: LD_ADDR_VAR 0 10
13465: PUSH
13466: LD_VAR 0 1
13470: PPUSH
13471: CALL_OW 250
13475: ST_TO_ADDR
// y := GetY ( tower ) ;
13476: LD_ADDR_VAR 0 11
13480: PUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 251
13490: ST_TO_ADDR
// if not x or not y then
13491: LD_VAR 0 10
13495: NOT
13496: PUSH
13497: LD_VAR 0 11
13501: NOT
13502: OR
13503: IFFALSE 13507
// exit ;
13505: GO 14540
// weapon := 0 ;
13507: LD_ADDR_VAR 0 18
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// fac_list := [ ] ;
13515: LD_ADDR_VAR 0 17
13519: PUSH
13520: EMPTY
13521: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13522: LD_ADDR_VAR 0 6
13526: PUSH
13527: LD_VAR 0 1
13531: PPUSH
13532: CALL_OW 274
13536: PPUSH
13537: LD_VAR 0 2
13541: PPUSH
13542: LD_INT 0
13544: PPUSH
13545: CALL 11111 0 3
13549: PPUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 72
13564: ST_TO_ADDR
// if not factories then
13565: LD_VAR 0 6
13569: NOT
13570: IFFALSE 13574
// exit ;
13572: GO 14540
// for i in factories do
13574: LD_ADDR_VAR 0 8
13578: PUSH
13579: LD_VAR 0 6
13583: PUSH
13584: FOR_IN
13585: IFFALSE 13610
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13587: LD_ADDR_VAR 0 17
13591: PUSH
13592: LD_VAR 0 17
13596: PUSH
13597: LD_VAR 0 8
13601: PPUSH
13602: CALL_OW 478
13606: UNION
13607: ST_TO_ADDR
13608: GO 13584
13610: POP
13611: POP
// if not fac_list then
13612: LD_VAR 0 17
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 14540
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13621: LD_ADDR_VAR 0 5
13625: PUSH
13626: LD_INT 4
13628: PUSH
13629: LD_INT 5
13631: PUSH
13632: LD_INT 9
13634: PUSH
13635: LD_INT 10
13637: PUSH
13638: LD_INT 6
13640: PUSH
13641: LD_INT 7
13643: PUSH
13644: LD_INT 11
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 27
13658: PUSH
13659: LD_INT 28
13661: PUSH
13662: LD_INT 26
13664: PUSH
13665: LD_INT 30
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 43
13676: PUSH
13677: LD_INT 44
13679: PUSH
13680: LD_INT 46
13682: PUSH
13683: LD_INT 45
13685: PUSH
13686: LD_INT 47
13688: PUSH
13689: LD_INT 49
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: PUSH
13705: LD_VAR 0 12
13709: ARRAY
13710: ST_TO_ADDR
// list := list isect fac_list ;
13711: LD_ADDR_VAR 0 5
13715: PUSH
13716: LD_VAR 0 5
13720: PUSH
13721: LD_VAR 0 17
13725: ISECT
13726: ST_TO_ADDR
// if not list then
13727: LD_VAR 0 5
13731: NOT
13732: IFFALSE 13736
// exit ;
13734: GO 14540
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13736: LD_VAR 0 12
13740: PUSH
13741: LD_INT 3
13743: EQUAL
13744: PUSH
13745: LD_INT 49
13747: PUSH
13748: LD_VAR 0 5
13752: IN
13753: AND
13754: PUSH
13755: LD_INT 31
13757: PPUSH
13758: LD_VAR 0 16
13762: PPUSH
13763: CALL_OW 321
13767: PUSH
13768: LD_INT 2
13770: EQUAL
13771: AND
13772: IFFALSE 13832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13774: LD_INT 22
13776: PUSH
13777: LD_VAR 0 16
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 35
13788: PUSH
13789: LD_INT 49
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 91
13798: PUSH
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 10
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: NOT
13822: IFFALSE 13832
// weapon := ru_time_lapser ;
13824: LD_ADDR_VAR 0 18
13828: PUSH
13829: LD_INT 49
13831: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13832: LD_VAR 0 12
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: IN
13847: PUSH
13848: LD_INT 11
13850: PUSH
13851: LD_VAR 0 5
13855: IN
13856: PUSH
13857: LD_INT 30
13859: PUSH
13860: LD_VAR 0 5
13864: IN
13865: OR
13866: AND
13867: PUSH
13868: LD_INT 6
13870: PPUSH
13871: LD_VAR 0 16
13875: PPUSH
13876: CALL_OW 321
13880: PUSH
13881: LD_INT 2
13883: EQUAL
13884: AND
13885: IFFALSE 14050
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13887: LD_INT 22
13889: PUSH
13890: LD_VAR 0 16
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: LD_INT 35
13904: PUSH
13905: LD_INT 11
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 35
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 91
13929: PUSH
13930: LD_VAR 0 1
13934: PUSH
13935: LD_INT 18
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 69
13952: NOT
13953: PUSH
13954: LD_INT 22
13956: PUSH
13957: LD_VAR 0 16
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 33
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 91
13996: PUSH
13997: LD_VAR 0 1
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: PPUSH
14018: CALL_OW 69
14022: PUSH
14023: LD_INT 2
14025: GREATER
14026: AND
14027: IFFALSE 14050
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14029: LD_ADDR_VAR 0 18
14033: PUSH
14034: LD_INT 11
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_VAR 0 12
14048: ARRAY
14049: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14050: LD_VAR 0 18
14054: NOT
14055: PUSH
14056: LD_INT 40
14058: PPUSH
14059: LD_VAR 0 16
14063: PPUSH
14064: CALL_OW 321
14068: PUSH
14069: LD_INT 2
14071: EQUAL
14072: AND
14073: PUSH
14074: LD_INT 7
14076: PUSH
14077: LD_VAR 0 5
14081: IN
14082: PUSH
14083: LD_INT 28
14085: PUSH
14086: LD_VAR 0 5
14090: IN
14091: OR
14092: PUSH
14093: LD_INT 45
14095: PUSH
14096: LD_VAR 0 5
14100: IN
14101: OR
14102: AND
14103: IFFALSE 14357
// begin hex := GetHexInfo ( x , y ) ;
14105: LD_ADDR_VAR 0 4
14109: PUSH
14110: LD_VAR 0 10
14114: PPUSH
14115: LD_VAR 0 11
14119: PPUSH
14120: CALL_OW 546
14124: ST_TO_ADDR
// if hex [ 1 ] then
14125: LD_VAR 0 4
14129: PUSH
14130: LD_INT 1
14132: ARRAY
14133: IFFALSE 14137
// exit ;
14135: GO 14540
// height := hex [ 2 ] ;
14137: LD_ADDR_VAR 0 15
14141: PUSH
14142: LD_VAR 0 4
14146: PUSH
14147: LD_INT 2
14149: ARRAY
14150: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14151: LD_ADDR_VAR 0 14
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: LD_INT 5
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// for i in tmp do
14174: LD_ADDR_VAR 0 8
14178: PUSH
14179: LD_VAR 0 14
14183: PUSH
14184: FOR_IN
14185: IFFALSE 14355
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14187: LD_ADDR_VAR 0 9
14191: PUSH
14192: LD_VAR 0 10
14196: PPUSH
14197: LD_VAR 0 8
14201: PPUSH
14202: LD_INT 5
14204: PPUSH
14205: CALL_OW 272
14209: PUSH
14210: LD_VAR 0 11
14214: PPUSH
14215: LD_VAR 0 8
14219: PPUSH
14220: LD_INT 5
14222: PPUSH
14223: CALL_OW 273
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14232: LD_VAR 0 9
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: LD_VAR 0 9
14245: PUSH
14246: LD_INT 2
14248: ARRAY
14249: PPUSH
14250: CALL_OW 488
14254: IFFALSE 14353
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14256: LD_ADDR_VAR 0 4
14260: PUSH
14261: LD_VAR 0 9
14265: PUSH
14266: LD_INT 1
14268: ARRAY
14269: PPUSH
14270: LD_VAR 0 9
14274: PUSH
14275: LD_INT 2
14277: ARRAY
14278: PPUSH
14279: CALL_OW 546
14283: ST_TO_ADDR
// if hex [ 1 ] then
14284: LD_VAR 0 4
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: IFFALSE 14296
// continue ;
14294: GO 14184
// h := hex [ 2 ] ;
14296: LD_ADDR_VAR 0 13
14300: PUSH
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: ST_TO_ADDR
// if h + 7 < height then
14310: LD_VAR 0 13
14314: PUSH
14315: LD_INT 7
14317: PLUS
14318: PUSH
14319: LD_VAR 0 15
14323: LESS
14324: IFFALSE 14353
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14326: LD_ADDR_VAR 0 18
14330: PUSH
14331: LD_INT 7
14333: PUSH
14334: LD_INT 28
14336: PUSH
14337: LD_INT 45
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_VAR 0 12
14349: ARRAY
14350: ST_TO_ADDR
// break ;
14351: GO 14355
// end ; end ; end ;
14353: GO 14184
14355: POP
14356: POP
// end ; if not weapon then
14357: LD_VAR 0 18
14361: NOT
14362: IFFALSE 14422
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14364: LD_ADDR_VAR 0 5
14368: PUSH
14369: LD_VAR 0 5
14373: PUSH
14374: LD_INT 11
14376: PUSH
14377: LD_INT 30
14379: PUSH
14380: LD_INT 49
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: DIFF
14388: ST_TO_ADDR
// if not list then
14389: LD_VAR 0 5
14393: NOT
14394: IFFALSE 14398
// exit ;
14396: GO 14540
// weapon := list [ rand ( 1 , list ) ] ;
14398: LD_ADDR_VAR 0 18
14402: PUSH
14403: LD_VAR 0 5
14407: PUSH
14408: LD_INT 1
14410: PPUSH
14411: LD_VAR 0 5
14415: PPUSH
14416: CALL_OW 12
14420: ARRAY
14421: ST_TO_ADDR
// end ; if weapon then
14422: LD_VAR 0 18
14426: IFFALSE 14540
// begin tmp := CostOfWeapon ( weapon ) ;
14428: LD_ADDR_VAR 0 14
14432: PUSH
14433: LD_VAR 0 18
14437: PPUSH
14438: CALL_OW 451
14442: ST_TO_ADDR
// j := GetBase ( tower ) ;
14443: LD_ADDR_VAR 0 9
14447: PUSH
14448: LD_VAR 0 1
14452: PPUSH
14453: CALL_OW 274
14457: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14458: LD_VAR 0 9
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 275
14470: PUSH
14471: LD_VAR 0 14
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: GREATEREQUAL
14480: PUSH
14481: LD_VAR 0 9
14485: PPUSH
14486: LD_INT 2
14488: PPUSH
14489: CALL_OW 275
14493: PUSH
14494: LD_VAR 0 14
14498: PUSH
14499: LD_INT 2
14501: ARRAY
14502: GREATEREQUAL
14503: AND
14504: PUSH
14505: LD_VAR 0 9
14509: PPUSH
14510: LD_INT 3
14512: PPUSH
14513: CALL_OW 275
14517: PUSH
14518: LD_VAR 0 14
14522: PUSH
14523: LD_INT 3
14525: ARRAY
14526: GREATEREQUAL
14527: AND
14528: IFFALSE 14540
// result := weapon ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: LD_VAR 0 18
14539: ST_TO_ADDR
// end ; end ;
14540: LD_VAR 0 3
14544: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
// result := true ;
14549: LD_ADDR_VAR 0 3
14553: PUSH
14554: LD_INT 1
14556: ST_TO_ADDR
// if array1 = array2 then
14557: LD_VAR 0 1
14561: PUSH
14562: LD_VAR 0 2
14566: EQUAL
14567: IFFALSE 14627
// begin for i = 1 to array1 do
14569: LD_ADDR_VAR 0 4
14573: PUSH
14574: DOUBLE
14575: LD_INT 1
14577: DEC
14578: ST_TO_ADDR
14579: LD_VAR 0 1
14583: PUSH
14584: FOR_TO
14585: IFFALSE 14623
// if array1 [ i ] <> array2 [ i ] then
14587: LD_VAR 0 1
14591: PUSH
14592: LD_VAR 0 4
14596: ARRAY
14597: PUSH
14598: LD_VAR 0 2
14602: PUSH
14603: LD_VAR 0 4
14607: ARRAY
14608: NONEQUAL
14609: IFFALSE 14621
// begin result := false ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 0
14618: ST_TO_ADDR
// break ;
14619: GO 14623
// end ;
14621: GO 14584
14623: POP
14624: POP
// end else
14625: GO 14635
// result := false ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// end ;
14635: LD_VAR 0 3
14639: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
// if not array1 or not array2 then
14644: LD_VAR 0 1
14648: NOT
14649: PUSH
14650: LD_VAR 0 2
14654: NOT
14655: OR
14656: IFFALSE 14660
// exit ;
14658: GO 14724
// result := true ;
14660: LD_ADDR_VAR 0 3
14664: PUSH
14665: LD_INT 1
14667: ST_TO_ADDR
// for i = 1 to array1 do
14668: LD_ADDR_VAR 0 4
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_VAR 0 1
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14722
// if array1 [ i ] <> array2 [ i ] then
14686: LD_VAR 0 1
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_VAR 0 4
14706: ARRAY
14707: NONEQUAL
14708: IFFALSE 14720
// begin result := false ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: LD_INT 0
14717: ST_TO_ADDR
// break ;
14718: GO 14722
// end ;
14720: GO 14683
14722: POP
14723: POP
// end ;
14724: LD_VAR 0 3
14728: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
14733: PPUSH
// pom := GetBase ( fac ) ;
14734: LD_ADDR_VAR 0 5
14738: PUSH
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 274
14748: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 2
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PPUSH
14772: LD_VAR 0 2
14776: PUSH
14777: LD_INT 3
14779: ARRAY
14780: PPUSH
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 4
14788: ARRAY
14789: PPUSH
14790: CALL_OW 449
14794: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_VAR 0 5
14804: PPUSH
14805: LD_INT 1
14807: PPUSH
14808: CALL_OW 275
14812: PUSH
14813: LD_VAR 0 4
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: GREATEREQUAL
14822: PUSH
14823: LD_VAR 0 5
14827: PPUSH
14828: LD_INT 2
14830: PPUSH
14831: CALL_OW 275
14835: PUSH
14836: LD_VAR 0 4
14840: PUSH
14841: LD_INT 2
14843: ARRAY
14844: GREATEREQUAL
14845: AND
14846: PUSH
14847: LD_VAR 0 5
14851: PPUSH
14852: LD_INT 3
14854: PPUSH
14855: CALL_OW 275
14859: PUSH
14860: LD_VAR 0 4
14864: PUSH
14865: LD_INT 3
14867: ARRAY
14868: GREATEREQUAL
14869: AND
14870: ST_TO_ADDR
// end ;
14871: LD_VAR 0 3
14875: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
// pom := GetBase ( building ) ;
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 274
14896: ST_TO_ADDR
// if not pom then
14897: LD_VAR 0 3
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 15076
// btype := GetBType ( building ) ;
14906: LD_ADDR_VAR 0 5
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 266
14920: ST_TO_ADDR
// if btype = b_armoury then
14921: LD_VAR 0 5
14925: PUSH
14926: LD_INT 4
14928: EQUAL
14929: IFFALSE 14939
// btype := b_barracks ;
14931: LD_ADDR_VAR 0 5
14935: PUSH
14936: LD_INT 5
14938: ST_TO_ADDR
// if btype = b_depot then
14939: LD_VAR 0 5
14943: PUSH
14944: LD_INT 0
14946: EQUAL
14947: IFFALSE 14957
// btype := b_warehouse ;
14949: LD_ADDR_VAR 0 5
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// if btype = b_workshop then
14957: LD_VAR 0 5
14961: PUSH
14962: LD_INT 2
14964: EQUAL
14965: IFFALSE 14975
// btype := b_factory ;
14967: LD_ADDR_VAR 0 5
14971: PUSH
14972: LD_INT 3
14974: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14975: LD_ADDR_VAR 0 4
14979: PUSH
14980: LD_VAR 0 5
14984: PPUSH
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 248
14994: PPUSH
14995: CALL_OW 450
14999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_VAR 0 3
15009: PPUSH
15010: LD_INT 1
15012: PPUSH
15013: CALL_OW 275
15017: PUSH
15018: LD_VAR 0 4
15022: PUSH
15023: LD_INT 1
15025: ARRAY
15026: GREATEREQUAL
15027: PUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: LD_INT 2
15035: PPUSH
15036: CALL_OW 275
15040: PUSH
15041: LD_VAR 0 4
15045: PUSH
15046: LD_INT 2
15048: ARRAY
15049: GREATEREQUAL
15050: AND
15051: PUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 3
15059: PPUSH
15060: CALL_OW 275
15064: PUSH
15065: LD_VAR 0 4
15069: PUSH
15070: LD_INT 3
15072: ARRAY
15073: GREATEREQUAL
15074: AND
15075: ST_TO_ADDR
// end ;
15076: LD_VAR 0 2
15080: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
15085: PPUSH
// pom := GetBase ( building ) ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 274
15100: ST_TO_ADDR
// if not pom then
15101: LD_VAR 0 4
15105: NOT
15106: IFFALSE 15110
// exit ;
15108: GO 15211
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15110: LD_ADDR_VAR 0 5
15114: PUSH
15115: LD_VAR 0 2
15119: PPUSH
15120: LD_VAR 0 1
15124: PPUSH
15125: CALL_OW 248
15129: PPUSH
15130: CALL_OW 450
15134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15135: LD_ADDR_VAR 0 3
15139: PUSH
15140: LD_VAR 0 4
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 275
15152: PUSH
15153: LD_VAR 0 5
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: GREATEREQUAL
15162: PUSH
15163: LD_VAR 0 4
15167: PPUSH
15168: LD_INT 2
15170: PPUSH
15171: CALL_OW 275
15175: PUSH
15176: LD_VAR 0 5
15180: PUSH
15181: LD_INT 2
15183: ARRAY
15184: GREATEREQUAL
15185: AND
15186: PUSH
15187: LD_VAR 0 4
15191: PPUSH
15192: LD_INT 3
15194: PPUSH
15195: CALL_OW 275
15199: PUSH
15200: LD_VAR 0 5
15204: PUSH
15205: LD_INT 3
15207: ARRAY
15208: GREATEREQUAL
15209: AND
15210: ST_TO_ADDR
// end ;
15211: LD_VAR 0 3
15215: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15216: LD_INT 0
15218: PPUSH
15219: PPUSH
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
// result := false ;
15229: LD_ADDR_VAR 0 8
15233: PUSH
15234: LD_INT 0
15236: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15237: LD_VAR 0 5
15241: NOT
15242: PUSH
15243: LD_VAR 0 1
15247: NOT
15248: OR
15249: PUSH
15250: LD_VAR 0 2
15254: NOT
15255: OR
15256: PUSH
15257: LD_VAR 0 3
15261: NOT
15262: OR
15263: IFFALSE 15267
// exit ;
15265: GO 16081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15267: LD_ADDR_VAR 0 14
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_VAR 0 2
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_VAR 0 4
15291: PPUSH
15292: LD_VAR 0 5
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 248
15305: PPUSH
15306: LD_INT 0
15308: PPUSH
15309: CALL 17334 0 6
15313: ST_TO_ADDR
// if not hexes then
15314: LD_VAR 0 14
15318: NOT
15319: IFFALSE 15323
// exit ;
15321: GO 16081
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15323: LD_ADDR_VAR 0 17
15327: PUSH
15328: LD_VAR 0 5
15332: PPUSH
15333: LD_INT 22
15335: PUSH
15336: LD_VAR 0 13
15340: PPUSH
15341: CALL_OW 255
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 30
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: ST_TO_ADDR
// for i = 1 to hexes do
15387: LD_ADDR_VAR 0 9
15391: PUSH
15392: DOUBLE
15393: LD_INT 1
15395: DEC
15396: ST_TO_ADDR
15397: LD_VAR 0 14
15401: PUSH
15402: FOR_TO
15403: IFFALSE 16079
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15405: LD_ADDR_VAR 0 13
15409: PUSH
15410: LD_VAR 0 14
15414: PUSH
15415: LD_VAR 0 9
15419: ARRAY
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PPUSH
15425: LD_VAR 0 14
15429: PUSH
15430: LD_VAR 0 9
15434: ARRAY
15435: PUSH
15436: LD_INT 2
15438: ARRAY
15439: PPUSH
15440: CALL_OW 428
15444: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15445: LD_VAR 0 14
15449: PUSH
15450: LD_VAR 0 9
15454: ARRAY
15455: PUSH
15456: LD_INT 1
15458: ARRAY
15459: PPUSH
15460: LD_VAR 0 14
15464: PUSH
15465: LD_VAR 0 9
15469: ARRAY
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PPUSH
15475: CALL_OW 351
15479: PUSH
15480: LD_VAR 0 14
15484: PUSH
15485: LD_VAR 0 9
15489: ARRAY
15490: PUSH
15491: LD_INT 1
15493: ARRAY
15494: PPUSH
15495: LD_VAR 0 14
15499: PUSH
15500: LD_VAR 0 9
15504: ARRAY
15505: PUSH
15506: LD_INT 2
15508: ARRAY
15509: PPUSH
15510: CALL_OW 488
15514: NOT
15515: OR
15516: PUSH
15517: LD_VAR 0 13
15521: PPUSH
15522: CALL_OW 247
15526: PUSH
15527: LD_INT 3
15529: EQUAL
15530: OR
15531: IFFALSE 15537
// exit ;
15533: POP
15534: POP
15535: GO 16081
// if not tmp then
15537: LD_VAR 0 13
15541: NOT
15542: IFFALSE 15546
// continue ;
15544: GO 15402
// result := true ;
15546: LD_ADDR_VAR 0 8
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15554: LD_VAR 0 6
15558: PUSH
15559: LD_VAR 0 13
15563: PPUSH
15564: CALL_OW 247
15568: PUSH
15569: LD_INT 2
15571: EQUAL
15572: AND
15573: PUSH
15574: LD_VAR 0 13
15578: PPUSH
15579: CALL_OW 263
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: AND
15588: IFFALSE 15752
// begin if IsDrivenBy ( tmp ) then
15590: LD_VAR 0 13
15594: PPUSH
15595: CALL_OW 311
15599: IFFALSE 15603
// continue ;
15601: GO 15402
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15603: LD_VAR 0 6
15607: PPUSH
15608: LD_INT 3
15610: PUSH
15611: LD_INT 60
15613: PUSH
15614: EMPTY
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: LD_INT 55
15626: PUSH
15627: EMPTY
15628: LIST
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 72
15642: IFFALSE 15750
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15644: LD_ADDR_VAR 0 18
15648: PUSH
15649: LD_VAR 0 6
15653: PPUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 60
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 3
15669: PUSH
15670: LD_INT 55
15672: PUSH
15673: EMPTY
15674: LIST
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 72
15688: PUSH
15689: LD_INT 1
15691: ARRAY
15692: ST_TO_ADDR
// if IsInUnit ( driver ) then
15693: LD_VAR 0 18
15697: PPUSH
15698: CALL_OW 310
15702: IFFALSE 15713
// ComExit ( driver ) ;
15704: LD_VAR 0 18
15708: PPUSH
15709: CALL 41135 0 1
// AddComEnterUnit ( driver , tmp ) ;
15713: LD_VAR 0 18
15717: PPUSH
15718: LD_VAR 0 13
15722: PPUSH
15723: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15727: LD_VAR 0 18
15731: PPUSH
15732: LD_VAR 0 7
15736: PPUSH
15737: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15741: LD_VAR 0 18
15745: PPUSH
15746: CALL_OW 181
// end ; continue ;
15750: GO 15402
// end ; if not cleaners or not tmp in cleaners then
15752: LD_VAR 0 6
15756: NOT
15757: PUSH
15758: LD_VAR 0 13
15762: PUSH
15763: LD_VAR 0 6
15767: IN
15768: NOT
15769: OR
15770: IFFALSE 16077
// begin if dep then
15772: LD_VAR 0 17
15776: IFFALSE 15912
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15778: LD_ADDR_VAR 0 16
15782: PUSH
15783: LD_VAR 0 17
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PPUSH
15792: CALL_OW 250
15796: PPUSH
15797: LD_VAR 0 17
15801: PUSH
15802: LD_INT 1
15804: ARRAY
15805: PPUSH
15806: CALL_OW 254
15810: PPUSH
15811: LD_INT 5
15813: PPUSH
15814: CALL_OW 272
15818: PUSH
15819: LD_VAR 0 17
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 251
15832: PPUSH
15833: LD_VAR 0 17
15837: PUSH
15838: LD_INT 1
15840: ARRAY
15841: PPUSH
15842: CALL_OW 254
15846: PPUSH
15847: LD_INT 5
15849: PPUSH
15850: CALL_OW 273
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15859: LD_VAR 0 16
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: PPUSH
15868: LD_VAR 0 16
15872: PUSH
15873: LD_INT 2
15875: ARRAY
15876: PPUSH
15877: CALL_OW 488
15881: IFFALSE 15912
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15883: LD_VAR 0 13
15887: PPUSH
15888: LD_VAR 0 16
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_VAR 0 16
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: PPUSH
15906: CALL_OW 111
// continue ;
15910: GO 15402
// end ; end ; r := GetDir ( tmp ) ;
15912: LD_ADDR_VAR 0 15
15916: PUSH
15917: LD_VAR 0 13
15921: PPUSH
15922: CALL_OW 254
15926: ST_TO_ADDR
// if r = 5 then
15927: LD_VAR 0 15
15931: PUSH
15932: LD_INT 5
15934: EQUAL
15935: IFFALSE 15945
// r := 0 ;
15937: LD_ADDR_VAR 0 15
15941: PUSH
15942: LD_INT 0
15944: ST_TO_ADDR
// for j = r to 5 do
15945: LD_ADDR_VAR 0 10
15949: PUSH
15950: DOUBLE
15951: LD_VAR 0 15
15955: DEC
15956: ST_TO_ADDR
15957: LD_INT 5
15959: PUSH
15960: FOR_TO
15961: IFFALSE 16075
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15963: LD_ADDR_VAR 0 11
15967: PUSH
15968: LD_VAR 0 13
15972: PPUSH
15973: CALL_OW 250
15977: PPUSH
15978: LD_VAR 0 10
15982: PPUSH
15983: LD_INT 2
15985: PPUSH
15986: CALL_OW 272
15990: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15991: LD_ADDR_VAR 0 12
15995: PUSH
15996: LD_VAR 0 13
16000: PPUSH
16001: CALL_OW 251
16005: PPUSH
16006: LD_VAR 0 10
16010: PPUSH
16011: LD_INT 2
16013: PPUSH
16014: CALL_OW 273
16018: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16019: LD_VAR 0 11
16023: PPUSH
16024: LD_VAR 0 12
16028: PPUSH
16029: CALL_OW 488
16033: PUSH
16034: LD_VAR 0 11
16038: PPUSH
16039: LD_VAR 0 12
16043: PPUSH
16044: CALL_OW 428
16048: NOT
16049: AND
16050: IFFALSE 16073
// begin ComMoveXY ( tmp , _x , _y ) ;
16052: LD_VAR 0 13
16056: PPUSH
16057: LD_VAR 0 11
16061: PPUSH
16062: LD_VAR 0 12
16066: PPUSH
16067: CALL_OW 111
// break ;
16071: GO 16075
// end ; end ;
16073: GO 15960
16075: POP
16076: POP
// end ; end ;
16077: GO 15402
16079: POP
16080: POP
// end ;
16081: LD_VAR 0 8
16085: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16086: LD_INT 0
16088: PPUSH
// result := true ;
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16097: LD_VAR 0 2
16101: PUSH
16102: LD_INT 24
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16116
16108: LD_INT 33
16110: DOUBLE
16111: EQUAL
16112: IFTRUE 16116
16114: GO 16141
16116: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: LD_INT 32
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 321
16134: PUSH
16135: LD_INT 2
16137: EQUAL
16138: ST_TO_ADDR
16139: GO 16457
16141: LD_INT 20
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16174
16149: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 6
16157: PPUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 321
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: ST_TO_ADDR
16172: GO 16457
16174: LD_INT 22
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16188
16180: LD_INT 36
16182: DOUBLE
16183: EQUAL
16184: IFTRUE 16188
16186: GO 16213
16188: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16189: LD_ADDR_VAR 0 3
16193: PUSH
16194: LD_INT 15
16196: PPUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 321
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: ST_TO_ADDR
16211: GO 16457
16213: LD_INT 30
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16246
16221: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_INT 20
16229: PPUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 321
16239: PUSH
16240: LD_INT 2
16242: EQUAL
16243: ST_TO_ADDR
16244: GO 16457
16246: LD_INT 28
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16260
16252: LD_INT 21
16254: DOUBLE
16255: EQUAL
16256: IFTRUE 16260
16258: GO 16285
16260: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 21
16268: PPUSH
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 321
16278: PUSH
16279: LD_INT 2
16281: EQUAL
16282: ST_TO_ADDR
16283: GO 16457
16285: LD_INT 16
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16293
16291: GO 16318
16293: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16294: LD_ADDR_VAR 0 3
16298: PUSH
16299: LD_INT 84
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 321
16311: PUSH
16312: LD_INT 2
16314: EQUAL
16315: ST_TO_ADDR
16316: GO 16457
16318: LD_INT 19
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16332
16324: LD_INT 23
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16357
16332: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16333: LD_ADDR_VAR 0 3
16337: PUSH
16338: LD_INT 83
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 321
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: ST_TO_ADDR
16355: GO 16457
16357: LD_INT 17
16359: DOUBLE
16360: EQUAL
16361: IFTRUE 16365
16363: GO 16390
16365: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_INT 39
16373: PPUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 321
16383: PUSH
16384: LD_INT 2
16386: EQUAL
16387: ST_TO_ADDR
16388: GO 16457
16390: LD_INT 18
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16398
16396: GO 16423
16398: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16399: LD_ADDR_VAR 0 3
16403: PUSH
16404: LD_INT 40
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 321
16416: PUSH
16417: LD_INT 2
16419: EQUAL
16420: ST_TO_ADDR
16421: GO 16457
16423: LD_INT 27
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16456
16431: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_INT 35
16439: PPUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 321
16449: PUSH
16450: LD_INT 2
16452: EQUAL
16453: ST_TO_ADDR
16454: GO 16457
16456: POP
// end ;
16457: LD_VAR 0 3
16461: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
// result := false ;
16475: LD_ADDR_VAR 0 6
16479: PUSH
16480: LD_INT 0
16482: ST_TO_ADDR
// if btype = b_depot then
16483: LD_VAR 0 2
16487: PUSH
16488: LD_INT 0
16490: EQUAL
16491: IFFALSE 16503
// begin result := true ;
16493: LD_ADDR_VAR 0 6
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// exit ;
16501: GO 17329
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16503: LD_VAR 0 1
16507: NOT
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 266
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: IN
16529: NOT
16530: OR
16531: PUSH
16532: LD_VAR 0 2
16536: NOT
16537: OR
16538: PUSH
16539: LD_VAR 0 5
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: LD_INT 4
16558: PUSH
16559: LD_INT 5
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: IN
16570: NOT
16571: OR
16572: PUSH
16573: LD_VAR 0 3
16577: PPUSH
16578: LD_VAR 0 4
16582: PPUSH
16583: CALL_OW 488
16587: NOT
16588: OR
16589: IFFALSE 16593
// exit ;
16591: GO 17329
// side := GetSide ( depot ) ;
16593: LD_ADDR_VAR 0 9
16597: PUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 255
16607: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16608: LD_VAR 0 9
16612: PPUSH
16613: LD_VAR 0 2
16617: PPUSH
16618: CALL 16086 0 2
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 17329
// pom := GetBase ( depot ) ;
16627: LD_ADDR_VAR 0 10
16631: PUSH
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 274
16641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16642: LD_ADDR_VAR 0 11
16646: PUSH
16647: LD_VAR 0 2
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 248
16661: PPUSH
16662: CALL_OW 450
16666: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16667: LD_VAR 0 10
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 275
16679: PUSH
16680: LD_VAR 0 11
16684: PUSH
16685: LD_INT 1
16687: ARRAY
16688: GREATEREQUAL
16689: PUSH
16690: LD_VAR 0 10
16694: PPUSH
16695: LD_INT 2
16697: PPUSH
16698: CALL_OW 275
16702: PUSH
16703: LD_VAR 0 11
16707: PUSH
16708: LD_INT 2
16710: ARRAY
16711: GREATEREQUAL
16712: AND
16713: PUSH
16714: LD_VAR 0 10
16718: PPUSH
16719: LD_INT 3
16721: PPUSH
16722: CALL_OW 275
16726: PUSH
16727: LD_VAR 0 11
16731: PUSH
16732: LD_INT 3
16734: ARRAY
16735: GREATEREQUAL
16736: AND
16737: NOT
16738: IFFALSE 16742
// exit ;
16740: GO 17329
// if GetBType ( depot ) = b_depot then
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 266
16751: PUSH
16752: LD_INT 0
16754: EQUAL
16755: IFFALSE 16767
// dist := 28 else
16757: LD_ADDR_VAR 0 14
16761: PUSH
16762: LD_INT 28
16764: ST_TO_ADDR
16765: GO 16775
// dist := 36 ;
16767: LD_ADDR_VAR 0 14
16771: PUSH
16772: LD_INT 36
16774: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_VAR 0 4
16789: PPUSH
16790: CALL_OW 297
16794: PUSH
16795: LD_VAR 0 14
16799: GREATER
16800: IFFALSE 16804
// exit ;
16802: GO 17329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16804: LD_ADDR_VAR 0 12
16808: PUSH
16809: LD_VAR 0 2
16813: PPUSH
16814: LD_VAR 0 3
16818: PPUSH
16819: LD_VAR 0 4
16823: PPUSH
16824: LD_VAR 0 5
16828: PPUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 248
16838: PPUSH
16839: LD_INT 0
16841: PPUSH
16842: CALL 17334 0 6
16846: ST_TO_ADDR
// if not hexes then
16847: LD_VAR 0 12
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 17329
// hex := GetHexInfo ( x , y ) ;
16856: LD_ADDR_VAR 0 15
16860: PUSH
16861: LD_VAR 0 3
16865: PPUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: CALL_OW 546
16875: ST_TO_ADDR
// if hex [ 1 ] then
16876: LD_VAR 0 15
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: IFFALSE 16888
// exit ;
16886: GO 17329
// height := hex [ 2 ] ;
16888: LD_ADDR_VAR 0 13
16892: PUSH
16893: LD_VAR 0 15
16897: PUSH
16898: LD_INT 2
16900: ARRAY
16901: ST_TO_ADDR
// for i = 1 to hexes do
16902: LD_ADDR_VAR 0 7
16906: PUSH
16907: DOUBLE
16908: LD_INT 1
16910: DEC
16911: ST_TO_ADDR
16912: LD_VAR 0 12
16916: PUSH
16917: FOR_TO
16918: IFFALSE 17248
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16920: LD_VAR 0 12
16924: PUSH
16925: LD_VAR 0 7
16929: ARRAY
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 12
16939: PUSH
16940: LD_VAR 0 7
16944: ARRAY
16945: PUSH
16946: LD_INT 2
16948: ARRAY
16949: PPUSH
16950: CALL_OW 488
16954: NOT
16955: PUSH
16956: LD_VAR 0 12
16960: PUSH
16961: LD_VAR 0 7
16965: ARRAY
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_VAR 0 12
16975: PUSH
16976: LD_VAR 0 7
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 428
16990: PUSH
16991: LD_INT 0
16993: GREATER
16994: OR
16995: PUSH
16996: LD_VAR 0 12
17000: PUSH
17001: LD_VAR 0 7
17005: ARRAY
17006: PUSH
17007: LD_INT 1
17009: ARRAY
17010: PPUSH
17011: LD_VAR 0 12
17015: PUSH
17016: LD_VAR 0 7
17020: ARRAY
17021: PUSH
17022: LD_INT 2
17024: ARRAY
17025: PPUSH
17026: CALL_OW 351
17030: OR
17031: IFFALSE 17037
// exit ;
17033: POP
17034: POP
17035: GO 17329
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17037: LD_ADDR_VAR 0 8
17041: PUSH
17042: LD_VAR 0 12
17046: PUSH
17047: LD_VAR 0 7
17051: ARRAY
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PPUSH
17057: LD_VAR 0 12
17061: PUSH
17062: LD_VAR 0 7
17066: ARRAY
17067: PUSH
17068: LD_INT 2
17070: ARRAY
17071: PPUSH
17072: CALL_OW 546
17076: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17077: LD_VAR 0 8
17081: PUSH
17082: LD_INT 1
17084: ARRAY
17085: PUSH
17086: LD_VAR 0 8
17090: PUSH
17091: LD_INT 2
17093: ARRAY
17094: PUSH
17095: LD_VAR 0 13
17099: PUSH
17100: LD_INT 2
17102: PLUS
17103: GREATER
17104: OR
17105: PUSH
17106: LD_VAR 0 8
17110: PUSH
17111: LD_INT 2
17113: ARRAY
17114: PUSH
17115: LD_VAR 0 13
17119: PUSH
17120: LD_INT 2
17122: MINUS
17123: LESS
17124: OR
17125: PUSH
17126: LD_VAR 0 8
17130: PUSH
17131: LD_INT 3
17133: ARRAY
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: LD_INT 8
17140: PUSH
17141: LD_INT 9
17143: PUSH
17144: LD_INT 10
17146: PUSH
17147: LD_INT 11
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: LD_INT 13
17155: PUSH
17156: LD_INT 16
17158: PUSH
17159: LD_INT 17
17161: PUSH
17162: LD_INT 18
17164: PUSH
17165: LD_INT 19
17167: PUSH
17168: LD_INT 20
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: IN
17189: NOT
17190: OR
17191: PUSH
17192: LD_VAR 0 8
17196: PUSH
17197: LD_INT 5
17199: ARRAY
17200: NOT
17201: OR
17202: PUSH
17203: LD_VAR 0 8
17207: PUSH
17208: LD_INT 6
17210: ARRAY
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: LD_INT 7
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: LD_INT 10
17226: PUSH
17227: LD_INT 11
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: IN
17238: NOT
17239: OR
17240: IFFALSE 17246
// exit ;
17242: POP
17243: POP
17244: GO 17329
// end ;
17246: GO 16917
17248: POP
17249: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17250: LD_VAR 0 9
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: LD_VAR 0 4
17264: PPUSH
17265: LD_INT 20
17267: PPUSH
17268: CALL 9252 0 4
17272: PUSH
17273: LD_INT 4
17275: ARRAY
17276: IFFALSE 17280
// exit ;
17278: GO 17329
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17280: LD_VAR 0 2
17284: PUSH
17285: LD_INT 29
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: IN
17295: PUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: LD_VAR 0 9
17310: PPUSH
17311: CALL_OW 440
17315: NOT
17316: AND
17317: IFFALSE 17321
// exit ;
17319: GO 17329
// result := true ;
17321: LD_ADDR_VAR 0 6
17325: PUSH
17326: LD_INT 1
17328: ST_TO_ADDR
// end ;
17329: LD_VAR 0 6
17333: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17334: LD_INT 0
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
// result = [ ] ;
17394: LD_ADDR_VAR 0 7
17398: PUSH
17399: EMPTY
17400: ST_TO_ADDR
// temp_list = [ ] ;
17401: LD_ADDR_VAR 0 9
17405: PUSH
17406: EMPTY
17407: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17408: LD_VAR 0 4
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: LD_INT 1
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: LD_INT 4
17427: PUSH
17428: LD_INT 5
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: IN
17439: NOT
17440: PUSH
17441: LD_VAR 0 1
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: LD_INT 1
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: IN
17456: PUSH
17457: LD_VAR 0 5
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: LD_INT 2
17467: PUSH
17468: LD_INT 3
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: IN
17476: NOT
17477: AND
17478: OR
17479: IFFALSE 17483
// exit ;
17481: GO 35874
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17483: LD_VAR 0 1
17487: PUSH
17488: LD_INT 6
17490: PUSH
17491: LD_INT 7
17493: PUSH
17494: LD_INT 8
17496: PUSH
17497: LD_INT 13
17499: PUSH
17500: LD_INT 12
17502: PUSH
17503: LD_INT 15
17505: PUSH
17506: LD_INT 11
17508: PUSH
17509: LD_INT 14
17511: PUSH
17512: LD_INT 10
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: IN
17526: IFFALSE 17536
// btype = b_lab ;
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 6
17535: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17536: LD_VAR 0 6
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: IN
17555: NOT
17556: PUSH
17557: LD_VAR 0 1
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: LD_INT 6
17576: PUSH
17577: LD_INT 36
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: LD_INT 5
17585: PUSH
17586: LD_INT 31
17588: PUSH
17589: LD_INT 32
17591: PUSH
17592: LD_INT 33
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: IN
17608: NOT
17609: PUSH
17610: LD_VAR 0 6
17614: PUSH
17615: LD_INT 1
17617: EQUAL
17618: AND
17619: OR
17620: PUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 3
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: IN
17636: NOT
17637: PUSH
17638: LD_VAR 0 6
17642: PUSH
17643: LD_INT 2
17645: EQUAL
17646: AND
17647: OR
17648: IFFALSE 17658
// mode = 0 ;
17650: LD_ADDR_VAR 0 6
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// case mode of 0 :
17658: LD_VAR 0 6
17662: PUSH
17663: LD_INT 0
17665: DOUBLE
17666: EQUAL
17667: IFTRUE 17671
17669: GO 29124
17671: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17672: LD_ADDR_VAR 0 11
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: LD_INT 1
17692: NEG
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 1
17730: NEG
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: LD_INT 2
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: LD_INT 2
17768: NEG
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: LD_INT 1
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: LD_INT 3
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17865: LD_ADDR_VAR 0 12
17869: PUSH
17870: LD_INT 0
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 1
17938: NEG
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: NEG
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 2
18011: NEG
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 3
18022: NEG
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 3
18033: NEG
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18061: LD_ADDR_VAR 0 13
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: LD_INT 2
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: NEG
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 2
18196: NEG
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 2
18208: NEG
18209: PUSH
18210: LD_INT 3
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 3
18220: NEG
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 3
18232: NEG
18233: PUSH
18234: LD_INT 3
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18260: LD_ADDR_VAR 0 14
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 1
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: LD_INT 2
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: NEG
18407: PUSH
18408: LD_INT 3
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 3
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: LD_INT 2
18432: NEG
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18456: LD_ADDR_VAR 0 15
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: LD_INT 0
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 3
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18649: LD_ADDR_VAR 0 16
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: NEG
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 3
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 3
18806: PUSH
18807: LD_INT 3
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18842: LD_ADDR_VAR 0 17
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 2
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19072: LD_ADDR_VAR 0 18
19076: PUSH
19077: LD_INT 0
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: NEG
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 2
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 2
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: NEG
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: NEG
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 2
19271: NEG
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19302: LD_ADDR_VAR 0 19
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 2
19478: NEG
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: NEG
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19532: LD_ADDR_VAR 0 20
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: NEG
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: NEG
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 2
19731: NEG
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19762: LD_ADDR_VAR 0 21
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 2
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: NEG
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 2
19949: NEG
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19992: LD_ADDR_VAR 0 22
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 2
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20222: LD_ADDR_VAR 0 23
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: LD_INT 2
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 2
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 2
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: NEG
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: NEG
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: NEG
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 3
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: LD_INT 3
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20502: LD_ADDR_VAR 0 24
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 1
20522: NEG
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: NEG
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: LD_INT 2
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 2
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 3
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20778: LD_ADDR_VAR 0 25
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: NEG
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 2
20874: NEG
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 2
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: NEG
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: NEG
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: LD_INT 2
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 3
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21052: LD_ADDR_VAR 0 26
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: LD_INT 3
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: NEG
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21328: LD_ADDR_VAR 0 27
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 2
21424: NEG
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: LD_INT 2
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 2
21504: NEG
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: NEG
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: NEG
21528: PUSH
21529: LD_INT 2
21531: NEG
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 3
21561: NEG
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 3
21573: NEG
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21608: LD_ADDR_VAR 0 28
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 2
21819: NEG
21820: PUSH
21821: LD_INT 3
21823: NEG
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: LD_INT 3
21835: NEG
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 3
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 3
21855: NEG
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21890: LD_ADDR_VAR 0 29
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 0
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 2
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 2
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 3
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 3
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 3
22134: NEG
22135: PUSH
22136: LD_INT 2
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22169: LD_ADDR_VAR 0 30
22173: PUSH
22174: LD_INT 0
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: LD_INT 2
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: LD_INT 2
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: NEG
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: LD_INT 3
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: LD_INT 2
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 3
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 3
22412: NEG
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22447: LD_ADDR_VAR 0 31
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 2
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: NEG
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 3
22690: NEG
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22725: LD_ADDR_VAR 0 32
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 1
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: NEG
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: NEG
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: NEG
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23003: LD_ADDR_VAR 0 33
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 2
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 3
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 3
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 3
23247: NEG
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23282: LD_ADDR_VAR 0 34
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: LD_INT 1
23302: NEG
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: LD_INT 2
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: NEG
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: NEG
23474: PUSH
23475: LD_INT 3
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 3
23527: NEG
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23562: LD_ADDR_VAR 0 35
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: NEG
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23674: LD_ADDR_VAR 0 36
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23786: LD_ADDR_VAR 0 37
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23898: LD_ADDR_VAR 0 38
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24010: LD_ADDR_VAR 0 39
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 2
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24122: LD_ADDR_VAR 0 40
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: NEG
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24234: LD_ADDR_VAR 0 41
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 2
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: NEG
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: NEG
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 2
24412: NEG
24413: PUSH
24414: LD_INT 2
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: LD_INT 3
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 3
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 3
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 3
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: LD_INT 3
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 2
24497: NEG
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: NEG
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 3
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 3
24531: NEG
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 3
24543: NEG
24544: PUSH
24545: LD_INT 3
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24584: LD_ADDR_VAR 0 42
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: LD_INT 2
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: LD_INT 3
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 3
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 3
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 3
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 3
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 3
24881: NEG
24882: PUSH
24883: LD_INT 2
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 3
24893: NEG
24894: PUSH
24895: LD_INT 3
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24934: LD_ADDR_VAR 0 43
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 3
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 3
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 3
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25282: LD_ADDR_VAR 0 44
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 2
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: LD_INT 2
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: LD_INT 3
25476: NEG
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: NEG
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 3
25556: NEG
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 3
25567: NEG
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 3
25579: NEG
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 3
25591: NEG
25592: PUSH
25593: LD_INT 3
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25632: LD_ADDR_VAR 0 45
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 2
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 3
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 3
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: LD_INT 3
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 3
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 3
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 2
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 3
25929: NEG
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 3
25941: NEG
25942: PUSH
25943: LD_INT 3
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25982: LD_ADDR_VAR 0 46
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 2
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 3
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 3
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 3
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 3
26278: NEG
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 3
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26330: LD_ADDR_VAR 0 47
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26481: LD_ADDR_VAR 0 48
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26628: LD_ADDR_VAR 0 49
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26772: LD_ADDR_VAR 0 50
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26916: LD_ADDR_VAR 0 51
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: NEG
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27063: LD_ADDR_VAR 0 52
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27214: LD_ADDR_VAR 0 53
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27444: LD_ADDR_VAR 0 54
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27674: LD_ADDR_VAR 0 55
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27904: LD_ADDR_VAR 0 56
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28134: LD_ADDR_VAR 0 57
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 2
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 2
28230: NEG
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28364: LD_ADDR_VAR 0 58
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 2
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: NEG
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28594: LD_ADDR_VAR 0 59
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28682: LD_ADDR_VAR 0 60
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28770: LD_ADDR_VAR 0 61
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28858: LD_ADDR_VAR 0 62
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28946: LD_ADDR_VAR 0 63
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29034: LD_ADDR_VAR 0 64
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
// end ; 1 :
29122: GO 35019
29124: LD_INT 1
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 31755
29132: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 11
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 12
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 13
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 14
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 15
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 16
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29389: LD_ADDR_VAR 0 17
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 3
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 2
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29433: LD_ADDR_VAR 0 18
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29474: LD_ADDR_VAR 0 19
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29514: LD_ADDR_VAR 0 20
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 21
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29599: LD_ADDR_VAR 0 22
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29645: LD_ADDR_VAR 0 23
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 3
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 4
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 3
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29689: LD_ADDR_VAR 0 24
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 3
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 4
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29730: LD_ADDR_VAR 0 25
29734: PUSH
29735: LD_INT 3
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 3
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29770: LD_ADDR_VAR 0 26
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29811: LD_ADDR_VAR 0 27
29815: PUSH
29816: LD_INT 3
29818: NEG
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 4
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29855: LD_ADDR_VAR 0 28
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: LD_INT 3
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: LD_INT 4
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 4
29886: NEG
29887: PUSH
29888: LD_INT 3
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29901: LD_ADDR_VAR 0 29
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: LD_INT 4
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 4
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: LD_INT 3
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: LD_INT 5
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: LD_INT 5
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 4
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: LD_INT 6
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 6
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: LD_INT 5
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30056: LD_ADDR_VAR 0 30
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 4
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 5
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 5
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 5
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 6
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 6
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30199: LD_ADDR_VAR 0 31
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 4
30246: PUSH
30247: LD_INT 4
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: LD_INT 4
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: LD_INT 4
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 5
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 4
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 6
30296: PUSH
30297: LD_INT 5
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 6
30306: PUSH
30307: LD_INT 6
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 5
30316: PUSH
30317: LD_INT 6
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30338: LD_ADDR_VAR 0 32
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: LD_INT 5
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 4
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 6
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 6
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 5
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30481: LD_ADDR_VAR 0 33
30485: PUSH
30486: LD_INT 2
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: NEG
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 4
30533: NEG
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 4
30544: NEG
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 4
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 5
30567: NEG
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 5
30578: NEG
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 5
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 6
30601: NEG
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 6
30612: NEG
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30636: LD_ADDR_VAR 0 34
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 3
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: NEG
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 3
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: LD_INT 4
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 4
30691: NEG
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 4
30703: NEG
30704: PUSH
30705: LD_INT 4
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 4
30715: NEG
30716: PUSH
30717: LD_INT 5
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 5
30727: NEG
30728: PUSH
30729: LD_INT 4
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 5
30739: NEG
30740: PUSH
30741: LD_INT 5
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 5
30751: NEG
30752: PUSH
30753: LD_INT 6
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 6
30763: NEG
30764: PUSH
30765: LD_INT 5
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 6
30775: NEG
30776: PUSH
30777: LD_INT 6
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30799: LD_ADDR_VAR 0 41
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30843: LD_ADDR_VAR 0 42
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30884: LD_ADDR_VAR 0 43
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30924: LD_ADDR_VAR 0 44
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30965: LD_ADDR_VAR 0 45
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31009: LD_ADDR_VAR 0 46
31013: PUSH
31014: LD_INT 2
31016: NEG
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 3
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31055: LD_ADDR_VAR 0 47
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31088: LD_ADDR_VAR 0 48
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31119: LD_ADDR_VAR 0 49
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31148: LD_ADDR_VAR 0 50
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 3
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31177: LD_ADDR_VAR 0 51
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31208: LD_ADDR_VAR 0 52
31212: PUSH
31213: LD_INT 3
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31241: LD_ADDR_VAR 0 53
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31285: LD_ADDR_VAR 0 54
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31326: LD_ADDR_VAR 0 55
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 3
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: LD_INT 3
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31366: LD_ADDR_VAR 0 56
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31407: LD_ADDR_VAR 0 57
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31451: LD_ADDR_VAR 0 58
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 3
31470: NEG
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 3
31482: NEG
31483: PUSH
31484: LD_INT 3
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31497: LD_ADDR_VAR 0 59
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31541: LD_ADDR_VAR 0 60
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31582: LD_ADDR_VAR 0 61
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31622: LD_ADDR_VAR 0 62
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31663: LD_ADDR_VAR 0 63
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31707: LD_ADDR_VAR 0 64
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// end ; 2 :
31753: GO 35019
31755: LD_INT 2
31757: DOUBLE
31758: EQUAL
31759: IFTRUE 31763
31761: GO 35018
31763: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31764: LD_ADDR_VAR 0 29
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 5
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 5
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 4
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: LD_INT 2
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 5
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 4
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: LD_INT 4
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 4
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 4
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 4
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: LD_INT 5
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 4
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 5
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: NEG
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 3
32058: NEG
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 3
32092: NEG
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 4
32103: NEG
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 4
32114: NEG
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 4
32126: NEG
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 4
32149: NEG
32150: PUSH
32151: LD_INT 4
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 4
32161: NEG
32162: PUSH
32163: LD_INT 5
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: LD_INT 4
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: LD_INT 3
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 4
32197: NEG
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 5
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 5
32221: NEG
32222: PUSH
32223: LD_INT 5
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 3
32233: NEG
32234: PUSH
32235: LD_INT 5
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: NEG
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32302: LD_ADDR_VAR 0 30
32306: PUSH
32307: LD_INT 4
32309: PUSH
32310: LD_INT 4
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 4
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: LD_INT 4
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 5
32339: PUSH
32340: LD_INT 5
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: LD_INT 5
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: LD_INT 4
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: LD_INT 5
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 3
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 4
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 4
32492: NEG
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 4
32503: NEG
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 4
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 5
32548: NEG
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 5
32559: NEG
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 5
32571: NEG
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 3
32583: NEG
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: LD_INT 4
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 4
32654: NEG
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 4
32666: NEG
32667: PUSH
32668: LD_INT 4
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: NEG
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 4
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 5
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 3
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 5
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 3
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 5
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32849: LD_ADDR_VAR 0 31
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 4
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 3
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 5
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 3
32949: NEG
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 3
32960: NEG
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 3
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 4
33005: NEG
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 4
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: NEG
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 4
33051: NEG
33052: PUSH
33053: LD_INT 4
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 4
33063: NEG
33064: PUSH
33065: LD_INT 5
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: LD_INT 4
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 4
33099: NEG
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 5
33111: NEG
33112: PUSH
33113: LD_INT 4
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 5
33123: NEG
33124: PUSH
33125: LD_INT 5
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: LD_INT 5
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 5
33147: NEG
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 3
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 4
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: LD_INT 3
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 4
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: LD_INT 4
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 5
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 3
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 3
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 5
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33399: LD_ADDR_VAR 0 32
33403: PUSH
33404: LD_INT 4
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 4
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 4
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: NEG
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 5
33473: NEG
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 5
33485: NEG
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 3
33497: NEG
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: LD_INT 3
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 3
33520: NEG
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: LD_INT 3
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 4
33568: NEG
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: NEG
33581: PUSH
33582: LD_INT 4
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: LD_INT 4
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 4
33604: NEG
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 4
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 5
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: LD_INT 4
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 3
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 4
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: LD_INT 5
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 5
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 4
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 4
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: LD_INT 4
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 5
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 5
33841: PUSH
33842: LD_INT 5
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: LD_INT 5
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: LD_INT 4
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 3
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 5
33881: PUSH
33882: LD_INT 3
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 5
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33946: LD_ADDR_VAR 0 33
33950: PUSH
33951: LD_INT 4
33953: NEG
33954: PUSH
33955: LD_INT 4
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 4
33965: NEG
33966: PUSH
33967: LD_INT 5
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 4
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 3
33989: NEG
33990: PUSH
33991: LD_INT 3
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 4
34001: NEG
34002: PUSH
34003: LD_INT 3
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 5
34013: NEG
34014: PUSH
34015: LD_INT 4
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 5
34025: NEG
34026: PUSH
34027: LD_INT 5
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: NEG
34038: PUSH
34039: LD_INT 5
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 5
34049: NEG
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 3
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 4
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 4
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 4
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 5
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 5
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 4
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 3
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 5
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 3
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 4
34276: PUSH
34277: LD_INT 3
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 4
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 3
34296: PUSH
34297: LD_INT 4
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 4
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: LD_INT 4
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 4
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 3
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: LD_INT 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: LD_INT 4
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 5
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34484: LD_ADDR_VAR 0 34
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 5
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 4
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 4
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 5
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: LD_INT 5
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: LD_INT 4
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 5
34716: PUSH
34717: LD_INT 5
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 3
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 5
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 5
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 3
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: LD_INT 4
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 4
34869: NEG
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 4
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 3
34892: NEG
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: NEG
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 4
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 5
34925: NEG
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 5
34936: NEG
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 5
34948: NEG
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 3
34960: NEG
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: ST_TO_ADDR
// end ; end ;
35016: GO 35019
35018: POP
// case btype of b_depot , b_warehouse :
35019: LD_VAR 0 1
35023: PUSH
35024: LD_INT 0
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35038
35030: LD_INT 1
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35239
35038: POP
// case nation of nation_american :
35039: LD_VAR 0 5
35043: PUSH
35044: LD_INT 1
35046: DOUBLE
35047: EQUAL
35048: IFTRUE 35052
35050: GO 35108
35052: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35053: LD_ADDR_VAR 0 9
35057: PUSH
35058: LD_VAR 0 11
35062: PUSH
35063: LD_VAR 0 12
35067: PUSH
35068: LD_VAR 0 13
35072: PUSH
35073: LD_VAR 0 14
35077: PUSH
35078: LD_VAR 0 15
35082: PUSH
35083: LD_VAR 0 16
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: PUSH
35096: LD_VAR 0 4
35100: PUSH
35101: LD_INT 1
35103: PLUS
35104: ARRAY
35105: ST_TO_ADDR
35106: GO 35237
35108: LD_INT 2
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35172
35116: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_VAR 0 17
35126: PUSH
35127: LD_VAR 0 18
35131: PUSH
35132: LD_VAR 0 19
35136: PUSH
35137: LD_VAR 0 20
35141: PUSH
35142: LD_VAR 0 21
35146: PUSH
35147: LD_VAR 0 22
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: PUSH
35160: LD_VAR 0 4
35164: PUSH
35165: LD_INT 1
35167: PLUS
35168: ARRAY
35169: ST_TO_ADDR
35170: GO 35237
35172: LD_INT 3
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35236
35180: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35181: LD_ADDR_VAR 0 9
35185: PUSH
35186: LD_VAR 0 23
35190: PUSH
35191: LD_VAR 0 24
35195: PUSH
35196: LD_VAR 0 25
35200: PUSH
35201: LD_VAR 0 26
35205: PUSH
35206: LD_VAR 0 27
35210: PUSH
35211: LD_VAR 0 28
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: PUSH
35224: LD_VAR 0 4
35228: PUSH
35229: LD_INT 1
35231: PLUS
35232: ARRAY
35233: ST_TO_ADDR
35234: GO 35237
35236: POP
35237: GO 35792
35239: LD_INT 2
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35253
35245: LD_INT 3
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35253
35251: GO 35309
35253: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35254: LD_ADDR_VAR 0 9
35258: PUSH
35259: LD_VAR 0 29
35263: PUSH
35264: LD_VAR 0 30
35268: PUSH
35269: LD_VAR 0 31
35273: PUSH
35274: LD_VAR 0 32
35278: PUSH
35279: LD_VAR 0 33
35283: PUSH
35284: LD_VAR 0 34
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: PUSH
35297: LD_VAR 0 4
35301: PUSH
35302: LD_INT 1
35304: PLUS
35305: ARRAY
35306: ST_TO_ADDR
35307: GO 35792
35309: LD_INT 16
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35371
35315: LD_INT 17
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35371
35321: LD_INT 18
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35371
35327: LD_INT 19
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35371
35333: LD_INT 22
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35371
35339: LD_INT 20
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35371
35345: LD_INT 21
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35371
35351: LD_INT 23
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35371
35357: LD_INT 24
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35371
35363: LD_INT 25
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35427
35371: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35372: LD_ADDR_VAR 0 9
35376: PUSH
35377: LD_VAR 0 35
35381: PUSH
35382: LD_VAR 0 36
35386: PUSH
35387: LD_VAR 0 37
35391: PUSH
35392: LD_VAR 0 38
35396: PUSH
35397: LD_VAR 0 39
35401: PUSH
35402: LD_VAR 0 40
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 4
35419: PUSH
35420: LD_INT 1
35422: PLUS
35423: ARRAY
35424: ST_TO_ADDR
35425: GO 35792
35427: LD_INT 6
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35483
35433: LD_INT 7
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35483
35439: LD_INT 8
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35483
35445: LD_INT 13
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35483
35451: LD_INT 12
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35483
35457: LD_INT 15
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35483
35463: LD_INT 11
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35483
35469: LD_INT 14
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35483
35475: LD_INT 10
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35539
35483: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35484: LD_ADDR_VAR 0 9
35488: PUSH
35489: LD_VAR 0 41
35493: PUSH
35494: LD_VAR 0 42
35498: PUSH
35499: LD_VAR 0 43
35503: PUSH
35504: LD_VAR 0 44
35508: PUSH
35509: LD_VAR 0 45
35513: PUSH
35514: LD_VAR 0 46
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: PUSH
35527: LD_VAR 0 4
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: ARRAY
35536: ST_TO_ADDR
35537: GO 35792
35539: LD_INT 36
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35603
35547: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35548: LD_ADDR_VAR 0 9
35552: PUSH
35553: LD_VAR 0 47
35557: PUSH
35558: LD_VAR 0 48
35562: PUSH
35563: LD_VAR 0 49
35567: PUSH
35568: LD_VAR 0 50
35572: PUSH
35573: LD_VAR 0 51
35577: PUSH
35578: LD_VAR 0 52
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: LD_VAR 0 4
35595: PUSH
35596: LD_INT 1
35598: PLUS
35599: ARRAY
35600: ST_TO_ADDR
35601: GO 35792
35603: LD_INT 4
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35629
35609: LD_INT 5
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35629
35615: LD_INT 34
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35629
35621: LD_INT 37
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35685
35629: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_VAR 0 53
35639: PUSH
35640: LD_VAR 0 54
35644: PUSH
35645: LD_VAR 0 55
35649: PUSH
35650: LD_VAR 0 56
35654: PUSH
35655: LD_VAR 0 57
35659: PUSH
35660: LD_VAR 0 58
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: PUSH
35673: LD_VAR 0 4
35677: PUSH
35678: LD_INT 1
35680: PLUS
35681: ARRAY
35682: ST_TO_ADDR
35683: GO 35792
35685: LD_INT 31
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35735
35691: LD_INT 32
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35735
35697: LD_INT 33
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35735
35703: LD_INT 27
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35735
35709: LD_INT 26
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35735
35715: LD_INT 28
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35735
35721: LD_INT 29
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35735
35727: LD_INT 30
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35735
35733: GO 35791
35735: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: LD_VAR 0 59
35745: PUSH
35746: LD_VAR 0 60
35750: PUSH
35751: LD_VAR 0 61
35755: PUSH
35756: LD_VAR 0 62
35760: PUSH
35761: LD_VAR 0 63
35765: PUSH
35766: LD_VAR 0 64
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: LD_VAR 0 4
35783: PUSH
35784: LD_INT 1
35786: PLUS
35787: ARRAY
35788: ST_TO_ADDR
35789: GO 35792
35791: POP
// temp_list2 = [ ] ;
35792: LD_ADDR_VAR 0 10
35796: PUSH
35797: EMPTY
35798: ST_TO_ADDR
// for i in temp_list do
35799: LD_ADDR_VAR 0 8
35803: PUSH
35804: LD_VAR 0 9
35808: PUSH
35809: FOR_IN
35810: IFFALSE 35862
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35812: LD_ADDR_VAR 0 10
35816: PUSH
35817: LD_VAR 0 10
35821: PUSH
35822: LD_VAR 0 8
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PUSH
35831: LD_VAR 0 2
35835: PLUS
35836: PUSH
35837: LD_VAR 0 8
35841: PUSH
35842: LD_INT 2
35844: ARRAY
35845: PUSH
35846: LD_VAR 0 3
35850: PLUS
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: ADD
35859: ST_TO_ADDR
35860: GO 35809
35862: POP
35863: POP
// result = temp_list2 ;
35864: LD_ADDR_VAR 0 7
35868: PUSH
35869: LD_VAR 0 10
35873: ST_TO_ADDR
// end ;
35874: LD_VAR 0 7
35878: RET
// export function EnemyInRange ( unit , dist ) ; begin
35879: LD_INT 0
35881: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 255
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 250
35906: PPUSH
35907: LD_VAR 0 1
35911: PPUSH
35912: CALL_OW 251
35916: PPUSH
35917: LD_VAR 0 2
35921: PPUSH
35922: CALL 9252 0 4
35926: PUSH
35927: LD_INT 4
35929: ARRAY
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 3
35935: RET
// export function PlayerSeeMe ( unit ) ; begin
35936: LD_INT 0
35938: PPUSH
// result := See ( your_side , unit ) ;
35939: LD_ADDR_VAR 0 2
35943: PUSH
35944: LD_OWVAR 2
35948: PPUSH
35949: LD_VAR 0 1
35953: PPUSH
35954: CALL_OW 292
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 2
35963: RET
// export function ReverseDir ( unit ) ; begin
35964: LD_INT 0
35966: PPUSH
// if not unit then
35967: LD_VAR 0 1
35971: NOT
35972: IFFALSE 35976
// exit ;
35974: GO 35999
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35976: LD_ADDR_VAR 0 2
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 254
35990: PUSH
35991: LD_INT 3
35993: PLUS
35994: PUSH
35995: LD_INT 6
35997: MOD
35998: ST_TO_ADDR
// end ;
35999: LD_VAR 0 2
36003: RET
// export function ReverseArray ( array ) ; var i ; begin
36004: LD_INT 0
36006: PPUSH
36007: PPUSH
// if not array then
36008: LD_VAR 0 1
36012: NOT
36013: IFFALSE 36017
// exit ;
36015: GO 36072
// result := [ ] ;
36017: LD_ADDR_VAR 0 2
36021: PUSH
36022: EMPTY
36023: ST_TO_ADDR
// for i := array downto 1 do
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: DOUBLE
36030: LD_VAR 0 1
36034: INC
36035: ST_TO_ADDR
36036: LD_INT 1
36038: PUSH
36039: FOR_DOWNTO
36040: IFFALSE 36070
// result := Join ( result , array [ i ] ) ;
36042: LD_ADDR_VAR 0 2
36046: PUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_VAR 0 3
36061: ARRAY
36062: PPUSH
36063: CALL 40737 0 2
36067: ST_TO_ADDR
36068: GO 36039
36070: POP
36071: POP
// end ;
36072: LD_VAR 0 2
36076: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36077: LD_INT 0
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
// if not unit or not hexes then
36085: LD_VAR 0 1
36089: NOT
36090: PUSH
36091: LD_VAR 0 2
36095: NOT
36096: OR
36097: IFFALSE 36101
// exit ;
36099: GO 36224
// dist := 9999 ;
36101: LD_ADDR_VAR 0 5
36105: PUSH
36106: LD_INT 9999
36108: ST_TO_ADDR
// for i = 1 to hexes do
36109: LD_ADDR_VAR 0 4
36113: PUSH
36114: DOUBLE
36115: LD_INT 1
36117: DEC
36118: ST_TO_ADDR
36119: LD_VAR 0 2
36123: PUSH
36124: FOR_TO
36125: IFFALSE 36212
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36127: LD_ADDR_VAR 0 6
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: LD_VAR 0 2
36141: PUSH
36142: LD_VAR 0 4
36146: ARRAY
36147: PUSH
36148: LD_INT 1
36150: ARRAY
36151: PPUSH
36152: LD_VAR 0 2
36156: PUSH
36157: LD_VAR 0 4
36161: ARRAY
36162: PUSH
36163: LD_INT 2
36165: ARRAY
36166: PPUSH
36167: CALL_OW 297
36171: ST_TO_ADDR
// if tdist < dist then
36172: LD_VAR 0 6
36176: PUSH
36177: LD_VAR 0 5
36181: LESS
36182: IFFALSE 36210
// begin hex := hexes [ i ] ;
36184: LD_ADDR_VAR 0 8
36188: PUSH
36189: LD_VAR 0 2
36193: PUSH
36194: LD_VAR 0 4
36198: ARRAY
36199: ST_TO_ADDR
// dist := tdist ;
36200: LD_ADDR_VAR 0 5
36204: PUSH
36205: LD_VAR 0 6
36209: ST_TO_ADDR
// end ; end ;
36210: GO 36124
36212: POP
36213: POP
// result := hex ;
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_VAR 0 8
36223: ST_TO_ADDR
// end ;
36224: LD_VAR 0 3
36228: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36229: LD_INT 0
36231: PPUSH
36232: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36233: LD_VAR 0 1
36237: NOT
36238: PUSH
36239: LD_VAR 0 1
36243: PUSH
36244: LD_INT 21
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 23
36256: PUSH
36257: LD_INT 2
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 69
36272: IN
36273: NOT
36274: OR
36275: IFFALSE 36279
// exit ;
36277: GO 36326
// for i = 1 to 3 do
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: DOUBLE
36285: LD_INT 1
36287: DEC
36288: ST_TO_ADDR
36289: LD_INT 3
36291: PUSH
36292: FOR_TO
36293: IFFALSE 36324
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 250
36304: PPUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL_OW 251
36314: PPUSH
36315: LD_INT 1
36317: PPUSH
36318: CALL_OW 453
36322: GO 36292
36324: POP
36325: POP
// end ;
36326: LD_VAR 0 2
36330: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
// if not unit or not enemy_unit then
36339: LD_VAR 0 1
36343: NOT
36344: PUSH
36345: LD_VAR 0 2
36349: NOT
36350: OR
36351: IFFALSE 36355
// exit ;
36353: GO 36822
// if GetLives ( i ) < 250 then
36355: LD_VAR 0 4
36359: PPUSH
36360: CALL_OW 256
36364: PUSH
36365: LD_INT 250
36367: LESS
36368: IFFALSE 36381
// begin ComAutodestruct ( i ) ;
36370: LD_VAR 0 4
36374: PPUSH
36375: CALL 36229 0 1
// exit ;
36379: GO 36822
// end ; x := GetX ( enemy_unit ) ;
36381: LD_ADDR_VAR 0 7
36385: PUSH
36386: LD_VAR 0 2
36390: PPUSH
36391: CALL_OW 250
36395: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36396: LD_ADDR_VAR 0 8
36400: PUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 251
36410: ST_TO_ADDR
// if not x or not y then
36411: LD_VAR 0 7
36415: NOT
36416: PUSH
36417: LD_VAR 0 8
36421: NOT
36422: OR
36423: IFFALSE 36427
// exit ;
36425: GO 36822
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36427: LD_ADDR_VAR 0 6
36431: PUSH
36432: LD_VAR 0 7
36436: PPUSH
36437: LD_INT 0
36439: PPUSH
36440: LD_INT 4
36442: PPUSH
36443: CALL_OW 272
36447: PUSH
36448: LD_VAR 0 8
36452: PPUSH
36453: LD_INT 0
36455: PPUSH
36456: LD_INT 4
36458: PPUSH
36459: CALL_OW 273
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: LD_INT 4
36478: PPUSH
36479: CALL_OW 272
36483: PUSH
36484: LD_VAR 0 8
36488: PPUSH
36489: LD_INT 1
36491: PPUSH
36492: LD_INT 4
36494: PPUSH
36495: CALL_OW 273
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_VAR 0 7
36508: PPUSH
36509: LD_INT 2
36511: PPUSH
36512: LD_INT 4
36514: PPUSH
36515: CALL_OW 272
36519: PUSH
36520: LD_VAR 0 8
36524: PPUSH
36525: LD_INT 2
36527: PPUSH
36528: LD_INT 4
36530: PPUSH
36531: CALL_OW 273
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: LD_INT 3
36547: PPUSH
36548: LD_INT 4
36550: PPUSH
36551: CALL_OW 272
36555: PUSH
36556: LD_VAR 0 8
36560: PPUSH
36561: LD_INT 3
36563: PPUSH
36564: LD_INT 4
36566: PPUSH
36567: CALL_OW 273
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_VAR 0 7
36580: PPUSH
36581: LD_INT 4
36583: PPUSH
36584: LD_INT 4
36586: PPUSH
36587: CALL_OW 272
36591: PUSH
36592: LD_VAR 0 8
36596: PPUSH
36597: LD_INT 4
36599: PPUSH
36600: LD_INT 4
36602: PPUSH
36603: CALL_OW 273
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 7
36616: PPUSH
36617: LD_INT 5
36619: PPUSH
36620: LD_INT 4
36622: PPUSH
36623: CALL_OW 272
36627: PUSH
36628: LD_VAR 0 8
36632: PPUSH
36633: LD_INT 5
36635: PPUSH
36636: LD_INT 4
36638: PPUSH
36639: CALL_OW 273
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// for i = tmp downto 1 do
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: DOUBLE
36662: LD_VAR 0 6
36666: INC
36667: ST_TO_ADDR
36668: LD_INT 1
36670: PUSH
36671: FOR_DOWNTO
36672: IFFALSE 36773
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36674: LD_VAR 0 6
36678: PUSH
36679: LD_VAR 0 4
36683: ARRAY
36684: PUSH
36685: LD_INT 1
36687: ARRAY
36688: PPUSH
36689: LD_VAR 0 6
36693: PUSH
36694: LD_VAR 0 4
36698: ARRAY
36699: PUSH
36700: LD_INT 2
36702: ARRAY
36703: PPUSH
36704: CALL_OW 488
36708: NOT
36709: PUSH
36710: LD_VAR 0 6
36714: PUSH
36715: LD_VAR 0 4
36719: ARRAY
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 6
36729: PUSH
36730: LD_VAR 0 4
36734: ARRAY
36735: PUSH
36736: LD_INT 2
36738: ARRAY
36739: PPUSH
36740: CALL_OW 428
36744: PUSH
36745: LD_INT 0
36747: NONEQUAL
36748: OR
36749: IFFALSE 36771
// tmp := Delete ( tmp , i ) ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_VAR 0 6
36760: PPUSH
36761: LD_VAR 0 4
36765: PPUSH
36766: CALL_OW 3
36770: ST_TO_ADDR
36771: GO 36671
36773: POP
36774: POP
// j := GetClosestHex ( unit , tmp ) ;
36775: LD_ADDR_VAR 0 5
36779: PUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: CALL 36077 0 2
36794: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36795: LD_VAR 0 1
36799: PPUSH
36800: LD_VAR 0 5
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: PPUSH
36809: LD_VAR 0 5
36813: PUSH
36814: LD_INT 2
36816: ARRAY
36817: PPUSH
36818: CALL_OW 111
// end ;
36822: LD_VAR 0 3
36826: RET
// export function PrepareApemanSoldier ( ) ; begin
36827: LD_INT 0
36829: PPUSH
// uc_nation := 0 ;
36830: LD_ADDR_OWVAR 21
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// hc_sex := sex_male ;
36838: LD_ADDR_OWVAR 27
36842: PUSH
36843: LD_INT 1
36845: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36846: LD_ADDR_OWVAR 28
36850: PUSH
36851: LD_INT 15
36853: ST_TO_ADDR
// hc_gallery :=  ;
36854: LD_ADDR_OWVAR 33
36858: PUSH
36859: LD_STRING 
36861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36862: LD_ADDR_OWVAR 31
36866: PUSH
36867: LD_INT 0
36869: PPUSH
36870: LD_INT 3
36872: PPUSH
36873: CALL_OW 12
36877: PUSH
36878: LD_INT 0
36880: PPUSH
36881: LD_INT 3
36883: PPUSH
36884: CALL_OW 12
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// end ;
36901: LD_VAR 0 1
36905: RET
// export function PrepareApemanEngineer ( ) ; begin
36906: LD_INT 0
36908: PPUSH
// uc_nation := 0 ;
36909: LD_ADDR_OWVAR 21
36913: PUSH
36914: LD_INT 0
36916: ST_TO_ADDR
// hc_sex := sex_male ;
36917: LD_ADDR_OWVAR 27
36921: PUSH
36922: LD_INT 1
36924: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36925: LD_ADDR_OWVAR 28
36929: PUSH
36930: LD_INT 16
36932: ST_TO_ADDR
// hc_gallery :=  ;
36933: LD_ADDR_OWVAR 33
36937: PUSH
36938: LD_STRING 
36940: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36941: LD_ADDR_OWVAR 31
36945: PUSH
36946: LD_INT 0
36948: PPUSH
36949: LD_INT 3
36951: PPUSH
36952: CALL_OW 12
36956: PUSH
36957: LD_INT 0
36959: PPUSH
36960: LD_INT 3
36962: PPUSH
36963: CALL_OW 12
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// end ;
36980: LD_VAR 0 1
36984: RET
// export function PrepareApeman ( agressivity ) ; begin
36985: LD_INT 0
36987: PPUSH
// uc_side := 0 ;
36988: LD_ADDR_OWVAR 20
36992: PUSH
36993: LD_INT 0
36995: ST_TO_ADDR
// uc_nation := 0 ;
36996: LD_ADDR_OWVAR 21
37000: PUSH
37001: LD_INT 0
37003: ST_TO_ADDR
// hc_sex := sex_male ;
37004: LD_ADDR_OWVAR 27
37008: PUSH
37009: LD_INT 1
37011: ST_TO_ADDR
// hc_class := class_apeman ;
37012: LD_ADDR_OWVAR 28
37016: PUSH
37017: LD_INT 12
37019: ST_TO_ADDR
// hc_gallery :=  ;
37020: LD_ADDR_OWVAR 33
37024: PUSH
37025: LD_STRING 
37027: ST_TO_ADDR
// if agressivity = 0 then
37028: LD_VAR 0 1
37032: PUSH
37033: LD_INT 0
37035: EQUAL
37036: IFFALSE 37048
// hc_agressivity := 0 else
37038: LD_ADDR_OWVAR 35
37042: PUSH
37043: LD_INT 0
37045: ST_TO_ADDR
37046: GO 37069
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37048: LD_ADDR_OWVAR 35
37052: PUSH
37053: LD_VAR 0 1
37057: NEG
37058: PPUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 12
37068: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37069: LD_ADDR_OWVAR 31
37073: PUSH
37074: LD_INT 0
37076: PPUSH
37077: LD_INT 3
37079: PPUSH
37080: CALL_OW 12
37084: PUSH
37085: LD_INT 0
37087: PPUSH
37088: LD_INT 3
37090: PPUSH
37091: CALL_OW 12
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// end ;
37108: LD_VAR 0 2
37112: RET
// export function PrepareTiger ( agressivity ) ; begin
37113: LD_INT 0
37115: PPUSH
// uc_side := 0 ;
37116: LD_ADDR_OWVAR 20
37120: PUSH
37121: LD_INT 0
37123: ST_TO_ADDR
// uc_nation := 0 ;
37124: LD_ADDR_OWVAR 21
37128: PUSH
37129: LD_INT 0
37131: ST_TO_ADDR
// hc_class := class_tiger ;
37132: LD_ADDR_OWVAR 28
37136: PUSH
37137: LD_INT 14
37139: ST_TO_ADDR
// hc_gallery :=  ;
37140: LD_ADDR_OWVAR 33
37144: PUSH
37145: LD_STRING 
37147: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37148: LD_ADDR_OWVAR 35
37152: PUSH
37153: LD_VAR 0 1
37157: NEG
37158: PPUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 12
37168: ST_TO_ADDR
// end ;
37169: LD_VAR 0 2
37173: RET
// export function PrepareEnchidna ( ) ; begin
37174: LD_INT 0
37176: PPUSH
// uc_side := 0 ;
37177: LD_ADDR_OWVAR 20
37181: PUSH
37182: LD_INT 0
37184: ST_TO_ADDR
// uc_nation := 0 ;
37185: LD_ADDR_OWVAR 21
37189: PUSH
37190: LD_INT 0
37192: ST_TO_ADDR
// hc_class := class_baggie ;
37193: LD_ADDR_OWVAR 28
37197: PUSH
37198: LD_INT 13
37200: ST_TO_ADDR
// hc_gallery :=  ;
37201: LD_ADDR_OWVAR 33
37205: PUSH
37206: LD_STRING 
37208: ST_TO_ADDR
// end ;
37209: LD_VAR 0 1
37213: RET
// export function PrepareFrog ( ) ; begin
37214: LD_INT 0
37216: PPUSH
// uc_side := 0 ;
37217: LD_ADDR_OWVAR 20
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// uc_nation := 0 ;
37225: LD_ADDR_OWVAR 21
37229: PUSH
37230: LD_INT 0
37232: ST_TO_ADDR
// hc_class := class_frog ;
37233: LD_ADDR_OWVAR 28
37237: PUSH
37238: LD_INT 19
37240: ST_TO_ADDR
// hc_gallery :=  ;
37241: LD_ADDR_OWVAR 33
37245: PUSH
37246: LD_STRING 
37248: ST_TO_ADDR
// end ;
37249: LD_VAR 0 1
37253: RET
// export function PrepareFish ( ) ; begin
37254: LD_INT 0
37256: PPUSH
// uc_side := 0 ;
37257: LD_ADDR_OWVAR 20
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// uc_nation := 0 ;
37265: LD_ADDR_OWVAR 21
37269: PUSH
37270: LD_INT 0
37272: ST_TO_ADDR
// hc_class := class_fish ;
37273: LD_ADDR_OWVAR 28
37277: PUSH
37278: LD_INT 20
37280: ST_TO_ADDR
// hc_gallery :=  ;
37281: LD_ADDR_OWVAR 33
37285: PUSH
37286: LD_STRING 
37288: ST_TO_ADDR
// end ;
37289: LD_VAR 0 1
37293: RET
// export function PrepareBird ( ) ; begin
37294: LD_INT 0
37296: PPUSH
// uc_side := 0 ;
37297: LD_ADDR_OWVAR 20
37301: PUSH
37302: LD_INT 0
37304: ST_TO_ADDR
// uc_nation := 0 ;
37305: LD_ADDR_OWVAR 21
37309: PUSH
37310: LD_INT 0
37312: ST_TO_ADDR
// hc_class := class_phororhacos ;
37313: LD_ADDR_OWVAR 28
37317: PUSH
37318: LD_INT 18
37320: ST_TO_ADDR
// hc_gallery :=  ;
37321: LD_ADDR_OWVAR 33
37325: PUSH
37326: LD_STRING 
37328: ST_TO_ADDR
// end ;
37329: LD_VAR 0 1
37333: RET
// export function PrepareHorse ( ) ; begin
37334: LD_INT 0
37336: PPUSH
// uc_side := 0 ;
37337: LD_ADDR_OWVAR 20
37341: PUSH
37342: LD_INT 0
37344: ST_TO_ADDR
// uc_nation := 0 ;
37345: LD_ADDR_OWVAR 21
37349: PUSH
37350: LD_INT 0
37352: ST_TO_ADDR
// hc_class := class_horse ;
37353: LD_ADDR_OWVAR 28
37357: PUSH
37358: LD_INT 21
37360: ST_TO_ADDR
// hc_gallery :=  ;
37361: LD_ADDR_OWVAR 33
37365: PUSH
37366: LD_STRING 
37368: ST_TO_ADDR
// end ;
37369: LD_VAR 0 1
37373: RET
// export function PrepareMastodont ( ) ; begin
37374: LD_INT 0
37376: PPUSH
// uc_side := 0 ;
37377: LD_ADDR_OWVAR 20
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// uc_nation := 0 ;
37385: LD_ADDR_OWVAR 21
37389: PUSH
37390: LD_INT 0
37392: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37393: LD_ADDR_OWVAR 37
37397: PUSH
37398: LD_INT 31
37400: ST_TO_ADDR
// vc_control := control_rider ;
37401: LD_ADDR_OWVAR 38
37405: PUSH
37406: LD_INT 4
37408: ST_TO_ADDR
// end ;
37409: LD_VAR 0 1
37413: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37414: LD_INT 0
37416: PPUSH
37417: PPUSH
37418: PPUSH
// uc_side = 0 ;
37419: LD_ADDR_OWVAR 20
37423: PUSH
37424: LD_INT 0
37426: ST_TO_ADDR
// uc_nation = 0 ;
37427: LD_ADDR_OWVAR 21
37431: PUSH
37432: LD_INT 0
37434: ST_TO_ADDR
// InitHc_All ( ) ;
37435: CALL_OW 584
// InitVc ;
37439: CALL_OW 20
// if mastodonts then
37443: LD_VAR 0 6
37447: IFFALSE 37514
// for i = 1 to mastodonts do
37449: LD_ADDR_VAR 0 11
37453: PUSH
37454: DOUBLE
37455: LD_INT 1
37457: DEC
37458: ST_TO_ADDR
37459: LD_VAR 0 6
37463: PUSH
37464: FOR_TO
37465: IFFALSE 37512
// begin vc_chassis := 31 ;
37467: LD_ADDR_OWVAR 37
37471: PUSH
37472: LD_INT 31
37474: ST_TO_ADDR
// vc_control := control_rider ;
37475: LD_ADDR_OWVAR 38
37479: PUSH
37480: LD_INT 4
37482: ST_TO_ADDR
// animal := CreateVehicle ;
37483: LD_ADDR_VAR 0 12
37487: PUSH
37488: CALL_OW 45
37492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37493: LD_VAR 0 12
37497: PPUSH
37498: LD_VAR 0 8
37502: PPUSH
37503: LD_INT 0
37505: PPUSH
37506: CALL 39642 0 3
// end ;
37510: GO 37464
37512: POP
37513: POP
// if horses then
37514: LD_VAR 0 5
37518: IFFALSE 37585
// for i = 1 to horses do
37520: LD_ADDR_VAR 0 11
37524: PUSH
37525: DOUBLE
37526: LD_INT 1
37528: DEC
37529: ST_TO_ADDR
37530: LD_VAR 0 5
37534: PUSH
37535: FOR_TO
37536: IFFALSE 37583
// begin hc_class := 21 ;
37538: LD_ADDR_OWVAR 28
37542: PUSH
37543: LD_INT 21
37545: ST_TO_ADDR
// hc_gallery :=  ;
37546: LD_ADDR_OWVAR 33
37550: PUSH
37551: LD_STRING 
37553: ST_TO_ADDR
// animal := CreateHuman ;
37554: LD_ADDR_VAR 0 12
37558: PUSH
37559: CALL_OW 44
37563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37564: LD_VAR 0 12
37568: PPUSH
37569: LD_VAR 0 8
37573: PPUSH
37574: LD_INT 0
37576: PPUSH
37577: CALL 39642 0 3
// end ;
37581: GO 37535
37583: POP
37584: POP
// if birds then
37585: LD_VAR 0 1
37589: IFFALSE 37656
// for i = 1 to birds do
37591: LD_ADDR_VAR 0 11
37595: PUSH
37596: DOUBLE
37597: LD_INT 1
37599: DEC
37600: ST_TO_ADDR
37601: LD_VAR 0 1
37605: PUSH
37606: FOR_TO
37607: IFFALSE 37654
// begin hc_class := 18 ;
37609: LD_ADDR_OWVAR 28
37613: PUSH
37614: LD_INT 18
37616: ST_TO_ADDR
// hc_gallery =  ;
37617: LD_ADDR_OWVAR 33
37621: PUSH
37622: LD_STRING 
37624: ST_TO_ADDR
// animal := CreateHuman ;
37625: LD_ADDR_VAR 0 12
37629: PUSH
37630: CALL_OW 44
37634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37635: LD_VAR 0 12
37639: PPUSH
37640: LD_VAR 0 8
37644: PPUSH
37645: LD_INT 0
37647: PPUSH
37648: CALL 39642 0 3
// end ;
37652: GO 37606
37654: POP
37655: POP
// if tigers then
37656: LD_VAR 0 2
37660: IFFALSE 37744
// for i = 1 to tigers do
37662: LD_ADDR_VAR 0 11
37666: PUSH
37667: DOUBLE
37668: LD_INT 1
37670: DEC
37671: ST_TO_ADDR
37672: LD_VAR 0 2
37676: PUSH
37677: FOR_TO
37678: IFFALSE 37742
// begin hc_class = class_tiger ;
37680: LD_ADDR_OWVAR 28
37684: PUSH
37685: LD_INT 14
37687: ST_TO_ADDR
// hc_gallery =  ;
37688: LD_ADDR_OWVAR 33
37692: PUSH
37693: LD_STRING 
37695: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37696: LD_ADDR_OWVAR 35
37700: PUSH
37701: LD_INT 7
37703: NEG
37704: PPUSH
37705: LD_INT 7
37707: PPUSH
37708: CALL_OW 12
37712: ST_TO_ADDR
// animal := CreateHuman ;
37713: LD_ADDR_VAR 0 12
37717: PUSH
37718: CALL_OW 44
37722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37723: LD_VAR 0 12
37727: PPUSH
37728: LD_VAR 0 8
37732: PPUSH
37733: LD_INT 0
37735: PPUSH
37736: CALL 39642 0 3
// end ;
37740: GO 37677
37742: POP
37743: POP
// if apemans then
37744: LD_VAR 0 3
37748: IFFALSE 37871
// for i = 1 to apemans do
37750: LD_ADDR_VAR 0 11
37754: PUSH
37755: DOUBLE
37756: LD_INT 1
37758: DEC
37759: ST_TO_ADDR
37760: LD_VAR 0 3
37764: PUSH
37765: FOR_TO
37766: IFFALSE 37869
// begin hc_class = class_apeman ;
37768: LD_ADDR_OWVAR 28
37772: PUSH
37773: LD_INT 12
37775: ST_TO_ADDR
// hc_gallery =  ;
37776: LD_ADDR_OWVAR 33
37780: PUSH
37781: LD_STRING 
37783: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37784: LD_ADDR_OWVAR 35
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PPUSH
37793: LD_INT 2
37795: PPUSH
37796: CALL_OW 12
37800: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37801: LD_ADDR_OWVAR 31
37805: PUSH
37806: LD_INT 1
37808: PPUSH
37809: LD_INT 3
37811: PPUSH
37812: CALL_OW 12
37816: PUSH
37817: LD_INT 1
37819: PPUSH
37820: LD_INT 3
37822: PPUSH
37823: CALL_OW 12
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// animal := CreateHuman ;
37840: LD_ADDR_VAR 0 12
37844: PUSH
37845: CALL_OW 44
37849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37850: LD_VAR 0 12
37854: PPUSH
37855: LD_VAR 0 8
37859: PPUSH
37860: LD_INT 0
37862: PPUSH
37863: CALL 39642 0 3
// end ;
37867: GO 37765
37869: POP
37870: POP
// if enchidnas then
37871: LD_VAR 0 4
37875: IFFALSE 37942
// for i = 1 to enchidnas do
37877: LD_ADDR_VAR 0 11
37881: PUSH
37882: DOUBLE
37883: LD_INT 1
37885: DEC
37886: ST_TO_ADDR
37887: LD_VAR 0 4
37891: PUSH
37892: FOR_TO
37893: IFFALSE 37940
// begin hc_class = 13 ;
37895: LD_ADDR_OWVAR 28
37899: PUSH
37900: LD_INT 13
37902: ST_TO_ADDR
// hc_gallery =  ;
37903: LD_ADDR_OWVAR 33
37907: PUSH
37908: LD_STRING 
37910: ST_TO_ADDR
// animal := CreateHuman ;
37911: LD_ADDR_VAR 0 12
37915: PUSH
37916: CALL_OW 44
37920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37921: LD_VAR 0 12
37925: PPUSH
37926: LD_VAR 0 8
37930: PPUSH
37931: LD_INT 0
37933: PPUSH
37934: CALL 39642 0 3
// end ;
37938: GO 37892
37940: POP
37941: POP
// if fishes then
37942: LD_VAR 0 7
37946: IFFALSE 38013
// for i = 1 to fishes do
37948: LD_ADDR_VAR 0 11
37952: PUSH
37953: DOUBLE
37954: LD_INT 1
37956: DEC
37957: ST_TO_ADDR
37958: LD_VAR 0 7
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38011
// begin hc_class = 20 ;
37966: LD_ADDR_OWVAR 28
37970: PUSH
37971: LD_INT 20
37973: ST_TO_ADDR
// hc_gallery =  ;
37974: LD_ADDR_OWVAR 33
37978: PUSH
37979: LD_STRING 
37981: ST_TO_ADDR
// animal := CreateHuman ;
37982: LD_ADDR_VAR 0 12
37986: PUSH
37987: CALL_OW 44
37991: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37992: LD_VAR 0 12
37996: PPUSH
37997: LD_VAR 0 9
38001: PPUSH
38002: LD_INT 0
38004: PPUSH
38005: CALL 39642 0 3
// end ;
38009: GO 37963
38011: POP
38012: POP
// end ;
38013: LD_VAR 0 10
38017: RET
// export function WantHeal ( sci , unit ) ; begin
38018: LD_INT 0
38020: PPUSH
// if GetTaskList ( sci ) > 0 then
38021: LD_VAR 0 1
38025: PPUSH
38026: CALL_OW 437
38030: PUSH
38031: LD_INT 0
38033: GREATER
38034: IFFALSE 38104
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 437
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PUSH
38054: LD_STRING l
38056: EQUAL
38057: PUSH
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 437
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: PUSH
38072: LD_INT 4
38074: ARRAY
38075: PUSH
38076: LD_VAR 0 2
38080: EQUAL
38081: AND
38082: IFFALSE 38094
// result := true else
38084: LD_ADDR_VAR 0 3
38088: PUSH
38089: LD_INT 1
38091: ST_TO_ADDR
38092: GO 38102
// result := false ;
38094: LD_ADDR_VAR 0 3
38098: PUSH
38099: LD_INT 0
38101: ST_TO_ADDR
// end else
38102: GO 38112
// result := false ;
38104: LD_ADDR_VAR 0 3
38108: PUSH
38109: LD_INT 0
38111: ST_TO_ADDR
// end ;
38112: LD_VAR 0 3
38116: RET
// export function HealTarget ( sci ) ; begin
38117: LD_INT 0
38119: PPUSH
// if not sci then
38120: LD_VAR 0 1
38124: NOT
38125: IFFALSE 38129
// exit ;
38127: GO 38194
// result := 0 ;
38129: LD_ADDR_VAR 0 2
38133: PUSH
38134: LD_INT 0
38136: ST_TO_ADDR
// if GetTaskList ( sci ) then
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 437
38146: IFFALSE 38194
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 437
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PUSH
38166: LD_STRING l
38168: EQUAL
38169: IFFALSE 38194
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38171: LD_ADDR_VAR 0 2
38175: PUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 437
38185: PUSH
38186: LD_INT 1
38188: ARRAY
38189: PUSH
38190: LD_INT 4
38192: ARRAY
38193: ST_TO_ADDR
// end ;
38194: LD_VAR 0 2
38198: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38199: LD_INT 0
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
// if not base_units then
38205: LD_VAR 0 1
38209: NOT
38210: IFFALSE 38214
// exit ;
38212: GO 38301
// result := false ;
38214: LD_ADDR_VAR 0 2
38218: PUSH
38219: LD_INT 0
38221: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38222: LD_ADDR_VAR 0 5
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: LD_INT 21
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PPUSH
38242: CALL_OW 72
38246: ST_TO_ADDR
// if not tmp then
38247: LD_VAR 0 5
38251: NOT
38252: IFFALSE 38256
// exit ;
38254: GO 38301
// for i in tmp do
38256: LD_ADDR_VAR 0 3
38260: PUSH
38261: LD_VAR 0 5
38265: PUSH
38266: FOR_IN
38267: IFFALSE 38299
// begin result := EnemyInRange ( i , 22 ) ;
38269: LD_ADDR_VAR 0 2
38273: PUSH
38274: LD_VAR 0 3
38278: PPUSH
38279: LD_INT 22
38281: PPUSH
38282: CALL 35879 0 2
38286: ST_TO_ADDR
// if result then
38287: LD_VAR 0 2
38291: IFFALSE 38297
// exit ;
38293: POP
38294: POP
38295: GO 38301
// end ;
38297: GO 38266
38299: POP
38300: POP
// end ;
38301: LD_VAR 0 2
38305: RET
// export function FilterByTag ( units , tag ) ; begin
38306: LD_INT 0
38308: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: LD_INT 120
38321: PUSH
38322: LD_VAR 0 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PPUSH
38331: CALL_OW 72
38335: ST_TO_ADDR
// end ;
38336: LD_VAR 0 3
38340: RET
// export function IsDriver ( un ) ; begin
38341: LD_INT 0
38343: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38344: LD_ADDR_VAR 0 2
38348: PUSH
38349: LD_VAR 0 1
38353: PUSH
38354: LD_INT 55
38356: PUSH
38357: EMPTY
38358: LIST
38359: PPUSH
38360: CALL_OW 69
38364: IN
38365: ST_TO_ADDR
// end ;
38366: LD_VAR 0 2
38370: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38371: LD_INT 0
38373: PPUSH
38374: PPUSH
// list := [ ] ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: EMPTY
38381: ST_TO_ADDR
// case d of 0 :
38382: LD_VAR 0 3
38386: PUSH
38387: LD_INT 0
38389: DOUBLE
38390: EQUAL
38391: IFTRUE 38395
38393: GO 38528
38395: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_INT 4
38408: MINUS
38409: PUSH
38410: LD_VAR 0 2
38414: PUSH
38415: LD_INT 4
38417: MINUS
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: PUSH
38427: LD_VAR 0 1
38431: PUSH
38432: LD_INT 3
38434: MINUS
38435: PUSH
38436: LD_VAR 0 2
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: PUSH
38449: LD_VAR 0 1
38453: PUSH
38454: LD_INT 4
38456: PLUS
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_INT 4
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_VAR 0 1
38475: PUSH
38476: LD_INT 3
38478: PLUS
38479: PUSH
38480: LD_VAR 0 2
38484: PUSH
38485: LD_INT 3
38487: PLUS
38488: PUSH
38489: LD_INT 5
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: PUSH
38497: LD_VAR 0 1
38501: PUSH
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 4
38509: PLUS
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// end ; 1 :
38526: GO 39226
38528: LD_INT 1
38530: DOUBLE
38531: EQUAL
38532: IFTRUE 38536
38534: GO 38669
38536: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38537: LD_ADDR_VAR 0 5
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_VAR 0 2
38551: PUSH
38552: LD_INT 4
38554: MINUS
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: LD_INT 3
38571: MINUS
38572: PUSH
38573: LD_VAR 0 2
38577: PUSH
38578: LD_INT 3
38580: MINUS
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: PUSH
38590: LD_VAR 0 1
38594: PUSH
38595: LD_INT 4
38597: MINUS
38598: PUSH
38599: LD_VAR 0 2
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: PUSH
38612: LD_VAR 0 1
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_INT 3
38624: PLUS
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: PUSH
38634: LD_VAR 0 1
38638: PUSH
38639: LD_INT 4
38641: PLUS
38642: PUSH
38643: LD_VAR 0 2
38647: PUSH
38648: LD_INT 4
38650: PLUS
38651: PUSH
38652: LD_INT 5
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// end ; 2 :
38667: GO 39226
38669: LD_INT 2
38671: DOUBLE
38672: EQUAL
38673: IFTRUE 38677
38675: GO 38806
38677: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38678: LD_ADDR_VAR 0 5
38682: PUSH
38683: LD_VAR 0 1
38687: PUSH
38688: LD_VAR 0 2
38692: PUSH
38693: LD_INT 3
38695: MINUS
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: LD_VAR 0 1
38709: PUSH
38710: LD_INT 4
38712: PLUS
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 4
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: PUSH
38727: LD_VAR 0 1
38731: PUSH
38732: LD_VAR 0 2
38736: PUSH
38737: LD_INT 4
38739: PLUS
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: PUSH
38749: LD_VAR 0 1
38753: PUSH
38754: LD_INT 3
38756: MINUS
38757: PUSH
38758: LD_VAR 0 2
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_INT 4
38778: MINUS
38779: PUSH
38780: LD_VAR 0 2
38784: PUSH
38785: LD_INT 4
38787: MINUS
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// end ; 3 :
38804: GO 39226
38806: LD_INT 3
38808: DOUBLE
38809: EQUAL
38810: IFTRUE 38814
38812: GO 38947
38814: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_VAR 0 1
38824: PUSH
38825: LD_INT 3
38827: PLUS
38828: PUSH
38829: LD_VAR 0 2
38833: PUSH
38834: LD_INT 4
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 4
38849: PLUS
38850: PUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_INT 4
38858: PLUS
38859: PUSH
38860: LD_INT 5
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 4
38875: MINUS
38876: PUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: LD_VAR 0 1
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 4
38902: MINUS
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_INT 3
38919: MINUS
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 3
38928: MINUS
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// end ; 4 :
38945: GO 39226
38947: LD_INT 4
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 39088
38955: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38956: LD_ADDR_VAR 0 5
38960: PUSH
38961: LD_VAR 0 1
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_INT 4
38973: PLUS
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: LD_VAR 0 1
38987: PUSH
38988: LD_INT 3
38990: PLUS
38991: PUSH
38992: LD_VAR 0 2
38996: PUSH
38997: LD_INT 3
38999: PLUS
39000: PUSH
39001: LD_INT 5
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: PUSH
39009: LD_VAR 0 1
39013: PUSH
39014: LD_INT 4
39016: PLUS
39017: PUSH
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_VAR 0 2
39040: PUSH
39041: LD_INT 3
39043: MINUS
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 4
39060: MINUS
39061: PUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_INT 4
39069: MINUS
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// end ; 5 :
39086: GO 39226
39088: LD_INT 5
39090: DOUBLE
39091: EQUAL
39092: IFTRUE 39096
39094: GO 39225
39096: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 1
39106: PUSH
39107: LD_INT 4
39109: MINUS
39110: PUSH
39111: LD_VAR 0 2
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: LD_VAR 0 1
39128: PUSH
39129: LD_VAR 0 2
39133: PUSH
39134: LD_INT 4
39136: MINUS
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_INT 4
39153: PLUS
39154: PUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_INT 4
39162: PLUS
39163: PUSH
39164: LD_INT 5
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: PUSH
39172: LD_VAR 0 1
39176: PUSH
39177: LD_INT 3
39179: PLUS
39180: PUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_INT 4
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 3
39206: PLUS
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// end ; end ;
39223: GO 39226
39225: POP
// result := list ;
39226: LD_ADDR_VAR 0 4
39230: PUSH
39231: LD_VAR 0 5
39235: ST_TO_ADDR
// end ;
39236: LD_VAR 0 4
39240: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39246: LD_VAR 0 1
39250: NOT
39251: PUSH
39252: LD_VAR 0 2
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: IN
39275: NOT
39276: OR
39277: IFFALSE 39281
// exit ;
39279: GO 39364
// tmp := [ ] ;
39281: LD_ADDR_VAR 0 5
39285: PUSH
39286: EMPTY
39287: ST_TO_ADDR
// for i in units do
39288: LD_ADDR_VAR 0 4
39292: PUSH
39293: LD_VAR 0 1
39297: PUSH
39298: FOR_IN
39299: IFFALSE 39333
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39301: LD_ADDR_VAR 0 5
39305: PUSH
39306: LD_VAR 0 5
39310: PPUSH
39311: LD_VAR 0 4
39315: PPUSH
39316: LD_VAR 0 2
39320: PPUSH
39321: CALL_OW 259
39325: PPUSH
39326: CALL 40737 0 2
39330: ST_TO_ADDR
39331: GO 39298
39333: POP
39334: POP
// if not tmp then
39335: LD_VAR 0 5
39339: NOT
39340: IFFALSE 39344
// exit ;
39342: GO 39364
// result := SortListByListDesc ( units , tmp ) ;
39344: LD_ADDR_VAR 0 3
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: LD_VAR 0 5
39358: PPUSH
39359: CALL_OW 77
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 3
39368: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39369: LD_INT 0
39371: PPUSH
39372: PPUSH
39373: PPUSH
// result := false ;
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_INT 0
39381: ST_TO_ADDR
// if not building then
39382: LD_VAR 0 2
39386: NOT
39387: IFFALSE 39391
// exit ;
39389: GO 39529
// x := GetX ( building ) ;
39391: LD_ADDR_VAR 0 4
39395: PUSH
39396: LD_VAR 0 2
39400: PPUSH
39401: CALL_OW 250
39405: ST_TO_ADDR
// y := GetY ( building ) ;
39406: LD_ADDR_VAR 0 5
39410: PUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: CALL_OW 251
39420: ST_TO_ADDR
// if not x or not y then
39421: LD_VAR 0 4
39425: NOT
39426: PUSH
39427: LD_VAR 0 5
39431: NOT
39432: OR
39433: IFFALSE 39437
// exit ;
39435: GO 39529
// if GetTaskList ( unit ) then
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 437
39446: IFFALSE 39529
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39448: LD_STRING e
39450: PUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 437
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: EQUAL
39469: PUSH
39470: LD_VAR 0 4
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 437
39484: PUSH
39485: LD_INT 1
39487: ARRAY
39488: PUSH
39489: LD_INT 2
39491: ARRAY
39492: EQUAL
39493: AND
39494: PUSH
39495: LD_VAR 0 5
39499: PUSH
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 437
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PUSH
39514: LD_INT 3
39516: ARRAY
39517: EQUAL
39518: AND
39519: IFFALSE 39529
// result := true end ;
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_INT 1
39528: ST_TO_ADDR
// end ;
39529: LD_VAR 0 3
39533: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39534: LD_INT 0
39536: PPUSH
// result := false ;
39537: LD_ADDR_VAR 0 4
39541: PUSH
39542: LD_INT 0
39544: ST_TO_ADDR
// if GetTaskList ( unit ) then
39545: LD_VAR 0 1
39549: PPUSH
39550: CALL_OW 437
39554: IFFALSE 39637
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39556: LD_STRING M
39558: PUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: CALL_OW 437
39568: PUSH
39569: LD_INT 1
39571: ARRAY
39572: PUSH
39573: LD_INT 1
39575: ARRAY
39576: EQUAL
39577: PUSH
39578: LD_VAR 0 2
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 437
39592: PUSH
39593: LD_INT 1
39595: ARRAY
39596: PUSH
39597: LD_INT 2
39599: ARRAY
39600: EQUAL
39601: AND
39602: PUSH
39603: LD_VAR 0 3
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: CALL_OW 437
39617: PUSH
39618: LD_INT 1
39620: ARRAY
39621: PUSH
39622: LD_INT 3
39624: ARRAY
39625: EQUAL
39626: AND
39627: IFFALSE 39637
// result := true ;
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_INT 1
39636: ST_TO_ADDR
// end ; end ;
39637: LD_VAR 0 4
39641: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39642: LD_INT 0
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
// if not unit or not area then
39648: LD_VAR 0 1
39652: NOT
39653: PUSH
39654: LD_VAR 0 2
39658: NOT
39659: OR
39660: IFFALSE 39664
// exit ;
39662: GO 39840
// tmp := AreaToList ( area , i ) ;
39664: LD_ADDR_VAR 0 6
39668: PUSH
39669: LD_VAR 0 2
39673: PPUSH
39674: LD_VAR 0 5
39678: PPUSH
39679: CALL_OW 517
39683: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39684: LD_ADDR_VAR 0 5
39688: PUSH
39689: DOUBLE
39690: LD_INT 1
39692: DEC
39693: ST_TO_ADDR
39694: LD_VAR 0 6
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: PUSH
39703: FOR_TO
39704: IFFALSE 39838
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39706: LD_ADDR_VAR 0 7
39710: PUSH
39711: LD_VAR 0 6
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PUSH
39720: LD_VAR 0 5
39724: ARRAY
39725: PUSH
39726: LD_VAR 0 6
39730: PUSH
39731: LD_INT 2
39733: ARRAY
39734: PUSH
39735: LD_VAR 0 5
39739: ARRAY
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39745: LD_INT 92
39747: PUSH
39748: LD_VAR 0 7
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PUSH
39757: LD_VAR 0 7
39761: PUSH
39762: LD_INT 2
39764: ARRAY
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: PPUSH
39775: CALL_OW 69
39779: PUSH
39780: LD_INT 0
39782: EQUAL
39783: IFFALSE 39836
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39785: LD_VAR 0 1
39789: PPUSH
39790: LD_VAR 0 7
39794: PUSH
39795: LD_INT 1
39797: ARRAY
39798: PPUSH
39799: LD_VAR 0 7
39803: PUSH
39804: LD_INT 2
39806: ARRAY
39807: PPUSH
39808: LD_VAR 0 3
39812: PPUSH
39813: CALL_OW 48
// result := IsPlaced ( unit ) ;
39817: LD_ADDR_VAR 0 4
39821: PUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 305
39831: ST_TO_ADDR
// exit ;
39832: POP
39833: POP
39834: GO 39840
// end ; end ;
39836: GO 39703
39838: POP
39839: POP
// end ;
39840: LD_VAR 0 4
39844: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
39849: PPUSH
// if not side or side > 8 then
39850: LD_VAR 0 1
39854: NOT
39855: PUSH
39856: LD_VAR 0 1
39860: PUSH
39861: LD_INT 8
39863: GREATER
39864: OR
39865: IFFALSE 39869
// exit ;
39867: GO 40056
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39869: LD_ADDR_VAR 0 4
39873: PUSH
39874: LD_INT 22
39876: PUSH
39877: LD_VAR 0 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 21
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PPUSH
39900: CALL_OW 69
39904: ST_TO_ADDR
// if not tmp then
39905: LD_VAR 0 4
39909: NOT
39910: IFFALSE 39914
// exit ;
39912: GO 40056
// enable_addtolog := true ;
39914: LD_ADDR_OWVAR 81
39918: PUSH
39919: LD_INT 1
39921: ST_TO_ADDR
// AddToLog ( [ ) ;
39922: LD_STRING [
39924: PPUSH
39925: CALL_OW 561
// for i in tmp do
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_VAR 0 4
39938: PUSH
39939: FOR_IN
39940: IFFALSE 40047
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39942: LD_STRING [
39944: PUSH
39945: LD_VAR 0 3
39949: PPUSH
39950: CALL_OW 266
39954: STR
39955: PUSH
39956: LD_STRING , 
39958: STR
39959: PUSH
39960: LD_VAR 0 3
39964: PPUSH
39965: CALL_OW 250
39969: STR
39970: PUSH
39971: LD_STRING , 
39973: STR
39974: PUSH
39975: LD_VAR 0 3
39979: PPUSH
39980: CALL_OW 251
39984: STR
39985: PUSH
39986: LD_STRING , 
39988: STR
39989: PUSH
39990: LD_VAR 0 3
39994: PPUSH
39995: CALL_OW 254
39999: STR
40000: PUSH
40001: LD_STRING , 
40003: STR
40004: PUSH
40005: LD_VAR 0 3
40009: PPUSH
40010: LD_INT 1
40012: PPUSH
40013: CALL_OW 268
40017: STR
40018: PUSH
40019: LD_STRING , 
40021: STR
40022: PUSH
40023: LD_VAR 0 3
40027: PPUSH
40028: LD_INT 2
40030: PPUSH
40031: CALL_OW 268
40035: STR
40036: PUSH
40037: LD_STRING ],
40039: STR
40040: PPUSH
40041: CALL_OW 561
// end ;
40045: GO 39939
40047: POP
40048: POP
// AddToLog ( ]; ) ;
40049: LD_STRING ];
40051: PPUSH
40052: CALL_OW 561
// end ;
40056: LD_VAR 0 2
40060: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40061: LD_INT 0
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
// if not area or not rate or not max then
40068: LD_VAR 0 1
40072: NOT
40073: PUSH
40074: LD_VAR 0 2
40078: NOT
40079: OR
40080: PUSH
40081: LD_VAR 0 4
40085: NOT
40086: OR
40087: IFFALSE 40091
// exit ;
40089: GO 40280
// while 1 do
40091: LD_INT 1
40093: IFFALSE 40280
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40095: LD_ADDR_VAR 0 9
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: LD_INT 1
40107: PPUSH
40108: CALL_OW 287
40112: PUSH
40113: LD_INT 10
40115: MUL
40116: ST_TO_ADDR
// r := rate / 10 ;
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: LD_VAR 0 2
40126: PUSH
40127: LD_INT 10
40129: DIVREAL
40130: ST_TO_ADDR
// time := 1 1$00 ;
40131: LD_ADDR_VAR 0 8
40135: PUSH
40136: LD_INT 2100
40138: ST_TO_ADDR
// if amount < min then
40139: LD_VAR 0 9
40143: PUSH
40144: LD_VAR 0 3
40148: LESS
40149: IFFALSE 40167
// r := r * 2 else
40151: LD_ADDR_VAR 0 7
40155: PUSH
40156: LD_VAR 0 7
40160: PUSH
40161: LD_INT 2
40163: MUL
40164: ST_TO_ADDR
40165: GO 40193
// if amount > max then
40167: LD_VAR 0 9
40171: PUSH
40172: LD_VAR 0 4
40176: GREATER
40177: IFFALSE 40193
// r := r / 2 ;
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 7
40188: PUSH
40189: LD_INT 2
40191: DIVREAL
40192: ST_TO_ADDR
// time := time / r ;
40193: LD_ADDR_VAR 0 8
40197: PUSH
40198: LD_VAR 0 8
40202: PUSH
40203: LD_VAR 0 7
40207: DIVREAL
40208: ST_TO_ADDR
// if time < 0 then
40209: LD_VAR 0 8
40213: PUSH
40214: LD_INT 0
40216: LESS
40217: IFFALSE 40234
// time := time * - 1 ;
40219: LD_ADDR_VAR 0 8
40223: PUSH
40224: LD_VAR 0 8
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: MUL
40233: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40234: LD_VAR 0 8
40238: PUSH
40239: LD_INT 35
40241: PPUSH
40242: LD_INT 875
40244: PPUSH
40245: CALL_OW 12
40249: PLUS
40250: PPUSH
40251: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40255: LD_INT 1
40257: PPUSH
40258: LD_INT 5
40260: PPUSH
40261: CALL_OW 12
40265: PPUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: LD_INT 1
40273: PPUSH
40274: CALL_OW 55
// end ;
40278: GO 40091
// end ;
40280: LD_VAR 0 5
40284: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40285: LD_INT 0
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
// if not turrets or not factories then
40295: LD_VAR 0 1
40299: NOT
40300: PUSH
40301: LD_VAR 0 2
40305: NOT
40306: OR
40307: IFFALSE 40311
// exit ;
40309: GO 40618
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40311: LD_ADDR_VAR 0 10
40315: PUSH
40316: LD_INT 5
40318: PUSH
40319: LD_INT 6
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 4
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: LD_INT 5
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 24
40353: PUSH
40354: LD_INT 25
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 23
40363: PUSH
40364: LD_INT 27
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 42
40377: PUSH
40378: LD_INT 43
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 44
40387: PUSH
40388: LD_INT 46
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 45
40397: PUSH
40398: LD_INT 47
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: ST_TO_ADDR
// result := [ ] ;
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: EMPTY
40421: ST_TO_ADDR
// for i in turrets do
40422: LD_ADDR_VAR 0 4
40426: PUSH
40427: LD_VAR 0 1
40431: PUSH
40432: FOR_IN
40433: IFFALSE 40616
// begin nat := GetNation ( i ) ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: LD_VAR 0 4
40444: PPUSH
40445: CALL_OW 248
40449: ST_TO_ADDR
// weapon := 0 ;
40450: LD_ADDR_VAR 0 8
40454: PUSH
40455: LD_INT 0
40457: ST_TO_ADDR
// if not nat then
40458: LD_VAR 0 7
40462: NOT
40463: IFFALSE 40467
// continue ;
40465: GO 40432
// for j in list [ nat ] do
40467: LD_ADDR_VAR 0 5
40471: PUSH
40472: LD_VAR 0 10
40476: PUSH
40477: LD_VAR 0 7
40481: ARRAY
40482: PUSH
40483: FOR_IN
40484: IFFALSE 40525
// if GetBWeapon ( i ) = j [ 1 ] then
40486: LD_VAR 0 4
40490: PPUSH
40491: CALL_OW 269
40495: PUSH
40496: LD_VAR 0 5
40500: PUSH
40501: LD_INT 1
40503: ARRAY
40504: EQUAL
40505: IFFALSE 40523
// begin weapon := j [ 2 ] ;
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: LD_VAR 0 5
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: ST_TO_ADDR
// break ;
40521: GO 40525
// end ;
40523: GO 40483
40525: POP
40526: POP
// if not weapon then
40527: LD_VAR 0 8
40531: NOT
40532: IFFALSE 40536
// continue ;
40534: GO 40432
// for k in factories do
40536: LD_ADDR_VAR 0 6
40540: PUSH
40541: LD_VAR 0 2
40545: PUSH
40546: FOR_IN
40547: IFFALSE 40612
// begin weapons := AvailableWeaponList ( k ) ;
40549: LD_ADDR_VAR 0 9
40553: PUSH
40554: LD_VAR 0 6
40558: PPUSH
40559: CALL_OW 478
40563: ST_TO_ADDR
// if not weapons then
40564: LD_VAR 0 9
40568: NOT
40569: IFFALSE 40573
// continue ;
40571: GO 40546
// if weapon in weapons then
40573: LD_VAR 0 8
40577: PUSH
40578: LD_VAR 0 9
40582: IN
40583: IFFALSE 40610
// begin result := [ i , weapon ] ;
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_VAR 0 4
40594: PUSH
40595: LD_VAR 0 8
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// exit ;
40604: POP
40605: POP
40606: POP
40607: POP
40608: GO 40618
// end ; end ;
40610: GO 40546
40612: POP
40613: POP
// end ;
40614: GO 40432
40616: POP
40617: POP
// end ;
40618: LD_VAR 0 3
40622: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40623: LD_INT 0
40625: PPUSH
// if not side or side > 8 then
40626: LD_VAR 0 3
40630: NOT
40631: PUSH
40632: LD_VAR 0 3
40636: PUSH
40637: LD_INT 8
40639: GREATER
40640: OR
40641: IFFALSE 40645
// exit ;
40643: GO 40704
// if not range then
40645: LD_VAR 0 4
40649: NOT
40650: IFFALSE 40661
// range := - 12 ;
40652: LD_ADDR_VAR 0 4
40656: PUSH
40657: LD_INT 12
40659: NEG
40660: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40661: LD_VAR 0 1
40665: PPUSH
40666: LD_VAR 0 2
40670: PPUSH
40671: LD_VAR 0 3
40675: PPUSH
40676: LD_VAR 0 4
40680: PPUSH
40681: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40685: LD_VAR 0 1
40689: PPUSH
40690: LD_VAR 0 2
40694: PPUSH
40695: LD_VAR 0 3
40699: PPUSH
40700: CALL_OW 331
// end ;
40704: LD_VAR 0 5
40708: RET
// export function Video ( mode ) ; begin
40709: LD_INT 0
40711: PPUSH
// ingame_video = mode ;
40712: LD_ADDR_OWVAR 52
40716: PUSH
40717: LD_VAR 0 1
40721: ST_TO_ADDR
// interface_hidden = mode ;
40722: LD_ADDR_OWVAR 54
40726: PUSH
40727: LD_VAR 0 1
40731: ST_TO_ADDR
// end ;
40732: LD_VAR 0 2
40736: RET
// export function Join ( array , element ) ; begin
40737: LD_INT 0
40739: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: LD_VAR 0 1
40754: PUSH
40755: LD_INT 1
40757: PLUS
40758: PPUSH
40759: LD_VAR 0 2
40763: PPUSH
40764: CALL_OW 1
40768: ST_TO_ADDR
// end ;
40769: LD_VAR 0 3
40773: RET
// export function JoinUnion ( array , element ) ; begin
40774: LD_INT 0
40776: PPUSH
// result := array union element ;
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_VAR 0 1
40786: PUSH
40787: LD_VAR 0 2
40791: UNION
40792: ST_TO_ADDR
// end ;
40793: LD_VAR 0 3
40797: RET
// export function GetBehemoths ( side ) ; begin
40798: LD_INT 0
40800: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40801: LD_ADDR_VAR 0 2
40805: PUSH
40806: LD_INT 22
40808: PUSH
40809: LD_VAR 0 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 31
40820: PUSH
40821: LD_INT 25
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PPUSH
40832: CALL_OW 69
40836: ST_TO_ADDR
// end ;
40837: LD_VAR 0 2
40841: RET
// export function Shuffle ( array ) ; var i , index ; begin
40842: LD_INT 0
40844: PPUSH
40845: PPUSH
40846: PPUSH
// result := [ ] ;
40847: LD_ADDR_VAR 0 2
40851: PUSH
40852: EMPTY
40853: ST_TO_ADDR
// if not array then
40854: LD_VAR 0 1
40858: NOT
40859: IFFALSE 40863
// exit ;
40861: GO 40962
// Randomize ;
40863: CALL_OW 10
// for i = array downto 1 do
40867: LD_ADDR_VAR 0 3
40871: PUSH
40872: DOUBLE
40873: LD_VAR 0 1
40877: INC
40878: ST_TO_ADDR
40879: LD_INT 1
40881: PUSH
40882: FOR_DOWNTO
40883: IFFALSE 40960
// begin index := rand ( 1 , array ) ;
40885: LD_ADDR_VAR 0 4
40889: PUSH
40890: LD_INT 1
40892: PPUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 12
40902: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40903: LD_ADDR_VAR 0 2
40907: PUSH
40908: LD_VAR 0 2
40912: PPUSH
40913: LD_VAR 0 2
40917: PUSH
40918: LD_INT 1
40920: PLUS
40921: PPUSH
40922: LD_VAR 0 1
40926: PUSH
40927: LD_VAR 0 4
40931: ARRAY
40932: PPUSH
40933: CALL_OW 2
40937: ST_TO_ADDR
// array := Delete ( array , index ) ;
40938: LD_ADDR_VAR 0 1
40942: PUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: LD_VAR 0 4
40952: PPUSH
40953: CALL_OW 3
40957: ST_TO_ADDR
// end ;
40958: GO 40882
40960: POP
40961: POP
// end ;
40962: LD_VAR 0 2
40966: RET
// export function GetBaseMaterials ( base ) ; begin
40967: LD_INT 0
40969: PPUSH
// result := [ 0 , 0 , 0 ] ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// if not base then
40989: LD_VAR 0 1
40993: NOT
40994: IFFALSE 40998
// exit ;
40996: GO 41047
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40998: LD_ADDR_VAR 0 2
41002: PUSH
41003: LD_VAR 0 1
41007: PPUSH
41008: LD_INT 1
41010: PPUSH
41011: CALL_OW 275
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: LD_INT 2
41023: PPUSH
41024: CALL_OW 275
41028: PUSH
41029: LD_VAR 0 1
41033: PPUSH
41034: LD_INT 3
41036: PPUSH
41037: CALL_OW 275
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// end ;
41047: LD_VAR 0 2
41051: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41052: LD_INT 0
41054: PPUSH
41055: PPUSH
// result := array ;
41056: LD_ADDR_VAR 0 3
41060: PUSH
41061: LD_VAR 0 1
41065: ST_TO_ADDR
// if size >= result then
41066: LD_VAR 0 2
41070: PUSH
41071: LD_VAR 0 3
41075: GREATEREQUAL
41076: IFFALSE 41080
// exit ;
41078: GO 41130
// if size then
41080: LD_VAR 0 2
41084: IFFALSE 41130
// for i := array downto size do
41086: LD_ADDR_VAR 0 4
41090: PUSH
41091: DOUBLE
41092: LD_VAR 0 1
41096: INC
41097: ST_TO_ADDR
41098: LD_VAR 0 2
41102: PUSH
41103: FOR_DOWNTO
41104: IFFALSE 41128
// result := Delete ( result , result ) ;
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_VAR 0 3
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: CALL_OW 3
41125: ST_TO_ADDR
41126: GO 41103
41128: POP
41129: POP
// end ;
41130: LD_VAR 0 3
41134: RET
// export function ComExit ( unit ) ; var tmp ; begin
41135: LD_INT 0
41137: PPUSH
41138: PPUSH
// if not IsInUnit ( unit ) then
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 310
41148: NOT
41149: IFFALSE 41153
// exit ;
41151: GO 41213
// tmp := IsInUnit ( unit ) ;
41153: LD_ADDR_VAR 0 3
41157: PUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 310
41167: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41168: LD_VAR 0 3
41172: PPUSH
41173: CALL_OW 247
41177: PUSH
41178: LD_INT 2
41180: EQUAL
41181: IFFALSE 41194
// ComExitVehicle ( unit ) else
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 121
41192: GO 41203
// ComExitBuilding ( unit ) ;
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 122
// result := tmp ;
41203: LD_ADDR_VAR 0 2
41207: PUSH
41208: LD_VAR 0 3
41212: ST_TO_ADDR
// end ;
41213: LD_VAR 0 2
41217: RET
// export function ComExitAll ( units ) ; var i ; begin
41218: LD_INT 0
41220: PPUSH
41221: PPUSH
// if not units then
41222: LD_VAR 0 1
41226: NOT
41227: IFFALSE 41231
// exit ;
41229: GO 41257
// for i in units do
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: FOR_IN
41242: IFFALSE 41255
// ComExit ( i ) ;
41244: LD_VAR 0 3
41248: PPUSH
41249: CALL 41135 0 1
41253: GO 41241
41255: POP
41256: POP
// end ;
41257: LD_VAR 0 2
41261: RET
// export function ResetHc ; begin
41262: LD_INT 0
41264: PPUSH
// InitHc ;
41265: CALL_OW 19
// hc_importance := 0 ;
41269: LD_ADDR_OWVAR 32
41273: PUSH
41274: LD_INT 0
41276: ST_TO_ADDR
// end ;
41277: LD_VAR 0 1
41281: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41282: LD_INT 0
41284: PPUSH
41285: PPUSH
41286: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41287: LD_ADDR_VAR 0 6
41291: PUSH
41292: LD_VAR 0 1
41296: PUSH
41297: LD_VAR 0 3
41301: PLUS
41302: PUSH
41303: LD_INT 2
41305: DIV
41306: ST_TO_ADDR
// if _x < 0 then
41307: LD_VAR 0 6
41311: PUSH
41312: LD_INT 0
41314: LESS
41315: IFFALSE 41332
// _x := _x * - 1 ;
41317: LD_ADDR_VAR 0 6
41321: PUSH
41322: LD_VAR 0 6
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: MUL
41331: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41332: LD_ADDR_VAR 0 7
41336: PUSH
41337: LD_VAR 0 2
41341: PUSH
41342: LD_VAR 0 4
41346: PLUS
41347: PUSH
41348: LD_INT 2
41350: DIV
41351: ST_TO_ADDR
// if _y < 0 then
41352: LD_VAR 0 7
41356: PUSH
41357: LD_INT 0
41359: LESS
41360: IFFALSE 41377
// _y := _y * - 1 ;
41362: LD_ADDR_VAR 0 7
41366: PUSH
41367: LD_VAR 0 7
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: MUL
41376: ST_TO_ADDR
// result := [ _x , _y ] ;
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: LD_VAR 0 6
41386: PUSH
41387: LD_VAR 0 7
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 5
41400: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
// task := GetTaskList ( unit ) ;
41407: LD_ADDR_VAR 0 7
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 437
41421: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41422: LD_VAR 0 7
41426: NOT
41427: PUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: LD_VAR 0 2
41437: PPUSH
41438: CALL_OW 308
41442: NOT
41443: AND
41444: IFFALSE 41448
// exit ;
41446: GO 41566
// if IsInArea ( unit , area ) then
41448: LD_VAR 0 1
41452: PPUSH
41453: LD_VAR 0 2
41457: PPUSH
41458: CALL_OW 308
41462: IFFALSE 41480
// begin ComMoveToArea ( unit , goAway ) ;
41464: LD_VAR 0 1
41468: PPUSH
41469: LD_VAR 0 3
41473: PPUSH
41474: CALL_OW 113
// exit ;
41478: GO 41566
// end ; if task [ 1 ] [ 1 ] <> M then
41480: LD_VAR 0 7
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PUSH
41493: LD_STRING M
41495: NONEQUAL
41496: IFFALSE 41500
// exit ;
41498: GO 41566
// x := task [ 1 ] [ 2 ] ;
41500: LD_ADDR_VAR 0 5
41504: PUSH
41505: LD_VAR 0 7
41509: PUSH
41510: LD_INT 1
41512: ARRAY
41513: PUSH
41514: LD_INT 2
41516: ARRAY
41517: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41518: LD_ADDR_VAR 0 6
41522: PUSH
41523: LD_VAR 0 7
41527: PUSH
41528: LD_INT 1
41530: ARRAY
41531: PUSH
41532: LD_INT 3
41534: ARRAY
41535: ST_TO_ADDR
// if InArea ( x , y , area ) then
41536: LD_VAR 0 5
41540: PPUSH
41541: LD_VAR 0 6
41545: PPUSH
41546: LD_VAR 0 2
41550: PPUSH
41551: CALL_OW 309
41555: IFFALSE 41566
// ComStop ( unit ) ;
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 141
// end ;
41566: LD_VAR 0 4
41570: RET
// export function Abs ( value ) ; begin
41571: LD_INT 0
41573: PPUSH
// result := value ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: ST_TO_ADDR
// if value < 0 then
41584: LD_VAR 0 1
41588: PUSH
41589: LD_INT 0
41591: LESS
41592: IFFALSE 41609
// result := value * - 1 ;
41594: LD_ADDR_VAR 0 2
41598: PUSH
41599: LD_VAR 0 1
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: MUL
41608: ST_TO_ADDR
// end ;
41609: LD_VAR 0 2
41613: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41614: LD_INT 0
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
// if not unit or not building then
41624: LD_VAR 0 1
41628: NOT
41629: PUSH
41630: LD_VAR 0 2
41634: NOT
41635: OR
41636: IFFALSE 41640
// exit ;
41638: GO 41866
// x := GetX ( building ) ;
41640: LD_ADDR_VAR 0 4
41644: PUSH
41645: LD_VAR 0 2
41649: PPUSH
41650: CALL_OW 250
41654: ST_TO_ADDR
// y := GetY ( building ) ;
41655: LD_ADDR_VAR 0 6
41659: PUSH
41660: LD_VAR 0 2
41664: PPUSH
41665: CALL_OW 251
41669: ST_TO_ADDR
// d := GetDir ( building ) ;
41670: LD_ADDR_VAR 0 8
41674: PUSH
41675: LD_VAR 0 2
41679: PPUSH
41680: CALL_OW 254
41684: ST_TO_ADDR
// r := 4 ;
41685: LD_ADDR_VAR 0 9
41689: PUSH
41690: LD_INT 4
41692: ST_TO_ADDR
// for i := 1 to 5 do
41693: LD_ADDR_VAR 0 10
41697: PUSH
41698: DOUBLE
41699: LD_INT 1
41701: DEC
41702: ST_TO_ADDR
41703: LD_INT 5
41705: PUSH
41706: FOR_TO
41707: IFFALSE 41864
// begin _x := ShiftX ( x , d , r + i ) ;
41709: LD_ADDR_VAR 0 5
41713: PUSH
41714: LD_VAR 0 4
41718: PPUSH
41719: LD_VAR 0 8
41723: PPUSH
41724: LD_VAR 0 9
41728: PUSH
41729: LD_VAR 0 10
41733: PLUS
41734: PPUSH
41735: CALL_OW 272
41739: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41740: LD_ADDR_VAR 0 7
41744: PUSH
41745: LD_VAR 0 6
41749: PPUSH
41750: LD_VAR 0 8
41754: PPUSH
41755: LD_VAR 0 9
41759: PUSH
41760: LD_VAR 0 10
41764: PLUS
41765: PPUSH
41766: CALL_OW 273
41770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41771: LD_VAR 0 5
41775: PPUSH
41776: LD_VAR 0 7
41780: PPUSH
41781: CALL_OW 488
41785: PUSH
41786: LD_VAR 0 5
41790: PPUSH
41791: LD_VAR 0 7
41795: PPUSH
41796: CALL_OW 428
41800: PPUSH
41801: CALL_OW 247
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: IN
41816: NOT
41817: AND
41818: IFFALSE 41862
// begin ComMoveXY ( unit , _x , _y ) ;
41820: LD_VAR 0 1
41824: PPUSH
41825: LD_VAR 0 5
41829: PPUSH
41830: LD_VAR 0 7
41834: PPUSH
41835: CALL_OW 111
// result := [ _x , _y ] ;
41839: LD_ADDR_VAR 0 3
41843: PUSH
41844: LD_VAR 0 5
41848: PUSH
41849: LD_VAR 0 7
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// exit ;
41858: POP
41859: POP
41860: GO 41866
// end ; end ;
41862: GO 41706
41864: POP
41865: POP
// end ;
41866: LD_VAR 0 3
41870: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41871: LD_INT 0
41873: PPUSH
41874: PPUSH
41875: PPUSH
// result := 0 ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 0
41883: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41884: LD_VAR 0 1
41888: PUSH
41889: LD_INT 0
41891: LESS
41892: PUSH
41893: LD_VAR 0 1
41897: PUSH
41898: LD_INT 8
41900: GREATER
41901: OR
41902: PUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_INT 0
41910: LESS
41911: OR
41912: PUSH
41913: LD_VAR 0 2
41917: PUSH
41918: LD_INT 8
41920: GREATER
41921: OR
41922: IFFALSE 41926
// exit ;
41924: GO 42001
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41926: LD_ADDR_VAR 0 4
41930: PUSH
41931: LD_INT 22
41933: PUSH
41934: LD_VAR 0 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PPUSH
41943: CALL_OW 69
41947: PUSH
41948: FOR_IN
41949: IFFALSE 41999
// begin un := UnitShoot ( i ) ;
41951: LD_ADDR_VAR 0 5
41955: PUSH
41956: LD_VAR 0 4
41960: PPUSH
41961: CALL_OW 504
41965: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41966: LD_VAR 0 5
41970: PPUSH
41971: CALL_OW 255
41975: PUSH
41976: LD_VAR 0 1
41980: EQUAL
41981: IFFALSE 41997
// begin result := un ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_VAR 0 5
41992: ST_TO_ADDR
// exit ;
41993: POP
41994: POP
41995: GO 42001
// end ; end ;
41997: GO 41948
41999: POP
42000: POP
// end ;
42001: LD_VAR 0 3
42005: RET
// export function GetCargoBay ( units ) ; begin
42006: LD_INT 0
42008: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42009: LD_ADDR_VAR 0 2
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 34
42024: PUSH
42025: LD_INT 12
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 34
42034: PUSH
42035: LD_INT 51
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 34
42044: PUSH
42045: LD_INT 32
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 34
42054: PUSH
42055: LD_INT 89
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 72
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 2
42078: RET
// export function Negate ( value ) ; begin
42079: LD_INT 0
42081: PPUSH
// result := not value ;
42082: LD_ADDR_VAR 0 2
42086: PUSH
42087: LD_VAR 0 1
42091: NOT
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 2
42097: RET
// export function Inc ( value ) ; begin
42098: LD_INT 0
42100: PPUSH
// result := value + 1 ;
42101: LD_ADDR_VAR 0 2
42105: PUSH
42106: LD_VAR 0 1
42110: PUSH
42111: LD_INT 1
42113: PLUS
42114: ST_TO_ADDR
// end ;
42115: LD_VAR 0 2
42119: RET
// export function Dec ( value ) ; begin
42120: LD_INT 0
42122: PPUSH
// result := value - 1 ;
42123: LD_ADDR_VAR 0 2
42127: PUSH
42128: LD_VAR 0 1
42132: PUSH
42133: LD_INT 1
42135: MINUS
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 2
42141: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42142: LD_INT 0
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
42148: PPUSH
42149: PPUSH
42150: PPUSH
42151: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42152: LD_VAR 0 1
42156: PPUSH
42157: LD_VAR 0 2
42161: PPUSH
42162: CALL_OW 488
42166: NOT
42167: PUSH
42168: LD_VAR 0 3
42172: PPUSH
42173: LD_VAR 0 4
42177: PPUSH
42178: CALL_OW 488
42182: NOT
42183: OR
42184: IFFALSE 42197
// begin result := - 1 ;
42186: LD_ADDR_VAR 0 5
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: ST_TO_ADDR
// exit ;
42195: GO 42432
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42197: LD_ADDR_VAR 0 12
42201: PUSH
42202: LD_VAR 0 1
42206: PPUSH
42207: LD_VAR 0 2
42211: PPUSH
42212: LD_VAR 0 3
42216: PPUSH
42217: LD_VAR 0 4
42221: PPUSH
42222: CALL 41282 0 4
42226: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42227: LD_ADDR_VAR 0 11
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 12
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: PPUSH
42251: LD_VAR 0 12
42255: PUSH
42256: LD_INT 2
42258: ARRAY
42259: PPUSH
42260: CALL_OW 298
42264: ST_TO_ADDR
// distance := 9999 ;
42265: LD_ADDR_VAR 0 10
42269: PUSH
42270: LD_INT 9999
42272: ST_TO_ADDR
// for i := 0 to 5 do
42273: LD_ADDR_VAR 0 6
42277: PUSH
42278: DOUBLE
42279: LD_INT 0
42281: DEC
42282: ST_TO_ADDR
42283: LD_INT 5
42285: PUSH
42286: FOR_TO
42287: IFFALSE 42430
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42289: LD_ADDR_VAR 0 7
42293: PUSH
42294: LD_VAR 0 1
42298: PPUSH
42299: LD_VAR 0 6
42303: PPUSH
42304: LD_VAR 0 11
42308: PPUSH
42309: CALL_OW 272
42313: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42314: LD_ADDR_VAR 0 8
42318: PUSH
42319: LD_VAR 0 2
42323: PPUSH
42324: LD_VAR 0 6
42328: PPUSH
42329: LD_VAR 0 11
42333: PPUSH
42334: CALL_OW 273
42338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42339: LD_VAR 0 7
42343: PPUSH
42344: LD_VAR 0 8
42348: PPUSH
42349: CALL_OW 488
42353: NOT
42354: IFFALSE 42358
// continue ;
42356: GO 42286
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42358: LD_ADDR_VAR 0 9
42362: PUSH
42363: LD_VAR 0 12
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 12
42376: PUSH
42377: LD_INT 2
42379: ARRAY
42380: PPUSH
42381: LD_VAR 0 7
42385: PPUSH
42386: LD_VAR 0 8
42390: PPUSH
42391: CALL_OW 298
42395: ST_TO_ADDR
// if tmp < distance then
42396: LD_VAR 0 9
42400: PUSH
42401: LD_VAR 0 10
42405: LESS
42406: IFFALSE 42428
// begin result := i ;
42408: LD_ADDR_VAR 0 5
42412: PUSH
42413: LD_VAR 0 6
42417: ST_TO_ADDR
// distance := tmp ;
42418: LD_ADDR_VAR 0 10
42422: PUSH
42423: LD_VAR 0 9
42427: ST_TO_ADDR
// end ; end ;
42428: GO 42286
42430: POP
42431: POP
// end ;
42432: LD_VAR 0 5
42436: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42437: LD_INT 0
42439: PPUSH
42440: PPUSH
// if not driver or not IsInUnit ( driver ) then
42441: LD_VAR 0 1
42445: NOT
42446: PUSH
42447: LD_VAR 0 1
42451: PPUSH
42452: CALL_OW 310
42456: NOT
42457: OR
42458: IFFALSE 42462
// exit ;
42460: GO 42552
// vehicle := IsInUnit ( driver ) ;
42462: LD_ADDR_VAR 0 3
42466: PUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 310
42476: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42477: LD_VAR 0 1
42481: PPUSH
42482: LD_STRING \
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: PUSH
42512: LD_STRING E
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_VAR 0 3
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PPUSH
42548: CALL_OW 446
// end ;
42552: LD_VAR 0 2
42556: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42557: LD_INT 0
42559: PPUSH
42560: PPUSH
// if not driver or not IsInUnit ( driver ) then
42561: LD_VAR 0 1
42565: NOT
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 310
42576: NOT
42577: OR
42578: IFFALSE 42582
// exit ;
42580: GO 42672
// vehicle := IsInUnit ( driver ) ;
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_VAR 0 1
42591: PPUSH
42592: CALL_OW 310
42596: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42597: LD_VAR 0 1
42601: PPUSH
42602: LD_STRING \
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: PUSH
42632: LD_STRING E
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_VAR 0 3
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PPUSH
42668: CALL_OW 447
// end ;
42672: LD_VAR 0 2
42676: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42677: LD_INT 0
42679: PPUSH
42680: PPUSH
42681: PPUSH
// tmp := [ ] ;
42682: LD_ADDR_VAR 0 5
42686: PUSH
42687: EMPTY
42688: ST_TO_ADDR
// for i in units do
42689: LD_ADDR_VAR 0 4
42693: PUSH
42694: LD_VAR 0 1
42698: PUSH
42699: FOR_IN
42700: IFFALSE 42738
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42702: LD_ADDR_VAR 0 5
42706: PUSH
42707: LD_VAR 0 5
42711: PPUSH
42712: LD_VAR 0 5
42716: PUSH
42717: LD_INT 1
42719: PLUS
42720: PPUSH
42721: LD_VAR 0 4
42725: PPUSH
42726: CALL_OW 256
42730: PPUSH
42731: CALL_OW 2
42735: ST_TO_ADDR
42736: GO 42699
42738: POP
42739: POP
// if not tmp then
42740: LD_VAR 0 5
42744: NOT
42745: IFFALSE 42749
// exit ;
42747: GO 42797
// if asc then
42749: LD_VAR 0 2
42753: IFFALSE 42777
// result := SortListByListAsc ( units , tmp ) else
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: CALL_OW 76
42774: ST_TO_ADDR
42775: GO 42797
// result := SortListByListDesc ( units , tmp ) ;
42777: LD_ADDR_VAR 0 3
42781: PUSH
42782: LD_VAR 0 1
42786: PPUSH
42787: LD_VAR 0 5
42791: PPUSH
42792: CALL_OW 77
42796: ST_TO_ADDR
// end ;
42797: LD_VAR 0 3
42801: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42802: LD_INT 0
42804: PPUSH
42805: PPUSH
// task := GetTaskList ( mech ) ;
42806: LD_ADDR_VAR 0 4
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 437
42820: ST_TO_ADDR
// if not task then
42821: LD_VAR 0 4
42825: NOT
42826: IFFALSE 42830
// exit ;
42828: GO 42872
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_VAR 0 4
42839: PUSH
42840: LD_INT 1
42842: ARRAY
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PUSH
42848: LD_STRING r
42850: EQUAL
42851: PUSH
42852: LD_VAR 0 4
42856: PUSH
42857: LD_INT 1
42859: ARRAY
42860: PUSH
42861: LD_INT 4
42863: ARRAY
42864: PUSH
42865: LD_VAR 0 2
42869: EQUAL
42870: AND
42871: ST_TO_ADDR
// end ;
42872: LD_VAR 0 3
42876: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42877: LD_INT 0
42879: PPUSH
// SetDir ( unit , d ) ;
42880: LD_VAR 0 1
42884: PPUSH
42885: LD_VAR 0 4
42889: PPUSH
42890: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42894: LD_ADDR_VAR 0 6
42898: PUSH
42899: LD_VAR 0 1
42903: PPUSH
42904: LD_VAR 0 2
42908: PPUSH
42909: LD_VAR 0 3
42913: PPUSH
42914: LD_VAR 0 5
42918: PPUSH
42919: CALL_OW 48
42923: ST_TO_ADDR
// end ;
42924: LD_VAR 0 6
42928: RET
// export function ToNaturalNumber ( number ) ; begin
42929: LD_INT 0
42931: PPUSH
// result := number div 1 ;
42932: LD_ADDR_VAR 0 2
42936: PUSH
42937: LD_VAR 0 1
42941: PUSH
42942: LD_INT 1
42944: DIV
42945: ST_TO_ADDR
// if number < 0 then
42946: LD_VAR 0 1
42950: PUSH
42951: LD_INT 0
42953: LESS
42954: IFFALSE 42964
// result := 0 ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_INT 0
42963: ST_TO_ADDR
// end ;
42964: LD_VAR 0 2
42968: RET
// export function SortByClass ( units , class ) ; var un ; begin
42969: LD_INT 0
42971: PPUSH
42972: PPUSH
// if not units or not class then
42973: LD_VAR 0 1
42977: NOT
42978: PUSH
42979: LD_VAR 0 2
42983: NOT
42984: OR
42985: IFFALSE 42989
// exit ;
42987: GO 43084
// result := [ ] ;
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: EMPTY
42995: ST_TO_ADDR
// for un in units do
42996: LD_ADDR_VAR 0 4
43000: PUSH
43001: LD_VAR 0 1
43005: PUSH
43006: FOR_IN
43007: IFFALSE 43082
// if GetClass ( un ) = class then
43009: LD_VAR 0 4
43013: PPUSH
43014: CALL_OW 257
43018: PUSH
43019: LD_VAR 0 2
43023: EQUAL
43024: IFFALSE 43051
// result := Insert ( result , 1 , un ) else
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_VAR 0 3
43035: PPUSH
43036: LD_INT 1
43038: PPUSH
43039: LD_VAR 0 4
43043: PPUSH
43044: CALL_OW 2
43048: ST_TO_ADDR
43049: GO 43080
// result := Replace ( result , result + 1 , un ) ;
43051: LD_ADDR_VAR 0 3
43055: PUSH
43056: LD_VAR 0 3
43060: PPUSH
43061: LD_VAR 0 3
43065: PUSH
43066: LD_INT 1
43068: PLUS
43069: PPUSH
43070: LD_VAR 0 4
43074: PPUSH
43075: CALL_OW 1
43079: ST_TO_ADDR
43080: GO 43006
43082: POP
43083: POP
// end ;
43084: LD_VAR 0 3
43088: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43089: LD_INT 0
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
// result := [ ] ;
43098: LD_ADDR_VAR 0 4
43102: PUSH
43103: EMPTY
43104: ST_TO_ADDR
// if x - r < 0 then
43105: LD_VAR 0 1
43109: PUSH
43110: LD_VAR 0 3
43114: MINUS
43115: PUSH
43116: LD_INT 0
43118: LESS
43119: IFFALSE 43131
// min_x := 0 else
43121: LD_ADDR_VAR 0 8
43125: PUSH
43126: LD_INT 0
43128: ST_TO_ADDR
43129: GO 43147
// min_x := x - r ;
43131: LD_ADDR_VAR 0 8
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_VAR 0 3
43145: MINUS
43146: ST_TO_ADDR
// if y - r < 0 then
43147: LD_VAR 0 2
43151: PUSH
43152: LD_VAR 0 3
43156: MINUS
43157: PUSH
43158: LD_INT 0
43160: LESS
43161: IFFALSE 43173
// min_y := 0 else
43163: LD_ADDR_VAR 0 7
43167: PUSH
43168: LD_INT 0
43170: ST_TO_ADDR
43171: GO 43189
// min_y := y - r ;
43173: LD_ADDR_VAR 0 7
43177: PUSH
43178: LD_VAR 0 2
43182: PUSH
43183: LD_VAR 0 3
43187: MINUS
43188: ST_TO_ADDR
// max_x := x + r ;
43189: LD_ADDR_VAR 0 9
43193: PUSH
43194: LD_VAR 0 1
43198: PUSH
43199: LD_VAR 0 3
43203: PLUS
43204: ST_TO_ADDR
// max_y := y + r ;
43205: LD_ADDR_VAR 0 10
43209: PUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_VAR 0 3
43219: PLUS
43220: ST_TO_ADDR
// for _x = min_x to max_x do
43221: LD_ADDR_VAR 0 5
43225: PUSH
43226: DOUBLE
43227: LD_VAR 0 8
43231: DEC
43232: ST_TO_ADDR
43233: LD_VAR 0 9
43237: PUSH
43238: FOR_TO
43239: IFFALSE 43340
// for _y = min_y to max_y do
43241: LD_ADDR_VAR 0 6
43245: PUSH
43246: DOUBLE
43247: LD_VAR 0 7
43251: DEC
43252: ST_TO_ADDR
43253: LD_VAR 0 10
43257: PUSH
43258: FOR_TO
43259: IFFALSE 43336
// begin if not ValidHex ( _x , _y ) then
43261: LD_VAR 0 5
43265: PPUSH
43266: LD_VAR 0 6
43270: PPUSH
43271: CALL_OW 488
43275: NOT
43276: IFFALSE 43280
// continue ;
43278: GO 43258
// if GetResourceTypeXY ( _x , _y ) then
43280: LD_VAR 0 5
43284: PPUSH
43285: LD_VAR 0 6
43289: PPUSH
43290: CALL_OW 283
43294: IFFALSE 43334
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43296: LD_ADDR_VAR 0 4
43300: PUSH
43301: LD_VAR 0 4
43305: PPUSH
43306: LD_VAR 0 4
43310: PUSH
43311: LD_INT 1
43313: PLUS
43314: PPUSH
43315: LD_VAR 0 5
43319: PUSH
43320: LD_VAR 0 6
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PPUSH
43329: CALL_OW 1
43333: ST_TO_ADDR
// end ;
43334: GO 43258
43336: POP
43337: POP
43338: GO 43238
43340: POP
43341: POP
// end ;
43342: LD_VAR 0 4
43346: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43347: LD_INT 0
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
// if not units then
43357: LD_VAR 0 1
43361: NOT
43362: IFFALSE 43366
// exit ;
43364: GO 43894
// result := UnitFilter ( units , [ f_ok ] ) ;
43366: LD_ADDR_VAR 0 3
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: LD_INT 50
43378: PUSH
43379: EMPTY
43380: LIST
43381: PPUSH
43382: CALL_OW 72
43386: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43387: LD_ADDR_VAR 0 8
43391: PUSH
43392: LD_VAR 0 1
43396: PUSH
43397: LD_INT 1
43399: ARRAY
43400: PPUSH
43401: CALL_OW 255
43405: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43406: LD_ADDR_VAR 0 10
43410: PUSH
43411: LD_INT 29
43413: PUSH
43414: LD_INT 91
43416: PUSH
43417: LD_INT 49
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// if not result then
43425: LD_VAR 0 3
43429: NOT
43430: IFFALSE 43434
// exit ;
43432: GO 43894
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43434: LD_ADDR_VAR 0 5
43438: PUSH
43439: LD_INT 81
43441: PUSH
43442: LD_VAR 0 8
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PPUSH
43451: CALL_OW 69
43455: ST_TO_ADDR
// for i in result do
43456: LD_ADDR_VAR 0 4
43460: PUSH
43461: LD_VAR 0 3
43465: PUSH
43466: FOR_IN
43467: IFFALSE 43892
// begin tag := GetTag ( i ) + 1 ;
43469: LD_ADDR_VAR 0 9
43473: PUSH
43474: LD_VAR 0 4
43478: PPUSH
43479: CALL_OW 110
43483: PUSH
43484: LD_INT 1
43486: PLUS
43487: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43488: LD_ADDR_VAR 0 7
43492: PUSH
43493: LD_VAR 0 4
43497: PPUSH
43498: CALL_OW 250
43502: PPUSH
43503: LD_VAR 0 4
43507: PPUSH
43508: CALL_OW 251
43512: PPUSH
43513: LD_INT 4
43515: PPUSH
43516: CALL 43089 0 3
43520: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43521: LD_VAR 0 4
43525: PPUSH
43526: CALL_OW 247
43530: PUSH
43531: LD_INT 2
43533: EQUAL
43534: PUSH
43535: LD_VAR 0 7
43539: PUSH
43540: LD_INT 2
43542: GREATER
43543: AND
43544: PUSH
43545: LD_VAR 0 4
43549: PPUSH
43550: CALL_OW 264
43554: PUSH
43555: LD_VAR 0 10
43559: IN
43560: NOT
43561: AND
43562: IFFALSE 43601
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43564: LD_VAR 0 4
43568: PPUSH
43569: LD_VAR 0 7
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PUSH
43578: LD_INT 1
43580: ARRAY
43581: PPUSH
43582: LD_VAR 0 7
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: PUSH
43591: LD_INT 2
43593: ARRAY
43594: PPUSH
43595: CALL_OW 116
43599: GO 43890
// if path > tag then
43601: LD_VAR 0 2
43605: PUSH
43606: LD_VAR 0 9
43610: GREATER
43611: IFFALSE 43819
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43613: LD_ADDR_VAR 0 6
43617: PUSH
43618: LD_VAR 0 5
43622: PPUSH
43623: LD_INT 91
43625: PUSH
43626: LD_VAR 0 4
43630: PUSH
43631: LD_INT 8
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: PPUSH
43639: CALL_OW 72
43643: ST_TO_ADDR
// if nearEnemy then
43644: LD_VAR 0 6
43648: IFFALSE 43717
// begin if GetWeapon ( i ) = ru_time_lapser then
43650: LD_VAR 0 4
43654: PPUSH
43655: CALL_OW 264
43659: PUSH
43660: LD_INT 49
43662: EQUAL
43663: IFFALSE 43691
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43665: LD_VAR 0 4
43669: PPUSH
43670: LD_VAR 0 6
43674: PPUSH
43675: LD_VAR 0 4
43679: PPUSH
43680: CALL_OW 74
43684: PPUSH
43685: CALL_OW 112
43689: GO 43715
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43691: LD_VAR 0 4
43695: PPUSH
43696: LD_VAR 0 6
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: CALL_OW 74
43710: PPUSH
43711: CALL 44965 0 2
// end else
43715: GO 43817
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43717: LD_VAR 0 4
43721: PPUSH
43722: LD_VAR 0 2
43726: PUSH
43727: LD_VAR 0 9
43731: ARRAY
43732: PUSH
43733: LD_INT 1
43735: ARRAY
43736: PPUSH
43737: LD_VAR 0 2
43741: PUSH
43742: LD_VAR 0 9
43746: ARRAY
43747: PUSH
43748: LD_INT 2
43750: ARRAY
43751: PPUSH
43752: CALL_OW 297
43756: PUSH
43757: LD_INT 6
43759: GREATER
43760: IFFALSE 43803
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43762: LD_VAR 0 4
43766: PPUSH
43767: LD_VAR 0 2
43771: PUSH
43772: LD_VAR 0 9
43776: ARRAY
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PPUSH
43782: LD_VAR 0 2
43786: PUSH
43787: LD_VAR 0 9
43791: ARRAY
43792: PUSH
43793: LD_INT 2
43795: ARRAY
43796: PPUSH
43797: CALL_OW 114
43801: GO 43817
// SetTag ( i , tag ) ;
43803: LD_VAR 0 4
43807: PPUSH
43808: LD_VAR 0 9
43812: PPUSH
43813: CALL_OW 109
// end else
43817: GO 43890
// if enemy then
43819: LD_VAR 0 5
43823: IFFALSE 43890
// begin if GetWeapon ( i ) = ru_time_lapser then
43825: LD_VAR 0 4
43829: PPUSH
43830: CALL_OW 264
43834: PUSH
43835: LD_INT 49
43837: EQUAL
43838: IFFALSE 43866
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43840: LD_VAR 0 4
43844: PPUSH
43845: LD_VAR 0 5
43849: PPUSH
43850: LD_VAR 0 4
43854: PPUSH
43855: CALL_OW 74
43859: PPUSH
43860: CALL_OW 112
43864: GO 43890
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43866: LD_VAR 0 4
43870: PPUSH
43871: LD_VAR 0 5
43875: PPUSH
43876: LD_VAR 0 4
43880: PPUSH
43881: CALL_OW 74
43885: PPUSH
43886: CALL 44965 0 2
// end ; end ;
43890: GO 43466
43892: POP
43893: POP
// end ;
43894: LD_VAR 0 3
43898: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43899: LD_INT 0
43901: PPUSH
43902: PPUSH
43903: PPUSH
// if not unit or IsInUnit ( unit ) then
43904: LD_VAR 0 1
43908: NOT
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 310
43919: OR
43920: IFFALSE 43924
// exit ;
43922: GO 44015
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43924: LD_ADDR_VAR 0 4
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: CALL_OW 250
43938: PPUSH
43939: LD_VAR 0 2
43943: PPUSH
43944: LD_INT 1
43946: PPUSH
43947: CALL_OW 272
43951: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43952: LD_ADDR_VAR 0 5
43956: PUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: CALL_OW 251
43966: PPUSH
43967: LD_VAR 0 2
43971: PPUSH
43972: LD_INT 1
43974: PPUSH
43975: CALL_OW 273
43979: ST_TO_ADDR
// if ValidHex ( x , y ) then
43980: LD_VAR 0 4
43984: PPUSH
43985: LD_VAR 0 5
43989: PPUSH
43990: CALL_OW 488
43994: IFFALSE 44015
// ComTurnXY ( unit , x , y ) ;
43996: LD_VAR 0 1
44000: PPUSH
44001: LD_VAR 0 4
44005: PPUSH
44006: LD_VAR 0 5
44010: PPUSH
44011: CALL_OW 118
// end ;
44015: LD_VAR 0 3
44019: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44020: LD_INT 0
44022: PPUSH
44023: PPUSH
// result := false ;
44024: LD_ADDR_VAR 0 3
44028: PUSH
44029: LD_INT 0
44031: ST_TO_ADDR
// if not units then
44032: LD_VAR 0 2
44036: NOT
44037: IFFALSE 44041
// exit ;
44039: GO 44086
// for i in units do
44041: LD_ADDR_VAR 0 4
44045: PUSH
44046: LD_VAR 0 2
44050: PUSH
44051: FOR_IN
44052: IFFALSE 44084
// if See ( side , i ) then
44054: LD_VAR 0 1
44058: PPUSH
44059: LD_VAR 0 4
44063: PPUSH
44064: CALL_OW 292
44068: IFFALSE 44082
// begin result := true ;
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_INT 1
44077: ST_TO_ADDR
// exit ;
44078: POP
44079: POP
44080: GO 44086
// end ;
44082: GO 44051
44084: POP
44085: POP
// end ;
44086: LD_VAR 0 3
44090: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44091: LD_INT 0
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
// if not unit or not points then
44097: LD_VAR 0 1
44101: NOT
44102: PUSH
44103: LD_VAR 0 2
44107: NOT
44108: OR
44109: IFFALSE 44113
// exit ;
44111: GO 44203
// dist := 99999 ;
44113: LD_ADDR_VAR 0 5
44117: PUSH
44118: LD_INT 99999
44120: ST_TO_ADDR
// for i in points do
44121: LD_ADDR_VAR 0 4
44125: PUSH
44126: LD_VAR 0 2
44130: PUSH
44131: FOR_IN
44132: IFFALSE 44201
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44134: LD_ADDR_VAR 0 6
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: LD_VAR 0 4
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: PPUSH
44153: LD_VAR 0 4
44157: PUSH
44158: LD_INT 2
44160: ARRAY
44161: PPUSH
44162: CALL_OW 297
44166: ST_TO_ADDR
// if tmpDist < dist then
44167: LD_VAR 0 6
44171: PUSH
44172: LD_VAR 0 5
44176: LESS
44177: IFFALSE 44199
// begin result := i ;
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_VAR 0 4
44188: ST_TO_ADDR
// dist := tmpDist ;
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 6
44198: ST_TO_ADDR
// end ; end ;
44199: GO 44131
44201: POP
44202: POP
// end ;
44203: LD_VAR 0 3
44207: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44208: LD_INT 0
44210: PPUSH
// uc_side := side ;
44211: LD_ADDR_OWVAR 20
44215: PUSH
44216: LD_VAR 0 1
44220: ST_TO_ADDR
// uc_nation := 3 ;
44221: LD_ADDR_OWVAR 21
44225: PUSH
44226: LD_INT 3
44228: ST_TO_ADDR
// vc_chassis := 25 ;
44229: LD_ADDR_OWVAR 37
44233: PUSH
44234: LD_INT 25
44236: ST_TO_ADDR
// vc_engine := engine_siberite ;
44237: LD_ADDR_OWVAR 39
44241: PUSH
44242: LD_INT 3
44244: ST_TO_ADDR
// vc_control := control_computer ;
44245: LD_ADDR_OWVAR 38
44249: PUSH
44250: LD_INT 3
44252: ST_TO_ADDR
// vc_weapon := 59 ;
44253: LD_ADDR_OWVAR 40
44257: PUSH
44258: LD_INT 59
44260: ST_TO_ADDR
// result := CreateVehicle ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: CALL_OW 45
44270: ST_TO_ADDR
// SetDir ( result , d ) ;
44271: LD_VAR 0 5
44275: PPUSH
44276: LD_VAR 0 4
44280: PPUSH
44281: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44285: LD_VAR 0 5
44289: PPUSH
44290: LD_VAR 0 2
44294: PPUSH
44295: LD_VAR 0 3
44299: PPUSH
44300: LD_INT 0
44302: PPUSH
44303: CALL_OW 48
// end ;
44307: LD_VAR 0 5
44311: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44312: LD_INT 0
44314: PPUSH
44315: PPUSH
44316: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44317: LD_ADDR_VAR 0 2
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44340: LD_VAR 0 1
44344: NOT
44345: PUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: CALL_OW 264
44355: PUSH
44356: LD_INT 12
44358: PUSH
44359: LD_INT 51
44361: PUSH
44362: LD_INT 32
44364: PUSH
44365: LD_INT 89
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: IN
44374: NOT
44375: OR
44376: IFFALSE 44380
// exit ;
44378: GO 44478
// for i := 1 to 3 do
44380: LD_ADDR_VAR 0 3
44384: PUSH
44385: DOUBLE
44386: LD_INT 1
44388: DEC
44389: ST_TO_ADDR
44390: LD_INT 3
44392: PUSH
44393: FOR_TO
44394: IFFALSE 44476
// begin tmp := GetCargo ( cargo , i ) ;
44396: LD_ADDR_VAR 0 4
44400: PUSH
44401: LD_VAR 0 1
44405: PPUSH
44406: LD_VAR 0 3
44410: PPUSH
44411: CALL_OW 289
44415: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44416: LD_ADDR_VAR 0 2
44420: PUSH
44421: LD_VAR 0 2
44425: PPUSH
44426: LD_VAR 0 3
44430: PPUSH
44431: LD_VAR 0 4
44435: PPUSH
44436: CALL_OW 1
44440: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44441: LD_ADDR_VAR 0 2
44445: PUSH
44446: LD_VAR 0 2
44450: PPUSH
44451: LD_INT 4
44453: PPUSH
44454: LD_VAR 0 2
44458: PUSH
44459: LD_INT 4
44461: ARRAY
44462: PUSH
44463: LD_VAR 0 4
44467: PLUS
44468: PPUSH
44469: CALL_OW 1
44473: ST_TO_ADDR
// end ;
44474: GO 44393
44476: POP
44477: POP
// end ;
44478: LD_VAR 0 2
44482: RET
// export function Length ( array ) ; begin
44483: LD_INT 0
44485: PPUSH
// result := array + 0 ;
44486: LD_ADDR_VAR 0 2
44490: PUSH
44491: LD_VAR 0 1
44495: PUSH
44496: LD_INT 0
44498: PLUS
44499: ST_TO_ADDR
// end ;
44500: LD_VAR 0 2
44504: RET
// export function PrepareArray ( array ) ; begin
44505: LD_INT 0
44507: PPUSH
// result := array diff 0 ;
44508: LD_ADDR_VAR 0 2
44512: PUSH
44513: LD_VAR 0 1
44517: PUSH
44518: LD_INT 0
44520: DIFF
44521: ST_TO_ADDR
// if not result [ 1 ] then
44522: LD_VAR 0 2
44526: PUSH
44527: LD_INT 1
44529: ARRAY
44530: NOT
44531: IFFALSE 44551
// result := Delete ( result , 1 ) ;
44533: LD_ADDR_VAR 0 2
44537: PUSH
44538: LD_VAR 0 2
44542: PPUSH
44543: LD_INT 1
44545: PPUSH
44546: CALL_OW 3
44550: ST_TO_ADDR
// end ;
44551: LD_VAR 0 2
44555: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44556: LD_INT 0
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
// sibRocketRange := 25 ;
44562: LD_ADDR_VAR 0 6
44566: PUSH
44567: LD_INT 25
44569: ST_TO_ADDR
// result := false ;
44570: LD_ADDR_VAR 0 4
44574: PUSH
44575: LD_INT 0
44577: ST_TO_ADDR
// for i := 0 to 5 do
44578: LD_ADDR_VAR 0 5
44582: PUSH
44583: DOUBLE
44584: LD_INT 0
44586: DEC
44587: ST_TO_ADDR
44588: LD_INT 5
44590: PUSH
44591: FOR_TO
44592: IFFALSE 44659
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44594: LD_VAR 0 1
44598: PPUSH
44599: LD_VAR 0 5
44603: PPUSH
44604: LD_VAR 0 6
44608: PPUSH
44609: CALL_OW 272
44613: PPUSH
44614: LD_VAR 0 2
44618: PPUSH
44619: LD_VAR 0 5
44623: PPUSH
44624: LD_VAR 0 6
44628: PPUSH
44629: CALL_OW 273
44633: PPUSH
44634: LD_VAR 0 3
44638: PPUSH
44639: CALL_OW 309
44643: IFFALSE 44657
// begin result := true ;
44645: LD_ADDR_VAR 0 4
44649: PUSH
44650: LD_INT 1
44652: ST_TO_ADDR
// exit ;
44653: POP
44654: POP
44655: GO 44661
// end ;
44657: GO 44591
44659: POP
44660: POP
// end ;
44661: LD_VAR 0 4
44665: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44666: LD_INT 0
44668: PPUSH
44669: PPUSH
44670: PPUSH
// if btype = b_depot then
44671: LD_VAR 0 2
44675: PUSH
44676: LD_INT 0
44678: EQUAL
44679: IFFALSE 44691
// begin result := true ;
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_INT 1
44688: ST_TO_ADDR
// exit ;
44689: GO 44807
// end ; pom := GetBase ( depot ) ;
44691: LD_ADDR_VAR 0 4
44695: PUSH
44696: LD_VAR 0 1
44700: PPUSH
44701: CALL_OW 274
44705: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44706: LD_ADDR_VAR 0 5
44710: PUSH
44711: LD_VAR 0 2
44715: PPUSH
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 248
44725: PPUSH
44726: CALL_OW 450
44730: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44731: LD_ADDR_VAR 0 3
44735: PUSH
44736: LD_VAR 0 4
44740: PPUSH
44741: LD_INT 1
44743: PPUSH
44744: CALL_OW 275
44748: PUSH
44749: LD_VAR 0 5
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: GREATEREQUAL
44758: PUSH
44759: LD_VAR 0 4
44763: PPUSH
44764: LD_INT 2
44766: PPUSH
44767: CALL_OW 275
44771: PUSH
44772: LD_VAR 0 5
44776: PUSH
44777: LD_INT 2
44779: ARRAY
44780: GREATEREQUAL
44781: AND
44782: PUSH
44783: LD_VAR 0 4
44787: PPUSH
44788: LD_INT 3
44790: PPUSH
44791: CALL_OW 275
44795: PUSH
44796: LD_VAR 0 5
44800: PUSH
44801: LD_INT 3
44803: ARRAY
44804: GREATEREQUAL
44805: AND
44806: ST_TO_ADDR
// end ;
44807: LD_VAR 0 3
44811: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44812: LD_INT 0
44814: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44815: LD_VAR 0 1
44819: PPUSH
44820: LD_VAR 0 2
44824: PPUSH
44825: LD_INT 0
44827: PPUSH
44828: LD_INT 0
44830: PPUSH
44831: LD_INT 1
44833: PPUSH
44834: LD_INT 0
44836: PPUSH
44837: CALL_OW 587
// end ;
44841: LD_VAR 0 3
44845: RET
// export function CenterOnNow ( unit ) ; begin
44846: LD_INT 0
44848: PPUSH
// result := IsInUnit ( unit ) ;
44849: LD_ADDR_VAR 0 2
44853: PUSH
44854: LD_VAR 0 1
44858: PPUSH
44859: CALL_OW 310
44863: ST_TO_ADDR
// if not result then
44864: LD_VAR 0 2
44868: NOT
44869: IFFALSE 44881
// result := unit ;
44871: LD_ADDR_VAR 0 2
44875: PUSH
44876: LD_VAR 0 1
44880: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44881: LD_VAR 0 1
44885: PPUSH
44886: CALL_OW 87
// end ;
44890: LD_VAR 0 2
44894: RET
// export function ComMoveHex ( unit , hex ) ; begin
44895: LD_INT 0
44897: PPUSH
// if not hex then
44898: LD_VAR 0 2
44902: NOT
44903: IFFALSE 44907
// exit ;
44905: GO 44960
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44907: LD_VAR 0 2
44911: PUSH
44912: LD_INT 1
44914: ARRAY
44915: PPUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 2
44923: ARRAY
44924: PPUSH
44925: CALL_OW 428
44929: IFFALSE 44933
// exit ;
44931: GO 44960
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44933: LD_VAR 0 1
44937: PPUSH
44938: LD_VAR 0 2
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 2
44951: PUSH
44952: LD_INT 2
44954: ARRAY
44955: PPUSH
44956: CALL_OW 111
// end ;
44960: LD_VAR 0 3
44964: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44965: LD_INT 0
44967: PPUSH
44968: PPUSH
44969: PPUSH
// if not unit or not enemy then
44970: LD_VAR 0 1
44974: NOT
44975: PUSH
44976: LD_VAR 0 2
44980: NOT
44981: OR
44982: IFFALSE 44986
// exit ;
44984: GO 45110
// x := GetX ( enemy ) ;
44986: LD_ADDR_VAR 0 4
44990: PUSH
44991: LD_VAR 0 2
44995: PPUSH
44996: CALL_OW 250
45000: ST_TO_ADDR
// y := GetY ( enemy ) ;
45001: LD_ADDR_VAR 0 5
45005: PUSH
45006: LD_VAR 0 2
45010: PPUSH
45011: CALL_OW 251
45015: ST_TO_ADDR
// if ValidHex ( x , y ) then
45016: LD_VAR 0 4
45020: PPUSH
45021: LD_VAR 0 5
45025: PPUSH
45026: CALL_OW 488
45030: IFFALSE 45110
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45032: LD_VAR 0 2
45036: PPUSH
45037: CALL_OW 247
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: IN
45052: PUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 255
45062: PPUSH
45063: LD_VAR 0 2
45067: PPUSH
45068: CALL_OW 292
45072: OR
45073: IFFALSE 45091
// ComAttackUnit ( unit , enemy ) else
45075: LD_VAR 0 1
45079: PPUSH
45080: LD_VAR 0 2
45084: PPUSH
45085: CALL_OW 115
45089: GO 45110
// ComAgressiveMove ( unit , x , y ) ;
45091: LD_VAR 0 1
45095: PPUSH
45096: LD_VAR 0 4
45100: PPUSH
45101: LD_VAR 0 5
45105: PPUSH
45106: CALL_OW 114
// end ;
45110: LD_VAR 0 3
45114: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45115: LD_INT 0
45117: PPUSH
45118: PPUSH
45119: PPUSH
// list := AreaToList ( area , 0 ) ;
45120: LD_ADDR_VAR 0 5
45124: PUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: LD_INT 0
45132: PPUSH
45133: CALL_OW 517
45137: ST_TO_ADDR
// if not list then
45138: LD_VAR 0 5
45142: NOT
45143: IFFALSE 45147
// exit ;
45145: GO 45277
// if all then
45147: LD_VAR 0 2
45151: IFFALSE 45239
// begin for i := 1 to list [ 1 ] do
45153: LD_ADDR_VAR 0 4
45157: PUSH
45158: DOUBLE
45159: LD_INT 1
45161: DEC
45162: ST_TO_ADDR
45163: LD_VAR 0 5
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: PUSH
45172: FOR_TO
45173: IFFALSE 45235
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45175: LD_ADDR_VAR 0 3
45179: PUSH
45180: LD_VAR 0 3
45184: PPUSH
45185: LD_VAR 0 3
45189: PUSH
45190: LD_INT 1
45192: PLUS
45193: PPUSH
45194: LD_VAR 0 5
45198: PUSH
45199: LD_INT 1
45201: ARRAY
45202: PUSH
45203: LD_VAR 0 4
45207: ARRAY
45208: PUSH
45209: LD_VAR 0 5
45213: PUSH
45214: LD_INT 2
45216: ARRAY
45217: PUSH
45218: LD_VAR 0 4
45222: ARRAY
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PPUSH
45228: CALL_OW 1
45232: ST_TO_ADDR
45233: GO 45172
45235: POP
45236: POP
// exit ;
45237: GO 45277
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45239: LD_ADDR_VAR 0 3
45243: PUSH
45244: LD_VAR 0 5
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PUSH
45257: LD_VAR 0 5
45261: PUSH
45262: LD_INT 2
45264: ARRAY
45265: PUSH
45266: LD_INT 1
45268: ARRAY
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: ST_TO_ADDR
// end ;
45277: LD_VAR 0 3
45281: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45282: LD_INT 0
45284: PPUSH
45285: PPUSH
// list := AreaToList ( area , 0 ) ;
45286: LD_ADDR_VAR 0 4
45290: PUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_INT 0
45298: PPUSH
45299: CALL_OW 517
45303: ST_TO_ADDR
// if not list then
45304: LD_VAR 0 4
45308: NOT
45309: IFFALSE 45313
// exit ;
45311: GO 45354
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_VAR 0 4
45322: PUSH
45323: LD_INT 1
45325: ARRAY
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PUSH
45331: LD_VAR 0 4
45335: PUSH
45336: LD_INT 2
45338: ARRAY
45339: PUSH
45340: LD_INT 1
45342: ARRAY
45343: PUSH
45344: LD_VAR 0 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// end ;
45354: LD_VAR 0 3
45358: RET
// export function First ( array ) ; begin
45359: LD_INT 0
45361: PPUSH
// if not array then
45362: LD_VAR 0 1
45366: NOT
45367: IFFALSE 45371
// exit ;
45369: GO 45385
// result := array [ 1 ] ;
45371: LD_ADDR_VAR 0 2
45375: PUSH
45376: LD_VAR 0 1
45380: PUSH
45381: LD_INT 1
45383: ARRAY
45384: ST_TO_ADDR
// end ;
45385: LD_VAR 0 2
45389: RET
// export function Last ( array ) ; begin
45390: LD_INT 0
45392: PPUSH
// if not array then
45393: LD_VAR 0 1
45397: NOT
45398: IFFALSE 45402
// exit ;
45400: GO 45418
// result := array [ array ] ;
45402: LD_ADDR_VAR 0 2
45406: PUSH
45407: LD_VAR 0 1
45411: PUSH
45412: LD_VAR 0 1
45416: ARRAY
45417: ST_TO_ADDR
// end ;
45418: LD_VAR 0 2
45422: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45423: LD_INT 0
45425: PPUSH
45426: PPUSH
// result := [ ] ;
45427: LD_ADDR_VAR 0 5
45431: PUSH
45432: EMPTY
45433: ST_TO_ADDR
// if not array then
45434: LD_VAR 0 1
45438: NOT
45439: IFFALSE 45443
// exit ;
45441: GO 45555
// for i := 1 to array do
45443: LD_ADDR_VAR 0 6
45447: PUSH
45448: DOUBLE
45449: LD_INT 1
45451: DEC
45452: ST_TO_ADDR
45453: LD_VAR 0 1
45457: PUSH
45458: FOR_TO
45459: IFFALSE 45553
// if array [ i ] [ index ] = value then
45461: LD_VAR 0 1
45465: PUSH
45466: LD_VAR 0 6
45470: ARRAY
45471: PUSH
45472: LD_VAR 0 2
45476: ARRAY
45477: PUSH
45478: LD_VAR 0 3
45482: EQUAL
45483: IFFALSE 45551
// begin if indexColumn then
45485: LD_VAR 0 4
45489: IFFALSE 45525
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45491: LD_ADDR_VAR 0 5
45495: PUSH
45496: LD_VAR 0 5
45500: PPUSH
45501: LD_VAR 0 1
45505: PUSH
45506: LD_VAR 0 6
45510: ARRAY
45511: PUSH
45512: LD_VAR 0 4
45516: ARRAY
45517: PPUSH
45518: CALL 40737 0 2
45522: ST_TO_ADDR
45523: GO 45551
// result := Join ( result , array [ i ] ) ;
45525: LD_ADDR_VAR 0 5
45529: PUSH
45530: LD_VAR 0 5
45534: PPUSH
45535: LD_VAR 0 1
45539: PUSH
45540: LD_VAR 0 6
45544: ARRAY
45545: PPUSH
45546: CALL 40737 0 2
45550: ST_TO_ADDR
// end ;
45551: GO 45458
45553: POP
45554: POP
// end ;
45555: LD_VAR 0 5
45559: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45560: LD_INT 0
45562: PPUSH
// if not vehicles or not parkingPoint then
45563: LD_VAR 0 1
45567: NOT
45568: PUSH
45569: LD_VAR 0 2
45573: NOT
45574: OR
45575: IFFALSE 45579
// exit ;
45577: GO 45677
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45579: LD_ADDR_VAR 0 1
45583: PUSH
45584: LD_VAR 0 1
45588: PPUSH
45589: LD_INT 50
45591: PUSH
45592: EMPTY
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: LD_INT 92
45600: PUSH
45601: LD_VAR 0 2
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PUSH
45610: LD_VAR 0 2
45614: PUSH
45615: LD_INT 2
45617: ARRAY
45618: PUSH
45619: LD_INT 8
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PPUSH
45636: CALL_OW 72
45640: ST_TO_ADDR
// if not vehicles then
45641: LD_VAR 0 1
45645: NOT
45646: IFFALSE 45650
// exit ;
45648: GO 45677
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45650: LD_VAR 0 1
45654: PPUSH
45655: LD_VAR 0 2
45659: PUSH
45660: LD_INT 1
45662: ARRAY
45663: PPUSH
45664: LD_VAR 0 2
45668: PUSH
45669: LD_INT 2
45671: ARRAY
45672: PPUSH
45673: CALL_OW 111
// end ;
45677: LD_VAR 0 3
45681: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45682: LD_INT 0
45684: PPUSH
45685: PPUSH
45686: PPUSH
// if not side or not area then
45687: LD_VAR 0 1
45691: NOT
45692: PUSH
45693: LD_VAR 0 2
45697: NOT
45698: OR
45699: IFFALSE 45703
// exit ;
45701: GO 45822
// tmp := AreaToList ( area , 0 ) ;
45703: LD_ADDR_VAR 0 5
45707: PUSH
45708: LD_VAR 0 2
45712: PPUSH
45713: LD_INT 0
45715: PPUSH
45716: CALL_OW 517
45720: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45721: LD_ADDR_VAR 0 4
45725: PUSH
45726: DOUBLE
45727: LD_INT 1
45729: DEC
45730: ST_TO_ADDR
45731: LD_VAR 0 5
45735: PUSH
45736: LD_INT 1
45738: ARRAY
45739: PUSH
45740: FOR_TO
45741: IFFALSE 45820
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45743: LD_VAR 0 5
45747: PUSH
45748: LD_INT 1
45750: ARRAY
45751: PUSH
45752: LD_VAR 0 4
45756: ARRAY
45757: PPUSH
45758: LD_VAR 0 5
45762: PUSH
45763: LD_INT 2
45765: ARRAY
45766: PUSH
45767: LD_VAR 0 4
45771: ARRAY
45772: PPUSH
45773: CALL_OW 351
45777: IFFALSE 45818
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45779: LD_VAR 0 5
45783: PUSH
45784: LD_INT 1
45786: ARRAY
45787: PUSH
45788: LD_VAR 0 4
45792: ARRAY
45793: PPUSH
45794: LD_VAR 0 5
45798: PUSH
45799: LD_INT 2
45801: ARRAY
45802: PUSH
45803: LD_VAR 0 4
45807: ARRAY
45808: PPUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 244
// end ;
45818: GO 45740
45820: POP
45821: POP
// end ; end_of_file
45822: LD_VAR 0 3
45826: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45827: LD_INT 0
45829: PPUSH
45830: PPUSH
// disable ( mpActive ) ;
45831: LD_INT 100
45833: DISABLE_MARKED
// disable ( mpWin ) ;
45834: LD_INT 101
45836: DISABLE_MARKED
// disable ( mpLose ) ;
45837: LD_INT 102
45839: DISABLE_MARKED
// mpGameType := 0 ;
45840: LD_ADDR_EXP 3
45844: PUSH
45845: LD_INT 0
45847: ST_TO_ADDR
// mpGameSettings := [ ] ;
45848: LD_ADDR_EXP 6
45852: PUSH
45853: EMPTY
45854: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45855: LD_ADDR_EXP 4
45859: PUSH
45860: EMPTY
45861: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45862: LD_ADDR_EXP 5
45866: PUSH
45867: EMPTY
45868: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45869: LD_ADDR_EXP 29
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45884: LD_ADDR_EXP 12
45888: PUSH
45889: EMPTY
45890: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45891: LD_ADDR_EXP 13
45895: PUSH
45896: EMPTY
45897: ST_TO_ADDR
// mpDepots := [ ] ;
45898: LD_ADDR_EXP 14
45902: PUSH
45903: EMPTY
45904: ST_TO_ADDR
// mpBuildings := [ ] ;
45905: LD_ADDR_EXP 17
45909: PUSH
45910: EMPTY
45911: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45912: LD_ADDR_EXP 18
45916: PUSH
45917: EMPTY
45918: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45919: LD_ADDR_EXP 19
45923: PUSH
45924: EMPTY
45925: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45926: LD_ADDR_EXP 20
45930: PUSH
45931: EMPTY
45932: ST_TO_ADDR
// mpStartingResources := [ ] ;
45933: LD_ADDR_EXP 15
45937: PUSH
45938: EMPTY
45939: ST_TO_ADDR
// mpStartPos := [ ] ;
45940: LD_ADDR_EXP 21
45944: PUSH
45945: EMPTY
45946: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45947: LD_ADDR_EXP 22
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45956: LD_ADDR_EXP 23
45960: PUSH
45961: EMPTY
45962: ST_TO_ADDR
// mpApemans := [ ] ;
45963: LD_ADDR_EXP 30
45967: PUSH
45968: EMPTY
45969: ST_TO_ADDR
// mpApemansArea := [ ] ;
45970: LD_ADDR_EXP 31
45974: PUSH
45975: EMPTY
45976: ST_TO_ADDR
// mpRespawn := [ ] ;
45977: LD_ADDR_EXP 33
45981: PUSH
45982: EMPTY
45983: ST_TO_ADDR
// mpKingArea := 0 ;
45984: LD_ADDR_EXP 34
45988: PUSH
45989: LD_INT 0
45991: ST_TO_ADDR
// mpPoints := [ ] ;
45992: LD_ADDR_EXP 35
45996: PUSH
45997: EMPTY
45998: ST_TO_ADDR
// mpVehicles := 0 ;
45999: LD_ADDR_EXP 36
46003: PUSH
46004: LD_INT 0
46006: ST_TO_ADDR
// mpShipments := 0 ;
46007: LD_ADDR_EXP 27
46011: PUSH
46012: LD_INT 0
46014: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46015: LD_ADDR_EXP 40
46019: PUSH
46020: EMPTY
46021: PUSH
46022: EMPTY
46023: PUSH
46024: EMPTY
46025: PUSH
46026: EMPTY
46027: PUSH
46028: EMPTY
46029: PUSH
46030: EMPTY
46031: PUSH
46032: EMPTY
46033: PUSH
46034: EMPTY
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46046: LD_ADDR_EXP 32
46050: PUSH
46051: EMPTY
46052: PUSH
46053: EMPTY
46054: PUSH
46055: EMPTY
46056: PUSH
46057: EMPTY
46058: PUSH
46059: EMPTY
46060: PUSH
46061: EMPTY
46062: PUSH
46063: EMPTY
46064: PUSH
46065: EMPTY
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// mpEmissions := 0 ;
46077: LD_ADDR_EXP 37
46081: PUSH
46082: LD_INT 0
46084: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46085: LD_ADDR_EXP 25
46089: PUSH
46090: LD_INT 3
46092: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46093: LD_ADDR_EXP 24
46097: PUSH
46098: LD_INT 15
46100: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46101: LD_ADDR_EXP 38
46105: PUSH
46106: LD_INT 0
46108: ST_TO_ADDR
// mpGameActive := false ;
46109: LD_ADDR_EXP 39
46113: PUSH
46114: LD_INT 0
46116: ST_TO_ADDR
// mpBlockRespThread := false ;
46117: LD_ADDR_EXP 41
46121: PUSH
46122: LD_INT 0
46124: ST_TO_ADDR
// for i := 1 to 32 do
46125: LD_ADDR_VAR 0 2
46129: PUSH
46130: DOUBLE
46131: LD_INT 1
46133: DEC
46134: ST_TO_ADDR
46135: LD_INT 32
46137: PUSH
46138: FOR_TO
46139: IFFALSE 46166
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46141: LD_ADDR_EXP 6
46145: PUSH
46146: LD_EXP 6
46150: PPUSH
46151: LD_VAR 0 2
46155: PPUSH
46156: LD_INT 0
46158: PPUSH
46159: CALL_OW 1
46163: ST_TO_ADDR
46164: GO 46138
46166: POP
46167: POP
// end ;
46168: LD_VAR 0 1
46172: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46173: LD_INT 0
46175: PPUSH
46176: PPUSH
46177: PPUSH
46178: PPUSH
46179: PPUSH
46180: PPUSH
46181: PPUSH
46182: PPUSH
46183: PPUSH
46184: PPUSH
46185: PPUSH
46186: PPUSH
46187: PPUSH
46188: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46189: LD_ADDR_VAR 0 14
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// for i in gameTypes do
46208: LD_ADDR_VAR 0 2
46212: PUSH
46213: LD_VAR 0 14
46217: PUSH
46218: FOR_IN
46219: IFFALSE 46228
// disable ( i ) ;
46221: LD_VAR 0 2
46225: DISABLE_MARKED
46226: GO 46218
46228: POP
46229: POP
// if Multiplayer then
46230: LD_OWVAR 4
46234: IFFALSE 46418
// begin mpGameType := mp_game_type ;
46236: LD_ADDR_EXP 3
46240: PUSH
46241: LD_OWVAR 6
46245: ST_TO_ADDR
// your_side := mp_player_side ;
46246: LD_ADDR_OWVAR 2
46250: PUSH
46251: LD_OWVAR 7
46255: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46256: LD_ADDR_EXP 7
46260: PUSH
46261: LD_OWVAR 17
46265: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46266: LD_ADDR_EXP 8
46270: PUSH
46271: LD_OWVAR 15
46275: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46276: LD_ADDR_EXP 9
46280: PUSH
46281: LD_OWVAR 16
46285: ST_TO_ADDR
// mpTeams := mp_teams ;
46286: LD_ADDR_EXP 10
46290: PUSH
46291: LD_OWVAR 12
46295: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46296: LD_ADDR_VAR 0 2
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_EXP 4
46310: PPUSH
46311: CALL 5128 0 1
46315: PUSH
46316: FOR_TO
46317: IFFALSE 46393
// begin setting := mpGameSettingsKeys [ i ] ;
46319: LD_ADDR_VAR 0 12
46323: PUSH
46324: LD_EXP 4
46328: PUSH
46329: LD_VAR 0 2
46333: ARRAY
46334: ST_TO_ADDR
// if setting then
46335: LD_VAR 0 12
46339: IFFALSE 46391
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46341: LD_ADDR_EXP 6
46345: PUSH
46346: LD_EXP 6
46350: PPUSH
46351: LD_VAR 0 2
46355: PPUSH
46356: LD_EXP 5
46360: PUSH
46361: LD_VAR 0 2
46365: ARRAY
46366: PUSH
46367: LD_VAR 0 2
46371: PUSH
46372: LD_INT 1
46374: MINUS
46375: PPUSH
46376: CALL_OW 426
46380: PUSH
46381: LD_INT 1
46383: PLUS
46384: ARRAY
46385: PPUSH
46386: CALL_OW 1
46390: ST_TO_ADDR
// end ;
46391: GO 46316
46393: POP
46394: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46395: LD_ADDR_EXP 11
46399: PUSH
46400: LD_EXP 8
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: DIFF
46411: PUSH
46412: LD_INT 1
46414: GREATER
46415: ST_TO_ADDR
// end else
46416: GO 46418
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46418: LD_EXP 3
46422: PPUSH
46423: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46427: LD_EXP 18
46431: PPUSH
46432: CALL 5128 0 1
46436: IFFALSE 46467
// begin for i in mpMarkedAreas do
46438: LD_ADDR_VAR 0 2
46442: PUSH
46443: LD_EXP 18
46447: PUSH
46448: FOR_IN
46449: IFFALSE 46465
// SetAreaMapShow ( i , 0 ) ;
46451: LD_VAR 0 2
46455: PPUSH
46456: LD_INT 0
46458: PPUSH
46459: CALL_OW 424
46463: GO 46448
46465: POP
46466: POP
// end ; for i := 1 to 8 do
46467: LD_ADDR_VAR 0 2
46471: PUSH
46472: DOUBLE
46473: LD_INT 1
46475: DEC
46476: ST_TO_ADDR
46477: LD_INT 8
46479: PUSH
46480: FOR_TO
46481: IFFALSE 47732
// begin if not mpSidePositions [ i ] then
46483: LD_EXP 7
46487: PUSH
46488: LD_VAR 0 2
46492: ARRAY
46493: NOT
46494: IFFALSE 46498
// continue ;
46496: GO 46480
// side := i ;
46498: LD_ADDR_VAR 0 7
46502: PUSH
46503: LD_VAR 0 2
46507: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46508: LD_ADDR_VAR 0 9
46512: PUSH
46513: LD_EXP 9
46517: PUSH
46518: LD_VAR 0 2
46522: ARRAY
46523: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46524: LD_ADDR_VAR 0 8
46528: PUSH
46529: LD_EXP 7
46533: PUSH
46534: LD_VAR 0 2
46538: ARRAY
46539: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46540: LD_EXP 12
46544: PPUSH
46545: CALL 5128 0 1
46549: IFFALSE 46626
// begin for j in mpOilDeposits [ pos ] do
46551: LD_ADDR_VAR 0 3
46555: PUSH
46556: LD_EXP 12
46560: PUSH
46561: LD_VAR 0 8
46565: ARRAY
46566: PUSH
46567: FOR_IN
46568: IFFALSE 46624
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46570: LD_VAR 0 3
46574: PUSH
46575: LD_INT 1
46577: ARRAY
46578: PPUSH
46579: LD_VAR 0 3
46583: PUSH
46584: LD_INT 2
46586: ARRAY
46587: PPUSH
46588: LD_INT 2
46590: PPUSH
46591: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46595: LD_VAR 0 3
46599: PUSH
46600: LD_INT 1
46602: ARRAY
46603: PPUSH
46604: LD_VAR 0 3
46608: PUSH
46609: LD_INT 2
46611: ARRAY
46612: PPUSH
46613: LD_VAR 0 7
46617: PPUSH
46618: CALL_OW 441
// end ;
46622: GO 46567
46624: POP
46625: POP
// end ; if Count ( mpSibDeposits ) then
46626: LD_EXP 13
46630: PPUSH
46631: CALL 5128 0 1
46635: IFFALSE 46712
// begin for j in mpSibDeposits [ pos ] do
46637: LD_ADDR_VAR 0 3
46641: PUSH
46642: LD_EXP 13
46646: PUSH
46647: LD_VAR 0 8
46651: ARRAY
46652: PUSH
46653: FOR_IN
46654: IFFALSE 46710
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46656: LD_VAR 0 3
46660: PUSH
46661: LD_INT 1
46663: ARRAY
46664: PPUSH
46665: LD_VAR 0 3
46669: PUSH
46670: LD_INT 2
46672: ARRAY
46673: PPUSH
46674: LD_INT 3
46676: PPUSH
46677: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46681: LD_VAR 0 3
46685: PUSH
46686: LD_INT 1
46688: ARRAY
46689: PPUSH
46690: LD_VAR 0 3
46694: PUSH
46695: LD_INT 2
46697: ARRAY
46698: PPUSH
46699: LD_VAR 0 7
46703: PPUSH
46704: CALL_OW 441
// end ;
46708: GO 46653
46710: POP
46711: POP
// end ; InitBc ;
46712: CALL_OW 21
// InitUc ;
46716: CALL_OW 18
// uc_side := side ;
46720: LD_ADDR_OWVAR 20
46724: PUSH
46725: LD_VAR 0 7
46729: ST_TO_ADDR
// uc_nation := nation ;
46730: LD_ADDR_OWVAR 21
46734: PUSH
46735: LD_VAR 0 9
46739: ST_TO_ADDR
// if Count ( mpDepots ) then
46740: LD_EXP 14
46744: PPUSH
46745: CALL 5128 0 1
46749: IFFALSE 46927
// begin if GameTypeSurvival then
46751: LD_INT 2
46753: IFFALSE 46773
// begin bc_level := 10 ;
46755: LD_ADDR_OWVAR 43
46759: PUSH
46760: LD_INT 10
46762: ST_TO_ADDR
// bc_type := b_warehouse ;
46763: LD_ADDR_OWVAR 42
46767: PUSH
46768: LD_INT 1
46770: ST_TO_ADDR
// end else
46771: GO 46789
// begin bc_level := 0 ;
46773: LD_ADDR_OWVAR 43
46777: PUSH
46778: LD_INT 0
46780: ST_TO_ADDR
// bc_type := b_depot ;
46781: LD_ADDR_OWVAR 42
46785: PUSH
46786: LD_INT 0
46788: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46789: LD_ADDR_VAR 0 4
46793: PUSH
46794: LD_EXP 14
46798: PUSH
46799: LD_VAR 0 8
46803: ARRAY
46804: PUSH
46805: LD_INT 1
46807: ARRAY
46808: PPUSH
46809: LD_EXP 14
46813: PUSH
46814: LD_VAR 0 8
46818: ARRAY
46819: PUSH
46820: LD_INT 2
46822: ARRAY
46823: PPUSH
46824: LD_EXP 14
46828: PUSH
46829: LD_VAR 0 8
46833: ARRAY
46834: PUSH
46835: LD_INT 3
46837: ARRAY
46838: PPUSH
46839: CALL_OW 47
46843: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46844: LD_VAR 0 4
46848: PPUSH
46849: LD_STRING @
46851: PUSH
46852: LD_VAR 0 7
46856: STR
46857: PPUSH
46858: CALL_OW 500
// if Count ( mpStartingResources ) then
46862: LD_EXP 15
46866: PPUSH
46867: CALL 5128 0 1
46871: IFFALSE 46925
// begin for j := 1 to mpStartingResources do
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: DOUBLE
46879: LD_INT 1
46881: DEC
46882: ST_TO_ADDR
46883: LD_EXP 15
46887: PUSH
46888: FOR_TO
46889: IFFALSE 46923
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46891: LD_VAR 0 4
46895: PPUSH
46896: CALL_OW 274
46900: PPUSH
46901: LD_VAR 0 3
46905: PPUSH
46906: LD_EXP 15
46910: PUSH
46911: LD_VAR 0 3
46915: ARRAY
46916: PPUSH
46917: CALL_OW 277
46921: GO 46888
46923: POP
46924: POP
// end ; end else
46925: GO 47074
// if Count ( mpStartingResources ) then
46927: LD_EXP 15
46931: PPUSH
46932: CALL 5128 0 1
46936: IFFALSE 47074
// begin for j := 1 to mpStartingResources do
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: DOUBLE
46944: LD_INT 1
46946: DEC
46947: ST_TO_ADDR
46948: LD_EXP 15
46952: PUSH
46953: FOR_TO
46954: IFFALSE 47072
// begin resources := mpStartingResources [ j ] ;
46956: LD_ADDR_VAR 0 13
46960: PUSH
46961: LD_EXP 15
46965: PUSH
46966: LD_VAR 0 3
46970: ARRAY
46971: ST_TO_ADDR
// repeat if resources >= 50 then
46972: LD_VAR 0 13
46976: PUSH
46977: LD_INT 50
46979: GREATEREQUAL
46980: IFFALSE 47026
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46982: LD_VAR 0 3
46986: PPUSH
46987: LD_INT 5
46989: PPUSH
46990: LD_VAR 0 5
46994: PPUSH
46995: LD_VAR 0 6
46999: PPUSH
47000: LD_INT 4
47002: PPUSH
47003: LD_INT 0
47005: PPUSH
47006: CALL_OW 60
// resources := resources - 50 ;
47010: LD_ADDR_VAR 0 13
47014: PUSH
47015: LD_VAR 0 13
47019: PUSH
47020: LD_INT 50
47022: MINUS
47023: ST_TO_ADDR
// end else
47024: GO 47060
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
47026: LD_VAR 0 3
47030: PPUSH
47031: LD_VAR 0 13
47035: PUSH
47036: LD_INT 10
47038: DIV
47039: PPUSH
47040: LD_VAR 0 5
47044: PPUSH
47045: LD_VAR 0 6
47049: PPUSH
47050: LD_INT 4
47052: PPUSH
47053: LD_INT 0
47055: PPUSH
47056: CALL_OW 60
// until resources <= 0 ;
47060: LD_VAR 0 13
47064: PUSH
47065: LD_INT 0
47067: LESSEQUAL
47068: IFFALSE 46972
// end ;
47070: GO 46953
47072: POP
47073: POP
// end ; if Count ( mpBuildings ) then
47074: LD_EXP 17
47078: PPUSH
47079: CALL 5128 0 1
47083: IFFALSE 47161
// begin for j in mpBuildings [ pos ] do
47085: LD_ADDR_VAR 0 3
47089: PUSH
47090: LD_EXP 17
47094: PUSH
47095: LD_VAR 0 8
47099: ARRAY
47100: PUSH
47101: FOR_IN
47102: IFFALSE 47159
// begin bc_level := 0 ;
47104: LD_ADDR_OWVAR 43
47108: PUSH
47109: LD_INT 0
47111: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47112: LD_ADDR_OWVAR 42
47116: PUSH
47117: LD_VAR 0 3
47121: PUSH
47122: LD_INT 1
47124: ARRAY
47125: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47126: LD_VAR 0 3
47130: PUSH
47131: LD_INT 2
47133: ARRAY
47134: PPUSH
47135: LD_VAR 0 3
47139: PUSH
47140: LD_INT 3
47142: ARRAY
47143: PPUSH
47144: LD_VAR 0 3
47148: PUSH
47149: LD_INT 4
47151: ARRAY
47152: PPUSH
47153: CALL_OW 47
// end ;
47157: GO 47101
47159: POP
47160: POP
// end ; if mpBattleFlag > - 1 then
47161: LD_EXP 22
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: GREATER
47170: IFFALSE 47329
// begin x := mpStartPos [ pos ] [ 1 ] ;
47172: LD_ADDR_VAR 0 5
47176: PUSH
47177: LD_EXP 21
47181: PUSH
47182: LD_VAR 0 8
47186: ARRAY
47187: PUSH
47188: LD_INT 1
47190: ARRAY
47191: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47192: LD_ADDR_VAR 0 6
47196: PUSH
47197: LD_EXP 21
47201: PUSH
47202: LD_VAR 0 8
47206: ARRAY
47207: PUSH
47208: LD_INT 2
47210: ARRAY
47211: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47212: LD_VAR 0 5
47216: PPUSH
47217: LD_VAR 0 6
47221: PPUSH
47222: LD_INT 12
47224: PPUSH
47225: LD_INT 2
47227: PPUSH
47228: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47232: LD_ADDR_EXP 23
47236: PUSH
47237: LD_EXP 23
47241: PPUSH
47242: LD_VAR 0 7
47246: PPUSH
47247: LD_VAR 0 7
47251: PPUSH
47252: LD_VAR 0 5
47256: PPUSH
47257: LD_VAR 0 6
47261: PPUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 100
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 70
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 40
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 10
47294: PUSH
47295: LD_INT 25
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 20
47304: PUSH
47305: LD_INT 100
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: PPUSH
47319: CALL_OW 418
47323: PPUSH
47324: CALL_OW 1
47328: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47329: LD_EXP 26
47333: PUSH
47334: LD_INT 20
47336: PPUSH
47337: LD_VAR 0 7
47341: PPUSH
47342: CALL_OW 321
47346: PUSH
47347: LD_INT 1
47349: EQUAL
47350: AND
47351: IFFALSE 47368
// SetTech ( tech_SibDet , side , state_researched ) ;
47353: LD_INT 20
47355: PPUSH
47356: LD_VAR 0 7
47360: PPUSH
47361: LD_INT 2
47363: PPUSH
47364: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47368: LD_INT 24
47370: PPUSH
47371: LD_VAR 0 7
47375: PPUSH
47376: LD_INT 0
47378: PPUSH
47379: CALL_OW 322
// if mpSibBomb = 1 then
47383: LD_EXP 28
47387: PUSH
47388: LD_INT 1
47390: EQUAL
47391: IFFALSE 47410
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47393: LD_INT 25
47395: PPUSH
47396: LD_VAR 0 7
47400: PPUSH
47401: LD_INT 1
47403: PPUSH
47404: CALL_OW 322
// end else
47408: GO 47425
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47410: LD_INT 25
47412: PPUSH
47413: LD_VAR 0 7
47417: PPUSH
47418: LD_INT 0
47420: PPUSH
47421: CALL_OW 322
// end ; if mpVehicles then
47425: LD_EXP 36
47429: IFFALSE 47528
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47431: LD_ADDR_VAR 0 3
47435: PUSH
47436: LD_VAR 0 7
47440: PPUSH
47441: LD_VAR 0 9
47445: PPUSH
47446: LD_EXP 36
47450: PPUSH
47451: CALL 48642 0 3
47455: PUSH
47456: FOR_IN
47457: IFFALSE 47526
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47459: LD_VAR 0 3
47463: PPUSH
47464: LD_INT 0
47466: PPUSH
47467: LD_INT 5
47469: PPUSH
47470: CALL_OW 12
47474: PPUSH
47475: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47479: LD_VAR 0 3
47483: PPUSH
47484: LD_EXP 21
47488: PUSH
47489: LD_VAR 0 8
47493: ARRAY
47494: PUSH
47495: LD_INT 1
47497: ARRAY
47498: PPUSH
47499: LD_EXP 21
47503: PUSH
47504: LD_VAR 0 8
47508: ARRAY
47509: PUSH
47510: LD_INT 2
47512: ARRAY
47513: PPUSH
47514: LD_INT 12
47516: PPUSH
47517: LD_INT 0
47519: PPUSH
47520: CALL_OW 50
// end ;
47524: GO 47456
47526: POP
47527: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47528: LD_ADDR_VAR 0 11
47532: PUSH
47533: LD_VAR 0 7
47537: PPUSH
47538: LD_VAR 0 9
47542: PPUSH
47543: LD_EXP 24
47547: PPUSH
47548: LD_EXP 25
47552: PPUSH
47553: CALL 48144 0 4
47557: ST_TO_ADDR
// for j in team do
47558: LD_ADDR_VAR 0 3
47562: PUSH
47563: LD_VAR 0 11
47567: PUSH
47568: FOR_IN
47569: IFFALSE 47618
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47571: LD_VAR 0 3
47575: PPUSH
47576: LD_EXP 21
47580: PUSH
47581: LD_VAR 0 8
47585: ARRAY
47586: PUSH
47587: LD_INT 1
47589: ARRAY
47590: PPUSH
47591: LD_EXP 21
47595: PUSH
47596: LD_VAR 0 8
47600: ARRAY
47601: PUSH
47602: LD_INT 2
47604: ARRAY
47605: PPUSH
47606: LD_INT 12
47608: PPUSH
47609: LD_INT 0
47611: PPUSH
47612: CALL_OW 50
47616: GO 47568
47618: POP
47619: POP
// if mpApemans then
47620: LD_EXP 30
47624: IFFALSE 47730
// begin for j := 1 to mpApemans do
47626: LD_ADDR_VAR 0 3
47630: PUSH
47631: DOUBLE
47632: LD_INT 1
47634: DEC
47635: ST_TO_ADDR
47636: LD_EXP 30
47640: PUSH
47641: FOR_TO
47642: IFFALSE 47728
// begin PrepareApeman ( - 5 ) ;
47644: LD_INT 5
47646: NEG
47647: PPUSH
47648: CALL 36985 0 1
// ape := CreateHuman ;
47652: LD_ADDR_VAR 0 10
47656: PUSH
47657: CALL_OW 44
47661: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
47662: LD_ADDR_EXP 32
47666: PUSH
47667: LD_EXP 32
47671: PPUSH
47672: LD_VAR 0 8
47676: PPUSH
47677: LD_EXP 32
47681: PUSH
47682: LD_VAR 0 8
47686: ARRAY
47687: PPUSH
47688: LD_VAR 0 10
47692: PPUSH
47693: CALL 40737 0 2
47697: PPUSH
47698: CALL_OW 1
47702: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47703: LD_VAR 0 10
47707: PPUSH
47708: LD_EXP 31
47712: PUSH
47713: LD_VAR 0 8
47717: ARRAY
47718: PPUSH
47719: LD_INT 0
47721: PPUSH
47722: CALL_OW 49
// end ;
47726: GO 47641
47728: POP
47729: POP
// end ; end ;
47730: GO 46480
47732: POP
47733: POP
// if not mpTeamGame then
47734: LD_EXP 11
47738: NOT
47739: IFFALSE 47837
// begin for i := 1 to 8 do
47741: LD_ADDR_VAR 0 2
47745: PUSH
47746: DOUBLE
47747: LD_INT 1
47749: DEC
47750: ST_TO_ADDR
47751: LD_INT 8
47753: PUSH
47754: FOR_TO
47755: IFFALSE 47833
// for j := 1 to 8 do
47757: LD_ADDR_VAR 0 3
47761: PUSH
47762: DOUBLE
47763: LD_INT 1
47765: DEC
47766: ST_TO_ADDR
47767: LD_INT 8
47769: PUSH
47770: FOR_TO
47771: IFFALSE 47829
// if i <> j then
47773: LD_VAR 0 2
47777: PUSH
47778: LD_VAR 0 3
47782: NONEQUAL
47783: IFFALSE 47807
// SetAttitude ( i , j , att_neutral , true ) else
47785: LD_VAR 0 2
47789: PPUSH
47790: LD_VAR 0 3
47794: PPUSH
47795: LD_INT 0
47797: PPUSH
47798: LD_INT 1
47800: PPUSH
47801: CALL_OW 80
47805: GO 47827
// SetAttitude ( i , j , att_friend , true ) ;
47807: LD_VAR 0 2
47811: PPUSH
47812: LD_VAR 0 3
47816: PPUSH
47817: LD_INT 1
47819: PPUSH
47820: LD_INT 1
47822: PPUSH
47823: CALL_OW 80
47827: GO 47770
47829: POP
47830: POP
47831: GO 47754
47833: POP
47834: POP
// end else
47835: GO 48012
// begin if mpSharedVision then
47837: LD_EXP 16
47841: IFFALSE 47906
// begin for i in mpTeams do
47843: LD_ADDR_VAR 0 2
47847: PUSH
47848: LD_EXP 10
47852: PUSH
47853: FOR_IN
47854: IFFALSE 47904
// for j := 2 to i do
47856: LD_ADDR_VAR 0 3
47860: PUSH
47861: DOUBLE
47862: LD_INT 2
47864: DEC
47865: ST_TO_ADDR
47866: LD_VAR 0 2
47870: PUSH
47871: FOR_TO
47872: IFFALSE 47900
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47874: LD_VAR 0 2
47878: PUSH
47879: LD_VAR 0 3
47883: ARRAY
47884: PPUSH
47885: LD_VAR 0 2
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: PPUSH
47894: CALL_OW 343
47898: GO 47871
47900: POP
47901: POP
47902: GO 47853
47904: POP
47905: POP
// end ; for i := 1 to 8 do
47906: LD_ADDR_VAR 0 2
47910: PUSH
47911: DOUBLE
47912: LD_INT 1
47914: DEC
47915: ST_TO_ADDR
47916: LD_INT 8
47918: PUSH
47919: FOR_TO
47920: IFFALSE 48010
// for j := 1 to 8 do
47922: LD_ADDR_VAR 0 3
47926: PUSH
47927: DOUBLE
47928: LD_INT 1
47930: DEC
47931: ST_TO_ADDR
47932: LD_INT 8
47934: PUSH
47935: FOR_TO
47936: IFFALSE 48006
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47938: LD_EXP 8
47942: PUSH
47943: LD_VAR 0 2
47947: ARRAY
47948: PUSH
47949: LD_EXP 8
47953: PUSH
47954: LD_VAR 0 3
47958: ARRAY
47959: EQUAL
47960: IFFALSE 47984
// SetAttitude ( i , j , att_friend , true ) else
47962: LD_VAR 0 2
47966: PPUSH
47967: LD_VAR 0 3
47971: PPUSH
47972: LD_INT 1
47974: PPUSH
47975: LD_INT 1
47977: PPUSH
47978: CALL_OW 80
47982: GO 48004
// SetAttitude ( i , j , att_enemy , true ) ;
47984: LD_VAR 0 2
47988: PPUSH
47989: LD_VAR 0 3
47993: PPUSH
47994: LD_INT 2
47996: PPUSH
47997: LD_INT 1
47999: PPUSH
48000: CALL_OW 80
48004: GO 47935
48006: POP
48007: POP
48008: GO 47919
48010: POP
48011: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48012: LD_ADDR_OWVAR 71
48016: PUSH
48017: LD_EXP 9
48021: PUSH
48022: LD_OWVAR 2
48026: ARRAY
48027: ST_TO_ADDR
// if IAmSpec then
48028: CALL_OW 531
48032: IFFALSE 48073
// begin FogOff ( true ) ;
48034: LD_INT 1
48036: PPUSH
48037: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48041: LD_EXP 29
48045: PUSH
48046: LD_INT 1
48048: ARRAY
48049: PUSH
48050: LD_INT 2
48052: DIV
48053: PPUSH
48054: LD_EXP 29
48058: PUSH
48059: LD_INT 2
48061: ARRAY
48062: PUSH
48063: LD_INT 2
48065: DIV
48066: PPUSH
48067: CALL_OW 86
// end else
48071: GO 48119
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48073: LD_EXP 21
48077: PUSH
48078: LD_EXP 7
48082: PUSH
48083: LD_OWVAR 2
48087: ARRAY
48088: ARRAY
48089: PUSH
48090: LD_INT 1
48092: ARRAY
48093: PPUSH
48094: LD_EXP 21
48098: PUSH
48099: LD_EXP 7
48103: PUSH
48104: LD_OWVAR 2
48108: ARRAY
48109: ARRAY
48110: PUSH
48111: LD_INT 2
48113: ARRAY
48114: PPUSH
48115: CALL_OW 86
// end ; BeginBuildUp ;
48119: CALL 49120 0 0
// enable ( mpActive ) ;
48123: LD_INT 100
48125: ENABLE_MARKED
// enable ( mpGameType ) ;
48126: LD_EXP 3
48130: ENABLE_MARKED
// mpGameActive := true ;
48131: LD_ADDR_EXP 39
48135: PUSH
48136: LD_INT 1
48138: ST_TO_ADDR
// end ;
48139: LD_VAR 0 1
48143: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48144: LD_INT 0
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
// result := [ ] ;
48150: LD_ADDR_VAR 0 5
48154: PUSH
48155: EMPTY
48156: ST_TO_ADDR
// class := class_soldier ;
48157: LD_ADDR_VAR 0 8
48161: PUSH
48162: LD_INT 1
48164: ST_TO_ADDR
// uc_side := side ;
48165: LD_ADDR_OWVAR 20
48169: PUSH
48170: LD_VAR 0 1
48174: ST_TO_ADDR
// uc_nation := nation ;
48175: LD_ADDR_OWVAR 21
48179: PUSH
48180: LD_VAR 0 2
48184: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48185: LD_ADDR_OWVAR 26
48189: PUSH
48190: LD_OWVAR 19
48194: PUSH
48195: LD_VAR 0 1
48199: ARRAY
48200: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48201: LD_INT 1
48203: PPUSH
48204: LD_INT 2
48206: PPUSH
48207: CALL_OW 12
48211: PPUSH
48212: LD_VAR 0 8
48216: PPUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_INT 2
48224: PLUS
48225: PPUSH
48226: CALL_OW 380
// hc_importance := 105 ;
48230: LD_ADDR_OWVAR 32
48234: PUSH
48235: LD_INT 105
48237: ST_TO_ADDR
// if Multiplayer then
48238: LD_OWVAR 4
48242: IFFALSE 48282
// begin hc_gallery := MULTIAVATARS ;
48244: LD_ADDR_OWVAR 33
48248: PUSH
48249: LD_STRING MULTIAVATARS
48251: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48252: LD_ADDR_OWVAR 34
48256: PUSH
48257: LD_VAR 0 1
48261: PPUSH
48262: CALL_OW 525
48266: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48267: LD_ADDR_OWVAR 27
48271: PUSH
48272: LD_VAR 0 1
48276: PPUSH
48277: CALL_OW 526
48281: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48282: LD_ADDR_VAR 0 5
48286: PUSH
48287: LD_VAR 0 5
48291: PPUSH
48292: CALL_OW 44
48296: PPUSH
48297: CALL 40737 0 2
48301: ST_TO_ADDR
// if mpTeamPreset then
48302: LD_LOC 1
48306: IFFALSE 48402
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48308: LD_LOC 1
48312: PUSH
48313: LD_INT 1
48315: ARRAY
48316: PPUSH
48317: LD_VAR 0 5
48321: PUSH
48322: LD_VAR 0 5
48326: ARRAY
48327: PPUSH
48328: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48332: LD_VAR 0 5
48336: PUSH
48337: LD_VAR 0 5
48341: ARRAY
48342: PPUSH
48343: LD_INT 1
48345: PPUSH
48346: LD_LOC 1
48350: PUSH
48351: LD_INT 1
48353: ARRAY
48354: PPUSH
48355: LD_INT 1
48357: PPUSH
48358: CALL_OW 260
48362: PPUSH
48363: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48367: LD_VAR 0 5
48371: PUSH
48372: LD_VAR 0 5
48376: ARRAY
48377: PPUSH
48378: LD_INT 2
48380: PPUSH
48381: LD_LOC 1
48385: PUSH
48386: LD_INT 1
48388: ARRAY
48389: PPUSH
48390: LD_INT 2
48392: PPUSH
48393: CALL_OW 260
48397: PPUSH
48398: CALL_OW 239
// end ; InitHc_All ( ) ;
48402: CALL_OW 584
// class := 2 ;
48406: LD_ADDR_VAR 0 8
48410: PUSH
48411: LD_INT 2
48413: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48414: LD_ADDR_VAR 0 6
48418: PUSH
48419: DOUBLE
48420: LD_INT 1
48422: DEC
48423: ST_TO_ADDR
48424: LD_VAR 0 3
48428: PUSH
48429: LD_INT 1
48431: MINUS
48432: PUSH
48433: FOR_TO
48434: IFFALSE 48618
// begin PrepareHuman ( false , class , skill ) ;
48436: LD_INT 0
48438: PPUSH
48439: LD_VAR 0 8
48443: PPUSH
48444: LD_VAR 0 4
48448: PPUSH
48449: CALL_OW 380
// un := CreateHuman ;
48453: LD_ADDR_VAR 0 7
48457: PUSH
48458: CALL_OW 44
48462: ST_TO_ADDR
// result := Join ( result , un ) ;
48463: LD_ADDR_VAR 0 5
48467: PUSH
48468: LD_VAR 0 5
48472: PPUSH
48473: LD_VAR 0 7
48477: PPUSH
48478: CALL 40737 0 2
48482: ST_TO_ADDR
// if mpTeamPreset then
48483: LD_LOC 1
48487: IFFALSE 48583
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48489: LD_LOC 1
48493: PUSH
48494: LD_VAR 0 6
48498: PUSH
48499: LD_INT 1
48501: PLUS
48502: ARRAY
48503: PPUSH
48504: LD_VAR 0 7
48508: PPUSH
48509: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48513: LD_VAR 0 7
48517: PPUSH
48518: LD_INT 1
48520: PPUSH
48521: LD_LOC 1
48525: PUSH
48526: LD_VAR 0 6
48530: PUSH
48531: LD_INT 1
48533: PLUS
48534: ARRAY
48535: PPUSH
48536: LD_INT 1
48538: PPUSH
48539: CALL_OW 260
48543: PPUSH
48544: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48548: LD_VAR 0 7
48552: PPUSH
48553: LD_INT 2
48555: PPUSH
48556: LD_LOC 1
48560: PUSH
48561: LD_VAR 0 6
48565: PUSH
48566: LD_INT 1
48568: PLUS
48569: ARRAY
48570: PPUSH
48571: LD_INT 2
48573: PPUSH
48574: CALL_OW 260
48578: PPUSH
48579: CALL_OW 239
// end ; class := Inc ( class ) ;
48583: LD_ADDR_VAR 0 8
48587: PUSH
48588: LD_VAR 0 8
48592: PPUSH
48593: CALL 42098 0 1
48597: ST_TO_ADDR
// if class = 5 then
48598: LD_VAR 0 8
48602: PUSH
48603: LD_INT 5
48605: EQUAL
48606: IFFALSE 48616
// class := 1 ;
48608: LD_ADDR_VAR 0 8
48612: PUSH
48613: LD_INT 1
48615: ST_TO_ADDR
// end ;
48616: GO 48433
48618: POP
48619: POP
// if not mpTeamPreset then
48620: LD_LOC 1
48624: NOT
48625: IFFALSE 48637
// mpTeamPreset := result ;
48627: LD_ADDR_LOC 1
48631: PUSH
48632: LD_VAR 0 5
48636: ST_TO_ADDR
// end ;
48637: LD_VAR 0 5
48641: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48642: LD_INT 0
48644: PPUSH
48645: PPUSH
// result := [ ] ;
48646: LD_ADDR_VAR 0 4
48650: PUSH
48651: EMPTY
48652: ST_TO_ADDR
// if not vehicles then
48653: LD_VAR 0 3
48657: NOT
48658: IFFALSE 48662
// exit ;
48660: GO 48821
// for i := 1 to vehicles [ nation ] do
48662: LD_ADDR_VAR 0 5
48666: PUSH
48667: DOUBLE
48668: LD_INT 1
48670: DEC
48671: ST_TO_ADDR
48672: LD_VAR 0 3
48676: PUSH
48677: LD_VAR 0 2
48681: ARRAY
48682: PUSH
48683: FOR_TO
48684: IFFALSE 48819
// begin uc_side := side ;
48686: LD_ADDR_OWVAR 20
48690: PUSH
48691: LD_VAR 0 1
48695: ST_TO_ADDR
// uc_nation := nation ;
48696: LD_ADDR_OWVAR 21
48700: PUSH
48701: LD_VAR 0 2
48705: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48706: LD_VAR 0 3
48710: PUSH
48711: LD_VAR 0 2
48715: ARRAY
48716: PUSH
48717: LD_VAR 0 5
48721: ARRAY
48722: PUSH
48723: LD_INT 1
48725: ARRAY
48726: PPUSH
48727: LD_VAR 0 3
48731: PUSH
48732: LD_VAR 0 2
48736: ARRAY
48737: PUSH
48738: LD_VAR 0 5
48742: ARRAY
48743: PUSH
48744: LD_INT 2
48746: ARRAY
48747: PPUSH
48748: LD_VAR 0 3
48752: PUSH
48753: LD_VAR 0 2
48757: ARRAY
48758: PUSH
48759: LD_VAR 0 5
48763: ARRAY
48764: PUSH
48765: LD_INT 3
48767: ARRAY
48768: PPUSH
48769: LD_VAR 0 3
48773: PUSH
48774: LD_VAR 0 2
48778: ARRAY
48779: PUSH
48780: LD_VAR 0 5
48784: ARRAY
48785: PUSH
48786: LD_INT 4
48788: ARRAY
48789: PPUSH
48790: LD_INT 80
48792: PPUSH
48793: CALL 7866 0 5
// result := Join ( result , CreateVehicle ) ;
48797: LD_ADDR_VAR 0 4
48801: PUSH
48802: LD_VAR 0 4
48806: PPUSH
48807: CALL_OW 45
48811: PPUSH
48812: CALL 40737 0 2
48816: ST_TO_ADDR
// end ;
48817: GO 48683
48819: POP
48820: POP
// end ;
48821: LD_VAR 0 4
48825: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48826: LD_INT 0
48828: PPUSH
48829: PPUSH
// for i in mpBattleFlags do
48830: LD_ADDR_VAR 0 3
48834: PUSH
48835: LD_EXP 23
48839: PUSH
48840: FOR_IN
48841: IFFALSE 48918
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48843: LD_VAR 0 3
48847: PPUSH
48848: LD_INT 1
48850: PUSH
48851: LD_VAR 0 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_VAR 0 1
48867: PUSH
48868: LD_REAL  7.00000000000000E-0001
48871: MUL
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_VAR 0 1
48884: PUSH
48885: LD_REAL  4.00000000000000E-0001
48888: MUL
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 20
48896: PUSH
48897: LD_VAR 0 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL_OW 423
48916: GO 48840
48918: POP
48919: POP
// end ;
48920: LD_VAR 0 2
48924: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48925: LD_INT 100
48927: IFFALSE 49022
48929: GO 48931
48931: DISABLE
48932: LD_INT 0
48934: PPUSH
48935: PPUSH
// begin if mpBattleFlag <= 0 then
48936: LD_EXP 22
48940: PUSH
48941: LD_INT 0
48943: LESSEQUAL
48944: IFFALSE 48948
// exit ;
48946: GO 49022
// strength := 100 ;
48948: LD_ADDR_VAR 0 2
48952: PUSH
48953: LD_INT 100
48955: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48956: LD_EXP 22
48960: PPUSH
48961: CALL_OW 67
// strength := Dec ( strength ) ;
48965: LD_ADDR_VAR 0 2
48969: PUSH
48970: LD_VAR 0 2
48974: PPUSH
48975: CALL 42120 0 1
48979: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48980: LD_VAR 0 2
48984: PPUSH
48985: CALL 48826 0 1
// until not strength ;
48989: LD_VAR 0 2
48993: NOT
48994: IFFALSE 48956
// for i in mpBattleFlags do
48996: LD_ADDR_VAR 0 1
49000: PUSH
49001: LD_EXP 23
49005: PUSH
49006: FOR_IN
49007: IFFALSE 49020
// KillBattleFlag ( i ) ;
49009: LD_VAR 0 1
49013: PPUSH
49014: CALL_OW 419
49018: GO 49006
49020: POP
49021: POP
// end ;
49022: PPOPN 2
49024: END
// every 0 0$1 marked mpActive do var side , tmp ;
49025: GO 49027
49027: DISABLE
49028: LD_INT 0
49030: PPUSH
49031: PPUSH
// begin if mpSibBomb <= 1 then
49032: LD_EXP 28
49036: PUSH
49037: LD_INT 1
49039: LESSEQUAL
49040: IFFALSE 49044
// exit ;
49042: GO 49117
// tmp := mpSibBomb ;
49044: LD_ADDR_VAR 0 2
49048: PUSH
49049: LD_EXP 28
49053: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49054: LD_INT 35
49056: PPUSH
49057: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49061: LD_ADDR_VAR 0 2
49065: PUSH
49066: LD_VAR 0 2
49070: PUSH
49071: LD_INT 35
49073: MINUS
49074: ST_TO_ADDR
// until not tmp ;
49075: LD_VAR 0 2
49079: NOT
49080: IFFALSE 49054
// for side := 1 to 8 do
49082: LD_ADDR_VAR 0 1
49086: PUSH
49087: DOUBLE
49088: LD_INT 1
49090: DEC
49091: ST_TO_ADDR
49092: LD_INT 8
49094: PUSH
49095: FOR_TO
49096: IFFALSE 49115
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49098: LD_INT 25
49100: PPUSH
49101: LD_VAR 0 1
49105: PPUSH
49106: LD_INT 1
49108: PPUSH
49109: CALL_OW 322
49113: GO 49095
49115: POP
49116: POP
// end ;
49117: PPOPN 2
49119: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49120: LD_INT 0
49122: PPUSH
49123: PPUSH
49124: PPUSH
// mpBuildUpTimeDelay := 0 ;
49125: LD_ADDR_EXP 42
49129: PUSH
49130: LD_INT 0
49132: ST_TO_ADDR
// if not mpBuildUpTime then
49133: LD_EXP 20
49137: NOT
49138: IFFALSE 49142
// exit ;
49140: GO 49325
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49142: LD_ADDR_EXP 42
49146: PUSH
49147: LD_INT 8400
49149: PUSH
49150: LD_INT 2100
49152: PUSH
49153: LD_EXP 20
49157: MUL
49158: PLUS
49159: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49160: LD_ADDR_EXP 43
49164: PUSH
49165: LD_INT 1
49167: ST_TO_ADDR
// for i := 1 to 8 do
49168: LD_ADDR_VAR 0 2
49172: PUSH
49173: DOUBLE
49174: LD_INT 1
49176: DEC
49177: ST_TO_ADDR
49178: LD_INT 8
49180: PUSH
49181: FOR_TO
49182: IFFALSE 49323
// if mpSidePositions [ i ] then
49184: LD_EXP 7
49188: PUSH
49189: LD_VAR 0 2
49193: ARRAY
49194: IFFALSE 49321
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49196: LD_EXP 19
49200: PUSH
49201: LD_EXP 7
49205: PUSH
49206: LD_VAR 0 2
49210: ARRAY
49211: ARRAY
49212: PPUSH
49213: LD_INT 5
49215: PPUSH
49216: CALL_OW 424
// for j := 1 to 8 do
49220: LD_ADDR_VAR 0 3
49224: PUSH
49225: DOUBLE
49226: LD_INT 1
49228: DEC
49229: ST_TO_ADDR
49230: LD_INT 8
49232: PUSH
49233: FOR_TO
49234: IFFALSE 49319
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49236: LD_EXP 7
49240: PUSH
49241: LD_VAR 0 3
49245: ARRAY
49246: PUSH
49247: LD_EXP 8
49251: PUSH
49252: LD_VAR 0 2
49256: ARRAY
49257: PUSH
49258: LD_EXP 8
49262: PUSH
49263: LD_VAR 0 3
49267: ARRAY
49268: NONEQUAL
49269: PUSH
49270: LD_EXP 11
49274: NOT
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: LD_VAR 0 3
49285: NONEQUAL
49286: AND
49287: OR
49288: AND
49289: IFFALSE 49317
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49291: LD_VAR 0 3
49295: PPUSH
49296: LD_EXP 19
49300: PUSH
49301: LD_EXP 7
49305: PUSH
49306: LD_VAR 0 2
49310: ARRAY
49311: ARRAY
49312: PPUSH
49313: CALL_OW 333
49317: GO 49233
49319: POP
49320: POP
// end ;
49321: GO 49181
49323: POP
49324: POP
// end ;
49325: LD_VAR 0 1
49329: RET
// function EndBuildUp ; var i , j ; begin
49330: LD_INT 0
49332: PPUSH
49333: PPUSH
49334: PPUSH
// mpBuildUpTimeActive := false ;
49335: LD_ADDR_EXP 43
49339: PUSH
49340: LD_INT 0
49342: ST_TO_ADDR
// for i := 1 to 8 do
49343: LD_ADDR_VAR 0 2
49347: PUSH
49348: DOUBLE
49349: LD_INT 1
49351: DEC
49352: ST_TO_ADDR
49353: LD_INT 8
49355: PUSH
49356: FOR_TO
49357: IFFALSE 49498
// if mpSidePositions [ i ] then
49359: LD_EXP 7
49363: PUSH
49364: LD_VAR 0 2
49368: ARRAY
49369: IFFALSE 49496
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49371: LD_EXP 19
49375: PUSH
49376: LD_EXP 7
49380: PUSH
49381: LD_VAR 0 2
49385: ARRAY
49386: ARRAY
49387: PPUSH
49388: LD_INT 0
49390: PPUSH
49391: CALL_OW 424
// for j := 1 to 8 do
49395: LD_ADDR_VAR 0 3
49399: PUSH
49400: DOUBLE
49401: LD_INT 1
49403: DEC
49404: ST_TO_ADDR
49405: LD_INT 8
49407: PUSH
49408: FOR_TO
49409: IFFALSE 49494
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49411: LD_EXP 7
49415: PUSH
49416: LD_VAR 0 3
49420: ARRAY
49421: PUSH
49422: LD_EXP 8
49426: PUSH
49427: LD_VAR 0 2
49431: ARRAY
49432: PUSH
49433: LD_EXP 8
49437: PUSH
49438: LD_VAR 0 3
49442: ARRAY
49443: NONEQUAL
49444: PUSH
49445: LD_EXP 11
49449: NOT
49450: PUSH
49451: LD_VAR 0 2
49455: PUSH
49456: LD_VAR 0 3
49460: NONEQUAL
49461: AND
49462: OR
49463: AND
49464: IFFALSE 49492
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49466: LD_VAR 0 3
49470: PPUSH
49471: LD_EXP 19
49475: PUSH
49476: LD_EXP 7
49480: PUSH
49481: LD_VAR 0 2
49485: ARRAY
49486: ARRAY
49487: PPUSH
49488: CALL_OW 334
49492: GO 49408
49494: POP
49495: POP
// end ;
49496: GO 49356
49498: POP
49499: POP
// end ;
49500: LD_VAR 0 1
49504: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49505: LD_EXP 43
49509: IFFALSE 49684
49511: GO 49513
49513: DISABLE
49514: LD_INT 0
49516: PPUSH
49517: PPUSH
// begin for i := 1 to 8 do
49518: LD_ADDR_VAR 0 1
49522: PUSH
49523: DOUBLE
49524: LD_INT 1
49526: DEC
49527: ST_TO_ADDR
49528: LD_INT 8
49530: PUSH
49531: FOR_TO
49532: IFFALSE 49681
// if mpSidePositions [ i ] then
49534: LD_EXP 7
49538: PUSH
49539: LD_VAR 0 1
49543: ARRAY
49544: IFFALSE 49679
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49546: LD_ADDR_VAR 0 2
49550: PUSH
49551: LD_EXP 19
49555: PUSH
49556: LD_EXP 7
49560: PUSH
49561: LD_VAR 0 1
49565: ARRAY
49566: ARRAY
49567: PPUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 21
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 21
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 22
49598: PUSH
49599: LD_OWVAR 2
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PPUSH
49612: CALL_OW 70
49616: PUSH
49617: FOR_IN
49618: IFFALSE 49677
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49620: LD_EXP 8
49624: PUSH
49625: LD_VAR 0 1
49629: ARRAY
49630: PUSH
49631: LD_EXP 8
49635: PUSH
49636: LD_OWVAR 2
49640: ARRAY
49641: NONEQUAL
49642: PUSH
49643: LD_EXP 11
49647: NOT
49648: PUSH
49649: LD_VAR 0 1
49653: PUSH
49654: LD_OWVAR 2
49658: NONEQUAL
49659: AND
49660: OR
49661: IFFALSE 49675
// ComMoveToArea ( un , BuildUpEscape ) ;
49663: LD_VAR 0 2
49667: PPUSH
49668: LD_INT 9
49670: PPUSH
49671: CALL_OW 113
49675: GO 49617
49677: POP
49678: POP
49679: GO 49531
49681: POP
49682: POP
// enable ;
49683: ENABLE
// end ;
49684: PPOPN 2
49686: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49687: LD_EXP 20
49691: IFFALSE 49741
49693: GO 49695
49695: DISABLE
49696: LD_INT 0
49698: PPUSH
// begin tmp := mpBuildUpTime ;
49699: LD_ADDR_VAR 0 1
49703: PUSH
49704: LD_EXP 20
49708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49709: LD_INT 35
49711: PPUSH
49712: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49716: LD_ADDR_VAR 0 1
49720: PUSH
49721: LD_VAR 0 1
49725: PUSH
49726: LD_INT 35
49728: MINUS
49729: ST_TO_ADDR
// until not tmp ;
49730: LD_VAR 0 1
49734: NOT
49735: IFFALSE 49709
// EndBuildUp ;
49737: CALL 49330 0 0
// end ;
49741: PPOPN 1
49743: END
// every 0 0$1 trigger mpActive marked mpWin do
49744: LD_INT 100
49746: IFFALSE 49780
49748: GO 49750
49750: DISABLE
// begin if IAmServer then
49751: CALL_OW 518
49755: IFFALSE 49764
// wait ( 0 0$3 ) ;
49757: LD_INT 105
49759: PPUSH
49760: CALL_OW 67
// if Multiplayer then
49764: LD_OWVAR 4
49768: IFFALSE 49776
// YouWinInMultiplayer else
49770: CALL_OW 106
49774: GO 49780
// YouWin ;
49776: CALL_OW 103
// end ;
49780: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49781: LD_INT 0
49783: PPUSH
// result := false ;
49784: LD_ADDR_VAR 0 3
49788: PUSH
49789: LD_INT 0
49791: ST_TO_ADDR
// case gameType of GameTypeNormal :
49792: LD_VAR 0 1
49796: PUSH
49797: LD_INT 1
49799: DOUBLE
49800: EQUAL
49801: IFTRUE 49805
49803: GO 49878
49805: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49806: LD_ADDR_VAR 0 3
49810: PUSH
49811: LD_INT 22
49813: PUSH
49814: LD_VAR 0 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 21
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 33
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 33
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PPUSH
49866: CALL_OW 69
49870: PPUSH
49871: CALL 5128 0 1
49875: ST_TO_ADDR
// end ; GameTypeSurvival :
49876: GO 50113
49878: LD_INT 2
49880: DOUBLE
49881: EQUAL
49882: IFTRUE 49886
49884: GO 50014
49886: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49887: LD_ADDR_VAR 0 3
49891: PUSH
49892: LD_INT 22
49894: PUSH
49895: LD_VAR 0 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 30
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 30
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PPUSH
49936: CALL_OW 69
49940: PPUSH
49941: CALL 5128 0 1
49945: PUSH
49946: LD_INT 22
49948: PUSH
49949: LD_VAR 0 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 21
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 33
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 33
49983: PUSH
49984: LD_INT 5
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PPUSH
50001: CALL_OW 69
50005: PPUSH
50006: CALL 5128 0 1
50010: AND
50011: ST_TO_ADDR
// end ; GameTypeKing :
50012: GO 50113
50014: LD_INT 3
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50022
50020: GO 50112
50022: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50023: LD_ADDR_VAR 0 3
50027: PUSH
50028: LD_INT 22
50030: PUSH
50031: LD_VAR 0 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 21
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 33
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 33
50065: PUSH
50066: LD_INT 5
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PPUSH
50083: CALL_OW 69
50087: PPUSH
50088: CALL 5128 0 1
50092: PUSH
50093: LD_VAR 0 2
50097: PPUSH
50098: CALL 53394 0 1
50102: PUSH
50103: LD_EXP 35
50107: LESS
50108: AND
50109: ST_TO_ADDR
// end ; end ;
50110: GO 50113
50112: POP
// end ;
50113: LD_VAR 0 3
50117: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50118: LD_INT 100
50120: IFFALSE 50342
50122: GO 50124
50124: DISABLE
50125: LD_INT 0
50127: PPUSH
50128: PPUSH
// begin if Multiplayer then
50129: LD_OWVAR 4
50133: IFFALSE 50141
// SetPlayerSpectator ( ) else
50135: CALL_OW 572
50139: GO 50150
// FogOff ( your_side ) ;
50141: LD_OWVAR 2
50145: PPUSH
50146: CALL_OW 344
// repeat gameIsOn := false ;
50150: LD_ADDR_VAR 0 1
50154: PUSH
50155: LD_INT 0
50157: ST_TO_ADDR
// for i := 1 to 8 do
50158: LD_ADDR_VAR 0 2
50162: PUSH
50163: DOUBLE
50164: LD_INT 1
50166: DEC
50167: ST_TO_ADDR
50168: LD_INT 8
50170: PUSH
50171: FOR_TO
50172: IFFALSE 50294
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50174: LD_EXP 7
50178: PUSH
50179: LD_VAR 0 2
50183: ARRAY
50184: PUSH
50185: LD_VAR 0 2
50189: PPUSH
50190: CALL_OW 108
50194: AND
50195: PUSH
50196: LD_VAR 0 2
50200: PUSH
50201: LD_OWVAR 2
50205: NONEQUAL
50206: AND
50207: IFFALSE 50292
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50209: LD_EXP 8
50213: PUSH
50214: LD_VAR 0 2
50218: ARRAY
50219: NOT
50220: PUSH
50221: LD_EXP 8
50225: PUSH
50226: LD_VAR 0 2
50230: ARRAY
50231: PUSH
50232: LD_EXP 8
50236: PUSH
50237: LD_OWVAR 2
50241: ARRAY
50242: NONEQUAL
50243: PUSH
50244: LD_OWVAR 2
50248: PPUSH
50249: LD_VAR 0 2
50253: PPUSH
50254: CALL_OW 81
50258: PUSH
50259: LD_INT 1
50261: NONEQUAL
50262: AND
50263: OR
50264: IFFALSE 50292
// if HasPowerByGameType ( mpGameType , i ) then
50266: LD_EXP 3
50270: PPUSH
50271: LD_VAR 0 2
50275: PPUSH
50276: CALL 49781 0 2
50280: IFFALSE 50292
// begin gameIsOn := true ;
50282: LD_ADDR_VAR 0 1
50286: PUSH
50287: LD_INT 1
50289: ST_TO_ADDR
// break ;
50290: GO 50294
// end ;
50292: GO 50171
50294: POP
50295: POP
// wait ( 100 ) ;
50296: LD_INT 100
50298: PPUSH
50299: CALL_OW 67
// until not gameIsOn ;
50303: LD_VAR 0 1
50307: NOT
50308: IFFALSE 50150
// if IAmServer then
50310: CALL_OW 518
50314: IFFALSE 50323
// wait ( 0 0$3 ) ;
50316: LD_INT 105
50318: PPUSH
50319: CALL_OW 67
// if Multiplayer then
50323: LD_OWVAR 4
50327: IFFALSE 50335
// YouLostInMultiplayer else
50329: CALL_OW 107
50333: GO 50342
// YouLost (  ) ;
50335: LD_STRING 
50337: PPUSH
50338: CALL_OW 104
// end ;
50342: PPOPN 2
50344: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50345: LD_EXP 33
50349: IFFALSE 50725
50351: GO 50353
50353: DISABLE
50354: LD_INT 0
50356: PPUSH
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50361: LD_ADDR_VAR 0 5
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: LD_INT 4
50377: PUSH
50378: LD_INT 5
50380: PUSH
50381: LD_INT 6
50383: PUSH
50384: LD_INT 7
50386: PUSH
50387: LD_INT 8
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50400: LD_INT 350
50402: PPUSH
50403: CALL_OW 67
// for i := 1 to 8 do
50407: LD_ADDR_VAR 0 1
50411: PUSH
50412: DOUBLE
50413: LD_INT 1
50415: DEC
50416: ST_TO_ADDR
50417: LD_INT 8
50419: PUSH
50420: FOR_TO
50421: IFFALSE 50695
// begin j := sides [ i ] ;
50423: LD_ADDR_VAR 0 2
50427: PUSH
50428: LD_VAR 0 5
50432: PUSH
50433: LD_VAR 0 1
50437: ARRAY
50438: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50439: LD_EXP 40
50443: PUSH
50444: LD_VAR 0 2
50448: ARRAY
50449: PPUSH
50450: CALL 5128 0 1
50454: PUSH
50455: LD_VAR 0 2
50459: PPUSH
50460: CALL_OW 108
50464: AND
50465: PUSH
50466: LD_EXP 3
50470: PPUSH
50471: LD_VAR 0 2
50475: PPUSH
50476: CALL 49781 0 2
50480: AND
50481: IFFALSE 50693
// begin wait ( mpRespawn div 3 ) ;
50483: LD_EXP 33
50487: PUSH
50488: LD_INT 3
50490: DIV
50491: PPUSH
50492: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: LD_INT 22
50503: PUSH
50504: LD_VAR 0 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 50
50515: PUSH
50516: EMPTY
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 30
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: PPUSH
50552: CALL_OW 69
50556: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
50557: LD_VAR 0 3
50561: NOT
50562: PUSH
50563: LD_VAR 0 2
50567: PPUSH
50568: CALL_OW 108
50572: NOT
50573: OR
50574: PUSH
50575: LD_EXP 3
50579: PPUSH
50580: LD_VAR 0 2
50584: PPUSH
50585: CALL 49781 0 2
50589: NOT
50590: OR
50591: IFFALSE 50595
// continue ;
50593: GO 50420
// spawn := tmp [ 1 ] ;
50595: LD_ADDR_VAR 0 4
50599: PUSH
50600: LD_VAR 0 3
50604: PUSH
50605: LD_INT 1
50607: ARRAY
50608: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50609: LD_EXP 40
50613: PUSH
50614: LD_VAR 0 2
50618: ARRAY
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: PPUSH
50624: LD_VAR 0 4
50628: PPUSH
50629: CALL_OW 250
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 251
50643: PPUSH
50644: LD_INT 32
50646: PPUSH
50647: LD_INT 1
50649: PPUSH
50650: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50654: LD_ADDR_EXP 40
50658: PUSH
50659: LD_EXP 40
50663: PPUSH
50664: LD_VAR 0 2
50668: PPUSH
50669: LD_EXP 40
50673: PUSH
50674: LD_VAR 0 2
50678: ARRAY
50679: PPUSH
50680: LD_INT 1
50682: PPUSH
50683: CALL_OW 3
50687: PPUSH
50688: CALL_OW 1
50692: ST_TO_ADDR
// end ; end ;
50693: GO 50420
50695: POP
50696: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50697: LD_ADDR_VAR 0 5
50701: PUSH
50702: LD_VAR 0 5
50706: PPUSH
50707: LD_INT 1
50709: PPUSH
50710: LD_INT 8
50712: PPUSH
50713: LD_INT 1
50715: PPUSH
50716: CALL 7406 0 4
50720: ST_TO_ADDR
// until false ;
50721: LD_INT 0
50723: IFFALSE 50400
// end ;
50725: PPOPN 5
50727: END
// every 0 0$1 marked mpActive do
50728: GO 50730
50730: DISABLE
// begin enable ;
50731: ENABLE
// if not mpDisplayStrings then
50732: LD_EXP 38
50736: NOT
50737: IFFALSE 50748
// begin display_strings := [ ] ;
50739: LD_ADDR_OWVAR 47
50743: PUSH
50744: EMPTY
50745: ST_TO_ADDR
// exit ;
50746: GO 50758
// end ; display_strings := mpDisplayStrings ;
50748: LD_ADDR_OWVAR 47
50752: PUSH
50753: LD_EXP 38
50757: ST_TO_ADDR
// end ; end_of_file
50758: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50759: LD_INT 0
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
// if GetType ( un ) = unit_vehicle then
50770: LD_VAR 0 1
50774: PPUSH
50775: CALL_OW 247
50779: PUSH
50780: LD_INT 2
50782: EQUAL
50783: IFFALSE 50787
// exit ;
50785: GO 51419
// side := GetSide ( un ) ;
50787: LD_ADDR_VAR 0 9
50791: PUSH
50792: LD_VAR 0 1
50796: PPUSH
50797: CALL_OW 255
50801: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50802: LD_EXP 3
50806: PUSH
50807: LD_INT 2
50809: EQUAL
50810: IFFALSE 50886
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
50812: LD_VAR 0 1
50816: PPUSH
50817: CALL_OW 266
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: IN
50832: IFFALSE 50886
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50834: LD_ADDR_VAR 0 3
50838: PUSH
50839: LD_INT 22
50841: PUSH
50842: LD_VAR 0 9
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 21
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PPUSH
50865: CALL_OW 69
50869: PUSH
50870: FOR_IN
50871: IFFALSE 50884
// KillUnit ( i ) ;
50873: LD_VAR 0 3
50877: PPUSH
50878: CALL_OW 66
50882: GO 50870
50884: POP
50885: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50886: LD_VAR 0 1
50890: PPUSH
50891: CALL_OW 257
50895: PUSH
50896: LD_INT 12
50898: PUSH
50899: LD_INT 17
50901: PUSH
50902: LD_INT 15
50904: PUSH
50905: LD_INT 16
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: IN
50914: PUSH
50915: LD_VAR 0 1
50919: PPUSH
50920: CALL_OW 263
50924: PUSH
50925: LD_INT 5
50927: EQUAL
50928: OR
50929: IFFALSE 51148
// begin tag := 0 ;
50931: LD_ADDR_VAR 0 5
50935: PUSH
50936: LD_INT 0
50938: ST_TO_ADDR
// for i := 1 to 8 do
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: DOUBLE
50945: LD_INT 1
50947: DEC
50948: ST_TO_ADDR
50949: LD_INT 8
50951: PUSH
50952: FOR_TO
50953: IFFALSE 50987
// if un in mpApePosIndex [ i ] then
50955: LD_VAR 0 1
50959: PUSH
50960: LD_EXP 32
50964: PUSH
50965: LD_VAR 0 3
50969: ARRAY
50970: IN
50971: IFFALSE 50985
// begin tag := i ;
50973: LD_ADDR_VAR 0 5
50977: PUSH
50978: LD_VAR 0 3
50982: ST_TO_ADDR
// break ;
50983: GO 50987
// end ;
50985: GO 50952
50987: POP
50988: POP
// if not tag then
50989: LD_VAR 0 5
50993: NOT
50994: IFFALSE 50998
// exit ;
50996: GO 51419
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50998: LD_ADDR_VAR 0 7
51002: PUSH
51003: LD_EXP 31
51007: PUSH
51008: LD_EXP 7
51012: PUSH
51013: LD_VAR 0 5
51017: ARRAY
51018: ARRAY
51019: ST_TO_ADDR
// if not area then
51020: LD_VAR 0 7
51024: NOT
51025: IFFALSE 51029
// exit ;
51027: GO 51419
// wait ( 4 4$00 ) ;
51029: LD_INT 8400
51031: PPUSH
51032: CALL_OW 67
// repeat wait ( 10 ) ;
51036: LD_INT 10
51038: PPUSH
51039: CALL_OW 67
// until not mpBlockRespThread ;
51043: LD_EXP 41
51047: NOT
51048: IFFALSE 51036
// mpBlockRespThread := true ;
51050: LD_ADDR_EXP 41
51054: PUSH
51055: LD_INT 1
51057: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51058: LD_INT 0
51060: PPUSH
51061: CALL 36985 0 1
// ape := CreateHuman ;
51065: LD_ADDR_VAR 0 4
51069: PUSH
51070: CALL_OW 44
51074: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51075: LD_ADDR_EXP 32
51079: PUSH
51080: LD_EXP 32
51084: PPUSH
51085: LD_VAR 0 5
51089: PPUSH
51090: LD_EXP 32
51094: PUSH
51095: LD_VAR 0 5
51099: ARRAY
51100: PPUSH
51101: LD_VAR 0 4
51105: PPUSH
51106: CALL 40737 0 2
51110: PPUSH
51111: CALL_OW 1
51115: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51116: LD_VAR 0 4
51120: PPUSH
51121: LD_VAR 0 7
51125: PPUSH
51126: LD_INT 0
51128: PPUSH
51129: CALL_OW 49
// wait ( 10 ) ;
51133: LD_INT 10
51135: PPUSH
51136: CALL_OW 67
// mpBlockRespThread := false ;
51140: LD_ADDR_EXP 41
51144: PUSH
51145: LD_INT 0
51147: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51148: LD_VAR 0 1
51152: PPUSH
51153: CALL_OW 247
51157: PUSH
51158: LD_INT 1
51160: EQUAL
51161: PUSH
51162: LD_VAR 0 1
51166: PPUSH
51167: CALL_OW 248
51171: PUSH
51172: LD_INT 0
51174: GREATER
51175: AND
51176: IFFALSE 51419
// begin if not mpRespawn then
51178: LD_EXP 33
51182: NOT
51183: IFFALSE 51187
// exit ;
51185: GO 51419
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51187: LD_VAR 0 9
51191: PPUSH
51192: CALL_OW 108
51196: NOT
51197: PUSH
51198: LD_EXP 3
51202: PPUSH
51203: LD_VAR 0 9
51207: PPUSH
51208: CALL 49781 0 2
51212: NOT
51213: AND
51214: IFFALSE 51218
// exit ;
51216: GO 51419
// side := GetSide ( un ) ;
51218: LD_ADDR_VAR 0 9
51222: PUSH
51223: LD_VAR 0 1
51227: PPUSH
51228: CALL_OW 255
51232: ST_TO_ADDR
// nation := GetNation ( un ) ;
51233: LD_ADDR_VAR 0 8
51237: PUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: CALL_OW 248
51247: ST_TO_ADDR
// class := GetClass ( un ) ;
51248: LD_ADDR_VAR 0 6
51252: PUSH
51253: LD_VAR 0 1
51257: PPUSH
51258: CALL_OW 257
51262: ST_TO_ADDR
// if class > 4 then
51263: LD_VAR 0 6
51267: PUSH
51268: LD_INT 4
51270: GREATER
51271: IFFALSE 51281
// class := 1 ;
51273: LD_ADDR_VAR 0 6
51277: PUSH
51278: LD_INT 1
51280: ST_TO_ADDR
// repeat wait ( 10 ) ;
51281: LD_INT 10
51283: PPUSH
51284: CALL_OW 67
// until not mpBlockRespThread ;
51288: LD_EXP 41
51292: NOT
51293: IFFALSE 51281
// mpBlockRespThread := true ;
51295: LD_ADDR_EXP 41
51299: PUSH
51300: LD_INT 1
51302: ST_TO_ADDR
// uc_side := side ;
51303: LD_ADDR_OWVAR 20
51307: PUSH
51308: LD_VAR 0 9
51312: ST_TO_ADDR
// uc_nation := nation ;
51313: LD_ADDR_OWVAR 21
51317: PUSH
51318: LD_VAR 0 8
51322: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51323: LD_INT 0
51325: PPUSH
51326: LD_VAR 0 6
51330: PPUSH
51331: LD_INT 2
51333: PPUSH
51334: CALL_OW 380
// un := CreateHuman ;
51338: LD_ADDR_VAR 0 1
51342: PUSH
51343: CALL_OW 44
51347: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51348: LD_ADDR_EXP 40
51352: PUSH
51353: LD_EXP 40
51357: PPUSH
51358: LD_VAR 0 9
51362: PPUSH
51363: LD_EXP 40
51367: PUSH
51368: LD_VAR 0 9
51372: ARRAY
51373: PPUSH
51374: LD_EXP 40
51378: PUSH
51379: LD_VAR 0 9
51383: ARRAY
51384: PUSH
51385: LD_INT 1
51387: PLUS
51388: PPUSH
51389: LD_VAR 0 1
51393: PPUSH
51394: CALL_OW 1
51398: PPUSH
51399: CALL_OW 1
51403: ST_TO_ADDR
// wait ( 10 ) ;
51404: LD_INT 10
51406: PPUSH
51407: CALL_OW 67
// mpBlockRespThread := false ;
51411: LD_ADDR_EXP 41
51415: PUSH
51416: LD_INT 0
51418: ST_TO_ADDR
// end ; end ;
51419: LD_VAR 0 2
51423: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51424: LD_INT 0
51426: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51427: LD_VAR 0 1
51431: PPUSH
51432: CALL_OW 266
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: IN
51447: IFFALSE 51472
// SetBName ( building , @ & GetSide ( building ) ) ;
51449: LD_VAR 0 1
51453: PPUSH
51454: LD_STRING @
51456: PUSH
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 255
51466: STR
51467: PPUSH
51468: CALL_OW 500
// end ;
51472: LD_VAR 0 2
51476: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51477: LD_INT 0
51479: PPUSH
51480: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51481: LD_EXP 3
51485: PUSH
51486: LD_INT 2
51488: EQUAL
51489: PUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 266
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: IN
51510: AND
51511: IFFALSE 51576
// begin KillUnit ( building ) ;
51513: LD_VAR 0 1
51517: PPUSH
51518: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51522: LD_ADDR_VAR 0 5
51526: PUSH
51527: LD_INT 22
51529: PUSH
51530: LD_VAR 0 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 21
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PPUSH
51553: CALL_OW 69
51557: PUSH
51558: FOR_IN
51559: IFFALSE 51572
// KillUnit ( i ) ;
51561: LD_VAR 0 5
51565: PPUSH
51566: CALL_OW 66
51570: GO 51558
51572: POP
51573: POP
// exit ;
51574: GO 51621
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51576: LD_VAR 0 1
51580: PPUSH
51581: CALL_OW 266
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: IN
51596: IFFALSE 51621
// SetBName ( building , @ & GetSide ( building ) ) ;
51598: LD_VAR 0 1
51602: PPUSH
51603: LD_STRING @
51605: PUSH
51606: LD_VAR 0 1
51610: PPUSH
51611: CALL_OW 255
51615: STR
51616: PPUSH
51617: CALL_OW 500
// end ; end_of_file
51621: LD_VAR 0 4
51625: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51626: LD_EXP 39
51630: PUSH
51631: CALL 51836 0 0
51635: AND
51636: PUSH
51637: LD_OWVAR 4
51641: AND
51642: IFFALSE 51833
51644: GO 51646
51646: DISABLE
51647: LD_INT 0
51649: PPUSH
51650: PPUSH
// begin canWin := false ;
51651: LD_ADDR_VAR 0 2
51655: PUSH
51656: LD_INT 0
51658: ST_TO_ADDR
// if not HasPower ( your_side ) then
51659: LD_OWVAR 2
51663: PPUSH
51664: CALL 51876 0 1
51668: NOT
51669: IFFALSE 51680
// begin Multiplayer_Loose_Message ;
51671: CALL_OW 521
// enable ( mpLose ) ;
51675: LD_INT 102
51677: ENABLE_MARKED
// end else
51678: GO 51833
// begin canWin := true ;
51680: LD_ADDR_VAR 0 2
51684: PUSH
51685: LD_INT 1
51687: ST_TO_ADDR
// for i := 1 to 8 do
51688: LD_ADDR_VAR 0 1
51692: PUSH
51693: DOUBLE
51694: LD_INT 1
51696: DEC
51697: ST_TO_ADDR
51698: LD_INT 8
51700: PUSH
51701: FOR_TO
51702: IFFALSE 51819
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51704: LD_EXP 7
51708: PUSH
51709: LD_VAR 0 1
51713: ARRAY
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 108
51724: AND
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_OWVAR 2
51735: NONEQUAL
51736: AND
51737: IFFALSE 51817
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51739: LD_EXP 8
51743: PUSH
51744: LD_VAR 0 1
51748: ARRAY
51749: NOT
51750: PUSH
51751: LD_EXP 8
51755: PUSH
51756: LD_VAR 0 1
51760: ARRAY
51761: PUSH
51762: LD_EXP 8
51766: PUSH
51767: LD_OWVAR 2
51771: ARRAY
51772: NONEQUAL
51773: PUSH
51774: LD_OWVAR 2
51778: PPUSH
51779: LD_VAR 0 1
51783: PPUSH
51784: CALL_OW 81
51788: PUSH
51789: LD_INT 1
51791: NONEQUAL
51792: AND
51793: OR
51794: IFFALSE 51817
// if HasPower ( i ) then
51796: LD_VAR 0 1
51800: PPUSH
51801: CALL 51876 0 1
51805: IFFALSE 51817
// begin canWin := false ;
51807: LD_ADDR_VAR 0 2
51811: PUSH
51812: LD_INT 0
51814: ST_TO_ADDR
// break ;
51815: GO 51819
// end ;
51817: GO 51701
51819: POP
51820: POP
// if canWin then
51821: LD_VAR 0 2
51825: IFFALSE 51832
// enable ( mpWin ) else
51827: LD_INT 101
51829: ENABLE_MARKED
51830: GO 51833
// enable ;
51832: ENABLE
// end ; end ;
51833: PPOPN 2
51835: END
// function CanWinLoose ; begin
51836: LD_INT 0
51838: PPUSH
// result := true ;
51839: LD_ADDR_VAR 0 1
51843: PUSH
51844: LD_INT 1
51846: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51847: CALL_OW 531
51851: PUSH
51852: CALL_OW 519
51856: PUSH
51857: LD_INT 1
51859: GREATER
51860: AND
51861: IFFALSE 51871
// result := false ;
51863: LD_ADDR_VAR 0 1
51867: PUSH
51868: LD_INT 0
51870: ST_TO_ADDR
// end ;
51871: LD_VAR 0 1
51875: RET
// function HasPower ( i ) ; begin
51876: LD_INT 0
51878: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51879: LD_ADDR_VAR 0 2
51883: PUSH
51884: LD_INT 22
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 21
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 33
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 33
51921: PUSH
51922: LD_INT 5
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PPUSH
51939: CALL_OW 69
51943: ST_TO_ADDR
// end ; end_of_file
51944: LD_VAR 0 2
51948: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51949: LD_EXP 39
51953: IFFALSE 51996
51955: GO 51957
51957: DISABLE
51958: LD_INT 0
51960: PPUSH
// begin for i := 1 to 8 do
51961: LD_ADDR_VAR 0 1
51965: PUSH
51966: DOUBLE
51967: LD_INT 1
51969: DEC
51970: ST_TO_ADDR
51971: LD_INT 8
51973: PUSH
51974: FOR_TO
51975: IFFALSE 51994
// SetRestrict ( b_depot , i , state_disabled ) ;
51977: LD_INT 0
51979: PPUSH
51980: LD_VAR 0 1
51984: PPUSH
51985: LD_INT 0
51987: PPUSH
51988: CALL_OW 324
51992: GO 51974
51994: POP
51995: POP
// end ;
51996: PPOPN 1
51998: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51999: LD_EXP 39
52003: PUSH
52004: CALL 52209 0 0
52008: AND
52009: PUSH
52010: LD_OWVAR 4
52014: AND
52015: IFFALSE 52206
52017: GO 52019
52019: DISABLE
52020: LD_INT 0
52022: PPUSH
52023: PPUSH
// begin canWin := false ;
52024: LD_ADDR_VAR 0 2
52028: PUSH
52029: LD_INT 0
52031: ST_TO_ADDR
// if not HasPower ( your_side ) then
52032: LD_OWVAR 2
52036: PPUSH
52037: CALL 52249 0 1
52041: NOT
52042: IFFALSE 52053
// begin Multiplayer_Loose_Message ;
52044: CALL_OW 521
// enable ( mpLose ) ;
52048: LD_INT 102
52050: ENABLE_MARKED
// end else
52051: GO 52206
// begin canWin := true ;
52053: LD_ADDR_VAR 0 2
52057: PUSH
52058: LD_INT 1
52060: ST_TO_ADDR
// for i := 1 to 8 do
52061: LD_ADDR_VAR 0 1
52065: PUSH
52066: DOUBLE
52067: LD_INT 1
52069: DEC
52070: ST_TO_ADDR
52071: LD_INT 8
52073: PUSH
52074: FOR_TO
52075: IFFALSE 52192
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52077: LD_EXP 7
52081: PUSH
52082: LD_VAR 0 1
52086: ARRAY
52087: PUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 108
52097: AND
52098: PUSH
52099: LD_VAR 0 1
52103: PUSH
52104: LD_OWVAR 2
52108: NONEQUAL
52109: AND
52110: IFFALSE 52190
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52112: LD_EXP 8
52116: PUSH
52117: LD_VAR 0 1
52121: ARRAY
52122: NOT
52123: PUSH
52124: LD_EXP 8
52128: PUSH
52129: LD_VAR 0 1
52133: ARRAY
52134: PUSH
52135: LD_EXP 8
52139: PUSH
52140: LD_OWVAR 2
52144: ARRAY
52145: NONEQUAL
52146: PUSH
52147: LD_OWVAR 2
52151: PPUSH
52152: LD_VAR 0 1
52156: PPUSH
52157: CALL_OW 81
52161: PUSH
52162: LD_INT 1
52164: NONEQUAL
52165: AND
52166: OR
52167: IFFALSE 52190
// if HasPower ( i ) then
52169: LD_VAR 0 1
52173: PPUSH
52174: CALL 52249 0 1
52178: IFFALSE 52190
// begin canWin := false ;
52180: LD_ADDR_VAR 0 2
52184: PUSH
52185: LD_INT 0
52187: ST_TO_ADDR
// break ;
52188: GO 52192
// end ;
52190: GO 52074
52192: POP
52193: POP
// if canWin then
52194: LD_VAR 0 2
52198: IFFALSE 52205
// enable ( mpWin ) else
52200: LD_INT 101
52202: ENABLE_MARKED
52203: GO 52206
// enable ;
52205: ENABLE
// end ; end ;
52206: PPOPN 2
52208: END
// function CanWinLoose ; begin
52209: LD_INT 0
52211: PPUSH
// result := true ;
52212: LD_ADDR_VAR 0 1
52216: PUSH
52217: LD_INT 1
52219: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52220: CALL_OW 531
52224: PUSH
52225: CALL_OW 519
52229: PUSH
52230: LD_INT 1
52232: GREATER
52233: AND
52234: IFFALSE 52244
// result := false ;
52236: LD_ADDR_VAR 0 1
52240: PUSH
52241: LD_INT 0
52243: ST_TO_ADDR
// end ;
52244: LD_VAR 0 1
52248: RET
// function HasPower ( i ) ; begin
52249: LD_INT 0
52251: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52252: LD_INT 22
52254: PUSH
52255: LD_VAR 0 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 30
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 30
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PPUSH
52296: CALL_OW 69
52300: NOT
52301: IFFALSE 52305
// exit ;
52303: GO 52370
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52305: LD_ADDR_VAR 0 2
52309: PUSH
52310: LD_INT 22
52312: PUSH
52313: LD_VAR 0 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 21
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 33
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 33
52347: PUSH
52348: LD_INT 5
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PPUSH
52365: CALL_OW 69
52369: ST_TO_ADDR
// end ; end_of_file
52370: LD_VAR 0 2
52374: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52375: LD_EXP 39
52379: IFFALSE 52720
52381: GO 52383
52383: DISABLE
52384: LD_INT 0
52386: PPUSH
52387: PPUSH
52388: PPUSH
// begin mpKingPoints := [ ] ;
52389: LD_ADDR_EXP 44
52393: PUSH
52394: EMPTY
52395: ST_TO_ADDR
// if mpTeamGame then
52396: LD_EXP 11
52400: IFFALSE 52454
// begin for i := 1 to Count ( mpTeams ) do
52402: LD_ADDR_VAR 0 1
52406: PUSH
52407: DOUBLE
52408: LD_INT 1
52410: DEC
52411: ST_TO_ADDR
52412: LD_EXP 10
52416: PPUSH
52417: CALL 5128 0 1
52421: PUSH
52422: FOR_TO
52423: IFFALSE 52450
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52425: LD_ADDR_EXP 44
52429: PUSH
52430: LD_EXP 44
52434: PPUSH
52435: LD_VAR 0 1
52439: PPUSH
52440: LD_INT 0
52442: PPUSH
52443: CALL_OW 1
52447: ST_TO_ADDR
52448: GO 52422
52450: POP
52451: POP
// end else
52452: GO 52497
// begin for i := 1 to 8 do
52454: LD_ADDR_VAR 0 1
52458: PUSH
52459: DOUBLE
52460: LD_INT 1
52462: DEC
52463: ST_TO_ADDR
52464: LD_INT 8
52466: PUSH
52467: FOR_TO
52468: IFFALSE 52495
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52470: LD_ADDR_EXP 44
52474: PUSH
52475: LD_EXP 44
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: LD_INT 0
52487: PPUSH
52488: CALL_OW 1
52492: ST_TO_ADDR
52493: GO 52467
52495: POP
52496: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52497: LD_ADDR_VAR 0 3
52501: PUSH
52502: LD_EXP 2
52506: PPUSH
52507: LD_INT 0
52509: PPUSH
52510: CALL_OW 517
52514: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52515: LD_ADDR_VAR 0 1
52519: PUSH
52520: DOUBLE
52521: LD_INT 1
52523: DEC
52524: ST_TO_ADDR
52525: LD_VAR 0 3
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PUSH
52534: FOR_TO
52535: IFFALSE 52602
// for j := 1 to 8 do
52537: LD_ADDR_VAR 0 2
52541: PUSH
52542: DOUBLE
52543: LD_INT 1
52545: DEC
52546: ST_TO_ADDR
52547: LD_INT 8
52549: PUSH
52550: FOR_TO
52551: IFFALSE 52598
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52553: LD_VAR 0 3
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PUSH
52562: LD_VAR 0 1
52566: ARRAY
52567: PPUSH
52568: LD_VAR 0 3
52572: PUSH
52573: LD_INT 2
52575: ARRAY
52576: PUSH
52577: LD_VAR 0 1
52581: ARRAY
52582: PPUSH
52583: LD_VAR 0 2
52587: PPUSH
52588: LD_INT 12
52590: NEG
52591: PPUSH
52592: CALL_OW 330
52596: GO 52550
52598: POP
52599: POP
52600: GO 52534
52602: POP
52603: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52604: LD_EXP 34
52608: PPUSH
52609: LD_INT 1
52611: PPUSH
52612: CALL_OW 424
// UpdateCounter ;
52616: CALL 53224 0 0
// repeat wait ( 0 0$1 ) ;
52620: LD_INT 35
52622: PPUSH
52623: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52627: LD_ADDR_VAR 0 3
52631: PUSH
52632: LD_EXP 34
52636: PPUSH
52637: LD_INT 3
52639: PUSH
52640: LD_INT 57
52642: PUSH
52643: EMPTY
52644: LIST
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 50
52652: PUSH
52653: EMPTY
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 30
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 30
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: PPUSH
52689: CALL_OW 70
52693: ST_TO_ADDR
// if not tmp then
52694: LD_VAR 0 3
52698: NOT
52699: IFFALSE 52703
// continue ;
52701: GO 52620
// AddPoints ( tmp ) ;
52703: LD_VAR 0 3
52707: PPUSH
52708: CALL 52902 0 1
// UpdateCounter ;
52712: CALL 53224 0 0
// until false ;
52716: LD_INT 0
52718: IFFALSE 52620
// end ;
52720: PPOPN 3
52722: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52723: LD_EXP 39
52727: PUSH
52728: LD_EXP 37
52732: AND
52733: IFFALSE 52899
52735: GO 52737
52737: DISABLE
52738: LD_INT 0
52740: PPUSH
52741: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52742: LD_ADDR_VAR 0 2
52746: PUSH
52747: LD_EXP 2
52751: PPUSH
52752: LD_INT 0
52754: PPUSH
52755: CALL_OW 517
52759: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52760: LD_ADDR_VAR 0 1
52764: PUSH
52765: DOUBLE
52766: LD_INT 1
52768: DEC
52769: ST_TO_ADDR
52770: LD_VAR 0 2
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PUSH
52779: FOR_TO
52780: IFFALSE 52821
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 1
52789: ARRAY
52790: PUSH
52791: LD_VAR 0 1
52795: ARRAY
52796: PPUSH
52797: LD_VAR 0 2
52801: PUSH
52802: LD_INT 2
52804: ARRAY
52805: PUSH
52806: LD_VAR 0 1
52810: ARRAY
52811: PPUSH
52812: LD_INT 125
52814: PPUSH
52815: CALL_OW 495
52819: GO 52779
52821: POP
52822: POP
// repeat wait ( mpEmissions ) ;
52823: LD_EXP 37
52827: PPUSH
52828: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52832: LD_ADDR_VAR 0 1
52836: PUSH
52837: DOUBLE
52838: LD_INT 1
52840: DEC
52841: ST_TO_ADDR
52842: LD_VAR 0 2
52846: PUSH
52847: LD_INT 1
52849: ARRAY
52850: PUSH
52851: FOR_TO
52852: IFFALSE 52893
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52854: LD_VAR 0 2
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: LD_VAR 0 1
52867: ARRAY
52868: PPUSH
52869: LD_VAR 0 2
52873: PUSH
52874: LD_INT 2
52876: ARRAY
52877: PUSH
52878: LD_VAR 0 1
52882: ARRAY
52883: PPUSH
52884: LD_INT 15
52886: PPUSH
52887: CALL_OW 495
52891: GO 52851
52893: POP
52894: POP
// until false ;
52895: LD_INT 0
52897: IFFALSE 52823
// end ;
52899: PPOPN 2
52901: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52902: LD_INT 0
52904: PPUSH
52905: PPUSH
52906: PPUSH
52907: PPUSH
52908: PPUSH
// if mpTeamGame then
52909: LD_EXP 11
52913: IFFALSE 53110
// begin first := depots [ 1 ] ;
52915: LD_ADDR_VAR 0 4
52919: PUSH
52920: LD_VAR 0 1
52924: PUSH
52925: LD_INT 1
52927: ARRAY
52928: ST_TO_ADDR
// side := GetSide ( first ) ;
52929: LD_ADDR_VAR 0 6
52933: PUSH
52934: LD_VAR 0 4
52938: PPUSH
52939: CALL_OW 255
52943: ST_TO_ADDR
// for i := 1 to mpTeams do
52944: LD_ADDR_VAR 0 3
52948: PUSH
52949: DOUBLE
52950: LD_INT 1
52952: DEC
52953: ST_TO_ADDR
52954: LD_EXP 10
52958: PUSH
52959: FOR_TO
52960: IFFALSE 52994
// if side in mpTeams [ i ] then
52962: LD_VAR 0 6
52966: PUSH
52967: LD_EXP 10
52971: PUSH
52972: LD_VAR 0 3
52976: ARRAY
52977: IN
52978: IFFALSE 52992
// begin team := i ;
52980: LD_ADDR_VAR 0 5
52984: PUSH
52985: LD_VAR 0 3
52989: ST_TO_ADDR
// break ;
52990: GO 52994
// end ;
52992: GO 52959
52994: POP
52995: POP
// if not team then
52996: LD_VAR 0 5
53000: NOT
53001: IFFALSE 53005
// exit ;
53003: GO 53219
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
53005: LD_EXP 34
53009: PPUSH
53010: LD_INT 81
53012: PUSH
53013: LD_VAR 0 6
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PPUSH
53022: CALL_OW 70
53026: IFFALSE 53030
// exit ;
53028: GO 53219
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
53030: LD_ADDR_EXP 44
53034: PUSH
53035: LD_EXP 44
53039: PPUSH
53040: LD_VAR 0 5
53044: PPUSH
53045: LD_EXP 44
53049: PUSH
53050: LD_VAR 0 5
53054: ARRAY
53055: PUSH
53056: LD_INT 1
53058: PLUS
53059: PPUSH
53060: CALL_OW 1
53064: ST_TO_ADDR
// for i in mpTeams [ team ] do
53065: LD_ADDR_VAR 0 3
53069: PUSH
53070: LD_EXP 10
53074: PUSH
53075: LD_VAR 0 5
53079: ARRAY
53080: PUSH
53081: FOR_IN
53082: IFFALSE 53106
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
53084: LD_VAR 0 3
53088: PPUSH
53089: LD_EXP 44
53093: PUSH
53094: LD_VAR 0 5
53098: ARRAY
53099: PPUSH
53100: CALL_OW 506
53104: GO 53081
53106: POP
53107: POP
// end else
53108: GO 53219
// begin first := depots [ 1 ] ;
53110: LD_ADDR_VAR 0 4
53114: PUSH
53115: LD_VAR 0 1
53119: PUSH
53120: LD_INT 1
53122: ARRAY
53123: ST_TO_ADDR
// side := GetSide ( first ) ;
53124: LD_ADDR_VAR 0 6
53128: PUSH
53129: LD_VAR 0 4
53133: PPUSH
53134: CALL_OW 255
53138: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
53139: LD_EXP 34
53143: PPUSH
53144: LD_INT 81
53146: PUSH
53147: LD_VAR 0 6
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PPUSH
53156: CALL_OW 70
53160: IFFALSE 53164
// exit ;
53162: GO 53219
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
53164: LD_ADDR_EXP 44
53168: PUSH
53169: LD_EXP 44
53173: PPUSH
53174: LD_VAR 0 6
53178: PPUSH
53179: LD_EXP 44
53183: PUSH
53184: LD_VAR 0 6
53188: ARRAY
53189: PUSH
53190: LD_INT 1
53192: PLUS
53193: PPUSH
53194: CALL_OW 1
53198: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
53199: LD_VAR 0 6
53203: PPUSH
53204: LD_EXP 44
53208: PUSH
53209: LD_VAR 0 6
53213: ARRAY
53214: PPUSH
53215: CALL_OW 506
// end ; end ;
53219: LD_VAR 0 2
53223: RET
// function UpdateCounter ; var i ; begin
53224: LD_INT 0
53226: PPUSH
53227: PPUSH
// result := [ ] ;
53228: LD_ADDR_VAR 0 1
53232: PUSH
53233: EMPTY
53234: ST_TO_ADDR
// if mpTeamGame then
53235: LD_EXP 11
53239: IFFALSE 53306
// begin for i := 1 to mpTeams do
53241: LD_ADDR_VAR 0 2
53245: PUSH
53246: DOUBLE
53247: LD_INT 1
53249: DEC
53250: ST_TO_ADDR
53251: LD_EXP 10
53255: PUSH
53256: FOR_TO
53257: IFFALSE 53302
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53259: LD_ADDR_VAR 0 1
53263: PUSH
53264: LD_VAR 0 1
53268: PUSH
53269: LD_STRING #KingoftheHill-Team
53271: PUSH
53272: LD_VAR 0 2
53276: PUSH
53277: LD_EXP 44
53281: PUSH
53282: LD_VAR 0 2
53286: ARRAY
53287: PUSH
53288: LD_EXP 35
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: ADD
53299: ST_TO_ADDR
53300: GO 53256
53302: POP
53303: POP
// end else
53304: GO 53379
// begin for i := 1 to 8 do
53306: LD_ADDR_VAR 0 2
53310: PUSH
53311: DOUBLE
53312: LD_INT 1
53314: DEC
53315: ST_TO_ADDR
53316: LD_INT 8
53318: PUSH
53319: FOR_TO
53320: IFFALSE 53377
// if mpSidePositions [ i ] then
53322: LD_EXP 7
53326: PUSH
53327: LD_VAR 0 2
53331: ARRAY
53332: IFFALSE 53375
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53334: LD_ADDR_VAR 0 1
53338: PUSH
53339: LD_VAR 0 1
53343: PUSH
53344: LD_STRING #KingoftheHill-Player
53346: PUSH
53347: LD_VAR 0 2
53351: PUSH
53352: LD_EXP 44
53356: PUSH
53357: LD_VAR 0 2
53361: ARRAY
53362: PUSH
53363: LD_EXP 35
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: ADD
53374: ST_TO_ADDR
53375: GO 53319
53377: POP
53378: POP
// end ; mpDisplayStrings := result ;
53379: LD_ADDR_EXP 38
53383: PUSH
53384: LD_VAR 0 1
53388: ST_TO_ADDR
// end ;
53389: LD_VAR 0 1
53393: RET
// export function HowMuchPointsKing ( side ) ; begin
53394: LD_INT 0
53396: PPUSH
// result := HowMuchPoints ( side ) ;
53397: LD_ADDR_VAR 0 2
53401: PUSH
53402: LD_VAR 0 1
53406: PPUSH
53407: CALL 53417 0 1
53411: ST_TO_ADDR
// end ;
53412: LD_VAR 0 2
53416: RET
// function HowMuchPoints ( side ) ; var i ; begin
53417: LD_INT 0
53419: PPUSH
53420: PPUSH
// if mpTeamGame then
53421: LD_EXP 11
53425: IFFALSE 53494
// begin for i := 1 to Count ( mpTeams ) do
53427: LD_ADDR_VAR 0 3
53431: PUSH
53432: DOUBLE
53433: LD_INT 1
53435: DEC
53436: ST_TO_ADDR
53437: LD_EXP 10
53441: PPUSH
53442: CALL 5128 0 1
53446: PUSH
53447: FOR_TO
53448: IFFALSE 53490
// begin if side in mpTeams [ i ] then
53450: LD_VAR 0 1
53454: PUSH
53455: LD_EXP 10
53459: PUSH
53460: LD_VAR 0 3
53464: ARRAY
53465: IN
53466: IFFALSE 53488
// begin result := mpKingPoints [ i ] ;
53468: LD_ADDR_VAR 0 2
53472: PUSH
53473: LD_EXP 44
53477: PUSH
53478: LD_VAR 0 3
53482: ARRAY
53483: ST_TO_ADDR
// exit ;
53484: POP
53485: POP
53486: GO 53510
// end ; end ;
53488: GO 53447
53490: POP
53491: POP
// end else
53492: GO 53510
// result := mpKingPoints [ side ] ;
53494: LD_ADDR_VAR 0 2
53498: PUSH
53499: LD_EXP 44
53503: PUSH
53504: LD_VAR 0 1
53508: ARRAY
53509: ST_TO_ADDR
// end ;
53510: LD_VAR 0 2
53514: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53515: LD_EXP 39
53519: PUSH
53520: CALL 53842 0 0
53524: AND
53525: PUSH
53526: LD_OWVAR 4
53530: AND
53531: IFFALSE 53767
53533: GO 53535
53535: DISABLE
53536: LD_INT 0
53538: PPUSH
53539: PPUSH
// begin canWin := false ;
53540: LD_ADDR_VAR 0 2
53544: PUSH
53545: LD_INT 0
53547: ST_TO_ADDR
// if not HasPower ( your_side ) then
53548: LD_OWVAR 2
53552: PPUSH
53553: CALL 53882 0 1
53557: NOT
53558: IFFALSE 53569
// begin Multiplayer_Loose_Message ;
53560: CALL_OW 521
// enable ( mpLose ) ;
53564: LD_INT 102
53566: ENABLE_MARKED
// end else
53567: GO 53767
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53569: LD_ADDR_VAR 0 2
53573: PUSH
53574: LD_OWVAR 2
53578: PPUSH
53579: CALL 53417 0 1
53583: PUSH
53584: LD_EXP 35
53588: GREATEREQUAL
53589: PUSH
53590: LD_OWVAR 2
53594: PPUSH
53595: CALL 53882 0 1
53599: AND
53600: PUSH
53601: CALL 53770 0 0
53605: NOT
53606: OR
53607: ST_TO_ADDR
// for i := 1 to 8 do
53608: LD_ADDR_VAR 0 1
53612: PUSH
53613: DOUBLE
53614: LD_INT 1
53616: DEC
53617: ST_TO_ADDR
53618: LD_INT 8
53620: PUSH
53621: FOR_TO
53622: IFFALSE 53753
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53624: LD_EXP 7
53628: PUSH
53629: LD_VAR 0 1
53633: ARRAY
53634: PUSH
53635: LD_VAR 0 1
53639: PPUSH
53640: CALL_OW 108
53644: AND
53645: PUSH
53646: LD_VAR 0 1
53650: PUSH
53651: LD_OWVAR 2
53655: NONEQUAL
53656: AND
53657: IFFALSE 53751
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53659: LD_EXP 8
53663: PUSH
53664: LD_VAR 0 1
53668: ARRAY
53669: NOT
53670: PUSH
53671: LD_EXP 8
53675: PUSH
53676: LD_VAR 0 1
53680: ARRAY
53681: PUSH
53682: LD_EXP 8
53686: PUSH
53687: LD_OWVAR 2
53691: ARRAY
53692: NONEQUAL
53693: PUSH
53694: LD_OWVAR 2
53698: PPUSH
53699: LD_VAR 0 1
53703: PPUSH
53704: CALL_OW 81
53708: PUSH
53709: LD_INT 1
53711: NONEQUAL
53712: AND
53713: OR
53714: IFFALSE 53751
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53716: LD_VAR 0 1
53720: PPUSH
53721: CALL 53417 0 1
53725: PUSH
53726: LD_EXP 35
53730: GREATEREQUAL
53731: PUSH
53732: LD_VAR 0 1
53736: PPUSH
53737: CALL 53882 0 1
53741: AND
53742: IFFALSE 53751
// begin enable ( mpLose ) ;
53744: LD_INT 102
53746: ENABLE_MARKED
// exit ;
53747: POP
53748: POP
53749: GO 53767
// end ;
53751: GO 53621
53753: POP
53754: POP
// if canWin then
53755: LD_VAR 0 2
53759: IFFALSE 53766
// enable ( mpWin ) else
53761: LD_INT 101
53763: ENABLE_MARKED
53764: GO 53767
// enable ;
53766: ENABLE
// end ; end ;
53767: PPOPN 2
53769: END
// function EnemiesInGame ; var i ; begin
53770: LD_INT 0
53772: PPUSH
53773: PPUSH
// result := false ;
53774: LD_ADDR_VAR 0 1
53778: PUSH
53779: LD_INT 0
53781: ST_TO_ADDR
// for i := 1 to 8 do
53782: LD_ADDR_VAR 0 2
53786: PUSH
53787: DOUBLE
53788: LD_INT 1
53790: DEC
53791: ST_TO_ADDR
53792: LD_INT 8
53794: PUSH
53795: FOR_TO
53796: IFFALSE 53835
// if i <> your_side and HasPower ( i ) then
53798: LD_VAR 0 2
53802: PUSH
53803: LD_OWVAR 2
53807: NONEQUAL
53808: PUSH
53809: LD_VAR 0 2
53813: PPUSH
53814: CALL 53882 0 1
53818: AND
53819: IFFALSE 53833
// begin result := true ;
53821: LD_ADDR_VAR 0 1
53825: PUSH
53826: LD_INT 1
53828: ST_TO_ADDR
// exit ;
53829: POP
53830: POP
53831: GO 53837
// end ;
53833: GO 53795
53835: POP
53836: POP
// end ;
53837: LD_VAR 0 1
53841: RET
// function CanWinLoose ; begin
53842: LD_INT 0
53844: PPUSH
// result := true ;
53845: LD_ADDR_VAR 0 1
53849: PUSH
53850: LD_INT 1
53852: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53853: CALL_OW 531
53857: PUSH
53858: CALL_OW 519
53862: PUSH
53863: LD_INT 1
53865: GREATER
53866: AND
53867: IFFALSE 53877
// result := false ;
53869: LD_ADDR_VAR 0 1
53873: PUSH
53874: LD_INT 0
53876: ST_TO_ADDR
// end ;
53877: LD_VAR 0 1
53881: RET
// function HasPower ( i ) ; begin
53882: LD_INT 0
53884: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53885: LD_ADDR_VAR 0 2
53889: PUSH
53890: LD_INT 22
53892: PUSH
53893: LD_VAR 0 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 21
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 33
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 33
53927: PUSH
53928: LD_INT 5
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PPUSH
53945: CALL_OW 69
53949: ST_TO_ADDR
// end ; end_of_file end_of_file
53950: LD_VAR 0 2
53954: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53955: LD_VAR 0 1
53959: PUSH
53960: LD_INT 200
53962: DOUBLE
53963: GREATEREQUAL
53964: IFFALSE 53972
53966: LD_INT 299
53968: DOUBLE
53969: LESSEQUAL
53970: IFTRUE 53974
53972: GO 54006
53974: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53975: LD_VAR 0 1
53979: PPUSH
53980: LD_VAR 0 2
53984: PPUSH
53985: LD_VAR 0 3
53989: PPUSH
53990: LD_VAR 0 4
53994: PPUSH
53995: LD_VAR 0 5
53999: PPUSH
54000: CALL 54753 0 5
54004: GO 54083
54006: LD_INT 300
54008: DOUBLE
54009: GREATEREQUAL
54010: IFFALSE 54018
54012: LD_INT 399
54014: DOUBLE
54015: LESSEQUAL
54016: IFTRUE 54020
54018: GO 54082
54020: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54021: LD_VAR 0 1
54025: PPUSH
54026: LD_VAR 0 2
54030: PPUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: LD_VAR 0 4
54040: PPUSH
54041: LD_VAR 0 5
54045: PPUSH
54046: LD_VAR 0 6
54050: PPUSH
54051: LD_VAR 0 7
54055: PPUSH
54056: LD_VAR 0 8
54060: PPUSH
54061: LD_VAR 0 9
54065: PPUSH
54066: LD_VAR 0 10
54070: PPUSH
54071: LD_VAR 0 11
54075: PPUSH
54076: CALL 59548 0 11
54080: GO 54083
54082: POP
// end ;
54083: PPOPN 11
54085: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 2
54095: PPUSH
54096: LD_VAR 0 3
54100: PPUSH
54101: LD_VAR 0 4
54105: PPUSH
54106: LD_VAR 0 5
54110: PPUSH
54111: CALL 54168 0 5
// end ; end_of_file
54115: PPOPN 5
54117: END
// export function SOS_UnitDestroyed ( un ) ; begin
54118: LD_INT 0
54120: PPUSH
// ComRadiation ( un ) ;
54121: LD_VAR 0 1
54125: PPUSH
54126: CALL 55157 0 1
// end ;
54130: LD_VAR 0 2
54134: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54135: LD_INT 0
54137: PPUSH
// ComRadiation ( un ) ;
54138: LD_VAR 0 1
54142: PPUSH
54143: CALL 55157 0 1
// end ;
54147: LD_VAR 0 2
54151: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54152: LD_INT 0
54154: PPUSH
// end ;
54155: LD_VAR 0 4
54159: RET
// export function SOS_Command ( cmd ) ; begin
54160: LD_INT 0
54162: PPUSH
// end ;
54163: LD_VAR 0 2
54167: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54168: LD_INT 0
54170: PPUSH
// end ;
54171: LD_VAR 0 6
54175: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
54176: LD_INT 0
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
// if not vehicle or not factory then
54182: LD_VAR 0 1
54186: NOT
54187: PUSH
54188: LD_VAR 0 2
54192: NOT
54193: OR
54194: IFFALSE 54198
// exit ;
54196: GO 54748
// if not factoryWaypoints then
54198: LD_EXP 55
54202: NOT
54203: IFFALSE 54207
// exit ;
54205: GO 54748
// for i := 1 to Count ( factoryWaypoints ) do
54207: LD_ADDR_VAR 0 4
54211: PUSH
54212: DOUBLE
54213: LD_INT 1
54215: DEC
54216: ST_TO_ADDR
54217: LD_EXP 55
54221: PPUSH
54222: CALL 5128 0 1
54226: PUSH
54227: FOR_TO
54228: IFFALSE 54746
// if factoryWaypoints [ i ] [ 2 ] = factory then
54230: LD_EXP 55
54234: PUSH
54235: LD_VAR 0 4
54239: ARRAY
54240: PUSH
54241: LD_INT 2
54243: ARRAY
54244: PUSH
54245: LD_VAR 0 2
54249: EQUAL
54250: IFFALSE 54744
// begin if GetControl ( vehicle ) = control_manual then
54252: LD_VAR 0 1
54256: PPUSH
54257: CALL_OW 263
54261: PUSH
54262: LD_INT 1
54264: EQUAL
54265: IFFALSE 54627
// begin driver := IsDrivenBy ( vehicle ) ;
54267: LD_ADDR_VAR 0 5
54271: PUSH
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 311
54281: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54282: LD_VAR 0 5
54286: PUSH
54287: LD_EXP 56
54291: IN
54292: PUSH
54293: LD_VAR 0 1
54297: PUSH
54298: LD_EXP 56
54302: IN
54303: OR
54304: IFFALSE 54310
// exit ;
54306: POP
54307: POP
54308: GO 54748
// if not HasTask ( driver ) then
54310: LD_VAR 0 5
54314: PPUSH
54315: CALL_OW 314
54319: NOT
54320: IFFALSE 54625
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54322: LD_ADDR_EXP 56
54326: PUSH
54327: LD_EXP 56
54331: PPUSH
54332: LD_VAR 0 5
54336: PPUSH
54337: CALL 40737 0 2
54341: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54342: LD_ADDR_EXP 56
54346: PUSH
54347: LD_EXP 56
54351: PPUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL 40737 0 2
54361: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54362: LD_ADDR_VAR 0 6
54366: PUSH
54367: LD_EXP 55
54371: PUSH
54372: LD_VAR 0 4
54376: ARRAY
54377: PUSH
54378: LD_INT 3
54380: ARRAY
54381: PPUSH
54382: LD_EXP 55
54386: PUSH
54387: LD_VAR 0 4
54391: ARRAY
54392: PUSH
54393: LD_INT 4
54395: ARRAY
54396: PPUSH
54397: CALL_OW 428
54401: ST_TO_ADDR
// if hex then
54402: LD_VAR 0 6
54406: IFFALSE 54424
// ComMoveUnit ( driver , hex ) else
54408: LD_VAR 0 5
54412: PPUSH
54413: LD_VAR 0 6
54417: PPUSH
54418: CALL_OW 112
54422: GO 54508
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54424: LD_VAR 0 1
54428: PPUSH
54429: LD_EXP 55
54433: PUSH
54434: LD_VAR 0 4
54438: ARRAY
54439: PUSH
54440: LD_INT 3
54442: ARRAY
54443: PPUSH
54444: LD_EXP 55
54448: PUSH
54449: LD_VAR 0 4
54453: ARRAY
54454: PUSH
54455: LD_INT 4
54457: ARRAY
54458: PPUSH
54459: CALL_OW 297
54463: PUSH
54464: LD_INT 0
54466: GREATER
54467: IFFALSE 54508
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54469: LD_VAR 0 5
54473: PPUSH
54474: LD_EXP 55
54478: PUSH
54479: LD_VAR 0 4
54483: ARRAY
54484: PUSH
54485: LD_INT 3
54487: ARRAY
54488: PPUSH
54489: LD_EXP 55
54493: PUSH
54494: LD_VAR 0 4
54498: ARRAY
54499: PUSH
54500: LD_INT 4
54502: ARRAY
54503: PPUSH
54504: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54508: LD_VAR 0 5
54512: PPUSH
54513: CALL_OW 181
// if Multiplayer then
54517: LD_OWVAR 4
54521: IFFALSE 54570
// begin repeat wait ( 10 ) ;
54523: LD_INT 10
54525: PPUSH
54526: CALL_OW 67
// until not IsInUnit ( driver ) ;
54530: LD_VAR 0 5
54534: PPUSH
54535: CALL_OW 310
54539: NOT
54540: IFFALSE 54523
// if not HasTask ( driver ) then
54542: LD_VAR 0 5
54546: PPUSH
54547: CALL_OW 314
54551: NOT
54552: IFFALSE 54568
// ComEnterUnit ( driver , factory ) ;
54554: LD_VAR 0 5
54558: PPUSH
54559: LD_VAR 0 2
54563: PPUSH
54564: CALL_OW 120
// end else
54568: GO 54584
// AddComEnterUnit ( driver , factory ) ;
54570: LD_VAR 0 5
54574: PPUSH
54575: LD_VAR 0 2
54579: PPUSH
54580: CALL_OW 180
// wait ( 0 0$1 ) ;
54584: LD_INT 35
54586: PPUSH
54587: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54591: LD_ADDR_EXP 56
54595: PUSH
54596: LD_EXP 56
54600: PUSH
54601: LD_VAR 0 5
54605: DIFF
54606: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54607: LD_ADDR_EXP 56
54611: PUSH
54612: LD_EXP 56
54616: PUSH
54617: LD_VAR 0 1
54621: DIFF
54622: ST_TO_ADDR
// break ;
54623: GO 54746
// end ; end else
54625: GO 54744
// if GetControl ( vehicle ) = control_remote then
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 263
54636: PUSH
54637: LD_INT 2
54639: EQUAL
54640: IFFALSE 54703
// begin wait ( 0 0$2 ) ;
54642: LD_INT 70
54644: PPUSH
54645: CALL_OW 67
// if Connect ( vehicle ) then
54649: LD_VAR 0 1
54653: PPUSH
54654: CALL 11334 0 1
54658: IFFALSE 54699
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54660: LD_VAR 0 1
54664: PPUSH
54665: LD_EXP 55
54669: PUSH
54670: LD_VAR 0 4
54674: ARRAY
54675: PUSH
54676: LD_INT 3
54678: ARRAY
54679: PPUSH
54680: LD_EXP 55
54684: PUSH
54685: LD_VAR 0 4
54689: ARRAY
54690: PUSH
54691: LD_INT 4
54693: ARRAY
54694: PPUSH
54695: CALL_OW 111
// break ;
54699: GO 54746
// end else
54701: GO 54744
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54703: LD_VAR 0 1
54707: PPUSH
54708: LD_EXP 55
54712: PUSH
54713: LD_VAR 0 4
54717: ARRAY
54718: PUSH
54719: LD_INT 3
54721: ARRAY
54722: PPUSH
54723: LD_EXP 55
54727: PUSH
54728: LD_VAR 0 4
54732: ARRAY
54733: PUSH
54734: LD_INT 4
54736: ARRAY
54737: PPUSH
54738: CALL_OW 111
// break ;
54742: GO 54746
// end ; end ;
54744: GO 54227
54746: POP
54747: POP
// end ;
54748: LD_VAR 0 3
54752: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54753: LD_INT 0
54755: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54756: LD_VAR 0 1
54760: PUSH
54761: LD_INT 250
54763: EQUAL
54764: PUSH
54765: LD_VAR 0 2
54769: PPUSH
54770: CALL_OW 264
54774: PUSH
54775: LD_INT 81
54777: EQUAL
54778: AND
54779: IFFALSE 54800
// MinerPlaceMine ( unit , x , y ) ;
54781: LD_VAR 0 2
54785: PPUSH
54786: LD_VAR 0 4
54790: PPUSH
54791: LD_VAR 0 5
54795: PPUSH
54796: CALL 57892 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54800: LD_VAR 0 1
54804: PUSH
54805: LD_INT 251
54807: EQUAL
54808: PUSH
54809: LD_VAR 0 2
54813: PPUSH
54814: CALL_OW 264
54818: PUSH
54819: LD_INT 81
54821: EQUAL
54822: AND
54823: IFFALSE 54844
// MinerDetonateMine ( unit , x , y ) ;
54825: LD_VAR 0 2
54829: PPUSH
54830: LD_VAR 0 4
54834: PPUSH
54835: LD_VAR 0 5
54839: PPUSH
54840: CALL 58167 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54844: LD_VAR 0 1
54848: PUSH
54849: LD_INT 252
54851: EQUAL
54852: PUSH
54853: LD_VAR 0 2
54857: PPUSH
54858: CALL_OW 264
54862: PUSH
54863: LD_INT 81
54865: EQUAL
54866: AND
54867: IFFALSE 54888
// MinerCreateMinefield ( unit , x , y ) ;
54869: LD_VAR 0 2
54873: PPUSH
54874: LD_VAR 0 4
54878: PPUSH
54879: LD_VAR 0 5
54883: PPUSH
54884: CALL 58584 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54888: LD_VAR 0 1
54892: PUSH
54893: LD_INT 253
54895: EQUAL
54896: PUSH
54897: LD_VAR 0 2
54901: PPUSH
54902: CALL_OW 257
54906: PUSH
54907: LD_INT 5
54909: EQUAL
54910: AND
54911: IFFALSE 54932
// ComBinocular ( unit , x , y ) ;
54913: LD_VAR 0 2
54917: PPUSH
54918: LD_VAR 0 4
54922: PPUSH
54923: LD_VAR 0 5
54927: PPUSH
54928: CALL 58953 0 3
// if selectedUnit then
54932: LD_VAR 0 3
54936: IFFALSE 54992
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54938: LD_VAR 0 1
54942: PUSH
54943: LD_INT 254
54945: EQUAL
54946: PUSH
54947: LD_VAR 0 2
54951: PPUSH
54952: CALL_OW 264
54956: PUSH
54957: LD_INT 99
54959: EQUAL
54960: AND
54961: PUSH
54962: LD_VAR 0 3
54966: PPUSH
54967: CALL_OW 263
54971: PUSH
54972: LD_INT 3
54974: EQUAL
54975: AND
54976: IFFALSE 54992
// HackDestroyVehicle ( unit , selectedUnit ) ;
54978: LD_VAR 0 2
54982: PPUSH
54983: LD_VAR 0 3
54987: PPUSH
54988: CALL 57256 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54992: LD_VAR 0 1
54996: PUSH
54997: LD_INT 255
54999: EQUAL
55000: PUSH
55001: LD_VAR 0 2
55005: PPUSH
55006: CALL_OW 264
55010: PUSH
55011: LD_INT 14
55013: PUSH
55014: LD_INT 53
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: IN
55021: AND
55022: PUSH
55023: LD_VAR 0 4
55027: PPUSH
55028: LD_VAR 0 5
55032: PPUSH
55033: CALL_OW 488
55037: AND
55038: IFFALSE 55062
// CutTreeXYR ( unit , x , y , 12 ) ;
55040: LD_VAR 0 2
55044: PPUSH
55045: LD_VAR 0 4
55049: PPUSH
55050: LD_VAR 0 5
55054: PPUSH
55055: LD_INT 12
55057: PPUSH
55058: CALL 55253 0 4
// if cmd = 256 then
55062: LD_VAR 0 1
55066: PUSH
55067: LD_INT 256
55069: EQUAL
55070: IFFALSE 55091
// SetFactoryWaypoint ( unit , x , y ) ;
55072: LD_VAR 0 2
55076: PPUSH
55077: LD_VAR 0 4
55081: PPUSH
55082: LD_VAR 0 5
55086: PPUSH
55087: CALL 59556 0 3
// if cmd = 257 then
55091: LD_VAR 0 1
55095: PUSH
55096: LD_INT 257
55098: EQUAL
55099: IFFALSE 55120
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55101: LD_VAR 0 2
55105: PPUSH
55106: LD_VAR 0 4
55110: PPUSH
55111: LD_VAR 0 5
55115: PPUSH
55116: CALL 60046 0 3
// if cmd = 258 then
55120: LD_VAR 0 1
55124: PUSH
55125: LD_INT 258
55127: EQUAL
55128: IFFALSE 55152
// BurnTreeXYR ( unit , x , y , 8 ) ;
55130: LD_VAR 0 2
55134: PPUSH
55135: LD_VAR 0 4
55139: PPUSH
55140: LD_VAR 0 5
55144: PPUSH
55145: LD_INT 8
55147: PPUSH
55148: CALL 55647 0 4
// end ;
55152: LD_VAR 0 6
55156: RET
// export function ComRadiation ( un ) ; var eff ; begin
55157: LD_INT 0
55159: PPUSH
55160: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55161: LD_VAR 0 1
55165: PPUSH
55166: CALL_OW 264
55170: PUSH
55171: LD_INT 91
55173: NONEQUAL
55174: IFFALSE 55178
// exit ;
55176: GO 55248
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55178: LD_INT 68
55180: PPUSH
55181: LD_VAR 0 1
55185: PPUSH
55186: CALL_OW 255
55190: PPUSH
55191: CALL_OW 321
55195: PUSH
55196: LD_INT 2
55198: EQUAL
55199: IFFALSE 55211
// eff := 50 else
55201: LD_ADDR_VAR 0 3
55205: PUSH
55206: LD_INT 50
55208: ST_TO_ADDR
55209: GO 55219
// eff := 25 ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_INT 25
55218: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55219: LD_VAR 0 1
55223: PPUSH
55224: CALL_OW 250
55228: PPUSH
55229: LD_VAR 0 1
55233: PPUSH
55234: CALL_OW 251
55238: PPUSH
55239: LD_VAR 0 3
55243: PPUSH
55244: CALL_OW 495
// end ;
55248: LD_VAR 0 2
55252: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55253: LD_INT 0
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55264: LD_VAR 0 1
55268: PPUSH
55269: CALL_OW 302
55273: NOT
55274: PUSH
55275: LD_VAR 0 2
55279: PPUSH
55280: LD_VAR 0 3
55284: PPUSH
55285: CALL_OW 488
55289: NOT
55290: OR
55291: PUSH
55292: LD_VAR 0 4
55296: NOT
55297: OR
55298: IFFALSE 55302
// exit ;
55300: GO 55642
// list := [ ] ;
55302: LD_ADDR_VAR 0 13
55306: PUSH
55307: EMPTY
55308: ST_TO_ADDR
// if x - r < 0 then
55309: LD_VAR 0 2
55313: PUSH
55314: LD_VAR 0 4
55318: MINUS
55319: PUSH
55320: LD_INT 0
55322: LESS
55323: IFFALSE 55335
// min_x := 0 else
55325: LD_ADDR_VAR 0 7
55329: PUSH
55330: LD_INT 0
55332: ST_TO_ADDR
55333: GO 55351
// min_x := x - r ;
55335: LD_ADDR_VAR 0 7
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_VAR 0 4
55349: MINUS
55350: ST_TO_ADDR
// if y - r < 0 then
55351: LD_VAR 0 3
55355: PUSH
55356: LD_VAR 0 4
55360: MINUS
55361: PUSH
55362: LD_INT 0
55364: LESS
55365: IFFALSE 55377
// min_y := 0 else
55367: LD_ADDR_VAR 0 8
55371: PUSH
55372: LD_INT 0
55374: ST_TO_ADDR
55375: GO 55393
// min_y := y - r ;
55377: LD_ADDR_VAR 0 8
55381: PUSH
55382: LD_VAR 0 3
55386: PUSH
55387: LD_VAR 0 4
55391: MINUS
55392: ST_TO_ADDR
// max_x := x + r ;
55393: LD_ADDR_VAR 0 9
55397: PUSH
55398: LD_VAR 0 2
55402: PUSH
55403: LD_VAR 0 4
55407: PLUS
55408: ST_TO_ADDR
// max_y := y + r ;
55409: LD_ADDR_VAR 0 10
55413: PUSH
55414: LD_VAR 0 3
55418: PUSH
55419: LD_VAR 0 4
55423: PLUS
55424: ST_TO_ADDR
// for _x = min_x to max_x do
55425: LD_ADDR_VAR 0 11
55429: PUSH
55430: DOUBLE
55431: LD_VAR 0 7
55435: DEC
55436: ST_TO_ADDR
55437: LD_VAR 0 9
55441: PUSH
55442: FOR_TO
55443: IFFALSE 55560
// for _y = min_y to max_y do
55445: LD_ADDR_VAR 0 12
55449: PUSH
55450: DOUBLE
55451: LD_VAR 0 8
55455: DEC
55456: ST_TO_ADDR
55457: LD_VAR 0 10
55461: PUSH
55462: FOR_TO
55463: IFFALSE 55556
// begin if not ValidHex ( _x , _y ) then
55465: LD_VAR 0 11
55469: PPUSH
55470: LD_VAR 0 12
55474: PPUSH
55475: CALL_OW 488
55479: NOT
55480: IFFALSE 55484
// continue ;
55482: GO 55462
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55484: LD_VAR 0 11
55488: PPUSH
55489: LD_VAR 0 12
55493: PPUSH
55494: CALL_OW 351
55498: PUSH
55499: LD_VAR 0 11
55503: PPUSH
55504: LD_VAR 0 12
55508: PPUSH
55509: CALL_OW 554
55513: AND
55514: IFFALSE 55554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55516: LD_ADDR_VAR 0 13
55520: PUSH
55521: LD_VAR 0 13
55525: PPUSH
55526: LD_VAR 0 13
55530: PUSH
55531: LD_INT 1
55533: PLUS
55534: PPUSH
55535: LD_VAR 0 11
55539: PUSH
55540: LD_VAR 0 12
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PPUSH
55549: CALL_OW 2
55553: ST_TO_ADDR
// end ;
55554: GO 55462
55556: POP
55557: POP
55558: GO 55442
55560: POP
55561: POP
// if not list then
55562: LD_VAR 0 13
55566: NOT
55567: IFFALSE 55571
// exit ;
55569: GO 55642
// for i in list do
55571: LD_ADDR_VAR 0 6
55575: PUSH
55576: LD_VAR 0 13
55580: PUSH
55581: FOR_IN
55582: IFFALSE 55640
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55584: LD_VAR 0 1
55588: PPUSH
55589: LD_STRING M
55591: PUSH
55592: LD_VAR 0 6
55596: PUSH
55597: LD_INT 1
55599: ARRAY
55600: PUSH
55601: LD_VAR 0 6
55605: PUSH
55606: LD_INT 2
55608: ARRAY
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: PPUSH
55634: CALL_OW 447
55638: GO 55581
55640: POP
55641: POP
// end ;
55642: LD_VAR 0 5
55646: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55647: LD_INT 0
55649: PPUSH
55650: PPUSH
55651: PPUSH
55652: PPUSH
55653: PPUSH
55654: PPUSH
55655: PPUSH
55656: PPUSH
55657: PPUSH
55658: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL_OW 302
55668: NOT
55669: PUSH
55670: LD_VAR 0 2
55674: PPUSH
55675: LD_VAR 0 3
55679: PPUSH
55680: CALL_OW 488
55684: NOT
55685: OR
55686: PUSH
55687: LD_VAR 0 4
55691: NOT
55692: OR
55693: IFFALSE 55697
// exit ;
55695: GO 56210
// list := [ ] ;
55697: LD_ADDR_VAR 0 13
55701: PUSH
55702: EMPTY
55703: ST_TO_ADDR
// if x - r < 0 then
55704: LD_VAR 0 2
55708: PUSH
55709: LD_VAR 0 4
55713: MINUS
55714: PUSH
55715: LD_INT 0
55717: LESS
55718: IFFALSE 55730
// min_x := 0 else
55720: LD_ADDR_VAR 0 7
55724: PUSH
55725: LD_INT 0
55727: ST_TO_ADDR
55728: GO 55746
// min_x := x - r ;
55730: LD_ADDR_VAR 0 7
55734: PUSH
55735: LD_VAR 0 2
55739: PUSH
55740: LD_VAR 0 4
55744: MINUS
55745: ST_TO_ADDR
// if y - r < 0 then
55746: LD_VAR 0 3
55750: PUSH
55751: LD_VAR 0 4
55755: MINUS
55756: PUSH
55757: LD_INT 0
55759: LESS
55760: IFFALSE 55772
// min_y := 0 else
55762: LD_ADDR_VAR 0 8
55766: PUSH
55767: LD_INT 0
55769: ST_TO_ADDR
55770: GO 55788
// min_y := y - r ;
55772: LD_ADDR_VAR 0 8
55776: PUSH
55777: LD_VAR 0 3
55781: PUSH
55782: LD_VAR 0 4
55786: MINUS
55787: ST_TO_ADDR
// max_x := x + r ;
55788: LD_ADDR_VAR 0 9
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: LD_VAR 0 4
55802: PLUS
55803: ST_TO_ADDR
// max_y := y + r ;
55804: LD_ADDR_VAR 0 10
55808: PUSH
55809: LD_VAR 0 3
55813: PUSH
55814: LD_VAR 0 4
55818: PLUS
55819: ST_TO_ADDR
// for _x = min_x to max_x do
55820: LD_ADDR_VAR 0 11
55824: PUSH
55825: DOUBLE
55826: LD_VAR 0 7
55830: DEC
55831: ST_TO_ADDR
55832: LD_VAR 0 9
55836: PUSH
55837: FOR_TO
55838: IFFALSE 55955
// for _y = min_y to max_y do
55840: LD_ADDR_VAR 0 12
55844: PUSH
55845: DOUBLE
55846: LD_VAR 0 8
55850: DEC
55851: ST_TO_ADDR
55852: LD_VAR 0 10
55856: PUSH
55857: FOR_TO
55858: IFFALSE 55951
// begin if not ValidHex ( _x , _y ) then
55860: LD_VAR 0 11
55864: PPUSH
55865: LD_VAR 0 12
55869: PPUSH
55870: CALL_OW 488
55874: NOT
55875: IFFALSE 55879
// continue ;
55877: GO 55857
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55879: LD_VAR 0 11
55883: PPUSH
55884: LD_VAR 0 12
55888: PPUSH
55889: CALL_OW 351
55893: PUSH
55894: LD_VAR 0 11
55898: PPUSH
55899: LD_VAR 0 12
55903: PPUSH
55904: CALL_OW 554
55908: AND
55909: IFFALSE 55949
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55911: LD_ADDR_VAR 0 13
55915: PUSH
55916: LD_VAR 0 13
55920: PPUSH
55921: LD_VAR 0 13
55925: PUSH
55926: LD_INT 1
55928: PLUS
55929: PPUSH
55930: LD_VAR 0 11
55934: PUSH
55935: LD_VAR 0 12
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PPUSH
55944: CALL_OW 2
55948: ST_TO_ADDR
// end ;
55949: GO 55857
55951: POP
55952: POP
55953: GO 55837
55955: POP
55956: POP
// if not list then
55957: LD_VAR 0 13
55961: NOT
55962: IFFALSE 55966
// exit ;
55964: GO 56210
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55966: LD_ADDR_VAR 0 13
55970: PUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: LD_VAR 0 13
55980: PPUSH
55981: LD_INT 1
55983: PPUSH
55984: LD_INT 1
55986: PPUSH
55987: CALL 8476 0 4
55991: ST_TO_ADDR
// ComStop ( flame ) ;
55992: LD_VAR 0 1
55996: PPUSH
55997: CALL_OW 141
// for i in list do
56001: LD_ADDR_VAR 0 6
56005: PUSH
56006: LD_VAR 0 13
56010: PUSH
56011: FOR_IN
56012: IFFALSE 56043
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56014: LD_VAR 0 1
56018: PPUSH
56019: LD_VAR 0 6
56023: PUSH
56024: LD_INT 1
56026: ARRAY
56027: PPUSH
56028: LD_VAR 0 6
56032: PUSH
56033: LD_INT 2
56035: ARRAY
56036: PPUSH
56037: CALL_OW 176
56041: GO 56011
56043: POP
56044: POP
// repeat wait ( 0 0$1 ) ;
56045: LD_INT 35
56047: PPUSH
56048: CALL_OW 67
// task := GetTaskList ( flame ) ;
56052: LD_ADDR_VAR 0 14
56056: PUSH
56057: LD_VAR 0 1
56061: PPUSH
56062: CALL_OW 437
56066: ST_TO_ADDR
// if not task then
56067: LD_VAR 0 14
56071: NOT
56072: IFFALSE 56076
// exit ;
56074: GO 56210
// if task [ 1 ] [ 1 ] <> | then
56076: LD_VAR 0 14
56080: PUSH
56081: LD_INT 1
56083: ARRAY
56084: PUSH
56085: LD_INT 1
56087: ARRAY
56088: PUSH
56089: LD_STRING |
56091: NONEQUAL
56092: IFFALSE 56096
// exit ;
56094: GO 56210
// _x := task [ 1 ] [ 2 ] ;
56096: LD_ADDR_VAR 0 11
56100: PUSH
56101: LD_VAR 0 14
56105: PUSH
56106: LD_INT 1
56108: ARRAY
56109: PUSH
56110: LD_INT 2
56112: ARRAY
56113: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56114: LD_ADDR_VAR 0 12
56118: PUSH
56119: LD_VAR 0 14
56123: PUSH
56124: LD_INT 1
56126: ARRAY
56127: PUSH
56128: LD_INT 3
56130: ARRAY
56131: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56132: LD_VAR 0 11
56136: PPUSH
56137: LD_VAR 0 12
56141: PPUSH
56142: CALL_OW 351
56146: NOT
56147: PUSH
56148: LD_VAR 0 11
56152: PPUSH
56153: LD_VAR 0 12
56157: PPUSH
56158: CALL_OW 554
56162: NOT
56163: OR
56164: IFFALSE 56198
// begin task := Delete ( task , 1 ) ;
56166: LD_ADDR_VAR 0 14
56170: PUSH
56171: LD_VAR 0 14
56175: PPUSH
56176: LD_INT 1
56178: PPUSH
56179: CALL_OW 3
56183: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56184: LD_VAR 0 1
56188: PPUSH
56189: LD_VAR 0 14
56193: PPUSH
56194: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56198: LD_VAR 0 1
56202: PPUSH
56203: CALL_OW 314
56207: NOT
56208: IFFALSE 56045
// end ;
56210: LD_VAR 0 5
56214: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56215: LD_EXP 45
56219: NOT
56220: IFFALSE 56270
56222: GO 56224
56224: DISABLE
// begin initHack := true ;
56225: LD_ADDR_EXP 45
56229: PUSH
56230: LD_INT 1
56232: ST_TO_ADDR
// hackTanks := [ ] ;
56233: LD_ADDR_EXP 46
56237: PUSH
56238: EMPTY
56239: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56240: LD_ADDR_EXP 47
56244: PUSH
56245: EMPTY
56246: ST_TO_ADDR
// hackLimit := 3 ;
56247: LD_ADDR_EXP 48
56251: PUSH
56252: LD_INT 3
56254: ST_TO_ADDR
// hackDist := 12 ;
56255: LD_ADDR_EXP 49
56259: PUSH
56260: LD_INT 12
56262: ST_TO_ADDR
// hackCounter := [ ] ;
56263: LD_ADDR_EXP 50
56267: PUSH
56268: EMPTY
56269: ST_TO_ADDR
// end ;
56270: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56271: LD_EXP 45
56275: PUSH
56276: LD_INT 34
56278: PUSH
56279: LD_INT 99
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PPUSH
56286: CALL_OW 69
56290: AND
56291: IFFALSE 56544
56293: GO 56295
56295: DISABLE
56296: LD_INT 0
56298: PPUSH
56299: PPUSH
// begin enable ;
56300: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56301: LD_ADDR_VAR 0 1
56305: PUSH
56306: LD_INT 34
56308: PUSH
56309: LD_INT 99
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PPUSH
56316: CALL_OW 69
56320: PUSH
56321: FOR_IN
56322: IFFALSE 56542
// begin if not i in hackTanks then
56324: LD_VAR 0 1
56328: PUSH
56329: LD_EXP 46
56333: IN
56334: NOT
56335: IFFALSE 56418
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56337: LD_ADDR_EXP 46
56341: PUSH
56342: LD_EXP 46
56346: PPUSH
56347: LD_EXP 46
56351: PUSH
56352: LD_INT 1
56354: PLUS
56355: PPUSH
56356: LD_VAR 0 1
56360: PPUSH
56361: CALL_OW 1
56365: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56366: LD_ADDR_EXP 47
56370: PUSH
56371: LD_EXP 47
56375: PPUSH
56376: LD_EXP 47
56380: PUSH
56381: LD_INT 1
56383: PLUS
56384: PPUSH
56385: EMPTY
56386: PPUSH
56387: CALL_OW 1
56391: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56392: LD_ADDR_EXP 50
56396: PUSH
56397: LD_EXP 50
56401: PPUSH
56402: LD_EXP 50
56406: PUSH
56407: LD_INT 1
56409: PLUS
56410: PPUSH
56411: EMPTY
56412: PPUSH
56413: CALL_OW 1
56417: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56418: LD_VAR 0 1
56422: PPUSH
56423: CALL_OW 302
56427: NOT
56428: IFFALSE 56441
// begin HackUnlinkAll ( i ) ;
56430: LD_VAR 0 1
56434: PPUSH
56435: CALL 56547 0 1
// continue ;
56439: GO 56321
// end ; HackCheckCapturedStatus ( i ) ;
56441: LD_VAR 0 1
56445: PPUSH
56446: CALL 56990 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56450: LD_ADDR_VAR 0 2
56454: PUSH
56455: LD_INT 81
56457: PUSH
56458: LD_VAR 0 1
56462: PPUSH
56463: CALL_OW 255
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 33
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 91
56484: PUSH
56485: LD_VAR 0 1
56489: PUSH
56490: LD_EXP 49
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 50
56502: PUSH
56503: EMPTY
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: PPUSH
56512: CALL_OW 69
56516: ST_TO_ADDR
// if not tmp then
56517: LD_VAR 0 2
56521: NOT
56522: IFFALSE 56526
// continue ;
56524: GO 56321
// HackLink ( i , tmp ) ;
56526: LD_VAR 0 1
56530: PPUSH
56531: LD_VAR 0 2
56535: PPUSH
56536: CALL 56683 0 2
// end ;
56540: GO 56321
56542: POP
56543: POP
// end ;
56544: PPOPN 2
56546: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56547: LD_INT 0
56549: PPUSH
56550: PPUSH
56551: PPUSH
// if not hack in hackTanks then
56552: LD_VAR 0 1
56556: PUSH
56557: LD_EXP 46
56561: IN
56562: NOT
56563: IFFALSE 56567
// exit ;
56565: GO 56678
// index := GetElementIndex ( hackTanks , hack ) ;
56567: LD_ADDR_VAR 0 4
56571: PUSH
56572: LD_EXP 46
56576: PPUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: CALL 7773 0 2
56586: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56587: LD_EXP 47
56591: PUSH
56592: LD_VAR 0 4
56596: ARRAY
56597: IFFALSE 56678
// begin for i in hackTanksCaptured [ index ] do
56599: LD_ADDR_VAR 0 3
56603: PUSH
56604: LD_EXP 47
56608: PUSH
56609: LD_VAR 0 4
56613: ARRAY
56614: PUSH
56615: FOR_IN
56616: IFFALSE 56642
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56618: LD_VAR 0 3
56622: PUSH
56623: LD_INT 1
56625: ARRAY
56626: PPUSH
56627: LD_VAR 0 3
56631: PUSH
56632: LD_INT 2
56634: ARRAY
56635: PPUSH
56636: CALL_OW 235
56640: GO 56615
56642: POP
56643: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56644: LD_ADDR_EXP 47
56648: PUSH
56649: LD_EXP 47
56653: PPUSH
56654: LD_VAR 0 4
56658: PPUSH
56659: EMPTY
56660: PPUSH
56661: CALL_OW 1
56665: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_INT 0
56673: PPUSH
56674: CALL_OW 505
// end ; end ;
56678: LD_VAR 0 2
56682: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56683: LD_INT 0
56685: PPUSH
56686: PPUSH
56687: PPUSH
// if not hack in hackTanks or not vehicles then
56688: LD_VAR 0 1
56692: PUSH
56693: LD_EXP 46
56697: IN
56698: NOT
56699: PUSH
56700: LD_VAR 0 2
56704: NOT
56705: OR
56706: IFFALSE 56710
// exit ;
56708: GO 56985
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56710: LD_ADDR_VAR 0 2
56714: PUSH
56715: LD_VAR 0 1
56719: PPUSH
56720: LD_VAR 0 2
56724: PPUSH
56725: LD_INT 1
56727: PPUSH
56728: LD_INT 1
56730: PPUSH
56731: CALL 8423 0 4
56735: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56736: LD_ADDR_VAR 0 5
56740: PUSH
56741: LD_EXP 46
56745: PPUSH
56746: LD_VAR 0 1
56750: PPUSH
56751: CALL 7773 0 2
56755: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56756: LD_EXP 47
56760: PUSH
56761: LD_VAR 0 5
56765: ARRAY
56766: PUSH
56767: LD_EXP 48
56771: LESS
56772: IFFALSE 56961
// begin for i := 1 to vehicles do
56774: LD_ADDR_VAR 0 4
56778: PUSH
56779: DOUBLE
56780: LD_INT 1
56782: DEC
56783: ST_TO_ADDR
56784: LD_VAR 0 2
56788: PUSH
56789: FOR_TO
56790: IFFALSE 56959
// begin if hackTanksCaptured [ index ] = hackLimit then
56792: LD_EXP 47
56796: PUSH
56797: LD_VAR 0 5
56801: ARRAY
56802: PUSH
56803: LD_EXP 48
56807: EQUAL
56808: IFFALSE 56812
// break ;
56810: GO 56959
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56812: LD_ADDR_EXP 50
56816: PUSH
56817: LD_EXP 50
56821: PPUSH
56822: LD_VAR 0 5
56826: PPUSH
56827: LD_EXP 50
56831: PUSH
56832: LD_VAR 0 5
56836: ARRAY
56837: PUSH
56838: LD_INT 1
56840: PLUS
56841: PPUSH
56842: CALL_OW 1
56846: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56847: LD_ADDR_EXP 47
56851: PUSH
56852: LD_EXP 47
56856: PPUSH
56857: LD_VAR 0 5
56861: PUSH
56862: LD_EXP 47
56866: PUSH
56867: LD_VAR 0 5
56871: ARRAY
56872: PUSH
56873: LD_INT 1
56875: PLUS
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PPUSH
56881: LD_VAR 0 2
56885: PUSH
56886: LD_VAR 0 4
56890: ARRAY
56891: PUSH
56892: LD_VAR 0 2
56896: PUSH
56897: LD_VAR 0 4
56901: ARRAY
56902: PPUSH
56903: CALL_OW 255
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PPUSH
56912: CALL 7988 0 3
56916: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56917: LD_VAR 0 2
56921: PUSH
56922: LD_VAR 0 4
56926: ARRAY
56927: PPUSH
56928: LD_VAR 0 1
56932: PPUSH
56933: CALL_OW 255
56937: PPUSH
56938: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56942: LD_VAR 0 2
56946: PUSH
56947: LD_VAR 0 4
56951: ARRAY
56952: PPUSH
56953: CALL_OW 141
// end ;
56957: GO 56789
56959: POP
56960: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56961: LD_VAR 0 1
56965: PPUSH
56966: LD_EXP 47
56970: PUSH
56971: LD_VAR 0 5
56975: ARRAY
56976: PUSH
56977: LD_INT 0
56979: PLUS
56980: PPUSH
56981: CALL_OW 505
// end ;
56985: LD_VAR 0 3
56989: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
// if not hack in hackTanks then
56996: LD_VAR 0 1
57000: PUSH
57001: LD_EXP 46
57005: IN
57006: NOT
57007: IFFALSE 57011
// exit ;
57009: GO 57251
// index := GetElementIndex ( hackTanks , hack ) ;
57011: LD_ADDR_VAR 0 4
57015: PUSH
57016: LD_EXP 46
57020: PPUSH
57021: LD_VAR 0 1
57025: PPUSH
57026: CALL 7773 0 2
57030: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57031: LD_ADDR_VAR 0 3
57035: PUSH
57036: DOUBLE
57037: LD_EXP 47
57041: PUSH
57042: LD_VAR 0 4
57046: ARRAY
57047: INC
57048: ST_TO_ADDR
57049: LD_INT 1
57051: PUSH
57052: FOR_DOWNTO
57053: IFFALSE 57225
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57055: LD_ADDR_VAR 0 5
57059: PUSH
57060: LD_EXP 47
57064: PUSH
57065: LD_VAR 0 4
57069: ARRAY
57070: PUSH
57071: LD_VAR 0 3
57075: ARRAY
57076: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57077: LD_VAR 0 5
57081: PUSH
57082: LD_INT 1
57084: ARRAY
57085: PPUSH
57086: CALL_OW 302
57090: NOT
57091: PUSH
57092: LD_VAR 0 5
57096: PUSH
57097: LD_INT 1
57099: ARRAY
57100: PPUSH
57101: CALL_OW 255
57105: PUSH
57106: LD_VAR 0 1
57110: PPUSH
57111: CALL_OW 255
57115: NONEQUAL
57116: OR
57117: IFFALSE 57223
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57119: LD_VAR 0 5
57123: PUSH
57124: LD_INT 1
57126: ARRAY
57127: PPUSH
57128: CALL_OW 305
57132: PUSH
57133: LD_VAR 0 5
57137: PUSH
57138: LD_INT 1
57140: ARRAY
57141: PPUSH
57142: CALL_OW 255
57146: PUSH
57147: LD_VAR 0 1
57151: PPUSH
57152: CALL_OW 255
57156: EQUAL
57157: AND
57158: IFFALSE 57182
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57160: LD_VAR 0 5
57164: PUSH
57165: LD_INT 1
57167: ARRAY
57168: PPUSH
57169: LD_VAR 0 5
57173: PUSH
57174: LD_INT 2
57176: ARRAY
57177: PPUSH
57178: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57182: LD_ADDR_EXP 47
57186: PUSH
57187: LD_EXP 47
57191: PPUSH
57192: LD_VAR 0 4
57196: PPUSH
57197: LD_EXP 47
57201: PUSH
57202: LD_VAR 0 4
57206: ARRAY
57207: PPUSH
57208: LD_VAR 0 3
57212: PPUSH
57213: CALL_OW 3
57217: PPUSH
57218: CALL_OW 1
57222: ST_TO_ADDR
// end ; end ;
57223: GO 57052
57225: POP
57226: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57227: LD_VAR 0 1
57231: PPUSH
57232: LD_EXP 47
57236: PUSH
57237: LD_VAR 0 4
57241: ARRAY
57242: PUSH
57243: LD_INT 0
57245: PLUS
57246: PPUSH
57247: CALL_OW 505
// end ;
57251: LD_VAR 0 2
57255: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57256: LD_INT 0
57258: PPUSH
57259: PPUSH
57260: PPUSH
57261: PPUSH
// if not hack in hackTanks then
57262: LD_VAR 0 1
57266: PUSH
57267: LD_EXP 46
57271: IN
57272: NOT
57273: IFFALSE 57277
// exit ;
57275: GO 57362
// index := GetElementIndex ( hackTanks , hack ) ;
57277: LD_ADDR_VAR 0 5
57281: PUSH
57282: LD_EXP 46
57286: PPUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: CALL 7773 0 2
57296: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57297: LD_ADDR_VAR 0 4
57301: PUSH
57302: DOUBLE
57303: LD_INT 1
57305: DEC
57306: ST_TO_ADDR
57307: LD_EXP 47
57311: PUSH
57312: LD_VAR 0 5
57316: ARRAY
57317: PUSH
57318: FOR_TO
57319: IFFALSE 57360
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57321: LD_EXP 47
57325: PUSH
57326: LD_VAR 0 5
57330: ARRAY
57331: PUSH
57332: LD_VAR 0 4
57336: ARRAY
57337: PUSH
57338: LD_INT 1
57340: ARRAY
57341: PUSH
57342: LD_VAR 0 2
57346: EQUAL
57347: IFFALSE 57358
// KillUnit ( vehicle ) ;
57349: LD_VAR 0 2
57353: PPUSH
57354: CALL_OW 66
57358: GO 57318
57360: POP
57361: POP
// end ;
57362: LD_VAR 0 3
57366: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57367: LD_EXP 51
57371: NOT
57372: IFFALSE 57407
57374: GO 57376
57376: DISABLE
// begin initMiner := true ;
57377: LD_ADDR_EXP 51
57381: PUSH
57382: LD_INT 1
57384: ST_TO_ADDR
// minersList := [ ] ;
57385: LD_ADDR_EXP 52
57389: PUSH
57390: EMPTY
57391: ST_TO_ADDR
// minerMinesList := [ ] ;
57392: LD_ADDR_EXP 53
57396: PUSH
57397: EMPTY
57398: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57399: LD_ADDR_EXP 54
57403: PUSH
57404: LD_INT 5
57406: ST_TO_ADDR
// end ;
57407: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57408: LD_EXP 51
57412: PUSH
57413: LD_INT 34
57415: PUSH
57416: LD_INT 81
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PPUSH
57423: CALL_OW 69
57427: AND
57428: IFFALSE 57889
57430: GO 57432
57432: DISABLE
57433: LD_INT 0
57435: PPUSH
57436: PPUSH
57437: PPUSH
57438: PPUSH
// begin enable ;
57439: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57440: LD_ADDR_VAR 0 1
57444: PUSH
57445: LD_INT 34
57447: PUSH
57448: LD_INT 81
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PPUSH
57455: CALL_OW 69
57459: PUSH
57460: FOR_IN
57461: IFFALSE 57533
// begin if not i in minersList then
57463: LD_VAR 0 1
57467: PUSH
57468: LD_EXP 52
57472: IN
57473: NOT
57474: IFFALSE 57531
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57476: LD_ADDR_EXP 52
57480: PUSH
57481: LD_EXP 52
57485: PPUSH
57486: LD_EXP 52
57490: PUSH
57491: LD_INT 1
57493: PLUS
57494: PPUSH
57495: LD_VAR 0 1
57499: PPUSH
57500: CALL_OW 1
57504: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57505: LD_ADDR_EXP 53
57509: PUSH
57510: LD_EXP 53
57514: PPUSH
57515: LD_EXP 53
57519: PUSH
57520: LD_INT 1
57522: PLUS
57523: PPUSH
57524: EMPTY
57525: PPUSH
57526: CALL_OW 1
57530: ST_TO_ADDR
// end end ;
57531: GO 57460
57533: POP
57534: POP
// for i := minerMinesList downto 1 do
57535: LD_ADDR_VAR 0 1
57539: PUSH
57540: DOUBLE
57541: LD_EXP 53
57545: INC
57546: ST_TO_ADDR
57547: LD_INT 1
57549: PUSH
57550: FOR_DOWNTO
57551: IFFALSE 57887
// begin if IsLive ( minersList [ i ] ) then
57553: LD_EXP 52
57557: PUSH
57558: LD_VAR 0 1
57562: ARRAY
57563: PPUSH
57564: CALL_OW 300
57568: IFFALSE 57596
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57570: LD_EXP 52
57574: PUSH
57575: LD_VAR 0 1
57579: ARRAY
57580: PPUSH
57581: LD_EXP 53
57585: PUSH
57586: LD_VAR 0 1
57590: ARRAY
57591: PPUSH
57592: CALL_OW 505
// if not minerMinesList [ i ] then
57596: LD_EXP 53
57600: PUSH
57601: LD_VAR 0 1
57605: ARRAY
57606: NOT
57607: IFFALSE 57611
// continue ;
57609: GO 57550
// for j := minerMinesList [ i ] downto 1 do
57611: LD_ADDR_VAR 0 2
57615: PUSH
57616: DOUBLE
57617: LD_EXP 53
57621: PUSH
57622: LD_VAR 0 1
57626: ARRAY
57627: INC
57628: ST_TO_ADDR
57629: LD_INT 1
57631: PUSH
57632: FOR_DOWNTO
57633: IFFALSE 57883
// begin side := GetSide ( minersList [ i ] ) ;
57635: LD_ADDR_VAR 0 3
57639: PUSH
57640: LD_EXP 52
57644: PUSH
57645: LD_VAR 0 1
57649: ARRAY
57650: PPUSH
57651: CALL_OW 255
57655: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57656: LD_ADDR_VAR 0 4
57660: PUSH
57661: LD_EXP 53
57665: PUSH
57666: LD_VAR 0 1
57670: ARRAY
57671: PUSH
57672: LD_VAR 0 2
57676: ARRAY
57677: PUSH
57678: LD_INT 1
57680: ARRAY
57681: PPUSH
57682: LD_EXP 53
57686: PUSH
57687: LD_VAR 0 1
57691: ARRAY
57692: PUSH
57693: LD_VAR 0 2
57697: ARRAY
57698: PUSH
57699: LD_INT 2
57701: ARRAY
57702: PPUSH
57703: CALL_OW 428
57707: ST_TO_ADDR
// if not tmp then
57708: LD_VAR 0 4
57712: NOT
57713: IFFALSE 57717
// continue ;
57715: GO 57632
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57717: LD_VAR 0 4
57721: PUSH
57722: LD_INT 81
57724: PUSH
57725: LD_VAR 0 3
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PPUSH
57734: CALL_OW 69
57738: IN
57739: PUSH
57740: LD_EXP 53
57744: PUSH
57745: LD_VAR 0 1
57749: ARRAY
57750: PUSH
57751: LD_VAR 0 2
57755: ARRAY
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PPUSH
57761: LD_EXP 53
57765: PUSH
57766: LD_VAR 0 1
57770: ARRAY
57771: PUSH
57772: LD_VAR 0 2
57776: ARRAY
57777: PUSH
57778: LD_INT 2
57780: ARRAY
57781: PPUSH
57782: CALL_OW 458
57786: AND
57787: IFFALSE 57881
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57789: LD_EXP 53
57793: PUSH
57794: LD_VAR 0 1
57798: ARRAY
57799: PUSH
57800: LD_VAR 0 2
57804: ARRAY
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PPUSH
57810: LD_EXP 53
57814: PUSH
57815: LD_VAR 0 1
57819: ARRAY
57820: PUSH
57821: LD_VAR 0 2
57825: ARRAY
57826: PUSH
57827: LD_INT 2
57829: ARRAY
57830: PPUSH
57831: LD_VAR 0 3
57835: PPUSH
57836: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57840: LD_ADDR_EXP 53
57844: PUSH
57845: LD_EXP 53
57849: PPUSH
57850: LD_VAR 0 1
57854: PPUSH
57855: LD_EXP 53
57859: PUSH
57860: LD_VAR 0 1
57864: ARRAY
57865: PPUSH
57866: LD_VAR 0 2
57870: PPUSH
57871: CALL_OW 3
57875: PPUSH
57876: CALL_OW 1
57880: ST_TO_ADDR
// end ; end ;
57881: GO 57632
57883: POP
57884: POP
// end ;
57885: GO 57550
57887: POP
57888: POP
// end ;
57889: PPOPN 4
57891: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57892: LD_INT 0
57894: PPUSH
57895: PPUSH
// result := false ;
57896: LD_ADDR_VAR 0 4
57900: PUSH
57901: LD_INT 0
57903: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57904: LD_VAR 0 1
57908: PPUSH
57909: CALL_OW 264
57913: PUSH
57914: LD_INT 81
57916: EQUAL
57917: NOT
57918: IFFALSE 57922
// exit ;
57920: GO 58162
// index := GetElementIndex ( minersList , unit ) ;
57922: LD_ADDR_VAR 0 5
57926: PUSH
57927: LD_EXP 52
57931: PPUSH
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL 7773 0 2
57941: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57942: LD_EXP 53
57946: PUSH
57947: LD_VAR 0 5
57951: ARRAY
57952: PUSH
57953: LD_EXP 54
57957: GREATEREQUAL
57958: IFFALSE 57962
// exit ;
57960: GO 58162
// ComMoveXY ( unit , x , y ) ;
57962: LD_VAR 0 1
57966: PPUSH
57967: LD_VAR 0 2
57971: PPUSH
57972: LD_VAR 0 3
57976: PPUSH
57977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57981: LD_INT 35
57983: PPUSH
57984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57988: LD_VAR 0 1
57992: PPUSH
57993: LD_VAR 0 2
57997: PPUSH
57998: LD_VAR 0 3
58002: PPUSH
58003: CALL 39534 0 3
58007: NOT
58008: PUSH
58009: LD_VAR 0 1
58013: PPUSH
58014: CALL_OW 314
58018: AND
58019: IFFALSE 58023
// exit ;
58021: GO 58162
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58023: LD_VAR 0 2
58027: PPUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: CALL_OW 428
58037: PUSH
58038: LD_VAR 0 1
58042: EQUAL
58043: PUSH
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 314
58053: NOT
58054: AND
58055: IFFALSE 57981
// PlaySoundXY ( x , y , PlantMine ) ;
58057: LD_VAR 0 2
58061: PPUSH
58062: LD_VAR 0 3
58066: PPUSH
58067: LD_STRING PlantMine
58069: PPUSH
58070: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58074: LD_VAR 0 2
58078: PPUSH
58079: LD_VAR 0 3
58083: PPUSH
58084: LD_VAR 0 1
58088: PPUSH
58089: CALL_OW 255
58093: PPUSH
58094: LD_INT 0
58096: PPUSH
58097: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58101: LD_ADDR_EXP 53
58105: PUSH
58106: LD_EXP 53
58110: PPUSH
58111: LD_VAR 0 5
58115: PUSH
58116: LD_EXP 53
58120: PUSH
58121: LD_VAR 0 5
58125: ARRAY
58126: PUSH
58127: LD_INT 1
58129: PLUS
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PPUSH
58135: LD_VAR 0 2
58139: PUSH
58140: LD_VAR 0 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PPUSH
58149: CALL 7988 0 3
58153: ST_TO_ADDR
// result := true ;
58154: LD_ADDR_VAR 0 4
58158: PUSH
58159: LD_INT 1
58161: ST_TO_ADDR
// end ;
58162: LD_VAR 0 4
58166: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58167: LD_INT 0
58169: PPUSH
58170: PPUSH
58171: PPUSH
// if not unit in minersList then
58172: LD_VAR 0 1
58176: PUSH
58177: LD_EXP 52
58181: IN
58182: NOT
58183: IFFALSE 58187
// exit ;
58185: GO 58579
// index := GetElementIndex ( minersList , unit ) ;
58187: LD_ADDR_VAR 0 6
58191: PUSH
58192: LD_EXP 52
58196: PPUSH
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL 7773 0 2
58206: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58207: LD_ADDR_VAR 0 5
58211: PUSH
58212: DOUBLE
58213: LD_EXP 53
58217: PUSH
58218: LD_VAR 0 6
58222: ARRAY
58223: INC
58224: ST_TO_ADDR
58225: LD_INT 1
58227: PUSH
58228: FOR_DOWNTO
58229: IFFALSE 58390
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58231: LD_EXP 53
58235: PUSH
58236: LD_VAR 0 6
58240: ARRAY
58241: PUSH
58242: LD_VAR 0 5
58246: ARRAY
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_VAR 0 2
58256: EQUAL
58257: PUSH
58258: LD_EXP 53
58262: PUSH
58263: LD_VAR 0 6
58267: ARRAY
58268: PUSH
58269: LD_VAR 0 5
58273: ARRAY
58274: PUSH
58275: LD_INT 2
58277: ARRAY
58278: PUSH
58279: LD_VAR 0 3
58283: EQUAL
58284: AND
58285: IFFALSE 58388
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58287: LD_EXP 53
58291: PUSH
58292: LD_VAR 0 6
58296: ARRAY
58297: PUSH
58298: LD_VAR 0 5
58302: ARRAY
58303: PUSH
58304: LD_INT 1
58306: ARRAY
58307: PPUSH
58308: LD_EXP 53
58312: PUSH
58313: LD_VAR 0 6
58317: ARRAY
58318: PUSH
58319: LD_VAR 0 5
58323: ARRAY
58324: PUSH
58325: LD_INT 2
58327: ARRAY
58328: PPUSH
58329: LD_VAR 0 1
58333: PPUSH
58334: CALL_OW 255
58338: PPUSH
58339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58343: LD_ADDR_EXP 53
58347: PUSH
58348: LD_EXP 53
58352: PPUSH
58353: LD_VAR 0 6
58357: PPUSH
58358: LD_EXP 53
58362: PUSH
58363: LD_VAR 0 6
58367: ARRAY
58368: PPUSH
58369: LD_VAR 0 5
58373: PPUSH
58374: CALL_OW 3
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
// exit ;
58384: POP
58385: POP
58386: GO 58579
// end ; end ;
58388: GO 58228
58390: POP
58391: POP
// for i := minerMinesList [ index ] downto 1 do
58392: LD_ADDR_VAR 0 5
58396: PUSH
58397: DOUBLE
58398: LD_EXP 53
58402: PUSH
58403: LD_VAR 0 6
58407: ARRAY
58408: INC
58409: ST_TO_ADDR
58410: LD_INT 1
58412: PUSH
58413: FOR_DOWNTO
58414: IFFALSE 58577
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58416: LD_EXP 53
58420: PUSH
58421: LD_VAR 0 6
58425: ARRAY
58426: PUSH
58427: LD_VAR 0 5
58431: ARRAY
58432: PUSH
58433: LD_INT 1
58435: ARRAY
58436: PPUSH
58437: LD_EXP 53
58441: PUSH
58442: LD_VAR 0 6
58446: ARRAY
58447: PUSH
58448: LD_VAR 0 5
58452: ARRAY
58453: PUSH
58454: LD_INT 2
58456: ARRAY
58457: PPUSH
58458: LD_VAR 0 2
58462: PPUSH
58463: LD_VAR 0 3
58467: PPUSH
58468: CALL_OW 298
58472: PUSH
58473: LD_INT 6
58475: LESS
58476: IFFALSE 58575
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58478: LD_EXP 53
58482: PUSH
58483: LD_VAR 0 6
58487: ARRAY
58488: PUSH
58489: LD_VAR 0 5
58493: ARRAY
58494: PUSH
58495: LD_INT 1
58497: ARRAY
58498: PPUSH
58499: LD_EXP 53
58503: PUSH
58504: LD_VAR 0 6
58508: ARRAY
58509: PUSH
58510: LD_VAR 0 5
58514: ARRAY
58515: PUSH
58516: LD_INT 2
58518: ARRAY
58519: PPUSH
58520: LD_VAR 0 1
58524: PPUSH
58525: CALL_OW 255
58529: PPUSH
58530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58534: LD_ADDR_EXP 53
58538: PUSH
58539: LD_EXP 53
58543: PPUSH
58544: LD_VAR 0 6
58548: PPUSH
58549: LD_EXP 53
58553: PUSH
58554: LD_VAR 0 6
58558: ARRAY
58559: PPUSH
58560: LD_VAR 0 5
58564: PPUSH
58565: CALL_OW 3
58569: PPUSH
58570: CALL_OW 1
58574: ST_TO_ADDR
// end ; end ;
58575: GO 58413
58577: POP
58578: POP
// end ;
58579: LD_VAR 0 4
58583: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58584: LD_INT 0
58586: PPUSH
58587: PPUSH
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 264
58604: PUSH
58605: LD_INT 81
58607: EQUAL
58608: NOT
58609: PUSH
58610: LD_VAR 0 1
58614: PUSH
58615: LD_EXP 52
58619: IN
58620: NOT
58621: OR
58622: IFFALSE 58626
// exit ;
58624: GO 58948
// index := GetElementIndex ( minersList , unit ) ;
58626: LD_ADDR_VAR 0 6
58630: PUSH
58631: LD_EXP 52
58635: PPUSH
58636: LD_VAR 0 1
58640: PPUSH
58641: CALL 7773 0 2
58645: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58646: LD_ADDR_VAR 0 8
58650: PUSH
58651: LD_EXP 54
58655: PUSH
58656: LD_EXP 53
58660: PUSH
58661: LD_VAR 0 6
58665: ARRAY
58666: MINUS
58667: ST_TO_ADDR
// if not minesFreeAmount then
58668: LD_VAR 0 8
58672: NOT
58673: IFFALSE 58677
// exit ;
58675: GO 58948
// tmp := [ ] ;
58677: LD_ADDR_VAR 0 7
58681: PUSH
58682: EMPTY
58683: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58684: LD_ADDR_VAR 0 5
58688: PUSH
58689: DOUBLE
58690: LD_INT 1
58692: DEC
58693: ST_TO_ADDR
58694: LD_VAR 0 8
58698: PUSH
58699: FOR_TO
58700: IFFALSE 58895
// begin _d := rand ( 0 , 5 ) ;
58702: LD_ADDR_VAR 0 11
58706: PUSH
58707: LD_INT 0
58709: PPUSH
58710: LD_INT 5
58712: PPUSH
58713: CALL_OW 12
58717: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58718: LD_ADDR_VAR 0 12
58722: PUSH
58723: LD_INT 2
58725: PPUSH
58726: LD_INT 6
58728: PPUSH
58729: CALL_OW 12
58733: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58734: LD_ADDR_VAR 0 9
58738: PUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 11
58748: PPUSH
58749: LD_VAR 0 12
58753: PPUSH
58754: CALL_OW 272
58758: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58759: LD_ADDR_VAR 0 10
58763: PUSH
58764: LD_VAR 0 3
58768: PPUSH
58769: LD_VAR 0 11
58773: PPUSH
58774: LD_VAR 0 12
58778: PPUSH
58779: CALL_OW 273
58783: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58784: LD_VAR 0 9
58788: PPUSH
58789: LD_VAR 0 10
58793: PPUSH
58794: CALL_OW 488
58798: PUSH
58799: LD_VAR 0 9
58803: PUSH
58804: LD_VAR 0 10
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_VAR 0 7
58817: IN
58818: NOT
58819: AND
58820: PUSH
58821: LD_VAR 0 9
58825: PPUSH
58826: LD_VAR 0 10
58830: PPUSH
58831: CALL_OW 458
58835: NOT
58836: AND
58837: IFFALSE 58879
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58839: LD_ADDR_VAR 0 7
58843: PUSH
58844: LD_VAR 0 7
58848: PPUSH
58849: LD_VAR 0 7
58853: PUSH
58854: LD_INT 1
58856: PLUS
58857: PPUSH
58858: LD_VAR 0 9
58862: PUSH
58863: LD_VAR 0 10
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PPUSH
58872: CALL_OW 1
58876: ST_TO_ADDR
58877: GO 58893
// i := i - 1 ;
58879: LD_ADDR_VAR 0 5
58883: PUSH
58884: LD_VAR 0 5
58888: PUSH
58889: LD_INT 1
58891: MINUS
58892: ST_TO_ADDR
// end ;
58893: GO 58699
58895: POP
58896: POP
// for i in tmp do
58897: LD_ADDR_VAR 0 5
58901: PUSH
58902: LD_VAR 0 7
58906: PUSH
58907: FOR_IN
58908: IFFALSE 58946
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58910: LD_VAR 0 1
58914: PPUSH
58915: LD_VAR 0 5
58919: PUSH
58920: LD_INT 1
58922: ARRAY
58923: PPUSH
58924: LD_VAR 0 5
58928: PUSH
58929: LD_INT 2
58931: ARRAY
58932: PPUSH
58933: CALL 57892 0 3
58937: NOT
58938: IFFALSE 58944
// exit ;
58940: POP
58941: POP
58942: GO 58948
58944: GO 58907
58946: POP
58947: POP
// end ;
58948: LD_VAR 0 4
58952: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58953: LD_INT 0
58955: PPUSH
58956: PPUSH
58957: PPUSH
58958: PPUSH
58959: PPUSH
58960: PPUSH
58961: PPUSH
58962: PPUSH
58963: PPUSH
// if GetClass ( unit ) <> class_sniper then
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 257
58973: PUSH
58974: LD_INT 5
58976: NONEQUAL
58977: IFFALSE 58981
// exit ;
58979: GO 59447
// dist := 8 ;
58981: LD_ADDR_VAR 0 5
58985: PUSH
58986: LD_INT 8
58988: ST_TO_ADDR
// viewRange := 12 ;
58989: LD_ADDR_VAR 0 8
58993: PUSH
58994: LD_INT 12
58996: ST_TO_ADDR
// side := GetSide ( unit ) ;
58997: LD_ADDR_VAR 0 6
59001: PUSH
59002: LD_VAR 0 1
59006: PPUSH
59007: CALL_OW 255
59011: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59012: LD_INT 61
59014: PPUSH
59015: LD_VAR 0 6
59019: PPUSH
59020: CALL_OW 321
59024: PUSH
59025: LD_INT 2
59027: EQUAL
59028: IFFALSE 59038
// viewRange := 16 ;
59030: LD_ADDR_VAR 0 8
59034: PUSH
59035: LD_INT 16
59037: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59038: LD_VAR 0 1
59042: PPUSH
59043: LD_VAR 0 2
59047: PPUSH
59048: LD_VAR 0 3
59052: PPUSH
59053: CALL_OW 297
59057: PUSH
59058: LD_VAR 0 5
59062: GREATER
59063: IFFALSE 59142
// begin ComMoveXY ( unit , x , y ) ;
59065: LD_VAR 0 1
59069: PPUSH
59070: LD_VAR 0 2
59074: PPUSH
59075: LD_VAR 0 3
59079: PPUSH
59080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59084: LD_INT 35
59086: PPUSH
59087: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59091: LD_VAR 0 1
59095: PPUSH
59096: LD_VAR 0 2
59100: PPUSH
59101: LD_VAR 0 3
59105: PPUSH
59106: CALL 39534 0 3
59110: NOT
59111: IFFALSE 59115
// exit ;
59113: GO 59447
// until GetDistUnitXY ( unit , x , y ) < dist ;
59115: LD_VAR 0 1
59119: PPUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: LD_VAR 0 3
59129: PPUSH
59130: CALL_OW 297
59134: PUSH
59135: LD_VAR 0 5
59139: LESS
59140: IFFALSE 59084
// end ; ComTurnXY ( unit , x , y ) ;
59142: LD_VAR 0 1
59146: PPUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: LD_VAR 0 3
59156: PPUSH
59157: CALL_OW 118
// repeat if Multiplayer then
59161: LD_OWVAR 4
59165: IFFALSE 59176
// wait ( 35 ) else
59167: LD_INT 35
59169: PPUSH
59170: CALL_OW 67
59174: GO 59183
// wait ( 5 ) ;
59176: LD_INT 5
59178: PPUSH
59179: CALL_OW 67
// _d := GetDir ( unit ) ;
59183: LD_ADDR_VAR 0 11
59187: PUSH
59188: LD_VAR 0 1
59192: PPUSH
59193: CALL_OW 254
59197: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59198: LD_ADDR_VAR 0 7
59202: PUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: CALL_OW 250
59212: PPUSH
59213: LD_VAR 0 1
59217: PPUSH
59218: CALL_OW 251
59222: PPUSH
59223: LD_VAR 0 2
59227: PPUSH
59228: LD_VAR 0 3
59232: PPUSH
59233: CALL 42142 0 4
59237: ST_TO_ADDR
// until dir = _d ;
59238: LD_VAR 0 7
59242: PUSH
59243: LD_VAR 0 11
59247: EQUAL
59248: IFFALSE 59161
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59250: LD_ADDR_VAR 0 9
59254: PUSH
59255: LD_VAR 0 1
59259: PPUSH
59260: CALL_OW 250
59264: PPUSH
59265: LD_VAR 0 7
59269: PPUSH
59270: LD_VAR 0 5
59274: PPUSH
59275: CALL_OW 272
59279: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59280: LD_ADDR_VAR 0 10
59284: PUSH
59285: LD_VAR 0 1
59289: PPUSH
59290: CALL_OW 251
59294: PPUSH
59295: LD_VAR 0 7
59299: PPUSH
59300: LD_VAR 0 5
59304: PPUSH
59305: CALL_OW 273
59309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59310: LD_VAR 0 9
59314: PPUSH
59315: LD_VAR 0 10
59319: PPUSH
59320: CALL_OW 488
59324: NOT
59325: IFFALSE 59329
// exit ;
59327: GO 59447
// ComAnimCustom ( unit , 1 ) ;
59329: LD_VAR 0 1
59333: PPUSH
59334: LD_INT 1
59336: PPUSH
59337: CALL_OW 592
// p := 0 ;
59341: LD_ADDR_VAR 0 12
59345: PUSH
59346: LD_INT 0
59348: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59349: LD_VAR 0 9
59353: PPUSH
59354: LD_VAR 0 10
59358: PPUSH
59359: LD_VAR 0 6
59363: PPUSH
59364: LD_VAR 0 8
59368: PPUSH
59369: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59373: LD_INT 35
59375: PPUSH
59376: CALL_OW 67
// p := Inc ( p ) ;
59380: LD_ADDR_VAR 0 12
59384: PUSH
59385: LD_VAR 0 12
59389: PPUSH
59390: CALL 42098 0 1
59394: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59395: LD_VAR 0 12
59399: PUSH
59400: LD_INT 3
59402: EQUAL
59403: PUSH
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 302
59413: NOT
59414: OR
59415: PUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL_OW 301
59425: OR
59426: IFFALSE 59373
// RemoveSeeing ( _x , _y , side ) ;
59428: LD_VAR 0 9
59432: PPUSH
59433: LD_VAR 0 10
59437: PPUSH
59438: LD_VAR 0 6
59442: PPUSH
59443: CALL_OW 331
// end ; end_of_file
59447: LD_VAR 0 4
59451: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59452: PPOPN 6
59454: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59455: LD_EXP 3
59459: PUSH
59460: LD_INT 4
59462: EQUAL
59463: IFFALSE 59499
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59465: LD_STRING setGameDifficulty(
59467: PUSH
59468: LD_OWVAR 67
59472: STR
59473: PUSH
59474: LD_STRING )
59476: STR
59477: PPUSH
59478: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59482: LD_STRING displayDifficulty(
59484: PUSH
59485: LD_OWVAR 67
59489: STR
59490: PUSH
59491: LD_STRING )
59493: STR
59494: PPUSH
59495: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59499: CALL 59528 0 0
// end ; end_of_file
59503: PPOPN 1
59505: END
// every 0 0$1 do
59506: GO 59508
59508: DISABLE
// begin enable ;
59509: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59510: LD_STRING updateTimer(
59512: PUSH
59513: LD_OWVAR 1
59517: STR
59518: PUSH
59519: LD_STRING );
59521: STR
59522: PPUSH
59523: CALL_OW 559
// end ;
59527: END
// export function SOS_MapStart ( ) ; begin
59528: LD_INT 0
59530: PPUSH
// UpdateFactoryWaypoints ( ) ;
59531: CALL 59904 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59535: CALL 60156 0 0
// ParseMultiDataToLua ( ) ;
59539: CALL 60303 0 0
// end ;
59543: LD_VAR 0 1
59547: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59548: LD_INT 0
59550: PPUSH
// end ;
59551: LD_VAR 0 12
59555: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59556: LD_INT 0
59558: PPUSH
59559: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59560: LD_VAR 0 1
59564: NOT
59565: PUSH
59566: LD_VAR 0 2
59570: PPUSH
59571: LD_VAR 0 3
59575: PPUSH
59576: CALL_OW 488
59580: NOT
59581: OR
59582: PUSH
59583: LD_VAR 0 1
59587: PPUSH
59588: CALL_OW 266
59592: PUSH
59593: LD_INT 3
59595: NONEQUAL
59596: PUSH
59597: LD_VAR 0 1
59601: PPUSH
59602: CALL_OW 247
59606: PUSH
59607: LD_INT 1
59609: EQUAL
59610: NOT
59611: AND
59612: OR
59613: IFFALSE 59617
// exit ;
59615: GO 59899
// if GetType ( factory ) = unit_human then
59617: LD_VAR 0 1
59621: PPUSH
59622: CALL_OW 247
59626: PUSH
59627: LD_INT 1
59629: EQUAL
59630: IFFALSE 59647
// factory := IsInUnit ( factory ) ;
59632: LD_ADDR_VAR 0 1
59636: PUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 310
59646: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 266
59656: PUSH
59657: LD_INT 3
59659: NONEQUAL
59660: IFFALSE 59664
// exit ;
59662: GO 59899
// for i := 1 to Count ( factoryWaypoints ) do
59664: LD_ADDR_VAR 0 5
59668: PUSH
59669: DOUBLE
59670: LD_INT 1
59672: DEC
59673: ST_TO_ADDR
59674: LD_EXP 55
59678: PPUSH
59679: CALL 5128 0 1
59683: PUSH
59684: FOR_TO
59685: IFFALSE 59847
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59687: LD_VAR 0 2
59691: PPUSH
59692: LD_VAR 0 3
59696: PPUSH
59697: CALL_OW 428
59701: PUSH
59702: LD_EXP 55
59706: PUSH
59707: LD_VAR 0 5
59711: ARRAY
59712: PUSH
59713: LD_INT 2
59715: ARRAY
59716: EQUAL
59717: IFFALSE 59749
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59719: LD_ADDR_EXP 55
59723: PUSH
59724: LD_EXP 55
59728: PPUSH
59729: LD_VAR 0 5
59733: PPUSH
59734: CALL_OW 3
59738: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59739: CALL 59904 0 0
// exit ;
59743: POP
59744: POP
59745: GO 59899
// end else
59747: GO 59845
// if factory = factoryWaypoints [ i ] [ 2 ] then
59749: LD_VAR 0 1
59753: PUSH
59754: LD_EXP 55
59758: PUSH
59759: LD_VAR 0 5
59763: ARRAY
59764: PUSH
59765: LD_INT 2
59767: ARRAY
59768: EQUAL
59769: IFFALSE 59845
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59771: LD_ADDR_EXP 55
59775: PUSH
59776: LD_EXP 55
59780: PPUSH
59781: LD_VAR 0 5
59785: PPUSH
59786: CALL_OW 3
59790: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59791: LD_ADDR_EXP 55
59795: PUSH
59796: LD_EXP 55
59800: PPUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: CALL_OW 255
59810: PUSH
59811: LD_VAR 0 1
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_VAR 0 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: PPUSH
59832: CALL 40737 0 2
59836: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59837: CALL 59904 0 0
// exit ;
59841: POP
59842: POP
59843: GO 59899
// end ; end ;
59845: GO 59684
59847: POP
59848: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59849: LD_ADDR_EXP 55
59853: PUSH
59854: LD_EXP 55
59858: PPUSH
59859: LD_VAR 0 1
59863: PPUSH
59864: CALL_OW 255
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_VAR 0 2
59878: PUSH
59879: LD_VAR 0 3
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: PPUSH
59890: CALL 40737 0 2
59894: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59895: CALL 59904 0 0
// end ;
59899: LD_VAR 0 4
59903: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59904: LD_INT 0
59906: PPUSH
59907: PPUSH
59908: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59909: LD_STRING resetFactoryWaypoint();
59911: PPUSH
59912: CALL_OW 559
// if factoryWaypoints then
59916: LD_EXP 55
59920: IFFALSE 60041
// begin list := factoryWaypoints ;
59922: LD_ADDR_VAR 0 3
59926: PUSH
59927: LD_EXP 55
59931: ST_TO_ADDR
// for i := 1 to list do
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: DOUBLE
59938: LD_INT 1
59940: DEC
59941: ST_TO_ADDR
59942: LD_VAR 0 3
59946: PUSH
59947: FOR_TO
59948: IFFALSE 60039
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59950: LD_STRING setFactoryWaypointXY(
59952: PUSH
59953: LD_VAR 0 3
59957: PUSH
59958: LD_VAR 0 2
59962: ARRAY
59963: PUSH
59964: LD_INT 1
59966: ARRAY
59967: STR
59968: PUSH
59969: LD_STRING ,
59971: STR
59972: PUSH
59973: LD_VAR 0 3
59977: PUSH
59978: LD_VAR 0 2
59982: ARRAY
59983: PUSH
59984: LD_INT 2
59986: ARRAY
59987: STR
59988: PUSH
59989: LD_STRING ,
59991: STR
59992: PUSH
59993: LD_VAR 0 3
59997: PUSH
59998: LD_VAR 0 2
60002: ARRAY
60003: PUSH
60004: LD_INT 3
60006: ARRAY
60007: STR
60008: PUSH
60009: LD_STRING ,
60011: STR
60012: PUSH
60013: LD_VAR 0 3
60017: PUSH
60018: LD_VAR 0 2
60022: ARRAY
60023: PUSH
60024: LD_INT 4
60026: ARRAY
60027: STR
60028: PUSH
60029: LD_STRING )
60031: STR
60032: PPUSH
60033: CALL_OW 559
60037: GO 59947
60039: POP
60040: POP
// end ; end ;
60041: LD_VAR 0 1
60045: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60046: LD_INT 0
60048: PPUSH
// if HexInfo ( x , y ) = warehouse then
60049: LD_VAR 0 2
60053: PPUSH
60054: LD_VAR 0 3
60058: PPUSH
60059: CALL_OW 428
60063: PUSH
60064: LD_VAR 0 1
60068: EQUAL
60069: IFFALSE 60096
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60071: LD_ADDR_EXP 57
60075: PUSH
60076: LD_EXP 57
60080: PPUSH
60081: LD_VAR 0 1
60085: PPUSH
60086: LD_INT 0
60088: PPUSH
60089: CALL_OW 1
60093: ST_TO_ADDR
60094: GO 60147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60096: LD_ADDR_EXP 57
60100: PUSH
60101: LD_EXP 57
60105: PPUSH
60106: LD_VAR 0 1
60110: PPUSH
60111: LD_VAR 0 1
60115: PPUSH
60116: CALL_OW 255
60120: PUSH
60121: LD_VAR 0 1
60125: PUSH
60126: LD_VAR 0 2
60130: PUSH
60131: LD_VAR 0 3
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: PPUSH
60142: CALL_OW 1
60146: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60147: CALL 60156 0 0
// end ;
60151: LD_VAR 0 4
60155: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60156: LD_INT 0
60158: PPUSH
60159: PPUSH
60160: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60161: LD_STRING resetWarehouseGatheringPoints();
60163: PPUSH
60164: CALL_OW 559
// if warehouseGatheringPoints then
60168: LD_EXP 57
60172: IFFALSE 60298
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60174: LD_ADDR_VAR 0 3
60178: PUSH
60179: LD_EXP 57
60183: PPUSH
60184: CALL 44505 0 1
60188: ST_TO_ADDR
// for i := 1 to list do
60189: LD_ADDR_VAR 0 2
60193: PUSH
60194: DOUBLE
60195: LD_INT 1
60197: DEC
60198: ST_TO_ADDR
60199: LD_VAR 0 3
60203: PUSH
60204: FOR_TO
60205: IFFALSE 60296
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60207: LD_STRING setWarehouseGatheringPointXY(
60209: PUSH
60210: LD_VAR 0 3
60214: PUSH
60215: LD_VAR 0 2
60219: ARRAY
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: STR
60225: PUSH
60226: LD_STRING ,
60228: STR
60229: PUSH
60230: LD_VAR 0 3
60234: PUSH
60235: LD_VAR 0 2
60239: ARRAY
60240: PUSH
60241: LD_INT 2
60243: ARRAY
60244: STR
60245: PUSH
60246: LD_STRING ,
60248: STR
60249: PUSH
60250: LD_VAR 0 3
60254: PUSH
60255: LD_VAR 0 2
60259: ARRAY
60260: PUSH
60261: LD_INT 3
60263: ARRAY
60264: STR
60265: PUSH
60266: LD_STRING ,
60268: STR
60269: PUSH
60270: LD_VAR 0 3
60274: PUSH
60275: LD_VAR 0 2
60279: ARRAY
60280: PUSH
60281: LD_INT 4
60283: ARRAY
60284: STR
60285: PUSH
60286: LD_STRING )
60288: STR
60289: PPUSH
60290: CALL_OW 559
60294: GO 60204
60296: POP
60297: POP
// end ; end ;
60298: LD_VAR 0 1
60302: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60303: LD_INT 0
60305: PPUSH
60306: PPUSH
// if not mpSidePositions then
60307: LD_EXP 7
60311: NOT
60312: IFFALSE 60316
// exit ;
60314: GO 60387
// result :=  ;
60316: LD_ADDR_VAR 0 1
60320: PUSH
60321: LD_STRING 
60323: ST_TO_ADDR
// for i := 1 to 8 do
60324: LD_ADDR_VAR 0 2
60328: PUSH
60329: DOUBLE
60330: LD_INT 1
60332: DEC
60333: ST_TO_ADDR
60334: LD_INT 8
60336: PUSH
60337: FOR_TO
60338: IFFALSE 60368
// begin result := result & mpSidePositions [ i ] & ; ;
60340: LD_ADDR_VAR 0 1
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_EXP 7
60354: PUSH
60355: LD_VAR 0 2
60359: ARRAY
60360: STR
60361: PUSH
60362: LD_STRING ;
60364: STR
60365: ST_TO_ADDR
// end ;
60366: GO 60337
60368: POP
60369: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60370: LD_STRING setMultiplayerRealPosition("
60372: PUSH
60373: LD_VAR 0 1
60377: STR
60378: PUSH
60379: LD_STRING ");
60381: STR
60382: PPUSH
60383: CALL_OW 559
// end ;
60387: LD_VAR 0 1
60391: RET
