// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45758 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46073 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 33
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 34
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 36
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 33
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 34
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 35
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 32
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45213 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45213 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45213 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45213 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45213 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45213 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45213 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45213 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5065 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45046 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45046 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45046 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45046 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45046 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45046 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45046 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45046 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45046 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45046 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45046 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45046 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45046 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45046 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45046 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45046 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45213 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45213 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45213 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45213 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45213 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45213 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45213 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45213 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45213 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45213 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45213 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45213 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45213 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45213 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45213 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45213 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45213 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45213 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45213 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45213 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45213 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45213 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45213 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45213 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42035 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 20
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 53892 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 50595 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 53909 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 51198 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 53950 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 51251 0 3
2939: PPOPN 3
2941: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
// if exist_mode then
2946: LD_VAR 0 2
2950: IFFALSE 2996
// begin unit := CreateCharacter ( prefix & ident ) ;
2952: LD_ADDR_VAR 0 5
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 1
2966: STR
2967: PPUSH
2968: CALL_OW 34
2972: ST_TO_ADDR
// if unit then
2973: LD_VAR 0 5
2977: IFFALSE 2994
// DeleteCharacters ( prefix & ident ) ;
2979: LD_VAR 0 3
2983: PUSH
2984: LD_VAR 0 1
2988: STR
2989: PPUSH
2990: CALL_OW 40
// end else
2994: GO 3011
// unit := NewCharacter ( ident ) ;
2996: LD_ADDR_VAR 0 5
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: CALL_OW 25
3010: ST_TO_ADDR
// result := unit ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: LD_VAR 0 5
3020: ST_TO_ADDR
// end ;
3021: LD_VAR 0 4
3025: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3026: LD_INT 0
3028: PPUSH
3029: PPUSH
// if not side or not nation then
3030: LD_VAR 0 1
3034: NOT
3035: PUSH
3036: LD_VAR 0 2
3040: NOT
3041: OR
3042: IFFALSE 3046
// exit ;
3044: GO 3814
// case nation of nation_american :
3046: LD_VAR 0 2
3050: PUSH
3051: LD_INT 1
3053: DOUBLE
3054: EQUAL
3055: IFTRUE 3059
3057: GO 3273
3059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3060: LD_ADDR_VAR 0 4
3064: PUSH
3065: LD_INT 35
3067: PUSH
3068: LD_INT 45
3070: PUSH
3071: LD_INT 46
3073: PUSH
3074: LD_INT 47
3076: PUSH
3077: LD_INT 82
3079: PUSH
3080: LD_INT 83
3082: PUSH
3083: LD_INT 84
3085: PUSH
3086: LD_INT 85
3088: PUSH
3089: LD_INT 86
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: LD_INT 6
3100: PUSH
3101: LD_INT 15
3103: PUSH
3104: LD_INT 16
3106: PUSH
3107: LD_INT 7
3109: PUSH
3110: LD_INT 12
3112: PUSH
3113: LD_INT 13
3115: PUSH
3116: LD_INT 10
3118: PUSH
3119: LD_INT 14
3121: PUSH
3122: LD_INT 20
3124: PUSH
3125: LD_INT 21
3127: PUSH
3128: LD_INT 22
3130: PUSH
3131: LD_INT 25
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 27
3139: PUSH
3140: LD_INT 36
3142: PUSH
3143: LD_INT 69
3145: PUSH
3146: LD_INT 39
3148: PUSH
3149: LD_INT 34
3151: PUSH
3152: LD_INT 40
3154: PUSH
3155: LD_INT 48
3157: PUSH
3158: LD_INT 49
3160: PUSH
3161: LD_INT 50
3163: PUSH
3164: LD_INT 51
3166: PUSH
3167: LD_INT 52
3169: PUSH
3170: LD_INT 53
3172: PUSH
3173: LD_INT 54
3175: PUSH
3176: LD_INT 55
3178: PUSH
3179: LD_INT 56
3181: PUSH
3182: LD_INT 57
3184: PUSH
3185: LD_INT 58
3187: PUSH
3188: LD_INT 59
3190: PUSH
3191: LD_INT 60
3193: PUSH
3194: LD_INT 61
3196: PUSH
3197: LD_INT 62
3199: PUSH
3200: LD_INT 80
3202: PUSH
3203: LD_INT 82
3205: PUSH
3206: LD_INT 83
3208: PUSH
3209: LD_INT 84
3211: PUSH
3212: LD_INT 85
3214: PUSH
3215: LD_INT 86
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: ST_TO_ADDR
3271: GO 3738
3273: LD_INT 2
3275: DOUBLE
3276: EQUAL
3277: IFTRUE 3281
3279: GO 3507
3281: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3282: LD_ADDR_VAR 0 4
3286: PUSH
3287: LD_INT 35
3289: PUSH
3290: LD_INT 45
3292: PUSH
3293: LD_INT 46
3295: PUSH
3296: LD_INT 47
3298: PUSH
3299: LD_INT 82
3301: PUSH
3302: LD_INT 83
3304: PUSH
3305: LD_INT 84
3307: PUSH
3308: LD_INT 85
3310: PUSH
3311: LD_INT 87
3313: PUSH
3314: LD_INT 70
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: LD_INT 11
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: LD_INT 4
3328: PUSH
3329: LD_INT 5
3331: PUSH
3332: LD_INT 6
3334: PUSH
3335: LD_INT 15
3337: PUSH
3338: LD_INT 18
3340: PUSH
3341: LD_INT 7
3343: PUSH
3344: LD_INT 17
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: LD_INT 20
3352: PUSH
3353: LD_INT 21
3355: PUSH
3356: LD_INT 22
3358: PUSH
3359: LD_INT 72
3361: PUSH
3362: LD_INT 26
3364: PUSH
3365: LD_INT 69
3367: PUSH
3368: LD_INT 39
3370: PUSH
3371: LD_INT 40
3373: PUSH
3374: LD_INT 41
3376: PUSH
3377: LD_INT 42
3379: PUSH
3380: LD_INT 43
3382: PUSH
3383: LD_INT 48
3385: PUSH
3386: LD_INT 49
3388: PUSH
3389: LD_INT 50
3391: PUSH
3392: LD_INT 51
3394: PUSH
3395: LD_INT 52
3397: PUSH
3398: LD_INT 53
3400: PUSH
3401: LD_INT 54
3403: PUSH
3404: LD_INT 55
3406: PUSH
3407: LD_INT 56
3409: PUSH
3410: LD_INT 60
3412: PUSH
3413: LD_INT 61
3415: PUSH
3416: LD_INT 62
3418: PUSH
3419: LD_INT 66
3421: PUSH
3422: LD_INT 67
3424: PUSH
3425: LD_INT 68
3427: PUSH
3428: LD_INT 81
3430: PUSH
3431: LD_INT 82
3433: PUSH
3434: LD_INT 83
3436: PUSH
3437: LD_INT 84
3439: PUSH
3440: LD_INT 85
3442: PUSH
3443: LD_INT 87
3445: PUSH
3446: LD_INT 88
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 3738
3507: LD_INT 3
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3737
3515: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3516: LD_ADDR_VAR 0 4
3520: PUSH
3521: LD_INT 46
3523: PUSH
3524: LD_INT 47
3526: PUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 2
3532: PUSH
3533: LD_INT 82
3535: PUSH
3536: LD_INT 83
3538: PUSH
3539: LD_INT 84
3541: PUSH
3542: LD_INT 85
3544: PUSH
3545: LD_INT 86
3547: PUSH
3548: LD_INT 11
3550: PUSH
3551: LD_INT 9
3553: PUSH
3554: LD_INT 20
3556: PUSH
3557: LD_INT 19
3559: PUSH
3560: LD_INT 21
3562: PUSH
3563: LD_INT 24
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 25
3571: PUSH
3572: LD_INT 28
3574: PUSH
3575: LD_INT 29
3577: PUSH
3578: LD_INT 30
3580: PUSH
3581: LD_INT 31
3583: PUSH
3584: LD_INT 37
3586: PUSH
3587: LD_INT 38
3589: PUSH
3590: LD_INT 32
3592: PUSH
3593: LD_INT 27
3595: PUSH
3596: LD_INT 33
3598: PUSH
3599: LD_INT 69
3601: PUSH
3602: LD_INT 39
3604: PUSH
3605: LD_INT 34
3607: PUSH
3608: LD_INT 40
3610: PUSH
3611: LD_INT 71
3613: PUSH
3614: LD_INT 23
3616: PUSH
3617: LD_INT 44
3619: PUSH
3620: LD_INT 48
3622: PUSH
3623: LD_INT 49
3625: PUSH
3626: LD_INT 50
3628: PUSH
3629: LD_INT 51
3631: PUSH
3632: LD_INT 52
3634: PUSH
3635: LD_INT 53
3637: PUSH
3638: LD_INT 54
3640: PUSH
3641: LD_INT 55
3643: PUSH
3644: LD_INT 56
3646: PUSH
3647: LD_INT 57
3649: PUSH
3650: LD_INT 58
3652: PUSH
3653: LD_INT 59
3655: PUSH
3656: LD_INT 63
3658: PUSH
3659: LD_INT 64
3661: PUSH
3662: LD_INT 65
3664: PUSH
3665: LD_INT 82
3667: PUSH
3668: LD_INT 83
3670: PUSH
3671: LD_INT 84
3673: PUSH
3674: LD_INT 85
3676: PUSH
3677: LD_INT 86
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: ST_TO_ADDR
3735: GO 3738
3737: POP
// if state > - 1 and state < 3 then
3738: LD_VAR 0 3
3742: PUSH
3743: LD_INT 1
3745: NEG
3746: GREATER
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 3
3755: LESS
3756: AND
3757: IFFALSE 3814
// for i in result do
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: LD_VAR 0 4
3768: PUSH
3769: FOR_IN
3770: IFFALSE 3812
// if GetTech ( i , side ) <> state then
3772: LD_VAR 0 5
3776: PPUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 321
3786: PUSH
3787: LD_VAR 0 3
3791: NONEQUAL
3792: IFFALSE 3810
// result := result diff i ;
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: LD_VAR 0 4
3803: PUSH
3804: LD_VAR 0 5
3808: DIFF
3809: ST_TO_ADDR
3810: GO 3769
3812: POP
3813: POP
// end ;
3814: LD_VAR 0 4
3818: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// result := true ;
3824: LD_ADDR_VAR 0 3
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3832: LD_ADDR_VAR 0 5
3836: PUSH
3837: LD_VAR 0 2
3841: PPUSH
3842: CALL_OW 480
3846: ST_TO_ADDR
// if not tmp then
3847: LD_VAR 0 5
3851: NOT
3852: IFFALSE 3856
// exit ;
3854: GO 3905
// for i in tmp do
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_VAR 0 5
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3903
// if GetTech ( i , side ) <> state_researched then
3869: LD_VAR 0 4
3873: PPUSH
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 321
3883: PUSH
3884: LD_INT 2
3886: NONEQUAL
3887: IFFALSE 3901
// begin result := false ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: LD_INT 0
3896: ST_TO_ADDR
// exit ;
3897: POP
3898: POP
3899: GO 3905
// end ;
3901: GO 3866
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 3
3909: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
3915: PPUSH
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
3924: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3925: LD_VAR 0 1
3929: NOT
3930: PUSH
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL_OW 257
3940: PUSH
3941: LD_INT 9
3943: NONEQUAL
3944: OR
3945: IFFALSE 3949
// exit ;
3947: GO 4522
// side := GetSide ( unit ) ;
3949: LD_ADDR_VAR 0 9
3953: PUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: CALL_OW 255
3963: ST_TO_ADDR
// tech_space := tech_spacanom ;
3964: LD_ADDR_VAR 0 12
3968: PUSH
3969: LD_INT 29
3971: ST_TO_ADDR
// tech_time := tech_taurad ;
3972: LD_ADDR_VAR 0 13
3976: PUSH
3977: LD_INT 28
3979: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3980: LD_ADDR_VAR 0 11
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 310
3994: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3995: LD_VAR 0 11
3999: PPUSH
4000: CALL_OW 247
4004: PUSH
4005: LD_INT 2
4007: EQUAL
4008: IFFALSE 4012
// exit ;
4010: GO 4522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4012: LD_ADDR_VAR 0 8
4016: PUSH
4017: LD_INT 81
4019: PUSH
4020: LD_VAR 0 9
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 3
4031: PUSH
4032: LD_INT 21
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: ST_TO_ADDR
// if not tmp then
4055: LD_VAR 0 8
4059: NOT
4060: IFFALSE 4064
// exit ;
4062: GO 4522
// if in_unit then
4064: LD_VAR 0 11
4068: IFFALSE 4092
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4070: LD_ADDR_VAR 0 10
4074: PUSH
4075: LD_VAR 0 8
4079: PPUSH
4080: LD_VAR 0 11
4084: PPUSH
4085: CALL_OW 74
4089: ST_TO_ADDR
4090: GO 4112
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4092: LD_ADDR_VAR 0 10
4096: PUSH
4097: LD_VAR 0 8
4101: PPUSH
4102: LD_VAR 0 1
4106: PPUSH
4107: CALL_OW 74
4111: ST_TO_ADDR
// if not enemy then
4112: LD_VAR 0 10
4116: NOT
4117: IFFALSE 4121
// exit ;
4119: GO 4522
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4121: LD_VAR 0 11
4125: PUSH
4126: LD_VAR 0 11
4130: PPUSH
4131: LD_VAR 0 10
4135: PPUSH
4136: CALL_OW 296
4140: PUSH
4141: LD_INT 13
4143: GREATER
4144: AND
4145: PUSH
4146: LD_VAR 0 1
4150: PPUSH
4151: LD_VAR 0 10
4155: PPUSH
4156: CALL_OW 296
4160: PUSH
4161: LD_INT 12
4163: GREATER
4164: OR
4165: IFFALSE 4169
// exit ;
4167: GO 4522
// missile := [ 1 ] ;
4169: LD_ADDR_VAR 0 14
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: EMPTY
4178: LIST
4179: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4180: LD_VAR 0 9
4184: PPUSH
4185: LD_VAR 0 12
4189: PPUSH
4190: CALL_OW 325
4194: IFFALSE 4223
// missile := Replace ( missile , missile + 1 , 2 ) ;
4196: LD_ADDR_VAR 0 14
4200: PUSH
4201: LD_VAR 0 14
4205: PPUSH
4206: LD_VAR 0 14
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_INT 2
4217: PPUSH
4218: CALL_OW 1
4222: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4223: LD_VAR 0 9
4227: PPUSH
4228: LD_VAR 0 13
4232: PPUSH
4233: CALL_OW 325
4237: PUSH
4238: LD_VAR 0 10
4242: PPUSH
4243: CALL_OW 255
4247: PPUSH
4248: LD_VAR 0 13
4252: PPUSH
4253: CALL_OW 325
4257: NOT
4258: AND
4259: IFFALSE 4288
// missile := Replace ( missile , missile + 1 , 3 ) ;
4261: LD_ADDR_VAR 0 14
4265: PUSH
4266: LD_VAR 0 14
4270: PPUSH
4271: LD_VAR 0 14
4275: PUSH
4276: LD_INT 1
4278: PLUS
4279: PPUSH
4280: LD_INT 3
4282: PPUSH
4283: CALL_OW 1
4287: ST_TO_ADDR
// if missile < 2 then
4288: LD_VAR 0 14
4292: PUSH
4293: LD_INT 2
4295: LESS
4296: IFFALSE 4300
// exit ;
4298: GO 4522
// x := GetX ( enemy ) ;
4300: LD_ADDR_VAR 0 4
4304: PUSH
4305: LD_VAR 0 10
4309: PPUSH
4310: CALL_OW 250
4314: ST_TO_ADDR
// y := GetY ( enemy ) ;
4315: LD_ADDR_VAR 0 5
4319: PUSH
4320: LD_VAR 0 10
4324: PPUSH
4325: CALL_OW 251
4329: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4330: LD_ADDR_VAR 0 6
4334: PUSH
4335: LD_VAR 0 4
4339: PUSH
4340: LD_INT 1
4342: NEG
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL_OW 12
4351: PLUS
4352: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4353: LD_ADDR_VAR 0 7
4357: PUSH
4358: LD_VAR 0 5
4362: PUSH
4363: LD_INT 1
4365: NEG
4366: PPUSH
4367: LD_INT 1
4369: PPUSH
4370: CALL_OW 12
4374: PLUS
4375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4376: LD_VAR 0 6
4380: PPUSH
4381: LD_VAR 0 7
4385: PPUSH
4386: CALL_OW 488
4390: NOT
4391: IFFALSE 4413
// begin _x := x ;
4393: LD_ADDR_VAR 0 6
4397: PUSH
4398: LD_VAR 0 4
4402: ST_TO_ADDR
// _y := y ;
4403: LD_ADDR_VAR 0 7
4407: PUSH
4408: LD_VAR 0 5
4412: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4413: LD_ADDR_VAR 0 3
4417: PUSH
4418: LD_INT 1
4420: PPUSH
4421: LD_VAR 0 14
4425: PPUSH
4426: CALL_OW 12
4430: ST_TO_ADDR
// case i of 1 :
4431: LD_VAR 0 3
4435: PUSH
4436: LD_INT 1
4438: DOUBLE
4439: EQUAL
4440: IFTRUE 4444
4442: GO 4461
4444: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_VAR 0 10
4454: PPUSH
4455: CALL_OW 115
4459: GO 4522
4461: LD_INT 2
4463: DOUBLE
4464: EQUAL
4465: IFTRUE 4469
4467: GO 4491
4469: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_VAR 0 6
4479: PPUSH
4480: LD_VAR 0 7
4484: PPUSH
4485: CALL_OW 153
4489: GO 4522
4491: LD_INT 3
4493: DOUBLE
4494: EQUAL
4495: IFTRUE 4499
4497: GO 4521
4499: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 6
4509: PPUSH
4510: LD_VAR 0 7
4514: PPUSH
4515: CALL_OW 154
4519: GO 4522
4521: POP
// end ;
4522: LD_VAR 0 2
4526: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4527: LD_INT 0
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
// if not unit or not building then
4535: LD_VAR 0 1
4539: NOT
4540: PUSH
4541: LD_VAR 0 2
4545: NOT
4546: OR
4547: IFFALSE 4551
// exit ;
4549: GO 4709
// x := GetX ( building ) ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 250
4565: ST_TO_ADDR
// y := GetY ( building ) ;
4566: LD_ADDR_VAR 0 6
4570: PUSH
4571: LD_VAR 0 2
4575: PPUSH
4576: CALL_OW 251
4580: ST_TO_ADDR
// for i = 0 to 5 do
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: DOUBLE
4587: LD_INT 0
4589: DEC
4590: ST_TO_ADDR
4591: LD_INT 5
4593: PUSH
4594: FOR_TO
4595: IFFALSE 4707
// begin _x := ShiftX ( x , i , 3 ) ;
4597: LD_ADDR_VAR 0 7
4601: PUSH
4602: LD_VAR 0 5
4606: PPUSH
4607: LD_VAR 0 4
4611: PPUSH
4612: LD_INT 3
4614: PPUSH
4615: CALL_OW 272
4619: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4620: LD_ADDR_VAR 0 8
4624: PUSH
4625: LD_VAR 0 6
4629: PPUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL_OW 273
4642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4643: LD_VAR 0 7
4647: PPUSH
4648: LD_VAR 0 8
4652: PPUSH
4653: CALL_OW 488
4657: NOT
4658: IFFALSE 4662
// continue ;
4660: GO 4594
// if HexInfo ( _x , _y ) = 0 then
4662: LD_VAR 0 7
4666: PPUSH
4667: LD_VAR 0 8
4671: PPUSH
4672: CALL_OW 428
4676: PUSH
4677: LD_INT 0
4679: EQUAL
4680: IFFALSE 4705
// begin ComMoveXY ( unit , _x , _y ) ;
4682: LD_VAR 0 1
4686: PPUSH
4687: LD_VAR 0 7
4691: PPUSH
4692: LD_VAR 0 8
4696: PPUSH
4697: CALL_OW 111
// exit ;
4701: POP
4702: POP
4703: GO 4709
// end ; end ;
4705: GO 4594
4707: POP
4708: POP
// end ;
4709: LD_VAR 0 3
4713: RET
// export function ScanBase ( side , base_area ) ; begin
4714: LD_INT 0
4716: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4717: LD_ADDR_VAR 0 3
4721: PUSH
4722: LD_VAR 0 2
4726: PPUSH
4727: LD_INT 81
4729: PUSH
4730: LD_VAR 0 1
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PPUSH
4739: CALL_OW 70
4743: ST_TO_ADDR
// end ;
4744: LD_VAR 0 3
4748: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
4753: PPUSH
4754: PPUSH
// result := false ;
4755: LD_ADDR_VAR 0 2
4759: PUSH
4760: LD_INT 0
4762: ST_TO_ADDR
// side := GetSide ( unit ) ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL_OW 255
4777: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4778: LD_ADDR_VAR 0 4
4782: PUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 248
4792: ST_TO_ADDR
// case nat of 1 :
4793: LD_VAR 0 4
4797: PUSH
4798: LD_INT 1
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4817
4806: POP
// tech := tech_lassight ; 2 :
4807: LD_ADDR_VAR 0 5
4811: PUSH
4812: LD_INT 12
4814: ST_TO_ADDR
4815: GO 4856
4817: LD_INT 2
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4836
4825: POP
// tech := tech_mortar ; 3 :
4826: LD_ADDR_VAR 0 5
4830: PUSH
4831: LD_INT 41
4833: ST_TO_ADDR
4834: GO 4856
4836: LD_INT 3
4838: DOUBLE
4839: EQUAL
4840: IFTRUE 4844
4842: GO 4855
4844: POP
// tech := tech_bazooka ; end ;
4845: LD_ADDR_VAR 0 5
4849: PUSH
4850: LD_INT 44
4852: ST_TO_ADDR
4853: GO 4856
4855: POP
// if Researched ( side , tech ) then
4856: LD_VAR 0 3
4860: PPUSH
4861: LD_VAR 0 5
4865: PPUSH
4866: CALL_OW 325
4870: IFFALSE 4897
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 8
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_VAR 0 4
4895: ARRAY
4896: ST_TO_ADDR
// end ;
4897: LD_VAR 0 2
4901: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4902: LD_INT 0
4904: PPUSH
4905: PPUSH
4906: PPUSH
// if not mines then
4907: LD_VAR 0 2
4911: NOT
4912: IFFALSE 4916
// exit ;
4914: GO 5060
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4916: LD_ADDR_VAR 0 5
4920: PUSH
4921: LD_INT 81
4923: PUSH
4924: LD_VAR 0 1
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 3
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: ST_TO_ADDR
// for i in mines do
4959: LD_ADDR_VAR 0 4
4963: PUSH
4964: LD_VAR 0 2
4968: PUSH
4969: FOR_IN
4970: IFFALSE 5058
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: LD_VAR 0 4
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: CALL_OW 458
4994: NOT
4995: IFFALSE 4999
// continue ;
4997: GO 4969
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4999: LD_VAR 0 4
5003: PUSH
5004: LD_INT 1
5006: ARRAY
5007: PPUSH
5008: LD_VAR 0 4
5012: PUSH
5013: LD_INT 2
5015: ARRAY
5016: PPUSH
5017: CALL_OW 428
5021: PUSH
5022: LD_VAR 0 5
5026: IN
5027: IFFALSE 5056
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5029: LD_VAR 0 4
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PPUSH
5038: LD_VAR 0 4
5042: PUSH
5043: LD_INT 2
5045: ARRAY
5046: PPUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 456
// end ;
5056: GO 4969
5058: POP
5059: POP
// end ;
5060: LD_VAR 0 3
5064: RET
// export function Count ( array ) ; begin
5065: LD_INT 0
5067: PPUSH
// result := array + 0 ;
5068: LD_ADDR_VAR 0 2
5072: PUSH
5073: LD_VAR 0 1
5077: PUSH
5078: LD_INT 0
5080: PLUS
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 2
5086: RET
// export function IsEmpty ( building ) ; begin
5087: LD_INT 0
5089: PPUSH
// if not building then
5090: LD_VAR 0 1
5094: NOT
5095: IFFALSE 5099
// exit ;
5097: GO 5142
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5099: LD_ADDR_VAR 0 2
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_VAR 0 1
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PUSH
5126: LD_INT 58
5128: PUSH
5129: EMPTY
5130: LIST
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PPUSH
5136: CALL_OW 69
5140: IN
5141: ST_TO_ADDR
// end ;
5142: LD_VAR 0 2
5146: RET
// export function IsNotFull ( building ) ; var places ; begin
5147: LD_INT 0
5149: PPUSH
5150: PPUSH
// if not building then
5151: LD_VAR 0 1
5155: NOT
5156: IFFALSE 5160
// exit ;
5158: GO 5188
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_VAR 0 1
5169: PPUSH
5170: LD_INT 3
5172: PUSH
5173: LD_INT 62
5175: PUSH
5176: EMPTY
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 72
5187: ST_TO_ADDR
// end ;
5188: LD_VAR 0 2
5192: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
5197: PPUSH
5198: PPUSH
// tmp := [ ] ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: EMPTY
5205: ST_TO_ADDR
// list := [ ] ;
5206: LD_ADDR_VAR 0 5
5210: PUSH
5211: EMPTY
5212: ST_TO_ADDR
// for i = 16 to 25 do
5213: LD_ADDR_VAR 0 4
5217: PUSH
5218: DOUBLE
5219: LD_INT 16
5221: DEC
5222: ST_TO_ADDR
5223: LD_INT 25
5225: PUSH
5226: FOR_TO
5227: IFFALSE 5300
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_VAR 0 3
5238: PUSH
5239: LD_INT 22
5241: PUSH
5242: LD_VAR 0 1
5246: PPUSH
5247: CALL_OW 255
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 91
5258: PUSH
5259: LD_VAR 0 1
5263: PUSH
5264: LD_INT 6
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 30
5274: PUSH
5275: LD_VAR 0 4
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: ADD
5297: ST_TO_ADDR
5298: GO 5226
5300: POP
5301: POP
// for i = 1 to tmp do
5302: LD_ADDR_VAR 0 4
5306: PUSH
5307: DOUBLE
5308: LD_INT 1
5310: DEC
5311: ST_TO_ADDR
5312: LD_VAR 0 3
5316: PUSH
5317: FOR_TO
5318: IFFALSE 5406
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5320: LD_ADDR_VAR 0 5
5324: PUSH
5325: LD_VAR 0 5
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 4
5339: ARRAY
5340: PPUSH
5341: CALL_OW 266
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: LD_VAR 0 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 250
5361: PUSH
5362: LD_VAR 0 3
5366: PUSH
5367: LD_VAR 0 4
5371: ARRAY
5372: PPUSH
5373: CALL_OW 251
5377: PUSH
5378: LD_VAR 0 3
5382: PUSH
5383: LD_VAR 0 4
5387: ARRAY
5388: PPUSH
5389: CALL_OW 254
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: ADD
5403: ST_TO_ADDR
5404: GO 5317
5406: POP
5407: POP
// result := list ;
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: LD_VAR 0 5
5417: ST_TO_ADDR
// end ;
5418: LD_VAR 0 2
5422: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
// if not factory then
5432: LD_VAR 0 1
5436: NOT
5437: IFFALSE 5441
// exit ;
5439: GO 6034
// if control = control_apeman then
5441: LD_VAR 0 4
5445: PUSH
5446: LD_INT 5
5448: EQUAL
5449: IFFALSE 5558
// begin tmp := UnitsInside ( factory ) ;
5451: LD_ADDR_VAR 0 8
5455: PUSH
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL_OW 313
5465: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5466: LD_VAR 0 8
5470: PPUSH
5471: LD_INT 25
5473: PUSH
5474: LD_INT 12
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PPUSH
5481: CALL_OW 72
5485: NOT
5486: IFFALSE 5496
// control := control_manual ;
5488: LD_ADDR_VAR 0 4
5492: PUSH
5493: LD_INT 1
5495: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5496: LD_ADDR_VAR 0 8
5500: PUSH
5501: LD_VAR 0 1
5505: PPUSH
5506: CALL 5193 0 1
5510: ST_TO_ADDR
// if tmp then
5511: LD_VAR 0 8
5515: IFFALSE 5558
// begin for i in tmp do
5517: LD_ADDR_VAR 0 7
5521: PUSH
5522: LD_VAR 0 8
5526: PUSH
5527: FOR_IN
5528: IFFALSE 5556
// if i [ 1 ] = b_ext_radio then
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PUSH
5539: LD_INT 22
5541: EQUAL
5542: IFFALSE 5554
// begin control := control_remote ;
5544: LD_ADDR_VAR 0 4
5548: PUSH
5549: LD_INT 2
5551: ST_TO_ADDR
// break ;
5552: GO 5556
// end ;
5554: GO 5527
5556: POP
5557: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: LD_VAR 0 3
5572: PPUSH
5573: LD_VAR 0 4
5577: PPUSH
5578: LD_VAR 0 5
5582: PPUSH
5583: CALL_OW 448
5587: IFFALSE 5622
// begin result := [ chassis , engine , control , weapon ] ;
5589: LD_ADDR_VAR 0 6
5593: PUSH
5594: LD_VAR 0 2
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_VAR 0 4
5608: PUSH
5609: LD_VAR 0 5
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: ST_TO_ADDR
// exit ;
5620: GO 6034
// end ; _chassis := AvailableChassisList ( factory ) ;
5622: LD_ADDR_VAR 0 9
5626: PUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 475
5636: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5637: LD_ADDR_VAR 0 11
5641: PUSH
5642: LD_VAR 0 1
5646: PPUSH
5647: CALL_OW 476
5651: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5652: LD_ADDR_VAR 0 12
5656: PUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 477
5666: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5667: LD_ADDR_VAR 0 10
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 478
5681: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5682: LD_VAR 0 9
5686: NOT
5687: PUSH
5688: LD_VAR 0 11
5692: NOT
5693: OR
5694: PUSH
5695: LD_VAR 0 12
5699: NOT
5700: OR
5701: PUSH
5702: LD_VAR 0 10
5706: NOT
5707: OR
5708: IFFALSE 5743
// begin result := [ chassis , engine , control , weapon ] ;
5710: LD_ADDR_VAR 0 6
5714: PUSH
5715: LD_VAR 0 2
5719: PUSH
5720: LD_VAR 0 3
5724: PUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_VAR 0 5
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: ST_TO_ADDR
// exit ;
5741: GO 6034
// end ; if not chassis in _chassis then
5743: LD_VAR 0 2
5747: PUSH
5748: LD_VAR 0 9
5752: IN
5753: NOT
5754: IFFALSE 5780
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5756: LD_ADDR_VAR 0 2
5760: PUSH
5761: LD_VAR 0 9
5765: PUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_VAR 0 9
5773: PPUSH
5774: CALL_OW 12
5778: ARRAY
5779: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 3
5789: PPUSH
5790: CALL 6039 0 2
5794: NOT
5795: IFFALSE 5854
// repeat engine := _engine [ 1 ] ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_VAR 0 11
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5811: LD_ADDR_VAR 0 11
5815: PUSH
5816: LD_VAR 0 11
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 3
5828: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5829: LD_VAR 0 2
5833: PPUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: CALL 6039 0 2
5843: PUSH
5844: LD_VAR 0 11
5848: PUSH
5849: EMPTY
5850: EQUAL
5851: OR
5852: IFFALSE 5797
// if not control in _control then
5854: LD_VAR 0 4
5858: PUSH
5859: LD_VAR 0 12
5863: IN
5864: NOT
5865: IFFALSE 5891
// control := _control [ rand ( 1 , _control ) ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_VAR 0 12
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 12
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5891: LD_VAR 0 2
5895: PPUSH
5896: LD_VAR 0 5
5900: PPUSH
5901: CALL 6259 0 2
5905: NOT
5906: IFFALSE 5965
// repeat weapon := _weapon [ 1 ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_VAR 0 10
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5922: LD_ADDR_VAR 0 10
5926: PUSH
5927: LD_VAR 0 10
5931: PPUSH
5932: LD_INT 1
5934: PPUSH
5935: CALL_OW 3
5939: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5940: LD_VAR 0 2
5944: PPUSH
5945: LD_VAR 0 5
5949: PPUSH
5950: CALL 6259 0 2
5954: PUSH
5955: LD_VAR 0 10
5959: PUSH
5960: EMPTY
5961: EQUAL
5962: OR
5963: IFFALSE 5908
// result := [ ] ;
5965: LD_ADDR_VAR 0 6
5969: PUSH
5970: EMPTY
5971: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5972: LD_VAR 0 1
5976: PPUSH
5977: LD_VAR 0 2
5981: PPUSH
5982: LD_VAR 0 3
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 448
6001: IFFALSE 6034
// result := [ chassis , engine , control , weapon ] ;
6003: LD_ADDR_VAR 0 6
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: LD_VAR 0 3
6017: PUSH
6018: LD_VAR 0 4
6022: PUSH
6023: LD_VAR 0 5
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: ST_TO_ADDR
// end ;
6034: LD_VAR 0 6
6038: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6039: LD_INT 0
6041: PPUSH
// if not chassis or not engine then
6042: LD_VAR 0 1
6046: NOT
6047: PUSH
6048: LD_VAR 0 2
6052: NOT
6053: OR
6054: IFFALSE 6058
// exit ;
6056: GO 6254
// case engine of engine_solar :
6058: LD_VAR 0 2
6062: PUSH
6063: LD_INT 2
6065: DOUBLE
6066: EQUAL
6067: IFTRUE 6071
6069: GO 6109
6071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6072: LD_ADDR_VAR 0 3
6076: PUSH
6077: LD_INT 11
6079: PUSH
6080: LD_INT 12
6082: PUSH
6083: LD_INT 13
6085: PUSH
6086: LD_INT 14
6088: PUSH
6089: LD_INT 1
6091: PUSH
6092: LD_INT 2
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: ST_TO_ADDR
6107: GO 6238
6109: LD_INT 1
6111: DOUBLE
6112: EQUAL
6113: IFTRUE 6117
6115: GO 6179
6117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_INT 11
6125: PUSH
6126: LD_INT 12
6128: PUSH
6129: LD_INT 13
6131: PUSH
6132: LD_INT 14
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: LD_INT 4
6146: PUSH
6147: LD_INT 5
6149: PUSH
6150: LD_INT 21
6152: PUSH
6153: LD_INT 23
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 24
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
6177: GO 6238
6179: LD_INT 3
6181: DOUBLE
6182: EQUAL
6183: IFTRUE 6187
6185: GO 6237
6187: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 13
6195: PUSH
6196: LD_INT 14
6198: PUSH
6199: LD_INT 2
6201: PUSH
6202: LD_INT 3
6204: PUSH
6205: LD_INT 4
6207: PUSH
6208: LD_INT 5
6210: PUSH
6211: LD_INT 21
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 23
6219: PUSH
6220: LD_INT 24
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: ST_TO_ADDR
6235: GO 6238
6237: POP
// result := ( chassis in result ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: LD_VAR 0 3
6252: IN
6253: ST_TO_ADDR
// end ;
6254: LD_VAR 0 3
6258: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6259: LD_INT 0
6261: PPUSH
// if not chassis or not weapon then
6262: LD_VAR 0 1
6266: NOT
6267: PUSH
6268: LD_VAR 0 2
6272: NOT
6273: OR
6274: IFFALSE 6278
// exit ;
6276: GO 7338
// case weapon of us_machine_gun :
6278: LD_VAR 0 2
6282: PUSH
6283: LD_INT 2
6285: DOUBLE
6286: EQUAL
6287: IFTRUE 6291
6289: GO 6321
6291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6292: LD_ADDR_VAR 0 3
6296: PUSH
6297: LD_INT 1
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: LD_INT 3
6305: PUSH
6306: LD_INT 4
6308: PUSH
6309: LD_INT 5
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: ST_TO_ADDR
6319: GO 7322
6321: LD_INT 3
6323: DOUBLE
6324: EQUAL
6325: IFTRUE 6329
6327: GO 6359
6329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6330: LD_ADDR_VAR 0 3
6334: PUSH
6335: LD_INT 1
6337: PUSH
6338: LD_INT 2
6340: PUSH
6341: LD_INT 3
6343: PUSH
6344: LD_INT 4
6346: PUSH
6347: LD_INT 5
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
6357: GO 7322
6359: LD_INT 11
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6397
6367: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6368: LD_ADDR_VAR 0 3
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: LD_INT 2
6378: PUSH
6379: LD_INT 3
6381: PUSH
6382: LD_INT 4
6384: PUSH
6385: LD_INT 5
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: ST_TO_ADDR
6395: GO 7322
6397: LD_INT 4
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6431
6405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6406: LD_ADDR_VAR 0 3
6410: PUSH
6411: LD_INT 2
6413: PUSH
6414: LD_INT 3
6416: PUSH
6417: LD_INT 4
6419: PUSH
6420: LD_INT 5
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: ST_TO_ADDR
6429: GO 7322
6431: LD_INT 5
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6465
6439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6440: LD_ADDR_VAR 0 3
6444: PUSH
6445: LD_INT 2
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: LD_INT 4
6453: PUSH
6454: LD_INT 5
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: ST_TO_ADDR
6463: GO 7322
6465: LD_INT 9
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6499
6473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 3
6484: PUSH
6485: LD_INT 4
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: ST_TO_ADDR
6497: GO 7322
6499: LD_INT 7
6501: DOUBLE
6502: EQUAL
6503: IFTRUE 6507
6505: GO 6533
6507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6508: LD_ADDR_VAR 0 3
6512: PUSH
6513: LD_INT 2
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: LD_INT 4
6521: PUSH
6522: LD_INT 5
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: ST_TO_ADDR
6531: GO 7322
6533: LD_INT 12
6535: DOUBLE
6536: EQUAL
6537: IFTRUE 6541
6539: GO 6567
6541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6542: LD_ADDR_VAR 0 3
6546: PUSH
6547: LD_INT 2
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: ST_TO_ADDR
6565: GO 7322
6567: LD_INT 13
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6601
6575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6576: LD_ADDR_VAR 0 3
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: LD_INT 3
6586: PUSH
6587: LD_INT 4
6589: PUSH
6590: LD_INT 5
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: ST_TO_ADDR
6599: GO 7322
6601: LD_INT 14
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6627
6609: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6610: LD_ADDR_VAR 0 3
6614: PUSH
6615: LD_INT 4
6617: PUSH
6618: LD_INT 5
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: ST_TO_ADDR
6625: GO 7322
6627: LD_INT 6
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6653
6635: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_INT 4
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: ST_TO_ADDR
6651: GO 7322
6653: LD_INT 10
6655: DOUBLE
6656: EQUAL
6657: IFTRUE 6661
6659: GO 6679
6661: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: ST_TO_ADDR
6677: GO 7322
6679: LD_INT 22
6681: DOUBLE
6682: EQUAL
6683: IFTRUE 6687
6685: GO 6713
6687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_INT 11
6695: PUSH
6696: LD_INT 12
6698: PUSH
6699: LD_INT 13
6701: PUSH
6702: LD_INT 14
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: ST_TO_ADDR
6711: GO 7322
6713: LD_INT 23
6715: DOUBLE
6716: EQUAL
6717: IFTRUE 6721
6719: GO 6747
6721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_INT 11
6729: PUSH
6730: LD_INT 12
6732: PUSH
6733: LD_INT 13
6735: PUSH
6736: LD_INT 14
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: ST_TO_ADDR
6745: GO 7322
6747: LD_INT 24
6749: DOUBLE
6750: EQUAL
6751: IFTRUE 6755
6753: GO 6781
6755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6756: LD_ADDR_VAR 0 3
6760: PUSH
6761: LD_INT 11
6763: PUSH
6764: LD_INT 12
6766: PUSH
6767: LD_INT 13
6769: PUSH
6770: LD_INT 14
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: ST_TO_ADDR
6779: GO 7322
6781: LD_INT 30
6783: DOUBLE
6784: EQUAL
6785: IFTRUE 6789
6787: GO 6815
6789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_INT 11
6797: PUSH
6798: LD_INT 12
6800: PUSH
6801: LD_INT 13
6803: PUSH
6804: LD_INT 14
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: ST_TO_ADDR
6813: GO 7322
6815: LD_INT 25
6817: DOUBLE
6818: EQUAL
6819: IFTRUE 6823
6821: GO 6841
6823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_INT 13
6831: PUSH
6832: LD_INT 14
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: ST_TO_ADDR
6839: GO 7322
6841: LD_INT 27
6843: DOUBLE
6844: EQUAL
6845: IFTRUE 6849
6847: GO 6867
6849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6850: LD_ADDR_VAR 0 3
6854: PUSH
6855: LD_INT 13
6857: PUSH
6858: LD_INT 14
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: ST_TO_ADDR
6865: GO 7322
6867: LD_INT 92
6869: DOUBLE
6870: EQUAL
6871: IFTRUE 6875
6873: GO 6901
6875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6876: LD_ADDR_VAR 0 3
6880: PUSH
6881: LD_INT 11
6883: PUSH
6884: LD_INT 12
6886: PUSH
6887: LD_INT 13
6889: PUSH
6890: LD_INT 14
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 7322
6901: LD_INT 28
6903: DOUBLE
6904: EQUAL
6905: IFTRUE 6909
6907: GO 6927
6909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6910: LD_ADDR_VAR 0 3
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: ST_TO_ADDR
6925: GO 7322
6927: LD_INT 29
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 6953
6935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_INT 13
6943: PUSH
6944: LD_INT 14
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: ST_TO_ADDR
6951: GO 7322
6953: LD_INT 31
6955: DOUBLE
6956: EQUAL
6957: IFTRUE 6961
6959: GO 6979
6961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6962: LD_ADDR_VAR 0 3
6966: PUSH
6967: LD_INT 13
6969: PUSH
6970: LD_INT 14
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 7322
6979: LD_INT 26
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 7005
6987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6988: LD_ADDR_VAR 0 3
6992: PUSH
6993: LD_INT 13
6995: PUSH
6996: LD_INT 14
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: ST_TO_ADDR
7003: GO 7322
7005: LD_INT 42
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7013
7011: GO 7039
7013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_INT 21
7021: PUSH
7022: LD_INT 22
7024: PUSH
7025: LD_INT 23
7027: PUSH
7028: LD_INT 24
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: ST_TO_ADDR
7037: GO 7322
7039: LD_INT 43
7041: DOUBLE
7042: EQUAL
7043: IFTRUE 7047
7045: GO 7073
7047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7048: LD_ADDR_VAR 0 3
7052: PUSH
7053: LD_INT 21
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 23
7061: PUSH
7062: LD_INT 24
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: ST_TO_ADDR
7071: GO 7322
7073: LD_INT 44
7075: DOUBLE
7076: EQUAL
7077: IFTRUE 7081
7079: GO 7107
7081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: LD_INT 21
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 23
7095: PUSH
7096: LD_INT 24
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: ST_TO_ADDR
7105: GO 7322
7107: LD_INT 45
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7141
7115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7116: LD_ADDR_VAR 0 3
7120: PUSH
7121: LD_INT 21
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_INT 23
7129: PUSH
7130: LD_INT 24
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 7322
7141: LD_INT 49
7143: DOUBLE
7144: EQUAL
7145: IFTRUE 7149
7147: GO 7175
7149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7150: LD_ADDR_VAR 0 3
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_INT 23
7163: PUSH
7164: LD_INT 24
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: ST_TO_ADDR
7173: GO 7322
7175: LD_INT 51
7177: DOUBLE
7178: EQUAL
7179: IFTRUE 7183
7181: GO 7209
7183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7184: LD_ADDR_VAR 0 3
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 22
7194: PUSH
7195: LD_INT 23
7197: PUSH
7198: LD_INT 24
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: ST_TO_ADDR
7207: GO 7322
7209: LD_INT 52
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7217
7215: GO 7243
7217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 21
7225: PUSH
7226: LD_INT 22
7228: PUSH
7229: LD_INT 23
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: ST_TO_ADDR
7241: GO 7322
7243: LD_INT 53
7245: DOUBLE
7246: EQUAL
7247: IFTRUE 7251
7249: GO 7269
7251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7252: LD_ADDR_VAR 0 3
7256: PUSH
7257: LD_INT 23
7259: PUSH
7260: LD_INT 24
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: ST_TO_ADDR
7267: GO 7322
7269: LD_INT 46
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7295
7277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 23
7285: PUSH
7286: LD_INT 24
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7322
7295: LD_INT 47
7297: DOUBLE
7298: EQUAL
7299: IFTRUE 7303
7301: GO 7321
7303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: ST_TO_ADDR
7319: GO 7322
7321: POP
// result := ( chassis in result ) ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PUSH
7332: LD_VAR 0 3
7336: IN
7337: ST_TO_ADDR
// end ;
7338: LD_VAR 0 3
7342: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// result := array ;
7352: LD_ADDR_VAR 0 5
7356: PUSH
7357: LD_VAR 0 1
7361: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7362: LD_VAR 0 1
7366: NOT
7367: PUSH
7368: LD_VAR 0 2
7372: NOT
7373: OR
7374: PUSH
7375: LD_VAR 0 3
7379: NOT
7380: OR
7381: PUSH
7382: LD_VAR 0 2
7386: PUSH
7387: LD_VAR 0 1
7391: GREATER
7392: OR
7393: PUSH
7394: LD_VAR 0 3
7398: PUSH
7399: LD_VAR 0 1
7403: GREATER
7404: OR
7405: IFFALSE 7409
// exit ;
7407: GO 7705
// if direction then
7409: LD_VAR 0 4
7413: IFFALSE 7477
// begin d := 1 ;
7415: LD_ADDR_VAR 0 9
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if i_from > i_to then
7423: LD_VAR 0 2
7427: PUSH
7428: LD_VAR 0 3
7432: GREATER
7433: IFFALSE 7459
// length := ( array - i_from ) + i_to else
7435: LD_ADDR_VAR 0 11
7439: PUSH
7440: LD_VAR 0 1
7444: PUSH
7445: LD_VAR 0 2
7449: MINUS
7450: PUSH
7451: LD_VAR 0 3
7455: PLUS
7456: ST_TO_ADDR
7457: GO 7475
// length := i_to - i_from ;
7459: LD_ADDR_VAR 0 11
7463: PUSH
7464: LD_VAR 0 3
7468: PUSH
7469: LD_VAR 0 2
7473: MINUS
7474: ST_TO_ADDR
// end else
7475: GO 7538
// begin d := - 1 ;
7477: LD_ADDR_VAR 0 9
7481: PUSH
7482: LD_INT 1
7484: NEG
7485: ST_TO_ADDR
// if i_from > i_to then
7486: LD_VAR 0 2
7490: PUSH
7491: LD_VAR 0 3
7495: GREATER
7496: IFFALSE 7516
// length := i_from - i_to else
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 3
7512: MINUS
7513: ST_TO_ADDR
7514: GO 7538
// length := ( array - i_to ) + i_from ;
7516: LD_ADDR_VAR 0 11
7520: PUSH
7521: LD_VAR 0 1
7525: PUSH
7526: LD_VAR 0 3
7530: MINUS
7531: PUSH
7532: LD_VAR 0 2
7536: PLUS
7537: ST_TO_ADDR
// end ; if not length then
7538: LD_VAR 0 11
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7705
// tmp := array ;
7547: LD_ADDR_VAR 0 10
7551: PUSH
7552: LD_VAR 0 1
7556: ST_TO_ADDR
// for i = 1 to length do
7557: LD_ADDR_VAR 0 6
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_VAR 0 11
7571: PUSH
7572: FOR_TO
7573: IFFALSE 7693
// begin for j = 1 to array do
7575: LD_ADDR_VAR 0 7
7579: PUSH
7580: DOUBLE
7581: LD_INT 1
7583: DEC
7584: ST_TO_ADDR
7585: LD_VAR 0 1
7589: PUSH
7590: FOR_TO
7591: IFFALSE 7679
// begin k := j + d ;
7593: LD_ADDR_VAR 0 8
7597: PUSH
7598: LD_VAR 0 7
7602: PUSH
7603: LD_VAR 0 9
7607: PLUS
7608: ST_TO_ADDR
// if k > array then
7609: LD_VAR 0 8
7613: PUSH
7614: LD_VAR 0 1
7618: GREATER
7619: IFFALSE 7629
// k := 1 ;
7621: LD_ADDR_VAR 0 8
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if not k then
7629: LD_VAR 0 8
7633: NOT
7634: IFFALSE 7646
// k := array ;
7636: LD_ADDR_VAR 0 8
7640: PUSH
7641: LD_VAR 0 1
7645: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7646: LD_ADDR_VAR 0 10
7650: PUSH
7651: LD_VAR 0 10
7655: PPUSH
7656: LD_VAR 0 8
7660: PPUSH
7661: LD_VAR 0 1
7665: PUSH
7666: LD_VAR 0 7
7670: ARRAY
7671: PPUSH
7672: CALL_OW 1
7676: ST_TO_ADDR
// end ;
7677: GO 7590
7679: POP
7680: POP
// array := tmp ;
7681: LD_ADDR_VAR 0 1
7685: PUSH
7686: LD_VAR 0 10
7690: ST_TO_ADDR
// end ;
7691: GO 7572
7693: POP
7694: POP
// result := array ;
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 1
7704: ST_TO_ADDR
// end ;
7705: LD_VAR 0 5
7709: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7710: LD_INT 0
7712: PPUSH
7713: PPUSH
// result := 0 ;
7714: LD_ADDR_VAR 0 3
7718: PUSH
7719: LD_INT 0
7721: ST_TO_ADDR
// if not array or not value in array then
7722: LD_VAR 0 1
7726: NOT
7727: PUSH
7728: LD_VAR 0 2
7732: PUSH
7733: LD_VAR 0 1
7737: IN
7738: NOT
7739: OR
7740: IFFALSE 7744
// exit ;
7742: GO 7798
// for i = 1 to array do
7744: LD_ADDR_VAR 0 4
7748: PUSH
7749: DOUBLE
7750: LD_INT 1
7752: DEC
7753: ST_TO_ADDR
7754: LD_VAR 0 1
7758: PUSH
7759: FOR_TO
7760: IFFALSE 7796
// if value = array [ i ] then
7762: LD_VAR 0 2
7766: PUSH
7767: LD_VAR 0 1
7771: PUSH
7772: LD_VAR 0 4
7776: ARRAY
7777: EQUAL
7778: IFFALSE 7794
// begin result := i ;
7780: LD_ADDR_VAR 0 3
7784: PUSH
7785: LD_VAR 0 4
7789: ST_TO_ADDR
// exit ;
7790: POP
7791: POP
7792: GO 7798
// end ;
7794: GO 7759
7796: POP
7797: POP
// end ;
7798: LD_VAR 0 3
7802: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7803: LD_INT 0
7805: PPUSH
// vc_chassis := chassis ;
7806: LD_ADDR_OWVAR 37
7810: PUSH
7811: LD_VAR 0 1
7815: ST_TO_ADDR
// vc_engine := engine ;
7816: LD_ADDR_OWVAR 39
7820: PUSH
7821: LD_VAR 0 2
7825: ST_TO_ADDR
// vc_control := control ;
7826: LD_ADDR_OWVAR 38
7830: PUSH
7831: LD_VAR 0 3
7835: ST_TO_ADDR
// vc_weapon := weapon ;
7836: LD_ADDR_OWVAR 40
7840: PUSH
7841: LD_VAR 0 4
7845: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7846: LD_ADDR_OWVAR 41
7850: PUSH
7851: LD_VAR 0 5
7855: ST_TO_ADDR
// end ;
7856: LD_VAR 0 6
7860: RET
// export function WantPlant ( unit ) ; var task ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
// result := false ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7873: LD_ADDR_VAR 0 3
7877: PUSH
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 437
7887: ST_TO_ADDR
// if task then
7888: LD_VAR 0 3
7892: IFFALSE 7920
// if task [ 1 ] [ 1 ] = p then
7894: LD_VAR 0 3
7898: PUSH
7899: LD_INT 1
7901: ARRAY
7902: PUSH
7903: LD_INT 1
7905: ARRAY
7906: PUSH
7907: LD_STRING p
7909: EQUAL
7910: IFFALSE 7920
// result := true ;
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// end ;
7920: LD_VAR 0 2
7924: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7925: LD_INT 0
7927: PPUSH
7928: PPUSH
7929: PPUSH
7930: PPUSH
// if pos < 1 then
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: LESS
7939: IFFALSE 7943
// exit ;
7941: GO 8246
// if pos = 1 then
7943: LD_VAR 0 2
7947: PUSH
7948: LD_INT 1
7950: EQUAL
7951: IFFALSE 7984
// result := Replace ( arr , pos [ 1 ] , value ) else
7953: LD_ADDR_VAR 0 4
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: PPUSH
7972: LD_VAR 0 3
7976: PPUSH
7977: CALL_OW 1
7981: ST_TO_ADDR
7982: GO 8246
// begin tmp := arr ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_VAR 0 1
7993: ST_TO_ADDR
// s_arr := [ tmp ] ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 6
8003: PUSH
8004: EMPTY
8005: LIST
8006: ST_TO_ADDR
// for i = 1 to pos - 1 do
8007: LD_ADDR_VAR 0 5
8011: PUSH
8012: DOUBLE
8013: LD_INT 1
8015: DEC
8016: ST_TO_ADDR
8017: LD_VAR 0 2
8021: PUSH
8022: LD_INT 1
8024: MINUS
8025: PUSH
8026: FOR_TO
8027: IFFALSE 8072
// begin tmp := tmp [ pos [ i ] ] ;
8029: LD_ADDR_VAR 0 6
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 2
8043: PUSH
8044: LD_VAR 0 5
8048: ARRAY
8049: ARRAY
8050: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_VAR 0 7
8060: PUSH
8061: LD_VAR 0 6
8065: PUSH
8066: EMPTY
8067: LIST
8068: ADD
8069: ST_TO_ADDR
// end ;
8070: GO 8026
8072: POP
8073: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8074: LD_ADDR_VAR 0 6
8078: PUSH
8079: LD_VAR 0 6
8083: PPUSH
8084: LD_VAR 0 2
8088: PUSH
8089: LD_VAR 0 2
8093: ARRAY
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: CALL_OW 1
8104: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8105: LD_ADDR_VAR 0 7
8109: PUSH
8110: LD_VAR 0 7
8114: PPUSH
8115: LD_VAR 0 7
8119: PPUSH
8120: LD_VAR 0 6
8124: PPUSH
8125: CALL_OW 1
8129: ST_TO_ADDR
// for i = s_arr downto 2 do
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: DOUBLE
8136: LD_VAR 0 7
8140: INC
8141: ST_TO_ADDR
8142: LD_INT 2
8144: PUSH
8145: FOR_DOWNTO
8146: IFFALSE 8230
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8148: LD_ADDR_VAR 0 6
8152: PUSH
8153: LD_VAR 0 7
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: LD_INT 1
8165: MINUS
8166: ARRAY
8167: PPUSH
8168: LD_VAR 0 2
8172: PUSH
8173: LD_VAR 0 5
8177: PUSH
8178: LD_INT 1
8180: MINUS
8181: ARRAY
8182: PPUSH
8183: LD_VAR 0 7
8187: PUSH
8188: LD_VAR 0 5
8192: ARRAY
8193: PPUSH
8194: CALL_OW 1
8198: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8199: LD_ADDR_VAR 0 7
8203: PUSH
8204: LD_VAR 0 7
8208: PPUSH
8209: LD_VAR 0 5
8213: PUSH
8214: LD_INT 1
8216: MINUS
8217: PPUSH
8218: LD_VAR 0 6
8222: PPUSH
8223: CALL_OW 1
8227: ST_TO_ADDR
// end ;
8228: GO 8145
8230: POP
8231: POP
// result := s_arr [ 1 ] ;
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_VAR 0 7
8241: PUSH
8242: LD_INT 1
8244: ARRAY
8245: ST_TO_ADDR
// end ; end ;
8246: LD_VAR 0 4
8250: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8251: LD_INT 0
8253: PPUSH
8254: PPUSH
// if not list then
8255: LD_VAR 0 1
8259: NOT
8260: IFFALSE 8264
// exit ;
8262: GO 8355
// i := list [ pos1 ] ;
8264: LD_ADDR_VAR 0 5
8268: PUSH
8269: LD_VAR 0 1
8273: PUSH
8274: LD_VAR 0 2
8278: ARRAY
8279: ST_TO_ADDR
// if not i then
8280: LD_VAR 0 5
8284: NOT
8285: IFFALSE 8289
// exit ;
8287: GO 8355
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8289: LD_ADDR_VAR 0 1
8293: PUSH
8294: LD_VAR 0 1
8298: PPUSH
8299: LD_VAR 0 2
8303: PPUSH
8304: LD_VAR 0 1
8308: PUSH
8309: LD_VAR 0 3
8313: ARRAY
8314: PPUSH
8315: CALL_OW 1
8319: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 3
8334: PPUSH
8335: LD_VAR 0 5
8339: PPUSH
8340: CALL_OW 1
8344: ST_TO_ADDR
// result := list ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_VAR 0 1
8354: ST_TO_ADDR
// end ;
8355: LD_VAR 0 4
8359: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8360: LD_INT 0
8362: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8363: LD_ADDR_VAR 0 5
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 250
8377: PPUSH
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 251
8387: PPUSH
8388: LD_VAR 0 2
8392: PPUSH
8393: LD_VAR 0 3
8397: PPUSH
8398: LD_VAR 0 4
8402: PPUSH
8403: CALL 8781 0 5
8407: ST_TO_ADDR
// end ;
8408: LD_VAR 0 5
8412: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8413: LD_INT 0
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
// if not list or not unit then
8419: LD_VAR 0 2
8423: NOT
8424: PUSH
8425: LD_VAR 0 1
8429: NOT
8430: OR
8431: IFFALSE 8435
// exit ;
8433: GO 8776
// result := [ ] ;
8435: LD_ADDR_VAR 0 5
8439: PUSH
8440: EMPTY
8441: ST_TO_ADDR
// for i in list do
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_VAR 0 2
8451: PUSH
8452: FOR_IN
8453: IFFALSE 8671
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8455: LD_ADDR_VAR 0 8
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 6
8469: PUSH
8470: LD_INT 1
8472: ARRAY
8473: PPUSH
8474: LD_VAR 0 6
8478: PUSH
8479: LD_INT 2
8481: ARRAY
8482: PPUSH
8483: CALL_OW 297
8487: ST_TO_ADDR
// if not Count ( result ) then
8488: LD_VAR 0 5
8492: PPUSH
8493: CALL 5065 0 1
8497: NOT
8498: IFFALSE 8531
// begin result := Join ( result , [ i , tmp ] ) ;
8500: LD_ADDR_VAR 0 5
8504: PUSH
8505: LD_VAR 0 5
8509: PPUSH
8510: LD_VAR 0 6
8514: PUSH
8515: LD_VAR 0 8
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL 40674 0 2
8528: ST_TO_ADDR
// continue ;
8529: GO 8452
// end ; if result [ result ] [ 2 ] <= tmp then
8531: LD_VAR 0 5
8535: PUSH
8536: LD_VAR 0 5
8540: ARRAY
8541: PUSH
8542: LD_INT 2
8544: ARRAY
8545: PUSH
8546: LD_VAR 0 8
8550: LESSEQUAL
8551: IFFALSE 8584
// result := Join ( result , [ i , tmp ] ) else
8553: LD_ADDR_VAR 0 5
8557: PUSH
8558: LD_VAR 0 5
8562: PPUSH
8563: LD_VAR 0 6
8567: PUSH
8568: LD_VAR 0 8
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PPUSH
8577: CALL 40674 0 2
8581: ST_TO_ADDR
8582: GO 8669
// begin for j := 1 to Count ( result ) do
8584: LD_ADDR_VAR 0 7
8588: PUSH
8589: DOUBLE
8590: LD_INT 1
8592: DEC
8593: ST_TO_ADDR
8594: LD_VAR 0 5
8598: PPUSH
8599: CALL 5065 0 1
8603: PUSH
8604: FOR_TO
8605: IFFALSE 8667
// begin if tmp < result [ j ] [ 2 ] then
8607: LD_VAR 0 8
8611: PUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_VAR 0 7
8621: ARRAY
8622: PUSH
8623: LD_INT 2
8625: ARRAY
8626: LESS
8627: IFFALSE 8665
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8629: LD_ADDR_VAR 0 5
8633: PUSH
8634: LD_VAR 0 5
8638: PPUSH
8639: LD_VAR 0 7
8643: PPUSH
8644: LD_VAR 0 6
8648: PUSH
8649: LD_VAR 0 8
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PPUSH
8658: CALL_OW 2
8662: ST_TO_ADDR
// break ;
8663: GO 8667
// end ; end ;
8665: GO 8604
8667: POP
8668: POP
// end ; end ;
8669: GO 8452
8671: POP
8672: POP
// if result and not asc then
8673: LD_VAR 0 5
8677: PUSH
8678: LD_VAR 0 3
8682: NOT
8683: AND
8684: IFFALSE 8701
// result := ReverseArray ( result ) ;
8686: LD_ADDR_VAR 0 5
8690: PUSH
8691: LD_VAR 0 5
8695: PPUSH
8696: CALL 35941 0 1
8700: ST_TO_ADDR
// tmp := [ ] ;
8701: LD_ADDR_VAR 0 8
8705: PUSH
8706: EMPTY
8707: ST_TO_ADDR
// if mode then
8708: LD_VAR 0 4
8712: IFFALSE 8776
// begin for i := 1 to result do
8714: LD_ADDR_VAR 0 6
8718: PUSH
8719: DOUBLE
8720: LD_INT 1
8722: DEC
8723: ST_TO_ADDR
8724: LD_VAR 0 5
8728: PUSH
8729: FOR_TO
8730: IFFALSE 8764
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8732: LD_ADDR_VAR 0 8
8736: PUSH
8737: LD_VAR 0 8
8741: PPUSH
8742: LD_VAR 0 5
8746: PUSH
8747: LD_VAR 0 6
8751: ARRAY
8752: PUSH
8753: LD_INT 1
8755: ARRAY
8756: PPUSH
8757: CALL 40674 0 2
8761: ST_TO_ADDR
8762: GO 8729
8764: POP
8765: POP
// result := tmp ;
8766: LD_ADDR_VAR 0 5
8770: PUSH
8771: LD_VAR 0 8
8775: ST_TO_ADDR
// end ; end ;
8776: LD_VAR 0 5
8780: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8781: LD_INT 0
8783: PPUSH
8784: PPUSH
8785: PPUSH
8786: PPUSH
// if not list then
8787: LD_VAR 0 3
8791: NOT
8792: IFFALSE 8796
// exit ;
8794: GO 9184
// result := [ ] ;
8796: LD_ADDR_VAR 0 6
8800: PUSH
8801: EMPTY
8802: ST_TO_ADDR
// for i in list do
8803: LD_ADDR_VAR 0 7
8807: PUSH
8808: LD_VAR 0 3
8812: PUSH
8813: FOR_IN
8814: IFFALSE 9016
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8816: LD_ADDR_VAR 0 9
8820: PUSH
8821: LD_VAR 0 7
8825: PPUSH
8826: LD_VAR 0 1
8830: PPUSH
8831: LD_VAR 0 2
8835: PPUSH
8836: CALL_OW 297
8840: ST_TO_ADDR
// if not result then
8841: LD_VAR 0 6
8845: NOT
8846: IFFALSE 8872
// result := [ [ i , tmp ] ] else
8848: LD_ADDR_VAR 0 6
8852: PUSH
8853: LD_VAR 0 7
8857: PUSH
8858: LD_VAR 0 9
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: ST_TO_ADDR
8870: GO 9014
// begin if result [ result ] [ 2 ] <= tmp then
8872: LD_VAR 0 6
8876: PUSH
8877: LD_VAR 0 6
8881: ARRAY
8882: PUSH
8883: LD_INT 2
8885: ARRAY
8886: PUSH
8887: LD_VAR 0 9
8891: LESSEQUAL
8892: IFFALSE 8934
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8894: LD_ADDR_VAR 0 6
8898: PUSH
8899: LD_VAR 0 6
8903: PPUSH
8904: LD_VAR 0 6
8908: PUSH
8909: LD_INT 1
8911: PLUS
8912: PPUSH
8913: LD_VAR 0 7
8917: PUSH
8918: LD_VAR 0 9
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 2
8931: ST_TO_ADDR
8932: GO 9014
// for j := 1 to result do
8934: LD_ADDR_VAR 0 8
8938: PUSH
8939: DOUBLE
8940: LD_INT 1
8942: DEC
8943: ST_TO_ADDR
8944: LD_VAR 0 6
8948: PUSH
8949: FOR_TO
8950: IFFALSE 9012
// begin if tmp < result [ j ] [ 2 ] then
8952: LD_VAR 0 9
8956: PUSH
8957: LD_VAR 0 6
8961: PUSH
8962: LD_VAR 0 8
8966: ARRAY
8967: PUSH
8968: LD_INT 2
8970: ARRAY
8971: LESS
8972: IFFALSE 9010
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8974: LD_ADDR_VAR 0 6
8978: PUSH
8979: LD_VAR 0 6
8983: PPUSH
8984: LD_VAR 0 8
8988: PPUSH
8989: LD_VAR 0 7
8993: PUSH
8994: LD_VAR 0 9
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 2
9007: ST_TO_ADDR
// break ;
9008: GO 9012
// end ; end ;
9010: GO 8949
9012: POP
9013: POP
// end ; end ;
9014: GO 8813
9016: POP
9017: POP
// if result and not asc then
9018: LD_VAR 0 6
9022: PUSH
9023: LD_VAR 0 4
9027: NOT
9028: AND
9029: IFFALSE 9104
// begin tmp := result ;
9031: LD_ADDR_VAR 0 9
9035: PUSH
9036: LD_VAR 0 6
9040: ST_TO_ADDR
// for i = tmp downto 1 do
9041: LD_ADDR_VAR 0 7
9045: PUSH
9046: DOUBLE
9047: LD_VAR 0 9
9051: INC
9052: ST_TO_ADDR
9053: LD_INT 1
9055: PUSH
9056: FOR_DOWNTO
9057: IFFALSE 9102
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9059: LD_ADDR_VAR 0 6
9063: PUSH
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_VAR 0 9
9073: PUSH
9074: LD_VAR 0 7
9078: MINUS
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: PPUSH
9084: LD_VAR 0 9
9088: PUSH
9089: LD_VAR 0 7
9093: ARRAY
9094: PPUSH
9095: CALL_OW 1
9099: ST_TO_ADDR
9100: GO 9056
9102: POP
9103: POP
// end ; tmp := [ ] ;
9104: LD_ADDR_VAR 0 9
9108: PUSH
9109: EMPTY
9110: ST_TO_ADDR
// if mode then
9111: LD_VAR 0 5
9115: IFFALSE 9184
// begin for i = 1 to result do
9117: LD_ADDR_VAR 0 7
9121: PUSH
9122: DOUBLE
9123: LD_INT 1
9125: DEC
9126: ST_TO_ADDR
9127: LD_VAR 0 6
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9172
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9135: LD_ADDR_VAR 0 9
9139: PUSH
9140: LD_VAR 0 9
9144: PPUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: LD_VAR 0 6
9154: PUSH
9155: LD_VAR 0 7
9159: ARRAY
9160: PUSH
9161: LD_INT 1
9163: ARRAY
9164: PPUSH
9165: CALL_OW 1
9169: ST_TO_ADDR
9170: GO 9132
9172: POP
9173: POP
// result := tmp ;
9174: LD_ADDR_VAR 0 6
9178: PUSH
9179: LD_VAR 0 9
9183: ST_TO_ADDR
// end ; end ;
9184: LD_VAR 0 6
9188: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9189: LD_INT 0
9191: PPUSH
9192: PPUSH
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9197: LD_ADDR_VAR 0 5
9201: PUSH
9202: LD_INT 0
9204: PUSH
9205: LD_INT 0
9207: PUSH
9208: LD_INT 0
9210: PUSH
9211: EMPTY
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: ST_TO_ADDR
// if not x or not y then
9219: LD_VAR 0 2
9223: NOT
9224: PUSH
9225: LD_VAR 0 3
9229: NOT
9230: OR
9231: IFFALSE 9235
// exit ;
9233: GO 10885
// if not range then
9235: LD_VAR 0 4
9239: NOT
9240: IFFALSE 9250
// range := 10 ;
9242: LD_ADDR_VAR 0 4
9246: PUSH
9247: LD_INT 10
9249: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9250: LD_ADDR_VAR 0 8
9254: PUSH
9255: LD_INT 81
9257: PUSH
9258: LD_VAR 0 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 92
9269: PUSH
9270: LD_VAR 0 2
9274: PUSH
9275: LD_VAR 0 3
9279: PUSH
9280: LD_VAR 0 4
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 3
9293: PUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 3
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: PPUSH
9313: CALL_OW 69
9317: ST_TO_ADDR
// if not tmp then
9318: LD_VAR 0 8
9322: NOT
9323: IFFALSE 9327
// exit ;
9325: GO 10885
// for i in tmp do
9327: LD_ADDR_VAR 0 6
9331: PUSH
9332: LD_VAR 0 8
9336: PUSH
9337: FOR_IN
9338: IFFALSE 10860
// begin points := [ 0 , 0 , 0 ] ;
9340: LD_ADDR_VAR 0 9
9344: PUSH
9345: LD_INT 0
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// bpoints := 1 ;
9359: LD_ADDR_VAR 0 10
9363: PUSH
9364: LD_INT 1
9366: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9367: LD_VAR 0 6
9371: PPUSH
9372: CALL_OW 247
9376: PUSH
9377: LD_INT 1
9379: DOUBLE
9380: EQUAL
9381: IFTRUE 9385
9383: GO 9963
9385: POP
// begin if GetClass ( i ) = 1 then
9386: LD_VAR 0 6
9390: PPUSH
9391: CALL_OW 257
9395: PUSH
9396: LD_INT 1
9398: EQUAL
9399: IFFALSE 9420
// points := [ 10 , 5 , 3 ] ;
9401: LD_ADDR_VAR 0 9
9405: PUSH
9406: LD_INT 10
9408: PUSH
9409: LD_INT 5
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9420: LD_VAR 0 6
9424: PPUSH
9425: CALL_OW 257
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: LD_INT 3
9435: PUSH
9436: LD_INT 4
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: IN
9444: IFFALSE 9465
// points := [ 3 , 2 , 1 ] ;
9446: LD_ADDR_VAR 0 9
9450: PUSH
9451: LD_INT 3
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: LIST
9464: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9465: LD_VAR 0 6
9469: PPUSH
9470: CALL_OW 257
9474: PUSH
9475: LD_INT 5
9477: EQUAL
9478: IFFALSE 9499
// points := [ 130 , 5 , 2 ] ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_INT 130
9487: PUSH
9488: LD_INT 5
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9499: LD_VAR 0 6
9503: PPUSH
9504: CALL_OW 257
9508: PUSH
9509: LD_INT 8
9511: EQUAL
9512: IFFALSE 9533
// points := [ 35 , 35 , 30 ] ;
9514: LD_ADDR_VAR 0 9
9518: PUSH
9519: LD_INT 35
9521: PUSH
9522: LD_INT 35
9524: PUSH
9525: LD_INT 30
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9533: LD_VAR 0 6
9537: PPUSH
9538: CALL_OW 257
9542: PUSH
9543: LD_INT 9
9545: EQUAL
9546: IFFALSE 9567
// points := [ 20 , 55 , 40 ] ;
9548: LD_ADDR_VAR 0 9
9552: PUSH
9553: LD_INT 20
9555: PUSH
9556: LD_INT 55
9558: PUSH
9559: LD_INT 40
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9567: LD_VAR 0 6
9571: PPUSH
9572: CALL_OW 257
9576: PUSH
9577: LD_INT 12
9579: PUSH
9580: LD_INT 16
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: IN
9587: IFFALSE 9608
// points := [ 5 , 3 , 2 ] ;
9589: LD_ADDR_VAR 0 9
9593: PUSH
9594: LD_INT 5
9596: PUSH
9597: LD_INT 3
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9608: LD_VAR 0 6
9612: PPUSH
9613: CALL_OW 257
9617: PUSH
9618: LD_INT 17
9620: EQUAL
9621: IFFALSE 9642
// points := [ 100 , 50 , 75 ] ;
9623: LD_ADDR_VAR 0 9
9627: PUSH
9628: LD_INT 100
9630: PUSH
9631: LD_INT 50
9633: PUSH
9634: LD_INT 75
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9642: LD_VAR 0 6
9646: PPUSH
9647: CALL_OW 257
9651: PUSH
9652: LD_INT 15
9654: EQUAL
9655: IFFALSE 9676
// points := [ 10 , 5 , 3 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 10
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 257
9685: PUSH
9686: LD_INT 14
9688: EQUAL
9689: IFFALSE 9710
// points := [ 10 , 0 , 0 ] ;
9691: LD_ADDR_VAR 0 9
9695: PUSH
9696: LD_INT 10
9698: PUSH
9699: LD_INT 0
9701: PUSH
9702: LD_INT 0
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9710: LD_VAR 0 6
9714: PPUSH
9715: CALL_OW 257
9719: PUSH
9720: LD_INT 11
9722: EQUAL
9723: IFFALSE 9744
// points := [ 30 , 10 , 5 ] ;
9725: LD_ADDR_VAR 0 9
9729: PUSH
9730: LD_INT 30
9732: PUSH
9733: LD_INT 10
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9744: LD_VAR 0 1
9748: PPUSH
9749: LD_INT 5
9751: PPUSH
9752: CALL_OW 321
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: IFFALSE 9777
// bpoints := bpoints * 1.8 ;
9762: LD_ADDR_VAR 0 10
9766: PUSH
9767: LD_VAR 0 10
9771: PUSH
9772: LD_REAL  1.80000000000000E+0000
9775: MUL
9776: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9777: LD_VAR 0 6
9781: PPUSH
9782: CALL_OW 257
9786: PUSH
9787: LD_INT 1
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: IN
9805: PUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_INT 51
9813: PPUSH
9814: CALL_OW 321
9818: PUSH
9819: LD_INT 2
9821: EQUAL
9822: AND
9823: IFFALSE 9840
// bpoints := bpoints * 1.2 ;
9825: LD_ADDR_VAR 0 10
9829: PUSH
9830: LD_VAR 0 10
9834: PUSH
9835: LD_REAL  1.20000000000000E+0000
9838: MUL
9839: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9840: LD_VAR 0 6
9844: PPUSH
9845: CALL_OW 257
9849: PUSH
9850: LD_INT 5
9852: PUSH
9853: LD_INT 7
9855: PUSH
9856: LD_INT 9
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: IN
9864: PUSH
9865: LD_VAR 0 1
9869: PPUSH
9870: LD_INT 52
9872: PPUSH
9873: CALL_OW 321
9877: PUSH
9878: LD_INT 2
9880: EQUAL
9881: AND
9882: IFFALSE 9899
// bpoints := bpoints * 1.5 ;
9884: LD_ADDR_VAR 0 10
9888: PUSH
9889: LD_VAR 0 10
9893: PUSH
9894: LD_REAL  1.50000000000000E+0000
9897: MUL
9898: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9899: LD_VAR 0 1
9903: PPUSH
9904: LD_INT 66
9906: PPUSH
9907: CALL_OW 321
9911: PUSH
9912: LD_INT 2
9914: EQUAL
9915: IFFALSE 9932
// bpoints := bpoints * 1.1 ;
9917: LD_ADDR_VAR 0 10
9921: PUSH
9922: LD_VAR 0 10
9926: PUSH
9927: LD_REAL  1.10000000000000E+0000
9930: MUL
9931: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9932: LD_ADDR_VAR 0 10
9936: PUSH
9937: LD_VAR 0 10
9941: PUSH
9942: LD_VAR 0 6
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 259
9954: PUSH
9955: LD_REAL  1.15000000000000E+0000
9958: MUL
9959: MUL
9960: ST_TO_ADDR
// end ; unit_vehicle :
9961: GO 10789
9963: LD_INT 2
9965: DOUBLE
9966: EQUAL
9967: IFTRUE 9971
9969: GO 10777
9971: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9972: LD_VAR 0 6
9976: PPUSH
9977: CALL_OW 264
9981: PUSH
9982: LD_INT 2
9984: PUSH
9985: LD_INT 42
9987: PUSH
9988: LD_INT 24
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: IN
9996: IFFALSE 10017
// points := [ 25 , 5 , 3 ] ;
9998: LD_ADDR_VAR 0 9
10002: PUSH
10003: LD_INT 25
10005: PUSH
10006: LD_INT 5
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10017: LD_VAR 0 6
10021: PPUSH
10022: CALL_OW 264
10026: PUSH
10027: LD_INT 4
10029: PUSH
10030: LD_INT 43
10032: PUSH
10033: LD_INT 25
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: IN
10041: IFFALSE 10062
// points := [ 40 , 15 , 5 ] ;
10043: LD_ADDR_VAR 0 9
10047: PUSH
10048: LD_INT 40
10050: PUSH
10051: LD_INT 15
10053: PUSH
10054: LD_INT 5
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10062: LD_VAR 0 6
10066: PPUSH
10067: CALL_OW 264
10071: PUSH
10072: LD_INT 3
10074: PUSH
10075: LD_INT 23
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: IN
10082: IFFALSE 10103
// points := [ 7 , 25 , 8 ] ;
10084: LD_ADDR_VAR 0 9
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 25
10094: PUSH
10095: LD_INT 8
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10103: LD_VAR 0 6
10107: PPUSH
10108: CALL_OW 264
10112: PUSH
10113: LD_INT 5
10115: PUSH
10116: LD_INT 27
10118: PUSH
10119: LD_INT 44
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: IN
10127: IFFALSE 10148
// points := [ 14 , 50 , 16 ] ;
10129: LD_ADDR_VAR 0 9
10133: PUSH
10134: LD_INT 14
10136: PUSH
10137: LD_INT 50
10139: PUSH
10140: LD_INT 16
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10148: LD_VAR 0 6
10152: PPUSH
10153: CALL_OW 264
10157: PUSH
10158: LD_INT 6
10160: PUSH
10161: LD_INT 46
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: IN
10168: IFFALSE 10189
// points := [ 32 , 120 , 70 ] ;
10170: LD_ADDR_VAR 0 9
10174: PUSH
10175: LD_INT 32
10177: PUSH
10178: LD_INT 120
10180: PUSH
10181: LD_INT 70
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10189: LD_VAR 0 6
10193: PPUSH
10194: CALL_OW 264
10198: PUSH
10199: LD_INT 7
10201: PUSH
10202: LD_INT 28
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 92
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: IN
10217: IFFALSE 10238
// points := [ 35 , 20 , 45 ] ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: LD_INT 35
10226: PUSH
10227: LD_INT 20
10229: PUSH
10230: LD_INT 45
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10238: LD_VAR 0 6
10242: PPUSH
10243: CALL_OW 264
10247: PUSH
10248: LD_INT 47
10250: PUSH
10251: EMPTY
10252: LIST
10253: IN
10254: IFFALSE 10275
// points := [ 67 , 45 , 75 ] ;
10256: LD_ADDR_VAR 0 9
10260: PUSH
10261: LD_INT 67
10263: PUSH
10264: LD_INT 45
10266: PUSH
10267: LD_INT 75
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10275: LD_VAR 0 6
10279: PPUSH
10280: CALL_OW 264
10284: PUSH
10285: LD_INT 26
10287: PUSH
10288: EMPTY
10289: LIST
10290: IN
10291: IFFALSE 10312
// points := [ 120 , 30 , 80 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 120
10300: PUSH
10301: LD_INT 30
10303: PUSH
10304: LD_INT 80
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 264
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: EMPTY
10326: LIST
10327: IN
10328: IFFALSE 10349
// points := [ 40 , 1 , 1 ] ;
10330: LD_ADDR_VAR 0 9
10334: PUSH
10335: LD_INT 40
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10349: LD_VAR 0 6
10353: PPUSH
10354: CALL_OW 264
10358: PUSH
10359: LD_INT 29
10361: PUSH
10362: EMPTY
10363: LIST
10364: IN
10365: IFFALSE 10386
// points := [ 70 , 200 , 400 ] ;
10367: LD_ADDR_VAR 0 9
10371: PUSH
10372: LD_INT 70
10374: PUSH
10375: LD_INT 200
10377: PUSH
10378: LD_INT 400
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10386: LD_VAR 0 6
10390: PPUSH
10391: CALL_OW 264
10395: PUSH
10396: LD_INT 14
10398: PUSH
10399: LD_INT 53
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 40 , 10 , 20 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 40
10415: PUSH
10416: LD_INT 10
10418: PUSH
10419: LD_INT 20
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 264
10436: PUSH
10437: LD_INT 9
10439: PUSH
10440: EMPTY
10441: LIST
10442: IN
10443: IFFALSE 10464
// points := [ 5 , 70 , 20 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: LD_INT 70
10455: PUSH
10456: LD_INT 20
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 264
10473: PUSH
10474: LD_INT 10
10476: PUSH
10477: EMPTY
10478: LIST
10479: IN
10480: IFFALSE 10501
// points := [ 35 , 110 , 70 ] ;
10482: LD_ADDR_VAR 0 9
10486: PUSH
10487: LD_INT 35
10489: PUSH
10490: LD_INT 110
10492: PUSH
10493: LD_INT 70
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10501: LD_VAR 0 6
10505: PPUSH
10506: CALL_OW 265
10510: PUSH
10511: LD_INT 25
10513: EQUAL
10514: IFFALSE 10535
// points := [ 80 , 65 , 100 ] ;
10516: LD_ADDR_VAR 0 9
10520: PUSH
10521: LD_INT 80
10523: PUSH
10524: LD_INT 65
10526: PUSH
10527: LD_INT 100
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10535: LD_VAR 0 6
10539: PPUSH
10540: CALL_OW 263
10544: PUSH
10545: LD_INT 1
10547: EQUAL
10548: IFFALSE 10583
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10550: LD_ADDR_VAR 0 10
10554: PUSH
10555: LD_VAR 0 10
10559: PUSH
10560: LD_VAR 0 6
10564: PPUSH
10565: CALL_OW 311
10569: PPUSH
10570: LD_INT 3
10572: PPUSH
10573: CALL_OW 259
10577: PUSH
10578: LD_INT 4
10580: MUL
10581: MUL
10582: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10583: LD_VAR 0 6
10587: PPUSH
10588: CALL_OW 263
10592: PUSH
10593: LD_INT 2
10595: EQUAL
10596: IFFALSE 10647
// begin j := IsControledBy ( i ) ;
10598: LD_ADDR_VAR 0 7
10602: PUSH
10603: LD_VAR 0 6
10607: PPUSH
10608: CALL_OW 312
10612: ST_TO_ADDR
// if j then
10613: LD_VAR 0 7
10617: IFFALSE 10647
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10619: LD_ADDR_VAR 0 10
10623: PUSH
10624: LD_VAR 0 10
10628: PUSH
10629: LD_VAR 0 7
10633: PPUSH
10634: LD_INT 3
10636: PPUSH
10637: CALL_OW 259
10641: PUSH
10642: LD_INT 3
10644: MUL
10645: MUL
10646: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10647: LD_VAR 0 6
10651: PPUSH
10652: CALL_OW 264
10656: PUSH
10657: LD_INT 5
10659: PUSH
10660: LD_INT 6
10662: PUSH
10663: LD_INT 46
10665: PUSH
10666: LD_INT 44
10668: PUSH
10669: LD_INT 47
10671: PUSH
10672: LD_INT 45
10674: PUSH
10675: LD_INT 28
10677: PUSH
10678: LD_INT 7
10680: PUSH
10681: LD_INT 27
10683: PUSH
10684: LD_INT 29
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: IN
10699: PUSH
10700: LD_VAR 0 1
10704: PPUSH
10705: LD_INT 52
10707: PPUSH
10708: CALL_OW 321
10712: PUSH
10713: LD_INT 2
10715: EQUAL
10716: AND
10717: IFFALSE 10734
// bpoints := bpoints * 1.2 ;
10719: LD_ADDR_VAR 0 10
10723: PUSH
10724: LD_VAR 0 10
10728: PUSH
10729: LD_REAL  1.20000000000000E+0000
10732: MUL
10733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10734: LD_VAR 0 6
10738: PPUSH
10739: CALL_OW 264
10743: PUSH
10744: LD_INT 6
10746: PUSH
10747: LD_INT 46
10749: PUSH
10750: LD_INT 47
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: IN
10758: IFFALSE 10775
// bpoints := bpoints * 1.2 ;
10760: LD_ADDR_VAR 0 10
10764: PUSH
10765: LD_VAR 0 10
10769: PUSH
10770: LD_REAL  1.20000000000000E+0000
10773: MUL
10774: ST_TO_ADDR
// end ; unit_building :
10775: GO 10789
10777: LD_INT 3
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10788
10785: POP
// ; end ;
10786: GO 10789
10788: POP
// for j = 1 to 3 do
10789: LD_ADDR_VAR 0 7
10793: PUSH
10794: DOUBLE
10795: LD_INT 1
10797: DEC
10798: ST_TO_ADDR
10799: LD_INT 3
10801: PUSH
10802: FOR_TO
10803: IFFALSE 10856
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10805: LD_ADDR_VAR 0 5
10809: PUSH
10810: LD_VAR 0 5
10814: PPUSH
10815: LD_VAR 0 7
10819: PPUSH
10820: LD_VAR 0 5
10824: PUSH
10825: LD_VAR 0 7
10829: ARRAY
10830: PUSH
10831: LD_VAR 0 9
10835: PUSH
10836: LD_VAR 0 7
10840: ARRAY
10841: PUSH
10842: LD_VAR 0 10
10846: MUL
10847: PLUS
10848: PPUSH
10849: CALL_OW 1
10853: ST_TO_ADDR
10854: GO 10802
10856: POP
10857: POP
// end ;
10858: GO 9337
10860: POP
10861: POP
// result := Replace ( result , 4 , tmp ) ;
10862: LD_ADDR_VAR 0 5
10866: PUSH
10867: LD_VAR 0 5
10871: PPUSH
10872: LD_INT 4
10874: PPUSH
10875: LD_VAR 0 8
10879: PPUSH
10880: CALL_OW 1
10884: ST_TO_ADDR
// end ;
10885: LD_VAR 0 5
10889: RET
// export function DangerAtRange ( unit , range ) ; begin
10890: LD_INT 0
10892: PPUSH
// if not unit then
10893: LD_VAR 0 1
10897: NOT
10898: IFFALSE 10902
// exit ;
10900: GO 10947
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_VAR 0 1
10911: PPUSH
10912: CALL_OW 255
10916: PPUSH
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 250
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 251
10936: PPUSH
10937: LD_VAR 0 2
10941: PPUSH
10942: CALL 9189 0 4
10946: ST_TO_ADDR
// end ;
10947: LD_VAR 0 3
10951: RET
// export function DangerInArea ( side , area ) ; begin
10952: LD_INT 0
10954: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10955: LD_ADDR_VAR 0 3
10959: PUSH
10960: LD_VAR 0 2
10964: PPUSH
10965: LD_INT 81
10967: PUSH
10968: LD_VAR 0 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PPUSH
10977: CALL_OW 70
10981: ST_TO_ADDR
// end ;
10982: LD_VAR 0 3
10986: RET
// export function IsExtension ( b ) ; begin
10987: LD_INT 0
10989: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_VAR 0 1
10999: PUSH
11000: LD_INT 23
11002: PUSH
11003: LD_INT 20
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 17
11011: PUSH
11012: LD_INT 24
11014: PUSH
11015: LD_INT 21
11017: PUSH
11018: LD_INT 19
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 25
11026: PUSH
11027: LD_INT 18
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: IN
11042: ST_TO_ADDR
// end ;
11043: LD_VAR 0 2
11047: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11048: LD_INT 0
11050: PPUSH
11051: PPUSH
11052: PPUSH
// result := [ ] ;
11053: LD_ADDR_VAR 0 4
11057: PUSH
11058: EMPTY
11059: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_VAR 0 2
11069: PPUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 70
11084: ST_TO_ADDR
// if not tmp then
11085: LD_VAR 0 5
11089: NOT
11090: IFFALSE 11094
// exit ;
11092: GO 11158
// if checkLink then
11094: LD_VAR 0 3
11098: IFFALSE 11148
// begin for i in tmp do
11100: LD_ADDR_VAR 0 6
11104: PUSH
11105: LD_VAR 0 5
11109: PUSH
11110: FOR_IN
11111: IFFALSE 11146
// if GetBase ( i ) <> base then
11113: LD_VAR 0 6
11117: PPUSH
11118: CALL_OW 274
11122: PUSH
11123: LD_VAR 0 1
11127: NONEQUAL
11128: IFFALSE 11144
// ComLinkToBase ( base , i ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_VAR 0 6
11139: PPUSH
11140: CALL_OW 169
11144: GO 11110
11146: POP
11147: POP
// end ; result := tmp ;
11148: LD_ADDR_VAR 0 4
11152: PUSH
11153: LD_VAR 0 5
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 4
11162: RET
// export function ComComplete ( units , b ) ; var i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
// if not units then
11167: LD_VAR 0 1
11171: NOT
11172: IFFALSE 11176
// exit ;
11174: GO 11266
// for i in units do
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_VAR 0 1
11185: PUSH
11186: FOR_IN
11187: IFFALSE 11264
// if BuildingStatus ( b ) = bs_build then
11189: LD_VAR 0 2
11193: PPUSH
11194: CALL_OW 461
11198: PUSH
11199: LD_INT 1
11201: EQUAL
11202: IFFALSE 11262
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11204: LD_VAR 0 4
11208: PPUSH
11209: LD_STRING h
11211: PUSH
11212: LD_VAR 0 2
11216: PPUSH
11217: CALL_OW 250
11221: PUSH
11222: LD_VAR 0 2
11226: PPUSH
11227: CALL_OW 251
11231: PUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 0
11239: PUSH
11240: LD_INT 0
11242: PUSH
11243: LD_INT 0
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: PPUSH
11258: CALL_OW 446
11262: GO 11186
11264: POP
11265: POP
// end ;
11266: LD_VAR 0 3
11270: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11279: LD_VAR 0 1
11283: NOT
11284: PUSH
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 263
11294: PUSH
11295: LD_INT 2
11297: NONEQUAL
11298: OR
11299: IFFALSE 11303
// exit ;
11301: GO 11619
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11303: LD_ADDR_VAR 0 6
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL_OW 255
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 36
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 34
11340: PUSH
11341: LD_INT 31
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: ST_TO_ADDR
// if not tmp then
11362: LD_VAR 0 6
11366: NOT
11367: IFFALSE 11371
// exit ;
11369: GO 11619
// result := [ ] ;
11371: LD_ADDR_VAR 0 2
11375: PUSH
11376: EMPTY
11377: ST_TO_ADDR
// for i in tmp do
11378: LD_ADDR_VAR 0 3
11382: PUSH
11383: LD_VAR 0 6
11387: PUSH
11388: FOR_IN
11389: IFFALSE 11460
// begin t := UnitsInside ( i ) ;
11391: LD_ADDR_VAR 0 4
11395: PUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: CALL_OW 313
11405: ST_TO_ADDR
// if t then
11406: LD_VAR 0 4
11410: IFFALSE 11458
// for j in t do
11412: LD_ADDR_VAR 0 7
11416: PUSH
11417: LD_VAR 0 4
11421: PUSH
11422: FOR_IN
11423: IFFALSE 11456
// result := Replace ( result , result + 1 , j ) ;
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: LD_VAR 0 2
11439: PUSH
11440: LD_INT 1
11442: PLUS
11443: PPUSH
11444: LD_VAR 0 7
11448: PPUSH
11449: CALL_OW 1
11453: ST_TO_ADDR
11454: GO 11422
11456: POP
11457: POP
// end ;
11458: GO 11388
11460: POP
11461: POP
// if not result then
11462: LD_VAR 0 2
11466: NOT
11467: IFFALSE 11471
// exit ;
11469: GO 11619
// mech := result [ 1 ] ;
11471: LD_ADDR_VAR 0 5
11475: PUSH
11476: LD_VAR 0 2
11480: PUSH
11481: LD_INT 1
11483: ARRAY
11484: ST_TO_ADDR
// if result > 1 then
11485: LD_VAR 0 2
11489: PUSH
11490: LD_INT 1
11492: GREATER
11493: IFFALSE 11605
// begin for i = 2 to result do
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: DOUBLE
11501: LD_INT 2
11503: DEC
11504: ST_TO_ADDR
11505: LD_VAR 0 2
11509: PUSH
11510: FOR_TO
11511: IFFALSE 11603
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11513: LD_ADDR_VAR 0 4
11517: PUSH
11518: LD_VAR 0 2
11522: PUSH
11523: LD_VAR 0 3
11527: ARRAY
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: CALL_OW 259
11536: PUSH
11537: LD_VAR 0 2
11541: PUSH
11542: LD_VAR 0 3
11546: ARRAY
11547: PPUSH
11548: CALL_OW 432
11552: MINUS
11553: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11554: LD_VAR 0 4
11558: PUSH
11559: LD_VAR 0 5
11563: PPUSH
11564: LD_INT 3
11566: PPUSH
11567: CALL_OW 259
11571: PUSH
11572: LD_VAR 0 5
11576: PPUSH
11577: CALL_OW 432
11581: MINUS
11582: GREATEREQUAL
11583: IFFALSE 11601
// mech := result [ i ] ;
11585: LD_ADDR_VAR 0 5
11589: PUSH
11590: LD_VAR 0 2
11594: PUSH
11595: LD_VAR 0 3
11599: ARRAY
11600: ST_TO_ADDR
// end ;
11601: GO 11510
11603: POP
11604: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11605: LD_VAR 0 1
11609: PPUSH
11610: LD_VAR 0 5
11614: PPUSH
11615: CALL_OW 135
// end ;
11619: LD_VAR 0 2
11623: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11624: LD_INT 0
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
// result := [ ] ;
11639: LD_ADDR_VAR 0 7
11643: PUSH
11644: EMPTY
11645: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11646: LD_VAR 0 1
11650: PPUSH
11651: CALL_OW 266
11655: PUSH
11656: LD_INT 0
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: IN
11666: NOT
11667: IFFALSE 11671
// exit ;
11669: GO 13305
// if name then
11671: LD_VAR 0 3
11675: IFFALSE 11691
// SetBName ( base_dep , name ) ;
11677: LD_VAR 0 1
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: CALL_OW 500
// base := GetBase ( base_dep ) ;
11691: LD_ADDR_VAR 0 15
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 274
11705: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11706: LD_ADDR_VAR 0 16
11710: PUSH
11711: LD_VAR 0 1
11715: PPUSH
11716: CALL_OW 255
11720: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11721: LD_ADDR_VAR 0 17
11725: PUSH
11726: LD_VAR 0 1
11730: PPUSH
11731: CALL_OW 248
11735: ST_TO_ADDR
// if sources then
11736: LD_VAR 0 5
11740: IFFALSE 11787
// for i = 1 to 3 do
11742: LD_ADDR_VAR 0 8
11746: PUSH
11747: DOUBLE
11748: LD_INT 1
11750: DEC
11751: ST_TO_ADDR
11752: LD_INT 3
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11785
// AddResourceType ( base , i , sources [ i ] ) ;
11758: LD_VAR 0 15
11762: PPUSH
11763: LD_VAR 0 8
11767: PPUSH
11768: LD_VAR 0 5
11772: PUSH
11773: LD_VAR 0 8
11777: ARRAY
11778: PPUSH
11779: CALL_OW 276
11783: GO 11755
11785: POP
11786: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11787: LD_ADDR_VAR 0 18
11791: PUSH
11792: LD_VAR 0 15
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: LD_INT 1
11804: PPUSH
11805: CALL 11048 0 3
11809: ST_TO_ADDR
// InitHc ;
11810: CALL_OW 19
// InitUc ;
11814: CALL_OW 18
// uc_side := side ;
11818: LD_ADDR_OWVAR 20
11822: PUSH
11823: LD_VAR 0 16
11827: ST_TO_ADDR
// uc_nation := nation ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_VAR 0 17
11837: ST_TO_ADDR
// if buildings then
11838: LD_VAR 0 18
11842: IFFALSE 13164
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11844: LD_ADDR_VAR 0 19
11848: PUSH
11849: LD_VAR 0 18
11853: PPUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 30
11859: PUSH
11860: LD_INT 29
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 30
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 72
11886: ST_TO_ADDR
// if tmp then
11887: LD_VAR 0 19
11891: IFFALSE 11939
// for i in tmp do
11893: LD_ADDR_VAR 0 8
11897: PUSH
11898: LD_VAR 0 19
11902: PUSH
11903: FOR_IN
11904: IFFALSE 11937
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11906: LD_VAR 0 8
11910: PPUSH
11911: CALL_OW 250
11915: PPUSH
11916: LD_VAR 0 8
11920: PPUSH
11921: CALL_OW 251
11925: PPUSH
11926: LD_VAR 0 16
11930: PPUSH
11931: CALL_OW 441
11935: GO 11903
11937: POP
11938: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11939: LD_VAR 0 18
11943: PPUSH
11944: LD_INT 2
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 32
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 33
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 72
11976: IFFALSE 12064
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11978: LD_ADDR_VAR 0 8
11982: PUSH
11983: LD_VAR 0 18
11987: PPUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 30
11993: PUSH
11994: LD_INT 32
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 30
12003: PUSH
12004: LD_INT 33
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 72
12020: PUSH
12021: FOR_IN
12022: IFFALSE 12062
// begin if not GetBWeapon ( i ) then
12024: LD_VAR 0 8
12028: PPUSH
12029: CALL_OW 269
12033: NOT
12034: IFFALSE 12060
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12036: LD_VAR 0 8
12040: PPUSH
12041: LD_VAR 0 8
12045: PPUSH
12046: LD_VAR 0 2
12050: PPUSH
12051: CALL 13310 0 2
12055: PPUSH
12056: CALL_OW 431
// end ;
12060: GO 12021
12062: POP
12063: POP
// end ; for i = 1 to personel do
12064: LD_ADDR_VAR 0 8
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_VAR 0 6
12078: PUSH
12079: FOR_TO
12080: IFFALSE 13144
// begin if i > 4 then
12082: LD_VAR 0 8
12086: PUSH
12087: LD_INT 4
12089: GREATER
12090: IFFALSE 12094
// break ;
12092: GO 13144
// case i of 1 :
12094: LD_VAR 0 8
12098: PUSH
12099: LD_INT 1
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12187
12107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12108: LD_ADDR_VAR 0 12
12112: PUSH
12113: LD_VAR 0 18
12117: PPUSH
12118: LD_INT 22
12120: PUSH
12121: LD_VAR 0 16
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 58
12132: PUSH
12133: EMPTY
12134: LIST
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 30
12141: PUSH
12142: LD_INT 32
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 30
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 30
12161: PUSH
12162: LD_INT 5
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 72
12184: ST_TO_ADDR
12185: GO 12409
12187: LD_INT 2
12189: DOUBLE
12190: EQUAL
12191: IFTRUE 12195
12193: GO 12257
12195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12196: LD_ADDR_VAR 0 12
12200: PUSH
12201: LD_VAR 0 18
12205: PPUSH
12206: LD_INT 22
12208: PUSH
12209: LD_VAR 0 16
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 2
12220: PUSH
12221: LD_INT 30
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 72
12254: ST_TO_ADDR
12255: GO 12409
12257: LD_INT 3
12259: DOUBLE
12260: EQUAL
12261: IFTRUE 12265
12263: GO 12327
12265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12266: LD_ADDR_VAR 0 12
12270: PUSH
12271: LD_VAR 0 18
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_VAR 0 16
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 3
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 72
12324: ST_TO_ADDR
12325: GO 12409
12327: LD_INT 4
12329: DOUBLE
12330: EQUAL
12331: IFTRUE 12335
12333: GO 12408
12335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12336: LD_ADDR_VAR 0 12
12340: PUSH
12341: LD_VAR 0 18
12345: PPUSH
12346: LD_INT 22
12348: PUSH
12349: LD_VAR 0 16
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 2
12360: PUSH
12361: LD_INT 30
12363: PUSH
12364: LD_INT 6
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 30
12373: PUSH
12374: LD_INT 7
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 30
12383: PUSH
12384: LD_INT 8
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 72
12405: ST_TO_ADDR
12406: GO 12409
12408: POP
// if i = 1 then
12409: LD_VAR 0 8
12413: PUSH
12414: LD_INT 1
12416: EQUAL
12417: IFFALSE 12528
// begin tmp := [ ] ;
12419: LD_ADDR_VAR 0 19
12423: PUSH
12424: EMPTY
12425: ST_TO_ADDR
// for j in f do
12426: LD_ADDR_VAR 0 9
12430: PUSH
12431: LD_VAR 0 12
12435: PUSH
12436: FOR_IN
12437: IFFALSE 12510
// if GetBType ( j ) = b_bunker then
12439: LD_VAR 0 9
12443: PPUSH
12444: CALL_OW 266
12448: PUSH
12449: LD_INT 32
12451: EQUAL
12452: IFFALSE 12479
// tmp := Insert ( tmp , 1 , j ) else
12454: LD_ADDR_VAR 0 19
12458: PUSH
12459: LD_VAR 0 19
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_VAR 0 9
12471: PPUSH
12472: CALL_OW 2
12476: ST_TO_ADDR
12477: GO 12508
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12479: LD_ADDR_VAR 0 19
12483: PUSH
12484: LD_VAR 0 19
12488: PPUSH
12489: LD_VAR 0 19
12493: PUSH
12494: LD_INT 1
12496: PLUS
12497: PPUSH
12498: LD_VAR 0 9
12502: PPUSH
12503: CALL_OW 2
12507: ST_TO_ADDR
12508: GO 12436
12510: POP
12511: POP
// if tmp then
12512: LD_VAR 0 19
12516: IFFALSE 12528
// f := tmp ;
12518: LD_ADDR_VAR 0 12
12522: PUSH
12523: LD_VAR 0 19
12527: ST_TO_ADDR
// end ; x := personel [ i ] ;
12528: LD_ADDR_VAR 0 13
12532: PUSH
12533: LD_VAR 0 6
12537: PUSH
12538: LD_VAR 0 8
12542: ARRAY
12543: ST_TO_ADDR
// if x = - 1 then
12544: LD_VAR 0 13
12548: PUSH
12549: LD_INT 1
12551: NEG
12552: EQUAL
12553: IFFALSE 12762
// begin for j in f do
12555: LD_ADDR_VAR 0 9
12559: PUSH
12560: LD_VAR 0 12
12564: PUSH
12565: FOR_IN
12566: IFFALSE 12758
// repeat InitHc ;
12568: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12572: LD_VAR 0 9
12576: PPUSH
12577: CALL_OW 266
12581: PUSH
12582: LD_INT 5
12584: EQUAL
12585: IFFALSE 12655
// begin if UnitsInside ( j ) < 3 then
12587: LD_VAR 0 9
12591: PPUSH
12592: CALL_OW 313
12596: PUSH
12597: LD_INT 3
12599: LESS
12600: IFFALSE 12636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12602: LD_INT 0
12604: PPUSH
12605: LD_INT 5
12607: PUSH
12608: LD_INT 8
12610: PUSH
12611: LD_INT 9
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: PUSH
12619: LD_VAR 0 17
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 4
12629: PPUSH
12630: CALL_OW 380
12634: GO 12653
// PrepareHuman ( false , i , skill ) ;
12636: LD_INT 0
12638: PPUSH
12639: LD_VAR 0 8
12643: PPUSH
12644: LD_VAR 0 4
12648: PPUSH
12649: CALL_OW 380
// end else
12653: GO 12672
// PrepareHuman ( false , i , skill ) ;
12655: LD_INT 0
12657: PPUSH
12658: LD_VAR 0 8
12662: PPUSH
12663: LD_VAR 0 4
12667: PPUSH
12668: CALL_OW 380
// un := CreateHuman ;
12672: LD_ADDR_VAR 0 14
12676: PUSH
12677: CALL_OW 44
12681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12682: LD_ADDR_VAR 0 7
12686: PUSH
12687: LD_VAR 0 7
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: LD_VAR 0 14
12699: PPUSH
12700: CALL_OW 2
12704: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12705: LD_VAR 0 14
12709: PPUSH
12710: LD_VAR 0 9
12714: PPUSH
12715: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12719: LD_VAR 0 9
12723: PPUSH
12724: CALL_OW 313
12728: PUSH
12729: LD_INT 6
12731: EQUAL
12732: PUSH
12733: LD_VAR 0 9
12737: PPUSH
12738: CALL_OW 266
12742: PUSH
12743: LD_INT 32
12745: PUSH
12746: LD_INT 31
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: IN
12753: OR
12754: IFFALSE 12568
12756: GO 12565
12758: POP
12759: POP
// end else
12760: GO 13142
// for j = 1 to x do
12762: LD_ADDR_VAR 0 9
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_VAR 0 13
12776: PUSH
12777: FOR_TO
12778: IFFALSE 13140
// begin InitHc ;
12780: CALL_OW 19
// if not f then
12784: LD_VAR 0 12
12788: NOT
12789: IFFALSE 12878
// begin PrepareHuman ( false , i , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 8
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un := CreateHuman ;
12808: LD_ADDR_VAR 0 14
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12818: LD_ADDR_VAR 0 7
12822: PUSH
12823: LD_VAR 0 7
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: LD_VAR 0 14
12835: PPUSH
12836: CALL_OW 2
12840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12841: LD_VAR 0 14
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 250
12855: PPUSH
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 251
12865: PPUSH
12866: LD_INT 10
12868: PPUSH
12869: LD_INT 0
12871: PPUSH
12872: CALL_OW 50
// continue ;
12876: GO 12777
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12878: LD_VAR 0 12
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: PPUSH
12887: CALL_OW 313
12891: PUSH
12892: LD_VAR 0 12
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 266
12905: PUSH
12906: LD_INT 32
12908: PUSH
12909: LD_INT 31
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: IN
12916: AND
12917: PUSH
12918: LD_VAR 0 12
12922: PUSH
12923: LD_INT 1
12925: ARRAY
12926: PPUSH
12927: CALL_OW 313
12931: PUSH
12932: LD_INT 6
12934: EQUAL
12935: OR
12936: IFFALSE 12956
// f := Delete ( f , 1 ) ;
12938: LD_ADDR_VAR 0 12
12942: PUSH
12943: LD_VAR 0 12
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 3
12955: ST_TO_ADDR
// if not f then
12956: LD_VAR 0 12
12960: NOT
12961: IFFALSE 12979
// begin x := x + 2 ;
12963: LD_ADDR_VAR 0 13
12967: PUSH
12968: LD_VAR 0 13
12972: PUSH
12973: LD_INT 2
12975: PLUS
12976: ST_TO_ADDR
// continue ;
12977: GO 12777
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12979: LD_VAR 0 12
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: PPUSH
12988: CALL_OW 266
12992: PUSH
12993: LD_INT 5
12995: EQUAL
12996: IFFALSE 13070
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12998: LD_VAR 0 12
13002: PUSH
13003: LD_INT 1
13005: ARRAY
13006: PPUSH
13007: CALL_OW 313
13011: PUSH
13012: LD_INT 3
13014: LESS
13015: IFFALSE 13051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13017: LD_INT 0
13019: PPUSH
13020: LD_INT 5
13022: PUSH
13023: LD_INT 8
13025: PUSH
13026: LD_INT 9
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_VAR 0 17
13038: ARRAY
13039: PPUSH
13040: LD_VAR 0 4
13044: PPUSH
13045: CALL_OW 380
13049: GO 13068
// PrepareHuman ( false , i , skill ) ;
13051: LD_INT 0
13053: PPUSH
13054: LD_VAR 0 8
13058: PPUSH
13059: LD_VAR 0 4
13063: PPUSH
13064: CALL_OW 380
// end else
13068: GO 13087
// PrepareHuman ( false , i , skill ) ;
13070: LD_INT 0
13072: PPUSH
13073: LD_VAR 0 8
13077: PPUSH
13078: LD_VAR 0 4
13082: PPUSH
13083: CALL_OW 380
// un := CreateHuman ;
13087: LD_ADDR_VAR 0 14
13091: PUSH
13092: CALL_OW 44
13096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13097: LD_ADDR_VAR 0 7
13101: PUSH
13102: LD_VAR 0 7
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: LD_VAR 0 14
13114: PPUSH
13115: CALL_OW 2
13119: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13120: LD_VAR 0 14
13124: PPUSH
13125: LD_VAR 0 12
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PPUSH
13134: CALL_OW 52
// end ;
13138: GO 12777
13140: POP
13141: POP
// end ;
13142: GO 12079
13144: POP
13145: POP
// result := result ^ buildings ;
13146: LD_ADDR_VAR 0 7
13150: PUSH
13151: LD_VAR 0 7
13155: PUSH
13156: LD_VAR 0 18
13160: ADD
13161: ST_TO_ADDR
// end else
13162: GO 13305
// begin for i = 1 to personel do
13164: LD_ADDR_VAR 0 8
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_VAR 0 6
13178: PUSH
13179: FOR_TO
13180: IFFALSE 13303
// begin if i > 4 then
13182: LD_VAR 0 8
13186: PUSH
13187: LD_INT 4
13189: GREATER
13190: IFFALSE 13194
// break ;
13192: GO 13303
// x := personel [ i ] ;
13194: LD_ADDR_VAR 0 13
13198: PUSH
13199: LD_VAR 0 6
13203: PUSH
13204: LD_VAR 0 8
13208: ARRAY
13209: ST_TO_ADDR
// if x = - 1 then
13210: LD_VAR 0 13
13214: PUSH
13215: LD_INT 1
13217: NEG
13218: EQUAL
13219: IFFALSE 13223
// continue ;
13221: GO 13179
// PrepareHuman ( false , i , skill ) ;
13223: LD_INT 0
13225: PPUSH
13226: LD_VAR 0 8
13230: PPUSH
13231: LD_VAR 0 4
13235: PPUSH
13236: CALL_OW 380
// un := CreateHuman ;
13240: LD_ADDR_VAR 0 14
13244: PUSH
13245: CALL_OW 44
13249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13250: LD_VAR 0 14
13254: PPUSH
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 250
13264: PPUSH
13265: LD_VAR 0 1
13269: PPUSH
13270: CALL_OW 251
13274: PPUSH
13275: LD_INT 10
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 50
// result := result ^ un ;
13285: LD_ADDR_VAR 0 7
13289: PUSH
13290: LD_VAR 0 7
13294: PUSH
13295: LD_VAR 0 14
13299: ADD
13300: ST_TO_ADDR
// end ;
13301: GO 13179
13303: POP
13304: POP
// end ; end ;
13305: LD_VAR 0 7
13309: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13310: LD_INT 0
13312: PPUSH
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
// result := false ;
13328: LD_ADDR_VAR 0 3
13332: PUSH
13333: LD_INT 0
13335: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13336: LD_VAR 0 1
13340: NOT
13341: PUSH
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 266
13351: PUSH
13352: LD_INT 32
13354: PUSH
13355: LD_INT 33
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: IN
13362: NOT
13363: OR
13364: IFFALSE 13368
// exit ;
13366: GO 14477
// nat := GetNation ( tower ) ;
13368: LD_ADDR_VAR 0 12
13372: PUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 248
13382: ST_TO_ADDR
// side := GetSide ( tower ) ;
13383: LD_ADDR_VAR 0 16
13387: PUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 255
13397: ST_TO_ADDR
// x := GetX ( tower ) ;
13398: LD_ADDR_VAR 0 10
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 250
13412: ST_TO_ADDR
// y := GetY ( tower ) ;
13413: LD_ADDR_VAR 0 11
13417: PUSH
13418: LD_VAR 0 1
13422: PPUSH
13423: CALL_OW 251
13427: ST_TO_ADDR
// if not x or not y then
13428: LD_VAR 0 10
13432: NOT
13433: PUSH
13434: LD_VAR 0 11
13438: NOT
13439: OR
13440: IFFALSE 13444
// exit ;
13442: GO 14477
// weapon := 0 ;
13444: LD_ADDR_VAR 0 18
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// fac_list := [ ] ;
13452: LD_ADDR_VAR 0 17
13456: PUSH
13457: EMPTY
13458: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13459: LD_ADDR_VAR 0 6
13463: PUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 274
13473: PPUSH
13474: LD_VAR 0 2
13478: PPUSH
13479: LD_INT 0
13481: PPUSH
13482: CALL 11048 0 3
13486: PPUSH
13487: LD_INT 30
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// if not factories then
13502: LD_VAR 0 6
13506: NOT
13507: IFFALSE 13511
// exit ;
13509: GO 14477
// for i in factories do
13511: LD_ADDR_VAR 0 8
13515: PUSH
13516: LD_VAR 0 6
13520: PUSH
13521: FOR_IN
13522: IFFALSE 13547
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13524: LD_ADDR_VAR 0 17
13528: PUSH
13529: LD_VAR 0 17
13533: PUSH
13534: LD_VAR 0 8
13538: PPUSH
13539: CALL_OW 478
13543: UNION
13544: ST_TO_ADDR
13545: GO 13521
13547: POP
13548: POP
// if not fac_list then
13549: LD_VAR 0 17
13553: NOT
13554: IFFALSE 13558
// exit ;
13556: GO 14477
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13558: LD_ADDR_VAR 0 5
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: LD_INT 5
13568: PUSH
13569: LD_INT 9
13571: PUSH
13572: LD_INT 10
13574: PUSH
13575: LD_INT 6
13577: PUSH
13578: LD_INT 7
13580: PUSH
13581: LD_INT 11
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 27
13595: PUSH
13596: LD_INT 28
13598: PUSH
13599: LD_INT 26
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 43
13613: PUSH
13614: LD_INT 44
13616: PUSH
13617: LD_INT 46
13619: PUSH
13620: LD_INT 45
13622: PUSH
13623: LD_INT 47
13625: PUSH
13626: LD_INT 49
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: PUSH
13642: LD_VAR 0 12
13646: ARRAY
13647: ST_TO_ADDR
// list := list isect fac_list ;
13648: LD_ADDR_VAR 0 5
13652: PUSH
13653: LD_VAR 0 5
13657: PUSH
13658: LD_VAR 0 17
13662: ISECT
13663: ST_TO_ADDR
// if not list then
13664: LD_VAR 0 5
13668: NOT
13669: IFFALSE 13673
// exit ;
13671: GO 14477
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13673: LD_VAR 0 12
13677: PUSH
13678: LD_INT 3
13680: EQUAL
13681: PUSH
13682: LD_INT 49
13684: PUSH
13685: LD_VAR 0 5
13689: IN
13690: AND
13691: PUSH
13692: LD_INT 31
13694: PPUSH
13695: LD_VAR 0 16
13699: PPUSH
13700: CALL_OW 321
13704: PUSH
13705: LD_INT 2
13707: EQUAL
13708: AND
13709: IFFALSE 13769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13711: LD_INT 22
13713: PUSH
13714: LD_VAR 0 16
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 35
13725: PUSH
13726: LD_INT 49
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 91
13735: PUSH
13736: LD_VAR 0 1
13740: PUSH
13741: LD_INT 10
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 69
13758: NOT
13759: IFFALSE 13769
// weapon := ru_time_lapser ;
13761: LD_ADDR_VAR 0 18
13765: PUSH
13766: LD_INT 49
13768: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13769: LD_VAR 0 12
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: IN
13784: PUSH
13785: LD_INT 11
13787: PUSH
13788: LD_VAR 0 5
13792: IN
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_VAR 0 5
13801: IN
13802: OR
13803: AND
13804: PUSH
13805: LD_INT 6
13807: PPUSH
13808: LD_VAR 0 16
13812: PPUSH
13813: CALL_OW 321
13817: PUSH
13818: LD_INT 2
13820: EQUAL
13821: AND
13822: IFFALSE 13987
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13824: LD_INT 22
13826: PUSH
13827: LD_VAR 0 16
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 35
13841: PUSH
13842: LD_INT 11
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 35
13851: PUSH
13852: LD_INT 30
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 91
13866: PUSH
13867: LD_VAR 0 1
13871: PUSH
13872: LD_INT 18
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: NOT
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_VAR 0 16
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: LD_INT 30
13908: PUSH
13909: LD_INT 32
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 30
13918: PUSH
13919: LD_INT 33
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 91
13933: PUSH
13934: LD_VAR 0 1
13938: PUSH
13939: LD_INT 12
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: PPUSH
13955: CALL_OW 69
13959: PUSH
13960: LD_INT 2
13962: GREATER
13963: AND
13964: IFFALSE 13987
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13966: LD_ADDR_VAR 0 18
13970: PUSH
13971: LD_INT 11
13973: PUSH
13974: LD_INT 30
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_VAR 0 12
13985: ARRAY
13986: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13987: LD_VAR 0 18
13991: NOT
13992: PUSH
13993: LD_INT 40
13995: PPUSH
13996: LD_VAR 0 16
14000: PPUSH
14001: CALL_OW 321
14005: PUSH
14006: LD_INT 2
14008: EQUAL
14009: AND
14010: PUSH
14011: LD_INT 7
14013: PUSH
14014: LD_VAR 0 5
14018: IN
14019: PUSH
14020: LD_INT 28
14022: PUSH
14023: LD_VAR 0 5
14027: IN
14028: OR
14029: PUSH
14030: LD_INT 45
14032: PUSH
14033: LD_VAR 0 5
14037: IN
14038: OR
14039: AND
14040: IFFALSE 14294
// begin hex := GetHexInfo ( x , y ) ;
14042: LD_ADDR_VAR 0 4
14046: PUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: LD_VAR 0 11
14056: PPUSH
14057: CALL_OW 546
14061: ST_TO_ADDR
// if hex [ 1 ] then
14062: LD_VAR 0 4
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: IFFALSE 14074
// exit ;
14072: GO 14477
// height := hex [ 2 ] ;
14074: LD_ADDR_VAR 0 15
14078: PUSH
14079: LD_VAR 0 4
14083: PUSH
14084: LD_INT 2
14086: ARRAY
14087: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14088: LD_ADDR_VAR 0 14
14092: PUSH
14093: LD_INT 0
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: LD_INT 5
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: ST_TO_ADDR
// for i in tmp do
14111: LD_ADDR_VAR 0 8
14115: PUSH
14116: LD_VAR 0 14
14120: PUSH
14121: FOR_IN
14122: IFFALSE 14292
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14124: LD_ADDR_VAR 0 9
14128: PUSH
14129: LD_VAR 0 10
14133: PPUSH
14134: LD_VAR 0 8
14138: PPUSH
14139: LD_INT 5
14141: PPUSH
14142: CALL_OW 272
14146: PUSH
14147: LD_VAR 0 11
14151: PPUSH
14152: LD_VAR 0 8
14156: PPUSH
14157: LD_INT 5
14159: PPUSH
14160: CALL_OW 273
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14169: LD_VAR 0 9
14173: PUSH
14174: LD_INT 1
14176: ARRAY
14177: PPUSH
14178: LD_VAR 0 9
14182: PUSH
14183: LD_INT 2
14185: ARRAY
14186: PPUSH
14187: CALL_OW 488
14191: IFFALSE 14290
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14193: LD_ADDR_VAR 0 4
14197: PUSH
14198: LD_VAR 0 9
14202: PUSH
14203: LD_INT 1
14205: ARRAY
14206: PPUSH
14207: LD_VAR 0 9
14211: PUSH
14212: LD_INT 2
14214: ARRAY
14215: PPUSH
14216: CALL_OW 546
14220: ST_TO_ADDR
// if hex [ 1 ] then
14221: LD_VAR 0 4
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: IFFALSE 14233
// continue ;
14231: GO 14121
// h := hex [ 2 ] ;
14233: LD_ADDR_VAR 0 13
14237: PUSH
14238: LD_VAR 0 4
14242: PUSH
14243: LD_INT 2
14245: ARRAY
14246: ST_TO_ADDR
// if h + 7 < height then
14247: LD_VAR 0 13
14251: PUSH
14252: LD_INT 7
14254: PLUS
14255: PUSH
14256: LD_VAR 0 15
14260: LESS
14261: IFFALSE 14290
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14263: LD_ADDR_VAR 0 18
14267: PUSH
14268: LD_INT 7
14270: PUSH
14271: LD_INT 28
14273: PUSH
14274: LD_INT 45
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_VAR 0 12
14286: ARRAY
14287: ST_TO_ADDR
// break ;
14288: GO 14292
// end ; end ; end ;
14290: GO 14121
14292: POP
14293: POP
// end ; if not weapon then
14294: LD_VAR 0 18
14298: NOT
14299: IFFALSE 14359
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14301: LD_ADDR_VAR 0 5
14305: PUSH
14306: LD_VAR 0 5
14310: PUSH
14311: LD_INT 11
14313: PUSH
14314: LD_INT 30
14316: PUSH
14317: LD_INT 49
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: DIFF
14325: ST_TO_ADDR
// if not list then
14326: LD_VAR 0 5
14330: NOT
14331: IFFALSE 14335
// exit ;
14333: GO 14477
// weapon := list [ rand ( 1 , list ) ] ;
14335: LD_ADDR_VAR 0 18
14339: PUSH
14340: LD_VAR 0 5
14344: PUSH
14345: LD_INT 1
14347: PPUSH
14348: LD_VAR 0 5
14352: PPUSH
14353: CALL_OW 12
14357: ARRAY
14358: ST_TO_ADDR
// end ; if weapon then
14359: LD_VAR 0 18
14363: IFFALSE 14477
// begin tmp := CostOfWeapon ( weapon ) ;
14365: LD_ADDR_VAR 0 14
14369: PUSH
14370: LD_VAR 0 18
14374: PPUSH
14375: CALL_OW 451
14379: ST_TO_ADDR
// j := GetBase ( tower ) ;
14380: LD_ADDR_VAR 0 9
14384: PUSH
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 274
14394: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14395: LD_VAR 0 9
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 275
14407: PUSH
14408: LD_VAR 0 14
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: GREATEREQUAL
14417: PUSH
14418: LD_VAR 0 9
14422: PPUSH
14423: LD_INT 2
14425: PPUSH
14426: CALL_OW 275
14430: PUSH
14431: LD_VAR 0 14
14435: PUSH
14436: LD_INT 2
14438: ARRAY
14439: GREATEREQUAL
14440: AND
14441: PUSH
14442: LD_VAR 0 9
14446: PPUSH
14447: LD_INT 3
14449: PPUSH
14450: CALL_OW 275
14454: PUSH
14455: LD_VAR 0 14
14459: PUSH
14460: LD_INT 3
14462: ARRAY
14463: GREATEREQUAL
14464: AND
14465: IFFALSE 14477
// result := weapon ;
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: LD_VAR 0 18
14476: ST_TO_ADDR
// end ; end ;
14477: LD_VAR 0 3
14481: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14482: LD_INT 0
14484: PPUSH
14485: PPUSH
// result := true ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 1
14493: ST_TO_ADDR
// if array1 = array2 then
14494: LD_VAR 0 1
14498: PUSH
14499: LD_VAR 0 2
14503: EQUAL
14504: IFFALSE 14564
// begin for i = 1 to array1 do
14506: LD_ADDR_VAR 0 4
14510: PUSH
14511: DOUBLE
14512: LD_INT 1
14514: DEC
14515: ST_TO_ADDR
14516: LD_VAR 0 1
14520: PUSH
14521: FOR_TO
14522: IFFALSE 14560
// if array1 [ i ] <> array2 [ i ] then
14524: LD_VAR 0 1
14528: PUSH
14529: LD_VAR 0 4
14533: ARRAY
14534: PUSH
14535: LD_VAR 0 2
14539: PUSH
14540: LD_VAR 0 4
14544: ARRAY
14545: NONEQUAL
14546: IFFALSE 14558
// begin result := false ;
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 0
14555: ST_TO_ADDR
// break ;
14556: GO 14560
// end ;
14558: GO 14521
14560: POP
14561: POP
// end else
14562: GO 14572
// result := false ;
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: LD_INT 0
14571: ST_TO_ADDR
// end ;
14572: LD_VAR 0 3
14576: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14577: LD_INT 0
14579: PPUSH
14580: PPUSH
// if not array1 or not array2 then
14581: LD_VAR 0 1
14585: NOT
14586: PUSH
14587: LD_VAR 0 2
14591: NOT
14592: OR
14593: IFFALSE 14597
// exit ;
14595: GO 14661
// result := true ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 1
14604: ST_TO_ADDR
// for i = 1 to array1 do
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_VAR 0 1
14619: PUSH
14620: FOR_TO
14621: IFFALSE 14659
// if array1 [ i ] <> array2 [ i ] then
14623: LD_VAR 0 1
14627: PUSH
14628: LD_VAR 0 4
14632: ARRAY
14633: PUSH
14634: LD_VAR 0 2
14638: PUSH
14639: LD_VAR 0 4
14643: ARRAY
14644: NONEQUAL
14645: IFFALSE 14657
// begin result := false ;
14647: LD_ADDR_VAR 0 3
14651: PUSH
14652: LD_INT 0
14654: ST_TO_ADDR
// break ;
14655: GO 14659
// end ;
14657: GO 14620
14659: POP
14660: POP
// end ;
14661: LD_VAR 0 3
14665: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
// pom := GetBase ( fac ) ;
14671: LD_ADDR_VAR 0 5
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 274
14685: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14686: LD_ADDR_VAR 0 4
14690: PUSH
14691: LD_VAR 0 2
14695: PUSH
14696: LD_INT 1
14698: ARRAY
14699: PPUSH
14700: LD_VAR 0 2
14704: PUSH
14705: LD_INT 2
14707: ARRAY
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 3
14716: ARRAY
14717: PPUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 4
14725: ARRAY
14726: PPUSH
14727: CALL_OW 449
14731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14732: LD_ADDR_VAR 0 3
14736: PUSH
14737: LD_VAR 0 5
14741: PPUSH
14742: LD_INT 1
14744: PPUSH
14745: CALL_OW 275
14749: PUSH
14750: LD_VAR 0 4
14754: PUSH
14755: LD_INT 1
14757: ARRAY
14758: GREATEREQUAL
14759: PUSH
14760: LD_VAR 0 5
14764: PPUSH
14765: LD_INT 2
14767: PPUSH
14768: CALL_OW 275
14772: PUSH
14773: LD_VAR 0 4
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: GREATEREQUAL
14782: AND
14783: PUSH
14784: LD_VAR 0 5
14788: PPUSH
14789: LD_INT 3
14791: PPUSH
14792: CALL_OW 275
14796: PUSH
14797: LD_VAR 0 4
14801: PUSH
14802: LD_INT 3
14804: ARRAY
14805: GREATEREQUAL
14806: AND
14807: ST_TO_ADDR
// end ;
14808: LD_VAR 0 3
14812: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14813: LD_INT 0
14815: PPUSH
14816: PPUSH
14817: PPUSH
14818: PPUSH
// pom := GetBase ( building ) ;
14819: LD_ADDR_VAR 0 3
14823: PUSH
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 274
14833: ST_TO_ADDR
// if not pom then
14834: LD_VAR 0 3
14838: NOT
14839: IFFALSE 14843
// exit ;
14841: GO 15013
// btype := GetBType ( building ) ;
14843: LD_ADDR_VAR 0 5
14847: PUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 266
14857: ST_TO_ADDR
// if btype = b_armoury then
14858: LD_VAR 0 5
14862: PUSH
14863: LD_INT 4
14865: EQUAL
14866: IFFALSE 14876
// btype := b_barracks ;
14868: LD_ADDR_VAR 0 5
14872: PUSH
14873: LD_INT 5
14875: ST_TO_ADDR
// if btype = b_depot then
14876: LD_VAR 0 5
14880: PUSH
14881: LD_INT 0
14883: EQUAL
14884: IFFALSE 14894
// btype := b_warehouse ;
14886: LD_ADDR_VAR 0 5
14890: PUSH
14891: LD_INT 1
14893: ST_TO_ADDR
// if btype = b_workshop then
14894: LD_VAR 0 5
14898: PUSH
14899: LD_INT 2
14901: EQUAL
14902: IFFALSE 14912
// btype := b_factory ;
14904: LD_ADDR_VAR 0 5
14908: PUSH
14909: LD_INT 3
14911: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14912: LD_ADDR_VAR 0 4
14916: PUSH
14917: LD_VAR 0 5
14921: PPUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 248
14931: PPUSH
14932: CALL_OW 450
14936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14937: LD_ADDR_VAR 0 2
14941: PUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 275
14954: PUSH
14955: LD_VAR 0 4
14959: PUSH
14960: LD_INT 1
14962: ARRAY
14963: GREATEREQUAL
14964: PUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: LD_INT 2
14972: PPUSH
14973: CALL_OW 275
14977: PUSH
14978: LD_VAR 0 4
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: GREATEREQUAL
14987: AND
14988: PUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: LD_INT 3
14996: PPUSH
14997: CALL_OW 275
15001: PUSH
15002: LD_VAR 0 4
15006: PUSH
15007: LD_INT 3
15009: ARRAY
15010: GREATEREQUAL
15011: AND
15012: ST_TO_ADDR
// end ;
15013: LD_VAR 0 2
15017: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15018: LD_INT 0
15020: PPUSH
15021: PPUSH
15022: PPUSH
// pom := GetBase ( building ) ;
15023: LD_ADDR_VAR 0 4
15027: PUSH
15028: LD_VAR 0 1
15032: PPUSH
15033: CALL_OW 274
15037: ST_TO_ADDR
// if not pom then
15038: LD_VAR 0 4
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15148
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15047: LD_ADDR_VAR 0 5
15051: PUSH
15052: LD_VAR 0 2
15056: PPUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 248
15066: PPUSH
15067: CALL_OW 450
15071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15072: LD_ADDR_VAR 0 3
15076: PUSH
15077: LD_VAR 0 4
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 275
15089: PUSH
15090: LD_VAR 0 5
15094: PUSH
15095: LD_INT 1
15097: ARRAY
15098: GREATEREQUAL
15099: PUSH
15100: LD_VAR 0 4
15104: PPUSH
15105: LD_INT 2
15107: PPUSH
15108: CALL_OW 275
15112: PUSH
15113: LD_VAR 0 5
15117: PUSH
15118: LD_INT 2
15120: ARRAY
15121: GREATEREQUAL
15122: AND
15123: PUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: CALL_OW 275
15136: PUSH
15137: LD_VAR 0 5
15141: PUSH
15142: LD_INT 3
15144: ARRAY
15145: GREATEREQUAL
15146: AND
15147: ST_TO_ADDR
// end ;
15148: LD_VAR 0 3
15152: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15153: LD_INT 0
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
// result := false ;
15166: LD_ADDR_VAR 0 8
15170: PUSH
15171: LD_INT 0
15173: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15174: LD_VAR 0 5
15178: NOT
15179: PUSH
15180: LD_VAR 0 1
15184: NOT
15185: OR
15186: PUSH
15187: LD_VAR 0 2
15191: NOT
15192: OR
15193: PUSH
15194: LD_VAR 0 3
15198: NOT
15199: OR
15200: IFFALSE 15204
// exit ;
15202: GO 16018
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15204: LD_ADDR_VAR 0 14
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_VAR 0 2
15218: PPUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_VAR 0 4
15228: PPUSH
15229: LD_VAR 0 5
15233: PUSH
15234: LD_INT 1
15236: ARRAY
15237: PPUSH
15238: CALL_OW 248
15242: PPUSH
15243: LD_INT 0
15245: PPUSH
15246: CALL 17271 0 6
15250: ST_TO_ADDR
// if not hexes then
15251: LD_VAR 0 14
15255: NOT
15256: IFFALSE 15260
// exit ;
15258: GO 16018
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15260: LD_ADDR_VAR 0 17
15264: PUSH
15265: LD_VAR 0 5
15269: PPUSH
15270: LD_INT 22
15272: PUSH
15273: LD_VAR 0 13
15277: PPUSH
15278: CALL_OW 255
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: LD_INT 30
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 30
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 72
15323: ST_TO_ADDR
// for i = 1 to hexes do
15324: LD_ADDR_VAR 0 9
15328: PUSH
15329: DOUBLE
15330: LD_INT 1
15332: DEC
15333: ST_TO_ADDR
15334: LD_VAR 0 14
15338: PUSH
15339: FOR_TO
15340: IFFALSE 16016
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15342: LD_ADDR_VAR 0 13
15346: PUSH
15347: LD_VAR 0 14
15351: PUSH
15352: LD_VAR 0 9
15356: ARRAY
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PPUSH
15362: LD_VAR 0 14
15366: PUSH
15367: LD_VAR 0 9
15371: ARRAY
15372: PUSH
15373: LD_INT 2
15375: ARRAY
15376: PPUSH
15377: CALL_OW 428
15381: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15382: LD_VAR 0 14
15386: PUSH
15387: LD_VAR 0 9
15391: ARRAY
15392: PUSH
15393: LD_INT 1
15395: ARRAY
15396: PPUSH
15397: LD_VAR 0 14
15401: PUSH
15402: LD_VAR 0 9
15406: ARRAY
15407: PUSH
15408: LD_INT 2
15410: ARRAY
15411: PPUSH
15412: CALL_OW 351
15416: PUSH
15417: LD_VAR 0 14
15421: PUSH
15422: LD_VAR 0 9
15426: ARRAY
15427: PUSH
15428: LD_INT 1
15430: ARRAY
15431: PPUSH
15432: LD_VAR 0 14
15436: PUSH
15437: LD_VAR 0 9
15441: ARRAY
15442: PUSH
15443: LD_INT 2
15445: ARRAY
15446: PPUSH
15447: CALL_OW 488
15451: NOT
15452: OR
15453: PUSH
15454: LD_VAR 0 13
15458: PPUSH
15459: CALL_OW 247
15463: PUSH
15464: LD_INT 3
15466: EQUAL
15467: OR
15468: IFFALSE 15474
// exit ;
15470: POP
15471: POP
15472: GO 16018
// if not tmp then
15474: LD_VAR 0 13
15478: NOT
15479: IFFALSE 15483
// continue ;
15481: GO 15339
// result := true ;
15483: LD_ADDR_VAR 0 8
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15491: LD_VAR 0 6
15495: PUSH
15496: LD_VAR 0 13
15500: PPUSH
15501: CALL_OW 247
15505: PUSH
15506: LD_INT 2
15508: EQUAL
15509: AND
15510: PUSH
15511: LD_VAR 0 13
15515: PPUSH
15516: CALL_OW 263
15520: PUSH
15521: LD_INT 1
15523: EQUAL
15524: AND
15525: IFFALSE 15689
// begin if IsDrivenBy ( tmp ) then
15527: LD_VAR 0 13
15531: PPUSH
15532: CALL_OW 311
15536: IFFALSE 15540
// continue ;
15538: GO 15339
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15540: LD_VAR 0 6
15544: PPUSH
15545: LD_INT 3
15547: PUSH
15548: LD_INT 60
15550: PUSH
15551: EMPTY
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: LD_INT 55
15563: PUSH
15564: EMPTY
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 72
15579: IFFALSE 15687
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15581: LD_ADDR_VAR 0 18
15585: PUSH
15586: LD_VAR 0 6
15590: PPUSH
15591: LD_INT 3
15593: PUSH
15594: LD_INT 60
15596: PUSH
15597: EMPTY
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 3
15606: PUSH
15607: LD_INT 55
15609: PUSH
15610: EMPTY
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 72
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: ST_TO_ADDR
// if IsInUnit ( driver ) then
15630: LD_VAR 0 18
15634: PPUSH
15635: CALL_OW 310
15639: IFFALSE 15650
// ComExit ( driver ) ;
15641: LD_VAR 0 18
15645: PPUSH
15646: CALL 41072 0 1
// AddComEnterUnit ( driver , tmp ) ;
15650: LD_VAR 0 18
15654: PPUSH
15655: LD_VAR 0 13
15659: PPUSH
15660: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15664: LD_VAR 0 18
15668: PPUSH
15669: LD_VAR 0 7
15673: PPUSH
15674: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15678: LD_VAR 0 18
15682: PPUSH
15683: CALL_OW 181
// end ; continue ;
15687: GO 15339
// end ; if not cleaners or not tmp in cleaners then
15689: LD_VAR 0 6
15693: NOT
15694: PUSH
15695: LD_VAR 0 13
15699: PUSH
15700: LD_VAR 0 6
15704: IN
15705: NOT
15706: OR
15707: IFFALSE 16014
// begin if dep then
15709: LD_VAR 0 17
15713: IFFALSE 15849
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15715: LD_ADDR_VAR 0 16
15719: PUSH
15720: LD_VAR 0 17
15724: PUSH
15725: LD_INT 1
15727: ARRAY
15728: PPUSH
15729: CALL_OW 250
15733: PPUSH
15734: LD_VAR 0 17
15738: PUSH
15739: LD_INT 1
15741: ARRAY
15742: PPUSH
15743: CALL_OW 254
15747: PPUSH
15748: LD_INT 5
15750: PPUSH
15751: CALL_OW 272
15755: PUSH
15756: LD_VAR 0 17
15760: PUSH
15761: LD_INT 1
15763: ARRAY
15764: PPUSH
15765: CALL_OW 251
15769: PPUSH
15770: LD_VAR 0 17
15774: PUSH
15775: LD_INT 1
15777: ARRAY
15778: PPUSH
15779: CALL_OW 254
15783: PPUSH
15784: LD_INT 5
15786: PPUSH
15787: CALL_OW 273
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15796: LD_VAR 0 16
15800: PUSH
15801: LD_INT 1
15803: ARRAY
15804: PPUSH
15805: LD_VAR 0 16
15809: PUSH
15810: LD_INT 2
15812: ARRAY
15813: PPUSH
15814: CALL_OW 488
15818: IFFALSE 15849
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15820: LD_VAR 0 13
15824: PPUSH
15825: LD_VAR 0 16
15829: PUSH
15830: LD_INT 1
15832: ARRAY
15833: PPUSH
15834: LD_VAR 0 16
15838: PUSH
15839: LD_INT 2
15841: ARRAY
15842: PPUSH
15843: CALL_OW 111
// continue ;
15847: GO 15339
// end ; end ; r := GetDir ( tmp ) ;
15849: LD_ADDR_VAR 0 15
15853: PUSH
15854: LD_VAR 0 13
15858: PPUSH
15859: CALL_OW 254
15863: ST_TO_ADDR
// if r = 5 then
15864: LD_VAR 0 15
15868: PUSH
15869: LD_INT 5
15871: EQUAL
15872: IFFALSE 15882
// r := 0 ;
15874: LD_ADDR_VAR 0 15
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// for j = r to 5 do
15882: LD_ADDR_VAR 0 10
15886: PUSH
15887: DOUBLE
15888: LD_VAR 0 15
15892: DEC
15893: ST_TO_ADDR
15894: LD_INT 5
15896: PUSH
15897: FOR_TO
15898: IFFALSE 16012
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15900: LD_ADDR_VAR 0 11
15904: PUSH
15905: LD_VAR 0 13
15909: PPUSH
15910: CALL_OW 250
15914: PPUSH
15915: LD_VAR 0 10
15919: PPUSH
15920: LD_INT 2
15922: PPUSH
15923: CALL_OW 272
15927: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15928: LD_ADDR_VAR 0 12
15932: PUSH
15933: LD_VAR 0 13
15937: PPUSH
15938: CALL_OW 251
15942: PPUSH
15943: LD_VAR 0 10
15947: PPUSH
15948: LD_INT 2
15950: PPUSH
15951: CALL_OW 273
15955: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15956: LD_VAR 0 11
15960: PPUSH
15961: LD_VAR 0 12
15965: PPUSH
15966: CALL_OW 488
15970: PUSH
15971: LD_VAR 0 11
15975: PPUSH
15976: LD_VAR 0 12
15980: PPUSH
15981: CALL_OW 428
15985: NOT
15986: AND
15987: IFFALSE 16010
// begin ComMoveXY ( tmp , _x , _y ) ;
15989: LD_VAR 0 13
15993: PPUSH
15994: LD_VAR 0 11
15998: PPUSH
15999: LD_VAR 0 12
16003: PPUSH
16004: CALL_OW 111
// break ;
16008: GO 16012
// end ; end ;
16010: GO 15897
16012: POP
16013: POP
// end ; end ;
16014: GO 15339
16016: POP
16017: POP
// end ;
16018: LD_VAR 0 8
16022: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16023: LD_INT 0
16025: PPUSH
// result := true ;
16026: LD_ADDR_VAR 0 3
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 24
16041: DOUBLE
16042: EQUAL
16043: IFTRUE 16053
16045: LD_INT 33
16047: DOUBLE
16048: EQUAL
16049: IFTRUE 16053
16051: GO 16078
16053: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16054: LD_ADDR_VAR 0 3
16058: PUSH
16059: LD_INT 32
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 321
16071: PUSH
16072: LD_INT 2
16074: EQUAL
16075: ST_TO_ADDR
16076: GO 16394
16078: LD_INT 20
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16111
16086: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_INT 6
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 321
16104: PUSH
16105: LD_INT 2
16107: EQUAL
16108: ST_TO_ADDR
16109: GO 16394
16111: LD_INT 22
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16125
16117: LD_INT 36
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16150
16125: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 15
16133: PPUSH
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 321
16143: PUSH
16144: LD_INT 2
16146: EQUAL
16147: ST_TO_ADDR
16148: GO 16394
16150: LD_INT 30
16152: DOUBLE
16153: EQUAL
16154: IFTRUE 16158
16156: GO 16183
16158: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16159: LD_ADDR_VAR 0 3
16163: PUSH
16164: LD_INT 20
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 321
16176: PUSH
16177: LD_INT 2
16179: EQUAL
16180: ST_TO_ADDR
16181: GO 16394
16183: LD_INT 28
16185: DOUBLE
16186: EQUAL
16187: IFTRUE 16197
16189: LD_INT 21
16191: DOUBLE
16192: EQUAL
16193: IFTRUE 16197
16195: GO 16222
16197: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16198: LD_ADDR_VAR 0 3
16202: PUSH
16203: LD_INT 21
16205: PPUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 321
16215: PUSH
16216: LD_INT 2
16218: EQUAL
16219: ST_TO_ADDR
16220: GO 16394
16222: LD_INT 16
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16230
16228: GO 16255
16230: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_INT 84
16238: PPUSH
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 321
16248: PUSH
16249: LD_INT 2
16251: EQUAL
16252: ST_TO_ADDR
16253: GO 16394
16255: LD_INT 19
16257: DOUBLE
16258: EQUAL
16259: IFTRUE 16269
16261: LD_INT 23
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16294
16269: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_INT 83
16277: PPUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 321
16287: PUSH
16288: LD_INT 2
16290: EQUAL
16291: ST_TO_ADDR
16292: GO 16394
16294: LD_INT 17
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16302
16300: GO 16327
16302: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16303: LD_ADDR_VAR 0 3
16307: PUSH
16308: LD_INT 39
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 321
16320: PUSH
16321: LD_INT 2
16323: EQUAL
16324: ST_TO_ADDR
16325: GO 16394
16327: LD_INT 18
16329: DOUBLE
16330: EQUAL
16331: IFTRUE 16335
16333: GO 16360
16335: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16336: LD_ADDR_VAR 0 3
16340: PUSH
16341: LD_INT 40
16343: PPUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 321
16353: PUSH
16354: LD_INT 2
16356: EQUAL
16357: ST_TO_ADDR
16358: GO 16394
16360: LD_INT 27
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16393
16368: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_INT 35
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 321
16386: PUSH
16387: LD_INT 2
16389: EQUAL
16390: ST_TO_ADDR
16391: GO 16394
16393: POP
// end ;
16394: LD_VAR 0 3
16398: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16399: LD_INT 0
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
// result := false ;
16412: LD_ADDR_VAR 0 6
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// if btype = b_depot then
16420: LD_VAR 0 2
16424: PUSH
16425: LD_INT 0
16427: EQUAL
16428: IFFALSE 16440
// begin result := true ;
16430: LD_ADDR_VAR 0 6
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// exit ;
16438: GO 17266
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16440: LD_VAR 0 1
16444: NOT
16445: PUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 266
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: IN
16466: NOT
16467: OR
16468: PUSH
16469: LD_VAR 0 2
16473: NOT
16474: OR
16475: PUSH
16476: LD_VAR 0 5
16480: PUSH
16481: LD_INT 0
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: LD_INT 4
16495: PUSH
16496: LD_INT 5
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: IN
16507: NOT
16508: OR
16509: PUSH
16510: LD_VAR 0 3
16514: PPUSH
16515: LD_VAR 0 4
16519: PPUSH
16520: CALL_OW 488
16524: NOT
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 17266
// side := GetSide ( depot ) ;
16530: LD_ADDR_VAR 0 9
16534: PUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 255
16544: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16545: LD_VAR 0 9
16549: PPUSH
16550: LD_VAR 0 2
16554: PPUSH
16555: CALL 16023 0 2
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 17266
// pom := GetBase ( depot ) ;
16564: LD_ADDR_VAR 0 10
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 274
16578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16579: LD_ADDR_VAR 0 11
16583: PUSH
16584: LD_VAR 0 2
16588: PPUSH
16589: LD_VAR 0 1
16593: PPUSH
16594: CALL_OW 248
16598: PPUSH
16599: CALL_OW 450
16603: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16604: LD_VAR 0 10
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: CALL_OW 275
16616: PUSH
16617: LD_VAR 0 11
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: GREATEREQUAL
16626: PUSH
16627: LD_VAR 0 10
16631: PPUSH
16632: LD_INT 2
16634: PPUSH
16635: CALL_OW 275
16639: PUSH
16640: LD_VAR 0 11
16644: PUSH
16645: LD_INT 2
16647: ARRAY
16648: GREATEREQUAL
16649: AND
16650: PUSH
16651: LD_VAR 0 10
16655: PPUSH
16656: LD_INT 3
16658: PPUSH
16659: CALL_OW 275
16663: PUSH
16664: LD_VAR 0 11
16668: PUSH
16669: LD_INT 3
16671: ARRAY
16672: GREATEREQUAL
16673: AND
16674: NOT
16675: IFFALSE 16679
// exit ;
16677: GO 17266
// if GetBType ( depot ) = b_depot then
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 266
16688: PUSH
16689: LD_INT 0
16691: EQUAL
16692: IFFALSE 16704
// dist := 28 else
16694: LD_ADDR_VAR 0 14
16698: PUSH
16699: LD_INT 28
16701: ST_TO_ADDR
16702: GO 16712
// dist := 36 ;
16704: LD_ADDR_VAR 0 14
16708: PUSH
16709: LD_INT 36
16711: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_VAR 0 4
16726: PPUSH
16727: CALL_OW 297
16731: PUSH
16732: LD_VAR 0 14
16736: GREATER
16737: IFFALSE 16741
// exit ;
16739: GO 17266
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16741: LD_ADDR_VAR 0 12
16745: PUSH
16746: LD_VAR 0 2
16750: PPUSH
16751: LD_VAR 0 3
16755: PPUSH
16756: LD_VAR 0 4
16760: PPUSH
16761: LD_VAR 0 5
16765: PPUSH
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 248
16775: PPUSH
16776: LD_INT 0
16778: PPUSH
16779: CALL 17271 0 6
16783: ST_TO_ADDR
// if not hexes then
16784: LD_VAR 0 12
16788: NOT
16789: IFFALSE 16793
// exit ;
16791: GO 17266
// hex := GetHexInfo ( x , y ) ;
16793: LD_ADDR_VAR 0 15
16797: PUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_VAR 0 4
16807: PPUSH
16808: CALL_OW 546
16812: ST_TO_ADDR
// if hex [ 1 ] then
16813: LD_VAR 0 15
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: IFFALSE 16825
// exit ;
16823: GO 17266
// height := hex [ 2 ] ;
16825: LD_ADDR_VAR 0 13
16829: PUSH
16830: LD_VAR 0 15
16834: PUSH
16835: LD_INT 2
16837: ARRAY
16838: ST_TO_ADDR
// for i = 1 to hexes do
16839: LD_ADDR_VAR 0 7
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_VAR 0 12
16853: PUSH
16854: FOR_TO
16855: IFFALSE 17185
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16857: LD_VAR 0 12
16861: PUSH
16862: LD_VAR 0 7
16866: ARRAY
16867: PUSH
16868: LD_INT 1
16870: ARRAY
16871: PPUSH
16872: LD_VAR 0 12
16876: PUSH
16877: LD_VAR 0 7
16881: ARRAY
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: PPUSH
16887: CALL_OW 488
16891: NOT
16892: PUSH
16893: LD_VAR 0 12
16897: PUSH
16898: LD_VAR 0 7
16902: ARRAY
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PPUSH
16908: LD_VAR 0 12
16912: PUSH
16913: LD_VAR 0 7
16917: ARRAY
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PPUSH
16923: CALL_OW 428
16927: PUSH
16928: LD_INT 0
16930: GREATER
16931: OR
16932: PUSH
16933: LD_VAR 0 12
16937: PUSH
16938: LD_VAR 0 7
16942: ARRAY
16943: PUSH
16944: LD_INT 1
16946: ARRAY
16947: PPUSH
16948: LD_VAR 0 12
16952: PUSH
16953: LD_VAR 0 7
16957: ARRAY
16958: PUSH
16959: LD_INT 2
16961: ARRAY
16962: PPUSH
16963: CALL_OW 351
16967: OR
16968: IFFALSE 16974
// exit ;
16970: POP
16971: POP
16972: GO 17266
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16974: LD_ADDR_VAR 0 8
16978: PUSH
16979: LD_VAR 0 12
16983: PUSH
16984: LD_VAR 0 7
16988: ARRAY
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: LD_VAR 0 12
16998: PUSH
16999: LD_VAR 0 7
17003: ARRAY
17004: PUSH
17005: LD_INT 2
17007: ARRAY
17008: PPUSH
17009: CALL_OW 546
17013: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17014: LD_VAR 0 8
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PUSH
17023: LD_VAR 0 8
17027: PUSH
17028: LD_INT 2
17030: ARRAY
17031: PUSH
17032: LD_VAR 0 13
17036: PUSH
17037: LD_INT 2
17039: PLUS
17040: GREATER
17041: OR
17042: PUSH
17043: LD_VAR 0 8
17047: PUSH
17048: LD_INT 2
17050: ARRAY
17051: PUSH
17052: LD_VAR 0 13
17056: PUSH
17057: LD_INT 2
17059: MINUS
17060: LESS
17061: OR
17062: PUSH
17063: LD_VAR 0 8
17067: PUSH
17068: LD_INT 3
17070: ARRAY
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: LD_INT 8
17077: PUSH
17078: LD_INT 9
17080: PUSH
17081: LD_INT 10
17083: PUSH
17084: LD_INT 11
17086: PUSH
17087: LD_INT 12
17089: PUSH
17090: LD_INT 13
17092: PUSH
17093: LD_INT 16
17095: PUSH
17096: LD_INT 17
17098: PUSH
17099: LD_INT 18
17101: PUSH
17102: LD_INT 19
17104: PUSH
17105: LD_INT 20
17107: PUSH
17108: LD_INT 21
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: IN
17126: NOT
17127: OR
17128: PUSH
17129: LD_VAR 0 8
17133: PUSH
17134: LD_INT 5
17136: ARRAY
17137: NOT
17138: OR
17139: PUSH
17140: LD_VAR 0 8
17144: PUSH
17145: LD_INT 6
17147: ARRAY
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 7
17157: PUSH
17158: LD_INT 9
17160: PUSH
17161: LD_INT 10
17163: PUSH
17164: LD_INT 11
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: IN
17175: NOT
17176: OR
17177: IFFALSE 17183
// exit ;
17179: POP
17180: POP
17181: GO 17266
// end ;
17183: GO 16854
17185: POP
17186: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17187: LD_VAR 0 9
17191: PPUSH
17192: LD_VAR 0 3
17196: PPUSH
17197: LD_VAR 0 4
17201: PPUSH
17202: LD_INT 20
17204: PPUSH
17205: CALL 9189 0 4
17209: PUSH
17210: LD_INT 4
17212: ARRAY
17213: IFFALSE 17217
// exit ;
17215: GO 17266
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17217: LD_VAR 0 2
17221: PUSH
17222: LD_INT 29
17224: PUSH
17225: LD_INT 30
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: IN
17232: PUSH
17233: LD_VAR 0 3
17237: PPUSH
17238: LD_VAR 0 4
17242: PPUSH
17243: LD_VAR 0 9
17247: PPUSH
17248: CALL_OW 440
17252: NOT
17253: AND
17254: IFFALSE 17258
// exit ;
17256: GO 17266
// result := true ;
17258: LD_ADDR_VAR 0 6
17262: PUSH
17263: LD_INT 1
17265: ST_TO_ADDR
// end ;
17266: LD_VAR 0 6
17270: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17271: LD_INT 0
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
// result = [ ] ;
17331: LD_ADDR_VAR 0 7
17335: PUSH
17336: EMPTY
17337: ST_TO_ADDR
// temp_list = [ ] ;
17338: LD_ADDR_VAR 0 9
17342: PUSH
17343: EMPTY
17344: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17345: LD_VAR 0 4
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: LD_INT 4
17364: PUSH
17365: LD_INT 5
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: IN
17376: NOT
17377: PUSH
17378: LD_VAR 0 1
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: IN
17393: PUSH
17394: LD_VAR 0 5
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: IN
17413: NOT
17414: AND
17415: OR
17416: IFFALSE 17420
// exit ;
17418: GO 35811
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17420: LD_VAR 0 1
17424: PUSH
17425: LD_INT 6
17427: PUSH
17428: LD_INT 7
17430: PUSH
17431: LD_INT 8
17433: PUSH
17434: LD_INT 13
17436: PUSH
17437: LD_INT 12
17439: PUSH
17440: LD_INT 15
17442: PUSH
17443: LD_INT 11
17445: PUSH
17446: LD_INT 14
17448: PUSH
17449: LD_INT 10
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: IN
17463: IFFALSE 17473
// btype = b_lab ;
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: LD_INT 6
17472: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17473: LD_VAR 0 6
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: IN
17492: NOT
17493: PUSH
17494: LD_VAR 0 1
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 2
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: LD_INT 6
17513: PUSH
17514: LD_INT 36
17516: PUSH
17517: LD_INT 4
17519: PUSH
17520: LD_INT 5
17522: PUSH
17523: LD_INT 31
17525: PUSH
17526: LD_INT 32
17528: PUSH
17529: LD_INT 33
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: IN
17545: NOT
17546: PUSH
17547: LD_VAR 0 6
17551: PUSH
17552: LD_INT 1
17554: EQUAL
17555: AND
17556: OR
17557: PUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: IN
17573: NOT
17574: PUSH
17575: LD_VAR 0 6
17579: PUSH
17580: LD_INT 2
17582: EQUAL
17583: AND
17584: OR
17585: IFFALSE 17595
// mode = 0 ;
17587: LD_ADDR_VAR 0 6
17591: PUSH
17592: LD_INT 0
17594: ST_TO_ADDR
// case mode of 0 :
17595: LD_VAR 0 6
17599: PUSH
17600: LD_INT 0
17602: DOUBLE
17603: EQUAL
17604: IFTRUE 17608
17606: GO 29061
17608: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17609: LD_ADDR_VAR 0 11
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 1
17690: NEG
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 2
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 1
17716: NEG
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: LD_INT 2
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 1
17744: NEG
17745: PUSH
17746: LD_INT 1
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: LD_INT 3
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: LD_INT 3
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 1
17775: NEG
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17802: LD_ADDR_VAR 0 12
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: LD_INT 1
17822: NEG
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: NEG
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: NEG
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 2
17925: NEG
17926: PUSH
17927: LD_INT 0
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: LD_INT 1
17940: NEG
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 2
17948: NEG
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 3
17959: NEG
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 3
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17998: LD_ADDR_VAR 0 13
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 1
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: LD_INT 1
18071: NEG
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 1
18079: NEG
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: LD_INT 1
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 2
18121: NEG
18122: PUSH
18123: LD_INT 1
18125: NEG
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 2
18133: NEG
18134: PUSH
18135: LD_INT 2
18137: NEG
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: LD_INT 3
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 3
18157: NEG
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 3
18169: NEG
18170: PUSH
18171: LD_INT 3
18173: NEG
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18197: LD_ADDR_VAR 0 14
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 1
18278: NEG
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: LD_INT 2
18293: NEG
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: LD_INT 1
18304: NEG
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: LD_INT 3
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: LD_INT 3
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: LD_INT 2
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18393: LD_ADDR_VAR 0 15
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: LD_INT 1
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 3
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18586: LD_ADDR_VAR 0 16
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: LD_INT 2
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18779: LD_ADDR_VAR 0 17
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: NEG
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 2
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: NEG
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: NEG
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 2
18978: NEG
18979: PUSH
18980: LD_INT 2
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19009: LD_ADDR_VAR 0 18
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: NEG
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: LD_INT 2
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: LD_INT 2
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: NEG
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: NEG
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 2
19208: NEG
19209: PUSH
19210: LD_INT 2
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19239: LD_ADDR_VAR 0 19
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: LD_INT 1
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: NEG
19321: PUSH
19322: LD_INT 2
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: NEG
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19469: LD_ADDR_VAR 0 20
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: LD_INT 2
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19699: LD_ADDR_VAR 0 21
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: NEG
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: LD_INT 2
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: NEG
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19929: LD_ADDR_VAR 0 22
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: NEG
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: LD_INT 2
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 2
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20159: LD_ADDR_VAR 0 23
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: NEG
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: NEG
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 0
20252: PUSH
20253: LD_INT 2
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: NEG
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: NEG
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: LD_INT 3
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 3
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20439: LD_ADDR_VAR 0 24
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 0
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: LD_INT 1
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: LD_INT 2
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 2
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: LD_INT 2
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 2
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 3
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20715: LD_ADDR_VAR 0 25
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 2
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 2
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 1
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 2
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: NEG
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 3
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 3
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 3
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20989: LD_ADDR_VAR 0 26
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: LD_INT 1
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 2
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 2
21176: NEG
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: NEG
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 3
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: LD_INT 3
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21265: LD_ADDR_VAR 0 27
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: NEG
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: NEG
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 3
21498: NEG
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 3
21510: NEG
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21545: LD_ADDR_VAR 0 28
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 2
21756: NEG
21757: PUSH
21758: LD_INT 3
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 3
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 3
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 3
21792: NEG
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21827: LD_ADDR_VAR 0 29
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: LD_INT 2
21912: NEG
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 2
22005: NEG
22006: PUSH
22007: LD_INT 2
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: NEG
22018: PUSH
22019: LD_INT 3
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 3
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 3
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 3
22071: NEG
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22106: LD_ADDR_VAR 0 30
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 3
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 3
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: NEG
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 3
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22384: LD_ADDR_VAR 0 31
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 2
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: LD_INT 3
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 3
22627: NEG
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22662: LD_ADDR_VAR 0 32
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: LD_INT 1
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 2
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: NEG
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 3
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: LD_INT 2
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 3
22905: NEG
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22940: LD_ADDR_VAR 0 33
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: LD_INT 3
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 3
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 3
23184: NEG
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23219: LD_ADDR_VAR 0 34
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 2
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 3
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 3
23464: NEG
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23499: LD_ADDR_VAR 0 35
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23611: LD_ADDR_VAR 0 36
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 2
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23723: LD_ADDR_VAR 0 37
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23835: LD_ADDR_VAR 0 38
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: NEG
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23947: LD_ADDR_VAR 0 39
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 1
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24059: LD_ADDR_VAR 0 40
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24171: LD_ADDR_VAR 0 41
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: NEG
24362: PUSH
24363: LD_INT 3
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 3
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 3
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 3
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 3
24414: PUSH
24415: LD_INT 3
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 3
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: NEG
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 3
24445: NEG
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 3
24456: NEG
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 3
24468: NEG
24469: PUSH
24470: LD_INT 2
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 3
24480: NEG
24481: PUSH
24482: LD_INT 3
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24521: LD_ADDR_VAR 0 42
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 2
24711: NEG
24712: PUSH
24713: LD_INT 3
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 3
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 3
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 2
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 3
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 3
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 3
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 3
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 3
24818: NEG
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: NEG
24831: PUSH
24832: LD_INT 3
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24871: LD_ADDR_VAR 0 43
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 2
24967: NEG
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: LD_INT 3
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: LD_INT 3
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 3
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 3
25167: NEG
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25219: LD_ADDR_VAR 0 44
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 3
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 3
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 3
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 3
25493: NEG
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 3
25516: NEG
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 3
25528: NEG
25529: PUSH
25530: LD_INT 3
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25569: LD_ADDR_VAR 0 45
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 2
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: LD_INT 3
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 3
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 3
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 2
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 3
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 3
25866: NEG
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: NEG
25879: PUSH
25880: LD_INT 3
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25919: LD_ADDR_VAR 0 46
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: LD_INT 3
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 3
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26267: LD_ADDR_VAR 0 47
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26418: LD_ADDR_VAR 0 48
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26565: LD_ADDR_VAR 0 49
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26709: LD_ADDR_VAR 0 50
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26853: LD_ADDR_VAR 0 51
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: NEG
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27000: LD_ADDR_VAR 0 52
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 2
27104: NEG
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 2
27127: NEG
27128: PUSH
27129: LD_INT 2
27131: NEG
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27151: LD_ADDR_VAR 0 53
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27381: LD_ADDR_VAR 0 54
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 2
27580: NEG
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27611: LD_ADDR_VAR 0 55
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 2
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 2
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 2
27810: NEG
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27841: LD_ADDR_VAR 0 56
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: NEG
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 2
28040: NEG
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28071: LD_ADDR_VAR 0 57
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: LD_INT 2
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28301: LD_ADDR_VAR 0 58
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28531: LD_ADDR_VAR 0 59
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28619: LD_ADDR_VAR 0 60
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28707: LD_ADDR_VAR 0 61
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28795: LD_ADDR_VAR 0 62
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28883: LD_ADDR_VAR 0 63
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28971: LD_ADDR_VAR 0 64
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// end ; 1 :
29059: GO 34956
29061: LD_INT 1
29063: DOUBLE
29064: EQUAL
29065: IFTRUE 29069
29067: GO 31692
29069: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29070: LD_ADDR_VAR 0 11
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 3
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 3
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29114: LD_ADDR_VAR 0 12
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29155: LD_ADDR_VAR 0 13
29159: PUSH
29160: LD_INT 3
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: LD_INT 3
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29195: LD_ADDR_VAR 0 14
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 2
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29236: LD_ADDR_VAR 0 15
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 3
29265: NEG
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29280: LD_ADDR_VAR 0 16
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: LD_INT 3
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29326: LD_ADDR_VAR 0 17
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: LD_INT 3
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29370: LD_ADDR_VAR 0 18
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29411: LD_ADDR_VAR 0 19
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29451: LD_ADDR_VAR 0 20
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29492: LD_ADDR_VAR 0 21
29496: PUSH
29497: LD_INT 2
29499: NEG
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 3
29510: NEG
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29536: LD_ADDR_VAR 0 22
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 3
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: LD_INT 2
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 3
29567: NEG
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29582: LD_ADDR_VAR 0 23
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 4
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29626: LD_ADDR_VAR 0 24
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29667: LD_ADDR_VAR 0 25
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 4
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 3
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29707: LD_ADDR_VAR 0 26
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 4
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29748: LD_ADDR_VAR 0 27
29752: PUSH
29753: LD_INT 3
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 4
29777: NEG
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29792: LD_ADDR_VAR 0 28
29796: PUSH
29797: LD_INT 3
29799: NEG
29800: PUSH
29801: LD_INT 3
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: LD_INT 4
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 4
29823: NEG
29824: PUSH
29825: LD_INT 3
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29838: LD_ADDR_VAR 0 29
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: LD_INT 3
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 4
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 4
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 5
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 5
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 4
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 6
29951: NEG
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: LD_INT 6
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 5
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29993: LD_ADDR_VAR 0 30
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 4
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 4
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 5
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 5
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 5
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 6
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 6
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30136: LD_ADDR_VAR 0 31
30140: PUSH
30141: LD_INT 3
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 3
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: LD_INT 3
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 4
30183: PUSH
30184: LD_INT 4
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 3
30193: PUSH
30194: LD_INT 4
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 5
30203: PUSH
30204: LD_INT 4
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 5
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 5
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 6
30233: PUSH
30234: LD_INT 5
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 6
30243: PUSH
30244: LD_INT 6
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 5
30253: PUSH
30254: LD_INT 6
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30275: LD_ADDR_VAR 0 32
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 5
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 4
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: LD_INT 6
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 6
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30418: LD_ADDR_VAR 0 33
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 3
30436: NEG
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 4
30470: NEG
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 4
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 4
30493: NEG
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 5
30504: NEG
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 5
30515: NEG
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 5
30527: NEG
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 6
30538: NEG
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 6
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30573: LD_ADDR_VAR 0 34
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: LD_INT 3
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 3
30604: NEG
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: LD_INT 4
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: LD_INT 3
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: NEG
30641: PUSH
30642: LD_INT 4
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 4
30652: NEG
30653: PUSH
30654: LD_INT 5
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 5
30664: NEG
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 5
30676: NEG
30677: PUSH
30678: LD_INT 5
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: LD_INT 6
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 6
30700: NEG
30701: PUSH
30702: LD_INT 5
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 6
30712: NEG
30713: PUSH
30714: LD_INT 6
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30736: LD_ADDR_VAR 0 41
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30780: LD_ADDR_VAR 0 42
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 2
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30821: LD_ADDR_VAR 0 43
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 3
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30861: LD_ADDR_VAR 0 44
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30902: LD_ADDR_VAR 0 45
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30946: LD_ADDR_VAR 0 46
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: LD_INT 3
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 3
30977: NEG
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30992: LD_ADDR_VAR 0 47
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31025: LD_ADDR_VAR 0 48
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31056: LD_ADDR_VAR 0 49
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31085: LD_ADDR_VAR 0 50
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31114: LD_ADDR_VAR 0 51
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31145: LD_ADDR_VAR 0 52
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: NEG
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31178: LD_ADDR_VAR 0 53
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31222: LD_ADDR_VAR 0 54
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31263: LD_ADDR_VAR 0 55
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31303: LD_ADDR_VAR 0 56
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31344: LD_ADDR_VAR 0 57
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31388: LD_ADDR_VAR 0 58
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: LD_INT 3
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 3
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31434: LD_ADDR_VAR 0 59
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 2
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: LD_INT 2
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31478: LD_ADDR_VAR 0 60
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31519: LD_ADDR_VAR 0 61
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31559: LD_ADDR_VAR 0 62
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31600: LD_ADDR_VAR 0 63
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31644: LD_ADDR_VAR 0 64
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
// end ; 2 :
31690: GO 34956
31692: LD_INT 2
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 34955
31700: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31701: LD_ADDR_VAR 0 29
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 5
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 5
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 4
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: LD_INT 4
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 4
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: LD_INT 5
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 5
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 4
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: NEG
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: NEG
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 3
32029: NEG
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 4
32051: NEG
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 4
32063: NEG
32064: PUSH
32065: LD_INT 2
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 4
32086: NEG
32087: PUSH
32088: LD_INT 4
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: LD_INT 5
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 4
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 4
32134: NEG
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 5
32146: NEG
32147: PUSH
32148: LD_INT 4
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 5
32158: NEG
32159: PUSH
32160: LD_INT 5
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: LD_INT 5
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 5
32182: NEG
32183: PUSH
32184: LD_INT 3
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32239: LD_ADDR_VAR 0 30
32243: PUSH
32244: LD_INT 4
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 5
32266: PUSH
32267: LD_INT 4
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: LD_INT 5
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 4
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 2
32408: PUSH
32409: LD_INT 4
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 4
32429: NEG
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: NEG
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 4
32474: NEG
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 5
32485: NEG
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 5
32496: NEG
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 5
32508: NEG
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 3
32531: NEG
32532: PUSH
32533: LD_INT 3
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: LD_INT 4
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: NEG
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 4
32591: NEG
32592: PUSH
32593: LD_INT 3
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 4
32603: NEG
32604: PUSH
32605: LD_INT 4
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 4
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 4
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 5
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 4
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 3
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 4
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: LD_INT 5
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 3
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: LD_INT 5
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32786: LD_ADDR_VAR 0 31
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 4
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 5
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 5
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 5
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: LD_INT 3
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 3
32886: NEG
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 4
32942: NEG
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 4
32953: NEG
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 4
32965: NEG
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: LD_INT 4
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 4
33000: NEG
33001: PUSH
33002: LD_INT 5
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 4
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: LD_INT 3
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 5
33048: NEG
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 5
33060: NEG
33061: PUSH
33062: LD_INT 5
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: LD_INT 5
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 5
33084: NEG
33085: PUSH
33086: LD_INT 3
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 4
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: NEG
33187: PUSH
33188: LD_INT 4
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 4
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 4
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 5
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 5
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: LD_INT 2
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 5
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33336: LD_ADDR_VAR 0 32
33340: PUSH
33341: LD_INT 4
33343: NEG
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 4
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 3
33366: NEG
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 4
33388: NEG
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 5
33399: NEG
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 5
33410: NEG
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 5
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: LD_INT 4
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: LD_INT 3
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: NEG
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 4
33505: NEG
33506: PUSH
33507: LD_INT 3
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 4
33517: NEG
33518: PUSH
33519: LD_INT 4
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: LD_INT 4
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 4
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 5
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 4
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 3
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 3
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: LD_INT 4
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 5
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 3
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 5
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 4
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 4
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 4
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 4
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 5
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 4
33788: PUSH
33789: LD_INT 5
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 3
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 5
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 3
33828: PUSH
33829: LD_INT 5
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33883: LD_ADDR_VAR 0 33
33887: PUSH
33888: LD_INT 4
33890: NEG
33891: PUSH
33892: LD_INT 4
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 4
33902: NEG
33903: PUSH
33904: LD_INT 5
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 3
33914: NEG
33915: PUSH
33916: LD_INT 4
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 5
33950: NEG
33951: PUSH
33952: LD_INT 4
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 5
33962: NEG
33963: PUSH
33964: LD_INT 5
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 3
33974: NEG
33975: PUSH
33976: LD_INT 5
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 5
33986: NEG
33987: PUSH
33988: LD_INT 3
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 3
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 4
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 2
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 2
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 3
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 4
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 4
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 4
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 5
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 5
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 4
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 5
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 4
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 4
34223: PUSH
34224: LD_INT 4
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 3
34233: PUSH
34234: LD_INT 4
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 3
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 4
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 4
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 4
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 3
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 4
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 5
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 5
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 5
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 3
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34421: LD_ADDR_VAR 0 34
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 4
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: LD_INT 5
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 4
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 3
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 3
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: LD_INT 4
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: LD_INT 5
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 3
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: LD_INT 5
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 4
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 4
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 5
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 5
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 4
34663: PUSH
34664: LD_INT 5
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 3
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 5
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 3
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 4
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 4
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 4
34806: NEG
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 4
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 3
34840: NEG
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 4
34851: NEG
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 5
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 5
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 5
34885: NEG
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: NEG
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
// end ; end ;
34953: GO 34956
34955: POP
// case btype of b_depot , b_warehouse :
34956: LD_VAR 0 1
34960: PUSH
34961: LD_INT 0
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34975
34967: LD_INT 1
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 35176
34975: POP
// case nation of nation_american :
34976: LD_VAR 0 5
34980: PUSH
34981: LD_INT 1
34983: DOUBLE
34984: EQUAL
34985: IFTRUE 34989
34987: GO 35045
34989: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34990: LD_ADDR_VAR 0 9
34994: PUSH
34995: LD_VAR 0 11
34999: PUSH
35000: LD_VAR 0 12
35004: PUSH
35005: LD_VAR 0 13
35009: PUSH
35010: LD_VAR 0 14
35014: PUSH
35015: LD_VAR 0 15
35019: PUSH
35020: LD_VAR 0 16
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: PUSH
35033: LD_VAR 0 4
35037: PUSH
35038: LD_INT 1
35040: PLUS
35041: ARRAY
35042: ST_TO_ADDR
35043: GO 35174
35045: LD_INT 2
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35109
35053: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35054: LD_ADDR_VAR 0 9
35058: PUSH
35059: LD_VAR 0 17
35063: PUSH
35064: LD_VAR 0 18
35068: PUSH
35069: LD_VAR 0 19
35073: PUSH
35074: LD_VAR 0 20
35078: PUSH
35079: LD_VAR 0 21
35083: PUSH
35084: LD_VAR 0 22
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: PUSH
35097: LD_VAR 0 4
35101: PUSH
35102: LD_INT 1
35104: PLUS
35105: ARRAY
35106: ST_TO_ADDR
35107: GO 35174
35109: LD_INT 3
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35173
35117: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35118: LD_ADDR_VAR 0 9
35122: PUSH
35123: LD_VAR 0 23
35127: PUSH
35128: LD_VAR 0 24
35132: PUSH
35133: LD_VAR 0 25
35137: PUSH
35138: LD_VAR 0 26
35142: PUSH
35143: LD_VAR 0 27
35147: PUSH
35148: LD_VAR 0 28
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: LD_VAR 0 4
35165: PUSH
35166: LD_INT 1
35168: PLUS
35169: ARRAY
35170: ST_TO_ADDR
35171: GO 35174
35173: POP
35174: GO 35729
35176: LD_INT 2
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35190
35182: LD_INT 3
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35246
35190: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_VAR 0 29
35200: PUSH
35201: LD_VAR 0 30
35205: PUSH
35206: LD_VAR 0 31
35210: PUSH
35211: LD_VAR 0 32
35215: PUSH
35216: LD_VAR 0 33
35220: PUSH
35221: LD_VAR 0 34
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: PUSH
35234: LD_VAR 0 4
35238: PUSH
35239: LD_INT 1
35241: PLUS
35242: ARRAY
35243: ST_TO_ADDR
35244: GO 35729
35246: LD_INT 16
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35308
35252: LD_INT 17
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35308
35258: LD_INT 18
35260: DOUBLE
35261: EQUAL
35262: IFTRUE 35308
35264: LD_INT 19
35266: DOUBLE
35267: EQUAL
35268: IFTRUE 35308
35270: LD_INT 22
35272: DOUBLE
35273: EQUAL
35274: IFTRUE 35308
35276: LD_INT 20
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35308
35282: LD_INT 21
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35308
35288: LD_INT 23
35290: DOUBLE
35291: EQUAL
35292: IFTRUE 35308
35294: LD_INT 24
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35308
35300: LD_INT 25
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35364
35308: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35309: LD_ADDR_VAR 0 9
35313: PUSH
35314: LD_VAR 0 35
35318: PUSH
35319: LD_VAR 0 36
35323: PUSH
35324: LD_VAR 0 37
35328: PUSH
35329: LD_VAR 0 38
35333: PUSH
35334: LD_VAR 0 39
35338: PUSH
35339: LD_VAR 0 40
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 1
35359: PLUS
35360: ARRAY
35361: ST_TO_ADDR
35362: GO 35729
35364: LD_INT 6
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35420
35370: LD_INT 7
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35420
35376: LD_INT 8
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35420
35382: LD_INT 13
35384: DOUBLE
35385: EQUAL
35386: IFTRUE 35420
35388: LD_INT 12
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35420
35394: LD_INT 15
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35420
35400: LD_INT 11
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35420
35406: LD_INT 14
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35420
35412: LD_INT 10
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35420
35418: GO 35476
35420: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_VAR 0 41
35430: PUSH
35431: LD_VAR 0 42
35435: PUSH
35436: LD_VAR 0 43
35440: PUSH
35441: LD_VAR 0 44
35445: PUSH
35446: LD_VAR 0 45
35450: PUSH
35451: LD_VAR 0 46
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: PUSH
35464: LD_VAR 0 4
35468: PUSH
35469: LD_INT 1
35471: PLUS
35472: ARRAY
35473: ST_TO_ADDR
35474: GO 35729
35476: LD_INT 36
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 35540
35484: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35485: LD_ADDR_VAR 0 9
35489: PUSH
35490: LD_VAR 0 47
35494: PUSH
35495: LD_VAR 0 48
35499: PUSH
35500: LD_VAR 0 49
35504: PUSH
35505: LD_VAR 0 50
35509: PUSH
35510: LD_VAR 0 51
35514: PUSH
35515: LD_VAR 0 52
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: LD_VAR 0 4
35532: PUSH
35533: LD_INT 1
35535: PLUS
35536: ARRAY
35537: ST_TO_ADDR
35538: GO 35729
35540: LD_INT 4
35542: DOUBLE
35543: EQUAL
35544: IFTRUE 35566
35546: LD_INT 5
35548: DOUBLE
35549: EQUAL
35550: IFTRUE 35566
35552: LD_INT 34
35554: DOUBLE
35555: EQUAL
35556: IFTRUE 35566
35558: LD_INT 37
35560: DOUBLE
35561: EQUAL
35562: IFTRUE 35566
35564: GO 35622
35566: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35567: LD_ADDR_VAR 0 9
35571: PUSH
35572: LD_VAR 0 53
35576: PUSH
35577: LD_VAR 0 54
35581: PUSH
35582: LD_VAR 0 55
35586: PUSH
35587: LD_VAR 0 56
35591: PUSH
35592: LD_VAR 0 57
35596: PUSH
35597: LD_VAR 0 58
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: PUSH
35610: LD_VAR 0 4
35614: PUSH
35615: LD_INT 1
35617: PLUS
35618: ARRAY
35619: ST_TO_ADDR
35620: GO 35729
35622: LD_INT 31
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35672
35628: LD_INT 32
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35672
35634: LD_INT 33
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35672
35640: LD_INT 27
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35672
35646: LD_INT 26
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35672
35652: LD_INT 28
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35672
35658: LD_INT 29
35660: DOUBLE
35661: EQUAL
35662: IFTRUE 35672
35664: LD_INT 30
35666: DOUBLE
35667: EQUAL
35668: IFTRUE 35672
35670: GO 35728
35672: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35673: LD_ADDR_VAR 0 9
35677: PUSH
35678: LD_VAR 0 59
35682: PUSH
35683: LD_VAR 0 60
35687: PUSH
35688: LD_VAR 0 61
35692: PUSH
35693: LD_VAR 0 62
35697: PUSH
35698: LD_VAR 0 63
35702: PUSH
35703: LD_VAR 0 64
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: PUSH
35716: LD_VAR 0 4
35720: PUSH
35721: LD_INT 1
35723: PLUS
35724: ARRAY
35725: ST_TO_ADDR
35726: GO 35729
35728: POP
// temp_list2 = [ ] ;
35729: LD_ADDR_VAR 0 10
35733: PUSH
35734: EMPTY
35735: ST_TO_ADDR
// for i in temp_list do
35736: LD_ADDR_VAR 0 8
35740: PUSH
35741: LD_VAR 0 9
35745: PUSH
35746: FOR_IN
35747: IFFALSE 35799
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35749: LD_ADDR_VAR 0 10
35753: PUSH
35754: LD_VAR 0 10
35758: PUSH
35759: LD_VAR 0 8
35763: PUSH
35764: LD_INT 1
35766: ARRAY
35767: PUSH
35768: LD_VAR 0 2
35772: PLUS
35773: PUSH
35774: LD_VAR 0 8
35778: PUSH
35779: LD_INT 2
35781: ARRAY
35782: PUSH
35783: LD_VAR 0 3
35787: PLUS
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: ADD
35796: ST_TO_ADDR
35797: GO 35746
35799: POP
35800: POP
// result = temp_list2 ;
35801: LD_ADDR_VAR 0 7
35805: PUSH
35806: LD_VAR 0 10
35810: ST_TO_ADDR
// end ;
35811: LD_VAR 0 7
35815: RET
// export function EnemyInRange ( unit , dist ) ; begin
35816: LD_INT 0
35818: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35819: LD_ADDR_VAR 0 3
35823: PUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL_OW 255
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: CALL_OW 250
35843: PPUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 251
35853: PPUSH
35854: LD_VAR 0 2
35858: PPUSH
35859: CALL 9189 0 4
35863: PUSH
35864: LD_INT 4
35866: ARRAY
35867: ST_TO_ADDR
// end ;
35868: LD_VAR 0 3
35872: RET
// export function PlayerSeeMe ( unit ) ; begin
35873: LD_INT 0
35875: PPUSH
// result := See ( your_side , unit ) ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_OWVAR 2
35885: PPUSH
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 292
35895: ST_TO_ADDR
// end ;
35896: LD_VAR 0 2
35900: RET
// export function ReverseDir ( unit ) ; begin
35901: LD_INT 0
35903: PPUSH
// if not unit then
35904: LD_VAR 0 1
35908: NOT
35909: IFFALSE 35913
// exit ;
35911: GO 35936
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35913: LD_ADDR_VAR 0 2
35917: PUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 254
35927: PUSH
35928: LD_INT 3
35930: PLUS
35931: PUSH
35932: LD_INT 6
35934: MOD
35935: ST_TO_ADDR
// end ;
35936: LD_VAR 0 2
35940: RET
// export function ReverseArray ( array ) ; var i ; begin
35941: LD_INT 0
35943: PPUSH
35944: PPUSH
// if not array then
35945: LD_VAR 0 1
35949: NOT
35950: IFFALSE 35954
// exit ;
35952: GO 36009
// result := [ ] ;
35954: LD_ADDR_VAR 0 2
35958: PUSH
35959: EMPTY
35960: ST_TO_ADDR
// for i := array downto 1 do
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: DOUBLE
35967: LD_VAR 0 1
35971: INC
35972: ST_TO_ADDR
35973: LD_INT 1
35975: PUSH
35976: FOR_DOWNTO
35977: IFFALSE 36007
// result := Join ( result , array [ i ] ) ;
35979: LD_ADDR_VAR 0 2
35983: PUSH
35984: LD_VAR 0 2
35988: PPUSH
35989: LD_VAR 0 1
35993: PUSH
35994: LD_VAR 0 3
35998: ARRAY
35999: PPUSH
36000: CALL 40674 0 2
36004: ST_TO_ADDR
36005: GO 35976
36007: POP
36008: POP
// end ;
36009: LD_VAR 0 2
36013: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36014: LD_INT 0
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
// if not unit or not hexes then
36022: LD_VAR 0 1
36026: NOT
36027: PUSH
36028: LD_VAR 0 2
36032: NOT
36033: OR
36034: IFFALSE 36038
// exit ;
36036: GO 36161
// dist := 9999 ;
36038: LD_ADDR_VAR 0 5
36042: PUSH
36043: LD_INT 9999
36045: ST_TO_ADDR
// for i = 1 to hexes do
36046: LD_ADDR_VAR 0 4
36050: PUSH
36051: DOUBLE
36052: LD_INT 1
36054: DEC
36055: ST_TO_ADDR
36056: LD_VAR 0 2
36060: PUSH
36061: FOR_TO
36062: IFFALSE 36149
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36064: LD_ADDR_VAR 0 6
36068: PUSH
36069: LD_VAR 0 1
36073: PPUSH
36074: LD_VAR 0 2
36078: PUSH
36079: LD_VAR 0 4
36083: ARRAY
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 2
36093: PUSH
36094: LD_VAR 0 4
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 297
36108: ST_TO_ADDR
// if tdist < dist then
36109: LD_VAR 0 6
36113: PUSH
36114: LD_VAR 0 5
36118: LESS
36119: IFFALSE 36147
// begin hex := hexes [ i ] ;
36121: LD_ADDR_VAR 0 8
36125: PUSH
36126: LD_VAR 0 2
36130: PUSH
36131: LD_VAR 0 4
36135: ARRAY
36136: ST_TO_ADDR
// dist := tdist ;
36137: LD_ADDR_VAR 0 5
36141: PUSH
36142: LD_VAR 0 6
36146: ST_TO_ADDR
// end ; end ;
36147: GO 36061
36149: POP
36150: POP
// result := hex ;
36151: LD_ADDR_VAR 0 3
36155: PUSH
36156: LD_VAR 0 8
36160: ST_TO_ADDR
// end ;
36161: LD_VAR 0 3
36165: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36166: LD_INT 0
36168: PPUSH
36169: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36170: LD_VAR 0 1
36174: NOT
36175: PUSH
36176: LD_VAR 0 1
36180: PUSH
36181: LD_INT 21
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 23
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PPUSH
36205: CALL_OW 69
36209: IN
36210: NOT
36211: OR
36212: IFFALSE 36216
// exit ;
36214: GO 36263
// for i = 1 to 3 do
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: DOUBLE
36222: LD_INT 1
36224: DEC
36225: ST_TO_ADDR
36226: LD_INT 3
36228: PUSH
36229: FOR_TO
36230: IFFALSE 36261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 250
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 251
36251: PPUSH
36252: LD_INT 1
36254: PPUSH
36255: CALL_OW 453
36259: GO 36229
36261: POP
36262: POP
// end ;
36263: LD_VAR 0 2
36267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36268: LD_INT 0
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
// if not unit or not enemy_unit then
36276: LD_VAR 0 1
36280: NOT
36281: PUSH
36282: LD_VAR 0 2
36286: NOT
36287: OR
36288: IFFALSE 36292
// exit ;
36290: GO 36759
// if GetLives ( i ) < 250 then
36292: LD_VAR 0 4
36296: PPUSH
36297: CALL_OW 256
36301: PUSH
36302: LD_INT 250
36304: LESS
36305: IFFALSE 36318
// begin ComAutodestruct ( i ) ;
36307: LD_VAR 0 4
36311: PPUSH
36312: CALL 36166 0 1
// exit ;
36316: GO 36759
// end ; x := GetX ( enemy_unit ) ;
36318: LD_ADDR_VAR 0 7
36322: PUSH
36323: LD_VAR 0 2
36327: PPUSH
36328: CALL_OW 250
36332: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36333: LD_ADDR_VAR 0 8
36337: PUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: CALL_OW 251
36347: ST_TO_ADDR
// if not x or not y then
36348: LD_VAR 0 7
36352: NOT
36353: PUSH
36354: LD_VAR 0 8
36358: NOT
36359: OR
36360: IFFALSE 36364
// exit ;
36362: GO 36759
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36364: LD_ADDR_VAR 0 6
36368: PUSH
36369: LD_VAR 0 7
36373: PPUSH
36374: LD_INT 0
36376: PPUSH
36377: LD_INT 4
36379: PPUSH
36380: CALL_OW 272
36384: PUSH
36385: LD_VAR 0 8
36389: PPUSH
36390: LD_INT 0
36392: PPUSH
36393: LD_INT 4
36395: PPUSH
36396: CALL_OW 273
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_VAR 0 7
36409: PPUSH
36410: LD_INT 1
36412: PPUSH
36413: LD_INT 4
36415: PPUSH
36416: CALL_OW 272
36420: PUSH
36421: LD_VAR 0 8
36425: PPUSH
36426: LD_INT 1
36428: PPUSH
36429: LD_INT 4
36431: PPUSH
36432: CALL_OW 273
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_VAR 0 7
36445: PPUSH
36446: LD_INT 2
36448: PPUSH
36449: LD_INT 4
36451: PPUSH
36452: CALL_OW 272
36456: PUSH
36457: LD_VAR 0 8
36461: PPUSH
36462: LD_INT 2
36464: PPUSH
36465: LD_INT 4
36467: PPUSH
36468: CALL_OW 273
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_VAR 0 7
36481: PPUSH
36482: LD_INT 3
36484: PPUSH
36485: LD_INT 4
36487: PPUSH
36488: CALL_OW 272
36492: PUSH
36493: LD_VAR 0 8
36497: PPUSH
36498: LD_INT 3
36500: PPUSH
36501: LD_INT 4
36503: PPUSH
36504: CALL_OW 273
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_VAR 0 7
36517: PPUSH
36518: LD_INT 4
36520: PPUSH
36521: LD_INT 4
36523: PPUSH
36524: CALL_OW 272
36528: PUSH
36529: LD_VAR 0 8
36533: PPUSH
36534: LD_INT 4
36536: PPUSH
36537: LD_INT 4
36539: PPUSH
36540: CALL_OW 273
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_VAR 0 7
36553: PPUSH
36554: LD_INT 5
36556: PPUSH
36557: LD_INT 4
36559: PPUSH
36560: CALL_OW 272
36564: PUSH
36565: LD_VAR 0 8
36569: PPUSH
36570: LD_INT 5
36572: PPUSH
36573: LD_INT 4
36575: PPUSH
36576: CALL_OW 273
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// for i = tmp downto 1 do
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: DOUBLE
36599: LD_VAR 0 6
36603: INC
36604: ST_TO_ADDR
36605: LD_INT 1
36607: PUSH
36608: FOR_DOWNTO
36609: IFFALSE 36710
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36611: LD_VAR 0 6
36615: PUSH
36616: LD_VAR 0 4
36620: ARRAY
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PPUSH
36626: LD_VAR 0 6
36630: PUSH
36631: LD_VAR 0 4
36635: ARRAY
36636: PUSH
36637: LD_INT 2
36639: ARRAY
36640: PPUSH
36641: CALL_OW 488
36645: NOT
36646: PUSH
36647: LD_VAR 0 6
36651: PUSH
36652: LD_VAR 0 4
36656: ARRAY
36657: PUSH
36658: LD_INT 1
36660: ARRAY
36661: PPUSH
36662: LD_VAR 0 6
36666: PUSH
36667: LD_VAR 0 4
36671: ARRAY
36672: PUSH
36673: LD_INT 2
36675: ARRAY
36676: PPUSH
36677: CALL_OW 428
36681: PUSH
36682: LD_INT 0
36684: NONEQUAL
36685: OR
36686: IFFALSE 36708
// tmp := Delete ( tmp , i ) ;
36688: LD_ADDR_VAR 0 6
36692: PUSH
36693: LD_VAR 0 6
36697: PPUSH
36698: LD_VAR 0 4
36702: PPUSH
36703: CALL_OW 3
36707: ST_TO_ADDR
36708: GO 36608
36710: POP
36711: POP
// j := GetClosestHex ( unit , tmp ) ;
36712: LD_ADDR_VAR 0 5
36716: PUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL 36014 0 2
36731: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36732: LD_VAR 0 1
36736: PPUSH
36737: LD_VAR 0 5
36741: PUSH
36742: LD_INT 1
36744: ARRAY
36745: PPUSH
36746: LD_VAR 0 5
36750: PUSH
36751: LD_INT 2
36753: ARRAY
36754: PPUSH
36755: CALL_OW 111
// end ;
36759: LD_VAR 0 3
36763: RET
// export function PrepareApemanSoldier ( ) ; begin
36764: LD_INT 0
36766: PPUSH
// uc_nation := 0 ;
36767: LD_ADDR_OWVAR 21
36771: PUSH
36772: LD_INT 0
36774: ST_TO_ADDR
// hc_sex := sex_male ;
36775: LD_ADDR_OWVAR 27
36779: PUSH
36780: LD_INT 1
36782: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36783: LD_ADDR_OWVAR 28
36787: PUSH
36788: LD_INT 15
36790: ST_TO_ADDR
// hc_gallery :=  ;
36791: LD_ADDR_OWVAR 33
36795: PUSH
36796: LD_STRING 
36798: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36799: LD_ADDR_OWVAR 31
36803: PUSH
36804: LD_INT 0
36806: PPUSH
36807: LD_INT 3
36809: PPUSH
36810: CALL_OW 12
36814: PUSH
36815: LD_INT 0
36817: PPUSH
36818: LD_INT 3
36820: PPUSH
36821: CALL_OW 12
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// end ;
36838: LD_VAR 0 1
36842: RET
// export function PrepareApemanEngineer ( ) ; begin
36843: LD_INT 0
36845: PPUSH
// uc_nation := 0 ;
36846: LD_ADDR_OWVAR 21
36850: PUSH
36851: LD_INT 0
36853: ST_TO_ADDR
// hc_sex := sex_male ;
36854: LD_ADDR_OWVAR 27
36858: PUSH
36859: LD_INT 1
36861: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36862: LD_ADDR_OWVAR 28
36866: PUSH
36867: LD_INT 16
36869: ST_TO_ADDR
// hc_gallery :=  ;
36870: LD_ADDR_OWVAR 33
36874: PUSH
36875: LD_STRING 
36877: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36878: LD_ADDR_OWVAR 31
36882: PUSH
36883: LD_INT 0
36885: PPUSH
36886: LD_INT 3
36888: PPUSH
36889: CALL_OW 12
36893: PUSH
36894: LD_INT 0
36896: PPUSH
36897: LD_INT 3
36899: PPUSH
36900: CALL_OW 12
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
// end ;
36917: LD_VAR 0 1
36921: RET
// export function PrepareApeman ( agressivity ) ; begin
36922: LD_INT 0
36924: PPUSH
// uc_side := 0 ;
36925: LD_ADDR_OWVAR 20
36929: PUSH
36930: LD_INT 0
36932: ST_TO_ADDR
// uc_nation := 0 ;
36933: LD_ADDR_OWVAR 21
36937: PUSH
36938: LD_INT 0
36940: ST_TO_ADDR
// hc_sex := sex_male ;
36941: LD_ADDR_OWVAR 27
36945: PUSH
36946: LD_INT 1
36948: ST_TO_ADDR
// hc_class := class_apeman ;
36949: LD_ADDR_OWVAR 28
36953: PUSH
36954: LD_INT 12
36956: ST_TO_ADDR
// hc_gallery :=  ;
36957: LD_ADDR_OWVAR 33
36961: PUSH
36962: LD_STRING 
36964: ST_TO_ADDR
// if agressivity = 0 then
36965: LD_VAR 0 1
36969: PUSH
36970: LD_INT 0
36972: EQUAL
36973: IFFALSE 36985
// hc_agressivity := 0 else
36975: LD_ADDR_OWVAR 35
36979: PUSH
36980: LD_INT 0
36982: ST_TO_ADDR
36983: GO 37006
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36985: LD_ADDR_OWVAR 35
36989: PUSH
36990: LD_VAR 0 1
36994: NEG
36995: PPUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 12
37005: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37006: LD_ADDR_OWVAR 31
37010: PUSH
37011: LD_INT 0
37013: PPUSH
37014: LD_INT 3
37016: PPUSH
37017: CALL_OW 12
37021: PUSH
37022: LD_INT 0
37024: PPUSH
37025: LD_INT 3
37027: PPUSH
37028: CALL_OW 12
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: ST_TO_ADDR
// end ;
37045: LD_VAR 0 2
37049: RET
// export function PrepareTiger ( agressivity ) ; begin
37050: LD_INT 0
37052: PPUSH
// uc_side := 0 ;
37053: LD_ADDR_OWVAR 20
37057: PUSH
37058: LD_INT 0
37060: ST_TO_ADDR
// uc_nation := 0 ;
37061: LD_ADDR_OWVAR 21
37065: PUSH
37066: LD_INT 0
37068: ST_TO_ADDR
// hc_class := class_tiger ;
37069: LD_ADDR_OWVAR 28
37073: PUSH
37074: LD_INT 14
37076: ST_TO_ADDR
// hc_gallery :=  ;
37077: LD_ADDR_OWVAR 33
37081: PUSH
37082: LD_STRING 
37084: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37085: LD_ADDR_OWVAR 35
37089: PUSH
37090: LD_VAR 0 1
37094: NEG
37095: PPUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: CALL_OW 12
37105: ST_TO_ADDR
// end ;
37106: LD_VAR 0 2
37110: RET
// export function PrepareEnchidna ( ) ; begin
37111: LD_INT 0
37113: PPUSH
// uc_side := 0 ;
37114: LD_ADDR_OWVAR 20
37118: PUSH
37119: LD_INT 0
37121: ST_TO_ADDR
// uc_nation := 0 ;
37122: LD_ADDR_OWVAR 21
37126: PUSH
37127: LD_INT 0
37129: ST_TO_ADDR
// hc_class := class_baggie ;
37130: LD_ADDR_OWVAR 28
37134: PUSH
37135: LD_INT 13
37137: ST_TO_ADDR
// hc_gallery :=  ;
37138: LD_ADDR_OWVAR 33
37142: PUSH
37143: LD_STRING 
37145: ST_TO_ADDR
// end ;
37146: LD_VAR 0 1
37150: RET
// export function PrepareFrog ( ) ; begin
37151: LD_INT 0
37153: PPUSH
// uc_side := 0 ;
37154: LD_ADDR_OWVAR 20
37158: PUSH
37159: LD_INT 0
37161: ST_TO_ADDR
// uc_nation := 0 ;
37162: LD_ADDR_OWVAR 21
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// hc_class := class_frog ;
37170: LD_ADDR_OWVAR 28
37174: PUSH
37175: LD_INT 19
37177: ST_TO_ADDR
// hc_gallery :=  ;
37178: LD_ADDR_OWVAR 33
37182: PUSH
37183: LD_STRING 
37185: ST_TO_ADDR
// end ;
37186: LD_VAR 0 1
37190: RET
// export function PrepareFish ( ) ; begin
37191: LD_INT 0
37193: PPUSH
// uc_side := 0 ;
37194: LD_ADDR_OWVAR 20
37198: PUSH
37199: LD_INT 0
37201: ST_TO_ADDR
// uc_nation := 0 ;
37202: LD_ADDR_OWVAR 21
37206: PUSH
37207: LD_INT 0
37209: ST_TO_ADDR
// hc_class := class_fish ;
37210: LD_ADDR_OWVAR 28
37214: PUSH
37215: LD_INT 20
37217: ST_TO_ADDR
// hc_gallery :=  ;
37218: LD_ADDR_OWVAR 33
37222: PUSH
37223: LD_STRING 
37225: ST_TO_ADDR
// end ;
37226: LD_VAR 0 1
37230: RET
// export function PrepareBird ( ) ; begin
37231: LD_INT 0
37233: PPUSH
// uc_side := 0 ;
37234: LD_ADDR_OWVAR 20
37238: PUSH
37239: LD_INT 0
37241: ST_TO_ADDR
// uc_nation := 0 ;
37242: LD_ADDR_OWVAR 21
37246: PUSH
37247: LD_INT 0
37249: ST_TO_ADDR
// hc_class := class_phororhacos ;
37250: LD_ADDR_OWVAR 28
37254: PUSH
37255: LD_INT 18
37257: ST_TO_ADDR
// hc_gallery :=  ;
37258: LD_ADDR_OWVAR 33
37262: PUSH
37263: LD_STRING 
37265: ST_TO_ADDR
// end ;
37266: LD_VAR 0 1
37270: RET
// export function PrepareHorse ( ) ; begin
37271: LD_INT 0
37273: PPUSH
// uc_side := 0 ;
37274: LD_ADDR_OWVAR 20
37278: PUSH
37279: LD_INT 0
37281: ST_TO_ADDR
// uc_nation := 0 ;
37282: LD_ADDR_OWVAR 21
37286: PUSH
37287: LD_INT 0
37289: ST_TO_ADDR
// hc_class := class_horse ;
37290: LD_ADDR_OWVAR 28
37294: PUSH
37295: LD_INT 21
37297: ST_TO_ADDR
// hc_gallery :=  ;
37298: LD_ADDR_OWVAR 33
37302: PUSH
37303: LD_STRING 
37305: ST_TO_ADDR
// end ;
37306: LD_VAR 0 1
37310: RET
// export function PrepareMastodont ( ) ; begin
37311: LD_INT 0
37313: PPUSH
// uc_side := 0 ;
37314: LD_ADDR_OWVAR 20
37318: PUSH
37319: LD_INT 0
37321: ST_TO_ADDR
// uc_nation := 0 ;
37322: LD_ADDR_OWVAR 21
37326: PUSH
37327: LD_INT 0
37329: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37330: LD_ADDR_OWVAR 37
37334: PUSH
37335: LD_INT 31
37337: ST_TO_ADDR
// vc_control := control_rider ;
37338: LD_ADDR_OWVAR 38
37342: PUSH
37343: LD_INT 4
37345: ST_TO_ADDR
// end ;
37346: LD_VAR 0 1
37350: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37351: LD_INT 0
37353: PPUSH
37354: PPUSH
37355: PPUSH
// uc_side = 0 ;
37356: LD_ADDR_OWVAR 20
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// uc_nation = 0 ;
37364: LD_ADDR_OWVAR 21
37368: PUSH
37369: LD_INT 0
37371: ST_TO_ADDR
// InitHc_All ( ) ;
37372: CALL_OW 584
// InitVc ;
37376: CALL_OW 20
// if mastodonts then
37380: LD_VAR 0 6
37384: IFFALSE 37451
// for i = 1 to mastodonts do
37386: LD_ADDR_VAR 0 11
37390: PUSH
37391: DOUBLE
37392: LD_INT 1
37394: DEC
37395: ST_TO_ADDR
37396: LD_VAR 0 6
37400: PUSH
37401: FOR_TO
37402: IFFALSE 37449
// begin vc_chassis := 31 ;
37404: LD_ADDR_OWVAR 37
37408: PUSH
37409: LD_INT 31
37411: ST_TO_ADDR
// vc_control := control_rider ;
37412: LD_ADDR_OWVAR 38
37416: PUSH
37417: LD_INT 4
37419: ST_TO_ADDR
// animal := CreateVehicle ;
37420: LD_ADDR_VAR 0 12
37424: PUSH
37425: CALL_OW 45
37429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37430: LD_VAR 0 12
37434: PPUSH
37435: LD_VAR 0 8
37439: PPUSH
37440: LD_INT 0
37442: PPUSH
37443: CALL 39579 0 3
// end ;
37447: GO 37401
37449: POP
37450: POP
// if horses then
37451: LD_VAR 0 5
37455: IFFALSE 37522
// for i = 1 to horses do
37457: LD_ADDR_VAR 0 11
37461: PUSH
37462: DOUBLE
37463: LD_INT 1
37465: DEC
37466: ST_TO_ADDR
37467: LD_VAR 0 5
37471: PUSH
37472: FOR_TO
37473: IFFALSE 37520
// begin hc_class := 21 ;
37475: LD_ADDR_OWVAR 28
37479: PUSH
37480: LD_INT 21
37482: ST_TO_ADDR
// hc_gallery :=  ;
37483: LD_ADDR_OWVAR 33
37487: PUSH
37488: LD_STRING 
37490: ST_TO_ADDR
// animal := CreateHuman ;
37491: LD_ADDR_VAR 0 12
37495: PUSH
37496: CALL_OW 44
37500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37501: LD_VAR 0 12
37505: PPUSH
37506: LD_VAR 0 8
37510: PPUSH
37511: LD_INT 0
37513: PPUSH
37514: CALL 39579 0 3
// end ;
37518: GO 37472
37520: POP
37521: POP
// if birds then
37522: LD_VAR 0 1
37526: IFFALSE 37593
// for i = 1 to birds do
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: DOUBLE
37534: LD_INT 1
37536: DEC
37537: ST_TO_ADDR
37538: LD_VAR 0 1
37542: PUSH
37543: FOR_TO
37544: IFFALSE 37591
// begin hc_class := 18 ;
37546: LD_ADDR_OWVAR 28
37550: PUSH
37551: LD_INT 18
37553: ST_TO_ADDR
// hc_gallery =  ;
37554: LD_ADDR_OWVAR 33
37558: PUSH
37559: LD_STRING 
37561: ST_TO_ADDR
// animal := CreateHuman ;
37562: LD_ADDR_VAR 0 12
37566: PUSH
37567: CALL_OW 44
37571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37572: LD_VAR 0 12
37576: PPUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_INT 0
37584: PPUSH
37585: CALL 39579 0 3
// end ;
37589: GO 37543
37591: POP
37592: POP
// if tigers then
37593: LD_VAR 0 2
37597: IFFALSE 37681
// for i = 1 to tigers do
37599: LD_ADDR_VAR 0 11
37603: PUSH
37604: DOUBLE
37605: LD_INT 1
37607: DEC
37608: ST_TO_ADDR
37609: LD_VAR 0 2
37613: PUSH
37614: FOR_TO
37615: IFFALSE 37679
// begin hc_class = class_tiger ;
37617: LD_ADDR_OWVAR 28
37621: PUSH
37622: LD_INT 14
37624: ST_TO_ADDR
// hc_gallery =  ;
37625: LD_ADDR_OWVAR 33
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37633: LD_ADDR_OWVAR 35
37637: PUSH
37638: LD_INT 7
37640: NEG
37641: PPUSH
37642: LD_INT 7
37644: PPUSH
37645: CALL_OW 12
37649: ST_TO_ADDR
// animal := CreateHuman ;
37650: LD_ADDR_VAR 0 12
37654: PUSH
37655: CALL_OW 44
37659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37660: LD_VAR 0 12
37664: PPUSH
37665: LD_VAR 0 8
37669: PPUSH
37670: LD_INT 0
37672: PPUSH
37673: CALL 39579 0 3
// end ;
37677: GO 37614
37679: POP
37680: POP
// if apemans then
37681: LD_VAR 0 3
37685: IFFALSE 37808
// for i = 1 to apemans do
37687: LD_ADDR_VAR 0 11
37691: PUSH
37692: DOUBLE
37693: LD_INT 1
37695: DEC
37696: ST_TO_ADDR
37697: LD_VAR 0 3
37701: PUSH
37702: FOR_TO
37703: IFFALSE 37806
// begin hc_class = class_apeman ;
37705: LD_ADDR_OWVAR 28
37709: PUSH
37710: LD_INT 12
37712: ST_TO_ADDR
// hc_gallery =  ;
37713: LD_ADDR_OWVAR 33
37717: PUSH
37718: LD_STRING 
37720: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37721: LD_ADDR_OWVAR 35
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PPUSH
37730: LD_INT 2
37732: PPUSH
37733: CALL_OW 12
37737: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37738: LD_ADDR_OWVAR 31
37742: PUSH
37743: LD_INT 1
37745: PPUSH
37746: LD_INT 3
37748: PPUSH
37749: CALL_OW 12
37753: PUSH
37754: LD_INT 1
37756: PPUSH
37757: LD_INT 3
37759: PPUSH
37760: CALL_OW 12
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// animal := CreateHuman ;
37777: LD_ADDR_VAR 0 12
37781: PUSH
37782: CALL_OW 44
37786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37787: LD_VAR 0 12
37791: PPUSH
37792: LD_VAR 0 8
37796: PPUSH
37797: LD_INT 0
37799: PPUSH
37800: CALL 39579 0 3
// end ;
37804: GO 37702
37806: POP
37807: POP
// if enchidnas then
37808: LD_VAR 0 4
37812: IFFALSE 37879
// for i = 1 to enchidnas do
37814: LD_ADDR_VAR 0 11
37818: PUSH
37819: DOUBLE
37820: LD_INT 1
37822: DEC
37823: ST_TO_ADDR
37824: LD_VAR 0 4
37828: PUSH
37829: FOR_TO
37830: IFFALSE 37877
// begin hc_class = 13 ;
37832: LD_ADDR_OWVAR 28
37836: PUSH
37837: LD_INT 13
37839: ST_TO_ADDR
// hc_gallery =  ;
37840: LD_ADDR_OWVAR 33
37844: PUSH
37845: LD_STRING 
37847: ST_TO_ADDR
// animal := CreateHuman ;
37848: LD_ADDR_VAR 0 12
37852: PUSH
37853: CALL_OW 44
37857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37858: LD_VAR 0 12
37862: PPUSH
37863: LD_VAR 0 8
37867: PPUSH
37868: LD_INT 0
37870: PPUSH
37871: CALL 39579 0 3
// end ;
37875: GO 37829
37877: POP
37878: POP
// if fishes then
37879: LD_VAR 0 7
37883: IFFALSE 37950
// for i = 1 to fishes do
37885: LD_ADDR_VAR 0 11
37889: PUSH
37890: DOUBLE
37891: LD_INT 1
37893: DEC
37894: ST_TO_ADDR
37895: LD_VAR 0 7
37899: PUSH
37900: FOR_TO
37901: IFFALSE 37948
// begin hc_class = 20 ;
37903: LD_ADDR_OWVAR 28
37907: PUSH
37908: LD_INT 20
37910: ST_TO_ADDR
// hc_gallery =  ;
37911: LD_ADDR_OWVAR 33
37915: PUSH
37916: LD_STRING 
37918: ST_TO_ADDR
// animal := CreateHuman ;
37919: LD_ADDR_VAR 0 12
37923: PUSH
37924: CALL_OW 44
37928: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37929: LD_VAR 0 12
37933: PPUSH
37934: LD_VAR 0 9
37938: PPUSH
37939: LD_INT 0
37941: PPUSH
37942: CALL 39579 0 3
// end ;
37946: GO 37900
37948: POP
37949: POP
// end ;
37950: LD_VAR 0 10
37954: RET
// export function WantHeal ( sci , unit ) ; begin
37955: LD_INT 0
37957: PPUSH
// if GetTaskList ( sci ) > 0 then
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 437
37967: PUSH
37968: LD_INT 0
37970: GREATER
37971: IFFALSE 38041
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 437
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PUSH
37991: LD_STRING l
37993: EQUAL
37994: PUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 437
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PUSH
38009: LD_INT 4
38011: ARRAY
38012: PUSH
38013: LD_VAR 0 2
38017: EQUAL
38018: AND
38019: IFFALSE 38031
// result := true else
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 1
38028: ST_TO_ADDR
38029: GO 38039
// result := false ;
38031: LD_ADDR_VAR 0 3
38035: PUSH
38036: LD_INT 0
38038: ST_TO_ADDR
// end else
38039: GO 38049
// result := false ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_INT 0
38048: ST_TO_ADDR
// end ;
38049: LD_VAR 0 3
38053: RET
// export function HealTarget ( sci ) ; begin
38054: LD_INT 0
38056: PPUSH
// if not sci then
38057: LD_VAR 0 1
38061: NOT
38062: IFFALSE 38066
// exit ;
38064: GO 38131
// result := 0 ;
38066: LD_ADDR_VAR 0 2
38070: PUSH
38071: LD_INT 0
38073: ST_TO_ADDR
// if GetTaskList ( sci ) then
38074: LD_VAR 0 1
38078: PPUSH
38079: CALL_OW 437
38083: IFFALSE 38131
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 437
38094: PUSH
38095: LD_INT 1
38097: ARRAY
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PUSH
38103: LD_STRING l
38105: EQUAL
38106: IFFALSE 38131
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38108: LD_ADDR_VAR 0 2
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 437
38122: PUSH
38123: LD_INT 1
38125: ARRAY
38126: PUSH
38127: LD_INT 4
38129: ARRAY
38130: ST_TO_ADDR
// end ;
38131: LD_VAR 0 2
38135: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38136: LD_INT 0
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
// if not base_units then
38142: LD_VAR 0 1
38146: NOT
38147: IFFALSE 38151
// exit ;
38149: GO 38238
// result := false ;
38151: LD_ADDR_VAR 0 2
38155: PUSH
38156: LD_INT 0
38158: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38159: LD_ADDR_VAR 0 5
38163: PUSH
38164: LD_VAR 0 1
38168: PPUSH
38169: LD_INT 21
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 72
38183: ST_TO_ADDR
// if not tmp then
38184: LD_VAR 0 5
38188: NOT
38189: IFFALSE 38193
// exit ;
38191: GO 38238
// for i in tmp do
38193: LD_ADDR_VAR 0 3
38197: PUSH
38198: LD_VAR 0 5
38202: PUSH
38203: FOR_IN
38204: IFFALSE 38236
// begin result := EnemyInRange ( i , 22 ) ;
38206: LD_ADDR_VAR 0 2
38210: PUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: LD_INT 22
38218: PPUSH
38219: CALL 35816 0 2
38223: ST_TO_ADDR
// if result then
38224: LD_VAR 0 2
38228: IFFALSE 38234
// exit ;
38230: POP
38231: POP
38232: GO 38238
// end ;
38234: GO 38203
38236: POP
38237: POP
// end ;
38238: LD_VAR 0 2
38242: RET
// export function FilterByTag ( units , tag ) ; begin
38243: LD_INT 0
38245: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_INT 120
38258: PUSH
38259: LD_VAR 0 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PPUSH
38268: CALL_OW 72
38272: ST_TO_ADDR
// end ;
38273: LD_VAR 0 3
38277: RET
// export function IsDriver ( un ) ; begin
38278: LD_INT 0
38280: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38281: LD_ADDR_VAR 0 2
38285: PUSH
38286: LD_VAR 0 1
38290: PUSH
38291: LD_INT 55
38293: PUSH
38294: EMPTY
38295: LIST
38296: PPUSH
38297: CALL_OW 69
38301: IN
38302: ST_TO_ADDR
// end ;
38303: LD_VAR 0 2
38307: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38308: LD_INT 0
38310: PPUSH
38311: PPUSH
// list := [ ] ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: EMPTY
38318: ST_TO_ADDR
// case d of 0 :
38319: LD_VAR 0 3
38323: PUSH
38324: LD_INT 0
38326: DOUBLE
38327: EQUAL
38328: IFTRUE 38332
38330: GO 38465
38332: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38333: LD_ADDR_VAR 0 5
38337: PUSH
38338: LD_VAR 0 1
38342: PUSH
38343: LD_INT 4
38345: MINUS
38346: PUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_INT 4
38354: MINUS
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: LD_VAR 0 1
38368: PUSH
38369: LD_INT 3
38371: MINUS
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: PUSH
38386: LD_VAR 0 1
38390: PUSH
38391: LD_INT 4
38393: PLUS
38394: PUSH
38395: LD_VAR 0 2
38399: PUSH
38400: LD_INT 4
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_INT 3
38415: PLUS
38416: PUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_INT 3
38424: PLUS
38425: PUSH
38426: LD_INT 5
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: LD_VAR 0 1
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 4
38446: PLUS
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// end ; 1 :
38463: GO 39163
38465: LD_INT 1
38467: DOUBLE
38468: EQUAL
38469: IFTRUE 38473
38471: GO 38606
38473: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38474: LD_ADDR_VAR 0 5
38478: PUSH
38479: LD_VAR 0 1
38483: PUSH
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 4
38491: MINUS
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PUSH
38501: LD_VAR 0 1
38505: PUSH
38506: LD_INT 3
38508: MINUS
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_INT 3
38517: MINUS
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_INT 4
38534: MINUS
38535: PUSH
38536: LD_VAR 0 2
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: PUSH
38549: LD_VAR 0 1
38553: PUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_INT 3
38561: PLUS
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_INT 4
38578: PLUS
38579: PUSH
38580: LD_VAR 0 2
38584: PUSH
38585: LD_INT 4
38587: PLUS
38588: PUSH
38589: LD_INT 5
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// end ; 2 :
38604: GO 39163
38606: LD_INT 2
38608: DOUBLE
38609: EQUAL
38610: IFTRUE 38614
38612: GO 38743
38614: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38615: LD_ADDR_VAR 0 5
38619: PUSH
38620: LD_VAR 0 1
38624: PUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_INT 3
38632: MINUS
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: LD_VAR 0 1
38646: PUSH
38647: LD_INT 4
38649: PLUS
38650: PUSH
38651: LD_VAR 0 2
38655: PUSH
38656: LD_INT 4
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: LD_VAR 0 1
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: LD_INT 4
38676: PLUS
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_INT 3
38693: MINUS
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_INT 4
38715: MINUS
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 4
38724: MINUS
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: ST_TO_ADDR
// end ; 3 :
38741: GO 39163
38743: LD_INT 3
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38884
38751: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38752: LD_ADDR_VAR 0 5
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: LD_INT 3
38764: PLUS
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_INT 4
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PUSH
38779: LD_VAR 0 1
38783: PUSH
38784: LD_INT 4
38786: PLUS
38787: PUSH
38788: LD_VAR 0 2
38792: PUSH
38793: LD_INT 4
38795: PLUS
38796: PUSH
38797: LD_INT 5
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: PUSH
38805: LD_VAR 0 1
38809: PUSH
38810: LD_INT 4
38812: MINUS
38813: PUSH
38814: LD_VAR 0 2
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_VAR 0 2
38836: PUSH
38837: LD_INT 4
38839: MINUS
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 3
38856: MINUS
38857: PUSH
38858: LD_VAR 0 2
38862: PUSH
38863: LD_INT 3
38865: MINUS
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// end ; 4 :
38882: GO 39163
38884: LD_INT 4
38886: DOUBLE
38887: EQUAL
38888: IFTRUE 38892
38890: GO 39025
38892: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38893: LD_ADDR_VAR 0 5
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 4
38910: PLUS
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: LD_VAR 0 1
38924: PUSH
38925: LD_INT 3
38927: PLUS
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 3
38936: PLUS
38937: PUSH
38938: LD_INT 5
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: PUSH
38946: LD_VAR 0 1
38950: PUSH
38951: LD_INT 4
38953: PLUS
38954: PUSH
38955: LD_VAR 0 2
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: PUSH
38968: LD_VAR 0 1
38972: PUSH
38973: LD_VAR 0 2
38977: PUSH
38978: LD_INT 3
38980: MINUS
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 1
38994: PUSH
38995: LD_INT 4
38997: MINUS
38998: PUSH
38999: LD_VAR 0 2
39003: PUSH
39004: LD_INT 4
39006: MINUS
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: ST_TO_ADDR
// end ; 5 :
39023: GO 39163
39025: LD_INT 5
39027: DOUBLE
39028: EQUAL
39029: IFTRUE 39033
39031: GO 39162
39033: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: LD_VAR 0 1
39043: PUSH
39044: LD_INT 4
39046: MINUS
39047: PUSH
39048: LD_VAR 0 2
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: PUSH
39061: LD_VAR 0 1
39065: PUSH
39066: LD_VAR 0 2
39070: PUSH
39071: LD_INT 4
39073: MINUS
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: PUSH
39083: LD_VAR 0 1
39087: PUSH
39088: LD_INT 4
39090: PLUS
39091: PUSH
39092: LD_VAR 0 2
39096: PUSH
39097: LD_INT 4
39099: PLUS
39100: PUSH
39101: LD_INT 5
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: PUSH
39109: LD_VAR 0 1
39113: PUSH
39114: LD_INT 3
39116: PLUS
39117: PUSH
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 4
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: PUSH
39131: LD_VAR 0 1
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_INT 3
39143: PLUS
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// end ; end ;
39160: GO 39163
39162: POP
// result := list ;
39163: LD_ADDR_VAR 0 4
39167: PUSH
39168: LD_VAR 0 5
39172: ST_TO_ADDR
// end ;
39173: LD_VAR 0 4
39177: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39178: LD_INT 0
39180: PPUSH
39181: PPUSH
39182: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39183: LD_VAR 0 1
39187: NOT
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: LD_INT 4
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: IN
39212: NOT
39213: OR
39214: IFFALSE 39218
// exit ;
39216: GO 39301
// tmp := [ ] ;
39218: LD_ADDR_VAR 0 5
39222: PUSH
39223: EMPTY
39224: ST_TO_ADDR
// for i in units do
39225: LD_ADDR_VAR 0 4
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: FOR_IN
39236: IFFALSE 39270
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39238: LD_ADDR_VAR 0 5
39242: PUSH
39243: LD_VAR 0 5
39247: PPUSH
39248: LD_VAR 0 4
39252: PPUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: CALL_OW 259
39262: PPUSH
39263: CALL 40674 0 2
39267: ST_TO_ADDR
39268: GO 39235
39270: POP
39271: POP
// if not tmp then
39272: LD_VAR 0 5
39276: NOT
39277: IFFALSE 39281
// exit ;
39279: GO 39301
// result := SortListByListDesc ( units , tmp ) ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_VAR 0 5
39295: PPUSH
39296: CALL_OW 77
39300: ST_TO_ADDR
// end ;
39301: LD_VAR 0 3
39305: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39306: LD_INT 0
39308: PPUSH
39309: PPUSH
39310: PPUSH
// result := false ;
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_INT 0
39318: ST_TO_ADDR
// if not building then
39319: LD_VAR 0 2
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39466
// x := GetX ( building ) ;
39328: LD_ADDR_VAR 0 4
39332: PUSH
39333: LD_VAR 0 2
39337: PPUSH
39338: CALL_OW 250
39342: ST_TO_ADDR
// y := GetY ( building ) ;
39343: LD_ADDR_VAR 0 5
39347: PUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: CALL_OW 251
39357: ST_TO_ADDR
// if not x or not y then
39358: LD_VAR 0 4
39362: NOT
39363: PUSH
39364: LD_VAR 0 5
39368: NOT
39369: OR
39370: IFFALSE 39374
// exit ;
39372: GO 39466
// if GetTaskList ( unit ) then
39374: LD_VAR 0 1
39378: PPUSH
39379: CALL_OW 437
39383: IFFALSE 39466
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39385: LD_STRING e
39387: PUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 437
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PUSH
39402: LD_INT 1
39404: ARRAY
39405: EQUAL
39406: PUSH
39407: LD_VAR 0 4
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 437
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: PUSH
39426: LD_INT 2
39428: ARRAY
39429: EQUAL
39430: AND
39431: PUSH
39432: LD_VAR 0 5
39436: PUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 437
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PUSH
39451: LD_INT 3
39453: ARRAY
39454: EQUAL
39455: AND
39456: IFFALSE 39466
// result := true end ;
39458: LD_ADDR_VAR 0 3
39462: PUSH
39463: LD_INT 1
39465: ST_TO_ADDR
// end ;
39466: LD_VAR 0 3
39470: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39471: LD_INT 0
39473: PPUSH
// result := false ;
39474: LD_ADDR_VAR 0 4
39478: PUSH
39479: LD_INT 0
39481: ST_TO_ADDR
// if GetTaskList ( unit ) then
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 437
39491: IFFALSE 39574
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39493: LD_STRING M
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 437
39505: PUSH
39506: LD_INT 1
39508: ARRAY
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: EQUAL
39514: PUSH
39515: LD_VAR 0 2
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 437
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: EQUAL
39538: AND
39539: PUSH
39540: LD_VAR 0 3
39544: PUSH
39545: LD_VAR 0 1
39549: PPUSH
39550: CALL_OW 437
39554: PUSH
39555: LD_INT 1
39557: ARRAY
39558: PUSH
39559: LD_INT 3
39561: ARRAY
39562: EQUAL
39563: AND
39564: IFFALSE 39574
// result := true ;
39566: LD_ADDR_VAR 0 4
39570: PUSH
39571: LD_INT 1
39573: ST_TO_ADDR
// end ; end ;
39574: LD_VAR 0 4
39578: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
// if not unit or not area then
39585: LD_VAR 0 1
39589: NOT
39590: PUSH
39591: LD_VAR 0 2
39595: NOT
39596: OR
39597: IFFALSE 39601
// exit ;
39599: GO 39777
// tmp := AreaToList ( area , i ) ;
39601: LD_ADDR_VAR 0 6
39605: PUSH
39606: LD_VAR 0 2
39610: PPUSH
39611: LD_VAR 0 5
39615: PPUSH
39616: CALL_OW 517
39620: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39621: LD_ADDR_VAR 0 5
39625: PUSH
39626: DOUBLE
39627: LD_INT 1
39629: DEC
39630: ST_TO_ADDR
39631: LD_VAR 0 6
39635: PUSH
39636: LD_INT 1
39638: ARRAY
39639: PUSH
39640: FOR_TO
39641: IFFALSE 39775
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39643: LD_ADDR_VAR 0 7
39647: PUSH
39648: LD_VAR 0 6
39652: PUSH
39653: LD_INT 1
39655: ARRAY
39656: PUSH
39657: LD_VAR 0 5
39661: ARRAY
39662: PUSH
39663: LD_VAR 0 6
39667: PUSH
39668: LD_INT 2
39670: ARRAY
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39682: LD_INT 92
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_INT 1
39692: ARRAY
39693: PUSH
39694: LD_VAR 0 7
39698: PUSH
39699: LD_INT 2
39701: ARRAY
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: PPUSH
39712: CALL_OW 69
39716: PUSH
39717: LD_INT 0
39719: EQUAL
39720: IFFALSE 39773
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39722: LD_VAR 0 1
39726: PPUSH
39727: LD_VAR 0 7
39731: PUSH
39732: LD_INT 1
39734: ARRAY
39735: PPUSH
39736: LD_VAR 0 7
39740: PUSH
39741: LD_INT 2
39743: ARRAY
39744: PPUSH
39745: LD_VAR 0 3
39749: PPUSH
39750: CALL_OW 48
// result := IsPlaced ( unit ) ;
39754: LD_ADDR_VAR 0 4
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 305
39768: ST_TO_ADDR
// exit ;
39769: POP
39770: POP
39771: GO 39777
// end ; end ;
39773: GO 39640
39775: POP
39776: POP
// end ;
39777: LD_VAR 0 4
39781: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39782: LD_INT 0
39784: PPUSH
39785: PPUSH
39786: PPUSH
// if not side or side > 8 then
39787: LD_VAR 0 1
39791: NOT
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_INT 8
39800: GREATER
39801: OR
39802: IFFALSE 39806
// exit ;
39804: GO 39993
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_INT 22
39813: PUSH
39814: LD_VAR 0 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 21
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PPUSH
39837: CALL_OW 69
39841: ST_TO_ADDR
// if not tmp then
39842: LD_VAR 0 4
39846: NOT
39847: IFFALSE 39851
// exit ;
39849: GO 39993
// enable_addtolog := true ;
39851: LD_ADDR_OWVAR 81
39855: PUSH
39856: LD_INT 1
39858: ST_TO_ADDR
// AddToLog ( [ ) ;
39859: LD_STRING [
39861: PPUSH
39862: CALL_OW 561
// for i in tmp do
39866: LD_ADDR_VAR 0 3
39870: PUSH
39871: LD_VAR 0 4
39875: PUSH
39876: FOR_IN
39877: IFFALSE 39984
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39879: LD_STRING [
39881: PUSH
39882: LD_VAR 0 3
39886: PPUSH
39887: CALL_OW 266
39891: STR
39892: PUSH
39893: LD_STRING , 
39895: STR
39896: PUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: CALL_OW 250
39906: STR
39907: PUSH
39908: LD_STRING , 
39910: STR
39911: PUSH
39912: LD_VAR 0 3
39916: PPUSH
39917: CALL_OW 251
39921: STR
39922: PUSH
39923: LD_STRING , 
39925: STR
39926: PUSH
39927: LD_VAR 0 3
39931: PPUSH
39932: CALL_OW 254
39936: STR
39937: PUSH
39938: LD_STRING , 
39940: STR
39941: PUSH
39942: LD_VAR 0 3
39946: PPUSH
39947: LD_INT 1
39949: PPUSH
39950: CALL_OW 268
39954: STR
39955: PUSH
39956: LD_STRING , 
39958: STR
39959: PUSH
39960: LD_VAR 0 3
39964: PPUSH
39965: LD_INT 2
39967: PPUSH
39968: CALL_OW 268
39972: STR
39973: PUSH
39974: LD_STRING ],
39976: STR
39977: PPUSH
39978: CALL_OW 561
// end ;
39982: GO 39876
39984: POP
39985: POP
// AddToLog ( ]; ) ;
39986: LD_STRING ];
39988: PPUSH
39989: CALL_OW 561
// end ;
39993: LD_VAR 0 2
39997: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39998: LD_INT 0
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
// if not area or not rate or not max then
40005: LD_VAR 0 1
40009: NOT
40010: PUSH
40011: LD_VAR 0 2
40015: NOT
40016: OR
40017: PUSH
40018: LD_VAR 0 4
40022: NOT
40023: OR
40024: IFFALSE 40028
// exit ;
40026: GO 40217
// while 1 do
40028: LD_INT 1
40030: IFFALSE 40217
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40032: LD_ADDR_VAR 0 9
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: LD_INT 1
40044: PPUSH
40045: CALL_OW 287
40049: PUSH
40050: LD_INT 10
40052: MUL
40053: ST_TO_ADDR
// r := rate / 10 ;
40054: LD_ADDR_VAR 0 7
40058: PUSH
40059: LD_VAR 0 2
40063: PUSH
40064: LD_INT 10
40066: DIVREAL
40067: ST_TO_ADDR
// time := 1 1$00 ;
40068: LD_ADDR_VAR 0 8
40072: PUSH
40073: LD_INT 2100
40075: ST_TO_ADDR
// if amount < min then
40076: LD_VAR 0 9
40080: PUSH
40081: LD_VAR 0 3
40085: LESS
40086: IFFALSE 40104
// r := r * 2 else
40088: LD_ADDR_VAR 0 7
40092: PUSH
40093: LD_VAR 0 7
40097: PUSH
40098: LD_INT 2
40100: MUL
40101: ST_TO_ADDR
40102: GO 40130
// if amount > max then
40104: LD_VAR 0 9
40108: PUSH
40109: LD_VAR 0 4
40113: GREATER
40114: IFFALSE 40130
// r := r / 2 ;
40116: LD_ADDR_VAR 0 7
40120: PUSH
40121: LD_VAR 0 7
40125: PUSH
40126: LD_INT 2
40128: DIVREAL
40129: ST_TO_ADDR
// time := time / r ;
40130: LD_ADDR_VAR 0 8
40134: PUSH
40135: LD_VAR 0 8
40139: PUSH
40140: LD_VAR 0 7
40144: DIVREAL
40145: ST_TO_ADDR
// if time < 0 then
40146: LD_VAR 0 8
40150: PUSH
40151: LD_INT 0
40153: LESS
40154: IFFALSE 40171
// time := time * - 1 ;
40156: LD_ADDR_VAR 0 8
40160: PUSH
40161: LD_VAR 0 8
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: MUL
40170: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40171: LD_VAR 0 8
40175: PUSH
40176: LD_INT 35
40178: PPUSH
40179: LD_INT 875
40181: PPUSH
40182: CALL_OW 12
40186: PLUS
40187: PPUSH
40188: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40192: LD_INT 1
40194: PPUSH
40195: LD_INT 5
40197: PPUSH
40198: CALL_OW 12
40202: PPUSH
40203: LD_VAR 0 1
40207: PPUSH
40208: LD_INT 1
40210: PPUSH
40211: CALL_OW 55
// end ;
40215: GO 40028
// end ;
40217: LD_VAR 0 5
40221: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
// if not turrets or not factories then
40232: LD_VAR 0 1
40236: NOT
40237: PUSH
40238: LD_VAR 0 2
40242: NOT
40243: OR
40244: IFFALSE 40248
// exit ;
40246: GO 40555
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40248: LD_ADDR_VAR 0 10
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: LD_INT 6
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 4
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 5
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 24
40290: PUSH
40291: LD_INT 25
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 23
40300: PUSH
40301: LD_INT 27
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 42
40314: PUSH
40315: LD_INT 43
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 44
40324: PUSH
40325: LD_INT 46
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 45
40334: PUSH
40335: LD_INT 47
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// result := [ ] ;
40352: LD_ADDR_VAR 0 3
40356: PUSH
40357: EMPTY
40358: ST_TO_ADDR
// for i in turrets do
40359: LD_ADDR_VAR 0 4
40363: PUSH
40364: LD_VAR 0 1
40368: PUSH
40369: FOR_IN
40370: IFFALSE 40553
// begin nat := GetNation ( i ) ;
40372: LD_ADDR_VAR 0 7
40376: PUSH
40377: LD_VAR 0 4
40381: PPUSH
40382: CALL_OW 248
40386: ST_TO_ADDR
// weapon := 0 ;
40387: LD_ADDR_VAR 0 8
40391: PUSH
40392: LD_INT 0
40394: ST_TO_ADDR
// if not nat then
40395: LD_VAR 0 7
40399: NOT
40400: IFFALSE 40404
// continue ;
40402: GO 40369
// for j in list [ nat ] do
40404: LD_ADDR_VAR 0 5
40408: PUSH
40409: LD_VAR 0 10
40413: PUSH
40414: LD_VAR 0 7
40418: ARRAY
40419: PUSH
40420: FOR_IN
40421: IFFALSE 40462
// if GetBWeapon ( i ) = j [ 1 ] then
40423: LD_VAR 0 4
40427: PPUSH
40428: CALL_OW 269
40432: PUSH
40433: LD_VAR 0 5
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: EQUAL
40442: IFFALSE 40460
// begin weapon := j [ 2 ] ;
40444: LD_ADDR_VAR 0 8
40448: PUSH
40449: LD_VAR 0 5
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: ST_TO_ADDR
// break ;
40458: GO 40462
// end ;
40460: GO 40420
40462: POP
40463: POP
// if not weapon then
40464: LD_VAR 0 8
40468: NOT
40469: IFFALSE 40473
// continue ;
40471: GO 40369
// for k in factories do
40473: LD_ADDR_VAR 0 6
40477: PUSH
40478: LD_VAR 0 2
40482: PUSH
40483: FOR_IN
40484: IFFALSE 40549
// begin weapons := AvailableWeaponList ( k ) ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_VAR 0 6
40495: PPUSH
40496: CALL_OW 478
40500: ST_TO_ADDR
// if not weapons then
40501: LD_VAR 0 9
40505: NOT
40506: IFFALSE 40510
// continue ;
40508: GO 40483
// if weapon in weapons then
40510: LD_VAR 0 8
40514: PUSH
40515: LD_VAR 0 9
40519: IN
40520: IFFALSE 40547
// begin result := [ i , weapon ] ;
40522: LD_ADDR_VAR 0 3
40526: PUSH
40527: LD_VAR 0 4
40531: PUSH
40532: LD_VAR 0 8
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// exit ;
40541: POP
40542: POP
40543: POP
40544: POP
40545: GO 40555
// end ; end ;
40547: GO 40483
40549: POP
40550: POP
// end ;
40551: GO 40369
40553: POP
40554: POP
// end ;
40555: LD_VAR 0 3
40559: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40560: LD_INT 0
40562: PPUSH
// if not side or side > 8 then
40563: LD_VAR 0 3
40567: NOT
40568: PUSH
40569: LD_VAR 0 3
40573: PUSH
40574: LD_INT 8
40576: GREATER
40577: OR
40578: IFFALSE 40582
// exit ;
40580: GO 40641
// if not range then
40582: LD_VAR 0 4
40586: NOT
40587: IFFALSE 40598
// range := - 12 ;
40589: LD_ADDR_VAR 0 4
40593: PUSH
40594: LD_INT 12
40596: NEG
40597: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 3
40612: PPUSH
40613: LD_VAR 0 4
40617: PPUSH
40618: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40622: LD_VAR 0 1
40626: PPUSH
40627: LD_VAR 0 2
40631: PPUSH
40632: LD_VAR 0 3
40636: PPUSH
40637: CALL_OW 331
// end ;
40641: LD_VAR 0 5
40645: RET
// export function Video ( mode ) ; begin
40646: LD_INT 0
40648: PPUSH
// ingame_video = mode ;
40649: LD_ADDR_OWVAR 52
40653: PUSH
40654: LD_VAR 0 1
40658: ST_TO_ADDR
// interface_hidden = mode ;
40659: LD_ADDR_OWVAR 54
40663: PUSH
40664: LD_VAR 0 1
40668: ST_TO_ADDR
// end ;
40669: LD_VAR 0 2
40673: RET
// export function Join ( array , element ) ; begin
40674: LD_INT 0
40676: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: LD_VAR 0 1
40691: PUSH
40692: LD_INT 1
40694: PLUS
40695: PPUSH
40696: LD_VAR 0 2
40700: PPUSH
40701: CALL_OW 1
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 3
40710: RET
// export function JoinUnion ( array , element ) ; begin
40711: LD_INT 0
40713: PPUSH
// result := array union element ;
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_VAR 0 1
40723: PUSH
40724: LD_VAR 0 2
40728: UNION
40729: ST_TO_ADDR
// end ;
40730: LD_VAR 0 3
40734: RET
// export function GetBehemoths ( side ) ; begin
40735: LD_INT 0
40737: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40738: LD_ADDR_VAR 0 2
40742: PUSH
40743: LD_INT 22
40745: PUSH
40746: LD_VAR 0 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 31
40757: PUSH
40758: LD_INT 25
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PPUSH
40769: CALL_OW 69
40773: ST_TO_ADDR
// end ;
40774: LD_VAR 0 2
40778: RET
// export function Shuffle ( array ) ; var i , index ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
40783: PPUSH
// result := [ ] ;
40784: LD_ADDR_VAR 0 2
40788: PUSH
40789: EMPTY
40790: ST_TO_ADDR
// if not array then
40791: LD_VAR 0 1
40795: NOT
40796: IFFALSE 40800
// exit ;
40798: GO 40899
// Randomize ;
40800: CALL_OW 10
// for i = array downto 1 do
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: DOUBLE
40810: LD_VAR 0 1
40814: INC
40815: ST_TO_ADDR
40816: LD_INT 1
40818: PUSH
40819: FOR_DOWNTO
40820: IFFALSE 40897
// begin index := rand ( 1 , array ) ;
40822: LD_ADDR_VAR 0 4
40826: PUSH
40827: LD_INT 1
40829: PPUSH
40830: LD_VAR 0 1
40834: PPUSH
40835: CALL_OW 12
40839: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40840: LD_ADDR_VAR 0 2
40844: PUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: LD_VAR 0 2
40854: PUSH
40855: LD_INT 1
40857: PLUS
40858: PPUSH
40859: LD_VAR 0 1
40863: PUSH
40864: LD_VAR 0 4
40868: ARRAY
40869: PPUSH
40870: CALL_OW 2
40874: ST_TO_ADDR
// array := Delete ( array , index ) ;
40875: LD_ADDR_VAR 0 1
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: LD_VAR 0 4
40889: PPUSH
40890: CALL_OW 3
40894: ST_TO_ADDR
// end ;
40895: GO 40819
40897: POP
40898: POP
// end ;
40899: LD_VAR 0 2
40903: RET
// export function GetBaseMaterials ( base ) ; begin
40904: LD_INT 0
40906: PPUSH
// result := [ 0 , 0 , 0 ] ;
40907: LD_ADDR_VAR 0 2
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// if not base then
40926: LD_VAR 0 1
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 40984
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40935: LD_ADDR_VAR 0 2
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: LD_INT 1
40947: PPUSH
40948: CALL_OW 275
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: LD_INT 2
40960: PPUSH
40961: CALL_OW 275
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: LD_INT 3
40973: PPUSH
40974: CALL_OW 275
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// end ;
40984: LD_VAR 0 2
40988: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
// result := array ;
40993: LD_ADDR_VAR 0 3
40997: PUSH
40998: LD_VAR 0 1
41002: ST_TO_ADDR
// if size >= result then
41003: LD_VAR 0 2
41007: PUSH
41008: LD_VAR 0 3
41012: GREATEREQUAL
41013: IFFALSE 41017
// exit ;
41015: GO 41067
// if size then
41017: LD_VAR 0 2
41021: IFFALSE 41067
// for i := array downto size do
41023: LD_ADDR_VAR 0 4
41027: PUSH
41028: DOUBLE
41029: LD_VAR 0 1
41033: INC
41034: ST_TO_ADDR
41035: LD_VAR 0 2
41039: PUSH
41040: FOR_DOWNTO
41041: IFFALSE 41065
// result := Delete ( result , result ) ;
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: LD_VAR 0 3
41052: PPUSH
41053: LD_VAR 0 3
41057: PPUSH
41058: CALL_OW 3
41062: ST_TO_ADDR
41063: GO 41040
41065: POP
41066: POP
// end ;
41067: LD_VAR 0 3
41071: RET
// export function ComExit ( unit ) ; var tmp ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
// if not IsInUnit ( unit ) then
41076: LD_VAR 0 1
41080: PPUSH
41081: CALL_OW 310
41085: NOT
41086: IFFALSE 41090
// exit ;
41088: GO 41150
// tmp := IsInUnit ( unit ) ;
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 310
41104: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41105: LD_VAR 0 3
41109: PPUSH
41110: CALL_OW 247
41114: PUSH
41115: LD_INT 2
41117: EQUAL
41118: IFFALSE 41131
// ComExitVehicle ( unit ) else
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 121
41129: GO 41140
// ComExitBuilding ( unit ) ;
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 122
// result := tmp ;
41140: LD_ADDR_VAR 0 2
41144: PUSH
41145: LD_VAR 0 3
41149: ST_TO_ADDR
// end ;
41150: LD_VAR 0 2
41154: RET
// export function ComExitAll ( units ) ; var i ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
// if not units then
41159: LD_VAR 0 1
41163: NOT
41164: IFFALSE 41168
// exit ;
41166: GO 41194
// for i in units do
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_VAR 0 1
41177: PUSH
41178: FOR_IN
41179: IFFALSE 41192
// ComExit ( i ) ;
41181: LD_VAR 0 3
41185: PPUSH
41186: CALL 41072 0 1
41190: GO 41178
41192: POP
41193: POP
// end ;
41194: LD_VAR 0 2
41198: RET
// export function ResetHc ; begin
41199: LD_INT 0
41201: PPUSH
// InitHc ;
41202: CALL_OW 19
// hc_importance := 0 ;
41206: LD_ADDR_OWVAR 32
41210: PUSH
41211: LD_INT 0
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 1
41218: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41219: LD_INT 0
41221: PPUSH
41222: PPUSH
41223: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41224: LD_ADDR_VAR 0 6
41228: PUSH
41229: LD_VAR 0 1
41233: PUSH
41234: LD_VAR 0 3
41238: PLUS
41239: PUSH
41240: LD_INT 2
41242: DIV
41243: ST_TO_ADDR
// if _x < 0 then
41244: LD_VAR 0 6
41248: PUSH
41249: LD_INT 0
41251: LESS
41252: IFFALSE 41269
// _x := _x * - 1 ;
41254: LD_ADDR_VAR 0 6
41258: PUSH
41259: LD_VAR 0 6
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: MUL
41268: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41269: LD_ADDR_VAR 0 7
41273: PUSH
41274: LD_VAR 0 2
41278: PUSH
41279: LD_VAR 0 4
41283: PLUS
41284: PUSH
41285: LD_INT 2
41287: DIV
41288: ST_TO_ADDR
// if _y < 0 then
41289: LD_VAR 0 7
41293: PUSH
41294: LD_INT 0
41296: LESS
41297: IFFALSE 41314
// _y := _y * - 1 ;
41299: LD_ADDR_VAR 0 7
41303: PUSH
41304: LD_VAR 0 7
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: MUL
41313: ST_TO_ADDR
// result := [ _x , _y ] ;
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: LD_VAR 0 6
41323: PUSH
41324: LD_VAR 0 7
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: ST_TO_ADDR
// end ;
41333: LD_VAR 0 5
41337: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
// task := GetTaskList ( unit ) ;
41344: LD_ADDR_VAR 0 7
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: CALL_OW 437
41358: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41359: LD_VAR 0 7
41363: NOT
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_VAR 0 2
41374: PPUSH
41375: CALL_OW 308
41379: NOT
41380: AND
41381: IFFALSE 41385
// exit ;
41383: GO 41503
// if IsInArea ( unit , area ) then
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_VAR 0 2
41394: PPUSH
41395: CALL_OW 308
41399: IFFALSE 41417
// begin ComMoveToArea ( unit , goAway ) ;
41401: LD_VAR 0 1
41405: PPUSH
41406: LD_VAR 0 3
41410: PPUSH
41411: CALL_OW 113
// exit ;
41415: GO 41503
// end ; if task [ 1 ] [ 1 ] <> M then
41417: LD_VAR 0 7
41421: PUSH
41422: LD_INT 1
41424: ARRAY
41425: PUSH
41426: LD_INT 1
41428: ARRAY
41429: PUSH
41430: LD_STRING M
41432: NONEQUAL
41433: IFFALSE 41437
// exit ;
41435: GO 41503
// x := task [ 1 ] [ 2 ] ;
41437: LD_ADDR_VAR 0 5
41441: PUSH
41442: LD_VAR 0 7
41446: PUSH
41447: LD_INT 1
41449: ARRAY
41450: PUSH
41451: LD_INT 2
41453: ARRAY
41454: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41455: LD_ADDR_VAR 0 6
41459: PUSH
41460: LD_VAR 0 7
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PUSH
41469: LD_INT 3
41471: ARRAY
41472: ST_TO_ADDR
// if InArea ( x , y , area ) then
41473: LD_VAR 0 5
41477: PPUSH
41478: LD_VAR 0 6
41482: PPUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: CALL_OW 309
41492: IFFALSE 41503
// ComStop ( unit ) ;
41494: LD_VAR 0 1
41498: PPUSH
41499: CALL_OW 141
// end ;
41503: LD_VAR 0 4
41507: RET
// export function Abs ( value ) ; begin
41508: LD_INT 0
41510: PPUSH
// result := value ;
41511: LD_ADDR_VAR 0 2
41515: PUSH
41516: LD_VAR 0 1
41520: ST_TO_ADDR
// if value < 0 then
41521: LD_VAR 0 1
41525: PUSH
41526: LD_INT 0
41528: LESS
41529: IFFALSE 41546
// result := value * - 1 ;
41531: LD_ADDR_VAR 0 2
41535: PUSH
41536: LD_VAR 0 1
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: MUL
41545: ST_TO_ADDR
// end ;
41546: LD_VAR 0 2
41550: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41551: LD_INT 0
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
// if not unit or not building then
41561: LD_VAR 0 1
41565: NOT
41566: PUSH
41567: LD_VAR 0 2
41571: NOT
41572: OR
41573: IFFALSE 41577
// exit ;
41575: GO 41803
// x := GetX ( building ) ;
41577: LD_ADDR_VAR 0 4
41581: PUSH
41582: LD_VAR 0 2
41586: PPUSH
41587: CALL_OW 250
41591: ST_TO_ADDR
// y := GetY ( building ) ;
41592: LD_ADDR_VAR 0 6
41596: PUSH
41597: LD_VAR 0 2
41601: PPUSH
41602: CALL_OW 251
41606: ST_TO_ADDR
// d := GetDir ( building ) ;
41607: LD_ADDR_VAR 0 8
41611: PUSH
41612: LD_VAR 0 2
41616: PPUSH
41617: CALL_OW 254
41621: ST_TO_ADDR
// r := 4 ;
41622: LD_ADDR_VAR 0 9
41626: PUSH
41627: LD_INT 4
41629: ST_TO_ADDR
// for i := 1 to 5 do
41630: LD_ADDR_VAR 0 10
41634: PUSH
41635: DOUBLE
41636: LD_INT 1
41638: DEC
41639: ST_TO_ADDR
41640: LD_INT 5
41642: PUSH
41643: FOR_TO
41644: IFFALSE 41801
// begin _x := ShiftX ( x , d , r + i ) ;
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: LD_VAR 0 4
41655: PPUSH
41656: LD_VAR 0 8
41660: PPUSH
41661: LD_VAR 0 9
41665: PUSH
41666: LD_VAR 0 10
41670: PLUS
41671: PPUSH
41672: CALL_OW 272
41676: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41677: LD_ADDR_VAR 0 7
41681: PUSH
41682: LD_VAR 0 6
41686: PPUSH
41687: LD_VAR 0 8
41691: PPUSH
41692: LD_VAR 0 9
41696: PUSH
41697: LD_VAR 0 10
41701: PLUS
41702: PPUSH
41703: CALL_OW 273
41707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41708: LD_VAR 0 5
41712: PPUSH
41713: LD_VAR 0 7
41717: PPUSH
41718: CALL_OW 488
41722: PUSH
41723: LD_VAR 0 5
41727: PPUSH
41728: LD_VAR 0 7
41732: PPUSH
41733: CALL_OW 428
41737: PPUSH
41738: CALL_OW 247
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: IN
41753: NOT
41754: AND
41755: IFFALSE 41799
// begin ComMoveXY ( unit , _x , _y ) ;
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_VAR 0 5
41766: PPUSH
41767: LD_VAR 0 7
41771: PPUSH
41772: CALL_OW 111
// result := [ _x , _y ] ;
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_VAR 0 5
41785: PUSH
41786: LD_VAR 0 7
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// exit ;
41795: POP
41796: POP
41797: GO 41803
// end ; end ;
41799: GO 41643
41801: POP
41802: POP
// end ;
41803: LD_VAR 0 3
41807: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41808: LD_INT 0
41810: PPUSH
41811: PPUSH
41812: PPUSH
// result := 0 ;
41813: LD_ADDR_VAR 0 3
41817: PUSH
41818: LD_INT 0
41820: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41821: LD_VAR 0 1
41825: PUSH
41826: LD_INT 0
41828: LESS
41829: PUSH
41830: LD_VAR 0 1
41834: PUSH
41835: LD_INT 8
41837: GREATER
41838: OR
41839: PUSH
41840: LD_VAR 0 2
41844: PUSH
41845: LD_INT 0
41847: LESS
41848: OR
41849: PUSH
41850: LD_VAR 0 2
41854: PUSH
41855: LD_INT 8
41857: GREATER
41858: OR
41859: IFFALSE 41863
// exit ;
41861: GO 41938
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41863: LD_ADDR_VAR 0 4
41867: PUSH
41868: LD_INT 22
41870: PUSH
41871: LD_VAR 0 2
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PPUSH
41880: CALL_OW 69
41884: PUSH
41885: FOR_IN
41886: IFFALSE 41936
// begin un := UnitShoot ( i ) ;
41888: LD_ADDR_VAR 0 5
41892: PUSH
41893: LD_VAR 0 4
41897: PPUSH
41898: CALL_OW 504
41902: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41903: LD_VAR 0 5
41907: PPUSH
41908: CALL_OW 255
41912: PUSH
41913: LD_VAR 0 1
41917: EQUAL
41918: IFFALSE 41934
// begin result := un ;
41920: LD_ADDR_VAR 0 3
41924: PUSH
41925: LD_VAR 0 5
41929: ST_TO_ADDR
// exit ;
41930: POP
41931: POP
41932: GO 41938
// end ; end ;
41934: GO 41885
41936: POP
41937: POP
// end ;
41938: LD_VAR 0 3
41942: RET
// export function GetCargoBay ( units ) ; begin
41943: LD_INT 0
41945: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41946: LD_ADDR_VAR 0 2
41950: PUSH
41951: LD_VAR 0 1
41955: PPUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 34
41961: PUSH
41962: LD_INT 12
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 34
41971: PUSH
41972: LD_INT 51
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 34
41981: PUSH
41982: LD_INT 32
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 34
41991: PUSH
41992: LD_INT 89
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: PPUSH
42006: CALL_OW 72
42010: ST_TO_ADDR
// end ;
42011: LD_VAR 0 2
42015: RET
// export function Negate ( value ) ; begin
42016: LD_INT 0
42018: PPUSH
// result := not value ;
42019: LD_ADDR_VAR 0 2
42023: PUSH
42024: LD_VAR 0 1
42028: NOT
42029: ST_TO_ADDR
// end ;
42030: LD_VAR 0 2
42034: RET
// export function Inc ( value ) ; begin
42035: LD_INT 0
42037: PPUSH
// result := value + 1 ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 1
42050: PLUS
42051: ST_TO_ADDR
// end ;
42052: LD_VAR 0 2
42056: RET
// export function Dec ( value ) ; begin
42057: LD_INT 0
42059: PPUSH
// result := value - 1 ;
42060: LD_ADDR_VAR 0 2
42064: PUSH
42065: LD_VAR 0 1
42069: PUSH
42070: LD_INT 1
42072: MINUS
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 2
42078: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42079: LD_INT 0
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42089: LD_VAR 0 1
42093: PPUSH
42094: LD_VAR 0 2
42098: PPUSH
42099: CALL_OW 488
42103: NOT
42104: PUSH
42105: LD_VAR 0 3
42109: PPUSH
42110: LD_VAR 0 4
42114: PPUSH
42115: CALL_OW 488
42119: NOT
42120: OR
42121: IFFALSE 42134
// begin result := - 1 ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: ST_TO_ADDR
// exit ;
42132: GO 42369
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42134: LD_ADDR_VAR 0 12
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: LD_VAR 0 2
42148: PPUSH
42149: LD_VAR 0 3
42153: PPUSH
42154: LD_VAR 0 4
42158: PPUSH
42159: CALL 41219 0 4
42163: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42164: LD_ADDR_VAR 0 11
42168: PUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: LD_VAR 0 2
42178: PPUSH
42179: LD_VAR 0 12
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: PPUSH
42188: LD_VAR 0 12
42192: PUSH
42193: LD_INT 2
42195: ARRAY
42196: PPUSH
42197: CALL_OW 298
42201: ST_TO_ADDR
// distance := 9999 ;
42202: LD_ADDR_VAR 0 10
42206: PUSH
42207: LD_INT 9999
42209: ST_TO_ADDR
// for i := 0 to 5 do
42210: LD_ADDR_VAR 0 6
42214: PUSH
42215: DOUBLE
42216: LD_INT 0
42218: DEC
42219: ST_TO_ADDR
42220: LD_INT 5
42222: PUSH
42223: FOR_TO
42224: IFFALSE 42367
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42226: LD_ADDR_VAR 0 7
42230: PUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: LD_VAR 0 6
42240: PPUSH
42241: LD_VAR 0 11
42245: PPUSH
42246: CALL_OW 272
42250: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42251: LD_ADDR_VAR 0 8
42255: PUSH
42256: LD_VAR 0 2
42260: PPUSH
42261: LD_VAR 0 6
42265: PPUSH
42266: LD_VAR 0 11
42270: PPUSH
42271: CALL_OW 273
42275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42276: LD_VAR 0 7
42280: PPUSH
42281: LD_VAR 0 8
42285: PPUSH
42286: CALL_OW 488
42290: NOT
42291: IFFALSE 42295
// continue ;
42293: GO 42223
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 12
42304: PUSH
42305: LD_INT 1
42307: ARRAY
42308: PPUSH
42309: LD_VAR 0 12
42313: PUSH
42314: LD_INT 2
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 7
42322: PPUSH
42323: LD_VAR 0 8
42327: PPUSH
42328: CALL_OW 298
42332: ST_TO_ADDR
// if tmp < distance then
42333: LD_VAR 0 9
42337: PUSH
42338: LD_VAR 0 10
42342: LESS
42343: IFFALSE 42365
// begin result := i ;
42345: LD_ADDR_VAR 0 5
42349: PUSH
42350: LD_VAR 0 6
42354: ST_TO_ADDR
// distance := tmp ;
42355: LD_ADDR_VAR 0 10
42359: PUSH
42360: LD_VAR 0 9
42364: ST_TO_ADDR
// end ; end ;
42365: GO 42223
42367: POP
42368: POP
// end ;
42369: LD_VAR 0 5
42373: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42374: LD_INT 0
42376: PPUSH
42377: PPUSH
// if not driver or not IsInUnit ( driver ) then
42378: LD_VAR 0 1
42382: NOT
42383: PUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 310
42393: NOT
42394: OR
42395: IFFALSE 42399
// exit ;
42397: GO 42489
// vehicle := IsInUnit ( driver ) ;
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 310
42413: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42414: LD_VAR 0 1
42418: PPUSH
42419: LD_STRING \
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: PUSH
42449: LD_STRING E
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_VAR 0 3
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PPUSH
42485: CALL_OW 446
// end ;
42489: LD_VAR 0 2
42493: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42494: LD_INT 0
42496: PPUSH
42497: PPUSH
// if not driver or not IsInUnit ( driver ) then
42498: LD_VAR 0 1
42502: NOT
42503: PUSH
42504: LD_VAR 0 1
42508: PPUSH
42509: CALL_OW 310
42513: NOT
42514: OR
42515: IFFALSE 42519
// exit ;
42517: GO 42609
// vehicle := IsInUnit ( driver ) ;
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_VAR 0 1
42528: PPUSH
42529: CALL_OW 310
42533: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42534: LD_VAR 0 1
42538: PPUSH
42539: LD_STRING \
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: LD_STRING E
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_VAR 0 3
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PPUSH
42605: CALL_OW 447
// end ;
42609: LD_VAR 0 2
42613: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42614: LD_INT 0
42616: PPUSH
42617: PPUSH
42618: PPUSH
// tmp := [ ] ;
42619: LD_ADDR_VAR 0 5
42623: PUSH
42624: EMPTY
42625: ST_TO_ADDR
// for i in units do
42626: LD_ADDR_VAR 0 4
42630: PUSH
42631: LD_VAR 0 1
42635: PUSH
42636: FOR_IN
42637: IFFALSE 42675
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42639: LD_ADDR_VAR 0 5
42643: PUSH
42644: LD_VAR 0 5
42648: PPUSH
42649: LD_VAR 0 5
42653: PUSH
42654: LD_INT 1
42656: PLUS
42657: PPUSH
42658: LD_VAR 0 4
42662: PPUSH
42663: CALL_OW 256
42667: PPUSH
42668: CALL_OW 2
42672: ST_TO_ADDR
42673: GO 42636
42675: POP
42676: POP
// if not tmp then
42677: LD_VAR 0 5
42681: NOT
42682: IFFALSE 42686
// exit ;
42684: GO 42734
// if asc then
42686: LD_VAR 0 2
42690: IFFALSE 42714
// result := SortListByListAsc ( units , tmp ) else
42692: LD_ADDR_VAR 0 3
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 5
42706: PPUSH
42707: CALL_OW 76
42711: ST_TO_ADDR
42712: GO 42734
// result := SortListByListDesc ( units , tmp ) ;
42714: LD_ADDR_VAR 0 3
42718: PUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: LD_VAR 0 5
42728: PPUSH
42729: CALL_OW 77
42733: ST_TO_ADDR
// end ;
42734: LD_VAR 0 3
42738: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42739: LD_INT 0
42741: PPUSH
42742: PPUSH
// task := GetTaskList ( mech ) ;
42743: LD_ADDR_VAR 0 4
42747: PUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 437
42757: ST_TO_ADDR
// if not task then
42758: LD_VAR 0 4
42762: NOT
42763: IFFALSE 42767
// exit ;
42765: GO 42809
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_VAR 0 4
42776: PUSH
42777: LD_INT 1
42779: ARRAY
42780: PUSH
42781: LD_INT 1
42783: ARRAY
42784: PUSH
42785: LD_STRING r
42787: EQUAL
42788: PUSH
42789: LD_VAR 0 4
42793: PUSH
42794: LD_INT 1
42796: ARRAY
42797: PUSH
42798: LD_INT 4
42800: ARRAY
42801: PUSH
42802: LD_VAR 0 2
42806: EQUAL
42807: AND
42808: ST_TO_ADDR
// end ;
42809: LD_VAR 0 3
42813: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42814: LD_INT 0
42816: PPUSH
// SetDir ( unit , d ) ;
42817: LD_VAR 0 1
42821: PPUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42831: LD_VAR 0 1
42835: PPUSH
42836: LD_VAR 0 2
42840: PPUSH
42841: LD_VAR 0 3
42845: PPUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: CALL_OW 48
// end ;
42855: LD_VAR 0 6
42859: RET
// export function ToNaturalNumber ( number ) ; begin
42860: LD_INT 0
42862: PPUSH
// result := number div 1 ;
42863: LD_ADDR_VAR 0 2
42867: PUSH
42868: LD_VAR 0 1
42872: PUSH
42873: LD_INT 1
42875: DIV
42876: ST_TO_ADDR
// if number < 0 then
42877: LD_VAR 0 1
42881: PUSH
42882: LD_INT 0
42884: LESS
42885: IFFALSE 42895
// result := 0 ;
42887: LD_ADDR_VAR 0 2
42891: PUSH
42892: LD_INT 0
42894: ST_TO_ADDR
// end ;
42895: LD_VAR 0 2
42899: RET
// export function SortByClass ( units , class ) ; var un ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
// if not units or not class then
42904: LD_VAR 0 1
42908: NOT
42909: PUSH
42910: LD_VAR 0 2
42914: NOT
42915: OR
42916: IFFALSE 42920
// exit ;
42918: GO 43015
// result := [ ] ;
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: EMPTY
42926: ST_TO_ADDR
// for un in units do
42927: LD_ADDR_VAR 0 4
42931: PUSH
42932: LD_VAR 0 1
42936: PUSH
42937: FOR_IN
42938: IFFALSE 43013
// if GetClass ( un ) = class then
42940: LD_VAR 0 4
42944: PPUSH
42945: CALL_OW 257
42949: PUSH
42950: LD_VAR 0 2
42954: EQUAL
42955: IFFALSE 42982
// result := Insert ( result , 1 , un ) else
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_VAR 0 3
42966: PPUSH
42967: LD_INT 1
42969: PPUSH
42970: LD_VAR 0 4
42974: PPUSH
42975: CALL_OW 2
42979: ST_TO_ADDR
42980: GO 43011
// result := Replace ( result , result + 1 , un ) ;
42982: LD_ADDR_VAR 0 3
42986: PUSH
42987: LD_VAR 0 3
42991: PPUSH
42992: LD_VAR 0 3
42996: PUSH
42997: LD_INT 1
42999: PLUS
43000: PPUSH
43001: LD_VAR 0 4
43005: PPUSH
43006: CALL_OW 1
43010: ST_TO_ADDR
43011: GO 42937
43013: POP
43014: POP
// end ;
43015: LD_VAR 0 3
43019: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43020: LD_INT 0
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
// result := [ ] ;
43029: LD_ADDR_VAR 0 4
43033: PUSH
43034: EMPTY
43035: ST_TO_ADDR
// if x - r < 0 then
43036: LD_VAR 0 1
43040: PUSH
43041: LD_VAR 0 3
43045: MINUS
43046: PUSH
43047: LD_INT 0
43049: LESS
43050: IFFALSE 43062
// min_x := 0 else
43052: LD_ADDR_VAR 0 8
43056: PUSH
43057: LD_INT 0
43059: ST_TO_ADDR
43060: GO 43078
// min_x := x - r ;
43062: LD_ADDR_VAR 0 8
43066: PUSH
43067: LD_VAR 0 1
43071: PUSH
43072: LD_VAR 0 3
43076: MINUS
43077: ST_TO_ADDR
// if y - r < 0 then
43078: LD_VAR 0 2
43082: PUSH
43083: LD_VAR 0 3
43087: MINUS
43088: PUSH
43089: LD_INT 0
43091: LESS
43092: IFFALSE 43104
// min_y := 0 else
43094: LD_ADDR_VAR 0 7
43098: PUSH
43099: LD_INT 0
43101: ST_TO_ADDR
43102: GO 43120
// min_y := y - r ;
43104: LD_ADDR_VAR 0 7
43108: PUSH
43109: LD_VAR 0 2
43113: PUSH
43114: LD_VAR 0 3
43118: MINUS
43119: ST_TO_ADDR
// max_x := x + r ;
43120: LD_ADDR_VAR 0 9
43124: PUSH
43125: LD_VAR 0 1
43129: PUSH
43130: LD_VAR 0 3
43134: PLUS
43135: ST_TO_ADDR
// max_y := y + r ;
43136: LD_ADDR_VAR 0 10
43140: PUSH
43141: LD_VAR 0 2
43145: PUSH
43146: LD_VAR 0 3
43150: PLUS
43151: ST_TO_ADDR
// for _x = min_x to max_x do
43152: LD_ADDR_VAR 0 5
43156: PUSH
43157: DOUBLE
43158: LD_VAR 0 8
43162: DEC
43163: ST_TO_ADDR
43164: LD_VAR 0 9
43168: PUSH
43169: FOR_TO
43170: IFFALSE 43271
// for _y = min_y to max_y do
43172: LD_ADDR_VAR 0 6
43176: PUSH
43177: DOUBLE
43178: LD_VAR 0 7
43182: DEC
43183: ST_TO_ADDR
43184: LD_VAR 0 10
43188: PUSH
43189: FOR_TO
43190: IFFALSE 43267
// begin if not ValidHex ( _x , _y ) then
43192: LD_VAR 0 5
43196: PPUSH
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 488
43206: NOT
43207: IFFALSE 43211
// continue ;
43209: GO 43189
// if GetResourceTypeXY ( _x , _y ) then
43211: LD_VAR 0 5
43215: PPUSH
43216: LD_VAR 0 6
43220: PPUSH
43221: CALL_OW 283
43225: IFFALSE 43265
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43227: LD_ADDR_VAR 0 4
43231: PUSH
43232: LD_VAR 0 4
43236: PPUSH
43237: LD_VAR 0 4
43241: PUSH
43242: LD_INT 1
43244: PLUS
43245: PPUSH
43246: LD_VAR 0 5
43250: PUSH
43251: LD_VAR 0 6
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PPUSH
43260: CALL_OW 1
43264: ST_TO_ADDR
// end ;
43265: GO 43189
43267: POP
43268: POP
43269: GO 43169
43271: POP
43272: POP
// end ;
43273: LD_VAR 0 4
43277: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43278: LD_INT 0
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
// if not units then
43288: LD_VAR 0 1
43292: NOT
43293: IFFALSE 43297
// exit ;
43295: GO 43825
// result := UnitFilter ( units , [ f_ok ] ) ;
43297: LD_ADDR_VAR 0 3
43301: PUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: LD_INT 50
43309: PUSH
43310: EMPTY
43311: LIST
43312: PPUSH
43313: CALL_OW 72
43317: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43318: LD_ADDR_VAR 0 8
43322: PUSH
43323: LD_VAR 0 1
43327: PUSH
43328: LD_INT 1
43330: ARRAY
43331: PPUSH
43332: CALL_OW 255
43336: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43337: LD_ADDR_VAR 0 10
43341: PUSH
43342: LD_INT 29
43344: PUSH
43345: LD_INT 91
43347: PUSH
43348: LD_INT 49
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// if not result then
43356: LD_VAR 0 3
43360: NOT
43361: IFFALSE 43365
// exit ;
43363: GO 43825
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43365: LD_ADDR_VAR 0 5
43369: PUSH
43370: LD_INT 81
43372: PUSH
43373: LD_VAR 0 8
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PPUSH
43382: CALL_OW 69
43386: ST_TO_ADDR
// for i in result do
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: LD_VAR 0 3
43396: PUSH
43397: FOR_IN
43398: IFFALSE 43823
// begin tag := GetTag ( i ) + 1 ;
43400: LD_ADDR_VAR 0 9
43404: PUSH
43405: LD_VAR 0 4
43409: PPUSH
43410: CALL_OW 110
43414: PUSH
43415: LD_INT 1
43417: PLUS
43418: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43419: LD_ADDR_VAR 0 7
43423: PUSH
43424: LD_VAR 0 4
43428: PPUSH
43429: CALL_OW 250
43433: PPUSH
43434: LD_VAR 0 4
43438: PPUSH
43439: CALL_OW 251
43443: PPUSH
43444: LD_INT 4
43446: PPUSH
43447: CALL 43020 0 3
43451: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43452: LD_VAR 0 4
43456: PPUSH
43457: CALL_OW 247
43461: PUSH
43462: LD_INT 2
43464: EQUAL
43465: PUSH
43466: LD_VAR 0 7
43470: PUSH
43471: LD_INT 2
43473: GREATER
43474: AND
43475: PUSH
43476: LD_VAR 0 4
43480: PPUSH
43481: CALL_OW 264
43485: PUSH
43486: LD_VAR 0 10
43490: IN
43491: NOT
43492: AND
43493: IFFALSE 43532
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43495: LD_VAR 0 4
43499: PPUSH
43500: LD_VAR 0 7
43504: PUSH
43505: LD_INT 1
43507: ARRAY
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: PPUSH
43513: LD_VAR 0 7
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: PUSH
43522: LD_INT 2
43524: ARRAY
43525: PPUSH
43526: CALL_OW 116
43530: GO 43821
// if path > tag then
43532: LD_VAR 0 2
43536: PUSH
43537: LD_VAR 0 9
43541: GREATER
43542: IFFALSE 43750
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43544: LD_ADDR_VAR 0 6
43548: PUSH
43549: LD_VAR 0 5
43553: PPUSH
43554: LD_INT 91
43556: PUSH
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 8
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: PPUSH
43570: CALL_OW 72
43574: ST_TO_ADDR
// if nearEnemy then
43575: LD_VAR 0 6
43579: IFFALSE 43648
// begin if GetWeapon ( i ) = ru_time_lapser then
43581: LD_VAR 0 4
43585: PPUSH
43586: CALL_OW 264
43590: PUSH
43591: LD_INT 49
43593: EQUAL
43594: IFFALSE 43622
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43596: LD_VAR 0 4
43600: PPUSH
43601: LD_VAR 0 6
43605: PPUSH
43606: LD_VAR 0 4
43610: PPUSH
43611: CALL_OW 74
43615: PPUSH
43616: CALL_OW 112
43620: GO 43646
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43622: LD_VAR 0 4
43626: PPUSH
43627: LD_VAR 0 6
43631: PPUSH
43632: LD_VAR 0 4
43636: PPUSH
43637: CALL_OW 74
43641: PPUSH
43642: CALL 44896 0 2
// end else
43646: GO 43748
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43648: LD_VAR 0 4
43652: PPUSH
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 9
43662: ARRAY
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: PPUSH
43668: LD_VAR 0 2
43672: PUSH
43673: LD_VAR 0 9
43677: ARRAY
43678: PUSH
43679: LD_INT 2
43681: ARRAY
43682: PPUSH
43683: CALL_OW 297
43687: PUSH
43688: LD_INT 6
43690: GREATER
43691: IFFALSE 43734
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43693: LD_VAR 0 4
43697: PPUSH
43698: LD_VAR 0 2
43702: PUSH
43703: LD_VAR 0 9
43707: ARRAY
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: PPUSH
43713: LD_VAR 0 2
43717: PUSH
43718: LD_VAR 0 9
43722: ARRAY
43723: PUSH
43724: LD_INT 2
43726: ARRAY
43727: PPUSH
43728: CALL_OW 114
43732: GO 43748
// SetTag ( i , tag ) ;
43734: LD_VAR 0 4
43738: PPUSH
43739: LD_VAR 0 9
43743: PPUSH
43744: CALL_OW 109
// end else
43748: GO 43821
// if enemy then
43750: LD_VAR 0 5
43754: IFFALSE 43821
// begin if GetWeapon ( i ) = ru_time_lapser then
43756: LD_VAR 0 4
43760: PPUSH
43761: CALL_OW 264
43765: PUSH
43766: LD_INT 49
43768: EQUAL
43769: IFFALSE 43797
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43771: LD_VAR 0 4
43775: PPUSH
43776: LD_VAR 0 5
43780: PPUSH
43781: LD_VAR 0 4
43785: PPUSH
43786: CALL_OW 74
43790: PPUSH
43791: CALL_OW 112
43795: GO 43821
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43797: LD_VAR 0 4
43801: PPUSH
43802: LD_VAR 0 5
43806: PPUSH
43807: LD_VAR 0 4
43811: PPUSH
43812: CALL_OW 74
43816: PPUSH
43817: CALL 44896 0 2
// end ; end ;
43821: GO 43397
43823: POP
43824: POP
// end ;
43825: LD_VAR 0 3
43829: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43830: LD_INT 0
43832: PPUSH
43833: PPUSH
43834: PPUSH
// if not unit or IsInUnit ( unit ) then
43835: LD_VAR 0 1
43839: NOT
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 310
43850: OR
43851: IFFALSE 43855
// exit ;
43853: GO 43946
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43855: LD_ADDR_VAR 0 4
43859: PUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 250
43869: PPUSH
43870: LD_VAR 0 2
43874: PPUSH
43875: LD_INT 1
43877: PPUSH
43878: CALL_OW 272
43882: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43883: LD_ADDR_VAR 0 5
43887: PUSH
43888: LD_VAR 0 1
43892: PPUSH
43893: CALL_OW 251
43897: PPUSH
43898: LD_VAR 0 2
43902: PPUSH
43903: LD_INT 1
43905: PPUSH
43906: CALL_OW 273
43910: ST_TO_ADDR
// if ValidHex ( x , y ) then
43911: LD_VAR 0 4
43915: PPUSH
43916: LD_VAR 0 5
43920: PPUSH
43921: CALL_OW 488
43925: IFFALSE 43946
// ComTurnXY ( unit , x , y ) ;
43927: LD_VAR 0 1
43931: PPUSH
43932: LD_VAR 0 4
43936: PPUSH
43937: LD_VAR 0 5
43941: PPUSH
43942: CALL_OW 118
// end ;
43946: LD_VAR 0 3
43950: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43951: LD_INT 0
43953: PPUSH
43954: PPUSH
// result := false ;
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_INT 0
43962: ST_TO_ADDR
// if not units then
43963: LD_VAR 0 2
43967: NOT
43968: IFFALSE 43972
// exit ;
43970: GO 44017
// for i in units do
43972: LD_ADDR_VAR 0 4
43976: PUSH
43977: LD_VAR 0 2
43981: PUSH
43982: FOR_IN
43983: IFFALSE 44015
// if See ( side , i ) then
43985: LD_VAR 0 1
43989: PPUSH
43990: LD_VAR 0 4
43994: PPUSH
43995: CALL_OW 292
43999: IFFALSE 44013
// begin result := true ;
44001: LD_ADDR_VAR 0 3
44005: PUSH
44006: LD_INT 1
44008: ST_TO_ADDR
// exit ;
44009: POP
44010: POP
44011: GO 44017
// end ;
44013: GO 43982
44015: POP
44016: POP
// end ;
44017: LD_VAR 0 3
44021: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44022: LD_INT 0
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
// if not unit or not points then
44028: LD_VAR 0 1
44032: NOT
44033: PUSH
44034: LD_VAR 0 2
44038: NOT
44039: OR
44040: IFFALSE 44044
// exit ;
44042: GO 44134
// dist := 99999 ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_INT 99999
44051: ST_TO_ADDR
// for i in points do
44052: LD_ADDR_VAR 0 4
44056: PUSH
44057: LD_VAR 0 2
44061: PUSH
44062: FOR_IN
44063: IFFALSE 44132
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44065: LD_ADDR_VAR 0 6
44069: PUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: LD_VAR 0 4
44079: PUSH
44080: LD_INT 1
44082: ARRAY
44083: PPUSH
44084: LD_VAR 0 4
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: PPUSH
44093: CALL_OW 297
44097: ST_TO_ADDR
// if tmpDist < dist then
44098: LD_VAR 0 6
44102: PUSH
44103: LD_VAR 0 5
44107: LESS
44108: IFFALSE 44130
// begin result := i ;
44110: LD_ADDR_VAR 0 3
44114: PUSH
44115: LD_VAR 0 4
44119: ST_TO_ADDR
// dist := tmpDist ;
44120: LD_ADDR_VAR 0 5
44124: PUSH
44125: LD_VAR 0 6
44129: ST_TO_ADDR
// end ; end ;
44130: GO 44062
44132: POP
44133: POP
// end ;
44134: LD_VAR 0 3
44138: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44139: LD_INT 0
44141: PPUSH
// uc_side := side ;
44142: LD_ADDR_OWVAR 20
44146: PUSH
44147: LD_VAR 0 1
44151: ST_TO_ADDR
// uc_nation := 3 ;
44152: LD_ADDR_OWVAR 21
44156: PUSH
44157: LD_INT 3
44159: ST_TO_ADDR
// vc_chassis := 25 ;
44160: LD_ADDR_OWVAR 37
44164: PUSH
44165: LD_INT 25
44167: ST_TO_ADDR
// vc_engine := engine_siberite ;
44168: LD_ADDR_OWVAR 39
44172: PUSH
44173: LD_INT 3
44175: ST_TO_ADDR
// vc_control := control_computer ;
44176: LD_ADDR_OWVAR 38
44180: PUSH
44181: LD_INT 3
44183: ST_TO_ADDR
// vc_weapon := 59 ;
44184: LD_ADDR_OWVAR 40
44188: PUSH
44189: LD_INT 59
44191: ST_TO_ADDR
// result := CreateVehicle ;
44192: LD_ADDR_VAR 0 5
44196: PUSH
44197: CALL_OW 45
44201: ST_TO_ADDR
// SetDir ( result , d ) ;
44202: LD_VAR 0 5
44206: PPUSH
44207: LD_VAR 0 4
44211: PPUSH
44212: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44216: LD_VAR 0 5
44220: PPUSH
44221: LD_VAR 0 2
44225: PPUSH
44226: LD_VAR 0 3
44230: PPUSH
44231: LD_INT 0
44233: PPUSH
44234: CALL_OW 48
// end ;
44238: LD_VAR 0 5
44242: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44243: LD_INT 0
44245: PPUSH
44246: PPUSH
44247: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44248: LD_ADDR_VAR 0 2
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44271: LD_VAR 0 1
44275: NOT
44276: PUSH
44277: LD_VAR 0 1
44281: PPUSH
44282: CALL_OW 264
44286: PUSH
44287: LD_INT 12
44289: PUSH
44290: LD_INT 51
44292: PUSH
44293: LD_INT 32
44295: PUSH
44296: LD_INT 89
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: IN
44305: NOT
44306: OR
44307: IFFALSE 44311
// exit ;
44309: GO 44409
// for i := 1 to 3 do
44311: LD_ADDR_VAR 0 3
44315: PUSH
44316: DOUBLE
44317: LD_INT 1
44319: DEC
44320: ST_TO_ADDR
44321: LD_INT 3
44323: PUSH
44324: FOR_TO
44325: IFFALSE 44407
// begin tmp := GetCargo ( cargo , i ) ;
44327: LD_ADDR_VAR 0 4
44331: PUSH
44332: LD_VAR 0 1
44336: PPUSH
44337: LD_VAR 0 3
44341: PPUSH
44342: CALL_OW 289
44346: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44347: LD_ADDR_VAR 0 2
44351: PUSH
44352: LD_VAR 0 2
44356: PPUSH
44357: LD_VAR 0 3
44361: PPUSH
44362: LD_VAR 0 4
44366: PPUSH
44367: CALL_OW 1
44371: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44372: LD_ADDR_VAR 0 2
44376: PUSH
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_INT 4
44384: PPUSH
44385: LD_VAR 0 2
44389: PUSH
44390: LD_INT 4
44392: ARRAY
44393: PUSH
44394: LD_VAR 0 4
44398: PLUS
44399: PPUSH
44400: CALL_OW 1
44404: ST_TO_ADDR
// end ;
44405: GO 44324
44407: POP
44408: POP
// end ;
44409: LD_VAR 0 2
44413: RET
// export function Length ( array ) ; begin
44414: LD_INT 0
44416: PPUSH
// result := array + 0 ;
44417: LD_ADDR_VAR 0 2
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_INT 0
44429: PLUS
44430: ST_TO_ADDR
// end ;
44431: LD_VAR 0 2
44435: RET
// export function PrepareArray ( array ) ; begin
44436: LD_INT 0
44438: PPUSH
// result := array diff 0 ;
44439: LD_ADDR_VAR 0 2
44443: PUSH
44444: LD_VAR 0 1
44448: PUSH
44449: LD_INT 0
44451: DIFF
44452: ST_TO_ADDR
// if not result [ 1 ] then
44453: LD_VAR 0 2
44457: PUSH
44458: LD_INT 1
44460: ARRAY
44461: NOT
44462: IFFALSE 44482
// result := Delete ( result , 1 ) ;
44464: LD_ADDR_VAR 0 2
44468: PUSH
44469: LD_VAR 0 2
44473: PPUSH
44474: LD_INT 1
44476: PPUSH
44477: CALL_OW 3
44481: ST_TO_ADDR
// end ;
44482: LD_VAR 0 2
44486: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44487: LD_INT 0
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
// sibRocketRange := 25 ;
44493: LD_ADDR_VAR 0 6
44497: PUSH
44498: LD_INT 25
44500: ST_TO_ADDR
// result := false ;
44501: LD_ADDR_VAR 0 4
44505: PUSH
44506: LD_INT 0
44508: ST_TO_ADDR
// for i := 0 to 5 do
44509: LD_ADDR_VAR 0 5
44513: PUSH
44514: DOUBLE
44515: LD_INT 0
44517: DEC
44518: ST_TO_ADDR
44519: LD_INT 5
44521: PUSH
44522: FOR_TO
44523: IFFALSE 44590
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44525: LD_VAR 0 1
44529: PPUSH
44530: LD_VAR 0 5
44534: PPUSH
44535: LD_VAR 0 6
44539: PPUSH
44540: CALL_OW 272
44544: PPUSH
44545: LD_VAR 0 2
44549: PPUSH
44550: LD_VAR 0 5
44554: PPUSH
44555: LD_VAR 0 6
44559: PPUSH
44560: CALL_OW 273
44564: PPUSH
44565: LD_VAR 0 3
44569: PPUSH
44570: CALL_OW 309
44574: IFFALSE 44588
// begin result := true ;
44576: LD_ADDR_VAR 0 4
44580: PUSH
44581: LD_INT 1
44583: ST_TO_ADDR
// exit ;
44584: POP
44585: POP
44586: GO 44592
// end ;
44588: GO 44522
44590: POP
44591: POP
// end ;
44592: LD_VAR 0 4
44596: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44597: LD_INT 0
44599: PPUSH
44600: PPUSH
44601: PPUSH
// if btype = b_depot then
44602: LD_VAR 0 2
44606: PUSH
44607: LD_INT 0
44609: EQUAL
44610: IFFALSE 44622
// begin result := true ;
44612: LD_ADDR_VAR 0 3
44616: PUSH
44617: LD_INT 1
44619: ST_TO_ADDR
// exit ;
44620: GO 44738
// end ; pom := GetBase ( depot ) ;
44622: LD_ADDR_VAR 0 4
44626: PUSH
44627: LD_VAR 0 1
44631: PPUSH
44632: CALL_OW 274
44636: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44637: LD_ADDR_VAR 0 5
44641: PUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: LD_VAR 0 1
44651: PPUSH
44652: CALL_OW 248
44656: PPUSH
44657: CALL_OW 450
44661: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44662: LD_ADDR_VAR 0 3
44666: PUSH
44667: LD_VAR 0 4
44671: PPUSH
44672: LD_INT 1
44674: PPUSH
44675: CALL_OW 275
44679: PUSH
44680: LD_VAR 0 5
44684: PUSH
44685: LD_INT 1
44687: ARRAY
44688: GREATEREQUAL
44689: PUSH
44690: LD_VAR 0 4
44694: PPUSH
44695: LD_INT 2
44697: PPUSH
44698: CALL_OW 275
44702: PUSH
44703: LD_VAR 0 5
44707: PUSH
44708: LD_INT 2
44710: ARRAY
44711: GREATEREQUAL
44712: AND
44713: PUSH
44714: LD_VAR 0 4
44718: PPUSH
44719: LD_INT 3
44721: PPUSH
44722: CALL_OW 275
44726: PUSH
44727: LD_VAR 0 5
44731: PUSH
44732: LD_INT 3
44734: ARRAY
44735: GREATEREQUAL
44736: AND
44737: ST_TO_ADDR
// end ;
44738: LD_VAR 0 3
44742: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44743: LD_INT 0
44745: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44746: LD_VAR 0 1
44750: PPUSH
44751: LD_VAR 0 2
44755: PPUSH
44756: LD_INT 0
44758: PPUSH
44759: LD_INT 0
44761: PPUSH
44762: LD_INT 1
44764: PPUSH
44765: LD_INT 0
44767: PPUSH
44768: CALL_OW 587
// end ;
44772: LD_VAR 0 3
44776: RET
// export function CenterOnNow ( unit ) ; begin
44777: LD_INT 0
44779: PPUSH
// result := IsInUnit ( unit ) ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_VAR 0 1
44789: PPUSH
44790: CALL_OW 310
44794: ST_TO_ADDR
// if not result then
44795: LD_VAR 0 2
44799: NOT
44800: IFFALSE 44812
// result := unit ;
44802: LD_ADDR_VAR 0 2
44806: PUSH
44807: LD_VAR 0 1
44811: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44812: LD_VAR 0 1
44816: PPUSH
44817: CALL_OW 87
// end ;
44821: LD_VAR 0 2
44825: RET
// export function ComMoveHex ( unit , hex ) ; begin
44826: LD_INT 0
44828: PPUSH
// if not hex then
44829: LD_VAR 0 2
44833: NOT
44834: IFFALSE 44838
// exit ;
44836: GO 44891
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44838: LD_VAR 0 2
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: PPUSH
44847: LD_VAR 0 2
44851: PUSH
44852: LD_INT 2
44854: ARRAY
44855: PPUSH
44856: CALL_OW 428
44860: IFFALSE 44864
// exit ;
44862: GO 44891
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44864: LD_VAR 0 1
44868: PPUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 2
44885: ARRAY
44886: PPUSH
44887: CALL_OW 111
// end ;
44891: LD_VAR 0 3
44895: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44896: LD_INT 0
44898: PPUSH
44899: PPUSH
44900: PPUSH
// if not unit or not enemy then
44901: LD_VAR 0 1
44905: NOT
44906: PUSH
44907: LD_VAR 0 2
44911: NOT
44912: OR
44913: IFFALSE 44917
// exit ;
44915: GO 45041
// x := GetX ( enemy ) ;
44917: LD_ADDR_VAR 0 4
44921: PUSH
44922: LD_VAR 0 2
44926: PPUSH
44927: CALL_OW 250
44931: ST_TO_ADDR
// y := GetY ( enemy ) ;
44932: LD_ADDR_VAR 0 5
44936: PUSH
44937: LD_VAR 0 2
44941: PPUSH
44942: CALL_OW 251
44946: ST_TO_ADDR
// if ValidHex ( x , y ) then
44947: LD_VAR 0 4
44951: PPUSH
44952: LD_VAR 0 5
44956: PPUSH
44957: CALL_OW 488
44961: IFFALSE 45041
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44963: LD_VAR 0 2
44967: PPUSH
44968: CALL_OW 247
44972: PUSH
44973: LD_INT 3
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: IN
44983: PUSH
44984: LD_VAR 0 1
44988: PPUSH
44989: CALL_OW 255
44993: PPUSH
44994: LD_VAR 0 2
44998: PPUSH
44999: CALL_OW 292
45003: OR
45004: IFFALSE 45022
// ComAttackUnit ( unit , enemy ) else
45006: LD_VAR 0 1
45010: PPUSH
45011: LD_VAR 0 2
45015: PPUSH
45016: CALL_OW 115
45020: GO 45041
// ComAgressiveMove ( unit , x , y ) ;
45022: LD_VAR 0 1
45026: PPUSH
45027: LD_VAR 0 4
45031: PPUSH
45032: LD_VAR 0 5
45036: PPUSH
45037: CALL_OW 114
// end ;
45041: LD_VAR 0 3
45045: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45046: LD_INT 0
45048: PPUSH
45049: PPUSH
45050: PPUSH
// list := AreaToList ( area , 0 ) ;
45051: LD_ADDR_VAR 0 5
45055: PUSH
45056: LD_VAR 0 1
45060: PPUSH
45061: LD_INT 0
45063: PPUSH
45064: CALL_OW 517
45068: ST_TO_ADDR
// if not list then
45069: LD_VAR 0 5
45073: NOT
45074: IFFALSE 45078
// exit ;
45076: GO 45208
// if all then
45078: LD_VAR 0 2
45082: IFFALSE 45170
// begin for i := 1 to list [ 1 ] do
45084: LD_ADDR_VAR 0 4
45088: PUSH
45089: DOUBLE
45090: LD_INT 1
45092: DEC
45093: ST_TO_ADDR
45094: LD_VAR 0 5
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PUSH
45103: FOR_TO
45104: IFFALSE 45166
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45106: LD_ADDR_VAR 0 3
45110: PUSH
45111: LD_VAR 0 3
45115: PPUSH
45116: LD_VAR 0 3
45120: PUSH
45121: LD_INT 1
45123: PLUS
45124: PPUSH
45125: LD_VAR 0 5
45129: PUSH
45130: LD_INT 1
45132: ARRAY
45133: PUSH
45134: LD_VAR 0 4
45138: ARRAY
45139: PUSH
45140: LD_VAR 0 5
45144: PUSH
45145: LD_INT 2
45147: ARRAY
45148: PUSH
45149: LD_VAR 0 4
45153: ARRAY
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PPUSH
45159: CALL_OW 1
45163: ST_TO_ADDR
45164: GO 45103
45166: POP
45167: POP
// exit ;
45168: GO 45208
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_VAR 0 5
45179: PUSH
45180: LD_INT 1
45182: ARRAY
45183: PUSH
45184: LD_INT 1
45186: ARRAY
45187: PUSH
45188: LD_VAR 0 5
45192: PUSH
45193: LD_INT 2
45195: ARRAY
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: ST_TO_ADDR
// end ;
45208: LD_VAR 0 3
45212: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45213: LD_INT 0
45215: PPUSH
45216: PPUSH
// list := AreaToList ( area , 0 ) ;
45217: LD_ADDR_VAR 0 4
45221: PUSH
45222: LD_VAR 0 1
45226: PPUSH
45227: LD_INT 0
45229: PPUSH
45230: CALL_OW 517
45234: ST_TO_ADDR
// if not list then
45235: LD_VAR 0 4
45239: NOT
45240: IFFALSE 45244
// exit ;
45242: GO 45285
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_VAR 0 4
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: PUSH
45258: LD_INT 1
45260: ARRAY
45261: PUSH
45262: LD_VAR 0 4
45266: PUSH
45267: LD_INT 2
45269: ARRAY
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PUSH
45275: LD_VAR 0 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// end ;
45285: LD_VAR 0 3
45289: RET
// export function First ( array ) ; begin
45290: LD_INT 0
45292: PPUSH
// if not array then
45293: LD_VAR 0 1
45297: NOT
45298: IFFALSE 45302
// exit ;
45300: GO 45316
// result := array [ 1 ] ;
45302: LD_ADDR_VAR 0 2
45306: PUSH
45307: LD_VAR 0 1
45311: PUSH
45312: LD_INT 1
45314: ARRAY
45315: ST_TO_ADDR
// end ;
45316: LD_VAR 0 2
45320: RET
// export function Last ( array ) ; begin
45321: LD_INT 0
45323: PPUSH
// if not array then
45324: LD_VAR 0 1
45328: NOT
45329: IFFALSE 45333
// exit ;
45331: GO 45349
// result := array [ array ] ;
45333: LD_ADDR_VAR 0 2
45337: PUSH
45338: LD_VAR 0 1
45342: PUSH
45343: LD_VAR 0 1
45347: ARRAY
45348: ST_TO_ADDR
// end ;
45349: LD_VAR 0 2
45353: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45354: LD_INT 0
45356: PPUSH
45357: PPUSH
// result := [ ] ;
45358: LD_ADDR_VAR 0 5
45362: PUSH
45363: EMPTY
45364: ST_TO_ADDR
// if not array then
45365: LD_VAR 0 1
45369: NOT
45370: IFFALSE 45374
// exit ;
45372: GO 45486
// for i := 1 to array do
45374: LD_ADDR_VAR 0 6
45378: PUSH
45379: DOUBLE
45380: LD_INT 1
45382: DEC
45383: ST_TO_ADDR
45384: LD_VAR 0 1
45388: PUSH
45389: FOR_TO
45390: IFFALSE 45484
// if array [ i ] [ index ] = value then
45392: LD_VAR 0 1
45396: PUSH
45397: LD_VAR 0 6
45401: ARRAY
45402: PUSH
45403: LD_VAR 0 2
45407: ARRAY
45408: PUSH
45409: LD_VAR 0 3
45413: EQUAL
45414: IFFALSE 45482
// begin if indexColumn then
45416: LD_VAR 0 4
45420: IFFALSE 45456
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45422: LD_ADDR_VAR 0 5
45426: PUSH
45427: LD_VAR 0 5
45431: PPUSH
45432: LD_VAR 0 1
45436: PUSH
45437: LD_VAR 0 6
45441: ARRAY
45442: PUSH
45443: LD_VAR 0 4
45447: ARRAY
45448: PPUSH
45449: CALL 40674 0 2
45453: ST_TO_ADDR
45454: GO 45482
// result := Join ( result , array [ i ] ) ;
45456: LD_ADDR_VAR 0 5
45460: PUSH
45461: LD_VAR 0 5
45465: PPUSH
45466: LD_VAR 0 1
45470: PUSH
45471: LD_VAR 0 6
45475: ARRAY
45476: PPUSH
45477: CALL 40674 0 2
45481: ST_TO_ADDR
// end ;
45482: GO 45389
45484: POP
45485: POP
// end ;
45486: LD_VAR 0 5
45490: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45491: LD_INT 0
45493: PPUSH
// if not vehicles or not parkingPoint then
45494: LD_VAR 0 1
45498: NOT
45499: PUSH
45500: LD_VAR 0 2
45504: NOT
45505: OR
45506: IFFALSE 45510
// exit ;
45508: GO 45608
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45510: LD_ADDR_VAR 0 1
45514: PUSH
45515: LD_VAR 0 1
45519: PPUSH
45520: LD_INT 50
45522: PUSH
45523: EMPTY
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: LD_INT 92
45531: PUSH
45532: LD_VAR 0 2
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PUSH
45541: LD_VAR 0 2
45545: PUSH
45546: LD_INT 2
45548: ARRAY
45549: PUSH
45550: LD_INT 8
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PPUSH
45567: CALL_OW 72
45571: ST_TO_ADDR
// if not vehicles then
45572: LD_VAR 0 1
45576: NOT
45577: IFFALSE 45581
// exit ;
45579: GO 45608
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45581: LD_VAR 0 1
45585: PPUSH
45586: LD_VAR 0 2
45590: PUSH
45591: LD_INT 1
45593: ARRAY
45594: PPUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_INT 2
45602: ARRAY
45603: PPUSH
45604: CALL_OW 111
// end ;
45608: LD_VAR 0 3
45612: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45613: LD_INT 0
45615: PPUSH
45616: PPUSH
45617: PPUSH
// if not side or not area then
45618: LD_VAR 0 1
45622: NOT
45623: PUSH
45624: LD_VAR 0 2
45628: NOT
45629: OR
45630: IFFALSE 45634
// exit ;
45632: GO 45753
// tmp := AreaToList ( area , 0 ) ;
45634: LD_ADDR_VAR 0 5
45638: PUSH
45639: LD_VAR 0 2
45643: PPUSH
45644: LD_INT 0
45646: PPUSH
45647: CALL_OW 517
45651: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45652: LD_ADDR_VAR 0 4
45656: PUSH
45657: DOUBLE
45658: LD_INT 1
45660: DEC
45661: ST_TO_ADDR
45662: LD_VAR 0 5
45666: PUSH
45667: LD_INT 1
45669: ARRAY
45670: PUSH
45671: FOR_TO
45672: IFFALSE 45751
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45674: LD_VAR 0 5
45678: PUSH
45679: LD_INT 1
45681: ARRAY
45682: PUSH
45683: LD_VAR 0 4
45687: ARRAY
45688: PPUSH
45689: LD_VAR 0 5
45693: PUSH
45694: LD_INT 2
45696: ARRAY
45697: PUSH
45698: LD_VAR 0 4
45702: ARRAY
45703: PPUSH
45704: CALL_OW 351
45708: IFFALSE 45749
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45710: LD_VAR 0 5
45714: PUSH
45715: LD_INT 1
45717: ARRAY
45718: PUSH
45719: LD_VAR 0 4
45723: ARRAY
45724: PPUSH
45725: LD_VAR 0 5
45729: PUSH
45730: LD_INT 2
45732: ARRAY
45733: PUSH
45734: LD_VAR 0 4
45738: ARRAY
45739: PPUSH
45740: LD_VAR 0 1
45744: PPUSH
45745: CALL_OW 244
// end ;
45749: GO 45671
45751: POP
45752: POP
// end ; end_of_file
45753: LD_VAR 0 3
45757: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45758: LD_INT 0
45760: PPUSH
45761: PPUSH
// disable ( mpActive ) ;
45762: LD_INT 100
45764: DISABLE_MARKED
// disable ( mpWin ) ;
45765: LD_INT 101
45767: DISABLE_MARKED
// disable ( mpLose ) ;
45768: LD_INT 102
45770: DISABLE_MARKED
// mpGameType := 0 ;
45771: LD_ADDR_EXP 3
45775: PUSH
45776: LD_INT 0
45778: ST_TO_ADDR
// mpGameSettings := [ ] ;
45779: LD_ADDR_EXP 6
45783: PUSH
45784: EMPTY
45785: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45786: LD_ADDR_EXP 4
45790: PUSH
45791: EMPTY
45792: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45793: LD_ADDR_EXP 5
45797: PUSH
45798: EMPTY
45799: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45800: LD_ADDR_EXP 29
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45815: LD_ADDR_EXP 12
45819: PUSH
45820: EMPTY
45821: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45822: LD_ADDR_EXP 13
45826: PUSH
45827: EMPTY
45828: ST_TO_ADDR
// mpDepots := [ ] ;
45829: LD_ADDR_EXP 14
45833: PUSH
45834: EMPTY
45835: ST_TO_ADDR
// mpBuildings := [ ] ;
45836: LD_ADDR_EXP 17
45840: PUSH
45841: EMPTY
45842: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45843: LD_ADDR_EXP 18
45847: PUSH
45848: EMPTY
45849: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45850: LD_ADDR_EXP 19
45854: PUSH
45855: EMPTY
45856: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45857: LD_ADDR_EXP 20
45861: PUSH
45862: EMPTY
45863: ST_TO_ADDR
// mpStartingResources := [ ] ;
45864: LD_ADDR_EXP 15
45868: PUSH
45869: EMPTY
45870: ST_TO_ADDR
// mpStartPos := [ ] ;
45871: LD_ADDR_EXP 21
45875: PUSH
45876: EMPTY
45877: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45878: LD_ADDR_EXP 22
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45887: LD_ADDR_EXP 23
45891: PUSH
45892: EMPTY
45893: ST_TO_ADDR
// mpApemans := [ ] ;
45894: LD_ADDR_EXP 30
45898: PUSH
45899: EMPTY
45900: ST_TO_ADDR
// mpApemansArea := [ ] ;
45901: LD_ADDR_EXP 31
45905: PUSH
45906: EMPTY
45907: ST_TO_ADDR
// mpRespawn := [ ] ;
45908: LD_ADDR_EXP 32
45912: PUSH
45913: EMPTY
45914: ST_TO_ADDR
// mpKingArea := 0 ;
45915: LD_ADDR_EXP 33
45919: PUSH
45920: LD_INT 0
45922: ST_TO_ADDR
// mpPoints := [ ] ;
45923: LD_ADDR_EXP 34
45927: PUSH
45928: EMPTY
45929: ST_TO_ADDR
// mpVehicles := 0 ;
45930: LD_ADDR_EXP 35
45934: PUSH
45935: LD_INT 0
45937: ST_TO_ADDR
// mpShipments := 0 ;
45938: LD_ADDR_EXP 27
45942: PUSH
45943: LD_INT 0
45945: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45946: LD_ADDR_EXP 39
45950: PUSH
45951: EMPTY
45952: PUSH
45953: EMPTY
45954: PUSH
45955: EMPTY
45956: PUSH
45957: EMPTY
45958: PUSH
45959: EMPTY
45960: PUSH
45961: EMPTY
45962: PUSH
45963: EMPTY
45964: PUSH
45965: EMPTY
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// mpEmissions := 0 ;
45977: LD_ADDR_EXP 36
45981: PUSH
45982: LD_INT 0
45984: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45985: LD_ADDR_EXP 25
45989: PUSH
45990: LD_INT 3
45992: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45993: LD_ADDR_EXP 24
45997: PUSH
45998: LD_INT 15
46000: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46001: LD_ADDR_EXP 37
46005: PUSH
46006: LD_INT 0
46008: ST_TO_ADDR
// mpGameActive := false ;
46009: LD_ADDR_EXP 38
46013: PUSH
46014: LD_INT 0
46016: ST_TO_ADDR
// mpBlockRespThread := false ;
46017: LD_ADDR_EXP 40
46021: PUSH
46022: LD_INT 0
46024: ST_TO_ADDR
// for i := 1 to 32 do
46025: LD_ADDR_VAR 0 2
46029: PUSH
46030: DOUBLE
46031: LD_INT 1
46033: DEC
46034: ST_TO_ADDR
46035: LD_INT 32
46037: PUSH
46038: FOR_TO
46039: IFFALSE 46066
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46041: LD_ADDR_EXP 6
46045: PUSH
46046: LD_EXP 6
46050: PPUSH
46051: LD_VAR 0 2
46055: PPUSH
46056: LD_INT 0
46058: PPUSH
46059: CALL_OW 1
46063: ST_TO_ADDR
46064: GO 46038
46066: POP
46067: POP
// end ;
46068: LD_VAR 0 1
46072: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46073: LD_INT 0
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46089: LD_ADDR_VAR 0 14
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: ST_TO_ADDR
// for i in gameTypes do
46108: LD_ADDR_VAR 0 2
46112: PUSH
46113: LD_VAR 0 14
46117: PUSH
46118: FOR_IN
46119: IFFALSE 46128
// disable ( i ) ;
46121: LD_VAR 0 2
46125: DISABLE_MARKED
46126: GO 46118
46128: POP
46129: POP
// if Multiplayer then
46130: LD_OWVAR 4
46134: IFFALSE 46318
// begin mpGameType := mp_game_type ;
46136: LD_ADDR_EXP 3
46140: PUSH
46141: LD_OWVAR 6
46145: ST_TO_ADDR
// your_side := mp_player_side ;
46146: LD_ADDR_OWVAR 2
46150: PUSH
46151: LD_OWVAR 7
46155: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46156: LD_ADDR_EXP 7
46160: PUSH
46161: LD_OWVAR 17
46165: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46166: LD_ADDR_EXP 8
46170: PUSH
46171: LD_OWVAR 15
46175: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46176: LD_ADDR_EXP 9
46180: PUSH
46181: LD_OWVAR 16
46185: ST_TO_ADDR
// mpTeams := mp_teams ;
46186: LD_ADDR_EXP 10
46190: PUSH
46191: LD_OWVAR 12
46195: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46196: LD_ADDR_VAR 0 2
46200: PUSH
46201: DOUBLE
46202: LD_INT 1
46204: DEC
46205: ST_TO_ADDR
46206: LD_EXP 4
46210: PPUSH
46211: CALL 5065 0 1
46215: PUSH
46216: FOR_TO
46217: IFFALSE 46293
// begin setting := mpGameSettingsKeys [ i ] ;
46219: LD_ADDR_VAR 0 12
46223: PUSH
46224: LD_EXP 4
46228: PUSH
46229: LD_VAR 0 2
46233: ARRAY
46234: ST_TO_ADDR
// if setting then
46235: LD_VAR 0 12
46239: IFFALSE 46291
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46241: LD_ADDR_EXP 6
46245: PUSH
46246: LD_EXP 6
46250: PPUSH
46251: LD_VAR 0 2
46255: PPUSH
46256: LD_EXP 5
46260: PUSH
46261: LD_VAR 0 2
46265: ARRAY
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_INT 1
46274: MINUS
46275: PPUSH
46276: CALL_OW 426
46280: PUSH
46281: LD_INT 1
46283: PLUS
46284: ARRAY
46285: PPUSH
46286: CALL_OW 1
46290: ST_TO_ADDR
// end ;
46291: GO 46216
46293: POP
46294: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46295: LD_ADDR_EXP 11
46299: PUSH
46300: LD_EXP 8
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: DIFF
46311: PUSH
46312: LD_INT 1
46314: GREATER
46315: ST_TO_ADDR
// end else
46316: GO 46318
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46318: LD_EXP 3
46322: PPUSH
46323: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46327: LD_EXP 18
46331: PPUSH
46332: CALL 5065 0 1
46336: IFFALSE 46367
// begin for i in mpMarkedAreas do
46338: LD_ADDR_VAR 0 2
46342: PUSH
46343: LD_EXP 18
46347: PUSH
46348: FOR_IN
46349: IFFALSE 46365
// SetAreaMapShow ( i , 0 ) ;
46351: LD_VAR 0 2
46355: PPUSH
46356: LD_INT 0
46358: PPUSH
46359: CALL_OW 424
46363: GO 46348
46365: POP
46366: POP
// end ; for i := 1 to 8 do
46367: LD_ADDR_VAR 0 2
46371: PUSH
46372: DOUBLE
46373: LD_INT 1
46375: DEC
46376: ST_TO_ADDR
46377: LD_INT 8
46379: PUSH
46380: FOR_TO
46381: IFFALSE 47597
// begin if not mpSidePositions [ i ] then
46383: LD_EXP 7
46387: PUSH
46388: LD_VAR 0 2
46392: ARRAY
46393: NOT
46394: IFFALSE 46398
// continue ;
46396: GO 46380
// side := i ;
46398: LD_ADDR_VAR 0 7
46402: PUSH
46403: LD_VAR 0 2
46407: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46408: LD_ADDR_VAR 0 9
46412: PUSH
46413: LD_EXP 9
46417: PUSH
46418: LD_VAR 0 2
46422: ARRAY
46423: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46424: LD_ADDR_VAR 0 8
46428: PUSH
46429: LD_EXP 7
46433: PUSH
46434: LD_VAR 0 2
46438: ARRAY
46439: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46440: LD_EXP 12
46444: PPUSH
46445: CALL 5065 0 1
46449: IFFALSE 46526
// begin for j in mpOilDeposits [ pos ] do
46451: LD_ADDR_VAR 0 3
46455: PUSH
46456: LD_EXP 12
46460: PUSH
46461: LD_VAR 0 8
46465: ARRAY
46466: PUSH
46467: FOR_IN
46468: IFFALSE 46524
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46470: LD_VAR 0 3
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: PPUSH
46479: LD_VAR 0 3
46483: PUSH
46484: LD_INT 2
46486: ARRAY
46487: PPUSH
46488: LD_INT 2
46490: PPUSH
46491: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46495: LD_VAR 0 3
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PPUSH
46504: LD_VAR 0 3
46508: PUSH
46509: LD_INT 2
46511: ARRAY
46512: PPUSH
46513: LD_VAR 0 7
46517: PPUSH
46518: CALL_OW 441
// end ;
46522: GO 46467
46524: POP
46525: POP
// end ; if Count ( mpSibDeposits ) then
46526: LD_EXP 13
46530: PPUSH
46531: CALL 5065 0 1
46535: IFFALSE 46612
// begin for j in mpSibDeposits [ pos ] do
46537: LD_ADDR_VAR 0 3
46541: PUSH
46542: LD_EXP 13
46546: PUSH
46547: LD_VAR 0 8
46551: ARRAY
46552: PUSH
46553: FOR_IN
46554: IFFALSE 46610
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46556: LD_VAR 0 3
46560: PUSH
46561: LD_INT 1
46563: ARRAY
46564: PPUSH
46565: LD_VAR 0 3
46569: PUSH
46570: LD_INT 2
46572: ARRAY
46573: PPUSH
46574: LD_INT 3
46576: PPUSH
46577: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46581: LD_VAR 0 3
46585: PUSH
46586: LD_INT 1
46588: ARRAY
46589: PPUSH
46590: LD_VAR 0 3
46594: PUSH
46595: LD_INT 2
46597: ARRAY
46598: PPUSH
46599: LD_VAR 0 7
46603: PPUSH
46604: CALL_OW 441
// end ;
46608: GO 46553
46610: POP
46611: POP
// end ; InitBc ;
46612: CALL_OW 21
// InitUc ;
46616: CALL_OW 18
// uc_side := side ;
46620: LD_ADDR_OWVAR 20
46624: PUSH
46625: LD_VAR 0 7
46629: ST_TO_ADDR
// uc_nation := nation ;
46630: LD_ADDR_OWVAR 21
46634: PUSH
46635: LD_VAR 0 9
46639: ST_TO_ADDR
// if Count ( mpDepots ) then
46640: LD_EXP 14
46644: PPUSH
46645: CALL 5065 0 1
46649: IFFALSE 46819
// begin bc_level := 0 ;
46651: LD_ADDR_OWVAR 43
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// bc_type := b_depot ;
46659: LD_ADDR_OWVAR 42
46663: PUSH
46664: LD_INT 0
46666: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46667: LD_ADDR_VAR 0 4
46671: PUSH
46672: LD_EXP 14
46676: PUSH
46677: LD_VAR 0 8
46681: ARRAY
46682: PUSH
46683: LD_INT 1
46685: ARRAY
46686: PPUSH
46687: LD_EXP 14
46691: PUSH
46692: LD_VAR 0 8
46696: ARRAY
46697: PUSH
46698: LD_INT 2
46700: ARRAY
46701: PPUSH
46702: LD_EXP 14
46706: PUSH
46707: LD_VAR 0 8
46711: ARRAY
46712: PUSH
46713: LD_INT 3
46715: ARRAY
46716: PPUSH
46717: CALL_OW 47
46721: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46722: LD_VAR 0 4
46726: PPUSH
46727: LD_STRING @
46729: PUSH
46730: LD_VAR 0 7
46734: STR
46735: PPUSH
46736: CALL_OW 500
// SetTag ( b , side ) ;
46740: LD_VAR 0 4
46744: PPUSH
46745: LD_VAR 0 7
46749: PPUSH
46750: CALL_OW 109
// if Count ( mpStartingResources ) then
46754: LD_EXP 15
46758: PPUSH
46759: CALL 5065 0 1
46763: IFFALSE 46817
// begin for j := 1 to mpStartingResources do
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: DOUBLE
46771: LD_INT 1
46773: DEC
46774: ST_TO_ADDR
46775: LD_EXP 15
46779: PUSH
46780: FOR_TO
46781: IFFALSE 46815
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46783: LD_VAR 0 4
46787: PPUSH
46788: CALL_OW 274
46792: PPUSH
46793: LD_VAR 0 3
46797: PPUSH
46798: LD_EXP 15
46802: PUSH
46803: LD_VAR 0 3
46807: ARRAY
46808: PPUSH
46809: CALL_OW 277
46813: GO 46780
46815: POP
46816: POP
// end ; end else
46817: GO 46966
// if Count ( mpStartingResources ) then
46819: LD_EXP 15
46823: PPUSH
46824: CALL 5065 0 1
46828: IFFALSE 46966
// begin for j := 1 to mpStartingResources do
46830: LD_ADDR_VAR 0 3
46834: PUSH
46835: DOUBLE
46836: LD_INT 1
46838: DEC
46839: ST_TO_ADDR
46840: LD_EXP 15
46844: PUSH
46845: FOR_TO
46846: IFFALSE 46964
// begin resources := mpStartingResources [ j ] ;
46848: LD_ADDR_VAR 0 13
46852: PUSH
46853: LD_EXP 15
46857: PUSH
46858: LD_VAR 0 3
46862: ARRAY
46863: ST_TO_ADDR
// repeat if resources >= 50 then
46864: LD_VAR 0 13
46868: PUSH
46869: LD_INT 50
46871: GREATEREQUAL
46872: IFFALSE 46918
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46874: LD_VAR 0 3
46878: PPUSH
46879: LD_INT 5
46881: PPUSH
46882: LD_VAR 0 5
46886: PPUSH
46887: LD_VAR 0 6
46891: PPUSH
46892: LD_INT 4
46894: PPUSH
46895: LD_INT 0
46897: PPUSH
46898: CALL_OW 60
// resources := resources - 50 ;
46902: LD_ADDR_VAR 0 13
46906: PUSH
46907: LD_VAR 0 13
46911: PUSH
46912: LD_INT 50
46914: MINUS
46915: ST_TO_ADDR
// end else
46916: GO 46952
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46918: LD_VAR 0 3
46922: PPUSH
46923: LD_VAR 0 13
46927: PUSH
46928: LD_INT 10
46930: DIV
46931: PPUSH
46932: LD_VAR 0 5
46936: PPUSH
46937: LD_VAR 0 6
46941: PPUSH
46942: LD_INT 4
46944: PPUSH
46945: LD_INT 0
46947: PPUSH
46948: CALL_OW 60
// until resources <= 0 ;
46952: LD_VAR 0 13
46956: PUSH
46957: LD_INT 0
46959: LESSEQUAL
46960: IFFALSE 46864
// end ;
46962: GO 46845
46964: POP
46965: POP
// end ; if Count ( mpBuildings ) then
46966: LD_EXP 17
46970: PPUSH
46971: CALL 5065 0 1
46975: IFFALSE 47053
// begin for j in mpBuildings [ pos ] do
46977: LD_ADDR_VAR 0 3
46981: PUSH
46982: LD_EXP 17
46986: PUSH
46987: LD_VAR 0 8
46991: ARRAY
46992: PUSH
46993: FOR_IN
46994: IFFALSE 47051
// begin bc_level := 0 ;
46996: LD_ADDR_OWVAR 43
47000: PUSH
47001: LD_INT 0
47003: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47004: LD_ADDR_OWVAR 42
47008: PUSH
47009: LD_VAR 0 3
47013: PUSH
47014: LD_INT 1
47016: ARRAY
47017: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47018: LD_VAR 0 3
47022: PUSH
47023: LD_INT 2
47025: ARRAY
47026: PPUSH
47027: LD_VAR 0 3
47031: PUSH
47032: LD_INT 3
47034: ARRAY
47035: PPUSH
47036: LD_VAR 0 3
47040: PUSH
47041: LD_INT 4
47043: ARRAY
47044: PPUSH
47045: CALL_OW 47
// end ;
47049: GO 46993
47051: POP
47052: POP
// end ; if mpBattleFlag > - 1 then
47053: LD_EXP 22
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: GREATER
47062: IFFALSE 47221
// begin x := mpStartPos [ pos ] [ 1 ] ;
47064: LD_ADDR_VAR 0 5
47068: PUSH
47069: LD_EXP 21
47073: PUSH
47074: LD_VAR 0 8
47078: ARRAY
47079: PUSH
47080: LD_INT 1
47082: ARRAY
47083: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47084: LD_ADDR_VAR 0 6
47088: PUSH
47089: LD_EXP 21
47093: PUSH
47094: LD_VAR 0 8
47098: ARRAY
47099: PUSH
47100: LD_INT 2
47102: ARRAY
47103: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47104: LD_VAR 0 5
47108: PPUSH
47109: LD_VAR 0 6
47113: PPUSH
47114: LD_INT 12
47116: PPUSH
47117: LD_INT 2
47119: PPUSH
47120: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47124: LD_ADDR_EXP 23
47128: PUSH
47129: LD_EXP 23
47133: PPUSH
47134: LD_VAR 0 7
47138: PPUSH
47139: LD_VAR 0 7
47143: PPUSH
47144: LD_VAR 0 5
47148: PPUSH
47149: LD_VAR 0 6
47153: PPUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 100
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 70
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 40
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 10
47186: PUSH
47187: LD_INT 25
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 20
47196: PUSH
47197: LD_INT 100
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: PPUSH
47211: CALL_OW 418
47215: PPUSH
47216: CALL_OW 1
47220: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47221: LD_EXP 26
47225: PUSH
47226: LD_INT 20
47228: PPUSH
47229: LD_VAR 0 7
47233: PPUSH
47234: CALL_OW 321
47238: PUSH
47239: LD_INT 1
47241: EQUAL
47242: AND
47243: IFFALSE 47260
// SetTech ( tech_SibDet , side , state_researched ) ;
47245: LD_INT 20
47247: PPUSH
47248: LD_VAR 0 7
47252: PPUSH
47253: LD_INT 2
47255: PPUSH
47256: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47260: LD_INT 24
47262: PPUSH
47263: LD_VAR 0 7
47267: PPUSH
47268: LD_INT 0
47270: PPUSH
47271: CALL_OW 322
// if mpSibBomb = 1 then
47275: LD_EXP 28
47279: PUSH
47280: LD_INT 1
47282: EQUAL
47283: IFFALSE 47302
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47285: LD_INT 25
47287: PPUSH
47288: LD_VAR 0 7
47292: PPUSH
47293: LD_INT 1
47295: PPUSH
47296: CALL_OW 322
// end else
47300: GO 47317
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47302: LD_INT 25
47304: PPUSH
47305: LD_VAR 0 7
47309: PPUSH
47310: LD_INT 0
47312: PPUSH
47313: CALL_OW 322
// end ; if mpVehicles then
47317: LD_EXP 35
47321: IFFALSE 47420
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47323: LD_ADDR_VAR 0 3
47327: PUSH
47328: LD_VAR 0 7
47332: PPUSH
47333: LD_VAR 0 9
47337: PPUSH
47338: LD_EXP 35
47342: PPUSH
47343: CALL 48507 0 3
47347: PUSH
47348: FOR_IN
47349: IFFALSE 47418
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47351: LD_VAR 0 3
47355: PPUSH
47356: LD_INT 0
47358: PPUSH
47359: LD_INT 5
47361: PPUSH
47362: CALL_OW 12
47366: PPUSH
47367: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47371: LD_VAR 0 3
47375: PPUSH
47376: LD_EXP 21
47380: PUSH
47381: LD_VAR 0 8
47385: ARRAY
47386: PUSH
47387: LD_INT 1
47389: ARRAY
47390: PPUSH
47391: LD_EXP 21
47395: PUSH
47396: LD_VAR 0 8
47400: ARRAY
47401: PUSH
47402: LD_INT 2
47404: ARRAY
47405: PPUSH
47406: LD_INT 12
47408: PPUSH
47409: LD_INT 0
47411: PPUSH
47412: CALL_OW 50
// end ;
47416: GO 47348
47418: POP
47419: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47420: LD_ADDR_VAR 0 11
47424: PUSH
47425: LD_VAR 0 7
47429: PPUSH
47430: LD_VAR 0 9
47434: PPUSH
47435: LD_EXP 24
47439: PPUSH
47440: LD_EXP 25
47444: PPUSH
47445: CALL 48009 0 4
47449: ST_TO_ADDR
// for j in team do
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_VAR 0 11
47459: PUSH
47460: FOR_IN
47461: IFFALSE 47510
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47463: LD_VAR 0 3
47467: PPUSH
47468: LD_EXP 21
47472: PUSH
47473: LD_VAR 0 8
47477: ARRAY
47478: PUSH
47479: LD_INT 1
47481: ARRAY
47482: PPUSH
47483: LD_EXP 21
47487: PUSH
47488: LD_VAR 0 8
47492: ARRAY
47493: PUSH
47494: LD_INT 2
47496: ARRAY
47497: PPUSH
47498: LD_INT 12
47500: PPUSH
47501: LD_INT 0
47503: PPUSH
47504: CALL_OW 50
47508: GO 47460
47510: POP
47511: POP
// if mpApemans then
47512: LD_EXP 30
47516: IFFALSE 47595
// begin for j := 1 to mpApemans do
47518: LD_ADDR_VAR 0 3
47522: PUSH
47523: DOUBLE
47524: LD_INT 1
47526: DEC
47527: ST_TO_ADDR
47528: LD_EXP 30
47532: PUSH
47533: FOR_TO
47534: IFFALSE 47593
// begin PrepareApeman ( - 5 ) ;
47536: LD_INT 5
47538: NEG
47539: PPUSH
47540: CALL 36922 0 1
// ape := CreateHuman ;
47544: LD_ADDR_VAR 0 10
47548: PUSH
47549: CALL_OW 44
47553: ST_TO_ADDR
// SetTag ( ape , side ) ;
47554: LD_VAR 0 10
47558: PPUSH
47559: LD_VAR 0 7
47563: PPUSH
47564: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47568: LD_VAR 0 10
47572: PPUSH
47573: LD_EXP 31
47577: PUSH
47578: LD_VAR 0 8
47582: ARRAY
47583: PPUSH
47584: LD_INT 0
47586: PPUSH
47587: CALL_OW 49
// end ;
47591: GO 47533
47593: POP
47594: POP
// end ; end ;
47595: GO 46380
47597: POP
47598: POP
// if not mpTeamGame then
47599: LD_EXP 11
47603: NOT
47604: IFFALSE 47702
// begin for i := 1 to 8 do
47606: LD_ADDR_VAR 0 2
47610: PUSH
47611: DOUBLE
47612: LD_INT 1
47614: DEC
47615: ST_TO_ADDR
47616: LD_INT 8
47618: PUSH
47619: FOR_TO
47620: IFFALSE 47698
// for j := 1 to 8 do
47622: LD_ADDR_VAR 0 3
47626: PUSH
47627: DOUBLE
47628: LD_INT 1
47630: DEC
47631: ST_TO_ADDR
47632: LD_INT 8
47634: PUSH
47635: FOR_TO
47636: IFFALSE 47694
// if i <> j then
47638: LD_VAR 0 2
47642: PUSH
47643: LD_VAR 0 3
47647: NONEQUAL
47648: IFFALSE 47672
// SetAttitude ( i , j , att_neutral , true ) else
47650: LD_VAR 0 2
47654: PPUSH
47655: LD_VAR 0 3
47659: PPUSH
47660: LD_INT 0
47662: PPUSH
47663: LD_INT 1
47665: PPUSH
47666: CALL_OW 80
47670: GO 47692
// SetAttitude ( i , j , att_friend , true ) ;
47672: LD_VAR 0 2
47676: PPUSH
47677: LD_VAR 0 3
47681: PPUSH
47682: LD_INT 1
47684: PPUSH
47685: LD_INT 1
47687: PPUSH
47688: CALL_OW 80
47692: GO 47635
47694: POP
47695: POP
47696: GO 47619
47698: POP
47699: POP
// end else
47700: GO 47877
// begin if mpSharedVision then
47702: LD_EXP 16
47706: IFFALSE 47771
// begin for i in mpTeams do
47708: LD_ADDR_VAR 0 2
47712: PUSH
47713: LD_EXP 10
47717: PUSH
47718: FOR_IN
47719: IFFALSE 47769
// for j := 2 to i do
47721: LD_ADDR_VAR 0 3
47725: PUSH
47726: DOUBLE
47727: LD_INT 2
47729: DEC
47730: ST_TO_ADDR
47731: LD_VAR 0 2
47735: PUSH
47736: FOR_TO
47737: IFFALSE 47765
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47739: LD_VAR 0 2
47743: PUSH
47744: LD_VAR 0 3
47748: ARRAY
47749: PPUSH
47750: LD_VAR 0 2
47754: PUSH
47755: LD_INT 1
47757: ARRAY
47758: PPUSH
47759: CALL_OW 343
47763: GO 47736
47765: POP
47766: POP
47767: GO 47718
47769: POP
47770: POP
// end ; for i := 1 to 8 do
47771: LD_ADDR_VAR 0 2
47775: PUSH
47776: DOUBLE
47777: LD_INT 1
47779: DEC
47780: ST_TO_ADDR
47781: LD_INT 8
47783: PUSH
47784: FOR_TO
47785: IFFALSE 47875
// for j := 1 to 8 do
47787: LD_ADDR_VAR 0 3
47791: PUSH
47792: DOUBLE
47793: LD_INT 1
47795: DEC
47796: ST_TO_ADDR
47797: LD_INT 8
47799: PUSH
47800: FOR_TO
47801: IFFALSE 47871
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47803: LD_EXP 8
47807: PUSH
47808: LD_VAR 0 2
47812: ARRAY
47813: PUSH
47814: LD_EXP 8
47818: PUSH
47819: LD_VAR 0 3
47823: ARRAY
47824: EQUAL
47825: IFFALSE 47849
// SetAttitude ( i , j , att_friend , true ) else
47827: LD_VAR 0 2
47831: PPUSH
47832: LD_VAR 0 3
47836: PPUSH
47837: LD_INT 1
47839: PPUSH
47840: LD_INT 1
47842: PPUSH
47843: CALL_OW 80
47847: GO 47869
// SetAttitude ( i , j , att_enemy , true ) ;
47849: LD_VAR 0 2
47853: PPUSH
47854: LD_VAR 0 3
47858: PPUSH
47859: LD_INT 2
47861: PPUSH
47862: LD_INT 1
47864: PPUSH
47865: CALL_OW 80
47869: GO 47800
47871: POP
47872: POP
47873: GO 47784
47875: POP
47876: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47877: LD_ADDR_OWVAR 71
47881: PUSH
47882: LD_EXP 9
47886: PUSH
47887: LD_OWVAR 2
47891: ARRAY
47892: ST_TO_ADDR
// if IAmSpec then
47893: CALL_OW 531
47897: IFFALSE 47938
// begin FogOff ( true ) ;
47899: LD_INT 1
47901: PPUSH
47902: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47906: LD_EXP 29
47910: PUSH
47911: LD_INT 1
47913: ARRAY
47914: PUSH
47915: LD_INT 2
47917: DIV
47918: PPUSH
47919: LD_EXP 29
47923: PUSH
47924: LD_INT 2
47926: ARRAY
47927: PUSH
47928: LD_INT 2
47930: DIV
47931: PPUSH
47932: CALL_OW 86
// end else
47936: GO 47984
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47938: LD_EXP 21
47942: PUSH
47943: LD_EXP 7
47947: PUSH
47948: LD_OWVAR 2
47952: ARRAY
47953: ARRAY
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: PPUSH
47959: LD_EXP 21
47963: PUSH
47964: LD_EXP 7
47968: PUSH
47969: LD_OWVAR 2
47973: ARRAY
47974: ARRAY
47975: PUSH
47976: LD_INT 2
47978: ARRAY
47979: PPUSH
47980: CALL_OW 86
// end ; BeginBuildUp ;
47984: CALL 48985 0 0
// enable ( mpActive ) ;
47988: LD_INT 100
47990: ENABLE_MARKED
// enable ( mpGameType ) ;
47991: LD_EXP 3
47995: ENABLE_MARKED
// mpGameActive := true ;
47996: LD_ADDR_EXP 38
48000: PUSH
48001: LD_INT 1
48003: ST_TO_ADDR
// end ;
48004: LD_VAR 0 1
48008: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48009: LD_INT 0
48011: PPUSH
48012: PPUSH
48013: PPUSH
48014: PPUSH
// result := [ ] ;
48015: LD_ADDR_VAR 0 5
48019: PUSH
48020: EMPTY
48021: ST_TO_ADDR
// class := class_soldier ;
48022: LD_ADDR_VAR 0 8
48026: PUSH
48027: LD_INT 1
48029: ST_TO_ADDR
// uc_side := side ;
48030: LD_ADDR_OWVAR 20
48034: PUSH
48035: LD_VAR 0 1
48039: ST_TO_ADDR
// uc_nation := nation ;
48040: LD_ADDR_OWVAR 21
48044: PUSH
48045: LD_VAR 0 2
48049: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48050: LD_ADDR_OWVAR 26
48054: PUSH
48055: LD_OWVAR 19
48059: PUSH
48060: LD_VAR 0 1
48064: ARRAY
48065: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48066: LD_INT 1
48068: PPUSH
48069: LD_INT 2
48071: PPUSH
48072: CALL_OW 12
48076: PPUSH
48077: LD_VAR 0 8
48081: PPUSH
48082: LD_VAR 0 4
48086: PUSH
48087: LD_INT 2
48089: PLUS
48090: PPUSH
48091: CALL_OW 380
// hc_importance := 105 ;
48095: LD_ADDR_OWVAR 32
48099: PUSH
48100: LD_INT 105
48102: ST_TO_ADDR
// if Multiplayer then
48103: LD_OWVAR 4
48107: IFFALSE 48147
// begin hc_gallery := MULTIAVATARS ;
48109: LD_ADDR_OWVAR 33
48113: PUSH
48114: LD_STRING MULTIAVATARS
48116: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48117: LD_ADDR_OWVAR 34
48121: PUSH
48122: LD_VAR 0 1
48126: PPUSH
48127: CALL_OW 525
48131: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48132: LD_ADDR_OWVAR 27
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 526
48146: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48147: LD_ADDR_VAR 0 5
48151: PUSH
48152: LD_VAR 0 5
48156: PPUSH
48157: CALL_OW 44
48161: PPUSH
48162: CALL 40674 0 2
48166: ST_TO_ADDR
// if mpTeamPreset then
48167: LD_LOC 1
48171: IFFALSE 48267
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48173: LD_LOC 1
48177: PUSH
48178: LD_INT 1
48180: ARRAY
48181: PPUSH
48182: LD_VAR 0 5
48186: PUSH
48187: LD_VAR 0 5
48191: ARRAY
48192: PPUSH
48193: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48197: LD_VAR 0 5
48201: PUSH
48202: LD_VAR 0 5
48206: ARRAY
48207: PPUSH
48208: LD_INT 1
48210: PPUSH
48211: LD_LOC 1
48215: PUSH
48216: LD_INT 1
48218: ARRAY
48219: PPUSH
48220: LD_INT 1
48222: PPUSH
48223: CALL_OW 260
48227: PPUSH
48228: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48232: LD_VAR 0 5
48236: PUSH
48237: LD_VAR 0 5
48241: ARRAY
48242: PPUSH
48243: LD_INT 2
48245: PPUSH
48246: LD_LOC 1
48250: PUSH
48251: LD_INT 1
48253: ARRAY
48254: PPUSH
48255: LD_INT 2
48257: PPUSH
48258: CALL_OW 260
48262: PPUSH
48263: CALL_OW 239
// end ; InitHc_All ( ) ;
48267: CALL_OW 584
// class := 2 ;
48271: LD_ADDR_VAR 0 8
48275: PUSH
48276: LD_INT 2
48278: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48279: LD_ADDR_VAR 0 6
48283: PUSH
48284: DOUBLE
48285: LD_INT 1
48287: DEC
48288: ST_TO_ADDR
48289: LD_VAR 0 3
48293: PUSH
48294: LD_INT 1
48296: MINUS
48297: PUSH
48298: FOR_TO
48299: IFFALSE 48483
// begin PrepareHuman ( false , class , skill ) ;
48301: LD_INT 0
48303: PPUSH
48304: LD_VAR 0 8
48308: PPUSH
48309: LD_VAR 0 4
48313: PPUSH
48314: CALL_OW 380
// un := CreateHuman ;
48318: LD_ADDR_VAR 0 7
48322: PUSH
48323: CALL_OW 44
48327: ST_TO_ADDR
// result := Join ( result , un ) ;
48328: LD_ADDR_VAR 0 5
48332: PUSH
48333: LD_VAR 0 5
48337: PPUSH
48338: LD_VAR 0 7
48342: PPUSH
48343: CALL 40674 0 2
48347: ST_TO_ADDR
// if mpTeamPreset then
48348: LD_LOC 1
48352: IFFALSE 48448
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48354: LD_LOC 1
48358: PUSH
48359: LD_VAR 0 6
48363: PUSH
48364: LD_INT 1
48366: PLUS
48367: ARRAY
48368: PPUSH
48369: LD_VAR 0 7
48373: PPUSH
48374: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48378: LD_VAR 0 7
48382: PPUSH
48383: LD_INT 1
48385: PPUSH
48386: LD_LOC 1
48390: PUSH
48391: LD_VAR 0 6
48395: PUSH
48396: LD_INT 1
48398: PLUS
48399: ARRAY
48400: PPUSH
48401: LD_INT 1
48403: PPUSH
48404: CALL_OW 260
48408: PPUSH
48409: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48413: LD_VAR 0 7
48417: PPUSH
48418: LD_INT 2
48420: PPUSH
48421: LD_LOC 1
48425: PUSH
48426: LD_VAR 0 6
48430: PUSH
48431: LD_INT 1
48433: PLUS
48434: ARRAY
48435: PPUSH
48436: LD_INT 2
48438: PPUSH
48439: CALL_OW 260
48443: PPUSH
48444: CALL_OW 239
// end ; class := Inc ( class ) ;
48448: LD_ADDR_VAR 0 8
48452: PUSH
48453: LD_VAR 0 8
48457: PPUSH
48458: CALL 42035 0 1
48462: ST_TO_ADDR
// if class = 5 then
48463: LD_VAR 0 8
48467: PUSH
48468: LD_INT 5
48470: EQUAL
48471: IFFALSE 48481
// class := 1 ;
48473: LD_ADDR_VAR 0 8
48477: PUSH
48478: LD_INT 1
48480: ST_TO_ADDR
// end ;
48481: GO 48298
48483: POP
48484: POP
// if not mpTeamPreset then
48485: LD_LOC 1
48489: NOT
48490: IFFALSE 48502
// mpTeamPreset := result ;
48492: LD_ADDR_LOC 1
48496: PUSH
48497: LD_VAR 0 5
48501: ST_TO_ADDR
// end ;
48502: LD_VAR 0 5
48506: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48507: LD_INT 0
48509: PPUSH
48510: PPUSH
// result := [ ] ;
48511: LD_ADDR_VAR 0 4
48515: PUSH
48516: EMPTY
48517: ST_TO_ADDR
// if not vehicles then
48518: LD_VAR 0 3
48522: NOT
48523: IFFALSE 48527
// exit ;
48525: GO 48686
// for i := 1 to vehicles [ nation ] do
48527: LD_ADDR_VAR 0 5
48531: PUSH
48532: DOUBLE
48533: LD_INT 1
48535: DEC
48536: ST_TO_ADDR
48537: LD_VAR 0 3
48541: PUSH
48542: LD_VAR 0 2
48546: ARRAY
48547: PUSH
48548: FOR_TO
48549: IFFALSE 48684
// begin uc_side := side ;
48551: LD_ADDR_OWVAR 20
48555: PUSH
48556: LD_VAR 0 1
48560: ST_TO_ADDR
// uc_nation := nation ;
48561: LD_ADDR_OWVAR 21
48565: PUSH
48566: LD_VAR 0 2
48570: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48571: LD_VAR 0 3
48575: PUSH
48576: LD_VAR 0 2
48580: ARRAY
48581: PUSH
48582: LD_VAR 0 5
48586: ARRAY
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 3
48596: PUSH
48597: LD_VAR 0 2
48601: ARRAY
48602: PUSH
48603: LD_VAR 0 5
48607: ARRAY
48608: PUSH
48609: LD_INT 2
48611: ARRAY
48612: PPUSH
48613: LD_VAR 0 3
48617: PUSH
48618: LD_VAR 0 2
48622: ARRAY
48623: PUSH
48624: LD_VAR 0 5
48628: ARRAY
48629: PUSH
48630: LD_INT 3
48632: ARRAY
48633: PPUSH
48634: LD_VAR 0 3
48638: PUSH
48639: LD_VAR 0 2
48643: ARRAY
48644: PUSH
48645: LD_VAR 0 5
48649: ARRAY
48650: PUSH
48651: LD_INT 4
48653: ARRAY
48654: PPUSH
48655: LD_INT 80
48657: PPUSH
48658: CALL 7803 0 5
// result := Join ( result , CreateVehicle ) ;
48662: LD_ADDR_VAR 0 4
48666: PUSH
48667: LD_VAR 0 4
48671: PPUSH
48672: CALL_OW 45
48676: PPUSH
48677: CALL 40674 0 2
48681: ST_TO_ADDR
// end ;
48682: GO 48548
48684: POP
48685: POP
// end ;
48686: LD_VAR 0 4
48690: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48691: LD_INT 0
48693: PPUSH
48694: PPUSH
// for i in mpBattleFlags do
48695: LD_ADDR_VAR 0 3
48699: PUSH
48700: LD_EXP 23
48704: PUSH
48705: FOR_IN
48706: IFFALSE 48783
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48708: LD_VAR 0 3
48712: PPUSH
48713: LD_INT 1
48715: PUSH
48716: LD_VAR 0 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_VAR 0 1
48732: PUSH
48733: LD_REAL  7.00000000000000E-0001
48736: MUL
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_VAR 0 1
48749: PUSH
48750: LD_REAL  4.00000000000000E-0001
48753: MUL
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 20
48761: PUSH
48762: LD_VAR 0 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: PPUSH
48777: CALL_OW 423
48781: GO 48705
48783: POP
48784: POP
// end ;
48785: LD_VAR 0 2
48789: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48790: LD_INT 100
48792: IFFALSE 48887
48794: GO 48796
48796: DISABLE
48797: LD_INT 0
48799: PPUSH
48800: PPUSH
// begin if mpBattleFlag <= 0 then
48801: LD_EXP 22
48805: PUSH
48806: LD_INT 0
48808: LESSEQUAL
48809: IFFALSE 48813
// exit ;
48811: GO 48887
// strength := 100 ;
48813: LD_ADDR_VAR 0 2
48817: PUSH
48818: LD_INT 100
48820: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48821: LD_EXP 22
48825: PPUSH
48826: CALL_OW 67
// strength := Dec ( strength ) ;
48830: LD_ADDR_VAR 0 2
48834: PUSH
48835: LD_VAR 0 2
48839: PPUSH
48840: CALL 42057 0 1
48844: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48845: LD_VAR 0 2
48849: PPUSH
48850: CALL 48691 0 1
// until not strength ;
48854: LD_VAR 0 2
48858: NOT
48859: IFFALSE 48821
// for i in mpBattleFlags do
48861: LD_ADDR_VAR 0 1
48865: PUSH
48866: LD_EXP 23
48870: PUSH
48871: FOR_IN
48872: IFFALSE 48885
// KillBattleFlag ( i ) ;
48874: LD_VAR 0 1
48878: PPUSH
48879: CALL_OW 419
48883: GO 48871
48885: POP
48886: POP
// end ;
48887: PPOPN 2
48889: END
// every 0 0$1 marked mpActive do var side , tmp ;
48890: GO 48892
48892: DISABLE
48893: LD_INT 0
48895: PPUSH
48896: PPUSH
// begin if mpSibBomb <= 1 then
48897: LD_EXP 28
48901: PUSH
48902: LD_INT 1
48904: LESSEQUAL
48905: IFFALSE 48909
// exit ;
48907: GO 48982
// tmp := mpSibBomb ;
48909: LD_ADDR_VAR 0 2
48913: PUSH
48914: LD_EXP 28
48918: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48919: LD_INT 35
48921: PPUSH
48922: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48926: LD_ADDR_VAR 0 2
48930: PUSH
48931: LD_VAR 0 2
48935: PUSH
48936: LD_INT 35
48938: MINUS
48939: ST_TO_ADDR
// until not tmp ;
48940: LD_VAR 0 2
48944: NOT
48945: IFFALSE 48919
// for side := 1 to 8 do
48947: LD_ADDR_VAR 0 1
48951: PUSH
48952: DOUBLE
48953: LD_INT 1
48955: DEC
48956: ST_TO_ADDR
48957: LD_INT 8
48959: PUSH
48960: FOR_TO
48961: IFFALSE 48980
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48963: LD_INT 25
48965: PPUSH
48966: LD_VAR 0 1
48970: PPUSH
48971: LD_INT 1
48973: PPUSH
48974: CALL_OW 322
48978: GO 48960
48980: POP
48981: POP
// end ;
48982: PPOPN 2
48984: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48985: LD_INT 0
48987: PPUSH
48988: PPUSH
48989: PPUSH
// mpBuildUpTimeDelay := 0 ;
48990: LD_ADDR_EXP 41
48994: PUSH
48995: LD_INT 0
48997: ST_TO_ADDR
// if not mpBuildUpTime then
48998: LD_EXP 20
49002: NOT
49003: IFFALSE 49007
// exit ;
49005: GO 49190
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49007: LD_ADDR_EXP 41
49011: PUSH
49012: LD_INT 8400
49014: PUSH
49015: LD_INT 2100
49017: PUSH
49018: LD_EXP 20
49022: MUL
49023: PLUS
49024: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49025: LD_ADDR_EXP 42
49029: PUSH
49030: LD_INT 1
49032: ST_TO_ADDR
// for i := 1 to 8 do
49033: LD_ADDR_VAR 0 2
49037: PUSH
49038: DOUBLE
49039: LD_INT 1
49041: DEC
49042: ST_TO_ADDR
49043: LD_INT 8
49045: PUSH
49046: FOR_TO
49047: IFFALSE 49188
// if mpSidePositions [ i ] then
49049: LD_EXP 7
49053: PUSH
49054: LD_VAR 0 2
49058: ARRAY
49059: IFFALSE 49186
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49061: LD_EXP 19
49065: PUSH
49066: LD_EXP 7
49070: PUSH
49071: LD_VAR 0 2
49075: ARRAY
49076: ARRAY
49077: PPUSH
49078: LD_INT 5
49080: PPUSH
49081: CALL_OW 424
// for j := 1 to 8 do
49085: LD_ADDR_VAR 0 3
49089: PUSH
49090: DOUBLE
49091: LD_INT 1
49093: DEC
49094: ST_TO_ADDR
49095: LD_INT 8
49097: PUSH
49098: FOR_TO
49099: IFFALSE 49184
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49101: LD_EXP 7
49105: PUSH
49106: LD_VAR 0 3
49110: ARRAY
49111: PUSH
49112: LD_EXP 8
49116: PUSH
49117: LD_VAR 0 2
49121: ARRAY
49122: PUSH
49123: LD_EXP 8
49127: PUSH
49128: LD_VAR 0 3
49132: ARRAY
49133: NONEQUAL
49134: PUSH
49135: LD_EXP 11
49139: NOT
49140: PUSH
49141: LD_VAR 0 2
49145: PUSH
49146: LD_VAR 0 3
49150: NONEQUAL
49151: AND
49152: OR
49153: AND
49154: IFFALSE 49182
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49156: LD_VAR 0 3
49160: PPUSH
49161: LD_EXP 19
49165: PUSH
49166: LD_EXP 7
49170: PUSH
49171: LD_VAR 0 2
49175: ARRAY
49176: ARRAY
49177: PPUSH
49178: CALL_OW 333
49182: GO 49098
49184: POP
49185: POP
// end ;
49186: GO 49046
49188: POP
49189: POP
// end ;
49190: LD_VAR 0 1
49194: RET
// function EndBuildUp ; var i , j ; begin
49195: LD_INT 0
49197: PPUSH
49198: PPUSH
49199: PPUSH
// mpBuildUpTimeActive := false ;
49200: LD_ADDR_EXP 42
49204: PUSH
49205: LD_INT 0
49207: ST_TO_ADDR
// for i := 1 to 8 do
49208: LD_ADDR_VAR 0 2
49212: PUSH
49213: DOUBLE
49214: LD_INT 1
49216: DEC
49217: ST_TO_ADDR
49218: LD_INT 8
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49363
// if mpSidePositions [ i ] then
49224: LD_EXP 7
49228: PUSH
49229: LD_VAR 0 2
49233: ARRAY
49234: IFFALSE 49361
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49236: LD_EXP 19
49240: PUSH
49241: LD_EXP 7
49245: PUSH
49246: LD_VAR 0 2
49250: ARRAY
49251: ARRAY
49252: PPUSH
49253: LD_INT 0
49255: PPUSH
49256: CALL_OW 424
// for j := 1 to 8 do
49260: LD_ADDR_VAR 0 3
49264: PUSH
49265: DOUBLE
49266: LD_INT 1
49268: DEC
49269: ST_TO_ADDR
49270: LD_INT 8
49272: PUSH
49273: FOR_TO
49274: IFFALSE 49359
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49276: LD_EXP 7
49280: PUSH
49281: LD_VAR 0 3
49285: ARRAY
49286: PUSH
49287: LD_EXP 8
49291: PUSH
49292: LD_VAR 0 2
49296: ARRAY
49297: PUSH
49298: LD_EXP 8
49302: PUSH
49303: LD_VAR 0 3
49307: ARRAY
49308: NONEQUAL
49309: PUSH
49310: LD_EXP 11
49314: NOT
49315: PUSH
49316: LD_VAR 0 2
49320: PUSH
49321: LD_VAR 0 3
49325: NONEQUAL
49326: AND
49327: OR
49328: AND
49329: IFFALSE 49357
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49331: LD_VAR 0 3
49335: PPUSH
49336: LD_EXP 19
49340: PUSH
49341: LD_EXP 7
49345: PUSH
49346: LD_VAR 0 2
49350: ARRAY
49351: ARRAY
49352: PPUSH
49353: CALL_OW 334
49357: GO 49273
49359: POP
49360: POP
// end ;
49361: GO 49221
49363: POP
49364: POP
// end ;
49365: LD_VAR 0 1
49369: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49370: LD_EXP 42
49374: IFFALSE 49549
49376: GO 49378
49378: DISABLE
49379: LD_INT 0
49381: PPUSH
49382: PPUSH
// begin for i := 1 to 8 do
49383: LD_ADDR_VAR 0 1
49387: PUSH
49388: DOUBLE
49389: LD_INT 1
49391: DEC
49392: ST_TO_ADDR
49393: LD_INT 8
49395: PUSH
49396: FOR_TO
49397: IFFALSE 49546
// if mpSidePositions [ i ] then
49399: LD_EXP 7
49403: PUSH
49404: LD_VAR 0 1
49408: ARRAY
49409: IFFALSE 49544
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49411: LD_ADDR_VAR 0 2
49415: PUSH
49416: LD_EXP 19
49420: PUSH
49421: LD_EXP 7
49425: PUSH
49426: LD_VAR 0 1
49430: ARRAY
49431: ARRAY
49432: PPUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 21
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 21
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 22
49463: PUSH
49464: LD_OWVAR 2
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PPUSH
49477: CALL_OW 70
49481: PUSH
49482: FOR_IN
49483: IFFALSE 49542
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49485: LD_EXP 8
49489: PUSH
49490: LD_VAR 0 1
49494: ARRAY
49495: PUSH
49496: LD_EXP 8
49500: PUSH
49501: LD_OWVAR 2
49505: ARRAY
49506: NONEQUAL
49507: PUSH
49508: LD_EXP 11
49512: NOT
49513: PUSH
49514: LD_VAR 0 1
49518: PUSH
49519: LD_OWVAR 2
49523: NONEQUAL
49524: AND
49525: OR
49526: IFFALSE 49540
// ComMoveToArea ( un , BuildUpEscape ) ;
49528: LD_VAR 0 2
49532: PPUSH
49533: LD_INT 9
49535: PPUSH
49536: CALL_OW 113
49540: GO 49482
49542: POP
49543: POP
49544: GO 49396
49546: POP
49547: POP
// enable ;
49548: ENABLE
// end ;
49549: PPOPN 2
49551: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49552: LD_EXP 20
49556: IFFALSE 49606
49558: GO 49560
49560: DISABLE
49561: LD_INT 0
49563: PPUSH
// begin tmp := mpBuildUpTime ;
49564: LD_ADDR_VAR 0 1
49568: PUSH
49569: LD_EXP 20
49573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49574: LD_INT 35
49576: PPUSH
49577: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49581: LD_ADDR_VAR 0 1
49585: PUSH
49586: LD_VAR 0 1
49590: PUSH
49591: LD_INT 35
49593: MINUS
49594: ST_TO_ADDR
// until not tmp ;
49595: LD_VAR 0 1
49599: NOT
49600: IFFALSE 49574
// EndBuildUp ;
49602: CALL 49195 0 0
// end ;
49606: PPOPN 1
49608: END
// every 0 0$1 trigger mpActive marked mpWin do
49609: LD_INT 100
49611: IFFALSE 49645
49613: GO 49615
49615: DISABLE
// begin if IAmServer then
49616: CALL_OW 518
49620: IFFALSE 49629
// wait ( 0 0$3 ) ;
49622: LD_INT 105
49624: PPUSH
49625: CALL_OW 67
// if Multiplayer then
49629: LD_OWVAR 4
49633: IFFALSE 49641
// YouWinInMultiplayer else
49635: CALL_OW 106
49639: GO 49645
// YouWin ;
49641: CALL_OW 103
// end ;
49645: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49646: LD_INT 0
49648: PPUSH
// result := false ;
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_INT 0
49656: ST_TO_ADDR
// case gameType of GameTypeNormal :
49657: LD_VAR 0 1
49661: PUSH
49662: LD_INT 1
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49670
49668: GO 49743
49670: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49671: LD_ADDR_VAR 0 3
49675: PUSH
49676: LD_INT 22
49678: PUSH
49679: LD_VAR 0 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 21
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 33
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 33
49713: PUSH
49714: LD_INT 5
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PPUSH
49731: CALL_OW 69
49735: PPUSH
49736: CALL 5065 0 1
49740: ST_TO_ADDR
// end ; GameTypeSurvival :
49741: GO 49978
49743: LD_INT 2
49745: DOUBLE
49746: EQUAL
49747: IFTRUE 49751
49749: GO 49879
49751: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: LD_INT 22
49759: PUSH
49760: LD_VAR 0 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 30
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 30
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PPUSH
49801: CALL_OW 69
49805: PPUSH
49806: CALL 5065 0 1
49810: PUSH
49811: LD_INT 22
49813: PUSH
49814: LD_VAR 0 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 21
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 33
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 33
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PPUSH
49866: CALL_OW 69
49870: PPUSH
49871: CALL 5065 0 1
49875: AND
49876: ST_TO_ADDR
// end ; GameTypeKing :
49877: GO 49978
49879: LD_INT 3
49881: DOUBLE
49882: EQUAL
49883: IFTRUE 49887
49885: GO 49977
49887: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49888: LD_ADDR_VAR 0 3
49892: PUSH
49893: LD_INT 22
49895: PUSH
49896: LD_VAR 0 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 21
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 33
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 33
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PPUSH
49948: CALL_OW 69
49952: PPUSH
49953: CALL 5065 0 1
49957: PUSH
49958: LD_VAR 0 2
49962: PPUSH
49963: CALL 53168 0 1
49967: PUSH
49968: LD_EXP 34
49972: LESS
49973: AND
49974: ST_TO_ADDR
// end ; end ;
49975: GO 49978
49977: POP
// end ;
49978: LD_VAR 0 3
49982: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49983: LD_INT 100
49985: IFFALSE 50207
49987: GO 49989
49989: DISABLE
49990: LD_INT 0
49992: PPUSH
49993: PPUSH
// begin if Multiplayer then
49994: LD_OWVAR 4
49998: IFFALSE 50006
// SetPlayerSpectator ( ) else
50000: CALL_OW 572
50004: GO 50015
// FogOff ( your_side ) ;
50006: LD_OWVAR 2
50010: PPUSH
50011: CALL_OW 344
// repeat gameIsOn := false ;
50015: LD_ADDR_VAR 0 1
50019: PUSH
50020: LD_INT 0
50022: ST_TO_ADDR
// for i := 1 to 8 do
50023: LD_ADDR_VAR 0 2
50027: PUSH
50028: DOUBLE
50029: LD_INT 1
50031: DEC
50032: ST_TO_ADDR
50033: LD_INT 8
50035: PUSH
50036: FOR_TO
50037: IFFALSE 50159
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50039: LD_EXP 7
50043: PUSH
50044: LD_VAR 0 2
50048: ARRAY
50049: PUSH
50050: LD_VAR 0 2
50054: PPUSH
50055: CALL_OW 108
50059: AND
50060: PUSH
50061: LD_VAR 0 2
50065: PUSH
50066: LD_OWVAR 2
50070: NONEQUAL
50071: AND
50072: IFFALSE 50157
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50074: LD_EXP 8
50078: PUSH
50079: LD_VAR 0 2
50083: ARRAY
50084: NOT
50085: PUSH
50086: LD_EXP 8
50090: PUSH
50091: LD_VAR 0 2
50095: ARRAY
50096: PUSH
50097: LD_EXP 8
50101: PUSH
50102: LD_OWVAR 2
50106: ARRAY
50107: NONEQUAL
50108: PUSH
50109: LD_OWVAR 2
50113: PPUSH
50114: LD_VAR 0 2
50118: PPUSH
50119: CALL_OW 81
50123: PUSH
50124: LD_INT 1
50126: NONEQUAL
50127: AND
50128: OR
50129: IFFALSE 50157
// if HasPowerByGameType ( mpGameType , i ) then
50131: LD_EXP 3
50135: PPUSH
50136: LD_VAR 0 2
50140: PPUSH
50141: CALL 49646 0 2
50145: IFFALSE 50157
// begin gameIsOn := true ;
50147: LD_ADDR_VAR 0 1
50151: PUSH
50152: LD_INT 1
50154: ST_TO_ADDR
// break ;
50155: GO 50159
// end ;
50157: GO 50036
50159: POP
50160: POP
// wait ( 100 ) ;
50161: LD_INT 100
50163: PPUSH
50164: CALL_OW 67
// until not gameIsOn ;
50168: LD_VAR 0 1
50172: NOT
50173: IFFALSE 50015
// if IAmServer then
50175: CALL_OW 518
50179: IFFALSE 50188
// wait ( 0 0$3 ) ;
50181: LD_INT 105
50183: PPUSH
50184: CALL_OW 67
// if Multiplayer then
50188: LD_OWVAR 4
50192: IFFALSE 50200
// YouLostInMultiplayer else
50194: CALL_OW 107
50198: GO 50207
// YouLost (  ) ;
50200: LD_STRING 
50202: PPUSH
50203: CALL_OW 104
// end ;
50207: PPOPN 2
50209: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50210: LD_EXP 32
50214: IFFALSE 50561
50216: GO 50218
50218: DISABLE
50219: LD_INT 0
50221: PPUSH
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50226: LD_ADDR_VAR 0 5
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 5
50245: PUSH
50246: LD_INT 6
50248: PUSH
50249: LD_INT 7
50251: PUSH
50252: LD_INT 8
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50265: LD_INT 350
50267: PPUSH
50268: CALL_OW 67
// for i := 1 to 8 do
50272: LD_ADDR_VAR 0 1
50276: PUSH
50277: DOUBLE
50278: LD_INT 1
50280: DEC
50281: ST_TO_ADDR
50282: LD_INT 8
50284: PUSH
50285: FOR_TO
50286: IFFALSE 50531
// begin j := sides [ i ] ;
50288: LD_ADDR_VAR 0 2
50292: PUSH
50293: LD_VAR 0 5
50297: PUSH
50298: LD_VAR 0 1
50302: ARRAY
50303: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50304: LD_EXP 39
50308: PUSH
50309: LD_VAR 0 2
50313: ARRAY
50314: PPUSH
50315: CALL 5065 0 1
50319: PUSH
50320: LD_VAR 0 2
50324: PPUSH
50325: CALL_OW 108
50329: AND
50330: PUSH
50331: LD_EXP 3
50335: PPUSH
50336: LD_VAR 0 2
50340: PPUSH
50341: CALL 49646 0 2
50345: AND
50346: IFFALSE 50529
// begin wait ( mpRespawn div 3 ) ;
50348: LD_EXP 32
50352: PUSH
50353: LD_INT 3
50355: DIV
50356: PPUSH
50357: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50361: LD_ADDR_VAR 0 3
50365: PUSH
50366: LD_INT 22
50368: PUSH
50369: LD_VAR 0 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 50
50380: PUSH
50381: EMPTY
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 30
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 30
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: PPUSH
50417: CALL_OW 69
50421: ST_TO_ADDR
// if not tmp then
50422: LD_VAR 0 3
50426: NOT
50427: IFFALSE 50431
// continue ;
50429: GO 50285
// spawn := tmp [ 1 ] ;
50431: LD_ADDR_VAR 0 4
50435: PUSH
50436: LD_VAR 0 3
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50445: LD_EXP 39
50449: PUSH
50450: LD_VAR 0 2
50454: ARRAY
50455: PUSH
50456: LD_INT 1
50458: ARRAY
50459: PPUSH
50460: LD_VAR 0 4
50464: PPUSH
50465: CALL_OW 250
50469: PPUSH
50470: LD_VAR 0 4
50474: PPUSH
50475: CALL_OW 251
50479: PPUSH
50480: LD_INT 32
50482: PPUSH
50483: LD_INT 1
50485: PPUSH
50486: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50490: LD_ADDR_EXP 39
50494: PUSH
50495: LD_EXP 39
50499: PPUSH
50500: LD_VAR 0 2
50504: PPUSH
50505: LD_EXP 39
50509: PUSH
50510: LD_VAR 0 2
50514: ARRAY
50515: PPUSH
50516: LD_INT 1
50518: PPUSH
50519: CALL_OW 3
50523: PPUSH
50524: CALL_OW 1
50528: ST_TO_ADDR
// end ; end ;
50529: GO 50285
50531: POP
50532: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50533: LD_ADDR_VAR 0 5
50537: PUSH
50538: LD_VAR 0 5
50542: PPUSH
50543: LD_INT 1
50545: PPUSH
50546: LD_INT 8
50548: PPUSH
50549: LD_INT 1
50551: PPUSH
50552: CALL 7343 0 4
50556: ST_TO_ADDR
// until false ;
50557: LD_INT 0
50559: IFFALSE 50265
// end ;
50561: PPOPN 5
50563: END
// every 0 0$1 marked mpActive do
50564: GO 50566
50566: DISABLE
// begin enable ;
50567: ENABLE
// if not mpDisplayStrings then
50568: LD_EXP 37
50572: NOT
50573: IFFALSE 50584
// begin display_strings := [ ] ;
50575: LD_ADDR_OWVAR 47
50579: PUSH
50580: EMPTY
50581: ST_TO_ADDR
// exit ;
50582: GO 50594
// end ; display_strings := mpDisplayStrings ;
50584: LD_ADDR_OWVAR 47
50588: PUSH
50589: LD_EXP 37
50593: ST_TO_ADDR
// end ; end_of_file
50594: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50595: LD_INT 0
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
// if GetType ( un ) = unit_vehicle then
50606: LD_VAR 0 1
50610: PPUSH
50611: CALL_OW 247
50615: PUSH
50616: LD_INT 2
50618: EQUAL
50619: IFFALSE 50623
// exit ;
50621: GO 51193
// side := GetSide ( un ) ;
50623: LD_ADDR_VAR 0 9
50627: PUSH
50628: LD_VAR 0 1
50632: PPUSH
50633: CALL_OW 255
50637: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50638: LD_EXP 3
50642: PUSH
50643: LD_INT 2
50645: EQUAL
50646: IFFALSE 50739
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 266
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: IN
50668: PUSH
50669: LD_VAR 0 1
50673: PPUSH
50674: CALL_OW 110
50678: PUSH
50679: LD_VAR 0 9
50683: EQUAL
50684: AND
50685: IFFALSE 50739
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50687: LD_ADDR_VAR 0 3
50691: PUSH
50692: LD_INT 22
50694: PUSH
50695: LD_VAR 0 9
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 21
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PPUSH
50718: CALL_OW 69
50722: PUSH
50723: FOR_IN
50724: IFFALSE 50737
// KillUnit ( i ) ;
50726: LD_VAR 0 3
50730: PPUSH
50731: CALL_OW 66
50735: GO 50723
50737: POP
50738: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50739: LD_VAR 0 1
50743: PPUSH
50744: CALL_OW 257
50748: PUSH
50749: LD_INT 12
50751: PUSH
50752: LD_INT 17
50754: PUSH
50755: LD_INT 15
50757: PUSH
50758: LD_INT 16
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: IN
50767: PUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 263
50777: PUSH
50778: LD_INT 5
50780: EQUAL
50781: OR
50782: IFFALSE 50922
// begin tag := GetTag ( un ) ;
50784: LD_ADDR_VAR 0 5
50788: PUSH
50789: LD_VAR 0 1
50793: PPUSH
50794: CALL_OW 110
50798: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50799: LD_ADDR_VAR 0 7
50803: PUSH
50804: LD_EXP 31
50808: PUSH
50809: LD_EXP 7
50813: PUSH
50814: LD_VAR 0 5
50818: ARRAY
50819: ARRAY
50820: ST_TO_ADDR
// if not area then
50821: LD_VAR 0 7
50825: NOT
50826: IFFALSE 50830
// exit ;
50828: GO 51193
// wait ( 4 4$00 ) ;
50830: LD_INT 8400
50832: PPUSH
50833: CALL_OW 67
// repeat wait ( 10 ) ;
50837: LD_INT 10
50839: PPUSH
50840: CALL_OW 67
// until not mpBlockRespThread ;
50844: LD_EXP 40
50848: NOT
50849: IFFALSE 50837
// mpBlockRespThread := true ;
50851: LD_ADDR_EXP 40
50855: PUSH
50856: LD_INT 1
50858: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50859: LD_INT 0
50861: PPUSH
50862: CALL 36922 0 1
// ape := CreateHuman ;
50866: LD_ADDR_VAR 0 4
50870: PUSH
50871: CALL_OW 44
50875: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50876: LD_VAR 0 4
50880: PPUSH
50881: LD_VAR 0 5
50885: PPUSH
50886: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50890: LD_VAR 0 4
50894: PPUSH
50895: LD_VAR 0 7
50899: PPUSH
50900: LD_INT 0
50902: PPUSH
50903: CALL_OW 49
// wait ( 10 ) ;
50907: LD_INT 10
50909: PPUSH
50910: CALL_OW 67
// mpBlockRespThread := false ;
50914: LD_ADDR_EXP 40
50918: PUSH
50919: LD_INT 0
50921: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 247
50931: PUSH
50932: LD_INT 1
50934: EQUAL
50935: PUSH
50936: LD_VAR 0 1
50940: PPUSH
50941: CALL_OW 248
50945: PUSH
50946: LD_INT 0
50948: GREATER
50949: AND
50950: IFFALSE 51193
// begin if not mpRespawn then
50952: LD_EXP 32
50956: NOT
50957: IFFALSE 50961
// exit ;
50959: GO 51193
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50961: LD_VAR 0 9
50965: PPUSH
50966: CALL_OW 108
50970: NOT
50971: PUSH
50972: LD_EXP 3
50976: PPUSH
50977: LD_VAR 0 9
50981: PPUSH
50982: CALL 49646 0 2
50986: NOT
50987: AND
50988: IFFALSE 50992
// exit ;
50990: GO 51193
// side := GetSide ( un ) ;
50992: LD_ADDR_VAR 0 9
50996: PUSH
50997: LD_VAR 0 1
51001: PPUSH
51002: CALL_OW 255
51006: ST_TO_ADDR
// nation := GetNation ( un ) ;
51007: LD_ADDR_VAR 0 8
51011: PUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL_OW 248
51021: ST_TO_ADDR
// class := GetClass ( un ) ;
51022: LD_ADDR_VAR 0 6
51026: PUSH
51027: LD_VAR 0 1
51031: PPUSH
51032: CALL_OW 257
51036: ST_TO_ADDR
// if class > 4 then
51037: LD_VAR 0 6
51041: PUSH
51042: LD_INT 4
51044: GREATER
51045: IFFALSE 51055
// class := 1 ;
51047: LD_ADDR_VAR 0 6
51051: PUSH
51052: LD_INT 1
51054: ST_TO_ADDR
// repeat wait ( 10 ) ;
51055: LD_INT 10
51057: PPUSH
51058: CALL_OW 67
// until not mpBlockRespThread ;
51062: LD_EXP 40
51066: NOT
51067: IFFALSE 51055
// mpBlockRespThread := true ;
51069: LD_ADDR_EXP 40
51073: PUSH
51074: LD_INT 1
51076: ST_TO_ADDR
// uc_side := side ;
51077: LD_ADDR_OWVAR 20
51081: PUSH
51082: LD_VAR 0 9
51086: ST_TO_ADDR
// uc_nation := nation ;
51087: LD_ADDR_OWVAR 21
51091: PUSH
51092: LD_VAR 0 8
51096: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51097: LD_INT 0
51099: PPUSH
51100: LD_VAR 0 6
51104: PPUSH
51105: LD_INT 2
51107: PPUSH
51108: CALL_OW 380
// un := CreateHuman ;
51112: LD_ADDR_VAR 0 1
51116: PUSH
51117: CALL_OW 44
51121: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51122: LD_ADDR_EXP 39
51126: PUSH
51127: LD_EXP 39
51131: PPUSH
51132: LD_VAR 0 9
51136: PPUSH
51137: LD_EXP 39
51141: PUSH
51142: LD_VAR 0 9
51146: ARRAY
51147: PPUSH
51148: LD_EXP 39
51152: PUSH
51153: LD_VAR 0 9
51157: ARRAY
51158: PUSH
51159: LD_INT 1
51161: PLUS
51162: PPUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 1
51172: PPUSH
51173: CALL_OW 1
51177: ST_TO_ADDR
// wait ( 10 ) ;
51178: LD_INT 10
51180: PPUSH
51181: CALL_OW 67
// mpBlockRespThread := false ;
51185: LD_ADDR_EXP 40
51189: PUSH
51190: LD_INT 0
51192: ST_TO_ADDR
// end ; end ;
51193: LD_VAR 0 2
51197: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51198: LD_INT 0
51200: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51201: LD_VAR 0 1
51205: PPUSH
51206: CALL_OW 266
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: IN
51221: IFFALSE 51246
// SetBName ( building , @ & GetSide ( building ) ) ;
51223: LD_VAR 0 1
51227: PPUSH
51228: LD_STRING @
51230: PUSH
51231: LD_VAR 0 1
51235: PPUSH
51236: CALL_OW 255
51240: STR
51241: PPUSH
51242: CALL_OW 500
// end ;
51246: LD_VAR 0 2
51250: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51251: LD_INT 0
51253: PPUSH
51254: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51255: LD_EXP 3
51259: PUSH
51260: LD_INT 2
51262: EQUAL
51263: PUSH
51264: LD_VAR 0 1
51268: PPUSH
51269: CALL_OW 266
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: IN
51284: AND
51285: IFFALSE 51350
// begin KillUnit ( building ) ;
51287: LD_VAR 0 1
51291: PPUSH
51292: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51296: LD_ADDR_VAR 0 5
51300: PUSH
51301: LD_INT 22
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 21
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PPUSH
51327: CALL_OW 69
51331: PUSH
51332: FOR_IN
51333: IFFALSE 51346
// KillUnit ( i ) ;
51335: LD_VAR 0 5
51339: PPUSH
51340: CALL_OW 66
51344: GO 51332
51346: POP
51347: POP
// exit ;
51348: GO 51395
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 266
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: IN
51370: IFFALSE 51395
// SetBName ( building , @ & GetSide ( building ) ) ;
51372: LD_VAR 0 1
51376: PPUSH
51377: LD_STRING @
51379: PUSH
51380: LD_VAR 0 1
51384: PPUSH
51385: CALL_OW 255
51389: STR
51390: PPUSH
51391: CALL_OW 500
// end ; end_of_file
51395: LD_VAR 0 4
51399: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51400: LD_EXP 38
51404: PUSH
51405: CALL 51610 0 0
51409: AND
51410: PUSH
51411: LD_OWVAR 4
51415: AND
51416: IFFALSE 51607
51418: GO 51420
51420: DISABLE
51421: LD_INT 0
51423: PPUSH
51424: PPUSH
// begin canWin := false ;
51425: LD_ADDR_VAR 0 2
51429: PUSH
51430: LD_INT 0
51432: ST_TO_ADDR
// if not HasPower ( your_side ) then
51433: LD_OWVAR 2
51437: PPUSH
51438: CALL 51650 0 1
51442: NOT
51443: IFFALSE 51454
// begin Multiplayer_Loose_Message ;
51445: CALL_OW 521
// enable ( mpLose ) ;
51449: LD_INT 102
51451: ENABLE_MARKED
// end else
51452: GO 51607
// begin canWin := true ;
51454: LD_ADDR_VAR 0 2
51458: PUSH
51459: LD_INT 1
51461: ST_TO_ADDR
// for i := 1 to 8 do
51462: LD_ADDR_VAR 0 1
51466: PUSH
51467: DOUBLE
51468: LD_INT 1
51470: DEC
51471: ST_TO_ADDR
51472: LD_INT 8
51474: PUSH
51475: FOR_TO
51476: IFFALSE 51593
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51478: LD_EXP 7
51482: PUSH
51483: LD_VAR 0 1
51487: ARRAY
51488: PUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 108
51498: AND
51499: PUSH
51500: LD_VAR 0 1
51504: PUSH
51505: LD_OWVAR 2
51509: NONEQUAL
51510: AND
51511: IFFALSE 51591
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51513: LD_EXP 8
51517: PUSH
51518: LD_VAR 0 1
51522: ARRAY
51523: NOT
51524: PUSH
51525: LD_EXP 8
51529: PUSH
51530: LD_VAR 0 1
51534: ARRAY
51535: PUSH
51536: LD_EXP 8
51540: PUSH
51541: LD_OWVAR 2
51545: ARRAY
51546: NONEQUAL
51547: PUSH
51548: LD_OWVAR 2
51552: PPUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 81
51562: PUSH
51563: LD_INT 1
51565: NONEQUAL
51566: AND
51567: OR
51568: IFFALSE 51591
// if HasPower ( i ) then
51570: LD_VAR 0 1
51574: PPUSH
51575: CALL 51650 0 1
51579: IFFALSE 51591
// begin canWin := false ;
51581: LD_ADDR_VAR 0 2
51585: PUSH
51586: LD_INT 0
51588: ST_TO_ADDR
// break ;
51589: GO 51593
// end ;
51591: GO 51475
51593: POP
51594: POP
// if canWin then
51595: LD_VAR 0 2
51599: IFFALSE 51606
// enable ( mpWin ) else
51601: LD_INT 101
51603: ENABLE_MARKED
51604: GO 51607
// enable ;
51606: ENABLE
// end ; end ;
51607: PPOPN 2
51609: END
// function CanWinLoose ; begin
51610: LD_INT 0
51612: PPUSH
// result := true ;
51613: LD_ADDR_VAR 0 1
51617: PUSH
51618: LD_INT 1
51620: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51621: CALL_OW 531
51625: PUSH
51626: CALL_OW 519
51630: PUSH
51631: LD_INT 1
51633: GREATER
51634: AND
51635: IFFALSE 51645
// result := false ;
51637: LD_ADDR_VAR 0 1
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// end ;
51645: LD_VAR 0 1
51649: RET
// function HasPower ( i ) ; begin
51650: LD_INT 0
51652: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51653: LD_ADDR_VAR 0 2
51657: PUSH
51658: LD_INT 22
51660: PUSH
51661: LD_VAR 0 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 21
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 33
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 33
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PPUSH
51713: CALL_OW 69
51717: ST_TO_ADDR
// end ; end_of_file
51718: LD_VAR 0 2
51722: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51723: LD_EXP 38
51727: IFFALSE 51770
51729: GO 51731
51731: DISABLE
51732: LD_INT 0
51734: PPUSH
// begin for i := 1 to 8 do
51735: LD_ADDR_VAR 0 1
51739: PUSH
51740: DOUBLE
51741: LD_INT 1
51743: DEC
51744: ST_TO_ADDR
51745: LD_INT 8
51747: PUSH
51748: FOR_TO
51749: IFFALSE 51768
// SetRestrict ( b_depot , i , state_disabled ) ;
51751: LD_INT 0
51753: PPUSH
51754: LD_VAR 0 1
51758: PPUSH
51759: LD_INT 0
51761: PPUSH
51762: CALL_OW 324
51766: GO 51748
51768: POP
51769: POP
// end ;
51770: PPOPN 1
51772: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51773: LD_EXP 38
51777: PUSH
51778: CALL 51983 0 0
51782: AND
51783: PUSH
51784: LD_OWVAR 4
51788: AND
51789: IFFALSE 51980
51791: GO 51793
51793: DISABLE
51794: LD_INT 0
51796: PPUSH
51797: PPUSH
// begin canWin := false ;
51798: LD_ADDR_VAR 0 2
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
// if not HasPower ( your_side ) then
51806: LD_OWVAR 2
51810: PPUSH
51811: CALL 52023 0 1
51815: NOT
51816: IFFALSE 51827
// begin Multiplayer_Loose_Message ;
51818: CALL_OW 521
// enable ( mpLose ) ;
51822: LD_INT 102
51824: ENABLE_MARKED
// end else
51825: GO 51980
// begin canWin := true ;
51827: LD_ADDR_VAR 0 2
51831: PUSH
51832: LD_INT 1
51834: ST_TO_ADDR
// for i := 1 to 8 do
51835: LD_ADDR_VAR 0 1
51839: PUSH
51840: DOUBLE
51841: LD_INT 1
51843: DEC
51844: ST_TO_ADDR
51845: LD_INT 8
51847: PUSH
51848: FOR_TO
51849: IFFALSE 51966
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51851: LD_EXP 7
51855: PUSH
51856: LD_VAR 0 1
51860: ARRAY
51861: PUSH
51862: LD_VAR 0 1
51866: PPUSH
51867: CALL_OW 108
51871: AND
51872: PUSH
51873: LD_VAR 0 1
51877: PUSH
51878: LD_OWVAR 2
51882: NONEQUAL
51883: AND
51884: IFFALSE 51964
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51886: LD_EXP 8
51890: PUSH
51891: LD_VAR 0 1
51895: ARRAY
51896: NOT
51897: PUSH
51898: LD_EXP 8
51902: PUSH
51903: LD_VAR 0 1
51907: ARRAY
51908: PUSH
51909: LD_EXP 8
51913: PUSH
51914: LD_OWVAR 2
51918: ARRAY
51919: NONEQUAL
51920: PUSH
51921: LD_OWVAR 2
51925: PPUSH
51926: LD_VAR 0 1
51930: PPUSH
51931: CALL_OW 81
51935: PUSH
51936: LD_INT 1
51938: NONEQUAL
51939: AND
51940: OR
51941: IFFALSE 51964
// if HasPower ( i ) then
51943: LD_VAR 0 1
51947: PPUSH
51948: CALL 52023 0 1
51952: IFFALSE 51964
// begin canWin := false ;
51954: LD_ADDR_VAR 0 2
51958: PUSH
51959: LD_INT 0
51961: ST_TO_ADDR
// break ;
51962: GO 51966
// end ;
51964: GO 51848
51966: POP
51967: POP
// if canWin then
51968: LD_VAR 0 2
51972: IFFALSE 51979
// enable ( mpWin ) else
51974: LD_INT 101
51976: ENABLE_MARKED
51977: GO 51980
// enable ;
51979: ENABLE
// end ; end ;
51980: PPOPN 2
51982: END
// function CanWinLoose ; begin
51983: LD_INT 0
51985: PPUSH
// result := true ;
51986: LD_ADDR_VAR 0 1
51990: PUSH
51991: LD_INT 1
51993: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51994: CALL_OW 531
51998: PUSH
51999: CALL_OW 519
52003: PUSH
52004: LD_INT 1
52006: GREATER
52007: AND
52008: IFFALSE 52018
// result := false ;
52010: LD_ADDR_VAR 0 1
52014: PUSH
52015: LD_INT 0
52017: ST_TO_ADDR
// end ;
52018: LD_VAR 0 1
52022: RET
// function HasPower ( i ) ; begin
52023: LD_INT 0
52025: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52026: LD_INT 22
52028: PUSH
52029: LD_VAR 0 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 30
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 30
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PPUSH
52070: CALL_OW 69
52074: NOT
52075: IFFALSE 52079
// exit ;
52077: GO 52144
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52079: LD_ADDR_VAR 0 2
52083: PUSH
52084: LD_INT 22
52086: PUSH
52087: LD_VAR 0 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 21
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 33
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 33
52121: PUSH
52122: LD_INT 5
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PPUSH
52139: CALL_OW 69
52143: ST_TO_ADDR
// end ; end_of_file
52144: LD_VAR 0 2
52148: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52149: LD_EXP 38
52153: IFFALSE 52494
52155: GO 52157
52157: DISABLE
52158: LD_INT 0
52160: PPUSH
52161: PPUSH
52162: PPUSH
// begin mpKingPoints := [ ] ;
52163: LD_ADDR_EXP 43
52167: PUSH
52168: EMPTY
52169: ST_TO_ADDR
// if mpTeamGame then
52170: LD_EXP 11
52174: IFFALSE 52228
// begin for i := 1 to Count ( mpTeams ) do
52176: LD_ADDR_VAR 0 1
52180: PUSH
52181: DOUBLE
52182: LD_INT 1
52184: DEC
52185: ST_TO_ADDR
52186: LD_EXP 10
52190: PPUSH
52191: CALL 5065 0 1
52195: PUSH
52196: FOR_TO
52197: IFFALSE 52224
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52199: LD_ADDR_EXP 43
52203: PUSH
52204: LD_EXP 43
52208: PPUSH
52209: LD_VAR 0 1
52213: PPUSH
52214: LD_INT 0
52216: PPUSH
52217: CALL_OW 1
52221: ST_TO_ADDR
52222: GO 52196
52224: POP
52225: POP
// end else
52226: GO 52271
// begin for i := 1 to 8 do
52228: LD_ADDR_VAR 0 1
52232: PUSH
52233: DOUBLE
52234: LD_INT 1
52236: DEC
52237: ST_TO_ADDR
52238: LD_INT 8
52240: PUSH
52241: FOR_TO
52242: IFFALSE 52269
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52244: LD_ADDR_EXP 43
52248: PUSH
52249: LD_EXP 43
52253: PPUSH
52254: LD_VAR 0 1
52258: PPUSH
52259: LD_INT 0
52261: PPUSH
52262: CALL_OW 1
52266: ST_TO_ADDR
52267: GO 52241
52269: POP
52270: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52271: LD_ADDR_VAR 0 3
52275: PUSH
52276: LD_EXP 2
52280: PPUSH
52281: LD_INT 0
52283: PPUSH
52284: CALL_OW 517
52288: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52289: LD_ADDR_VAR 0 1
52293: PUSH
52294: DOUBLE
52295: LD_INT 1
52297: DEC
52298: ST_TO_ADDR
52299: LD_VAR 0 3
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PUSH
52308: FOR_TO
52309: IFFALSE 52376
// for j := 1 to 8 do
52311: LD_ADDR_VAR 0 2
52315: PUSH
52316: DOUBLE
52317: LD_INT 1
52319: DEC
52320: ST_TO_ADDR
52321: LD_INT 8
52323: PUSH
52324: FOR_TO
52325: IFFALSE 52372
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52327: LD_VAR 0 3
52331: PUSH
52332: LD_INT 1
52334: ARRAY
52335: PUSH
52336: LD_VAR 0 1
52340: ARRAY
52341: PPUSH
52342: LD_VAR 0 3
52346: PUSH
52347: LD_INT 2
52349: ARRAY
52350: PUSH
52351: LD_VAR 0 1
52355: ARRAY
52356: PPUSH
52357: LD_VAR 0 2
52361: PPUSH
52362: LD_INT 12
52364: NEG
52365: PPUSH
52366: CALL_OW 330
52370: GO 52324
52372: POP
52373: POP
52374: GO 52308
52376: POP
52377: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52378: LD_EXP 33
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: CALL_OW 424
// UpdateCounter ;
52390: CALL 52998 0 0
// repeat wait ( 0 0$1 ) ;
52394: LD_INT 35
52396: PPUSH
52397: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52401: LD_ADDR_VAR 0 3
52405: PUSH
52406: LD_EXP 33
52410: PPUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 57
52416: PUSH
52417: EMPTY
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 50
52426: PUSH
52427: EMPTY
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 30
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 30
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: PPUSH
52463: CALL_OW 70
52467: ST_TO_ADDR
// if not tmp then
52468: LD_VAR 0 3
52472: NOT
52473: IFFALSE 52477
// continue ;
52475: GO 52394
// AddPoints ( tmp ) ;
52477: LD_VAR 0 3
52481: PPUSH
52482: CALL 52676 0 1
// UpdateCounter ;
52486: CALL 52998 0 0
// until false ;
52490: LD_INT 0
52492: IFFALSE 52394
// end ;
52494: PPOPN 3
52496: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52497: LD_EXP 38
52501: PUSH
52502: LD_EXP 36
52506: AND
52507: IFFALSE 52673
52509: GO 52511
52511: DISABLE
52512: LD_INT 0
52514: PPUSH
52515: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52516: LD_ADDR_VAR 0 2
52520: PUSH
52521: LD_EXP 2
52525: PPUSH
52526: LD_INT 0
52528: PPUSH
52529: CALL_OW 517
52533: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52534: LD_ADDR_VAR 0 1
52538: PUSH
52539: DOUBLE
52540: LD_INT 1
52542: DEC
52543: ST_TO_ADDR
52544: LD_VAR 0 2
52548: PUSH
52549: LD_INT 1
52551: ARRAY
52552: PUSH
52553: FOR_TO
52554: IFFALSE 52595
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52556: LD_VAR 0 2
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PUSH
52565: LD_VAR 0 1
52569: ARRAY
52570: PPUSH
52571: LD_VAR 0 2
52575: PUSH
52576: LD_INT 2
52578: ARRAY
52579: PUSH
52580: LD_VAR 0 1
52584: ARRAY
52585: PPUSH
52586: LD_INT 125
52588: PPUSH
52589: CALL_OW 495
52593: GO 52553
52595: POP
52596: POP
// repeat wait ( mpEmissions ) ;
52597: LD_EXP 36
52601: PPUSH
52602: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52606: LD_ADDR_VAR 0 1
52610: PUSH
52611: DOUBLE
52612: LD_INT 1
52614: DEC
52615: ST_TO_ADDR
52616: LD_VAR 0 2
52620: PUSH
52621: LD_INT 1
52623: ARRAY
52624: PUSH
52625: FOR_TO
52626: IFFALSE 52667
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52628: LD_VAR 0 2
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PUSH
52637: LD_VAR 0 1
52641: ARRAY
52642: PPUSH
52643: LD_VAR 0 2
52647: PUSH
52648: LD_INT 2
52650: ARRAY
52651: PUSH
52652: LD_VAR 0 1
52656: ARRAY
52657: PPUSH
52658: LD_INT 15
52660: PPUSH
52661: CALL_OW 495
52665: GO 52625
52667: POP
52668: POP
// until false ;
52669: LD_INT 0
52671: IFFALSE 52597
// end ;
52673: PPOPN 2
52675: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52676: LD_INT 0
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
// if mpTeamGame then
52683: LD_EXP 11
52687: IFFALSE 52884
// begin first := depots [ 1 ] ;
52689: LD_ADDR_VAR 0 4
52693: PUSH
52694: LD_VAR 0 1
52698: PUSH
52699: LD_INT 1
52701: ARRAY
52702: ST_TO_ADDR
// side := GetSide ( first ) ;
52703: LD_ADDR_VAR 0 6
52707: PUSH
52708: LD_VAR 0 4
52712: PPUSH
52713: CALL_OW 255
52717: ST_TO_ADDR
// for i := 1 to mpTeams do
52718: LD_ADDR_VAR 0 3
52722: PUSH
52723: DOUBLE
52724: LD_INT 1
52726: DEC
52727: ST_TO_ADDR
52728: LD_EXP 10
52732: PUSH
52733: FOR_TO
52734: IFFALSE 52768
// if side in mpTeams [ i ] then
52736: LD_VAR 0 6
52740: PUSH
52741: LD_EXP 10
52745: PUSH
52746: LD_VAR 0 3
52750: ARRAY
52751: IN
52752: IFFALSE 52766
// begin team := i ;
52754: LD_ADDR_VAR 0 5
52758: PUSH
52759: LD_VAR 0 3
52763: ST_TO_ADDR
// break ;
52764: GO 52768
// end ;
52766: GO 52733
52768: POP
52769: POP
// if not team then
52770: LD_VAR 0 5
52774: NOT
52775: IFFALSE 52779
// exit ;
52777: GO 52993
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52779: LD_EXP 33
52783: PPUSH
52784: LD_INT 81
52786: PUSH
52787: LD_VAR 0 6
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PPUSH
52796: CALL_OW 70
52800: IFFALSE 52804
// exit ;
52802: GO 52993
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52804: LD_ADDR_EXP 43
52808: PUSH
52809: LD_EXP 43
52813: PPUSH
52814: LD_VAR 0 5
52818: PPUSH
52819: LD_EXP 43
52823: PUSH
52824: LD_VAR 0 5
52828: ARRAY
52829: PUSH
52830: LD_INT 1
52832: PLUS
52833: PPUSH
52834: CALL_OW 1
52838: ST_TO_ADDR
// for i in mpTeams [ team ] do
52839: LD_ADDR_VAR 0 3
52843: PUSH
52844: LD_EXP 10
52848: PUSH
52849: LD_VAR 0 5
52853: ARRAY
52854: PUSH
52855: FOR_IN
52856: IFFALSE 52880
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52858: LD_VAR 0 3
52862: PPUSH
52863: LD_EXP 43
52867: PUSH
52868: LD_VAR 0 5
52872: ARRAY
52873: PPUSH
52874: CALL_OW 506
52878: GO 52855
52880: POP
52881: POP
// end else
52882: GO 52993
// begin first := depots [ 1 ] ;
52884: LD_ADDR_VAR 0 4
52888: PUSH
52889: LD_VAR 0 1
52893: PUSH
52894: LD_INT 1
52896: ARRAY
52897: ST_TO_ADDR
// side := GetSide ( first ) ;
52898: LD_ADDR_VAR 0 6
52902: PUSH
52903: LD_VAR 0 4
52907: PPUSH
52908: CALL_OW 255
52912: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52913: LD_EXP 33
52917: PPUSH
52918: LD_INT 81
52920: PUSH
52921: LD_VAR 0 6
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PPUSH
52930: CALL_OW 70
52934: IFFALSE 52938
// exit ;
52936: GO 52993
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52938: LD_ADDR_EXP 43
52942: PUSH
52943: LD_EXP 43
52947: PPUSH
52948: LD_VAR 0 6
52952: PPUSH
52953: LD_EXP 43
52957: PUSH
52958: LD_VAR 0 6
52962: ARRAY
52963: PUSH
52964: LD_INT 1
52966: PLUS
52967: PPUSH
52968: CALL_OW 1
52972: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52973: LD_VAR 0 6
52977: PPUSH
52978: LD_EXP 43
52982: PUSH
52983: LD_VAR 0 6
52987: ARRAY
52988: PPUSH
52989: CALL_OW 506
// end ; end ;
52993: LD_VAR 0 2
52997: RET
// function UpdateCounter ; var i ; begin
52998: LD_INT 0
53000: PPUSH
53001: PPUSH
// result := [ ] ;
53002: LD_ADDR_VAR 0 1
53006: PUSH
53007: EMPTY
53008: ST_TO_ADDR
// if mpTeamGame then
53009: LD_EXP 11
53013: IFFALSE 53080
// begin for i := 1 to mpTeams do
53015: LD_ADDR_VAR 0 2
53019: PUSH
53020: DOUBLE
53021: LD_INT 1
53023: DEC
53024: ST_TO_ADDR
53025: LD_EXP 10
53029: PUSH
53030: FOR_TO
53031: IFFALSE 53076
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53033: LD_ADDR_VAR 0 1
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_STRING #KingoftheHill-Team
53045: PUSH
53046: LD_VAR 0 2
53050: PUSH
53051: LD_EXP 43
53055: PUSH
53056: LD_VAR 0 2
53060: ARRAY
53061: PUSH
53062: LD_EXP 34
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ADD
53073: ST_TO_ADDR
53074: GO 53030
53076: POP
53077: POP
// end else
53078: GO 53153
// begin for i := 1 to 8 do
53080: LD_ADDR_VAR 0 2
53084: PUSH
53085: DOUBLE
53086: LD_INT 1
53088: DEC
53089: ST_TO_ADDR
53090: LD_INT 8
53092: PUSH
53093: FOR_TO
53094: IFFALSE 53151
// if mpSidePositions [ i ] then
53096: LD_EXP 7
53100: PUSH
53101: LD_VAR 0 2
53105: ARRAY
53106: IFFALSE 53149
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53108: LD_ADDR_VAR 0 1
53112: PUSH
53113: LD_VAR 0 1
53117: PUSH
53118: LD_STRING #KingoftheHill-Player
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_EXP 43
53130: PUSH
53131: LD_VAR 0 2
53135: ARRAY
53136: PUSH
53137: LD_EXP 34
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ADD
53148: ST_TO_ADDR
53149: GO 53093
53151: POP
53152: POP
// end ; mpDisplayStrings := result ;
53153: LD_ADDR_EXP 37
53157: PUSH
53158: LD_VAR 0 1
53162: ST_TO_ADDR
// end ;
53163: LD_VAR 0 1
53167: RET
// export function HowMuchPointsKing ( side ) ; begin
53168: LD_INT 0
53170: PPUSH
// result := HowMuchPoints ( side ) ;
53171: LD_ADDR_VAR 0 2
53175: PUSH
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL 53191 0 1
53185: ST_TO_ADDR
// end ;
53186: LD_VAR 0 2
53190: RET
// function HowMuchPoints ( side ) ; var i ; begin
53191: LD_INT 0
53193: PPUSH
53194: PPUSH
// if mpTeamGame then
53195: LD_EXP 11
53199: IFFALSE 53268
// begin for i := 1 to Count ( mpTeams ) do
53201: LD_ADDR_VAR 0 3
53205: PUSH
53206: DOUBLE
53207: LD_INT 1
53209: DEC
53210: ST_TO_ADDR
53211: LD_EXP 10
53215: PPUSH
53216: CALL 5065 0 1
53220: PUSH
53221: FOR_TO
53222: IFFALSE 53264
// begin if side in mpTeams [ i ] then
53224: LD_VAR 0 1
53228: PUSH
53229: LD_EXP 10
53233: PUSH
53234: LD_VAR 0 3
53238: ARRAY
53239: IN
53240: IFFALSE 53262
// begin result := mpKingPoints [ i ] ;
53242: LD_ADDR_VAR 0 2
53246: PUSH
53247: LD_EXP 43
53251: PUSH
53252: LD_VAR 0 3
53256: ARRAY
53257: ST_TO_ADDR
// exit ;
53258: POP
53259: POP
53260: GO 53284
// end ; end ;
53262: GO 53221
53264: POP
53265: POP
// end else
53266: GO 53284
// result := mpKingPoints [ side ] ;
53268: LD_ADDR_VAR 0 2
53272: PUSH
53273: LD_EXP 43
53277: PUSH
53278: LD_VAR 0 1
53282: ARRAY
53283: ST_TO_ADDR
// end ;
53284: LD_VAR 0 2
53288: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53289: LD_EXP 38
53293: PUSH
53294: CALL 53616 0 0
53298: AND
53299: PUSH
53300: LD_OWVAR 4
53304: AND
53305: IFFALSE 53541
53307: GO 53309
53309: DISABLE
53310: LD_INT 0
53312: PPUSH
53313: PPUSH
// begin canWin := false ;
53314: LD_ADDR_VAR 0 2
53318: PUSH
53319: LD_INT 0
53321: ST_TO_ADDR
// if not HasPower ( your_side ) then
53322: LD_OWVAR 2
53326: PPUSH
53327: CALL 53656 0 1
53331: NOT
53332: IFFALSE 53343
// begin Multiplayer_Loose_Message ;
53334: CALL_OW 521
// enable ( mpLose ) ;
53338: LD_INT 102
53340: ENABLE_MARKED
// end else
53341: GO 53541
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53343: LD_ADDR_VAR 0 2
53347: PUSH
53348: LD_OWVAR 2
53352: PPUSH
53353: CALL 53191 0 1
53357: PUSH
53358: LD_EXP 34
53362: GREATEREQUAL
53363: PUSH
53364: LD_OWVAR 2
53368: PPUSH
53369: CALL 53656 0 1
53373: AND
53374: PUSH
53375: CALL 53544 0 0
53379: NOT
53380: OR
53381: ST_TO_ADDR
// for i := 1 to 8 do
53382: LD_ADDR_VAR 0 1
53386: PUSH
53387: DOUBLE
53388: LD_INT 1
53390: DEC
53391: ST_TO_ADDR
53392: LD_INT 8
53394: PUSH
53395: FOR_TO
53396: IFFALSE 53527
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53398: LD_EXP 7
53402: PUSH
53403: LD_VAR 0 1
53407: ARRAY
53408: PUSH
53409: LD_VAR 0 1
53413: PPUSH
53414: CALL_OW 108
53418: AND
53419: PUSH
53420: LD_VAR 0 1
53424: PUSH
53425: LD_OWVAR 2
53429: NONEQUAL
53430: AND
53431: IFFALSE 53525
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53433: LD_EXP 8
53437: PUSH
53438: LD_VAR 0 1
53442: ARRAY
53443: NOT
53444: PUSH
53445: LD_EXP 8
53449: PUSH
53450: LD_VAR 0 1
53454: ARRAY
53455: PUSH
53456: LD_EXP 8
53460: PUSH
53461: LD_OWVAR 2
53465: ARRAY
53466: NONEQUAL
53467: PUSH
53468: LD_OWVAR 2
53472: PPUSH
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 81
53482: PUSH
53483: LD_INT 1
53485: NONEQUAL
53486: AND
53487: OR
53488: IFFALSE 53525
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53490: LD_VAR 0 1
53494: PPUSH
53495: CALL 53191 0 1
53499: PUSH
53500: LD_EXP 34
53504: GREATEREQUAL
53505: PUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL 53656 0 1
53515: AND
53516: IFFALSE 53525
// begin enable ( mpLose ) ;
53518: LD_INT 102
53520: ENABLE_MARKED
// exit ;
53521: POP
53522: POP
53523: GO 53541
// end ;
53525: GO 53395
53527: POP
53528: POP
// if canWin then
53529: LD_VAR 0 2
53533: IFFALSE 53540
// enable ( mpWin ) else
53535: LD_INT 101
53537: ENABLE_MARKED
53538: GO 53541
// enable ;
53540: ENABLE
// end ; end ;
53541: PPOPN 2
53543: END
// function EnemiesInGame ; var i ; begin
53544: LD_INT 0
53546: PPUSH
53547: PPUSH
// result := false ;
53548: LD_ADDR_VAR 0 1
53552: PUSH
53553: LD_INT 0
53555: ST_TO_ADDR
// for i := 1 to 8 do
53556: LD_ADDR_VAR 0 2
53560: PUSH
53561: DOUBLE
53562: LD_INT 1
53564: DEC
53565: ST_TO_ADDR
53566: LD_INT 8
53568: PUSH
53569: FOR_TO
53570: IFFALSE 53609
// if i <> your_side and HasPower ( i ) then
53572: LD_VAR 0 2
53576: PUSH
53577: LD_OWVAR 2
53581: NONEQUAL
53582: PUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: CALL 53656 0 1
53592: AND
53593: IFFALSE 53607
// begin result := true ;
53595: LD_ADDR_VAR 0 1
53599: PUSH
53600: LD_INT 1
53602: ST_TO_ADDR
// exit ;
53603: POP
53604: POP
53605: GO 53611
// end ;
53607: GO 53569
53609: POP
53610: POP
// end ;
53611: LD_VAR 0 1
53615: RET
// function CanWinLoose ; begin
53616: LD_INT 0
53618: PPUSH
// result := true ;
53619: LD_ADDR_VAR 0 1
53623: PUSH
53624: LD_INT 1
53626: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53627: CALL_OW 531
53631: PUSH
53632: CALL_OW 519
53636: PUSH
53637: LD_INT 1
53639: GREATER
53640: AND
53641: IFFALSE 53651
// result := false ;
53643: LD_ADDR_VAR 0 1
53647: PUSH
53648: LD_INT 0
53650: ST_TO_ADDR
// end ;
53651: LD_VAR 0 1
53655: RET
// function HasPower ( i ) ; begin
53656: LD_INT 0
53658: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53659: LD_ADDR_VAR 0 2
53663: PUSH
53664: LD_INT 22
53666: PUSH
53667: LD_VAR 0 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 21
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 33
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 33
53701: PUSH
53702: LD_INT 5
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PPUSH
53719: CALL_OW 69
53723: ST_TO_ADDR
// end ; end_of_file end_of_file
53724: LD_VAR 0 2
53728: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53729: LD_VAR 0 1
53733: PUSH
53734: LD_INT 200
53736: DOUBLE
53737: GREATEREQUAL
53738: IFFALSE 53746
53740: LD_INT 299
53742: DOUBLE
53743: LESSEQUAL
53744: IFTRUE 53748
53746: GO 53780
53748: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53749: LD_VAR 0 1
53753: PPUSH
53754: LD_VAR 0 2
53758: PPUSH
53759: LD_VAR 0 3
53763: PPUSH
53764: LD_VAR 0 4
53768: PPUSH
53769: LD_VAR 0 5
53773: PPUSH
53774: CALL 54477 0 5
53778: GO 53857
53780: LD_INT 300
53782: DOUBLE
53783: GREATEREQUAL
53784: IFFALSE 53792
53786: LD_INT 399
53788: DOUBLE
53789: LESSEQUAL
53790: IFTRUE 53794
53792: GO 53856
53794: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53795: LD_VAR 0 1
53799: PPUSH
53800: LD_VAR 0 2
53804: PPUSH
53805: LD_VAR 0 3
53809: PPUSH
53810: LD_VAR 0 4
53814: PPUSH
53815: LD_VAR 0 5
53819: PPUSH
53820: LD_VAR 0 6
53824: PPUSH
53825: LD_VAR 0 7
53829: PPUSH
53830: LD_VAR 0 8
53834: PPUSH
53835: LD_VAR 0 9
53839: PPUSH
53840: LD_VAR 0 10
53844: PPUSH
53845: LD_VAR 0 11
53849: PPUSH
53850: CALL 59224 0 11
53854: GO 53857
53856: POP
// end ;
53857: PPOPN 11
53859: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53860: LD_VAR 0 1
53864: PPUSH
53865: LD_VAR 0 2
53869: PPUSH
53870: LD_VAR 0 3
53874: PPUSH
53875: LD_VAR 0 4
53879: PPUSH
53880: LD_VAR 0 5
53884: PPUSH
53885: CALL 53942 0 5
// end ; end_of_file
53889: PPOPN 5
53891: END
// export function SOS_UnitDestroyed ( un ) ; begin
53892: LD_INT 0
53894: PPUSH
// ComRadiation ( un ) ;
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL 54881 0 1
// end ;
53904: LD_VAR 0 2
53908: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53909: LD_INT 0
53911: PPUSH
// ComRadiation ( un ) ;
53912: LD_VAR 0 1
53916: PPUSH
53917: CALL 54881 0 1
// end ;
53921: LD_VAR 0 2
53925: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53926: LD_INT 0
53928: PPUSH
// end ;
53929: LD_VAR 0 4
53933: RET
// export function SOS_Command ( cmd ) ; begin
53934: LD_INT 0
53936: PPUSH
// end ;
53937: LD_VAR 0 2
53941: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53942: LD_INT 0
53944: PPUSH
// end ;
53945: LD_VAR 0 6
53949: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53950: LD_INT 0
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
// if not vehicle or not factory then
53957: LD_VAR 0 1
53961: NOT
53962: PUSH
53963: LD_VAR 0 2
53967: NOT
53968: OR
53969: IFFALSE 53973
// exit ;
53971: GO 54472
// if not factoryWaypoints then
53973: LD_EXP 54
53977: NOT
53978: IFFALSE 53982
// exit ;
53980: GO 54472
// for i := 1 to Count ( factoryWaypoints ) do
53982: LD_ADDR_VAR 0 4
53986: PUSH
53987: DOUBLE
53988: LD_INT 1
53990: DEC
53991: ST_TO_ADDR
53992: LD_EXP 54
53996: PPUSH
53997: CALL 5065 0 1
54001: PUSH
54002: FOR_TO
54003: IFFALSE 54470
// if factoryWaypoints [ i ] [ 2 ] = factory then
54005: LD_EXP 54
54009: PUSH
54010: LD_VAR 0 4
54014: ARRAY
54015: PUSH
54016: LD_INT 2
54018: ARRAY
54019: PUSH
54020: LD_VAR 0 2
54024: EQUAL
54025: IFFALSE 54468
// begin if GetControl ( vehicle ) = control_manual then
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 263
54036: PUSH
54037: LD_INT 1
54039: EQUAL
54040: IFFALSE 54351
// begin driver := IsDrivenBy ( vehicle ) ;
54042: LD_ADDR_VAR 0 6
54046: PUSH
54047: LD_VAR 0 1
54051: PPUSH
54052: CALL_OW 311
54056: ST_TO_ADDR
// tag := GetTag ( driver ) ;
54057: LD_ADDR_VAR 0 5
54061: PUSH
54062: LD_VAR 0 6
54066: PPUSH
54067: CALL_OW 110
54071: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
54072: LD_VAR 0 5
54076: PUSH
54077: LD_INT 501
54079: EQUAL
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 110
54090: PUSH
54091: LD_INT 501
54093: EQUAL
54094: OR
54095: IFFALSE 54101
// exit ;
54097: POP
54098: POP
54099: GO 54472
// if not HasTask ( driver ) then
54101: LD_VAR 0 6
54105: PPUSH
54106: CALL_OW 314
54110: NOT
54111: IFFALSE 54349
// begin SetTag ( driver , tDriver ) ;
54113: LD_VAR 0 6
54117: PPUSH
54118: LD_INT 501
54120: PPUSH
54121: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54125: LD_VAR 0 1
54129: PPUSH
54130: LD_INT 501
54132: PPUSH
54133: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54137: LD_ADDR_VAR 0 7
54141: PUSH
54142: LD_EXP 54
54146: PUSH
54147: LD_VAR 0 4
54151: ARRAY
54152: PUSH
54153: LD_INT 3
54155: ARRAY
54156: PPUSH
54157: LD_EXP 54
54161: PUSH
54162: LD_VAR 0 4
54166: ARRAY
54167: PUSH
54168: LD_INT 4
54170: ARRAY
54171: PPUSH
54172: CALL_OW 428
54176: ST_TO_ADDR
// if hex then
54177: LD_VAR 0 7
54181: IFFALSE 54199
// ComMoveUnit ( driver , hex ) else
54183: LD_VAR 0 6
54187: PPUSH
54188: LD_VAR 0 7
54192: PPUSH
54193: CALL_OW 112
54197: GO 54238
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54199: LD_VAR 0 6
54203: PPUSH
54204: LD_EXP 54
54208: PUSH
54209: LD_VAR 0 4
54213: ARRAY
54214: PUSH
54215: LD_INT 3
54217: ARRAY
54218: PPUSH
54219: LD_EXP 54
54223: PUSH
54224: LD_VAR 0 4
54228: ARRAY
54229: PUSH
54230: LD_INT 4
54232: ARRAY
54233: PPUSH
54234: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54238: LD_VAR 0 6
54242: PPUSH
54243: CALL_OW 181
// if Multiplayer then
54247: LD_OWVAR 4
54251: IFFALSE 54300
// begin repeat wait ( 10 ) ;
54253: LD_INT 10
54255: PPUSH
54256: CALL_OW 67
// until not IsInUnit ( driver ) ;
54260: LD_VAR 0 6
54264: PPUSH
54265: CALL_OW 310
54269: NOT
54270: IFFALSE 54253
// if not HasTask ( driver ) then
54272: LD_VAR 0 6
54276: PPUSH
54277: CALL_OW 314
54281: NOT
54282: IFFALSE 54298
// ComEnterUnit ( driver , factory ) ;
54284: LD_VAR 0 6
54288: PPUSH
54289: LD_VAR 0 2
54293: PPUSH
54294: CALL_OW 120
// end else
54298: GO 54314
// AddComEnterUnit ( driver , factory ) ;
54300: LD_VAR 0 6
54304: PPUSH
54305: LD_VAR 0 2
54309: PPUSH
54310: CALL_OW 180
// wait ( 0 0$1 ) ;
54314: LD_INT 35
54316: PPUSH
54317: CALL_OW 67
// SetTag ( driver , tag ) ;
54321: LD_VAR 0 6
54325: PPUSH
54326: LD_VAR 0 5
54330: PPUSH
54331: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54335: LD_VAR 0 1
54339: PPUSH
54340: LD_INT 0
54342: PPUSH
54343: CALL_OW 109
// break ;
54347: GO 54470
// end ; end else
54349: GO 54468
// if GetControl ( vehicle ) = control_remote then
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 263
54360: PUSH
54361: LD_INT 2
54363: EQUAL
54364: IFFALSE 54427
// begin wait ( 0 0$2 ) ;
54366: LD_INT 70
54368: PPUSH
54369: CALL_OW 67
// if Connect ( vehicle ) then
54373: LD_VAR 0 1
54377: PPUSH
54378: CALL 11271 0 1
54382: IFFALSE 54423
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54384: LD_VAR 0 1
54388: PPUSH
54389: LD_EXP 54
54393: PUSH
54394: LD_VAR 0 4
54398: ARRAY
54399: PUSH
54400: LD_INT 3
54402: ARRAY
54403: PPUSH
54404: LD_EXP 54
54408: PUSH
54409: LD_VAR 0 4
54413: ARRAY
54414: PUSH
54415: LD_INT 4
54417: ARRAY
54418: PPUSH
54419: CALL_OW 171
// break ;
54423: GO 54470
// end else
54425: GO 54468
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54427: LD_VAR 0 1
54431: PPUSH
54432: LD_EXP 54
54436: PUSH
54437: LD_VAR 0 4
54441: ARRAY
54442: PUSH
54443: LD_INT 3
54445: ARRAY
54446: PPUSH
54447: LD_EXP 54
54451: PUSH
54452: LD_VAR 0 4
54456: ARRAY
54457: PUSH
54458: LD_INT 4
54460: ARRAY
54461: PPUSH
54462: CALL_OW 171
// break ;
54466: GO 54470
// end ; end ;
54468: GO 54002
54470: POP
54471: POP
// end ;
54472: LD_VAR 0 3
54476: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54477: LD_INT 0
54479: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54480: LD_VAR 0 1
54484: PUSH
54485: LD_INT 250
54487: EQUAL
54488: PUSH
54489: LD_VAR 0 2
54493: PPUSH
54494: CALL_OW 264
54498: PUSH
54499: LD_INT 81
54501: EQUAL
54502: AND
54503: IFFALSE 54524
// MinerPlaceMine ( unit , x , y ) ;
54505: LD_VAR 0 2
54509: PPUSH
54510: LD_VAR 0 4
54514: PPUSH
54515: LD_VAR 0 5
54519: PPUSH
54520: CALL 57616 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54524: LD_VAR 0 1
54528: PUSH
54529: LD_INT 251
54531: EQUAL
54532: PUSH
54533: LD_VAR 0 2
54537: PPUSH
54538: CALL_OW 264
54542: PUSH
54543: LD_INT 81
54545: EQUAL
54546: AND
54547: IFFALSE 54568
// MinerDetonateMine ( unit , x , y ) ;
54549: LD_VAR 0 2
54553: PPUSH
54554: LD_VAR 0 4
54558: PPUSH
54559: LD_VAR 0 5
54563: PPUSH
54564: CALL 57891 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54568: LD_VAR 0 1
54572: PUSH
54573: LD_INT 252
54575: EQUAL
54576: PUSH
54577: LD_VAR 0 2
54581: PPUSH
54582: CALL_OW 264
54586: PUSH
54587: LD_INT 81
54589: EQUAL
54590: AND
54591: IFFALSE 54612
// MinerCreateMinefield ( unit , x , y ) ;
54593: LD_VAR 0 2
54597: PPUSH
54598: LD_VAR 0 4
54602: PPUSH
54603: LD_VAR 0 5
54607: PPUSH
54608: CALL 58308 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54612: LD_VAR 0 1
54616: PUSH
54617: LD_INT 253
54619: EQUAL
54620: PUSH
54621: LD_VAR 0 2
54625: PPUSH
54626: CALL_OW 257
54630: PUSH
54631: LD_INT 5
54633: EQUAL
54634: AND
54635: IFFALSE 54656
// ComBinocular ( unit , x , y ) ;
54637: LD_VAR 0 2
54641: PPUSH
54642: LD_VAR 0 4
54646: PPUSH
54647: LD_VAR 0 5
54651: PPUSH
54652: CALL 58677 0 3
// if selectedUnit then
54656: LD_VAR 0 3
54660: IFFALSE 54716
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54662: LD_VAR 0 1
54666: PUSH
54667: LD_INT 254
54669: EQUAL
54670: PUSH
54671: LD_VAR 0 2
54675: PPUSH
54676: CALL_OW 264
54680: PUSH
54681: LD_INT 99
54683: EQUAL
54684: AND
54685: PUSH
54686: LD_VAR 0 3
54690: PPUSH
54691: CALL_OW 263
54695: PUSH
54696: LD_INT 3
54698: EQUAL
54699: AND
54700: IFFALSE 54716
// HackDestroyVehicle ( unit , selectedUnit ) ;
54702: LD_VAR 0 2
54706: PPUSH
54707: LD_VAR 0 3
54711: PPUSH
54712: CALL 56980 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54716: LD_VAR 0 1
54720: PUSH
54721: LD_INT 255
54723: EQUAL
54724: PUSH
54725: LD_VAR 0 2
54729: PPUSH
54730: CALL_OW 264
54734: PUSH
54735: LD_INT 14
54737: PUSH
54738: LD_INT 53
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: IN
54745: AND
54746: PUSH
54747: LD_VAR 0 4
54751: PPUSH
54752: LD_VAR 0 5
54756: PPUSH
54757: CALL_OW 488
54761: AND
54762: IFFALSE 54786
// CutTreeXYR ( unit , x , y , 12 ) ;
54764: LD_VAR 0 2
54768: PPUSH
54769: LD_VAR 0 4
54773: PPUSH
54774: LD_VAR 0 5
54778: PPUSH
54779: LD_INT 12
54781: PPUSH
54782: CALL 54977 0 4
// if cmd = 256 then
54786: LD_VAR 0 1
54790: PUSH
54791: LD_INT 256
54793: EQUAL
54794: IFFALSE 54815
// SetFactoryWaypoint ( unit , x , y ) ;
54796: LD_VAR 0 2
54800: PPUSH
54801: LD_VAR 0 4
54805: PPUSH
54806: LD_VAR 0 5
54810: PPUSH
54811: CALL 59232 0 3
// if cmd = 257 then
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 257
54822: EQUAL
54823: IFFALSE 54844
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54825: LD_VAR 0 2
54829: PPUSH
54830: LD_VAR 0 4
54834: PPUSH
54835: LD_VAR 0 5
54839: PPUSH
54840: CALL 59722 0 3
// if cmd = 258 then
54844: LD_VAR 0 1
54848: PUSH
54849: LD_INT 258
54851: EQUAL
54852: IFFALSE 54876
// BurnTreeXYR ( unit , x , y , 8 ) ;
54854: LD_VAR 0 2
54858: PPUSH
54859: LD_VAR 0 4
54863: PPUSH
54864: LD_VAR 0 5
54868: PPUSH
54869: LD_INT 8
54871: PPUSH
54872: CALL 55371 0 4
// end ;
54876: LD_VAR 0 6
54880: RET
// export function ComRadiation ( un ) ; var eff ; begin
54881: LD_INT 0
54883: PPUSH
54884: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 264
54894: PUSH
54895: LD_INT 91
54897: NONEQUAL
54898: IFFALSE 54902
// exit ;
54900: GO 54972
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54902: LD_INT 68
54904: PPUSH
54905: LD_VAR 0 1
54909: PPUSH
54910: CALL_OW 255
54914: PPUSH
54915: CALL_OW 321
54919: PUSH
54920: LD_INT 2
54922: EQUAL
54923: IFFALSE 54935
// eff := 70 else
54925: LD_ADDR_VAR 0 3
54929: PUSH
54930: LD_INT 70
54932: ST_TO_ADDR
54933: GO 54943
// eff := 30 ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_INT 30
54942: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 250
54952: PPUSH
54953: LD_VAR 0 1
54957: PPUSH
54958: CALL_OW 251
54962: PPUSH
54963: LD_VAR 0 3
54967: PPUSH
54968: CALL_OW 495
// end ;
54972: LD_VAR 0 2
54976: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54977: LD_INT 0
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
54983: PPUSH
54984: PPUSH
54985: PPUSH
54986: PPUSH
54987: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 302
54997: NOT
54998: PUSH
54999: LD_VAR 0 2
55003: PPUSH
55004: LD_VAR 0 3
55008: PPUSH
55009: CALL_OW 488
55013: NOT
55014: OR
55015: PUSH
55016: LD_VAR 0 4
55020: NOT
55021: OR
55022: IFFALSE 55026
// exit ;
55024: GO 55366
// list := [ ] ;
55026: LD_ADDR_VAR 0 13
55030: PUSH
55031: EMPTY
55032: ST_TO_ADDR
// if x - r < 0 then
55033: LD_VAR 0 2
55037: PUSH
55038: LD_VAR 0 4
55042: MINUS
55043: PUSH
55044: LD_INT 0
55046: LESS
55047: IFFALSE 55059
// min_x := 0 else
55049: LD_ADDR_VAR 0 7
55053: PUSH
55054: LD_INT 0
55056: ST_TO_ADDR
55057: GO 55075
// min_x := x - r ;
55059: LD_ADDR_VAR 0 7
55063: PUSH
55064: LD_VAR 0 2
55068: PUSH
55069: LD_VAR 0 4
55073: MINUS
55074: ST_TO_ADDR
// if y - r < 0 then
55075: LD_VAR 0 3
55079: PUSH
55080: LD_VAR 0 4
55084: MINUS
55085: PUSH
55086: LD_INT 0
55088: LESS
55089: IFFALSE 55101
// min_y := 0 else
55091: LD_ADDR_VAR 0 8
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
55099: GO 55117
// min_y := y - r ;
55101: LD_ADDR_VAR 0 8
55105: PUSH
55106: LD_VAR 0 3
55110: PUSH
55111: LD_VAR 0 4
55115: MINUS
55116: ST_TO_ADDR
// max_x := x + r ;
55117: LD_ADDR_VAR 0 9
55121: PUSH
55122: LD_VAR 0 2
55126: PUSH
55127: LD_VAR 0 4
55131: PLUS
55132: ST_TO_ADDR
// max_y := y + r ;
55133: LD_ADDR_VAR 0 10
55137: PUSH
55138: LD_VAR 0 3
55142: PUSH
55143: LD_VAR 0 4
55147: PLUS
55148: ST_TO_ADDR
// for _x = min_x to max_x do
55149: LD_ADDR_VAR 0 11
55153: PUSH
55154: DOUBLE
55155: LD_VAR 0 7
55159: DEC
55160: ST_TO_ADDR
55161: LD_VAR 0 9
55165: PUSH
55166: FOR_TO
55167: IFFALSE 55284
// for _y = min_y to max_y do
55169: LD_ADDR_VAR 0 12
55173: PUSH
55174: DOUBLE
55175: LD_VAR 0 8
55179: DEC
55180: ST_TO_ADDR
55181: LD_VAR 0 10
55185: PUSH
55186: FOR_TO
55187: IFFALSE 55280
// begin if not ValidHex ( _x , _y ) then
55189: LD_VAR 0 11
55193: PPUSH
55194: LD_VAR 0 12
55198: PPUSH
55199: CALL_OW 488
55203: NOT
55204: IFFALSE 55208
// continue ;
55206: GO 55186
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55208: LD_VAR 0 11
55212: PPUSH
55213: LD_VAR 0 12
55217: PPUSH
55218: CALL_OW 351
55222: PUSH
55223: LD_VAR 0 11
55227: PPUSH
55228: LD_VAR 0 12
55232: PPUSH
55233: CALL_OW 554
55237: AND
55238: IFFALSE 55278
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55240: LD_ADDR_VAR 0 13
55244: PUSH
55245: LD_VAR 0 13
55249: PPUSH
55250: LD_VAR 0 13
55254: PUSH
55255: LD_INT 1
55257: PLUS
55258: PPUSH
55259: LD_VAR 0 11
55263: PUSH
55264: LD_VAR 0 12
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PPUSH
55273: CALL_OW 2
55277: ST_TO_ADDR
// end ;
55278: GO 55186
55280: POP
55281: POP
55282: GO 55166
55284: POP
55285: POP
// if not list then
55286: LD_VAR 0 13
55290: NOT
55291: IFFALSE 55295
// exit ;
55293: GO 55366
// for i in list do
55295: LD_ADDR_VAR 0 6
55299: PUSH
55300: LD_VAR 0 13
55304: PUSH
55305: FOR_IN
55306: IFFALSE 55364
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55308: LD_VAR 0 1
55312: PPUSH
55313: LD_STRING M
55315: PUSH
55316: LD_VAR 0 6
55320: PUSH
55321: LD_INT 1
55323: ARRAY
55324: PUSH
55325: LD_VAR 0 6
55329: PUSH
55330: LD_INT 2
55332: ARRAY
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: PPUSH
55358: CALL_OW 447
55362: GO 55305
55364: POP
55365: POP
// end ;
55366: LD_VAR 0 5
55370: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55371: LD_INT 0
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55383: LD_VAR 0 1
55387: PPUSH
55388: CALL_OW 302
55392: NOT
55393: PUSH
55394: LD_VAR 0 2
55398: PPUSH
55399: LD_VAR 0 3
55403: PPUSH
55404: CALL_OW 488
55408: NOT
55409: OR
55410: PUSH
55411: LD_VAR 0 4
55415: NOT
55416: OR
55417: IFFALSE 55421
// exit ;
55419: GO 55934
// list := [ ] ;
55421: LD_ADDR_VAR 0 13
55425: PUSH
55426: EMPTY
55427: ST_TO_ADDR
// if x - r < 0 then
55428: LD_VAR 0 2
55432: PUSH
55433: LD_VAR 0 4
55437: MINUS
55438: PUSH
55439: LD_INT 0
55441: LESS
55442: IFFALSE 55454
// min_x := 0 else
55444: LD_ADDR_VAR 0 7
55448: PUSH
55449: LD_INT 0
55451: ST_TO_ADDR
55452: GO 55470
// min_x := x - r ;
55454: LD_ADDR_VAR 0 7
55458: PUSH
55459: LD_VAR 0 2
55463: PUSH
55464: LD_VAR 0 4
55468: MINUS
55469: ST_TO_ADDR
// if y - r < 0 then
55470: LD_VAR 0 3
55474: PUSH
55475: LD_VAR 0 4
55479: MINUS
55480: PUSH
55481: LD_INT 0
55483: LESS
55484: IFFALSE 55496
// min_y := 0 else
55486: LD_ADDR_VAR 0 8
55490: PUSH
55491: LD_INT 0
55493: ST_TO_ADDR
55494: GO 55512
// min_y := y - r ;
55496: LD_ADDR_VAR 0 8
55500: PUSH
55501: LD_VAR 0 3
55505: PUSH
55506: LD_VAR 0 4
55510: MINUS
55511: ST_TO_ADDR
// max_x := x + r ;
55512: LD_ADDR_VAR 0 9
55516: PUSH
55517: LD_VAR 0 2
55521: PUSH
55522: LD_VAR 0 4
55526: PLUS
55527: ST_TO_ADDR
// max_y := y + r ;
55528: LD_ADDR_VAR 0 10
55532: PUSH
55533: LD_VAR 0 3
55537: PUSH
55538: LD_VAR 0 4
55542: PLUS
55543: ST_TO_ADDR
// for _x = min_x to max_x do
55544: LD_ADDR_VAR 0 11
55548: PUSH
55549: DOUBLE
55550: LD_VAR 0 7
55554: DEC
55555: ST_TO_ADDR
55556: LD_VAR 0 9
55560: PUSH
55561: FOR_TO
55562: IFFALSE 55679
// for _y = min_y to max_y do
55564: LD_ADDR_VAR 0 12
55568: PUSH
55569: DOUBLE
55570: LD_VAR 0 8
55574: DEC
55575: ST_TO_ADDR
55576: LD_VAR 0 10
55580: PUSH
55581: FOR_TO
55582: IFFALSE 55675
// begin if not ValidHex ( _x , _y ) then
55584: LD_VAR 0 11
55588: PPUSH
55589: LD_VAR 0 12
55593: PPUSH
55594: CALL_OW 488
55598: NOT
55599: IFFALSE 55603
// continue ;
55601: GO 55581
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55603: LD_VAR 0 11
55607: PPUSH
55608: LD_VAR 0 12
55612: PPUSH
55613: CALL_OW 351
55617: PUSH
55618: LD_VAR 0 11
55622: PPUSH
55623: LD_VAR 0 12
55627: PPUSH
55628: CALL_OW 554
55632: AND
55633: IFFALSE 55673
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55635: LD_ADDR_VAR 0 13
55639: PUSH
55640: LD_VAR 0 13
55644: PPUSH
55645: LD_VAR 0 13
55649: PUSH
55650: LD_INT 1
55652: PLUS
55653: PPUSH
55654: LD_VAR 0 11
55658: PUSH
55659: LD_VAR 0 12
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PPUSH
55668: CALL_OW 2
55672: ST_TO_ADDR
// end ;
55673: GO 55581
55675: POP
55676: POP
55677: GO 55561
55679: POP
55680: POP
// if not list then
55681: LD_VAR 0 13
55685: NOT
55686: IFFALSE 55690
// exit ;
55688: GO 55934
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55690: LD_ADDR_VAR 0 13
55694: PUSH
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_VAR 0 13
55704: PPUSH
55705: LD_INT 1
55707: PPUSH
55708: LD_INT 1
55710: PPUSH
55711: CALL 8413 0 4
55715: ST_TO_ADDR
// ComStop ( flame ) ;
55716: LD_VAR 0 1
55720: PPUSH
55721: CALL_OW 141
// for i in list do
55725: LD_ADDR_VAR 0 6
55729: PUSH
55730: LD_VAR 0 13
55734: PUSH
55735: FOR_IN
55736: IFFALSE 55767
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55738: LD_VAR 0 1
55742: PPUSH
55743: LD_VAR 0 6
55747: PUSH
55748: LD_INT 1
55750: ARRAY
55751: PPUSH
55752: LD_VAR 0 6
55756: PUSH
55757: LD_INT 2
55759: ARRAY
55760: PPUSH
55761: CALL_OW 176
55765: GO 55735
55767: POP
55768: POP
// repeat wait ( 0 0$1 ) ;
55769: LD_INT 35
55771: PPUSH
55772: CALL_OW 67
// task := GetTaskList ( flame ) ;
55776: LD_ADDR_VAR 0 14
55780: PUSH
55781: LD_VAR 0 1
55785: PPUSH
55786: CALL_OW 437
55790: ST_TO_ADDR
// if not task then
55791: LD_VAR 0 14
55795: NOT
55796: IFFALSE 55800
// exit ;
55798: GO 55934
// if task [ 1 ] [ 1 ] <> | then
55800: LD_VAR 0 14
55804: PUSH
55805: LD_INT 1
55807: ARRAY
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PUSH
55813: LD_STRING |
55815: NONEQUAL
55816: IFFALSE 55820
// exit ;
55818: GO 55934
// _x := task [ 1 ] [ 2 ] ;
55820: LD_ADDR_VAR 0 11
55824: PUSH
55825: LD_VAR 0 14
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: LD_INT 2
55836: ARRAY
55837: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55838: LD_ADDR_VAR 0 12
55842: PUSH
55843: LD_VAR 0 14
55847: PUSH
55848: LD_INT 1
55850: ARRAY
55851: PUSH
55852: LD_INT 3
55854: ARRAY
55855: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55856: LD_VAR 0 11
55860: PPUSH
55861: LD_VAR 0 12
55865: PPUSH
55866: CALL_OW 351
55870: NOT
55871: PUSH
55872: LD_VAR 0 11
55876: PPUSH
55877: LD_VAR 0 12
55881: PPUSH
55882: CALL_OW 554
55886: NOT
55887: OR
55888: IFFALSE 55922
// begin task := Delete ( task , 1 ) ;
55890: LD_ADDR_VAR 0 14
55894: PUSH
55895: LD_VAR 0 14
55899: PPUSH
55900: LD_INT 1
55902: PPUSH
55903: CALL_OW 3
55907: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55908: LD_VAR 0 1
55912: PPUSH
55913: LD_VAR 0 14
55917: PPUSH
55918: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55922: LD_VAR 0 1
55926: PPUSH
55927: CALL_OW 314
55931: NOT
55932: IFFALSE 55769
// end ;
55934: LD_VAR 0 5
55938: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55939: LD_EXP 44
55943: NOT
55944: IFFALSE 55994
55946: GO 55948
55948: DISABLE
// begin initHack := true ;
55949: LD_ADDR_EXP 44
55953: PUSH
55954: LD_INT 1
55956: ST_TO_ADDR
// hackTanks := [ ] ;
55957: LD_ADDR_EXP 45
55961: PUSH
55962: EMPTY
55963: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55964: LD_ADDR_EXP 46
55968: PUSH
55969: EMPTY
55970: ST_TO_ADDR
// hackLimit := 3 ;
55971: LD_ADDR_EXP 47
55975: PUSH
55976: LD_INT 3
55978: ST_TO_ADDR
// hackDist := 12 ;
55979: LD_ADDR_EXP 48
55983: PUSH
55984: LD_INT 12
55986: ST_TO_ADDR
// hackCounter := [ ] ;
55987: LD_ADDR_EXP 49
55991: PUSH
55992: EMPTY
55993: ST_TO_ADDR
// end ;
55994: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55995: LD_EXP 44
55999: PUSH
56000: LD_INT 34
56002: PUSH
56003: LD_INT 99
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PPUSH
56010: CALL_OW 69
56014: AND
56015: IFFALSE 56268
56017: GO 56019
56019: DISABLE
56020: LD_INT 0
56022: PPUSH
56023: PPUSH
// begin enable ;
56024: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56025: LD_ADDR_VAR 0 1
56029: PUSH
56030: LD_INT 34
56032: PUSH
56033: LD_INT 99
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PPUSH
56040: CALL_OW 69
56044: PUSH
56045: FOR_IN
56046: IFFALSE 56266
// begin if not i in hackTanks then
56048: LD_VAR 0 1
56052: PUSH
56053: LD_EXP 45
56057: IN
56058: NOT
56059: IFFALSE 56142
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56061: LD_ADDR_EXP 45
56065: PUSH
56066: LD_EXP 45
56070: PPUSH
56071: LD_EXP 45
56075: PUSH
56076: LD_INT 1
56078: PLUS
56079: PPUSH
56080: LD_VAR 0 1
56084: PPUSH
56085: CALL_OW 1
56089: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56090: LD_ADDR_EXP 46
56094: PUSH
56095: LD_EXP 46
56099: PPUSH
56100: LD_EXP 46
56104: PUSH
56105: LD_INT 1
56107: PLUS
56108: PPUSH
56109: EMPTY
56110: PPUSH
56111: CALL_OW 1
56115: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56116: LD_ADDR_EXP 49
56120: PUSH
56121: LD_EXP 49
56125: PPUSH
56126: LD_EXP 49
56130: PUSH
56131: LD_INT 1
56133: PLUS
56134: PPUSH
56135: EMPTY
56136: PPUSH
56137: CALL_OW 1
56141: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56142: LD_VAR 0 1
56146: PPUSH
56147: CALL_OW 302
56151: NOT
56152: IFFALSE 56165
// begin HackUnlinkAll ( i ) ;
56154: LD_VAR 0 1
56158: PPUSH
56159: CALL 56271 0 1
// continue ;
56163: GO 56045
// end ; HackCheckCapturedStatus ( i ) ;
56165: LD_VAR 0 1
56169: PPUSH
56170: CALL 56714 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56174: LD_ADDR_VAR 0 2
56178: PUSH
56179: LD_INT 81
56181: PUSH
56182: LD_VAR 0 1
56186: PPUSH
56187: CALL_OW 255
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 33
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 91
56208: PUSH
56209: LD_VAR 0 1
56213: PUSH
56214: LD_EXP 48
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 50
56226: PUSH
56227: EMPTY
56228: LIST
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: PPUSH
56236: CALL_OW 69
56240: ST_TO_ADDR
// if not tmp then
56241: LD_VAR 0 2
56245: NOT
56246: IFFALSE 56250
// continue ;
56248: GO 56045
// HackLink ( i , tmp ) ;
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_VAR 0 2
56259: PPUSH
56260: CALL 56407 0 2
// end ;
56264: GO 56045
56266: POP
56267: POP
// end ;
56268: PPOPN 2
56270: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
56275: PPUSH
// if not hack in hackTanks then
56276: LD_VAR 0 1
56280: PUSH
56281: LD_EXP 45
56285: IN
56286: NOT
56287: IFFALSE 56291
// exit ;
56289: GO 56402
// index := GetElementIndex ( hackTanks , hack ) ;
56291: LD_ADDR_VAR 0 4
56295: PUSH
56296: LD_EXP 45
56300: PPUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: CALL 7710 0 2
56310: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56311: LD_EXP 46
56315: PUSH
56316: LD_VAR 0 4
56320: ARRAY
56321: IFFALSE 56402
// begin for i in hackTanksCaptured [ index ] do
56323: LD_ADDR_VAR 0 3
56327: PUSH
56328: LD_EXP 46
56332: PUSH
56333: LD_VAR 0 4
56337: ARRAY
56338: PUSH
56339: FOR_IN
56340: IFFALSE 56366
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56342: LD_VAR 0 3
56346: PUSH
56347: LD_INT 1
56349: ARRAY
56350: PPUSH
56351: LD_VAR 0 3
56355: PUSH
56356: LD_INT 2
56358: ARRAY
56359: PPUSH
56360: CALL_OW 235
56364: GO 56339
56366: POP
56367: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56368: LD_ADDR_EXP 46
56372: PUSH
56373: LD_EXP 46
56377: PPUSH
56378: LD_VAR 0 4
56382: PPUSH
56383: EMPTY
56384: PPUSH
56385: CALL_OW 1
56389: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56390: LD_VAR 0 1
56394: PPUSH
56395: LD_INT 0
56397: PPUSH
56398: CALL_OW 505
// end ; end ;
56402: LD_VAR 0 2
56406: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56407: LD_INT 0
56409: PPUSH
56410: PPUSH
56411: PPUSH
// if not hack in hackTanks or not vehicles then
56412: LD_VAR 0 1
56416: PUSH
56417: LD_EXP 45
56421: IN
56422: NOT
56423: PUSH
56424: LD_VAR 0 2
56428: NOT
56429: OR
56430: IFFALSE 56434
// exit ;
56432: GO 56709
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56434: LD_ADDR_VAR 0 2
56438: PUSH
56439: LD_VAR 0 1
56443: PPUSH
56444: LD_VAR 0 2
56448: PPUSH
56449: LD_INT 1
56451: PPUSH
56452: LD_INT 1
56454: PPUSH
56455: CALL 8360 0 4
56459: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56460: LD_ADDR_VAR 0 5
56464: PUSH
56465: LD_EXP 45
56469: PPUSH
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL 7710 0 2
56479: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56480: LD_EXP 46
56484: PUSH
56485: LD_VAR 0 5
56489: ARRAY
56490: PUSH
56491: LD_EXP 47
56495: LESS
56496: IFFALSE 56685
// begin for i := 1 to vehicles do
56498: LD_ADDR_VAR 0 4
56502: PUSH
56503: DOUBLE
56504: LD_INT 1
56506: DEC
56507: ST_TO_ADDR
56508: LD_VAR 0 2
56512: PUSH
56513: FOR_TO
56514: IFFALSE 56683
// begin if hackTanksCaptured [ index ] = hackLimit then
56516: LD_EXP 46
56520: PUSH
56521: LD_VAR 0 5
56525: ARRAY
56526: PUSH
56527: LD_EXP 47
56531: EQUAL
56532: IFFALSE 56536
// break ;
56534: GO 56683
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56536: LD_ADDR_EXP 49
56540: PUSH
56541: LD_EXP 49
56545: PPUSH
56546: LD_VAR 0 5
56550: PPUSH
56551: LD_EXP 49
56555: PUSH
56556: LD_VAR 0 5
56560: ARRAY
56561: PUSH
56562: LD_INT 1
56564: PLUS
56565: PPUSH
56566: CALL_OW 1
56570: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56571: LD_ADDR_EXP 46
56575: PUSH
56576: LD_EXP 46
56580: PPUSH
56581: LD_VAR 0 5
56585: PUSH
56586: LD_EXP 46
56590: PUSH
56591: LD_VAR 0 5
56595: ARRAY
56596: PUSH
56597: LD_INT 1
56599: PLUS
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PPUSH
56605: LD_VAR 0 2
56609: PUSH
56610: LD_VAR 0 4
56614: ARRAY
56615: PUSH
56616: LD_VAR 0 2
56620: PUSH
56621: LD_VAR 0 4
56625: ARRAY
56626: PPUSH
56627: CALL_OW 255
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PPUSH
56636: CALL 7925 0 3
56640: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56641: LD_VAR 0 2
56645: PUSH
56646: LD_VAR 0 4
56650: ARRAY
56651: PPUSH
56652: LD_VAR 0 1
56656: PPUSH
56657: CALL_OW 255
56661: PPUSH
56662: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56666: LD_VAR 0 2
56670: PUSH
56671: LD_VAR 0 4
56675: ARRAY
56676: PPUSH
56677: CALL_OW 141
// end ;
56681: GO 56513
56683: POP
56684: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56685: LD_VAR 0 1
56689: PPUSH
56690: LD_EXP 46
56694: PUSH
56695: LD_VAR 0 5
56699: ARRAY
56700: PUSH
56701: LD_INT 0
56703: PLUS
56704: PPUSH
56705: CALL_OW 505
// end ;
56709: LD_VAR 0 3
56713: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56714: LD_INT 0
56716: PPUSH
56717: PPUSH
56718: PPUSH
56719: PPUSH
// if not hack in hackTanks then
56720: LD_VAR 0 1
56724: PUSH
56725: LD_EXP 45
56729: IN
56730: NOT
56731: IFFALSE 56735
// exit ;
56733: GO 56975
// index := GetElementIndex ( hackTanks , hack ) ;
56735: LD_ADDR_VAR 0 4
56739: PUSH
56740: LD_EXP 45
56744: PPUSH
56745: LD_VAR 0 1
56749: PPUSH
56750: CALL 7710 0 2
56754: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56755: LD_ADDR_VAR 0 3
56759: PUSH
56760: DOUBLE
56761: LD_EXP 46
56765: PUSH
56766: LD_VAR 0 4
56770: ARRAY
56771: INC
56772: ST_TO_ADDR
56773: LD_INT 1
56775: PUSH
56776: FOR_DOWNTO
56777: IFFALSE 56949
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56779: LD_ADDR_VAR 0 5
56783: PUSH
56784: LD_EXP 46
56788: PUSH
56789: LD_VAR 0 4
56793: ARRAY
56794: PUSH
56795: LD_VAR 0 3
56799: ARRAY
56800: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56801: LD_VAR 0 5
56805: PUSH
56806: LD_INT 1
56808: ARRAY
56809: PPUSH
56810: CALL_OW 302
56814: NOT
56815: PUSH
56816: LD_VAR 0 5
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PPUSH
56825: CALL_OW 255
56829: PUSH
56830: LD_VAR 0 1
56834: PPUSH
56835: CALL_OW 255
56839: NONEQUAL
56840: OR
56841: IFFALSE 56947
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56843: LD_VAR 0 5
56847: PUSH
56848: LD_INT 1
56850: ARRAY
56851: PPUSH
56852: CALL_OW 305
56856: PUSH
56857: LD_VAR 0 5
56861: PUSH
56862: LD_INT 1
56864: ARRAY
56865: PPUSH
56866: CALL_OW 255
56870: PUSH
56871: LD_VAR 0 1
56875: PPUSH
56876: CALL_OW 255
56880: EQUAL
56881: AND
56882: IFFALSE 56906
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56884: LD_VAR 0 5
56888: PUSH
56889: LD_INT 1
56891: ARRAY
56892: PPUSH
56893: LD_VAR 0 5
56897: PUSH
56898: LD_INT 2
56900: ARRAY
56901: PPUSH
56902: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56906: LD_ADDR_EXP 46
56910: PUSH
56911: LD_EXP 46
56915: PPUSH
56916: LD_VAR 0 4
56920: PPUSH
56921: LD_EXP 46
56925: PUSH
56926: LD_VAR 0 4
56930: ARRAY
56931: PPUSH
56932: LD_VAR 0 3
56936: PPUSH
56937: CALL_OW 3
56941: PPUSH
56942: CALL_OW 1
56946: ST_TO_ADDR
// end ; end ;
56947: GO 56776
56949: POP
56950: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56951: LD_VAR 0 1
56955: PPUSH
56956: LD_EXP 46
56960: PUSH
56961: LD_VAR 0 4
56965: ARRAY
56966: PUSH
56967: LD_INT 0
56969: PLUS
56970: PPUSH
56971: CALL_OW 505
// end ;
56975: LD_VAR 0 2
56979: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56980: LD_INT 0
56982: PPUSH
56983: PPUSH
56984: PPUSH
56985: PPUSH
// if not hack in hackTanks then
56986: LD_VAR 0 1
56990: PUSH
56991: LD_EXP 45
56995: IN
56996: NOT
56997: IFFALSE 57001
// exit ;
56999: GO 57086
// index := GetElementIndex ( hackTanks , hack ) ;
57001: LD_ADDR_VAR 0 5
57005: PUSH
57006: LD_EXP 45
57010: PPUSH
57011: LD_VAR 0 1
57015: PPUSH
57016: CALL 7710 0 2
57020: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57021: LD_ADDR_VAR 0 4
57025: PUSH
57026: DOUBLE
57027: LD_INT 1
57029: DEC
57030: ST_TO_ADDR
57031: LD_EXP 46
57035: PUSH
57036: LD_VAR 0 5
57040: ARRAY
57041: PUSH
57042: FOR_TO
57043: IFFALSE 57084
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57045: LD_EXP 46
57049: PUSH
57050: LD_VAR 0 5
57054: ARRAY
57055: PUSH
57056: LD_VAR 0 4
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PUSH
57066: LD_VAR 0 2
57070: EQUAL
57071: IFFALSE 57082
// KillUnit ( vehicle ) ;
57073: LD_VAR 0 2
57077: PPUSH
57078: CALL_OW 66
57082: GO 57042
57084: POP
57085: POP
// end ;
57086: LD_VAR 0 3
57090: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57091: LD_EXP 50
57095: NOT
57096: IFFALSE 57131
57098: GO 57100
57100: DISABLE
// begin initMiner := true ;
57101: LD_ADDR_EXP 50
57105: PUSH
57106: LD_INT 1
57108: ST_TO_ADDR
// minersList := [ ] ;
57109: LD_ADDR_EXP 51
57113: PUSH
57114: EMPTY
57115: ST_TO_ADDR
// minerMinesList := [ ] ;
57116: LD_ADDR_EXP 52
57120: PUSH
57121: EMPTY
57122: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57123: LD_ADDR_EXP 53
57127: PUSH
57128: LD_INT 5
57130: ST_TO_ADDR
// end ;
57131: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57132: LD_EXP 50
57136: PUSH
57137: LD_INT 34
57139: PUSH
57140: LD_INT 81
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PPUSH
57147: CALL_OW 69
57151: AND
57152: IFFALSE 57613
57154: GO 57156
57156: DISABLE
57157: LD_INT 0
57159: PPUSH
57160: PPUSH
57161: PPUSH
57162: PPUSH
// begin enable ;
57163: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57164: LD_ADDR_VAR 0 1
57168: PUSH
57169: LD_INT 34
57171: PUSH
57172: LD_INT 81
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PPUSH
57179: CALL_OW 69
57183: PUSH
57184: FOR_IN
57185: IFFALSE 57257
// begin if not i in minersList then
57187: LD_VAR 0 1
57191: PUSH
57192: LD_EXP 51
57196: IN
57197: NOT
57198: IFFALSE 57255
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57200: LD_ADDR_EXP 51
57204: PUSH
57205: LD_EXP 51
57209: PPUSH
57210: LD_EXP 51
57214: PUSH
57215: LD_INT 1
57217: PLUS
57218: PPUSH
57219: LD_VAR 0 1
57223: PPUSH
57224: CALL_OW 1
57228: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57229: LD_ADDR_EXP 52
57233: PUSH
57234: LD_EXP 52
57238: PPUSH
57239: LD_EXP 52
57243: PUSH
57244: LD_INT 1
57246: PLUS
57247: PPUSH
57248: EMPTY
57249: PPUSH
57250: CALL_OW 1
57254: ST_TO_ADDR
// end end ;
57255: GO 57184
57257: POP
57258: POP
// for i := minerMinesList downto 1 do
57259: LD_ADDR_VAR 0 1
57263: PUSH
57264: DOUBLE
57265: LD_EXP 52
57269: INC
57270: ST_TO_ADDR
57271: LD_INT 1
57273: PUSH
57274: FOR_DOWNTO
57275: IFFALSE 57611
// begin if IsLive ( minersList [ i ] ) then
57277: LD_EXP 51
57281: PUSH
57282: LD_VAR 0 1
57286: ARRAY
57287: PPUSH
57288: CALL_OW 300
57292: IFFALSE 57320
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57294: LD_EXP 51
57298: PUSH
57299: LD_VAR 0 1
57303: ARRAY
57304: PPUSH
57305: LD_EXP 52
57309: PUSH
57310: LD_VAR 0 1
57314: ARRAY
57315: PPUSH
57316: CALL_OW 505
// if not minerMinesList [ i ] then
57320: LD_EXP 52
57324: PUSH
57325: LD_VAR 0 1
57329: ARRAY
57330: NOT
57331: IFFALSE 57335
// continue ;
57333: GO 57274
// for j := minerMinesList [ i ] downto 1 do
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: DOUBLE
57341: LD_EXP 52
57345: PUSH
57346: LD_VAR 0 1
57350: ARRAY
57351: INC
57352: ST_TO_ADDR
57353: LD_INT 1
57355: PUSH
57356: FOR_DOWNTO
57357: IFFALSE 57607
// begin side := GetSide ( minersList [ i ] ) ;
57359: LD_ADDR_VAR 0 3
57363: PUSH
57364: LD_EXP 51
57368: PUSH
57369: LD_VAR 0 1
57373: ARRAY
57374: PPUSH
57375: CALL_OW 255
57379: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57380: LD_ADDR_VAR 0 4
57384: PUSH
57385: LD_EXP 52
57389: PUSH
57390: LD_VAR 0 1
57394: ARRAY
57395: PUSH
57396: LD_VAR 0 2
57400: ARRAY
57401: PUSH
57402: LD_INT 1
57404: ARRAY
57405: PPUSH
57406: LD_EXP 52
57410: PUSH
57411: LD_VAR 0 1
57415: ARRAY
57416: PUSH
57417: LD_VAR 0 2
57421: ARRAY
57422: PUSH
57423: LD_INT 2
57425: ARRAY
57426: PPUSH
57427: CALL_OW 428
57431: ST_TO_ADDR
// if not tmp then
57432: LD_VAR 0 4
57436: NOT
57437: IFFALSE 57441
// continue ;
57439: GO 57356
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57441: LD_VAR 0 4
57445: PUSH
57446: LD_INT 81
57448: PUSH
57449: LD_VAR 0 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PPUSH
57458: CALL_OW 69
57462: IN
57463: PUSH
57464: LD_EXP 52
57468: PUSH
57469: LD_VAR 0 1
57473: ARRAY
57474: PUSH
57475: LD_VAR 0 2
57479: ARRAY
57480: PUSH
57481: LD_INT 1
57483: ARRAY
57484: PPUSH
57485: LD_EXP 52
57489: PUSH
57490: LD_VAR 0 1
57494: ARRAY
57495: PUSH
57496: LD_VAR 0 2
57500: ARRAY
57501: PUSH
57502: LD_INT 2
57504: ARRAY
57505: PPUSH
57506: CALL_OW 458
57510: AND
57511: IFFALSE 57605
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57513: LD_EXP 52
57517: PUSH
57518: LD_VAR 0 1
57522: ARRAY
57523: PUSH
57524: LD_VAR 0 2
57528: ARRAY
57529: PUSH
57530: LD_INT 1
57532: ARRAY
57533: PPUSH
57534: LD_EXP 52
57538: PUSH
57539: LD_VAR 0 1
57543: ARRAY
57544: PUSH
57545: LD_VAR 0 2
57549: ARRAY
57550: PUSH
57551: LD_INT 2
57553: ARRAY
57554: PPUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57564: LD_ADDR_EXP 52
57568: PUSH
57569: LD_EXP 52
57573: PPUSH
57574: LD_VAR 0 1
57578: PPUSH
57579: LD_EXP 52
57583: PUSH
57584: LD_VAR 0 1
57588: ARRAY
57589: PPUSH
57590: LD_VAR 0 2
57594: PPUSH
57595: CALL_OW 3
57599: PPUSH
57600: CALL_OW 1
57604: ST_TO_ADDR
// end ; end ;
57605: GO 57356
57607: POP
57608: POP
// end ;
57609: GO 57274
57611: POP
57612: POP
// end ;
57613: PPOPN 4
57615: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57616: LD_INT 0
57618: PPUSH
57619: PPUSH
// result := false ;
57620: LD_ADDR_VAR 0 4
57624: PUSH
57625: LD_INT 0
57627: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57628: LD_VAR 0 1
57632: PPUSH
57633: CALL_OW 264
57637: PUSH
57638: LD_INT 81
57640: EQUAL
57641: NOT
57642: IFFALSE 57646
// exit ;
57644: GO 57886
// index := GetElementIndex ( minersList , unit ) ;
57646: LD_ADDR_VAR 0 5
57650: PUSH
57651: LD_EXP 51
57655: PPUSH
57656: LD_VAR 0 1
57660: PPUSH
57661: CALL 7710 0 2
57665: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57666: LD_EXP 52
57670: PUSH
57671: LD_VAR 0 5
57675: ARRAY
57676: PUSH
57677: LD_EXP 53
57681: GREATEREQUAL
57682: IFFALSE 57686
// exit ;
57684: GO 57886
// ComMoveXY ( unit , x , y ) ;
57686: LD_VAR 0 1
57690: PPUSH
57691: LD_VAR 0 2
57695: PPUSH
57696: LD_VAR 0 3
57700: PPUSH
57701: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57705: LD_INT 35
57707: PPUSH
57708: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57712: LD_VAR 0 1
57716: PPUSH
57717: LD_VAR 0 2
57721: PPUSH
57722: LD_VAR 0 3
57726: PPUSH
57727: CALL 39471 0 3
57731: NOT
57732: PUSH
57733: LD_VAR 0 1
57737: PPUSH
57738: CALL_OW 314
57742: AND
57743: IFFALSE 57747
// exit ;
57745: GO 57886
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57747: LD_VAR 0 2
57751: PPUSH
57752: LD_VAR 0 3
57756: PPUSH
57757: CALL_OW 428
57761: PUSH
57762: LD_VAR 0 1
57766: EQUAL
57767: PUSH
57768: LD_VAR 0 1
57772: PPUSH
57773: CALL_OW 314
57777: NOT
57778: AND
57779: IFFALSE 57705
// PlaySoundXY ( x , y , PlantMine ) ;
57781: LD_VAR 0 2
57785: PPUSH
57786: LD_VAR 0 3
57790: PPUSH
57791: LD_STRING PlantMine
57793: PPUSH
57794: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57798: LD_VAR 0 2
57802: PPUSH
57803: LD_VAR 0 3
57807: PPUSH
57808: LD_VAR 0 1
57812: PPUSH
57813: CALL_OW 255
57817: PPUSH
57818: LD_INT 0
57820: PPUSH
57821: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57825: LD_ADDR_EXP 52
57829: PUSH
57830: LD_EXP 52
57834: PPUSH
57835: LD_VAR 0 5
57839: PUSH
57840: LD_EXP 52
57844: PUSH
57845: LD_VAR 0 5
57849: ARRAY
57850: PUSH
57851: LD_INT 1
57853: PLUS
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PPUSH
57859: LD_VAR 0 2
57863: PUSH
57864: LD_VAR 0 3
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PPUSH
57873: CALL 7925 0 3
57877: ST_TO_ADDR
// result := true ;
57878: LD_ADDR_VAR 0 4
57882: PUSH
57883: LD_INT 1
57885: ST_TO_ADDR
// end ;
57886: LD_VAR 0 4
57890: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57891: LD_INT 0
57893: PPUSH
57894: PPUSH
57895: PPUSH
// if not unit in minersList then
57896: LD_VAR 0 1
57900: PUSH
57901: LD_EXP 51
57905: IN
57906: NOT
57907: IFFALSE 57911
// exit ;
57909: GO 58303
// index := GetElementIndex ( minersList , unit ) ;
57911: LD_ADDR_VAR 0 6
57915: PUSH
57916: LD_EXP 51
57920: PPUSH
57921: LD_VAR 0 1
57925: PPUSH
57926: CALL 7710 0 2
57930: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57931: LD_ADDR_VAR 0 5
57935: PUSH
57936: DOUBLE
57937: LD_EXP 52
57941: PUSH
57942: LD_VAR 0 6
57946: ARRAY
57947: INC
57948: ST_TO_ADDR
57949: LD_INT 1
57951: PUSH
57952: FOR_DOWNTO
57953: IFFALSE 58114
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57955: LD_EXP 52
57959: PUSH
57960: LD_VAR 0 6
57964: ARRAY
57965: PUSH
57966: LD_VAR 0 5
57970: ARRAY
57971: PUSH
57972: LD_INT 1
57974: ARRAY
57975: PUSH
57976: LD_VAR 0 2
57980: EQUAL
57981: PUSH
57982: LD_EXP 52
57986: PUSH
57987: LD_VAR 0 6
57991: ARRAY
57992: PUSH
57993: LD_VAR 0 5
57997: ARRAY
57998: PUSH
57999: LD_INT 2
58001: ARRAY
58002: PUSH
58003: LD_VAR 0 3
58007: EQUAL
58008: AND
58009: IFFALSE 58112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58011: LD_EXP 52
58015: PUSH
58016: LD_VAR 0 6
58020: ARRAY
58021: PUSH
58022: LD_VAR 0 5
58026: ARRAY
58027: PUSH
58028: LD_INT 1
58030: ARRAY
58031: PPUSH
58032: LD_EXP 52
58036: PUSH
58037: LD_VAR 0 6
58041: ARRAY
58042: PUSH
58043: LD_VAR 0 5
58047: ARRAY
58048: PUSH
58049: LD_INT 2
58051: ARRAY
58052: PPUSH
58053: LD_VAR 0 1
58057: PPUSH
58058: CALL_OW 255
58062: PPUSH
58063: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58067: LD_ADDR_EXP 52
58071: PUSH
58072: LD_EXP 52
58076: PPUSH
58077: LD_VAR 0 6
58081: PPUSH
58082: LD_EXP 52
58086: PUSH
58087: LD_VAR 0 6
58091: ARRAY
58092: PPUSH
58093: LD_VAR 0 5
58097: PPUSH
58098: CALL_OW 3
58102: PPUSH
58103: CALL_OW 1
58107: ST_TO_ADDR
// exit ;
58108: POP
58109: POP
58110: GO 58303
// end ; end ;
58112: GO 57952
58114: POP
58115: POP
// for i := minerMinesList [ index ] downto 1 do
58116: LD_ADDR_VAR 0 5
58120: PUSH
58121: DOUBLE
58122: LD_EXP 52
58126: PUSH
58127: LD_VAR 0 6
58131: ARRAY
58132: INC
58133: ST_TO_ADDR
58134: LD_INT 1
58136: PUSH
58137: FOR_DOWNTO
58138: IFFALSE 58301
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58140: LD_EXP 52
58144: PUSH
58145: LD_VAR 0 6
58149: ARRAY
58150: PUSH
58151: LD_VAR 0 5
58155: ARRAY
58156: PUSH
58157: LD_INT 1
58159: ARRAY
58160: PPUSH
58161: LD_EXP 52
58165: PUSH
58166: LD_VAR 0 6
58170: ARRAY
58171: PUSH
58172: LD_VAR 0 5
58176: ARRAY
58177: PUSH
58178: LD_INT 2
58180: ARRAY
58181: PPUSH
58182: LD_VAR 0 2
58186: PPUSH
58187: LD_VAR 0 3
58191: PPUSH
58192: CALL_OW 298
58196: PUSH
58197: LD_INT 6
58199: LESS
58200: IFFALSE 58299
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58202: LD_EXP 52
58206: PUSH
58207: LD_VAR 0 6
58211: ARRAY
58212: PUSH
58213: LD_VAR 0 5
58217: ARRAY
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: PPUSH
58223: LD_EXP 52
58227: PUSH
58228: LD_VAR 0 6
58232: ARRAY
58233: PUSH
58234: LD_VAR 0 5
58238: ARRAY
58239: PUSH
58240: LD_INT 2
58242: ARRAY
58243: PPUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 255
58253: PPUSH
58254: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58258: LD_ADDR_EXP 52
58262: PUSH
58263: LD_EXP 52
58267: PPUSH
58268: LD_VAR 0 6
58272: PPUSH
58273: LD_EXP 52
58277: PUSH
58278: LD_VAR 0 6
58282: ARRAY
58283: PPUSH
58284: LD_VAR 0 5
58288: PPUSH
58289: CALL_OW 3
58293: PPUSH
58294: CALL_OW 1
58298: ST_TO_ADDR
// end ; end ;
58299: GO 58137
58301: POP
58302: POP
// end ;
58303: LD_VAR 0 4
58307: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58308: LD_INT 0
58310: PPUSH
58311: PPUSH
58312: PPUSH
58313: PPUSH
58314: PPUSH
58315: PPUSH
58316: PPUSH
58317: PPUSH
58318: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58319: LD_VAR 0 1
58323: PPUSH
58324: CALL_OW 264
58328: PUSH
58329: LD_INT 81
58331: EQUAL
58332: NOT
58333: PUSH
58334: LD_VAR 0 1
58338: PUSH
58339: LD_EXP 51
58343: IN
58344: NOT
58345: OR
58346: IFFALSE 58350
// exit ;
58348: GO 58672
// index := GetElementIndex ( minersList , unit ) ;
58350: LD_ADDR_VAR 0 6
58354: PUSH
58355: LD_EXP 51
58359: PPUSH
58360: LD_VAR 0 1
58364: PPUSH
58365: CALL 7710 0 2
58369: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58370: LD_ADDR_VAR 0 8
58374: PUSH
58375: LD_EXP 53
58379: PUSH
58380: LD_EXP 52
58384: PUSH
58385: LD_VAR 0 6
58389: ARRAY
58390: MINUS
58391: ST_TO_ADDR
// if not minesFreeAmount then
58392: LD_VAR 0 8
58396: NOT
58397: IFFALSE 58401
// exit ;
58399: GO 58672
// tmp := [ ] ;
58401: LD_ADDR_VAR 0 7
58405: PUSH
58406: EMPTY
58407: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58408: LD_ADDR_VAR 0 5
58412: PUSH
58413: DOUBLE
58414: LD_INT 1
58416: DEC
58417: ST_TO_ADDR
58418: LD_VAR 0 8
58422: PUSH
58423: FOR_TO
58424: IFFALSE 58619
// begin _d := rand ( 0 , 5 ) ;
58426: LD_ADDR_VAR 0 11
58430: PUSH
58431: LD_INT 0
58433: PPUSH
58434: LD_INT 5
58436: PPUSH
58437: CALL_OW 12
58441: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58442: LD_ADDR_VAR 0 12
58446: PUSH
58447: LD_INT 2
58449: PPUSH
58450: LD_INT 6
58452: PPUSH
58453: CALL_OW 12
58457: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58458: LD_ADDR_VAR 0 9
58462: PUSH
58463: LD_VAR 0 2
58467: PPUSH
58468: LD_VAR 0 11
58472: PPUSH
58473: LD_VAR 0 12
58477: PPUSH
58478: CALL_OW 272
58482: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58483: LD_ADDR_VAR 0 10
58487: PUSH
58488: LD_VAR 0 3
58492: PPUSH
58493: LD_VAR 0 11
58497: PPUSH
58498: LD_VAR 0 12
58502: PPUSH
58503: CALL_OW 273
58507: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58508: LD_VAR 0 9
58512: PPUSH
58513: LD_VAR 0 10
58517: PPUSH
58518: CALL_OW 488
58522: PUSH
58523: LD_VAR 0 9
58527: PUSH
58528: LD_VAR 0 10
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_VAR 0 7
58541: IN
58542: NOT
58543: AND
58544: PUSH
58545: LD_VAR 0 9
58549: PPUSH
58550: LD_VAR 0 10
58554: PPUSH
58555: CALL_OW 458
58559: NOT
58560: AND
58561: IFFALSE 58603
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58563: LD_ADDR_VAR 0 7
58567: PUSH
58568: LD_VAR 0 7
58572: PPUSH
58573: LD_VAR 0 7
58577: PUSH
58578: LD_INT 1
58580: PLUS
58581: PPUSH
58582: LD_VAR 0 9
58586: PUSH
58587: LD_VAR 0 10
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PPUSH
58596: CALL_OW 1
58600: ST_TO_ADDR
58601: GO 58617
// i := i - 1 ;
58603: LD_ADDR_VAR 0 5
58607: PUSH
58608: LD_VAR 0 5
58612: PUSH
58613: LD_INT 1
58615: MINUS
58616: ST_TO_ADDR
// end ;
58617: GO 58423
58619: POP
58620: POP
// for i in tmp do
58621: LD_ADDR_VAR 0 5
58625: PUSH
58626: LD_VAR 0 7
58630: PUSH
58631: FOR_IN
58632: IFFALSE 58670
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58634: LD_VAR 0 1
58638: PPUSH
58639: LD_VAR 0 5
58643: PUSH
58644: LD_INT 1
58646: ARRAY
58647: PPUSH
58648: LD_VAR 0 5
58652: PUSH
58653: LD_INT 2
58655: ARRAY
58656: PPUSH
58657: CALL 57616 0 3
58661: NOT
58662: IFFALSE 58668
// exit ;
58664: POP
58665: POP
58666: GO 58672
58668: GO 58631
58670: POP
58671: POP
// end ;
58672: LD_VAR 0 4
58676: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58677: LD_INT 0
58679: PPUSH
58680: PPUSH
58681: PPUSH
58682: PPUSH
58683: PPUSH
58684: PPUSH
58685: PPUSH
58686: PPUSH
58687: PPUSH
// if GetClass ( unit ) <> class_sniper then
58688: LD_VAR 0 1
58692: PPUSH
58693: CALL_OW 257
58697: PUSH
58698: LD_INT 5
58700: NONEQUAL
58701: IFFALSE 58705
// exit ;
58703: GO 59171
// dist := 8 ;
58705: LD_ADDR_VAR 0 5
58709: PUSH
58710: LD_INT 8
58712: ST_TO_ADDR
// viewRange := 12 ;
58713: LD_ADDR_VAR 0 8
58717: PUSH
58718: LD_INT 12
58720: ST_TO_ADDR
// side := GetSide ( unit ) ;
58721: LD_ADDR_VAR 0 6
58725: PUSH
58726: LD_VAR 0 1
58730: PPUSH
58731: CALL_OW 255
58735: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58736: LD_INT 61
58738: PPUSH
58739: LD_VAR 0 6
58743: PPUSH
58744: CALL_OW 321
58748: PUSH
58749: LD_INT 2
58751: EQUAL
58752: IFFALSE 58762
// viewRange := 16 ;
58754: LD_ADDR_VAR 0 8
58758: PUSH
58759: LD_INT 16
58761: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_VAR 0 2
58771: PPUSH
58772: LD_VAR 0 3
58776: PPUSH
58777: CALL_OW 297
58781: PUSH
58782: LD_VAR 0 5
58786: GREATER
58787: IFFALSE 58866
// begin ComMoveXY ( unit , x , y ) ;
58789: LD_VAR 0 1
58793: PPUSH
58794: LD_VAR 0 2
58798: PPUSH
58799: LD_VAR 0 3
58803: PPUSH
58804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58808: LD_INT 35
58810: PPUSH
58811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58815: LD_VAR 0 1
58819: PPUSH
58820: LD_VAR 0 2
58824: PPUSH
58825: LD_VAR 0 3
58829: PPUSH
58830: CALL 39471 0 3
58834: NOT
58835: IFFALSE 58839
// exit ;
58837: GO 59171
// until GetDistUnitXY ( unit , x , y ) < dist ;
58839: LD_VAR 0 1
58843: PPUSH
58844: LD_VAR 0 2
58848: PPUSH
58849: LD_VAR 0 3
58853: PPUSH
58854: CALL_OW 297
58858: PUSH
58859: LD_VAR 0 5
58863: LESS
58864: IFFALSE 58808
// end ; ComTurnXY ( unit , x , y ) ;
58866: LD_VAR 0 1
58870: PPUSH
58871: LD_VAR 0 2
58875: PPUSH
58876: LD_VAR 0 3
58880: PPUSH
58881: CALL_OW 118
// repeat if Multiplayer then
58885: LD_OWVAR 4
58889: IFFALSE 58900
// wait ( 35 ) else
58891: LD_INT 35
58893: PPUSH
58894: CALL_OW 67
58898: GO 58907
// wait ( 5 ) ;
58900: LD_INT 5
58902: PPUSH
58903: CALL_OW 67
// _d := GetDir ( unit ) ;
58907: LD_ADDR_VAR 0 11
58911: PUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: CALL_OW 254
58921: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58922: LD_ADDR_VAR 0 7
58926: PUSH
58927: LD_VAR 0 1
58931: PPUSH
58932: CALL_OW 250
58936: PPUSH
58937: LD_VAR 0 1
58941: PPUSH
58942: CALL_OW 251
58946: PPUSH
58947: LD_VAR 0 2
58951: PPUSH
58952: LD_VAR 0 3
58956: PPUSH
58957: CALL 42079 0 4
58961: ST_TO_ADDR
// until dir = _d ;
58962: LD_VAR 0 7
58966: PUSH
58967: LD_VAR 0 11
58971: EQUAL
58972: IFFALSE 58885
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58974: LD_ADDR_VAR 0 9
58978: PUSH
58979: LD_VAR 0 1
58983: PPUSH
58984: CALL_OW 250
58988: PPUSH
58989: LD_VAR 0 7
58993: PPUSH
58994: LD_VAR 0 5
58998: PPUSH
58999: CALL_OW 272
59003: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59004: LD_ADDR_VAR 0 10
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: CALL_OW 251
59018: PPUSH
59019: LD_VAR 0 7
59023: PPUSH
59024: LD_VAR 0 5
59028: PPUSH
59029: CALL_OW 273
59033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59034: LD_VAR 0 9
59038: PPUSH
59039: LD_VAR 0 10
59043: PPUSH
59044: CALL_OW 488
59048: NOT
59049: IFFALSE 59053
// exit ;
59051: GO 59171
// ComAnimCustom ( unit , 1 ) ;
59053: LD_VAR 0 1
59057: PPUSH
59058: LD_INT 1
59060: PPUSH
59061: CALL_OW 592
// p := 0 ;
59065: LD_ADDR_VAR 0 12
59069: PUSH
59070: LD_INT 0
59072: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59073: LD_VAR 0 9
59077: PPUSH
59078: LD_VAR 0 10
59082: PPUSH
59083: LD_VAR 0 6
59087: PPUSH
59088: LD_VAR 0 8
59092: PPUSH
59093: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59097: LD_INT 35
59099: PPUSH
59100: CALL_OW 67
// p := Inc ( p ) ;
59104: LD_ADDR_VAR 0 12
59108: PUSH
59109: LD_VAR 0 12
59113: PPUSH
59114: CALL 42035 0 1
59118: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59119: LD_VAR 0 12
59123: PUSH
59124: LD_INT 3
59126: EQUAL
59127: PUSH
59128: LD_VAR 0 1
59132: PPUSH
59133: CALL_OW 302
59137: NOT
59138: OR
59139: PUSH
59140: LD_VAR 0 1
59144: PPUSH
59145: CALL_OW 301
59149: OR
59150: IFFALSE 59097
// RemoveSeeing ( _x , _y , side ) ;
59152: LD_VAR 0 9
59156: PPUSH
59157: LD_VAR 0 10
59161: PPUSH
59162: LD_VAR 0 6
59166: PPUSH
59167: CALL_OW 331
// end ; end_of_file
59171: LD_VAR 0 4
59175: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59176: PPOPN 6
59178: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59179: CALL 59208 0 0
// end ; end_of_file
59183: PPOPN 1
59185: END
// every 0 0$1 do
59186: GO 59188
59188: DISABLE
// begin enable ;
59189: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59190: LD_STRING updateTimer(
59192: PUSH
59193: LD_OWVAR 1
59197: STR
59198: PUSH
59199: LD_STRING );
59201: STR
59202: PPUSH
59203: CALL_OW 559
// end ;
59207: END
// export function SOS_MapStart ( ) ; begin
59208: LD_INT 0
59210: PPUSH
// UpdateFactoryWaypoints ( ) ;
59211: CALL 59580 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59215: CALL 59832 0 0
// end ;
59219: LD_VAR 0 1
59223: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59224: LD_INT 0
59226: PPUSH
// end ;
59227: LD_VAR 0 12
59231: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59232: LD_INT 0
59234: PPUSH
59235: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59236: LD_VAR 0 1
59240: NOT
59241: PUSH
59242: LD_VAR 0 2
59246: PPUSH
59247: LD_VAR 0 3
59251: PPUSH
59252: CALL_OW 488
59256: NOT
59257: OR
59258: PUSH
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 266
59268: PUSH
59269: LD_INT 3
59271: NONEQUAL
59272: PUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 247
59282: PUSH
59283: LD_INT 1
59285: EQUAL
59286: NOT
59287: AND
59288: OR
59289: IFFALSE 59293
// exit ;
59291: GO 59575
// if GetType ( factory ) = unit_human then
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 247
59302: PUSH
59303: LD_INT 1
59305: EQUAL
59306: IFFALSE 59323
// factory := IsInUnit ( factory ) ;
59308: LD_ADDR_VAR 0 1
59312: PUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL_OW 310
59322: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59323: LD_VAR 0 1
59327: PPUSH
59328: CALL_OW 266
59332: PUSH
59333: LD_INT 3
59335: NONEQUAL
59336: IFFALSE 59340
// exit ;
59338: GO 59575
// for i := 1 to Count ( factoryWaypoints ) do
59340: LD_ADDR_VAR 0 5
59344: PUSH
59345: DOUBLE
59346: LD_INT 1
59348: DEC
59349: ST_TO_ADDR
59350: LD_EXP 54
59354: PPUSH
59355: CALL 5065 0 1
59359: PUSH
59360: FOR_TO
59361: IFFALSE 59523
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59363: LD_VAR 0 2
59367: PPUSH
59368: LD_VAR 0 3
59372: PPUSH
59373: CALL_OW 428
59377: PUSH
59378: LD_EXP 54
59382: PUSH
59383: LD_VAR 0 5
59387: ARRAY
59388: PUSH
59389: LD_INT 2
59391: ARRAY
59392: EQUAL
59393: IFFALSE 59425
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59395: LD_ADDR_EXP 54
59399: PUSH
59400: LD_EXP 54
59404: PPUSH
59405: LD_VAR 0 5
59409: PPUSH
59410: CALL_OW 3
59414: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59415: CALL 59580 0 0
// exit ;
59419: POP
59420: POP
59421: GO 59575
// end else
59423: GO 59521
// if factory = factoryWaypoints [ i ] [ 2 ] then
59425: LD_VAR 0 1
59429: PUSH
59430: LD_EXP 54
59434: PUSH
59435: LD_VAR 0 5
59439: ARRAY
59440: PUSH
59441: LD_INT 2
59443: ARRAY
59444: EQUAL
59445: IFFALSE 59521
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59447: LD_ADDR_EXP 54
59451: PUSH
59452: LD_EXP 54
59456: PPUSH
59457: LD_VAR 0 5
59461: PPUSH
59462: CALL_OW 3
59466: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59467: LD_ADDR_EXP 54
59471: PUSH
59472: LD_EXP 54
59476: PPUSH
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 255
59486: PUSH
59487: LD_VAR 0 1
59491: PUSH
59492: LD_VAR 0 2
59496: PUSH
59497: LD_VAR 0 3
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: PPUSH
59508: CALL 40674 0 2
59512: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59513: CALL 59580 0 0
// exit ;
59517: POP
59518: POP
59519: GO 59575
// end ; end ;
59521: GO 59360
59523: POP
59524: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59525: LD_ADDR_EXP 54
59529: PUSH
59530: LD_EXP 54
59534: PPUSH
59535: LD_VAR 0 1
59539: PPUSH
59540: CALL_OW 255
59544: PUSH
59545: LD_VAR 0 1
59549: PUSH
59550: LD_VAR 0 2
59554: PUSH
59555: LD_VAR 0 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: PPUSH
59566: CALL 40674 0 2
59570: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59571: CALL 59580 0 0
// end ;
59575: LD_VAR 0 4
59579: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59580: LD_INT 0
59582: PPUSH
59583: PPUSH
59584: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59585: LD_STRING resetFactoryWaypoint();
59587: PPUSH
59588: CALL_OW 559
// if factoryWaypoints then
59592: LD_EXP 54
59596: IFFALSE 59717
// begin list := factoryWaypoints ;
59598: LD_ADDR_VAR 0 3
59602: PUSH
59603: LD_EXP 54
59607: ST_TO_ADDR
// for i := 1 to list do
59608: LD_ADDR_VAR 0 2
59612: PUSH
59613: DOUBLE
59614: LD_INT 1
59616: DEC
59617: ST_TO_ADDR
59618: LD_VAR 0 3
59622: PUSH
59623: FOR_TO
59624: IFFALSE 59715
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59626: LD_STRING setFactoryWaypointXY(
59628: PUSH
59629: LD_VAR 0 3
59633: PUSH
59634: LD_VAR 0 2
59638: ARRAY
59639: PUSH
59640: LD_INT 1
59642: ARRAY
59643: STR
59644: PUSH
59645: LD_STRING ,
59647: STR
59648: PUSH
59649: LD_VAR 0 3
59653: PUSH
59654: LD_VAR 0 2
59658: ARRAY
59659: PUSH
59660: LD_INT 2
59662: ARRAY
59663: STR
59664: PUSH
59665: LD_STRING ,
59667: STR
59668: PUSH
59669: LD_VAR 0 3
59673: PUSH
59674: LD_VAR 0 2
59678: ARRAY
59679: PUSH
59680: LD_INT 3
59682: ARRAY
59683: STR
59684: PUSH
59685: LD_STRING ,
59687: STR
59688: PUSH
59689: LD_VAR 0 3
59693: PUSH
59694: LD_VAR 0 2
59698: ARRAY
59699: PUSH
59700: LD_INT 4
59702: ARRAY
59703: STR
59704: PUSH
59705: LD_STRING )
59707: STR
59708: PPUSH
59709: CALL_OW 559
59713: GO 59623
59715: POP
59716: POP
// end ; end ;
59717: LD_VAR 0 1
59721: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59722: LD_INT 0
59724: PPUSH
// if HexInfo ( x , y ) = warehouse then
59725: LD_VAR 0 2
59729: PPUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 428
59739: PUSH
59740: LD_VAR 0 1
59744: EQUAL
59745: IFFALSE 59772
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59747: LD_ADDR_EXP 55
59751: PUSH
59752: LD_EXP 55
59756: PPUSH
59757: LD_VAR 0 1
59761: PPUSH
59762: LD_INT 0
59764: PPUSH
59765: CALL_OW 1
59769: ST_TO_ADDR
59770: GO 59823
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59772: LD_ADDR_EXP 55
59776: PUSH
59777: LD_EXP 55
59781: PPUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 255
59796: PUSH
59797: LD_VAR 0 1
59801: PUSH
59802: LD_VAR 0 2
59806: PUSH
59807: LD_VAR 0 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: PPUSH
59818: CALL_OW 1
59822: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59823: CALL 59832 0 0
// end ;
59827: LD_VAR 0 4
59831: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59832: LD_INT 0
59834: PPUSH
59835: PPUSH
59836: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59837: LD_STRING resetWarehouseGatheringPoints();
59839: PPUSH
59840: CALL_OW 559
// if warehouseGatheringPoints then
59844: LD_EXP 55
59848: IFFALSE 59974
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59850: LD_ADDR_VAR 0 3
59854: PUSH
59855: LD_EXP 55
59859: PPUSH
59860: CALL 44436 0 1
59864: ST_TO_ADDR
// for i := 1 to list do
59865: LD_ADDR_VAR 0 2
59869: PUSH
59870: DOUBLE
59871: LD_INT 1
59873: DEC
59874: ST_TO_ADDR
59875: LD_VAR 0 3
59879: PUSH
59880: FOR_TO
59881: IFFALSE 59972
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59883: LD_STRING setWarehouseGatheringPointXY(
59885: PUSH
59886: LD_VAR 0 3
59890: PUSH
59891: LD_VAR 0 2
59895: ARRAY
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: STR
59901: PUSH
59902: LD_STRING ,
59904: STR
59905: PUSH
59906: LD_VAR 0 3
59910: PUSH
59911: LD_VAR 0 2
59915: ARRAY
59916: PUSH
59917: LD_INT 2
59919: ARRAY
59920: STR
59921: PUSH
59922: LD_STRING ,
59924: STR
59925: PUSH
59926: LD_VAR 0 3
59930: PUSH
59931: LD_VAR 0 2
59935: ARRAY
59936: PUSH
59937: LD_INT 3
59939: ARRAY
59940: STR
59941: PUSH
59942: LD_STRING ,
59944: STR
59945: PUSH
59946: LD_VAR 0 3
59950: PUSH
59951: LD_VAR 0 2
59955: ARRAY
59956: PUSH
59957: LD_INT 4
59959: ARRAY
59960: STR
59961: PUSH
59962: LD_STRING )
59964: STR
59965: PPUSH
59966: CALL_OW 559
59970: GO 59880
59972: POP
59973: POP
// end ; end ;
59974: LD_VAR 0 1
59978: RET
