// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46485 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46869 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 32
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 35
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 33
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 35
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 34
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 31
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45850 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45850 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45850 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45850 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45850 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45850 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45850 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45850 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 5165 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45683 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45683 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45683 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45683 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 45683 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 45683 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 45683 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 45683 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 45683 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 45683 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 45683 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 45683 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 45683 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 45683 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 45683 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 45683 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45850 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45850 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45850 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45850 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45850 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45850 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45850 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45850 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45850 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45850 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45850 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45850 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45850 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45850 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45850 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45850 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45850 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45850 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45850 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45850 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45850 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45850 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45850 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45850 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 42504 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 56210 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 51771 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 56227 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 52478 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_VAR 0 4
2862: PPUSH
2863: LD_VAR 0 5
2867: PPUSH
2868: CALL 53170 0 5
2872: PPOPN 5
2874: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: LD_VAR 0 2
2884: PPUSH
2885: CALL 56268 0 2
2889: PPOPN 2
2891: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL 52531 0 3
2911: PPOPN 3
2913: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2914: LD_VAR 0 1
2918: PPUSH
2919: LD_VAR 0 2
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: CALL 53273 0 4
2938: PPOPN 4
2940: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
// if exist_mode then
2945: LD_VAR 0 2
2949: IFFALSE 2995
// begin unit := CreateCharacter ( prefix & ident ) ;
2951: LD_ADDR_VAR 0 5
2955: PUSH
2956: LD_VAR 0 3
2960: PUSH
2961: LD_VAR 0 1
2965: STR
2966: PPUSH
2967: CALL_OW 34
2971: ST_TO_ADDR
// if unit then
2972: LD_VAR 0 5
2976: IFFALSE 2993
// DeleteCharacters ( prefix & ident ) ;
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: STR
2988: PPUSH
2989: CALL_OW 40
// end else
2993: GO 3010
// unit := NewCharacter ( ident ) ;
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL_OW 25
3009: ST_TO_ADDR
// result := unit ;
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_VAR 0 5
3019: ST_TO_ADDR
// end ;
3020: LD_VAR 0 4
3024: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3025: LD_INT 0
3027: PPUSH
3028: PPUSH
// if exist_mode then
3029: LD_VAR 0 2
3033: IFFALSE 3058
// unit := CreateCharacter ( prefix & ident ) else
3035: LD_ADDR_VAR 0 5
3039: PUSH
3040: LD_VAR 0 3
3044: PUSH
3045: LD_VAR 0 1
3049: STR
3050: PPUSH
3051: CALL_OW 34
3055: ST_TO_ADDR
3056: GO 3073
// unit := NewCharacter ( ident ) ;
3058: LD_ADDR_VAR 0 5
3062: PUSH
3063: LD_VAR 0 1
3067: PPUSH
3068: CALL_OW 25
3072: ST_TO_ADDR
// result := unit ;
3073: LD_ADDR_VAR 0 4
3077: PUSH
3078: LD_VAR 0 5
3082: ST_TO_ADDR
// end ;
3083: LD_VAR 0 4
3087: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
// if not side or not nation then
3092: LD_VAR 0 1
3096: NOT
3097: IFTRUE 3106
3099: PUSH
3100: LD_VAR 0 2
3104: NOT
3105: OR
3106: IFFALSE 3110
// exit ;
3108: GO 3904
// case nation of nation_american :
3110: LD_VAR 0 2
3114: PUSH
3115: LD_INT 1
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3345
3123: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3124: LD_ADDR_VAR 0 4
3128: PUSH
3129: LD_INT 35
3131: PUSH
3132: LD_INT 45
3134: PUSH
3135: LD_INT 46
3137: PUSH
3138: LD_INT 47
3140: PUSH
3141: LD_INT 82
3143: PUSH
3144: LD_INT 83
3146: PUSH
3147: LD_INT 84
3149: PUSH
3150: LD_INT 85
3152: PUSH
3153: LD_INT 86
3155: PUSH
3156: LD_INT 1
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: LD_INT 6
3164: PUSH
3165: LD_INT 15
3167: PUSH
3168: LD_INT 16
3170: PUSH
3171: LD_INT 7
3173: PUSH
3174: LD_INT 12
3176: PUSH
3177: LD_INT 13
3179: PUSH
3180: LD_INT 10
3182: PUSH
3183: LD_INT 14
3185: PUSH
3186: LD_INT 20
3188: PUSH
3189: LD_INT 21
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 25
3197: PUSH
3198: LD_INT 32
3200: PUSH
3201: LD_INT 27
3203: PUSH
3204: LD_INT 36
3206: PUSH
3207: LD_INT 69
3209: PUSH
3210: LD_INT 39
3212: PUSH
3213: LD_INT 34
3215: PUSH
3216: LD_INT 40
3218: PUSH
3219: LD_INT 48
3221: PUSH
3222: LD_INT 49
3224: PUSH
3225: LD_INT 50
3227: PUSH
3228: LD_INT 51
3230: PUSH
3231: LD_INT 52
3233: PUSH
3234: LD_INT 53
3236: PUSH
3237: LD_INT 54
3239: PUSH
3240: LD_INT 55
3242: PUSH
3243: LD_INT 56
3245: PUSH
3246: LD_INT 57
3248: PUSH
3249: LD_INT 58
3251: PUSH
3252: LD_INT 59
3254: PUSH
3255: LD_INT 60
3257: PUSH
3258: LD_INT 61
3260: PUSH
3261: LD_INT 62
3263: PUSH
3264: LD_INT 80
3266: PUSH
3267: LD_INT 82
3269: PUSH
3270: LD_INT 83
3272: PUSH
3273: LD_INT 84
3275: PUSH
3276: LD_INT 85
3278: PUSH
3279: LD_INT 86
3281: PUSH
3282: LD_INT 90
3284: PUSH
3285: LD_INT 93
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: ST_TO_ADDR
3343: GO 3826
3345: LD_INT 2
3347: DOUBLE
3348: EQUAL
3349: IFTRUE 3353
3351: GO 3587
3353: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3354: LD_ADDR_VAR 0 4
3358: PUSH
3359: LD_INT 35
3361: PUSH
3362: LD_INT 45
3364: PUSH
3365: LD_INT 46
3367: PUSH
3368: LD_INT 47
3370: PUSH
3371: LD_INT 82
3373: PUSH
3374: LD_INT 83
3376: PUSH
3377: LD_INT 84
3379: PUSH
3380: LD_INT 85
3382: PUSH
3383: LD_INT 87
3385: PUSH
3386: LD_INT 70
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: LD_INT 11
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: LD_INT 5
3403: PUSH
3404: LD_INT 6
3406: PUSH
3407: LD_INT 15
3409: PUSH
3410: LD_INT 18
3412: PUSH
3413: LD_INT 7
3415: PUSH
3416: LD_INT 17
3418: PUSH
3419: LD_INT 8
3421: PUSH
3422: LD_INT 20
3424: PUSH
3425: LD_INT 21
3427: PUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 72
3433: PUSH
3434: LD_INT 26
3436: PUSH
3437: LD_INT 69
3439: PUSH
3440: LD_INT 39
3442: PUSH
3443: LD_INT 40
3445: PUSH
3446: LD_INT 41
3448: PUSH
3449: LD_INT 42
3451: PUSH
3452: LD_INT 43
3454: PUSH
3455: LD_INT 48
3457: PUSH
3458: LD_INT 49
3460: PUSH
3461: LD_INT 50
3463: PUSH
3464: LD_INT 51
3466: PUSH
3467: LD_INT 52
3469: PUSH
3470: LD_INT 53
3472: PUSH
3473: LD_INT 54
3475: PUSH
3476: LD_INT 55
3478: PUSH
3479: LD_INT 56
3481: PUSH
3482: LD_INT 60
3484: PUSH
3485: LD_INT 61
3487: PUSH
3488: LD_INT 62
3490: PUSH
3491: LD_INT 66
3493: PUSH
3494: LD_INT 67
3496: PUSH
3497: LD_INT 68
3499: PUSH
3500: LD_INT 81
3502: PUSH
3503: LD_INT 82
3505: PUSH
3506: LD_INT 83
3508: PUSH
3509: LD_INT 84
3511: PUSH
3512: LD_INT 85
3514: PUSH
3515: LD_INT 87
3517: PUSH
3518: LD_INT 88
3520: PUSH
3521: LD_INT 92
3523: PUSH
3524: LD_INT 94
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: ST_TO_ADDR
3585: GO 3826
3587: LD_INT 3
3589: DOUBLE
3590: EQUAL
3591: IFTRUE 3595
3593: GO 3825
3595: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3596: LD_ADDR_VAR 0 4
3600: PUSH
3601: LD_INT 46
3603: PUSH
3604: LD_INT 47
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 2
3612: PUSH
3613: LD_INT 82
3615: PUSH
3616: LD_INT 83
3618: PUSH
3619: LD_INT 84
3621: PUSH
3622: LD_INT 85
3624: PUSH
3625: LD_INT 86
3627: PUSH
3628: LD_INT 11
3630: PUSH
3631: LD_INT 9
3633: PUSH
3634: LD_INT 20
3636: PUSH
3637: LD_INT 19
3639: PUSH
3640: LD_INT 21
3642: PUSH
3643: LD_INT 24
3645: PUSH
3646: LD_INT 22
3648: PUSH
3649: LD_INT 25
3651: PUSH
3652: LD_INT 28
3654: PUSH
3655: LD_INT 29
3657: PUSH
3658: LD_INT 30
3660: PUSH
3661: LD_INT 31
3663: PUSH
3664: LD_INT 37
3666: PUSH
3667: LD_INT 38
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: LD_INT 33
3678: PUSH
3679: LD_INT 69
3681: PUSH
3682: LD_INT 39
3684: PUSH
3685: LD_INT 34
3687: PUSH
3688: LD_INT 40
3690: PUSH
3691: LD_INT 71
3693: PUSH
3694: LD_INT 23
3696: PUSH
3697: LD_INT 44
3699: PUSH
3700: LD_INT 48
3702: PUSH
3703: LD_INT 49
3705: PUSH
3706: LD_INT 50
3708: PUSH
3709: LD_INT 51
3711: PUSH
3712: LD_INT 52
3714: PUSH
3715: LD_INT 53
3717: PUSH
3718: LD_INT 54
3720: PUSH
3721: LD_INT 55
3723: PUSH
3724: LD_INT 56
3726: PUSH
3727: LD_INT 57
3729: PUSH
3730: LD_INT 58
3732: PUSH
3733: LD_INT 59
3735: PUSH
3736: LD_INT 63
3738: PUSH
3739: LD_INT 64
3741: PUSH
3742: LD_INT 65
3744: PUSH
3745: LD_INT 82
3747: PUSH
3748: LD_INT 83
3750: PUSH
3751: LD_INT 84
3753: PUSH
3754: LD_INT 85
3756: PUSH
3757: LD_INT 86
3759: PUSH
3760: LD_INT 89
3762: PUSH
3763: LD_INT 91
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: ST_TO_ADDR
3823: GO 3826
3825: POP
// if state > - 1 and state < 3 then
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 1
3833: NEG
3834: GREATER
3835: IFFALSE 3847
3837: PUSH
3838: LD_VAR 0 3
3842: PUSH
3843: LD_INT 3
3845: LESS
3846: AND
3847: IFFALSE 3904
// for i in result do
3849: LD_ADDR_VAR 0 5
3853: PUSH
3854: LD_VAR 0 4
3858: PUSH
3859: FOR_IN
3860: IFFALSE 3902
// if GetTech ( i , side ) <> state then
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_VAR 0 1
3871: PPUSH
3872: CALL_OW 321
3876: PUSH
3877: LD_VAR 0 3
3881: NONEQUAL
3882: IFFALSE 3900
// result := result diff i ;
3884: LD_ADDR_VAR 0 4
3888: PUSH
3889: LD_VAR 0 4
3893: PUSH
3894: LD_VAR 0 5
3898: DIFF
3899: ST_TO_ADDR
3900: GO 3859
3902: POP
3903: POP
// end ;
3904: LD_VAR 0 4
3908: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// result := true ;
3914: LD_ADDR_VAR 0 3
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3922: LD_ADDR_VAR 0 5
3926: PUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: CALL_OW 480
3936: ST_TO_ADDR
// if not tmp then
3937: LD_VAR 0 5
3941: NOT
3942: IFFALSE 3946
// exit ;
3944: GO 3995
// for i in tmp do
3946: LD_ADDR_VAR 0 4
3950: PUSH
3951: LD_VAR 0 5
3955: PUSH
3956: FOR_IN
3957: IFFALSE 3993
// if GetTech ( i , side ) <> state_researched then
3959: LD_VAR 0 4
3963: PPUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 321
3973: PUSH
3974: LD_INT 2
3976: NONEQUAL
3977: IFFALSE 3991
// begin result := false ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: LD_INT 0
3986: ST_TO_ADDR
// exit ;
3987: POP
3988: POP
3989: GO 3995
// end ;
3991: GO 3956
3993: POP
3994: POP
// end ;
3995: LD_VAR 0 3
3999: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4000: LD_INT 0
4002: PPUSH
4003: PPUSH
4004: PPUSH
4005: PPUSH
4006: PPUSH
4007: PPUSH
4008: PPUSH
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
4014: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4015: LD_VAR 0 1
4019: NOT
4020: IFTRUE 4037
4022: PUSH
4023: LD_VAR 0 1
4027: PPUSH
4028: CALL_OW 257
4032: PUSH
4033: LD_INT 9
4035: NONEQUAL
4036: OR
4037: IFFALSE 4041
// exit ;
4039: GO 4620
// side := GetSide ( unit ) ;
4041: LD_ADDR_VAR 0 9
4045: PUSH
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL_OW 255
4055: ST_TO_ADDR
// tech_space := tech_spacanom ;
4056: LD_ADDR_VAR 0 12
4060: PUSH
4061: LD_INT 29
4063: ST_TO_ADDR
// tech_time := tech_taurad ;
4064: LD_ADDR_VAR 0 13
4068: PUSH
4069: LD_INT 28
4071: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4072: LD_ADDR_VAR 0 11
4076: PUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: CALL_OW 310
4086: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4087: LD_VAR 0 11
4091: PPUSH
4092: CALL_OW 247
4096: PUSH
4097: LD_INT 2
4099: EQUAL
4100: IFFALSE 4104
// exit ;
4102: GO 4620
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4104: LD_ADDR_VAR 0 8
4108: PUSH
4109: LD_INT 81
4111: PUSH
4112: LD_VAR 0 9
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 69
4146: ST_TO_ADDR
// if not tmp then
4147: LD_VAR 0 8
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4620
// if in_unit then
4156: LD_VAR 0 11
4160: IFFALSE 4184
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4162: LD_ADDR_VAR 0 10
4166: PUSH
4167: LD_VAR 0 8
4171: PPUSH
4172: LD_VAR 0 11
4176: PPUSH
4177: CALL_OW 74
4181: ST_TO_ADDR
4182: GO 4204
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4184: LD_ADDR_VAR 0 10
4188: PUSH
4189: LD_VAR 0 8
4193: PPUSH
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 74
4203: ST_TO_ADDR
// if not enemy then
4204: LD_VAR 0 10
4208: NOT
4209: IFFALSE 4213
// exit ;
4211: GO 4620
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4213: LD_VAR 0 11
4217: IFFALSE 4239
4219: PUSH
4220: LD_VAR 0 11
4224: PPUSH
4225: LD_VAR 0 10
4229: PPUSH
4230: CALL_OW 296
4234: PUSH
4235: LD_INT 13
4237: GREATER
4238: AND
4239: IFTRUE 4261
4241: PUSH
4242: LD_VAR 0 1
4246: PPUSH
4247: LD_VAR 0 10
4251: PPUSH
4252: CALL_OW 296
4256: PUSH
4257: LD_INT 12
4259: GREATER
4260: OR
4261: IFFALSE 4265
// exit ;
4263: GO 4620
// missile := [ 1 ] ;
4265: LD_ADDR_VAR 0 14
4269: PUSH
4270: LD_INT 1
4272: PUSH
4273: EMPTY
4274: LIST
4275: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4276: LD_VAR 0 9
4280: PPUSH
4281: LD_VAR 0 12
4285: PPUSH
4286: CALL_OW 325
4290: IFFALSE 4319
// missile := Replace ( missile , missile + 1 , 2 ) ;
4292: LD_ADDR_VAR 0 14
4296: PUSH
4297: LD_VAR 0 14
4301: PPUSH
4302: LD_VAR 0 14
4306: PUSH
4307: LD_INT 1
4309: PLUS
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 1
4318: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4319: LD_VAR 0 9
4323: PPUSH
4324: LD_VAR 0 13
4328: PPUSH
4329: CALL_OW 325
4333: IFFALSE 4357
4335: PUSH
4336: LD_VAR 0 10
4340: PPUSH
4341: CALL_OW 255
4345: PPUSH
4346: LD_VAR 0 13
4350: PPUSH
4351: CALL_OW 325
4355: NOT
4356: AND
4357: IFFALSE 4386
// missile := Replace ( missile , missile + 1 , 3 ) ;
4359: LD_ADDR_VAR 0 14
4363: PUSH
4364: LD_VAR 0 14
4368: PPUSH
4369: LD_VAR 0 14
4373: PUSH
4374: LD_INT 1
4376: PLUS
4377: PPUSH
4378: LD_INT 3
4380: PPUSH
4381: CALL_OW 1
4385: ST_TO_ADDR
// if missile < 2 then
4386: LD_VAR 0 14
4390: PUSH
4391: LD_INT 2
4393: LESS
4394: IFFALSE 4398
// exit ;
4396: GO 4620
// x := GetX ( enemy ) ;
4398: LD_ADDR_VAR 0 4
4402: PUSH
4403: LD_VAR 0 10
4407: PPUSH
4408: CALL_OW 250
4412: ST_TO_ADDR
// y := GetY ( enemy ) ;
4413: LD_ADDR_VAR 0 5
4417: PUSH
4418: LD_VAR 0 10
4422: PPUSH
4423: CALL_OW 251
4427: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4428: LD_ADDR_VAR 0 6
4432: PUSH
4433: LD_VAR 0 4
4437: PUSH
4438: LD_INT 1
4440: NEG
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL_OW 12
4449: PLUS
4450: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4451: LD_ADDR_VAR 0 7
4455: PUSH
4456: LD_VAR 0 5
4460: PUSH
4461: LD_INT 1
4463: NEG
4464: PPUSH
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 12
4472: PLUS
4473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4474: LD_VAR 0 6
4478: PPUSH
4479: LD_VAR 0 7
4483: PPUSH
4484: CALL_OW 488
4488: NOT
4489: IFFALSE 4511
// begin _x := x ;
4491: LD_ADDR_VAR 0 6
4495: PUSH
4496: LD_VAR 0 4
4500: ST_TO_ADDR
// _y := y ;
4501: LD_ADDR_VAR 0 7
4505: PUSH
4506: LD_VAR 0 5
4510: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: PPUSH
4519: LD_VAR 0 14
4523: PPUSH
4524: CALL_OW 12
4528: ST_TO_ADDR
// case i of 1 :
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 1
4536: DOUBLE
4537: EQUAL
4538: IFTRUE 4542
4540: GO 4559
4542: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4543: LD_VAR 0 1
4547: PPUSH
4548: LD_VAR 0 10
4552: PPUSH
4553: CALL_OW 115
4557: GO 4620
4559: LD_INT 2
4561: DOUBLE
4562: EQUAL
4563: IFTRUE 4567
4565: GO 4589
4567: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4568: LD_VAR 0 1
4572: PPUSH
4573: LD_VAR 0 6
4577: PPUSH
4578: LD_VAR 0 7
4582: PPUSH
4583: CALL_OW 153
4587: GO 4620
4589: LD_INT 3
4591: DOUBLE
4592: EQUAL
4593: IFTRUE 4597
4595: GO 4619
4597: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4598: LD_VAR 0 1
4602: PPUSH
4603: LD_VAR 0 6
4607: PPUSH
4608: LD_VAR 0 7
4612: PPUSH
4613: CALL_OW 154
4617: GO 4620
4619: POP
// end ;
4620: LD_VAR 0 2
4624: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// if not unit or not building then
4633: LD_VAR 0 1
4637: NOT
4638: IFTRUE 4647
4640: PUSH
4641: LD_VAR 0 2
4645: NOT
4646: OR
4647: IFFALSE 4651
// exit ;
4649: GO 4809
// x := GetX ( building ) ;
4651: LD_ADDR_VAR 0 5
4655: PUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: CALL_OW 250
4665: ST_TO_ADDR
// y := GetY ( building ) ;
4666: LD_ADDR_VAR 0 6
4670: PUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: CALL_OW 251
4680: ST_TO_ADDR
// for i := 0 to 5 do
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: DOUBLE
4687: LD_INT 0
4689: DEC
4690: ST_TO_ADDR
4691: LD_INT 5
4693: PUSH
4694: FOR_TO
4695: IFFALSE 4807
// begin _x := ShiftX ( x , i , 3 ) ;
4697: LD_ADDR_VAR 0 7
4701: PUSH
4702: LD_VAR 0 5
4706: PPUSH
4707: LD_VAR 0 4
4711: PPUSH
4712: LD_INT 3
4714: PPUSH
4715: CALL_OW 272
4719: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_VAR 0 6
4729: PPUSH
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_INT 3
4737: PPUSH
4738: CALL_OW 273
4742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4743: LD_VAR 0 7
4747: PPUSH
4748: LD_VAR 0 8
4752: PPUSH
4753: CALL_OW 488
4757: NOT
4758: IFFALSE 4762
// continue ;
4760: GO 4694
// if HexInfo ( _x , _y ) = 0 then
4762: LD_VAR 0 7
4766: PPUSH
4767: LD_VAR 0 8
4771: PPUSH
4772: CALL_OW 428
4776: PUSH
4777: LD_INT 0
4779: EQUAL
4780: IFFALSE 4805
// begin ComMoveXY ( unit , _x , _y ) ;
4782: LD_VAR 0 1
4786: PPUSH
4787: LD_VAR 0 7
4791: PPUSH
4792: LD_VAR 0 8
4796: PPUSH
4797: CALL_OW 111
// exit ;
4801: POP
4802: POP
4803: GO 4809
// end ; end ;
4805: GO 4694
4807: POP
4808: POP
// end ;
4809: LD_VAR 0 3
4813: RET
// export function ScanBase ( side , base_area ) ; begin
4814: LD_INT 0
4816: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: LD_INT 81
4829: PUSH
4830: LD_VAR 0 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 70
4843: ST_TO_ADDR
// end ;
4844: LD_VAR 0 3
4848: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4849: LD_INT 0
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
// result := false ;
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: LD_INT 0
4862: ST_TO_ADDR
// side := GetSide ( unit ) ;
4863: LD_ADDR_VAR 0 3
4867: PUSH
4868: LD_VAR 0 1
4872: PPUSH
4873: CALL_OW 255
4877: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4878: LD_ADDR_VAR 0 4
4882: PUSH
4883: LD_VAR 0 1
4887: PPUSH
4888: CALL_OW 248
4892: ST_TO_ADDR
// case nat of 1 :
4893: LD_VAR 0 4
4897: PUSH
4898: LD_INT 1
4900: DOUBLE
4901: EQUAL
4902: IFTRUE 4906
4904: GO 4917
4906: POP
// tech := tech_lassight ; 2 :
4907: LD_ADDR_VAR 0 5
4911: PUSH
4912: LD_INT 12
4914: ST_TO_ADDR
4915: GO 4956
4917: LD_INT 2
4919: DOUBLE
4920: EQUAL
4921: IFTRUE 4925
4923: GO 4936
4925: POP
// tech := tech_mortar ; 3 :
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: LD_INT 41
4933: ST_TO_ADDR
4934: GO 4956
4936: LD_INT 3
4938: DOUBLE
4939: EQUAL
4940: IFTRUE 4944
4942: GO 4955
4944: POP
// tech := tech_bazooka ; end ;
4945: LD_ADDR_VAR 0 5
4949: PUSH
4950: LD_INT 44
4952: ST_TO_ADDR
4953: GO 4956
4955: POP
// if Researched ( side , tech ) then
4956: LD_VAR 0 3
4960: PPUSH
4961: LD_VAR 0 5
4965: PPUSH
4966: CALL_OW 325
4970: IFFALSE 4997
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 8
4982: PUSH
4983: LD_INT 9
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_VAR 0 4
4995: ARRAY
4996: ST_TO_ADDR
// end ;
4997: LD_VAR 0 2
5001: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5002: LD_INT 0
5004: PPUSH
5005: PPUSH
5006: PPUSH
// if not mines then
5007: LD_VAR 0 2
5011: NOT
5012: IFFALSE 5016
// exit ;
5014: GO 5160
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5016: LD_ADDR_VAR 0 5
5020: PUSH
5021: LD_INT 81
5023: PUSH
5024: LD_VAR 0 1
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 69
5058: ST_TO_ADDR
// for i in mines do
5059: LD_ADDR_VAR 0 4
5063: PUSH
5064: LD_VAR 0 2
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5158
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5072: LD_VAR 0 4
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: LD_VAR 0 4
5085: PUSH
5086: LD_INT 2
5088: ARRAY
5089: PPUSH
5090: CALL_OW 458
5094: NOT
5095: IFFALSE 5099
// continue ;
5097: GO 5069
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5099: LD_VAR 0 4
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 4
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: CALL_OW 428
5121: PUSH
5122: LD_VAR 0 5
5126: IN
5127: IFFALSE 5156
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5129: LD_VAR 0 4
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 4
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 456
// end ;
5156: GO 5069
5158: POP
5159: POP
// end ;
5160: LD_VAR 0 3
5164: RET
// export function Count ( array ) ; begin
5165: LD_INT 0
5167: PPUSH
// result := array + 0 ;
5168: LD_ADDR_VAR 0 2
5172: PUSH
5173: LD_VAR 0 1
5177: PUSH
5178: LD_INT 0
5180: PLUS
5181: ST_TO_ADDR
// end ;
5182: LD_VAR 0 2
5186: RET
// export function IsEmpty ( building ) ; begin
5187: LD_INT 0
5189: PPUSH
// if not building then
5190: LD_VAR 0 1
5194: NOT
5195: IFFALSE 5199
// exit ;
5197: GO 5242
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_VAR 0 1
5208: PUSH
5209: LD_INT 22
5211: PUSH
5212: LD_VAR 0 1
5216: PPUSH
5217: CALL_OW 255
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 58
5228: PUSH
5229: EMPTY
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 69
5240: IN
5241: ST_TO_ADDR
// end ;
5242: LD_VAR 0 2
5246: RET
// export function IsNotFull ( building ) ; var places ; begin
5247: LD_INT 0
5249: PPUSH
5250: PPUSH
// if not building then
5251: LD_VAR 0 1
5255: NOT
5256: IFFALSE 5260
// exit ;
5258: GO 5288
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5260: LD_ADDR_VAR 0 2
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: LD_INT 3
5272: PUSH
5273: LD_INT 62
5275: PUSH
5276: EMPTY
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 72
5287: ST_TO_ADDR
// end ;
5288: LD_VAR 0 2
5292: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5293: LD_INT 0
5295: PPUSH
5296: PPUSH
5297: PPUSH
5298: PPUSH
// tmp := [ ] ;
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: EMPTY
5305: ST_TO_ADDR
// list := [ ] ;
5306: LD_ADDR_VAR 0 5
5310: PUSH
5311: EMPTY
5312: ST_TO_ADDR
// for i = 16 to 25 do
5313: LD_ADDR_VAR 0 4
5317: PUSH
5318: DOUBLE
5319: LD_INT 16
5321: DEC
5322: ST_TO_ADDR
5323: LD_INT 25
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5400
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5329: LD_ADDR_VAR 0 3
5333: PUSH
5334: LD_VAR 0 3
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_VAR 0 1
5346: PPUSH
5347: CALL_OW 255
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 91
5358: PUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 6
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 30
5374: PUSH
5375: LD_VAR 0 4
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: PUSH
5389: EMPTY
5390: LIST
5391: PPUSH
5392: CALL_OW 69
5396: ADD
5397: ST_TO_ADDR
5398: GO 5326
5400: POP
5401: POP
// for i = 1 to tmp do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_INT 1
5410: DEC
5411: ST_TO_ADDR
5412: LD_VAR 0 3
5416: PUSH
5417: FOR_TO
5418: IFFALSE 5506
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5420: LD_ADDR_VAR 0 5
5424: PUSH
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 266
5445: PUSH
5446: LD_VAR 0 3
5450: PUSH
5451: LD_VAR 0 4
5455: ARRAY
5456: PPUSH
5457: CALL_OW 250
5461: PUSH
5462: LD_VAR 0 3
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PPUSH
5473: CALL_OW 251
5477: PUSH
5478: LD_VAR 0 3
5482: PUSH
5483: LD_VAR 0 4
5487: ARRAY
5488: PPUSH
5489: CALL_OW 254
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PUSH
5500: EMPTY
5501: LIST
5502: ADD
5503: ST_TO_ADDR
5504: GO 5417
5506: POP
5507: POP
// result := list ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_VAR 0 5
5517: ST_TO_ADDR
// end ;
5518: LD_VAR 0 2
5522: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
// if not factory then
5532: LD_VAR 0 1
5536: NOT
5537: IFFALSE 5541
// exit ;
5539: GO 6144
// if control = control_apeman then
5541: LD_VAR 0 4
5545: PUSH
5546: LD_INT 5
5548: EQUAL
5549: IFFALSE 5658
// begin tmp := UnitsInside ( factory ) ;
5551: LD_ADDR_VAR 0 8
5555: PUSH
5556: LD_VAR 0 1
5560: PPUSH
5561: CALL_OW 313
5565: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5566: LD_VAR 0 8
5570: PPUSH
5571: LD_INT 25
5573: PUSH
5574: LD_INT 12
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PPUSH
5581: CALL_OW 72
5585: NOT
5586: IFFALSE 5596
// control := control_manual ;
5588: LD_ADDR_VAR 0 4
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5596: LD_ADDR_VAR 0 8
5600: PUSH
5601: LD_VAR 0 1
5605: PPUSH
5606: CALL 5293 0 1
5610: ST_TO_ADDR
// if tmp then
5611: LD_VAR 0 8
5615: IFFALSE 5658
// begin for i in tmp do
5617: LD_ADDR_VAR 0 7
5621: PUSH
5622: LD_VAR 0 8
5626: PUSH
5627: FOR_IN
5628: IFFALSE 5656
// if i [ 1 ] = b_ext_radio then
5630: LD_VAR 0 7
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PUSH
5639: LD_INT 22
5641: EQUAL
5642: IFFALSE 5654
// begin control := control_remote ;
5644: LD_ADDR_VAR 0 4
5648: PUSH
5649: LD_INT 2
5651: ST_TO_ADDR
// break ;
5652: GO 5656
// end ;
5654: GO 5627
5656: POP
5657: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5658: LD_VAR 0 1
5662: PPUSH
5663: LD_VAR 0 2
5667: PPUSH
5668: LD_VAR 0 3
5672: PPUSH
5673: LD_VAR 0 4
5677: PPUSH
5678: LD_VAR 0 5
5682: PPUSH
5683: CALL_OW 448
5687: IFFALSE 5722
// begin result := [ chassis , engine , control , weapon ] ;
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_VAR 0 3
5703: PUSH
5704: LD_VAR 0 4
5708: PUSH
5709: LD_VAR 0 5
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: ST_TO_ADDR
// exit ;
5720: GO 6144
// end ; _chassis := AvailableChassisList ( factory ) ;
5722: LD_ADDR_VAR 0 9
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 475
5736: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 476
5751: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5752: LD_ADDR_VAR 0 12
5756: PUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: CALL_OW 477
5766: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5767: LD_ADDR_VAR 0 10
5771: PUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 478
5781: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5782: LD_VAR 0 9
5786: NOT
5787: IFTRUE 5796
5789: PUSH
5790: LD_VAR 0 11
5794: NOT
5795: OR
5796: IFTRUE 5805
5798: PUSH
5799: LD_VAR 0 12
5803: NOT
5804: OR
5805: IFTRUE 5814
5807: PUSH
5808: LD_VAR 0 10
5812: NOT
5813: OR
5814: IFFALSE 5849
// begin result := [ chassis , engine , control , weapon ] ;
5816: LD_ADDR_VAR 0 6
5820: PUSH
5821: LD_VAR 0 2
5825: PUSH
5826: LD_VAR 0 3
5830: PUSH
5831: LD_VAR 0 4
5835: PUSH
5836: LD_VAR 0 5
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: ST_TO_ADDR
// exit ;
5847: GO 6144
// end ; if not chassis in _chassis then
5849: LD_VAR 0 2
5853: PUSH
5854: LD_VAR 0 9
5858: IN
5859: NOT
5860: IFFALSE 5886
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5862: LD_ADDR_VAR 0 2
5866: PUSH
5867: LD_VAR 0 9
5871: PUSH
5872: LD_INT 1
5874: PPUSH
5875: LD_VAR 0 9
5879: PPUSH
5880: CALL_OW 12
5884: ARRAY
5885: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5886: LD_VAR 0 2
5890: PPUSH
5891: LD_VAR 0 3
5895: PPUSH
5896: CALL 6149 0 2
5900: NOT
5901: IFFALSE 5962
// repeat engine := _engine [ 1 ] ;
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_VAR 0 11
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5917: LD_ADDR_VAR 0 11
5921: PUSH
5922: LD_VAR 0 11
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: CALL_OW 3
5934: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5935: LD_VAR 0 2
5939: PPUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL 6149 0 2
5949: IFTRUE 5960
5951: PUSH
5952: LD_VAR 0 11
5956: PUSH
5957: EMPTY
5958: EQUAL
5959: OR
5960: IFFALSE 5903
// if not control in _control then
5962: LD_VAR 0 4
5966: PUSH
5967: LD_VAR 0 12
5971: IN
5972: NOT
5973: IFFALSE 5999
// control := _control [ rand ( 1 , _control ) ] ;
5975: LD_ADDR_VAR 0 4
5979: PUSH
5980: LD_VAR 0 12
5984: PUSH
5985: LD_INT 1
5987: PPUSH
5988: LD_VAR 0 12
5992: PPUSH
5993: CALL_OW 12
5997: ARRAY
5998: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_VAR 0 5
6008: PPUSH
6009: CALL 6371 0 2
6013: NOT
6014: IFFALSE 6075
// repeat weapon := _weapon [ 1 ] ;
6016: LD_ADDR_VAR 0 5
6020: PUSH
6021: LD_VAR 0 10
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6030: LD_ADDR_VAR 0 10
6034: PUSH
6035: LD_VAR 0 10
6039: PPUSH
6040: LD_INT 1
6042: PPUSH
6043: CALL_OW 3
6047: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 5
6057: PPUSH
6058: CALL 6371 0 2
6062: IFTRUE 6073
6064: PUSH
6065: LD_VAR 0 10
6069: PUSH
6070: EMPTY
6071: EQUAL
6072: OR
6073: IFFALSE 6016
// result := [ ] ;
6075: LD_ADDR_VAR 0 6
6079: PUSH
6080: EMPTY
6081: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: LD_VAR 0 4
6101: PPUSH
6102: LD_VAR 0 5
6106: PPUSH
6107: CALL_OW 448
6111: IFFALSE 6144
// result := [ chassis , engine , control , weapon ] ;
6113: LD_ADDR_VAR 0 6
6117: PUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_VAR 0 4
6132: PUSH
6133: LD_VAR 0 5
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: ST_TO_ADDR
// end ;
6144: LD_VAR 0 6
6148: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6149: LD_INT 0
6151: PPUSH
// if not chassis or not engine then
6152: LD_VAR 0 1
6156: NOT
6157: IFTRUE 6166
6159: PUSH
6160: LD_VAR 0 2
6164: NOT
6165: OR
6166: IFFALSE 6170
// exit ;
6168: GO 6366
// case engine of engine_solar :
6170: LD_VAR 0 2
6174: PUSH
6175: LD_INT 2
6177: DOUBLE
6178: EQUAL
6179: IFTRUE 6183
6181: GO 6221
6183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 11
6191: PUSH
6192: LD_INT 12
6194: PUSH
6195: LD_INT 13
6197: PUSH
6198: LD_INT 14
6200: PUSH
6201: LD_INT 1
6203: PUSH
6204: LD_INT 2
6206: PUSH
6207: LD_INT 3
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: ST_TO_ADDR
6219: GO 6350
6221: LD_INT 1
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6291
6229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6230: LD_ADDR_VAR 0 3
6234: PUSH
6235: LD_INT 11
6237: PUSH
6238: LD_INT 12
6240: PUSH
6241: LD_INT 13
6243: PUSH
6244: LD_INT 14
6246: PUSH
6247: LD_INT 1
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: LD_INT 5
6261: PUSH
6262: LD_INT 21
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 22
6270: PUSH
6271: LD_INT 24
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: ST_TO_ADDR
6289: GO 6350
6291: LD_INT 3
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6299
6297: GO 6349
6299: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6300: LD_ADDR_VAR 0 3
6304: PUSH
6305: LD_INT 13
6307: PUSH
6308: LD_INT 14
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 22
6328: PUSH
6329: LD_INT 23
6331: PUSH
6332: LD_INT 24
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: ST_TO_ADDR
6347: GO 6350
6349: POP
// result := ( chassis in result ) ;
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_VAR 0 3
6364: IN
6365: ST_TO_ADDR
// end ;
6366: LD_VAR 0 3
6370: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6371: LD_INT 0
6373: PPUSH
// if not chassis or not weapon then
6374: LD_VAR 0 1
6378: NOT
6379: IFTRUE 6388
6381: PUSH
6382: LD_VAR 0 2
6386: NOT
6387: OR
6388: IFFALSE 6392
// exit ;
6390: GO 7486
// case weapon of us_machine_gun :
6392: LD_VAR 0 2
6396: PUSH
6397: LD_INT 2
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6435
6405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6406: LD_ADDR_VAR 0 3
6410: PUSH
6411: LD_INT 1
6413: PUSH
6414: LD_INT 2
6416: PUSH
6417: LD_INT 3
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: ST_TO_ADDR
6433: GO 7470
6435: LD_INT 3
6437: DOUBLE
6438: EQUAL
6439: IFTRUE 6443
6441: GO 6473
6443: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6444: LD_ADDR_VAR 0 3
6448: PUSH
6449: LD_INT 1
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: LD_INT 4
6460: PUSH
6461: LD_INT 5
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: ST_TO_ADDR
6471: GO 7470
6473: LD_INT 11
6475: DOUBLE
6476: EQUAL
6477: IFTRUE 6481
6479: GO 6511
6481: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6482: LD_ADDR_VAR 0 3
6486: PUSH
6487: LD_INT 1
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: LD_INT 5
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: ST_TO_ADDR
6509: GO 7470
6511: LD_INT 4
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6545
6519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6520: LD_ADDR_VAR 0 3
6524: PUSH
6525: LD_INT 2
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: ST_TO_ADDR
6543: GO 7470
6545: LD_INT 5
6547: DOUBLE
6548: EQUAL
6549: IFTRUE 6553
6551: GO 6579
6553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_INT 3
6564: PUSH
6565: LD_INT 4
6567: PUSH
6568: LD_INT 5
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7470
6579: LD_INT 9
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6613
6587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: LD_INT 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7470
6613: LD_INT 7
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6647
6621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6622: LD_ADDR_VAR 0 3
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7470
6647: LD_INT 12
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7470
6681: LD_INT 13
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6715
6689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
6713: GO 7470
6715: LD_INT 14
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6741
6723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_INT 4
6731: PUSH
6732: LD_INT 5
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: ST_TO_ADDR
6739: GO 7470
6741: LD_INT 6
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6767
6749: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 4
6757: PUSH
6758: LD_INT 5
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7470
6767: LD_INT 10
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 4
6783: PUSH
6784: LD_INT 5
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7470
6793: LD_INT 22
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6827
6801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 11
6809: PUSH
6810: LD_INT 12
6812: PUSH
6813: LD_INT 13
6815: PUSH
6816: LD_INT 14
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: ST_TO_ADDR
6825: GO 7470
6827: LD_INT 23
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6861
6835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6836: LD_ADDR_VAR 0 3
6840: PUSH
6841: LD_INT 11
6843: PUSH
6844: LD_INT 12
6846: PUSH
6847: LD_INT 13
6849: PUSH
6850: LD_INT 14
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: ST_TO_ADDR
6859: GO 7470
6861: LD_INT 24
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6895
6869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 11
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: LD_INT 14
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: ST_TO_ADDR
6893: GO 7470
6895: LD_INT 30
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6929
6903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
6927: GO 7470
6929: LD_INT 25
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6955
6937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 13
6945: PUSH
6946: LD_INT 14
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: ST_TO_ADDR
6953: GO 7470
6955: LD_INT 27
6957: DOUBLE
6958: EQUAL
6959: IFTRUE 6963
6961: GO 6981
6963: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_INT 13
6971: PUSH
6972: LD_INT 14
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: ST_TO_ADDR
6979: GO 7470
6981: LD_INT 92
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 7015
6989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 11
6997: PUSH
6998: LD_INT 12
7000: PUSH
7001: LD_INT 13
7003: PUSH
7004: LD_INT 14
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: ST_TO_ADDR
7013: GO 7470
7015: LD_INT 28
7017: DOUBLE
7018: EQUAL
7019: IFTRUE 7023
7021: GO 7041
7023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_INT 13
7031: PUSH
7032: LD_INT 14
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: ST_TO_ADDR
7039: GO 7470
7041: LD_INT 29
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7067
7049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7050: LD_ADDR_VAR 0 3
7054: PUSH
7055: LD_INT 13
7057: PUSH
7058: LD_INT 14
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: ST_TO_ADDR
7065: GO 7470
7067: LD_INT 31
7069: DOUBLE
7070: EQUAL
7071: IFTRUE 7075
7073: GO 7093
7075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 13
7083: PUSH
7084: LD_INT 14
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: ST_TO_ADDR
7091: GO 7470
7093: LD_INT 26
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7119
7101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7102: LD_ADDR_VAR 0 3
7106: PUSH
7107: LD_INT 13
7109: PUSH
7110: LD_INT 14
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: ST_TO_ADDR
7117: GO 7470
7119: LD_INT 42
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7153
7127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7128: LD_ADDR_VAR 0 3
7132: PUSH
7133: LD_INT 21
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 23
7141: PUSH
7142: LD_INT 24
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: ST_TO_ADDR
7151: GO 7470
7153: LD_INT 43
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7187
7161: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 22
7172: PUSH
7173: LD_INT 23
7175: PUSH
7176: LD_INT 24
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7470
7187: LD_INT 44
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7221
7195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: ST_TO_ADDR
7219: GO 7470
7221: LD_INT 45
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7255
7229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 22
7240: PUSH
7241: LD_INT 23
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
7253: GO 7470
7255: LD_INT 49
7257: DOUBLE
7258: EQUAL
7259: IFTRUE 7263
7261: GO 7289
7263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: ST_TO_ADDR
7287: GO 7470
7289: LD_INT 51
7291: DOUBLE
7292: EQUAL
7293: IFTRUE 7297
7295: GO 7323
7297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 21
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7470
7323: LD_INT 52
7325: DOUBLE
7326: EQUAL
7327: IFTRUE 7331
7329: GO 7357
7331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_INT 21
7339: PUSH
7340: LD_INT 22
7342: PUSH
7343: LD_INT 23
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: ST_TO_ADDR
7355: GO 7470
7357: LD_INT 53
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7383
7365: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 23
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7470
7383: LD_INT 46
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7409
7391: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_INT 23
7399: PUSH
7400: LD_INT 24
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: ST_TO_ADDR
7407: GO 7470
7409: LD_INT 47
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7435
7417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_INT 23
7425: PUSH
7426: LD_INT 24
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: ST_TO_ADDR
7433: GO 7470
7435: LD_INT 98
7437: DOUBLE
7438: EQUAL
7439: IFTRUE 7443
7441: GO 7469
7443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7444: LD_ADDR_VAR 0 3
7448: PUSH
7449: LD_INT 21
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_INT 23
7457: PUSH
7458: LD_INT 24
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 7470
7469: POP
// result := ( chassis in result ) ;
7470: LD_ADDR_VAR 0 3
7474: PUSH
7475: LD_VAR 0 1
7479: PUSH
7480: LD_VAR 0 3
7484: IN
7485: ST_TO_ADDR
// end ;
7486: LD_VAR 0 3
7490: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
7495: PPUSH
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
// result := array ;
7500: LD_ADDR_VAR 0 5
7504: PUSH
7505: LD_VAR 0 1
7509: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7510: LD_VAR 0 1
7514: NOT
7515: IFTRUE 7524
7517: PUSH
7518: LD_VAR 0 2
7522: NOT
7523: OR
7524: IFTRUE 7533
7526: PUSH
7527: LD_VAR 0 3
7531: NOT
7532: OR
7533: IFTRUE 7547
7535: PUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_VAR 0 1
7545: GREATER
7546: OR
7547: IFTRUE 7561
7549: PUSH
7550: LD_VAR 0 3
7554: PUSH
7555: LD_VAR 0 1
7559: GREATER
7560: OR
7561: IFFALSE 7565
// exit ;
7563: GO 7861
// if direction then
7565: LD_VAR 0 4
7569: IFFALSE 7633
// begin d := 1 ;
7571: LD_ADDR_VAR 0 9
7575: PUSH
7576: LD_INT 1
7578: ST_TO_ADDR
// if i_from > i_to then
7579: LD_VAR 0 2
7583: PUSH
7584: LD_VAR 0 3
7588: GREATER
7589: IFFALSE 7615
// length := ( array - i_from ) + i_to else
7591: LD_ADDR_VAR 0 11
7595: PUSH
7596: LD_VAR 0 1
7600: PUSH
7601: LD_VAR 0 2
7605: MINUS
7606: PUSH
7607: LD_VAR 0 3
7611: PLUS
7612: ST_TO_ADDR
7613: GO 7631
// length := i_to - i_from ;
7615: LD_ADDR_VAR 0 11
7619: PUSH
7620: LD_VAR 0 3
7624: PUSH
7625: LD_VAR 0 2
7629: MINUS
7630: ST_TO_ADDR
// end else
7631: GO 7694
// begin d := - 1 ;
7633: LD_ADDR_VAR 0 9
7637: PUSH
7638: LD_INT 1
7640: NEG
7641: ST_TO_ADDR
// if i_from > i_to then
7642: LD_VAR 0 2
7646: PUSH
7647: LD_VAR 0 3
7651: GREATER
7652: IFFALSE 7672
// length := i_from - i_to else
7654: LD_ADDR_VAR 0 11
7658: PUSH
7659: LD_VAR 0 2
7663: PUSH
7664: LD_VAR 0 3
7668: MINUS
7669: ST_TO_ADDR
7670: GO 7694
// length := ( array - i_to ) + i_from ;
7672: LD_ADDR_VAR 0 11
7676: PUSH
7677: LD_VAR 0 1
7681: PUSH
7682: LD_VAR 0 3
7686: MINUS
7687: PUSH
7688: LD_VAR 0 2
7692: PLUS
7693: ST_TO_ADDR
// end ; if not length then
7694: LD_VAR 0 11
7698: NOT
7699: IFFALSE 7703
// exit ;
7701: GO 7861
// tmp := array ;
7703: LD_ADDR_VAR 0 10
7707: PUSH
7708: LD_VAR 0 1
7712: ST_TO_ADDR
// for i = 1 to length do
7713: LD_ADDR_VAR 0 6
7717: PUSH
7718: DOUBLE
7719: LD_INT 1
7721: DEC
7722: ST_TO_ADDR
7723: LD_VAR 0 11
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7849
// begin for j = 1 to array do
7731: LD_ADDR_VAR 0 7
7735: PUSH
7736: DOUBLE
7737: LD_INT 1
7739: DEC
7740: ST_TO_ADDR
7741: LD_VAR 0 1
7745: PUSH
7746: FOR_TO
7747: IFFALSE 7835
// begin k := j + d ;
7749: LD_ADDR_VAR 0 8
7753: PUSH
7754: LD_VAR 0 7
7758: PUSH
7759: LD_VAR 0 9
7763: PLUS
7764: ST_TO_ADDR
// if k > array then
7765: LD_VAR 0 8
7769: PUSH
7770: LD_VAR 0 1
7774: GREATER
7775: IFFALSE 7785
// k := 1 ;
7777: LD_ADDR_VAR 0 8
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// if not k then
7785: LD_VAR 0 8
7789: NOT
7790: IFFALSE 7802
// k := array ;
7792: LD_ADDR_VAR 0 8
7796: PUSH
7797: LD_VAR 0 1
7801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7802: LD_ADDR_VAR 0 10
7806: PUSH
7807: LD_VAR 0 10
7811: PPUSH
7812: LD_VAR 0 8
7816: PPUSH
7817: LD_VAR 0 1
7821: PUSH
7822: LD_VAR 0 7
7826: ARRAY
7827: PPUSH
7828: CALL_OW 1
7832: ST_TO_ADDR
// end ;
7833: GO 7746
7835: POP
7836: POP
// array := tmp ;
7837: LD_ADDR_VAR 0 1
7841: PUSH
7842: LD_VAR 0 10
7846: ST_TO_ADDR
// end ;
7847: GO 7728
7849: POP
7850: POP
// result := array ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// end ;
7861: LD_VAR 0 5
7865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7866: LD_INT 0
7868: PPUSH
7869: PPUSH
// result := 0 ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 0
7877: ST_TO_ADDR
// if not array or not value in array then
7878: LD_VAR 0 1
7882: NOT
7883: IFTRUE 7898
7885: PUSH
7886: LD_VAR 0 2
7890: PUSH
7891: LD_VAR 0 1
7895: IN
7896: NOT
7897: OR
7898: IFFALSE 7902
// exit ;
7900: GO 7956
// for i = 1 to array do
7902: LD_ADDR_VAR 0 4
7906: PUSH
7907: DOUBLE
7908: LD_INT 1
7910: DEC
7911: ST_TO_ADDR
7912: LD_VAR 0 1
7916: PUSH
7917: FOR_TO
7918: IFFALSE 7954
// if value = array [ i ] then
7920: LD_VAR 0 2
7924: PUSH
7925: LD_VAR 0 1
7929: PUSH
7930: LD_VAR 0 4
7934: ARRAY
7935: EQUAL
7936: IFFALSE 7952
// begin result := i ;
7938: LD_ADDR_VAR 0 3
7942: PUSH
7943: LD_VAR 0 4
7947: ST_TO_ADDR
// exit ;
7948: POP
7949: POP
7950: GO 7956
// end ;
7952: GO 7917
7954: POP
7955: POP
// end ;
7956: LD_VAR 0 3
7960: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7961: LD_INT 0
7963: PPUSH
// vc_chassis := chassis ;
7964: LD_ADDR_OWVAR 37
7968: PUSH
7969: LD_VAR 0 1
7973: ST_TO_ADDR
// vc_engine := engine ;
7974: LD_ADDR_OWVAR 39
7978: PUSH
7979: LD_VAR 0 2
7983: ST_TO_ADDR
// vc_control := control ;
7984: LD_ADDR_OWVAR 38
7988: PUSH
7989: LD_VAR 0 3
7993: ST_TO_ADDR
// vc_weapon := weapon ;
7994: LD_ADDR_OWVAR 40
7998: PUSH
7999: LD_VAR 0 4
8003: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8004: LD_ADDR_OWVAR 41
8008: PUSH
8009: LD_VAR 0 5
8013: ST_TO_ADDR
// end ;
8014: LD_VAR 0 6
8018: RET
// export function WantPlant ( unit ) ; var task ; begin
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
// result := false ;
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: LD_INT 0
8030: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 437
8045: ST_TO_ADDR
// if task then
8046: LD_VAR 0 3
8050: IFFALSE 8078
// if task [ 1 ] [ 1 ] = p then
8052: LD_VAR 0 3
8056: PUSH
8057: LD_INT 1
8059: ARRAY
8060: PUSH
8061: LD_INT 1
8063: ARRAY
8064: PUSH
8065: LD_STRING p
8067: EQUAL
8068: IFFALSE 8078
// result := true ;
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 1
8077: ST_TO_ADDR
// end ;
8078: LD_VAR 0 2
8082: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8083: LD_INT 0
8085: PPUSH
8086: PPUSH
8087: PPUSH
8088: PPUSH
// if pos < 1 then
8089: LD_VAR 0 2
8093: PUSH
8094: LD_INT 1
8096: LESS
8097: IFFALSE 8101
// exit ;
8099: GO 8404
// if pos = 1 then
8101: LD_VAR 0 2
8105: PUSH
8106: LD_INT 1
8108: EQUAL
8109: IFFALSE 8142
// result := Replace ( arr , pos [ 1 ] , value ) else
8111: LD_ADDR_VAR 0 4
8115: PUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 1
8128: ARRAY
8129: PPUSH
8130: LD_VAR 0 3
8134: PPUSH
8135: CALL_OW 1
8139: ST_TO_ADDR
8140: GO 8404
// begin tmp := arr ;
8142: LD_ADDR_VAR 0 6
8146: PUSH
8147: LD_VAR 0 1
8151: ST_TO_ADDR
// s_arr := [ tmp ] ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_VAR 0 6
8161: PUSH
8162: EMPTY
8163: LIST
8164: ST_TO_ADDR
// for i = 1 to pos - 1 do
8165: LD_ADDR_VAR 0 5
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 2
8179: PUSH
8180: LD_INT 1
8182: MINUS
8183: PUSH
8184: FOR_TO
8185: IFFALSE 8230
// begin tmp := tmp [ pos [ i ] ] ;
8187: LD_ADDR_VAR 0 6
8191: PUSH
8192: LD_VAR 0 6
8196: PUSH
8197: LD_VAR 0 2
8201: PUSH
8202: LD_VAR 0 5
8206: ARRAY
8207: ARRAY
8208: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 7
8218: PUSH
8219: LD_VAR 0 6
8223: PUSH
8224: EMPTY
8225: LIST
8226: ADD
8227: ST_TO_ADDR
// end ;
8228: GO 8184
8230: POP
8231: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_VAR 0 6
8241: PPUSH
8242: LD_VAR 0 2
8246: PUSH
8247: LD_VAR 0 2
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 3
8257: PPUSH
8258: CALL_OW 1
8262: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8263: LD_ADDR_VAR 0 7
8267: PUSH
8268: LD_VAR 0 7
8272: PPUSH
8273: LD_VAR 0 7
8277: PPUSH
8278: LD_VAR 0 6
8282: PPUSH
8283: CALL_OW 1
8287: ST_TO_ADDR
// for i = s_arr downto 2 do
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: DOUBLE
8294: LD_VAR 0 7
8298: INC
8299: ST_TO_ADDR
8300: LD_INT 2
8302: PUSH
8303: FOR_DOWNTO
8304: IFFALSE 8388
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8306: LD_ADDR_VAR 0 6
8310: PUSH
8311: LD_VAR 0 7
8315: PUSH
8316: LD_VAR 0 5
8320: PUSH
8321: LD_INT 1
8323: MINUS
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 2
8330: PUSH
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: MINUS
8339: ARRAY
8340: PPUSH
8341: LD_VAR 0 7
8345: PUSH
8346: LD_VAR 0 5
8350: ARRAY
8351: PPUSH
8352: CALL_OW 1
8356: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: LD_VAR 0 7
8366: PPUSH
8367: LD_VAR 0 5
8371: PUSH
8372: LD_INT 1
8374: MINUS
8375: PPUSH
8376: LD_VAR 0 6
8380: PPUSH
8381: CALL_OW 1
8385: ST_TO_ADDR
// end ;
8386: GO 8303
8388: POP
8389: POP
// result := s_arr [ 1 ] ;
8390: LD_ADDR_VAR 0 4
8394: PUSH
8395: LD_VAR 0 7
8399: PUSH
8400: LD_INT 1
8402: ARRAY
8403: ST_TO_ADDR
// end ; end ;
8404: LD_VAR 0 4
8408: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8409: LD_INT 0
8411: PPUSH
8412: PPUSH
// if not list then
8413: LD_VAR 0 1
8417: NOT
8418: IFFALSE 8422
// exit ;
8420: GO 8513
// i := list [ pos1 ] ;
8422: LD_ADDR_VAR 0 5
8426: PUSH
8427: LD_VAR 0 1
8431: PUSH
8432: LD_VAR 0 2
8436: ARRAY
8437: ST_TO_ADDR
// if not i then
8438: LD_VAR 0 5
8442: NOT
8443: IFFALSE 8447
// exit ;
8445: GO 8513
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8447: LD_ADDR_VAR 0 1
8451: PUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_VAR 0 2
8461: PPUSH
8462: LD_VAR 0 1
8466: PUSH
8467: LD_VAR 0 3
8471: ARRAY
8472: PPUSH
8473: CALL_OW 1
8477: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8478: LD_ADDR_VAR 0 1
8482: PUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: LD_VAR 0 3
8492: PPUSH
8493: LD_VAR 0 5
8497: PPUSH
8498: CALL_OW 1
8502: ST_TO_ADDR
// result := list ;
8503: LD_ADDR_VAR 0 4
8507: PUSH
8508: LD_VAR 0 1
8512: ST_TO_ADDR
// end ;
8513: LD_VAR 0 4
8517: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8518: LD_INT 0
8520: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8521: LD_ADDR_VAR 0 5
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 250
8535: PPUSH
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 251
8545: PPUSH
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 3
8555: PPUSH
8556: LD_VAR 0 4
8560: PPUSH
8561: CALL 8943 0 5
8565: ST_TO_ADDR
// end ;
8566: LD_VAR 0 5
8570: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
// if not list or not unit then
8577: LD_VAR 0 2
8581: NOT
8582: IFTRUE 8591
8584: PUSH
8585: LD_VAR 0 1
8589: NOT
8590: OR
8591: IFFALSE 8595
// exit ;
8593: GO 8938
// result := [ ] ;
8595: LD_ADDR_VAR 0 5
8599: PUSH
8600: EMPTY
8601: ST_TO_ADDR
// for i in list do
8602: LD_ADDR_VAR 0 6
8606: PUSH
8607: LD_VAR 0 2
8611: PUSH
8612: FOR_IN
8613: IFFALSE 8831
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8615: LD_ADDR_VAR 0 8
8619: PUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: LD_VAR 0 6
8629: PUSH
8630: LD_INT 1
8632: ARRAY
8633: PPUSH
8634: LD_VAR 0 6
8638: PUSH
8639: LD_INT 2
8641: ARRAY
8642: PPUSH
8643: CALL_OW 297
8647: ST_TO_ADDR
// if not Count ( result ) then
8648: LD_VAR 0 5
8652: PPUSH
8653: CALL 5165 0 1
8657: NOT
8658: IFFALSE 8691
// begin result := Join ( result , [ i , tmp ] ) ;
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_VAR 0 6
8674: PUSH
8675: LD_VAR 0 8
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL 41131 0 2
8688: ST_TO_ADDR
// continue ;
8689: GO 8612
// end ; if result [ result ] [ 2 ] <= tmp then
8691: LD_VAR 0 5
8695: PUSH
8696: LD_VAR 0 5
8700: ARRAY
8701: PUSH
8702: LD_INT 2
8704: ARRAY
8705: PUSH
8706: LD_VAR 0 8
8710: LESSEQUAL
8711: IFFALSE 8744
// result := Join ( result , [ i , tmp ] ) else
8713: LD_ADDR_VAR 0 5
8717: PUSH
8718: LD_VAR 0 5
8722: PPUSH
8723: LD_VAR 0 6
8727: PUSH
8728: LD_VAR 0 8
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL 41131 0 2
8741: ST_TO_ADDR
8742: GO 8829
// begin for j := 1 to Count ( result ) do
8744: LD_ADDR_VAR 0 7
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_VAR 0 5
8758: PPUSH
8759: CALL 5165 0 1
8763: PUSH
8764: FOR_TO
8765: IFFALSE 8827
// begin if tmp < result [ j ] [ 2 ] then
8767: LD_VAR 0 8
8771: PUSH
8772: LD_VAR 0 5
8776: PUSH
8777: LD_VAR 0 7
8781: ARRAY
8782: PUSH
8783: LD_INT 2
8785: ARRAY
8786: LESS
8787: IFFALSE 8825
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 5
8798: PPUSH
8799: LD_VAR 0 7
8803: PPUSH
8804: LD_VAR 0 6
8808: PUSH
8809: LD_VAR 0 8
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 2
8822: ST_TO_ADDR
// break ;
8823: GO 8827
// end ; end ;
8825: GO 8764
8827: POP
8828: POP
// end ; end ;
8829: GO 8612
8831: POP
8832: POP
// if result and not asc then
8833: LD_VAR 0 5
8837: IFFALSE 8846
8839: PUSH
8840: LD_VAR 0 3
8844: NOT
8845: AND
8846: IFFALSE 8863
// result := ReverseArray ( result ) ;
8848: LD_ADDR_VAR 0 5
8852: PUSH
8853: LD_VAR 0 5
8857: PPUSH
8858: CALL 36221 0 1
8862: ST_TO_ADDR
// tmp := [ ] ;
8863: LD_ADDR_VAR 0 8
8867: PUSH
8868: EMPTY
8869: ST_TO_ADDR
// if mode then
8870: LD_VAR 0 4
8874: IFFALSE 8938
// begin for i := 1 to result do
8876: LD_ADDR_VAR 0 6
8880: PUSH
8881: DOUBLE
8882: LD_INT 1
8884: DEC
8885: ST_TO_ADDR
8886: LD_VAR 0 5
8890: PUSH
8891: FOR_TO
8892: IFFALSE 8926
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8894: LD_ADDR_VAR 0 8
8898: PUSH
8899: LD_VAR 0 8
8903: PPUSH
8904: LD_VAR 0 5
8908: PUSH
8909: LD_VAR 0 6
8913: ARRAY
8914: PUSH
8915: LD_INT 1
8917: ARRAY
8918: PPUSH
8919: CALL 41131 0 2
8923: ST_TO_ADDR
8924: GO 8891
8926: POP
8927: POP
// result := tmp ;
8928: LD_ADDR_VAR 0 5
8932: PUSH
8933: LD_VAR 0 8
8937: ST_TO_ADDR
// end ; end ;
8938: LD_VAR 0 5
8942: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8943: LD_INT 0
8945: PPUSH
8946: PPUSH
8947: PPUSH
8948: PPUSH
// if not list then
8949: LD_VAR 0 3
8953: NOT
8954: IFFALSE 8958
// exit ;
8956: GO 9348
// result := [ ] ;
8958: LD_ADDR_VAR 0 6
8962: PUSH
8963: EMPTY
8964: ST_TO_ADDR
// for i in list do
8965: LD_ADDR_VAR 0 7
8969: PUSH
8970: LD_VAR 0 3
8974: PUSH
8975: FOR_IN
8976: IFFALSE 9178
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8978: LD_ADDR_VAR 0 9
8982: PUSH
8983: LD_VAR 0 7
8987: PPUSH
8988: LD_VAR 0 1
8992: PPUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: CALL_OW 297
9002: ST_TO_ADDR
// if not result then
9003: LD_VAR 0 6
9007: NOT
9008: IFFALSE 9034
// result := [ [ i , tmp ] ] else
9010: LD_ADDR_VAR 0 6
9014: PUSH
9015: LD_VAR 0 7
9019: PUSH
9020: LD_VAR 0 9
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: ST_TO_ADDR
9032: GO 9176
// begin if result [ result ] [ 2 ] <= tmp then
9034: LD_VAR 0 6
9038: PUSH
9039: LD_VAR 0 6
9043: ARRAY
9044: PUSH
9045: LD_INT 2
9047: ARRAY
9048: PUSH
9049: LD_VAR 0 9
9053: LESSEQUAL
9054: IFFALSE 9096
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9056: LD_ADDR_VAR 0 6
9060: PUSH
9061: LD_VAR 0 6
9065: PPUSH
9066: LD_VAR 0 6
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: PPUSH
9075: LD_VAR 0 7
9079: PUSH
9080: LD_VAR 0 9
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 2
9093: ST_TO_ADDR
9094: GO 9176
// for j := 1 to result do
9096: LD_ADDR_VAR 0 8
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_VAR 0 6
9110: PUSH
9111: FOR_TO
9112: IFFALSE 9174
// begin if tmp < result [ j ] [ 2 ] then
9114: LD_VAR 0 9
9118: PUSH
9119: LD_VAR 0 6
9123: PUSH
9124: LD_VAR 0 8
9128: ARRAY
9129: PUSH
9130: LD_INT 2
9132: ARRAY
9133: LESS
9134: IFFALSE 9172
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9136: LD_ADDR_VAR 0 6
9140: PUSH
9141: LD_VAR 0 6
9145: PPUSH
9146: LD_VAR 0 8
9150: PPUSH
9151: LD_VAR 0 7
9155: PUSH
9156: LD_VAR 0 9
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 2
9169: ST_TO_ADDR
// break ;
9170: GO 9174
// end ; end ;
9172: GO 9111
9174: POP
9175: POP
// end ; end ;
9176: GO 8975
9178: POP
9179: POP
// if result and not asc then
9180: LD_VAR 0 6
9184: IFFALSE 9193
9186: PUSH
9187: LD_VAR 0 4
9191: NOT
9192: AND
9193: IFFALSE 9268
// begin tmp := result ;
9195: LD_ADDR_VAR 0 9
9199: PUSH
9200: LD_VAR 0 6
9204: ST_TO_ADDR
// for i = tmp downto 1 do
9205: LD_ADDR_VAR 0 7
9209: PUSH
9210: DOUBLE
9211: LD_VAR 0 9
9215: INC
9216: ST_TO_ADDR
9217: LD_INT 1
9219: PUSH
9220: FOR_DOWNTO
9221: IFFALSE 9266
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9223: LD_ADDR_VAR 0 6
9227: PUSH
9228: LD_VAR 0 6
9232: PPUSH
9233: LD_VAR 0 9
9237: PUSH
9238: LD_VAR 0 7
9242: MINUS
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: PPUSH
9248: LD_VAR 0 9
9252: PUSH
9253: LD_VAR 0 7
9257: ARRAY
9258: PPUSH
9259: CALL_OW 1
9263: ST_TO_ADDR
9264: GO 9220
9266: POP
9267: POP
// end ; tmp := [ ] ;
9268: LD_ADDR_VAR 0 9
9272: PUSH
9273: EMPTY
9274: ST_TO_ADDR
// if mode then
9275: LD_VAR 0 5
9279: IFFALSE 9348
// begin for i = 1 to result do
9281: LD_ADDR_VAR 0 7
9285: PUSH
9286: DOUBLE
9287: LD_INT 1
9289: DEC
9290: ST_TO_ADDR
9291: LD_VAR 0 6
9295: PUSH
9296: FOR_TO
9297: IFFALSE 9336
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9299: LD_ADDR_VAR 0 9
9303: PUSH
9304: LD_VAR 0 9
9308: PPUSH
9309: LD_VAR 0 7
9313: PPUSH
9314: LD_VAR 0 6
9318: PUSH
9319: LD_VAR 0 7
9323: ARRAY
9324: PUSH
9325: LD_INT 1
9327: ARRAY
9328: PPUSH
9329: CALL_OW 1
9333: ST_TO_ADDR
9334: GO 9296
9336: POP
9337: POP
// result := tmp ;
9338: LD_ADDR_VAR 0 6
9342: PUSH
9343: LD_VAR 0 9
9347: ST_TO_ADDR
// end ; end ;
9348: LD_VAR 0 6
9352: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9353: LD_INT 0
9355: PPUSH
9356: PPUSH
9357: PPUSH
9358: PPUSH
9359: PPUSH
9360: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9361: LD_ADDR_VAR 0 5
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: LD_INT 0
9371: PUSH
9372: LD_INT 0
9374: PUSH
9375: EMPTY
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: ST_TO_ADDR
// if not x or not y then
9383: LD_VAR 0 2
9387: NOT
9388: IFTRUE 9397
9390: PUSH
9391: LD_VAR 0 3
9395: NOT
9396: OR
9397: IFFALSE 9401
// exit ;
9399: GO 11057
// if not range then
9401: LD_VAR 0 4
9405: NOT
9406: IFFALSE 9416
// range := 10 ;
9408: LD_ADDR_VAR 0 4
9412: PUSH
9413: LD_INT 10
9415: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9416: LD_ADDR_VAR 0 8
9420: PUSH
9421: LD_INT 81
9423: PUSH
9424: LD_VAR 0 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 92
9435: PUSH
9436: LD_VAR 0 2
9440: PUSH
9441: LD_VAR 0 3
9445: PUSH
9446: LD_VAR 0 4
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: LD_INT 21
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 69
9483: ST_TO_ADDR
// if not tmp then
9484: LD_VAR 0 8
9488: NOT
9489: IFFALSE 9493
// exit ;
9491: GO 11057
// for i in tmp do
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 8
9502: PUSH
9503: FOR_IN
9504: IFFALSE 11032
// begin points := [ 0 , 0 , 0 ] ;
9506: LD_ADDR_VAR 0 9
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: LD_INT 0
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: ST_TO_ADDR
// bpoints := 1 ;
9525: LD_ADDR_VAR 0 10
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9533: LD_VAR 0 6
9537: PPUSH
9538: CALL_OW 247
9542: PUSH
9543: LD_INT 1
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 10133
9551: POP
// begin if GetClass ( i ) = 1 then
9552: LD_VAR 0 6
9556: PPUSH
9557: CALL_OW 257
9561: PUSH
9562: LD_INT 1
9564: EQUAL
9565: IFFALSE 9586
// points := [ 10 , 5 , 3 ] ;
9567: LD_ADDR_VAR 0 9
9571: PUSH
9572: LD_INT 10
9574: PUSH
9575: LD_INT 5
9577: PUSH
9578: LD_INT 3
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9586: LD_VAR 0 6
9590: PPUSH
9591: CALL_OW 257
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: LD_INT 4
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: IN
9610: IFFALSE 9631
// points := [ 3 , 2 , 1 ] ;
9612: LD_ADDR_VAR 0 9
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 2
9622: PUSH
9623: LD_INT 1
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9631: LD_VAR 0 6
9635: PPUSH
9636: CALL_OW 257
9640: PUSH
9641: LD_INT 5
9643: EQUAL
9644: IFFALSE 9665
// points := [ 130 , 5 , 2 ] ;
9646: LD_ADDR_VAR 0 9
9650: PUSH
9651: LD_INT 130
9653: PUSH
9654: LD_INT 5
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9665: LD_VAR 0 6
9669: PPUSH
9670: CALL_OW 257
9674: PUSH
9675: LD_INT 8
9677: EQUAL
9678: IFFALSE 9699
// points := [ 35 , 35 , 30 ] ;
9680: LD_ADDR_VAR 0 9
9684: PUSH
9685: LD_INT 35
9687: PUSH
9688: LD_INT 35
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9699: LD_VAR 0 6
9703: PPUSH
9704: CALL_OW 257
9708: PUSH
9709: LD_INT 9
9711: EQUAL
9712: IFFALSE 9733
// points := [ 20 , 55 , 40 ] ;
9714: LD_ADDR_VAR 0 9
9718: PUSH
9719: LD_INT 20
9721: PUSH
9722: LD_INT 55
9724: PUSH
9725: LD_INT 40
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 257
9742: PUSH
9743: LD_INT 12
9745: PUSH
9746: LD_INT 16
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: IN
9753: IFFALSE 9774
// points := [ 5 , 3 , 2 ] ;
9755: LD_ADDR_VAR 0 9
9759: PUSH
9760: LD_INT 5
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9774: LD_VAR 0 6
9778: PPUSH
9779: CALL_OW 257
9783: PUSH
9784: LD_INT 17
9786: EQUAL
9787: IFFALSE 9808
// points := [ 100 , 50 , 75 ] ;
9789: LD_ADDR_VAR 0 9
9793: PUSH
9794: LD_INT 100
9796: PUSH
9797: LD_INT 50
9799: PUSH
9800: LD_INT 75
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9808: LD_VAR 0 6
9812: PPUSH
9813: CALL_OW 257
9817: PUSH
9818: LD_INT 15
9820: EQUAL
9821: IFFALSE 9842
// points := [ 10 , 5 , 3 ] ;
9823: LD_ADDR_VAR 0 9
9827: PUSH
9828: LD_INT 10
9830: PUSH
9831: LD_INT 5
9833: PUSH
9834: LD_INT 3
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 257
9851: PUSH
9852: LD_INT 14
9854: EQUAL
9855: IFFALSE 9876
// points := [ 10 , 0 , 0 ] ;
9857: LD_ADDR_VAR 0 9
9861: PUSH
9862: LD_INT 10
9864: PUSH
9865: LD_INT 0
9867: PUSH
9868: LD_INT 0
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9876: LD_VAR 0 6
9880: PPUSH
9881: CALL_OW 257
9885: PUSH
9886: LD_INT 11
9888: EQUAL
9889: IFFALSE 9910
// points := [ 30 , 10 , 5 ] ;
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: LD_INT 30
9898: PUSH
9899: LD_INT 10
9901: PUSH
9902: LD_INT 5
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9910: LD_VAR 0 1
9914: PPUSH
9915: LD_INT 5
9917: PPUSH
9918: CALL_OW 321
9922: PUSH
9923: LD_INT 2
9925: EQUAL
9926: IFFALSE 9943
// bpoints := bpoints * 1.8 ;
9928: LD_ADDR_VAR 0 10
9932: PUSH
9933: LD_VAR 0 10
9937: PUSH
9938: LD_REAL  1.80000000000000E+0000
9941: MUL
9942: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 257
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: LD_INT 4
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: IN
9971: IFFALSE 9991
9973: PUSH
9974: LD_VAR 0 1
9978: PPUSH
9979: LD_INT 51
9981: PPUSH
9982: CALL_OW 321
9986: PUSH
9987: LD_INT 2
9989: EQUAL
9990: AND
9991: IFFALSE 10008
// bpoints := bpoints * 1.2 ;
9993: LD_ADDR_VAR 0 10
9997: PUSH
9998: LD_VAR 0 10
10002: PUSH
10003: LD_REAL  1.20000000000000E+0000
10006: MUL
10007: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10008: LD_VAR 0 6
10012: PPUSH
10013: CALL_OW 257
10017: PUSH
10018: LD_INT 5
10020: PUSH
10021: LD_INT 7
10023: PUSH
10024: LD_INT 9
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: IN
10032: IFFALSE 10052
10034: PUSH
10035: LD_VAR 0 1
10039: PPUSH
10040: LD_INT 52
10042: PPUSH
10043: CALL_OW 321
10047: PUSH
10048: LD_INT 2
10050: EQUAL
10051: AND
10052: IFFALSE 10069
// bpoints := bpoints * 1.5 ;
10054: LD_ADDR_VAR 0 10
10058: PUSH
10059: LD_VAR 0 10
10063: PUSH
10064: LD_REAL  1.50000000000000E+0000
10067: MUL
10068: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_INT 66
10076: PPUSH
10077: CALL_OW 321
10081: PUSH
10082: LD_INT 2
10084: EQUAL
10085: IFFALSE 10102
// bpoints := bpoints * 1.1 ;
10087: LD_ADDR_VAR 0 10
10091: PUSH
10092: LD_VAR 0 10
10096: PUSH
10097: LD_REAL  1.10000000000000E+0000
10100: MUL
10101: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10102: LD_ADDR_VAR 0 10
10106: PUSH
10107: LD_VAR 0 10
10111: PUSH
10112: LD_VAR 0 6
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 259
10124: PUSH
10125: LD_REAL  1.15000000000000E+0000
10128: MUL
10129: MUL
10130: ST_TO_ADDR
// end ; unit_vehicle :
10131: GO 10961
10133: LD_INT 2
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10949
10141: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10142: LD_VAR 0 6
10146: PPUSH
10147: CALL_OW 264
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: LD_INT 42
10157: PUSH
10158: LD_INT 24
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: IN
10166: IFFALSE 10187
// points := [ 25 , 5 , 3 ] ;
10168: LD_ADDR_VAR 0 9
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10187: LD_VAR 0 6
10191: PPUSH
10192: CALL_OW 264
10196: PUSH
10197: LD_INT 4
10199: PUSH
10200: LD_INT 43
10202: PUSH
10203: LD_INT 25
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: IN
10211: IFFALSE 10232
// points := [ 40 , 15 , 5 ] ;
10213: LD_ADDR_VAR 0 9
10217: PUSH
10218: LD_INT 40
10220: PUSH
10221: LD_INT 15
10223: PUSH
10224: LD_INT 5
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10232: LD_VAR 0 6
10236: PPUSH
10237: CALL_OW 264
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: LD_INT 23
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: IN
10252: IFFALSE 10273
// points := [ 7 , 25 , 8 ] ;
10254: LD_ADDR_VAR 0 9
10258: PUSH
10259: LD_INT 7
10261: PUSH
10262: LD_INT 25
10264: PUSH
10265: LD_INT 8
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10273: LD_VAR 0 6
10277: PPUSH
10278: CALL_OW 264
10282: PUSH
10283: LD_INT 5
10285: PUSH
10286: LD_INT 27
10288: PUSH
10289: LD_INT 44
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: IN
10297: IFFALSE 10318
// points := [ 14 , 50 , 16 ] ;
10299: LD_ADDR_VAR 0 9
10303: PUSH
10304: LD_INT 14
10306: PUSH
10307: LD_INT 50
10309: PUSH
10310: LD_INT 16
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10318: LD_VAR 0 6
10322: PPUSH
10323: CALL_OW 264
10327: PUSH
10328: LD_INT 6
10330: PUSH
10331: LD_INT 46
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: IN
10338: IFFALSE 10359
// points := [ 32 , 120 , 70 ] ;
10340: LD_ADDR_VAR 0 9
10344: PUSH
10345: LD_INT 32
10347: PUSH
10348: LD_INT 120
10350: PUSH
10351: LD_INT 70
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10359: LD_VAR 0 6
10363: PPUSH
10364: CALL_OW 264
10368: PUSH
10369: LD_INT 7
10371: PUSH
10372: LD_INT 28
10374: PUSH
10375: LD_INT 45
10377: PUSH
10378: LD_INT 92
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: IN
10387: IFFALSE 10408
// points := [ 35 , 20 , 45 ] ;
10389: LD_ADDR_VAR 0 9
10393: PUSH
10394: LD_INT 35
10396: PUSH
10397: LD_INT 20
10399: PUSH
10400: LD_INT 45
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10408: LD_VAR 0 6
10412: PPUSH
10413: CALL_OW 264
10417: PUSH
10418: LD_INT 47
10420: PUSH
10421: EMPTY
10422: LIST
10423: IN
10424: IFFALSE 10445
// points := [ 67 , 45 , 75 ] ;
10426: LD_ADDR_VAR 0 9
10430: PUSH
10431: LD_INT 67
10433: PUSH
10434: LD_INT 45
10436: PUSH
10437: LD_INT 75
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 264
10454: PUSH
10455: LD_INT 26
10457: PUSH
10458: EMPTY
10459: LIST
10460: IN
10461: IFFALSE 10482
// points := [ 120 , 30 , 80 ] ;
10463: LD_ADDR_VAR 0 9
10467: PUSH
10468: LD_INT 120
10470: PUSH
10471: LD_INT 30
10473: PUSH
10474: LD_INT 80
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10482: LD_VAR 0 6
10486: PPUSH
10487: CALL_OW 264
10491: PUSH
10492: LD_INT 22
10494: PUSH
10495: EMPTY
10496: LIST
10497: IN
10498: IFFALSE 10519
// points := [ 40 , 1 , 1 ] ;
10500: LD_ADDR_VAR 0 9
10504: PUSH
10505: LD_INT 40
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: LD_INT 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL_OW 264
10528: PUSH
10529: LD_INT 29
10531: PUSH
10532: EMPTY
10533: LIST
10534: IN
10535: IFFALSE 10556
// points := [ 70 , 200 , 400 ] ;
10537: LD_ADDR_VAR 0 9
10541: PUSH
10542: LD_INT 70
10544: PUSH
10545: LD_INT 200
10547: PUSH
10548: LD_INT 400
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10556: LD_VAR 0 6
10560: PPUSH
10561: CALL_OW 264
10565: PUSH
10566: LD_INT 14
10568: PUSH
10569: LD_INT 53
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: IN
10576: IFFALSE 10597
// points := [ 40 , 10 , 20 ] ;
10578: LD_ADDR_VAR 0 9
10582: PUSH
10583: LD_INT 40
10585: PUSH
10586: LD_INT 10
10588: PUSH
10589: LD_INT 20
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10597: LD_VAR 0 6
10601: PPUSH
10602: CALL_OW 264
10606: PUSH
10607: LD_INT 9
10609: PUSH
10610: EMPTY
10611: LIST
10612: IN
10613: IFFALSE 10634
// points := [ 5 , 70 , 20 ] ;
10615: LD_ADDR_VAR 0 9
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: LD_INT 70
10625: PUSH
10626: LD_INT 20
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10634: LD_VAR 0 6
10638: PPUSH
10639: CALL_OW 264
10643: PUSH
10644: LD_INT 10
10646: PUSH
10647: EMPTY
10648: LIST
10649: IN
10650: IFFALSE 10671
// points := [ 35 , 110 , 70 ] ;
10652: LD_ADDR_VAR 0 9
10656: PUSH
10657: LD_INT 35
10659: PUSH
10660: LD_INT 110
10662: PUSH
10663: LD_INT 70
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10671: LD_VAR 0 6
10675: PPUSH
10676: CALL_OW 265
10680: PUSH
10681: LD_INT 25
10683: EQUAL
10684: IFFALSE 10705
// points := [ 80 , 65 , 100 ] ;
10686: LD_ADDR_VAR 0 9
10690: PUSH
10691: LD_INT 80
10693: PUSH
10694: LD_INT 65
10696: PUSH
10697: LD_INT 100
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10705: LD_VAR 0 6
10709: PPUSH
10710: CALL_OW 263
10714: PUSH
10715: LD_INT 1
10717: EQUAL
10718: IFFALSE 10753
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10720: LD_ADDR_VAR 0 10
10724: PUSH
10725: LD_VAR 0 10
10729: PUSH
10730: LD_VAR 0 6
10734: PPUSH
10735: CALL_OW 311
10739: PPUSH
10740: LD_INT 3
10742: PPUSH
10743: CALL_OW 259
10747: PUSH
10748: LD_INT 4
10750: MUL
10751: MUL
10752: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10753: LD_VAR 0 6
10757: PPUSH
10758: CALL_OW 263
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: IFFALSE 10817
// begin j := IsControledBy ( i ) ;
10768: LD_ADDR_VAR 0 7
10772: PUSH
10773: LD_VAR 0 6
10777: PPUSH
10778: CALL_OW 312
10782: ST_TO_ADDR
// if j then
10783: LD_VAR 0 7
10787: IFFALSE 10817
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10789: LD_ADDR_VAR 0 10
10793: PUSH
10794: LD_VAR 0 10
10798: PUSH
10799: LD_VAR 0 7
10803: PPUSH
10804: LD_INT 3
10806: PPUSH
10807: CALL_OW 259
10811: PUSH
10812: LD_INT 3
10814: MUL
10815: MUL
10816: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10817: LD_VAR 0 6
10821: PPUSH
10822: CALL_OW 264
10826: PUSH
10827: LD_INT 5
10829: PUSH
10830: LD_INT 6
10832: PUSH
10833: LD_INT 46
10835: PUSH
10836: LD_INT 44
10838: PUSH
10839: LD_INT 47
10841: PUSH
10842: LD_INT 45
10844: PUSH
10845: LD_INT 28
10847: PUSH
10848: LD_INT 7
10850: PUSH
10851: LD_INT 27
10853: PUSH
10854: LD_INT 29
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: IN
10869: IFFALSE 10889
10871: PUSH
10872: LD_VAR 0 1
10876: PPUSH
10877: LD_INT 52
10879: PPUSH
10880: CALL_OW 321
10884: PUSH
10885: LD_INT 2
10887: EQUAL
10888: AND
10889: IFFALSE 10906
// bpoints := bpoints * 1.2 ;
10891: LD_ADDR_VAR 0 10
10895: PUSH
10896: LD_VAR 0 10
10900: PUSH
10901: LD_REAL  1.20000000000000E+0000
10904: MUL
10905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10906: LD_VAR 0 6
10910: PPUSH
10911: CALL_OW 264
10915: PUSH
10916: LD_INT 6
10918: PUSH
10919: LD_INT 46
10921: PUSH
10922: LD_INT 47
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: IN
10930: IFFALSE 10947
// bpoints := bpoints * 1.2 ;
10932: LD_ADDR_VAR 0 10
10936: PUSH
10937: LD_VAR 0 10
10941: PUSH
10942: LD_REAL  1.20000000000000E+0000
10945: MUL
10946: ST_TO_ADDR
// end ; unit_building :
10947: GO 10961
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10960
10957: POP
// ; end ;
10958: GO 10961
10960: POP
// for j = 1 to 3 do
10961: LD_ADDR_VAR 0 7
10965: PUSH
10966: DOUBLE
10967: LD_INT 1
10969: DEC
10970: ST_TO_ADDR
10971: LD_INT 3
10973: PUSH
10974: FOR_TO
10975: IFFALSE 11028
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: LD_VAR 0 5
10986: PPUSH
10987: LD_VAR 0 7
10991: PPUSH
10992: LD_VAR 0 5
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PUSH
11003: LD_VAR 0 9
11007: PUSH
11008: LD_VAR 0 7
11012: ARRAY
11013: PUSH
11014: LD_VAR 0 10
11018: MUL
11019: PLUS
11020: PPUSH
11021: CALL_OW 1
11025: ST_TO_ADDR
11026: GO 10974
11028: POP
11029: POP
// end ;
11030: GO 9503
11032: POP
11033: POP
// result := Replace ( result , 4 , tmp ) ;
11034: LD_ADDR_VAR 0 5
11038: PUSH
11039: LD_VAR 0 5
11043: PPUSH
11044: LD_INT 4
11046: PPUSH
11047: LD_VAR 0 8
11051: PPUSH
11052: CALL_OW 1
11056: ST_TO_ADDR
// end ;
11057: LD_VAR 0 5
11061: RET
// export function DangerAtRange ( unit , range ) ; begin
11062: LD_INT 0
11064: PPUSH
// if not unit then
11065: LD_VAR 0 1
11069: NOT
11070: IFFALSE 11074
// exit ;
11072: GO 11119
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11074: LD_ADDR_VAR 0 3
11078: PUSH
11079: LD_VAR 0 1
11083: PPUSH
11084: CALL_OW 255
11088: PPUSH
11089: LD_VAR 0 1
11093: PPUSH
11094: CALL_OW 250
11098: PPUSH
11099: LD_VAR 0 1
11103: PPUSH
11104: CALL_OW 251
11108: PPUSH
11109: LD_VAR 0 2
11113: PPUSH
11114: CALL 9353 0 4
11118: ST_TO_ADDR
// end ;
11119: LD_VAR 0 3
11123: RET
// export function DangerInArea ( side , area ) ; begin
11124: LD_INT 0
11126: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11127: LD_ADDR_VAR 0 3
11131: PUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: LD_INT 81
11139: PUSH
11140: LD_VAR 0 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 70
11153: ST_TO_ADDR
// end ;
11154: LD_VAR 0 3
11158: RET
// export function IsExtension ( b ) ; begin
11159: LD_INT 0
11161: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11162: LD_ADDR_VAR 0 2
11166: PUSH
11167: LD_VAR 0 1
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 20
11177: PUSH
11178: LD_INT 22
11180: PUSH
11181: LD_INT 17
11183: PUSH
11184: LD_INT 24
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 19
11192: PUSH
11193: LD_INT 16
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 18
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: IN
11214: ST_TO_ADDR
// end ;
11215: LD_VAR 0 2
11219: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11220: LD_INT 0
11222: PPUSH
11223: PPUSH
11224: PPUSH
// result := [ ] ;
11225: LD_ADDR_VAR 0 4
11229: PUSH
11230: EMPTY
11231: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11232: LD_ADDR_VAR 0 5
11236: PUSH
11237: LD_VAR 0 2
11241: PPUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 3
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 70
11256: ST_TO_ADDR
// if not tmp then
11257: LD_VAR 0 5
11261: NOT
11262: IFFALSE 11266
// exit ;
11264: GO 11330
// if checkLink then
11266: LD_VAR 0 3
11270: IFFALSE 11320
// begin for i in tmp do
11272: LD_ADDR_VAR 0 6
11276: PUSH
11277: LD_VAR 0 5
11281: PUSH
11282: FOR_IN
11283: IFFALSE 11318
// if GetBase ( i ) <> base then
11285: LD_VAR 0 6
11289: PPUSH
11290: CALL_OW 274
11294: PUSH
11295: LD_VAR 0 1
11299: NONEQUAL
11300: IFFALSE 11316
// ComLinkToBase ( base , i ) ;
11302: LD_VAR 0 1
11306: PPUSH
11307: LD_VAR 0 6
11311: PPUSH
11312: CALL_OW 169
11316: GO 11282
11318: POP
11319: POP
// end ; result := tmp ;
11320: LD_ADDR_VAR 0 4
11324: PUSH
11325: LD_VAR 0 5
11329: ST_TO_ADDR
// end ;
11330: LD_VAR 0 4
11334: RET
// export function ComComplete ( units , b ) ; var i ; begin
11335: LD_INT 0
11337: PPUSH
11338: PPUSH
// if not units then
11339: LD_VAR 0 1
11343: NOT
11344: IFFALSE 11348
// exit ;
11346: GO 11438
// for i in units do
11348: LD_ADDR_VAR 0 4
11352: PUSH
11353: LD_VAR 0 1
11357: PUSH
11358: FOR_IN
11359: IFFALSE 11436
// if BuildingStatus ( b ) = bs_build then
11361: LD_VAR 0 2
11365: PPUSH
11366: CALL_OW 461
11370: PUSH
11371: LD_INT 1
11373: EQUAL
11374: IFFALSE 11434
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11376: LD_VAR 0 4
11380: PPUSH
11381: LD_STRING h
11383: PUSH
11384: LD_VAR 0 2
11388: PPUSH
11389: CALL_OW 250
11393: PUSH
11394: LD_VAR 0 2
11398: PPUSH
11399: CALL_OW 251
11403: PUSH
11404: LD_VAR 0 2
11408: PUSH
11409: LD_INT 0
11411: PUSH
11412: LD_INT 0
11414: PUSH
11415: LD_INT 0
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: PPUSH
11430: CALL_OW 446
11434: GO 11358
11436: POP
11437: POP
// end ;
11438: LD_VAR 0 3
11442: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
11448: PPUSH
11449: PPUSH
11450: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11451: LD_VAR 0 1
11455: NOT
11456: IFTRUE 11473
11458: PUSH
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 263
11468: PUSH
11469: LD_INT 2
11471: NONEQUAL
11472: OR
11473: IFFALSE 11477
// exit ;
11475: GO 11793
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11477: LD_ADDR_VAR 0 6
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 255
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 36
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 34
11514: PUSH
11515: LD_INT 31
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PPUSH
11531: CALL_OW 69
11535: ST_TO_ADDR
// if not tmp then
11536: LD_VAR 0 6
11540: NOT
11541: IFFALSE 11545
// exit ;
11543: GO 11793
// result := [ ] ;
11545: LD_ADDR_VAR 0 2
11549: PUSH
11550: EMPTY
11551: ST_TO_ADDR
// for i in tmp do
11552: LD_ADDR_VAR 0 3
11556: PUSH
11557: LD_VAR 0 6
11561: PUSH
11562: FOR_IN
11563: IFFALSE 11634
// begin t := UnitsInside ( i ) ;
11565: LD_ADDR_VAR 0 4
11569: PUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: CALL_OW 313
11579: ST_TO_ADDR
// if t then
11580: LD_VAR 0 4
11584: IFFALSE 11632
// for j in t do
11586: LD_ADDR_VAR 0 7
11590: PUSH
11591: LD_VAR 0 4
11595: PUSH
11596: FOR_IN
11597: IFFALSE 11630
// result := Replace ( result , result + 1 , j ) ;
11599: LD_ADDR_VAR 0 2
11603: PUSH
11604: LD_VAR 0 2
11608: PPUSH
11609: LD_VAR 0 2
11613: PUSH
11614: LD_INT 1
11616: PLUS
11617: PPUSH
11618: LD_VAR 0 7
11622: PPUSH
11623: CALL_OW 1
11627: ST_TO_ADDR
11628: GO 11596
11630: POP
11631: POP
// end ;
11632: GO 11562
11634: POP
11635: POP
// if not result then
11636: LD_VAR 0 2
11640: NOT
11641: IFFALSE 11645
// exit ;
11643: GO 11793
// mech := result [ 1 ] ;
11645: LD_ADDR_VAR 0 5
11649: PUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: ST_TO_ADDR
// if result > 1 then
11659: LD_VAR 0 2
11663: PUSH
11664: LD_INT 1
11666: GREATER
11667: IFFALSE 11779
// begin for i = 2 to result do
11669: LD_ADDR_VAR 0 3
11673: PUSH
11674: DOUBLE
11675: LD_INT 2
11677: DEC
11678: ST_TO_ADDR
11679: LD_VAR 0 2
11683: PUSH
11684: FOR_TO
11685: IFFALSE 11777
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11687: LD_ADDR_VAR 0 4
11691: PUSH
11692: LD_VAR 0 2
11696: PUSH
11697: LD_VAR 0 3
11701: ARRAY
11702: PPUSH
11703: LD_INT 3
11705: PPUSH
11706: CALL_OW 259
11710: PUSH
11711: LD_VAR 0 2
11715: PUSH
11716: LD_VAR 0 3
11720: ARRAY
11721: PPUSH
11722: CALL_OW 432
11726: MINUS
11727: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11728: LD_VAR 0 4
11732: PUSH
11733: LD_VAR 0 5
11737: PPUSH
11738: LD_INT 3
11740: PPUSH
11741: CALL_OW 259
11745: PUSH
11746: LD_VAR 0 5
11750: PPUSH
11751: CALL_OW 432
11755: MINUS
11756: GREATEREQUAL
11757: IFFALSE 11775
// mech := result [ i ] ;
11759: LD_ADDR_VAR 0 5
11763: PUSH
11764: LD_VAR 0 2
11768: PUSH
11769: LD_VAR 0 3
11773: ARRAY
11774: ST_TO_ADDR
// end ;
11775: GO 11684
11777: POP
11778: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_VAR 0 5
11788: PPUSH
11789: CALL_OW 135
// end ;
11793: LD_VAR 0 2
11797: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11798: LD_INT 0
11800: PPUSH
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
11805: PPUSH
11806: PPUSH
11807: PPUSH
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
11812: PPUSH
// result := [ ] ;
11813: LD_ADDR_VAR 0 7
11817: PUSH
11818: EMPTY
11819: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11820: LD_VAR 0 1
11824: PPUSH
11825: CALL_OW 266
11829: PUSH
11830: LD_INT 0
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: IN
11840: NOT
11841: IFFALSE 11845
// exit ;
11843: GO 13485
// if name then
11845: LD_VAR 0 3
11849: IFFALSE 11865
// SetBName ( base_dep , name ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: CALL_OW 500
// base := GetBase ( base_dep ) ;
11865: LD_ADDR_VAR 0 15
11869: PUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 274
11879: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11880: LD_ADDR_VAR 0 16
11884: PUSH
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL_OW 255
11894: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11895: LD_ADDR_VAR 0 17
11899: PUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 248
11909: ST_TO_ADDR
// if sources then
11910: LD_VAR 0 5
11914: IFFALSE 11961
// for i = 1 to 3 do
11916: LD_ADDR_VAR 0 8
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_INT 3
11928: PUSH
11929: FOR_TO
11930: IFFALSE 11959
// AddResourceType ( base , i , sources [ i ] ) ;
11932: LD_VAR 0 15
11936: PPUSH
11937: LD_VAR 0 8
11941: PPUSH
11942: LD_VAR 0 5
11946: PUSH
11947: LD_VAR 0 8
11951: ARRAY
11952: PPUSH
11953: CALL_OW 276
11957: GO 11929
11959: POP
11960: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11961: LD_ADDR_VAR 0 18
11965: PUSH
11966: LD_VAR 0 15
11970: PPUSH
11971: LD_VAR 0 2
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL 11220 0 3
11983: ST_TO_ADDR
// InitHc ;
11984: CALL_OW 19
// InitUc ;
11988: CALL_OW 18
// uc_side := side ;
11992: LD_ADDR_OWVAR 20
11996: PUSH
11997: LD_VAR 0 16
12001: ST_TO_ADDR
// uc_nation := nation ;
12002: LD_ADDR_OWVAR 21
12006: PUSH
12007: LD_VAR 0 17
12011: ST_TO_ADDR
// if buildings then
12012: LD_VAR 0 18
12016: IFFALSE 13344
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12018: LD_ADDR_VAR 0 19
12022: PUSH
12023: LD_VAR 0 18
12027: PPUSH
12028: LD_INT 2
12030: PUSH
12031: LD_INT 30
12033: PUSH
12034: LD_INT 29
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 30
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if tmp then
12061: LD_VAR 0 19
12065: IFFALSE 12113
// for i in tmp do
12067: LD_ADDR_VAR 0 8
12071: PUSH
12072: LD_VAR 0 19
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12111
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12080: LD_VAR 0 8
12084: PPUSH
12085: CALL_OW 250
12089: PPUSH
12090: LD_VAR 0 8
12094: PPUSH
12095: CALL_OW 251
12099: PPUSH
12100: LD_VAR 0 16
12104: PPUSH
12105: CALL_OW 441
12109: GO 12077
12111: POP
12112: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12113: LD_VAR 0 18
12117: PPUSH
12118: LD_INT 2
12120: PUSH
12121: LD_INT 30
12123: PUSH
12124: LD_INT 32
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 33
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 72
12150: IFFALSE 12238
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12152: LD_ADDR_VAR 0 8
12156: PUSH
12157: LD_VAR 0 18
12161: PPUSH
12162: LD_INT 2
12164: PUSH
12165: LD_INT 30
12167: PUSH
12168: LD_INT 32
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 33
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 72
12194: PUSH
12195: FOR_IN
12196: IFFALSE 12236
// begin if not GetBWeapon ( i ) then
12198: LD_VAR 0 8
12202: PPUSH
12203: CALL_OW 269
12207: NOT
12208: IFFALSE 12234
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12210: LD_VAR 0 8
12214: PPUSH
12215: LD_VAR 0 8
12219: PPUSH
12220: LD_VAR 0 2
12224: PPUSH
12225: CALL 13490 0 2
12229: PPUSH
12230: CALL_OW 431
// end ;
12234: GO 12195
12236: POP
12237: POP
// end ; for i = 1 to personel do
12238: LD_ADDR_VAR 0 8
12242: PUSH
12243: DOUBLE
12244: LD_INT 1
12246: DEC
12247: ST_TO_ADDR
12248: LD_VAR 0 6
12252: PUSH
12253: FOR_TO
12254: IFFALSE 13324
// begin if i > 4 then
12256: LD_VAR 0 8
12260: PUSH
12261: LD_INT 4
12263: GREATER
12264: IFFALSE 12268
// break ;
12266: GO 13324
// case i of 1 :
12268: LD_VAR 0 8
12272: PUSH
12273: LD_INT 1
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12361
12281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12282: LD_ADDR_VAR 0 12
12286: PUSH
12287: LD_VAR 0 18
12291: PPUSH
12292: LD_INT 22
12294: PUSH
12295: LD_VAR 0 16
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 58
12306: PUSH
12307: EMPTY
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 32
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 4
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 30
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PPUSH
12354: CALL_OW 72
12358: ST_TO_ADDR
12359: GO 12583
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12431
12369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12370: LD_ADDR_VAR 0 12
12374: PUSH
12375: LD_VAR 0 18
12379: PPUSH
12380: LD_INT 22
12382: PUSH
12383: LD_VAR 0 16
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 2
12394: PUSH
12395: LD_INT 30
12397: PUSH
12398: LD_INT 0
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 1
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 72
12428: ST_TO_ADDR
12429: GO 12583
12431: LD_INT 3
12433: DOUBLE
12434: EQUAL
12435: IFTRUE 12439
12437: GO 12501
12439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12440: LD_ADDR_VAR 0 12
12444: PUSH
12445: LD_VAR 0 18
12449: PPUSH
12450: LD_INT 22
12452: PUSH
12453: LD_VAR 0 16
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 30
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 72
12498: ST_TO_ADDR
12499: GO 12583
12501: LD_INT 4
12503: DOUBLE
12504: EQUAL
12505: IFTRUE 12509
12507: GO 12582
12509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12510: LD_ADDR_VAR 0 12
12514: PUSH
12515: LD_VAR 0 18
12519: PPUSH
12520: LD_INT 22
12522: PUSH
12523: LD_VAR 0 16
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 30
12537: PUSH
12538: LD_INT 6
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 30
12547: PUSH
12548: LD_INT 7
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 30
12557: PUSH
12558: LD_INT 8
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 72
12579: ST_TO_ADDR
12580: GO 12583
12582: POP
// if i = 1 then
12583: LD_VAR 0 8
12587: PUSH
12588: LD_INT 1
12590: EQUAL
12591: IFFALSE 12702
// begin tmp := [ ] ;
12593: LD_ADDR_VAR 0 19
12597: PUSH
12598: EMPTY
12599: ST_TO_ADDR
// for j in f do
12600: LD_ADDR_VAR 0 9
12604: PUSH
12605: LD_VAR 0 12
12609: PUSH
12610: FOR_IN
12611: IFFALSE 12684
// if GetBType ( j ) = b_bunker then
12613: LD_VAR 0 9
12617: PPUSH
12618: CALL_OW 266
12622: PUSH
12623: LD_INT 32
12625: EQUAL
12626: IFFALSE 12653
// tmp := Insert ( tmp , 1 , j ) else
12628: LD_ADDR_VAR 0 19
12632: PUSH
12633: LD_VAR 0 19
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: LD_VAR 0 9
12645: PPUSH
12646: CALL_OW 2
12650: ST_TO_ADDR
12651: GO 12682
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12653: LD_ADDR_VAR 0 19
12657: PUSH
12658: LD_VAR 0 19
12662: PPUSH
12663: LD_VAR 0 19
12667: PUSH
12668: LD_INT 1
12670: PLUS
12671: PPUSH
12672: LD_VAR 0 9
12676: PPUSH
12677: CALL_OW 2
12681: ST_TO_ADDR
12682: GO 12610
12684: POP
12685: POP
// if tmp then
12686: LD_VAR 0 19
12690: IFFALSE 12702
// f := tmp ;
12692: LD_ADDR_VAR 0 12
12696: PUSH
12697: LD_VAR 0 19
12701: ST_TO_ADDR
// end ; x := personel [ i ] ;
12702: LD_ADDR_VAR 0 13
12706: PUSH
12707: LD_VAR 0 6
12711: PUSH
12712: LD_VAR 0 8
12716: ARRAY
12717: ST_TO_ADDR
// if x = - 1 then
12718: LD_VAR 0 13
12722: PUSH
12723: LD_INT 1
12725: NEG
12726: EQUAL
12727: IFFALSE 12938
// begin for j in f do
12729: LD_ADDR_VAR 0 9
12733: PUSH
12734: LD_VAR 0 12
12738: PUSH
12739: FOR_IN
12740: IFFALSE 12934
// repeat InitHc ;
12742: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12746: LD_VAR 0 9
12750: PPUSH
12751: CALL_OW 266
12755: PUSH
12756: LD_INT 5
12758: EQUAL
12759: IFFALSE 12829
// begin if UnitsInside ( j ) < 3 then
12761: LD_VAR 0 9
12765: PPUSH
12766: CALL_OW 313
12770: PUSH
12771: LD_INT 3
12773: LESS
12774: IFFALSE 12810
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12776: LD_INT 0
12778: PPUSH
12779: LD_INT 5
12781: PUSH
12782: LD_INT 8
12784: PUSH
12785: LD_INT 9
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_VAR 0 17
12797: ARRAY
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
12808: GO 12827
// PrepareHuman ( false , i , skill ) ;
12810: LD_INT 0
12812: PPUSH
12813: LD_VAR 0 8
12817: PPUSH
12818: LD_VAR 0 4
12822: PPUSH
12823: CALL_OW 380
// end else
12827: GO 12846
// PrepareHuman ( false , i , skill ) ;
12829: LD_INT 0
12831: PPUSH
12832: LD_VAR 0 8
12836: PPUSH
12837: LD_VAR 0 4
12841: PPUSH
12842: CALL_OW 380
// un := CreateHuman ;
12846: LD_ADDR_VAR 0 14
12850: PUSH
12851: CALL_OW 44
12855: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12856: LD_ADDR_VAR 0 7
12860: PUSH
12861: LD_VAR 0 7
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: LD_VAR 0 14
12873: PPUSH
12874: CALL_OW 2
12878: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12879: LD_VAR 0 14
12883: PPUSH
12884: LD_VAR 0 9
12888: PPUSH
12889: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12893: LD_VAR 0 9
12897: PPUSH
12898: CALL_OW 313
12902: PUSH
12903: LD_INT 6
12905: EQUAL
12906: IFTRUE 12930
12908: PUSH
12909: LD_VAR 0 9
12913: PPUSH
12914: CALL_OW 266
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: LD_INT 31
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: IN
12929: OR
12930: IFFALSE 12742
12932: GO 12739
12934: POP
12935: POP
// end else
12936: GO 13322
// for j = 1 to x do
12938: LD_ADDR_VAR 0 9
12942: PUSH
12943: DOUBLE
12944: LD_INT 1
12946: DEC
12947: ST_TO_ADDR
12948: LD_VAR 0 13
12952: PUSH
12953: FOR_TO
12954: IFFALSE 13320
// begin InitHc ;
12956: CALL_OW 19
// if not f then
12960: LD_VAR 0 12
12964: NOT
12965: IFFALSE 13054
// begin PrepareHuman ( false , i , skill ) ;
12967: LD_INT 0
12969: PPUSH
12970: LD_VAR 0 8
12974: PPUSH
12975: LD_VAR 0 4
12979: PPUSH
12980: CALL_OW 380
// un := CreateHuman ;
12984: LD_ADDR_VAR 0 14
12988: PUSH
12989: CALL_OW 44
12993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12994: LD_ADDR_VAR 0 7
12998: PUSH
12999: LD_VAR 0 7
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: LD_VAR 0 14
13011: PPUSH
13012: CALL_OW 2
13016: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13017: LD_VAR 0 14
13021: PPUSH
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 250
13031: PPUSH
13032: LD_VAR 0 1
13036: PPUSH
13037: CALL_OW 251
13041: PPUSH
13042: LD_INT 10
13044: PPUSH
13045: LD_INT 0
13047: PPUSH
13048: CALL_OW 50
// continue ;
13052: GO 12953
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13054: LD_VAR 0 12
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: CALL_OW 313
13067: IFFALSE 13095
13069: PUSH
13070: LD_VAR 0 12
13074: PUSH
13075: LD_INT 1
13077: ARRAY
13078: PPUSH
13079: CALL_OW 266
13083: PUSH
13084: LD_INT 32
13086: PUSH
13087: LD_INT 31
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: IN
13094: AND
13095: IFTRUE 13116
13097: PUSH
13098: LD_VAR 0 12
13102: PUSH
13103: LD_INT 1
13105: ARRAY
13106: PPUSH
13107: CALL_OW 313
13111: PUSH
13112: LD_INT 6
13114: EQUAL
13115: OR
13116: IFFALSE 13136
// f := Delete ( f , 1 ) ;
13118: LD_ADDR_VAR 0 12
13122: PUSH
13123: LD_VAR 0 12
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 3
13135: ST_TO_ADDR
// if not f then
13136: LD_VAR 0 12
13140: NOT
13141: IFFALSE 13159
// begin x := x + 2 ;
13143: LD_ADDR_VAR 0 13
13147: PUSH
13148: LD_VAR 0 13
13152: PUSH
13153: LD_INT 2
13155: PLUS
13156: ST_TO_ADDR
// continue ;
13157: GO 12953
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13159: LD_VAR 0 12
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: CALL_OW 266
13172: PUSH
13173: LD_INT 5
13175: EQUAL
13176: IFFALSE 13250
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13178: LD_VAR 0 12
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL_OW 313
13191: PUSH
13192: LD_INT 3
13194: LESS
13195: IFFALSE 13231
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13197: LD_INT 0
13199: PPUSH
13200: LD_INT 5
13202: PUSH
13203: LD_INT 8
13205: PUSH
13206: LD_INT 9
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_VAR 0 17
13218: ARRAY
13219: PPUSH
13220: LD_VAR 0 4
13224: PPUSH
13225: CALL_OW 380
13229: GO 13248
// PrepareHuman ( false , i , skill ) ;
13231: LD_INT 0
13233: PPUSH
13234: LD_VAR 0 8
13238: PPUSH
13239: LD_VAR 0 4
13243: PPUSH
13244: CALL_OW 380
// end else
13248: GO 13267
// PrepareHuman ( false , i , skill ) ;
13250: LD_INT 0
13252: PPUSH
13253: LD_VAR 0 8
13257: PPUSH
13258: LD_VAR 0 4
13262: PPUSH
13263: CALL_OW 380
// un := CreateHuman ;
13267: LD_ADDR_VAR 0 14
13271: PUSH
13272: CALL_OW 44
13276: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13277: LD_ADDR_VAR 0 7
13281: PUSH
13282: LD_VAR 0 7
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: LD_VAR 0 14
13294: PPUSH
13295: CALL_OW 2
13299: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13300: LD_VAR 0 14
13304: PPUSH
13305: LD_VAR 0 12
13309: PUSH
13310: LD_INT 1
13312: ARRAY
13313: PPUSH
13314: CALL_OW 52
// end ;
13318: GO 12953
13320: POP
13321: POP
// end ;
13322: GO 12253
13324: POP
13325: POP
// result := result ^ buildings ;
13326: LD_ADDR_VAR 0 7
13330: PUSH
13331: LD_VAR 0 7
13335: PUSH
13336: LD_VAR 0 18
13340: ADD
13341: ST_TO_ADDR
// end else
13342: GO 13485
// begin for i = 1 to personel do
13344: LD_ADDR_VAR 0 8
13348: PUSH
13349: DOUBLE
13350: LD_INT 1
13352: DEC
13353: ST_TO_ADDR
13354: LD_VAR 0 6
13358: PUSH
13359: FOR_TO
13360: IFFALSE 13483
// begin if i > 4 then
13362: LD_VAR 0 8
13366: PUSH
13367: LD_INT 4
13369: GREATER
13370: IFFALSE 13374
// break ;
13372: GO 13483
// x := personel [ i ] ;
13374: LD_ADDR_VAR 0 13
13378: PUSH
13379: LD_VAR 0 6
13383: PUSH
13384: LD_VAR 0 8
13388: ARRAY
13389: ST_TO_ADDR
// if x = - 1 then
13390: LD_VAR 0 13
13394: PUSH
13395: LD_INT 1
13397: NEG
13398: EQUAL
13399: IFFALSE 13403
// continue ;
13401: GO 13359
// PrepareHuman ( false , i , skill ) ;
13403: LD_INT 0
13405: PPUSH
13406: LD_VAR 0 8
13410: PPUSH
13411: LD_VAR 0 4
13415: PPUSH
13416: CALL_OW 380
// un := CreateHuman ;
13420: LD_ADDR_VAR 0 14
13424: PUSH
13425: CALL_OW 44
13429: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13430: LD_VAR 0 14
13434: PPUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 250
13444: PPUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 251
13454: PPUSH
13455: LD_INT 10
13457: PPUSH
13458: LD_INT 0
13460: PPUSH
13461: CALL_OW 50
// result := result ^ un ;
13465: LD_ADDR_VAR 0 7
13469: PUSH
13470: LD_VAR 0 7
13474: PUSH
13475: LD_VAR 0 14
13479: ADD
13480: ST_TO_ADDR
// end ;
13481: GO 13359
13483: POP
13484: POP
// end ; end ;
13485: LD_VAR 0 7
13489: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// result := false ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 0
13515: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13516: LD_VAR 0 1
13520: NOT
13521: IFTRUE 13546
13523: PUSH
13524: LD_VAR 0 1
13528: PPUSH
13529: CALL_OW 266
13533: PUSH
13534: LD_INT 32
13536: PUSH
13537: LD_INT 33
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: IN
13544: NOT
13545: OR
13546: IFFALSE 13550
// exit ;
13548: GO 14685
// nat := GetNation ( tower ) ;
13550: LD_ADDR_VAR 0 12
13554: PUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 248
13564: ST_TO_ADDR
// side := GetSide ( tower ) ;
13565: LD_ADDR_VAR 0 16
13569: PUSH
13570: LD_VAR 0 1
13574: PPUSH
13575: CALL_OW 255
13579: ST_TO_ADDR
// x := GetX ( tower ) ;
13580: LD_ADDR_VAR 0 10
13584: PUSH
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 250
13594: ST_TO_ADDR
// y := GetY ( tower ) ;
13595: LD_ADDR_VAR 0 11
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 251
13609: ST_TO_ADDR
// if not x or not y then
13610: LD_VAR 0 10
13614: NOT
13615: IFTRUE 13624
13617: PUSH
13618: LD_VAR 0 11
13622: NOT
13623: OR
13624: IFFALSE 13628
// exit ;
13626: GO 14685
// weapon := 0 ;
13628: LD_ADDR_VAR 0 18
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// fac_list := [ ] ;
13636: LD_ADDR_VAR 0 17
13640: PUSH
13641: EMPTY
13642: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13643: LD_ADDR_VAR 0 6
13647: PUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 274
13657: PPUSH
13658: LD_VAR 0 2
13662: PPUSH
13663: LD_INT 0
13665: PPUSH
13666: CALL 11220 0 3
13670: PPUSH
13671: LD_INT 30
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 72
13685: ST_TO_ADDR
// if not factories then
13686: LD_VAR 0 6
13690: NOT
13691: IFFALSE 13695
// exit ;
13693: GO 14685
// for i in factories do
13695: LD_ADDR_VAR 0 8
13699: PUSH
13700: LD_VAR 0 6
13704: PUSH
13705: FOR_IN
13706: IFFALSE 13731
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13708: LD_ADDR_VAR 0 17
13712: PUSH
13713: LD_VAR 0 17
13717: PUSH
13718: LD_VAR 0 8
13722: PPUSH
13723: CALL_OW 478
13727: UNION
13728: ST_TO_ADDR
13729: GO 13705
13731: POP
13732: POP
// if not fac_list then
13733: LD_VAR 0 17
13737: NOT
13738: IFFALSE 13742
// exit ;
13740: GO 14685
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13742: LD_ADDR_VAR 0 5
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 9
13755: PUSH
13756: LD_INT 10
13758: PUSH
13759: LD_INT 6
13761: PUSH
13762: LD_INT 7
13764: PUSH
13765: LD_INT 11
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 27
13779: PUSH
13780: LD_INT 28
13782: PUSH
13783: LD_INT 26
13785: PUSH
13786: LD_INT 30
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 43
13797: PUSH
13798: LD_INT 44
13800: PUSH
13801: LD_INT 46
13803: PUSH
13804: LD_INT 45
13806: PUSH
13807: LD_INT 47
13809: PUSH
13810: LD_INT 49
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: LD_VAR 0 12
13830: ARRAY
13831: ST_TO_ADDR
// list := list isect fac_list ;
13832: LD_ADDR_VAR 0 5
13836: PUSH
13837: LD_VAR 0 5
13841: PUSH
13842: LD_VAR 0 17
13846: ISECT
13847: ST_TO_ADDR
// if not list then
13848: LD_VAR 0 5
13852: NOT
13853: IFFALSE 13857
// exit ;
13855: GO 14685
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13857: LD_VAR 0 12
13861: PUSH
13862: LD_INT 3
13864: EQUAL
13865: IFFALSE 13877
13867: PUSH
13868: LD_INT 49
13870: PUSH
13871: LD_VAR 0 5
13875: IN
13876: AND
13877: IFFALSE 13897
13879: PUSH
13880: LD_INT 31
13882: PPUSH
13883: LD_VAR 0 16
13887: PPUSH
13888: CALL_OW 321
13892: PUSH
13893: LD_INT 2
13895: EQUAL
13896: AND
13897: IFFALSE 13957
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13899: LD_INT 22
13901: PUSH
13902: LD_VAR 0 16
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 35
13913: PUSH
13914: LD_INT 49
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 91
13923: PUSH
13924: LD_VAR 0 1
13928: PUSH
13929: LD_INT 10
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: NOT
13947: IFFALSE 13957
// weapon := ru_time_lapser ;
13949: LD_ADDR_VAR 0 18
13953: PUSH
13954: LD_INT 49
13956: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13957: LD_VAR 0 12
13961: PUSH
13962: LD_INT 1
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: IN
13972: IFFALSE 13996
13974: PUSH
13975: LD_INT 11
13977: PUSH
13978: LD_VAR 0 5
13982: IN
13983: IFTRUE 13995
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: LD_VAR 0 5
13993: IN
13994: OR
13995: AND
13996: IFFALSE 14016
13998: PUSH
13999: LD_INT 6
14001: PPUSH
14002: LD_VAR 0 16
14006: PPUSH
14007: CALL_OW 321
14011: PUSH
14012: LD_INT 2
14014: EQUAL
14015: AND
14016: IFFALSE 14183
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14018: LD_INT 22
14020: PUSH
14021: LD_VAR 0 16
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 2
14032: PUSH
14033: LD_INT 35
14035: PUSH
14036: LD_INT 11
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 35
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 91
14060: PUSH
14061: LD_VAR 0 1
14065: PUSH
14066: LD_INT 18
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: NOT
14084: IFFALSE 14160
14086: PUSH
14087: LD_INT 22
14089: PUSH
14090: LD_VAR 0 16
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 30
14104: PUSH
14105: LD_INT 32
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 30
14114: PUSH
14115: LD_INT 33
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 91
14129: PUSH
14130: LD_VAR 0 1
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PUSH
14156: LD_INT 2
14158: GREATER
14159: AND
14160: IFFALSE 14183
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14162: LD_ADDR_VAR 0 18
14166: PUSH
14167: LD_INT 11
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_VAR 0 12
14181: ARRAY
14182: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14183: LD_VAR 0 18
14187: NOT
14188: IFFALSE 14208
14190: PUSH
14191: LD_INT 40
14193: PPUSH
14194: LD_VAR 0 16
14198: PPUSH
14199: CALL_OW 321
14203: PUSH
14204: LD_INT 2
14206: EQUAL
14207: AND
14208: IFFALSE 14244
14210: PUSH
14211: LD_INT 7
14213: PUSH
14214: LD_VAR 0 5
14218: IN
14219: IFTRUE 14231
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_VAR 0 5
14229: IN
14230: OR
14231: IFTRUE 14243
14233: PUSH
14234: LD_INT 45
14236: PUSH
14237: LD_VAR 0 5
14241: IN
14242: OR
14243: AND
14244: IFFALSE 14498
// begin hex := GetHexInfo ( x , y ) ;
14246: LD_ADDR_VAR 0 4
14250: PUSH
14251: LD_VAR 0 10
14255: PPUSH
14256: LD_VAR 0 11
14260: PPUSH
14261: CALL_OW 546
14265: ST_TO_ADDR
// if hex [ 1 ] then
14266: LD_VAR 0 4
14270: PUSH
14271: LD_INT 1
14273: ARRAY
14274: IFFALSE 14278
// exit ;
14276: GO 14685
// height := hex [ 2 ] ;
14278: LD_ADDR_VAR 0 15
14282: PUSH
14283: LD_VAR 0 4
14287: PUSH
14288: LD_INT 2
14290: ARRAY
14291: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14292: LD_ADDR_VAR 0 14
14296: PUSH
14297: LD_INT 0
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 5
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: ST_TO_ADDR
// for i in tmp do
14315: LD_ADDR_VAR 0 8
14319: PUSH
14320: LD_VAR 0 14
14324: PUSH
14325: FOR_IN
14326: IFFALSE 14496
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14328: LD_ADDR_VAR 0 9
14332: PUSH
14333: LD_VAR 0 10
14337: PPUSH
14338: LD_VAR 0 8
14342: PPUSH
14343: LD_INT 5
14345: PPUSH
14346: CALL_OW 272
14350: PUSH
14351: LD_VAR 0 11
14355: PPUSH
14356: LD_VAR 0 8
14360: PPUSH
14361: LD_INT 5
14363: PPUSH
14364: CALL_OW 273
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14373: LD_VAR 0 9
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: LD_VAR 0 9
14386: PUSH
14387: LD_INT 2
14389: ARRAY
14390: PPUSH
14391: CALL_OW 488
14395: IFFALSE 14494
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_VAR 0 9
14406: PUSH
14407: LD_INT 1
14409: ARRAY
14410: PPUSH
14411: LD_VAR 0 9
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: PPUSH
14420: CALL_OW 546
14424: ST_TO_ADDR
// if hex [ 1 ] then
14425: LD_VAR 0 4
14429: PUSH
14430: LD_INT 1
14432: ARRAY
14433: IFFALSE 14437
// continue ;
14435: GO 14325
// h := hex [ 2 ] ;
14437: LD_ADDR_VAR 0 13
14441: PUSH
14442: LD_VAR 0 4
14446: PUSH
14447: LD_INT 2
14449: ARRAY
14450: ST_TO_ADDR
// if h + 7 < height then
14451: LD_VAR 0 13
14455: PUSH
14456: LD_INT 7
14458: PLUS
14459: PUSH
14460: LD_VAR 0 15
14464: LESS
14465: IFFALSE 14494
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14467: LD_ADDR_VAR 0 18
14471: PUSH
14472: LD_INT 7
14474: PUSH
14475: LD_INT 28
14477: PUSH
14478: LD_INT 45
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_VAR 0 12
14490: ARRAY
14491: ST_TO_ADDR
// break ;
14492: GO 14496
// end ; end ; end ;
14494: GO 14325
14496: POP
14497: POP
// end ; if not weapon then
14498: LD_VAR 0 18
14502: NOT
14503: IFFALSE 14563
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14505: LD_ADDR_VAR 0 5
14509: PUSH
14510: LD_VAR 0 5
14514: PUSH
14515: LD_INT 11
14517: PUSH
14518: LD_INT 30
14520: PUSH
14521: LD_INT 49
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: DIFF
14529: ST_TO_ADDR
// if not list then
14530: LD_VAR 0 5
14534: NOT
14535: IFFALSE 14539
// exit ;
14537: GO 14685
// weapon := list [ rand ( 1 , list ) ] ;
14539: LD_ADDR_VAR 0 18
14543: PUSH
14544: LD_VAR 0 5
14548: PUSH
14549: LD_INT 1
14551: PPUSH
14552: LD_VAR 0 5
14556: PPUSH
14557: CALL_OW 12
14561: ARRAY
14562: ST_TO_ADDR
// end ; if weapon then
14563: LD_VAR 0 18
14567: IFFALSE 14685
// begin tmp := CostOfWeapon ( weapon ) ;
14569: LD_ADDR_VAR 0 14
14573: PUSH
14574: LD_VAR 0 18
14578: PPUSH
14579: CALL_OW 451
14583: ST_TO_ADDR
// j := GetBase ( tower ) ;
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 274
14598: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14599: LD_VAR 0 9
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 275
14611: PUSH
14612: LD_VAR 0 14
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: GREATEREQUAL
14621: IFFALSE 14647
14623: PUSH
14624: LD_VAR 0 9
14628: PPUSH
14629: LD_INT 2
14631: PPUSH
14632: CALL_OW 275
14636: PUSH
14637: LD_VAR 0 14
14641: PUSH
14642: LD_INT 2
14644: ARRAY
14645: GREATEREQUAL
14646: AND
14647: IFFALSE 14673
14649: PUSH
14650: LD_VAR 0 9
14654: PPUSH
14655: LD_INT 3
14657: PPUSH
14658: CALL_OW 275
14662: PUSH
14663: LD_VAR 0 14
14667: PUSH
14668: LD_INT 3
14670: ARRAY
14671: GREATEREQUAL
14672: AND
14673: IFFALSE 14685
// result := weapon ;
14675: LD_ADDR_VAR 0 3
14679: PUSH
14680: LD_VAR 0 18
14684: ST_TO_ADDR
// end ; end ;
14685: LD_VAR 0 3
14689: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14690: LD_INT 0
14692: PPUSH
14693: PPUSH
// result := true ;
14694: LD_ADDR_VAR 0 3
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// if array1 = array2 then
14702: LD_VAR 0 1
14706: PUSH
14707: LD_VAR 0 2
14711: EQUAL
14712: IFFALSE 14772
// begin for i = 1 to array1 do
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_VAR 0 1
14728: PUSH
14729: FOR_TO
14730: IFFALSE 14768
// if array1 [ i ] <> array2 [ i ] then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_VAR 0 4
14741: ARRAY
14742: PUSH
14743: LD_VAR 0 2
14747: PUSH
14748: LD_VAR 0 4
14752: ARRAY
14753: NONEQUAL
14754: IFFALSE 14766
// begin result := false ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_INT 0
14763: ST_TO_ADDR
// break ;
14764: GO 14768
// end ;
14766: GO 14729
14768: POP
14769: POP
// end else
14770: GO 14780
// result := false ;
14772: LD_ADDR_VAR 0 3
14776: PUSH
14777: LD_INT 0
14779: ST_TO_ADDR
// end ;
14780: LD_VAR 0 3
14784: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14785: LD_INT 0
14787: PPUSH
14788: PPUSH
// if not array1 or not array2 then
14789: LD_VAR 0 1
14793: NOT
14794: IFTRUE 14803
14796: PUSH
14797: LD_VAR 0 2
14801: NOT
14802: OR
14803: IFFALSE 14807
// exit ;
14805: GO 14871
// result := true ;
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: LD_INT 1
14814: ST_TO_ADDR
// for i = 1 to array1 do
14815: LD_ADDR_VAR 0 4
14819: PUSH
14820: DOUBLE
14821: LD_INT 1
14823: DEC
14824: ST_TO_ADDR
14825: LD_VAR 0 1
14829: PUSH
14830: FOR_TO
14831: IFFALSE 14869
// if array1 [ i ] <> array2 [ i ] then
14833: LD_VAR 0 1
14837: PUSH
14838: LD_VAR 0 4
14842: ARRAY
14843: PUSH
14844: LD_VAR 0 2
14848: PUSH
14849: LD_VAR 0 4
14853: ARRAY
14854: NONEQUAL
14855: IFFALSE 14867
// begin result := false ;
14857: LD_ADDR_VAR 0 3
14861: PUSH
14862: LD_INT 0
14864: ST_TO_ADDR
// break ;
14865: GO 14869
// end ;
14867: GO 14830
14869: POP
14870: POP
// end ;
14871: LD_VAR 0 3
14875: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
14880: PPUSH
// pom := GetBase ( fac ) ;
14881: LD_ADDR_VAR 0 5
14885: PUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: CALL_OW 274
14895: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14896: LD_ADDR_VAR 0 4
14900: PUSH
14901: LD_VAR 0 2
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PPUSH
14910: LD_VAR 0 2
14914: PUSH
14915: LD_INT 2
14917: ARRAY
14918: PPUSH
14919: LD_VAR 0 2
14923: PUSH
14924: LD_INT 3
14926: ARRAY
14927: PPUSH
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 4
14935: ARRAY
14936: PPUSH
14937: CALL_OW 449
14941: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_VAR 0 5
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 275
14959: PUSH
14960: LD_VAR 0 4
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: GREATEREQUAL
14969: IFFALSE 14995
14971: PUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: LD_INT 2
14979: PPUSH
14980: CALL_OW 275
14984: PUSH
14985: LD_VAR 0 4
14989: PUSH
14990: LD_INT 2
14992: ARRAY
14993: GREATEREQUAL
14994: AND
14995: IFFALSE 15021
14997: PUSH
14998: LD_VAR 0 5
15002: PPUSH
15003: LD_INT 3
15005: PPUSH
15006: CALL_OW 275
15010: PUSH
15011: LD_VAR 0 4
15015: PUSH
15016: LD_INT 3
15018: ARRAY
15019: GREATEREQUAL
15020: AND
15021: ST_TO_ADDR
// end ;
15022: LD_VAR 0 3
15026: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15027: LD_INT 0
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
// pom := GetBase ( building ) ;
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 274
15047: ST_TO_ADDR
// if not pom then
15048: LD_VAR 0 3
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15231
// btype := GetBType ( building ) ;
15057: LD_ADDR_VAR 0 5
15061: PUSH
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 266
15071: ST_TO_ADDR
// if btype = b_armoury then
15072: LD_VAR 0 5
15076: PUSH
15077: LD_INT 4
15079: EQUAL
15080: IFFALSE 15090
// btype := b_barracks ;
15082: LD_ADDR_VAR 0 5
15086: PUSH
15087: LD_INT 5
15089: ST_TO_ADDR
// if btype = b_depot then
15090: LD_VAR 0 5
15094: PUSH
15095: LD_INT 0
15097: EQUAL
15098: IFFALSE 15108
// btype := b_warehouse ;
15100: LD_ADDR_VAR 0 5
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if btype = b_workshop then
15108: LD_VAR 0 5
15112: PUSH
15113: LD_INT 2
15115: EQUAL
15116: IFFALSE 15126
// btype := b_factory ;
15118: LD_ADDR_VAR 0 5
15122: PUSH
15123: LD_INT 3
15125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15126: LD_ADDR_VAR 0 4
15130: PUSH
15131: LD_VAR 0 5
15135: PPUSH
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 248
15145: PPUSH
15146: CALL_OW 450
15150: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL_OW 275
15168: PUSH
15169: LD_VAR 0 4
15173: PUSH
15174: LD_INT 1
15176: ARRAY
15177: GREATEREQUAL
15178: IFFALSE 15204
15180: PUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: LD_INT 2
15188: PPUSH
15189: CALL_OW 275
15193: PUSH
15194: LD_VAR 0 4
15198: PUSH
15199: LD_INT 2
15201: ARRAY
15202: GREATEREQUAL
15203: AND
15204: IFFALSE 15230
15206: PUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 3
15214: PPUSH
15215: CALL_OW 275
15219: PUSH
15220: LD_VAR 0 4
15224: PUSH
15225: LD_INT 3
15227: ARRAY
15228: GREATEREQUAL
15229: AND
15230: ST_TO_ADDR
// end ;
15231: LD_VAR 0 2
15235: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15236: LD_INT 0
15238: PPUSH
15239: PPUSH
15240: PPUSH
// pom := GetBase ( building ) ;
15241: LD_ADDR_VAR 0 4
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 274
15255: ST_TO_ADDR
// if not pom then
15256: LD_VAR 0 4
15260: NOT
15261: IFFALSE 15265
// exit ;
15263: GO 15370
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15265: LD_ADDR_VAR 0 5
15269: PUSH
15270: LD_VAR 0 2
15274: PPUSH
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 248
15284: PPUSH
15285: CALL_OW 450
15289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15290: LD_ADDR_VAR 0 3
15294: PUSH
15295: LD_VAR 0 4
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 275
15307: PUSH
15308: LD_VAR 0 5
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: GREATEREQUAL
15317: IFFALSE 15343
15319: PUSH
15320: LD_VAR 0 4
15324: PPUSH
15325: LD_INT 2
15327: PPUSH
15328: CALL_OW 275
15332: PUSH
15333: LD_VAR 0 5
15337: PUSH
15338: LD_INT 2
15340: ARRAY
15341: GREATEREQUAL
15342: AND
15343: IFFALSE 15369
15345: PUSH
15346: LD_VAR 0 4
15350: PPUSH
15351: LD_INT 3
15353: PPUSH
15354: CALL_OW 275
15358: PUSH
15359: LD_VAR 0 5
15363: PUSH
15364: LD_INT 3
15366: ARRAY
15367: GREATEREQUAL
15368: AND
15369: ST_TO_ADDR
// end ;
15370: LD_VAR 0 3
15374: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15375: LD_INT 0
15377: PPUSH
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
// result := false ;
15388: LD_ADDR_VAR 0 8
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15396: LD_VAR 0 5
15400: NOT
15401: IFTRUE 15410
15403: PUSH
15404: LD_VAR 0 1
15408: NOT
15409: OR
15410: IFTRUE 15419
15412: PUSH
15413: LD_VAR 0 2
15417: NOT
15418: OR
15419: IFTRUE 15428
15421: PUSH
15422: LD_VAR 0 3
15426: NOT
15427: OR
15428: IFFALSE 15432
// exit ;
15430: GO 16258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15432: LD_ADDR_VAR 0 14
15436: PUSH
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_VAR 0 2
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_VAR 0 4
15456: PPUSH
15457: LD_VAR 0 5
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: CALL_OW 248
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL 17539 0 6
15478: ST_TO_ADDR
// if not hexes then
15479: LD_VAR 0 14
15483: NOT
15484: IFFALSE 15488
// exit ;
15486: GO 16258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15488: LD_ADDR_VAR 0 17
15492: PUSH
15493: LD_VAR 0 5
15497: PPUSH
15498: LD_INT 22
15500: PUSH
15501: LD_VAR 0 13
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: LD_INT 30
15520: PUSH
15521: LD_INT 0
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 30
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 72
15551: ST_TO_ADDR
// for i = 1 to hexes do
15552: LD_ADDR_VAR 0 9
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 14
15566: PUSH
15567: FOR_TO
15568: IFFALSE 16256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15570: LD_ADDR_VAR 0 13
15574: PUSH
15575: LD_VAR 0 14
15579: PUSH
15580: LD_VAR 0 9
15584: ARRAY
15585: PUSH
15586: LD_INT 1
15588: ARRAY
15589: PPUSH
15590: LD_VAR 0 14
15594: PUSH
15595: LD_VAR 0 9
15599: ARRAY
15600: PUSH
15601: LD_INT 2
15603: ARRAY
15604: PPUSH
15605: CALL_OW 428
15609: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15610: LD_VAR 0 14
15614: PUSH
15615: LD_VAR 0 9
15619: ARRAY
15620: PUSH
15621: LD_INT 1
15623: ARRAY
15624: PPUSH
15625: LD_VAR 0 14
15629: PUSH
15630: LD_VAR 0 9
15634: ARRAY
15635: PUSH
15636: LD_INT 2
15638: ARRAY
15639: PPUSH
15640: CALL_OW 351
15644: IFTRUE 15683
15646: PUSH
15647: LD_VAR 0 14
15651: PUSH
15652: LD_VAR 0 9
15656: ARRAY
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: LD_VAR 0 14
15666: PUSH
15667: LD_VAR 0 9
15671: ARRAY
15672: PUSH
15673: LD_INT 2
15675: ARRAY
15676: PPUSH
15677: CALL_OW 488
15681: NOT
15682: OR
15683: IFTRUE 15700
15685: PUSH
15686: LD_VAR 0 13
15690: PPUSH
15691: CALL_OW 247
15695: PUSH
15696: LD_INT 3
15698: EQUAL
15699: OR
15700: IFFALSE 15706
// exit ;
15702: POP
15703: POP
15704: GO 16258
// if not tmp then
15706: LD_VAR 0 13
15710: NOT
15711: IFFALSE 15715
// continue ;
15713: GO 15567
// result := true ;
15715: LD_ADDR_VAR 0 8
15719: PUSH
15720: LD_INT 1
15722: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15723: LD_VAR 0 6
15727: IFFALSE 15744
15729: PUSH
15730: LD_VAR 0 13
15734: PPUSH
15735: CALL_OW 247
15739: PUSH
15740: LD_INT 2
15742: EQUAL
15743: AND
15744: IFFALSE 15761
15746: PUSH
15747: LD_VAR 0 13
15751: PPUSH
15752: CALL_OW 263
15756: PUSH
15757: LD_INT 1
15759: EQUAL
15760: AND
15761: IFFALSE 15925
// begin if IsDrivenBy ( tmp ) then
15763: LD_VAR 0 13
15767: PPUSH
15768: CALL_OW 311
15772: IFFALSE 15776
// continue ;
15774: GO 15567
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15776: LD_VAR 0 6
15780: PPUSH
15781: LD_INT 3
15783: PUSH
15784: LD_INT 60
15786: PUSH
15787: EMPTY
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 3
15796: PUSH
15797: LD_INT 55
15799: PUSH
15800: EMPTY
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 72
15815: IFFALSE 15923
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15817: LD_ADDR_VAR 0 18
15821: PUSH
15822: LD_VAR 0 6
15826: PPUSH
15827: LD_INT 3
15829: PUSH
15830: LD_INT 60
15832: PUSH
15833: EMPTY
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: LD_INT 55
15845: PUSH
15846: EMPTY
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 72
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: ST_TO_ADDR
// if IsInUnit ( driver ) then
15866: LD_VAR 0 18
15870: PPUSH
15871: CALL_OW 310
15875: IFFALSE 15886
// ComExit ( driver ) ;
15877: LD_VAR 0 18
15881: PPUSH
15882: CALL 41529 0 1
// AddComEnterUnit ( driver , tmp ) ;
15886: LD_VAR 0 18
15890: PPUSH
15891: LD_VAR 0 13
15895: PPUSH
15896: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15900: LD_VAR 0 18
15904: PPUSH
15905: LD_VAR 0 7
15909: PPUSH
15910: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15914: LD_VAR 0 18
15918: PPUSH
15919: CALL_OW 181
// end ; continue ;
15923: GO 15567
// end ; if not cleaners or not tmp in cleaners then
15925: LD_VAR 0 6
15929: NOT
15930: IFTRUE 15945
15932: PUSH
15933: LD_VAR 0 13
15937: PUSH
15938: LD_VAR 0 6
15942: IN
15943: NOT
15944: OR
15945: IFFALSE 16254
// begin if dep then
15947: LD_VAR 0 17
15951: IFFALSE 16087
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15953: LD_ADDR_VAR 0 16
15957: PUSH
15958: LD_VAR 0 17
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: PPUSH
15967: CALL_OW 250
15971: PPUSH
15972: LD_VAR 0 17
15976: PUSH
15977: LD_INT 1
15979: ARRAY
15980: PPUSH
15981: CALL_OW 254
15985: PPUSH
15986: LD_INT 5
15988: PPUSH
15989: CALL_OW 272
15993: PUSH
15994: LD_VAR 0 17
15998: PUSH
15999: LD_INT 1
16001: ARRAY
16002: PPUSH
16003: CALL_OW 251
16007: PPUSH
16008: LD_VAR 0 17
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 254
16021: PPUSH
16022: LD_INT 5
16024: PPUSH
16025: CALL_OW 273
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16034: LD_VAR 0 16
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: LD_VAR 0 16
16047: PUSH
16048: LD_INT 2
16050: ARRAY
16051: PPUSH
16052: CALL_OW 488
16056: IFFALSE 16087
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16058: LD_VAR 0 13
16062: PPUSH
16063: LD_VAR 0 16
16067: PUSH
16068: LD_INT 1
16070: ARRAY
16071: PPUSH
16072: LD_VAR 0 16
16076: PUSH
16077: LD_INT 2
16079: ARRAY
16080: PPUSH
16081: CALL_OW 111
// continue ;
16085: GO 15567
// end ; end ; r := GetDir ( tmp ) ;
16087: LD_ADDR_VAR 0 15
16091: PUSH
16092: LD_VAR 0 13
16096: PPUSH
16097: CALL_OW 254
16101: ST_TO_ADDR
// if r = 5 then
16102: LD_VAR 0 15
16106: PUSH
16107: LD_INT 5
16109: EQUAL
16110: IFFALSE 16120
// r := 0 ;
16112: LD_ADDR_VAR 0 15
16116: PUSH
16117: LD_INT 0
16119: ST_TO_ADDR
// for j = r to 5 do
16120: LD_ADDR_VAR 0 10
16124: PUSH
16125: DOUBLE
16126: LD_VAR 0 15
16130: DEC
16131: ST_TO_ADDR
16132: LD_INT 5
16134: PUSH
16135: FOR_TO
16136: IFFALSE 16252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16138: LD_ADDR_VAR 0 11
16142: PUSH
16143: LD_VAR 0 13
16147: PPUSH
16148: CALL_OW 250
16152: PPUSH
16153: LD_VAR 0 10
16157: PPUSH
16158: LD_INT 2
16160: PPUSH
16161: CALL_OW 272
16165: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16166: LD_ADDR_VAR 0 12
16170: PUSH
16171: LD_VAR 0 13
16175: PPUSH
16176: CALL_OW 251
16180: PPUSH
16181: LD_VAR 0 10
16185: PPUSH
16186: LD_INT 2
16188: PPUSH
16189: CALL_OW 273
16193: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16194: LD_VAR 0 11
16198: PPUSH
16199: LD_VAR 0 12
16203: PPUSH
16204: CALL_OW 488
16208: IFFALSE 16227
16210: PUSH
16211: LD_VAR 0 11
16215: PPUSH
16216: LD_VAR 0 12
16220: PPUSH
16221: CALL_OW 428
16225: NOT
16226: AND
16227: IFFALSE 16250
// begin ComMoveXY ( tmp , _x , _y ) ;
16229: LD_VAR 0 13
16233: PPUSH
16234: LD_VAR 0 11
16238: PPUSH
16239: LD_VAR 0 12
16243: PPUSH
16244: CALL_OW 111
// break ;
16248: GO 16252
// end ; end ;
16250: GO 16135
16252: POP
16253: POP
// end ; end ;
16254: GO 15567
16256: POP
16257: POP
// end ;
16258: LD_VAR 0 8
16262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16263: LD_INT 0
16265: PPUSH
// result := true ;
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: LD_INT 1
16273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16274: LD_VAR 0 2
16278: PUSH
16279: LD_INT 24
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16293
16285: LD_INT 33
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16293
16291: GO 16318
16293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16294: LD_ADDR_VAR 0 3
16298: PUSH
16299: LD_INT 32
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 321
16311: PUSH
16312: LD_INT 2
16314: EQUAL
16315: ST_TO_ADDR
16316: GO 16634
16318: LD_INT 20
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16351
16326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_INT 6
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 321
16344: PUSH
16345: LD_INT 2
16347: EQUAL
16348: ST_TO_ADDR
16349: GO 16634
16351: LD_INT 22
16353: DOUBLE
16354: EQUAL
16355: IFTRUE 16365
16357: LD_INT 36
16359: DOUBLE
16360: EQUAL
16361: IFTRUE 16365
16363: GO 16390
16365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_INT 15
16373: PPUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 321
16383: PUSH
16384: LD_INT 2
16386: EQUAL
16387: ST_TO_ADDR
16388: GO 16634
16390: LD_INT 30
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16398
16396: GO 16423
16398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16399: LD_ADDR_VAR 0 3
16403: PUSH
16404: LD_INT 20
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 321
16416: PUSH
16417: LD_INT 2
16419: EQUAL
16420: ST_TO_ADDR
16421: GO 16634
16423: LD_INT 28
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16437
16429: LD_INT 21
16431: DOUBLE
16432: EQUAL
16433: IFTRUE 16437
16435: GO 16462
16437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16438: LD_ADDR_VAR 0 3
16442: PUSH
16443: LD_INT 21
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 321
16455: PUSH
16456: LD_INT 2
16458: EQUAL
16459: ST_TO_ADDR
16460: GO 16634
16462: LD_INT 16
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16495
16470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16471: LD_ADDR_VAR 0 3
16475: PUSH
16476: LD_INT 84
16478: PPUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 321
16488: PUSH
16489: LD_INT 2
16491: EQUAL
16492: ST_TO_ADDR
16493: GO 16634
16495: LD_INT 19
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16509
16501: LD_INT 23
16503: DOUBLE
16504: EQUAL
16505: IFTRUE 16509
16507: GO 16534
16509: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16510: LD_ADDR_VAR 0 3
16514: PUSH
16515: LD_INT 83
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 321
16527: PUSH
16528: LD_INT 2
16530: EQUAL
16531: ST_TO_ADDR
16532: GO 16634
16534: LD_INT 17
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16567
16542: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_INT 39
16550: PPUSH
16551: LD_VAR 0 1
16555: PPUSH
16556: CALL_OW 321
16560: PUSH
16561: LD_INT 2
16563: EQUAL
16564: ST_TO_ADDR
16565: GO 16634
16567: LD_INT 18
16569: DOUBLE
16570: EQUAL
16571: IFTRUE 16575
16573: GO 16600
16575: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16576: LD_ADDR_VAR 0 3
16580: PUSH
16581: LD_INT 40
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 321
16593: PUSH
16594: LD_INT 2
16596: EQUAL
16597: ST_TO_ADDR
16598: GO 16634
16600: LD_INT 27
16602: DOUBLE
16603: EQUAL
16604: IFTRUE 16608
16606: GO 16633
16608: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: LD_INT 35
16616: PPUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 321
16626: PUSH
16627: LD_INT 2
16629: EQUAL
16630: ST_TO_ADDR
16631: GO 16634
16633: POP
// end ;
16634: LD_VAR 0 3
16638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16639: LD_INT 0
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
16646: PPUSH
16647: PPUSH
16648: PPUSH
16649: PPUSH
16650: PPUSH
16651: PPUSH
// result := false ;
16652: LD_ADDR_VAR 0 6
16656: PUSH
16657: LD_INT 0
16659: ST_TO_ADDR
// if btype = b_depot then
16660: LD_VAR 0 2
16664: PUSH
16665: LD_INT 0
16667: EQUAL
16668: IFFALSE 16680
// begin result := true ;
16670: LD_ADDR_VAR 0 6
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// exit ;
16678: GO 17534
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16680: LD_VAR 0 1
16684: NOT
16685: IFTRUE 16710
16687: PUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 266
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: IN
16708: NOT
16709: OR
16710: IFTRUE 16719
16712: PUSH
16713: LD_VAR 0 2
16717: NOT
16718: OR
16719: IFTRUE 16755
16721: PUSH
16722: LD_VAR 0 5
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 2
16735: PUSH
16736: LD_INT 3
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: IN
16753: NOT
16754: OR
16755: IFTRUE 16774
16757: PUSH
16758: LD_VAR 0 3
16762: PPUSH
16763: LD_VAR 0 4
16767: PPUSH
16768: CALL_OW 488
16772: NOT
16773: OR
16774: IFFALSE 16778
// exit ;
16776: GO 17534
// side := GetSide ( depot ) ;
16778: LD_ADDR_VAR 0 9
16782: PUSH
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 255
16792: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16793: LD_VAR 0 9
16797: PPUSH
16798: LD_VAR 0 2
16802: PPUSH
16803: CALL 16263 0 2
16807: NOT
16808: IFFALSE 16812
// exit ;
16810: GO 17534
// pom := GetBase ( depot ) ;
16812: LD_ADDR_VAR 0 10
16816: PUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 274
16826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16827: LD_ADDR_VAR 0 11
16831: PUSH
16832: LD_VAR 0 2
16836: PPUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 248
16846: PPUSH
16847: CALL_OW 450
16851: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16852: LD_VAR 0 10
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 275
16864: PUSH
16865: LD_VAR 0 11
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: GREATEREQUAL
16874: IFFALSE 16900
16876: PUSH
16877: LD_VAR 0 10
16881: PPUSH
16882: LD_INT 2
16884: PPUSH
16885: CALL_OW 275
16889: PUSH
16890: LD_VAR 0 11
16894: PUSH
16895: LD_INT 2
16897: ARRAY
16898: GREATEREQUAL
16899: AND
16900: IFFALSE 16926
16902: PUSH
16903: LD_VAR 0 10
16907: PPUSH
16908: LD_INT 3
16910: PPUSH
16911: CALL_OW 275
16915: PUSH
16916: LD_VAR 0 11
16920: PUSH
16921: LD_INT 3
16923: ARRAY
16924: GREATEREQUAL
16925: AND
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 17534
// if GetBType ( depot ) = b_depot then
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 266
16940: PUSH
16941: LD_INT 0
16943: EQUAL
16944: IFFALSE 16956
// dist := 28 else
16946: LD_ADDR_VAR 0 14
16950: PUSH
16951: LD_INT 28
16953: ST_TO_ADDR
16954: GO 16964
// dist := 36 ;
16956: LD_ADDR_VAR 0 14
16960: PUSH
16961: LD_INT 36
16963: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16964: LD_VAR 0 1
16968: PPUSH
16969: LD_VAR 0 3
16973: PPUSH
16974: LD_VAR 0 4
16978: PPUSH
16979: CALL_OW 297
16983: PUSH
16984: LD_VAR 0 14
16988: GREATER
16989: IFFALSE 16993
// exit ;
16991: GO 17534
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16993: LD_ADDR_VAR 0 12
16997: PUSH
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: LD_VAR 0 4
17012: PPUSH
17013: LD_VAR 0 5
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 248
17027: PPUSH
17028: LD_INT 0
17030: PPUSH
17031: CALL 17539 0 6
17035: ST_TO_ADDR
// if not hexes then
17036: LD_VAR 0 12
17040: NOT
17041: IFFALSE 17045
// exit ;
17043: GO 17534
// hex := GetHexInfo ( x , y ) ;
17045: LD_ADDR_VAR 0 15
17049: PUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_VAR 0 4
17059: PPUSH
17060: CALL_OW 546
17064: ST_TO_ADDR
// if hex [ 1 ] then
17065: LD_VAR 0 15
17069: PUSH
17070: LD_INT 1
17072: ARRAY
17073: IFFALSE 17077
// exit ;
17075: GO 17534
// height := hex [ 2 ] ;
17077: LD_ADDR_VAR 0 13
17081: PUSH
17082: LD_VAR 0 15
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: ST_TO_ADDR
// for i = 1 to hexes do
17091: LD_ADDR_VAR 0 7
17095: PUSH
17096: DOUBLE
17097: LD_INT 1
17099: DEC
17100: ST_TO_ADDR
17101: LD_VAR 0 12
17105: PUSH
17106: FOR_TO
17107: IFFALSE 17451
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17109: LD_VAR 0 12
17113: PUSH
17114: LD_VAR 0 7
17118: ARRAY
17119: PUSH
17120: LD_INT 1
17122: ARRAY
17123: PPUSH
17124: LD_VAR 0 12
17128: PUSH
17129: LD_VAR 0 7
17133: ARRAY
17134: PUSH
17135: LD_INT 2
17137: ARRAY
17138: PPUSH
17139: CALL_OW 488
17143: NOT
17144: IFTRUE 17186
17146: PUSH
17147: LD_VAR 0 12
17151: PUSH
17152: LD_VAR 0 7
17156: ARRAY
17157: PUSH
17158: LD_INT 1
17160: ARRAY
17161: PPUSH
17162: LD_VAR 0 12
17166: PUSH
17167: LD_VAR 0 7
17171: ARRAY
17172: PUSH
17173: LD_INT 2
17175: ARRAY
17176: PPUSH
17177: CALL_OW 428
17181: PUSH
17182: LD_INT 0
17184: GREATER
17185: OR
17186: IFTRUE 17224
17188: PUSH
17189: LD_VAR 0 12
17193: PUSH
17194: LD_VAR 0 7
17198: ARRAY
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PPUSH
17204: LD_VAR 0 12
17208: PUSH
17209: LD_VAR 0 7
17213: ARRAY
17214: PUSH
17215: LD_INT 2
17217: ARRAY
17218: PPUSH
17219: CALL_OW 351
17223: OR
17224: IFFALSE 17230
// exit ;
17226: POP
17227: POP
17228: GO 17534
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17230: LD_ADDR_VAR 0 8
17234: PUSH
17235: LD_VAR 0 12
17239: PUSH
17240: LD_VAR 0 7
17244: ARRAY
17245: PUSH
17246: LD_INT 1
17248: ARRAY
17249: PPUSH
17250: LD_VAR 0 12
17254: PUSH
17255: LD_VAR 0 7
17259: ARRAY
17260: PUSH
17261: LD_INT 2
17263: ARRAY
17264: PPUSH
17265: CALL_OW 546
17269: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17270: LD_VAR 0 8
17274: PUSH
17275: LD_INT 1
17277: ARRAY
17278: IFTRUE 17300
17280: PUSH
17281: LD_VAR 0 8
17285: PUSH
17286: LD_INT 2
17288: ARRAY
17289: PUSH
17290: LD_VAR 0 13
17294: PUSH
17295: LD_INT 2
17297: PLUS
17298: GREATER
17299: OR
17300: IFTRUE 17322
17302: PUSH
17303: LD_VAR 0 8
17307: PUSH
17308: LD_INT 2
17310: ARRAY
17311: PUSH
17312: LD_VAR 0 13
17316: PUSH
17317: LD_INT 2
17319: MINUS
17320: LESS
17321: OR
17322: IFTRUE 17390
17324: PUSH
17325: LD_VAR 0 8
17329: PUSH
17330: LD_INT 3
17332: ARRAY
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 8
17339: PUSH
17340: LD_INT 9
17342: PUSH
17343: LD_INT 10
17345: PUSH
17346: LD_INT 11
17348: PUSH
17349: LD_INT 12
17351: PUSH
17352: LD_INT 13
17354: PUSH
17355: LD_INT 16
17357: PUSH
17358: LD_INT 17
17360: PUSH
17361: LD_INT 18
17363: PUSH
17364: LD_INT 19
17366: PUSH
17367: LD_INT 20
17369: PUSH
17370: LD_INT 21
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: IN
17388: NOT
17389: OR
17390: IFTRUE 17403
17392: PUSH
17393: LD_VAR 0 8
17397: PUSH
17398: LD_INT 5
17400: ARRAY
17401: NOT
17402: OR
17403: IFTRUE 17443
17405: PUSH
17406: LD_VAR 0 8
17410: PUSH
17411: LD_INT 6
17413: ARRAY
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: LD_INT 7
17423: PUSH
17424: LD_INT 9
17426: PUSH
17427: LD_INT 10
17429: PUSH
17430: LD_INT 11
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: IN
17441: NOT
17442: OR
17443: IFFALSE 17449
// exit ;
17445: POP
17446: POP
17447: GO 17534
// end ;
17449: GO 17106
17451: POP
17452: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17453: LD_VAR 0 9
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_VAR 0 4
17467: PPUSH
17468: LD_INT 20
17470: PPUSH
17471: CALL 9353 0 4
17475: PUSH
17476: LD_INT 4
17478: ARRAY
17479: IFFALSE 17483
// exit ;
17481: GO 17534
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17483: LD_VAR 0 2
17487: PUSH
17488: LD_INT 29
17490: PUSH
17491: LD_INT 30
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: IN
17498: IFFALSE 17522
17500: PUSH
17501: LD_VAR 0 3
17505: PPUSH
17506: LD_VAR 0 4
17510: PPUSH
17511: LD_VAR 0 9
17515: PPUSH
17516: CALL_OW 440
17520: NOT
17521: AND
17522: IFFALSE 17526
// exit ;
17524: GO 17534
// result := true ;
17526: LD_ADDR_VAR 0 6
17530: PUSH
17531: LD_INT 1
17533: ST_TO_ADDR
// end ;
17534: LD_VAR 0 6
17538: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17539: LD_INT 0
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
17555: PPUSH
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
// result = [ ] ;
17599: LD_ADDR_VAR 0 7
17603: PUSH
17604: EMPTY
17605: ST_TO_ADDR
// temp_list = [ ] ;
17606: LD_ADDR_VAR 0 9
17610: PUSH
17611: EMPTY
17612: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17613: LD_VAR 0 4
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: LD_INT 4
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: IN
17644: NOT
17645: IFTRUE 17688
17647: PUSH
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: IN
17663: IFFALSE 17687
17665: PUSH
17666: LD_VAR 0 5
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 3
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: IN
17685: NOT
17686: AND
17687: OR
17688: IFFALSE 17692
// exit ;
17690: GO 36091
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17692: LD_VAR 0 1
17696: PUSH
17697: LD_INT 6
17699: PUSH
17700: LD_INT 7
17702: PUSH
17703: LD_INT 8
17705: PUSH
17706: LD_INT 13
17708: PUSH
17709: LD_INT 12
17711: PUSH
17712: LD_INT 15
17714: PUSH
17715: LD_INT 11
17717: PUSH
17718: LD_INT 14
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: IN
17735: IFFALSE 17745
// btype = b_lab ;
17737: LD_ADDR_VAR 0 1
17741: PUSH
17742: LD_INT 6
17744: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17745: LD_VAR 0 6
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: IN
17764: NOT
17765: IFTRUE 17833
17767: PUSH
17768: LD_VAR 0 1
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: LD_INT 1
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: LD_INT 3
17784: PUSH
17785: LD_INT 6
17787: PUSH
17788: LD_INT 36
17790: PUSH
17791: LD_INT 4
17793: PUSH
17794: LD_INT 5
17796: PUSH
17797: LD_INT 31
17799: PUSH
17800: LD_INT 32
17802: PUSH
17803: LD_INT 33
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: IN
17819: NOT
17820: IFFALSE 17832
17822: PUSH
17823: LD_VAR 0 6
17827: PUSH
17828: LD_INT 1
17830: EQUAL
17831: AND
17832: OR
17833: IFTRUE 17865
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: IN
17851: NOT
17852: IFFALSE 17864
17854: PUSH
17855: LD_VAR 0 6
17859: PUSH
17860: LD_INT 2
17862: EQUAL
17863: AND
17864: OR
17865: IFFALSE 17875
// mode = 0 ;
17867: LD_ADDR_VAR 0 6
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
// case mode of 0 :
17875: LD_VAR 0 6
17879: PUSH
17880: LD_INT 0
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 29341
17888: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17889: LD_ADDR_VAR 0 11
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 0
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 2
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 0
17982: PUSH
17983: LD_INT 2
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: LD_INT 3
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18082: LD_ADDR_VAR 0 12
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: NEG
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: NEG
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: NEG
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 3
18239: NEG
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18278: LD_ADDR_VAR 0 13
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: LD_INT 2
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: NEG
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: NEG
18414: PUSH
18415: LD_INT 2
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: LD_INT 3
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 3
18437: NEG
18438: PUSH
18439: LD_INT 2
18441: NEG
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 3
18449: NEG
18450: PUSH
18451: LD_INT 3
18453: NEG
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18477: LD_ADDR_VAR 0 14
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: LD_INT 2
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 2
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 3
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: LD_INT 3
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18673: LD_ADDR_VAR 0 15
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: NEG
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: LD_INT 1
18757: NEG
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: NEG
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: LD_INT 1
18811: NEG
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18866: LD_ADDR_VAR 0 16
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: NEG
18948: PUSH
18949: LD_INT 2
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: NEG
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 2
19001: NEG
19002: PUSH
19003: LD_INT 2
19005: NEG
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 3
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19059: LD_ADDR_VAR 0 17
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 2
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: LD_INT 2
19155: NEG
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: NEG
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19289: LD_ADDR_VAR 0 18
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: LD_INT 1
19362: NEG
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: LD_INT 2
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19519: LD_ADDR_VAR 0 19
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: LD_INT 2
19615: NEG
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: NEG
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: LD_INT 1
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: NEG
19719: PUSH
19720: LD_INT 2
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19749: LD_ADDR_VAR 0 20
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: LD_INT 2
19834: NEG
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: LD_INT 2
19845: NEG
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 1
19856: NEG
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: LD_INT 2
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19979: LD_ADDR_VAR 0 21
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: LD_INT 1
20052: NEG
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: LD_INT 2
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 2
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: NEG
20179: PUSH
20180: LD_INT 2
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20209: LD_ADDR_VAR 0 22
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: LD_INT 2
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: LD_INT 2
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: NEG
20409: PUSH
20410: LD_INT 2
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20439: LD_ADDR_VAR 0 23
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 0
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: LD_INT 1
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: LD_INT 2
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 2
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: LD_INT 2
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: LD_INT 3
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: NEG
20663: PUSH
20664: LD_INT 3
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20719: LD_ADDR_VAR 0 24
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: LD_INT 2
20804: NEG
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 2
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 1
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: NEG
20896: PUSH
20897: LD_INT 0
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 2
20906: NEG
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: LD_INT 2
20922: NEG
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: LD_INT 2
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 3
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20995: LD_ADDR_VAR 0 25
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: LD_INT 1
21068: NEG
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 1
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: NEG
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: NEG
21195: PUSH
21196: LD_INT 2
21198: NEG
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 3
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 3
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21269: LD_ADDR_VAR 0 26
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: LD_INT 2
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: NEG
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: LD_INT 2
21472: NEG
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 3
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: LD_INT 3
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21545: LD_ADDR_VAR 0 27
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 3
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 3
21790: NEG
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21825: LD_ADDR_VAR 0 28
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 0
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: LD_INT 2
21910: NEG
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: LD_INT 2
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 1
21932: NEG
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: LD_INT 1
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: NEG
22025: PUSH
22026: LD_INT 2
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 2
22036: NEG
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: LD_INT 3
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 3
22060: NEG
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 3
22072: NEG
22073: PUSH
22074: LD_INT 2
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22107: LD_ADDR_VAR 0 29
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 2
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 2
22297: NEG
22298: PUSH
22299: LD_INT 3
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: NEG
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 3
22351: NEG
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22386: LD_ADDR_VAR 0 30
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: LD_INT 3
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 3
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: NEG
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 3
22629: NEG
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22664: LD_ADDR_VAR 0 31
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: LD_INT 2
22749: NEG
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: LD_INT 3
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 3
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22942: LD_ADDR_VAR 0 32
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: LD_INT 2
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: NEG
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 3
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 3
23185: NEG
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23220: LD_ADDR_VAR 0 33
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 2
23410: NEG
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 3
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 3
23464: NEG
23465: PUSH
23466: LD_INT 2
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23499: LD_ADDR_VAR 0 34
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 2
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 2
23595: NEG
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 2
23655: NEG
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: NEG
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: LD_INT 2
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 3
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 2
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 3
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 3
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 3
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23779: LD_ADDR_VAR 0 35
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23891: LD_ADDR_VAR 0 36
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24003: LD_ADDR_VAR 0 37
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24115: LD_ADDR_VAR 0 38
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24227: LD_ADDR_VAR 0 39
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24339: LD_ADDR_VAR 0 40
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24451: LD_ADDR_VAR 0 41
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: LD_INT 3
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 3
24694: PUSH
24695: LD_INT 3
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 3
24725: NEG
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 3
24736: NEG
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 3
24748: NEG
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 3
24760: NEG
24761: PUSH
24762: LD_INT 3
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24801: LD_ADDR_VAR 0 42
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: NEG
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: NEG
24980: PUSH
24981: LD_INT 2
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 3
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 3
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 3
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 3
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 3
25098: NEG
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 3
25110: NEG
25111: PUSH
25112: LD_INT 3
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25151: LD_ADDR_VAR 0 43
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 2
25247: NEG
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: NEG
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 3
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 3
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 3
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 3
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 3
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 3
25458: NEG
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25499: LD_ADDR_VAR 0 44
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 3
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 3
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 3
25773: NEG
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: NEG
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 3
25796: NEG
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: LD_INT 3
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25849: LD_ADDR_VAR 0 45
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 2
26039: NEG
26040: PUSH
26041: LD_INT 3
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 3
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 3
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: LD_INT 3
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 3
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 3
26146: NEG
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: LD_INT 3
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26199: LD_ADDR_VAR 0 46
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 3
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 3
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 3
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 3
26495: NEG
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 3
26506: NEG
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26547: LD_ADDR_VAR 0 47
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: LD_INT 2
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: LD_INT 2
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26698: LD_ADDR_VAR 0 48
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26845: LD_ADDR_VAR 0 49
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26989: LD_ADDR_VAR 0 50
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27133: LD_ADDR_VAR 0 51
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: NEG
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27280: LD_ADDR_VAR 0 52
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 2
27407: NEG
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27431: LD_ADDR_VAR 0 53
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 2
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27661: LD_ADDR_VAR 0 54
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 2
27860: NEG
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27891: LD_ADDR_VAR 0 55
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: NEG
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 2
28090: NEG
28091: PUSH
28092: LD_INT 2
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28121: LD_ADDR_VAR 0 56
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28351: LD_ADDR_VAR 0 57
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 2
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: LD_INT 2
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28581: LD_ADDR_VAR 0 58
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 2
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28811: LD_ADDR_VAR 0 59
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28899: LD_ADDR_VAR 0 60
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28987: LD_ADDR_VAR 0 61
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29075: LD_ADDR_VAR 0 62
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29163: LD_ADDR_VAR 0 63
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29251: LD_ADDR_VAR 0 64
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
// end ; 1 :
29339: GO 35236
29341: LD_INT 1
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 31972
29349: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29350: LD_ADDR_VAR 0 11
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29394: LD_ADDR_VAR 0 12
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29435: LD_ADDR_VAR 0 13
29439: PUSH
29440: LD_INT 3
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: LD_INT 3
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29475: LD_ADDR_VAR 0 14
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 3
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29516: LD_ADDR_VAR 0 15
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 0
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 3
29545: NEG
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29560: LD_ADDR_VAR 0 16
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29606: LD_ADDR_VAR 0 17
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 3
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29650: LD_ADDR_VAR 0 18
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29691: LD_ADDR_VAR 0 19
29695: PUSH
29696: LD_INT 3
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29731: LD_ADDR_VAR 0 20
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29772: LD_ADDR_VAR 0 21
29776: PUSH
29777: LD_INT 2
29779: NEG
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29816: LD_ADDR_VAR 0 22
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: LD_INT 3
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: LD_INT 3
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29862: LD_ADDR_VAR 0 23
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: LD_INT 4
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29906: LD_ADDR_VAR 0 24
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29947: LD_ADDR_VAR 0 25
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 4
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29987: LD_ADDR_VAR 0 26
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 4
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30028: LD_ADDR_VAR 0 27
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: NEG
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 4
30057: NEG
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30072: LD_ADDR_VAR 0 28
30076: PUSH
30077: LD_INT 3
30079: NEG
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 3
30091: NEG
30092: PUSH
30093: LD_INT 4
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 4
30103: NEG
30104: PUSH
30105: LD_INT 3
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30118: LD_ADDR_VAR 0 29
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 4
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 5
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 5
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 4
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: LD_INT 6
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 6
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 5
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30273: LD_ADDR_VAR 0 30
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 5
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 5
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 6
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 6
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30416: LD_ADDR_VAR 0 31
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 4
30463: PUSH
30464: LD_INT 4
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 5
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 6
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 6
30523: PUSH
30524: LD_INT 6
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 5
30533: PUSH
30534: LD_INT 6
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30555: LD_ADDR_VAR 0 32
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 5
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 6
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 6
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30698: LD_ADDR_VAR 0 33
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 4
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 4
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 5
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 5
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 5
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 6
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 6
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30853: LD_ADDR_VAR 0 34
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 3
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: LD_INT 4
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 4
30932: NEG
30933: PUSH
30934: LD_INT 5
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 5
30944: NEG
30945: PUSH
30946: LD_INT 4
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 5
30956: NEG
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 5
30968: NEG
30969: PUSH
30970: LD_INT 6
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 6
30980: NEG
30981: PUSH
30982: LD_INT 5
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 6
30992: NEG
30993: PUSH
30994: LD_INT 6
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31016: LD_ADDR_VAR 0 41
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 2
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31060: LD_ADDR_VAR 0 42
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31101: LD_ADDR_VAR 0 43
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31141: LD_ADDR_VAR 0 44
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31182: LD_ADDR_VAR 0 45
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31226: LD_ADDR_VAR 0 46
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31272: LD_ADDR_VAR 0 47
31276: PUSH
31277: LD_INT 2
31279: NEG
31280: PUSH
31281: LD_INT 3
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 3
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31305: LD_ADDR_VAR 0 48
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31336: LD_ADDR_VAR 0 49
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31365: LD_ADDR_VAR 0 50
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31394: LD_ADDR_VAR 0 51
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31425: LD_ADDR_VAR 0 52
31429: PUSH
31430: LD_INT 3
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 3
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31458: LD_ADDR_VAR 0 53
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: LD_INT 3
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31502: LD_ADDR_VAR 0 54
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31543: LD_ADDR_VAR 0 55
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31583: LD_ADDR_VAR 0 56
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 3
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31624: LD_ADDR_VAR 0 57
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31668: LD_ADDR_VAR 0 58
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 3
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31714: LD_ADDR_VAR 0 59
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31758: LD_ADDR_VAR 0 60
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31799: LD_ADDR_VAR 0 61
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31839: LD_ADDR_VAR 0 62
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31880: LD_ADDR_VAR 0 63
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31924: LD_ADDR_VAR 0 64
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// end ; 2 :
31970: GO 35236
31972: LD_INT 2
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 35235
31980: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31981: LD_ADDR_VAR 0 29
31985: PUSH
31986: LD_INT 4
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 5
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 4
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 5
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: LD_INT 4
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 4
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 4
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 4
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 5
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 5
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 5
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: NEG
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 4
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 4
32343: NEG
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 4
32378: NEG
32379: PUSH
32380: LD_INT 5
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 3
32390: NEG
32391: PUSH
32392: LD_INT 4
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 3
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: LD_INT 3
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: LD_INT 4
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 5
32438: NEG
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 5
32462: NEG
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32519: LD_ADDR_VAR 0 30
32523: PUSH
32524: LD_INT 4
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 4
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 5
32546: PUSH
32547: LD_INT 4
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 5
32556: PUSH
32557: LD_INT 5
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 4
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: LD_INT 4
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 5
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 5
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 4
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 4
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: LD_INT 3
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 4
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 4
32709: NEG
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: NEG
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 5
32765: NEG
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 5
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 5
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 4
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 4
32871: NEG
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 4
32883: NEG
32884: PUSH
32885: LD_INT 4
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 4
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 5
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: LD_INT 4
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 3
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 5
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33066: LD_ADDR_VAR 0 31
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 4
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 4
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 5
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: LD_INT 5
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: NEG
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 4
33222: NEG
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 4
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 4
33245: NEG
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 4
33268: NEG
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 4
33280: NEG
33281: PUSH
33282: LD_INT 5
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 3
33292: NEG
33293: PUSH
33294: LD_INT 4
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: NEG
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 4
33316: NEG
33317: PUSH
33318: LD_INT 3
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 5
33328: NEG
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 5
33340: NEG
33341: PUSH
33342: LD_INT 5
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: LD_INT 5
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 5
33364: NEG
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 3
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 3
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: NEG
33467: PUSH
33468: LD_INT 4
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 4
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 5
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 5
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 3
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33616: LD_ADDR_VAR 0 32
33620: PUSH
33621: LD_INT 4
33623: NEG
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 4
33668: NEG
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 5
33679: NEG
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 5
33690: NEG
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 5
33702: NEG
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: NEG
33726: PUSH
33727: LD_INT 3
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: LD_INT 4
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: LD_INT 3
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 4
33797: NEG
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 4
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 4
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 3
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 4
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 5
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: NEG
33924: PUSH
33925: LD_INT 5
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 3
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 4
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 4
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 4
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 5
34048: PUSH
34049: LD_INT 4
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 5
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 5
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: LD_INT 5
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34163: LD_ADDR_VAR 0 33
34167: PUSH
34168: LD_INT 4
34170: NEG
34171: PUSH
34172: LD_INT 4
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 4
34182: NEG
34183: PUSH
34184: LD_INT 5
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: NEG
34195: PUSH
34196: LD_INT 4
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 4
34218: NEG
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 5
34230: NEG
34231: PUSH
34232: LD_INT 4
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 5
34242: NEG
34243: PUSH
34244: LD_INT 5
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: LD_INT 5
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 5
34266: NEG
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 3
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: LD_INT 3
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: LD_INT 4
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 2
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 4
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 5
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 4
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 4
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 4
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 4
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 5
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 5
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34701: LD_ADDR_VAR 0 34
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 4
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 5
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: LD_INT 4
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 3
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 4
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 5
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 3
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 5
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 4
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: LD_INT 4
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 5
34923: PUSH
34924: LD_INT 4
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 5
34933: PUSH
34934: LD_INT 5
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: LD_INT 4
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 5
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 5
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 4
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 4
35086: NEG
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 4
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 3
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 4
35131: NEG
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 5
35142: NEG
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 5
35153: NEG
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 5
35165: NEG
35166: PUSH
35167: LD_INT 2
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: ST_TO_ADDR
// end ; end ;
35233: GO 35236
35235: POP
// case btype of b_depot , b_warehouse :
35236: LD_VAR 0 1
35240: PUSH
35241: LD_INT 0
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35255
35247: LD_INT 1
35249: DOUBLE
35250: EQUAL
35251: IFTRUE 35255
35253: GO 35456
35255: POP
// case nation of nation_american :
35256: LD_VAR 0 5
35260: PUSH
35261: LD_INT 1
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35325
35269: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35270: LD_ADDR_VAR 0 9
35274: PUSH
35275: LD_VAR 0 11
35279: PUSH
35280: LD_VAR 0 12
35284: PUSH
35285: LD_VAR 0 13
35289: PUSH
35290: LD_VAR 0 14
35294: PUSH
35295: LD_VAR 0 15
35299: PUSH
35300: LD_VAR 0 16
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: PUSH
35313: LD_VAR 0 4
35317: PUSH
35318: LD_INT 1
35320: PLUS
35321: ARRAY
35322: ST_TO_ADDR
35323: GO 35454
35325: LD_INT 2
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35333
35331: GO 35389
35333: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: LD_VAR 0 17
35343: PUSH
35344: LD_VAR 0 18
35348: PUSH
35349: LD_VAR 0 19
35353: PUSH
35354: LD_VAR 0 20
35358: PUSH
35359: LD_VAR 0 21
35363: PUSH
35364: LD_VAR 0 22
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: PUSH
35377: LD_VAR 0 4
35381: PUSH
35382: LD_INT 1
35384: PLUS
35385: ARRAY
35386: ST_TO_ADDR
35387: GO 35454
35389: LD_INT 3
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35453
35397: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_VAR 0 23
35407: PUSH
35408: LD_VAR 0 24
35412: PUSH
35413: LD_VAR 0 25
35417: PUSH
35418: LD_VAR 0 26
35422: PUSH
35423: LD_VAR 0 27
35427: PUSH
35428: LD_VAR 0 28
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: LD_INT 1
35448: PLUS
35449: ARRAY
35450: ST_TO_ADDR
35451: GO 35454
35453: POP
35454: GO 36009
35456: LD_INT 2
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35470
35462: LD_INT 3
35464: DOUBLE
35465: EQUAL
35466: IFTRUE 35470
35468: GO 35526
35470: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35471: LD_ADDR_VAR 0 9
35475: PUSH
35476: LD_VAR 0 29
35480: PUSH
35481: LD_VAR 0 30
35485: PUSH
35486: LD_VAR 0 31
35490: PUSH
35491: LD_VAR 0 32
35495: PUSH
35496: LD_VAR 0 33
35500: PUSH
35501: LD_VAR 0 34
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: PUSH
35514: LD_VAR 0 4
35518: PUSH
35519: LD_INT 1
35521: PLUS
35522: ARRAY
35523: ST_TO_ADDR
35524: GO 36009
35526: LD_INT 16
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35588
35532: LD_INT 17
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35588
35538: LD_INT 18
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35588
35544: LD_INT 19
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35588
35550: LD_INT 22
35552: DOUBLE
35553: EQUAL
35554: IFTRUE 35588
35556: LD_INT 20
35558: DOUBLE
35559: EQUAL
35560: IFTRUE 35588
35562: LD_INT 21
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35588
35568: LD_INT 23
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35588
35574: LD_INT 24
35576: DOUBLE
35577: EQUAL
35578: IFTRUE 35588
35580: LD_INT 25
35582: DOUBLE
35583: EQUAL
35584: IFTRUE 35588
35586: GO 35644
35588: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: LD_VAR 0 35
35598: PUSH
35599: LD_VAR 0 36
35603: PUSH
35604: LD_VAR 0 37
35608: PUSH
35609: LD_VAR 0 38
35613: PUSH
35614: LD_VAR 0 39
35618: PUSH
35619: LD_VAR 0 40
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: PUSH
35632: LD_VAR 0 4
35636: PUSH
35637: LD_INT 1
35639: PLUS
35640: ARRAY
35641: ST_TO_ADDR
35642: GO 36009
35644: LD_INT 6
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35700
35650: LD_INT 7
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35700
35656: LD_INT 8
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35700
35662: LD_INT 13
35664: DOUBLE
35665: EQUAL
35666: IFTRUE 35700
35668: LD_INT 12
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35700
35674: LD_INT 15
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35700
35680: LD_INT 11
35682: DOUBLE
35683: EQUAL
35684: IFTRUE 35700
35686: LD_INT 14
35688: DOUBLE
35689: EQUAL
35690: IFTRUE 35700
35692: LD_INT 10
35694: DOUBLE
35695: EQUAL
35696: IFTRUE 35700
35698: GO 35756
35700: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35701: LD_ADDR_VAR 0 9
35705: PUSH
35706: LD_VAR 0 41
35710: PUSH
35711: LD_VAR 0 42
35715: PUSH
35716: LD_VAR 0 43
35720: PUSH
35721: LD_VAR 0 44
35725: PUSH
35726: LD_VAR 0 45
35730: PUSH
35731: LD_VAR 0 46
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: PUSH
35744: LD_VAR 0 4
35748: PUSH
35749: LD_INT 1
35751: PLUS
35752: ARRAY
35753: ST_TO_ADDR
35754: GO 36009
35756: LD_INT 36
35758: DOUBLE
35759: EQUAL
35760: IFTRUE 35764
35762: GO 35820
35764: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_VAR 0 47
35774: PUSH
35775: LD_VAR 0 48
35779: PUSH
35780: LD_VAR 0 49
35784: PUSH
35785: LD_VAR 0 50
35789: PUSH
35790: LD_VAR 0 51
35794: PUSH
35795: LD_VAR 0 52
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: PUSH
35808: LD_VAR 0 4
35812: PUSH
35813: LD_INT 1
35815: PLUS
35816: ARRAY
35817: ST_TO_ADDR
35818: GO 36009
35820: LD_INT 4
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35846
35826: LD_INT 5
35828: DOUBLE
35829: EQUAL
35830: IFTRUE 35846
35832: LD_INT 34
35834: DOUBLE
35835: EQUAL
35836: IFTRUE 35846
35838: LD_INT 37
35840: DOUBLE
35841: EQUAL
35842: IFTRUE 35846
35844: GO 35902
35846: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_VAR 0 53
35856: PUSH
35857: LD_VAR 0 54
35861: PUSH
35862: LD_VAR 0 55
35866: PUSH
35867: LD_VAR 0 56
35871: PUSH
35872: LD_VAR 0 57
35876: PUSH
35877: LD_VAR 0 58
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: LD_VAR 0 4
35894: PUSH
35895: LD_INT 1
35897: PLUS
35898: ARRAY
35899: ST_TO_ADDR
35900: GO 36009
35902: LD_INT 31
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35952
35908: LD_INT 32
35910: DOUBLE
35911: EQUAL
35912: IFTRUE 35952
35914: LD_INT 33
35916: DOUBLE
35917: EQUAL
35918: IFTRUE 35952
35920: LD_INT 27
35922: DOUBLE
35923: EQUAL
35924: IFTRUE 35952
35926: LD_INT 26
35928: DOUBLE
35929: EQUAL
35930: IFTRUE 35952
35932: LD_INT 28
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35952
35938: LD_INT 29
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35952
35944: LD_INT 30
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 36008
35952: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35953: LD_ADDR_VAR 0 9
35957: PUSH
35958: LD_VAR 0 59
35962: PUSH
35963: LD_VAR 0 60
35967: PUSH
35968: LD_VAR 0 61
35972: PUSH
35973: LD_VAR 0 62
35977: PUSH
35978: LD_VAR 0 63
35982: PUSH
35983: LD_VAR 0 64
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: LD_VAR 0 4
36000: PUSH
36001: LD_INT 1
36003: PLUS
36004: ARRAY
36005: ST_TO_ADDR
36006: GO 36009
36008: POP
// temp_list2 = [ ] ;
36009: LD_ADDR_VAR 0 10
36013: PUSH
36014: EMPTY
36015: ST_TO_ADDR
// for i in temp_list do
36016: LD_ADDR_VAR 0 8
36020: PUSH
36021: LD_VAR 0 9
36025: PUSH
36026: FOR_IN
36027: IFFALSE 36079
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36029: LD_ADDR_VAR 0 10
36033: PUSH
36034: LD_VAR 0 10
36038: PUSH
36039: LD_VAR 0 8
36043: PUSH
36044: LD_INT 1
36046: ARRAY
36047: PUSH
36048: LD_VAR 0 2
36052: PLUS
36053: PUSH
36054: LD_VAR 0 8
36058: PUSH
36059: LD_INT 2
36061: ARRAY
36062: PUSH
36063: LD_VAR 0 3
36067: PLUS
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: EMPTY
36074: LIST
36075: ADD
36076: ST_TO_ADDR
36077: GO 36026
36079: POP
36080: POP
// result = temp_list2 ;
36081: LD_ADDR_VAR 0 7
36085: PUSH
36086: LD_VAR 0 10
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 7
36095: RET
// export function EnemyInRange ( unit , dist ) ; begin
36096: LD_INT 0
36098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 255
36113: PPUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 250
36123: PPUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 251
36133: PPUSH
36134: LD_VAR 0 2
36138: PPUSH
36139: CALL 9353 0 4
36143: PUSH
36144: LD_INT 4
36146: ARRAY
36147: ST_TO_ADDR
// end ;
36148: LD_VAR 0 3
36152: RET
// export function PlayerSeeMe ( unit ) ; begin
36153: LD_INT 0
36155: PPUSH
// result := See ( your_side , unit ) ;
36156: LD_ADDR_VAR 0 2
36160: PUSH
36161: LD_OWVAR 2
36165: PPUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL_OW 292
36175: ST_TO_ADDR
// end ;
36176: LD_VAR 0 2
36180: RET
// export function ReverseDir ( unit ) ; begin
36181: LD_INT 0
36183: PPUSH
// if not unit then
36184: LD_VAR 0 1
36188: NOT
36189: IFFALSE 36193
// exit ;
36191: GO 36216
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 254
36207: PUSH
36208: LD_INT 3
36210: PLUS
36211: PUSH
36212: LD_INT 6
36214: MOD
36215: ST_TO_ADDR
// end ;
36216: LD_VAR 0 2
36220: RET
// export function ReverseArray ( array ) ; var i ; begin
36221: LD_INT 0
36223: PPUSH
36224: PPUSH
// if not array then
36225: LD_VAR 0 1
36229: NOT
36230: IFFALSE 36234
// exit ;
36232: GO 36289
// result := [ ] ;
36234: LD_ADDR_VAR 0 2
36238: PUSH
36239: EMPTY
36240: ST_TO_ADDR
// for i := array downto 1 do
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: DOUBLE
36247: LD_VAR 0 1
36251: INC
36252: ST_TO_ADDR
36253: LD_INT 1
36255: PUSH
36256: FOR_DOWNTO
36257: IFFALSE 36287
// result := Join ( result , array [ i ] ) ;
36259: LD_ADDR_VAR 0 2
36263: PUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: LD_VAR 0 1
36273: PUSH
36274: LD_VAR 0 3
36278: ARRAY
36279: PPUSH
36280: CALL 41131 0 2
36284: ST_TO_ADDR
36285: GO 36256
36287: POP
36288: POP
// end ;
36289: LD_VAR 0 2
36293: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36294: LD_INT 0
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
// if not unit or not hexes then
36302: LD_VAR 0 1
36306: NOT
36307: IFTRUE 36316
36309: PUSH
36310: LD_VAR 0 2
36314: NOT
36315: OR
36316: IFFALSE 36320
// exit ;
36318: GO 36443
// dist := 9999 ;
36320: LD_ADDR_VAR 0 5
36324: PUSH
36325: LD_INT 9999
36327: ST_TO_ADDR
// for i = 1 to hexes do
36328: LD_ADDR_VAR 0 4
36332: PUSH
36333: DOUBLE
36334: LD_INT 1
36336: DEC
36337: ST_TO_ADDR
36338: LD_VAR 0 2
36342: PUSH
36343: FOR_TO
36344: IFFALSE 36431
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36346: LD_ADDR_VAR 0 6
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_VAR 0 2
36360: PUSH
36361: LD_VAR 0 4
36365: ARRAY
36366: PUSH
36367: LD_INT 1
36369: ARRAY
36370: PPUSH
36371: LD_VAR 0 2
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PUSH
36382: LD_INT 2
36384: ARRAY
36385: PPUSH
36386: CALL_OW 297
36390: ST_TO_ADDR
// if tdist < dist then
36391: LD_VAR 0 6
36395: PUSH
36396: LD_VAR 0 5
36400: LESS
36401: IFFALSE 36429
// begin hex := hexes [ i ] ;
36403: LD_ADDR_VAR 0 8
36407: PUSH
36408: LD_VAR 0 2
36412: PUSH
36413: LD_VAR 0 4
36417: ARRAY
36418: ST_TO_ADDR
// dist := tdist ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_VAR 0 6
36428: ST_TO_ADDR
// end ; end ;
36429: GO 36343
36431: POP
36432: POP
// result := hex ;
36433: LD_ADDR_VAR 0 3
36437: PUSH
36438: LD_VAR 0 8
36442: ST_TO_ADDR
// end ;
36443: LD_VAR 0 3
36447: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36448: LD_INT 0
36450: PPUSH
36451: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36452: LD_VAR 0 1
36456: NOT
36457: IFTRUE 36496
36459: PUSH
36460: LD_VAR 0 1
36464: PUSH
36465: LD_INT 21
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 23
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PPUSH
36489: CALL_OW 69
36493: IN
36494: NOT
36495: OR
36496: IFFALSE 36500
// exit ;
36498: GO 36547
// for i = 1 to 3 do
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: DOUBLE
36506: LD_INT 1
36508: DEC
36509: ST_TO_ADDR
36510: LD_INT 3
36512: PUSH
36513: FOR_TO
36514: IFFALSE 36545
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 250
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 251
36535: PPUSH
36536: LD_INT 1
36538: PPUSH
36539: CALL_OW 453
36543: GO 36513
36545: POP
36546: POP
// end ;
36547: LD_VAR 0 2
36551: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36552: LD_INT 0
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
// if not unit or not enemy_unit then
36560: LD_VAR 0 1
36564: NOT
36565: IFTRUE 36574
36567: PUSH
36568: LD_VAR 0 2
36572: NOT
36573: OR
36574: IFFALSE 36578
// exit ;
36576: GO 37049
// if GetLives ( i ) < 250 then
36578: LD_VAR 0 4
36582: PPUSH
36583: CALL_OW 256
36587: PUSH
36588: LD_INT 250
36590: LESS
36591: IFFALSE 36604
// begin ComAutodestruct ( i ) ;
36593: LD_VAR 0 4
36597: PPUSH
36598: CALL 36448 0 1
// exit ;
36602: GO 37049
// end ; x := GetX ( enemy_unit ) ;
36604: LD_ADDR_VAR 0 7
36608: PUSH
36609: LD_VAR 0 2
36613: PPUSH
36614: CALL_OW 250
36618: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36619: LD_ADDR_VAR 0 8
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL_OW 251
36633: ST_TO_ADDR
// if not x or not y then
36634: LD_VAR 0 7
36638: NOT
36639: IFTRUE 36648
36641: PUSH
36642: LD_VAR 0 8
36646: NOT
36647: OR
36648: IFFALSE 36652
// exit ;
36650: GO 37049
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36652: LD_ADDR_VAR 0 6
36656: PUSH
36657: LD_VAR 0 7
36661: PPUSH
36662: LD_INT 0
36664: PPUSH
36665: LD_INT 4
36667: PPUSH
36668: CALL_OW 272
36672: PUSH
36673: LD_VAR 0 8
36677: PPUSH
36678: LD_INT 0
36680: PPUSH
36681: LD_INT 4
36683: PPUSH
36684: CALL_OW 273
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_VAR 0 7
36697: PPUSH
36698: LD_INT 1
36700: PPUSH
36701: LD_INT 4
36703: PPUSH
36704: CALL_OW 272
36708: PUSH
36709: LD_VAR 0 8
36713: PPUSH
36714: LD_INT 1
36716: PPUSH
36717: LD_INT 4
36719: PPUSH
36720: CALL_OW 273
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_VAR 0 7
36733: PPUSH
36734: LD_INT 2
36736: PPUSH
36737: LD_INT 4
36739: PPUSH
36740: CALL_OW 272
36744: PUSH
36745: LD_VAR 0 8
36749: PPUSH
36750: LD_INT 2
36752: PPUSH
36753: LD_INT 4
36755: PPUSH
36756: CALL_OW 273
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_VAR 0 7
36769: PPUSH
36770: LD_INT 3
36772: PPUSH
36773: LD_INT 4
36775: PPUSH
36776: CALL_OW 272
36780: PUSH
36781: LD_VAR 0 8
36785: PPUSH
36786: LD_INT 3
36788: PPUSH
36789: LD_INT 4
36791: PPUSH
36792: CALL_OW 273
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_VAR 0 7
36805: PPUSH
36806: LD_INT 4
36808: PPUSH
36809: LD_INT 4
36811: PPUSH
36812: CALL_OW 272
36816: PUSH
36817: LD_VAR 0 8
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: LD_INT 4
36827: PPUSH
36828: CALL_OW 273
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_VAR 0 7
36841: PPUSH
36842: LD_INT 5
36844: PPUSH
36845: LD_INT 4
36847: PPUSH
36848: CALL_OW 272
36852: PUSH
36853: LD_VAR 0 8
36857: PPUSH
36858: LD_INT 5
36860: PPUSH
36861: LD_INT 4
36863: PPUSH
36864: CALL_OW 273
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
// for i = tmp downto 1 do
36881: LD_ADDR_VAR 0 4
36885: PUSH
36886: DOUBLE
36887: LD_VAR 0 6
36891: INC
36892: ST_TO_ADDR
36893: LD_INT 1
36895: PUSH
36896: FOR_DOWNTO
36897: IFFALSE 37000
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36899: LD_VAR 0 6
36903: PUSH
36904: LD_VAR 0 4
36908: ARRAY
36909: PUSH
36910: LD_INT 1
36912: ARRAY
36913: PPUSH
36914: LD_VAR 0 6
36918: PUSH
36919: LD_VAR 0 4
36923: ARRAY
36924: PUSH
36925: LD_INT 2
36927: ARRAY
36928: PPUSH
36929: CALL_OW 488
36933: NOT
36934: IFTRUE 36976
36936: PUSH
36937: LD_VAR 0 6
36941: PUSH
36942: LD_VAR 0 4
36946: ARRAY
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PPUSH
36952: LD_VAR 0 6
36956: PUSH
36957: LD_VAR 0 4
36961: ARRAY
36962: PUSH
36963: LD_INT 2
36965: ARRAY
36966: PPUSH
36967: CALL_OW 428
36971: PUSH
36972: LD_INT 0
36974: NONEQUAL
36975: OR
36976: IFFALSE 36998
// tmp := Delete ( tmp , i ) ;
36978: LD_ADDR_VAR 0 6
36982: PUSH
36983: LD_VAR 0 6
36987: PPUSH
36988: LD_VAR 0 4
36992: PPUSH
36993: CALL_OW 3
36997: ST_TO_ADDR
36998: GO 36896
37000: POP
37001: POP
// j := GetClosestHex ( unit , tmp ) ;
37002: LD_ADDR_VAR 0 5
37006: PUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: LD_VAR 0 6
37016: PPUSH
37017: CALL 36294 0 2
37021: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37022: LD_VAR 0 1
37026: PPUSH
37027: LD_VAR 0 5
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: LD_VAR 0 5
37040: PUSH
37041: LD_INT 2
37043: ARRAY
37044: PPUSH
37045: CALL_OW 111
// end ;
37049: LD_VAR 0 3
37053: RET
// export function PrepareApemanSoldier ( ) ; begin
37054: LD_INT 0
37056: PPUSH
// uc_nation := 0 ;
37057: LD_ADDR_OWVAR 21
37061: PUSH
37062: LD_INT 0
37064: ST_TO_ADDR
// hc_sex := sex_male ;
37065: LD_ADDR_OWVAR 27
37069: PUSH
37070: LD_INT 1
37072: ST_TO_ADDR
// hc_name :=  ;
37073: LD_ADDR_OWVAR 26
37077: PUSH
37078: LD_STRING 
37080: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37081: LD_ADDR_OWVAR 28
37085: PUSH
37086: LD_INT 15
37088: ST_TO_ADDR
// hc_gallery :=  ;
37089: LD_ADDR_OWVAR 33
37093: PUSH
37094: LD_STRING 
37096: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37097: LD_ADDR_OWVAR 31
37101: PUSH
37102: LD_INT 0
37104: PPUSH
37105: LD_INT 3
37107: PPUSH
37108: CALL_OW 12
37112: PUSH
37113: LD_INT 0
37115: PPUSH
37116: LD_INT 3
37118: PPUSH
37119: CALL_OW 12
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37136: LD_ADDR_OWVAR 29
37140: PUSH
37141: LD_INT 12
37143: PUSH
37144: LD_INT 12
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// end ;
37151: LD_VAR 0 1
37155: RET
// export function PrepareApemanEngineer ( ) ; begin
37156: LD_INT 0
37158: PPUSH
// uc_nation := 0 ;
37159: LD_ADDR_OWVAR 21
37163: PUSH
37164: LD_INT 0
37166: ST_TO_ADDR
// hc_sex := sex_male ;
37167: LD_ADDR_OWVAR 27
37171: PUSH
37172: LD_INT 1
37174: ST_TO_ADDR
// hc_name :=  ;
37175: LD_ADDR_OWVAR 26
37179: PUSH
37180: LD_STRING 
37182: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37183: LD_ADDR_OWVAR 28
37187: PUSH
37188: LD_INT 16
37190: ST_TO_ADDR
// hc_gallery :=  ;
37191: LD_ADDR_OWVAR 33
37195: PUSH
37196: LD_STRING 
37198: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37199: LD_ADDR_OWVAR 31
37203: PUSH
37204: LD_INT 0
37206: PPUSH
37207: LD_INT 3
37209: PPUSH
37210: CALL_OW 12
37214: PUSH
37215: LD_INT 0
37217: PPUSH
37218: LD_INT 3
37220: PPUSH
37221: CALL_OW 12
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37238: LD_ADDR_OWVAR 29
37242: PUSH
37243: LD_INT 12
37245: PUSH
37246: LD_INT 12
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// end ;
37253: LD_VAR 0 1
37257: RET
// export function PrepareApeman ( agressivity ) ; begin
37258: LD_INT 0
37260: PPUSH
// uc_side := 0 ;
37261: LD_ADDR_OWVAR 20
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// uc_nation := 0 ;
37269: LD_ADDR_OWVAR 21
37273: PUSH
37274: LD_INT 0
37276: ST_TO_ADDR
// hc_sex := sex_male ;
37277: LD_ADDR_OWVAR 27
37281: PUSH
37282: LD_INT 1
37284: ST_TO_ADDR
// hc_class := class_apeman ;
37285: LD_ADDR_OWVAR 28
37289: PUSH
37290: LD_INT 12
37292: ST_TO_ADDR
// hc_gallery :=  ;
37293: LD_ADDR_OWVAR 33
37297: PUSH
37298: LD_STRING 
37300: ST_TO_ADDR
// hc_name :=  ;
37301: LD_ADDR_OWVAR 26
37305: PUSH
37306: LD_STRING 
37308: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37309: LD_ADDR_OWVAR 29
37313: PUSH
37314: LD_INT 12
37316: PUSH
37317: LD_INT 12
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// if agressivity = 0 then
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 0
37331: EQUAL
37332: IFFALSE 37344
// hc_agressivity := 0 else
37334: LD_ADDR_OWVAR 35
37338: PUSH
37339: LD_INT 0
37341: ST_TO_ADDR
37342: GO 37365
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37344: LD_ADDR_OWVAR 35
37348: PUSH
37349: LD_VAR 0 1
37353: NEG
37354: PPUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 12
37364: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37365: LD_ADDR_OWVAR 31
37369: PUSH
37370: LD_INT 0
37372: PPUSH
37373: LD_INT 3
37375: PPUSH
37376: CALL_OW 12
37380: PUSH
37381: LD_INT 0
37383: PPUSH
37384: LD_INT 3
37386: PPUSH
37387: CALL_OW 12
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// end ;
37404: LD_VAR 0 2
37408: RET
// export function PrepareTiger ( agressivity ) ; begin
37409: LD_INT 0
37411: PPUSH
// uc_side := 0 ;
37412: LD_ADDR_OWVAR 20
37416: PUSH
37417: LD_INT 0
37419: ST_TO_ADDR
// uc_nation := 0 ;
37420: LD_ADDR_OWVAR 21
37424: PUSH
37425: LD_INT 0
37427: ST_TO_ADDR
// InitHc ;
37428: CALL_OW 19
// hc_class := class_tiger ;
37432: LD_ADDR_OWVAR 28
37436: PUSH
37437: LD_INT 14
37439: ST_TO_ADDR
// hc_gallery :=  ;
37440: LD_ADDR_OWVAR 33
37444: PUSH
37445: LD_STRING 
37447: ST_TO_ADDR
// hc_name :=  ;
37448: LD_ADDR_OWVAR 26
37452: PUSH
37453: LD_STRING 
37455: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37456: LD_ADDR_OWVAR 35
37460: PUSH
37461: LD_VAR 0 1
37465: NEG
37466: PPUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 12
37476: ST_TO_ADDR
// end ;
37477: LD_VAR 0 2
37481: RET
// export function PrepareEnchidna ( ) ; begin
37482: LD_INT 0
37484: PPUSH
// uc_side := 0 ;
37485: LD_ADDR_OWVAR 20
37489: PUSH
37490: LD_INT 0
37492: ST_TO_ADDR
// uc_nation := 0 ;
37493: LD_ADDR_OWVAR 21
37497: PUSH
37498: LD_INT 0
37500: ST_TO_ADDR
// InitHc ;
37501: CALL_OW 19
// hc_class := class_baggie ;
37505: LD_ADDR_OWVAR 28
37509: PUSH
37510: LD_INT 13
37512: ST_TO_ADDR
// hc_gallery :=  ;
37513: LD_ADDR_OWVAR 33
37517: PUSH
37518: LD_STRING 
37520: ST_TO_ADDR
// hc_name :=  ;
37521: LD_ADDR_OWVAR 26
37525: PUSH
37526: LD_STRING 
37528: ST_TO_ADDR
// end ;
37529: LD_VAR 0 1
37533: RET
// export function PrepareFrog ( ) ; begin
37534: LD_INT 0
37536: PPUSH
// uc_side := 0 ;
37537: LD_ADDR_OWVAR 20
37541: PUSH
37542: LD_INT 0
37544: ST_TO_ADDR
// uc_nation := 0 ;
37545: LD_ADDR_OWVAR 21
37549: PUSH
37550: LD_INT 0
37552: ST_TO_ADDR
// InitHc ;
37553: CALL_OW 19
// hc_class := class_frog ;
37557: LD_ADDR_OWVAR 28
37561: PUSH
37562: LD_INT 19
37564: ST_TO_ADDR
// hc_gallery :=  ;
37565: LD_ADDR_OWVAR 33
37569: PUSH
37570: LD_STRING 
37572: ST_TO_ADDR
// hc_name :=  ;
37573: LD_ADDR_OWVAR 26
37577: PUSH
37578: LD_STRING 
37580: ST_TO_ADDR
// end ;
37581: LD_VAR 0 1
37585: RET
// export function PrepareFish ( ) ; begin
37586: LD_INT 0
37588: PPUSH
// uc_side := 0 ;
37589: LD_ADDR_OWVAR 20
37593: PUSH
37594: LD_INT 0
37596: ST_TO_ADDR
// uc_nation := 0 ;
37597: LD_ADDR_OWVAR 21
37601: PUSH
37602: LD_INT 0
37604: ST_TO_ADDR
// InitHc ;
37605: CALL_OW 19
// hc_class := class_fish ;
37609: LD_ADDR_OWVAR 28
37613: PUSH
37614: LD_INT 20
37616: ST_TO_ADDR
// hc_gallery :=  ;
37617: LD_ADDR_OWVAR 33
37621: PUSH
37622: LD_STRING 
37624: ST_TO_ADDR
// hc_name :=  ;
37625: LD_ADDR_OWVAR 26
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// end ;
37633: LD_VAR 0 1
37637: RET
// export function PrepareBird ( ) ; begin
37638: LD_INT 0
37640: PPUSH
// uc_side := 0 ;
37641: LD_ADDR_OWVAR 20
37645: PUSH
37646: LD_INT 0
37648: ST_TO_ADDR
// uc_nation := 0 ;
37649: LD_ADDR_OWVAR 21
37653: PUSH
37654: LD_INT 0
37656: ST_TO_ADDR
// InitHc ;
37657: CALL_OW 19
// hc_class := class_phororhacos ;
37661: LD_ADDR_OWVAR 28
37665: PUSH
37666: LD_INT 18
37668: ST_TO_ADDR
// hc_gallery :=  ;
37669: LD_ADDR_OWVAR 33
37673: PUSH
37674: LD_STRING 
37676: ST_TO_ADDR
// hc_name :=  ;
37677: LD_ADDR_OWVAR 26
37681: PUSH
37682: LD_STRING 
37684: ST_TO_ADDR
// end ;
37685: LD_VAR 0 1
37689: RET
// export function PrepareHorse ( ) ; begin
37690: LD_INT 0
37692: PPUSH
// uc_side := 0 ;
37693: LD_ADDR_OWVAR 20
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// uc_nation := 0 ;
37701: LD_ADDR_OWVAR 21
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// InitHc ;
37709: CALL_OW 19
// hc_class := class_horse ;
37713: LD_ADDR_OWVAR 28
37717: PUSH
37718: LD_INT 21
37720: ST_TO_ADDR
// hc_gallery :=  ;
37721: LD_ADDR_OWVAR 33
37725: PUSH
37726: LD_STRING 
37728: ST_TO_ADDR
// hc_name :=  ;
37729: LD_ADDR_OWVAR 26
37733: PUSH
37734: LD_STRING 
37736: ST_TO_ADDR
// end ;
37737: LD_VAR 0 1
37741: RET
// export function PrepareMastodont ( ) ; begin
37742: LD_INT 0
37744: PPUSH
// uc_side := 0 ;
37745: LD_ADDR_OWVAR 20
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
// uc_nation := 0 ;
37753: LD_ADDR_OWVAR 21
37757: PUSH
37758: LD_INT 0
37760: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37761: LD_ADDR_OWVAR 37
37765: PUSH
37766: LD_INT 31
37768: ST_TO_ADDR
// vc_control := control_rider ;
37769: LD_ADDR_OWVAR 38
37773: PUSH
37774: LD_INT 4
37776: ST_TO_ADDR
// end ;
37777: LD_VAR 0 1
37781: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37782: LD_INT 0
37784: PPUSH
37785: PPUSH
37786: PPUSH
// uc_side = 0 ;
37787: LD_ADDR_OWVAR 20
37791: PUSH
37792: LD_INT 0
37794: ST_TO_ADDR
// uc_nation = 0 ;
37795: LD_ADDR_OWVAR 21
37799: PUSH
37800: LD_INT 0
37802: ST_TO_ADDR
// InitHc_All ( ) ;
37803: CALL_OW 584
// InitVc ;
37807: CALL_OW 20
// if mastodonts then
37811: LD_VAR 0 6
37815: IFFALSE 37882
// for i = 1 to mastodonts do
37817: LD_ADDR_VAR 0 11
37821: PUSH
37822: DOUBLE
37823: LD_INT 1
37825: DEC
37826: ST_TO_ADDR
37827: LD_VAR 0 6
37831: PUSH
37832: FOR_TO
37833: IFFALSE 37880
// begin vc_chassis := 31 ;
37835: LD_ADDR_OWVAR 37
37839: PUSH
37840: LD_INT 31
37842: ST_TO_ADDR
// vc_control := control_rider ;
37843: LD_ADDR_OWVAR 38
37847: PUSH
37848: LD_INT 4
37850: ST_TO_ADDR
// animal := CreateVehicle ;
37851: LD_ADDR_VAR 0 12
37855: PUSH
37856: CALL_OW 45
37860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37861: LD_VAR 0 12
37865: PPUSH
37866: LD_VAR 0 8
37870: PPUSH
37871: LD_INT 0
37873: PPUSH
37874: CALL 40024 0 3
// end ;
37878: GO 37832
37880: POP
37881: POP
// if horses then
37882: LD_VAR 0 5
37886: IFFALSE 37953
// for i = 1 to horses do
37888: LD_ADDR_VAR 0 11
37892: PUSH
37893: DOUBLE
37894: LD_INT 1
37896: DEC
37897: ST_TO_ADDR
37898: LD_VAR 0 5
37902: PUSH
37903: FOR_TO
37904: IFFALSE 37951
// begin hc_class := 21 ;
37906: LD_ADDR_OWVAR 28
37910: PUSH
37911: LD_INT 21
37913: ST_TO_ADDR
// hc_gallery :=  ;
37914: LD_ADDR_OWVAR 33
37918: PUSH
37919: LD_STRING 
37921: ST_TO_ADDR
// animal := CreateHuman ;
37922: LD_ADDR_VAR 0 12
37926: PUSH
37927: CALL_OW 44
37931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37932: LD_VAR 0 12
37936: PPUSH
37937: LD_VAR 0 8
37941: PPUSH
37942: LD_INT 0
37944: PPUSH
37945: CALL 40024 0 3
// end ;
37949: GO 37903
37951: POP
37952: POP
// if birds then
37953: LD_VAR 0 1
37957: IFFALSE 38024
// for i = 1 to birds do
37959: LD_ADDR_VAR 0 11
37963: PUSH
37964: DOUBLE
37965: LD_INT 1
37967: DEC
37968: ST_TO_ADDR
37969: LD_VAR 0 1
37973: PUSH
37974: FOR_TO
37975: IFFALSE 38022
// begin hc_class := 18 ;
37977: LD_ADDR_OWVAR 28
37981: PUSH
37982: LD_INT 18
37984: ST_TO_ADDR
// hc_gallery =  ;
37985: LD_ADDR_OWVAR 33
37989: PUSH
37990: LD_STRING 
37992: ST_TO_ADDR
// animal := CreateHuman ;
37993: LD_ADDR_VAR 0 12
37997: PUSH
37998: CALL_OW 44
38002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38003: LD_VAR 0 12
38007: PPUSH
38008: LD_VAR 0 8
38012: PPUSH
38013: LD_INT 0
38015: PPUSH
38016: CALL 40024 0 3
// end ;
38020: GO 37974
38022: POP
38023: POP
// if tigers then
38024: LD_VAR 0 2
38028: IFFALSE 38112
// for i = 1 to tigers do
38030: LD_ADDR_VAR 0 11
38034: PUSH
38035: DOUBLE
38036: LD_INT 1
38038: DEC
38039: ST_TO_ADDR
38040: LD_VAR 0 2
38044: PUSH
38045: FOR_TO
38046: IFFALSE 38110
// begin hc_class = class_tiger ;
38048: LD_ADDR_OWVAR 28
38052: PUSH
38053: LD_INT 14
38055: ST_TO_ADDR
// hc_gallery =  ;
38056: LD_ADDR_OWVAR 33
38060: PUSH
38061: LD_STRING 
38063: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38064: LD_ADDR_OWVAR 35
38068: PUSH
38069: LD_INT 7
38071: NEG
38072: PPUSH
38073: LD_INT 7
38075: PPUSH
38076: CALL_OW 12
38080: ST_TO_ADDR
// animal := CreateHuman ;
38081: LD_ADDR_VAR 0 12
38085: PUSH
38086: CALL_OW 44
38090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38091: LD_VAR 0 12
38095: PPUSH
38096: LD_VAR 0 8
38100: PPUSH
38101: LD_INT 0
38103: PPUSH
38104: CALL 40024 0 3
// end ;
38108: GO 38045
38110: POP
38111: POP
// if apemans then
38112: LD_VAR 0 3
38116: IFFALSE 38239
// for i = 1 to apemans do
38118: LD_ADDR_VAR 0 11
38122: PUSH
38123: DOUBLE
38124: LD_INT 1
38126: DEC
38127: ST_TO_ADDR
38128: LD_VAR 0 3
38132: PUSH
38133: FOR_TO
38134: IFFALSE 38237
// begin hc_class = class_apeman ;
38136: LD_ADDR_OWVAR 28
38140: PUSH
38141: LD_INT 12
38143: ST_TO_ADDR
// hc_gallery =  ;
38144: LD_ADDR_OWVAR 33
38148: PUSH
38149: LD_STRING 
38151: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38152: LD_ADDR_OWVAR 35
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PPUSH
38161: LD_INT 2
38163: PPUSH
38164: CALL_OW 12
38168: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38169: LD_ADDR_OWVAR 31
38173: PUSH
38174: LD_INT 1
38176: PPUSH
38177: LD_INT 3
38179: PPUSH
38180: CALL_OW 12
38184: PUSH
38185: LD_INT 1
38187: PPUSH
38188: LD_INT 3
38190: PPUSH
38191: CALL_OW 12
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// animal := CreateHuman ;
38208: LD_ADDR_VAR 0 12
38212: PUSH
38213: CALL_OW 44
38217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38218: LD_VAR 0 12
38222: PPUSH
38223: LD_VAR 0 8
38227: PPUSH
38228: LD_INT 0
38230: PPUSH
38231: CALL 40024 0 3
// end ;
38235: GO 38133
38237: POP
38238: POP
// if enchidnas then
38239: LD_VAR 0 4
38243: IFFALSE 38310
// for i = 1 to enchidnas do
38245: LD_ADDR_VAR 0 11
38249: PUSH
38250: DOUBLE
38251: LD_INT 1
38253: DEC
38254: ST_TO_ADDR
38255: LD_VAR 0 4
38259: PUSH
38260: FOR_TO
38261: IFFALSE 38308
// begin hc_class = 13 ;
38263: LD_ADDR_OWVAR 28
38267: PUSH
38268: LD_INT 13
38270: ST_TO_ADDR
// hc_gallery =  ;
38271: LD_ADDR_OWVAR 33
38275: PUSH
38276: LD_STRING 
38278: ST_TO_ADDR
// animal := CreateHuman ;
38279: LD_ADDR_VAR 0 12
38283: PUSH
38284: CALL_OW 44
38288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38289: LD_VAR 0 12
38293: PPUSH
38294: LD_VAR 0 8
38298: PPUSH
38299: LD_INT 0
38301: PPUSH
38302: CALL 40024 0 3
// end ;
38306: GO 38260
38308: POP
38309: POP
// if fishes then
38310: LD_VAR 0 7
38314: IFFALSE 38381
// for i = 1 to fishes do
38316: LD_ADDR_VAR 0 11
38320: PUSH
38321: DOUBLE
38322: LD_INT 1
38324: DEC
38325: ST_TO_ADDR
38326: LD_VAR 0 7
38330: PUSH
38331: FOR_TO
38332: IFFALSE 38379
// begin hc_class = 20 ;
38334: LD_ADDR_OWVAR 28
38338: PUSH
38339: LD_INT 20
38341: ST_TO_ADDR
// hc_gallery =  ;
38342: LD_ADDR_OWVAR 33
38346: PUSH
38347: LD_STRING 
38349: ST_TO_ADDR
// animal := CreateHuman ;
38350: LD_ADDR_VAR 0 12
38354: PUSH
38355: CALL_OW 44
38359: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38360: LD_VAR 0 12
38364: PPUSH
38365: LD_VAR 0 9
38369: PPUSH
38370: LD_INT 0
38372: PPUSH
38373: CALL 40024 0 3
// end ;
38377: GO 38331
38379: POP
38380: POP
// end ;
38381: LD_VAR 0 10
38385: RET
// export function WantHeal ( sci , unit ) ; begin
38386: LD_INT 0
38388: PPUSH
// if GetTaskList ( sci ) > 0 then
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 437
38398: PUSH
38399: LD_INT 0
38401: GREATER
38402: IFFALSE 38474
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38404: LD_VAR 0 1
38408: PPUSH
38409: CALL_OW 437
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PUSH
38422: LD_STRING l
38424: EQUAL
38425: IFFALSE 38452
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: CALL_OW 437
38437: PUSH
38438: LD_INT 1
38440: ARRAY
38441: PUSH
38442: LD_INT 4
38444: ARRAY
38445: PUSH
38446: LD_VAR 0 2
38450: EQUAL
38451: AND
38452: IFFALSE 38464
// result := true else
38454: LD_ADDR_VAR 0 3
38458: PUSH
38459: LD_INT 1
38461: ST_TO_ADDR
38462: GO 38472
// result := false ;
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_INT 0
38471: ST_TO_ADDR
// end else
38472: GO 38482
// result := false ;
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: LD_INT 0
38481: ST_TO_ADDR
// end ;
38482: LD_VAR 0 3
38486: RET
// export function HealTarget ( sci ) ; begin
38487: LD_INT 0
38489: PPUSH
// if not sci then
38490: LD_VAR 0 1
38494: NOT
38495: IFFALSE 38499
// exit ;
38497: GO 38564
// result := 0 ;
38499: LD_ADDR_VAR 0 2
38503: PUSH
38504: LD_INT 0
38506: ST_TO_ADDR
// if GetTaskList ( sci ) then
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 437
38516: IFFALSE 38564
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38518: LD_VAR 0 1
38522: PPUSH
38523: CALL_OW 437
38527: PUSH
38528: LD_INT 1
38530: ARRAY
38531: PUSH
38532: LD_INT 1
38534: ARRAY
38535: PUSH
38536: LD_STRING l
38538: EQUAL
38539: IFFALSE 38564
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38541: LD_ADDR_VAR 0 2
38545: PUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 437
38555: PUSH
38556: LD_INT 1
38558: ARRAY
38559: PUSH
38560: LD_INT 4
38562: ARRAY
38563: ST_TO_ADDR
// end ;
38564: LD_VAR 0 2
38568: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38569: LD_INT 0
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
// if not base_units then
38575: LD_VAR 0 1
38579: NOT
38580: IFFALSE 38584
// exit ;
38582: GO 38671
// result := false ;
38584: LD_ADDR_VAR 0 2
38588: PUSH
38589: LD_INT 0
38591: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: LD_INT 21
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PPUSH
38612: CALL_OW 72
38616: ST_TO_ADDR
// if not tmp then
38617: LD_VAR 0 5
38621: NOT
38622: IFFALSE 38626
// exit ;
38624: GO 38671
// for i in tmp do
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_VAR 0 5
38635: PUSH
38636: FOR_IN
38637: IFFALSE 38669
// begin result := EnemyInRange ( i , 22 ) ;
38639: LD_ADDR_VAR 0 2
38643: PUSH
38644: LD_VAR 0 3
38648: PPUSH
38649: LD_INT 22
38651: PPUSH
38652: CALL 36096 0 2
38656: ST_TO_ADDR
// if result then
38657: LD_VAR 0 2
38661: IFFALSE 38667
// exit ;
38663: POP
38664: POP
38665: GO 38671
// end ;
38667: GO 38636
38669: POP
38670: POP
// end ;
38671: LD_VAR 0 2
38675: RET
// export function FilterByTag ( units , tag ) ; begin
38676: LD_INT 0
38678: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38679: LD_ADDR_VAR 0 3
38683: PUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: LD_INT 120
38691: PUSH
38692: LD_VAR 0 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PPUSH
38701: CALL_OW 72
38705: ST_TO_ADDR
// end ;
38706: LD_VAR 0 3
38710: RET
// export function IsDriver ( un ) ; begin
38711: LD_INT 0
38713: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: LD_INT 55
38726: PUSH
38727: EMPTY
38728: LIST
38729: PPUSH
38730: CALL_OW 69
38734: IN
38735: ST_TO_ADDR
// end ;
38736: LD_VAR 0 2
38740: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38741: LD_INT 0
38743: PPUSH
38744: PPUSH
// list := [ ] ;
38745: LD_ADDR_VAR 0 5
38749: PUSH
38750: EMPTY
38751: ST_TO_ADDR
// case d of 0 :
38752: LD_VAR 0 3
38756: PUSH
38757: LD_INT 0
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38898
38765: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_INT 4
38778: MINUS
38779: PUSH
38780: LD_VAR 0 2
38784: PUSH
38785: LD_INT 4
38787: MINUS
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: LD_VAR 0 1
38801: PUSH
38802: LD_INT 3
38804: MINUS
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 4
38826: PLUS
38827: PUSH
38828: LD_VAR 0 2
38832: PUSH
38833: LD_INT 4
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_INT 3
38848: PLUS
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 3
38857: PLUS
38858: PUSH
38859: LD_INT 5
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: LD_VAR 0 1
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 4
38879: PLUS
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// end ; 1 :
38896: GO 39596
38898: LD_INT 1
38900: DOUBLE
38901: EQUAL
38902: IFTRUE 38906
38904: GO 39039
38906: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38907: LD_ADDR_VAR 0 5
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_VAR 0 2
38921: PUSH
38922: LD_INT 4
38924: MINUS
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: PUSH
38934: LD_VAR 0 1
38938: PUSH
38939: LD_INT 3
38941: MINUS
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_INT 3
38950: MINUS
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: LD_INT 4
38967: MINUS
38968: PUSH
38969: LD_VAR 0 2
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_INT 3
38994: PLUS
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_INT 4
39011: PLUS
39012: PUSH
39013: LD_VAR 0 2
39017: PUSH
39018: LD_INT 4
39020: PLUS
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: ST_TO_ADDR
// end ; 2 :
39037: GO 39596
39039: LD_INT 2
39041: DOUBLE
39042: EQUAL
39043: IFTRUE 39047
39045: GO 39176
39047: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_VAR 0 2
39062: PUSH
39063: LD_INT 3
39065: MINUS
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 4
39082: PLUS
39083: PUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_INT 4
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_VAR 0 1
39101: PUSH
39102: LD_VAR 0 2
39106: PUSH
39107: LD_INT 4
39109: PLUS
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: LD_VAR 0 1
39123: PUSH
39124: LD_INT 3
39126: MINUS
39127: PUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: LD_INT 4
39148: MINUS
39149: PUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 4
39157: MINUS
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// end ; 3 :
39174: GO 39596
39176: LD_INT 3
39178: DOUBLE
39179: EQUAL
39180: IFTRUE 39184
39182: GO 39317
39184: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39185: LD_ADDR_VAR 0 5
39189: PUSH
39190: LD_VAR 0 1
39194: PUSH
39195: LD_INT 3
39197: PLUS
39198: PUSH
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 4
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: LD_VAR 0 1
39216: PUSH
39217: LD_INT 4
39219: PLUS
39220: PUSH
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 4
39228: PLUS
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: LD_INT 4
39245: MINUS
39246: PUSH
39247: LD_VAR 0 2
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PUSH
39260: LD_VAR 0 1
39264: PUSH
39265: LD_VAR 0 2
39269: PUSH
39270: LD_INT 4
39272: MINUS
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_INT 3
39289: MINUS
39290: PUSH
39291: LD_VAR 0 2
39295: PUSH
39296: LD_INT 3
39298: MINUS
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: ST_TO_ADDR
// end ; 4 :
39315: GO 39596
39317: LD_INT 4
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39458
39325: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39326: LD_ADDR_VAR 0 5
39330: PUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_VAR 0 2
39340: PUSH
39341: LD_INT 4
39343: PLUS
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_INT 3
39360: PLUS
39361: PUSH
39362: LD_VAR 0 2
39366: PUSH
39367: LD_INT 3
39369: PLUS
39370: PUSH
39371: LD_INT 5
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: LD_VAR 0 1
39383: PUSH
39384: LD_INT 4
39386: PLUS
39387: PUSH
39388: LD_VAR 0 2
39392: PUSH
39393: LD_INT 4
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_INT 3
39413: MINUS
39414: PUSH
39415: LD_INT 3
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: PUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_INT 4
39430: MINUS
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 4
39439: MINUS
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// end ; 5 :
39456: GO 39596
39458: LD_INT 5
39460: DOUBLE
39461: EQUAL
39462: IFTRUE 39466
39464: GO 39595
39466: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39467: LD_ADDR_VAR 0 5
39471: PUSH
39472: LD_VAR 0 1
39476: PUSH
39477: LD_INT 4
39479: MINUS
39480: PUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 4
39506: MINUS
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PUSH
39516: LD_VAR 0 1
39520: PUSH
39521: LD_INT 4
39523: PLUS
39524: PUSH
39525: LD_VAR 0 2
39529: PUSH
39530: LD_INT 4
39532: PLUS
39533: PUSH
39534: LD_INT 5
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: LD_VAR 0 1
39546: PUSH
39547: LD_INT 3
39549: PLUS
39550: PUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_INT 4
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: PUSH
39564: LD_VAR 0 1
39568: PUSH
39569: LD_VAR 0 2
39573: PUSH
39574: LD_INT 3
39576: PLUS
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: ST_TO_ADDR
// end ; end ;
39593: GO 39596
39595: POP
// result := list ;
39596: LD_ADDR_VAR 0 4
39600: PUSH
39601: LD_VAR 0 5
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 4
39610: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
39615: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39616: LD_VAR 0 1
39620: NOT
39621: IFTRUE 39649
39623: PUSH
39624: LD_VAR 0 2
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: IN
39647: NOT
39648: OR
39649: IFFALSE 39653
// exit ;
39651: GO 39736
// tmp := [ ] ;
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: EMPTY
39659: ST_TO_ADDR
// for i in units do
39660: LD_ADDR_VAR 0 4
39664: PUSH
39665: LD_VAR 0 1
39669: PUSH
39670: FOR_IN
39671: IFFALSE 39705
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 5
39682: PPUSH
39683: LD_VAR 0 4
39687: PPUSH
39688: LD_VAR 0 2
39692: PPUSH
39693: CALL_OW 259
39697: PPUSH
39698: CALL 41131 0 2
39702: ST_TO_ADDR
39703: GO 39670
39705: POP
39706: POP
// if not tmp then
39707: LD_VAR 0 5
39711: NOT
39712: IFFALSE 39716
// exit ;
39714: GO 39736
// result := SortListByListDesc ( units , tmp ) ;
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 5
39730: PPUSH
39731: CALL_OW 77
39735: ST_TO_ADDR
// end ;
39736: LD_VAR 0 3
39740: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
39745: PPUSH
// result := false ;
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_INT 0
39753: ST_TO_ADDR
// if not building then
39754: LD_VAR 0 2
39758: NOT
39759: IFFALSE 39763
// exit ;
39761: GO 39907
// x := GetX ( building ) ;
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: LD_VAR 0 2
39772: PPUSH
39773: CALL_OW 250
39777: ST_TO_ADDR
// y := GetY ( building ) ;
39778: LD_ADDR_VAR 0 5
39782: PUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: CALL_OW 251
39792: ST_TO_ADDR
// if not x or not y then
39793: LD_VAR 0 4
39797: NOT
39798: IFTRUE 39807
39800: PUSH
39801: LD_VAR 0 5
39805: NOT
39806: OR
39807: IFFALSE 39811
// exit ;
39809: GO 39907
// if GetTaskList ( unit ) then
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 437
39820: IFFALSE 39907
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39822: LD_STRING e
39824: PUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 437
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: EQUAL
39843: IFFALSE 39870
39845: PUSH
39846: LD_VAR 0 4
39850: PUSH
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 437
39860: PUSH
39861: LD_INT 1
39863: ARRAY
39864: PUSH
39865: LD_INT 2
39867: ARRAY
39868: EQUAL
39869: AND
39870: IFFALSE 39897
39872: PUSH
39873: LD_VAR 0 5
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 437
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PUSH
39892: LD_INT 3
39894: ARRAY
39895: EQUAL
39896: AND
39897: IFFALSE 39907
// result := true end ;
39899: LD_ADDR_VAR 0 3
39903: PUSH
39904: LD_INT 1
39906: ST_TO_ADDR
// end ;
39907: LD_VAR 0 3
39911: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39912: LD_INT 0
39914: PPUSH
// result := false ;
39915: LD_ADDR_VAR 0 4
39919: PUSH
39920: LD_INT 0
39922: ST_TO_ADDR
// if GetTaskList ( unit ) then
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 437
39932: IFFALSE 40019
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39934: LD_STRING M
39936: PUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 437
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: EQUAL
39955: IFFALSE 39982
39957: PUSH
39958: LD_VAR 0 2
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 437
39972: PUSH
39973: LD_INT 1
39975: ARRAY
39976: PUSH
39977: LD_INT 2
39979: ARRAY
39980: EQUAL
39981: AND
39982: IFFALSE 40009
39984: PUSH
39985: LD_VAR 0 3
39989: PUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 437
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PUSH
40004: LD_INT 3
40006: ARRAY
40007: EQUAL
40008: AND
40009: IFFALSE 40019
// result := true ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_INT 1
40018: ST_TO_ADDR
// end ; end ;
40019: LD_VAR 0 4
40023: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40024: LD_INT 0
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
// if not unit or not area then
40030: LD_VAR 0 1
40034: NOT
40035: IFTRUE 40044
40037: PUSH
40038: LD_VAR 0 2
40042: NOT
40043: OR
40044: IFFALSE 40048
// exit ;
40046: GO 40224
// tmp := AreaToList ( area , i ) ;
40048: LD_ADDR_VAR 0 6
40052: PUSH
40053: LD_VAR 0 2
40057: PPUSH
40058: LD_VAR 0 5
40062: PPUSH
40063: CALL_OW 517
40067: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40068: LD_ADDR_VAR 0 5
40072: PUSH
40073: DOUBLE
40074: LD_INT 1
40076: DEC
40077: ST_TO_ADDR
40078: LD_VAR 0 6
40082: PUSH
40083: LD_INT 1
40085: ARRAY
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40222
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40090: LD_ADDR_VAR 0 7
40094: PUSH
40095: LD_VAR 0 6
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: PUSH
40104: LD_VAR 0 5
40108: ARRAY
40109: PUSH
40110: LD_VAR 0 6
40114: PUSH
40115: LD_INT 2
40117: ARRAY
40118: PUSH
40119: LD_VAR 0 5
40123: ARRAY
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40129: LD_INT 92
40131: PUSH
40132: LD_VAR 0 7
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 7
40145: PUSH
40146: LD_INT 2
40148: ARRAY
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: PPUSH
40159: CALL_OW 69
40163: PUSH
40164: LD_INT 0
40166: EQUAL
40167: IFFALSE 40220
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40169: LD_VAR 0 1
40173: PPUSH
40174: LD_VAR 0 7
40178: PUSH
40179: LD_INT 1
40181: ARRAY
40182: PPUSH
40183: LD_VAR 0 7
40187: PUSH
40188: LD_INT 2
40190: ARRAY
40191: PPUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: CALL_OW 48
// result := IsPlaced ( unit ) ;
40201: LD_ADDR_VAR 0 4
40205: PUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: CALL_OW 305
40215: ST_TO_ADDR
// exit ;
40216: POP
40217: POP
40218: GO 40224
// end ; end ;
40220: GO 40087
40222: POP
40223: POP
// end ;
40224: LD_VAR 0 4
40228: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40229: LD_INT 0
40231: PPUSH
40232: PPUSH
40233: PPUSH
// if not side or side > 8 then
40234: LD_VAR 0 1
40238: NOT
40239: IFTRUE 40251
40241: PUSH
40242: LD_VAR 0 1
40246: PUSH
40247: LD_INT 8
40249: GREATER
40250: OR
40251: IFFALSE 40255
// exit ;
40253: GO 40442
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: LD_INT 22
40262: PUSH
40263: LD_VAR 0 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 21
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PPUSH
40286: CALL_OW 69
40290: ST_TO_ADDR
// if not tmp then
40291: LD_VAR 0 4
40295: NOT
40296: IFFALSE 40300
// exit ;
40298: GO 40442
// enable_addtolog := true ;
40300: LD_ADDR_OWVAR 81
40304: PUSH
40305: LD_INT 1
40307: ST_TO_ADDR
// AddToLog ( [ ) ;
40308: LD_STRING [
40310: PPUSH
40311: CALL_OW 561
// for i in tmp do
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: LD_VAR 0 4
40324: PUSH
40325: FOR_IN
40326: IFFALSE 40433
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40328: LD_STRING [
40330: PUSH
40331: LD_VAR 0 3
40335: PPUSH
40336: CALL_OW 266
40340: STR
40341: PUSH
40342: LD_STRING , 
40344: STR
40345: PUSH
40346: LD_VAR 0 3
40350: PPUSH
40351: CALL_OW 250
40355: STR
40356: PUSH
40357: LD_STRING , 
40359: STR
40360: PUSH
40361: LD_VAR 0 3
40365: PPUSH
40366: CALL_OW 251
40370: STR
40371: PUSH
40372: LD_STRING , 
40374: STR
40375: PUSH
40376: LD_VAR 0 3
40380: PPUSH
40381: CALL_OW 254
40385: STR
40386: PUSH
40387: LD_STRING , 
40389: STR
40390: PUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: LD_INT 1
40398: PPUSH
40399: CALL_OW 268
40403: STR
40404: PUSH
40405: LD_STRING , 
40407: STR
40408: PUSH
40409: LD_VAR 0 3
40413: PPUSH
40414: LD_INT 2
40416: PPUSH
40417: CALL_OW 268
40421: STR
40422: PUSH
40423: LD_STRING ],
40425: STR
40426: PPUSH
40427: CALL_OW 561
// end ;
40431: GO 40325
40433: POP
40434: POP
// AddToLog ( ]; ) ;
40435: LD_STRING ];
40437: PPUSH
40438: CALL_OW 561
// end ;
40442: LD_VAR 0 2
40446: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40447: LD_INT 0
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
// if not area or not rate or not max then
40454: LD_VAR 0 1
40458: NOT
40459: IFTRUE 40468
40461: PUSH
40462: LD_VAR 0 2
40466: NOT
40467: OR
40468: IFTRUE 40477
40470: PUSH
40471: LD_VAR 0 4
40475: NOT
40476: OR
40477: IFFALSE 40481
// exit ;
40479: GO 40670
// while 1 do
40481: LD_INT 1
40483: IFFALSE 40670
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40485: LD_ADDR_VAR 0 9
40489: PUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: LD_INT 1
40497: PPUSH
40498: CALL_OW 287
40502: PUSH
40503: LD_INT 10
40505: MUL
40506: ST_TO_ADDR
// r := rate / 10 ;
40507: LD_ADDR_VAR 0 7
40511: PUSH
40512: LD_VAR 0 2
40516: PUSH
40517: LD_INT 10
40519: DIVREAL
40520: ST_TO_ADDR
// time := 1 1$00 ;
40521: LD_ADDR_VAR 0 8
40525: PUSH
40526: LD_INT 2100
40528: ST_TO_ADDR
// if amount < min then
40529: LD_VAR 0 9
40533: PUSH
40534: LD_VAR 0 3
40538: LESS
40539: IFFALSE 40557
// r := r * 2 else
40541: LD_ADDR_VAR 0 7
40545: PUSH
40546: LD_VAR 0 7
40550: PUSH
40551: LD_INT 2
40553: MUL
40554: ST_TO_ADDR
40555: GO 40583
// if amount > max then
40557: LD_VAR 0 9
40561: PUSH
40562: LD_VAR 0 4
40566: GREATER
40567: IFFALSE 40583
// r := r / 2 ;
40569: LD_ADDR_VAR 0 7
40573: PUSH
40574: LD_VAR 0 7
40578: PUSH
40579: LD_INT 2
40581: DIVREAL
40582: ST_TO_ADDR
// time := time / r ;
40583: LD_ADDR_VAR 0 8
40587: PUSH
40588: LD_VAR 0 8
40592: PUSH
40593: LD_VAR 0 7
40597: DIVREAL
40598: ST_TO_ADDR
// if time < 0 then
40599: LD_VAR 0 8
40603: PUSH
40604: LD_INT 0
40606: LESS
40607: IFFALSE 40624
// time := time * - 1 ;
40609: LD_ADDR_VAR 0 8
40613: PUSH
40614: LD_VAR 0 8
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: MUL
40623: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40624: LD_VAR 0 8
40628: PUSH
40629: LD_INT 35
40631: PPUSH
40632: LD_INT 875
40634: PPUSH
40635: CALL_OW 12
40639: PLUS
40640: PPUSH
40641: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40645: LD_INT 1
40647: PPUSH
40648: LD_INT 5
40650: PPUSH
40651: CALL_OW 12
40655: PPUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: LD_INT 1
40663: PPUSH
40664: CALL_OW 55
// end ;
40668: GO 40481
// end ;
40670: LD_VAR 0 5
40674: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40675: LD_INT 0
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
// if not turrets or not factories then
40685: LD_VAR 0 1
40689: NOT
40690: IFTRUE 40699
40692: PUSH
40693: LD_VAR 0 2
40697: NOT
40698: OR
40699: IFFALSE 40703
// exit ;
40701: GO 41010
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40703: LD_ADDR_VAR 0 10
40707: PUSH
40708: LD_INT 5
40710: PUSH
40711: LD_INT 6
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 4
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: LD_INT 5
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 24
40745: PUSH
40746: LD_INT 25
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 23
40755: PUSH
40756: LD_INT 27
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 42
40769: PUSH
40770: LD_INT 43
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 44
40779: PUSH
40780: LD_INT 46
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 45
40789: PUSH
40790: LD_INT 47
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: ST_TO_ADDR
// result := [ ] ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: EMPTY
40813: ST_TO_ADDR
// for i in turrets do
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: LD_VAR 0 1
40823: PUSH
40824: FOR_IN
40825: IFFALSE 41008
// begin nat := GetNation ( i ) ;
40827: LD_ADDR_VAR 0 7
40831: PUSH
40832: LD_VAR 0 4
40836: PPUSH
40837: CALL_OW 248
40841: ST_TO_ADDR
// weapon := 0 ;
40842: LD_ADDR_VAR 0 8
40846: PUSH
40847: LD_INT 0
40849: ST_TO_ADDR
// if not nat then
40850: LD_VAR 0 7
40854: NOT
40855: IFFALSE 40859
// continue ;
40857: GO 40824
// for j in list [ nat ] do
40859: LD_ADDR_VAR 0 5
40863: PUSH
40864: LD_VAR 0 10
40868: PUSH
40869: LD_VAR 0 7
40873: ARRAY
40874: PUSH
40875: FOR_IN
40876: IFFALSE 40917
// if GetBWeapon ( i ) = j [ 1 ] then
40878: LD_VAR 0 4
40882: PPUSH
40883: CALL_OW 269
40887: PUSH
40888: LD_VAR 0 5
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: EQUAL
40897: IFFALSE 40915
// begin weapon := j [ 2 ] ;
40899: LD_ADDR_VAR 0 8
40903: PUSH
40904: LD_VAR 0 5
40908: PUSH
40909: LD_INT 2
40911: ARRAY
40912: ST_TO_ADDR
// break ;
40913: GO 40917
// end ;
40915: GO 40875
40917: POP
40918: POP
// if not weapon then
40919: LD_VAR 0 8
40923: NOT
40924: IFFALSE 40928
// continue ;
40926: GO 40824
// for k in factories do
40928: LD_ADDR_VAR 0 6
40932: PUSH
40933: LD_VAR 0 2
40937: PUSH
40938: FOR_IN
40939: IFFALSE 41004
// begin weapons := AvailableWeaponList ( k ) ;
40941: LD_ADDR_VAR 0 9
40945: PUSH
40946: LD_VAR 0 6
40950: PPUSH
40951: CALL_OW 478
40955: ST_TO_ADDR
// if not weapons then
40956: LD_VAR 0 9
40960: NOT
40961: IFFALSE 40965
// continue ;
40963: GO 40938
// if weapon in weapons then
40965: LD_VAR 0 8
40969: PUSH
40970: LD_VAR 0 9
40974: IN
40975: IFFALSE 41002
// begin result := [ i , weapon ] ;
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: LD_VAR 0 4
40986: PUSH
40987: LD_VAR 0 8
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// exit ;
40996: POP
40997: POP
40998: POP
40999: POP
41000: GO 41010
// end ; end ;
41002: GO 40938
41004: POP
41005: POP
// end ;
41006: GO 40824
41008: POP
41009: POP
// end ;
41010: LD_VAR 0 3
41014: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41015: LD_INT 0
41017: PPUSH
// if not side or side > 8 then
41018: LD_VAR 0 3
41022: NOT
41023: IFTRUE 41035
41025: PUSH
41026: LD_VAR 0 3
41030: PUSH
41031: LD_INT 8
41033: GREATER
41034: OR
41035: IFFALSE 41039
// exit ;
41037: GO 41098
// if not range then
41039: LD_VAR 0 4
41043: NOT
41044: IFFALSE 41055
// range := - 12 ;
41046: LD_ADDR_VAR 0 4
41050: PUSH
41051: LD_INT 12
41053: NEG
41054: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41055: LD_VAR 0 1
41059: PPUSH
41060: LD_VAR 0 2
41064: PPUSH
41065: LD_VAR 0 3
41069: PPUSH
41070: LD_VAR 0 4
41074: PPUSH
41075: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41079: LD_VAR 0 1
41083: PPUSH
41084: LD_VAR 0 2
41088: PPUSH
41089: LD_VAR 0 3
41093: PPUSH
41094: CALL_OW 331
// end ;
41098: LD_VAR 0 5
41102: RET
// export function Video ( mode ) ; begin
41103: LD_INT 0
41105: PPUSH
// ingame_video = mode ;
41106: LD_ADDR_OWVAR 52
41110: PUSH
41111: LD_VAR 0 1
41115: ST_TO_ADDR
// interface_hidden = mode ;
41116: LD_ADDR_OWVAR 54
41120: PUSH
41121: LD_VAR 0 1
41125: ST_TO_ADDR
// end ;
41126: LD_VAR 0 2
41130: RET
// export function Join ( array , element ) ; begin
41131: LD_INT 0
41133: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: LD_VAR 0 1
41148: PUSH
41149: LD_INT 1
41151: PLUS
41152: PPUSH
41153: LD_VAR 0 2
41157: PPUSH
41158: CALL_OW 1
41162: ST_TO_ADDR
// end ;
41163: LD_VAR 0 3
41167: RET
// export function JoinUnion ( array , element ) ; begin
41168: LD_INT 0
41170: PPUSH
// result := array union element ;
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_VAR 0 1
41180: PUSH
41181: LD_VAR 0 2
41185: UNION
41186: ST_TO_ADDR
// end ;
41187: LD_VAR 0 3
41191: RET
// export function GetBehemoths ( side ) ; begin
41192: LD_INT 0
41194: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41195: LD_ADDR_VAR 0 2
41199: PUSH
41200: LD_INT 22
41202: PUSH
41203: LD_VAR 0 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 31
41214: PUSH
41215: LD_INT 25
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PPUSH
41226: CALL_OW 69
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 2
41235: RET
// export function Shuffle ( array ) ; var i , index ; begin
41236: LD_INT 0
41238: PPUSH
41239: PPUSH
41240: PPUSH
// result := [ ] ;
41241: LD_ADDR_VAR 0 2
41245: PUSH
41246: EMPTY
41247: ST_TO_ADDR
// if not array then
41248: LD_VAR 0 1
41252: NOT
41253: IFFALSE 41257
// exit ;
41255: GO 41356
// Randomize ;
41257: CALL_OW 10
// for i = array downto 1 do
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: DOUBLE
41267: LD_VAR 0 1
41271: INC
41272: ST_TO_ADDR
41273: LD_INT 1
41275: PUSH
41276: FOR_DOWNTO
41277: IFFALSE 41354
// begin index := rand ( 1 , array ) ;
41279: LD_ADDR_VAR 0 4
41283: PUSH
41284: LD_INT 1
41286: PPUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 12
41296: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41297: LD_ADDR_VAR 0 2
41301: PUSH
41302: LD_VAR 0 2
41306: PPUSH
41307: LD_VAR 0 2
41311: PUSH
41312: LD_INT 1
41314: PLUS
41315: PPUSH
41316: LD_VAR 0 1
41320: PUSH
41321: LD_VAR 0 4
41325: ARRAY
41326: PPUSH
41327: CALL_OW 2
41331: ST_TO_ADDR
// array := Delete ( array , index ) ;
41332: LD_ADDR_VAR 0 1
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: CALL_OW 3
41351: ST_TO_ADDR
// end ;
41352: GO 41276
41354: POP
41355: POP
// end ;
41356: LD_VAR 0 2
41360: RET
// export function GetBaseMaterials ( base ) ; begin
41361: LD_INT 0
41363: PPUSH
// result := [ 0 , 0 , 0 ] ;
41364: LD_ADDR_VAR 0 2
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: ST_TO_ADDR
// if not base then
41383: LD_VAR 0 1
41387: NOT
41388: IFFALSE 41392
// exit ;
41390: GO 41441
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41392: LD_ADDR_VAR 0 2
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: LD_INT 1
41404: PPUSH
41405: CALL_OW 275
41409: PUSH
41410: LD_VAR 0 1
41414: PPUSH
41415: LD_INT 2
41417: PPUSH
41418: CALL_OW 275
41422: PUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_INT 3
41430: PPUSH
41431: CALL_OW 275
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// end ;
41441: LD_VAR 0 2
41445: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
// result := array ;
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: LD_VAR 0 1
41459: ST_TO_ADDR
// if size >= result then
41460: LD_VAR 0 2
41464: PUSH
41465: LD_VAR 0 3
41469: GREATEREQUAL
41470: IFFALSE 41474
// exit ;
41472: GO 41524
// if size then
41474: LD_VAR 0 2
41478: IFFALSE 41524
// for i := array downto size do
41480: LD_ADDR_VAR 0 4
41484: PUSH
41485: DOUBLE
41486: LD_VAR 0 1
41490: INC
41491: ST_TO_ADDR
41492: LD_VAR 0 2
41496: PUSH
41497: FOR_DOWNTO
41498: IFFALSE 41522
// result := Delete ( result , result ) ;
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_VAR 0 3
41509: PPUSH
41510: LD_VAR 0 3
41514: PPUSH
41515: CALL_OW 3
41519: ST_TO_ADDR
41520: GO 41497
41522: POP
41523: POP
// end ;
41524: LD_VAR 0 3
41528: RET
// export function ComExit ( unit ) ; var tmp ; begin
41529: LD_INT 0
41531: PPUSH
41532: PPUSH
// if not IsInUnit ( unit ) then
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 310
41542: NOT
41543: IFFALSE 41547
// exit ;
41545: GO 41607
// tmp := IsInUnit ( unit ) ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 310
41561: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41562: LD_VAR 0 3
41566: PPUSH
41567: CALL_OW 247
41571: PUSH
41572: LD_INT 2
41574: EQUAL
41575: IFFALSE 41588
// ComExitVehicle ( unit ) else
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 121
41586: GO 41597
// ComExitBuilding ( unit ) ;
41588: LD_VAR 0 1
41592: PPUSH
41593: CALL_OW 122
// result := tmp ;
41597: LD_ADDR_VAR 0 2
41601: PUSH
41602: LD_VAR 0 3
41606: ST_TO_ADDR
// end ;
41607: LD_VAR 0 2
41611: RET
// export function ComExitAll ( units ) ; var i ; begin
41612: LD_INT 0
41614: PPUSH
41615: PPUSH
// if not units then
41616: LD_VAR 0 1
41620: NOT
41621: IFFALSE 41625
// exit ;
41623: GO 41651
// for i in units do
41625: LD_ADDR_VAR 0 3
41629: PUSH
41630: LD_VAR 0 1
41634: PUSH
41635: FOR_IN
41636: IFFALSE 41649
// ComExit ( i ) ;
41638: LD_VAR 0 3
41642: PPUSH
41643: CALL 41529 0 1
41647: GO 41635
41649: POP
41650: POP
// end ;
41651: LD_VAR 0 2
41655: RET
// export function ResetHc ; begin
41656: LD_INT 0
41658: PPUSH
// InitHc ;
41659: CALL_OW 19
// hc_importance := 0 ;
41663: LD_ADDR_OWVAR 32
41667: PUSH
41668: LD_INT 0
41670: ST_TO_ADDR
// end ;
41671: LD_VAR 0 1
41675: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41676: LD_INT 0
41678: PPUSH
41679: PPUSH
41680: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41681: LD_ADDR_VAR 0 6
41685: PUSH
41686: LD_VAR 0 1
41690: PUSH
41691: LD_VAR 0 3
41695: PLUS
41696: PUSH
41697: LD_INT 2
41699: DIV
41700: ST_TO_ADDR
// if _x < 0 then
41701: LD_VAR 0 6
41705: PUSH
41706: LD_INT 0
41708: LESS
41709: IFFALSE 41726
// _x := _x * - 1 ;
41711: LD_ADDR_VAR 0 6
41715: PUSH
41716: LD_VAR 0 6
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: MUL
41725: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41726: LD_ADDR_VAR 0 7
41730: PUSH
41731: LD_VAR 0 2
41735: PUSH
41736: LD_VAR 0 4
41740: PLUS
41741: PUSH
41742: LD_INT 2
41744: DIV
41745: ST_TO_ADDR
// if _y < 0 then
41746: LD_VAR 0 7
41750: PUSH
41751: LD_INT 0
41753: LESS
41754: IFFALSE 41771
// _y := _y * - 1 ;
41756: LD_ADDR_VAR 0 7
41760: PUSH
41761: LD_VAR 0 7
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: MUL
41770: ST_TO_ADDR
// result := [ _x , _y ] ;
41771: LD_ADDR_VAR 0 5
41775: PUSH
41776: LD_VAR 0 6
41780: PUSH
41781: LD_VAR 0 7
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: ST_TO_ADDR
// end ;
41790: LD_VAR 0 5
41794: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41795: LD_INT 0
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
// task := GetTaskList ( unit ) ;
41801: LD_ADDR_VAR 0 7
41805: PUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 437
41815: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41816: LD_VAR 0 7
41820: NOT
41821: IFFALSE 41840
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: LD_VAR 0 2
41833: PPUSH
41834: CALL_OW 308
41838: NOT
41839: AND
41840: IFFALSE 41844
// exit ;
41842: GO 41962
// if IsInArea ( unit , area ) then
41844: LD_VAR 0 1
41848: PPUSH
41849: LD_VAR 0 2
41853: PPUSH
41854: CALL_OW 308
41858: IFFALSE 41876
// begin ComMoveToArea ( unit , goAway ) ;
41860: LD_VAR 0 1
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: CALL_OW 113
// exit ;
41874: GO 41962
// end ; if task [ 1 ] [ 1 ] <> M then
41876: LD_VAR 0 7
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PUSH
41889: LD_STRING M
41891: NONEQUAL
41892: IFFALSE 41896
// exit ;
41894: GO 41962
// x := task [ 1 ] [ 2 ] ;
41896: LD_ADDR_VAR 0 5
41900: PUSH
41901: LD_VAR 0 7
41905: PUSH
41906: LD_INT 1
41908: ARRAY
41909: PUSH
41910: LD_INT 2
41912: ARRAY
41913: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41914: LD_ADDR_VAR 0 6
41918: PUSH
41919: LD_VAR 0 7
41923: PUSH
41924: LD_INT 1
41926: ARRAY
41927: PUSH
41928: LD_INT 3
41930: ARRAY
41931: ST_TO_ADDR
// if InArea ( x , y , area ) then
41932: LD_VAR 0 5
41936: PPUSH
41937: LD_VAR 0 6
41941: PPUSH
41942: LD_VAR 0 2
41946: PPUSH
41947: CALL_OW 309
41951: IFFALSE 41962
// ComStop ( unit ) ;
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 141
// end ;
41962: LD_VAR 0 4
41966: RET
// export function Abs ( value ) ; begin
41967: LD_INT 0
41969: PPUSH
// result := value ;
41970: LD_ADDR_VAR 0 2
41974: PUSH
41975: LD_VAR 0 1
41979: ST_TO_ADDR
// if value < 0 then
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 0
41987: LESS
41988: IFFALSE 42005
// result := value * - 1 ;
41990: LD_ADDR_VAR 0 2
41994: PUSH
41995: LD_VAR 0 1
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: MUL
42004: ST_TO_ADDR
// end ;
42005: LD_VAR 0 2
42009: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42010: LD_INT 0
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
// if not unit or not building then
42020: LD_VAR 0 1
42024: NOT
42025: IFTRUE 42034
42027: PUSH
42028: LD_VAR 0 2
42032: NOT
42033: OR
42034: IFFALSE 42038
// exit ;
42036: GO 42266
// x := GetX ( building ) ;
42038: LD_ADDR_VAR 0 4
42042: PUSH
42043: LD_VAR 0 2
42047: PPUSH
42048: CALL_OW 250
42052: ST_TO_ADDR
// y := GetY ( building ) ;
42053: LD_ADDR_VAR 0 6
42057: PUSH
42058: LD_VAR 0 2
42062: PPUSH
42063: CALL_OW 251
42067: ST_TO_ADDR
// d := GetDir ( building ) ;
42068: LD_ADDR_VAR 0 8
42072: PUSH
42073: LD_VAR 0 2
42077: PPUSH
42078: CALL_OW 254
42082: ST_TO_ADDR
// r := 4 ;
42083: LD_ADDR_VAR 0 9
42087: PUSH
42088: LD_INT 4
42090: ST_TO_ADDR
// for i := 1 to 5 do
42091: LD_ADDR_VAR 0 10
42095: PUSH
42096: DOUBLE
42097: LD_INT 1
42099: DEC
42100: ST_TO_ADDR
42101: LD_INT 5
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42264
// begin _x := ShiftX ( x , d , r + i ) ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_VAR 0 4
42116: PPUSH
42117: LD_VAR 0 8
42121: PPUSH
42122: LD_VAR 0 9
42126: PUSH
42127: LD_VAR 0 10
42131: PLUS
42132: PPUSH
42133: CALL_OW 272
42137: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42138: LD_ADDR_VAR 0 7
42142: PUSH
42143: LD_VAR 0 6
42147: PPUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: LD_VAR 0 9
42157: PUSH
42158: LD_VAR 0 10
42162: PLUS
42163: PPUSH
42164: CALL_OW 273
42168: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42169: LD_VAR 0 5
42173: PPUSH
42174: LD_VAR 0 7
42178: PPUSH
42179: CALL_OW 488
42183: IFFALSE 42218
42185: PUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: LD_VAR 0 7
42195: PPUSH
42196: CALL_OW 428
42200: PPUSH
42201: CALL_OW 247
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: IN
42216: NOT
42217: AND
42218: IFFALSE 42262
// begin ComMoveXY ( unit , _x , _y ) ;
42220: LD_VAR 0 1
42224: PPUSH
42225: LD_VAR 0 5
42229: PPUSH
42230: LD_VAR 0 7
42234: PPUSH
42235: CALL_OW 111
// result := [ _x , _y ] ;
42239: LD_ADDR_VAR 0 3
42243: PUSH
42244: LD_VAR 0 5
42248: PUSH
42249: LD_VAR 0 7
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: ST_TO_ADDR
// exit ;
42258: POP
42259: POP
42260: GO 42266
// end ; end ;
42262: GO 42104
42264: POP
42265: POP
// end ;
42266: LD_VAR 0 3
42270: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42271: LD_INT 0
42273: PPUSH
42274: PPUSH
42275: PPUSH
// result := 0 ;
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 0
42283: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42284: LD_VAR 0 1
42288: PUSH
42289: LD_INT 0
42291: LESS
42292: IFTRUE 42304
42294: PUSH
42295: LD_VAR 0 1
42299: PUSH
42300: LD_INT 8
42302: GREATER
42303: OR
42304: IFTRUE 42316
42306: PUSH
42307: LD_VAR 0 2
42311: PUSH
42312: LD_INT 0
42314: LESS
42315: OR
42316: IFTRUE 42328
42318: PUSH
42319: LD_VAR 0 2
42323: PUSH
42324: LD_INT 8
42326: GREATER
42327: OR
42328: IFFALSE 42332
// exit ;
42330: GO 42407
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42332: LD_ADDR_VAR 0 4
42336: PUSH
42337: LD_INT 22
42339: PUSH
42340: LD_VAR 0 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PPUSH
42349: CALL_OW 69
42353: PUSH
42354: FOR_IN
42355: IFFALSE 42405
// begin un := UnitShoot ( i ) ;
42357: LD_ADDR_VAR 0 5
42361: PUSH
42362: LD_VAR 0 4
42366: PPUSH
42367: CALL_OW 504
42371: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42372: LD_VAR 0 5
42376: PPUSH
42377: CALL_OW 255
42381: PUSH
42382: LD_VAR 0 1
42386: EQUAL
42387: IFFALSE 42403
// begin result := un ;
42389: LD_ADDR_VAR 0 3
42393: PUSH
42394: LD_VAR 0 5
42398: ST_TO_ADDR
// exit ;
42399: POP
42400: POP
42401: GO 42407
// end ; end ;
42403: GO 42354
42405: POP
42406: POP
// end ;
42407: LD_VAR 0 3
42411: RET
// export function GetCargoBay ( units ) ; begin
42412: LD_INT 0
42414: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42415: LD_ADDR_VAR 0 2
42419: PUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 34
42430: PUSH
42431: LD_INT 12
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 34
42440: PUSH
42441: LD_INT 51
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 34
42450: PUSH
42451: LD_INT 32
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 34
42460: PUSH
42461: LD_INT 89
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: PPUSH
42475: CALL_OW 72
42479: ST_TO_ADDR
// end ;
42480: LD_VAR 0 2
42484: RET
// export function Negate ( value ) ; begin
42485: LD_INT 0
42487: PPUSH
// result := not value ;
42488: LD_ADDR_VAR 0 2
42492: PUSH
42493: LD_VAR 0 1
42497: NOT
42498: ST_TO_ADDR
// end ;
42499: LD_VAR 0 2
42503: RET
// export function Inc ( value ) ; begin
42504: LD_INT 0
42506: PPUSH
// result := value + 1 ;
42507: LD_ADDR_VAR 0 2
42511: PUSH
42512: LD_VAR 0 1
42516: PUSH
42517: LD_INT 1
42519: PLUS
42520: ST_TO_ADDR
// end ;
42521: LD_VAR 0 2
42525: RET
// export function Dec ( value ) ; begin
42526: LD_INT 0
42528: PPUSH
// result := value - 1 ;
42529: LD_ADDR_VAR 0 2
42533: PUSH
42534: LD_VAR 0 1
42538: PUSH
42539: LD_INT 1
42541: MINUS
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 2
42547: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42548: LD_INT 0
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42558: LD_VAR 0 1
42562: PPUSH
42563: LD_VAR 0 2
42567: PPUSH
42568: CALL_OW 488
42572: NOT
42573: IFTRUE 42592
42575: PUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: LD_VAR 0 4
42585: PPUSH
42586: CALL_OW 488
42590: NOT
42591: OR
42592: IFFALSE 42605
// begin result := - 1 ;
42594: LD_ADDR_VAR 0 5
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: ST_TO_ADDR
// exit ;
42603: GO 42840
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42605: LD_ADDR_VAR 0 12
42609: PUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: LD_VAR 0 2
42619: PPUSH
42620: LD_VAR 0 3
42624: PPUSH
42625: LD_VAR 0 4
42629: PPUSH
42630: CALL 41676 0 4
42634: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42635: LD_ADDR_VAR 0 11
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: LD_VAR 0 2
42649: PPUSH
42650: LD_VAR 0 12
42654: PUSH
42655: LD_INT 1
42657: ARRAY
42658: PPUSH
42659: LD_VAR 0 12
42663: PUSH
42664: LD_INT 2
42666: ARRAY
42667: PPUSH
42668: CALL_OW 298
42672: ST_TO_ADDR
// distance := 9999 ;
42673: LD_ADDR_VAR 0 10
42677: PUSH
42678: LD_INT 9999
42680: ST_TO_ADDR
// for i := 0 to 5 do
42681: LD_ADDR_VAR 0 6
42685: PUSH
42686: DOUBLE
42687: LD_INT 0
42689: DEC
42690: ST_TO_ADDR
42691: LD_INT 5
42693: PUSH
42694: FOR_TO
42695: IFFALSE 42838
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42697: LD_ADDR_VAR 0 7
42701: PUSH
42702: LD_VAR 0 1
42706: PPUSH
42707: LD_VAR 0 6
42711: PPUSH
42712: LD_VAR 0 11
42716: PPUSH
42717: CALL_OW 272
42721: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42722: LD_ADDR_VAR 0 8
42726: PUSH
42727: LD_VAR 0 2
42731: PPUSH
42732: LD_VAR 0 6
42736: PPUSH
42737: LD_VAR 0 11
42741: PPUSH
42742: CALL_OW 273
42746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42747: LD_VAR 0 7
42751: PPUSH
42752: LD_VAR 0 8
42756: PPUSH
42757: CALL_OW 488
42761: NOT
42762: IFFALSE 42766
// continue ;
42764: GO 42694
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42766: LD_ADDR_VAR 0 9
42770: PUSH
42771: LD_VAR 0 12
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 12
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: LD_VAR 0 7
42793: PPUSH
42794: LD_VAR 0 8
42798: PPUSH
42799: CALL_OW 298
42803: ST_TO_ADDR
// if tmp < distance then
42804: LD_VAR 0 9
42808: PUSH
42809: LD_VAR 0 10
42813: LESS
42814: IFFALSE 42836
// begin result := i ;
42816: LD_ADDR_VAR 0 5
42820: PUSH
42821: LD_VAR 0 6
42825: ST_TO_ADDR
// distance := tmp ;
42826: LD_ADDR_VAR 0 10
42830: PUSH
42831: LD_VAR 0 9
42835: ST_TO_ADDR
// end ; end ;
42836: GO 42694
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 5
42844: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
// if not driver or not IsInUnit ( driver ) then
42849: LD_VAR 0 1
42853: NOT
42854: IFTRUE 42868
42856: PUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 310
42866: NOT
42867: OR
42868: IFFALSE 42872
// exit ;
42870: GO 42962
// vehicle := IsInUnit ( driver ) ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 310
42886: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42887: LD_VAR 0 1
42891: PPUSH
42892: LD_STRING \
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: PUSH
42922: LD_STRING E
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_VAR 0 3
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PPUSH
42958: CALL_OW 446
// end ;
42962: LD_VAR 0 2
42966: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
// if not driver or not IsInUnit ( driver ) then
42971: LD_VAR 0 1
42975: NOT
42976: IFTRUE 42990
42978: PUSH
42979: LD_VAR 0 1
42983: PPUSH
42984: CALL_OW 310
42988: NOT
42989: OR
42990: IFFALSE 42994
// exit ;
42992: GO 43084
// vehicle := IsInUnit ( driver ) ;
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_VAR 0 1
43003: PPUSH
43004: CALL_OW 310
43008: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43009: LD_VAR 0 1
43013: PPUSH
43014: LD_STRING \
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: PUSH
43044: LD_STRING E
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_VAR 0 3
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 447
// end ;
43084: LD_VAR 0 2
43088: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43089: LD_INT 0
43091: PPUSH
43092: PPUSH
43093: PPUSH
// tmp := [ ] ;
43094: LD_ADDR_VAR 0 5
43098: PUSH
43099: EMPTY
43100: ST_TO_ADDR
// for i in units do
43101: LD_ADDR_VAR 0 4
43105: PUSH
43106: LD_VAR 0 1
43110: PUSH
43111: FOR_IN
43112: IFFALSE 43150
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43114: LD_ADDR_VAR 0 5
43118: PUSH
43119: LD_VAR 0 5
43123: PPUSH
43124: LD_VAR 0 5
43128: PUSH
43129: LD_INT 1
43131: PLUS
43132: PPUSH
43133: LD_VAR 0 4
43137: PPUSH
43138: CALL_OW 256
43142: PPUSH
43143: CALL_OW 2
43147: ST_TO_ADDR
43148: GO 43111
43150: POP
43151: POP
// if not tmp then
43152: LD_VAR 0 5
43156: NOT
43157: IFFALSE 43161
// exit ;
43159: GO 43209
// if asc then
43161: LD_VAR 0 2
43165: IFFALSE 43189
// result := SortListByListAsc ( units , tmp ) else
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_VAR 0 1
43176: PPUSH
43177: LD_VAR 0 5
43181: PPUSH
43182: CALL_OW 76
43186: ST_TO_ADDR
43187: GO 43209
// result := SortListByListDesc ( units , tmp ) ;
43189: LD_ADDR_VAR 0 3
43193: PUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: LD_VAR 0 5
43203: PPUSH
43204: CALL_OW 77
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 3
43213: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43214: LD_INT 0
43216: PPUSH
43217: PPUSH
// task := GetTaskList ( mech ) ;
43218: LD_ADDR_VAR 0 4
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 437
43232: ST_TO_ADDR
// if not task then
43233: LD_VAR 0 4
43237: NOT
43238: IFFALSE 43242
// exit ;
43240: GO 43286
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43242: LD_ADDR_VAR 0 3
43246: PUSH
43247: LD_VAR 0 4
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: PUSH
43260: LD_STRING r
43262: EQUAL
43263: IFFALSE 43285
43265: PUSH
43266: LD_VAR 0 4
43270: PUSH
43271: LD_INT 1
43273: ARRAY
43274: PUSH
43275: LD_INT 4
43277: ARRAY
43278: PUSH
43279: LD_VAR 0 2
43283: EQUAL
43284: AND
43285: ST_TO_ADDR
// end ;
43286: LD_VAR 0 3
43290: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43291: LD_INT 0
43293: PPUSH
// SetDir ( unit , d ) ;
43294: LD_VAR 0 1
43298: PPUSH
43299: LD_VAR 0 4
43303: PPUSH
43304: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43308: LD_ADDR_VAR 0 6
43312: PUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: LD_VAR 0 2
43322: PPUSH
43323: LD_VAR 0 3
43327: PPUSH
43328: LD_VAR 0 5
43332: PPUSH
43333: CALL_OW 48
43337: ST_TO_ADDR
// end ;
43338: LD_VAR 0 6
43342: RET
// export function ToNaturalNumber ( number ) ; begin
43343: LD_INT 0
43345: PPUSH
// result := number div 1 ;
43346: LD_ADDR_VAR 0 2
43350: PUSH
43351: LD_VAR 0 1
43355: PUSH
43356: LD_INT 1
43358: DIV
43359: ST_TO_ADDR
// if number < 0 then
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 0
43367: LESS
43368: IFFALSE 43378
// result := 0 ;
43370: LD_ADDR_VAR 0 2
43374: PUSH
43375: LD_INT 0
43377: ST_TO_ADDR
// end ;
43378: LD_VAR 0 2
43382: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43383: LD_INT 0
43385: PPUSH
43386: PPUSH
43387: PPUSH
// if not buildings then
43388: LD_VAR 0 1
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43512
// tmp := [ ] ;
43397: LD_ADDR_VAR 0 5
43401: PUSH
43402: EMPTY
43403: ST_TO_ADDR
// for b in buildings do
43404: LD_ADDR_VAR 0 4
43408: PUSH
43409: LD_VAR 0 1
43413: PUSH
43414: FOR_IN
43415: IFFALSE 43453
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43417: LD_ADDR_VAR 0 5
43421: PUSH
43422: LD_VAR 0 5
43426: PPUSH
43427: LD_VAR 0 5
43431: PUSH
43432: LD_INT 1
43434: PLUS
43435: PPUSH
43436: LD_VAR 0 4
43440: PPUSH
43441: CALL_OW 266
43445: PPUSH
43446: CALL_OW 1
43450: ST_TO_ADDR
43451: GO 43414
43453: POP
43454: POP
// if not tmp then
43455: LD_VAR 0 5
43459: NOT
43460: IFFALSE 43464
// exit ;
43462: GO 43512
// if asc then
43464: LD_VAR 0 2
43468: IFFALSE 43492
// result := SortListByListAsc ( buildings , tmp ) else
43470: LD_ADDR_VAR 0 3
43474: PUSH
43475: LD_VAR 0 1
43479: PPUSH
43480: LD_VAR 0 5
43484: PPUSH
43485: CALL_OW 76
43489: ST_TO_ADDR
43490: GO 43512
// result := SortListByListDesc ( buildings , tmp ) ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: LD_VAR 0 5
43506: PPUSH
43507: CALL_OW 77
43511: ST_TO_ADDR
// end ;
43512: LD_VAR 0 3
43516: RET
// export function SortByClass ( units , class ) ; var un ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
// if not units or not class then
43521: LD_VAR 0 1
43525: NOT
43526: IFTRUE 43535
43528: PUSH
43529: LD_VAR 0 2
43533: NOT
43534: OR
43535: IFFALSE 43539
// exit ;
43537: GO 43634
// result := [ ] ;
43539: LD_ADDR_VAR 0 3
43543: PUSH
43544: EMPTY
43545: ST_TO_ADDR
// for un in units do
43546: LD_ADDR_VAR 0 4
43550: PUSH
43551: LD_VAR 0 1
43555: PUSH
43556: FOR_IN
43557: IFFALSE 43632
// if GetClass ( un ) = class then
43559: LD_VAR 0 4
43563: PPUSH
43564: CALL_OW 257
43568: PUSH
43569: LD_VAR 0 2
43573: EQUAL
43574: IFFALSE 43601
// result := Insert ( result , 1 , un ) else
43576: LD_ADDR_VAR 0 3
43580: PUSH
43581: LD_VAR 0 3
43585: PPUSH
43586: LD_INT 1
43588: PPUSH
43589: LD_VAR 0 4
43593: PPUSH
43594: CALL_OW 2
43598: ST_TO_ADDR
43599: GO 43630
// result := Replace ( result , result + 1 , un ) ;
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_VAR 0 3
43610: PPUSH
43611: LD_VAR 0 3
43615: PUSH
43616: LD_INT 1
43618: PLUS
43619: PPUSH
43620: LD_VAR 0 4
43624: PPUSH
43625: CALL_OW 1
43629: ST_TO_ADDR
43630: GO 43556
43632: POP
43633: POP
// end ;
43634: LD_VAR 0 3
43638: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43639: LD_INT 0
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
// result := [ ] ;
43648: LD_ADDR_VAR 0 4
43652: PUSH
43653: EMPTY
43654: ST_TO_ADDR
// if x - r < 0 then
43655: LD_VAR 0 1
43659: PUSH
43660: LD_VAR 0 3
43664: MINUS
43665: PUSH
43666: LD_INT 0
43668: LESS
43669: IFFALSE 43681
// min_x := 0 else
43671: LD_ADDR_VAR 0 8
43675: PUSH
43676: LD_INT 0
43678: ST_TO_ADDR
43679: GO 43697
// min_x := x - r ;
43681: LD_ADDR_VAR 0 8
43685: PUSH
43686: LD_VAR 0 1
43690: PUSH
43691: LD_VAR 0 3
43695: MINUS
43696: ST_TO_ADDR
// if y - r < 0 then
43697: LD_VAR 0 2
43701: PUSH
43702: LD_VAR 0 3
43706: MINUS
43707: PUSH
43708: LD_INT 0
43710: LESS
43711: IFFALSE 43723
// min_y := 0 else
43713: LD_ADDR_VAR 0 7
43717: PUSH
43718: LD_INT 0
43720: ST_TO_ADDR
43721: GO 43739
// min_y := y - r ;
43723: LD_ADDR_VAR 0 7
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: LD_VAR 0 3
43737: MINUS
43738: ST_TO_ADDR
// max_x := x + r ;
43739: LD_ADDR_VAR 0 9
43743: PUSH
43744: LD_VAR 0 1
43748: PUSH
43749: LD_VAR 0 3
43753: PLUS
43754: ST_TO_ADDR
// max_y := y + r ;
43755: LD_ADDR_VAR 0 10
43759: PUSH
43760: LD_VAR 0 2
43764: PUSH
43765: LD_VAR 0 3
43769: PLUS
43770: ST_TO_ADDR
// for _x = min_x to max_x do
43771: LD_ADDR_VAR 0 5
43775: PUSH
43776: DOUBLE
43777: LD_VAR 0 8
43781: DEC
43782: ST_TO_ADDR
43783: LD_VAR 0 9
43787: PUSH
43788: FOR_TO
43789: IFFALSE 43890
// for _y = min_y to max_y do
43791: LD_ADDR_VAR 0 6
43795: PUSH
43796: DOUBLE
43797: LD_VAR 0 7
43801: DEC
43802: ST_TO_ADDR
43803: LD_VAR 0 10
43807: PUSH
43808: FOR_TO
43809: IFFALSE 43886
// begin if not ValidHex ( _x , _y ) then
43811: LD_VAR 0 5
43815: PPUSH
43816: LD_VAR 0 6
43820: PPUSH
43821: CALL_OW 488
43825: NOT
43826: IFFALSE 43830
// continue ;
43828: GO 43808
// if GetResourceTypeXY ( _x , _y ) then
43830: LD_VAR 0 5
43834: PPUSH
43835: LD_VAR 0 6
43839: PPUSH
43840: CALL_OW 283
43844: IFFALSE 43884
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43846: LD_ADDR_VAR 0 4
43850: PUSH
43851: LD_VAR 0 4
43855: PPUSH
43856: LD_VAR 0 4
43860: PUSH
43861: LD_INT 1
43863: PLUS
43864: PPUSH
43865: LD_VAR 0 5
43869: PUSH
43870: LD_VAR 0 6
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PPUSH
43879: CALL_OW 1
43883: ST_TO_ADDR
// end ;
43884: GO 43808
43886: POP
43887: POP
43888: GO 43788
43890: POP
43891: POP
// end ;
43892: LD_VAR 0 4
43896: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43897: LD_INT 0
43899: PPUSH
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
// if not units then
43907: LD_VAR 0 1
43911: NOT
43912: IFFALSE 43916
// exit ;
43914: GO 44448
// result := UnitFilter ( units , [ f_ok ] ) ;
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_VAR 0 1
43925: PPUSH
43926: LD_INT 50
43928: PUSH
43929: EMPTY
43930: LIST
43931: PPUSH
43932: CALL_OW 72
43936: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43937: LD_ADDR_VAR 0 8
43941: PUSH
43942: LD_VAR 0 1
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: PPUSH
43951: CALL_OW 255
43955: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43956: LD_ADDR_VAR 0 10
43960: PUSH
43961: LD_INT 29
43963: PUSH
43964: LD_INT 91
43966: PUSH
43967: LD_INT 49
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// if not result then
43975: LD_VAR 0 3
43979: NOT
43980: IFFALSE 43984
// exit ;
43982: GO 44448
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43984: LD_ADDR_VAR 0 5
43988: PUSH
43989: LD_INT 81
43991: PUSH
43992: LD_VAR 0 8
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PPUSH
44001: CALL_OW 69
44005: ST_TO_ADDR
// for i in result do
44006: LD_ADDR_VAR 0 4
44010: PUSH
44011: LD_VAR 0 3
44015: PUSH
44016: FOR_IN
44017: IFFALSE 44446
// begin tag := GetTag ( i ) + 1 ;
44019: LD_ADDR_VAR 0 9
44023: PUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: CALL_OW 110
44033: PUSH
44034: LD_INT 1
44036: PLUS
44037: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44038: LD_ADDR_VAR 0 7
44042: PUSH
44043: LD_VAR 0 4
44047: PPUSH
44048: CALL_OW 250
44052: PPUSH
44053: LD_VAR 0 4
44057: PPUSH
44058: CALL_OW 251
44062: PPUSH
44063: LD_INT 4
44065: PPUSH
44066: CALL 43639 0 3
44070: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44071: LD_VAR 0 4
44075: PPUSH
44076: CALL_OW 247
44080: PUSH
44081: LD_INT 2
44083: EQUAL
44084: IFFALSE 44096
44086: PUSH
44087: LD_VAR 0 7
44091: PUSH
44092: LD_INT 2
44094: GREATER
44095: AND
44096: IFFALSE 44116
44098: PUSH
44099: LD_VAR 0 4
44103: PPUSH
44104: CALL_OW 264
44108: PUSH
44109: LD_VAR 0 10
44113: IN
44114: NOT
44115: AND
44116: IFFALSE 44155
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44118: LD_VAR 0 4
44122: PPUSH
44123: LD_VAR 0 7
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: PPUSH
44136: LD_VAR 0 7
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PUSH
44145: LD_INT 2
44147: ARRAY
44148: PPUSH
44149: CALL_OW 116
44153: GO 44444
// if path > tag then
44155: LD_VAR 0 2
44159: PUSH
44160: LD_VAR 0 9
44164: GREATER
44165: IFFALSE 44373
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44167: LD_ADDR_VAR 0 6
44171: PUSH
44172: LD_VAR 0 5
44176: PPUSH
44177: LD_INT 91
44179: PUSH
44180: LD_VAR 0 4
44184: PUSH
44185: LD_INT 8
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: PPUSH
44193: CALL_OW 72
44197: ST_TO_ADDR
// if nearEnemy then
44198: LD_VAR 0 6
44202: IFFALSE 44271
// begin if GetWeapon ( i ) = ru_time_lapser then
44204: LD_VAR 0 4
44208: PPUSH
44209: CALL_OW 264
44213: PUSH
44214: LD_INT 49
44216: EQUAL
44217: IFFALSE 44245
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44219: LD_VAR 0 4
44223: PPUSH
44224: LD_VAR 0 6
44228: PPUSH
44229: LD_VAR 0 4
44233: PPUSH
44234: CALL_OW 74
44238: PPUSH
44239: CALL_OW 112
44243: GO 44269
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44245: LD_VAR 0 4
44249: PPUSH
44250: LD_VAR 0 6
44254: PPUSH
44255: LD_VAR 0 4
44259: PPUSH
44260: CALL_OW 74
44264: PPUSH
44265: CALL 45529 0 2
// end else
44269: GO 44371
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44271: LD_VAR 0 4
44275: PPUSH
44276: LD_VAR 0 2
44280: PUSH
44281: LD_VAR 0 9
44285: ARRAY
44286: PUSH
44287: LD_INT 1
44289: ARRAY
44290: PPUSH
44291: LD_VAR 0 2
44295: PUSH
44296: LD_VAR 0 9
44300: ARRAY
44301: PUSH
44302: LD_INT 2
44304: ARRAY
44305: PPUSH
44306: CALL_OW 297
44310: PUSH
44311: LD_INT 6
44313: GREATER
44314: IFFALSE 44357
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44316: LD_VAR 0 4
44320: PPUSH
44321: LD_VAR 0 2
44325: PUSH
44326: LD_VAR 0 9
44330: ARRAY
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_VAR 0 9
44345: ARRAY
44346: PUSH
44347: LD_INT 2
44349: ARRAY
44350: PPUSH
44351: CALL_OW 114
44355: GO 44371
// SetTag ( i , tag ) ;
44357: LD_VAR 0 4
44361: PPUSH
44362: LD_VAR 0 9
44366: PPUSH
44367: CALL_OW 109
// end else
44371: GO 44444
// if enemy then
44373: LD_VAR 0 5
44377: IFFALSE 44444
// begin if GetWeapon ( i ) = ru_time_lapser then
44379: LD_VAR 0 4
44383: PPUSH
44384: CALL_OW 264
44388: PUSH
44389: LD_INT 49
44391: EQUAL
44392: IFFALSE 44420
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44394: LD_VAR 0 4
44398: PPUSH
44399: LD_VAR 0 5
44403: PPUSH
44404: LD_VAR 0 4
44408: PPUSH
44409: CALL_OW 74
44413: PPUSH
44414: CALL_OW 112
44418: GO 44444
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44420: LD_VAR 0 4
44424: PPUSH
44425: LD_VAR 0 5
44429: PPUSH
44430: LD_VAR 0 4
44434: PPUSH
44435: CALL_OW 74
44439: PPUSH
44440: CALL 45529 0 2
// end ; end ;
44444: GO 44016
44446: POP
44447: POP
// end ;
44448: LD_VAR 0 3
44452: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44453: LD_INT 0
44455: PPUSH
44456: PPUSH
44457: PPUSH
// if not unit or IsInUnit ( unit ) then
44458: LD_VAR 0 1
44462: NOT
44463: IFTRUE 44476
44465: PUSH
44466: LD_VAR 0 1
44470: PPUSH
44471: CALL_OW 310
44475: OR
44476: IFFALSE 44480
// exit ;
44478: GO 44571
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: LD_VAR 0 1
44489: PPUSH
44490: CALL_OW 250
44494: PPUSH
44495: LD_VAR 0 2
44499: PPUSH
44500: LD_INT 1
44502: PPUSH
44503: CALL_OW 272
44507: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44508: LD_ADDR_VAR 0 5
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 251
44522: PPUSH
44523: LD_VAR 0 2
44527: PPUSH
44528: LD_INT 1
44530: PPUSH
44531: CALL_OW 273
44535: ST_TO_ADDR
// if ValidHex ( x , y ) then
44536: LD_VAR 0 4
44540: PPUSH
44541: LD_VAR 0 5
44545: PPUSH
44546: CALL_OW 488
44550: IFFALSE 44571
// ComTurnXY ( unit , x , y ) ;
44552: LD_VAR 0 1
44556: PPUSH
44557: LD_VAR 0 4
44561: PPUSH
44562: LD_VAR 0 5
44566: PPUSH
44567: CALL_OW 118
// end ;
44571: LD_VAR 0 3
44575: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44576: LD_INT 0
44578: PPUSH
44579: PPUSH
// result := false ;
44580: LD_ADDR_VAR 0 3
44584: PUSH
44585: LD_INT 0
44587: ST_TO_ADDR
// if not units then
44588: LD_VAR 0 2
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44642
// for i in units do
44597: LD_ADDR_VAR 0 4
44601: PUSH
44602: LD_VAR 0 2
44606: PUSH
44607: FOR_IN
44608: IFFALSE 44640
// if See ( side , i ) then
44610: LD_VAR 0 1
44614: PPUSH
44615: LD_VAR 0 4
44619: PPUSH
44620: CALL_OW 292
44624: IFFALSE 44638
// begin result := true ;
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 1
44633: ST_TO_ADDR
// exit ;
44634: POP
44635: POP
44636: GO 44642
// end ;
44638: GO 44607
44640: POP
44641: POP
// end ;
44642: LD_VAR 0 3
44646: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44647: LD_INT 0
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
// if not unit or not points then
44653: LD_VAR 0 1
44657: NOT
44658: IFTRUE 44667
44660: PUSH
44661: LD_VAR 0 2
44665: NOT
44666: OR
44667: IFFALSE 44671
// exit ;
44669: GO 44761
// dist := 99999 ;
44671: LD_ADDR_VAR 0 5
44675: PUSH
44676: LD_INT 99999
44678: ST_TO_ADDR
// for i in points do
44679: LD_ADDR_VAR 0 4
44683: PUSH
44684: LD_VAR 0 2
44688: PUSH
44689: FOR_IN
44690: IFFALSE 44759
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44692: LD_ADDR_VAR 0 6
44696: PUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: LD_VAR 0 4
44706: PUSH
44707: LD_INT 1
44709: ARRAY
44710: PPUSH
44711: LD_VAR 0 4
44715: PUSH
44716: LD_INT 2
44718: ARRAY
44719: PPUSH
44720: CALL_OW 297
44724: ST_TO_ADDR
// if tmpDist < dist then
44725: LD_VAR 0 6
44729: PUSH
44730: LD_VAR 0 5
44734: LESS
44735: IFFALSE 44757
// begin result := i ;
44737: LD_ADDR_VAR 0 3
44741: PUSH
44742: LD_VAR 0 4
44746: ST_TO_ADDR
// dist := tmpDist ;
44747: LD_ADDR_VAR 0 5
44751: PUSH
44752: LD_VAR 0 6
44756: ST_TO_ADDR
// end ; end ;
44757: GO 44689
44759: POP
44760: POP
// end ;
44761: LD_VAR 0 3
44765: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44766: LD_INT 0
44768: PPUSH
// uc_side := side ;
44769: LD_ADDR_OWVAR 20
44773: PUSH
44774: LD_VAR 0 1
44778: ST_TO_ADDR
// uc_nation := 3 ;
44779: LD_ADDR_OWVAR 21
44783: PUSH
44784: LD_INT 3
44786: ST_TO_ADDR
// vc_chassis := 25 ;
44787: LD_ADDR_OWVAR 37
44791: PUSH
44792: LD_INT 25
44794: ST_TO_ADDR
// vc_engine := engine_siberite ;
44795: LD_ADDR_OWVAR 39
44799: PUSH
44800: LD_INT 3
44802: ST_TO_ADDR
// vc_control := control_computer ;
44803: LD_ADDR_OWVAR 38
44807: PUSH
44808: LD_INT 3
44810: ST_TO_ADDR
// vc_weapon := 59 ;
44811: LD_ADDR_OWVAR 40
44815: PUSH
44816: LD_INT 59
44818: ST_TO_ADDR
// result := CreateVehicle ;
44819: LD_ADDR_VAR 0 5
44823: PUSH
44824: CALL_OW 45
44828: ST_TO_ADDR
// SetDir ( result , d ) ;
44829: LD_VAR 0 5
44833: PPUSH
44834: LD_VAR 0 4
44838: PPUSH
44839: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44843: LD_VAR 0 5
44847: PPUSH
44848: LD_VAR 0 2
44852: PPUSH
44853: LD_VAR 0 3
44857: PPUSH
44858: LD_INT 0
44860: PPUSH
44861: CALL_OW 48
// end ;
44865: LD_VAR 0 5
44869: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44870: LD_INT 0
44872: PPUSH
44873: PPUSH
44874: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44875: LD_ADDR_VAR 0 2
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44898: LD_VAR 0 1
44902: NOT
44903: IFTRUE 44936
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 264
44915: PUSH
44916: LD_INT 12
44918: PUSH
44919: LD_INT 51
44921: PUSH
44922: LD_INT 32
44924: PUSH
44925: LD_INT 89
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: IN
44934: NOT
44935: OR
44936: IFFALSE 44940
// exit ;
44938: GO 45038
// for i := 1 to 3 do
44940: LD_ADDR_VAR 0 3
44944: PUSH
44945: DOUBLE
44946: LD_INT 1
44948: DEC
44949: ST_TO_ADDR
44950: LD_INT 3
44952: PUSH
44953: FOR_TO
44954: IFFALSE 45036
// begin tmp := GetCargo ( cargo , i ) ;
44956: LD_ADDR_VAR 0 4
44960: PUSH
44961: LD_VAR 0 1
44965: PPUSH
44966: LD_VAR 0 3
44970: PPUSH
44971: CALL_OW 289
44975: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44976: LD_ADDR_VAR 0 2
44980: PUSH
44981: LD_VAR 0 2
44985: PPUSH
44986: LD_VAR 0 3
44990: PPUSH
44991: LD_VAR 0 4
44995: PPUSH
44996: CALL_OW 1
45000: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45001: LD_ADDR_VAR 0 2
45005: PUSH
45006: LD_VAR 0 2
45010: PPUSH
45011: LD_INT 4
45013: PPUSH
45014: LD_VAR 0 2
45018: PUSH
45019: LD_INT 4
45021: ARRAY
45022: PUSH
45023: LD_VAR 0 4
45027: PLUS
45028: PPUSH
45029: CALL_OW 1
45033: ST_TO_ADDR
// end ;
45034: GO 44953
45036: POP
45037: POP
// end ;
45038: LD_VAR 0 2
45042: RET
// export function Length ( array ) ; begin
45043: LD_INT 0
45045: PPUSH
// result := array + 0 ;
45046: LD_ADDR_VAR 0 2
45050: PUSH
45051: LD_VAR 0 1
45055: PUSH
45056: LD_INT 0
45058: PLUS
45059: ST_TO_ADDR
// end ;
45060: LD_VAR 0 2
45064: RET
// export function PrepareArray ( array ) ; begin
45065: LD_INT 0
45067: PPUSH
// result := array diff 0 ;
45068: LD_ADDR_VAR 0 2
45072: PUSH
45073: LD_VAR 0 1
45077: PUSH
45078: LD_INT 0
45080: DIFF
45081: ST_TO_ADDR
// if not result [ 1 ] then
45082: LD_VAR 0 2
45086: PUSH
45087: LD_INT 1
45089: ARRAY
45090: NOT
45091: IFFALSE 45111
// result := Delete ( result , 1 ) ;
45093: LD_ADDR_VAR 0 2
45097: PUSH
45098: LD_VAR 0 2
45102: PPUSH
45103: LD_INT 1
45105: PPUSH
45106: CALL_OW 3
45110: ST_TO_ADDR
// end ;
45111: LD_VAR 0 2
45115: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45116: LD_INT 0
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
// sibRocketRange := 25 ;
45122: LD_ADDR_VAR 0 6
45126: PUSH
45127: LD_INT 25
45129: ST_TO_ADDR
// result := false ;
45130: LD_ADDR_VAR 0 4
45134: PUSH
45135: LD_INT 0
45137: ST_TO_ADDR
// for i := 0 to 5 do
45138: LD_ADDR_VAR 0 5
45142: PUSH
45143: DOUBLE
45144: LD_INT 0
45146: DEC
45147: ST_TO_ADDR
45148: LD_INT 5
45150: PUSH
45151: FOR_TO
45152: IFFALSE 45219
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45154: LD_VAR 0 1
45158: PPUSH
45159: LD_VAR 0 5
45163: PPUSH
45164: LD_VAR 0 6
45168: PPUSH
45169: CALL_OW 272
45173: PPUSH
45174: LD_VAR 0 2
45178: PPUSH
45179: LD_VAR 0 5
45183: PPUSH
45184: LD_VAR 0 6
45188: PPUSH
45189: CALL_OW 273
45193: PPUSH
45194: LD_VAR 0 3
45198: PPUSH
45199: CALL_OW 309
45203: IFFALSE 45217
// begin result := true ;
45205: LD_ADDR_VAR 0 4
45209: PUSH
45210: LD_INT 1
45212: ST_TO_ADDR
// exit ;
45213: POP
45214: POP
45215: GO 45221
// end ;
45217: GO 45151
45219: POP
45220: POP
// end ;
45221: LD_VAR 0 4
45225: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45226: LD_INT 0
45228: PPUSH
45229: PPUSH
45230: PPUSH
// if btype = b_depot then
45231: LD_VAR 0 2
45235: PUSH
45236: LD_INT 0
45238: EQUAL
45239: IFFALSE 45251
// begin result := true ;
45241: LD_ADDR_VAR 0 3
45245: PUSH
45246: LD_INT 1
45248: ST_TO_ADDR
// exit ;
45249: GO 45371
// end ; pom := GetBase ( depot ) ;
45251: LD_ADDR_VAR 0 4
45255: PUSH
45256: LD_VAR 0 1
45260: PPUSH
45261: CALL_OW 274
45265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45266: LD_ADDR_VAR 0 5
45270: PUSH
45271: LD_VAR 0 2
45275: PPUSH
45276: LD_VAR 0 1
45280: PPUSH
45281: CALL_OW 248
45285: PPUSH
45286: CALL_OW 450
45290: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45291: LD_ADDR_VAR 0 3
45295: PUSH
45296: LD_VAR 0 4
45300: PPUSH
45301: LD_INT 1
45303: PPUSH
45304: CALL_OW 275
45308: PUSH
45309: LD_VAR 0 5
45313: PUSH
45314: LD_INT 1
45316: ARRAY
45317: GREATEREQUAL
45318: IFFALSE 45344
45320: PUSH
45321: LD_VAR 0 4
45325: PPUSH
45326: LD_INT 2
45328: PPUSH
45329: CALL_OW 275
45333: PUSH
45334: LD_VAR 0 5
45338: PUSH
45339: LD_INT 2
45341: ARRAY
45342: GREATEREQUAL
45343: AND
45344: IFFALSE 45370
45346: PUSH
45347: LD_VAR 0 4
45351: PPUSH
45352: LD_INT 3
45354: PPUSH
45355: CALL_OW 275
45359: PUSH
45360: LD_VAR 0 5
45364: PUSH
45365: LD_INT 3
45367: ARRAY
45368: GREATEREQUAL
45369: AND
45370: ST_TO_ADDR
// end ;
45371: LD_VAR 0 3
45375: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45376: LD_INT 0
45378: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45379: LD_VAR 0 1
45383: PPUSH
45384: LD_VAR 0 2
45388: PPUSH
45389: LD_INT 0
45391: PPUSH
45392: LD_INT 0
45394: PPUSH
45395: LD_INT 1
45397: PPUSH
45398: LD_INT 0
45400: PPUSH
45401: CALL_OW 587
// end ;
45405: LD_VAR 0 3
45409: RET
// export function CenterOnNow ( unit ) ; begin
45410: LD_INT 0
45412: PPUSH
// result := IsInUnit ( unit ) ;
45413: LD_ADDR_VAR 0 2
45417: PUSH
45418: LD_VAR 0 1
45422: PPUSH
45423: CALL_OW 310
45427: ST_TO_ADDR
// if not result then
45428: LD_VAR 0 2
45432: NOT
45433: IFFALSE 45445
// result := unit ;
45435: LD_ADDR_VAR 0 2
45439: PUSH
45440: LD_VAR 0 1
45444: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 87
// end ;
45454: LD_VAR 0 2
45458: RET
// export function ComMoveHex ( unit , hex ) ; begin
45459: LD_INT 0
45461: PPUSH
// if not hex then
45462: LD_VAR 0 2
45466: NOT
45467: IFFALSE 45471
// exit ;
45469: GO 45524
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45471: LD_VAR 0 2
45475: PUSH
45476: LD_INT 1
45478: ARRAY
45479: PPUSH
45480: LD_VAR 0 2
45484: PUSH
45485: LD_INT 2
45487: ARRAY
45488: PPUSH
45489: CALL_OW 428
45493: IFFALSE 45497
// exit ;
45495: GO 45524
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45497: LD_VAR 0 1
45501: PPUSH
45502: LD_VAR 0 2
45506: PUSH
45507: LD_INT 1
45509: ARRAY
45510: PPUSH
45511: LD_VAR 0 2
45515: PUSH
45516: LD_INT 2
45518: ARRAY
45519: PPUSH
45520: CALL_OW 111
// end ;
45524: LD_VAR 0 3
45528: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45529: LD_INT 0
45531: PPUSH
45532: PPUSH
45533: PPUSH
// if not unit or not enemy then
45534: LD_VAR 0 1
45538: NOT
45539: IFTRUE 45548
45541: PUSH
45542: LD_VAR 0 2
45546: NOT
45547: OR
45548: IFFALSE 45552
// exit ;
45550: GO 45678
// x := GetX ( enemy ) ;
45552: LD_ADDR_VAR 0 4
45556: PUSH
45557: LD_VAR 0 2
45561: PPUSH
45562: CALL_OW 250
45566: ST_TO_ADDR
// y := GetY ( enemy ) ;
45567: LD_ADDR_VAR 0 5
45571: PUSH
45572: LD_VAR 0 2
45576: PPUSH
45577: CALL_OW 251
45581: ST_TO_ADDR
// if ValidHex ( x , y ) then
45582: LD_VAR 0 4
45586: PPUSH
45587: LD_VAR 0 5
45591: PPUSH
45592: CALL_OW 488
45596: IFFALSE 45678
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45598: LD_VAR 0 2
45602: PPUSH
45603: CALL_OW 247
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: IN
45618: IFTRUE 45641
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: CALL_OW 255
45630: PPUSH
45631: LD_VAR 0 2
45635: PPUSH
45636: CALL_OW 292
45640: OR
45641: IFFALSE 45659
// ComAttackUnit ( unit , enemy ) else
45643: LD_VAR 0 1
45647: PPUSH
45648: LD_VAR 0 2
45652: PPUSH
45653: CALL_OW 115
45657: GO 45678
// ComAgressiveMove ( unit , x , y ) ;
45659: LD_VAR 0 1
45663: PPUSH
45664: LD_VAR 0 4
45668: PPUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: CALL_OW 114
// end ;
45678: LD_VAR 0 3
45682: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45683: LD_INT 0
45685: PPUSH
45686: PPUSH
45687: PPUSH
// list := AreaToList ( area , 0 ) ;
45688: LD_ADDR_VAR 0 5
45692: PUSH
45693: LD_VAR 0 1
45697: PPUSH
45698: LD_INT 0
45700: PPUSH
45701: CALL_OW 517
45705: ST_TO_ADDR
// if not list then
45706: LD_VAR 0 5
45710: NOT
45711: IFFALSE 45715
// exit ;
45713: GO 45845
// if all then
45715: LD_VAR 0 2
45719: IFFALSE 45807
// begin for i := 1 to list [ 1 ] do
45721: LD_ADDR_VAR 0 4
45725: PUSH
45726: DOUBLE
45727: LD_INT 1
45729: DEC
45730: ST_TO_ADDR
45731: LD_VAR 0 5
45735: PUSH
45736: LD_INT 1
45738: ARRAY
45739: PUSH
45740: FOR_TO
45741: IFFALSE 45803
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45743: LD_ADDR_VAR 0 3
45747: PUSH
45748: LD_VAR 0 3
45752: PPUSH
45753: LD_VAR 0 3
45757: PUSH
45758: LD_INT 1
45760: PLUS
45761: PPUSH
45762: LD_VAR 0 5
45766: PUSH
45767: LD_INT 1
45769: ARRAY
45770: PUSH
45771: LD_VAR 0 4
45775: ARRAY
45776: PUSH
45777: LD_VAR 0 5
45781: PUSH
45782: LD_INT 2
45784: ARRAY
45785: PUSH
45786: LD_VAR 0 4
45790: ARRAY
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PPUSH
45796: CALL_OW 1
45800: ST_TO_ADDR
45801: GO 45740
45803: POP
45804: POP
// exit ;
45805: GO 45845
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45807: LD_ADDR_VAR 0 3
45811: PUSH
45812: LD_VAR 0 5
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PUSH
45825: LD_VAR 0 5
45829: PUSH
45830: LD_INT 2
45832: ARRAY
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: ST_TO_ADDR
// end ;
45845: LD_VAR 0 3
45849: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45850: LD_INT 0
45852: PPUSH
45853: PPUSH
// list := AreaToList ( area , 0 ) ;
45854: LD_ADDR_VAR 0 4
45858: PUSH
45859: LD_VAR 0 1
45863: PPUSH
45864: LD_INT 0
45866: PPUSH
45867: CALL_OW 517
45871: ST_TO_ADDR
// if not list then
45872: LD_VAR 0 4
45876: NOT
45877: IFFALSE 45881
// exit ;
45879: GO 45922
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_VAR 0 4
45890: PUSH
45891: LD_INT 1
45893: ARRAY
45894: PUSH
45895: LD_INT 1
45897: ARRAY
45898: PUSH
45899: LD_VAR 0 4
45903: PUSH
45904: LD_INT 2
45906: ARRAY
45907: PUSH
45908: LD_INT 1
45910: ARRAY
45911: PUSH
45912: LD_VAR 0 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// end ;
45922: LD_VAR 0 3
45926: RET
// export function First ( array ) ; begin
45927: LD_INT 0
45929: PPUSH
// if not array then
45930: LD_VAR 0 1
45934: NOT
45935: IFFALSE 45939
// exit ;
45937: GO 45953
// result := array [ 1 ] ;
45939: LD_ADDR_VAR 0 2
45943: PUSH
45944: LD_VAR 0 1
45948: PUSH
45949: LD_INT 1
45951: ARRAY
45952: ST_TO_ADDR
// end ;
45953: LD_VAR 0 2
45957: RET
// export function Last ( array ) ; begin
45958: LD_INT 0
45960: PPUSH
// if not array then
45961: LD_VAR 0 1
45965: NOT
45966: IFFALSE 45970
// exit ;
45968: GO 45986
// result := array [ array ] ;
45970: LD_ADDR_VAR 0 2
45974: PUSH
45975: LD_VAR 0 1
45979: PUSH
45980: LD_VAR 0 1
45984: ARRAY
45985: ST_TO_ADDR
// end ;
45986: LD_VAR 0 2
45990: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45991: LD_INT 0
45993: PPUSH
45994: PPUSH
// result := [ ] ;
45995: LD_ADDR_VAR 0 5
45999: PUSH
46000: EMPTY
46001: ST_TO_ADDR
// if not array then
46002: LD_VAR 0 1
46006: NOT
46007: IFFALSE 46011
// exit ;
46009: GO 46123
// for i := 1 to array do
46011: LD_ADDR_VAR 0 6
46015: PUSH
46016: DOUBLE
46017: LD_INT 1
46019: DEC
46020: ST_TO_ADDR
46021: LD_VAR 0 1
46025: PUSH
46026: FOR_TO
46027: IFFALSE 46121
// if array [ i ] [ index ] = value then
46029: LD_VAR 0 1
46033: PUSH
46034: LD_VAR 0 6
46038: ARRAY
46039: PUSH
46040: LD_VAR 0 2
46044: ARRAY
46045: PUSH
46046: LD_VAR 0 3
46050: EQUAL
46051: IFFALSE 46119
// begin if indexColumn then
46053: LD_VAR 0 4
46057: IFFALSE 46093
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46059: LD_ADDR_VAR 0 5
46063: PUSH
46064: LD_VAR 0 5
46068: PPUSH
46069: LD_VAR 0 1
46073: PUSH
46074: LD_VAR 0 6
46078: ARRAY
46079: PUSH
46080: LD_VAR 0 4
46084: ARRAY
46085: PPUSH
46086: CALL 41131 0 2
46090: ST_TO_ADDR
46091: GO 46119
// result := Join ( result , array [ i ] ) ;
46093: LD_ADDR_VAR 0 5
46097: PUSH
46098: LD_VAR 0 5
46102: PPUSH
46103: LD_VAR 0 1
46107: PUSH
46108: LD_VAR 0 6
46112: ARRAY
46113: PPUSH
46114: CALL 41131 0 2
46118: ST_TO_ADDR
// end ;
46119: GO 46026
46121: POP
46122: POP
// end ;
46123: LD_VAR 0 5
46127: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46128: LD_INT 0
46130: PPUSH
// if not vehicles or not parkingPoint then
46131: LD_VAR 0 1
46135: NOT
46136: IFTRUE 46145
46138: PUSH
46139: LD_VAR 0 2
46143: NOT
46144: OR
46145: IFFALSE 46149
// exit ;
46147: GO 46247
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46149: LD_ADDR_VAR 0 1
46153: PUSH
46154: LD_VAR 0 1
46158: PPUSH
46159: LD_INT 50
46161: PUSH
46162: EMPTY
46163: LIST
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: LD_INT 92
46170: PUSH
46171: LD_VAR 0 2
46175: PUSH
46176: LD_INT 1
46178: ARRAY
46179: PUSH
46180: LD_VAR 0 2
46184: PUSH
46185: LD_INT 2
46187: ARRAY
46188: PUSH
46189: LD_INT 8
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PPUSH
46206: CALL_OW 72
46210: ST_TO_ADDR
// if not vehicles then
46211: LD_VAR 0 1
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 46247
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46220: LD_VAR 0 1
46224: PPUSH
46225: LD_VAR 0 2
46229: PUSH
46230: LD_INT 1
46232: ARRAY
46233: PPUSH
46234: LD_VAR 0 2
46238: PUSH
46239: LD_INT 2
46241: ARRAY
46242: PPUSH
46243: CALL_OW 111
// end ;
46247: LD_VAR 0 3
46251: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46252: LD_INT 0
46254: PPUSH
46255: PPUSH
46256: PPUSH
// if not side or not area then
46257: LD_VAR 0 1
46261: NOT
46262: IFTRUE 46271
46264: PUSH
46265: LD_VAR 0 2
46269: NOT
46270: OR
46271: IFFALSE 46275
// exit ;
46273: GO 46394
// tmp := AreaToList ( area , 0 ) ;
46275: LD_ADDR_VAR 0 5
46279: PUSH
46280: LD_VAR 0 2
46284: PPUSH
46285: LD_INT 0
46287: PPUSH
46288: CALL_OW 517
46292: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46293: LD_ADDR_VAR 0 4
46297: PUSH
46298: DOUBLE
46299: LD_INT 1
46301: DEC
46302: ST_TO_ADDR
46303: LD_VAR 0 5
46307: PUSH
46308: LD_INT 1
46310: ARRAY
46311: PUSH
46312: FOR_TO
46313: IFFALSE 46392
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46315: LD_VAR 0 5
46319: PUSH
46320: LD_INT 1
46322: ARRAY
46323: PUSH
46324: LD_VAR 0 4
46328: ARRAY
46329: PPUSH
46330: LD_VAR 0 5
46334: PUSH
46335: LD_INT 2
46337: ARRAY
46338: PUSH
46339: LD_VAR 0 4
46343: ARRAY
46344: PPUSH
46345: CALL_OW 351
46349: IFFALSE 46390
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46351: LD_VAR 0 5
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PUSH
46360: LD_VAR 0 4
46364: ARRAY
46365: PPUSH
46366: LD_VAR 0 5
46370: PUSH
46371: LD_INT 2
46373: ARRAY
46374: PUSH
46375: LD_VAR 0 4
46379: ARRAY
46380: PPUSH
46381: LD_VAR 0 1
46385: PPUSH
46386: CALL_OW 244
// end ;
46390: GO 46312
46392: POP
46393: POP
// end ;
46394: LD_VAR 0 3
46398: RET
// export function UniqueArray ( array ) ; var i ; begin
46399: LD_INT 0
46401: PPUSH
46402: PPUSH
// result := [ ] ;
46403: LD_ADDR_VAR 0 2
46407: PUSH
46408: EMPTY
46409: ST_TO_ADDR
// if not array then
46410: LD_VAR 0 1
46414: NOT
46415: IFFALSE 46419
// exit ;
46417: GO 46480
// for i := 1 to array do
46419: LD_ADDR_VAR 0 3
46423: PUSH
46424: DOUBLE
46425: LD_INT 1
46427: DEC
46428: ST_TO_ADDR
46429: LD_VAR 0 1
46433: PUSH
46434: FOR_TO
46435: IFFALSE 46478
// if not array [ i ] in result then
46437: LD_VAR 0 1
46441: PUSH
46442: LD_VAR 0 3
46446: ARRAY
46447: PUSH
46448: LD_VAR 0 2
46452: IN
46453: NOT
46454: IFFALSE 46476
// result := Join ( result , i ) ;
46456: LD_ADDR_VAR 0 2
46460: PUSH
46461: LD_VAR 0 2
46465: PPUSH
46466: LD_VAR 0 3
46470: PPUSH
46471: CALL 41131 0 2
46475: ST_TO_ADDR
46476: GO 46434
46478: POP
46479: POP
// end ; end_of_file
46480: LD_VAR 0 2
46484: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46485: LD_INT 0
46487: PPUSH
46488: PPUSH
// disable ( mpActive ) ;
46489: LD_INT 100
46491: DISABLE_MARKED
// disable ( mpWin ) ;
46492: LD_INT 101
46494: DISABLE_MARKED
// disable ( mpLose ) ;
46495: LD_INT 102
46497: DISABLE_MARKED
// mpGameType := 0 ;
46498: LD_ADDR_EXP 1
46502: PUSH
46503: LD_INT 0
46505: ST_TO_ADDR
// mpGameSettings := [ ] ;
46506: LD_ADDR_EXP 4
46510: PUSH
46511: EMPTY
46512: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46513: LD_ADDR_EXP 2
46517: PUSH
46518: EMPTY
46519: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46520: LD_ADDR_EXP 3
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46527: LD_ADDR_EXP 27
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46542: LD_ADDR_EXP 10
46546: PUSH
46547: EMPTY
46548: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46549: LD_ADDR_EXP 11
46553: PUSH
46554: EMPTY
46555: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46556: LD_ADDR_EXP 39
46560: PUSH
46561: EMPTY
46562: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46563: LD_ADDR_EXP 40
46567: PUSH
46568: EMPTY
46569: ST_TO_ADDR
// mpDepots := [ ] ;
46570: LD_ADDR_EXP 12
46574: PUSH
46575: EMPTY
46576: ST_TO_ADDR
// mpBuildings := [ ] ;
46577: LD_ADDR_EXP 15
46581: PUSH
46582: EMPTY
46583: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46584: LD_ADDR_EXP 16
46588: PUSH
46589: EMPTY
46590: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46591: LD_ADDR_EXP 17
46595: PUSH
46596: EMPTY
46597: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46598: LD_ADDR_EXP 18
46602: PUSH
46603: EMPTY
46604: ST_TO_ADDR
// mpStartingResources := [ ] ;
46605: LD_ADDR_EXP 13
46609: PUSH
46610: EMPTY
46611: ST_TO_ADDR
// mpStartPos := [ ] ;
46612: LD_ADDR_EXP 19
46616: PUSH
46617: EMPTY
46618: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46619: LD_ADDR_EXP 20
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46628: LD_ADDR_EXP 21
46632: PUSH
46633: EMPTY
46634: ST_TO_ADDR
// mpApemans := [ ] ;
46635: LD_ADDR_EXP 28
46639: PUSH
46640: EMPTY
46641: ST_TO_ADDR
// mpApemansArea := [ ] ;
46642: LD_ADDR_EXP 29
46646: PUSH
46647: EMPTY
46648: ST_TO_ADDR
// mpRespawn := [ ] ;
46649: LD_ADDR_EXP 31
46653: PUSH
46654: EMPTY
46655: ST_TO_ADDR
// mpKingArea := 0 ;
46656: LD_ADDR_EXP 32
46660: PUSH
46661: LD_INT 0
46663: ST_TO_ADDR
// mpPoints := [ ] ;
46664: LD_ADDR_EXP 33
46668: PUSH
46669: EMPTY
46670: ST_TO_ADDR
// mpVehicles := 0 ;
46671: LD_ADDR_EXP 34
46675: PUSH
46676: LD_INT 0
46678: ST_TO_ADDR
// mpShipments := 0 ;
46679: LD_ADDR_EXP 25
46683: PUSH
46684: LD_INT 0
46686: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46687: LD_ADDR_EXP 38
46691: PUSH
46692: EMPTY
46693: PUSH
46694: EMPTY
46695: PUSH
46696: EMPTY
46697: PUSH
46698: EMPTY
46699: PUSH
46700: EMPTY
46701: PUSH
46702: EMPTY
46703: PUSH
46704: EMPTY
46705: PUSH
46706: EMPTY
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46718: LD_ADDR_EXP 30
46722: PUSH
46723: EMPTY
46724: PUSH
46725: EMPTY
46726: PUSH
46727: EMPTY
46728: PUSH
46729: EMPTY
46730: PUSH
46731: EMPTY
46732: PUSH
46733: EMPTY
46734: PUSH
46735: EMPTY
46736: PUSH
46737: EMPTY
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// mpEmissions := 0 ;
46749: LD_ADDR_EXP 35
46753: PUSH
46754: LD_INT 0
46756: ST_TO_ADDR
// mpTeleports := 0 ;
46757: LD_ADDR_EXP 41
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// mpArtifacts := 0 ;
46765: LD_ADDR_EXP 42
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46773: LD_ADDR_EXP 43
46777: PUSH
46778: LD_INT 0
46780: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46781: LD_ADDR_EXP 23
46785: PUSH
46786: LD_INT 3
46788: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46789: LD_ADDR_EXP 22
46793: PUSH
46794: LD_INT 15
46796: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46797: LD_ADDR_EXP 36
46801: PUSH
46802: LD_INT 0
46804: ST_TO_ADDR
// mpGameActive := false ;
46805: LD_ADDR_EXP 37
46809: PUSH
46810: LD_INT 0
46812: ST_TO_ADDR
// mpBlockRespThread := false ;
46813: LD_ADDR_EXP 44
46817: PUSH
46818: LD_INT 0
46820: ST_TO_ADDR
// for i := 1 to 32 do
46821: LD_ADDR_VAR 0 2
46825: PUSH
46826: DOUBLE
46827: LD_INT 1
46829: DEC
46830: ST_TO_ADDR
46831: LD_INT 32
46833: PUSH
46834: FOR_TO
46835: IFFALSE 46862
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46837: LD_ADDR_EXP 4
46841: PUSH
46842: LD_EXP 4
46846: PPUSH
46847: LD_VAR 0 2
46851: PPUSH
46852: LD_INT 0
46854: PPUSH
46855: CALL_OW 1
46859: ST_TO_ADDR
46860: GO 46834
46862: POP
46863: POP
// end ;
46864: LD_VAR 0 1
46868: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46869: LD_INT 0
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
46882: PPUSH
46883: PPUSH
46884: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46885: LD_ADDR_VAR 0 14
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: LD_INT 5
46901: PUSH
46902: LD_INT 6
46904: PUSH
46905: LD_INT 7
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// for i in gameTypes do
46916: LD_ADDR_VAR 0 2
46920: PUSH
46921: LD_VAR 0 14
46925: PUSH
46926: FOR_IN
46927: IFFALSE 46936
// disable ( i ) ;
46929: LD_VAR 0 2
46933: DISABLE_MARKED
46934: GO 46926
46936: POP
46937: POP
// if Multiplayer then
46938: LD_OWVAR 4
46942: IFFALSE 47126
// begin mpGameType := mp_game_type ;
46944: LD_ADDR_EXP 1
46948: PUSH
46949: LD_OWVAR 6
46953: ST_TO_ADDR
// your_side := mp_player_side ;
46954: LD_ADDR_OWVAR 2
46958: PUSH
46959: LD_OWVAR 7
46963: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46964: LD_ADDR_EXP 5
46968: PUSH
46969: LD_OWVAR 17
46973: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46974: LD_ADDR_EXP 6
46978: PUSH
46979: LD_OWVAR 15
46983: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46984: LD_ADDR_EXP 7
46988: PUSH
46989: LD_OWVAR 16
46993: ST_TO_ADDR
// mpTeams := mp_teams ;
46994: LD_ADDR_EXP 8
46998: PUSH
46999: LD_OWVAR 12
47003: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47004: LD_ADDR_VAR 0 2
47008: PUSH
47009: DOUBLE
47010: LD_INT 1
47012: DEC
47013: ST_TO_ADDR
47014: LD_EXP 2
47018: PPUSH
47019: CALL 5165 0 1
47023: PUSH
47024: FOR_TO
47025: IFFALSE 47101
// begin setting := mpGameSettingsKeys [ i ] ;
47027: LD_ADDR_VAR 0 12
47031: PUSH
47032: LD_EXP 2
47036: PUSH
47037: LD_VAR 0 2
47041: ARRAY
47042: ST_TO_ADDR
// if setting then
47043: LD_VAR 0 12
47047: IFFALSE 47099
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47049: LD_ADDR_EXP 4
47053: PUSH
47054: LD_EXP 4
47058: PPUSH
47059: LD_VAR 0 2
47063: PPUSH
47064: LD_EXP 3
47068: PUSH
47069: LD_VAR 0 2
47073: ARRAY
47074: PUSH
47075: LD_VAR 0 2
47079: PUSH
47080: LD_INT 1
47082: MINUS
47083: PPUSH
47084: CALL_OW 426
47088: PUSH
47089: LD_INT 1
47091: PLUS
47092: ARRAY
47093: PPUSH
47094: CALL_OW 1
47098: ST_TO_ADDR
// end ;
47099: GO 47024
47101: POP
47102: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47103: LD_ADDR_EXP 9
47107: PUSH
47108: LD_EXP 6
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: DIFF
47119: PUSH
47120: LD_INT 1
47122: GREATER
47123: ST_TO_ADDR
// end else
47124: GO 47126
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47126: LD_EXP 1
47130: PPUSH
47131: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
47135: LD_EXP 16
47139: PPUSH
47140: CALL 5165 0 1
47144: IFFALSE 47175
// begin for i in mpMarkedAreas do
47146: LD_ADDR_VAR 0 2
47150: PUSH
47151: LD_EXP 16
47155: PUSH
47156: FOR_IN
47157: IFFALSE 47173
// SetAreaMapShow ( i , 0 ) ;
47159: LD_VAR 0 2
47163: PPUSH
47164: LD_INT 0
47166: PPUSH
47167: CALL_OW 424
47171: GO 47156
47173: POP
47174: POP
// end ; for i := 1 to 8 do
47175: LD_ADDR_VAR 0 2
47179: PUSH
47180: DOUBLE
47181: LD_INT 1
47183: DEC
47184: ST_TO_ADDR
47185: LD_INT 8
47187: PUSH
47188: FOR_TO
47189: IFFALSE 48624
// begin if not mpSidePositions [ i ] then
47191: LD_EXP 5
47195: PUSH
47196: LD_VAR 0 2
47200: ARRAY
47201: NOT
47202: IFFALSE 47206
// continue ;
47204: GO 47188
// side := i ;
47206: LD_ADDR_VAR 0 7
47210: PUSH
47211: LD_VAR 0 2
47215: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47216: LD_ADDR_VAR 0 9
47220: PUSH
47221: LD_EXP 7
47225: PUSH
47226: LD_VAR 0 2
47230: ARRAY
47231: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47232: LD_ADDR_VAR 0 8
47236: PUSH
47237: LD_EXP 5
47241: PUSH
47242: LD_VAR 0 2
47246: ARRAY
47247: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47248: LD_EXP 10
47252: PPUSH
47253: CALL 5165 0 1
47257: IFFALSE 47334
// begin for j in mpOilDeposits [ pos ] do
47259: LD_ADDR_VAR 0 3
47263: PUSH
47264: LD_EXP 10
47268: PUSH
47269: LD_VAR 0 8
47273: ARRAY
47274: PUSH
47275: FOR_IN
47276: IFFALSE 47332
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47278: LD_VAR 0 3
47282: PUSH
47283: LD_INT 1
47285: ARRAY
47286: PPUSH
47287: LD_VAR 0 3
47291: PUSH
47292: LD_INT 2
47294: ARRAY
47295: PPUSH
47296: LD_INT 2
47298: PPUSH
47299: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47303: LD_VAR 0 3
47307: PUSH
47308: LD_INT 1
47310: ARRAY
47311: PPUSH
47312: LD_VAR 0 3
47316: PUSH
47317: LD_INT 2
47319: ARRAY
47320: PPUSH
47321: LD_VAR 0 7
47325: PPUSH
47326: CALL_OW 441
// end ;
47330: GO 47275
47332: POP
47333: POP
// end ; if Count ( mpSibDeposits ) then
47334: LD_EXP 11
47338: PPUSH
47339: CALL 5165 0 1
47343: IFFALSE 47420
// begin for j in mpSibDeposits [ pos ] do
47345: LD_ADDR_VAR 0 3
47349: PUSH
47350: LD_EXP 11
47354: PUSH
47355: LD_VAR 0 8
47359: ARRAY
47360: PUSH
47361: FOR_IN
47362: IFFALSE 47418
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47364: LD_VAR 0 3
47368: PUSH
47369: LD_INT 1
47371: ARRAY
47372: PPUSH
47373: LD_VAR 0 3
47377: PUSH
47378: LD_INT 2
47380: ARRAY
47381: PPUSH
47382: LD_INT 3
47384: PPUSH
47385: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47389: LD_VAR 0 3
47393: PUSH
47394: LD_INT 1
47396: ARRAY
47397: PPUSH
47398: LD_VAR 0 3
47402: PUSH
47403: LD_INT 2
47405: ARRAY
47406: PPUSH
47407: LD_VAR 0 7
47411: PPUSH
47412: CALL_OW 441
// end ;
47416: GO 47361
47418: POP
47419: POP
// end ; InitBc ;
47420: CALL_OW 21
// InitUc ;
47424: CALL_OW 18
// uc_side := side ;
47428: LD_ADDR_OWVAR 20
47432: PUSH
47433: LD_VAR 0 7
47437: ST_TO_ADDR
// uc_nation := nation ;
47438: LD_ADDR_OWVAR 21
47442: PUSH
47443: LD_VAR 0 9
47447: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47448: LD_EXP 20
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: GREATER
47457: IFFALSE 47616
// begin x := mpStartPos [ pos ] [ 1 ] ;
47459: LD_ADDR_VAR 0 5
47463: PUSH
47464: LD_EXP 19
47468: PUSH
47469: LD_VAR 0 8
47473: ARRAY
47474: PUSH
47475: LD_INT 1
47477: ARRAY
47478: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47479: LD_ADDR_VAR 0 6
47483: PUSH
47484: LD_EXP 19
47488: PUSH
47489: LD_VAR 0 8
47493: ARRAY
47494: PUSH
47495: LD_INT 2
47497: ARRAY
47498: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47499: LD_VAR 0 5
47503: PPUSH
47504: LD_VAR 0 6
47508: PPUSH
47509: LD_INT 12
47511: PPUSH
47512: LD_INT 2
47514: PPUSH
47515: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47519: LD_ADDR_EXP 21
47523: PUSH
47524: LD_EXP 21
47528: PPUSH
47529: LD_VAR 0 7
47533: PPUSH
47534: LD_VAR 0 7
47538: PPUSH
47539: LD_VAR 0 5
47543: PPUSH
47544: LD_VAR 0 6
47548: PPUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 100
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 70
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 40
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 10
47581: PUSH
47582: LD_INT 25
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 20
47591: PUSH
47592: LD_INT 100
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: PPUSH
47606: CALL_OW 418
47610: PPUSH
47611: CALL_OW 1
47615: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47616: LD_EXP 12
47620: PPUSH
47621: CALL 5165 0 1
47625: IFFALSE 47820
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47627: LD_EXP 1
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 6
47637: PUSH
47638: LD_INT 7
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: IN
47646: IFFALSE 47666
// begin bc_level := 10 ;
47648: LD_ADDR_OWVAR 43
47652: PUSH
47653: LD_INT 10
47655: ST_TO_ADDR
// bc_type := b_warehouse ;
47656: LD_ADDR_OWVAR 42
47660: PUSH
47661: LD_INT 1
47663: ST_TO_ADDR
// end else
47664: GO 47682
// begin bc_level := 0 ;
47666: LD_ADDR_OWVAR 43
47670: PUSH
47671: LD_INT 0
47673: ST_TO_ADDR
// bc_type := b_depot ;
47674: LD_ADDR_OWVAR 42
47678: PUSH
47679: LD_INT 0
47681: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47682: LD_ADDR_VAR 0 4
47686: PUSH
47687: LD_EXP 12
47691: PUSH
47692: LD_VAR 0 8
47696: ARRAY
47697: PUSH
47698: LD_INT 1
47700: ARRAY
47701: PPUSH
47702: LD_EXP 12
47706: PUSH
47707: LD_VAR 0 8
47711: ARRAY
47712: PUSH
47713: LD_INT 2
47715: ARRAY
47716: PPUSH
47717: LD_EXP 12
47721: PUSH
47722: LD_VAR 0 8
47726: ARRAY
47727: PUSH
47728: LD_INT 3
47730: ARRAY
47731: PPUSH
47732: CALL_OW 47
47736: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47737: LD_VAR 0 4
47741: PPUSH
47742: LD_STRING @
47744: PUSH
47745: LD_VAR 0 7
47749: STR
47750: PPUSH
47751: CALL_OW 500
// if Count ( mpStartingResources ) then
47755: LD_EXP 13
47759: PPUSH
47760: CALL 5165 0 1
47764: IFFALSE 47818
// begin for j := 1 to mpStartingResources do
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: DOUBLE
47772: LD_INT 1
47774: DEC
47775: ST_TO_ADDR
47776: LD_EXP 13
47780: PUSH
47781: FOR_TO
47782: IFFALSE 47816
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47784: LD_VAR 0 4
47788: PPUSH
47789: CALL_OW 274
47793: PPUSH
47794: LD_VAR 0 3
47798: PPUSH
47799: LD_EXP 13
47803: PUSH
47804: LD_VAR 0 3
47808: ARRAY
47809: PPUSH
47810: CALL_OW 277
47814: GO 47781
47816: POP
47817: POP
// end ; end else
47818: GO 48027
// if Count ( mpStartingResources ) then
47820: LD_EXP 13
47824: PPUSH
47825: CALL 5165 0 1
47829: IFFALSE 48027
// begin x := mpStartPos [ pos ] [ 1 ] ;
47831: LD_ADDR_VAR 0 5
47835: PUSH
47836: LD_EXP 19
47840: PUSH
47841: LD_VAR 0 8
47845: ARRAY
47846: PUSH
47847: LD_INT 1
47849: ARRAY
47850: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47851: LD_ADDR_VAR 0 6
47855: PUSH
47856: LD_EXP 19
47860: PUSH
47861: LD_VAR 0 8
47865: ARRAY
47866: PUSH
47867: LD_INT 2
47869: ARRAY
47870: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47871: LD_ADDR_VAR 0 3
47875: PUSH
47876: DOUBLE
47877: LD_INT 1
47879: DEC
47880: ST_TO_ADDR
47881: LD_EXP 13
47885: PUSH
47886: FOR_TO
47887: IFFALSE 48025
// begin resources := mpStartingResources [ j ] ;
47889: LD_ADDR_VAR 0 13
47893: PUSH
47894: LD_EXP 13
47898: PUSH
47899: LD_VAR 0 3
47903: ARRAY
47904: ST_TO_ADDR
// if resources = 0 then
47905: LD_VAR 0 13
47909: PUSH
47910: LD_INT 0
47912: EQUAL
47913: IFFALSE 47917
// continue ;
47915: GO 47886
// repeat if resources >= 50 then
47917: LD_VAR 0 13
47921: PUSH
47922: LD_INT 50
47924: GREATEREQUAL
47925: IFFALSE 47971
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47927: LD_VAR 0 3
47931: PPUSH
47932: LD_INT 5
47934: PPUSH
47935: LD_VAR 0 5
47939: PPUSH
47940: LD_VAR 0 6
47944: PPUSH
47945: LD_INT 6
47947: PPUSH
47948: LD_INT 0
47950: PPUSH
47951: CALL_OW 60
// resources := resources - 50 ;
47955: LD_ADDR_VAR 0 13
47959: PUSH
47960: LD_VAR 0 13
47964: PUSH
47965: LD_INT 50
47967: MINUS
47968: ST_TO_ADDR
// end else
47969: GO 48013
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47971: LD_VAR 0 3
47975: PPUSH
47976: LD_VAR 0 13
47980: PUSH
47981: LD_INT 10
47983: DIV
47984: PPUSH
47985: LD_VAR 0 5
47989: PPUSH
47990: LD_VAR 0 6
47994: PPUSH
47995: LD_INT 6
47997: PPUSH
47998: LD_INT 0
48000: PPUSH
48001: CALL_OW 60
// resources := 0 ;
48005: LD_ADDR_VAR 0 13
48009: PUSH
48010: LD_INT 0
48012: ST_TO_ADDR
// end ; until resources <= 0 ;
48013: LD_VAR 0 13
48017: PUSH
48018: LD_INT 0
48020: LESSEQUAL
48021: IFFALSE 47917
// end ;
48023: GO 47886
48025: POP
48026: POP
// end ; if Count ( mpBuildings ) then
48027: LD_EXP 15
48031: PPUSH
48032: CALL 5165 0 1
48036: IFFALSE 48114
// begin for j in mpBuildings [ pos ] do
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_EXP 15
48047: PUSH
48048: LD_VAR 0 8
48052: ARRAY
48053: PUSH
48054: FOR_IN
48055: IFFALSE 48112
// begin bc_level := 0 ;
48057: LD_ADDR_OWVAR 43
48061: PUSH
48062: LD_INT 0
48064: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48065: LD_ADDR_OWVAR 42
48069: PUSH
48070: LD_VAR 0 3
48074: PUSH
48075: LD_INT 1
48077: ARRAY
48078: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48079: LD_VAR 0 3
48083: PUSH
48084: LD_INT 2
48086: ARRAY
48087: PPUSH
48088: LD_VAR 0 3
48092: PUSH
48093: LD_INT 3
48095: ARRAY
48096: PPUSH
48097: LD_VAR 0 3
48101: PUSH
48102: LD_INT 4
48104: ARRAY
48105: PPUSH
48106: CALL_OW 47
// end ;
48110: GO 48054
48112: POP
48113: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48114: LD_EXP 24
48118: IFFALSE 48138
48120: PUSH
48121: LD_INT 20
48123: PPUSH
48124: LD_VAR 0 7
48128: PPUSH
48129: CALL_OW 321
48133: PUSH
48134: LD_INT 1
48136: EQUAL
48137: AND
48138: IFFALSE 48155
// SetTech ( tech_SibDet , side , state_researched ) ;
48140: LD_INT 20
48142: PPUSH
48143: LD_VAR 0 7
48147: PPUSH
48148: LD_INT 2
48150: PPUSH
48151: CALL_OW 322
// if not mpArtifacts then
48155: LD_EXP 42
48159: NOT
48160: IFFALSE 48177
// SetTech ( tech_artifact , side , state_disabled ) ;
48162: LD_INT 24
48164: PPUSH
48165: LD_VAR 0 7
48169: PPUSH
48170: LD_INT 0
48172: PPUSH
48173: CALL_OW 322
// if mpSibBomb = 1 then
48177: LD_EXP 26
48181: PUSH
48182: LD_INT 1
48184: EQUAL
48185: IFFALSE 48204
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48187: LD_INT 25
48189: PPUSH
48190: LD_VAR 0 7
48194: PPUSH
48195: LD_INT 1
48197: PPUSH
48198: CALL_OW 322
// end else
48202: GO 48219
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48204: LD_INT 25
48206: PPUSH
48207: LD_VAR 0 7
48211: PPUSH
48212: LD_INT 0
48214: PPUSH
48215: CALL_OW 322
// end ; if mpVehicles then
48219: LD_EXP 34
48223: IFFALSE 48322
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: LD_VAR 0 7
48234: PPUSH
48235: LD_VAR 0 9
48239: PPUSH
48240: LD_EXP 34
48244: PPUSH
48245: CALL 49545 0 3
48249: PUSH
48250: FOR_IN
48251: IFFALSE 48320
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48253: LD_VAR 0 3
48257: PPUSH
48258: LD_INT 0
48260: PPUSH
48261: LD_INT 5
48263: PPUSH
48264: CALL_OW 12
48268: PPUSH
48269: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48273: LD_VAR 0 3
48277: PPUSH
48278: LD_EXP 19
48282: PUSH
48283: LD_VAR 0 8
48287: ARRAY
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: PPUSH
48293: LD_EXP 19
48297: PUSH
48298: LD_VAR 0 8
48302: ARRAY
48303: PUSH
48304: LD_INT 2
48306: ARRAY
48307: PPUSH
48308: LD_INT 12
48310: PPUSH
48311: LD_INT 0
48313: PPUSH
48314: CALL_OW 50
// end ;
48318: GO 48250
48320: POP
48321: POP
// end ; uc_nation := nation ;
48322: LD_ADDR_OWVAR 21
48326: PUSH
48327: LD_VAR 0 9
48331: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48332: LD_EXP 1
48336: PUSH
48337: LD_INT 6
48339: PUSH
48340: LD_INT 7
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: IN
48347: IFFALSE 48372
48349: PUSH
48350: LD_EXP 5
48354: PUSH
48355: LD_VAR 0 2
48359: ARRAY
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: IN
48371: AND
48372: IFFALSE 48420
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48374: LD_ADDR_VAR 0 11
48378: PUSH
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_VAR 0 9
48388: PPUSH
48389: LD_EXP 22
48393: PUSH
48394: LD_EXP 22
48398: PUSH
48399: LD_INT 2
48401: DIV
48402: PLUS
48403: PPUSH
48404: LD_EXP 23
48408: PUSH
48409: LD_INT 1
48411: PLUS
48412: PPUSH
48413: CALL 49036 0 4
48417: ST_TO_ADDR
48418: GO 48450
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48420: LD_ADDR_VAR 0 11
48424: PUSH
48425: LD_VAR 0 7
48429: PPUSH
48430: LD_VAR 0 9
48434: PPUSH
48435: LD_EXP 22
48439: PPUSH
48440: LD_EXP 23
48444: PPUSH
48445: CALL 49036 0 4
48449: ST_TO_ADDR
// for j in team do
48450: LD_ADDR_VAR 0 3
48454: PUSH
48455: LD_VAR 0 11
48459: PUSH
48460: FOR_IN
48461: IFFALSE 48510
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48463: LD_VAR 0 3
48467: PPUSH
48468: LD_EXP 19
48472: PUSH
48473: LD_VAR 0 8
48477: ARRAY
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PPUSH
48483: LD_EXP 19
48487: PUSH
48488: LD_VAR 0 8
48492: ARRAY
48493: PUSH
48494: LD_INT 2
48496: ARRAY
48497: PPUSH
48498: LD_INT 12
48500: PPUSH
48501: LD_INT 0
48503: PPUSH
48504: CALL_OW 50
48508: GO 48460
48510: POP
48511: POP
// if mpApemans then
48512: LD_EXP 28
48516: IFFALSE 48622
// begin for j := 1 to mpApemans do
48518: LD_ADDR_VAR 0 3
48522: PUSH
48523: DOUBLE
48524: LD_INT 1
48526: DEC
48527: ST_TO_ADDR
48528: LD_EXP 28
48532: PUSH
48533: FOR_TO
48534: IFFALSE 48620
// begin PrepareApeman ( - 5 ) ;
48536: LD_INT 5
48538: NEG
48539: PPUSH
48540: CALL 37258 0 1
// ape := CreateHuman ;
48544: LD_ADDR_VAR 0 10
48548: PUSH
48549: CALL_OW 44
48553: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48554: LD_ADDR_EXP 30
48558: PUSH
48559: LD_EXP 30
48563: PPUSH
48564: LD_VAR 0 8
48568: PPUSH
48569: LD_EXP 30
48573: PUSH
48574: LD_VAR 0 8
48578: ARRAY
48579: PPUSH
48580: LD_VAR 0 10
48584: PPUSH
48585: CALL 41131 0 2
48589: PPUSH
48590: CALL_OW 1
48594: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48595: LD_VAR 0 10
48599: PPUSH
48600: LD_EXP 29
48604: PUSH
48605: LD_VAR 0 8
48609: ARRAY
48610: PPUSH
48611: LD_INT 0
48613: PPUSH
48614: CALL_OW 49
// end ;
48618: GO 48533
48620: POP
48621: POP
// end ; end ;
48622: GO 47188
48624: POP
48625: POP
// if not mpTeamGame then
48626: LD_EXP 9
48630: NOT
48631: IFFALSE 48729
// begin for i := 1 to 8 do
48633: LD_ADDR_VAR 0 2
48637: PUSH
48638: DOUBLE
48639: LD_INT 1
48641: DEC
48642: ST_TO_ADDR
48643: LD_INT 8
48645: PUSH
48646: FOR_TO
48647: IFFALSE 48725
// for j := 1 to 8 do
48649: LD_ADDR_VAR 0 3
48653: PUSH
48654: DOUBLE
48655: LD_INT 1
48657: DEC
48658: ST_TO_ADDR
48659: LD_INT 8
48661: PUSH
48662: FOR_TO
48663: IFFALSE 48721
// if i <> j then
48665: LD_VAR 0 2
48669: PUSH
48670: LD_VAR 0 3
48674: NONEQUAL
48675: IFFALSE 48699
// SetAttitude ( i , j , att_neutral , true ) else
48677: LD_VAR 0 2
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: LD_INT 0
48689: PPUSH
48690: LD_INT 1
48692: PPUSH
48693: CALL_OW 80
48697: GO 48719
// SetAttitude ( i , j , att_friend , true ) ;
48699: LD_VAR 0 2
48703: PPUSH
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_INT 1
48711: PPUSH
48712: LD_INT 1
48714: PPUSH
48715: CALL_OW 80
48719: GO 48662
48721: POP
48722: POP
48723: GO 48646
48725: POP
48726: POP
// end else
48727: GO 48904
// begin if mpSharedVision then
48729: LD_EXP 14
48733: IFFALSE 48798
// begin for i in mpTeams do
48735: LD_ADDR_VAR 0 2
48739: PUSH
48740: LD_EXP 8
48744: PUSH
48745: FOR_IN
48746: IFFALSE 48796
// for j := 2 to i do
48748: LD_ADDR_VAR 0 3
48752: PUSH
48753: DOUBLE
48754: LD_INT 2
48756: DEC
48757: ST_TO_ADDR
48758: LD_VAR 0 2
48762: PUSH
48763: FOR_TO
48764: IFFALSE 48792
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48766: LD_VAR 0 2
48770: PUSH
48771: LD_VAR 0 3
48775: ARRAY
48776: PPUSH
48777: LD_VAR 0 2
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: CALL_OW 343
48790: GO 48763
48792: POP
48793: POP
48794: GO 48745
48796: POP
48797: POP
// end ; for i := 1 to 8 do
48798: LD_ADDR_VAR 0 2
48802: PUSH
48803: DOUBLE
48804: LD_INT 1
48806: DEC
48807: ST_TO_ADDR
48808: LD_INT 8
48810: PUSH
48811: FOR_TO
48812: IFFALSE 48902
// for j := 1 to 8 do
48814: LD_ADDR_VAR 0 3
48818: PUSH
48819: DOUBLE
48820: LD_INT 1
48822: DEC
48823: ST_TO_ADDR
48824: LD_INT 8
48826: PUSH
48827: FOR_TO
48828: IFFALSE 48898
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48830: LD_EXP 6
48834: PUSH
48835: LD_VAR 0 2
48839: ARRAY
48840: PUSH
48841: LD_EXP 6
48845: PUSH
48846: LD_VAR 0 3
48850: ARRAY
48851: EQUAL
48852: IFFALSE 48876
// SetAttitude ( i , j , att_friend , true ) else
48854: LD_VAR 0 2
48858: PPUSH
48859: LD_VAR 0 3
48863: PPUSH
48864: LD_INT 1
48866: PPUSH
48867: LD_INT 1
48869: PPUSH
48870: CALL_OW 80
48874: GO 48896
// SetAttitude ( i , j , att_enemy , true ) ;
48876: LD_VAR 0 2
48880: PPUSH
48881: LD_VAR 0 3
48885: PPUSH
48886: LD_INT 2
48888: PPUSH
48889: LD_INT 1
48891: PPUSH
48892: CALL_OW 80
48896: GO 48827
48898: POP
48899: POP
48900: GO 48811
48902: POP
48903: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48904: LD_ADDR_OWVAR 71
48908: PUSH
48909: LD_EXP 7
48913: PUSH
48914: LD_OWVAR 2
48918: ARRAY
48919: ST_TO_ADDR
// if IAmSpec then
48920: CALL_OW 531
48924: IFFALSE 48965
// begin FogOff ( true ) ;
48926: LD_INT 1
48928: PPUSH
48929: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48933: LD_EXP 27
48937: PUSH
48938: LD_INT 1
48940: ARRAY
48941: PUSH
48942: LD_INT 2
48944: DIV
48945: PPUSH
48946: LD_EXP 27
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PUSH
48955: LD_INT 2
48957: DIV
48958: PPUSH
48959: CALL_OW 86
// end else
48963: GO 49011
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48965: LD_EXP 19
48969: PUSH
48970: LD_EXP 5
48974: PUSH
48975: LD_OWVAR 2
48979: ARRAY
48980: ARRAY
48981: PUSH
48982: LD_INT 1
48984: ARRAY
48985: PPUSH
48986: LD_EXP 19
48990: PUSH
48991: LD_EXP 5
48995: PUSH
48996: LD_OWVAR 2
49000: ARRAY
49001: ARRAY
49002: PUSH
49003: LD_INT 2
49005: ARRAY
49006: PPUSH
49007: CALL_OW 86
// end ; BeginBuildUp ;
49011: CALL 50078 0 0
// enable ( mpActive ) ;
49015: LD_INT 100
49017: ENABLE_MARKED
// enable ( mpGameType ) ;
49018: LD_EXP 1
49022: ENABLE_MARKED
// mpGameActive := true ;
49023: LD_ADDR_EXP 37
49027: PUSH
49028: LD_INT 1
49030: ST_TO_ADDR
// end ;
49031: LD_VAR 0 1
49035: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49036: LD_INT 0
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
// result := [ ] ;
49042: LD_ADDR_VAR 0 5
49046: PUSH
49047: EMPTY
49048: ST_TO_ADDR
// class := class_soldier ;
49049: LD_ADDR_VAR 0 8
49053: PUSH
49054: LD_INT 1
49056: ST_TO_ADDR
// uc_side := side ;
49057: LD_ADDR_OWVAR 20
49061: PUSH
49062: LD_VAR 0 1
49066: ST_TO_ADDR
// uc_nation := nation ;
49067: LD_ADDR_OWVAR 21
49071: PUSH
49072: LD_VAR 0 2
49076: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49077: LD_ADDR_OWVAR 26
49081: PUSH
49082: LD_OWVAR 19
49086: PUSH
49087: LD_VAR 0 1
49091: ARRAY
49092: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49093: LD_INT 1
49095: PPUSH
49096: LD_INT 2
49098: PPUSH
49099: CALL_OW 12
49103: PPUSH
49104: LD_VAR 0 8
49108: PPUSH
49109: LD_VAR 0 4
49113: PUSH
49114: LD_INT 2
49116: PLUS
49117: PPUSH
49118: CALL_OW 380
// hc_importance := 105 ;
49122: LD_ADDR_OWVAR 32
49126: PUSH
49127: LD_INT 105
49129: ST_TO_ADDR
// if Multiplayer then
49130: LD_OWVAR 4
49134: IFFALSE 49174
// begin hc_gallery := MULTIAVATARS ;
49136: LD_ADDR_OWVAR 33
49140: PUSH
49141: LD_STRING MULTIAVATARS
49143: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49144: LD_ADDR_OWVAR 34
49148: PUSH
49149: LD_VAR 0 1
49153: PPUSH
49154: CALL_OW 525
49158: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49159: LD_ADDR_OWVAR 27
49163: PUSH
49164: LD_VAR 0 1
49168: PPUSH
49169: CALL_OW 526
49173: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49174: LD_ADDR_VAR 0 5
49178: PUSH
49179: LD_VAR 0 5
49183: PPUSH
49184: CALL_OW 44
49188: PPUSH
49189: CALL 41131 0 2
49193: ST_TO_ADDR
// if mpTeamPreset then
49194: LD_LOC 1
49198: IFFALSE 49294
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49200: LD_LOC 1
49204: PUSH
49205: LD_INT 1
49207: ARRAY
49208: PPUSH
49209: LD_VAR 0 5
49213: PUSH
49214: LD_VAR 0 5
49218: ARRAY
49219: PPUSH
49220: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49224: LD_VAR 0 5
49228: PUSH
49229: LD_VAR 0 5
49233: ARRAY
49234: PPUSH
49235: LD_INT 1
49237: PPUSH
49238: LD_LOC 1
49242: PUSH
49243: LD_INT 1
49245: ARRAY
49246: PPUSH
49247: LD_INT 1
49249: PPUSH
49250: CALL_OW 260
49254: PPUSH
49255: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49259: LD_VAR 0 5
49263: PUSH
49264: LD_VAR 0 5
49268: ARRAY
49269: PPUSH
49270: LD_INT 2
49272: PPUSH
49273: LD_LOC 1
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: LD_INT 2
49284: PPUSH
49285: CALL_OW 260
49289: PPUSH
49290: CALL_OW 239
// end ; InitHc_All ( ) ;
49294: CALL_OW 584
// class := 2 ;
49298: LD_ADDR_VAR 0 8
49302: PUSH
49303: LD_INT 2
49305: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49306: LD_ADDR_VAR 0 6
49310: PUSH
49311: DOUBLE
49312: LD_INT 1
49314: DEC
49315: ST_TO_ADDR
49316: LD_VAR 0 3
49320: PUSH
49321: LD_INT 1
49323: MINUS
49324: PUSH
49325: FOR_TO
49326: IFFALSE 49521
// begin PrepareHuman ( false , class , skill ) ;
49328: LD_INT 0
49330: PPUSH
49331: LD_VAR 0 8
49335: PPUSH
49336: LD_VAR 0 4
49340: PPUSH
49341: CALL_OW 380
// un := CreateHuman ;
49345: LD_ADDR_VAR 0 7
49349: PUSH
49350: CALL_OW 44
49354: ST_TO_ADDR
// result := Join ( result , un ) ;
49355: LD_ADDR_VAR 0 5
49359: PUSH
49360: LD_VAR 0 5
49364: PPUSH
49365: LD_VAR 0 7
49369: PPUSH
49370: CALL 41131 0 2
49374: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49375: LD_LOC 1
49379: PPUSH
49380: CALL 5165 0 1
49384: PUSH
49385: LD_VAR 0 3
49389: GREATEREQUAL
49390: IFFALSE 49486
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49392: LD_LOC 1
49396: PUSH
49397: LD_VAR 0 6
49401: PUSH
49402: LD_INT 1
49404: PLUS
49405: ARRAY
49406: PPUSH
49407: LD_VAR 0 7
49411: PPUSH
49412: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49416: LD_VAR 0 7
49420: PPUSH
49421: LD_INT 1
49423: PPUSH
49424: LD_LOC 1
49428: PUSH
49429: LD_VAR 0 6
49433: PUSH
49434: LD_INT 1
49436: PLUS
49437: ARRAY
49438: PPUSH
49439: LD_INT 1
49441: PPUSH
49442: CALL_OW 260
49446: PPUSH
49447: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49451: LD_VAR 0 7
49455: PPUSH
49456: LD_INT 2
49458: PPUSH
49459: LD_LOC 1
49463: PUSH
49464: LD_VAR 0 6
49468: PUSH
49469: LD_INT 1
49471: PLUS
49472: ARRAY
49473: PPUSH
49474: LD_INT 2
49476: PPUSH
49477: CALL_OW 260
49481: PPUSH
49482: CALL_OW 239
// end ; class := Inc ( class ) ;
49486: LD_ADDR_VAR 0 8
49490: PUSH
49491: LD_VAR 0 8
49495: PPUSH
49496: CALL 42504 0 1
49500: ST_TO_ADDR
// if class = 5 then
49501: LD_VAR 0 8
49505: PUSH
49506: LD_INT 5
49508: EQUAL
49509: IFFALSE 49519
// class := 1 ;
49511: LD_ADDR_VAR 0 8
49515: PUSH
49516: LD_INT 1
49518: ST_TO_ADDR
// end ;
49519: GO 49325
49521: POP
49522: POP
// if not mpTeamPreset then
49523: LD_LOC 1
49527: NOT
49528: IFFALSE 49540
// mpTeamPreset := result ;
49530: LD_ADDR_LOC 1
49534: PUSH
49535: LD_VAR 0 5
49539: ST_TO_ADDR
// end ;
49540: LD_VAR 0 5
49544: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49545: LD_INT 0
49547: PPUSH
49548: PPUSH
// result := [ ] ;
49549: LD_ADDR_VAR 0 4
49553: PUSH
49554: EMPTY
49555: ST_TO_ADDR
// if not vehicles then
49556: LD_VAR 0 3
49560: NOT
49561: IFFALSE 49565
// exit ;
49563: GO 49779
// for i := 1 to vehicles [ nation ] do
49565: LD_ADDR_VAR 0 5
49569: PUSH
49570: DOUBLE
49571: LD_INT 1
49573: DEC
49574: ST_TO_ADDR
49575: LD_VAR 0 3
49579: PUSH
49580: LD_VAR 0 2
49584: ARRAY
49585: PUSH
49586: FOR_TO
49587: IFFALSE 49777
// begin uc_side := side ;
49589: LD_ADDR_OWVAR 20
49593: PUSH
49594: LD_VAR 0 1
49598: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49599: LD_VAR 0 3
49603: PUSH
49604: LD_VAR 0 2
49608: ARRAY
49609: PUSH
49610: LD_VAR 0 5
49614: ARRAY
49615: PPUSH
49616: CALL 5165 0 1
49620: PUSH
49621: LD_INT 4
49623: GREATER
49624: IFFALSE 49654
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49626: LD_ADDR_OWVAR 21
49630: PUSH
49631: LD_VAR 0 3
49635: PUSH
49636: LD_VAR 0 2
49640: ARRAY
49641: PUSH
49642: LD_VAR 0 5
49646: ARRAY
49647: PUSH
49648: LD_INT 5
49650: ARRAY
49651: ST_TO_ADDR
49652: GO 49664
// uc_nation := nation ;
49654: LD_ADDR_OWVAR 21
49658: PUSH
49659: LD_VAR 0 2
49663: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49664: LD_VAR 0 3
49668: PUSH
49669: LD_VAR 0 2
49673: ARRAY
49674: PUSH
49675: LD_VAR 0 5
49679: ARRAY
49680: PUSH
49681: LD_INT 1
49683: ARRAY
49684: PPUSH
49685: LD_VAR 0 3
49689: PUSH
49690: LD_VAR 0 2
49694: ARRAY
49695: PUSH
49696: LD_VAR 0 5
49700: ARRAY
49701: PUSH
49702: LD_INT 2
49704: ARRAY
49705: PPUSH
49706: LD_VAR 0 3
49710: PUSH
49711: LD_VAR 0 2
49715: ARRAY
49716: PUSH
49717: LD_VAR 0 5
49721: ARRAY
49722: PUSH
49723: LD_INT 3
49725: ARRAY
49726: PPUSH
49727: LD_VAR 0 3
49731: PUSH
49732: LD_VAR 0 2
49736: ARRAY
49737: PUSH
49738: LD_VAR 0 5
49742: ARRAY
49743: PUSH
49744: LD_INT 4
49746: ARRAY
49747: PPUSH
49748: LD_INT 80
49750: PPUSH
49751: CALL 7961 0 5
// result := Join ( result , CreateVehicle ) ;
49755: LD_ADDR_VAR 0 4
49759: PUSH
49760: LD_VAR 0 4
49764: PPUSH
49765: CALL_OW 45
49769: PPUSH
49770: CALL 41131 0 2
49774: ST_TO_ADDR
// end ;
49775: GO 49586
49777: POP
49778: POP
// end ;
49779: LD_VAR 0 4
49783: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49784: LD_INT 0
49786: PPUSH
49787: PPUSH
// for i in mpBattleFlags do
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: LD_EXP 21
49797: PUSH
49798: FOR_IN
49799: IFFALSE 49876
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49801: LD_VAR 0 3
49805: PPUSH
49806: LD_INT 1
49808: PUSH
49809: LD_VAR 0 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_VAR 0 1
49825: PUSH
49826: LD_REAL  7.00000000000000E-0001
49829: MUL
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_VAR 0 1
49842: PUSH
49843: LD_REAL  4.00000000000000E-0001
49846: MUL
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 20
49854: PUSH
49855: LD_VAR 0 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: PPUSH
49870: CALL_OW 423
49874: GO 49798
49876: POP
49877: POP
// end ;
49878: LD_VAR 0 2
49882: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49883: LD_INT 100
49885: IFFALSE 49980
49887: GO 49889
49889: DISABLE
49890: LD_INT 0
49892: PPUSH
49893: PPUSH
// begin if mpBattleFlag <= 0 then
49894: LD_EXP 20
49898: PUSH
49899: LD_INT 0
49901: LESSEQUAL
49902: IFFALSE 49906
// exit ;
49904: GO 49980
// strength := 100 ;
49906: LD_ADDR_VAR 0 2
49910: PUSH
49911: LD_INT 100
49913: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49914: LD_EXP 20
49918: PPUSH
49919: CALL_OW 67
// strength := Dec ( strength ) ;
49923: LD_ADDR_VAR 0 2
49927: PUSH
49928: LD_VAR 0 2
49932: PPUSH
49933: CALL 42526 0 1
49937: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49938: LD_VAR 0 2
49942: PPUSH
49943: CALL 49784 0 1
// until not strength ;
49947: LD_VAR 0 2
49951: NOT
49952: IFFALSE 49914
// for i in mpBattleFlags do
49954: LD_ADDR_VAR 0 1
49958: PUSH
49959: LD_EXP 21
49963: PUSH
49964: FOR_IN
49965: IFFALSE 49978
// KillBattleFlag ( i ) ;
49967: LD_VAR 0 1
49971: PPUSH
49972: CALL_OW 419
49976: GO 49964
49978: POP
49979: POP
// end ;
49980: PPOPN 2
49982: END
// every 0 0$1 marked mpActive do var side , tmp ;
49983: GO 49985
49985: DISABLE
49986: LD_INT 0
49988: PPUSH
49989: PPUSH
// begin if mpSibBomb <= 1 then
49990: LD_EXP 26
49994: PUSH
49995: LD_INT 1
49997: LESSEQUAL
49998: IFFALSE 50002
// exit ;
50000: GO 50075
// tmp := mpSibBomb ;
50002: LD_ADDR_VAR 0 2
50006: PUSH
50007: LD_EXP 26
50011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50012: LD_INT 35
50014: PPUSH
50015: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: LD_VAR 0 2
50028: PUSH
50029: LD_INT 35
50031: MINUS
50032: ST_TO_ADDR
// until not tmp ;
50033: LD_VAR 0 2
50037: NOT
50038: IFFALSE 50012
// for side := 1 to 8 do
50040: LD_ADDR_VAR 0 1
50044: PUSH
50045: DOUBLE
50046: LD_INT 1
50048: DEC
50049: ST_TO_ADDR
50050: LD_INT 8
50052: PUSH
50053: FOR_TO
50054: IFFALSE 50073
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50056: LD_INT 25
50058: PPUSH
50059: LD_VAR 0 1
50063: PPUSH
50064: LD_INT 1
50066: PPUSH
50067: CALL_OW 322
50071: GO 50053
50073: POP
50074: POP
// end ;
50075: PPOPN 2
50077: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50078: LD_INT 0
50080: PPUSH
50081: PPUSH
50082: PPUSH
// mpBuildUpTimeDelay := 0 ;
50083: LD_ADDR_EXP 45
50087: PUSH
50088: LD_INT 0
50090: ST_TO_ADDR
// if not mpBuildUpTime then
50091: LD_EXP 18
50095: NOT
50096: IFFALSE 50100
// exit ;
50098: GO 50289
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50100: LD_ADDR_EXP 45
50104: PUSH
50105: LD_INT 8400
50107: PUSH
50108: LD_INT 2100
50110: PUSH
50111: LD_EXP 18
50115: MUL
50116: PLUS
50117: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50118: LD_ADDR_EXP 46
50122: PUSH
50123: LD_INT 1
50125: ST_TO_ADDR
// for i := 1 to 8 do
50126: LD_ADDR_VAR 0 2
50130: PUSH
50131: DOUBLE
50132: LD_INT 1
50134: DEC
50135: ST_TO_ADDR
50136: LD_INT 8
50138: PUSH
50139: FOR_TO
50140: IFFALSE 50287
// if mpSidePositions [ i ] then
50142: LD_EXP 5
50146: PUSH
50147: LD_VAR 0 2
50151: ARRAY
50152: IFFALSE 50285
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50154: LD_EXP 17
50158: PUSH
50159: LD_EXP 5
50163: PUSH
50164: LD_VAR 0 2
50168: ARRAY
50169: ARRAY
50170: PPUSH
50171: LD_INT 5
50173: PPUSH
50174: CALL_OW 424
// for j := 1 to 8 do
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: DOUBLE
50184: LD_INT 1
50186: DEC
50187: ST_TO_ADDR
50188: LD_INT 8
50190: PUSH
50191: FOR_TO
50192: IFFALSE 50283
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50194: LD_EXP 5
50198: PUSH
50199: LD_VAR 0 3
50203: ARRAY
50204: IFFALSE 50253
50206: PUSH
50207: LD_EXP 6
50211: PUSH
50212: LD_VAR 0 2
50216: ARRAY
50217: PUSH
50218: LD_EXP 6
50222: PUSH
50223: LD_VAR 0 3
50227: ARRAY
50228: NONEQUAL
50229: IFTRUE 50252
50231: PUSH
50232: LD_EXP 9
50236: NOT
50237: IFFALSE 50251
50239: PUSH
50240: LD_VAR 0 2
50244: PUSH
50245: LD_VAR 0 3
50249: NONEQUAL
50250: AND
50251: OR
50252: AND
50253: IFFALSE 50281
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50255: LD_VAR 0 3
50259: PPUSH
50260: LD_EXP 17
50264: PUSH
50265: LD_EXP 5
50269: PUSH
50270: LD_VAR 0 2
50274: ARRAY
50275: ARRAY
50276: PPUSH
50277: CALL_OW 333
50281: GO 50191
50283: POP
50284: POP
// end ;
50285: GO 50139
50287: POP
50288: POP
// end ;
50289: LD_VAR 0 1
50293: RET
// function EndBuildUp ; var i , j ; begin
50294: LD_INT 0
50296: PPUSH
50297: PPUSH
50298: PPUSH
// mpBuildUpTimeActive := false ;
50299: LD_ADDR_EXP 46
50303: PUSH
50304: LD_INT 0
50306: ST_TO_ADDR
// for i := 1 to 8 do
50307: LD_ADDR_VAR 0 2
50311: PUSH
50312: DOUBLE
50313: LD_INT 1
50315: DEC
50316: ST_TO_ADDR
50317: LD_INT 8
50319: PUSH
50320: FOR_TO
50321: IFFALSE 50468
// if mpSidePositions [ i ] then
50323: LD_EXP 5
50327: PUSH
50328: LD_VAR 0 2
50332: ARRAY
50333: IFFALSE 50466
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50335: LD_EXP 17
50339: PUSH
50340: LD_EXP 5
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: ARRAY
50351: PPUSH
50352: LD_INT 0
50354: PPUSH
50355: CALL_OW 424
// for j := 1 to 8 do
50359: LD_ADDR_VAR 0 3
50363: PUSH
50364: DOUBLE
50365: LD_INT 1
50367: DEC
50368: ST_TO_ADDR
50369: LD_INT 8
50371: PUSH
50372: FOR_TO
50373: IFFALSE 50464
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50375: LD_EXP 5
50379: PUSH
50380: LD_VAR 0 3
50384: ARRAY
50385: IFFALSE 50434
50387: PUSH
50388: LD_EXP 6
50392: PUSH
50393: LD_VAR 0 2
50397: ARRAY
50398: PUSH
50399: LD_EXP 6
50403: PUSH
50404: LD_VAR 0 3
50408: ARRAY
50409: NONEQUAL
50410: IFTRUE 50433
50412: PUSH
50413: LD_EXP 9
50417: NOT
50418: IFFALSE 50432
50420: PUSH
50421: LD_VAR 0 2
50425: PUSH
50426: LD_VAR 0 3
50430: NONEQUAL
50431: AND
50432: OR
50433: AND
50434: IFFALSE 50462
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50436: LD_VAR 0 3
50440: PPUSH
50441: LD_EXP 17
50445: PUSH
50446: LD_EXP 5
50450: PUSH
50451: LD_VAR 0 2
50455: ARRAY
50456: ARRAY
50457: PPUSH
50458: CALL_OW 334
50462: GO 50372
50464: POP
50465: POP
// end ;
50466: GO 50320
50468: POP
50469: POP
// end ;
50470: LD_VAR 0 1
50474: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50475: LD_EXP 46
50479: IFFALSE 50658
50481: GO 50483
50483: DISABLE
50484: LD_INT 0
50486: PPUSH
50487: PPUSH
// begin for i := 1 to 8 do
50488: LD_ADDR_VAR 0 1
50492: PUSH
50493: DOUBLE
50494: LD_INT 1
50496: DEC
50497: ST_TO_ADDR
50498: LD_INT 8
50500: PUSH
50501: FOR_TO
50502: IFFALSE 50655
// if mpSidePositions [ i ] then
50504: LD_EXP 5
50508: PUSH
50509: LD_VAR 0 1
50513: ARRAY
50514: IFFALSE 50653
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50516: LD_ADDR_VAR 0 2
50520: PUSH
50521: LD_EXP 17
50525: PUSH
50526: LD_EXP 5
50530: PUSH
50531: LD_VAR 0 1
50535: ARRAY
50536: ARRAY
50537: PPUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 21
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 21
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 22
50568: PUSH
50569: LD_OWVAR 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PPUSH
50582: CALL_OW 70
50586: PUSH
50587: FOR_IN
50588: IFFALSE 50651
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50590: LD_EXP 6
50594: PUSH
50595: LD_VAR 0 1
50599: ARRAY
50600: PUSH
50601: LD_EXP 6
50605: PUSH
50606: LD_OWVAR 2
50610: ARRAY
50611: NONEQUAL
50612: IFTRUE 50635
50614: PUSH
50615: LD_EXP 9
50619: NOT
50620: IFFALSE 50634
50622: PUSH
50623: LD_VAR 0 1
50627: PUSH
50628: LD_OWVAR 2
50632: NONEQUAL
50633: AND
50634: OR
50635: IFFALSE 50649
// ComMoveToArea ( un , BuildUpEscape ) ;
50637: LD_VAR 0 2
50641: PPUSH
50642: LD_INT 17
50644: PPUSH
50645: CALL_OW 113
50649: GO 50587
50651: POP
50652: POP
50653: GO 50501
50655: POP
50656: POP
// enable ;
50657: ENABLE
// end ;
50658: PPOPN 2
50660: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50661: LD_EXP 18
50665: IFFALSE 50715
50667: GO 50669
50669: DISABLE
50670: LD_INT 0
50672: PPUSH
// begin tmp := mpBuildUpTime ;
50673: LD_ADDR_VAR 0 1
50677: PUSH
50678: LD_EXP 18
50682: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50683: LD_INT 35
50685: PPUSH
50686: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50690: LD_ADDR_VAR 0 1
50694: PUSH
50695: LD_VAR 0 1
50699: PUSH
50700: LD_INT 35
50702: MINUS
50703: ST_TO_ADDR
// until not tmp ;
50704: LD_VAR 0 1
50708: NOT
50709: IFFALSE 50683
// EndBuildUp ;
50711: CALL 50294 0 0
// end ;
50715: PPOPN 1
50717: END
// every 0 0$1 trigger mpActive marked mpWin do
50718: LD_INT 100
50720: IFFALSE 50754
50722: GO 50724
50724: DISABLE
// begin if IAmServer then
50725: CALL_OW 518
50729: IFFALSE 50738
// wait ( 0 0$3 ) ;
50731: LD_INT 105
50733: PPUSH
50734: CALL_OW 67
// if Multiplayer then
50738: LD_OWVAR 4
50742: IFFALSE 50750
// YouWinInMultiplayer else
50744: CALL_OW 106
50748: GO 50754
// YouWin ;
50750: CALL_OW 103
// end ;
50754: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50755: LD_INT 0
50757: PPUSH
// result := false ;
50758: LD_ADDR_VAR 0 3
50762: PUSH
50763: LD_INT 0
50765: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50766: LD_VAR 0 1
50770: PUSH
50771: LD_INT 1
50773: DOUBLE
50774: EQUAL
50775: IFTRUE 50797
50777: LD_INT 5
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50797
50783: LD_INT 6
50785: DOUBLE
50786: EQUAL
50787: IFTRUE 50797
50789: LD_INT 7
50791: DOUBLE
50792: EQUAL
50793: IFTRUE 50797
50795: GO 50870
50797: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_INT 22
50805: PUSH
50806: LD_VAR 0 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 21
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 33
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 33
50840: PUSH
50841: LD_INT 5
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PPUSH
50858: CALL_OW 69
50862: PPUSH
50863: CALL 5165 0 1
50867: ST_TO_ADDR
// end ; GameTypeSurvival :
50868: GO 51109
50870: LD_INT 2
50872: DOUBLE
50873: EQUAL
50874: IFTRUE 50878
50876: GO 51008
50878: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50879: LD_ADDR_VAR 0 3
50883: PUSH
50884: LD_INT 22
50886: PUSH
50887: LD_VAR 0 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 30
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 30
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PPUSH
50928: CALL_OW 69
50932: PPUSH
50933: CALL 5165 0 1
50937: IFFALSE 51005
50939: PUSH
50940: LD_INT 22
50942: PUSH
50943: LD_VAR 0 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 21
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 33
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 33
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PPUSH
50995: CALL_OW 69
50999: PPUSH
51000: CALL 5165 0 1
51004: AND
51005: ST_TO_ADDR
// end ; GameTypeKing :
51006: GO 51109
51008: LD_INT 3
51010: DOUBLE
51011: EQUAL
51012: IFTRUE 51016
51014: GO 51108
51016: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51017: LD_ADDR_VAR 0 3
51021: PUSH
51022: LD_INT 22
51024: PUSH
51025: LD_VAR 0 2
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 21
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 33
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 33
51059: PUSH
51060: LD_INT 5
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PPUSH
51077: CALL_OW 69
51081: PPUSH
51082: CALL 5165 0 1
51086: IFFALSE 51105
51088: PUSH
51089: LD_VAR 0 2
51093: PPUSH
51094: CALL 55387 0 1
51098: PUSH
51099: LD_EXP 33
51103: LESS
51104: AND
51105: ST_TO_ADDR
// end ; end ;
51106: GO 51109
51108: POP
// end ;
51109: LD_VAR 0 3
51113: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51114: LD_INT 100
51116: IFFALSE 51346
51118: GO 51120
51120: DISABLE
51121: LD_INT 0
51123: PPUSH
51124: PPUSH
// begin if Multiplayer then
51125: LD_OWVAR 4
51129: IFFALSE 51137
// SetPlayerSpectator ( ) else
51131: CALL_OW 572
51135: GO 51146
// FogOff ( your_side ) ;
51137: LD_OWVAR 2
51141: PPUSH
51142: CALL_OW 344
// repeat gameIsOn := false ;
51146: LD_ADDR_VAR 0 1
51150: PUSH
51151: LD_INT 0
51153: ST_TO_ADDR
// for i := 1 to 8 do
51154: LD_ADDR_VAR 0 2
51158: PUSH
51159: DOUBLE
51160: LD_INT 1
51162: DEC
51163: ST_TO_ADDR
51164: LD_INT 8
51166: PUSH
51167: FOR_TO
51168: IFFALSE 51298
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51170: LD_EXP 5
51174: PUSH
51175: LD_VAR 0 2
51179: ARRAY
51180: IFFALSE 51193
51182: PUSH
51183: LD_VAR 0 2
51187: PPUSH
51188: CALL_OW 108
51192: AND
51193: IFFALSE 51207
51195: PUSH
51196: LD_VAR 0 2
51200: PUSH
51201: LD_OWVAR 2
51205: NONEQUAL
51206: AND
51207: IFFALSE 51296
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51209: LD_EXP 6
51213: PUSH
51214: LD_VAR 0 2
51218: ARRAY
51219: NOT
51220: IFTRUE 51268
51222: PUSH
51223: LD_EXP 6
51227: PUSH
51228: LD_VAR 0 2
51232: ARRAY
51233: PUSH
51234: LD_EXP 6
51238: PUSH
51239: LD_OWVAR 2
51243: ARRAY
51244: NONEQUAL
51245: IFFALSE 51267
51247: PUSH
51248: LD_OWVAR 2
51252: PPUSH
51253: LD_VAR 0 2
51257: PPUSH
51258: CALL_OW 81
51262: PUSH
51263: LD_INT 1
51265: NONEQUAL
51266: AND
51267: OR
51268: IFFALSE 51296
// if HasPowerByGameType ( mpGameType , i ) then
51270: LD_EXP 1
51274: PPUSH
51275: LD_VAR 0 2
51279: PPUSH
51280: CALL 50755 0 2
51284: IFFALSE 51296
// begin gameIsOn := true ;
51286: LD_ADDR_VAR 0 1
51290: PUSH
51291: LD_INT 1
51293: ST_TO_ADDR
// break ;
51294: GO 51298
// end ;
51296: GO 51167
51298: POP
51299: POP
// wait ( 100 ) ;
51300: LD_INT 100
51302: PPUSH
51303: CALL_OW 67
// until not gameIsOn ;
51307: LD_VAR 0 1
51311: NOT
51312: IFFALSE 51146
// if IAmServer then
51314: CALL_OW 518
51318: IFFALSE 51327
// wait ( 0 0$3 ) ;
51320: LD_INT 105
51322: PPUSH
51323: CALL_OW 67
// if Multiplayer then
51327: LD_OWVAR 4
51331: IFFALSE 51339
// YouLostInMultiplayer else
51333: CALL_OW 107
51337: GO 51346
// YouLost (  ) ;
51339: LD_STRING 
51341: PPUSH
51342: CALL_OW 104
// end ;
51346: PPOPN 2
51348: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51349: LD_EXP 31
51353: IFFALSE 51737
51355: GO 51357
51357: DISABLE
51358: LD_INT 0
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51365: LD_ADDR_VAR 0 5
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: LD_INT 4
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: LD_INT 6
51387: PUSH
51388: LD_INT 7
51390: PUSH
51391: LD_INT 8
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51404: LD_INT 350
51406: PPUSH
51407: CALL_OW 67
// for i := 1 to 8 do
51411: LD_ADDR_VAR 0 1
51415: PUSH
51416: DOUBLE
51417: LD_INT 1
51419: DEC
51420: ST_TO_ADDR
51421: LD_INT 8
51423: PUSH
51424: FOR_TO
51425: IFFALSE 51707
// begin j := sides [ i ] ;
51427: LD_ADDR_VAR 0 2
51431: PUSH
51432: LD_VAR 0 5
51436: PUSH
51437: LD_VAR 0 1
51441: ARRAY
51442: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51443: LD_EXP 38
51447: PUSH
51448: LD_VAR 0 2
51452: ARRAY
51453: PPUSH
51454: CALL 5165 0 1
51458: IFFALSE 51471
51460: PUSH
51461: LD_VAR 0 2
51465: PPUSH
51466: CALL_OW 108
51470: AND
51471: IFFALSE 51489
51473: PUSH
51474: LD_EXP 1
51478: PPUSH
51479: LD_VAR 0 2
51483: PPUSH
51484: CALL 50755 0 2
51488: AND
51489: IFFALSE 51705
// begin wait ( mpRespawn div 2 ) ;
51491: LD_EXP 31
51495: PUSH
51496: LD_INT 2
51498: DIV
51499: PPUSH
51500: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51504: LD_ADDR_VAR 0 3
51508: PUSH
51509: LD_INT 22
51511: PUSH
51512: LD_VAR 0 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 50
51523: PUSH
51524: EMPTY
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 30
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 30
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: PPUSH
51560: CALL_OW 69
51564: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51565: LD_VAR 0 3
51569: NOT
51570: IFTRUE 51584
51572: PUSH
51573: LD_VAR 0 2
51577: PPUSH
51578: CALL_OW 108
51582: NOT
51583: OR
51584: IFTRUE 51603
51586: PUSH
51587: LD_EXP 1
51591: PPUSH
51592: LD_VAR 0 2
51596: PPUSH
51597: CALL 50755 0 2
51601: NOT
51602: OR
51603: IFFALSE 51607
// continue ;
51605: GO 51424
// spawn := tmp [ 1 ] ;
51607: LD_ADDR_VAR 0 4
51611: PUSH
51612: LD_VAR 0 3
51616: PUSH
51617: LD_INT 1
51619: ARRAY
51620: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51621: LD_EXP 38
51625: PUSH
51626: LD_VAR 0 2
51630: ARRAY
51631: PUSH
51632: LD_INT 1
51634: ARRAY
51635: PPUSH
51636: LD_VAR 0 4
51640: PPUSH
51641: CALL_OW 250
51645: PPUSH
51646: LD_VAR 0 4
51650: PPUSH
51651: CALL_OW 251
51655: PPUSH
51656: LD_INT 32
51658: PPUSH
51659: LD_INT 1
51661: PPUSH
51662: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51666: LD_ADDR_EXP 38
51670: PUSH
51671: LD_EXP 38
51675: PPUSH
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_EXP 38
51685: PUSH
51686: LD_VAR 0 2
51690: ARRAY
51691: PPUSH
51692: LD_INT 1
51694: PPUSH
51695: CALL_OW 3
51699: PPUSH
51700: CALL_OW 1
51704: ST_TO_ADDR
// end ; end ;
51705: GO 51424
51707: POP
51708: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51709: LD_ADDR_VAR 0 5
51713: PUSH
51714: LD_VAR 0 5
51718: PPUSH
51719: LD_INT 1
51721: PPUSH
51722: LD_INT 8
51724: PPUSH
51725: LD_INT 1
51727: PPUSH
51728: CALL 7491 0 4
51732: ST_TO_ADDR
// until false ;
51733: LD_INT 0
51735: IFFALSE 51404
// end ;
51737: PPOPN 5
51739: END
// every 0 0$1 marked mpActive do
51740: GO 51742
51742: DISABLE
// begin enable ;
51743: ENABLE
// if not mpDisplayStrings then
51744: LD_EXP 36
51748: NOT
51749: IFFALSE 51760
// begin display_strings := [ ] ;
51751: LD_ADDR_OWVAR 47
51755: PUSH
51756: EMPTY
51757: ST_TO_ADDR
// exit ;
51758: GO 51770
// end ; display_strings := mpDisplayStrings ;
51760: LD_ADDR_OWVAR 47
51764: PUSH
51765: LD_EXP 36
51769: ST_TO_ADDR
// end ; end_of_file
51770: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51771: LD_INT 0
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
51779: PPUSH
51780: PPUSH
51781: PPUSH
// if GetType ( un ) = unit_vehicle then
51782: LD_VAR 0 1
51786: PPUSH
51787: CALL_OW 247
51791: PUSH
51792: LD_INT 2
51794: EQUAL
51795: IFFALSE 51799
// exit ;
51797: GO 52473
// side := GetSide ( un ) ;
51799: LD_ADDR_VAR 0 9
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 255
51813: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51814: LD_EXP 1
51818: PUSH
51819: LD_INT 2
51821: EQUAL
51822: IFFALSE 51916
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 266
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: IN
51844: IFFALSE 51916
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51846: LD_ADDR_VAR 0 3
51850: PUSH
51851: LD_INT 22
51853: PUSH
51854: LD_VAR 0 9
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 21
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 33
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PPUSH
51895: CALL_OW 69
51899: PUSH
51900: FOR_IN
51901: IFFALSE 51914
// KillUnit ( i ) ;
51903: LD_VAR 0 3
51907: PPUSH
51908: CALL_OW 66
51912: GO 51900
51914: POP
51915: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51916: LD_VAR 0 1
51920: PPUSH
51921: CALL_OW 257
51925: PUSH
51926: LD_INT 12
51928: PUSH
51929: LD_INT 17
51931: PUSH
51932: LD_INT 15
51934: PUSH
51935: LD_INT 16
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: IN
51944: IFTRUE 51961
51946: PUSH
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 263
51956: PUSH
51957: LD_INT 5
51959: EQUAL
51960: OR
51961: IFFALSE 52198
// begin tag := 0 ;
51963: LD_ADDR_VAR 0 5
51967: PUSH
51968: LD_INT 0
51970: ST_TO_ADDR
// for i := 1 to 8 do
51971: LD_ADDR_VAR 0 3
51975: PUSH
51976: DOUBLE
51977: LD_INT 1
51979: DEC
51980: ST_TO_ADDR
51981: LD_INT 8
51983: PUSH
51984: FOR_TO
51985: IFFALSE 52019
// if un in mpApePosIndex [ i ] then
51987: LD_VAR 0 1
51991: PUSH
51992: LD_EXP 30
51996: PUSH
51997: LD_VAR 0 3
52001: ARRAY
52002: IN
52003: IFFALSE 52017
// begin tag := i ;
52005: LD_ADDR_VAR 0 5
52009: PUSH
52010: LD_VAR 0 3
52014: ST_TO_ADDR
// break ;
52015: GO 52019
// end ;
52017: GO 51984
52019: POP
52020: POP
// if not tag then
52021: LD_VAR 0 5
52025: NOT
52026: IFFALSE 52030
// exit ;
52028: GO 52473
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52030: LD_ADDR_VAR 0 7
52034: PUSH
52035: LD_EXP 29
52039: PUSH
52040: LD_EXP 5
52044: PUSH
52045: LD_VAR 0 5
52049: ARRAY
52050: ARRAY
52051: ST_TO_ADDR
// if not area then
52052: LD_VAR 0 7
52056: NOT
52057: IFFALSE 52061
// exit ;
52059: GO 52473
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52061: LD_INT 14700
52063: PUSH
52064: LD_VAR 0 1
52068: PUSH
52069: LD_INT 5
52071: MOD
52072: PUSH
52073: LD_INT 1
52075: PLUS
52076: PUSH
52077: LD_INT 700
52079: MUL
52080: PLUS
52081: PPUSH
52082: CALL_OW 67
// repeat wait ( 10 ) ;
52086: LD_INT 10
52088: PPUSH
52089: CALL_OW 67
// until not mpBlockRespThread ;
52093: LD_EXP 44
52097: NOT
52098: IFFALSE 52086
// mpBlockRespThread := true ;
52100: LD_ADDR_EXP 44
52104: PUSH
52105: LD_INT 1
52107: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52108: LD_INT 0
52110: PPUSH
52111: CALL 37258 0 1
// ape := CreateHuman ;
52115: LD_ADDR_VAR 0 4
52119: PUSH
52120: CALL_OW 44
52124: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52125: LD_ADDR_EXP 30
52129: PUSH
52130: LD_EXP 30
52134: PPUSH
52135: LD_VAR 0 5
52139: PPUSH
52140: LD_EXP 30
52144: PUSH
52145: LD_VAR 0 5
52149: ARRAY
52150: PPUSH
52151: LD_VAR 0 4
52155: PPUSH
52156: CALL 41131 0 2
52160: PPUSH
52161: CALL_OW 1
52165: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52166: LD_VAR 0 4
52170: PPUSH
52171: LD_VAR 0 7
52175: PPUSH
52176: LD_INT 0
52178: PPUSH
52179: CALL_OW 49
// wait ( 10 ) ;
52183: LD_INT 10
52185: PPUSH
52186: CALL_OW 67
// mpBlockRespThread := false ;
52190: LD_ADDR_EXP 44
52194: PUSH
52195: LD_INT 0
52197: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52198: LD_VAR 0 1
52202: PPUSH
52203: CALL_OW 247
52207: PUSH
52208: LD_INT 1
52210: EQUAL
52211: IFFALSE 52228
52213: PUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 248
52223: PUSH
52224: LD_INT 0
52226: GREATER
52227: AND
52228: IFFALSE 52473
// begin if not mpRespawn then
52230: LD_EXP 31
52234: NOT
52235: IFFALSE 52239
// exit ;
52237: GO 52473
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52239: LD_VAR 0 9
52243: PPUSH
52244: CALL_OW 108
52248: NOT
52249: IFFALSE 52268
52251: PUSH
52252: LD_EXP 1
52256: PPUSH
52257: LD_VAR 0 9
52261: PPUSH
52262: CALL 50755 0 2
52266: NOT
52267: AND
52268: IFFALSE 52272
// exit ;
52270: GO 52473
// side := GetSide ( un ) ;
52272: LD_ADDR_VAR 0 9
52276: PUSH
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 255
52286: ST_TO_ADDR
// nation := GetNation ( un ) ;
52287: LD_ADDR_VAR 0 8
52291: PUSH
52292: LD_VAR 0 1
52296: PPUSH
52297: CALL_OW 248
52301: ST_TO_ADDR
// class := GetClass ( un ) ;
52302: LD_ADDR_VAR 0 6
52306: PUSH
52307: LD_VAR 0 1
52311: PPUSH
52312: CALL_OW 257
52316: ST_TO_ADDR
// if class > 4 then
52317: LD_VAR 0 6
52321: PUSH
52322: LD_INT 4
52324: GREATER
52325: IFFALSE 52335
// class := 1 ;
52327: LD_ADDR_VAR 0 6
52331: PUSH
52332: LD_INT 1
52334: ST_TO_ADDR
// repeat wait ( 10 ) ;
52335: LD_INT 10
52337: PPUSH
52338: CALL_OW 67
// until not mpBlockRespThread ;
52342: LD_EXP 44
52346: NOT
52347: IFFALSE 52335
// mpBlockRespThread := true ;
52349: LD_ADDR_EXP 44
52353: PUSH
52354: LD_INT 1
52356: ST_TO_ADDR
// uc_side := side ;
52357: LD_ADDR_OWVAR 20
52361: PUSH
52362: LD_VAR 0 9
52366: ST_TO_ADDR
// uc_nation := nation ;
52367: LD_ADDR_OWVAR 21
52371: PUSH
52372: LD_VAR 0 8
52376: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52377: LD_INT 0
52379: PPUSH
52380: LD_VAR 0 6
52384: PPUSH
52385: LD_INT 2
52387: PPUSH
52388: CALL_OW 380
// un := CreateHuman ;
52392: LD_ADDR_VAR 0 1
52396: PUSH
52397: CALL_OW 44
52401: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52402: LD_ADDR_EXP 38
52406: PUSH
52407: LD_EXP 38
52411: PPUSH
52412: LD_VAR 0 9
52416: PPUSH
52417: LD_EXP 38
52421: PUSH
52422: LD_VAR 0 9
52426: ARRAY
52427: PPUSH
52428: LD_EXP 38
52432: PUSH
52433: LD_VAR 0 9
52437: ARRAY
52438: PUSH
52439: LD_INT 1
52441: PLUS
52442: PPUSH
52443: LD_VAR 0 1
52447: PPUSH
52448: CALL_OW 1
52452: PPUSH
52453: CALL_OW 1
52457: ST_TO_ADDR
// wait ( 10 ) ;
52458: LD_INT 10
52460: PPUSH
52461: CALL_OW 67
// mpBlockRespThread := false ;
52465: LD_ADDR_EXP 44
52469: PUSH
52470: LD_INT 0
52472: ST_TO_ADDR
// end ; end ;
52473: LD_VAR 0 2
52477: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52478: LD_INT 0
52480: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52481: LD_VAR 0 1
52485: PPUSH
52486: CALL_OW 266
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: IN
52501: IFFALSE 52526
// SetBName ( building , @ & GetSide ( building ) ) ;
52503: LD_VAR 0 1
52507: PPUSH
52508: LD_STRING @
52510: PUSH
52511: LD_VAR 0 1
52515: PPUSH
52516: CALL_OW 255
52520: STR
52521: PPUSH
52522: CALL_OW 500
// end ;
52526: LD_VAR 0 2
52530: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52531: LD_INT 0
52533: PPUSH
52534: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52535: LD_EXP 1
52539: PUSH
52540: LD_INT 2
52542: EQUAL
52543: IFFALSE 52567
52545: PUSH
52546: LD_VAR 0 1
52550: PPUSH
52551: CALL_OW 266
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: IN
52566: AND
52567: IFFALSE 52646
// begin SetSide ( building , oldSide ) ;
52569: LD_VAR 0 1
52573: PPUSH
52574: LD_VAR 0 2
52578: PPUSH
52579: CALL_OW 235
// KillUnit ( building ) ;
52583: LD_VAR 0 1
52587: PPUSH
52588: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52592: LD_ADDR_VAR 0 5
52596: PUSH
52597: LD_INT 22
52599: PUSH
52600: LD_VAR 0 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 21
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PPUSH
52623: CALL_OW 69
52627: PUSH
52628: FOR_IN
52629: IFFALSE 52642
// KillUnit ( i ) ;
52631: LD_VAR 0 5
52635: PPUSH
52636: CALL_OW 66
52640: GO 52628
52642: POP
52643: POP
// exit ;
52644: GO 52691
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL_OW 266
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: IN
52666: IFFALSE 52691
// SetBName ( building , @ & GetSide ( building ) ) ;
52668: LD_VAR 0 1
52672: PPUSH
52673: LD_STRING @
52675: PUSH
52676: LD_VAR 0 1
52680: PPUSH
52681: CALL_OW 255
52685: STR
52686: PPUSH
52687: CALL_OW 500
// end ;
52691: LD_VAR 0 4
52695: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52696: LD_INT 0
52698: PPUSH
52699: PPUSH
52700: PPUSH
// if mpGameType <> GameTypeFamine then
52701: LD_EXP 1
52705: PUSH
52706: LD_INT 5
52708: NONEQUAL
52709: IFFALSE 52713
// exit ;
52711: GO 52928
// for i := 1 to mpGlobalOilDeposits do
52713: LD_ADDR_VAR 0 6
52717: PUSH
52718: DOUBLE
52719: LD_INT 1
52721: DEC
52722: ST_TO_ADDR
52723: LD_EXP 39
52727: PUSH
52728: FOR_TO
52729: IFFALSE 52926
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52731: LD_EXP 39
52735: PUSH
52736: LD_VAR 0 6
52740: ARRAY
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PPUSH
52746: LD_EXP 39
52750: PUSH
52751: LD_VAR 0 6
52755: ARRAY
52756: PUSH
52757: LD_INT 2
52759: ARRAY
52760: PPUSH
52761: CALL_OW 428
52765: PUSH
52766: LD_VAR 0 1
52770: EQUAL
52771: IFFALSE 52924
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52773: LD_ADDR_VAR 0 7
52777: PUSH
52778: LD_EXP 39
52782: PUSH
52783: LD_VAR 0 6
52787: ARRAY
52788: PUSH
52789: LD_INT 3
52791: ARRAY
52792: ST_TO_ADDR
// value := value - amount ;
52793: LD_ADDR_VAR 0 7
52797: PUSH
52798: LD_VAR 0 7
52802: PUSH
52803: LD_VAR 0 4
52807: MINUS
52808: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52809: LD_ADDR_EXP 39
52813: PUSH
52814: LD_EXP 39
52818: PPUSH
52819: LD_VAR 0 6
52823: PPUSH
52824: LD_EXP 39
52828: PUSH
52829: LD_VAR 0 6
52833: ARRAY
52834: PPUSH
52835: LD_INT 3
52837: PPUSH
52838: LD_VAR 0 7
52842: PPUSH
52843: CALL_OW 1
52847: PPUSH
52848: CALL_OW 1
52852: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52853: LD_VAR 0 1
52857: PPUSH
52858: LD_VAR 0 7
52862: PPUSH
52863: CALL_OW 505
// if value <= 0 then
52867: LD_VAR 0 7
52871: PUSH
52872: LD_INT 0
52874: LESSEQUAL
52875: IFFALSE 52924
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52877: LD_EXP 39
52881: PUSH
52882: LD_VAR 0 6
52886: ARRAY
52887: PUSH
52888: LD_INT 1
52890: ARRAY
52891: PPUSH
52892: LD_EXP 39
52896: PUSH
52897: LD_VAR 0 6
52901: ARRAY
52902: PUSH
52903: LD_INT 2
52905: ARRAY
52906: PPUSH
52907: CALL_OW 63
// KillUnit ( building ) ;
52911: LD_VAR 0 1
52915: PPUSH
52916: CALL_OW 66
// exit ;
52920: POP
52921: POP
52922: GO 52928
// end ; end ; end ;
52924: GO 52728
52926: POP
52927: POP
// end ;
52928: LD_VAR 0 5
52932: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52933: LD_INT 0
52935: PPUSH
52936: PPUSH
52937: PPUSH
// if mpGameType <> GameTypeFamine then
52938: LD_EXP 1
52942: PUSH
52943: LD_INT 5
52945: NONEQUAL
52946: IFFALSE 52950
// exit ;
52948: GO 53165
// for i := 1 to mpGlobalSibDeposits do
52950: LD_ADDR_VAR 0 6
52954: PUSH
52955: DOUBLE
52956: LD_INT 1
52958: DEC
52959: ST_TO_ADDR
52960: LD_EXP 40
52964: PUSH
52965: FOR_TO
52966: IFFALSE 53163
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52968: LD_EXP 40
52972: PUSH
52973: LD_VAR 0 6
52977: ARRAY
52978: PUSH
52979: LD_INT 1
52981: ARRAY
52982: PPUSH
52983: LD_EXP 40
52987: PUSH
52988: LD_VAR 0 6
52992: ARRAY
52993: PUSH
52994: LD_INT 2
52996: ARRAY
52997: PPUSH
52998: CALL_OW 428
53002: PUSH
53003: LD_VAR 0 1
53007: EQUAL
53008: IFFALSE 53161
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53010: LD_ADDR_VAR 0 7
53014: PUSH
53015: LD_EXP 40
53019: PUSH
53020: LD_VAR 0 6
53024: ARRAY
53025: PUSH
53026: LD_INT 3
53028: ARRAY
53029: ST_TO_ADDR
// value := value - amount ;
53030: LD_ADDR_VAR 0 7
53034: PUSH
53035: LD_VAR 0 7
53039: PUSH
53040: LD_VAR 0 4
53044: MINUS
53045: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53046: LD_ADDR_EXP 40
53050: PUSH
53051: LD_EXP 40
53055: PPUSH
53056: LD_VAR 0 6
53060: PPUSH
53061: LD_EXP 40
53065: PUSH
53066: LD_VAR 0 6
53070: ARRAY
53071: PPUSH
53072: LD_INT 3
53074: PPUSH
53075: LD_VAR 0 7
53079: PPUSH
53080: CALL_OW 1
53084: PPUSH
53085: CALL_OW 1
53089: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53090: LD_VAR 0 1
53094: PPUSH
53095: LD_VAR 0 7
53099: PPUSH
53100: CALL_OW 505
// if value <= 0 then
53104: LD_VAR 0 7
53108: PUSH
53109: LD_INT 0
53111: LESSEQUAL
53112: IFFALSE 53161
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53114: LD_EXP 40
53118: PUSH
53119: LD_VAR 0 6
53123: ARRAY
53124: PUSH
53125: LD_INT 1
53127: ARRAY
53128: PPUSH
53129: LD_EXP 40
53133: PUSH
53134: LD_VAR 0 6
53138: ARRAY
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: PPUSH
53144: CALL_OW 63
// KillUnit ( building ) ;
53148: LD_VAR 0 1
53152: PPUSH
53153: CALL_OW 66
// exit ;
53157: POP
53158: POP
53159: GO 53165
// end ; end ; end ;
53161: GO 52965
53163: POP
53164: POP
// end ;
53165: LD_VAR 0 5
53169: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
// side := GetSide ( factory ) ;
53174: LD_ADDR_VAR 0 7
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: CALL_OW 255
53188: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53189: LD_VAR 0 5
53193: PUSH
53194: LD_INT 81
53196: EQUAL
53197: IFFALSE 53235
53199: PUSH
53200: LD_INT 22
53202: PUSH
53203: LD_VAR 0 7
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 34
53214: PUSH
53215: LD_INT 81
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PPUSH
53226: CALL_OW 69
53230: PUSH
53231: LD_INT 0
53233: GREATER
53234: AND
53235: IFFALSE 53268
// begin ComCancel ( factory ) ;
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 127
// if side = your_side then
53246: LD_VAR 0 7
53250: PUSH
53251: LD_OWVAR 2
53255: EQUAL
53256: IFFALSE 53268
// HintSpec ( VehLimit , 2 ) ;
53258: LD_STRING VehLimit
53260: PPUSH
53261: LD_INT 2
53263: PPUSH
53264: CALL_OW 338
// end ; end ;
53268: LD_VAR 0 6
53272: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53273: LD_INT 0
53275: PPUSH
53276: PPUSH
53277: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 264
53287: PUSH
53288: LD_INT 81
53290: EQUAL
53291: IFFALSE 53308
53293: PUSH
53294: LD_VAR 0 1
53298: PPUSH
53299: CALL_OW 263
53303: PUSH
53304: LD_INT 1
53306: EQUAL
53307: AND
53308: IFFALSE 53588
// begin for i := 1 to Count ( minersList ) do
53310: LD_ADDR_VAR 0 6
53314: PUSH
53315: DOUBLE
53316: LD_INT 1
53318: DEC
53319: ST_TO_ADDR
53320: LD_EXP 55
53324: PPUSH
53325: CALL 5165 0 1
53329: PUSH
53330: FOR_TO
53331: IFFALSE 53449
// begin if minersList [ i ] = oldId then
53333: LD_EXP 55
53337: PUSH
53338: LD_VAR 0 6
53342: ARRAY
53343: PUSH
53344: LD_VAR 0 2
53348: EQUAL
53349: IFFALSE 53447
// begin for j := 1 to minerMinesList [ i ] do
53351: LD_ADDR_VAR 0 7
53355: PUSH
53356: DOUBLE
53357: LD_INT 1
53359: DEC
53360: ST_TO_ADDR
53361: LD_EXP 56
53365: PUSH
53366: LD_VAR 0 6
53370: ARRAY
53371: PUSH
53372: FOR_TO
53373: IFFALSE 53423
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53375: LD_EXP 56
53379: PUSH
53380: LD_VAR 0 6
53384: ARRAY
53385: PUSH
53386: LD_VAR 0 7
53390: ARRAY
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: PPUSH
53396: LD_EXP 56
53400: PUSH
53401: LD_VAR 0 6
53405: ARRAY
53406: PUSH
53407: LD_VAR 0 7
53411: ARRAY
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: PPUSH
53417: CALL_OW 612
53421: GO 53372
53423: POP
53424: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53425: LD_ADDR_EXP 56
53429: PUSH
53430: LD_EXP 56
53434: PPUSH
53435: LD_VAR 0 6
53439: PPUSH
53440: CALL_OW 3
53444: ST_TO_ADDR
// break ;
53445: GO 53449
// end ; end ;
53447: GO 53330
53449: POP
53450: POP
// minersList := minersList diff oldId ;
53451: LD_ADDR_EXP 55
53455: PUSH
53456: LD_EXP 55
53460: PUSH
53461: LD_VAR 0 2
53465: DIFF
53466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53467: LD_INT 22
53469: PUSH
53470: LD_VAR 0 4
53474: PPUSH
53475: CALL_OW 255
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 34
53486: PUSH
53487: LD_INT 81
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PPUSH
53498: CALL_OW 69
53502: PUSH
53503: LD_INT 1
53505: GREATER
53506: IFFALSE 53533
// begin ComExit ( unit ) ;
53508: LD_VAR 0 4
53512: PPUSH
53513: CALL 41529 0 1
// SetSide ( newId , oldSide ) ;
53517: LD_VAR 0 1
53521: PPUSH
53522: LD_VAR 0 3
53526: PPUSH
53527: CALL_OW 235
// exit ;
53531: GO 53588
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53533: LD_ADDR_EXP 55
53537: PUSH
53538: LD_EXP 55
53542: PPUSH
53543: LD_EXP 55
53547: PUSH
53548: LD_INT 1
53550: PLUS
53551: PPUSH
53552: LD_VAR 0 1
53556: PPUSH
53557: CALL_OW 1
53561: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53562: LD_ADDR_EXP 56
53566: PUSH
53567: LD_EXP 56
53571: PPUSH
53572: LD_EXP 56
53576: PUSH
53577: LD_INT 1
53579: PLUS
53580: PPUSH
53581: EMPTY
53582: PPUSH
53583: CALL_OW 1
53587: ST_TO_ADDR
// end ; end ; end_of_file
53588: LD_VAR 0 5
53592: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53593: LD_EXP 37
53597: IFFALSE 53605
53599: PUSH
53600: CALL 53815 0 0
53604: AND
53605: IFFALSE 53613
53607: PUSH
53608: LD_OWVAR 4
53612: AND
53613: IFFALSE 53812
53615: GO 53617
53617: DISABLE
53618: LD_INT 0
53620: PPUSH
53621: PPUSH
// begin canWin := false ;
53622: LD_ADDR_VAR 0 2
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// if not HasPower ( your_side ) then
53630: LD_OWVAR 2
53634: PPUSH
53635: CALL 53857 0 1
53639: NOT
53640: IFFALSE 53651
// begin Multiplayer_Loose_Message ;
53642: CALL_OW 521
// enable ( mpLose ) ;
53646: LD_INT 102
53648: ENABLE_MARKED
// end else
53649: GO 53812
// begin canWin := true ;
53651: LD_ADDR_VAR 0 2
53655: PUSH
53656: LD_INT 1
53658: ST_TO_ADDR
// for i := 1 to 8 do
53659: LD_ADDR_VAR 0 1
53663: PUSH
53664: DOUBLE
53665: LD_INT 1
53667: DEC
53668: ST_TO_ADDR
53669: LD_INT 8
53671: PUSH
53672: FOR_TO
53673: IFFALSE 53798
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53675: LD_EXP 5
53679: PUSH
53680: LD_VAR 0 1
53684: ARRAY
53685: IFFALSE 53698
53687: PUSH
53688: LD_VAR 0 1
53692: PPUSH
53693: CALL_OW 108
53697: AND
53698: IFFALSE 53712
53700: PUSH
53701: LD_VAR 0 1
53705: PUSH
53706: LD_OWVAR 2
53710: NONEQUAL
53711: AND
53712: IFFALSE 53796
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53714: LD_EXP 6
53718: PUSH
53719: LD_VAR 0 1
53723: ARRAY
53724: NOT
53725: IFTRUE 53773
53727: PUSH
53728: LD_EXP 6
53732: PUSH
53733: LD_VAR 0 1
53737: ARRAY
53738: PUSH
53739: LD_EXP 6
53743: PUSH
53744: LD_OWVAR 2
53748: ARRAY
53749: NONEQUAL
53750: IFFALSE 53772
53752: PUSH
53753: LD_OWVAR 2
53757: PPUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: CALL_OW 81
53767: PUSH
53768: LD_INT 1
53770: NONEQUAL
53771: AND
53772: OR
53773: IFFALSE 53796
// if HasPower ( i ) then
53775: LD_VAR 0 1
53779: PPUSH
53780: CALL 53857 0 1
53784: IFFALSE 53796
// begin canWin := false ;
53786: LD_ADDR_VAR 0 2
53790: PUSH
53791: LD_INT 0
53793: ST_TO_ADDR
// break ;
53794: GO 53798
// end ;
53796: GO 53672
53798: POP
53799: POP
// if canWin then
53800: LD_VAR 0 2
53804: IFFALSE 53811
// enable ( mpWin ) else
53806: LD_INT 101
53808: ENABLE_MARKED
53809: GO 53812
// enable ;
53811: ENABLE
// end ; end ;
53812: PPOPN 2
53814: END
// function CanWinLoose ; begin
53815: LD_INT 0
53817: PPUSH
// result := true ;
53818: LD_ADDR_VAR 0 1
53822: PUSH
53823: LD_INT 1
53825: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53826: CALL_OW 531
53830: IFFALSE 53842
53832: PUSH
53833: CALL_OW 519
53837: PUSH
53838: LD_INT 1
53840: GREATER
53841: AND
53842: IFFALSE 53852
// result := false ;
53844: LD_ADDR_VAR 0 1
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// end ;
53852: LD_VAR 0 1
53856: RET
// function HasPower ( i ) ; begin
53857: LD_INT 0
53859: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53860: LD_ADDR_VAR 0 2
53864: PUSH
53865: LD_INT 22
53867: PUSH
53868: LD_VAR 0 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 21
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 33
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 33
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PPUSH
53920: CALL_OW 69
53924: ST_TO_ADDR
// end ; end_of_file
53925: LD_VAR 0 2
53929: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53930: LD_EXP 37
53934: IFFALSE 53977
53936: GO 53938
53938: DISABLE
53939: LD_INT 0
53941: PPUSH
// begin for i := 1 to 8 do
53942: LD_ADDR_VAR 0 1
53946: PUSH
53947: DOUBLE
53948: LD_INT 1
53950: DEC
53951: ST_TO_ADDR
53952: LD_INT 8
53954: PUSH
53955: FOR_TO
53956: IFFALSE 53975
// SetRestrict ( b_depot , i , state_disabled ) ;
53958: LD_INT 0
53960: PPUSH
53961: LD_VAR 0 1
53965: PPUSH
53966: LD_INT 0
53968: PPUSH
53969: CALL_OW 324
53973: GO 53955
53975: POP
53976: POP
// end ;
53977: PPOPN 1
53979: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53980: LD_EXP 37
53984: IFFALSE 53992
53986: PUSH
53987: CALL 54202 0 0
53991: AND
53992: IFFALSE 54000
53994: PUSH
53995: LD_OWVAR 4
53999: AND
54000: IFFALSE 54199
54002: GO 54004
54004: DISABLE
54005: LD_INT 0
54007: PPUSH
54008: PPUSH
// begin canWin := false ;
54009: LD_ADDR_VAR 0 2
54013: PUSH
54014: LD_INT 0
54016: ST_TO_ADDR
// if not HasPower ( your_side ) then
54017: LD_OWVAR 2
54021: PPUSH
54022: CALL 54244 0 1
54026: NOT
54027: IFFALSE 54038
// begin Multiplayer_Loose_Message ;
54029: CALL_OW 521
// enable ( mpLose ) ;
54033: LD_INT 102
54035: ENABLE_MARKED
// end else
54036: GO 54199
// begin canWin := true ;
54038: LD_ADDR_VAR 0 2
54042: PUSH
54043: LD_INT 1
54045: ST_TO_ADDR
// for i := 1 to 8 do
54046: LD_ADDR_VAR 0 1
54050: PUSH
54051: DOUBLE
54052: LD_INT 1
54054: DEC
54055: ST_TO_ADDR
54056: LD_INT 8
54058: PUSH
54059: FOR_TO
54060: IFFALSE 54185
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54062: LD_EXP 5
54066: PUSH
54067: LD_VAR 0 1
54071: ARRAY
54072: IFFALSE 54085
54074: PUSH
54075: LD_VAR 0 1
54079: PPUSH
54080: CALL_OW 108
54084: AND
54085: IFFALSE 54099
54087: PUSH
54088: LD_VAR 0 1
54092: PUSH
54093: LD_OWVAR 2
54097: NONEQUAL
54098: AND
54099: IFFALSE 54183
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54101: LD_EXP 6
54105: PUSH
54106: LD_VAR 0 1
54110: ARRAY
54111: NOT
54112: IFTRUE 54160
54114: PUSH
54115: LD_EXP 6
54119: PUSH
54120: LD_VAR 0 1
54124: ARRAY
54125: PUSH
54126: LD_EXP 6
54130: PUSH
54131: LD_OWVAR 2
54135: ARRAY
54136: NONEQUAL
54137: IFFALSE 54159
54139: PUSH
54140: LD_OWVAR 2
54144: PPUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: CALL_OW 81
54154: PUSH
54155: LD_INT 1
54157: NONEQUAL
54158: AND
54159: OR
54160: IFFALSE 54183
// if HasPower ( i ) then
54162: LD_VAR 0 1
54166: PPUSH
54167: CALL 54244 0 1
54171: IFFALSE 54183
// begin canWin := false ;
54173: LD_ADDR_VAR 0 2
54177: PUSH
54178: LD_INT 0
54180: ST_TO_ADDR
// break ;
54181: GO 54185
// end ;
54183: GO 54059
54185: POP
54186: POP
// if canWin then
54187: LD_VAR 0 2
54191: IFFALSE 54198
// enable ( mpWin ) else
54193: LD_INT 101
54195: ENABLE_MARKED
54196: GO 54199
// enable ;
54198: ENABLE
// end ; end ;
54199: PPOPN 2
54201: END
// function CanWinLoose ; begin
54202: LD_INT 0
54204: PPUSH
// result := true ;
54205: LD_ADDR_VAR 0 1
54209: PUSH
54210: LD_INT 1
54212: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54213: CALL_OW 531
54217: IFFALSE 54229
54219: PUSH
54220: CALL_OW 519
54224: PUSH
54225: LD_INT 1
54227: GREATER
54228: AND
54229: IFFALSE 54239
// result := false ;
54231: LD_ADDR_VAR 0 1
54235: PUSH
54236: LD_INT 0
54238: ST_TO_ADDR
// end ;
54239: LD_VAR 0 1
54243: RET
// function HasPower ( i ) ; begin
54244: LD_INT 0
54246: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54247: LD_INT 22
54249: PUSH
54250: LD_VAR 0 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 30
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PPUSH
54291: CALL_OW 69
54295: NOT
54296: IFFALSE 54300
// exit ;
54298: GO 54365
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: LD_INT 22
54307: PUSH
54308: LD_VAR 0 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 21
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 33
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 33
54342: PUSH
54343: LD_INT 5
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PPUSH
54360: CALL_OW 69
54364: ST_TO_ADDR
// end ; end_of_file
54365: LD_VAR 0 2
54369: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54370: LD_EXP 37
54374: IFFALSE 54713
54376: GO 54378
54378: DISABLE
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
54383: PPUSH
// begin mpKingPoints := [ ] ;
54384: LD_ADDR_EXP 47
54388: PUSH
54389: EMPTY
54390: ST_TO_ADDR
// if mpTeamGame then
54391: LD_EXP 9
54395: IFFALSE 54449
// begin for i := 1 to Count ( mpTeams ) do
54397: LD_ADDR_VAR 0 1
54401: PUSH
54402: DOUBLE
54403: LD_INT 1
54405: DEC
54406: ST_TO_ADDR
54407: LD_EXP 8
54411: PPUSH
54412: CALL 5165 0 1
54416: PUSH
54417: FOR_TO
54418: IFFALSE 54445
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54420: LD_ADDR_EXP 47
54424: PUSH
54425: LD_EXP 47
54429: PPUSH
54430: LD_VAR 0 1
54434: PPUSH
54435: LD_INT 0
54437: PPUSH
54438: CALL_OW 1
54442: ST_TO_ADDR
54443: GO 54417
54445: POP
54446: POP
// end else
54447: GO 54492
// begin for i := 1 to 8 do
54449: LD_ADDR_VAR 0 1
54453: PUSH
54454: DOUBLE
54455: LD_INT 1
54457: DEC
54458: ST_TO_ADDR
54459: LD_INT 8
54461: PUSH
54462: FOR_TO
54463: IFFALSE 54490
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54465: LD_ADDR_EXP 47
54469: PUSH
54470: LD_EXP 47
54474: PPUSH
54475: LD_VAR 0 1
54479: PPUSH
54480: LD_INT 0
54482: PPUSH
54483: CALL_OW 1
54487: ST_TO_ADDR
54488: GO 54462
54490: POP
54491: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54492: LD_ADDR_VAR 0 3
54496: PUSH
54497: LD_INT 73
54499: PPUSH
54500: LD_INT 0
54502: PPUSH
54503: CALL_OW 517
54507: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54508: LD_ADDR_VAR 0 1
54512: PUSH
54513: DOUBLE
54514: LD_INT 1
54516: DEC
54517: ST_TO_ADDR
54518: LD_VAR 0 3
54522: PUSH
54523: LD_INT 1
54525: ARRAY
54526: PUSH
54527: FOR_TO
54528: IFFALSE 54595
// for j := 1 to 8 do
54530: LD_ADDR_VAR 0 2
54534: PUSH
54535: DOUBLE
54536: LD_INT 1
54538: DEC
54539: ST_TO_ADDR
54540: LD_INT 8
54542: PUSH
54543: FOR_TO
54544: IFFALSE 54591
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54546: LD_VAR 0 3
54550: PUSH
54551: LD_INT 1
54553: ARRAY
54554: PUSH
54555: LD_VAR 0 1
54559: ARRAY
54560: PPUSH
54561: LD_VAR 0 3
54565: PUSH
54566: LD_INT 2
54568: ARRAY
54569: PUSH
54570: LD_VAR 0 1
54574: ARRAY
54575: PPUSH
54576: LD_VAR 0 2
54580: PPUSH
54581: LD_INT 12
54583: NEG
54584: PPUSH
54585: CALL_OW 330
54589: GO 54543
54591: POP
54592: POP
54593: GO 54527
54595: POP
54596: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54597: LD_EXP 32
54601: PPUSH
54602: LD_INT 1
54604: PPUSH
54605: CALL_OW 424
// UpdateCounter ;
54609: CALL 55217 0 0
// repeat wait ( 0 0$1 ) ;
54613: LD_INT 35
54615: PPUSH
54616: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54620: LD_ADDR_VAR 0 3
54624: PUSH
54625: LD_EXP 32
54629: PPUSH
54630: LD_INT 3
54632: PUSH
54633: LD_INT 57
54635: PUSH
54636: EMPTY
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 50
54645: PUSH
54646: EMPTY
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 30
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 30
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: PPUSH
54682: CALL_OW 70
54686: ST_TO_ADDR
// if not tmp then
54687: LD_VAR 0 3
54691: NOT
54692: IFFALSE 54696
// continue ;
54694: GO 54613
// AddPoints ( tmp ) ;
54696: LD_VAR 0 3
54700: PPUSH
54701: CALL 54895 0 1
// UpdateCounter ;
54705: CALL 55217 0 0
// until false ;
54709: LD_INT 0
54711: IFFALSE 54613
// end ;
54713: PPOPN 3
54715: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54716: LD_EXP 37
54720: IFFALSE 54728
54722: PUSH
54723: LD_EXP 35
54727: AND
54728: IFFALSE 54892
54730: GO 54732
54732: DISABLE
54733: LD_INT 0
54735: PPUSH
54736: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54737: LD_ADDR_VAR 0 2
54741: PUSH
54742: LD_INT 73
54744: PPUSH
54745: LD_INT 0
54747: PPUSH
54748: CALL_OW 517
54752: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54753: LD_ADDR_VAR 0 1
54757: PUSH
54758: DOUBLE
54759: LD_INT 1
54761: DEC
54762: ST_TO_ADDR
54763: LD_VAR 0 2
54767: PUSH
54768: LD_INT 1
54770: ARRAY
54771: PUSH
54772: FOR_TO
54773: IFFALSE 54814
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54775: LD_VAR 0 2
54779: PUSH
54780: LD_INT 1
54782: ARRAY
54783: PUSH
54784: LD_VAR 0 1
54788: ARRAY
54789: PPUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_INT 2
54797: ARRAY
54798: PUSH
54799: LD_VAR 0 1
54803: ARRAY
54804: PPUSH
54805: LD_INT 125
54807: PPUSH
54808: CALL_OW 495
54812: GO 54772
54814: POP
54815: POP
// repeat wait ( mpEmissions ) ;
54816: LD_EXP 35
54820: PPUSH
54821: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54825: LD_ADDR_VAR 0 1
54829: PUSH
54830: DOUBLE
54831: LD_INT 1
54833: DEC
54834: ST_TO_ADDR
54835: LD_VAR 0 2
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PUSH
54844: FOR_TO
54845: IFFALSE 54886
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54847: LD_VAR 0 2
54851: PUSH
54852: LD_INT 1
54854: ARRAY
54855: PUSH
54856: LD_VAR 0 1
54860: ARRAY
54861: PPUSH
54862: LD_VAR 0 2
54866: PUSH
54867: LD_INT 2
54869: ARRAY
54870: PUSH
54871: LD_VAR 0 1
54875: ARRAY
54876: PPUSH
54877: LD_INT 15
54879: PPUSH
54880: CALL_OW 495
54884: GO 54844
54886: POP
54887: POP
// until false ;
54888: LD_INT 0
54890: IFFALSE 54816
// end ;
54892: PPOPN 2
54894: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54895: LD_INT 0
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
// if mpTeamGame then
54902: LD_EXP 9
54906: IFFALSE 55103
// begin first := depots [ 1 ] ;
54908: LD_ADDR_VAR 0 4
54912: PUSH
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: ST_TO_ADDR
// side := GetSide ( first ) ;
54922: LD_ADDR_VAR 0 6
54926: PUSH
54927: LD_VAR 0 4
54931: PPUSH
54932: CALL_OW 255
54936: ST_TO_ADDR
// for i := 1 to mpTeams do
54937: LD_ADDR_VAR 0 3
54941: PUSH
54942: DOUBLE
54943: LD_INT 1
54945: DEC
54946: ST_TO_ADDR
54947: LD_EXP 8
54951: PUSH
54952: FOR_TO
54953: IFFALSE 54987
// if side in mpTeams [ i ] then
54955: LD_VAR 0 6
54959: PUSH
54960: LD_EXP 8
54964: PUSH
54965: LD_VAR 0 3
54969: ARRAY
54970: IN
54971: IFFALSE 54985
// begin team := i ;
54973: LD_ADDR_VAR 0 5
54977: PUSH
54978: LD_VAR 0 3
54982: ST_TO_ADDR
// break ;
54983: GO 54987
// end ;
54985: GO 54952
54987: POP
54988: POP
// if not team then
54989: LD_VAR 0 5
54993: NOT
54994: IFFALSE 54998
// exit ;
54996: GO 55212
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54998: LD_EXP 32
55002: PPUSH
55003: LD_INT 81
55005: PUSH
55006: LD_VAR 0 6
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PPUSH
55015: CALL_OW 70
55019: IFFALSE 55023
// exit ;
55021: GO 55212
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55023: LD_ADDR_EXP 47
55027: PUSH
55028: LD_EXP 47
55032: PPUSH
55033: LD_VAR 0 5
55037: PPUSH
55038: LD_EXP 47
55042: PUSH
55043: LD_VAR 0 5
55047: ARRAY
55048: PUSH
55049: LD_INT 1
55051: PLUS
55052: PPUSH
55053: CALL_OW 1
55057: ST_TO_ADDR
// for i in mpTeams [ team ] do
55058: LD_ADDR_VAR 0 3
55062: PUSH
55063: LD_EXP 8
55067: PUSH
55068: LD_VAR 0 5
55072: ARRAY
55073: PUSH
55074: FOR_IN
55075: IFFALSE 55099
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55077: LD_VAR 0 3
55081: PPUSH
55082: LD_EXP 47
55086: PUSH
55087: LD_VAR 0 5
55091: ARRAY
55092: PPUSH
55093: CALL_OW 506
55097: GO 55074
55099: POP
55100: POP
// end else
55101: GO 55212
// begin first := depots [ 1 ] ;
55103: LD_ADDR_VAR 0 4
55107: PUSH
55108: LD_VAR 0 1
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: ST_TO_ADDR
// side := GetSide ( first ) ;
55117: LD_ADDR_VAR 0 6
55121: PUSH
55122: LD_VAR 0 4
55126: PPUSH
55127: CALL_OW 255
55131: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55132: LD_EXP 32
55136: PPUSH
55137: LD_INT 81
55139: PUSH
55140: LD_VAR 0 6
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PPUSH
55149: CALL_OW 70
55153: IFFALSE 55157
// exit ;
55155: GO 55212
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55157: LD_ADDR_EXP 47
55161: PUSH
55162: LD_EXP 47
55166: PPUSH
55167: LD_VAR 0 6
55171: PPUSH
55172: LD_EXP 47
55176: PUSH
55177: LD_VAR 0 6
55181: ARRAY
55182: PUSH
55183: LD_INT 1
55185: PLUS
55186: PPUSH
55187: CALL_OW 1
55191: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55192: LD_VAR 0 6
55196: PPUSH
55197: LD_EXP 47
55201: PUSH
55202: LD_VAR 0 6
55206: ARRAY
55207: PPUSH
55208: CALL_OW 506
// end ; end ;
55212: LD_VAR 0 2
55216: RET
// function UpdateCounter ; var i ; begin
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
// result := [ ] ;
55221: LD_ADDR_VAR 0 1
55225: PUSH
55226: EMPTY
55227: ST_TO_ADDR
// if mpTeamGame then
55228: LD_EXP 9
55232: IFFALSE 55299
// begin for i := 1 to mpTeams do
55234: LD_ADDR_VAR 0 2
55238: PUSH
55239: DOUBLE
55240: LD_INT 1
55242: DEC
55243: ST_TO_ADDR
55244: LD_EXP 8
55248: PUSH
55249: FOR_TO
55250: IFFALSE 55295
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55252: LD_ADDR_VAR 0 1
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_STRING #KingoftheHill-Team
55264: PUSH
55265: LD_VAR 0 2
55269: PUSH
55270: LD_EXP 47
55274: PUSH
55275: LD_VAR 0 2
55279: ARRAY
55280: PUSH
55281: LD_EXP 33
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: ADD
55292: ST_TO_ADDR
55293: GO 55249
55295: POP
55296: POP
// end else
55297: GO 55372
// begin for i := 1 to 8 do
55299: LD_ADDR_VAR 0 2
55303: PUSH
55304: DOUBLE
55305: LD_INT 1
55307: DEC
55308: ST_TO_ADDR
55309: LD_INT 8
55311: PUSH
55312: FOR_TO
55313: IFFALSE 55370
// if mpSidePositions [ i ] then
55315: LD_EXP 5
55319: PUSH
55320: LD_VAR 0 2
55324: ARRAY
55325: IFFALSE 55368
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55327: LD_ADDR_VAR 0 1
55331: PUSH
55332: LD_VAR 0 1
55336: PUSH
55337: LD_STRING #KingoftheHill-Player
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_EXP 47
55349: PUSH
55350: LD_VAR 0 2
55354: ARRAY
55355: PUSH
55356: LD_EXP 33
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ADD
55367: ST_TO_ADDR
55368: GO 55312
55370: POP
55371: POP
// end ; mpDisplayStrings := result ;
55372: LD_ADDR_EXP 36
55376: PUSH
55377: LD_VAR 0 1
55381: ST_TO_ADDR
// end ;
55382: LD_VAR 0 1
55386: RET
// export function HowMuchPointsKing ( side ) ; begin
55387: LD_INT 0
55389: PPUSH
// result := HowMuchPoints ( side ) ;
55390: LD_ADDR_VAR 0 2
55394: PUSH
55395: LD_VAR 0 1
55399: PPUSH
55400: CALL 55410 0 1
55404: ST_TO_ADDR
// end ;
55405: LD_VAR 0 2
55409: RET
// function HowMuchPoints ( side ) ; var i ; begin
55410: LD_INT 0
55412: PPUSH
55413: PPUSH
// if mpTeamGame then
55414: LD_EXP 9
55418: IFFALSE 55487
// begin for i := 1 to Count ( mpTeams ) do
55420: LD_ADDR_VAR 0 3
55424: PUSH
55425: DOUBLE
55426: LD_INT 1
55428: DEC
55429: ST_TO_ADDR
55430: LD_EXP 8
55434: PPUSH
55435: CALL 5165 0 1
55439: PUSH
55440: FOR_TO
55441: IFFALSE 55483
// begin if side in mpTeams [ i ] then
55443: LD_VAR 0 1
55447: PUSH
55448: LD_EXP 8
55452: PUSH
55453: LD_VAR 0 3
55457: ARRAY
55458: IN
55459: IFFALSE 55481
// begin result := mpKingPoints [ i ] ;
55461: LD_ADDR_VAR 0 2
55465: PUSH
55466: LD_EXP 47
55470: PUSH
55471: LD_VAR 0 3
55475: ARRAY
55476: ST_TO_ADDR
// exit ;
55477: POP
55478: POP
55479: GO 55503
// end ; end ;
55481: GO 55440
55483: POP
55484: POP
// end else
55485: GO 55503
// result := mpKingPoints [ side ] ;
55487: LD_ADDR_VAR 0 2
55491: PUSH
55492: LD_EXP 47
55496: PUSH
55497: LD_VAR 0 1
55501: ARRAY
55502: ST_TO_ADDR
// end ;
55503: LD_VAR 0 2
55507: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55508: LD_EXP 37
55512: IFFALSE 55520
55514: PUSH
55515: CALL 55932 0 0
55519: AND
55520: IFFALSE 55528
55522: PUSH
55523: LD_OWVAR 4
55527: AND
55528: IFFALSE 55781
55530: GO 55532
55532: DISABLE
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
// begin canWin := false ;
55537: LD_ADDR_VAR 0 2
55541: PUSH
55542: LD_INT 0
55544: ST_TO_ADDR
// if not HasPower ( your_side ) then
55545: LD_OWVAR 2
55549: PPUSH
55550: CALL 55974 0 1
55554: NOT
55555: IFFALSE 55566
// begin Multiplayer_Loose_Message ;
55557: CALL_OW 521
// enable ( mpLose ) ;
55561: LD_INT 102
55563: ENABLE_MARKED
// end else
55564: GO 55781
// begin if not EnemiesInGame then
55566: CALL 55784 0 0
55570: NOT
55571: IFFALSE 55578
// begin enable ( mpWin ) ;
55573: LD_INT 101
55575: ENABLE_MARKED
// exit ;
55576: GO 55781
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55578: LD_ADDR_VAR 0 2
55582: PUSH
55583: LD_OWVAR 2
55587: PPUSH
55588: CALL 55410 0 1
55592: PUSH
55593: LD_EXP 33
55597: GREATEREQUAL
55598: IFFALSE 55611
55600: PUSH
55601: LD_OWVAR 2
55605: PPUSH
55606: CALL 55974 0 1
55610: AND
55611: ST_TO_ADDR
// for i := 1 to 8 do
55612: LD_ADDR_VAR 0 1
55616: PUSH
55617: DOUBLE
55618: LD_INT 1
55620: DEC
55621: ST_TO_ADDR
55622: LD_INT 8
55624: PUSH
55625: FOR_TO
55626: IFFALSE 55767
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55628: LD_EXP 5
55632: PUSH
55633: LD_VAR 0 1
55637: ARRAY
55638: IFFALSE 55651
55640: PUSH
55641: LD_VAR 0 1
55645: PPUSH
55646: CALL_OW 108
55650: AND
55651: IFFALSE 55665
55653: PUSH
55654: LD_VAR 0 1
55658: PUSH
55659: LD_OWVAR 2
55663: NONEQUAL
55664: AND
55665: IFFALSE 55765
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55667: LD_EXP 6
55671: PUSH
55672: LD_VAR 0 1
55676: ARRAY
55677: NOT
55678: IFTRUE 55726
55680: PUSH
55681: LD_EXP 6
55685: PUSH
55686: LD_VAR 0 1
55690: ARRAY
55691: PUSH
55692: LD_EXP 6
55696: PUSH
55697: LD_OWVAR 2
55701: ARRAY
55702: NONEQUAL
55703: IFFALSE 55725
55705: PUSH
55706: LD_OWVAR 2
55710: PPUSH
55711: LD_VAR 0 1
55715: PPUSH
55716: CALL_OW 81
55720: PUSH
55721: LD_INT 1
55723: NONEQUAL
55724: AND
55725: OR
55726: IFFALSE 55765
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55728: LD_VAR 0 1
55732: PPUSH
55733: CALL 55410 0 1
55737: PUSH
55738: LD_EXP 33
55742: GREATEREQUAL
55743: IFFALSE 55756
55745: PUSH
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL 55974 0 1
55755: AND
55756: IFFALSE 55765
// begin enable ( mpLose ) ;
55758: LD_INT 102
55760: ENABLE_MARKED
// exit ;
55761: POP
55762: POP
55763: GO 55781
// end ;
55765: GO 55625
55767: POP
55768: POP
// if canWin then
55769: LD_VAR 0 2
55773: IFFALSE 55780
// enable ( mpWin ) else
55775: LD_INT 101
55777: ENABLE_MARKED
55778: GO 55781
// enable ;
55780: ENABLE
// end ; end ;
55781: PPOPN 2
55783: END
// function EnemiesInGame ; var i ; begin
55784: LD_INT 0
55786: PPUSH
55787: PPUSH
// result := false ;
55788: LD_ADDR_VAR 0 1
55792: PUSH
55793: LD_INT 0
55795: ST_TO_ADDR
// for i := 1 to 8 do
55796: LD_ADDR_VAR 0 2
55800: PUSH
55801: DOUBLE
55802: LD_INT 1
55804: DEC
55805: ST_TO_ADDR
55806: LD_INT 8
55808: PUSH
55809: FOR_TO
55810: IFFALSE 55925
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55812: LD_VAR 0 2
55816: PUSH
55817: LD_OWVAR 2
55821: NONEQUAL
55822: IFFALSE 55835
55824: PUSH
55825: LD_VAR 0 2
55829: PPUSH
55830: CALL 55974 0 1
55834: AND
55835: IFFALSE 55848
55837: PUSH
55838: LD_VAR 0 2
55842: PPUSH
55843: CALL_OW 108
55847: AND
55848: IFFALSE 55923
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55850: LD_EXP 6
55854: PUSH
55855: LD_VAR 0 2
55859: ARRAY
55860: NOT
55861: IFTRUE 55909
55863: PUSH
55864: LD_EXP 6
55868: PUSH
55869: LD_VAR 0 2
55873: ARRAY
55874: PUSH
55875: LD_EXP 6
55879: PUSH
55880: LD_OWVAR 2
55884: ARRAY
55885: NONEQUAL
55886: IFFALSE 55908
55888: PUSH
55889: LD_OWVAR 2
55893: PPUSH
55894: LD_VAR 0 2
55898: PPUSH
55899: CALL_OW 81
55903: PUSH
55904: LD_INT 1
55906: NONEQUAL
55907: AND
55908: OR
55909: IFFALSE 55923
// begin result := true ;
55911: LD_ADDR_VAR 0 1
55915: PUSH
55916: LD_INT 1
55918: ST_TO_ADDR
// exit ;
55919: POP
55920: POP
55921: GO 55927
// end ;
55923: GO 55809
55925: POP
55926: POP
// end ;
55927: LD_VAR 0 1
55931: RET
// function CanWinLoose ; begin
55932: LD_INT 0
55934: PPUSH
// result := true ;
55935: LD_ADDR_VAR 0 1
55939: PUSH
55940: LD_INT 1
55942: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55943: CALL_OW 531
55947: IFFALSE 55959
55949: PUSH
55950: CALL_OW 519
55954: PUSH
55955: LD_INT 1
55957: GREATER
55958: AND
55959: IFFALSE 55969
// result := false ;
55961: LD_ADDR_VAR 0 1
55965: PUSH
55966: LD_INT 0
55968: ST_TO_ADDR
// end ;
55969: LD_VAR 0 1
55973: RET
// function HasPower ( i ) ; begin
55974: LD_INT 0
55976: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55977: LD_ADDR_VAR 0 2
55981: PUSH
55982: LD_INT 22
55984: PUSH
55985: LD_VAR 0 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 21
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 33
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 33
56019: PUSH
56020: LD_INT 5
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PPUSH
56037: CALL_OW 69
56041: ST_TO_ADDR
// end ; end_of_file end_of_file
56042: LD_VAR 0 2
56046: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 200
56054: DOUBLE
56055: GREATEREQUAL
56056: IFFALSE 56064
56058: LD_INT 299
56060: DOUBLE
56061: LESSEQUAL
56062: IFTRUE 56066
56064: GO 56098
56066: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56067: LD_VAR 0 1
56071: PPUSH
56072: LD_VAR 0 2
56076: PPUSH
56077: LD_VAR 0 3
56081: PPUSH
56082: LD_VAR 0 4
56086: PPUSH
56087: LD_VAR 0 5
56091: PPUSH
56092: CALL 56960 0 5
56096: GO 56175
56098: LD_INT 300
56100: DOUBLE
56101: GREATEREQUAL
56102: IFFALSE 56110
56104: LD_INT 399
56106: DOUBLE
56107: LESSEQUAL
56108: IFTRUE 56112
56110: GO 56174
56112: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56113: LD_VAR 0 1
56117: PPUSH
56118: LD_VAR 0 2
56122: PPUSH
56123: LD_VAR 0 3
56127: PPUSH
56128: LD_VAR 0 4
56132: PPUSH
56133: LD_VAR 0 5
56137: PPUSH
56138: LD_VAR 0 6
56142: PPUSH
56143: LD_VAR 0 7
56147: PPUSH
56148: LD_VAR 0 8
56152: PPUSH
56153: LD_VAR 0 9
56157: PPUSH
56158: LD_VAR 0 10
56162: PPUSH
56163: LD_VAR 0 11
56167: PPUSH
56168: CALL 63281 0 11
56172: GO 56175
56174: POP
// end ;
56175: PPOPN 11
56177: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56178: LD_VAR 0 1
56182: PPUSH
56183: LD_VAR 0 2
56187: PPUSH
56188: LD_VAR 0 3
56192: PPUSH
56193: LD_VAR 0 4
56197: PPUSH
56198: LD_VAR 0 5
56202: PPUSH
56203: CALL 56260 0 5
// end ; end_of_file
56207: PPOPN 5
56209: END
// export function SOS_UnitDestroyed ( un ) ; begin
56210: LD_INT 0
56212: PPUSH
// ComRadiation ( un ) ;
56213: LD_VAR 0 1
56217: PPUSH
56218: CALL 57380 0 1
// end ;
56222: LD_VAR 0 2
56226: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56227: LD_INT 0
56229: PPUSH
// ComRadiation ( un ) ;
56230: LD_VAR 0 1
56234: PPUSH
56235: CALL 57380 0 1
// end ;
56239: LD_VAR 0 2
56243: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56244: LD_INT 0
56246: PPUSH
// end ;
56247: LD_VAR 0 4
56251: RET
// export function SOS_Command ( cmd ) ; begin
56252: LD_INT 0
56254: PPUSH
// end ;
56255: LD_VAR 0 2
56259: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56260: LD_INT 0
56262: PPUSH
// end ;
56263: LD_VAR 0 6
56267: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56268: LD_INT 0
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
// if not vehicle or not factory then
56275: LD_VAR 0 1
56279: NOT
56280: IFTRUE 56289
56282: PUSH
56283: LD_VAR 0 2
56287: NOT
56288: OR
56289: IFFALSE 56293
// exit ;
56291: GO 56955
// weapon := GetWeapon ( vehicle ) ;
56293: LD_ADDR_VAR 0 7
56297: PUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 264
56307: ST_TO_ADDR
// if weapon = ar_miner then
56308: LD_VAR 0 7
56312: PUSH
56313: LD_INT 81
56315: EQUAL
56316: IFFALSE 56373
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56318: LD_ADDR_EXP 55
56322: PUSH
56323: LD_EXP 55
56327: PPUSH
56328: LD_EXP 55
56332: PUSH
56333: LD_INT 1
56335: PLUS
56336: PPUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: CALL_OW 1
56346: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56347: LD_ADDR_EXP 56
56351: PUSH
56352: LD_EXP 56
56356: PPUSH
56357: LD_EXP 56
56361: PUSH
56362: LD_INT 1
56364: PLUS
56365: PPUSH
56366: EMPTY
56367: PPUSH
56368: CALL_OW 1
56372: ST_TO_ADDR
// end ; if not factoryWaypoints then
56373: LD_EXP 58
56377: NOT
56378: IFFALSE 56382
// exit ;
56380: GO 56955
// for i := 1 to Count ( factoryWaypoints ) do
56382: LD_ADDR_VAR 0 4
56386: PUSH
56387: DOUBLE
56388: LD_INT 1
56390: DEC
56391: ST_TO_ADDR
56392: LD_EXP 58
56396: PPUSH
56397: CALL 5165 0 1
56401: PUSH
56402: FOR_TO
56403: IFFALSE 56953
// if factoryWaypoints [ i ] [ 2 ] = factory then
56405: LD_EXP 58
56409: PUSH
56410: LD_VAR 0 4
56414: ARRAY
56415: PUSH
56416: LD_INT 2
56418: ARRAY
56419: PUSH
56420: LD_VAR 0 2
56424: EQUAL
56425: IFFALSE 56951
// begin if GetControl ( vehicle ) = control_manual then
56427: LD_VAR 0 1
56431: PPUSH
56432: CALL_OW 263
56436: PUSH
56437: LD_INT 1
56439: EQUAL
56440: IFFALSE 56804
// begin driver := IsDrivenBy ( vehicle ) ;
56442: LD_ADDR_VAR 0 5
56446: PUSH
56447: LD_VAR 0 1
56451: PPUSH
56452: CALL_OW 311
56456: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56457: LD_VAR 0 5
56461: PUSH
56462: LD_EXP 59
56466: IN
56467: IFTRUE 56481
56469: PUSH
56470: LD_VAR 0 1
56474: PUSH
56475: LD_EXP 59
56479: IN
56480: OR
56481: IFFALSE 56487
// exit ;
56483: POP
56484: POP
56485: GO 56955
// if not HasTask ( driver ) then
56487: LD_VAR 0 5
56491: PPUSH
56492: CALL_OW 314
56496: NOT
56497: IFFALSE 56802
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56499: LD_ADDR_EXP 59
56503: PUSH
56504: LD_EXP 59
56508: PPUSH
56509: LD_VAR 0 5
56513: PPUSH
56514: CALL 41131 0 2
56518: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56519: LD_ADDR_EXP 59
56523: PUSH
56524: LD_EXP 59
56528: PPUSH
56529: LD_VAR 0 1
56533: PPUSH
56534: CALL 41131 0 2
56538: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56539: LD_ADDR_VAR 0 6
56543: PUSH
56544: LD_EXP 58
56548: PUSH
56549: LD_VAR 0 4
56553: ARRAY
56554: PUSH
56555: LD_INT 3
56557: ARRAY
56558: PPUSH
56559: LD_EXP 58
56563: PUSH
56564: LD_VAR 0 4
56568: ARRAY
56569: PUSH
56570: LD_INT 4
56572: ARRAY
56573: PPUSH
56574: CALL_OW 428
56578: ST_TO_ADDR
// if hex then
56579: LD_VAR 0 6
56583: IFFALSE 56601
// ComMoveUnit ( driver , hex ) else
56585: LD_VAR 0 5
56589: PPUSH
56590: LD_VAR 0 6
56594: PPUSH
56595: CALL_OW 112
56599: GO 56685
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_EXP 58
56610: PUSH
56611: LD_VAR 0 4
56615: ARRAY
56616: PUSH
56617: LD_INT 3
56619: ARRAY
56620: PPUSH
56621: LD_EXP 58
56625: PUSH
56626: LD_VAR 0 4
56630: ARRAY
56631: PUSH
56632: LD_INT 4
56634: ARRAY
56635: PPUSH
56636: CALL_OW 297
56640: PUSH
56641: LD_INT 0
56643: GREATER
56644: IFFALSE 56685
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56646: LD_VAR 0 5
56650: PPUSH
56651: LD_EXP 58
56655: PUSH
56656: LD_VAR 0 4
56660: ARRAY
56661: PUSH
56662: LD_INT 3
56664: ARRAY
56665: PPUSH
56666: LD_EXP 58
56670: PUSH
56671: LD_VAR 0 4
56675: ARRAY
56676: PUSH
56677: LD_INT 4
56679: ARRAY
56680: PPUSH
56681: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56685: LD_VAR 0 5
56689: PPUSH
56690: CALL_OW 181
// if Multiplayer then
56694: LD_OWVAR 4
56698: IFFALSE 56747
// begin repeat wait ( 10 ) ;
56700: LD_INT 10
56702: PPUSH
56703: CALL_OW 67
// until not IsInUnit ( driver ) ;
56707: LD_VAR 0 5
56711: PPUSH
56712: CALL_OW 310
56716: NOT
56717: IFFALSE 56700
// if not HasTask ( driver ) then
56719: LD_VAR 0 5
56723: PPUSH
56724: CALL_OW 314
56728: NOT
56729: IFFALSE 56745
// ComEnterUnit ( driver , factory ) ;
56731: LD_VAR 0 5
56735: PPUSH
56736: LD_VAR 0 2
56740: PPUSH
56741: CALL_OW 120
// end else
56745: GO 56761
// AddComEnterUnit ( driver , factory ) ;
56747: LD_VAR 0 5
56751: PPUSH
56752: LD_VAR 0 2
56756: PPUSH
56757: CALL_OW 180
// wait ( 0 0$1 ) ;
56761: LD_INT 35
56763: PPUSH
56764: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56768: LD_ADDR_EXP 59
56772: PUSH
56773: LD_EXP 59
56777: PUSH
56778: LD_VAR 0 5
56782: DIFF
56783: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56784: LD_ADDR_EXP 59
56788: PUSH
56789: LD_EXP 59
56793: PUSH
56794: LD_VAR 0 1
56798: DIFF
56799: ST_TO_ADDR
// break ;
56800: GO 56953
// end ; end else
56802: GO 56951
// if GetControl ( vehicle ) = control_remote then
56804: LD_VAR 0 1
56808: PPUSH
56809: CALL_OW 263
56813: PUSH
56814: LD_INT 2
56816: EQUAL
56817: IFFALSE 56903
// begin wait ( 0 0$2 ) ;
56819: LD_INT 70
56821: PPUSH
56822: CALL_OW 67
// repeat wait ( 10 ) ;
56826: LD_INT 10
56828: PPUSH
56829: CALL_OW 67
// Connect ( vehicle ) ;
56833: LD_VAR 0 1
56837: PPUSH
56838: CALL 11443 0 1
// until IsControledBy ( vehicle ) ;
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL_OW 312
56851: IFFALSE 56826
// wait ( 10 ) ;
56853: LD_INT 10
56855: PPUSH
56856: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56860: LD_VAR 0 1
56864: PPUSH
56865: LD_EXP 58
56869: PUSH
56870: LD_VAR 0 4
56874: ARRAY
56875: PUSH
56876: LD_INT 3
56878: ARRAY
56879: PPUSH
56880: LD_EXP 58
56884: PUSH
56885: LD_VAR 0 4
56889: ARRAY
56890: PUSH
56891: LD_INT 4
56893: ARRAY
56894: PPUSH
56895: CALL_OW 111
// break ;
56899: GO 56953
// end else
56901: GO 56951
// begin wait ( 0 0$3 ) ;
56903: LD_INT 105
56905: PPUSH
56906: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56910: LD_VAR 0 1
56914: PPUSH
56915: LD_EXP 58
56919: PUSH
56920: LD_VAR 0 4
56924: ARRAY
56925: PUSH
56926: LD_INT 3
56928: ARRAY
56929: PPUSH
56930: LD_EXP 58
56934: PUSH
56935: LD_VAR 0 4
56939: ARRAY
56940: PUSH
56941: LD_INT 4
56943: ARRAY
56944: PPUSH
56945: CALL_OW 111
// break ;
56949: GO 56953
// end ; end ;
56951: GO 56402
56953: POP
56954: POP
// end ;
56955: LD_VAR 0 3
56959: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56960: LD_INT 0
56962: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56963: LD_VAR 0 1
56967: PUSH
56968: LD_INT 250
56970: EQUAL
56971: IFFALSE 56988
56973: PUSH
56974: LD_VAR 0 2
56978: PPUSH
56979: CALL_OW 264
56983: PUSH
56984: LD_INT 81
56986: EQUAL
56987: AND
56988: IFFALSE 57009
// MinerPlaceMine ( unit , x , y ) ;
56990: LD_VAR 0 2
56994: PPUSH
56995: LD_VAR 0 4
56999: PPUSH
57000: LD_VAR 0 5
57004: PPUSH
57005: CALL 60290 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57009: LD_VAR 0 1
57013: PUSH
57014: LD_INT 251
57016: EQUAL
57017: IFFALSE 57034
57019: PUSH
57020: LD_VAR 0 2
57024: PPUSH
57025: CALL_OW 264
57029: PUSH
57030: LD_INT 81
57032: EQUAL
57033: AND
57034: IFFALSE 57055
// MinerDetonateMine ( unit , x , y ) ;
57036: LD_VAR 0 2
57040: PPUSH
57041: LD_VAR 0 4
57045: PPUSH
57046: LD_VAR 0 5
57050: PPUSH
57051: CALL 60697 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57055: LD_VAR 0 1
57059: PUSH
57060: LD_INT 252
57062: EQUAL
57063: IFFALSE 57080
57065: PUSH
57066: LD_VAR 0 2
57070: PPUSH
57071: CALL_OW 264
57075: PUSH
57076: LD_INT 81
57078: EQUAL
57079: AND
57080: IFFALSE 57101
// MinerCreateMinefield ( unit , x , y ) ;
57082: LD_VAR 0 2
57086: PPUSH
57087: LD_VAR 0 4
57091: PPUSH
57092: LD_VAR 0 5
57096: PPUSH
57097: CALL 60929 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 253
57108: EQUAL
57109: IFFALSE 57126
57111: PUSH
57112: LD_VAR 0 2
57116: PPUSH
57117: CALL_OW 257
57121: PUSH
57122: LD_INT 5
57124: EQUAL
57125: AND
57126: IFFALSE 57147
// ComBinocular ( unit , x , y ) ;
57128: LD_VAR 0 2
57132: PPUSH
57133: LD_VAR 0 4
57137: PPUSH
57138: LD_VAR 0 5
57142: PPUSH
57143: CALL 61304 0 3
// if selectedUnit then
57147: LD_VAR 0 3
57151: IFFALSE 57211
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57153: LD_VAR 0 1
57157: PUSH
57158: LD_INT 254
57160: EQUAL
57161: IFFALSE 57178
57163: PUSH
57164: LD_VAR 0 2
57168: PPUSH
57169: CALL_OW 264
57173: PUSH
57174: LD_INT 99
57176: EQUAL
57177: AND
57178: IFFALSE 57195
57180: PUSH
57181: LD_VAR 0 3
57185: PPUSH
57186: CALL_OW 263
57190: PUSH
57191: LD_INT 3
57193: EQUAL
57194: AND
57195: IFFALSE 57211
// HackDestroyVehicle ( unit , selectedUnit ) ;
57197: LD_VAR 0 2
57201: PPUSH
57202: LD_VAR 0 3
57206: PPUSH
57207: CALL 59501 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57211: LD_VAR 0 1
57215: PUSH
57216: LD_INT 255
57218: EQUAL
57219: IFFALSE 57243
57221: PUSH
57222: LD_VAR 0 2
57226: PPUSH
57227: CALL_OW 264
57231: PUSH
57232: LD_INT 14
57234: PUSH
57235: LD_INT 53
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: IN
57242: AND
57243: IFFALSE 57261
57245: PUSH
57246: LD_VAR 0 4
57250: PPUSH
57251: LD_VAR 0 5
57255: PPUSH
57256: CALL_OW 488
57260: AND
57261: IFFALSE 57285
// CutTreeXYR ( unit , x , y , 12 ) ;
57263: LD_VAR 0 2
57267: PPUSH
57268: LD_VAR 0 4
57272: PPUSH
57273: LD_VAR 0 5
57277: PPUSH
57278: LD_INT 12
57280: PPUSH
57281: CALL 57476 0 4
// if cmd = 256 then
57285: LD_VAR 0 1
57289: PUSH
57290: LD_INT 256
57292: EQUAL
57293: IFFALSE 57314
// SetFactoryWaypoint ( unit , x , y ) ;
57295: LD_VAR 0 2
57299: PPUSH
57300: LD_VAR 0 4
57304: PPUSH
57305: LD_VAR 0 5
57309: PPUSH
57310: CALL 63289 0 3
// if cmd = 257 then
57314: LD_VAR 0 1
57318: PUSH
57319: LD_INT 257
57321: EQUAL
57322: IFFALSE 57343
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57324: LD_VAR 0 2
57328: PPUSH
57329: LD_VAR 0 4
57333: PPUSH
57334: LD_VAR 0 5
57338: PPUSH
57339: CALL 63785 0 3
// if cmd = 258 then
57343: LD_VAR 0 1
57347: PUSH
57348: LD_INT 258
57350: EQUAL
57351: IFFALSE 57375
// BurnTreeXYR ( unit , x , y , 8 ) ;
57353: LD_VAR 0 2
57357: PPUSH
57358: LD_VAR 0 4
57362: PPUSH
57363: LD_VAR 0 5
57367: PPUSH
57368: LD_INT 8
57370: PPUSH
57371: CALL 57876 0 4
// end ;
57375: LD_VAR 0 6
57379: RET
// export function ComRadiation ( un ) ; var eff ; begin
57380: LD_INT 0
57382: PPUSH
57383: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57384: LD_VAR 0 1
57388: PPUSH
57389: CALL_OW 264
57393: PUSH
57394: LD_INT 91
57396: NONEQUAL
57397: IFFALSE 57401
// exit ;
57399: GO 57471
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57401: LD_INT 68
57403: PPUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: CALL_OW 255
57413: PPUSH
57414: CALL_OW 321
57418: PUSH
57419: LD_INT 2
57421: EQUAL
57422: IFFALSE 57434
// eff := 50 else
57424: LD_ADDR_VAR 0 3
57428: PUSH
57429: LD_INT 50
57431: ST_TO_ADDR
57432: GO 57442
// eff := 25 ;
57434: LD_ADDR_VAR 0 3
57438: PUSH
57439: LD_INT 25
57441: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57442: LD_VAR 0 1
57446: PPUSH
57447: CALL_OW 250
57451: PPUSH
57452: LD_VAR 0 1
57456: PPUSH
57457: CALL_OW 251
57461: PPUSH
57462: LD_VAR 0 3
57466: PPUSH
57467: CALL_OW 495
// end ;
57471: LD_VAR 0 2
57475: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
57486: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 302
57496: NOT
57497: IFTRUE 57516
57499: PUSH
57500: LD_VAR 0 2
57504: PPUSH
57505: LD_VAR 0 3
57509: PPUSH
57510: CALL_OW 488
57514: NOT
57515: OR
57516: IFTRUE 57525
57518: PUSH
57519: LD_VAR 0 4
57523: NOT
57524: OR
57525: IFFALSE 57529
// exit ;
57527: GO 57871
// list := [ ] ;
57529: LD_ADDR_VAR 0 13
57533: PUSH
57534: EMPTY
57535: ST_TO_ADDR
// if x - r < 0 then
57536: LD_VAR 0 2
57540: PUSH
57541: LD_VAR 0 4
57545: MINUS
57546: PUSH
57547: LD_INT 0
57549: LESS
57550: IFFALSE 57562
// min_x := 0 else
57552: LD_ADDR_VAR 0 7
57556: PUSH
57557: LD_INT 0
57559: ST_TO_ADDR
57560: GO 57578
// min_x := x - r ;
57562: LD_ADDR_VAR 0 7
57566: PUSH
57567: LD_VAR 0 2
57571: PUSH
57572: LD_VAR 0 4
57576: MINUS
57577: ST_TO_ADDR
// if y - r < 0 then
57578: LD_VAR 0 3
57582: PUSH
57583: LD_VAR 0 4
57587: MINUS
57588: PUSH
57589: LD_INT 0
57591: LESS
57592: IFFALSE 57604
// min_y := 0 else
57594: LD_ADDR_VAR 0 8
57598: PUSH
57599: LD_INT 0
57601: ST_TO_ADDR
57602: GO 57620
// min_y := y - r ;
57604: LD_ADDR_VAR 0 8
57608: PUSH
57609: LD_VAR 0 3
57613: PUSH
57614: LD_VAR 0 4
57618: MINUS
57619: ST_TO_ADDR
// max_x := x + r ;
57620: LD_ADDR_VAR 0 9
57624: PUSH
57625: LD_VAR 0 2
57629: PUSH
57630: LD_VAR 0 4
57634: PLUS
57635: ST_TO_ADDR
// max_y := y + r ;
57636: LD_ADDR_VAR 0 10
57640: PUSH
57641: LD_VAR 0 3
57645: PUSH
57646: LD_VAR 0 4
57650: PLUS
57651: ST_TO_ADDR
// for _x = min_x to max_x do
57652: LD_ADDR_VAR 0 11
57656: PUSH
57657: DOUBLE
57658: LD_VAR 0 7
57662: DEC
57663: ST_TO_ADDR
57664: LD_VAR 0 9
57668: PUSH
57669: FOR_TO
57670: IFFALSE 57789
// for _y = min_y to max_y do
57672: LD_ADDR_VAR 0 12
57676: PUSH
57677: DOUBLE
57678: LD_VAR 0 8
57682: DEC
57683: ST_TO_ADDR
57684: LD_VAR 0 10
57688: PUSH
57689: FOR_TO
57690: IFFALSE 57785
// begin if not ValidHex ( _x , _y ) then
57692: LD_VAR 0 11
57696: PPUSH
57697: LD_VAR 0 12
57701: PPUSH
57702: CALL_OW 488
57706: NOT
57707: IFFALSE 57711
// continue ;
57709: GO 57689
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57711: LD_VAR 0 11
57715: PPUSH
57716: LD_VAR 0 12
57720: PPUSH
57721: CALL_OW 351
57725: IFFALSE 57743
57727: PUSH
57728: LD_VAR 0 11
57732: PPUSH
57733: LD_VAR 0 12
57737: PPUSH
57738: CALL_OW 554
57742: AND
57743: IFFALSE 57783
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57745: LD_ADDR_VAR 0 13
57749: PUSH
57750: LD_VAR 0 13
57754: PPUSH
57755: LD_VAR 0 13
57759: PUSH
57760: LD_INT 1
57762: PLUS
57763: PPUSH
57764: LD_VAR 0 11
57768: PUSH
57769: LD_VAR 0 12
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PPUSH
57778: CALL_OW 2
57782: ST_TO_ADDR
// end ;
57783: GO 57689
57785: POP
57786: POP
57787: GO 57669
57789: POP
57790: POP
// if not list then
57791: LD_VAR 0 13
57795: NOT
57796: IFFALSE 57800
// exit ;
57798: GO 57871
// for i in list do
57800: LD_ADDR_VAR 0 6
57804: PUSH
57805: LD_VAR 0 13
57809: PUSH
57810: FOR_IN
57811: IFFALSE 57869
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57813: LD_VAR 0 1
57817: PPUSH
57818: LD_STRING M
57820: PUSH
57821: LD_VAR 0 6
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PUSH
57830: LD_VAR 0 6
57834: PUSH
57835: LD_INT 2
57837: ARRAY
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: PUSH
57860: EMPTY
57861: LIST
57862: PPUSH
57863: CALL_OW 447
57867: GO 57810
57869: POP
57870: POP
// end ;
57871: LD_VAR 0 5
57875: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57876: LD_INT 0
57878: PPUSH
57879: PPUSH
57880: PPUSH
57881: PPUSH
57882: PPUSH
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
57887: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57888: LD_VAR 0 1
57892: PPUSH
57893: CALL_OW 302
57897: NOT
57898: IFTRUE 57917
57900: PUSH
57901: LD_VAR 0 2
57905: PPUSH
57906: LD_VAR 0 3
57910: PPUSH
57911: CALL_OW 488
57915: NOT
57916: OR
57917: IFTRUE 57926
57919: PUSH
57920: LD_VAR 0 4
57924: NOT
57925: OR
57926: IFFALSE 57930
// exit ;
57928: GO 58447
// list := [ ] ;
57930: LD_ADDR_VAR 0 13
57934: PUSH
57935: EMPTY
57936: ST_TO_ADDR
// if x - r < 0 then
57937: LD_VAR 0 2
57941: PUSH
57942: LD_VAR 0 4
57946: MINUS
57947: PUSH
57948: LD_INT 0
57950: LESS
57951: IFFALSE 57963
// min_x := 0 else
57953: LD_ADDR_VAR 0 7
57957: PUSH
57958: LD_INT 0
57960: ST_TO_ADDR
57961: GO 57979
// min_x := x - r ;
57963: LD_ADDR_VAR 0 7
57967: PUSH
57968: LD_VAR 0 2
57972: PUSH
57973: LD_VAR 0 4
57977: MINUS
57978: ST_TO_ADDR
// if y - r < 0 then
57979: LD_VAR 0 3
57983: PUSH
57984: LD_VAR 0 4
57988: MINUS
57989: PUSH
57990: LD_INT 0
57992: LESS
57993: IFFALSE 58005
// min_y := 0 else
57995: LD_ADDR_VAR 0 8
57999: PUSH
58000: LD_INT 0
58002: ST_TO_ADDR
58003: GO 58021
// min_y := y - r ;
58005: LD_ADDR_VAR 0 8
58009: PUSH
58010: LD_VAR 0 3
58014: PUSH
58015: LD_VAR 0 4
58019: MINUS
58020: ST_TO_ADDR
// max_x := x + r ;
58021: LD_ADDR_VAR 0 9
58025: PUSH
58026: LD_VAR 0 2
58030: PUSH
58031: LD_VAR 0 4
58035: PLUS
58036: ST_TO_ADDR
// max_y := y + r ;
58037: LD_ADDR_VAR 0 10
58041: PUSH
58042: LD_VAR 0 3
58046: PUSH
58047: LD_VAR 0 4
58051: PLUS
58052: ST_TO_ADDR
// for _x = min_x to max_x do
58053: LD_ADDR_VAR 0 11
58057: PUSH
58058: DOUBLE
58059: LD_VAR 0 7
58063: DEC
58064: ST_TO_ADDR
58065: LD_VAR 0 9
58069: PUSH
58070: FOR_TO
58071: IFFALSE 58190
// for _y = min_y to max_y do
58073: LD_ADDR_VAR 0 12
58077: PUSH
58078: DOUBLE
58079: LD_VAR 0 8
58083: DEC
58084: ST_TO_ADDR
58085: LD_VAR 0 10
58089: PUSH
58090: FOR_TO
58091: IFFALSE 58186
// begin if not ValidHex ( _x , _y ) then
58093: LD_VAR 0 11
58097: PPUSH
58098: LD_VAR 0 12
58102: PPUSH
58103: CALL_OW 488
58107: NOT
58108: IFFALSE 58112
// continue ;
58110: GO 58090
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58112: LD_VAR 0 11
58116: PPUSH
58117: LD_VAR 0 12
58121: PPUSH
58122: CALL_OW 351
58126: IFFALSE 58144
58128: PUSH
58129: LD_VAR 0 11
58133: PPUSH
58134: LD_VAR 0 12
58138: PPUSH
58139: CALL_OW 554
58143: AND
58144: IFFALSE 58184
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58146: LD_ADDR_VAR 0 13
58150: PUSH
58151: LD_VAR 0 13
58155: PPUSH
58156: LD_VAR 0 13
58160: PUSH
58161: LD_INT 1
58163: PLUS
58164: PPUSH
58165: LD_VAR 0 11
58169: PUSH
58170: LD_VAR 0 12
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PPUSH
58179: CALL_OW 2
58183: ST_TO_ADDR
// end ;
58184: GO 58090
58186: POP
58187: POP
58188: GO 58070
58190: POP
58191: POP
// if not list then
58192: LD_VAR 0 13
58196: NOT
58197: IFFALSE 58201
// exit ;
58199: GO 58447
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58201: LD_ADDR_VAR 0 13
58205: PUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: LD_VAR 0 13
58215: PPUSH
58216: LD_INT 1
58218: PPUSH
58219: LD_INT 1
58221: PPUSH
58222: CALL 8571 0 4
58226: ST_TO_ADDR
// ComStop ( flame ) ;
58227: LD_VAR 0 1
58231: PPUSH
58232: CALL_OW 141
// for i in list do
58236: LD_ADDR_VAR 0 6
58240: PUSH
58241: LD_VAR 0 13
58245: PUSH
58246: FOR_IN
58247: IFFALSE 58278
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58249: LD_VAR 0 1
58253: PPUSH
58254: LD_VAR 0 6
58258: PUSH
58259: LD_INT 1
58261: ARRAY
58262: PPUSH
58263: LD_VAR 0 6
58267: PUSH
58268: LD_INT 2
58270: ARRAY
58271: PPUSH
58272: CALL_OW 176
58276: GO 58246
58278: POP
58279: POP
// repeat wait ( 0 0$1 ) ;
58280: LD_INT 35
58282: PPUSH
58283: CALL_OW 67
// task := GetTaskList ( flame ) ;
58287: LD_ADDR_VAR 0 14
58291: PUSH
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL_OW 437
58301: ST_TO_ADDR
// if not task then
58302: LD_VAR 0 14
58306: NOT
58307: IFFALSE 58311
// exit ;
58309: GO 58447
// if task [ 1 ] [ 1 ] <> | then
58311: LD_VAR 0 14
58315: PUSH
58316: LD_INT 1
58318: ARRAY
58319: PUSH
58320: LD_INT 1
58322: ARRAY
58323: PUSH
58324: LD_STRING |
58326: NONEQUAL
58327: IFFALSE 58331
// exit ;
58329: GO 58447
// _x := task [ 1 ] [ 2 ] ;
58331: LD_ADDR_VAR 0 11
58335: PUSH
58336: LD_VAR 0 14
58340: PUSH
58341: LD_INT 1
58343: ARRAY
58344: PUSH
58345: LD_INT 2
58347: ARRAY
58348: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58349: LD_ADDR_VAR 0 12
58353: PUSH
58354: LD_VAR 0 14
58358: PUSH
58359: LD_INT 1
58361: ARRAY
58362: PUSH
58363: LD_INT 3
58365: ARRAY
58366: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58367: LD_VAR 0 11
58371: PPUSH
58372: LD_VAR 0 12
58376: PPUSH
58377: CALL_OW 351
58381: NOT
58382: IFTRUE 58401
58384: PUSH
58385: LD_VAR 0 11
58389: PPUSH
58390: LD_VAR 0 12
58394: PPUSH
58395: CALL_OW 554
58399: NOT
58400: OR
58401: IFFALSE 58435
// begin task := Delete ( task , 1 ) ;
58403: LD_ADDR_VAR 0 14
58407: PUSH
58408: LD_VAR 0 14
58412: PPUSH
58413: LD_INT 1
58415: PPUSH
58416: CALL_OW 3
58420: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58421: LD_VAR 0 1
58425: PPUSH
58426: LD_VAR 0 14
58430: PPUSH
58431: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58435: LD_VAR 0 1
58439: PPUSH
58440: CALL_OW 314
58444: NOT
58445: IFFALSE 58280
// end ;
58447: LD_VAR 0 5
58451: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58452: LD_EXP 48
58456: NOT
58457: IFFALSE 58507
58459: GO 58461
58461: DISABLE
// begin initHack := true ;
58462: LD_ADDR_EXP 48
58466: PUSH
58467: LD_INT 1
58469: ST_TO_ADDR
// hackTanks := [ ] ;
58470: LD_ADDR_EXP 49
58474: PUSH
58475: EMPTY
58476: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58477: LD_ADDR_EXP 50
58481: PUSH
58482: EMPTY
58483: ST_TO_ADDR
// hackLimit := 3 ;
58484: LD_ADDR_EXP 51
58488: PUSH
58489: LD_INT 3
58491: ST_TO_ADDR
// hackDist := 12 ;
58492: LD_ADDR_EXP 52
58496: PUSH
58497: LD_INT 12
58499: ST_TO_ADDR
// hackCounter := [ ] ;
58500: LD_ADDR_EXP 53
58504: PUSH
58505: EMPTY
58506: ST_TO_ADDR
// end ;
58507: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58508: LD_EXP 48
58512: IFFALSE 58530
58514: PUSH
58515: LD_INT 34
58517: PUSH
58518: LD_INT 99
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PPUSH
58525: CALL_OW 69
58529: AND
58530: IFFALSE 58783
58532: GO 58534
58534: DISABLE
58535: LD_INT 0
58537: PPUSH
58538: PPUSH
// begin enable ;
58539: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58540: LD_ADDR_VAR 0 1
58544: PUSH
58545: LD_INT 34
58547: PUSH
58548: LD_INT 99
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PPUSH
58555: CALL_OW 69
58559: PUSH
58560: FOR_IN
58561: IFFALSE 58781
// begin if not i in hackTanks then
58563: LD_VAR 0 1
58567: PUSH
58568: LD_EXP 49
58572: IN
58573: NOT
58574: IFFALSE 58657
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58576: LD_ADDR_EXP 49
58580: PUSH
58581: LD_EXP 49
58585: PPUSH
58586: LD_EXP 49
58590: PUSH
58591: LD_INT 1
58593: PLUS
58594: PPUSH
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 1
58604: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58605: LD_ADDR_EXP 50
58609: PUSH
58610: LD_EXP 50
58614: PPUSH
58615: LD_EXP 50
58619: PUSH
58620: LD_INT 1
58622: PLUS
58623: PPUSH
58624: EMPTY
58625: PPUSH
58626: CALL_OW 1
58630: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58631: LD_ADDR_EXP 53
58635: PUSH
58636: LD_EXP 53
58640: PPUSH
58641: LD_EXP 53
58645: PUSH
58646: LD_INT 1
58648: PLUS
58649: PPUSH
58650: EMPTY
58651: PPUSH
58652: CALL_OW 1
58656: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58657: LD_VAR 0 1
58661: PPUSH
58662: CALL_OW 302
58666: NOT
58667: IFFALSE 58680
// begin HackUnlinkAll ( i ) ;
58669: LD_VAR 0 1
58673: PPUSH
58674: CALL 58786 0 1
// continue ;
58678: GO 58560
// end ; HackCheckCapturedStatus ( i ) ;
58680: LD_VAR 0 1
58684: PPUSH
58685: CALL 59231 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58689: LD_ADDR_VAR 0 2
58693: PUSH
58694: LD_INT 81
58696: PUSH
58697: LD_VAR 0 1
58701: PPUSH
58702: CALL_OW 255
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 33
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 91
58723: PUSH
58724: LD_VAR 0 1
58728: PUSH
58729: LD_EXP 52
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 50
58741: PUSH
58742: EMPTY
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: PPUSH
58751: CALL_OW 69
58755: ST_TO_ADDR
// if not tmp then
58756: LD_VAR 0 2
58760: NOT
58761: IFFALSE 58765
// continue ;
58763: GO 58560
// HackLink ( i , tmp ) ;
58765: LD_VAR 0 1
58769: PPUSH
58770: LD_VAR 0 2
58774: PPUSH
58775: CALL 58922 0 2
// end ;
58779: GO 58560
58781: POP
58782: POP
// end ;
58783: PPOPN 2
58785: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58786: LD_INT 0
58788: PPUSH
58789: PPUSH
58790: PPUSH
// if not hack in hackTanks then
58791: LD_VAR 0 1
58795: PUSH
58796: LD_EXP 49
58800: IN
58801: NOT
58802: IFFALSE 58806
// exit ;
58804: GO 58917
// index := GetElementIndex ( hackTanks , hack ) ;
58806: LD_ADDR_VAR 0 4
58810: PUSH
58811: LD_EXP 49
58815: PPUSH
58816: LD_VAR 0 1
58820: PPUSH
58821: CALL 7866 0 2
58825: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58826: LD_EXP 50
58830: PUSH
58831: LD_VAR 0 4
58835: ARRAY
58836: IFFALSE 58917
// begin for i in hackTanksCaptured [ index ] do
58838: LD_ADDR_VAR 0 3
58842: PUSH
58843: LD_EXP 50
58847: PUSH
58848: LD_VAR 0 4
58852: ARRAY
58853: PUSH
58854: FOR_IN
58855: IFFALSE 58881
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58857: LD_VAR 0 3
58861: PUSH
58862: LD_INT 1
58864: ARRAY
58865: PPUSH
58866: LD_VAR 0 3
58870: PUSH
58871: LD_INT 2
58873: ARRAY
58874: PPUSH
58875: CALL_OW 235
58879: GO 58854
58881: POP
58882: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58883: LD_ADDR_EXP 50
58887: PUSH
58888: LD_EXP 50
58892: PPUSH
58893: LD_VAR 0 4
58897: PPUSH
58898: EMPTY
58899: PPUSH
58900: CALL_OW 1
58904: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58905: LD_VAR 0 1
58909: PPUSH
58910: LD_INT 0
58912: PPUSH
58913: CALL_OW 505
// end ; end ;
58917: LD_VAR 0 2
58921: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58922: LD_INT 0
58924: PPUSH
58925: PPUSH
58926: PPUSH
// if not hack in hackTanks or not vehicles then
58927: LD_VAR 0 1
58931: PUSH
58932: LD_EXP 49
58936: IN
58937: NOT
58938: IFTRUE 58947
58940: PUSH
58941: LD_VAR 0 2
58945: NOT
58946: OR
58947: IFFALSE 58951
// exit ;
58949: GO 59226
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58951: LD_ADDR_VAR 0 2
58955: PUSH
58956: LD_VAR 0 1
58960: PPUSH
58961: LD_VAR 0 2
58965: PPUSH
58966: LD_INT 1
58968: PPUSH
58969: LD_INT 1
58971: PPUSH
58972: CALL 8518 0 4
58976: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58977: LD_ADDR_VAR 0 5
58981: PUSH
58982: LD_EXP 49
58986: PPUSH
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL 7866 0 2
58996: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58997: LD_EXP 50
59001: PUSH
59002: LD_VAR 0 5
59006: ARRAY
59007: PUSH
59008: LD_EXP 51
59012: LESS
59013: IFFALSE 59202
// begin for i := 1 to vehicles do
59015: LD_ADDR_VAR 0 4
59019: PUSH
59020: DOUBLE
59021: LD_INT 1
59023: DEC
59024: ST_TO_ADDR
59025: LD_VAR 0 2
59029: PUSH
59030: FOR_TO
59031: IFFALSE 59200
// begin if hackTanksCaptured [ index ] = hackLimit then
59033: LD_EXP 50
59037: PUSH
59038: LD_VAR 0 5
59042: ARRAY
59043: PUSH
59044: LD_EXP 51
59048: EQUAL
59049: IFFALSE 59053
// break ;
59051: GO 59200
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59053: LD_ADDR_EXP 53
59057: PUSH
59058: LD_EXP 53
59062: PPUSH
59063: LD_VAR 0 5
59067: PPUSH
59068: LD_EXP 53
59072: PUSH
59073: LD_VAR 0 5
59077: ARRAY
59078: PUSH
59079: LD_INT 1
59081: PLUS
59082: PPUSH
59083: CALL_OW 1
59087: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59088: LD_ADDR_EXP 50
59092: PUSH
59093: LD_EXP 50
59097: PPUSH
59098: LD_VAR 0 5
59102: PUSH
59103: LD_EXP 50
59107: PUSH
59108: LD_VAR 0 5
59112: ARRAY
59113: PUSH
59114: LD_INT 1
59116: PLUS
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PPUSH
59122: LD_VAR 0 2
59126: PUSH
59127: LD_VAR 0 4
59131: ARRAY
59132: PUSH
59133: LD_VAR 0 2
59137: PUSH
59138: LD_VAR 0 4
59142: ARRAY
59143: PPUSH
59144: CALL_OW 255
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PPUSH
59153: CALL 8083 0 3
59157: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59158: LD_VAR 0 2
59162: PUSH
59163: LD_VAR 0 4
59167: ARRAY
59168: PPUSH
59169: LD_VAR 0 1
59173: PPUSH
59174: CALL_OW 255
59178: PPUSH
59179: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59183: LD_VAR 0 2
59187: PUSH
59188: LD_VAR 0 4
59192: ARRAY
59193: PPUSH
59194: CALL_OW 141
// end ;
59198: GO 59030
59200: POP
59201: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59202: LD_VAR 0 1
59206: PPUSH
59207: LD_EXP 50
59211: PUSH
59212: LD_VAR 0 5
59216: ARRAY
59217: PUSH
59218: LD_INT 0
59220: PLUS
59221: PPUSH
59222: CALL_OW 505
// end ;
59226: LD_VAR 0 3
59230: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59231: LD_INT 0
59233: PPUSH
59234: PPUSH
59235: PPUSH
59236: PPUSH
// if not hack in hackTanks then
59237: LD_VAR 0 1
59241: PUSH
59242: LD_EXP 49
59246: IN
59247: NOT
59248: IFFALSE 59252
// exit ;
59250: GO 59496
// index := GetElementIndex ( hackTanks , hack ) ;
59252: LD_ADDR_VAR 0 4
59256: PUSH
59257: LD_EXP 49
59261: PPUSH
59262: LD_VAR 0 1
59266: PPUSH
59267: CALL 7866 0 2
59271: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: DOUBLE
59278: LD_EXP 50
59282: PUSH
59283: LD_VAR 0 4
59287: ARRAY
59288: INC
59289: ST_TO_ADDR
59290: LD_INT 1
59292: PUSH
59293: FOR_DOWNTO
59294: IFFALSE 59470
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59296: LD_ADDR_VAR 0 5
59300: PUSH
59301: LD_EXP 50
59305: PUSH
59306: LD_VAR 0 4
59310: ARRAY
59311: PUSH
59312: LD_VAR 0 3
59316: ARRAY
59317: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59318: LD_VAR 0 5
59322: PUSH
59323: LD_INT 1
59325: ARRAY
59326: PPUSH
59327: CALL_OW 302
59331: NOT
59332: IFTRUE 59360
59334: PUSH
59335: LD_VAR 0 5
59339: PUSH
59340: LD_INT 1
59342: ARRAY
59343: PPUSH
59344: CALL_OW 255
59348: PUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 255
59358: NONEQUAL
59359: OR
59360: IFFALSE 59468
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59362: LD_VAR 0 5
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PPUSH
59371: CALL_OW 305
59375: IFFALSE 59403
59377: PUSH
59378: LD_VAR 0 5
59382: PUSH
59383: LD_INT 1
59385: ARRAY
59386: PPUSH
59387: CALL_OW 255
59391: PUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 255
59401: EQUAL
59402: AND
59403: IFFALSE 59427
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59405: LD_VAR 0 5
59409: PUSH
59410: LD_INT 1
59412: ARRAY
59413: PPUSH
59414: LD_VAR 0 5
59418: PUSH
59419: LD_INT 2
59421: ARRAY
59422: PPUSH
59423: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59427: LD_ADDR_EXP 50
59431: PUSH
59432: LD_EXP 50
59436: PPUSH
59437: LD_VAR 0 4
59441: PPUSH
59442: LD_EXP 50
59446: PUSH
59447: LD_VAR 0 4
59451: ARRAY
59452: PPUSH
59453: LD_VAR 0 3
59457: PPUSH
59458: CALL_OW 3
59462: PPUSH
59463: CALL_OW 1
59467: ST_TO_ADDR
// end ; end ;
59468: GO 59293
59470: POP
59471: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59472: LD_VAR 0 1
59476: PPUSH
59477: LD_EXP 50
59481: PUSH
59482: LD_VAR 0 4
59486: ARRAY
59487: PUSH
59488: LD_INT 0
59490: PLUS
59491: PPUSH
59492: CALL_OW 505
// end ;
59496: LD_VAR 0 2
59500: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59501: LD_INT 0
59503: PPUSH
59504: PPUSH
59505: PPUSH
59506: PPUSH
// if not hack in hackTanks then
59507: LD_VAR 0 1
59511: PUSH
59512: LD_EXP 49
59516: IN
59517: NOT
59518: IFFALSE 59522
// exit ;
59520: GO 59607
// index := GetElementIndex ( hackTanks , hack ) ;
59522: LD_ADDR_VAR 0 5
59526: PUSH
59527: LD_EXP 49
59531: PPUSH
59532: LD_VAR 0 1
59536: PPUSH
59537: CALL 7866 0 2
59541: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59542: LD_ADDR_VAR 0 4
59546: PUSH
59547: DOUBLE
59548: LD_INT 1
59550: DEC
59551: ST_TO_ADDR
59552: LD_EXP 50
59556: PUSH
59557: LD_VAR 0 5
59561: ARRAY
59562: PUSH
59563: FOR_TO
59564: IFFALSE 59605
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59566: LD_EXP 50
59570: PUSH
59571: LD_VAR 0 5
59575: ARRAY
59576: PUSH
59577: LD_VAR 0 4
59581: ARRAY
59582: PUSH
59583: LD_INT 1
59585: ARRAY
59586: PUSH
59587: LD_VAR 0 2
59591: EQUAL
59592: IFFALSE 59603
// KillUnit ( vehicle ) ;
59594: LD_VAR 0 2
59598: PPUSH
59599: CALL_OW 66
59603: GO 59563
59605: POP
59606: POP
// end ;
59607: LD_VAR 0 3
59611: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59612: LD_EXP 54
59616: NOT
59617: IFFALSE 59750
59619: GO 59621
59621: DISABLE
59622: LD_INT 0
59624: PPUSH
// begin initMiner := true ;
59625: LD_ADDR_EXP 54
59629: PUSH
59630: LD_INT 1
59632: ST_TO_ADDR
// minersList := [ ] ;
59633: LD_ADDR_EXP 55
59637: PUSH
59638: EMPTY
59639: ST_TO_ADDR
// minerMinesList := [ ] ;
59640: LD_ADDR_EXP 56
59644: PUSH
59645: EMPTY
59646: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59647: LD_ADDR_EXP 57
59651: PUSH
59652: LD_INT 6
59654: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59655: LD_ADDR_VAR 0 1
59659: PUSH
59660: LD_INT 34
59662: PUSH
59663: LD_INT 81
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PPUSH
59670: CALL_OW 69
59674: PUSH
59675: FOR_IN
59676: IFFALSE 59748
// begin if not i in minersList then
59678: LD_VAR 0 1
59682: PUSH
59683: LD_EXP 55
59687: IN
59688: NOT
59689: IFFALSE 59746
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59691: LD_ADDR_EXP 55
59695: PUSH
59696: LD_EXP 55
59700: PPUSH
59701: LD_EXP 55
59705: PUSH
59706: LD_INT 1
59708: PLUS
59709: PPUSH
59710: LD_VAR 0 1
59714: PPUSH
59715: CALL_OW 1
59719: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59720: LD_ADDR_EXP 56
59724: PUSH
59725: LD_EXP 56
59729: PPUSH
59730: LD_EXP 56
59734: PUSH
59735: LD_INT 1
59737: PLUS
59738: PPUSH
59739: EMPTY
59740: PPUSH
59741: CALL_OW 1
59745: ST_TO_ADDR
// end end ;
59746: GO 59675
59748: POP
59749: POP
// end ;
59750: PPOPN 1
59752: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59753: LD_EXP 54
59757: IFFALSE 59788
59759: PUSH
59760: LD_EXP 56
59764: PPUSH
59765: CALL 5165 0 1
59769: IFTRUE 59787
59771: PUSH
59772: LD_INT 34
59774: PUSH
59775: LD_INT 81
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PPUSH
59782: CALL_OW 69
59786: OR
59787: AND
59788: IFFALSE 60287
59790: GO 59792
59792: DISABLE
59793: LD_INT 0
59795: PPUSH
59796: PPUSH
59797: PPUSH
59798: PPUSH
// begin enable ;
59799: ENABLE
// for i := minerMinesList downto 1 do
59800: LD_ADDR_VAR 0 1
59804: PUSH
59805: DOUBLE
59806: LD_EXP 56
59810: INC
59811: ST_TO_ADDR
59812: LD_INT 1
59814: PUSH
59815: FOR_DOWNTO
59816: IFFALSE 60285
// begin if IsLive ( minersList [ i ] ) then
59818: LD_EXP 55
59822: PUSH
59823: LD_VAR 0 1
59827: ARRAY
59828: PPUSH
59829: CALL_OW 300
59833: IFFALSE 59866
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59835: LD_EXP 55
59839: PUSH
59840: LD_VAR 0 1
59844: ARRAY
59845: PPUSH
59846: LD_EXP 56
59850: PUSH
59851: LD_VAR 0 1
59855: ARRAY
59856: PPUSH
59857: CALL 5165 0 1
59861: PPUSH
59862: CALL_OW 505
// if not minerMinesList [ i ] then
59866: LD_EXP 56
59870: PUSH
59871: LD_VAR 0 1
59875: ARRAY
59876: NOT
59877: IFFALSE 59881
// continue ;
59879: GO 59815
// for j := minerMinesList [ i ] downto 1 do
59881: LD_ADDR_VAR 0 2
59885: PUSH
59886: DOUBLE
59887: LD_EXP 56
59891: PUSH
59892: LD_VAR 0 1
59896: ARRAY
59897: INC
59898: ST_TO_ADDR
59899: LD_INT 1
59901: PUSH
59902: FOR_DOWNTO
59903: IFFALSE 60281
// begin side := GetSide ( minersList [ i ] ) ;
59905: LD_ADDR_VAR 0 3
59909: PUSH
59910: LD_EXP 55
59914: PUSH
59915: LD_VAR 0 1
59919: ARRAY
59920: PPUSH
59921: CALL_OW 255
59925: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59926: LD_EXP 55
59930: PUSH
59931: LD_VAR 0 1
59935: ARRAY
59936: PPUSH
59937: CALL_OW 301
59941: IFTRUE 59961
59943: PUSH
59944: LD_EXP 55
59948: PUSH
59949: LD_VAR 0 1
59953: ARRAY
59954: PPUSH
59955: CALL_OW 305
59959: NOT
59960: OR
59961: IFFALSE 60052
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59963: LD_EXP 56
59967: PUSH
59968: LD_VAR 0 1
59972: ARRAY
59973: PUSH
59974: LD_VAR 0 2
59978: ARRAY
59979: PUSH
59980: LD_INT 1
59982: ARRAY
59983: PPUSH
59984: LD_EXP 56
59988: PUSH
59989: LD_VAR 0 1
59993: ARRAY
59994: PUSH
59995: LD_VAR 0 2
59999: ARRAY
60000: PUSH
60001: LD_INT 2
60003: ARRAY
60004: PPUSH
60005: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60009: LD_ADDR_EXP 56
60013: PUSH
60014: LD_EXP 56
60018: PPUSH
60019: LD_VAR 0 1
60023: PPUSH
60024: LD_EXP 56
60028: PUSH
60029: LD_VAR 0 1
60033: ARRAY
60034: PPUSH
60035: LD_VAR 0 2
60039: PPUSH
60040: CALL_OW 3
60044: PPUSH
60045: CALL_OW 1
60049: ST_TO_ADDR
// continue ;
60050: GO 59902
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60052: LD_ADDR_VAR 0 4
60056: PUSH
60057: LD_EXP 56
60061: PUSH
60062: LD_VAR 0 1
60066: ARRAY
60067: PUSH
60068: LD_VAR 0 2
60072: ARRAY
60073: PUSH
60074: LD_INT 1
60076: ARRAY
60077: PPUSH
60078: LD_EXP 56
60082: PUSH
60083: LD_VAR 0 1
60087: ARRAY
60088: PUSH
60089: LD_VAR 0 2
60093: ARRAY
60094: PUSH
60095: LD_INT 2
60097: ARRAY
60098: PPUSH
60099: CALL_OW 428
60103: ST_TO_ADDR
// if not tmp then
60104: LD_VAR 0 4
60108: NOT
60109: IFFALSE 60113
// continue ;
60111: GO 59902
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60113: LD_VAR 0 4
60117: PUSH
60118: LD_INT 81
60120: PUSH
60121: LD_VAR 0 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PPUSH
60130: CALL_OW 69
60134: IN
60135: IFFALSE 60185
60137: PUSH
60138: LD_EXP 56
60142: PUSH
60143: LD_VAR 0 1
60147: ARRAY
60148: PUSH
60149: LD_VAR 0 2
60153: ARRAY
60154: PUSH
60155: LD_INT 1
60157: ARRAY
60158: PPUSH
60159: LD_EXP 56
60163: PUSH
60164: LD_VAR 0 1
60168: ARRAY
60169: PUSH
60170: LD_VAR 0 2
60174: ARRAY
60175: PUSH
60176: LD_INT 2
60178: ARRAY
60179: PPUSH
60180: CALL_OW 458
60184: AND
60185: IFFALSE 60279
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60187: LD_EXP 56
60191: PUSH
60192: LD_VAR 0 1
60196: ARRAY
60197: PUSH
60198: LD_VAR 0 2
60202: ARRAY
60203: PUSH
60204: LD_INT 1
60206: ARRAY
60207: PPUSH
60208: LD_EXP 56
60212: PUSH
60213: LD_VAR 0 1
60217: ARRAY
60218: PUSH
60219: LD_VAR 0 2
60223: ARRAY
60224: PUSH
60225: LD_INT 2
60227: ARRAY
60228: PPUSH
60229: LD_VAR 0 3
60233: PPUSH
60234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60238: LD_ADDR_EXP 56
60242: PUSH
60243: LD_EXP 56
60247: PPUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: LD_EXP 56
60257: PUSH
60258: LD_VAR 0 1
60262: ARRAY
60263: PPUSH
60264: LD_VAR 0 2
60268: PPUSH
60269: CALL_OW 3
60273: PPUSH
60274: CALL_OW 1
60278: ST_TO_ADDR
// end ; end ;
60279: GO 59902
60281: POP
60282: POP
// end ;
60283: GO 59815
60285: POP
60286: POP
// end ;
60287: PPOPN 4
60289: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60290: LD_INT 0
60292: PPUSH
60293: PPUSH
60294: PPUSH
60295: PPUSH
// result := false ;
60296: LD_ADDR_VAR 0 4
60300: PUSH
60301: LD_INT 0
60303: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60304: LD_VAR 0 1
60308: PPUSH
60309: CALL_OW 264
60313: PUSH
60314: LD_INT 81
60316: EQUAL
60317: NOT
60318: IFFALSE 60322
// exit ;
60320: GO 60692
// side := GetSide ( unit ) ;
60322: LD_ADDR_VAR 0 6
60326: PUSH
60327: LD_VAR 0 1
60331: PPUSH
60332: CALL_OW 255
60336: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60337: LD_ADDR_VAR 0 5
60341: PUSH
60342: LD_EXP 55
60346: PPUSH
60347: LD_VAR 0 1
60351: PPUSH
60352: CALL 7866 0 2
60356: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60357: LD_EXP 56
60361: PUSH
60362: LD_VAR 0 5
60366: ARRAY
60367: PUSH
60368: LD_EXP 57
60372: GREATEREQUAL
60373: IFFALSE 60377
// exit ;
60375: GO 60692
// ComMoveXY ( unit , x , y ) ;
60377: LD_VAR 0 1
60381: PPUSH
60382: LD_VAR 0 2
60386: PPUSH
60387: LD_VAR 0 3
60391: PPUSH
60392: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60396: LD_INT 35
60398: PPUSH
60399: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60403: LD_VAR 0 1
60407: PPUSH
60408: LD_VAR 0 2
60412: PPUSH
60413: LD_VAR 0 3
60417: PPUSH
60418: CALL 39912 0 3
60422: NOT
60423: IFFALSE 60436
60425: PUSH
60426: LD_VAR 0 1
60430: PPUSH
60431: CALL_OW 314
60435: AND
60436: IFFALSE 60440
// exit ;
60438: GO 60692
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60440: LD_VAR 0 2
60444: PPUSH
60445: LD_VAR 0 3
60449: PPUSH
60450: CALL_OW 428
60454: PUSH
60455: LD_VAR 0 1
60459: EQUAL
60460: IFFALSE 60474
60462: PUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 314
60472: NOT
60473: AND
60474: IFFALSE 60396
// if MineAtPos ( x , y ) then
60476: LD_VAR 0 2
60480: PPUSH
60481: LD_VAR 0 3
60485: PPUSH
60486: CALL_OW 458
60490: IFFALSE 60494
// exit ;
60492: GO 60692
// if your_side = side then
60494: LD_OWVAR 2
60498: PUSH
60499: LD_VAR 0 6
60503: EQUAL
60504: IFFALSE 60523
// PlaySoundXY ( x , y , PlantMine ) ;
60506: LD_VAR 0 2
60510: PPUSH
60511: LD_VAR 0 3
60515: PPUSH
60516: LD_STRING PlantMine
60518: PPUSH
60519: CALL_OW 366
// repeat wait ( 1 ) ;
60523: LD_INT 1
60525: PPUSH
60526: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60530: LD_VAR 0 2
60534: PPUSH
60535: LD_VAR 0 3
60539: PPUSH
60540: LD_VAR 0 6
60544: PPUSH
60545: LD_INT 0
60547: PPUSH
60548: CALL_OW 454
60552: IFFALSE 60523
// if MineAtPos ( x , y ) then
60554: LD_VAR 0 2
60558: PPUSH
60559: LD_VAR 0 3
60563: PPUSH
60564: CALL_OW 458
60568: IFFALSE 60684
// begin for i in minerMinesList [ index ] do
60570: LD_ADDR_VAR 0 7
60574: PUSH
60575: LD_EXP 56
60579: PUSH
60580: LD_VAR 0 5
60584: ARRAY
60585: PUSH
60586: FOR_IN
60587: IFFALSE 60629
// if i [ 1 ] = x and i [ 2 ] = y then
60589: LD_VAR 0 7
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: PUSH
60598: LD_VAR 0 2
60602: EQUAL
60603: IFFALSE 60621
60605: PUSH
60606: LD_VAR 0 7
60610: PUSH
60611: LD_INT 2
60613: ARRAY
60614: PUSH
60615: LD_VAR 0 3
60619: EQUAL
60620: AND
60621: IFFALSE 60627
// exit ;
60623: POP
60624: POP
60625: GO 60692
60627: GO 60586
60629: POP
60630: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60631: LD_ADDR_EXP 56
60635: PUSH
60636: LD_EXP 56
60640: PPUSH
60641: LD_VAR 0 5
60645: PUSH
60646: LD_EXP 56
60650: PUSH
60651: LD_VAR 0 5
60655: ARRAY
60656: PUSH
60657: LD_INT 1
60659: PLUS
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PPUSH
60665: LD_VAR 0 2
60669: PUSH
60670: LD_VAR 0 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PPUSH
60679: CALL 8083 0 3
60683: ST_TO_ADDR
// end ; result := true ;
60684: LD_ADDR_VAR 0 4
60688: PUSH
60689: LD_INT 1
60691: ST_TO_ADDR
// end ;
60692: LD_VAR 0 4
60696: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60697: LD_INT 0
60699: PPUSH
60700: PPUSH
60701: PPUSH
// if not unit in minersList then
60702: LD_VAR 0 1
60706: PUSH
60707: LD_EXP 55
60711: IN
60712: NOT
60713: IFFALSE 60717
// exit ;
60715: GO 60924
// index := GetElementIndex ( minersList , unit ) ;
60717: LD_ADDR_VAR 0 6
60721: PUSH
60722: LD_EXP 55
60726: PPUSH
60727: LD_VAR 0 1
60731: PPUSH
60732: CALL 7866 0 2
60736: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60737: LD_ADDR_VAR 0 5
60741: PUSH
60742: DOUBLE
60743: LD_EXP 56
60747: PUSH
60748: LD_VAR 0 6
60752: ARRAY
60753: INC
60754: ST_TO_ADDR
60755: LD_INT 1
60757: PUSH
60758: FOR_DOWNTO
60759: IFFALSE 60922
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60761: LD_EXP 56
60765: PUSH
60766: LD_VAR 0 6
60770: ARRAY
60771: PUSH
60772: LD_VAR 0 5
60776: ARRAY
60777: PUSH
60778: LD_INT 1
60780: ARRAY
60781: PPUSH
60782: LD_EXP 56
60786: PUSH
60787: LD_VAR 0 6
60791: ARRAY
60792: PUSH
60793: LD_VAR 0 5
60797: ARRAY
60798: PUSH
60799: LD_INT 2
60801: ARRAY
60802: PPUSH
60803: LD_VAR 0 2
60807: PPUSH
60808: LD_VAR 0 3
60812: PPUSH
60813: CALL_OW 298
60817: PUSH
60818: LD_INT 6
60820: LESS
60821: IFFALSE 60920
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60823: LD_EXP 56
60827: PUSH
60828: LD_VAR 0 6
60832: ARRAY
60833: PUSH
60834: LD_VAR 0 5
60838: ARRAY
60839: PUSH
60840: LD_INT 1
60842: ARRAY
60843: PPUSH
60844: LD_EXP 56
60848: PUSH
60849: LD_VAR 0 6
60853: ARRAY
60854: PUSH
60855: LD_VAR 0 5
60859: ARRAY
60860: PUSH
60861: LD_INT 2
60863: ARRAY
60864: PPUSH
60865: LD_VAR 0 1
60869: PPUSH
60870: CALL_OW 255
60874: PPUSH
60875: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60879: LD_ADDR_EXP 56
60883: PUSH
60884: LD_EXP 56
60888: PPUSH
60889: LD_VAR 0 6
60893: PPUSH
60894: LD_EXP 56
60898: PUSH
60899: LD_VAR 0 6
60903: ARRAY
60904: PPUSH
60905: LD_VAR 0 5
60909: PPUSH
60910: CALL_OW 3
60914: PPUSH
60915: CALL_OW 1
60919: ST_TO_ADDR
// end ; end ;
60920: GO 60758
60922: POP
60923: POP
// end ;
60924: LD_VAR 0 4
60928: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60929: LD_INT 0
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60940: LD_VAR 0 1
60944: PPUSH
60945: CALL_OW 264
60949: PUSH
60950: LD_INT 81
60952: EQUAL
60953: NOT
60954: IFTRUE 60969
60956: PUSH
60957: LD_VAR 0 1
60961: PUSH
60962: LD_EXP 55
60966: IN
60967: NOT
60968: OR
60969: IFFALSE 60973
// exit ;
60971: GO 61299
// index := GetElementIndex ( minersList , unit ) ;
60973: LD_ADDR_VAR 0 6
60977: PUSH
60978: LD_EXP 55
60982: PPUSH
60983: LD_VAR 0 1
60987: PPUSH
60988: CALL 7866 0 2
60992: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60993: LD_ADDR_VAR 0 8
60997: PUSH
60998: LD_EXP 57
61002: PUSH
61003: LD_EXP 56
61007: PUSH
61008: LD_VAR 0 6
61012: ARRAY
61013: MINUS
61014: ST_TO_ADDR
// if not minesFreeAmount then
61015: LD_VAR 0 8
61019: NOT
61020: IFFALSE 61024
// exit ;
61022: GO 61299
// tmp := [ ] ;
61024: LD_ADDR_VAR 0 7
61028: PUSH
61029: EMPTY
61030: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61031: LD_ADDR_VAR 0 5
61035: PUSH
61036: DOUBLE
61037: LD_INT 1
61039: DEC
61040: ST_TO_ADDR
61041: LD_VAR 0 8
61045: PUSH
61046: FOR_TO
61047: IFFALSE 61246
// begin _d := rand ( 0 , 5 ) ;
61049: LD_ADDR_VAR 0 11
61053: PUSH
61054: LD_INT 0
61056: PPUSH
61057: LD_INT 5
61059: PPUSH
61060: CALL_OW 12
61064: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61065: LD_ADDR_VAR 0 12
61069: PUSH
61070: LD_INT 2
61072: PPUSH
61073: LD_INT 6
61075: PPUSH
61076: CALL_OW 12
61080: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61081: LD_ADDR_VAR 0 9
61085: PUSH
61086: LD_VAR 0 2
61090: PPUSH
61091: LD_VAR 0 11
61095: PPUSH
61096: LD_VAR 0 12
61100: PPUSH
61101: CALL_OW 272
61105: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61106: LD_ADDR_VAR 0 10
61110: PUSH
61111: LD_VAR 0 3
61115: PPUSH
61116: LD_VAR 0 11
61120: PPUSH
61121: LD_VAR 0 12
61125: PPUSH
61126: CALL_OW 273
61130: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61131: LD_VAR 0 9
61135: PPUSH
61136: LD_VAR 0 10
61140: PPUSH
61141: CALL_OW 488
61145: IFFALSE 61169
61147: PUSH
61148: LD_VAR 0 9
61152: PUSH
61153: LD_VAR 0 10
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_VAR 0 7
61166: IN
61167: NOT
61168: AND
61169: IFFALSE 61188
61171: PUSH
61172: LD_VAR 0 9
61176: PPUSH
61177: LD_VAR 0 10
61181: PPUSH
61182: CALL_OW 458
61186: NOT
61187: AND
61188: IFFALSE 61230
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61190: LD_ADDR_VAR 0 7
61194: PUSH
61195: LD_VAR 0 7
61199: PPUSH
61200: LD_VAR 0 7
61204: PUSH
61205: LD_INT 1
61207: PLUS
61208: PPUSH
61209: LD_VAR 0 9
61213: PUSH
61214: LD_VAR 0 10
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PPUSH
61223: CALL_OW 1
61227: ST_TO_ADDR
61228: GO 61244
// i := i - 1 ;
61230: LD_ADDR_VAR 0 5
61234: PUSH
61235: LD_VAR 0 5
61239: PUSH
61240: LD_INT 1
61242: MINUS
61243: ST_TO_ADDR
// end ;
61244: GO 61046
61246: POP
61247: POP
// for i in tmp do
61248: LD_ADDR_VAR 0 5
61252: PUSH
61253: LD_VAR 0 7
61257: PUSH
61258: FOR_IN
61259: IFFALSE 61297
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61261: LD_VAR 0 1
61265: PPUSH
61266: LD_VAR 0 5
61270: PUSH
61271: LD_INT 1
61273: ARRAY
61274: PPUSH
61275: LD_VAR 0 5
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PPUSH
61284: CALL 60290 0 3
61288: NOT
61289: IFFALSE 61295
// exit ;
61291: POP
61292: POP
61293: GO 61299
61295: GO 61258
61297: POP
61298: POP
// end ;
61299: LD_VAR 0 4
61303: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61304: LD_INT 0
61306: PPUSH
61307: PPUSH
61308: PPUSH
61309: PPUSH
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
// if GetClass ( unit ) <> class_sniper then
61315: LD_VAR 0 1
61319: PPUSH
61320: CALL_OW 257
61324: PUSH
61325: LD_INT 5
61327: NONEQUAL
61328: IFFALSE 61332
// exit ;
61330: GO 61802
// dist := 8 ;
61332: LD_ADDR_VAR 0 5
61336: PUSH
61337: LD_INT 8
61339: ST_TO_ADDR
// viewRange := 12 ;
61340: LD_ADDR_VAR 0 8
61344: PUSH
61345: LD_INT 12
61347: ST_TO_ADDR
// side := GetSide ( unit ) ;
61348: LD_ADDR_VAR 0 6
61352: PUSH
61353: LD_VAR 0 1
61357: PPUSH
61358: CALL_OW 255
61362: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61363: LD_INT 61
61365: PPUSH
61366: LD_VAR 0 6
61370: PPUSH
61371: CALL_OW 321
61375: PUSH
61376: LD_INT 2
61378: EQUAL
61379: IFFALSE 61389
// viewRange := 16 ;
61381: LD_ADDR_VAR 0 8
61385: PUSH
61386: LD_INT 16
61388: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61389: LD_VAR 0 1
61393: PPUSH
61394: LD_VAR 0 2
61398: PPUSH
61399: LD_VAR 0 3
61403: PPUSH
61404: CALL_OW 297
61408: PUSH
61409: LD_VAR 0 5
61413: GREATER
61414: IFFALSE 61493
// begin ComMoveXY ( unit , x , y ) ;
61416: LD_VAR 0 1
61420: PPUSH
61421: LD_VAR 0 2
61425: PPUSH
61426: LD_VAR 0 3
61430: PPUSH
61431: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61435: LD_INT 35
61437: PPUSH
61438: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61442: LD_VAR 0 1
61446: PPUSH
61447: LD_VAR 0 2
61451: PPUSH
61452: LD_VAR 0 3
61456: PPUSH
61457: CALL 39912 0 3
61461: NOT
61462: IFFALSE 61466
// exit ;
61464: GO 61802
// until GetDistUnitXY ( unit , x , y ) < dist ;
61466: LD_VAR 0 1
61470: PPUSH
61471: LD_VAR 0 2
61475: PPUSH
61476: LD_VAR 0 3
61480: PPUSH
61481: CALL_OW 297
61485: PUSH
61486: LD_VAR 0 5
61490: LESS
61491: IFFALSE 61435
// end ; ComTurnXY ( unit , x , y ) ;
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: LD_VAR 0 3
61507: PPUSH
61508: CALL_OW 118
// repeat if Multiplayer then
61512: LD_OWVAR 4
61516: IFFALSE 61527
// wait ( 35 ) else
61518: LD_INT 35
61520: PPUSH
61521: CALL_OW 67
61525: GO 61534
// wait ( 5 ) ;
61527: LD_INT 5
61529: PPUSH
61530: CALL_OW 67
// _d := GetDir ( unit ) ;
61534: LD_ADDR_VAR 0 11
61538: PUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: CALL_OW 254
61548: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61549: LD_ADDR_VAR 0 7
61553: PUSH
61554: LD_VAR 0 1
61558: PPUSH
61559: CALL_OW 250
61563: PPUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: CALL_OW 251
61573: PPUSH
61574: LD_VAR 0 2
61578: PPUSH
61579: LD_VAR 0 3
61583: PPUSH
61584: CALL 42548 0 4
61588: ST_TO_ADDR
// until dir = _d ;
61589: LD_VAR 0 7
61593: PUSH
61594: LD_VAR 0 11
61598: EQUAL
61599: IFFALSE 61512
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61601: LD_ADDR_VAR 0 9
61605: PUSH
61606: LD_VAR 0 1
61610: PPUSH
61611: CALL_OW 250
61615: PPUSH
61616: LD_VAR 0 7
61620: PPUSH
61621: LD_VAR 0 5
61625: PPUSH
61626: CALL_OW 272
61630: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61631: LD_ADDR_VAR 0 10
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 251
61645: PPUSH
61646: LD_VAR 0 7
61650: PPUSH
61651: LD_VAR 0 5
61655: PPUSH
61656: CALL_OW 273
61660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61661: LD_VAR 0 9
61665: PPUSH
61666: LD_VAR 0 10
61670: PPUSH
61671: CALL_OW 488
61675: NOT
61676: IFFALSE 61680
// exit ;
61678: GO 61802
// ComAnimCustom ( unit , 1 ) ;
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 1
61687: PPUSH
61688: CALL_OW 592
// p := 0 ;
61692: LD_ADDR_VAR 0 12
61696: PUSH
61697: LD_INT 0
61699: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61700: LD_VAR 0 9
61704: PPUSH
61705: LD_VAR 0 10
61709: PPUSH
61710: LD_VAR 0 6
61714: PPUSH
61715: LD_VAR 0 8
61719: PPUSH
61720: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61724: LD_INT 35
61726: PPUSH
61727: CALL_OW 67
// p := Inc ( p ) ;
61731: LD_ADDR_VAR 0 12
61735: PUSH
61736: LD_VAR 0 12
61740: PPUSH
61741: CALL 42504 0 1
61745: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61746: LD_VAR 0 12
61750: PUSH
61751: LD_INT 3
61753: EQUAL
61754: IFTRUE 61768
61756: PUSH
61757: LD_VAR 0 1
61761: PPUSH
61762: CALL_OW 302
61766: NOT
61767: OR
61768: IFTRUE 61781
61770: PUSH
61771: LD_VAR 0 1
61775: PPUSH
61776: CALL_OW 301
61780: OR
61781: IFFALSE 61724
// RemoveSeeing ( _x , _y , side ) ;
61783: LD_VAR 0 9
61787: PPUSH
61788: LD_VAR 0 10
61792: PPUSH
61793: LD_VAR 0 6
61797: PPUSH
61798: CALL_OW 331
// end ;
61802: LD_VAR 0 4
61806: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
61811: PPUSH
61812: PPUSH
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
61817: PPUSH
61818: PPUSH
61819: PPUSH
// if not unit then
61820: LD_VAR 0 1
61824: NOT
61825: IFFALSE 61829
// exit ;
61827: GO 62100
// side := GetSide ( unit ) ;
61829: LD_ADDR_VAR 0 3
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 255
61843: ST_TO_ADDR
// x := GetX ( unit ) ;
61844: LD_ADDR_VAR 0 5
61848: PUSH
61849: LD_VAR 0 1
61853: PPUSH
61854: CALL_OW 250
61858: ST_TO_ADDR
// y := GetY ( unit ) ;
61859: LD_ADDR_VAR 0 6
61863: PUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: CALL_OW 251
61873: ST_TO_ADDR
// r := 8 ;
61874: LD_ADDR_VAR 0 4
61878: PUSH
61879: LD_INT 8
61881: ST_TO_ADDR
// if x - r < 0 then
61882: LD_VAR 0 5
61886: PUSH
61887: LD_VAR 0 4
61891: MINUS
61892: PUSH
61893: LD_INT 0
61895: LESS
61896: IFFALSE 61908
// min_x := 0 else
61898: LD_ADDR_VAR 0 7
61902: PUSH
61903: LD_INT 0
61905: ST_TO_ADDR
61906: GO 61924
// min_x := x - r ;
61908: LD_ADDR_VAR 0 7
61912: PUSH
61913: LD_VAR 0 5
61917: PUSH
61918: LD_VAR 0 4
61922: MINUS
61923: ST_TO_ADDR
// if y - r < 0 then
61924: LD_VAR 0 6
61928: PUSH
61929: LD_VAR 0 4
61933: MINUS
61934: PUSH
61935: LD_INT 0
61937: LESS
61938: IFFALSE 61950
// min_y := 0 else
61940: LD_ADDR_VAR 0 8
61944: PUSH
61945: LD_INT 0
61947: ST_TO_ADDR
61948: GO 61966
// min_y := y - r ;
61950: LD_ADDR_VAR 0 8
61954: PUSH
61955: LD_VAR 0 6
61959: PUSH
61960: LD_VAR 0 4
61964: MINUS
61965: ST_TO_ADDR
// max_x := x + r ;
61966: LD_ADDR_VAR 0 9
61970: PUSH
61971: LD_VAR 0 5
61975: PUSH
61976: LD_VAR 0 4
61980: PLUS
61981: ST_TO_ADDR
// max_y := y + r ;
61982: LD_ADDR_VAR 0 10
61986: PUSH
61987: LD_VAR 0 6
61991: PUSH
61992: LD_VAR 0 4
61996: PLUS
61997: ST_TO_ADDR
// for _x = min_x to max_x do
61998: LD_ADDR_VAR 0 11
62002: PUSH
62003: DOUBLE
62004: LD_VAR 0 7
62008: DEC
62009: ST_TO_ADDR
62010: LD_VAR 0 9
62014: PUSH
62015: FOR_TO
62016: IFFALSE 62098
// for _y = min_y to max_y do
62018: LD_ADDR_VAR 0 12
62022: PUSH
62023: DOUBLE
62024: LD_VAR 0 8
62028: DEC
62029: ST_TO_ADDR
62030: LD_VAR 0 10
62034: PUSH
62035: FOR_TO
62036: IFFALSE 62094
// begin if not ValidHex ( _x , _y ) then
62038: LD_VAR 0 11
62042: PPUSH
62043: LD_VAR 0 12
62047: PPUSH
62048: CALL_OW 488
62052: NOT
62053: IFFALSE 62057
// continue ;
62055: GO 62035
// if MineAtPos ( _x , _y ) then
62057: LD_VAR 0 11
62061: PPUSH
62062: LD_VAR 0 12
62066: PPUSH
62067: CALL_OW 458
62071: IFFALSE 62092
// ViewMineAtPos ( _x , _y , side ) ;
62073: LD_VAR 0 11
62077: PPUSH
62078: LD_VAR 0 12
62082: PPUSH
62083: LD_VAR 0 3
62087: PPUSH
62088: CALL_OW 457
// end ;
62092: GO 62035
62094: POP
62095: POP
62096: GO 62015
62098: POP
62099: POP
// end ;
62100: LD_VAR 0 2
62104: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62105: LD_INT 0
62107: PPUSH
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
62112: PPUSH
// if not units then
62113: LD_VAR 0 1
62117: NOT
62118: IFFALSE 62122
// exit ;
62120: GO 62552
// scaners := [ ] ;
62122: LD_ADDR_VAR 0 6
62126: PUSH
62127: EMPTY
62128: ST_TO_ADDR
// for i in units do
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_VAR 0 1
62138: PUSH
62139: FOR_IN
62140: IFFALSE 62297
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 264
62151: PUSH
62152: LD_INT 11
62154: NONEQUAL
62155: IFTRUE 62169
62157: PUSH
62158: LD_VAR 0 3
62162: PPUSH
62163: CALL_OW 302
62167: NOT
62168: OR
62169: IFTRUE 62186
62171: PUSH
62172: LD_VAR 0 3
62176: PPUSH
62177: CALL_OW 110
62181: PUSH
62182: LD_INT 502
62184: EQUAL
62185: OR
62186: IFFALSE 62190
// continue ;
62188: GO 62139
// ComStop ( i ) ;
62190: LD_VAR 0 3
62194: PPUSH
62195: CALL_OW 141
// x := GetX ( i ) ;
62199: LD_ADDR_VAR 0 4
62203: PUSH
62204: LD_VAR 0 3
62208: PPUSH
62209: CALL_OW 250
62213: ST_TO_ADDR
// y := GetY ( i ) ;
62214: LD_ADDR_VAR 0 5
62218: PUSH
62219: LD_VAR 0 3
62223: PPUSH
62224: CALL_OW 251
62228: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62229: LD_VAR 0 3
62233: PPUSH
62234: CALL_OW 255
62238: PUSH
62239: LD_OWVAR 2
62243: EQUAL
62244: IFFALSE 62263
// PlaySoundXY ( x , y , mineDetector ) ;
62246: LD_VAR 0 4
62250: PPUSH
62251: LD_VAR 0 5
62255: PPUSH
62256: LD_STRING mineDetector
62258: PPUSH
62259: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62263: LD_ADDR_VAR 0 6
62267: PUSH
62268: LD_VAR 0 6
62272: PPUSH
62273: LD_VAR 0 3
62277: PPUSH
62278: CALL 41131 0 2
62282: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62283: LD_VAR 0 3
62287: PPUSH
62288: LD_INT 502
62290: PPUSH
62291: CALL_OW 109
// end ;
62295: GO 62139
62297: POP
62298: POP
// if not scaners then
62299: LD_VAR 0 6
62303: NOT
62304: IFFALSE 62308
// exit ;
62306: GO 62552
// wait ( 3 ) ;
62308: LD_INT 3
62310: PPUSH
62311: CALL_OW 67
// timer := 6 ;
62315: LD_ADDR_VAR 0 7
62319: PUSH
62320: LD_INT 6
62322: ST_TO_ADDR
// repeat for i in scaners do
62323: LD_ADDR_VAR 0 3
62327: PUSH
62328: LD_VAR 0 6
62332: PUSH
62333: FOR_IN
62334: IFFALSE 62450
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62336: LD_VAR 0 3
62340: PPUSH
62341: CALL_OW 302
62345: NOT
62346: IFTRUE 62359
62348: PUSH
62349: LD_VAR 0 3
62353: PPUSH
62354: CALL_OW 314
62358: OR
62359: IFTRUE 62390
62361: PUSH
62362: LD_VAR 0 3
62366: PPUSH
62367: CALL_OW 263
62371: PUSH
62372: LD_INT 1
62374: EQUAL
62375: IFFALSE 62389
62377: PUSH
62378: LD_VAR 0 3
62382: PPUSH
62383: CALL_OW 311
62387: NOT
62388: AND
62389: OR
62390: IFFALSE 62434
// begin SetUnitDisplayNumber ( i , 0 ) ;
62392: LD_VAR 0 3
62396: PPUSH
62397: LD_INT 0
62399: PPUSH
62400: CALL_OW 505
// SetTag ( i , 0 ) ;
62404: LD_VAR 0 3
62408: PPUSH
62409: LD_INT 0
62411: PPUSH
62412: CALL_OW 109
// scaners := scaners diff i ;
62416: LD_ADDR_VAR 0 6
62420: PUSH
62421: LD_VAR 0 6
62425: PUSH
62426: LD_VAR 0 3
62430: DIFF
62431: ST_TO_ADDR
// continue ;
62432: GO 62333
// end ; SetUnitDisplayNumber ( i , timer ) ;
62434: LD_VAR 0 3
62438: PPUSH
62439: LD_VAR 0 7
62443: PPUSH
62444: CALL_OW 505
// end ;
62448: GO 62333
62450: POP
62451: POP
// if not scaners then
62452: LD_VAR 0 6
62456: NOT
62457: IFFALSE 62461
// exit ;
62459: GO 62552
// timer := Dec ( timer ) ;
62461: LD_ADDR_VAR 0 7
62465: PUSH
62466: LD_VAR 0 7
62470: PPUSH
62471: CALL 42526 0 1
62475: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62476: LD_INT 35
62478: PPUSH
62479: CALL_OW 67
// until timer = 0 ;
62483: LD_VAR 0 7
62487: PUSH
62488: LD_INT 0
62490: EQUAL
62491: IFFALSE 62323
// if not scaners then
62493: LD_VAR 0 6
62497: NOT
62498: IFFALSE 62502
// exit ;
62500: GO 62552
// for i in scaners do
62502: LD_ADDR_VAR 0 3
62506: PUSH
62507: LD_VAR 0 6
62511: PUSH
62512: FOR_IN
62513: IFFALSE 62550
// begin SetUnitDisplayNumber ( i , 0 ) ;
62515: LD_VAR 0 3
62519: PPUSH
62520: LD_INT 0
62522: PPUSH
62523: CALL_OW 505
// SetTag ( i , 0 ) ;
62527: LD_VAR 0 3
62531: PPUSH
62532: LD_INT 0
62534: PPUSH
62535: CALL_OW 109
// RevealDetectorMine ( i ) ;
62539: LD_VAR 0 3
62543: PPUSH
62544: CALL 61807 0 1
// end ;
62548: GO 62512
62550: POP
62551: POP
// end ;
62552: LD_VAR 0 2
62556: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62557: LD_INT 0
62559: PPUSH
// if p1 = mine_detector_mode then
62560: LD_VAR 0 2
62564: PUSH
62565: LD_INT 103
62567: EQUAL
62568: IFFALSE 62579
// DetectMine ( units ) ;
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL 62105 0 1
// end ; end_of_file
62579: LD_VAR 0 7
62583: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62584: PPOPN 6
62586: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62587: LD_INT 0
62589: PPUSH
// begin if not units then
62590: LD_VAR 0 1
62594: NOT
62595: IFFALSE 62599
// exit ;
62597: GO 62633
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62599: LD_VAR 0 1
62603: PPUSH
62604: LD_VAR 0 2
62608: PPUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: LD_VAR 0 4
62618: PPUSH
62619: LD_VAR 0 5
62623: PPUSH
62624: LD_VAR 0 6
62628: PPUSH
62629: CALL 62557 0 6
// end ;
62633: PPOPN 7
62635: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62636: LD_EXP 1
62640: PUSH
62641: LD_INT 4
62643: EQUAL
62644: IFFALSE 62680
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62646: LD_STRING setGameDifficulty(
62648: PUSH
62649: LD_OWVAR 67
62653: STR
62654: PUSH
62655: LD_STRING )
62657: STR
62658: PPUSH
62659: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62663: LD_STRING displayDifficulty(
62665: PUSH
62666: LD_OWVAR 67
62670: STR
62671: PUSH
62672: LD_STRING )
62674: STR
62675: PPUSH
62676: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62680: CALL 62709 0 0
// end ; end_of_file
62684: PPOPN 1
62686: END
// every 0 0$1 do
62687: GO 62689
62689: DISABLE
// begin enable ;
62690: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62691: LD_STRING updateTimer(
62693: PUSH
62694: LD_OWVAR 1
62698: STR
62699: PUSH
62700: LD_STRING );
62702: STR
62703: PPUSH
62704: CALL_OW 559
// end ;
62708: END
// export function SOS_MapStart ( ) ; begin
62709: LD_INT 0
62711: PPUSH
// UpdateFactoryWaypoints ( ) ;
62712: CALL 63643 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62716: CALL 63895 0 0
// ParseMultiDataToLua ( ) ;
62720: CALL 64042 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62724: LD_STRING setSpecLogoNumber(
62726: PUSH
62727: LD_INT 2
62729: STR
62730: PUSH
62731: LD_STRING ,
62733: STR
62734: PUSH
62735: LD_INT 1
62737: STR
62738: PUSH
62739: LD_STRING )
62741: STR
62742: PPUSH
62743: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62747: LD_STRING setSpecLogoNumber(
62749: PUSH
62750: LD_INT 3
62752: STR
62753: PUSH
62754: LD_STRING ,
62756: STR
62757: PUSH
62758: LD_INT 2
62760: STR
62761: PUSH
62762: LD_STRING )
62764: STR
62765: PPUSH
62766: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62770: LD_STRING setSpecLogoNumber(
62772: PUSH
62773: LD_INT 4
62775: STR
62776: PUSH
62777: LD_STRING ,
62779: STR
62780: PUSH
62781: LD_INT 3
62783: STR
62784: PUSH
62785: LD_STRING )
62787: STR
62788: PPUSH
62789: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62793: LD_STRING setSpecLogoNumber(
62795: PUSH
62796: LD_INT 5
62798: STR
62799: PUSH
62800: LD_STRING ,
62802: STR
62803: PUSH
62804: LD_INT 4
62806: STR
62807: PUSH
62808: LD_STRING )
62810: STR
62811: PPUSH
62812: CALL_OW 559
// end ;
62816: LD_VAR 0 1
62820: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62821: LD_INT 0
62823: PPUSH
62824: PPUSH
62825: PPUSH
62826: PPUSH
62827: PPUSH
62828: PPUSH
62829: PPUSH
62830: PPUSH
62831: PPUSH
// for i := 1 to 8 do
62832: LD_ADDR_VAR 0 2
62836: PUSH
62837: DOUBLE
62838: LD_INT 1
62840: DEC
62841: ST_TO_ADDR
62842: LD_INT 8
62844: PUSH
62845: FOR_TO
62846: IFFALSE 63231
// begin if mpSidePositions [ i ] then
62848: LD_EXP 5
62852: PUSH
62853: LD_VAR 0 2
62857: ARRAY
62858: IFFALSE 63229
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62860: LD_ADDR_VAR 0 7
62864: PUSH
62865: LD_INT 22
62867: PUSH
62868: LD_VAR 0 2
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 21
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PPUSH
62891: CALL_OW 69
62895: PPUSH
62896: CALL 5165 0 1
62900: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62901: LD_ADDR_VAR 0 9
62905: PUSH
62906: LD_INT 22
62908: PUSH
62909: LD_VAR 0 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: LD_INT 30
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 30
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PPUSH
62950: CALL_OW 69
62954: ST_TO_ADDR
// crates := 0 ;
62955: LD_ADDR_VAR 0 4
62959: PUSH
62960: LD_INT 0
62962: ST_TO_ADDR
// oil := 0 ;
62963: LD_ADDR_VAR 0 5
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// sib := 0 ;
62971: LD_ADDR_VAR 0 6
62975: PUSH
62976: LD_INT 0
62978: ST_TO_ADDR
// if bases then
62979: LD_VAR 0 9
62983: IFFALSE 63089
// begin for j in bases do
62985: LD_ADDR_VAR 0 3
62989: PUSH
62990: LD_VAR 0 9
62994: PUSH
62995: FOR_IN
62996: IFFALSE 63087
// begin base := GetBase ( j ) ;
62998: LD_ADDR_VAR 0 8
63002: PUSH
63003: LD_VAR 0 3
63007: PPUSH
63008: CALL_OW 274
63012: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63013: LD_ADDR_VAR 0 4
63017: PUSH
63018: LD_VAR 0 4
63022: PUSH
63023: LD_VAR 0 8
63027: PPUSH
63028: LD_INT 1
63030: PPUSH
63031: CALL_OW 275
63035: PLUS
63036: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63037: LD_ADDR_VAR 0 5
63041: PUSH
63042: LD_VAR 0 5
63046: PUSH
63047: LD_VAR 0 8
63051: PPUSH
63052: LD_INT 2
63054: PPUSH
63055: CALL_OW 275
63059: PLUS
63060: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63061: LD_ADDR_VAR 0 6
63065: PUSH
63066: LD_VAR 0 6
63070: PUSH
63071: LD_VAR 0 8
63075: PPUSH
63076: LD_INT 3
63078: PPUSH
63079: CALL_OW 275
63083: PLUS
63084: ST_TO_ADDR
// end ;
63085: GO 62995
63087: POP
63088: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63089: LD_STRING setSpecText(
63091: PUSH
63092: LD_VAR 0 2
63096: STR
63097: PUSH
63098: LD_STRING ,
63100: STR
63101: PUSH
63102: LD_INT 2
63104: STR
63105: PUSH
63106: LD_STRING ,
63108: STR
63109: PUSH
63110: LD_VAR 0 4
63114: STR
63115: PUSH
63116: LD_STRING )
63118: STR
63119: PPUSH
63120: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63124: LD_STRING setSpecText(
63126: PUSH
63127: LD_VAR 0 2
63131: STR
63132: PUSH
63133: LD_STRING ,
63135: STR
63136: PUSH
63137: LD_INT 3
63139: STR
63140: PUSH
63141: LD_STRING ,
63143: STR
63144: PUSH
63145: LD_VAR 0 5
63149: STR
63150: PUSH
63151: LD_STRING )
63153: STR
63154: PPUSH
63155: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63159: LD_STRING setSpecText(
63161: PUSH
63162: LD_VAR 0 2
63166: STR
63167: PUSH
63168: LD_STRING ,
63170: STR
63171: PUSH
63172: LD_INT 4
63174: STR
63175: PUSH
63176: LD_STRING ,
63178: STR
63179: PUSH
63180: LD_VAR 0 6
63184: STR
63185: PUSH
63186: LD_STRING )
63188: STR
63189: PPUSH
63190: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63194: LD_STRING setSpecText(
63196: PUSH
63197: LD_VAR 0 2
63201: STR
63202: PUSH
63203: LD_STRING ,
63205: STR
63206: PUSH
63207: LD_INT 5
63209: STR
63210: PUSH
63211: LD_STRING ,
63213: STR
63214: PUSH
63215: LD_VAR 0 7
63219: STR
63220: PUSH
63221: LD_STRING )
63223: STR
63224: PPUSH
63225: CALL_OW 559
// end ; end ;
63229: GO 62845
63231: POP
63232: POP
// end ;
63233: LD_VAR 0 1
63237: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63238: LD_INT 2
63240: PUSH
63241: LD_INT 30
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 30
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: PPUSH
63266: CALL_OW 69
63270: IFFALSE 63280
63272: GO 63274
63274: DISABLE
// begin enable ;
63275: ENABLE
// UpdateSpectatorBar ;
63276: CALL 62821 0 0
// end ;
63280: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63281: LD_INT 0
63283: PPUSH
// end ;
63284: LD_VAR 0 12
63288: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63293: LD_VAR 0 1
63297: NOT
63298: IFTRUE 63317
63300: PUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: LD_VAR 0 3
63310: PPUSH
63311: CALL_OW 488
63315: NOT
63316: OR
63317: IFTRUE 63352
63319: PUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: CALL_OW 266
63329: PUSH
63330: LD_INT 3
63332: NONEQUAL
63333: IFFALSE 63351
63335: PUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: CALL_OW 247
63345: PUSH
63346: LD_INT 1
63348: EQUAL
63349: NOT
63350: AND
63351: OR
63352: IFFALSE 63356
// exit ;
63354: GO 63638
// if GetType ( factory ) = unit_human then
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 247
63365: PUSH
63366: LD_INT 1
63368: EQUAL
63369: IFFALSE 63386
// factory := IsInUnit ( factory ) ;
63371: LD_ADDR_VAR 0 1
63375: PUSH
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 310
63385: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 266
63395: PUSH
63396: LD_INT 3
63398: NONEQUAL
63399: IFFALSE 63403
// exit ;
63401: GO 63638
// for i := 1 to Count ( factoryWaypoints ) do
63403: LD_ADDR_VAR 0 5
63407: PUSH
63408: DOUBLE
63409: LD_INT 1
63411: DEC
63412: ST_TO_ADDR
63413: LD_EXP 58
63417: PPUSH
63418: CALL 5165 0 1
63422: PUSH
63423: FOR_TO
63424: IFFALSE 63586
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63426: LD_VAR 0 2
63430: PPUSH
63431: LD_VAR 0 3
63435: PPUSH
63436: CALL_OW 428
63440: PUSH
63441: LD_EXP 58
63445: PUSH
63446: LD_VAR 0 5
63450: ARRAY
63451: PUSH
63452: LD_INT 2
63454: ARRAY
63455: EQUAL
63456: IFFALSE 63488
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63458: LD_ADDR_EXP 58
63462: PUSH
63463: LD_EXP 58
63467: PPUSH
63468: LD_VAR 0 5
63472: PPUSH
63473: CALL_OW 3
63477: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63478: CALL 63643 0 0
// exit ;
63482: POP
63483: POP
63484: GO 63638
// end else
63486: GO 63584
// if factory = factoryWaypoints [ i ] [ 2 ] then
63488: LD_VAR 0 1
63492: PUSH
63493: LD_EXP 58
63497: PUSH
63498: LD_VAR 0 5
63502: ARRAY
63503: PUSH
63504: LD_INT 2
63506: ARRAY
63507: EQUAL
63508: IFFALSE 63584
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63510: LD_ADDR_EXP 58
63514: PUSH
63515: LD_EXP 58
63519: PPUSH
63520: LD_VAR 0 5
63524: PPUSH
63525: CALL_OW 3
63529: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63530: LD_ADDR_EXP 58
63534: PUSH
63535: LD_EXP 58
63539: PPUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: CALL_OW 255
63549: PUSH
63550: LD_VAR 0 1
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: LD_VAR 0 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: PPUSH
63571: CALL 41131 0 2
63575: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63576: CALL 63643 0 0
// exit ;
63580: POP
63581: POP
63582: GO 63638
// end ; end ;
63584: GO 63423
63586: POP
63587: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63588: LD_ADDR_EXP 58
63592: PUSH
63593: LD_EXP 58
63597: PPUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: CALL_OW 255
63607: PUSH
63608: LD_VAR 0 1
63612: PUSH
63613: LD_VAR 0 2
63617: PUSH
63618: LD_VAR 0 3
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: PPUSH
63629: CALL 41131 0 2
63633: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63634: CALL 63643 0 0
// end ;
63638: LD_VAR 0 4
63642: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63643: LD_INT 0
63645: PPUSH
63646: PPUSH
63647: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63648: LD_STRING resetFactoryWaypoint();
63650: PPUSH
63651: CALL_OW 559
// if factoryWaypoints then
63655: LD_EXP 58
63659: IFFALSE 63780
// begin list := factoryWaypoints ;
63661: LD_ADDR_VAR 0 3
63665: PUSH
63666: LD_EXP 58
63670: ST_TO_ADDR
// for i := 1 to list do
63671: LD_ADDR_VAR 0 2
63675: PUSH
63676: DOUBLE
63677: LD_INT 1
63679: DEC
63680: ST_TO_ADDR
63681: LD_VAR 0 3
63685: PUSH
63686: FOR_TO
63687: IFFALSE 63778
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63689: LD_STRING setFactoryWaypointXY(
63691: PUSH
63692: LD_VAR 0 3
63696: PUSH
63697: LD_VAR 0 2
63701: ARRAY
63702: PUSH
63703: LD_INT 1
63705: ARRAY
63706: STR
63707: PUSH
63708: LD_STRING ,
63710: STR
63711: PUSH
63712: LD_VAR 0 3
63716: PUSH
63717: LD_VAR 0 2
63721: ARRAY
63722: PUSH
63723: LD_INT 2
63725: ARRAY
63726: STR
63727: PUSH
63728: LD_STRING ,
63730: STR
63731: PUSH
63732: LD_VAR 0 3
63736: PUSH
63737: LD_VAR 0 2
63741: ARRAY
63742: PUSH
63743: LD_INT 3
63745: ARRAY
63746: STR
63747: PUSH
63748: LD_STRING ,
63750: STR
63751: PUSH
63752: LD_VAR 0 3
63756: PUSH
63757: LD_VAR 0 2
63761: ARRAY
63762: PUSH
63763: LD_INT 4
63765: ARRAY
63766: STR
63767: PUSH
63768: LD_STRING )
63770: STR
63771: PPUSH
63772: CALL_OW 559
63776: GO 63686
63778: POP
63779: POP
// end ; end ;
63780: LD_VAR 0 1
63784: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63785: LD_INT 0
63787: PPUSH
// if HexInfo ( x , y ) = warehouse then
63788: LD_VAR 0 2
63792: PPUSH
63793: LD_VAR 0 3
63797: PPUSH
63798: CALL_OW 428
63802: PUSH
63803: LD_VAR 0 1
63807: EQUAL
63808: IFFALSE 63835
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63810: LD_ADDR_EXP 60
63814: PUSH
63815: LD_EXP 60
63819: PPUSH
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_INT 0
63827: PPUSH
63828: CALL_OW 1
63832: ST_TO_ADDR
63833: GO 63886
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63835: LD_ADDR_EXP 60
63839: PUSH
63840: LD_EXP 60
63844: PPUSH
63845: LD_VAR 0 1
63849: PPUSH
63850: LD_VAR 0 1
63854: PPUSH
63855: CALL_OW 255
63859: PUSH
63860: LD_VAR 0 1
63864: PUSH
63865: LD_VAR 0 2
63869: PUSH
63870: LD_VAR 0 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: PPUSH
63881: CALL_OW 1
63885: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63886: CALL 63895 0 0
// end ;
63890: LD_VAR 0 4
63894: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63895: LD_INT 0
63897: PPUSH
63898: PPUSH
63899: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63900: LD_STRING resetWarehouseGatheringPoints();
63902: PPUSH
63903: CALL_OW 559
// if warehouseGatheringPoints then
63907: LD_EXP 60
63911: IFFALSE 64037
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63913: LD_ADDR_VAR 0 3
63917: PUSH
63918: LD_EXP 60
63922: PPUSH
63923: CALL 45065 0 1
63927: ST_TO_ADDR
// for i := 1 to list do
63928: LD_ADDR_VAR 0 2
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_VAR 0 3
63942: PUSH
63943: FOR_TO
63944: IFFALSE 64035
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63946: LD_STRING setWarehouseGatheringPointXY(
63948: PUSH
63949: LD_VAR 0 3
63953: PUSH
63954: LD_VAR 0 2
63958: ARRAY
63959: PUSH
63960: LD_INT 1
63962: ARRAY
63963: STR
63964: PUSH
63965: LD_STRING ,
63967: STR
63968: PUSH
63969: LD_VAR 0 3
63973: PUSH
63974: LD_VAR 0 2
63978: ARRAY
63979: PUSH
63980: LD_INT 2
63982: ARRAY
63983: STR
63984: PUSH
63985: LD_STRING ,
63987: STR
63988: PUSH
63989: LD_VAR 0 3
63993: PUSH
63994: LD_VAR 0 2
63998: ARRAY
63999: PUSH
64000: LD_INT 3
64002: ARRAY
64003: STR
64004: PUSH
64005: LD_STRING ,
64007: STR
64008: PUSH
64009: LD_VAR 0 3
64013: PUSH
64014: LD_VAR 0 2
64018: ARRAY
64019: PUSH
64020: LD_INT 4
64022: ARRAY
64023: STR
64024: PUSH
64025: LD_STRING )
64027: STR
64028: PPUSH
64029: CALL_OW 559
64033: GO 63943
64035: POP
64036: POP
// end ; end ;
64037: LD_VAR 0 1
64041: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64042: LD_INT 0
64044: PPUSH
64045: PPUSH
// if not mpSidePositions then
64046: LD_EXP 5
64050: NOT
64051: IFFALSE 64055
// exit ;
64053: GO 64126
// result :=  ;
64055: LD_ADDR_VAR 0 1
64059: PUSH
64060: LD_STRING 
64062: ST_TO_ADDR
// for i := 1 to 8 do
64063: LD_ADDR_VAR 0 2
64067: PUSH
64068: DOUBLE
64069: LD_INT 1
64071: DEC
64072: ST_TO_ADDR
64073: LD_INT 8
64075: PUSH
64076: FOR_TO
64077: IFFALSE 64107
// begin result := result & mpSidePositions [ i ] & ; ;
64079: LD_ADDR_VAR 0 1
64083: PUSH
64084: LD_VAR 0 1
64088: PUSH
64089: LD_EXP 5
64093: PUSH
64094: LD_VAR 0 2
64098: ARRAY
64099: STR
64100: PUSH
64101: LD_STRING ;
64103: STR
64104: ST_TO_ADDR
// end ;
64105: GO 64076
64107: POP
64108: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64109: LD_STRING setMultiplayerRealPosition("
64111: PUSH
64112: LD_VAR 0 1
64116: STR
64117: PUSH
64118: LD_STRING ");
64120: STR
64121: PPUSH
64122: CALL_OW 559
// end ;
64126: LD_VAR 0 1
64130: RET
