// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45677 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45992 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 31
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 32
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 31
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 32
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 34
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 33
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45132 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45132 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45132 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45132 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45132 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45132 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45132 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45132 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 4984 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44965 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44965 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44965 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44965 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 44965 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 44965 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 44965 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 44965 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 44965 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 44965 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 44965 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 44965 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 44965 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 44965 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 44965 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 44965 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45132 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45132 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45132 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45132 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45132 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45132 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45132 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45132 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45132 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45132 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45132 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45132 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45132 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45132 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45132 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45132 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45132 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45132 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45132 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45132 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45132 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45132 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45132 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45132 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 41954 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 53807 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 50514 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 53824 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 51117 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL 53865 0 2
2857: PPOPN 2
2859: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_VAR 0 3
2874: PPUSH
2875: CALL 51170 0 3
2879: PPOPN 3
2881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// if exist_mode then
2886: LD_VAR 0 2
2890: IFFALSE 2915
// unit := CreateCharacter ( prefix & ident ) else
2892: LD_ADDR_VAR 0 5
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_VAR 0 1
2906: STR
2907: PPUSH
2908: CALL_OW 34
2912: ST_TO_ADDR
2913: GO 2930
// unit := NewCharacter ( ident ) ;
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL_OW 25
2929: ST_TO_ADDR
// result := unit ;
2930: LD_ADDR_VAR 0 4
2934: PUSH
2935: LD_VAR 0 5
2939: ST_TO_ADDR
// end ;
2940: LD_VAR 0 4
2944: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2945: LD_INT 0
2947: PPUSH
2948: PPUSH
// if not side or not nation then
2949: LD_VAR 0 1
2953: NOT
2954: PUSH
2955: LD_VAR 0 2
2959: NOT
2960: OR
2961: IFFALSE 2965
// exit ;
2963: GO 3733
// case nation of nation_american :
2965: LD_VAR 0 2
2969: PUSH
2970: LD_INT 1
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3192
2978: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_INT 35
2986: PUSH
2987: LD_INT 45
2989: PUSH
2990: LD_INT 46
2992: PUSH
2993: LD_INT 47
2995: PUSH
2996: LD_INT 82
2998: PUSH
2999: LD_INT 83
3001: PUSH
3002: LD_INT 84
3004: PUSH
3005: LD_INT 85
3007: PUSH
3008: LD_INT 86
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 2
3016: PUSH
3017: LD_INT 6
3019: PUSH
3020: LD_INT 15
3022: PUSH
3023: LD_INT 16
3025: PUSH
3026: LD_INT 7
3028: PUSH
3029: LD_INT 12
3031: PUSH
3032: LD_INT 13
3034: PUSH
3035: LD_INT 10
3037: PUSH
3038: LD_INT 14
3040: PUSH
3041: LD_INT 20
3043: PUSH
3044: LD_INT 21
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 25
3052: PUSH
3053: LD_INT 32
3055: PUSH
3056: LD_INT 27
3058: PUSH
3059: LD_INT 36
3061: PUSH
3062: LD_INT 69
3064: PUSH
3065: LD_INT 39
3067: PUSH
3068: LD_INT 34
3070: PUSH
3071: LD_INT 40
3073: PUSH
3074: LD_INT 48
3076: PUSH
3077: LD_INT 49
3079: PUSH
3080: LD_INT 50
3082: PUSH
3083: LD_INT 51
3085: PUSH
3086: LD_INT 52
3088: PUSH
3089: LD_INT 53
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: LD_INT 55
3097: PUSH
3098: LD_INT 56
3100: PUSH
3101: LD_INT 57
3103: PUSH
3104: LD_INT 58
3106: PUSH
3107: LD_INT 59
3109: PUSH
3110: LD_INT 60
3112: PUSH
3113: LD_INT 61
3115: PUSH
3116: LD_INT 62
3118: PUSH
3119: LD_INT 80
3121: PUSH
3122: LD_INT 82
3124: PUSH
3125: LD_INT 83
3127: PUSH
3128: LD_INT 84
3130: PUSH
3131: LD_INT 85
3133: PUSH
3134: LD_INT 86
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: ST_TO_ADDR
3190: GO 3657
3192: LD_INT 2
3194: DOUBLE
3195: EQUAL
3196: IFTRUE 3200
3198: GO 3426
3200: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3201: LD_ADDR_VAR 0 4
3205: PUSH
3206: LD_INT 35
3208: PUSH
3209: LD_INT 45
3211: PUSH
3212: LD_INT 46
3214: PUSH
3215: LD_INT 47
3217: PUSH
3218: LD_INT 82
3220: PUSH
3221: LD_INT 83
3223: PUSH
3224: LD_INT 84
3226: PUSH
3227: LD_INT 85
3229: PUSH
3230: LD_INT 87
3232: PUSH
3233: LD_INT 70
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: LD_INT 11
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: LD_INT 15
3256: PUSH
3257: LD_INT 18
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 17
3265: PUSH
3266: LD_INT 8
3268: PUSH
3269: LD_INT 20
3271: PUSH
3272: LD_INT 21
3274: PUSH
3275: LD_INT 22
3277: PUSH
3278: LD_INT 72
3280: PUSH
3281: LD_INT 26
3283: PUSH
3284: LD_INT 69
3286: PUSH
3287: LD_INT 39
3289: PUSH
3290: LD_INT 40
3292: PUSH
3293: LD_INT 41
3295: PUSH
3296: LD_INT 42
3298: PUSH
3299: LD_INT 43
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: LD_INT 49
3307: PUSH
3308: LD_INT 50
3310: PUSH
3311: LD_INT 51
3313: PUSH
3314: LD_INT 52
3316: PUSH
3317: LD_INT 53
3319: PUSH
3320: LD_INT 54
3322: PUSH
3323: LD_INT 55
3325: PUSH
3326: LD_INT 56
3328: PUSH
3329: LD_INT 60
3331: PUSH
3332: LD_INT 61
3334: PUSH
3335: LD_INT 62
3337: PUSH
3338: LD_INT 66
3340: PUSH
3341: LD_INT 67
3343: PUSH
3344: LD_INT 68
3346: PUSH
3347: LD_INT 81
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: LD_INT 83
3355: PUSH
3356: LD_INT 84
3358: PUSH
3359: LD_INT 85
3361: PUSH
3362: LD_INT 87
3364: PUSH
3365: LD_INT 88
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: ST_TO_ADDR
3424: GO 3657
3426: LD_INT 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3656
3434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3435: LD_ADDR_VAR 0 4
3439: PUSH
3440: LD_INT 46
3442: PUSH
3443: LD_INT 47
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: LD_INT 2
3451: PUSH
3452: LD_INT 82
3454: PUSH
3455: LD_INT 83
3457: PUSH
3458: LD_INT 84
3460: PUSH
3461: LD_INT 85
3463: PUSH
3464: LD_INT 86
3466: PUSH
3467: LD_INT 11
3469: PUSH
3470: LD_INT 9
3472: PUSH
3473: LD_INT 20
3475: PUSH
3476: LD_INT 19
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 24
3484: PUSH
3485: LD_INT 22
3487: PUSH
3488: LD_INT 25
3490: PUSH
3491: LD_INT 28
3493: PUSH
3494: LD_INT 29
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 31
3502: PUSH
3503: LD_INT 37
3505: PUSH
3506: LD_INT 38
3508: PUSH
3509: LD_INT 32
3511: PUSH
3512: LD_INT 27
3514: PUSH
3515: LD_INT 33
3517: PUSH
3518: LD_INT 69
3520: PUSH
3521: LD_INT 39
3523: PUSH
3524: LD_INT 34
3526: PUSH
3527: LD_INT 40
3529: PUSH
3530: LD_INT 71
3532: PUSH
3533: LD_INT 23
3535: PUSH
3536: LD_INT 44
3538: PUSH
3539: LD_INT 48
3541: PUSH
3542: LD_INT 49
3544: PUSH
3545: LD_INT 50
3547: PUSH
3548: LD_INT 51
3550: PUSH
3551: LD_INT 52
3553: PUSH
3554: LD_INT 53
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: LD_INT 55
3562: PUSH
3563: LD_INT 56
3565: PUSH
3566: LD_INT 57
3568: PUSH
3569: LD_INT 58
3571: PUSH
3572: LD_INT 59
3574: PUSH
3575: LD_INT 63
3577: PUSH
3578: LD_INT 64
3580: PUSH
3581: LD_INT 65
3583: PUSH
3584: LD_INT 82
3586: PUSH
3587: LD_INT 83
3589: PUSH
3590: LD_INT 84
3592: PUSH
3593: LD_INT 85
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 3657
3656: POP
// if state > - 1 and state < 3 then
3657: LD_VAR 0 3
3661: PUSH
3662: LD_INT 1
3664: NEG
3665: GREATER
3666: PUSH
3667: LD_VAR 0 3
3671: PUSH
3672: LD_INT 3
3674: LESS
3675: AND
3676: IFFALSE 3733
// for i in result do
3678: LD_ADDR_VAR 0 5
3682: PUSH
3683: LD_VAR 0 4
3687: PUSH
3688: FOR_IN
3689: IFFALSE 3731
// if GetTech ( i , side ) <> state then
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_VAR 0 1
3700: PPUSH
3701: CALL_OW 321
3705: PUSH
3706: LD_VAR 0 3
3710: NONEQUAL
3711: IFFALSE 3729
// result := result diff i ;
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_VAR 0 4
3722: PUSH
3723: LD_VAR 0 5
3727: DIFF
3728: ST_TO_ADDR
3729: GO 3688
3731: POP
3732: POP
// end ;
3733: LD_VAR 0 4
3737: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
// result := true ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL_OW 480
3765: ST_TO_ADDR
// if not tmp then
3766: LD_VAR 0 5
3770: NOT
3771: IFFALSE 3775
// exit ;
3773: GO 3824
// for i in tmp do
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_VAR 0 5
3784: PUSH
3785: FOR_IN
3786: IFFALSE 3822
// if GetTech ( i , side ) <> state_researched then
3788: LD_VAR 0 4
3792: PPUSH
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 321
3802: PUSH
3803: LD_INT 2
3805: NONEQUAL
3806: IFFALSE 3820
// begin result := false ;
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: LD_INT 0
3815: ST_TO_ADDR
// exit ;
3816: POP
3817: POP
3818: GO 3824
// end ;
3820: GO 3785
3822: POP
3823: POP
// end ;
3824: LD_VAR 0 3
3828: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3829: LD_INT 0
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3844: LD_VAR 0 1
3848: NOT
3849: PUSH
3850: LD_VAR 0 1
3854: PPUSH
3855: CALL_OW 257
3859: PUSH
3860: LD_INT 9
3862: NONEQUAL
3863: OR
3864: IFFALSE 3868
// exit ;
3866: GO 4441
// side := GetSide ( unit ) ;
3868: LD_ADDR_VAR 0 9
3872: PUSH
3873: LD_VAR 0 1
3877: PPUSH
3878: CALL_OW 255
3882: ST_TO_ADDR
// tech_space := tech_spacanom ;
3883: LD_ADDR_VAR 0 12
3887: PUSH
3888: LD_INT 29
3890: ST_TO_ADDR
// tech_time := tech_taurad ;
3891: LD_ADDR_VAR 0 13
3895: PUSH
3896: LD_INT 28
3898: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3899: LD_ADDR_VAR 0 11
3903: PUSH
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 310
3913: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3914: LD_VAR 0 11
3918: PPUSH
3919: CALL_OW 247
3923: PUSH
3924: LD_INT 2
3926: EQUAL
3927: IFFALSE 3931
// exit ;
3929: GO 4441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3931: LD_ADDR_VAR 0 8
3935: PUSH
3936: LD_INT 81
3938: PUSH
3939: LD_VAR 0 9
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: LD_INT 21
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not tmp then
3974: LD_VAR 0 8
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4441
// if in_unit then
3983: LD_VAR 0 11
3987: IFFALSE 4011
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3989: LD_ADDR_VAR 0 10
3993: PUSH
3994: LD_VAR 0 8
3998: PPUSH
3999: LD_VAR 0 11
4003: PPUSH
4004: CALL_OW 74
4008: ST_TO_ADDR
4009: GO 4031
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4011: LD_ADDR_VAR 0 10
4015: PUSH
4016: LD_VAR 0 8
4020: PPUSH
4021: LD_VAR 0 1
4025: PPUSH
4026: CALL_OW 74
4030: ST_TO_ADDR
// if not enemy then
4031: LD_VAR 0 10
4035: NOT
4036: IFFALSE 4040
// exit ;
4038: GO 4441
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4040: LD_VAR 0 11
4044: PUSH
4045: LD_VAR 0 11
4049: PPUSH
4050: LD_VAR 0 10
4054: PPUSH
4055: CALL_OW 296
4059: PUSH
4060: LD_INT 13
4062: GREATER
4063: AND
4064: PUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: LD_VAR 0 10
4074: PPUSH
4075: CALL_OW 296
4079: PUSH
4080: LD_INT 12
4082: GREATER
4083: OR
4084: IFFALSE 4088
// exit ;
4086: GO 4441
// missile := [ 1 ] ;
4088: LD_ADDR_VAR 0 14
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4099: LD_VAR 0 9
4103: PPUSH
4104: LD_VAR 0 12
4108: PPUSH
4109: CALL_OW 325
4113: IFFALSE 4142
// missile := Replace ( missile , missile + 1 , 2 ) ;
4115: LD_ADDR_VAR 0 14
4119: PUSH
4120: LD_VAR 0 14
4124: PPUSH
4125: LD_VAR 0 14
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: PPUSH
4134: LD_INT 2
4136: PPUSH
4137: CALL_OW 1
4141: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4142: LD_VAR 0 9
4146: PPUSH
4147: LD_VAR 0 13
4151: PPUSH
4152: CALL_OW 325
4156: PUSH
4157: LD_VAR 0 10
4161: PPUSH
4162: CALL_OW 255
4166: PPUSH
4167: LD_VAR 0 13
4171: PPUSH
4172: CALL_OW 325
4176: NOT
4177: AND
4178: IFFALSE 4207
// missile := Replace ( missile , missile + 1 , 3 ) ;
4180: LD_ADDR_VAR 0 14
4184: PUSH
4185: LD_VAR 0 14
4189: PPUSH
4190: LD_VAR 0 14
4194: PUSH
4195: LD_INT 1
4197: PLUS
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: CALL_OW 1
4206: ST_TO_ADDR
// if missile < 2 then
4207: LD_VAR 0 14
4211: PUSH
4212: LD_INT 2
4214: LESS
4215: IFFALSE 4219
// exit ;
4217: GO 4441
// x := GetX ( enemy ) ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 10
4228: PPUSH
4229: CALL_OW 250
4233: ST_TO_ADDR
// y := GetY ( enemy ) ;
4234: LD_ADDR_VAR 0 5
4238: PUSH
4239: LD_VAR 0 10
4243: PPUSH
4244: CALL_OW 251
4248: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4249: LD_ADDR_VAR 0 6
4253: PUSH
4254: LD_VAR 0 4
4258: PUSH
4259: LD_INT 1
4261: NEG
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: PLUS
4271: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4272: LD_ADDR_VAR 0 7
4276: PUSH
4277: LD_VAR 0 5
4281: PUSH
4282: LD_INT 1
4284: NEG
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 12
4293: PLUS
4294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4295: LD_VAR 0 6
4299: PPUSH
4300: LD_VAR 0 7
4304: PPUSH
4305: CALL_OW 488
4309: NOT
4310: IFFALSE 4332
// begin _x := x ;
4312: LD_ADDR_VAR 0 6
4316: PUSH
4317: LD_VAR 0 4
4321: ST_TO_ADDR
// _y := y ;
4322: LD_ADDR_VAR 0 7
4326: PUSH
4327: LD_VAR 0 5
4331: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_VAR 0 14
4344: PPUSH
4345: CALL_OW 12
4349: ST_TO_ADDR
// case i of 1 :
4350: LD_VAR 0 3
4354: PUSH
4355: LD_INT 1
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4380
4363: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4364: LD_VAR 0 1
4368: PPUSH
4369: LD_VAR 0 10
4373: PPUSH
4374: CALL_OW 115
4378: GO 4441
4380: LD_INT 2
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4410
4388: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_VAR 0 6
4398: PPUSH
4399: LD_VAR 0 7
4403: PPUSH
4404: CALL_OW 153
4408: GO 4441
4410: LD_INT 3
4412: DOUBLE
4413: EQUAL
4414: IFTRUE 4418
4416: GO 4440
4418: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_VAR 0 6
4428: PPUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: CALL_OW 154
4438: GO 4441
4440: POP
// end ;
4441: LD_VAR 0 2
4445: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4446: LD_INT 0
4448: PPUSH
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// if not unit or not building then
4454: LD_VAR 0 1
4458: NOT
4459: PUSH
4460: LD_VAR 0 2
4464: NOT
4465: OR
4466: IFFALSE 4470
// exit ;
4468: GO 4628
// x := GetX ( building ) ;
4470: LD_ADDR_VAR 0 5
4474: PUSH
4475: LD_VAR 0 2
4479: PPUSH
4480: CALL_OW 250
4484: ST_TO_ADDR
// y := GetY ( building ) ;
4485: LD_ADDR_VAR 0 6
4489: PUSH
4490: LD_VAR 0 2
4494: PPUSH
4495: CALL_OW 251
4499: ST_TO_ADDR
// for i = 0 to 5 do
4500: LD_ADDR_VAR 0 4
4504: PUSH
4505: DOUBLE
4506: LD_INT 0
4508: DEC
4509: ST_TO_ADDR
4510: LD_INT 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4626
// begin _x := ShiftX ( x , i , 3 ) ;
4516: LD_ADDR_VAR 0 7
4520: PUSH
4521: LD_VAR 0 5
4525: PPUSH
4526: LD_VAR 0 4
4530: PPUSH
4531: LD_INT 3
4533: PPUSH
4534: CALL_OW 272
4538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4539: LD_ADDR_VAR 0 8
4543: PUSH
4544: LD_VAR 0 6
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_INT 3
4556: PPUSH
4557: CALL_OW 273
4561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4562: LD_VAR 0 7
4566: PPUSH
4567: LD_VAR 0 8
4571: PPUSH
4572: CALL_OW 488
4576: NOT
4577: IFFALSE 4581
// continue ;
4579: GO 4513
// if HexInfo ( _x , _y ) = 0 then
4581: LD_VAR 0 7
4585: PPUSH
4586: LD_VAR 0 8
4590: PPUSH
4591: CALL_OW 428
4595: PUSH
4596: LD_INT 0
4598: EQUAL
4599: IFFALSE 4624
// begin ComMoveXY ( unit , _x , _y ) ;
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_VAR 0 7
4610: PPUSH
4611: LD_VAR 0 8
4615: PPUSH
4616: CALL_OW 111
// exit ;
4620: POP
4621: POP
4622: GO 4628
// end ; end ;
4624: GO 4513
4626: POP
4627: POP
// end ;
4628: LD_VAR 0 3
4632: RET
// export function ScanBase ( side , base_area ) ; begin
4633: LD_INT 0
4635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: LD_VAR 0 2
4645: PPUSH
4646: LD_INT 81
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 70
4662: ST_TO_ADDR
// end ;
4663: LD_VAR 0 3
4667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4668: LD_INT 0
4670: PPUSH
4671: PPUSH
4672: PPUSH
4673: PPUSH
// result := false ;
4674: LD_ADDR_VAR 0 2
4678: PUSH
4679: LD_INT 0
4681: ST_TO_ADDR
// side := GetSide ( unit ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 1
4691: PPUSH
4692: CALL_OW 255
4696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 248
4711: ST_TO_ADDR
// case nat of 1 :
4712: LD_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: DOUBLE
4720: EQUAL
4721: IFTRUE 4725
4723: GO 4736
4725: POP
// tech := tech_lassight ; 2 :
4726: LD_ADDR_VAR 0 5
4730: PUSH
4731: LD_INT 12
4733: ST_TO_ADDR
4734: GO 4775
4736: LD_INT 2
4738: DOUBLE
4739: EQUAL
4740: IFTRUE 4744
4742: GO 4755
4744: POP
// tech := tech_mortar ; 3 :
4745: LD_ADDR_VAR 0 5
4749: PUSH
4750: LD_INT 41
4752: ST_TO_ADDR
4753: GO 4775
4755: LD_INT 3
4757: DOUBLE
4758: EQUAL
4759: IFTRUE 4763
4761: GO 4774
4763: POP
// tech := tech_bazooka ; end ;
4764: LD_ADDR_VAR 0 5
4768: PUSH
4769: LD_INT 44
4771: ST_TO_ADDR
4772: GO 4775
4774: POP
// if Researched ( side , tech ) then
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_VAR 0 5
4784: PPUSH
4785: CALL_OW 325
4789: IFFALSE 4816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4791: LD_ADDR_VAR 0 2
4795: PUSH
4796: LD_INT 5
4798: PUSH
4799: LD_INT 8
4801: PUSH
4802: LD_INT 9
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: LD_VAR 0 4
4814: ARRAY
4815: ST_TO_ADDR
// end ;
4816: LD_VAR 0 2
4820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
// if not mines then
4826: LD_VAR 0 2
4830: NOT
4831: IFFALSE 4835
// exit ;
4833: GO 4979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 81
4842: PUSH
4843: LD_VAR 0 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 21
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// for i in mines do
4878: LD_ADDR_VAR 0 4
4882: PUSH
4883: LD_VAR 0 2
4887: PUSH
4888: FOR_IN
4889: IFFALSE 4977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4891: LD_VAR 0 4
4895: PUSH
4896: LD_INT 1
4898: ARRAY
4899: PPUSH
4900: LD_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ARRAY
4908: PPUSH
4909: CALL_OW 458
4913: NOT
4914: IFFALSE 4918
// continue ;
4916: GO 4888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4918: LD_VAR 0 4
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 4
4931: PUSH
4932: LD_INT 2
4934: ARRAY
4935: PPUSH
4936: CALL_OW 428
4940: PUSH
4941: LD_VAR 0 5
4945: IN
4946: IFFALSE 4975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4948: LD_VAR 0 4
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 2
4964: ARRAY
4965: PPUSH
4966: LD_VAR 0 1
4970: PPUSH
4971: CALL_OW 456
// end ;
4975: GO 4888
4977: POP
4978: POP
// end ;
4979: LD_VAR 0 3
4983: RET
// export function Count ( array ) ; begin
4984: LD_INT 0
4986: PPUSH
// result := array + 0 ;
4987: LD_ADDR_VAR 0 2
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: LD_INT 0
4999: PLUS
5000: ST_TO_ADDR
// end ;
5001: LD_VAR 0 2
5005: RET
// export function IsEmpty ( building ) ; begin
5006: LD_INT 0
5008: PPUSH
// if not building then
5009: LD_VAR 0 1
5013: NOT
5014: IFFALSE 5018
// exit ;
5016: GO 5061
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: LD_VAR 0 1
5027: PUSH
5028: LD_INT 22
5030: PUSH
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 255
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 58
5047: PUSH
5048: EMPTY
5049: LIST
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PPUSH
5055: CALL_OW 69
5059: IN
5060: ST_TO_ADDR
// end ;
5061: LD_VAR 0 2
5065: RET
// export function IsNotFull ( building ) ; var places ; begin
5066: LD_INT 0
5068: PPUSH
5069: PPUSH
// if not building then
5070: LD_VAR 0 1
5074: NOT
5075: IFFALSE 5079
// exit ;
5077: GO 5107
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_VAR 0 1
5088: PPUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 62
5094: PUSH
5095: EMPTY
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 72
5106: ST_TO_ADDR
// end ;
5107: LD_VAR 0 2
5111: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5112: LD_INT 0
5114: PPUSH
5115: PPUSH
5116: PPUSH
5117: PPUSH
// tmp := [ ] ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// list := [ ] ;
5125: LD_ADDR_VAR 0 5
5129: PUSH
5130: EMPTY
5131: ST_TO_ADDR
// for i = 16 to 25 do
5132: LD_ADDR_VAR 0 4
5136: PUSH
5137: DOUBLE
5138: LD_INT 16
5140: DEC
5141: ST_TO_ADDR
5142: LD_INT 25
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5219
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_VAR 0 3
5157: PUSH
5158: LD_INT 22
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 255
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 91
5177: PUSH
5178: LD_VAR 0 1
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 30
5193: PUSH
5194: LD_VAR 0 4
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: ADD
5216: ST_TO_ADDR
5217: GO 5145
5219: POP
5220: POP
// for i = 1 to tmp do
5221: LD_ADDR_VAR 0 4
5225: PUSH
5226: DOUBLE
5227: LD_INT 1
5229: DEC
5230: ST_TO_ADDR
5231: LD_VAR 0 3
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5325
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5239: LD_ADDR_VAR 0 5
5243: PUSH
5244: LD_VAR 0 5
5248: PUSH
5249: LD_VAR 0 3
5253: PUSH
5254: LD_VAR 0 4
5258: ARRAY
5259: PPUSH
5260: CALL_OW 266
5264: PUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: PPUSH
5276: CALL_OW 250
5280: PUSH
5281: LD_VAR 0 3
5285: PUSH
5286: LD_VAR 0 4
5290: ARRAY
5291: PPUSH
5292: CALL_OW 251
5296: PUSH
5297: LD_VAR 0 3
5301: PUSH
5302: LD_VAR 0 4
5306: ARRAY
5307: PPUSH
5308: CALL_OW 254
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: ADD
5322: ST_TO_ADDR
5323: GO 5236
5325: POP
5326: POP
// result := list ;
5327: LD_ADDR_VAR 0 2
5331: PUSH
5332: LD_VAR 0 5
5336: ST_TO_ADDR
// end ;
5337: LD_VAR 0 2
5341: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5342: LD_INT 0
5344: PPUSH
5345: PPUSH
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
// if not factory then
5351: LD_VAR 0 1
5355: NOT
5356: IFFALSE 5360
// exit ;
5358: GO 5953
// if control = control_apeman then
5360: LD_VAR 0 4
5364: PUSH
5365: LD_INT 5
5367: EQUAL
5368: IFFALSE 5477
// begin tmp := UnitsInside ( factory ) ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: CALL_OW 313
5384: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5385: LD_VAR 0 8
5389: PPUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 12
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: NOT
5405: IFFALSE 5415
// control := control_manual ;
5407: LD_ADDR_VAR 0 4
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5415: LD_ADDR_VAR 0 8
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL 5112 0 1
5429: ST_TO_ADDR
// if tmp then
5430: LD_VAR 0 8
5434: IFFALSE 5477
// begin for i in tmp do
5436: LD_ADDR_VAR 0 7
5440: PUSH
5441: LD_VAR 0 8
5445: PUSH
5446: FOR_IN
5447: IFFALSE 5475
// if i [ 1 ] = b_ext_radio then
5449: LD_VAR 0 7
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PUSH
5458: LD_INT 22
5460: EQUAL
5461: IFFALSE 5473
// begin control := control_remote ;
5463: LD_ADDR_VAR 0 4
5467: PUSH
5468: LD_INT 2
5470: ST_TO_ADDR
// break ;
5471: GO 5475
// end ;
5473: GO 5446
5475: POP
5476: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5477: LD_VAR 0 1
5481: PPUSH
5482: LD_VAR 0 2
5486: PPUSH
5487: LD_VAR 0 3
5491: PPUSH
5492: LD_VAR 0 4
5496: PPUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: CALL_OW 448
5506: IFFALSE 5541
// begin result := [ chassis , engine , control , weapon ] ;
5508: LD_ADDR_VAR 0 6
5512: PUSH
5513: LD_VAR 0 2
5517: PUSH
5518: LD_VAR 0 3
5522: PUSH
5523: LD_VAR 0 4
5527: PUSH
5528: LD_VAR 0 5
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: ST_TO_ADDR
// exit ;
5539: GO 5953
// end ; _chassis := AvailableChassisList ( factory ) ;
5541: LD_ADDR_VAR 0 9
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 475
5555: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5556: LD_ADDR_VAR 0 11
5560: PUSH
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 476
5570: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5571: LD_ADDR_VAR 0 12
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 477
5585: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL_OW 478
5600: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5601: LD_VAR 0 9
5605: NOT
5606: PUSH
5607: LD_VAR 0 11
5611: NOT
5612: OR
5613: PUSH
5614: LD_VAR 0 12
5618: NOT
5619: OR
5620: PUSH
5621: LD_VAR 0 10
5625: NOT
5626: OR
5627: IFFALSE 5662
// begin result := [ chassis , engine , control , weapon ] ;
5629: LD_ADDR_VAR 0 6
5633: PUSH
5634: LD_VAR 0 2
5638: PUSH
5639: LD_VAR 0 3
5643: PUSH
5644: LD_VAR 0 4
5648: PUSH
5649: LD_VAR 0 5
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: ST_TO_ADDR
// exit ;
5660: GO 5953
// end ; if not chassis in _chassis then
5662: LD_VAR 0 2
5666: PUSH
5667: LD_VAR 0 9
5671: IN
5672: NOT
5673: IFFALSE 5699
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_VAR 0 9
5684: PUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_VAR 0 9
5692: PPUSH
5693: CALL_OW 12
5697: ARRAY
5698: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5699: LD_VAR 0 2
5703: PPUSH
5704: LD_VAR 0 3
5708: PPUSH
5709: CALL 5958 0 2
5713: NOT
5714: IFFALSE 5773
// repeat engine := _engine [ 1 ] ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_VAR 0 11
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5730: LD_ADDR_VAR 0 11
5734: PUSH
5735: LD_VAR 0 11
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 3
5747: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL 5958 0 2
5762: PUSH
5763: LD_VAR 0 11
5767: PUSH
5768: EMPTY
5769: EQUAL
5770: OR
5771: IFFALSE 5716
// if not control in _control then
5773: LD_VAR 0 4
5777: PUSH
5778: LD_VAR 0 12
5782: IN
5783: NOT
5784: IFFALSE 5810
// control := _control [ rand ( 1 , _control ) ] ;
5786: LD_ADDR_VAR 0 4
5790: PUSH
5791: LD_VAR 0 12
5795: PUSH
5796: LD_INT 1
5798: PPUSH
5799: LD_VAR 0 12
5803: PPUSH
5804: CALL_OW 12
5808: ARRAY
5809: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_VAR 0 5
5819: PPUSH
5820: CALL 6178 0 2
5824: NOT
5825: IFFALSE 5884
// repeat weapon := _weapon [ 1 ] ;
5827: LD_ADDR_VAR 0 5
5831: PUSH
5832: LD_VAR 0 10
5836: PUSH
5837: LD_INT 1
5839: ARRAY
5840: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_VAR 0 10
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL_OW 3
5858: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 5
5868: PPUSH
5869: CALL 6178 0 2
5873: PUSH
5874: LD_VAR 0 10
5878: PUSH
5879: EMPTY
5880: EQUAL
5881: OR
5882: IFFALSE 5827
// result := [ ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: EMPTY
5890: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5891: LD_VAR 0 1
5895: PPUSH
5896: LD_VAR 0 2
5900: PPUSH
5901: LD_VAR 0 3
5905: PPUSH
5906: LD_VAR 0 4
5910: PPUSH
5911: LD_VAR 0 5
5915: PPUSH
5916: CALL_OW 448
5920: IFFALSE 5953
// result := [ chassis , engine , control , weapon ] ;
5922: LD_ADDR_VAR 0 6
5926: PUSH
5927: LD_VAR 0 2
5931: PUSH
5932: LD_VAR 0 3
5936: PUSH
5937: LD_VAR 0 4
5941: PUSH
5942: LD_VAR 0 5
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: ST_TO_ADDR
// end ;
5953: LD_VAR 0 6
5957: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5958: LD_INT 0
5960: PPUSH
// if not chassis or not engine then
5961: LD_VAR 0 1
5965: NOT
5966: PUSH
5967: LD_VAR 0 2
5971: NOT
5972: OR
5973: IFFALSE 5977
// exit ;
5975: GO 6173
// case engine of engine_solar :
5977: LD_VAR 0 2
5981: PUSH
5982: LD_INT 2
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6028
5990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5991: LD_ADDR_VAR 0 3
5995: PUSH
5996: LD_INT 11
5998: PUSH
5999: LD_INT 12
6001: PUSH
6002: LD_INT 13
6004: PUSH
6005: LD_INT 14
6007: PUSH
6008: LD_INT 1
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 3
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: ST_TO_ADDR
6026: GO 6157
6028: LD_INT 1
6030: DOUBLE
6031: EQUAL
6032: IFTRUE 6036
6034: GO 6098
6036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6037: LD_ADDR_VAR 0 3
6041: PUSH
6042: LD_INT 11
6044: PUSH
6045: LD_INT 12
6047: PUSH
6048: LD_INT 13
6050: PUSH
6051: LD_INT 14
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: LD_INT 4
6065: PUSH
6066: LD_INT 5
6068: PUSH
6069: LD_INT 21
6071: PUSH
6072: LD_INT 23
6074: PUSH
6075: LD_INT 22
6077: PUSH
6078: LD_INT 24
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: ST_TO_ADDR
6096: GO 6157
6098: LD_INT 3
6100: DOUBLE
6101: EQUAL
6102: IFTRUE 6106
6104: GO 6156
6106: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6107: LD_ADDR_VAR 0 3
6111: PUSH
6112: LD_INT 13
6114: PUSH
6115: LD_INT 14
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 24
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
6154: GO 6157
6156: POP
// result := ( chassis in result ) ;
6157: LD_ADDR_VAR 0 3
6161: PUSH
6162: LD_VAR 0 1
6166: PUSH
6167: LD_VAR 0 3
6171: IN
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 3
6177: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6178: LD_INT 0
6180: PPUSH
// if not chassis or not weapon then
6181: LD_VAR 0 1
6185: NOT
6186: PUSH
6187: LD_VAR 0 2
6191: NOT
6192: OR
6193: IFFALSE 6197
// exit ;
6195: GO 7257
// case weapon of us_machine_gun :
6197: LD_VAR 0 2
6201: PUSH
6202: LD_INT 2
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6240
6210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_INT 1
6218: PUSH
6219: LD_INT 2
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 4
6227: PUSH
6228: LD_INT 5
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: ST_TO_ADDR
6238: GO 7241
6240: LD_INT 3
6242: DOUBLE
6243: EQUAL
6244: IFTRUE 6248
6246: GO 6278
6248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6249: LD_ADDR_VAR 0 3
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: ST_TO_ADDR
6276: GO 7241
6278: LD_INT 11
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6316
6286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: LD_INT 2
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: ST_TO_ADDR
6314: GO 7241
6316: LD_INT 4
6318: DOUBLE
6319: EQUAL
6320: IFTRUE 6324
6322: GO 6350
6324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 4
6338: PUSH
6339: LD_INT 5
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: ST_TO_ADDR
6348: GO 7241
6350: LD_INT 5
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6384
6358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6359: LD_ADDR_VAR 0 3
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: LD_INT 4
6372: PUSH
6373: LD_INT 5
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: ST_TO_ADDR
6382: GO 7241
6384: LD_INT 9
6386: DOUBLE
6387: EQUAL
6388: IFTRUE 6392
6390: GO 6418
6392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 5
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: ST_TO_ADDR
6416: GO 7241
6418: LD_INT 7
6420: DOUBLE
6421: EQUAL
6422: IFTRUE 6426
6424: GO 6452
6426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6427: LD_ADDR_VAR 0 3
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 4
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
6450: GO 7241
6452: LD_INT 12
6454: DOUBLE
6455: EQUAL
6456: IFTRUE 6460
6458: GO 6486
6460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6461: LD_ADDR_VAR 0 3
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 3
6471: PUSH
6472: LD_INT 4
6474: PUSH
6475: LD_INT 5
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7241
6486: LD_INT 13
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6520
6494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 4
6508: PUSH
6509: LD_INT 5
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7241
6520: LD_INT 14
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6546
6528: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 4
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 7241
6546: LD_INT 6
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6572
6554: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: ST_TO_ADDR
6570: GO 7241
6572: LD_INT 10
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6598
6580: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: LD_INT 4
6588: PUSH
6589: LD_INT 5
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: ST_TO_ADDR
6596: GO 7241
6598: LD_INT 22
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6632
6606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: LD_INT 11
6614: PUSH
6615: LD_INT 12
6617: PUSH
6618: LD_INT 13
6620: PUSH
6621: LD_INT 14
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7241
6632: LD_INT 23
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6666
6640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 13
6654: PUSH
6655: LD_INT 14
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: ST_TO_ADDR
6664: GO 7241
6666: LD_INT 24
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6674
6672: GO 6700
6674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 11
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 13
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 7241
6700: LD_INT 30
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6734
6708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 13
6722: PUSH
6723: LD_INT 14
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 7241
6734: LD_INT 25
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6760
6742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7241
6760: LD_INT 27
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6786
6768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 7241
6786: LD_INT 92
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6794
6792: GO 6820
6794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_INT 11
6802: PUSH
6803: LD_INT 12
6805: PUSH
6806: LD_INT 13
6808: PUSH
6809: LD_INT 14
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7241
6820: LD_INT 28
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6846
6828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6829: LD_ADDR_VAR 0 3
6833: PUSH
6834: LD_INT 13
6836: PUSH
6837: LD_INT 14
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7241
6846: LD_INT 29
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6872
6854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 13
6862: PUSH
6863: LD_INT 14
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7241
6872: LD_INT 31
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6898
6880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 13
6888: PUSH
6889: LD_INT 14
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7241
6898: LD_INT 26
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6924
6906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 13
6914: PUSH
6915: LD_INT 14
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 7241
6924: LD_INT 42
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6958
6932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_INT 23
6946: PUSH
6947: LD_INT 24
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7241
6958: LD_INT 43
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6992
6966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 22
6977: PUSH
6978: LD_INT 23
6980: PUSH
6981: LD_INT 24
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: ST_TO_ADDR
6990: GO 7241
6992: LD_INT 44
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7000
6998: GO 7026
7000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7001: LD_ADDR_VAR 0 3
7005: PUSH
7006: LD_INT 21
7008: PUSH
7009: LD_INT 22
7011: PUSH
7012: LD_INT 23
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: ST_TO_ADDR
7024: GO 7241
7026: LD_INT 45
7028: DOUBLE
7029: EQUAL
7030: IFTRUE 7034
7032: GO 7060
7034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_INT 21
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 23
7048: PUSH
7049: LD_INT 24
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: ST_TO_ADDR
7058: GO 7241
7060: LD_INT 49
7062: DOUBLE
7063: EQUAL
7064: IFTRUE 7068
7066: GO 7094
7068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7069: LD_ADDR_VAR 0 3
7073: PUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 23
7082: PUSH
7083: LD_INT 24
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7241
7094: LD_INT 51
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7128
7102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 22
7113: PUSH
7114: LD_INT 23
7116: PUSH
7117: LD_INT 24
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7241
7128: LD_INT 52
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7162
7136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 21
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_INT 23
7150: PUSH
7151: LD_INT 24
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: ST_TO_ADDR
7160: GO 7241
7162: LD_INT 53
7164: DOUBLE
7165: EQUAL
7166: IFTRUE 7170
7168: GO 7188
7170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7171: LD_ADDR_VAR 0 3
7175: PUSH
7176: LD_INT 23
7178: PUSH
7179: LD_INT 24
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7241
7188: LD_INT 46
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7214
7196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 23
7204: PUSH
7205: LD_INT 24
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 7241
7214: LD_INT 47
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7240
7222: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 23
7230: PUSH
7231: LD_INT 24
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 7241
7240: POP
// result := ( chassis in result ) ;
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_VAR 0 1
7250: PUSH
7251: LD_VAR 0 3
7255: IN
7256: ST_TO_ADDR
// end ;
7257: LD_VAR 0 3
7261: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7262: LD_INT 0
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
// result := array ;
7271: LD_ADDR_VAR 0 5
7275: PUSH
7276: LD_VAR 0 1
7280: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7281: LD_VAR 0 1
7285: NOT
7286: PUSH
7287: LD_VAR 0 2
7291: NOT
7292: OR
7293: PUSH
7294: LD_VAR 0 3
7298: NOT
7299: OR
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_VAR 0 1
7310: GREATER
7311: OR
7312: PUSH
7313: LD_VAR 0 3
7317: PUSH
7318: LD_VAR 0 1
7322: GREATER
7323: OR
7324: IFFALSE 7328
// exit ;
7326: GO 7624
// if direction then
7328: LD_VAR 0 4
7332: IFFALSE 7396
// begin d := 1 ;
7334: LD_ADDR_VAR 0 9
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if i_from > i_to then
7342: LD_VAR 0 2
7346: PUSH
7347: LD_VAR 0 3
7351: GREATER
7352: IFFALSE 7378
// length := ( array - i_from ) + i_to else
7354: LD_ADDR_VAR 0 11
7358: PUSH
7359: LD_VAR 0 1
7363: PUSH
7364: LD_VAR 0 2
7368: MINUS
7369: PUSH
7370: LD_VAR 0 3
7374: PLUS
7375: ST_TO_ADDR
7376: GO 7394
// length := i_to - i_from ;
7378: LD_ADDR_VAR 0 11
7382: PUSH
7383: LD_VAR 0 3
7387: PUSH
7388: LD_VAR 0 2
7392: MINUS
7393: ST_TO_ADDR
// end else
7394: GO 7457
// begin d := - 1 ;
7396: LD_ADDR_VAR 0 9
7400: PUSH
7401: LD_INT 1
7403: NEG
7404: ST_TO_ADDR
// if i_from > i_to then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_VAR 0 3
7414: GREATER
7415: IFFALSE 7435
// length := i_from - i_to else
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 2
7426: PUSH
7427: LD_VAR 0 3
7431: MINUS
7432: ST_TO_ADDR
7433: GO 7457
// length := ( array - i_to ) + i_from ;
7435: LD_ADDR_VAR 0 11
7439: PUSH
7440: LD_VAR 0 1
7444: PUSH
7445: LD_VAR 0 3
7449: MINUS
7450: PUSH
7451: LD_VAR 0 2
7455: PLUS
7456: ST_TO_ADDR
// end ; if not length then
7457: LD_VAR 0 11
7461: NOT
7462: IFFALSE 7466
// exit ;
7464: GO 7624
// tmp := array ;
7466: LD_ADDR_VAR 0 10
7470: PUSH
7471: LD_VAR 0 1
7475: ST_TO_ADDR
// for i = 1 to length do
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: DOUBLE
7482: LD_INT 1
7484: DEC
7485: ST_TO_ADDR
7486: LD_VAR 0 11
7490: PUSH
7491: FOR_TO
7492: IFFALSE 7612
// begin for j = 1 to array do
7494: LD_ADDR_VAR 0 7
7498: PUSH
7499: DOUBLE
7500: LD_INT 1
7502: DEC
7503: ST_TO_ADDR
7504: LD_VAR 0 1
7508: PUSH
7509: FOR_TO
7510: IFFALSE 7598
// begin k := j + d ;
7512: LD_ADDR_VAR 0 8
7516: PUSH
7517: LD_VAR 0 7
7521: PUSH
7522: LD_VAR 0 9
7526: PLUS
7527: ST_TO_ADDR
// if k > array then
7528: LD_VAR 0 8
7532: PUSH
7533: LD_VAR 0 1
7537: GREATER
7538: IFFALSE 7548
// k := 1 ;
7540: LD_ADDR_VAR 0 8
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// if not k then
7548: LD_VAR 0 8
7552: NOT
7553: IFFALSE 7565
// k := array ;
7555: LD_ADDR_VAR 0 8
7559: PUSH
7560: LD_VAR 0 1
7564: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7565: LD_ADDR_VAR 0 10
7569: PUSH
7570: LD_VAR 0 10
7574: PPUSH
7575: LD_VAR 0 8
7579: PPUSH
7580: LD_VAR 0 1
7584: PUSH
7585: LD_VAR 0 7
7589: ARRAY
7590: PPUSH
7591: CALL_OW 1
7595: ST_TO_ADDR
// end ;
7596: GO 7509
7598: POP
7599: POP
// array := tmp ;
7600: LD_ADDR_VAR 0 1
7604: PUSH
7605: LD_VAR 0 10
7609: ST_TO_ADDR
// end ;
7610: GO 7491
7612: POP
7613: POP
// result := array ;
7614: LD_ADDR_VAR 0 5
7618: PUSH
7619: LD_VAR 0 1
7623: ST_TO_ADDR
// end ;
7624: LD_VAR 0 5
7628: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
// result := 0 ;
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 0
7640: ST_TO_ADDR
// if not array or not value in array then
7641: LD_VAR 0 1
7645: NOT
7646: PUSH
7647: LD_VAR 0 2
7651: PUSH
7652: LD_VAR 0 1
7656: IN
7657: NOT
7658: OR
7659: IFFALSE 7663
// exit ;
7661: GO 7717
// for i = 1 to array do
7663: LD_ADDR_VAR 0 4
7667: PUSH
7668: DOUBLE
7669: LD_INT 1
7671: DEC
7672: ST_TO_ADDR
7673: LD_VAR 0 1
7677: PUSH
7678: FOR_TO
7679: IFFALSE 7715
// if value = array [ i ] then
7681: LD_VAR 0 2
7685: PUSH
7686: LD_VAR 0 1
7690: PUSH
7691: LD_VAR 0 4
7695: ARRAY
7696: EQUAL
7697: IFFALSE 7713
// begin result := i ;
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_VAR 0 4
7708: ST_TO_ADDR
// exit ;
7709: POP
7710: POP
7711: GO 7717
// end ;
7713: GO 7678
7715: POP
7716: POP
// end ;
7717: LD_VAR 0 3
7721: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7722: LD_INT 0
7724: PPUSH
// vc_chassis := chassis ;
7725: LD_ADDR_OWVAR 37
7729: PUSH
7730: LD_VAR 0 1
7734: ST_TO_ADDR
// vc_engine := engine ;
7735: LD_ADDR_OWVAR 39
7739: PUSH
7740: LD_VAR 0 2
7744: ST_TO_ADDR
// vc_control := control ;
7745: LD_ADDR_OWVAR 38
7749: PUSH
7750: LD_VAR 0 3
7754: ST_TO_ADDR
// vc_weapon := weapon ;
7755: LD_ADDR_OWVAR 40
7759: PUSH
7760: LD_VAR 0 4
7764: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7765: LD_ADDR_OWVAR 41
7769: PUSH
7770: LD_VAR 0 5
7774: ST_TO_ADDR
// end ;
7775: LD_VAR 0 6
7779: RET
// export function WantPlant ( unit ) ; var task ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
// result := false ;
7784: LD_ADDR_VAR 0 2
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 437
7806: ST_TO_ADDR
// if task then
7807: LD_VAR 0 3
7811: IFFALSE 7839
// if task [ 1 ] [ 1 ] = p then
7813: LD_VAR 0 3
7817: PUSH
7818: LD_INT 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PUSH
7826: LD_STRING p
7828: EQUAL
7829: IFFALSE 7839
// result := true ;
7831: LD_ADDR_VAR 0 2
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ;
7839: LD_VAR 0 2
7843: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
// if pos < 1 then
7850: LD_VAR 0 2
7854: PUSH
7855: LD_INT 1
7857: LESS
7858: IFFALSE 7862
// exit ;
7860: GO 8165
// if pos = 1 then
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 1
7869: EQUAL
7870: IFFALSE 7903
// result := Replace ( arr , pos [ 1 ] , value ) else
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_VAR 0 2
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: LD_VAR 0 3
7895: PPUSH
7896: CALL_OW 1
7900: ST_TO_ADDR
7901: GO 8165
// begin tmp := arr ;
7903: LD_ADDR_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: ST_TO_ADDR
// s_arr := [ tmp ] ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_VAR 0 6
7922: PUSH
7923: EMPTY
7924: LIST
7925: ST_TO_ADDR
// for i = 1 to pos - 1 do
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: DOUBLE
7932: LD_INT 1
7934: DEC
7935: ST_TO_ADDR
7936: LD_VAR 0 2
7940: PUSH
7941: LD_INT 1
7943: MINUS
7944: PUSH
7945: FOR_TO
7946: IFFALSE 7991
// begin tmp := tmp [ pos [ i ] ] ;
7948: LD_ADDR_VAR 0 6
7952: PUSH
7953: LD_VAR 0 6
7957: PUSH
7958: LD_VAR 0 2
7962: PUSH
7963: LD_VAR 0 5
7967: ARRAY
7968: ARRAY
7969: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7970: LD_ADDR_VAR 0 7
7974: PUSH
7975: LD_VAR 0 7
7979: PUSH
7980: LD_VAR 0 6
7984: PUSH
7985: EMPTY
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// end ;
7989: GO 7945
7991: POP
7992: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 6
8002: PPUSH
8003: LD_VAR 0 2
8007: PUSH
8008: LD_VAR 0 2
8012: ARRAY
8013: PPUSH
8014: LD_VAR 0 3
8018: PPUSH
8019: CALL_OW 1
8023: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8024: LD_ADDR_VAR 0 7
8028: PUSH
8029: LD_VAR 0 7
8033: PPUSH
8034: LD_VAR 0 7
8038: PPUSH
8039: LD_VAR 0 6
8043: PPUSH
8044: CALL_OW 1
8048: ST_TO_ADDR
// for i = s_arr downto 2 do
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: DOUBLE
8055: LD_VAR 0 7
8059: INC
8060: ST_TO_ADDR
8061: LD_INT 2
8063: PUSH
8064: FOR_DOWNTO
8065: IFFALSE 8149
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_VAR 0 5
8081: PUSH
8082: LD_INT 1
8084: MINUS
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_VAR 0 5
8096: PUSH
8097: LD_INT 1
8099: MINUS
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 7
8106: PUSH
8107: LD_VAR 0 5
8111: ARRAY
8112: PPUSH
8113: CALL_OW 1
8117: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_VAR 0 7
8127: PPUSH
8128: LD_VAR 0 5
8132: PUSH
8133: LD_INT 1
8135: MINUS
8136: PPUSH
8137: LD_VAR 0 6
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
// end ;
8147: GO 8064
8149: POP
8150: POP
// result := s_arr [ 1 ] ;
8151: LD_ADDR_VAR 0 4
8155: PUSH
8156: LD_VAR 0 7
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: ST_TO_ADDR
// end ; end ;
8165: LD_VAR 0 4
8169: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// if not list then
8174: LD_VAR 0 1
8178: NOT
8179: IFFALSE 8183
// exit ;
8181: GO 8274
// i := list [ pos1 ] ;
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: LD_VAR 0 1
8192: PUSH
8193: LD_VAR 0 2
8197: ARRAY
8198: ST_TO_ADDR
// if not i then
8199: LD_VAR 0 5
8203: NOT
8204: IFFALSE 8208
// exit ;
8206: GO 8274
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_VAR 0 3
8232: ARRAY
8233: PPUSH
8234: CALL_OW 1
8238: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_VAR 0 1
8248: PPUSH
8249: LD_VAR 0 3
8253: PPUSH
8254: LD_VAR 0 5
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// result := list ;
8264: LD_ADDR_VAR 0 4
8268: PUSH
8269: LD_VAR 0 1
8273: ST_TO_ADDR
// end ;
8274: LD_VAR 0 4
8278: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8279: LD_INT 0
8281: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_VAR 0 1
8291: PPUSH
8292: CALL_OW 250
8296: PPUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 251
8306: PPUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 4
8321: PPUSH
8322: CALL 8700 0 5
8326: ST_TO_ADDR
// end ;
8327: LD_VAR 0 5
8331: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
// if not list or not unit then
8338: LD_VAR 0 2
8342: NOT
8343: PUSH
8344: LD_VAR 0 1
8348: NOT
8349: OR
8350: IFFALSE 8354
// exit ;
8352: GO 8695
// result := [ ] ;
8354: LD_ADDR_VAR 0 5
8358: PUSH
8359: EMPTY
8360: ST_TO_ADDR
// for i in list do
8361: LD_ADDR_VAR 0 6
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8590
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8374: LD_ADDR_VAR 0 8
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 6
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PPUSH
8393: LD_VAR 0 6
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if not Count ( result ) then
8407: LD_VAR 0 5
8411: PPUSH
8412: CALL 4984 0 1
8416: NOT
8417: IFFALSE 8450
// begin result := Join ( result , [ i , tmp ] ) ;
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: LD_VAR 0 5
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_VAR 0 8
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL 40593 0 2
8447: ST_TO_ADDR
// continue ;
8448: GO 8371
// end ; if result [ result ] [ 2 ] <= tmp then
8450: LD_VAR 0 5
8454: PUSH
8455: LD_VAR 0 5
8459: ARRAY
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PUSH
8465: LD_VAR 0 8
8469: LESSEQUAL
8470: IFFALSE 8503
// result := Join ( result , [ i , tmp ] ) else
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_VAR 0 6
8486: PUSH
8487: LD_VAR 0 8
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL 40593 0 2
8500: ST_TO_ADDR
8501: GO 8588
// begin for j := 1 to Count ( result ) do
8503: LD_ADDR_VAR 0 7
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_VAR 0 5
8517: PPUSH
8518: CALL 4984 0 1
8522: PUSH
8523: FOR_TO
8524: IFFALSE 8586
// begin if tmp < result [ j ] [ 2 ] then
8526: LD_VAR 0 8
8530: PUSH
8531: LD_VAR 0 5
8535: PUSH
8536: LD_VAR 0 7
8540: ARRAY
8541: PUSH
8542: LD_INT 2
8544: ARRAY
8545: LESS
8546: IFFALSE 8584
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8548: LD_ADDR_VAR 0 5
8552: PUSH
8553: LD_VAR 0 5
8557: PPUSH
8558: LD_VAR 0 7
8562: PPUSH
8563: LD_VAR 0 6
8567: PUSH
8568: LD_VAR 0 8
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PPUSH
8577: CALL_OW 2
8581: ST_TO_ADDR
// break ;
8582: GO 8586
// end ; end ;
8584: GO 8523
8586: POP
8587: POP
// end ; end ;
8588: GO 8371
8590: POP
8591: POP
// if result and not asc then
8592: LD_VAR 0 5
8596: PUSH
8597: LD_VAR 0 3
8601: NOT
8602: AND
8603: IFFALSE 8620
// result := ReverseArray ( result ) ;
8605: LD_ADDR_VAR 0 5
8609: PUSH
8610: LD_VAR 0 5
8614: PPUSH
8615: CALL 35860 0 1
8619: ST_TO_ADDR
// tmp := [ ] ;
8620: LD_ADDR_VAR 0 8
8624: PUSH
8625: EMPTY
8626: ST_TO_ADDR
// if mode then
8627: LD_VAR 0 4
8631: IFFALSE 8695
// begin for i := 1 to result do
8633: LD_ADDR_VAR 0 6
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_VAR 0 5
8647: PUSH
8648: FOR_TO
8649: IFFALSE 8683
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8651: LD_ADDR_VAR 0 8
8655: PUSH
8656: LD_VAR 0 8
8660: PPUSH
8661: LD_VAR 0 5
8665: PUSH
8666: LD_VAR 0 6
8670: ARRAY
8671: PUSH
8672: LD_INT 1
8674: ARRAY
8675: PPUSH
8676: CALL 40593 0 2
8680: ST_TO_ADDR
8681: GO 8648
8683: POP
8684: POP
// result := tmp ;
8685: LD_ADDR_VAR 0 5
8689: PUSH
8690: LD_VAR 0 8
8694: ST_TO_ADDR
// end ; end ;
8695: LD_VAR 0 5
8699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8700: LD_INT 0
8702: PPUSH
8703: PPUSH
8704: PPUSH
8705: PPUSH
// if not list then
8706: LD_VAR 0 3
8710: NOT
8711: IFFALSE 8715
// exit ;
8713: GO 9103
// result := [ ] ;
8715: LD_ADDR_VAR 0 6
8719: PUSH
8720: EMPTY
8721: ST_TO_ADDR
// for i in list do
8722: LD_ADDR_VAR 0 7
8726: PUSH
8727: LD_VAR 0 3
8731: PUSH
8732: FOR_IN
8733: IFFALSE 8935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_VAR 0 7
8744: PPUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_VAR 0 2
8754: PPUSH
8755: CALL_OW 297
8759: ST_TO_ADDR
// if not result then
8760: LD_VAR 0 6
8764: NOT
8765: IFFALSE 8791
// result := [ [ i , tmp ] ] else
8767: LD_ADDR_VAR 0 6
8771: PUSH
8772: LD_VAR 0 7
8776: PUSH
8777: LD_VAR 0 9
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: ST_TO_ADDR
8789: GO 8933
// begin if result [ result ] [ 2 ] < tmp then
8791: LD_VAR 0 6
8795: PUSH
8796: LD_VAR 0 6
8800: ARRAY
8801: PUSH
8802: LD_INT 2
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 9
8810: LESS
8811: IFFALSE 8853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8813: LD_ADDR_VAR 0 6
8817: PUSH
8818: LD_VAR 0 6
8822: PPUSH
8823: LD_VAR 0 6
8827: PUSH
8828: LD_INT 1
8830: PLUS
8831: PPUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_VAR 0 9
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 2
8850: ST_TO_ADDR
8851: GO 8933
// for j = 1 to result do
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_VAR 0 6
8867: PUSH
8868: FOR_TO
8869: IFFALSE 8931
// begin if tmp < result [ j ] [ 2 ] then
8871: LD_VAR 0 9
8875: PUSH
8876: LD_VAR 0 6
8880: PUSH
8881: LD_VAR 0 8
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: LESS
8891: IFFALSE 8929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: LD_VAR 0 6
8902: PPUSH
8903: LD_VAR 0 8
8907: PPUSH
8908: LD_VAR 0 7
8912: PUSH
8913: LD_VAR 0 9
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 2
8926: ST_TO_ADDR
// break ;
8927: GO 8931
// end ; end ;
8929: GO 8868
8931: POP
8932: POP
// end ; end ;
8933: GO 8732
8935: POP
8936: POP
// if result and not asc then
8937: LD_VAR 0 6
8941: PUSH
8942: LD_VAR 0 4
8946: NOT
8947: AND
8948: IFFALSE 9023
// begin tmp := result ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_VAR 0 6
8959: ST_TO_ADDR
// for i = tmp downto 1 do
8960: LD_ADDR_VAR 0 7
8964: PUSH
8965: DOUBLE
8966: LD_VAR 0 9
8970: INC
8971: ST_TO_ADDR
8972: LD_INT 1
8974: PUSH
8975: FOR_DOWNTO
8976: IFFALSE 9021
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8978: LD_ADDR_VAR 0 6
8982: PUSH
8983: LD_VAR 0 6
8987: PPUSH
8988: LD_VAR 0 9
8992: PUSH
8993: LD_VAR 0 7
8997: MINUS
8998: PUSH
8999: LD_INT 1
9001: PLUS
9002: PPUSH
9003: LD_VAR 0 9
9007: PUSH
9008: LD_VAR 0 7
9012: ARRAY
9013: PPUSH
9014: CALL_OW 1
9018: ST_TO_ADDR
9019: GO 8975
9021: POP
9022: POP
// end ; tmp := [ ] ;
9023: LD_ADDR_VAR 0 9
9027: PUSH
9028: EMPTY
9029: ST_TO_ADDR
// if mode then
9030: LD_VAR 0 5
9034: IFFALSE 9103
// begin for i = 1 to result do
9036: LD_ADDR_VAR 0 7
9040: PUSH
9041: DOUBLE
9042: LD_INT 1
9044: DEC
9045: ST_TO_ADDR
9046: LD_VAR 0 6
9050: PUSH
9051: FOR_TO
9052: IFFALSE 9091
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9054: LD_ADDR_VAR 0 9
9058: PUSH
9059: LD_VAR 0 9
9063: PPUSH
9064: LD_VAR 0 7
9068: PPUSH
9069: LD_VAR 0 6
9073: PUSH
9074: LD_VAR 0 7
9078: ARRAY
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
9089: GO 9051
9091: POP
9092: POP
// result := tmp ;
9093: LD_ADDR_VAR 0 6
9097: PUSH
9098: LD_VAR 0 9
9102: ST_TO_ADDR
// end ; end ;
9103: LD_VAR 0 6
9107: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9108: LD_INT 0
9110: PPUSH
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9116: LD_ADDR_VAR 0 5
9120: PUSH
9121: LD_INT 0
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: EMPTY
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: ST_TO_ADDR
// if not x or not y then
9138: LD_VAR 0 2
9142: NOT
9143: PUSH
9144: LD_VAR 0 3
9148: NOT
9149: OR
9150: IFFALSE 9154
// exit ;
9152: GO 10804
// if not range then
9154: LD_VAR 0 4
9158: NOT
9159: IFFALSE 9169
// range := 10 ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_INT 10
9168: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9169: LD_ADDR_VAR 0 8
9173: PUSH
9174: LD_INT 81
9176: PUSH
9177: LD_VAR 0 1
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 92
9188: PUSH
9189: LD_VAR 0 2
9193: PUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_VAR 0 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: LD_INT 21
9215: PUSH
9216: LD_INT 3
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: PPUSH
9232: CALL_OW 69
9236: ST_TO_ADDR
// if not tmp then
9237: LD_VAR 0 8
9241: NOT
9242: IFFALSE 9246
// exit ;
9244: GO 10804
// for i in tmp do
9246: LD_ADDR_VAR 0 6
9250: PUSH
9251: LD_VAR 0 8
9255: PUSH
9256: FOR_IN
9257: IFFALSE 10779
// begin points := [ 0 , 0 , 0 ] ;
9259: LD_ADDR_VAR 0 9
9263: PUSH
9264: LD_INT 0
9266: PUSH
9267: LD_INT 0
9269: PUSH
9270: LD_INT 0
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: ST_TO_ADDR
// bpoints := 1 ;
9278: LD_ADDR_VAR 0 10
9282: PUSH
9283: LD_INT 1
9285: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9286: LD_VAR 0 6
9290: PPUSH
9291: CALL_OW 247
9295: PUSH
9296: LD_INT 1
9298: DOUBLE
9299: EQUAL
9300: IFTRUE 9304
9302: GO 9882
9304: POP
// begin if GetClass ( i ) = 1 then
9305: LD_VAR 0 6
9309: PPUSH
9310: CALL_OW 257
9314: PUSH
9315: LD_INT 1
9317: EQUAL
9318: IFFALSE 9339
// points := [ 10 , 5 , 3 ] ;
9320: LD_ADDR_VAR 0 9
9324: PUSH
9325: LD_INT 10
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 3
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9339: LD_VAR 0 6
9343: PPUSH
9344: CALL_OW 257
9348: PUSH
9349: LD_INT 2
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: LD_INT 4
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: IN
9363: IFFALSE 9384
// points := [ 3 , 2 , 1 ] ;
9365: LD_ADDR_VAR 0 9
9369: PUSH
9370: LD_INT 3
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9384: LD_VAR 0 6
9388: PPUSH
9389: CALL_OW 257
9393: PUSH
9394: LD_INT 5
9396: EQUAL
9397: IFFALSE 9418
// points := [ 130 , 5 , 2 ] ;
9399: LD_ADDR_VAR 0 9
9403: PUSH
9404: LD_INT 130
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: LD_INT 2
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 257
9427: PUSH
9428: LD_INT 8
9430: EQUAL
9431: IFFALSE 9452
// points := [ 35 , 35 , 30 ] ;
9433: LD_ADDR_VAR 0 9
9437: PUSH
9438: LD_INT 35
9440: PUSH
9441: LD_INT 35
9443: PUSH
9444: LD_INT 30
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9452: LD_VAR 0 6
9456: PPUSH
9457: CALL_OW 257
9461: PUSH
9462: LD_INT 9
9464: EQUAL
9465: IFFALSE 9486
// points := [ 20 , 55 , 40 ] ;
9467: LD_ADDR_VAR 0 9
9471: PUSH
9472: LD_INT 20
9474: PUSH
9475: LD_INT 55
9477: PUSH
9478: LD_INT 40
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9486: LD_VAR 0 6
9490: PPUSH
9491: CALL_OW 257
9495: PUSH
9496: LD_INT 12
9498: PUSH
9499: LD_INT 16
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: IN
9506: IFFALSE 9527
// points := [ 5 , 3 , 2 ] ;
9508: LD_ADDR_VAR 0 9
9512: PUSH
9513: LD_INT 5
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9527: LD_VAR 0 6
9531: PPUSH
9532: CALL_OW 257
9536: PUSH
9537: LD_INT 17
9539: EQUAL
9540: IFFALSE 9561
// points := [ 100 , 50 , 75 ] ;
9542: LD_ADDR_VAR 0 9
9546: PUSH
9547: LD_INT 100
9549: PUSH
9550: LD_INT 50
9552: PUSH
9553: LD_INT 75
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9561: LD_VAR 0 6
9565: PPUSH
9566: CALL_OW 257
9570: PUSH
9571: LD_INT 15
9573: EQUAL
9574: IFFALSE 9595
// points := [ 10 , 5 , 3 ] ;
9576: LD_ADDR_VAR 0 9
9580: PUSH
9581: LD_INT 10
9583: PUSH
9584: LD_INT 5
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9595: LD_VAR 0 6
9599: PPUSH
9600: CALL_OW 257
9604: PUSH
9605: LD_INT 14
9607: EQUAL
9608: IFFALSE 9629
// points := [ 10 , 0 , 0 ] ;
9610: LD_ADDR_VAR 0 9
9614: PUSH
9615: LD_INT 10
9617: PUSH
9618: LD_INT 0
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9629: LD_VAR 0 6
9633: PPUSH
9634: CALL_OW 257
9638: PUSH
9639: LD_INT 11
9641: EQUAL
9642: IFFALSE 9663
// points := [ 30 , 10 , 5 ] ;
9644: LD_ADDR_VAR 0 9
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 10
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9663: LD_VAR 0 1
9667: PPUSH
9668: LD_INT 5
9670: PPUSH
9671: CALL_OW 321
9675: PUSH
9676: LD_INT 2
9678: EQUAL
9679: IFFALSE 9696
// bpoints := bpoints * 1.8 ;
9681: LD_ADDR_VAR 0 10
9685: PUSH
9686: LD_VAR 0 10
9690: PUSH
9691: LD_REAL  1.80000000000000E+0000
9694: MUL
9695: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9696: LD_VAR 0 6
9700: PPUSH
9701: CALL_OW 257
9705: PUSH
9706: LD_INT 1
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: LD_INT 4
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: IN
9724: PUSH
9725: LD_VAR 0 1
9729: PPUSH
9730: LD_INT 51
9732: PPUSH
9733: CALL_OW 321
9737: PUSH
9738: LD_INT 2
9740: EQUAL
9741: AND
9742: IFFALSE 9759
// bpoints := bpoints * 1.2 ;
9744: LD_ADDR_VAR 0 10
9748: PUSH
9749: LD_VAR 0 10
9753: PUSH
9754: LD_REAL  1.20000000000000E+0000
9757: MUL
9758: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 257
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: LD_INT 7
9774: PUSH
9775: LD_INT 9
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: IN
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 52
9791: PPUSH
9792: CALL_OW 321
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: IFFALSE 9818
// bpoints := bpoints * 1.5 ;
9803: LD_ADDR_VAR 0 10
9807: PUSH
9808: LD_VAR 0 10
9812: PUSH
9813: LD_REAL  1.50000000000000E+0000
9816: MUL
9817: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9818: LD_VAR 0 1
9822: PPUSH
9823: LD_INT 66
9825: PPUSH
9826: CALL_OW 321
9830: PUSH
9831: LD_INT 2
9833: EQUAL
9834: IFFALSE 9851
// bpoints := bpoints * 1.1 ;
9836: LD_ADDR_VAR 0 10
9840: PUSH
9841: LD_VAR 0 10
9845: PUSH
9846: LD_REAL  1.10000000000000E+0000
9849: MUL
9850: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9851: LD_ADDR_VAR 0 10
9855: PUSH
9856: LD_VAR 0 10
9860: PUSH
9861: LD_VAR 0 6
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 259
9873: PUSH
9874: LD_REAL  1.15000000000000E+0000
9877: MUL
9878: MUL
9879: ST_TO_ADDR
// end ; unit_vehicle :
9880: GO 10708
9882: LD_INT 2
9884: DOUBLE
9885: EQUAL
9886: IFTRUE 9890
9888: GO 10696
9890: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 264
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 42
9906: PUSH
9907: LD_INT 24
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: IN
9915: IFFALSE 9936
// points := [ 25 , 5 , 3 ] ;
9917: LD_ADDR_VAR 0 9
9921: PUSH
9922: LD_INT 25
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9936: LD_VAR 0 6
9940: PPUSH
9941: CALL_OW 264
9945: PUSH
9946: LD_INT 4
9948: PUSH
9949: LD_INT 43
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: IN
9960: IFFALSE 9981
// points := [ 40 , 15 , 5 ] ;
9962: LD_ADDR_VAR 0 9
9966: PUSH
9967: LD_INT 40
9969: PUSH
9970: LD_INT 15
9972: PUSH
9973: LD_INT 5
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9981: LD_VAR 0 6
9985: PPUSH
9986: CALL_OW 264
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: LD_INT 23
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: IN
10001: IFFALSE 10022
// points := [ 7 , 25 , 8 ] ;
10003: LD_ADDR_VAR 0 9
10007: PUSH
10008: LD_INT 7
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 8
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 264
10031: PUSH
10032: LD_INT 5
10034: PUSH
10035: LD_INT 27
10037: PUSH
10038: LD_INT 44
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: IN
10046: IFFALSE 10067
// points := [ 14 , 50 , 16 ] ;
10048: LD_ADDR_VAR 0 9
10052: PUSH
10053: LD_INT 14
10055: PUSH
10056: LD_INT 50
10058: PUSH
10059: LD_INT 16
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10067: LD_VAR 0 6
10071: PPUSH
10072: CALL_OW 264
10076: PUSH
10077: LD_INT 6
10079: PUSH
10080: LD_INT 46
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: IN
10087: IFFALSE 10108
// points := [ 32 , 120 , 70 ] ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 32
10096: PUSH
10097: LD_INT 120
10099: PUSH
10100: LD_INT 70
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10108: LD_VAR 0 6
10112: PPUSH
10113: CALL_OW 264
10117: PUSH
10118: LD_INT 7
10120: PUSH
10121: LD_INT 28
10123: PUSH
10124: LD_INT 45
10126: PUSH
10127: LD_INT 92
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: IN
10136: IFFALSE 10157
// points := [ 35 , 20 , 45 ] ;
10138: LD_ADDR_VAR 0 9
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 20
10148: PUSH
10149: LD_INT 45
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 264
10166: PUSH
10167: LD_INT 47
10169: PUSH
10170: EMPTY
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 67 , 45 , 75 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 67
10182: PUSH
10183: LD_INT 45
10185: PUSH
10186: LD_INT 75
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 26
10206: PUSH
10207: EMPTY
10208: LIST
10209: IN
10210: IFFALSE 10231
// points := [ 120 , 30 , 80 ] ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 120
10219: PUSH
10220: LD_INT 30
10222: PUSH
10223: LD_INT 80
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10231: LD_VAR 0 6
10235: PPUSH
10236: CALL_OW 264
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: EMPTY
10245: LIST
10246: IN
10247: IFFALSE 10268
// points := [ 40 , 1 , 1 ] ;
10249: LD_ADDR_VAR 0 9
10253: PUSH
10254: LD_INT 40
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10268: LD_VAR 0 6
10272: PPUSH
10273: CALL_OW 264
10277: PUSH
10278: LD_INT 29
10280: PUSH
10281: EMPTY
10282: LIST
10283: IN
10284: IFFALSE 10305
// points := [ 70 , 200 , 400 ] ;
10286: LD_ADDR_VAR 0 9
10290: PUSH
10291: LD_INT 70
10293: PUSH
10294: LD_INT 200
10296: PUSH
10297: LD_INT 400
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: LIST
10304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10305: LD_VAR 0 6
10309: PPUSH
10310: CALL_OW 264
10314: PUSH
10315: LD_INT 14
10317: PUSH
10318: LD_INT 53
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: IN
10325: IFFALSE 10346
// points := [ 40 , 10 , 20 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 40
10334: PUSH
10335: LD_INT 10
10337: PUSH
10338: LD_INT 20
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 264
10355: PUSH
10356: LD_INT 9
10358: PUSH
10359: EMPTY
10360: LIST
10361: IN
10362: IFFALSE 10383
// points := [ 5 , 70 , 20 ] ;
10364: LD_ADDR_VAR 0 9
10368: PUSH
10369: LD_INT 5
10371: PUSH
10372: LD_INT 70
10374: PUSH
10375: LD_INT 20
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10383: LD_VAR 0 6
10387: PPUSH
10388: CALL_OW 264
10392: PUSH
10393: LD_INT 10
10395: PUSH
10396: EMPTY
10397: LIST
10398: IN
10399: IFFALSE 10420
// points := [ 35 , 110 , 70 ] ;
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_INT 35
10408: PUSH
10409: LD_INT 110
10411: PUSH
10412: LD_INT 70
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10420: LD_VAR 0 6
10424: PPUSH
10425: CALL_OW 265
10429: PUSH
10430: LD_INT 25
10432: EQUAL
10433: IFFALSE 10454
// points := [ 80 , 65 , 100 ] ;
10435: LD_ADDR_VAR 0 9
10439: PUSH
10440: LD_INT 80
10442: PUSH
10443: LD_INT 65
10445: PUSH
10446: LD_INT 100
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10454: LD_VAR 0 6
10458: PPUSH
10459: CALL_OW 263
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10469: LD_ADDR_VAR 0 10
10473: PUSH
10474: LD_VAR 0 10
10478: PUSH
10479: LD_VAR 0 6
10483: PPUSH
10484: CALL_OW 311
10488: PPUSH
10489: LD_INT 3
10491: PPUSH
10492: CALL_OW 259
10496: PUSH
10497: LD_INT 4
10499: MUL
10500: MUL
10501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10502: LD_VAR 0 6
10506: PPUSH
10507: CALL_OW 263
10511: PUSH
10512: LD_INT 2
10514: EQUAL
10515: IFFALSE 10566
// begin j := IsControledBy ( i ) ;
10517: LD_ADDR_VAR 0 7
10521: PUSH
10522: LD_VAR 0 6
10526: PPUSH
10527: CALL_OW 312
10531: ST_TO_ADDR
// if j then
10532: LD_VAR 0 7
10536: IFFALSE 10566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10538: LD_ADDR_VAR 0 10
10542: PUSH
10543: LD_VAR 0 10
10547: PUSH
10548: LD_VAR 0 7
10552: PPUSH
10553: LD_INT 3
10555: PPUSH
10556: CALL_OW 259
10560: PUSH
10561: LD_INT 3
10563: MUL
10564: MUL
10565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10566: LD_VAR 0 6
10570: PPUSH
10571: CALL_OW 264
10575: PUSH
10576: LD_INT 5
10578: PUSH
10579: LD_INT 6
10581: PUSH
10582: LD_INT 46
10584: PUSH
10585: LD_INT 44
10587: PUSH
10588: LD_INT 47
10590: PUSH
10591: LD_INT 45
10593: PUSH
10594: LD_INT 28
10596: PUSH
10597: LD_INT 7
10599: PUSH
10600: LD_INT 27
10602: PUSH
10603: LD_INT 29
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: IN
10618: PUSH
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 52
10626: PPUSH
10627: CALL_OW 321
10631: PUSH
10632: LD_INT 2
10634: EQUAL
10635: AND
10636: IFFALSE 10653
// bpoints := bpoints * 1.2 ;
10638: LD_ADDR_VAR 0 10
10642: PUSH
10643: LD_VAR 0 10
10647: PUSH
10648: LD_REAL  1.20000000000000E+0000
10651: MUL
10652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10653: LD_VAR 0 6
10657: PPUSH
10658: CALL_OW 264
10662: PUSH
10663: LD_INT 6
10665: PUSH
10666: LD_INT 46
10668: PUSH
10669: LD_INT 47
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: IN
10677: IFFALSE 10694
// bpoints := bpoints * 1.2 ;
10679: LD_ADDR_VAR 0 10
10683: PUSH
10684: LD_VAR 0 10
10688: PUSH
10689: LD_REAL  1.20000000000000E+0000
10692: MUL
10693: ST_TO_ADDR
// end ; unit_building :
10694: GO 10708
10696: LD_INT 3
10698: DOUBLE
10699: EQUAL
10700: IFTRUE 10704
10702: GO 10707
10704: POP
// ; end ;
10705: GO 10708
10707: POP
// for j = 1 to 3 do
10708: LD_ADDR_VAR 0 7
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_INT 3
10720: PUSH
10721: FOR_TO
10722: IFFALSE 10775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_VAR 0 5
10733: PPUSH
10734: LD_VAR 0 7
10738: PPUSH
10739: LD_VAR 0 5
10743: PUSH
10744: LD_VAR 0 7
10748: ARRAY
10749: PUSH
10750: LD_VAR 0 9
10754: PUSH
10755: LD_VAR 0 7
10759: ARRAY
10760: PUSH
10761: LD_VAR 0 10
10765: MUL
10766: PLUS
10767: PPUSH
10768: CALL_OW 1
10772: ST_TO_ADDR
10773: GO 10721
10775: POP
10776: POP
// end ;
10777: GO 9256
10779: POP
10780: POP
// result := Replace ( result , 4 , tmp ) ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_VAR 0 5
10790: PPUSH
10791: LD_INT 4
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: CALL_OW 1
10803: ST_TO_ADDR
// end ;
10804: LD_VAR 0 5
10808: RET
// export function DangerAtRange ( unit , range ) ; begin
10809: LD_INT 0
10811: PPUSH
// if not unit then
10812: LD_VAR 0 1
10816: NOT
10817: IFFALSE 10821
// exit ;
10819: GO 10866
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 255
10835: PPUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL_OW 250
10845: PPUSH
10846: LD_VAR 0 1
10850: PPUSH
10851: CALL_OW 251
10855: PPUSH
10856: LD_VAR 0 2
10860: PPUSH
10861: CALL 9108 0 4
10865: ST_TO_ADDR
// end ;
10866: LD_VAR 0 3
10870: RET
// export function DangerInArea ( side , area ) ; begin
10871: LD_INT 0
10873: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10874: LD_ADDR_VAR 0 3
10878: PUSH
10879: LD_VAR 0 2
10883: PPUSH
10884: LD_INT 81
10886: PUSH
10887: LD_VAR 0 1
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 70
10900: ST_TO_ADDR
// end ;
10901: LD_VAR 0 3
10905: RET
// export function IsExtension ( b ) ; begin
10906: LD_INT 0
10908: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 1
10918: PUSH
10919: LD_INT 23
10921: PUSH
10922: LD_INT 20
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 17
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 19
10939: PUSH
10940: LD_INT 16
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 18
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: IN
10961: ST_TO_ADDR
// end ;
10962: LD_VAR 0 2
10966: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
10971: PPUSH
// result := [ ] ;
10972: LD_ADDR_VAR 0 4
10976: PUSH
10977: EMPTY
10978: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10979: LD_ADDR_VAR 0 5
10983: PUSH
10984: LD_VAR 0 2
10988: PPUSH
10989: LD_INT 21
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 70
11003: ST_TO_ADDR
// if not tmp then
11004: LD_VAR 0 5
11008: NOT
11009: IFFALSE 11013
// exit ;
11011: GO 11077
// if checkLink then
11013: LD_VAR 0 3
11017: IFFALSE 11067
// begin for i in tmp do
11019: LD_ADDR_VAR 0 6
11023: PUSH
11024: LD_VAR 0 5
11028: PUSH
11029: FOR_IN
11030: IFFALSE 11065
// if GetBase ( i ) <> base then
11032: LD_VAR 0 6
11036: PPUSH
11037: CALL_OW 274
11041: PUSH
11042: LD_VAR 0 1
11046: NONEQUAL
11047: IFFALSE 11063
// ComLinkToBase ( base , i ) ;
11049: LD_VAR 0 1
11053: PPUSH
11054: LD_VAR 0 6
11058: PPUSH
11059: CALL_OW 169
11063: GO 11029
11065: POP
11066: POP
// end ; result := tmp ;
11067: LD_ADDR_VAR 0 4
11071: PUSH
11072: LD_VAR 0 5
11076: ST_TO_ADDR
// end ;
11077: LD_VAR 0 4
11081: RET
// export function ComComplete ( units , b ) ; var i ; begin
11082: LD_INT 0
11084: PPUSH
11085: PPUSH
// if not units then
11086: LD_VAR 0 1
11090: NOT
11091: IFFALSE 11095
// exit ;
11093: GO 11185
// for i in units do
11095: LD_ADDR_VAR 0 4
11099: PUSH
11100: LD_VAR 0 1
11104: PUSH
11105: FOR_IN
11106: IFFALSE 11183
// if BuildingStatus ( b ) = bs_build then
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 461
11117: PUSH
11118: LD_INT 1
11120: EQUAL
11121: IFFALSE 11181
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11123: LD_VAR 0 4
11127: PPUSH
11128: LD_STRING h
11130: PUSH
11131: LD_VAR 0 2
11135: PPUSH
11136: CALL_OW 250
11140: PUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: CALL_OW 251
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_INT 0
11158: PUSH
11159: LD_INT 0
11161: PUSH
11162: LD_INT 0
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PPUSH
11177: CALL_OW 446
11181: GO 11105
11183: POP
11184: POP
// end ;
11185: LD_VAR 0 3
11189: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
11194: PPUSH
11195: PPUSH
11196: PPUSH
11197: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11198: LD_VAR 0 1
11202: NOT
11203: PUSH
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 263
11213: PUSH
11214: LD_INT 2
11216: NONEQUAL
11217: OR
11218: IFFALSE 11222
// exit ;
11220: GO 11538
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11222: LD_ADDR_VAR 0 6
11226: PUSH
11227: LD_INT 22
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 255
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 30
11249: PUSH
11250: LD_INT 36
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 34
11259: PUSH
11260: LD_INT 31
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// if not tmp then
11281: LD_VAR 0 6
11285: NOT
11286: IFFALSE 11290
// exit ;
11288: GO 11538
// result := [ ] ;
11290: LD_ADDR_VAR 0 2
11294: PUSH
11295: EMPTY
11296: ST_TO_ADDR
// for i in tmp do
11297: LD_ADDR_VAR 0 3
11301: PUSH
11302: LD_VAR 0 6
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11379
// begin t := UnitsInside ( i ) ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: CALL_OW 313
11324: ST_TO_ADDR
// if t then
11325: LD_VAR 0 4
11329: IFFALSE 11377
// for j in t do
11331: LD_ADDR_VAR 0 7
11335: PUSH
11336: LD_VAR 0 4
11340: PUSH
11341: FOR_IN
11342: IFFALSE 11375
// result := Replace ( result , result + 1 , j ) ;
11344: LD_ADDR_VAR 0 2
11348: PUSH
11349: LD_VAR 0 2
11353: PPUSH
11354: LD_VAR 0 2
11358: PUSH
11359: LD_INT 1
11361: PLUS
11362: PPUSH
11363: LD_VAR 0 7
11367: PPUSH
11368: CALL_OW 1
11372: ST_TO_ADDR
11373: GO 11341
11375: POP
11376: POP
// end ;
11377: GO 11307
11379: POP
11380: POP
// if not result then
11381: LD_VAR 0 2
11385: NOT
11386: IFFALSE 11390
// exit ;
11388: GO 11538
// mech := result [ 1 ] ;
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: LD_VAR 0 2
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: ST_TO_ADDR
// if result > 1 then
11404: LD_VAR 0 2
11408: PUSH
11409: LD_INT 1
11411: GREATER
11412: IFFALSE 11524
// begin for i = 2 to result do
11414: LD_ADDR_VAR 0 3
11418: PUSH
11419: DOUBLE
11420: LD_INT 2
11422: DEC
11423: ST_TO_ADDR
11424: LD_VAR 0 2
11428: PUSH
11429: FOR_TO
11430: IFFALSE 11522
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11432: LD_ADDR_VAR 0 4
11436: PUSH
11437: LD_VAR 0 2
11441: PUSH
11442: LD_VAR 0 3
11446: ARRAY
11447: PPUSH
11448: LD_INT 3
11450: PPUSH
11451: CALL_OW 259
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_VAR 0 3
11465: ARRAY
11466: PPUSH
11467: CALL_OW 432
11471: MINUS
11472: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11473: LD_VAR 0 4
11477: PUSH
11478: LD_VAR 0 5
11482: PPUSH
11483: LD_INT 3
11485: PPUSH
11486: CALL_OW 259
11490: PUSH
11491: LD_VAR 0 5
11495: PPUSH
11496: CALL_OW 432
11500: MINUS
11501: GREATEREQUAL
11502: IFFALSE 11520
// mech := result [ i ] ;
11504: LD_ADDR_VAR 0 5
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 3
11518: ARRAY
11519: ST_TO_ADDR
// end ;
11520: GO 11429
11522: POP
11523: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_VAR 0 5
11533: PPUSH
11534: CALL_OW 135
// end ;
11538: LD_VAR 0 2
11542: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11543: LD_INT 0
11545: PPUSH
11546: PPUSH
11547: PPUSH
11548: PPUSH
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
11556: PPUSH
11557: PPUSH
// result := [ ] ;
11558: LD_ADDR_VAR 0 7
11562: PUSH
11563: EMPTY
11564: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 266
11574: PUSH
11575: LD_INT 0
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: IN
11585: NOT
11586: IFFALSE 11590
// exit ;
11588: GO 13224
// if name then
11590: LD_VAR 0 3
11594: IFFALSE 11610
// SetBName ( base_dep , name ) ;
11596: LD_VAR 0 1
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: CALL_OW 500
// base := GetBase ( base_dep ) ;
11610: LD_ADDR_VAR 0 15
11614: PUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: CALL_OW 274
11624: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11625: LD_ADDR_VAR 0 16
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 255
11639: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11640: LD_ADDR_VAR 0 17
11644: PUSH
11645: LD_VAR 0 1
11649: PPUSH
11650: CALL_OW 248
11654: ST_TO_ADDR
// if sources then
11655: LD_VAR 0 5
11659: IFFALSE 11706
// for i = 1 to 3 do
11661: LD_ADDR_VAR 0 8
11665: PUSH
11666: DOUBLE
11667: LD_INT 1
11669: DEC
11670: ST_TO_ADDR
11671: LD_INT 3
11673: PUSH
11674: FOR_TO
11675: IFFALSE 11704
// AddResourceType ( base , i , sources [ i ] ) ;
11677: LD_VAR 0 15
11681: PPUSH
11682: LD_VAR 0 8
11686: PPUSH
11687: LD_VAR 0 5
11691: PUSH
11692: LD_VAR 0 8
11696: ARRAY
11697: PPUSH
11698: CALL_OW 276
11702: GO 11674
11704: POP
11705: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11706: LD_ADDR_VAR 0 18
11710: PUSH
11711: LD_VAR 0 15
11715: PPUSH
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL 10967 0 3
11728: ST_TO_ADDR
// InitHc ;
11729: CALL_OW 19
// InitUc ;
11733: CALL_OW 18
// uc_side := side ;
11737: LD_ADDR_OWVAR 20
11741: PUSH
11742: LD_VAR 0 16
11746: ST_TO_ADDR
// uc_nation := nation ;
11747: LD_ADDR_OWVAR 21
11751: PUSH
11752: LD_VAR 0 17
11756: ST_TO_ADDR
// if buildings then
11757: LD_VAR 0 18
11761: IFFALSE 13083
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11763: LD_ADDR_VAR 0 19
11767: PUSH
11768: LD_VAR 0 18
11772: PPUSH
11773: LD_INT 2
11775: PUSH
11776: LD_INT 30
11778: PUSH
11779: LD_INT 29
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 30
11788: PUSH
11789: LD_INT 30
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 72
11805: ST_TO_ADDR
// if tmp then
11806: LD_VAR 0 19
11810: IFFALSE 11858
// for i in tmp do
11812: LD_ADDR_VAR 0 8
11816: PUSH
11817: LD_VAR 0 19
11821: PUSH
11822: FOR_IN
11823: IFFALSE 11856
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11825: LD_VAR 0 8
11829: PPUSH
11830: CALL_OW 250
11834: PPUSH
11835: LD_VAR 0 8
11839: PPUSH
11840: CALL_OW 251
11844: PPUSH
11845: LD_VAR 0 16
11849: PPUSH
11850: CALL_OW 441
11854: GO 11822
11856: POP
11857: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11858: LD_VAR 0 18
11862: PPUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 32
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: LD_INT 33
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 72
11895: IFFALSE 11983
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11897: LD_ADDR_VAR 0 8
11901: PUSH
11902: LD_VAR 0 18
11906: PPUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 33
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 72
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11981
// begin if not GetBWeapon ( i ) then
11943: LD_VAR 0 8
11947: PPUSH
11948: CALL_OW 269
11952: NOT
11953: IFFALSE 11979
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11955: LD_VAR 0 8
11959: PPUSH
11960: LD_VAR 0 8
11964: PPUSH
11965: LD_VAR 0 2
11969: PPUSH
11970: CALL 13229 0 2
11974: PPUSH
11975: CALL_OW 431
// end ;
11979: GO 11940
11981: POP
11982: POP
// end ; for i = 1 to personel do
11983: LD_ADDR_VAR 0 8
11987: PUSH
11988: DOUBLE
11989: LD_INT 1
11991: DEC
11992: ST_TO_ADDR
11993: LD_VAR 0 6
11997: PUSH
11998: FOR_TO
11999: IFFALSE 13063
// begin if i > 4 then
12001: LD_VAR 0 8
12005: PUSH
12006: LD_INT 4
12008: GREATER
12009: IFFALSE 12013
// break ;
12011: GO 13063
// case i of 1 :
12013: LD_VAR 0 8
12017: PUSH
12018: LD_INT 1
12020: DOUBLE
12021: EQUAL
12022: IFTRUE 12026
12024: GO 12106
12026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12027: LD_ADDR_VAR 0 12
12031: PUSH
12032: LD_VAR 0 18
12036: PPUSH
12037: LD_INT 22
12039: PUSH
12040: LD_VAR 0 16
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 58
12051: PUSH
12052: EMPTY
12053: LIST
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 32
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 4
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 30
12080: PUSH
12081: LD_INT 5
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 72
12103: ST_TO_ADDR
12104: GO 12328
12106: LD_INT 2
12108: DOUBLE
12109: EQUAL
12110: IFTRUE 12114
12112: GO 12176
12114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12115: LD_ADDR_VAR 0 12
12119: PUSH
12120: LD_VAR 0 18
12124: PPUSH
12125: LD_INT 22
12127: PUSH
12128: LD_VAR 0 16
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 0
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 72
12173: ST_TO_ADDR
12174: GO 12328
12176: LD_INT 3
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12246
12184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12185: LD_ADDR_VAR 0 12
12189: PUSH
12190: LD_VAR 0 18
12194: PPUSH
12195: LD_INT 22
12197: PUSH
12198: LD_VAR 0 16
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 3
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: ST_TO_ADDR
12244: GO 12328
12246: LD_INT 4
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12327
12254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12255: LD_ADDR_VAR 0 12
12259: PUSH
12260: LD_VAR 0 18
12264: PPUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 16
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 6
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: LD_INT 7
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: LD_INT 8
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 72
12324: ST_TO_ADDR
12325: GO 12328
12327: POP
// if i = 1 then
12328: LD_VAR 0 8
12332: PUSH
12333: LD_INT 1
12335: EQUAL
12336: IFFALSE 12447
// begin tmp := [ ] ;
12338: LD_ADDR_VAR 0 19
12342: PUSH
12343: EMPTY
12344: ST_TO_ADDR
// for j in f do
12345: LD_ADDR_VAR 0 9
12349: PUSH
12350: LD_VAR 0 12
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12429
// if GetBType ( j ) = b_bunker then
12358: LD_VAR 0 9
12362: PPUSH
12363: CALL_OW 266
12367: PUSH
12368: LD_INT 32
12370: EQUAL
12371: IFFALSE 12398
// tmp := Insert ( tmp , 1 , j ) else
12373: LD_ADDR_VAR 0 19
12377: PUSH
12378: LD_VAR 0 19
12382: PPUSH
12383: LD_INT 1
12385: PPUSH
12386: LD_VAR 0 9
12390: PPUSH
12391: CALL_OW 2
12395: ST_TO_ADDR
12396: GO 12427
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12398: LD_ADDR_VAR 0 19
12402: PUSH
12403: LD_VAR 0 19
12407: PPUSH
12408: LD_VAR 0 19
12412: PUSH
12413: LD_INT 1
12415: PLUS
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 2
12426: ST_TO_ADDR
12427: GO 12355
12429: POP
12430: POP
// if tmp then
12431: LD_VAR 0 19
12435: IFFALSE 12447
// f := tmp ;
12437: LD_ADDR_VAR 0 12
12441: PUSH
12442: LD_VAR 0 19
12446: ST_TO_ADDR
// end ; x := personel [ i ] ;
12447: LD_ADDR_VAR 0 13
12451: PUSH
12452: LD_VAR 0 6
12456: PUSH
12457: LD_VAR 0 8
12461: ARRAY
12462: ST_TO_ADDR
// if x = - 1 then
12463: LD_VAR 0 13
12467: PUSH
12468: LD_INT 1
12470: NEG
12471: EQUAL
12472: IFFALSE 12681
// begin for j in f do
12474: LD_ADDR_VAR 0 9
12478: PUSH
12479: LD_VAR 0 12
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12677
// repeat InitHc ;
12487: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12491: LD_VAR 0 9
12495: PPUSH
12496: CALL_OW 266
12500: PUSH
12501: LD_INT 5
12503: EQUAL
12504: IFFALSE 12574
// begin if UnitsInside ( j ) < 3 then
12506: LD_VAR 0 9
12510: PPUSH
12511: CALL_OW 313
12515: PUSH
12516: LD_INT 3
12518: LESS
12519: IFFALSE 12555
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12521: LD_INT 0
12523: PPUSH
12524: LD_INT 5
12526: PUSH
12527: LD_INT 8
12529: PUSH
12530: LD_INT 9
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_VAR 0 17
12542: ARRAY
12543: PPUSH
12544: LD_VAR 0 4
12548: PPUSH
12549: CALL_OW 380
12553: GO 12572
// PrepareHuman ( false , i , skill ) ;
12555: LD_INT 0
12557: PPUSH
12558: LD_VAR 0 8
12562: PPUSH
12563: LD_VAR 0 4
12567: PPUSH
12568: CALL_OW 380
// end else
12572: GO 12591
// PrepareHuman ( false , i , skill ) ;
12574: LD_INT 0
12576: PPUSH
12577: LD_VAR 0 8
12581: PPUSH
12582: LD_VAR 0 4
12586: PPUSH
12587: CALL_OW 380
// un := CreateHuman ;
12591: LD_ADDR_VAR 0 14
12595: PUSH
12596: CALL_OW 44
12600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12601: LD_ADDR_VAR 0 7
12605: PUSH
12606: LD_VAR 0 7
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: LD_VAR 0 14
12618: PPUSH
12619: CALL_OW 2
12623: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12624: LD_VAR 0 14
12628: PPUSH
12629: LD_VAR 0 9
12633: PPUSH
12634: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12638: LD_VAR 0 9
12642: PPUSH
12643: CALL_OW 313
12647: PUSH
12648: LD_INT 6
12650: EQUAL
12651: PUSH
12652: LD_VAR 0 9
12656: PPUSH
12657: CALL_OW 266
12661: PUSH
12662: LD_INT 32
12664: PUSH
12665: LD_INT 31
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: IN
12672: OR
12673: IFFALSE 12487
12675: GO 12484
12677: POP
12678: POP
// end else
12679: GO 13061
// for j = 1 to x do
12681: LD_ADDR_VAR 0 9
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_VAR 0 13
12695: PUSH
12696: FOR_TO
12697: IFFALSE 13059
// begin InitHc ;
12699: CALL_OW 19
// if not f then
12703: LD_VAR 0 12
12707: NOT
12708: IFFALSE 12797
// begin PrepareHuman ( false , i , skill ) ;
12710: LD_INT 0
12712: PPUSH
12713: LD_VAR 0 8
12717: PPUSH
12718: LD_VAR 0 4
12722: PPUSH
12723: CALL_OW 380
// un := CreateHuman ;
12727: LD_ADDR_VAR 0 14
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12737: LD_ADDR_VAR 0 7
12741: PUSH
12742: LD_VAR 0 7
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: LD_VAR 0 14
12754: PPUSH
12755: CALL_OW 2
12759: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12760: LD_VAR 0 14
12764: PPUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 250
12774: PPUSH
12775: LD_VAR 0 1
12779: PPUSH
12780: CALL_OW 251
12784: PPUSH
12785: LD_INT 10
12787: PPUSH
12788: LD_INT 0
12790: PPUSH
12791: CALL_OW 50
// continue ;
12795: GO 12696
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12797: LD_VAR 0 12
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: PPUSH
12806: CALL_OW 313
12810: PUSH
12811: LD_VAR 0 12
12815: PUSH
12816: LD_INT 1
12818: ARRAY
12819: PPUSH
12820: CALL_OW 266
12824: PUSH
12825: LD_INT 32
12827: PUSH
12828: LD_INT 31
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: IN
12835: AND
12836: PUSH
12837: LD_VAR 0 12
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PPUSH
12846: CALL_OW 313
12850: PUSH
12851: LD_INT 6
12853: EQUAL
12854: OR
12855: IFFALSE 12875
// f := Delete ( f , 1 ) ;
12857: LD_ADDR_VAR 0 12
12861: PUSH
12862: LD_VAR 0 12
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 3
12874: ST_TO_ADDR
// if not f then
12875: LD_VAR 0 12
12879: NOT
12880: IFFALSE 12898
// begin x := x + 2 ;
12882: LD_ADDR_VAR 0 13
12886: PUSH
12887: LD_VAR 0 13
12891: PUSH
12892: LD_INT 2
12894: PLUS
12895: ST_TO_ADDR
// continue ;
12896: GO 12696
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12898: LD_VAR 0 12
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PPUSH
12907: CALL_OW 266
12911: PUSH
12912: LD_INT 5
12914: EQUAL
12915: IFFALSE 12989
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12917: LD_VAR 0 12
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 313
12930: PUSH
12931: LD_INT 3
12933: LESS
12934: IFFALSE 12970
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 5
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: LD_INT 9
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: LD_VAR 0 17
12957: ARRAY
12958: PPUSH
12959: LD_VAR 0 4
12963: PPUSH
12964: CALL_OW 380
12968: GO 12987
// PrepareHuman ( false , i , skill ) ;
12970: LD_INT 0
12972: PPUSH
12973: LD_VAR 0 8
12977: PPUSH
12978: LD_VAR 0 4
12982: PPUSH
12983: CALL_OW 380
// end else
12987: GO 13006
// PrepareHuman ( false , i , skill ) ;
12989: LD_INT 0
12991: PPUSH
12992: LD_VAR 0 8
12996: PPUSH
12997: LD_VAR 0 4
13001: PPUSH
13002: CALL_OW 380
// un := CreateHuman ;
13006: LD_ADDR_VAR 0 14
13010: PUSH
13011: CALL_OW 44
13015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13016: LD_ADDR_VAR 0 7
13020: PUSH
13021: LD_VAR 0 7
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_VAR 0 14
13033: PPUSH
13034: CALL_OW 2
13038: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13039: LD_VAR 0 14
13043: PPUSH
13044: LD_VAR 0 12
13048: PUSH
13049: LD_INT 1
13051: ARRAY
13052: PPUSH
13053: CALL_OW 52
// end ;
13057: GO 12696
13059: POP
13060: POP
// end ;
13061: GO 11998
13063: POP
13064: POP
// result := result ^ buildings ;
13065: LD_ADDR_VAR 0 7
13069: PUSH
13070: LD_VAR 0 7
13074: PUSH
13075: LD_VAR 0 18
13079: ADD
13080: ST_TO_ADDR
// end else
13081: GO 13224
// begin for i = 1 to personel do
13083: LD_ADDR_VAR 0 8
13087: PUSH
13088: DOUBLE
13089: LD_INT 1
13091: DEC
13092: ST_TO_ADDR
13093: LD_VAR 0 6
13097: PUSH
13098: FOR_TO
13099: IFFALSE 13222
// begin if i > 4 then
13101: LD_VAR 0 8
13105: PUSH
13106: LD_INT 4
13108: GREATER
13109: IFFALSE 13113
// break ;
13111: GO 13222
// x := personel [ i ] ;
13113: LD_ADDR_VAR 0 13
13117: PUSH
13118: LD_VAR 0 6
13122: PUSH
13123: LD_VAR 0 8
13127: ARRAY
13128: ST_TO_ADDR
// if x = - 1 then
13129: LD_VAR 0 13
13133: PUSH
13134: LD_INT 1
13136: NEG
13137: EQUAL
13138: IFFALSE 13142
// continue ;
13140: GO 13098
// PrepareHuman ( false , i , skill ) ;
13142: LD_INT 0
13144: PPUSH
13145: LD_VAR 0 8
13149: PPUSH
13150: LD_VAR 0 4
13154: PPUSH
13155: CALL_OW 380
// un := CreateHuman ;
13159: LD_ADDR_VAR 0 14
13163: PUSH
13164: CALL_OW 44
13168: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13169: LD_VAR 0 14
13173: PPUSH
13174: LD_VAR 0 1
13178: PPUSH
13179: CALL_OW 250
13183: PPUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: CALL_OW 251
13193: PPUSH
13194: LD_INT 10
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 50
// result := result ^ un ;
13204: LD_ADDR_VAR 0 7
13208: PUSH
13209: LD_VAR 0 7
13213: PUSH
13214: LD_VAR 0 14
13218: ADD
13219: ST_TO_ADDR
// end ;
13220: GO 13098
13222: POP
13223: POP
// end ; end ;
13224: LD_VAR 0 7
13228: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
13236: PPUSH
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
// result := false ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13255: LD_VAR 0 1
13259: NOT
13260: PUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 266
13270: PUSH
13271: LD_INT 32
13273: PUSH
13274: LD_INT 33
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: IN
13281: NOT
13282: OR
13283: IFFALSE 13287
// exit ;
13285: GO 14396
// nat := GetNation ( tower ) ;
13287: LD_ADDR_VAR 0 12
13291: PUSH
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL_OW 248
13301: ST_TO_ADDR
// side := GetSide ( tower ) ;
13302: LD_ADDR_VAR 0 16
13306: PUSH
13307: LD_VAR 0 1
13311: PPUSH
13312: CALL_OW 255
13316: ST_TO_ADDR
// x := GetX ( tower ) ;
13317: LD_ADDR_VAR 0 10
13321: PUSH
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 250
13331: ST_TO_ADDR
// y := GetY ( tower ) ;
13332: LD_ADDR_VAR 0 11
13336: PUSH
13337: LD_VAR 0 1
13341: PPUSH
13342: CALL_OW 251
13346: ST_TO_ADDR
// if not x or not y then
13347: LD_VAR 0 10
13351: NOT
13352: PUSH
13353: LD_VAR 0 11
13357: NOT
13358: OR
13359: IFFALSE 13363
// exit ;
13361: GO 14396
// weapon := 0 ;
13363: LD_ADDR_VAR 0 18
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// fac_list := [ ] ;
13371: LD_ADDR_VAR 0 17
13375: PUSH
13376: EMPTY
13377: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13378: LD_ADDR_VAR 0 6
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 274
13392: PPUSH
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_INT 0
13400: PPUSH
13401: CALL 10967 0 3
13405: PPUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 3
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PPUSH
13416: CALL_OW 72
13420: ST_TO_ADDR
// if not factories then
13421: LD_VAR 0 6
13425: NOT
13426: IFFALSE 13430
// exit ;
13428: GO 14396
// for i in factories do
13430: LD_ADDR_VAR 0 8
13434: PUSH
13435: LD_VAR 0 6
13439: PUSH
13440: FOR_IN
13441: IFFALSE 13466
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13443: LD_ADDR_VAR 0 17
13447: PUSH
13448: LD_VAR 0 17
13452: PUSH
13453: LD_VAR 0 8
13457: PPUSH
13458: CALL_OW 478
13462: UNION
13463: ST_TO_ADDR
13464: GO 13440
13466: POP
13467: POP
// if not fac_list then
13468: LD_VAR 0 17
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 14396
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13477: LD_ADDR_VAR 0 5
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: LD_INT 5
13487: PUSH
13488: LD_INT 9
13490: PUSH
13491: LD_INT 10
13493: PUSH
13494: LD_INT 6
13496: PUSH
13497: LD_INT 7
13499: PUSH
13500: LD_INT 11
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 27
13514: PUSH
13515: LD_INT 28
13517: PUSH
13518: LD_INT 26
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 43
13532: PUSH
13533: LD_INT 44
13535: PUSH
13536: LD_INT 46
13538: PUSH
13539: LD_INT 45
13541: PUSH
13542: LD_INT 47
13544: PUSH
13545: LD_INT 49
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: LD_VAR 0 12
13565: ARRAY
13566: ST_TO_ADDR
// list := list isect fac_list ;
13567: LD_ADDR_VAR 0 5
13571: PUSH
13572: LD_VAR 0 5
13576: PUSH
13577: LD_VAR 0 17
13581: ISECT
13582: ST_TO_ADDR
// if not list then
13583: LD_VAR 0 5
13587: NOT
13588: IFFALSE 13592
// exit ;
13590: GO 14396
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13592: LD_VAR 0 12
13596: PUSH
13597: LD_INT 3
13599: EQUAL
13600: PUSH
13601: LD_INT 49
13603: PUSH
13604: LD_VAR 0 5
13608: IN
13609: AND
13610: PUSH
13611: LD_INT 31
13613: PPUSH
13614: LD_VAR 0 16
13618: PPUSH
13619: CALL_OW 321
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: AND
13628: IFFALSE 13688
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13630: LD_INT 22
13632: PUSH
13633: LD_VAR 0 16
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 35
13644: PUSH
13645: LD_INT 49
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 91
13654: PUSH
13655: LD_VAR 0 1
13659: PUSH
13660: LD_INT 10
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: CALL_OW 69
13677: NOT
13678: IFFALSE 13688
// weapon := ru_time_lapser ;
13680: LD_ADDR_VAR 0 18
13684: PUSH
13685: LD_INT 49
13687: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13688: LD_VAR 0 12
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: LD_INT 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: IN
13703: PUSH
13704: LD_INT 11
13706: PUSH
13707: LD_VAR 0 5
13711: IN
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_VAR 0 5
13720: IN
13721: OR
13722: AND
13723: PUSH
13724: LD_INT 6
13726: PPUSH
13727: LD_VAR 0 16
13731: PPUSH
13732: CALL_OW 321
13736: PUSH
13737: LD_INT 2
13739: EQUAL
13740: AND
13741: IFFALSE 13906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13743: LD_INT 22
13745: PUSH
13746: LD_VAR 0 16
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 35
13760: PUSH
13761: LD_INT 11
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 35
13770: PUSH
13771: LD_INT 30
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 91
13785: PUSH
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 18
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: NOT
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_VAR 0 16
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_INT 32
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: LD_INT 33
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 91
13852: PUSH
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 12
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: PUSH
13879: LD_INT 2
13881: GREATER
13882: AND
13883: IFFALSE 13906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13885: LD_ADDR_VAR 0 18
13889: PUSH
13890: LD_INT 11
13892: PUSH
13893: LD_INT 30
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_VAR 0 12
13904: ARRAY
13905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13906: LD_VAR 0 18
13910: NOT
13911: PUSH
13912: LD_INT 40
13914: PPUSH
13915: LD_VAR 0 16
13919: PPUSH
13920: CALL_OW 321
13924: PUSH
13925: LD_INT 2
13927: EQUAL
13928: AND
13929: PUSH
13930: LD_INT 7
13932: PUSH
13933: LD_VAR 0 5
13937: IN
13938: PUSH
13939: LD_INT 28
13941: PUSH
13942: LD_VAR 0 5
13946: IN
13947: OR
13948: PUSH
13949: LD_INT 45
13951: PUSH
13952: LD_VAR 0 5
13956: IN
13957: OR
13958: AND
13959: IFFALSE 14213
// begin hex := GetHexInfo ( x , y ) ;
13961: LD_ADDR_VAR 0 4
13965: PUSH
13966: LD_VAR 0 10
13970: PPUSH
13971: LD_VAR 0 11
13975: PPUSH
13976: CALL_OW 546
13980: ST_TO_ADDR
// if hex [ 1 ] then
13981: LD_VAR 0 4
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: IFFALSE 13993
// exit ;
13991: GO 14396
// height := hex [ 2 ] ;
13993: LD_ADDR_VAR 0 15
13997: PUSH
13998: LD_VAR 0 4
14002: PUSH
14003: LD_INT 2
14005: ARRAY
14006: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14007: LD_ADDR_VAR 0 14
14011: PUSH
14012: LD_INT 0
14014: PUSH
14015: LD_INT 2
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 5
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: ST_TO_ADDR
// for i in tmp do
14030: LD_ADDR_VAR 0 8
14034: PUSH
14035: LD_VAR 0 14
14039: PUSH
14040: FOR_IN
14041: IFFALSE 14211
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14043: LD_ADDR_VAR 0 9
14047: PUSH
14048: LD_VAR 0 10
14052: PPUSH
14053: LD_VAR 0 8
14057: PPUSH
14058: LD_INT 5
14060: PPUSH
14061: CALL_OW 272
14065: PUSH
14066: LD_VAR 0 11
14070: PPUSH
14071: LD_VAR 0 8
14075: PPUSH
14076: LD_INT 5
14078: PPUSH
14079: CALL_OW 273
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14088: LD_VAR 0 9
14092: PUSH
14093: LD_INT 1
14095: ARRAY
14096: PPUSH
14097: LD_VAR 0 9
14101: PUSH
14102: LD_INT 2
14104: ARRAY
14105: PPUSH
14106: CALL_OW 488
14110: IFFALSE 14209
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14112: LD_ADDR_VAR 0 4
14116: PUSH
14117: LD_VAR 0 9
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 9
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 546
14139: ST_TO_ADDR
// if hex [ 1 ] then
14140: LD_VAR 0 4
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: IFFALSE 14152
// continue ;
14150: GO 14040
// h := hex [ 2 ] ;
14152: LD_ADDR_VAR 0 13
14156: PUSH
14157: LD_VAR 0 4
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: ST_TO_ADDR
// if h + 7 < height then
14166: LD_VAR 0 13
14170: PUSH
14171: LD_INT 7
14173: PLUS
14174: PUSH
14175: LD_VAR 0 15
14179: LESS
14180: IFFALSE 14209
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14182: LD_ADDR_VAR 0 18
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 28
14192: PUSH
14193: LD_INT 45
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PUSH
14201: LD_VAR 0 12
14205: ARRAY
14206: ST_TO_ADDR
// break ;
14207: GO 14211
// end ; end ; end ;
14209: GO 14040
14211: POP
14212: POP
// end ; if not weapon then
14213: LD_VAR 0 18
14217: NOT
14218: IFFALSE 14278
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14220: LD_ADDR_VAR 0 5
14224: PUSH
14225: LD_VAR 0 5
14229: PUSH
14230: LD_INT 11
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 49
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: DIFF
14244: ST_TO_ADDR
// if not list then
14245: LD_VAR 0 5
14249: NOT
14250: IFFALSE 14254
// exit ;
14252: GO 14396
// weapon := list [ rand ( 1 , list ) ] ;
14254: LD_ADDR_VAR 0 18
14258: PUSH
14259: LD_VAR 0 5
14263: PUSH
14264: LD_INT 1
14266: PPUSH
14267: LD_VAR 0 5
14271: PPUSH
14272: CALL_OW 12
14276: ARRAY
14277: ST_TO_ADDR
// end ; if weapon then
14278: LD_VAR 0 18
14282: IFFALSE 14396
// begin tmp := CostOfWeapon ( weapon ) ;
14284: LD_ADDR_VAR 0 14
14288: PUSH
14289: LD_VAR 0 18
14293: PPUSH
14294: CALL_OW 451
14298: ST_TO_ADDR
// j := GetBase ( tower ) ;
14299: LD_ADDR_VAR 0 9
14303: PUSH
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 274
14313: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14314: LD_VAR 0 9
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 275
14326: PUSH
14327: LD_VAR 0 14
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: GREATEREQUAL
14336: PUSH
14337: LD_VAR 0 9
14341: PPUSH
14342: LD_INT 2
14344: PPUSH
14345: CALL_OW 275
14349: PUSH
14350: LD_VAR 0 14
14354: PUSH
14355: LD_INT 2
14357: ARRAY
14358: GREATEREQUAL
14359: AND
14360: PUSH
14361: LD_VAR 0 9
14365: PPUSH
14366: LD_INT 3
14368: PPUSH
14369: CALL_OW 275
14373: PUSH
14374: LD_VAR 0 14
14378: PUSH
14379: LD_INT 3
14381: ARRAY
14382: GREATEREQUAL
14383: AND
14384: IFFALSE 14396
// result := weapon ;
14386: LD_ADDR_VAR 0 3
14390: PUSH
14391: LD_VAR 0 18
14395: ST_TO_ADDR
// end ; end ;
14396: LD_VAR 0 3
14400: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14401: LD_INT 0
14403: PPUSH
14404: PPUSH
// result := true ;
14405: LD_ADDR_VAR 0 3
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// if array1 = array2 then
14413: LD_VAR 0 1
14417: PUSH
14418: LD_VAR 0 2
14422: EQUAL
14423: IFFALSE 14483
// begin for i = 1 to array1 do
14425: LD_ADDR_VAR 0 4
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 1
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14479
// if array1 [ i ] <> array2 [ i ] then
14443: LD_VAR 0 1
14447: PUSH
14448: LD_VAR 0 4
14452: ARRAY
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: LD_VAR 0 4
14463: ARRAY
14464: NONEQUAL
14465: IFFALSE 14477
// begin result := false ;
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// break ;
14475: GO 14479
// end ;
14477: GO 14440
14479: POP
14480: POP
// end else
14481: GO 14491
// result := false ;
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// end ;
14491: LD_VAR 0 3
14495: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// if not array1 or not array2 then
14500: LD_VAR 0 1
14504: NOT
14505: PUSH
14506: LD_VAR 0 2
14510: NOT
14511: OR
14512: IFFALSE 14516
// exit ;
14514: GO 14580
// result := true ;
14516: LD_ADDR_VAR 0 3
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// for i = 1 to array1 do
14524: LD_ADDR_VAR 0 4
14528: PUSH
14529: DOUBLE
14530: LD_INT 1
14532: DEC
14533: ST_TO_ADDR
14534: LD_VAR 0 1
14538: PUSH
14539: FOR_TO
14540: IFFALSE 14578
// if array1 [ i ] <> array2 [ i ] then
14542: LD_VAR 0 1
14546: PUSH
14547: LD_VAR 0 4
14551: ARRAY
14552: PUSH
14553: LD_VAR 0 2
14557: PUSH
14558: LD_VAR 0 4
14562: ARRAY
14563: NONEQUAL
14564: IFFALSE 14576
// begin result := false ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// break ;
14574: GO 14578
// end ;
14576: GO 14539
14578: POP
14579: POP
// end ;
14580: LD_VAR 0 3
14584: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
14589: PPUSH
// pom := GetBase ( fac ) ;
14590: LD_ADDR_VAR 0 5
14594: PUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 274
14604: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: LD_VAR 0 2
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 2
14623: PUSH
14624: LD_INT 2
14626: ARRAY
14627: PPUSH
14628: LD_VAR 0 2
14632: PUSH
14633: LD_INT 3
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 2
14641: PUSH
14642: LD_INT 4
14644: ARRAY
14645: PPUSH
14646: CALL_OW 449
14650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14651: LD_ADDR_VAR 0 3
14655: PUSH
14656: LD_VAR 0 5
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 275
14668: PUSH
14669: LD_VAR 0 4
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: GREATEREQUAL
14678: PUSH
14679: LD_VAR 0 5
14683: PPUSH
14684: LD_INT 2
14686: PPUSH
14687: CALL_OW 275
14691: PUSH
14692: LD_VAR 0 4
14696: PUSH
14697: LD_INT 2
14699: ARRAY
14700: GREATEREQUAL
14701: AND
14702: PUSH
14703: LD_VAR 0 5
14707: PPUSH
14708: LD_INT 3
14710: PPUSH
14711: CALL_OW 275
14715: PUSH
14716: LD_VAR 0 4
14720: PUSH
14721: LD_INT 3
14723: ARRAY
14724: GREATEREQUAL
14725: AND
14726: ST_TO_ADDR
// end ;
14727: LD_VAR 0 3
14731: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14732: LD_INT 0
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
// pom := GetBase ( building ) ;
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 274
14752: ST_TO_ADDR
// if not pom then
14753: LD_VAR 0 3
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 14932
// btype := GetBType ( building ) ;
14762: LD_ADDR_VAR 0 5
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 266
14776: ST_TO_ADDR
// if btype = b_armoury then
14777: LD_VAR 0 5
14781: PUSH
14782: LD_INT 4
14784: EQUAL
14785: IFFALSE 14795
// btype := b_barracks ;
14787: LD_ADDR_VAR 0 5
14791: PUSH
14792: LD_INT 5
14794: ST_TO_ADDR
// if btype = b_depot then
14795: LD_VAR 0 5
14799: PUSH
14800: LD_INT 0
14802: EQUAL
14803: IFFALSE 14813
// btype := b_warehouse ;
14805: LD_ADDR_VAR 0 5
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if btype = b_workshop then
14813: LD_VAR 0 5
14817: PUSH
14818: LD_INT 2
14820: EQUAL
14821: IFFALSE 14831
// btype := b_factory ;
14823: LD_ADDR_VAR 0 5
14827: PUSH
14828: LD_INT 3
14830: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14831: LD_ADDR_VAR 0 4
14835: PUSH
14836: LD_VAR 0 5
14840: PPUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL_OW 248
14850: PPUSH
14851: CALL_OW 450
14855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_VAR 0 3
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 275
14873: PUSH
14874: LD_VAR 0 4
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: GREATEREQUAL
14883: PUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 2
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 4
14901: PUSH
14902: LD_INT 2
14904: ARRAY
14905: GREATEREQUAL
14906: AND
14907: PUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 3
14915: PPUSH
14916: CALL_OW 275
14920: PUSH
14921: LD_VAR 0 4
14925: PUSH
14926: LD_INT 3
14928: ARRAY
14929: GREATEREQUAL
14930: AND
14931: ST_TO_ADDR
// end ;
14932: LD_VAR 0 2
14936: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
// pom := GetBase ( building ) ;
14942: LD_ADDR_VAR 0 4
14946: PUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL_OW 274
14956: ST_TO_ADDR
// if not pom then
14957: LD_VAR 0 4
14961: NOT
14962: IFFALSE 14966
// exit ;
14964: GO 15067
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14966: LD_ADDR_VAR 0 5
14970: PUSH
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 248
14985: PPUSH
14986: CALL_OW 450
14990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: CALL_OW 275
15008: PUSH
15009: LD_VAR 0 5
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: GREATEREQUAL
15018: PUSH
15019: LD_VAR 0 4
15023: PPUSH
15024: LD_INT 2
15026: PPUSH
15027: CALL_OW 275
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: GREATEREQUAL
15041: AND
15042: PUSH
15043: LD_VAR 0 4
15047: PPUSH
15048: LD_INT 3
15050: PPUSH
15051: CALL_OW 275
15055: PUSH
15056: LD_VAR 0 5
15060: PUSH
15061: LD_INT 3
15063: ARRAY
15064: GREATEREQUAL
15065: AND
15066: ST_TO_ADDR
// end ;
15067: LD_VAR 0 3
15071: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
// result := false ;
15085: LD_ADDR_VAR 0 8
15089: PUSH
15090: LD_INT 0
15092: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15093: LD_VAR 0 5
15097: NOT
15098: PUSH
15099: LD_VAR 0 1
15103: NOT
15104: OR
15105: PUSH
15106: LD_VAR 0 2
15110: NOT
15111: OR
15112: PUSH
15113: LD_VAR 0 3
15117: NOT
15118: OR
15119: IFFALSE 15123
// exit ;
15121: GO 15937
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15123: LD_ADDR_VAR 0 14
15127: PUSH
15128: LD_VAR 0 1
15132: PPUSH
15133: LD_VAR 0 2
15137: PPUSH
15138: LD_VAR 0 3
15142: PPUSH
15143: LD_VAR 0 4
15147: PPUSH
15148: LD_VAR 0 5
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: CALL_OW 248
15161: PPUSH
15162: LD_INT 0
15164: PPUSH
15165: CALL 17190 0 6
15169: ST_TO_ADDR
// if not hexes then
15170: LD_VAR 0 14
15174: NOT
15175: IFFALSE 15179
// exit ;
15177: GO 15937
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15179: LD_ADDR_VAR 0 17
15183: PUSH
15184: LD_VAR 0 5
15188: PPUSH
15189: LD_INT 22
15191: PUSH
15192: LD_VAR 0 13
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 72
15242: ST_TO_ADDR
// for i = 1 to hexes do
15243: LD_ADDR_VAR 0 9
15247: PUSH
15248: DOUBLE
15249: LD_INT 1
15251: DEC
15252: ST_TO_ADDR
15253: LD_VAR 0 14
15257: PUSH
15258: FOR_TO
15259: IFFALSE 15935
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15261: LD_ADDR_VAR 0 13
15265: PUSH
15266: LD_VAR 0 14
15270: PUSH
15271: LD_VAR 0 9
15275: ARRAY
15276: PUSH
15277: LD_INT 1
15279: ARRAY
15280: PPUSH
15281: LD_VAR 0 14
15285: PUSH
15286: LD_VAR 0 9
15290: ARRAY
15291: PUSH
15292: LD_INT 2
15294: ARRAY
15295: PPUSH
15296: CALL_OW 428
15300: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15301: LD_VAR 0 14
15305: PUSH
15306: LD_VAR 0 9
15310: ARRAY
15311: PUSH
15312: LD_INT 1
15314: ARRAY
15315: PPUSH
15316: LD_VAR 0 14
15320: PUSH
15321: LD_VAR 0 9
15325: ARRAY
15326: PUSH
15327: LD_INT 2
15329: ARRAY
15330: PPUSH
15331: CALL_OW 351
15335: PUSH
15336: LD_VAR 0 14
15340: PUSH
15341: LD_VAR 0 9
15345: ARRAY
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 14
15355: PUSH
15356: LD_VAR 0 9
15360: ARRAY
15361: PUSH
15362: LD_INT 2
15364: ARRAY
15365: PPUSH
15366: CALL_OW 488
15370: NOT
15371: OR
15372: PUSH
15373: LD_VAR 0 13
15377: PPUSH
15378: CALL_OW 247
15382: PUSH
15383: LD_INT 3
15385: EQUAL
15386: OR
15387: IFFALSE 15393
// exit ;
15389: POP
15390: POP
15391: GO 15937
// if not tmp then
15393: LD_VAR 0 13
15397: NOT
15398: IFFALSE 15402
// continue ;
15400: GO 15258
// result := true ;
15402: LD_ADDR_VAR 0 8
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15410: LD_VAR 0 6
15414: PUSH
15415: LD_VAR 0 13
15419: PPUSH
15420: CALL_OW 247
15424: PUSH
15425: LD_INT 2
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_VAR 0 13
15434: PPUSH
15435: CALL_OW 263
15439: PUSH
15440: LD_INT 1
15442: EQUAL
15443: AND
15444: IFFALSE 15608
// begin if IsDrivenBy ( tmp ) then
15446: LD_VAR 0 13
15450: PPUSH
15451: CALL_OW 311
15455: IFFALSE 15459
// continue ;
15457: GO 15258
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15459: LD_VAR 0 6
15463: PPUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 60
15469: PUSH
15470: EMPTY
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: LD_INT 55
15482: PUSH
15483: EMPTY
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 72
15498: IFFALSE 15606
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15500: LD_ADDR_VAR 0 18
15504: PUSH
15505: LD_VAR 0 6
15509: PPUSH
15510: LD_INT 3
15512: PUSH
15513: LD_INT 60
15515: PUSH
15516: EMPTY
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 55
15528: PUSH
15529: EMPTY
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 72
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: ST_TO_ADDR
// if IsInUnit ( driver ) then
15549: LD_VAR 0 18
15553: PPUSH
15554: CALL_OW 310
15558: IFFALSE 15569
// ComExit ( driver ) ;
15560: LD_VAR 0 18
15564: PPUSH
15565: CALL 40991 0 1
// AddComEnterUnit ( driver , tmp ) ;
15569: LD_VAR 0 18
15573: PPUSH
15574: LD_VAR 0 13
15578: PPUSH
15579: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15583: LD_VAR 0 18
15587: PPUSH
15588: LD_VAR 0 7
15592: PPUSH
15593: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15597: LD_VAR 0 18
15601: PPUSH
15602: CALL_OW 181
// end ; continue ;
15606: GO 15258
// end ; if not cleaners or not tmp in cleaners then
15608: LD_VAR 0 6
15612: NOT
15613: PUSH
15614: LD_VAR 0 13
15618: PUSH
15619: LD_VAR 0 6
15623: IN
15624: NOT
15625: OR
15626: IFFALSE 15933
// begin if dep then
15628: LD_VAR 0 17
15632: IFFALSE 15768
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15634: LD_ADDR_VAR 0 16
15638: PUSH
15639: LD_VAR 0 17
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: CALL_OW 250
15652: PPUSH
15653: LD_VAR 0 17
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: CALL_OW 254
15666: PPUSH
15667: LD_INT 5
15669: PPUSH
15670: CALL_OW 272
15674: PUSH
15675: LD_VAR 0 17
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: PPUSH
15684: CALL_OW 251
15688: PPUSH
15689: LD_VAR 0 17
15693: PUSH
15694: LD_INT 1
15696: ARRAY
15697: PPUSH
15698: CALL_OW 254
15702: PPUSH
15703: LD_INT 5
15705: PPUSH
15706: CALL_OW 273
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15715: LD_VAR 0 16
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_VAR 0 16
15728: PUSH
15729: LD_INT 2
15731: ARRAY
15732: PPUSH
15733: CALL_OW 488
15737: IFFALSE 15768
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15739: LD_VAR 0 13
15743: PPUSH
15744: LD_VAR 0 16
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: LD_VAR 0 16
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 111
// continue ;
15766: GO 15258
// end ; end ; r := GetDir ( tmp ) ;
15768: LD_ADDR_VAR 0 15
15772: PUSH
15773: LD_VAR 0 13
15777: PPUSH
15778: CALL_OW 254
15782: ST_TO_ADDR
// if r = 5 then
15783: LD_VAR 0 15
15787: PUSH
15788: LD_INT 5
15790: EQUAL
15791: IFFALSE 15801
// r := 0 ;
15793: LD_ADDR_VAR 0 15
15797: PUSH
15798: LD_INT 0
15800: ST_TO_ADDR
// for j = r to 5 do
15801: LD_ADDR_VAR 0 10
15805: PUSH
15806: DOUBLE
15807: LD_VAR 0 15
15811: DEC
15812: ST_TO_ADDR
15813: LD_INT 5
15815: PUSH
15816: FOR_TO
15817: IFFALSE 15931
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15819: LD_ADDR_VAR 0 11
15823: PUSH
15824: LD_VAR 0 13
15828: PPUSH
15829: CALL_OW 250
15833: PPUSH
15834: LD_VAR 0 10
15838: PPUSH
15839: LD_INT 2
15841: PPUSH
15842: CALL_OW 272
15846: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15847: LD_ADDR_VAR 0 12
15851: PUSH
15852: LD_VAR 0 13
15856: PPUSH
15857: CALL_OW 251
15861: PPUSH
15862: LD_VAR 0 10
15866: PPUSH
15867: LD_INT 2
15869: PPUSH
15870: CALL_OW 273
15874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15875: LD_VAR 0 11
15879: PPUSH
15880: LD_VAR 0 12
15884: PPUSH
15885: CALL_OW 488
15889: PUSH
15890: LD_VAR 0 11
15894: PPUSH
15895: LD_VAR 0 12
15899: PPUSH
15900: CALL_OW 428
15904: NOT
15905: AND
15906: IFFALSE 15929
// begin ComMoveXY ( tmp , _x , _y ) ;
15908: LD_VAR 0 13
15912: PPUSH
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 12
15922: PPUSH
15923: CALL_OW 111
// break ;
15927: GO 15931
// end ; end ;
15929: GO 15816
15931: POP
15932: POP
// end ; end ;
15933: GO 15258
15935: POP
15936: POP
// end ;
15937: LD_VAR 0 8
15941: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15942: LD_INT 0
15944: PPUSH
// result := true ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15953: LD_VAR 0 2
15957: PUSH
15958: LD_INT 24
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15972
15964: LD_INT 33
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15997
15972: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_INT 32
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 321
15990: PUSH
15991: LD_INT 2
15993: EQUAL
15994: ST_TO_ADDR
15995: GO 16313
15997: LD_INT 20
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16030
16005: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_INT 6
16013: PPUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 321
16023: PUSH
16024: LD_INT 2
16026: EQUAL
16027: ST_TO_ADDR
16028: GO 16313
16030: LD_INT 22
16032: DOUBLE
16033: EQUAL
16034: IFTRUE 16044
16036: LD_INT 36
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16069
16044: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: LD_INT 15
16052: PPUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 321
16062: PUSH
16063: LD_INT 2
16065: EQUAL
16066: ST_TO_ADDR
16067: GO 16313
16069: LD_INT 30
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16102
16077: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 20
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 321
16095: PUSH
16096: LD_INT 2
16098: EQUAL
16099: ST_TO_ADDR
16100: GO 16313
16102: LD_INT 28
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16116
16108: LD_INT 21
16110: DOUBLE
16111: EQUAL
16112: IFTRUE 16116
16114: GO 16141
16116: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: LD_INT 21
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 321
16134: PUSH
16135: LD_INT 2
16137: EQUAL
16138: ST_TO_ADDR
16139: GO 16313
16141: LD_INT 16
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16174
16149: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 84
16157: PPUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 321
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: ST_TO_ADDR
16172: GO 16313
16174: LD_INT 19
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16188
16180: LD_INT 23
16182: DOUBLE
16183: EQUAL
16184: IFTRUE 16188
16186: GO 16213
16188: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16189: LD_ADDR_VAR 0 3
16193: PUSH
16194: LD_INT 83
16196: PPUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 321
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: ST_TO_ADDR
16211: GO 16313
16213: LD_INT 17
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16246
16221: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_INT 39
16229: PPUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 321
16239: PUSH
16240: LD_INT 2
16242: EQUAL
16243: ST_TO_ADDR
16244: GO 16313
16246: LD_INT 18
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16279
16254: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: LD_INT 40
16262: PPUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 321
16272: PUSH
16273: LD_INT 2
16275: EQUAL
16276: ST_TO_ADDR
16277: GO 16313
16279: LD_INT 27
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16312
16287: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_INT 35
16295: PPUSH
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 321
16305: PUSH
16306: LD_INT 2
16308: EQUAL
16309: ST_TO_ADDR
16310: GO 16313
16312: POP
// end ;
16313: LD_VAR 0 3
16317: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
// result := false ;
16331: LD_ADDR_VAR 0 6
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// if btype = b_depot then
16339: LD_VAR 0 2
16343: PUSH
16344: LD_INT 0
16346: EQUAL
16347: IFFALSE 16359
// begin result := true ;
16349: LD_ADDR_VAR 0 6
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// exit ;
16357: GO 17185
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16359: LD_VAR 0 1
16363: NOT
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 266
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: IN
16385: NOT
16386: OR
16387: PUSH
16388: LD_VAR 0 2
16392: NOT
16393: OR
16394: PUSH
16395: LD_VAR 0 5
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: LD_INT 4
16414: PUSH
16415: LD_INT 5
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: IN
16426: NOT
16427: OR
16428: PUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_VAR 0 4
16438: PPUSH
16439: CALL_OW 488
16443: NOT
16444: OR
16445: IFFALSE 16449
// exit ;
16447: GO 17185
// side := GetSide ( depot ) ;
16449: LD_ADDR_VAR 0 9
16453: PUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 255
16463: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16464: LD_VAR 0 9
16468: PPUSH
16469: LD_VAR 0 2
16473: PPUSH
16474: CALL 15942 0 2
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 17185
// pom := GetBase ( depot ) ;
16483: LD_ADDR_VAR 0 10
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 274
16497: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16498: LD_ADDR_VAR 0 11
16502: PUSH
16503: LD_VAR 0 2
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 248
16517: PPUSH
16518: CALL_OW 450
16522: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16523: LD_VAR 0 10
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 275
16535: PUSH
16536: LD_VAR 0 11
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: GREATEREQUAL
16545: PUSH
16546: LD_VAR 0 10
16550: PPUSH
16551: LD_INT 2
16553: PPUSH
16554: CALL_OW 275
16558: PUSH
16559: LD_VAR 0 11
16563: PUSH
16564: LD_INT 2
16566: ARRAY
16567: GREATEREQUAL
16568: AND
16569: PUSH
16570: LD_VAR 0 10
16574: PPUSH
16575: LD_INT 3
16577: PPUSH
16578: CALL_OW 275
16582: PUSH
16583: LD_VAR 0 11
16587: PUSH
16588: LD_INT 3
16590: ARRAY
16591: GREATEREQUAL
16592: AND
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 17185
// if GetBType ( depot ) = b_depot then
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 266
16607: PUSH
16608: LD_INT 0
16610: EQUAL
16611: IFFALSE 16623
// dist := 28 else
16613: LD_ADDR_VAR 0 14
16617: PUSH
16618: LD_INT 28
16620: ST_TO_ADDR
16621: GO 16631
// dist := 36 ;
16623: LD_ADDR_VAR 0 14
16627: PUSH
16628: LD_INT 36
16630: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16631: LD_VAR 0 1
16635: PPUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_VAR 0 4
16645: PPUSH
16646: CALL_OW 297
16650: PUSH
16651: LD_VAR 0 14
16655: GREATER
16656: IFFALSE 16660
// exit ;
16658: GO 17185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16660: LD_ADDR_VAR 0 12
16664: PUSH
16665: LD_VAR 0 2
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 248
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL 17190 0 6
16702: ST_TO_ADDR
// if not hexes then
16703: LD_VAR 0 12
16707: NOT
16708: IFFALSE 16712
// exit ;
16710: GO 17185
// hex := GetHexInfo ( x , y ) ;
16712: LD_ADDR_VAR 0 15
16716: PUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_VAR 0 4
16726: PPUSH
16727: CALL_OW 546
16731: ST_TO_ADDR
// if hex [ 1 ] then
16732: LD_VAR 0 15
16736: PUSH
16737: LD_INT 1
16739: ARRAY
16740: IFFALSE 16744
// exit ;
16742: GO 17185
// height := hex [ 2 ] ;
16744: LD_ADDR_VAR 0 13
16748: PUSH
16749: LD_VAR 0 15
16753: PUSH
16754: LD_INT 2
16756: ARRAY
16757: ST_TO_ADDR
// for i = 1 to hexes do
16758: LD_ADDR_VAR 0 7
16762: PUSH
16763: DOUBLE
16764: LD_INT 1
16766: DEC
16767: ST_TO_ADDR
16768: LD_VAR 0 12
16772: PUSH
16773: FOR_TO
16774: IFFALSE 17104
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16776: LD_VAR 0 12
16780: PUSH
16781: LD_VAR 0 7
16785: ARRAY
16786: PUSH
16787: LD_INT 1
16789: ARRAY
16790: PPUSH
16791: LD_VAR 0 12
16795: PUSH
16796: LD_VAR 0 7
16800: ARRAY
16801: PUSH
16802: LD_INT 2
16804: ARRAY
16805: PPUSH
16806: CALL_OW 488
16810: NOT
16811: PUSH
16812: LD_VAR 0 12
16816: PUSH
16817: LD_VAR 0 7
16821: ARRAY
16822: PUSH
16823: LD_INT 1
16825: ARRAY
16826: PPUSH
16827: LD_VAR 0 12
16831: PUSH
16832: LD_VAR 0 7
16836: ARRAY
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 428
16846: PUSH
16847: LD_INT 0
16849: GREATER
16850: OR
16851: PUSH
16852: LD_VAR 0 12
16856: PUSH
16857: LD_VAR 0 7
16861: ARRAY
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_VAR 0 12
16871: PUSH
16872: LD_VAR 0 7
16876: ARRAY
16877: PUSH
16878: LD_INT 2
16880: ARRAY
16881: PPUSH
16882: CALL_OW 351
16886: OR
16887: IFFALSE 16893
// exit ;
16889: POP
16890: POP
16891: GO 17185
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16893: LD_ADDR_VAR 0 8
16897: PUSH
16898: LD_VAR 0 12
16902: PUSH
16903: LD_VAR 0 7
16907: ARRAY
16908: PUSH
16909: LD_INT 1
16911: ARRAY
16912: PPUSH
16913: LD_VAR 0 12
16917: PUSH
16918: LD_VAR 0 7
16922: ARRAY
16923: PUSH
16924: LD_INT 2
16926: ARRAY
16927: PPUSH
16928: CALL_OW 546
16932: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16933: LD_VAR 0 8
16937: PUSH
16938: LD_INT 1
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 8
16946: PUSH
16947: LD_INT 2
16949: ARRAY
16950: PUSH
16951: LD_VAR 0 13
16955: PUSH
16956: LD_INT 2
16958: PLUS
16959: GREATER
16960: OR
16961: PUSH
16962: LD_VAR 0 8
16966: PUSH
16967: LD_INT 2
16969: ARRAY
16970: PUSH
16971: LD_VAR 0 13
16975: PUSH
16976: LD_INT 2
16978: MINUS
16979: LESS
16980: OR
16981: PUSH
16982: LD_VAR 0 8
16986: PUSH
16987: LD_INT 3
16989: ARRAY
16990: PUSH
16991: LD_INT 0
16993: PUSH
16994: LD_INT 8
16996: PUSH
16997: LD_INT 9
16999: PUSH
17000: LD_INT 10
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: LD_INT 13
17011: PUSH
17012: LD_INT 16
17014: PUSH
17015: LD_INT 17
17017: PUSH
17018: LD_INT 18
17020: PUSH
17021: LD_INT 19
17023: PUSH
17024: LD_INT 20
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: IN
17045: NOT
17046: OR
17047: PUSH
17048: LD_VAR 0 8
17052: PUSH
17053: LD_INT 5
17055: ARRAY
17056: NOT
17057: OR
17058: PUSH
17059: LD_VAR 0 8
17063: PUSH
17064: LD_INT 6
17066: ARRAY
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 7
17076: PUSH
17077: LD_INT 9
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 11
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: IN
17094: NOT
17095: OR
17096: IFFALSE 17102
// exit ;
17098: POP
17099: POP
17100: GO 17185
// end ;
17102: GO 16773
17104: POP
17105: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17106: LD_VAR 0 9
17110: PPUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: LD_VAR 0 4
17120: PPUSH
17121: LD_INT 20
17123: PPUSH
17124: CALL 9108 0 4
17128: PUSH
17129: LD_INT 4
17131: ARRAY
17132: IFFALSE 17136
// exit ;
17134: GO 17185
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17136: LD_VAR 0 2
17140: PUSH
17141: LD_INT 29
17143: PUSH
17144: LD_INT 30
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: IN
17151: PUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_VAR 0 4
17161: PPUSH
17162: LD_VAR 0 9
17166: PPUSH
17167: CALL_OW 440
17171: NOT
17172: AND
17173: IFFALSE 17177
// exit ;
17175: GO 17185
// result := true ;
17177: LD_ADDR_VAR 0 6
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// end ;
17185: LD_VAR 0 6
17189: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
// result = [ ] ;
17250: LD_ADDR_VAR 0 7
17254: PUSH
17255: EMPTY
17256: ST_TO_ADDR
// temp_list = [ ] ;
17257: LD_ADDR_VAR 0 9
17261: PUSH
17262: EMPTY
17263: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17264: LD_VAR 0 4
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: LD_INT 3
17280: PUSH
17281: LD_INT 4
17283: PUSH
17284: LD_INT 5
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: IN
17295: NOT
17296: PUSH
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: IN
17312: PUSH
17313: LD_VAR 0 5
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: AND
17334: OR
17335: IFFALSE 17339
// exit ;
17337: GO 35730
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 6
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: LD_INT 8
17352: PUSH
17353: LD_INT 13
17355: PUSH
17356: LD_INT 12
17358: PUSH
17359: LD_INT 15
17361: PUSH
17362: LD_INT 11
17364: PUSH
17365: LD_INT 14
17367: PUSH
17368: LD_INT 10
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: IN
17382: IFFALSE 17392
// btype = b_lab ;
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_INT 6
17391: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17392: LD_VAR 0 6
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: IN
17411: NOT
17412: PUSH
17413: LD_VAR 0 1
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 6
17432: PUSH
17433: LD_INT 36
17435: PUSH
17436: LD_INT 4
17438: PUSH
17439: LD_INT 5
17441: PUSH
17442: LD_INT 31
17444: PUSH
17445: LD_INT 32
17447: PUSH
17448: LD_INT 33
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: IN
17464: NOT
17465: PUSH
17466: LD_VAR 0 6
17470: PUSH
17471: LD_INT 1
17473: EQUAL
17474: AND
17475: OR
17476: PUSH
17477: LD_VAR 0 1
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: IN
17492: NOT
17493: PUSH
17494: LD_VAR 0 6
17498: PUSH
17499: LD_INT 2
17501: EQUAL
17502: AND
17503: OR
17504: IFFALSE 17514
// mode = 0 ;
17506: LD_ADDR_VAR 0 6
17510: PUSH
17511: LD_INT 0
17513: ST_TO_ADDR
// case mode of 0 :
17514: LD_VAR 0 6
17518: PUSH
17519: LD_INT 0
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 28980
17527: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17528: LD_ADDR_VAR 0 11
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: LD_INT 1
17601: NEG
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: LD_INT 2
17613: NEG
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: LD_INT 2
17624: NEG
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17721: LD_ADDR_VAR 0 12
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: NEG
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 2
17844: NEG
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: NEG
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 3
17878: NEG
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 3
17889: NEG
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17917: LD_ADDR_VAR 0 13
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 2
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: NEG
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: LD_INT 2
18056: NEG
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: NEG
18065: PUSH
18066: LD_INT 3
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 3
18076: NEG
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 3
18088: NEG
18089: PUSH
18090: LD_INT 3
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18116: LD_ADDR_VAR 0 14
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: LD_INT 2
18201: NEG
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 3
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: LD_INT 3
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18312: LD_ADDR_VAR 0 15
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: NEG
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18505: LD_ADDR_VAR 0 16
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18698: LD_ADDR_VAR 0 17
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: LD_INT 2
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18928: LD_ADDR_VAR 0 18
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: NEG
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19158: LD_ADDR_VAR 0 19
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 2
19334: NEG
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 2
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19388: LD_ADDR_VAR 0 20
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19618: LD_ADDR_VAR 0 21
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19848: LD_ADDR_VAR 0 22
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: NEG
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20078: LD_ADDR_VAR 0 23
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 0
20171: PUSH
20172: LD_INT 2
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: LD_INT 0
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 2
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 3
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: LD_INT 3
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 2
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20358: LD_ADDR_VAR 0 24
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: NEG
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 0
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 2
20534: NEG
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 2
20545: NEG
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: NEG
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 3
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20634: LD_ADDR_VAR 0 25
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 2
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20908: LD_ADDR_VAR 0 26
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 2
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: NEG
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 3
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: NEG
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21184: LD_ADDR_VAR 0 27
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 3
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 3
21429: NEG
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21464: LD_ADDR_VAR 0 28
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: LD_INT 3
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: LD_INT 3
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 3
21699: NEG
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 3
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21746: LD_ADDR_VAR 0 29
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: LD_INT 2
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 2
21912: NEG
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 2
21924: NEG
21925: PUSH
21926: LD_INT 2
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 2
21936: NEG
21937: PUSH
21938: LD_INT 3
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 3
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 3
21990: NEG
21991: PUSH
21992: LD_INT 2
21994: NEG
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22025: LD_ADDR_VAR 0 30
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 1
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22303: LD_ADDR_VAR 0 31
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 2
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 2
22468: NEG
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 2
22480: NEG
22481: PUSH
22482: LD_INT 2
22484: NEG
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 3
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 3
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 3
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 3
22546: NEG
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22581: LD_ADDR_VAR 0 32
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: NEG
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 2
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 3
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: LD_INT 2
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: NEG
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 3
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22859: LD_ADDR_VAR 0 33
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 2
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: LD_INT 3
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 3
23103: NEG
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23138: LD_ADDR_VAR 0 34
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 3
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: LD_INT 3
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: NEG
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 3
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23418: LD_ADDR_VAR 0 35
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23530: LD_ADDR_VAR 0 36
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23642: LD_ADDR_VAR 0 37
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23754: LD_ADDR_VAR 0 38
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23866: LD_ADDR_VAR 0 39
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23978: LD_ADDR_VAR 0 40
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24090: LD_ADDR_VAR 0 41
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: NEG
24281: PUSH
24282: LD_INT 3
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 3
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 3
24364: NEG
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: NEG
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24440: LD_ADDR_VAR 0 42
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: NEG
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: LD_INT 3
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: LD_INT 3
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 3
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: NEG
24750: PUSH
24751: LD_INT 3
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24790: LD_ADDR_VAR 0 43
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: NEG
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 3
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 3
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 2
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 3
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25138: LD_ADDR_VAR 0 44
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 3
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 3
25412: NEG
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25488: LD_ADDR_VAR 0 45
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: LD_INT 3
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: LD_INT 3
25694: NEG
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 3
25785: NEG
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 3
25797: NEG
25798: PUSH
25799: LD_INT 3
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25838: LD_ADDR_VAR 0 46
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 3
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 3
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: NEG
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26186: LD_ADDR_VAR 0 47
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26337: LD_ADDR_VAR 0 48
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26484: LD_ADDR_VAR 0 49
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26628: LD_ADDR_VAR 0 50
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26772: LD_ADDR_VAR 0 51
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26919: LD_ADDR_VAR 0 52
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 2
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27070: LD_ADDR_VAR 0 53
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27300: LD_ADDR_VAR 0 54
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27530: LD_ADDR_VAR 0 55
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: NEG
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27760: LD_ADDR_VAR 0 56
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 2
27936: NEG
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27990: LD_ADDR_VAR 0 57
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 2
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28220: LD_ADDR_VAR 0 58
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28450: LD_ADDR_VAR 0 59
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28538: LD_ADDR_VAR 0 60
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28626: LD_ADDR_VAR 0 61
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28714: LD_ADDR_VAR 0 62
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28802: LD_ADDR_VAR 0 63
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28890: LD_ADDR_VAR 0 64
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
// end ; 1 :
28978: GO 34875
28980: LD_INT 1
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 31611
28988: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28989: LD_ADDR_VAR 0 11
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 3
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 3
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29033: LD_ADDR_VAR 0 12
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29074: LD_ADDR_VAR 0 13
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29114: LD_ADDR_VAR 0 14
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29155: LD_ADDR_VAR 0 15
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: NEG
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29199: LD_ADDR_VAR 0 16
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 3
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: NEG
29231: PUSH
29232: LD_INT 3
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29245: LD_ADDR_VAR 0 17
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 3
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29289: LD_ADDR_VAR 0 18
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 3
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29330: LD_ADDR_VAR 0 19
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29370: LD_ADDR_VAR 0 20
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29411: LD_ADDR_VAR 0 21
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29455: LD_ADDR_VAR 0 22
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 3
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29501: LD_ADDR_VAR 0 23
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 4
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29545: LD_ADDR_VAR 0 24
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29586: LD_ADDR_VAR 0 25
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29626: LD_ADDR_VAR 0 26
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 4
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29667: LD_ADDR_VAR 0 27
29671: PUSH
29672: LD_INT 3
29674: NEG
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 4
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29711: LD_ADDR_VAR 0 28
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: LD_INT 3
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: LD_INT 4
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 4
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29757: LD_ADDR_VAR 0 29
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 4
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: LD_INT 5
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 5
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 4
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 6
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 6
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 5
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29912: LD_ADDR_VAR 0 30
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 4
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 4
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 5
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 5
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 6
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 6
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30055: LD_ADDR_VAR 0 31
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 4
30102: PUSH
30103: LD_INT 4
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 5
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 5
30132: PUSH
30133: LD_INT 5
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 6
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 6
30162: PUSH
30163: LD_INT 6
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30194: LD_ADDR_VAR 0 32
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 5
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 6
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 6
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 5
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30337: LD_ADDR_VAR 0 33
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: NEG
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 5
30423: NEG
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: NEG
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 5
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 6
30457: NEG
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 6
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30492: LD_ADDR_VAR 0 34
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 3
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 3
30511: NEG
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 3
30523: NEG
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: LD_INT 4
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 4
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: LD_INT 4
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: NEG
30572: PUSH
30573: LD_INT 5
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 5
30583: NEG
30584: PUSH
30585: LD_INT 4
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 5
30595: NEG
30596: PUSH
30597: LD_INT 5
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 5
30607: NEG
30608: PUSH
30609: LD_INT 6
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 6
30619: NEG
30620: PUSH
30621: LD_INT 5
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 6
30631: NEG
30632: PUSH
30633: LD_INT 6
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30655: LD_ADDR_VAR 0 41
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30699: LD_ADDR_VAR 0 42
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30740: LD_ADDR_VAR 0 43
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30780: LD_ADDR_VAR 0 44
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30821: LD_ADDR_VAR 0 45
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30865: LD_ADDR_VAR 0 46
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30911: LD_ADDR_VAR 0 47
30915: PUSH
30916: LD_INT 2
30918: NEG
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30944: LD_ADDR_VAR 0 48
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30975: LD_ADDR_VAR 0 49
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31004: LD_ADDR_VAR 0 50
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31033: LD_ADDR_VAR 0 51
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31064: LD_ADDR_VAR 0 52
31068: PUSH
31069: LD_INT 3
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 3
31083: NEG
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31097: LD_ADDR_VAR 0 53
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31141: LD_ADDR_VAR 0 54
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31182: LD_ADDR_VAR 0 55
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 3
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31222: LD_ADDR_VAR 0 56
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31263: LD_ADDR_VAR 0 57
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31307: LD_ADDR_VAR 0 58
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: LD_INT 3
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 3
31326: NEG
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31353: LD_ADDR_VAR 0 59
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31397: LD_ADDR_VAR 0 60
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31438: LD_ADDR_VAR 0 61
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31478: LD_ADDR_VAR 0 62
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31519: LD_ADDR_VAR 0 63
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31563: LD_ADDR_VAR 0 64
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: NEG
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// end ; 2 :
31609: GO 34875
31611: LD_INT 2
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 34874
31619: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31620: LD_ADDR_VAR 0 29
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 4
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 4
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 4
31959: NEG
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 4
31970: NEG
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 4
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 4
32005: NEG
32006: PUSH
32007: LD_INT 4
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: NEG
32018: PUSH
32019: LD_INT 5
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 3
32029: NEG
32030: PUSH
32031: LD_INT 4
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 3
32041: NEG
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 4
32053: NEG
32054: PUSH
32055: LD_INT 3
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 5
32065: NEG
32066: PUSH
32067: LD_INT 4
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 5
32077: NEG
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: LD_INT 5
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: NEG
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32158: LD_ADDR_VAR 0 30
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 5
32185: PUSH
32186: LD_INT 4
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: LD_INT 5
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 5
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 4
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 4
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 4
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 5
32404: NEG
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: NEG
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 5
32427: NEG
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: NEG
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 4
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 4
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 5
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 3
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 4
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 5
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 3
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 5
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32705: LD_ADDR_VAR 0 31
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: LD_INT 4
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 5
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 4
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 5
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 3
32816: NEG
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 4
32872: NEG
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: NEG
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: LD_INT 5
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: LD_INT 4
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: LD_INT 3
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: LD_INT 4
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 5
32979: NEG
32980: PUSH
32981: LD_INT 5
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 5
33003: NEG
33004: PUSH
33005: LD_INT 3
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 3
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: LD_INT 4
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 4
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 5
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33255: LD_ADDR_VAR 0 32
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 4
33273: NEG
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: NEG
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 5
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: LD_INT 4
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 3
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 4
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 4
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 5
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 4
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 4
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 5
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 5
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 4
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 4
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 5
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 4
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 5
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33802: LD_ADDR_VAR 0 33
33806: PUSH
33807: LD_INT 4
33809: NEG
33810: PUSH
33811: LD_INT 4
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: LD_INT 5
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 4
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: LD_INT 3
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 5
33869: NEG
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 5
33881: NEG
33882: PUSH
33883: LD_INT 5
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 5
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 5
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 4
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 4
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 5
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 5
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 4
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 4
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 4
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 5
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 4
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 5
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34340: LD_ADDR_VAR 0 34
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 4
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 5
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 4
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 5
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 3
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 4
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: LD_INT 4
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 5
34562: PUSH
34563: LD_INT 4
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: LD_INT 5
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 5
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: LD_INT 5
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 3
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: LD_INT 4
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 4
34725: NEG
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 4
34736: NEG
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 3
34748: NEG
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 4
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 5
34781: NEG
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 5
34792: NEG
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 5
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
// end ; end ;
34872: GO 34875
34874: POP
// case btype of b_depot , b_warehouse :
34875: LD_VAR 0 1
34879: PUSH
34880: LD_INT 0
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34894
34886: LD_INT 1
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 35095
34894: POP
// case nation of nation_american :
34895: LD_VAR 0 5
34899: PUSH
34900: LD_INT 1
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34964
34908: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34909: LD_ADDR_VAR 0 9
34913: PUSH
34914: LD_VAR 0 11
34918: PUSH
34919: LD_VAR 0 12
34923: PUSH
34924: LD_VAR 0 13
34928: PUSH
34929: LD_VAR 0 14
34933: PUSH
34934: LD_VAR 0 15
34938: PUSH
34939: LD_VAR 0 16
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: PUSH
34952: LD_VAR 0 4
34956: PUSH
34957: LD_INT 1
34959: PLUS
34960: ARRAY
34961: ST_TO_ADDR
34962: GO 35093
34964: LD_INT 2
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 35028
34972: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34973: LD_ADDR_VAR 0 9
34977: PUSH
34978: LD_VAR 0 17
34982: PUSH
34983: LD_VAR 0 18
34987: PUSH
34988: LD_VAR 0 19
34992: PUSH
34993: LD_VAR 0 20
34997: PUSH
34998: LD_VAR 0 21
35002: PUSH
35003: LD_VAR 0 22
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: PUSH
35016: LD_VAR 0 4
35020: PUSH
35021: LD_INT 1
35023: PLUS
35024: ARRAY
35025: ST_TO_ADDR
35026: GO 35093
35028: LD_INT 3
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35092
35036: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_VAR 0 23
35046: PUSH
35047: LD_VAR 0 24
35051: PUSH
35052: LD_VAR 0 25
35056: PUSH
35057: LD_VAR 0 26
35061: PUSH
35062: LD_VAR 0 27
35066: PUSH
35067: LD_VAR 0 28
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: PUSH
35080: LD_VAR 0 4
35084: PUSH
35085: LD_INT 1
35087: PLUS
35088: ARRAY
35089: ST_TO_ADDR
35090: GO 35093
35092: POP
35093: GO 35648
35095: LD_INT 2
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35109
35101: LD_INT 3
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35165
35109: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_VAR 0 29
35119: PUSH
35120: LD_VAR 0 30
35124: PUSH
35125: LD_VAR 0 31
35129: PUSH
35130: LD_VAR 0 32
35134: PUSH
35135: LD_VAR 0 33
35139: PUSH
35140: LD_VAR 0 34
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: PUSH
35153: LD_VAR 0 4
35157: PUSH
35158: LD_INT 1
35160: PLUS
35161: ARRAY
35162: ST_TO_ADDR
35163: GO 35648
35165: LD_INT 16
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35227
35171: LD_INT 17
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35227
35177: LD_INT 18
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35227
35183: LD_INT 19
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35227
35189: LD_INT 22
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35227
35195: LD_INT 20
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35227
35201: LD_INT 21
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35227
35207: LD_INT 23
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35227
35213: LD_INT 24
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35227
35219: LD_INT 25
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35283
35227: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 35
35237: PUSH
35238: LD_VAR 0 36
35242: PUSH
35243: LD_VAR 0 37
35247: PUSH
35248: LD_VAR 0 38
35252: PUSH
35253: LD_VAR 0 39
35257: PUSH
35258: LD_VAR 0 40
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: ARRAY
35280: ST_TO_ADDR
35281: GO 35648
35283: LD_INT 6
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35339
35289: LD_INT 7
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35339
35295: LD_INT 8
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35339
35301: LD_INT 13
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35339
35307: LD_INT 12
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35339
35313: LD_INT 15
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35339
35319: LD_INT 11
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35339
35325: LD_INT 14
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35339
35331: LD_INT 10
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35395
35339: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: LD_VAR 0 41
35349: PUSH
35350: LD_VAR 0 42
35354: PUSH
35355: LD_VAR 0 43
35359: PUSH
35360: LD_VAR 0 44
35364: PUSH
35365: LD_VAR 0 45
35369: PUSH
35370: LD_VAR 0 46
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: LD_VAR 0 4
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: ARRAY
35392: ST_TO_ADDR
35393: GO 35648
35395: LD_INT 36
35397: DOUBLE
35398: EQUAL
35399: IFTRUE 35403
35401: GO 35459
35403: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_VAR 0 47
35413: PUSH
35414: LD_VAR 0 48
35418: PUSH
35419: LD_VAR 0 49
35423: PUSH
35424: LD_VAR 0 50
35428: PUSH
35429: LD_VAR 0 51
35433: PUSH
35434: LD_VAR 0 52
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: PUSH
35447: LD_VAR 0 4
35451: PUSH
35452: LD_INT 1
35454: PLUS
35455: ARRAY
35456: ST_TO_ADDR
35457: GO 35648
35459: LD_INT 4
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35485
35465: LD_INT 5
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35485
35471: LD_INT 34
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35485
35477: LD_INT 37
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35485
35483: GO 35541
35485: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_VAR 0 53
35495: PUSH
35496: LD_VAR 0 54
35500: PUSH
35501: LD_VAR 0 55
35505: PUSH
35506: LD_VAR 0 56
35510: PUSH
35511: LD_VAR 0 57
35515: PUSH
35516: LD_VAR 0 58
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: PUSH
35529: LD_VAR 0 4
35533: PUSH
35534: LD_INT 1
35536: PLUS
35537: ARRAY
35538: ST_TO_ADDR
35539: GO 35648
35541: LD_INT 31
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35591
35547: LD_INT 32
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35591
35553: LD_INT 33
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35591
35559: LD_INT 27
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35591
35565: LD_INT 26
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35591
35571: LD_INT 28
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35591
35577: LD_INT 29
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35591
35583: LD_INT 30
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35647
35591: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35592: LD_ADDR_VAR 0 9
35596: PUSH
35597: LD_VAR 0 59
35601: PUSH
35602: LD_VAR 0 60
35606: PUSH
35607: LD_VAR 0 61
35611: PUSH
35612: LD_VAR 0 62
35616: PUSH
35617: LD_VAR 0 63
35621: PUSH
35622: LD_VAR 0 64
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: LD_VAR 0 4
35639: PUSH
35640: LD_INT 1
35642: PLUS
35643: ARRAY
35644: ST_TO_ADDR
35645: GO 35648
35647: POP
// temp_list2 = [ ] ;
35648: LD_ADDR_VAR 0 10
35652: PUSH
35653: EMPTY
35654: ST_TO_ADDR
// for i in temp_list do
35655: LD_ADDR_VAR 0 8
35659: PUSH
35660: LD_VAR 0 9
35664: PUSH
35665: FOR_IN
35666: IFFALSE 35718
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35668: LD_ADDR_VAR 0 10
35672: PUSH
35673: LD_VAR 0 10
35677: PUSH
35678: LD_VAR 0 8
35682: PUSH
35683: LD_INT 1
35685: ARRAY
35686: PUSH
35687: LD_VAR 0 2
35691: PLUS
35692: PUSH
35693: LD_VAR 0 8
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PUSH
35702: LD_VAR 0 3
35706: PLUS
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: ADD
35715: ST_TO_ADDR
35716: GO 35665
35718: POP
35719: POP
// result = temp_list2 ;
35720: LD_ADDR_VAR 0 7
35724: PUSH
35725: LD_VAR 0 10
35729: ST_TO_ADDR
// end ;
35730: LD_VAR 0 7
35734: RET
// export function EnemyInRange ( unit , dist ) ; begin
35735: LD_INT 0
35737: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35738: LD_ADDR_VAR 0 3
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 255
35752: PPUSH
35753: LD_VAR 0 1
35757: PPUSH
35758: CALL_OW 250
35762: PPUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: CALL_OW 251
35772: PPUSH
35773: LD_VAR 0 2
35777: PPUSH
35778: CALL 9108 0 4
35782: PUSH
35783: LD_INT 4
35785: ARRAY
35786: ST_TO_ADDR
// end ;
35787: LD_VAR 0 3
35791: RET
// export function PlayerSeeMe ( unit ) ; begin
35792: LD_INT 0
35794: PPUSH
// result := See ( your_side , unit ) ;
35795: LD_ADDR_VAR 0 2
35799: PUSH
35800: LD_OWVAR 2
35804: PPUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 292
35814: ST_TO_ADDR
// end ;
35815: LD_VAR 0 2
35819: RET
// export function ReverseDir ( unit ) ; begin
35820: LD_INT 0
35822: PPUSH
// if not unit then
35823: LD_VAR 0 1
35827: NOT
35828: IFFALSE 35832
// exit ;
35830: GO 35855
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35832: LD_ADDR_VAR 0 2
35836: PUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 254
35846: PUSH
35847: LD_INT 3
35849: PLUS
35850: PUSH
35851: LD_INT 6
35853: MOD
35854: ST_TO_ADDR
// end ;
35855: LD_VAR 0 2
35859: RET
// export function ReverseArray ( array ) ; var i ; begin
35860: LD_INT 0
35862: PPUSH
35863: PPUSH
// if not array then
35864: LD_VAR 0 1
35868: NOT
35869: IFFALSE 35873
// exit ;
35871: GO 35928
// result := [ ] ;
35873: LD_ADDR_VAR 0 2
35877: PUSH
35878: EMPTY
35879: ST_TO_ADDR
// for i := array downto 1 do
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: DOUBLE
35886: LD_VAR 0 1
35890: INC
35891: ST_TO_ADDR
35892: LD_INT 1
35894: PUSH
35895: FOR_DOWNTO
35896: IFFALSE 35926
// result := Join ( result , array [ i ] ) ;
35898: LD_ADDR_VAR 0 2
35902: PUSH
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 1
35912: PUSH
35913: LD_VAR 0 3
35917: ARRAY
35918: PPUSH
35919: CALL 40593 0 2
35923: ST_TO_ADDR
35924: GO 35895
35926: POP
35927: POP
// end ;
35928: LD_VAR 0 2
35932: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35933: LD_INT 0
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
// if not unit or not hexes then
35941: LD_VAR 0 1
35945: NOT
35946: PUSH
35947: LD_VAR 0 2
35951: NOT
35952: OR
35953: IFFALSE 35957
// exit ;
35955: GO 36080
// dist := 9999 ;
35957: LD_ADDR_VAR 0 5
35961: PUSH
35962: LD_INT 9999
35964: ST_TO_ADDR
// for i = 1 to hexes do
35965: LD_ADDR_VAR 0 4
35969: PUSH
35970: DOUBLE
35971: LD_INT 1
35973: DEC
35974: ST_TO_ADDR
35975: LD_VAR 0 2
35979: PUSH
35980: FOR_TO
35981: IFFALSE 36068
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35983: LD_ADDR_VAR 0 6
35987: PUSH
35988: LD_VAR 0 1
35992: PPUSH
35993: LD_VAR 0 2
35997: PUSH
35998: LD_VAR 0 4
36002: ARRAY
36003: PUSH
36004: LD_INT 1
36006: ARRAY
36007: PPUSH
36008: LD_VAR 0 2
36012: PUSH
36013: LD_VAR 0 4
36017: ARRAY
36018: PUSH
36019: LD_INT 2
36021: ARRAY
36022: PPUSH
36023: CALL_OW 297
36027: ST_TO_ADDR
// if tdist < dist then
36028: LD_VAR 0 6
36032: PUSH
36033: LD_VAR 0 5
36037: LESS
36038: IFFALSE 36066
// begin hex := hexes [ i ] ;
36040: LD_ADDR_VAR 0 8
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_VAR 0 4
36054: ARRAY
36055: ST_TO_ADDR
// dist := tdist ;
36056: LD_ADDR_VAR 0 5
36060: PUSH
36061: LD_VAR 0 6
36065: ST_TO_ADDR
// end ; end ;
36066: GO 35980
36068: POP
36069: POP
// result := hex ;
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_VAR 0 8
36079: ST_TO_ADDR
// end ;
36080: LD_VAR 0 3
36084: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36085: LD_INT 0
36087: PPUSH
36088: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36089: LD_VAR 0 1
36093: NOT
36094: PUSH
36095: LD_VAR 0 1
36099: PUSH
36100: LD_INT 21
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 23
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PPUSH
36124: CALL_OW 69
36128: IN
36129: NOT
36130: OR
36131: IFFALSE 36135
// exit ;
36133: GO 36182
// for i = 1 to 3 do
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: DOUBLE
36141: LD_INT 1
36143: DEC
36144: ST_TO_ADDR
36145: LD_INT 3
36147: PUSH
36148: FOR_TO
36149: IFFALSE 36180
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 250
36160: PPUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 251
36170: PPUSH
36171: LD_INT 1
36173: PPUSH
36174: CALL_OW 453
36178: GO 36148
36180: POP
36181: POP
// end ;
36182: LD_VAR 0 2
36186: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
// if not unit or not enemy_unit then
36195: LD_VAR 0 1
36199: NOT
36200: PUSH
36201: LD_VAR 0 2
36205: NOT
36206: OR
36207: IFFALSE 36211
// exit ;
36209: GO 36678
// if GetLives ( i ) < 250 then
36211: LD_VAR 0 4
36215: PPUSH
36216: CALL_OW 256
36220: PUSH
36221: LD_INT 250
36223: LESS
36224: IFFALSE 36237
// begin ComAutodestruct ( i ) ;
36226: LD_VAR 0 4
36230: PPUSH
36231: CALL 36085 0 1
// exit ;
36235: GO 36678
// end ; x := GetX ( enemy_unit ) ;
36237: LD_ADDR_VAR 0 7
36241: PUSH
36242: LD_VAR 0 2
36246: PPUSH
36247: CALL_OW 250
36251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36252: LD_ADDR_VAR 0 8
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: CALL_OW 251
36266: ST_TO_ADDR
// if not x or not y then
36267: LD_VAR 0 7
36271: NOT
36272: PUSH
36273: LD_VAR 0 8
36277: NOT
36278: OR
36279: IFFALSE 36283
// exit ;
36281: GO 36678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36283: LD_ADDR_VAR 0 6
36287: PUSH
36288: LD_VAR 0 7
36292: PPUSH
36293: LD_INT 0
36295: PPUSH
36296: LD_INT 4
36298: PPUSH
36299: CALL_OW 272
36303: PUSH
36304: LD_VAR 0 8
36308: PPUSH
36309: LD_INT 0
36311: PPUSH
36312: LD_INT 4
36314: PPUSH
36315: CALL_OW 273
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_VAR 0 7
36328: PPUSH
36329: LD_INT 1
36331: PPUSH
36332: LD_INT 4
36334: PPUSH
36335: CALL_OW 272
36339: PUSH
36340: LD_VAR 0 8
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: LD_INT 4
36350: PPUSH
36351: CALL_OW 273
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 7
36364: PPUSH
36365: LD_INT 2
36367: PPUSH
36368: LD_INT 4
36370: PPUSH
36371: CALL_OW 272
36375: PUSH
36376: LD_VAR 0 8
36380: PPUSH
36381: LD_INT 2
36383: PPUSH
36384: LD_INT 4
36386: PPUSH
36387: CALL_OW 273
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 7
36400: PPUSH
36401: LD_INT 3
36403: PPUSH
36404: LD_INT 4
36406: PPUSH
36407: CALL_OW 272
36411: PUSH
36412: LD_VAR 0 8
36416: PPUSH
36417: LD_INT 3
36419: PPUSH
36420: LD_INT 4
36422: PPUSH
36423: CALL_OW 273
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_VAR 0 7
36436: PPUSH
36437: LD_INT 4
36439: PPUSH
36440: LD_INT 4
36442: PPUSH
36443: CALL_OW 272
36447: PUSH
36448: LD_VAR 0 8
36452: PPUSH
36453: LD_INT 4
36455: PPUSH
36456: LD_INT 4
36458: PPUSH
36459: CALL_OW 273
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_INT 5
36475: PPUSH
36476: LD_INT 4
36478: PPUSH
36479: CALL_OW 272
36483: PUSH
36484: LD_VAR 0 8
36488: PPUSH
36489: LD_INT 5
36491: PPUSH
36492: LD_INT 4
36494: PPUSH
36495: CALL_OW 273
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// for i = tmp downto 1 do
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: DOUBLE
36518: LD_VAR 0 6
36522: INC
36523: ST_TO_ADDR
36524: LD_INT 1
36526: PUSH
36527: FOR_DOWNTO
36528: IFFALSE 36629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36530: LD_VAR 0 6
36534: PUSH
36535: LD_VAR 0 4
36539: ARRAY
36540: PUSH
36541: LD_INT 1
36543: ARRAY
36544: PPUSH
36545: LD_VAR 0 6
36549: PUSH
36550: LD_VAR 0 4
36554: ARRAY
36555: PUSH
36556: LD_INT 2
36558: ARRAY
36559: PPUSH
36560: CALL_OW 488
36564: NOT
36565: PUSH
36566: LD_VAR 0 6
36570: PUSH
36571: LD_VAR 0 4
36575: ARRAY
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: PPUSH
36581: LD_VAR 0 6
36585: PUSH
36586: LD_VAR 0 4
36590: ARRAY
36591: PUSH
36592: LD_INT 2
36594: ARRAY
36595: PPUSH
36596: CALL_OW 428
36600: PUSH
36601: LD_INT 0
36603: NONEQUAL
36604: OR
36605: IFFALSE 36627
// tmp := Delete ( tmp , i ) ;
36607: LD_ADDR_VAR 0 6
36611: PUSH
36612: LD_VAR 0 6
36616: PPUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: CALL_OW 3
36626: ST_TO_ADDR
36627: GO 36527
36629: POP
36630: POP
// j := GetClosestHex ( unit , tmp ) ;
36631: LD_ADDR_VAR 0 5
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: LD_VAR 0 6
36645: PPUSH
36646: CALL 35933 0 2
36650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_VAR 0 5
36660: PUSH
36661: LD_INT 1
36663: ARRAY
36664: PPUSH
36665: LD_VAR 0 5
36669: PUSH
36670: LD_INT 2
36672: ARRAY
36673: PPUSH
36674: CALL_OW 111
// end ;
36678: LD_VAR 0 3
36682: RET
// export function PrepareApemanSoldier ( ) ; begin
36683: LD_INT 0
36685: PPUSH
// uc_nation := 0 ;
36686: LD_ADDR_OWVAR 21
36690: PUSH
36691: LD_INT 0
36693: ST_TO_ADDR
// hc_sex := sex_male ;
36694: LD_ADDR_OWVAR 27
36698: PUSH
36699: LD_INT 1
36701: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36702: LD_ADDR_OWVAR 28
36706: PUSH
36707: LD_INT 15
36709: ST_TO_ADDR
// hc_gallery :=  ;
36710: LD_ADDR_OWVAR 33
36714: PUSH
36715: LD_STRING 
36717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36718: LD_ADDR_OWVAR 31
36722: PUSH
36723: LD_INT 0
36725: PPUSH
36726: LD_INT 3
36728: PPUSH
36729: CALL_OW 12
36733: PUSH
36734: LD_INT 0
36736: PPUSH
36737: LD_INT 3
36739: PPUSH
36740: CALL_OW 12
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// end ;
36757: LD_VAR 0 1
36761: RET
// export function PrepareApemanEngineer ( ) ; begin
36762: LD_INT 0
36764: PPUSH
// uc_nation := 0 ;
36765: LD_ADDR_OWVAR 21
36769: PUSH
36770: LD_INT 0
36772: ST_TO_ADDR
// hc_sex := sex_male ;
36773: LD_ADDR_OWVAR 27
36777: PUSH
36778: LD_INT 1
36780: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36781: LD_ADDR_OWVAR 28
36785: PUSH
36786: LD_INT 16
36788: ST_TO_ADDR
// hc_gallery :=  ;
36789: LD_ADDR_OWVAR 33
36793: PUSH
36794: LD_STRING 
36796: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36797: LD_ADDR_OWVAR 31
36801: PUSH
36802: LD_INT 0
36804: PPUSH
36805: LD_INT 3
36807: PPUSH
36808: CALL_OW 12
36812: PUSH
36813: LD_INT 0
36815: PPUSH
36816: LD_INT 3
36818: PPUSH
36819: CALL_OW 12
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: ST_TO_ADDR
// end ;
36836: LD_VAR 0 1
36840: RET
// export function PrepareApeman ( agressivity ) ; begin
36841: LD_INT 0
36843: PPUSH
// uc_side := 0 ;
36844: LD_ADDR_OWVAR 20
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// uc_nation := 0 ;
36852: LD_ADDR_OWVAR 21
36856: PUSH
36857: LD_INT 0
36859: ST_TO_ADDR
// hc_sex := sex_male ;
36860: LD_ADDR_OWVAR 27
36864: PUSH
36865: LD_INT 1
36867: ST_TO_ADDR
// hc_class := class_apeman ;
36868: LD_ADDR_OWVAR 28
36872: PUSH
36873: LD_INT 12
36875: ST_TO_ADDR
// hc_gallery :=  ;
36876: LD_ADDR_OWVAR 33
36880: PUSH
36881: LD_STRING 
36883: ST_TO_ADDR
// if agressivity = 0 then
36884: LD_VAR 0 1
36888: PUSH
36889: LD_INT 0
36891: EQUAL
36892: IFFALSE 36904
// hc_agressivity := 0 else
36894: LD_ADDR_OWVAR 35
36898: PUSH
36899: LD_INT 0
36901: ST_TO_ADDR
36902: GO 36925
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36904: LD_ADDR_OWVAR 35
36908: PUSH
36909: LD_VAR 0 1
36913: NEG
36914: PPUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 12
36924: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36925: LD_ADDR_OWVAR 31
36929: PUSH
36930: LD_INT 0
36932: PPUSH
36933: LD_INT 3
36935: PPUSH
36936: CALL_OW 12
36940: PUSH
36941: LD_INT 0
36943: PPUSH
36944: LD_INT 3
36946: PPUSH
36947: CALL_OW 12
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// end ;
36964: LD_VAR 0 2
36968: RET
// export function PrepareTiger ( agressivity ) ; begin
36969: LD_INT 0
36971: PPUSH
// uc_side := 0 ;
36972: LD_ADDR_OWVAR 20
36976: PUSH
36977: LD_INT 0
36979: ST_TO_ADDR
// uc_nation := 0 ;
36980: LD_ADDR_OWVAR 21
36984: PUSH
36985: LD_INT 0
36987: ST_TO_ADDR
// hc_class := class_tiger ;
36988: LD_ADDR_OWVAR 28
36992: PUSH
36993: LD_INT 14
36995: ST_TO_ADDR
// hc_gallery :=  ;
36996: LD_ADDR_OWVAR 33
37000: PUSH
37001: LD_STRING 
37003: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37004: LD_ADDR_OWVAR 35
37008: PUSH
37009: LD_VAR 0 1
37013: NEG
37014: PPUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 12
37024: ST_TO_ADDR
// end ;
37025: LD_VAR 0 2
37029: RET
// export function PrepareEnchidna ( ) ; begin
37030: LD_INT 0
37032: PPUSH
// uc_side := 0 ;
37033: LD_ADDR_OWVAR 20
37037: PUSH
37038: LD_INT 0
37040: ST_TO_ADDR
// uc_nation := 0 ;
37041: LD_ADDR_OWVAR 21
37045: PUSH
37046: LD_INT 0
37048: ST_TO_ADDR
// hc_class := class_baggie ;
37049: LD_ADDR_OWVAR 28
37053: PUSH
37054: LD_INT 13
37056: ST_TO_ADDR
// hc_gallery :=  ;
37057: LD_ADDR_OWVAR 33
37061: PUSH
37062: LD_STRING 
37064: ST_TO_ADDR
// end ;
37065: LD_VAR 0 1
37069: RET
// export function PrepareFrog ( ) ; begin
37070: LD_INT 0
37072: PPUSH
// uc_side := 0 ;
37073: LD_ADDR_OWVAR 20
37077: PUSH
37078: LD_INT 0
37080: ST_TO_ADDR
// uc_nation := 0 ;
37081: LD_ADDR_OWVAR 21
37085: PUSH
37086: LD_INT 0
37088: ST_TO_ADDR
// hc_class := class_frog ;
37089: LD_ADDR_OWVAR 28
37093: PUSH
37094: LD_INT 19
37096: ST_TO_ADDR
// hc_gallery :=  ;
37097: LD_ADDR_OWVAR 33
37101: PUSH
37102: LD_STRING 
37104: ST_TO_ADDR
// end ;
37105: LD_VAR 0 1
37109: RET
// export function PrepareFish ( ) ; begin
37110: LD_INT 0
37112: PPUSH
// uc_side := 0 ;
37113: LD_ADDR_OWVAR 20
37117: PUSH
37118: LD_INT 0
37120: ST_TO_ADDR
// uc_nation := 0 ;
37121: LD_ADDR_OWVAR 21
37125: PUSH
37126: LD_INT 0
37128: ST_TO_ADDR
// hc_class := class_fish ;
37129: LD_ADDR_OWVAR 28
37133: PUSH
37134: LD_INT 20
37136: ST_TO_ADDR
// hc_gallery :=  ;
37137: LD_ADDR_OWVAR 33
37141: PUSH
37142: LD_STRING 
37144: ST_TO_ADDR
// end ;
37145: LD_VAR 0 1
37149: RET
// export function PrepareBird ( ) ; begin
37150: LD_INT 0
37152: PPUSH
// uc_side := 0 ;
37153: LD_ADDR_OWVAR 20
37157: PUSH
37158: LD_INT 0
37160: ST_TO_ADDR
// uc_nation := 0 ;
37161: LD_ADDR_OWVAR 21
37165: PUSH
37166: LD_INT 0
37168: ST_TO_ADDR
// hc_class := class_phororhacos ;
37169: LD_ADDR_OWVAR 28
37173: PUSH
37174: LD_INT 18
37176: ST_TO_ADDR
// hc_gallery :=  ;
37177: LD_ADDR_OWVAR 33
37181: PUSH
37182: LD_STRING 
37184: ST_TO_ADDR
// end ;
37185: LD_VAR 0 1
37189: RET
// export function PrepareHorse ( ) ; begin
37190: LD_INT 0
37192: PPUSH
// uc_side := 0 ;
37193: LD_ADDR_OWVAR 20
37197: PUSH
37198: LD_INT 0
37200: ST_TO_ADDR
// uc_nation := 0 ;
37201: LD_ADDR_OWVAR 21
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// hc_class := class_horse ;
37209: LD_ADDR_OWVAR 28
37213: PUSH
37214: LD_INT 21
37216: ST_TO_ADDR
// hc_gallery :=  ;
37217: LD_ADDR_OWVAR 33
37221: PUSH
37222: LD_STRING 
37224: ST_TO_ADDR
// end ;
37225: LD_VAR 0 1
37229: RET
// export function PrepareMastodont ( ) ; begin
37230: LD_INT 0
37232: PPUSH
// uc_side := 0 ;
37233: LD_ADDR_OWVAR 20
37237: PUSH
37238: LD_INT 0
37240: ST_TO_ADDR
// uc_nation := 0 ;
37241: LD_ADDR_OWVAR 21
37245: PUSH
37246: LD_INT 0
37248: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37249: LD_ADDR_OWVAR 37
37253: PUSH
37254: LD_INT 31
37256: ST_TO_ADDR
// vc_control := control_rider ;
37257: LD_ADDR_OWVAR 38
37261: PUSH
37262: LD_INT 4
37264: ST_TO_ADDR
// end ;
37265: LD_VAR 0 1
37269: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
37274: PPUSH
// uc_side = 0 ;
37275: LD_ADDR_OWVAR 20
37279: PUSH
37280: LD_INT 0
37282: ST_TO_ADDR
// uc_nation = 0 ;
37283: LD_ADDR_OWVAR 21
37287: PUSH
37288: LD_INT 0
37290: ST_TO_ADDR
// InitHc_All ( ) ;
37291: CALL_OW 584
// InitVc ;
37295: CALL_OW 20
// if mastodonts then
37299: LD_VAR 0 6
37303: IFFALSE 37370
// for i = 1 to mastodonts do
37305: LD_ADDR_VAR 0 11
37309: PUSH
37310: DOUBLE
37311: LD_INT 1
37313: DEC
37314: ST_TO_ADDR
37315: LD_VAR 0 6
37319: PUSH
37320: FOR_TO
37321: IFFALSE 37368
// begin vc_chassis := 31 ;
37323: LD_ADDR_OWVAR 37
37327: PUSH
37328: LD_INT 31
37330: ST_TO_ADDR
// vc_control := control_rider ;
37331: LD_ADDR_OWVAR 38
37335: PUSH
37336: LD_INT 4
37338: ST_TO_ADDR
// animal := CreateVehicle ;
37339: LD_ADDR_VAR 0 12
37343: PUSH
37344: CALL_OW 45
37348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37349: LD_VAR 0 12
37353: PPUSH
37354: LD_VAR 0 8
37358: PPUSH
37359: LD_INT 0
37361: PPUSH
37362: CALL 39498 0 3
// end ;
37366: GO 37320
37368: POP
37369: POP
// if horses then
37370: LD_VAR 0 5
37374: IFFALSE 37441
// for i = 1 to horses do
37376: LD_ADDR_VAR 0 11
37380: PUSH
37381: DOUBLE
37382: LD_INT 1
37384: DEC
37385: ST_TO_ADDR
37386: LD_VAR 0 5
37390: PUSH
37391: FOR_TO
37392: IFFALSE 37439
// begin hc_class := 21 ;
37394: LD_ADDR_OWVAR 28
37398: PUSH
37399: LD_INT 21
37401: ST_TO_ADDR
// hc_gallery :=  ;
37402: LD_ADDR_OWVAR 33
37406: PUSH
37407: LD_STRING 
37409: ST_TO_ADDR
// animal := CreateHuman ;
37410: LD_ADDR_VAR 0 12
37414: PUSH
37415: CALL_OW 44
37419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37420: LD_VAR 0 12
37424: PPUSH
37425: LD_VAR 0 8
37429: PPUSH
37430: LD_INT 0
37432: PPUSH
37433: CALL 39498 0 3
// end ;
37437: GO 37391
37439: POP
37440: POP
// if birds then
37441: LD_VAR 0 1
37445: IFFALSE 37512
// for i = 1 to birds do
37447: LD_ADDR_VAR 0 11
37451: PUSH
37452: DOUBLE
37453: LD_INT 1
37455: DEC
37456: ST_TO_ADDR
37457: LD_VAR 0 1
37461: PUSH
37462: FOR_TO
37463: IFFALSE 37510
// begin hc_class := 18 ;
37465: LD_ADDR_OWVAR 28
37469: PUSH
37470: LD_INT 18
37472: ST_TO_ADDR
// hc_gallery =  ;
37473: LD_ADDR_OWVAR 33
37477: PUSH
37478: LD_STRING 
37480: ST_TO_ADDR
// animal := CreateHuman ;
37481: LD_ADDR_VAR 0 12
37485: PUSH
37486: CALL_OW 44
37490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37491: LD_VAR 0 12
37495: PPUSH
37496: LD_VAR 0 8
37500: PPUSH
37501: LD_INT 0
37503: PPUSH
37504: CALL 39498 0 3
// end ;
37508: GO 37462
37510: POP
37511: POP
// if tigers then
37512: LD_VAR 0 2
37516: IFFALSE 37600
// for i = 1 to tigers do
37518: LD_ADDR_VAR 0 11
37522: PUSH
37523: DOUBLE
37524: LD_INT 1
37526: DEC
37527: ST_TO_ADDR
37528: LD_VAR 0 2
37532: PUSH
37533: FOR_TO
37534: IFFALSE 37598
// begin hc_class = class_tiger ;
37536: LD_ADDR_OWVAR 28
37540: PUSH
37541: LD_INT 14
37543: ST_TO_ADDR
// hc_gallery =  ;
37544: LD_ADDR_OWVAR 33
37548: PUSH
37549: LD_STRING 
37551: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37552: LD_ADDR_OWVAR 35
37556: PUSH
37557: LD_INT 7
37559: NEG
37560: PPUSH
37561: LD_INT 7
37563: PPUSH
37564: CALL_OW 12
37568: ST_TO_ADDR
// animal := CreateHuman ;
37569: LD_ADDR_VAR 0 12
37573: PUSH
37574: CALL_OW 44
37578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37579: LD_VAR 0 12
37583: PPUSH
37584: LD_VAR 0 8
37588: PPUSH
37589: LD_INT 0
37591: PPUSH
37592: CALL 39498 0 3
// end ;
37596: GO 37533
37598: POP
37599: POP
// if apemans then
37600: LD_VAR 0 3
37604: IFFALSE 37727
// for i = 1 to apemans do
37606: LD_ADDR_VAR 0 11
37610: PUSH
37611: DOUBLE
37612: LD_INT 1
37614: DEC
37615: ST_TO_ADDR
37616: LD_VAR 0 3
37620: PUSH
37621: FOR_TO
37622: IFFALSE 37725
// begin hc_class = class_apeman ;
37624: LD_ADDR_OWVAR 28
37628: PUSH
37629: LD_INT 12
37631: ST_TO_ADDR
// hc_gallery =  ;
37632: LD_ADDR_OWVAR 33
37636: PUSH
37637: LD_STRING 
37639: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37640: LD_ADDR_OWVAR 35
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PPUSH
37649: LD_INT 2
37651: PPUSH
37652: CALL_OW 12
37656: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37657: LD_ADDR_OWVAR 31
37661: PUSH
37662: LD_INT 1
37664: PPUSH
37665: LD_INT 3
37667: PPUSH
37668: CALL_OW 12
37672: PUSH
37673: LD_INT 1
37675: PPUSH
37676: LD_INT 3
37678: PPUSH
37679: CALL_OW 12
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// animal := CreateHuman ;
37696: LD_ADDR_VAR 0 12
37700: PUSH
37701: CALL_OW 44
37705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37706: LD_VAR 0 12
37710: PPUSH
37711: LD_VAR 0 8
37715: PPUSH
37716: LD_INT 0
37718: PPUSH
37719: CALL 39498 0 3
// end ;
37723: GO 37621
37725: POP
37726: POP
// if enchidnas then
37727: LD_VAR 0 4
37731: IFFALSE 37798
// for i = 1 to enchidnas do
37733: LD_ADDR_VAR 0 11
37737: PUSH
37738: DOUBLE
37739: LD_INT 1
37741: DEC
37742: ST_TO_ADDR
37743: LD_VAR 0 4
37747: PUSH
37748: FOR_TO
37749: IFFALSE 37796
// begin hc_class = 13 ;
37751: LD_ADDR_OWVAR 28
37755: PUSH
37756: LD_INT 13
37758: ST_TO_ADDR
// hc_gallery =  ;
37759: LD_ADDR_OWVAR 33
37763: PUSH
37764: LD_STRING 
37766: ST_TO_ADDR
// animal := CreateHuman ;
37767: LD_ADDR_VAR 0 12
37771: PUSH
37772: CALL_OW 44
37776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37777: LD_VAR 0 12
37781: PPUSH
37782: LD_VAR 0 8
37786: PPUSH
37787: LD_INT 0
37789: PPUSH
37790: CALL 39498 0 3
// end ;
37794: GO 37748
37796: POP
37797: POP
// if fishes then
37798: LD_VAR 0 7
37802: IFFALSE 37869
// for i = 1 to fishes do
37804: LD_ADDR_VAR 0 11
37808: PUSH
37809: DOUBLE
37810: LD_INT 1
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 7
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37867
// begin hc_class = 20 ;
37822: LD_ADDR_OWVAR 28
37826: PUSH
37827: LD_INT 20
37829: ST_TO_ADDR
// hc_gallery =  ;
37830: LD_ADDR_OWVAR 33
37834: PUSH
37835: LD_STRING 
37837: ST_TO_ADDR
// animal := CreateHuman ;
37838: LD_ADDR_VAR 0 12
37842: PUSH
37843: CALL_OW 44
37847: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37848: LD_VAR 0 12
37852: PPUSH
37853: LD_VAR 0 9
37857: PPUSH
37858: LD_INT 0
37860: PPUSH
37861: CALL 39498 0 3
// end ;
37865: GO 37819
37867: POP
37868: POP
// end ;
37869: LD_VAR 0 10
37873: RET
// export function WantHeal ( sci , unit ) ; begin
37874: LD_INT 0
37876: PPUSH
// if GetTaskList ( sci ) > 0 then
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 437
37886: PUSH
37887: LD_INT 0
37889: GREATER
37890: IFFALSE 37960
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 437
37901: PUSH
37902: LD_INT 1
37904: ARRAY
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: PUSH
37910: LD_STRING l
37912: EQUAL
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 437
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PUSH
37928: LD_INT 4
37930: ARRAY
37931: PUSH
37932: LD_VAR 0 2
37936: EQUAL
37937: AND
37938: IFFALSE 37950
// result := true else
37940: LD_ADDR_VAR 0 3
37944: PUSH
37945: LD_INT 1
37947: ST_TO_ADDR
37948: GO 37958
// result := false ;
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 0
37957: ST_TO_ADDR
// end else
37958: GO 37968
// result := false ;
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_INT 0
37967: ST_TO_ADDR
// end ;
37968: LD_VAR 0 3
37972: RET
// export function HealTarget ( sci ) ; begin
37973: LD_INT 0
37975: PPUSH
// if not sci then
37976: LD_VAR 0 1
37980: NOT
37981: IFFALSE 37985
// exit ;
37983: GO 38050
// result := 0 ;
37985: LD_ADDR_VAR 0 2
37989: PUSH
37990: LD_INT 0
37992: ST_TO_ADDR
// if GetTaskList ( sci ) then
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 437
38002: IFFALSE 38050
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 437
38013: PUSH
38014: LD_INT 1
38016: ARRAY
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PUSH
38022: LD_STRING l
38024: EQUAL
38025: IFFALSE 38050
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38027: LD_ADDR_VAR 0 2
38031: PUSH
38032: LD_VAR 0 1
38036: PPUSH
38037: CALL_OW 437
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PUSH
38046: LD_INT 4
38048: ARRAY
38049: ST_TO_ADDR
// end ;
38050: LD_VAR 0 2
38054: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38055: LD_INT 0
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
// if not base_units then
38061: LD_VAR 0 1
38065: NOT
38066: IFFALSE 38070
// exit ;
38068: GO 38157
// result := false ;
38070: LD_ADDR_VAR 0 2
38074: PUSH
38075: LD_INT 0
38077: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38078: LD_ADDR_VAR 0 5
38082: PUSH
38083: LD_VAR 0 1
38087: PPUSH
38088: LD_INT 21
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 72
38102: ST_TO_ADDR
// if not tmp then
38103: LD_VAR 0 5
38107: NOT
38108: IFFALSE 38112
// exit ;
38110: GO 38157
// for i in tmp do
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_VAR 0 5
38121: PUSH
38122: FOR_IN
38123: IFFALSE 38155
// begin result := EnemyInRange ( i , 22 ) ;
38125: LD_ADDR_VAR 0 2
38129: PUSH
38130: LD_VAR 0 3
38134: PPUSH
38135: LD_INT 22
38137: PPUSH
38138: CALL 35735 0 2
38142: ST_TO_ADDR
// if result then
38143: LD_VAR 0 2
38147: IFFALSE 38153
// exit ;
38149: POP
38150: POP
38151: GO 38157
// end ;
38153: GO 38122
38155: POP
38156: POP
// end ;
38157: LD_VAR 0 2
38161: RET
// export function FilterByTag ( units , tag ) ; begin
38162: LD_INT 0
38164: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38165: LD_ADDR_VAR 0 3
38169: PUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: LD_INT 120
38177: PUSH
38178: LD_VAR 0 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PPUSH
38187: CALL_OW 72
38191: ST_TO_ADDR
// end ;
38192: LD_VAR 0 3
38196: RET
// export function IsDriver ( un ) ; begin
38197: LD_INT 0
38199: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38200: LD_ADDR_VAR 0 2
38204: PUSH
38205: LD_VAR 0 1
38209: PUSH
38210: LD_INT 55
38212: PUSH
38213: EMPTY
38214: LIST
38215: PPUSH
38216: CALL_OW 69
38220: IN
38221: ST_TO_ADDR
// end ;
38222: LD_VAR 0 2
38226: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38227: LD_INT 0
38229: PPUSH
38230: PPUSH
// list := [ ] ;
38231: LD_ADDR_VAR 0 5
38235: PUSH
38236: EMPTY
38237: ST_TO_ADDR
// case d of 0 :
38238: LD_VAR 0 3
38242: PUSH
38243: LD_INT 0
38245: DOUBLE
38246: EQUAL
38247: IFTRUE 38251
38249: GO 38384
38251: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: LD_VAR 0 1
38261: PUSH
38262: LD_INT 4
38264: MINUS
38265: PUSH
38266: LD_VAR 0 2
38270: PUSH
38271: LD_INT 4
38273: MINUS
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: PUSH
38283: LD_VAR 0 1
38287: PUSH
38288: LD_INT 3
38290: MINUS
38291: PUSH
38292: LD_VAR 0 2
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: PUSH
38305: LD_VAR 0 1
38309: PUSH
38310: LD_INT 4
38312: PLUS
38313: PUSH
38314: LD_VAR 0 2
38318: PUSH
38319: LD_INT 4
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: PUSH
38327: LD_VAR 0 1
38331: PUSH
38332: LD_INT 3
38334: PLUS
38335: PUSH
38336: LD_VAR 0 2
38340: PUSH
38341: LD_INT 3
38343: PLUS
38344: PUSH
38345: LD_INT 5
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: PUSH
38353: LD_VAR 0 1
38357: PUSH
38358: LD_VAR 0 2
38362: PUSH
38363: LD_INT 4
38365: PLUS
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: ST_TO_ADDR
// end ; 1 :
38382: GO 39082
38384: LD_INT 1
38386: DOUBLE
38387: EQUAL
38388: IFTRUE 38392
38390: GO 38525
38392: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_INT 4
38410: MINUS
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: LD_VAR 0 1
38424: PUSH
38425: LD_INT 3
38427: MINUS
38428: PUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_INT 3
38436: MINUS
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PUSH
38446: LD_VAR 0 1
38450: PUSH
38451: LD_INT 4
38453: MINUS
38454: PUSH
38455: LD_VAR 0 2
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: PUSH
38468: LD_VAR 0 1
38472: PUSH
38473: LD_VAR 0 2
38477: PUSH
38478: LD_INT 3
38480: PLUS
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: PUSH
38490: LD_VAR 0 1
38494: PUSH
38495: LD_INT 4
38497: PLUS
38498: PUSH
38499: LD_VAR 0 2
38503: PUSH
38504: LD_INT 4
38506: PLUS
38507: PUSH
38508: LD_INT 5
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// end ; 2 :
38523: GO 39082
38525: LD_INT 2
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 38662
38533: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38534: LD_ADDR_VAR 0 5
38538: PUSH
38539: LD_VAR 0 1
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_INT 3
38551: MINUS
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_INT 4
38568: PLUS
38569: PUSH
38570: LD_VAR 0 2
38574: PUSH
38575: LD_INT 4
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: LD_VAR 0 1
38587: PUSH
38588: LD_VAR 0 2
38592: PUSH
38593: LD_INT 4
38595: PLUS
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: PUSH
38605: LD_VAR 0 1
38609: PUSH
38610: LD_INT 3
38612: MINUS
38613: PUSH
38614: LD_VAR 0 2
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: PUSH
38627: LD_VAR 0 1
38631: PUSH
38632: LD_INT 4
38634: MINUS
38635: PUSH
38636: LD_VAR 0 2
38640: PUSH
38641: LD_INT 4
38643: MINUS
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// end ; 3 :
38660: GO 39082
38662: LD_INT 3
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38803
38670: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 1
38680: PUSH
38681: LD_INT 3
38683: PLUS
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 4
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: LD_VAR 0 1
38702: PUSH
38703: LD_INT 4
38705: PLUS
38706: PUSH
38707: LD_VAR 0 2
38711: PUSH
38712: LD_INT 4
38714: PLUS
38715: PUSH
38716: LD_INT 5
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 4
38731: MINUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_VAR 0 2
38755: PUSH
38756: LD_INT 4
38758: MINUS
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: LD_INT 3
38775: MINUS
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 3
38784: MINUS
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
// end ; 4 :
38801: GO 39082
38803: LD_INT 4
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38944
38811: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38812: LD_ADDR_VAR 0 5
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_INT 4
38829: PLUS
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_INT 3
38846: PLUS
38847: PUSH
38848: LD_VAR 0 2
38852: PUSH
38853: LD_INT 3
38855: PLUS
38856: PUSH
38857: LD_INT 5
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_INT 4
38872: PLUS
38873: PUSH
38874: LD_VAR 0 2
38878: PUSH
38879: LD_INT 4
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 3
38899: MINUS
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_INT 4
38916: MINUS
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 4
38925: MINUS
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// end ; 5 :
38942: GO 39082
38944: LD_INT 5
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 39081
38952: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38953: LD_ADDR_VAR 0 5
38957: PUSH
38958: LD_VAR 0 1
38962: PUSH
38963: LD_INT 4
38965: MINUS
38966: PUSH
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 4
38992: MINUS
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 4
39009: PLUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 4
39018: PLUS
39019: PUSH
39020: LD_INT 5
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: LD_INT 3
39035: PLUS
39036: PUSH
39037: LD_VAR 0 2
39041: PUSH
39042: LD_INT 4
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 3
39062: PLUS
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// end ; end ;
39079: GO 39082
39081: POP
// result := list ;
39082: LD_ADDR_VAR 0 4
39086: PUSH
39087: LD_VAR 0 5
39091: ST_TO_ADDR
// end ;
39092: LD_VAR 0 4
39096: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
39101: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39102: LD_VAR 0 1
39106: NOT
39107: PUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: IN
39131: NOT
39132: OR
39133: IFFALSE 39137
// exit ;
39135: GO 39220
// tmp := [ ] ;
39137: LD_ADDR_VAR 0 5
39141: PUSH
39142: EMPTY
39143: ST_TO_ADDR
// for i in units do
39144: LD_ADDR_VAR 0 4
39148: PUSH
39149: LD_VAR 0 1
39153: PUSH
39154: FOR_IN
39155: IFFALSE 39189
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39157: LD_ADDR_VAR 0 5
39161: PUSH
39162: LD_VAR 0 5
39166: PPUSH
39167: LD_VAR 0 4
39171: PPUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: CALL_OW 259
39181: PPUSH
39182: CALL 40593 0 2
39186: ST_TO_ADDR
39187: GO 39154
39189: POP
39190: POP
// if not tmp then
39191: LD_VAR 0 5
39195: NOT
39196: IFFALSE 39200
// exit ;
39198: GO 39220
// result := SortListByListDesc ( units , tmp ) ;
39200: LD_ADDR_VAR 0 3
39204: PUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_VAR 0 5
39214: PPUSH
39215: CALL_OW 77
39219: ST_TO_ADDR
// end ;
39220: LD_VAR 0 3
39224: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39225: LD_INT 0
39227: PPUSH
39228: PPUSH
39229: PPUSH
// result := false ;
39230: LD_ADDR_VAR 0 3
39234: PUSH
39235: LD_INT 0
39237: ST_TO_ADDR
// if not building then
39238: LD_VAR 0 2
39242: NOT
39243: IFFALSE 39247
// exit ;
39245: GO 39385
// x := GetX ( building ) ;
39247: LD_ADDR_VAR 0 4
39251: PUSH
39252: LD_VAR 0 2
39256: PPUSH
39257: CALL_OW 250
39261: ST_TO_ADDR
// y := GetY ( building ) ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_VAR 0 2
39271: PPUSH
39272: CALL_OW 251
39276: ST_TO_ADDR
// if not x or not y then
39277: LD_VAR 0 4
39281: NOT
39282: PUSH
39283: LD_VAR 0 5
39287: NOT
39288: OR
39289: IFFALSE 39293
// exit ;
39291: GO 39385
// if GetTaskList ( unit ) then
39293: LD_VAR 0 1
39297: PPUSH
39298: CALL_OW 437
39302: IFFALSE 39385
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39304: LD_STRING e
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 437
39316: PUSH
39317: LD_INT 1
39319: ARRAY
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: EQUAL
39325: PUSH
39326: LD_VAR 0 4
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 437
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PUSH
39345: LD_INT 2
39347: ARRAY
39348: EQUAL
39349: AND
39350: PUSH
39351: LD_VAR 0 5
39355: PUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 437
39365: PUSH
39366: LD_INT 1
39368: ARRAY
39369: PUSH
39370: LD_INT 3
39372: ARRAY
39373: EQUAL
39374: AND
39375: IFFALSE 39385
// result := true end ;
39377: LD_ADDR_VAR 0 3
39381: PUSH
39382: LD_INT 1
39384: ST_TO_ADDR
// end ;
39385: LD_VAR 0 3
39389: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39390: LD_INT 0
39392: PPUSH
// result := false ;
39393: LD_ADDR_VAR 0 4
39397: PUSH
39398: LD_INT 0
39400: ST_TO_ADDR
// if GetTaskList ( unit ) then
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 437
39410: IFFALSE 39493
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39412: LD_STRING M
39414: PUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 437
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: EQUAL
39433: PUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 437
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: EQUAL
39457: AND
39458: PUSH
39459: LD_VAR 0 3
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 437
39473: PUSH
39474: LD_INT 1
39476: ARRAY
39477: PUSH
39478: LD_INT 3
39480: ARRAY
39481: EQUAL
39482: AND
39483: IFFALSE 39493
// result := true ;
39485: LD_ADDR_VAR 0 4
39489: PUSH
39490: LD_INT 1
39492: ST_TO_ADDR
// end ; end ;
39493: LD_VAR 0 4
39497: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39498: LD_INT 0
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
// if not unit or not area then
39504: LD_VAR 0 1
39508: NOT
39509: PUSH
39510: LD_VAR 0 2
39514: NOT
39515: OR
39516: IFFALSE 39520
// exit ;
39518: GO 39696
// tmp := AreaToList ( area , i ) ;
39520: LD_ADDR_VAR 0 6
39524: PUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: LD_VAR 0 5
39534: PPUSH
39535: CALL_OW 517
39539: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39540: LD_ADDR_VAR 0 5
39544: PUSH
39545: DOUBLE
39546: LD_INT 1
39548: DEC
39549: ST_TO_ADDR
39550: LD_VAR 0 6
39554: PUSH
39555: LD_INT 1
39557: ARRAY
39558: PUSH
39559: FOR_TO
39560: IFFALSE 39694
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39562: LD_ADDR_VAR 0 7
39566: PUSH
39567: LD_VAR 0 6
39571: PUSH
39572: LD_INT 1
39574: ARRAY
39575: PUSH
39576: LD_VAR 0 5
39580: ARRAY
39581: PUSH
39582: LD_VAR 0 6
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: PUSH
39591: LD_VAR 0 5
39595: ARRAY
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39601: LD_INT 92
39603: PUSH
39604: LD_VAR 0 7
39608: PUSH
39609: LD_INT 1
39611: ARRAY
39612: PUSH
39613: LD_VAR 0 7
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: PPUSH
39631: CALL_OW 69
39635: PUSH
39636: LD_INT 0
39638: EQUAL
39639: IFFALSE 39692
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39641: LD_VAR 0 1
39645: PPUSH
39646: LD_VAR 0 7
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: PPUSH
39655: LD_VAR 0 7
39659: PUSH
39660: LD_INT 2
39662: ARRAY
39663: PPUSH
39664: LD_VAR 0 3
39668: PPUSH
39669: CALL_OW 48
// result := IsPlaced ( unit ) ;
39673: LD_ADDR_VAR 0 4
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 305
39687: ST_TO_ADDR
// exit ;
39688: POP
39689: POP
39690: GO 39696
// end ; end ;
39692: GO 39559
39694: POP
39695: POP
// end ;
39696: LD_VAR 0 4
39700: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39701: LD_INT 0
39703: PPUSH
39704: PPUSH
39705: PPUSH
// if not side or side > 8 then
39706: LD_VAR 0 1
39710: NOT
39711: PUSH
39712: LD_VAR 0 1
39716: PUSH
39717: LD_INT 8
39719: GREATER
39720: OR
39721: IFFALSE 39725
// exit ;
39723: GO 39912
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39725: LD_ADDR_VAR 0 4
39729: PUSH
39730: LD_INT 22
39732: PUSH
39733: LD_VAR 0 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 21
39744: PUSH
39745: LD_INT 3
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PPUSH
39756: CALL_OW 69
39760: ST_TO_ADDR
// if not tmp then
39761: LD_VAR 0 4
39765: NOT
39766: IFFALSE 39770
// exit ;
39768: GO 39912
// enable_addtolog := true ;
39770: LD_ADDR_OWVAR 81
39774: PUSH
39775: LD_INT 1
39777: ST_TO_ADDR
// AddToLog ( [ ) ;
39778: LD_STRING [
39780: PPUSH
39781: CALL_OW 561
// for i in tmp do
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_VAR 0 4
39794: PUSH
39795: FOR_IN
39796: IFFALSE 39903
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39798: LD_STRING [
39800: PUSH
39801: LD_VAR 0 3
39805: PPUSH
39806: CALL_OW 266
39810: STR
39811: PUSH
39812: LD_STRING , 
39814: STR
39815: PUSH
39816: LD_VAR 0 3
39820: PPUSH
39821: CALL_OW 250
39825: STR
39826: PUSH
39827: LD_STRING , 
39829: STR
39830: PUSH
39831: LD_VAR 0 3
39835: PPUSH
39836: CALL_OW 251
39840: STR
39841: PUSH
39842: LD_STRING , 
39844: STR
39845: PUSH
39846: LD_VAR 0 3
39850: PPUSH
39851: CALL_OW 254
39855: STR
39856: PUSH
39857: LD_STRING , 
39859: STR
39860: PUSH
39861: LD_VAR 0 3
39865: PPUSH
39866: LD_INT 1
39868: PPUSH
39869: CALL_OW 268
39873: STR
39874: PUSH
39875: LD_STRING , 
39877: STR
39878: PUSH
39879: LD_VAR 0 3
39883: PPUSH
39884: LD_INT 2
39886: PPUSH
39887: CALL_OW 268
39891: STR
39892: PUSH
39893: LD_STRING ],
39895: STR
39896: PPUSH
39897: CALL_OW 561
// end ;
39901: GO 39795
39903: POP
39904: POP
// AddToLog ( ]; ) ;
39905: LD_STRING ];
39907: PPUSH
39908: CALL_OW 561
// end ;
39912: LD_VAR 0 2
39916: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39917: LD_INT 0
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
// if not area or not rate or not max then
39924: LD_VAR 0 1
39928: NOT
39929: PUSH
39930: LD_VAR 0 2
39934: NOT
39935: OR
39936: PUSH
39937: LD_VAR 0 4
39941: NOT
39942: OR
39943: IFFALSE 39947
// exit ;
39945: GO 40136
// while 1 do
39947: LD_INT 1
39949: IFFALSE 40136
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39951: LD_ADDR_VAR 0 9
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: LD_INT 1
39963: PPUSH
39964: CALL_OW 287
39968: PUSH
39969: LD_INT 10
39971: MUL
39972: ST_TO_ADDR
// r := rate / 10 ;
39973: LD_ADDR_VAR 0 7
39977: PUSH
39978: LD_VAR 0 2
39982: PUSH
39983: LD_INT 10
39985: DIVREAL
39986: ST_TO_ADDR
// time := 1 1$00 ;
39987: LD_ADDR_VAR 0 8
39991: PUSH
39992: LD_INT 2100
39994: ST_TO_ADDR
// if amount < min then
39995: LD_VAR 0 9
39999: PUSH
40000: LD_VAR 0 3
40004: LESS
40005: IFFALSE 40023
// r := r * 2 else
40007: LD_ADDR_VAR 0 7
40011: PUSH
40012: LD_VAR 0 7
40016: PUSH
40017: LD_INT 2
40019: MUL
40020: ST_TO_ADDR
40021: GO 40049
// if amount > max then
40023: LD_VAR 0 9
40027: PUSH
40028: LD_VAR 0 4
40032: GREATER
40033: IFFALSE 40049
// r := r / 2 ;
40035: LD_ADDR_VAR 0 7
40039: PUSH
40040: LD_VAR 0 7
40044: PUSH
40045: LD_INT 2
40047: DIVREAL
40048: ST_TO_ADDR
// time := time / r ;
40049: LD_ADDR_VAR 0 8
40053: PUSH
40054: LD_VAR 0 8
40058: PUSH
40059: LD_VAR 0 7
40063: DIVREAL
40064: ST_TO_ADDR
// if time < 0 then
40065: LD_VAR 0 8
40069: PUSH
40070: LD_INT 0
40072: LESS
40073: IFFALSE 40090
// time := time * - 1 ;
40075: LD_ADDR_VAR 0 8
40079: PUSH
40080: LD_VAR 0 8
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: MUL
40089: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40090: LD_VAR 0 8
40094: PUSH
40095: LD_INT 35
40097: PPUSH
40098: LD_INT 875
40100: PPUSH
40101: CALL_OW 12
40105: PLUS
40106: PPUSH
40107: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40111: LD_INT 1
40113: PPUSH
40114: LD_INT 5
40116: PPUSH
40117: CALL_OW 12
40121: PPUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: LD_INT 1
40129: PPUSH
40130: CALL_OW 55
// end ;
40134: GO 39947
// end ;
40136: LD_VAR 0 5
40140: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40141: LD_INT 0
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
// if not turrets or not factories then
40151: LD_VAR 0 1
40155: NOT
40156: PUSH
40157: LD_VAR 0 2
40161: NOT
40162: OR
40163: IFFALSE 40167
// exit ;
40165: GO 40474
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40167: LD_ADDR_VAR 0 10
40171: PUSH
40172: LD_INT 5
40174: PUSH
40175: LD_INT 6
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 4
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 3
40194: PUSH
40195: LD_INT 5
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 24
40209: PUSH
40210: LD_INT 25
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 23
40219: PUSH
40220: LD_INT 27
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 42
40233: PUSH
40234: LD_INT 43
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 44
40243: PUSH
40244: LD_INT 46
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 45
40253: PUSH
40254: LD_INT 47
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
// result := [ ] ;
40271: LD_ADDR_VAR 0 3
40275: PUSH
40276: EMPTY
40277: ST_TO_ADDR
// for i in turrets do
40278: LD_ADDR_VAR 0 4
40282: PUSH
40283: LD_VAR 0 1
40287: PUSH
40288: FOR_IN
40289: IFFALSE 40472
// begin nat := GetNation ( i ) ;
40291: LD_ADDR_VAR 0 7
40295: PUSH
40296: LD_VAR 0 4
40300: PPUSH
40301: CALL_OW 248
40305: ST_TO_ADDR
// weapon := 0 ;
40306: LD_ADDR_VAR 0 8
40310: PUSH
40311: LD_INT 0
40313: ST_TO_ADDR
// if not nat then
40314: LD_VAR 0 7
40318: NOT
40319: IFFALSE 40323
// continue ;
40321: GO 40288
// for j in list [ nat ] do
40323: LD_ADDR_VAR 0 5
40327: PUSH
40328: LD_VAR 0 10
40332: PUSH
40333: LD_VAR 0 7
40337: ARRAY
40338: PUSH
40339: FOR_IN
40340: IFFALSE 40381
// if GetBWeapon ( i ) = j [ 1 ] then
40342: LD_VAR 0 4
40346: PPUSH
40347: CALL_OW 269
40351: PUSH
40352: LD_VAR 0 5
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: EQUAL
40361: IFFALSE 40379
// begin weapon := j [ 2 ] ;
40363: LD_ADDR_VAR 0 8
40367: PUSH
40368: LD_VAR 0 5
40372: PUSH
40373: LD_INT 2
40375: ARRAY
40376: ST_TO_ADDR
// break ;
40377: GO 40381
// end ;
40379: GO 40339
40381: POP
40382: POP
// if not weapon then
40383: LD_VAR 0 8
40387: NOT
40388: IFFALSE 40392
// continue ;
40390: GO 40288
// for k in factories do
40392: LD_ADDR_VAR 0 6
40396: PUSH
40397: LD_VAR 0 2
40401: PUSH
40402: FOR_IN
40403: IFFALSE 40468
// begin weapons := AvailableWeaponList ( k ) ;
40405: LD_ADDR_VAR 0 9
40409: PUSH
40410: LD_VAR 0 6
40414: PPUSH
40415: CALL_OW 478
40419: ST_TO_ADDR
// if not weapons then
40420: LD_VAR 0 9
40424: NOT
40425: IFFALSE 40429
// continue ;
40427: GO 40402
// if weapon in weapons then
40429: LD_VAR 0 8
40433: PUSH
40434: LD_VAR 0 9
40438: IN
40439: IFFALSE 40466
// begin result := [ i , weapon ] ;
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_VAR 0 4
40450: PUSH
40451: LD_VAR 0 8
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: ST_TO_ADDR
// exit ;
40460: POP
40461: POP
40462: POP
40463: POP
40464: GO 40474
// end ; end ;
40466: GO 40402
40468: POP
40469: POP
// end ;
40470: GO 40288
40472: POP
40473: POP
// end ;
40474: LD_VAR 0 3
40478: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40479: LD_INT 0
40481: PPUSH
// if not side or side > 8 then
40482: LD_VAR 0 3
40486: NOT
40487: PUSH
40488: LD_VAR 0 3
40492: PUSH
40493: LD_INT 8
40495: GREATER
40496: OR
40497: IFFALSE 40501
// exit ;
40499: GO 40560
// if not range then
40501: LD_VAR 0 4
40505: NOT
40506: IFFALSE 40517
// range := - 12 ;
40508: LD_ADDR_VAR 0 4
40512: PUSH
40513: LD_INT 12
40515: NEG
40516: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_VAR 0 2
40526: PPUSH
40527: LD_VAR 0 3
40531: PPUSH
40532: LD_VAR 0 4
40536: PPUSH
40537: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40541: LD_VAR 0 1
40545: PPUSH
40546: LD_VAR 0 2
40550: PPUSH
40551: LD_VAR 0 3
40555: PPUSH
40556: CALL_OW 331
// end ;
40560: LD_VAR 0 5
40564: RET
// export function Video ( mode ) ; begin
40565: LD_INT 0
40567: PPUSH
// ingame_video = mode ;
40568: LD_ADDR_OWVAR 52
40572: PUSH
40573: LD_VAR 0 1
40577: ST_TO_ADDR
// interface_hidden = mode ;
40578: LD_ADDR_OWVAR 54
40582: PUSH
40583: LD_VAR 0 1
40587: ST_TO_ADDR
// end ;
40588: LD_VAR 0 2
40592: RET
// export function Join ( array , element ) ; begin
40593: LD_INT 0
40595: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40596: LD_ADDR_VAR 0 3
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: LD_VAR 0 1
40610: PUSH
40611: LD_INT 1
40613: PLUS
40614: PPUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: CALL_OW 1
40624: ST_TO_ADDR
// end ;
40625: LD_VAR 0 3
40629: RET
// export function JoinUnion ( array , element ) ; begin
40630: LD_INT 0
40632: PPUSH
// result := array union element ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 1
40642: PUSH
40643: LD_VAR 0 2
40647: UNION
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 3
40653: RET
// export function GetBehemoths ( side ) ; begin
40654: LD_INT 0
40656: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40657: LD_ADDR_VAR 0 2
40661: PUSH
40662: LD_INT 22
40664: PUSH
40665: LD_VAR 0 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 31
40676: PUSH
40677: LD_INT 25
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 69
40692: ST_TO_ADDR
// end ;
40693: LD_VAR 0 2
40697: RET
// export function Shuffle ( array ) ; var i , index ; begin
40698: LD_INT 0
40700: PPUSH
40701: PPUSH
40702: PPUSH
// result := [ ] ;
40703: LD_ADDR_VAR 0 2
40707: PUSH
40708: EMPTY
40709: ST_TO_ADDR
// if not array then
40710: LD_VAR 0 1
40714: NOT
40715: IFFALSE 40719
// exit ;
40717: GO 40818
// Randomize ;
40719: CALL_OW 10
// for i = array downto 1 do
40723: LD_ADDR_VAR 0 3
40727: PUSH
40728: DOUBLE
40729: LD_VAR 0 1
40733: INC
40734: ST_TO_ADDR
40735: LD_INT 1
40737: PUSH
40738: FOR_DOWNTO
40739: IFFALSE 40816
// begin index := rand ( 1 , array ) ;
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_INT 1
40748: PPUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 12
40758: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40759: LD_ADDR_VAR 0 2
40763: PUSH
40764: LD_VAR 0 2
40768: PPUSH
40769: LD_VAR 0 2
40773: PUSH
40774: LD_INT 1
40776: PLUS
40777: PPUSH
40778: LD_VAR 0 1
40782: PUSH
40783: LD_VAR 0 4
40787: ARRAY
40788: PPUSH
40789: CALL_OW 2
40793: ST_TO_ADDR
// array := Delete ( array , index ) ;
40794: LD_ADDR_VAR 0 1
40798: PUSH
40799: LD_VAR 0 1
40803: PPUSH
40804: LD_VAR 0 4
40808: PPUSH
40809: CALL_OW 3
40813: ST_TO_ADDR
// end ;
40814: GO 40738
40816: POP
40817: POP
// end ;
40818: LD_VAR 0 2
40822: RET
// export function GetBaseMaterials ( base ) ; begin
40823: LD_INT 0
40825: PPUSH
// result := [ 0 , 0 , 0 ] ;
40826: LD_ADDR_VAR 0 2
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// if not base then
40845: LD_VAR 0 1
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 40903
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40854: LD_ADDR_VAR 0 2
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_INT 1
40866: PPUSH
40867: CALL_OW 275
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: LD_INT 2
40879: PPUSH
40880: CALL_OW 275
40884: PUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: LD_INT 3
40892: PPUSH
40893: CALL_OW 275
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// end ;
40903: LD_VAR 0 2
40907: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
// result := array ;
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_VAR 0 1
40921: ST_TO_ADDR
// if size >= result then
40922: LD_VAR 0 2
40926: PUSH
40927: LD_VAR 0 3
40931: GREATEREQUAL
40932: IFFALSE 40936
// exit ;
40934: GO 40986
// if size then
40936: LD_VAR 0 2
40940: IFFALSE 40986
// for i := array downto size do
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: DOUBLE
40948: LD_VAR 0 1
40952: INC
40953: ST_TO_ADDR
40954: LD_VAR 0 2
40958: PUSH
40959: FOR_DOWNTO
40960: IFFALSE 40984
// result := Delete ( result , result ) ;
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_VAR 0 3
40971: PPUSH
40972: LD_VAR 0 3
40976: PPUSH
40977: CALL_OW 3
40981: ST_TO_ADDR
40982: GO 40959
40984: POP
40985: POP
// end ;
40986: LD_VAR 0 3
40990: RET
// export function ComExit ( unit ) ; var tmp ; begin
40991: LD_INT 0
40993: PPUSH
40994: PPUSH
// if not IsInUnit ( unit ) then
40995: LD_VAR 0 1
40999: PPUSH
41000: CALL_OW 310
41004: NOT
41005: IFFALSE 41009
// exit ;
41007: GO 41069
// tmp := IsInUnit ( unit ) ;
41009: LD_ADDR_VAR 0 3
41013: PUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: CALL_OW 310
41023: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41024: LD_VAR 0 3
41028: PPUSH
41029: CALL_OW 247
41033: PUSH
41034: LD_INT 2
41036: EQUAL
41037: IFFALSE 41050
// ComExitVehicle ( unit ) else
41039: LD_VAR 0 1
41043: PPUSH
41044: CALL_OW 121
41048: GO 41059
// ComExitBuilding ( unit ) ;
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 122
// result := tmp ;
41059: LD_ADDR_VAR 0 2
41063: PUSH
41064: LD_VAR 0 3
41068: ST_TO_ADDR
// end ;
41069: LD_VAR 0 2
41073: RET
// export function ComExitAll ( units ) ; var i ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
// if not units then
41078: LD_VAR 0 1
41082: NOT
41083: IFFALSE 41087
// exit ;
41085: GO 41113
// for i in units do
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 1
41096: PUSH
41097: FOR_IN
41098: IFFALSE 41111
// ComExit ( i ) ;
41100: LD_VAR 0 3
41104: PPUSH
41105: CALL 40991 0 1
41109: GO 41097
41111: POP
41112: POP
// end ;
41113: LD_VAR 0 2
41117: RET
// export function ResetHc ; begin
41118: LD_INT 0
41120: PPUSH
// InitHc ;
41121: CALL_OW 19
// hc_importance := 0 ;
41125: LD_ADDR_OWVAR 32
41129: PUSH
41130: LD_INT 0
41132: ST_TO_ADDR
// end ;
41133: LD_VAR 0 1
41137: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41138: LD_INT 0
41140: PPUSH
41141: PPUSH
41142: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41143: LD_ADDR_VAR 0 6
41147: PUSH
41148: LD_VAR 0 1
41152: PUSH
41153: LD_VAR 0 3
41157: PLUS
41158: PUSH
41159: LD_INT 2
41161: DIV
41162: ST_TO_ADDR
// if _x < 0 then
41163: LD_VAR 0 6
41167: PUSH
41168: LD_INT 0
41170: LESS
41171: IFFALSE 41188
// _x := _x * - 1 ;
41173: LD_ADDR_VAR 0 6
41177: PUSH
41178: LD_VAR 0 6
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: MUL
41187: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41188: LD_ADDR_VAR 0 7
41192: PUSH
41193: LD_VAR 0 2
41197: PUSH
41198: LD_VAR 0 4
41202: PLUS
41203: PUSH
41204: LD_INT 2
41206: DIV
41207: ST_TO_ADDR
// if _y < 0 then
41208: LD_VAR 0 7
41212: PUSH
41213: LD_INT 0
41215: LESS
41216: IFFALSE 41233
// _y := _y * - 1 ;
41218: LD_ADDR_VAR 0 7
41222: PUSH
41223: LD_VAR 0 7
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: MUL
41232: ST_TO_ADDR
// result := [ _x , _y ] ;
41233: LD_ADDR_VAR 0 5
41237: PUSH
41238: LD_VAR 0 6
41242: PUSH
41243: LD_VAR 0 7
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 5
41256: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
// task := GetTaskList ( unit ) ;
41263: LD_ADDR_VAR 0 7
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 437
41277: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41278: LD_VAR 0 7
41282: NOT
41283: PUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 2
41293: PPUSH
41294: CALL_OW 308
41298: NOT
41299: AND
41300: IFFALSE 41304
// exit ;
41302: GO 41422
// if IsInArea ( unit , area ) then
41304: LD_VAR 0 1
41308: PPUSH
41309: LD_VAR 0 2
41313: PPUSH
41314: CALL_OW 308
41318: IFFALSE 41336
// begin ComMoveToArea ( unit , goAway ) ;
41320: LD_VAR 0 1
41324: PPUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: CALL_OW 113
// exit ;
41334: GO 41422
// end ; if task [ 1 ] [ 1 ] <> M then
41336: LD_VAR 0 7
41340: PUSH
41341: LD_INT 1
41343: ARRAY
41344: PUSH
41345: LD_INT 1
41347: ARRAY
41348: PUSH
41349: LD_STRING M
41351: NONEQUAL
41352: IFFALSE 41356
// exit ;
41354: GO 41422
// x := task [ 1 ] [ 2 ] ;
41356: LD_ADDR_VAR 0 5
41360: PUSH
41361: LD_VAR 0 7
41365: PUSH
41366: LD_INT 1
41368: ARRAY
41369: PUSH
41370: LD_INT 2
41372: ARRAY
41373: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41374: LD_ADDR_VAR 0 6
41378: PUSH
41379: LD_VAR 0 7
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PUSH
41388: LD_INT 3
41390: ARRAY
41391: ST_TO_ADDR
// if InArea ( x , y , area ) then
41392: LD_VAR 0 5
41396: PPUSH
41397: LD_VAR 0 6
41401: PPUSH
41402: LD_VAR 0 2
41406: PPUSH
41407: CALL_OW 309
41411: IFFALSE 41422
// ComStop ( unit ) ;
41413: LD_VAR 0 1
41417: PPUSH
41418: CALL_OW 141
// end ;
41422: LD_VAR 0 4
41426: RET
// export function Abs ( value ) ; begin
41427: LD_INT 0
41429: PPUSH
// result := value ;
41430: LD_ADDR_VAR 0 2
41434: PUSH
41435: LD_VAR 0 1
41439: ST_TO_ADDR
// if value < 0 then
41440: LD_VAR 0 1
41444: PUSH
41445: LD_INT 0
41447: LESS
41448: IFFALSE 41465
// result := value * - 1 ;
41450: LD_ADDR_VAR 0 2
41454: PUSH
41455: LD_VAR 0 1
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: MUL
41464: ST_TO_ADDR
// end ;
41465: LD_VAR 0 2
41469: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41470: LD_INT 0
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
// if not unit or not building then
41480: LD_VAR 0 1
41484: NOT
41485: PUSH
41486: LD_VAR 0 2
41490: NOT
41491: OR
41492: IFFALSE 41496
// exit ;
41494: GO 41722
// x := GetX ( building ) ;
41496: LD_ADDR_VAR 0 4
41500: PUSH
41501: LD_VAR 0 2
41505: PPUSH
41506: CALL_OW 250
41510: ST_TO_ADDR
// y := GetY ( building ) ;
41511: LD_ADDR_VAR 0 6
41515: PUSH
41516: LD_VAR 0 2
41520: PPUSH
41521: CALL_OW 251
41525: ST_TO_ADDR
// d := GetDir ( building ) ;
41526: LD_ADDR_VAR 0 8
41530: PUSH
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 254
41540: ST_TO_ADDR
// r := 4 ;
41541: LD_ADDR_VAR 0 9
41545: PUSH
41546: LD_INT 4
41548: ST_TO_ADDR
// for i := 1 to 5 do
41549: LD_ADDR_VAR 0 10
41553: PUSH
41554: DOUBLE
41555: LD_INT 1
41557: DEC
41558: ST_TO_ADDR
41559: LD_INT 5
41561: PUSH
41562: FOR_TO
41563: IFFALSE 41720
// begin _x := ShiftX ( x , d , r + i ) ;
41565: LD_ADDR_VAR 0 5
41569: PUSH
41570: LD_VAR 0 4
41574: PPUSH
41575: LD_VAR 0 8
41579: PPUSH
41580: LD_VAR 0 9
41584: PUSH
41585: LD_VAR 0 10
41589: PLUS
41590: PPUSH
41591: CALL_OW 272
41595: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41596: LD_ADDR_VAR 0 7
41600: PUSH
41601: LD_VAR 0 6
41605: PPUSH
41606: LD_VAR 0 8
41610: PPUSH
41611: LD_VAR 0 9
41615: PUSH
41616: LD_VAR 0 10
41620: PLUS
41621: PPUSH
41622: CALL_OW 273
41626: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41627: LD_VAR 0 5
41631: PPUSH
41632: LD_VAR 0 7
41636: PPUSH
41637: CALL_OW 488
41641: PUSH
41642: LD_VAR 0 5
41646: PPUSH
41647: LD_VAR 0 7
41651: PPUSH
41652: CALL_OW 428
41656: PPUSH
41657: CALL_OW 247
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: IN
41672: NOT
41673: AND
41674: IFFALSE 41718
// begin ComMoveXY ( unit , _x , _y ) ;
41676: LD_VAR 0 1
41680: PPUSH
41681: LD_VAR 0 5
41685: PPUSH
41686: LD_VAR 0 7
41690: PPUSH
41691: CALL_OW 111
// result := [ _x , _y ] ;
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_VAR 0 5
41704: PUSH
41705: LD_VAR 0 7
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: ST_TO_ADDR
// exit ;
41714: POP
41715: POP
41716: GO 41722
// end ; end ;
41718: GO 41562
41720: POP
41721: POP
// end ;
41722: LD_VAR 0 3
41726: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41727: LD_INT 0
41729: PPUSH
41730: PPUSH
41731: PPUSH
// result := 0 ;
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 0
41739: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41740: LD_VAR 0 1
41744: PUSH
41745: LD_INT 0
41747: LESS
41748: PUSH
41749: LD_VAR 0 1
41753: PUSH
41754: LD_INT 8
41756: GREATER
41757: OR
41758: PUSH
41759: LD_VAR 0 2
41763: PUSH
41764: LD_INT 0
41766: LESS
41767: OR
41768: PUSH
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 8
41776: GREATER
41777: OR
41778: IFFALSE 41782
// exit ;
41780: GO 41857
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41782: LD_ADDR_VAR 0 4
41786: PUSH
41787: LD_INT 22
41789: PUSH
41790: LD_VAR 0 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PPUSH
41799: CALL_OW 69
41803: PUSH
41804: FOR_IN
41805: IFFALSE 41855
// begin un := UnitShoot ( i ) ;
41807: LD_ADDR_VAR 0 5
41811: PUSH
41812: LD_VAR 0 4
41816: PPUSH
41817: CALL_OW 504
41821: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41822: LD_VAR 0 5
41826: PPUSH
41827: CALL_OW 255
41831: PUSH
41832: LD_VAR 0 1
41836: EQUAL
41837: IFFALSE 41853
// begin result := un ;
41839: LD_ADDR_VAR 0 3
41843: PUSH
41844: LD_VAR 0 5
41848: ST_TO_ADDR
// exit ;
41849: POP
41850: POP
41851: GO 41857
// end ; end ;
41853: GO 41804
41855: POP
41856: POP
// end ;
41857: LD_VAR 0 3
41861: RET
// export function GetCargoBay ( units ) ; begin
41862: LD_INT 0
41864: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41865: LD_ADDR_VAR 0 2
41869: PUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_INT 2
41877: PUSH
41878: LD_INT 34
41880: PUSH
41881: LD_INT 12
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 34
41890: PUSH
41891: LD_INT 51
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 34
41900: PUSH
41901: LD_INT 32
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 34
41910: PUSH
41911: LD_INT 89
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: PPUSH
41925: CALL_OW 72
41929: ST_TO_ADDR
// end ;
41930: LD_VAR 0 2
41934: RET
// export function Negate ( value ) ; begin
41935: LD_INT 0
41937: PPUSH
// result := not value ;
41938: LD_ADDR_VAR 0 2
41942: PUSH
41943: LD_VAR 0 1
41947: NOT
41948: ST_TO_ADDR
// end ;
41949: LD_VAR 0 2
41953: RET
// export function Inc ( value ) ; begin
41954: LD_INT 0
41956: PPUSH
// result := value + 1 ;
41957: LD_ADDR_VAR 0 2
41961: PUSH
41962: LD_VAR 0 1
41966: PUSH
41967: LD_INT 1
41969: PLUS
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 2
41975: RET
// export function Dec ( value ) ; begin
41976: LD_INT 0
41978: PPUSH
// result := value - 1 ;
41979: LD_ADDR_VAR 0 2
41983: PUSH
41984: LD_VAR 0 1
41988: PUSH
41989: LD_INT 1
41991: MINUS
41992: ST_TO_ADDR
// end ;
41993: LD_VAR 0 2
41997: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41998: LD_INT 0
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42008: LD_VAR 0 1
42012: PPUSH
42013: LD_VAR 0 2
42017: PPUSH
42018: CALL_OW 488
42022: NOT
42023: PUSH
42024: LD_VAR 0 3
42028: PPUSH
42029: LD_VAR 0 4
42033: PPUSH
42034: CALL_OW 488
42038: NOT
42039: OR
42040: IFFALSE 42053
// begin result := - 1 ;
42042: LD_ADDR_VAR 0 5
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: ST_TO_ADDR
// exit ;
42051: GO 42288
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42053: LD_ADDR_VAR 0 12
42057: PUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: LD_VAR 0 2
42067: PPUSH
42068: LD_VAR 0 3
42072: PPUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: CALL 41138 0 4
42082: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42083: LD_ADDR_VAR 0 11
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: LD_VAR 0 2
42097: PPUSH
42098: LD_VAR 0 12
42102: PUSH
42103: LD_INT 1
42105: ARRAY
42106: PPUSH
42107: LD_VAR 0 12
42111: PUSH
42112: LD_INT 2
42114: ARRAY
42115: PPUSH
42116: CALL_OW 298
42120: ST_TO_ADDR
// distance := 9999 ;
42121: LD_ADDR_VAR 0 10
42125: PUSH
42126: LD_INT 9999
42128: ST_TO_ADDR
// for i := 0 to 5 do
42129: LD_ADDR_VAR 0 6
42133: PUSH
42134: DOUBLE
42135: LD_INT 0
42137: DEC
42138: ST_TO_ADDR
42139: LD_INT 5
42141: PUSH
42142: FOR_TO
42143: IFFALSE 42286
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42145: LD_ADDR_VAR 0 7
42149: PUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: LD_VAR 0 6
42159: PPUSH
42160: LD_VAR 0 11
42164: PPUSH
42165: CALL_OW 272
42169: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42170: LD_ADDR_VAR 0 8
42174: PUSH
42175: LD_VAR 0 2
42179: PPUSH
42180: LD_VAR 0 6
42184: PPUSH
42185: LD_VAR 0 11
42189: PPUSH
42190: CALL_OW 273
42194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42195: LD_VAR 0 7
42199: PPUSH
42200: LD_VAR 0 8
42204: PPUSH
42205: CALL_OW 488
42209: NOT
42210: IFFALSE 42214
// continue ;
42212: GO 42142
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42214: LD_ADDR_VAR 0 9
42218: PUSH
42219: LD_VAR 0 12
42223: PUSH
42224: LD_INT 1
42226: ARRAY
42227: PPUSH
42228: LD_VAR 0 12
42232: PUSH
42233: LD_INT 2
42235: ARRAY
42236: PPUSH
42237: LD_VAR 0 7
42241: PPUSH
42242: LD_VAR 0 8
42246: PPUSH
42247: CALL_OW 298
42251: ST_TO_ADDR
// if tmp < distance then
42252: LD_VAR 0 9
42256: PUSH
42257: LD_VAR 0 10
42261: LESS
42262: IFFALSE 42284
// begin result := i ;
42264: LD_ADDR_VAR 0 5
42268: PUSH
42269: LD_VAR 0 6
42273: ST_TO_ADDR
// distance := tmp ;
42274: LD_ADDR_VAR 0 10
42278: PUSH
42279: LD_VAR 0 9
42283: ST_TO_ADDR
// end ; end ;
42284: GO 42142
42286: POP
42287: POP
// end ;
42288: LD_VAR 0 5
42292: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42293: LD_INT 0
42295: PPUSH
42296: PPUSH
// if not driver or not IsInUnit ( driver ) then
42297: LD_VAR 0 1
42301: NOT
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: CALL_OW 310
42312: NOT
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 42408
// vehicle := IsInUnit ( driver ) ;
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 310
42332: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42333: LD_VAR 0 1
42337: PPUSH
42338: LD_STRING \
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: PUSH
42368: LD_STRING E
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_VAR 0 3
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PPUSH
42404: CALL_OW 446
// end ;
42408: LD_VAR 0 2
42412: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42413: LD_INT 0
42415: PPUSH
42416: PPUSH
// if not driver or not IsInUnit ( driver ) then
42417: LD_VAR 0 1
42421: NOT
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 310
42432: NOT
42433: OR
42434: IFFALSE 42438
// exit ;
42436: GO 42528
// vehicle := IsInUnit ( driver ) ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_VAR 0 1
42447: PPUSH
42448: CALL_OW 310
42452: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42453: LD_VAR 0 1
42457: PPUSH
42458: LD_STRING \
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: PUSH
42488: LD_STRING E
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_VAR 0 3
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PPUSH
42524: CALL_OW 447
// end ;
42528: LD_VAR 0 2
42532: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42533: LD_INT 0
42535: PPUSH
42536: PPUSH
42537: PPUSH
// tmp := [ ] ;
42538: LD_ADDR_VAR 0 5
42542: PUSH
42543: EMPTY
42544: ST_TO_ADDR
// for i in units do
42545: LD_ADDR_VAR 0 4
42549: PUSH
42550: LD_VAR 0 1
42554: PUSH
42555: FOR_IN
42556: IFFALSE 42594
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42558: LD_ADDR_VAR 0 5
42562: PUSH
42563: LD_VAR 0 5
42567: PPUSH
42568: LD_VAR 0 5
42572: PUSH
42573: LD_INT 1
42575: PLUS
42576: PPUSH
42577: LD_VAR 0 4
42581: PPUSH
42582: CALL_OW 256
42586: PPUSH
42587: CALL_OW 2
42591: ST_TO_ADDR
42592: GO 42555
42594: POP
42595: POP
// if not tmp then
42596: LD_VAR 0 5
42600: NOT
42601: IFFALSE 42605
// exit ;
42603: GO 42653
// if asc then
42605: LD_VAR 0 2
42609: IFFALSE 42633
// result := SortListByListAsc ( units , tmp ) else
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: LD_VAR 0 5
42625: PPUSH
42626: CALL_OW 76
42630: ST_TO_ADDR
42631: GO 42653
// result := SortListByListDesc ( units , tmp ) ;
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: LD_VAR 0 5
42647: PPUSH
42648: CALL_OW 77
42652: ST_TO_ADDR
// end ;
42653: LD_VAR 0 3
42657: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42658: LD_INT 0
42660: PPUSH
42661: PPUSH
// task := GetTaskList ( mech ) ;
42662: LD_ADDR_VAR 0 4
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 437
42676: ST_TO_ADDR
// if not task then
42677: LD_VAR 0 4
42681: NOT
42682: IFFALSE 42686
// exit ;
42684: GO 42728
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42686: LD_ADDR_VAR 0 3
42690: PUSH
42691: LD_VAR 0 4
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PUSH
42704: LD_STRING r
42706: EQUAL
42707: PUSH
42708: LD_VAR 0 4
42712: PUSH
42713: LD_INT 1
42715: ARRAY
42716: PUSH
42717: LD_INT 4
42719: ARRAY
42720: PUSH
42721: LD_VAR 0 2
42725: EQUAL
42726: AND
42727: ST_TO_ADDR
// end ;
42728: LD_VAR 0 3
42732: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42733: LD_INT 0
42735: PPUSH
// SetDir ( unit , d ) ;
42736: LD_VAR 0 1
42740: PPUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42750: LD_VAR 0 1
42754: PPUSH
42755: LD_VAR 0 2
42759: PPUSH
42760: LD_VAR 0 3
42764: PPUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: CALL_OW 48
// end ;
42774: LD_VAR 0 6
42778: RET
// export function ToNaturalNumber ( number ) ; begin
42779: LD_INT 0
42781: PPUSH
// result := number div 1 ;
42782: LD_ADDR_VAR 0 2
42786: PUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_INT 1
42794: DIV
42795: ST_TO_ADDR
// if number < 0 then
42796: LD_VAR 0 1
42800: PUSH
42801: LD_INT 0
42803: LESS
42804: IFFALSE 42814
// result := 0 ;
42806: LD_ADDR_VAR 0 2
42810: PUSH
42811: LD_INT 0
42813: ST_TO_ADDR
// end ;
42814: LD_VAR 0 2
42818: RET
// export function SortByClass ( units , class ) ; var un ; begin
42819: LD_INT 0
42821: PPUSH
42822: PPUSH
// if not units or not class then
42823: LD_VAR 0 1
42827: NOT
42828: PUSH
42829: LD_VAR 0 2
42833: NOT
42834: OR
42835: IFFALSE 42839
// exit ;
42837: GO 42934
// result := [ ] ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: EMPTY
42845: ST_TO_ADDR
// for un in units do
42846: LD_ADDR_VAR 0 4
42850: PUSH
42851: LD_VAR 0 1
42855: PUSH
42856: FOR_IN
42857: IFFALSE 42932
// if GetClass ( un ) = class then
42859: LD_VAR 0 4
42863: PPUSH
42864: CALL_OW 257
42868: PUSH
42869: LD_VAR 0 2
42873: EQUAL
42874: IFFALSE 42901
// result := Insert ( result , 1 , un ) else
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_VAR 0 3
42885: PPUSH
42886: LD_INT 1
42888: PPUSH
42889: LD_VAR 0 4
42893: PPUSH
42894: CALL_OW 2
42898: ST_TO_ADDR
42899: GO 42930
// result := Replace ( result , result + 1 , un ) ;
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_VAR 0 3
42910: PPUSH
42911: LD_VAR 0 3
42915: PUSH
42916: LD_INT 1
42918: PLUS
42919: PPUSH
42920: LD_VAR 0 4
42924: PPUSH
42925: CALL_OW 1
42929: ST_TO_ADDR
42930: GO 42856
42932: POP
42933: POP
// end ;
42934: LD_VAR 0 3
42938: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42939: LD_INT 0
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
// result := [ ] ;
42948: LD_ADDR_VAR 0 4
42952: PUSH
42953: EMPTY
42954: ST_TO_ADDR
// if x - r < 0 then
42955: LD_VAR 0 1
42959: PUSH
42960: LD_VAR 0 3
42964: MINUS
42965: PUSH
42966: LD_INT 0
42968: LESS
42969: IFFALSE 42981
// min_x := 0 else
42971: LD_ADDR_VAR 0 8
42975: PUSH
42976: LD_INT 0
42978: ST_TO_ADDR
42979: GO 42997
// min_x := x - r ;
42981: LD_ADDR_VAR 0 8
42985: PUSH
42986: LD_VAR 0 1
42990: PUSH
42991: LD_VAR 0 3
42995: MINUS
42996: ST_TO_ADDR
// if y - r < 0 then
42997: LD_VAR 0 2
43001: PUSH
43002: LD_VAR 0 3
43006: MINUS
43007: PUSH
43008: LD_INT 0
43010: LESS
43011: IFFALSE 43023
// min_y := 0 else
43013: LD_ADDR_VAR 0 7
43017: PUSH
43018: LD_INT 0
43020: ST_TO_ADDR
43021: GO 43039
// min_y := y - r ;
43023: LD_ADDR_VAR 0 7
43027: PUSH
43028: LD_VAR 0 2
43032: PUSH
43033: LD_VAR 0 3
43037: MINUS
43038: ST_TO_ADDR
// max_x := x + r ;
43039: LD_ADDR_VAR 0 9
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_VAR 0 3
43053: PLUS
43054: ST_TO_ADDR
// max_y := y + r ;
43055: LD_ADDR_VAR 0 10
43059: PUSH
43060: LD_VAR 0 2
43064: PUSH
43065: LD_VAR 0 3
43069: PLUS
43070: ST_TO_ADDR
// for _x = min_x to max_x do
43071: LD_ADDR_VAR 0 5
43075: PUSH
43076: DOUBLE
43077: LD_VAR 0 8
43081: DEC
43082: ST_TO_ADDR
43083: LD_VAR 0 9
43087: PUSH
43088: FOR_TO
43089: IFFALSE 43190
// for _y = min_y to max_y do
43091: LD_ADDR_VAR 0 6
43095: PUSH
43096: DOUBLE
43097: LD_VAR 0 7
43101: DEC
43102: ST_TO_ADDR
43103: LD_VAR 0 10
43107: PUSH
43108: FOR_TO
43109: IFFALSE 43186
// begin if not ValidHex ( _x , _y ) then
43111: LD_VAR 0 5
43115: PPUSH
43116: LD_VAR 0 6
43120: PPUSH
43121: CALL_OW 488
43125: NOT
43126: IFFALSE 43130
// continue ;
43128: GO 43108
// if GetResourceTypeXY ( _x , _y ) then
43130: LD_VAR 0 5
43134: PPUSH
43135: LD_VAR 0 6
43139: PPUSH
43140: CALL_OW 283
43144: IFFALSE 43184
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43146: LD_ADDR_VAR 0 4
43150: PUSH
43151: LD_VAR 0 4
43155: PPUSH
43156: LD_VAR 0 4
43160: PUSH
43161: LD_INT 1
43163: PLUS
43164: PPUSH
43165: LD_VAR 0 5
43169: PUSH
43170: LD_VAR 0 6
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PPUSH
43179: CALL_OW 1
43183: ST_TO_ADDR
// end ;
43184: GO 43108
43186: POP
43187: POP
43188: GO 43088
43190: POP
43191: POP
// end ;
43192: LD_VAR 0 4
43196: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43197: LD_INT 0
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
// if not units then
43207: LD_VAR 0 1
43211: NOT
43212: IFFALSE 43216
// exit ;
43214: GO 43744
// result := UnitFilter ( units , [ f_ok ] ) ;
43216: LD_ADDR_VAR 0 3
43220: PUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: LD_INT 50
43228: PUSH
43229: EMPTY
43230: LIST
43231: PPUSH
43232: CALL_OW 72
43236: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43237: LD_ADDR_VAR 0 8
43241: PUSH
43242: LD_VAR 0 1
43246: PUSH
43247: LD_INT 1
43249: ARRAY
43250: PPUSH
43251: CALL_OW 255
43255: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43256: LD_ADDR_VAR 0 10
43260: PUSH
43261: LD_INT 29
43263: PUSH
43264: LD_INT 91
43266: PUSH
43267: LD_INT 49
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
// if not result then
43275: LD_VAR 0 3
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 43744
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43284: LD_ADDR_VAR 0 5
43288: PUSH
43289: LD_INT 81
43291: PUSH
43292: LD_VAR 0 8
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PPUSH
43301: CALL_OW 69
43305: ST_TO_ADDR
// for i in result do
43306: LD_ADDR_VAR 0 4
43310: PUSH
43311: LD_VAR 0 3
43315: PUSH
43316: FOR_IN
43317: IFFALSE 43742
// begin tag := GetTag ( i ) + 1 ;
43319: LD_ADDR_VAR 0 9
43323: PUSH
43324: LD_VAR 0 4
43328: PPUSH
43329: CALL_OW 110
43333: PUSH
43334: LD_INT 1
43336: PLUS
43337: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43338: LD_ADDR_VAR 0 7
43342: PUSH
43343: LD_VAR 0 4
43347: PPUSH
43348: CALL_OW 250
43352: PPUSH
43353: LD_VAR 0 4
43357: PPUSH
43358: CALL_OW 251
43362: PPUSH
43363: LD_INT 4
43365: PPUSH
43366: CALL 42939 0 3
43370: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43371: LD_VAR 0 4
43375: PPUSH
43376: CALL_OW 247
43380: PUSH
43381: LD_INT 2
43383: EQUAL
43384: PUSH
43385: LD_VAR 0 7
43389: PUSH
43390: LD_INT 2
43392: GREATER
43393: AND
43394: PUSH
43395: LD_VAR 0 4
43399: PPUSH
43400: CALL_OW 264
43404: PUSH
43405: LD_VAR 0 10
43409: IN
43410: NOT
43411: AND
43412: IFFALSE 43451
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43414: LD_VAR 0 4
43418: PPUSH
43419: LD_VAR 0 7
43423: PUSH
43424: LD_INT 1
43426: ARRAY
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: PPUSH
43432: LD_VAR 0 7
43436: PUSH
43437: LD_INT 1
43439: ARRAY
43440: PUSH
43441: LD_INT 2
43443: ARRAY
43444: PPUSH
43445: CALL_OW 116
43449: GO 43740
// if path > tag then
43451: LD_VAR 0 2
43455: PUSH
43456: LD_VAR 0 9
43460: GREATER
43461: IFFALSE 43669
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43463: LD_ADDR_VAR 0 6
43467: PUSH
43468: LD_VAR 0 5
43472: PPUSH
43473: LD_INT 91
43475: PUSH
43476: LD_VAR 0 4
43480: PUSH
43481: LD_INT 8
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: PPUSH
43489: CALL_OW 72
43493: ST_TO_ADDR
// if nearEnemy then
43494: LD_VAR 0 6
43498: IFFALSE 43567
// begin if GetWeapon ( i ) = ru_time_lapser then
43500: LD_VAR 0 4
43504: PPUSH
43505: CALL_OW 264
43509: PUSH
43510: LD_INT 49
43512: EQUAL
43513: IFFALSE 43541
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43515: LD_VAR 0 4
43519: PPUSH
43520: LD_VAR 0 6
43524: PPUSH
43525: LD_VAR 0 4
43529: PPUSH
43530: CALL_OW 74
43534: PPUSH
43535: CALL_OW 112
43539: GO 43565
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43541: LD_VAR 0 4
43545: PPUSH
43546: LD_VAR 0 6
43550: PPUSH
43551: LD_VAR 0 4
43555: PPUSH
43556: CALL_OW 74
43560: PPUSH
43561: CALL 44815 0 2
// end else
43565: GO 43667
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43567: LD_VAR 0 4
43571: PPUSH
43572: LD_VAR 0 2
43576: PUSH
43577: LD_VAR 0 9
43581: ARRAY
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: LD_VAR 0 2
43591: PUSH
43592: LD_VAR 0 9
43596: ARRAY
43597: PUSH
43598: LD_INT 2
43600: ARRAY
43601: PPUSH
43602: CALL_OW 297
43606: PUSH
43607: LD_INT 6
43609: GREATER
43610: IFFALSE 43653
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43612: LD_VAR 0 4
43616: PPUSH
43617: LD_VAR 0 2
43621: PUSH
43622: LD_VAR 0 9
43626: ARRAY
43627: PUSH
43628: LD_INT 1
43630: ARRAY
43631: PPUSH
43632: LD_VAR 0 2
43636: PUSH
43637: LD_VAR 0 9
43641: ARRAY
43642: PUSH
43643: LD_INT 2
43645: ARRAY
43646: PPUSH
43647: CALL_OW 114
43651: GO 43667
// SetTag ( i , tag ) ;
43653: LD_VAR 0 4
43657: PPUSH
43658: LD_VAR 0 9
43662: PPUSH
43663: CALL_OW 109
// end else
43667: GO 43740
// if enemy then
43669: LD_VAR 0 5
43673: IFFALSE 43740
// begin if GetWeapon ( i ) = ru_time_lapser then
43675: LD_VAR 0 4
43679: PPUSH
43680: CALL_OW 264
43684: PUSH
43685: LD_INT 49
43687: EQUAL
43688: IFFALSE 43716
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43690: LD_VAR 0 4
43694: PPUSH
43695: LD_VAR 0 5
43699: PPUSH
43700: LD_VAR 0 4
43704: PPUSH
43705: CALL_OW 74
43709: PPUSH
43710: CALL_OW 112
43714: GO 43740
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43716: LD_VAR 0 4
43720: PPUSH
43721: LD_VAR 0 5
43725: PPUSH
43726: LD_VAR 0 4
43730: PPUSH
43731: CALL_OW 74
43735: PPUSH
43736: CALL 44815 0 2
// end ; end ;
43740: GO 43316
43742: POP
43743: POP
// end ;
43744: LD_VAR 0 3
43748: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43749: LD_INT 0
43751: PPUSH
43752: PPUSH
43753: PPUSH
// if not unit or IsInUnit ( unit ) then
43754: LD_VAR 0 1
43758: NOT
43759: PUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: CALL_OW 310
43769: OR
43770: IFFALSE 43774
// exit ;
43772: GO 43865
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 1
43783: PPUSH
43784: CALL_OW 250
43788: PPUSH
43789: LD_VAR 0 2
43793: PPUSH
43794: LD_INT 1
43796: PPUSH
43797: CALL_OW 272
43801: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43802: LD_ADDR_VAR 0 5
43806: PUSH
43807: LD_VAR 0 1
43811: PPUSH
43812: CALL_OW 251
43816: PPUSH
43817: LD_VAR 0 2
43821: PPUSH
43822: LD_INT 1
43824: PPUSH
43825: CALL_OW 273
43829: ST_TO_ADDR
// if ValidHex ( x , y ) then
43830: LD_VAR 0 4
43834: PPUSH
43835: LD_VAR 0 5
43839: PPUSH
43840: CALL_OW 488
43844: IFFALSE 43865
// ComTurnXY ( unit , x , y ) ;
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_VAR 0 4
43855: PPUSH
43856: LD_VAR 0 5
43860: PPUSH
43861: CALL_OW 118
// end ;
43865: LD_VAR 0 3
43869: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43870: LD_INT 0
43872: PPUSH
43873: PPUSH
// result := false ;
43874: LD_ADDR_VAR 0 3
43878: PUSH
43879: LD_INT 0
43881: ST_TO_ADDR
// if not units then
43882: LD_VAR 0 2
43886: NOT
43887: IFFALSE 43891
// exit ;
43889: GO 43936
// for i in units do
43891: LD_ADDR_VAR 0 4
43895: PUSH
43896: LD_VAR 0 2
43900: PUSH
43901: FOR_IN
43902: IFFALSE 43934
// if See ( side , i ) then
43904: LD_VAR 0 1
43908: PPUSH
43909: LD_VAR 0 4
43913: PPUSH
43914: CALL_OW 292
43918: IFFALSE 43932
// begin result := true ;
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 1
43927: ST_TO_ADDR
// exit ;
43928: POP
43929: POP
43930: GO 43936
// end ;
43932: GO 43901
43934: POP
43935: POP
// end ;
43936: LD_VAR 0 3
43940: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43941: LD_INT 0
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
// if not unit or not points then
43947: LD_VAR 0 1
43951: NOT
43952: PUSH
43953: LD_VAR 0 2
43957: NOT
43958: OR
43959: IFFALSE 43963
// exit ;
43961: GO 44053
// dist := 99999 ;
43963: LD_ADDR_VAR 0 5
43967: PUSH
43968: LD_INT 99999
43970: ST_TO_ADDR
// for i in points do
43971: LD_ADDR_VAR 0 4
43975: PUSH
43976: LD_VAR 0 2
43980: PUSH
43981: FOR_IN
43982: IFFALSE 44051
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43984: LD_ADDR_VAR 0 6
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: LD_VAR 0 4
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: PPUSH
44003: LD_VAR 0 4
44007: PUSH
44008: LD_INT 2
44010: ARRAY
44011: PPUSH
44012: CALL_OW 297
44016: ST_TO_ADDR
// if tmpDist < dist then
44017: LD_VAR 0 6
44021: PUSH
44022: LD_VAR 0 5
44026: LESS
44027: IFFALSE 44049
// begin result := i ;
44029: LD_ADDR_VAR 0 3
44033: PUSH
44034: LD_VAR 0 4
44038: ST_TO_ADDR
// dist := tmpDist ;
44039: LD_ADDR_VAR 0 5
44043: PUSH
44044: LD_VAR 0 6
44048: ST_TO_ADDR
// end ; end ;
44049: GO 43981
44051: POP
44052: POP
// end ;
44053: LD_VAR 0 3
44057: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44058: LD_INT 0
44060: PPUSH
// uc_side := side ;
44061: LD_ADDR_OWVAR 20
44065: PUSH
44066: LD_VAR 0 1
44070: ST_TO_ADDR
// uc_nation := 3 ;
44071: LD_ADDR_OWVAR 21
44075: PUSH
44076: LD_INT 3
44078: ST_TO_ADDR
// vc_chassis := 25 ;
44079: LD_ADDR_OWVAR 37
44083: PUSH
44084: LD_INT 25
44086: ST_TO_ADDR
// vc_engine := engine_siberite ;
44087: LD_ADDR_OWVAR 39
44091: PUSH
44092: LD_INT 3
44094: ST_TO_ADDR
// vc_control := control_computer ;
44095: LD_ADDR_OWVAR 38
44099: PUSH
44100: LD_INT 3
44102: ST_TO_ADDR
// vc_weapon := 59 ;
44103: LD_ADDR_OWVAR 40
44107: PUSH
44108: LD_INT 59
44110: ST_TO_ADDR
// result := CreateVehicle ;
44111: LD_ADDR_VAR 0 5
44115: PUSH
44116: CALL_OW 45
44120: ST_TO_ADDR
// SetDir ( result , d ) ;
44121: LD_VAR 0 5
44125: PPUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44135: LD_VAR 0 5
44139: PPUSH
44140: LD_VAR 0 2
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: LD_INT 0
44152: PPUSH
44153: CALL_OW 48
// end ;
44157: LD_VAR 0 5
44161: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44162: LD_INT 0
44164: PPUSH
44165: PPUSH
44166: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44167: LD_ADDR_VAR 0 2
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44190: LD_VAR 0 1
44194: NOT
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: CALL_OW 264
44205: PUSH
44206: LD_INT 12
44208: PUSH
44209: LD_INT 51
44211: PUSH
44212: LD_INT 32
44214: PUSH
44215: LD_INT 89
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: IN
44224: NOT
44225: OR
44226: IFFALSE 44230
// exit ;
44228: GO 44328
// for i := 1 to 3 do
44230: LD_ADDR_VAR 0 3
44234: PUSH
44235: DOUBLE
44236: LD_INT 1
44238: DEC
44239: ST_TO_ADDR
44240: LD_INT 3
44242: PUSH
44243: FOR_TO
44244: IFFALSE 44326
// begin tmp := GetCargo ( cargo , i ) ;
44246: LD_ADDR_VAR 0 4
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: LD_VAR 0 3
44260: PPUSH
44261: CALL_OW 289
44265: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44266: LD_ADDR_VAR 0 2
44270: PUSH
44271: LD_VAR 0 2
44275: PPUSH
44276: LD_VAR 0 3
44280: PPUSH
44281: LD_VAR 0 4
44285: PPUSH
44286: CALL_OW 1
44290: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44291: LD_ADDR_VAR 0 2
44295: PUSH
44296: LD_VAR 0 2
44300: PPUSH
44301: LD_INT 4
44303: PPUSH
44304: LD_VAR 0 2
44308: PUSH
44309: LD_INT 4
44311: ARRAY
44312: PUSH
44313: LD_VAR 0 4
44317: PLUS
44318: PPUSH
44319: CALL_OW 1
44323: ST_TO_ADDR
// end ;
44324: GO 44243
44326: POP
44327: POP
// end ;
44328: LD_VAR 0 2
44332: RET
// export function Length ( array ) ; begin
44333: LD_INT 0
44335: PPUSH
// result := array + 0 ;
44336: LD_ADDR_VAR 0 2
44340: PUSH
44341: LD_VAR 0 1
44345: PUSH
44346: LD_INT 0
44348: PLUS
44349: ST_TO_ADDR
// end ;
44350: LD_VAR 0 2
44354: RET
// export function PrepareArray ( array ) ; begin
44355: LD_INT 0
44357: PPUSH
// result := array diff 0 ;
44358: LD_ADDR_VAR 0 2
44362: PUSH
44363: LD_VAR 0 1
44367: PUSH
44368: LD_INT 0
44370: DIFF
44371: ST_TO_ADDR
// if not result [ 1 ] then
44372: LD_VAR 0 2
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: NOT
44381: IFFALSE 44401
// result := Delete ( result , 1 ) ;
44383: LD_ADDR_VAR 0 2
44387: PUSH
44388: LD_VAR 0 2
44392: PPUSH
44393: LD_INT 1
44395: PPUSH
44396: CALL_OW 3
44400: ST_TO_ADDR
// end ;
44401: LD_VAR 0 2
44405: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44406: LD_INT 0
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
// sibRocketRange := 25 ;
44412: LD_ADDR_VAR 0 6
44416: PUSH
44417: LD_INT 25
44419: ST_TO_ADDR
// result := false ;
44420: LD_ADDR_VAR 0 4
44424: PUSH
44425: LD_INT 0
44427: ST_TO_ADDR
// for i := 0 to 5 do
44428: LD_ADDR_VAR 0 5
44432: PUSH
44433: DOUBLE
44434: LD_INT 0
44436: DEC
44437: ST_TO_ADDR
44438: LD_INT 5
44440: PUSH
44441: FOR_TO
44442: IFFALSE 44509
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44444: LD_VAR 0 1
44448: PPUSH
44449: LD_VAR 0 5
44453: PPUSH
44454: LD_VAR 0 6
44458: PPUSH
44459: CALL_OW 272
44463: PPUSH
44464: LD_VAR 0 2
44468: PPUSH
44469: LD_VAR 0 5
44473: PPUSH
44474: LD_VAR 0 6
44478: PPUSH
44479: CALL_OW 273
44483: PPUSH
44484: LD_VAR 0 3
44488: PPUSH
44489: CALL_OW 309
44493: IFFALSE 44507
// begin result := true ;
44495: LD_ADDR_VAR 0 4
44499: PUSH
44500: LD_INT 1
44502: ST_TO_ADDR
// exit ;
44503: POP
44504: POP
44505: GO 44511
// end ;
44507: GO 44441
44509: POP
44510: POP
// end ;
44511: LD_VAR 0 4
44515: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44516: LD_INT 0
44518: PPUSH
44519: PPUSH
44520: PPUSH
// if btype = b_depot then
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 0
44528: EQUAL
44529: IFFALSE 44541
// begin result := true ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 1
44538: ST_TO_ADDR
// exit ;
44539: GO 44657
// end ; pom := GetBase ( depot ) ;
44541: LD_ADDR_VAR 0 4
44545: PUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 274
44555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_VAR 0 2
44565: PPUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 248
44575: PPUSH
44576: CALL_OW 450
44580: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_VAR 0 4
44590: PPUSH
44591: LD_INT 1
44593: PPUSH
44594: CALL_OW 275
44598: PUSH
44599: LD_VAR 0 5
44603: PUSH
44604: LD_INT 1
44606: ARRAY
44607: GREATEREQUAL
44608: PUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: LD_INT 2
44616: PPUSH
44617: CALL_OW 275
44621: PUSH
44622: LD_VAR 0 5
44626: PUSH
44627: LD_INT 2
44629: ARRAY
44630: GREATEREQUAL
44631: AND
44632: PUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: LD_INT 3
44640: PPUSH
44641: CALL_OW 275
44645: PUSH
44646: LD_VAR 0 5
44650: PUSH
44651: LD_INT 3
44653: ARRAY
44654: GREATEREQUAL
44655: AND
44656: ST_TO_ADDR
// end ;
44657: LD_VAR 0 3
44661: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44662: LD_INT 0
44664: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44665: LD_VAR 0 1
44669: PPUSH
44670: LD_VAR 0 2
44674: PPUSH
44675: LD_INT 0
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: LD_INT 1
44683: PPUSH
44684: LD_INT 0
44686: PPUSH
44687: CALL_OW 587
// end ;
44691: LD_VAR 0 3
44695: RET
// export function CenterOnNow ( unit ) ; begin
44696: LD_INT 0
44698: PPUSH
// result := IsInUnit ( unit ) ;
44699: LD_ADDR_VAR 0 2
44703: PUSH
44704: LD_VAR 0 1
44708: PPUSH
44709: CALL_OW 310
44713: ST_TO_ADDR
// if not result then
44714: LD_VAR 0 2
44718: NOT
44719: IFFALSE 44731
// result := unit ;
44721: LD_ADDR_VAR 0 2
44725: PUSH
44726: LD_VAR 0 1
44730: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL_OW 87
// end ;
44740: LD_VAR 0 2
44744: RET
// export function ComMoveHex ( unit , hex ) ; begin
44745: LD_INT 0
44747: PPUSH
// if not hex then
44748: LD_VAR 0 2
44752: NOT
44753: IFFALSE 44757
// exit ;
44755: GO 44810
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44757: LD_VAR 0 2
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PPUSH
44766: LD_VAR 0 2
44770: PUSH
44771: LD_INT 2
44773: ARRAY
44774: PPUSH
44775: CALL_OW 428
44779: IFFALSE 44783
// exit ;
44781: GO 44810
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44783: LD_VAR 0 1
44787: PPUSH
44788: LD_VAR 0 2
44792: PUSH
44793: LD_INT 1
44795: ARRAY
44796: PPUSH
44797: LD_VAR 0 2
44801: PUSH
44802: LD_INT 2
44804: ARRAY
44805: PPUSH
44806: CALL_OW 111
// end ;
44810: LD_VAR 0 3
44814: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44815: LD_INT 0
44817: PPUSH
44818: PPUSH
44819: PPUSH
// if not unit or not enemy then
44820: LD_VAR 0 1
44824: NOT
44825: PUSH
44826: LD_VAR 0 2
44830: NOT
44831: OR
44832: IFFALSE 44836
// exit ;
44834: GO 44960
// x := GetX ( enemy ) ;
44836: LD_ADDR_VAR 0 4
44840: PUSH
44841: LD_VAR 0 2
44845: PPUSH
44846: CALL_OW 250
44850: ST_TO_ADDR
// y := GetY ( enemy ) ;
44851: LD_ADDR_VAR 0 5
44855: PUSH
44856: LD_VAR 0 2
44860: PPUSH
44861: CALL_OW 251
44865: ST_TO_ADDR
// if ValidHex ( x , y ) then
44866: LD_VAR 0 4
44870: PPUSH
44871: LD_VAR 0 5
44875: PPUSH
44876: CALL_OW 488
44880: IFFALSE 44960
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44882: LD_VAR 0 2
44886: PPUSH
44887: CALL_OW 247
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: IN
44902: PUSH
44903: LD_VAR 0 1
44907: PPUSH
44908: CALL_OW 255
44912: PPUSH
44913: LD_VAR 0 2
44917: PPUSH
44918: CALL_OW 292
44922: OR
44923: IFFALSE 44941
// ComAttackUnit ( unit , enemy ) else
44925: LD_VAR 0 1
44929: PPUSH
44930: LD_VAR 0 2
44934: PPUSH
44935: CALL_OW 115
44939: GO 44960
// ComAgressiveMove ( unit , x , y ) ;
44941: LD_VAR 0 1
44945: PPUSH
44946: LD_VAR 0 4
44950: PPUSH
44951: LD_VAR 0 5
44955: PPUSH
44956: CALL_OW 114
// end ;
44960: LD_VAR 0 3
44964: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44965: LD_INT 0
44967: PPUSH
44968: PPUSH
44969: PPUSH
// list := AreaToList ( area , 0 ) ;
44970: LD_ADDR_VAR 0 5
44974: PUSH
44975: LD_VAR 0 1
44979: PPUSH
44980: LD_INT 0
44982: PPUSH
44983: CALL_OW 517
44987: ST_TO_ADDR
// if not list then
44988: LD_VAR 0 5
44992: NOT
44993: IFFALSE 44997
// exit ;
44995: GO 45127
// if all then
44997: LD_VAR 0 2
45001: IFFALSE 45089
// begin for i := 1 to list [ 1 ] do
45003: LD_ADDR_VAR 0 4
45007: PUSH
45008: DOUBLE
45009: LD_INT 1
45011: DEC
45012: ST_TO_ADDR
45013: LD_VAR 0 5
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PUSH
45022: FOR_TO
45023: IFFALSE 45085
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_VAR 0 3
45034: PPUSH
45035: LD_VAR 0 3
45039: PUSH
45040: LD_INT 1
45042: PLUS
45043: PPUSH
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 1
45051: ARRAY
45052: PUSH
45053: LD_VAR 0 4
45057: ARRAY
45058: PUSH
45059: LD_VAR 0 5
45063: PUSH
45064: LD_INT 2
45066: ARRAY
45067: PUSH
45068: LD_VAR 0 4
45072: ARRAY
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PPUSH
45078: CALL_OW 1
45082: ST_TO_ADDR
45083: GO 45022
45085: POP
45086: POP
// exit ;
45087: GO 45127
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_VAR 0 5
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PUSH
45103: LD_INT 1
45105: ARRAY
45106: PUSH
45107: LD_VAR 0 5
45111: PUSH
45112: LD_INT 2
45114: ARRAY
45115: PUSH
45116: LD_INT 1
45118: ARRAY
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: ST_TO_ADDR
// end ;
45127: LD_VAR 0 3
45131: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45132: LD_INT 0
45134: PPUSH
45135: PPUSH
// list := AreaToList ( area , 0 ) ;
45136: LD_ADDR_VAR 0 4
45140: PUSH
45141: LD_VAR 0 1
45145: PPUSH
45146: LD_INT 0
45148: PPUSH
45149: CALL_OW 517
45153: ST_TO_ADDR
// if not list then
45154: LD_VAR 0 4
45158: NOT
45159: IFFALSE 45163
// exit ;
45161: GO 45204
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45163: LD_ADDR_VAR 0 3
45167: PUSH
45168: LD_VAR 0 4
45172: PUSH
45173: LD_INT 1
45175: ARRAY
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: PUSH
45181: LD_VAR 0 4
45185: PUSH
45186: LD_INT 2
45188: ARRAY
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: PUSH
45194: LD_VAR 0 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// end ;
45204: LD_VAR 0 3
45208: RET
// export function First ( array ) ; begin
45209: LD_INT 0
45211: PPUSH
// if not array then
45212: LD_VAR 0 1
45216: NOT
45217: IFFALSE 45221
// exit ;
45219: GO 45235
// result := array [ 1 ] ;
45221: LD_ADDR_VAR 0 2
45225: PUSH
45226: LD_VAR 0 1
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: ST_TO_ADDR
// end ;
45235: LD_VAR 0 2
45239: RET
// export function Last ( array ) ; begin
45240: LD_INT 0
45242: PPUSH
// if not array then
45243: LD_VAR 0 1
45247: NOT
45248: IFFALSE 45252
// exit ;
45250: GO 45268
// result := array [ array ] ;
45252: LD_ADDR_VAR 0 2
45256: PUSH
45257: LD_VAR 0 1
45261: PUSH
45262: LD_VAR 0 1
45266: ARRAY
45267: ST_TO_ADDR
// end ;
45268: LD_VAR 0 2
45272: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45273: LD_INT 0
45275: PPUSH
45276: PPUSH
// result := [ ] ;
45277: LD_ADDR_VAR 0 5
45281: PUSH
45282: EMPTY
45283: ST_TO_ADDR
// if not array then
45284: LD_VAR 0 1
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 45405
// for i := 1 to array do
45293: LD_ADDR_VAR 0 6
45297: PUSH
45298: DOUBLE
45299: LD_INT 1
45301: DEC
45302: ST_TO_ADDR
45303: LD_VAR 0 1
45307: PUSH
45308: FOR_TO
45309: IFFALSE 45403
// if array [ i ] [ index ] = value then
45311: LD_VAR 0 1
45315: PUSH
45316: LD_VAR 0 6
45320: ARRAY
45321: PUSH
45322: LD_VAR 0 2
45326: ARRAY
45327: PUSH
45328: LD_VAR 0 3
45332: EQUAL
45333: IFFALSE 45401
// begin if indexColumn then
45335: LD_VAR 0 4
45339: IFFALSE 45375
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45341: LD_ADDR_VAR 0 5
45345: PUSH
45346: LD_VAR 0 5
45350: PPUSH
45351: LD_VAR 0 1
45355: PUSH
45356: LD_VAR 0 6
45360: ARRAY
45361: PUSH
45362: LD_VAR 0 4
45366: ARRAY
45367: PPUSH
45368: CALL 40593 0 2
45372: ST_TO_ADDR
45373: GO 45401
// result := Join ( result , array [ i ] ) ;
45375: LD_ADDR_VAR 0 5
45379: PUSH
45380: LD_VAR 0 5
45384: PPUSH
45385: LD_VAR 0 1
45389: PUSH
45390: LD_VAR 0 6
45394: ARRAY
45395: PPUSH
45396: CALL 40593 0 2
45400: ST_TO_ADDR
// end ;
45401: GO 45308
45403: POP
45404: POP
// end ;
45405: LD_VAR 0 5
45409: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45410: LD_INT 0
45412: PPUSH
// if not vehicles or not parkingPoint then
45413: LD_VAR 0 1
45417: NOT
45418: PUSH
45419: LD_VAR 0 2
45423: NOT
45424: OR
45425: IFFALSE 45429
// exit ;
45427: GO 45527
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45429: LD_ADDR_VAR 0 1
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: LD_INT 50
45441: PUSH
45442: EMPTY
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 92
45450: PUSH
45451: LD_VAR 0 2
45455: PUSH
45456: LD_INT 1
45458: ARRAY
45459: PUSH
45460: LD_VAR 0 2
45464: PUSH
45465: LD_INT 2
45467: ARRAY
45468: PUSH
45469: LD_INT 8
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PPUSH
45486: CALL_OW 72
45490: ST_TO_ADDR
// if not vehicles then
45491: LD_VAR 0 1
45495: NOT
45496: IFFALSE 45500
// exit ;
45498: GO 45527
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45500: LD_VAR 0 1
45504: PPUSH
45505: LD_VAR 0 2
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PPUSH
45514: LD_VAR 0 2
45518: PUSH
45519: LD_INT 2
45521: ARRAY
45522: PPUSH
45523: CALL_OW 111
// end ;
45527: LD_VAR 0 3
45531: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45532: LD_INT 0
45534: PPUSH
45535: PPUSH
45536: PPUSH
// if not side or not area then
45537: LD_VAR 0 1
45541: NOT
45542: PUSH
45543: LD_VAR 0 2
45547: NOT
45548: OR
45549: IFFALSE 45553
// exit ;
45551: GO 45672
// tmp := AreaToList ( area , 0 ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 2
45562: PPUSH
45563: LD_INT 0
45565: PPUSH
45566: CALL_OW 517
45570: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45571: LD_ADDR_VAR 0 4
45575: PUSH
45576: DOUBLE
45577: LD_INT 1
45579: DEC
45580: ST_TO_ADDR
45581: LD_VAR 0 5
45585: PUSH
45586: LD_INT 1
45588: ARRAY
45589: PUSH
45590: FOR_TO
45591: IFFALSE 45670
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45593: LD_VAR 0 5
45597: PUSH
45598: LD_INT 1
45600: ARRAY
45601: PUSH
45602: LD_VAR 0 4
45606: ARRAY
45607: PPUSH
45608: LD_VAR 0 5
45612: PUSH
45613: LD_INT 2
45615: ARRAY
45616: PUSH
45617: LD_VAR 0 4
45621: ARRAY
45622: PPUSH
45623: CALL_OW 351
45627: IFFALSE 45668
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45629: LD_VAR 0 5
45633: PUSH
45634: LD_INT 1
45636: ARRAY
45637: PUSH
45638: LD_VAR 0 4
45642: ARRAY
45643: PPUSH
45644: LD_VAR 0 5
45648: PUSH
45649: LD_INT 2
45651: ARRAY
45652: PUSH
45653: LD_VAR 0 4
45657: ARRAY
45658: PPUSH
45659: LD_VAR 0 1
45663: PPUSH
45664: CALL_OW 244
// end ;
45668: GO 45590
45670: POP
45671: POP
// end ; end_of_file
45672: LD_VAR 0 3
45676: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45677: LD_INT 0
45679: PPUSH
45680: PPUSH
// disable ( mpActive ) ;
45681: LD_INT 100
45683: DISABLE_MARKED
// disable ( mpWin ) ;
45684: LD_INT 101
45686: DISABLE_MARKED
// disable ( mpLose ) ;
45687: LD_INT 102
45689: DISABLE_MARKED
// mpGameType := 0 ;
45690: LD_ADDR_EXP 1
45694: PUSH
45695: LD_INT 0
45697: ST_TO_ADDR
// mpGameSettings := [ ] ;
45698: LD_ADDR_EXP 4
45702: PUSH
45703: EMPTY
45704: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45705: LD_ADDR_EXP 2
45709: PUSH
45710: EMPTY
45711: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45712: LD_ADDR_EXP 3
45716: PUSH
45717: EMPTY
45718: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45719: LD_ADDR_EXP 27
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45734: LD_ADDR_EXP 10
45738: PUSH
45739: EMPTY
45740: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45741: LD_ADDR_EXP 11
45745: PUSH
45746: EMPTY
45747: ST_TO_ADDR
// mpDepots := [ ] ;
45748: LD_ADDR_EXP 12
45752: PUSH
45753: EMPTY
45754: ST_TO_ADDR
// mpBuildings := [ ] ;
45755: LD_ADDR_EXP 15
45759: PUSH
45760: EMPTY
45761: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45762: LD_ADDR_EXP 16
45766: PUSH
45767: EMPTY
45768: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45769: LD_ADDR_EXP 17
45773: PUSH
45774: EMPTY
45775: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45776: LD_ADDR_EXP 18
45780: PUSH
45781: EMPTY
45782: ST_TO_ADDR
// mpStartingResources := [ ] ;
45783: LD_ADDR_EXP 13
45787: PUSH
45788: EMPTY
45789: ST_TO_ADDR
// mpStartPos := [ ] ;
45790: LD_ADDR_EXP 19
45794: PUSH
45795: EMPTY
45796: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45797: LD_ADDR_EXP 20
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45806: LD_ADDR_EXP 21
45810: PUSH
45811: EMPTY
45812: ST_TO_ADDR
// mpApemans := [ ] ;
45813: LD_ADDR_EXP 28
45817: PUSH
45818: EMPTY
45819: ST_TO_ADDR
// mpApemansArea := [ ] ;
45820: LD_ADDR_EXP 29
45824: PUSH
45825: EMPTY
45826: ST_TO_ADDR
// mpRespawn := [ ] ;
45827: LD_ADDR_EXP 30
45831: PUSH
45832: EMPTY
45833: ST_TO_ADDR
// mpKingArea := 0 ;
45834: LD_ADDR_EXP 31
45838: PUSH
45839: LD_INT 0
45841: ST_TO_ADDR
// mpPoints := [ ] ;
45842: LD_ADDR_EXP 32
45846: PUSH
45847: EMPTY
45848: ST_TO_ADDR
// mpVehicles := 0 ;
45849: LD_ADDR_EXP 33
45853: PUSH
45854: LD_INT 0
45856: ST_TO_ADDR
// mpShipments := 0 ;
45857: LD_ADDR_EXP 25
45861: PUSH
45862: LD_INT 0
45864: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45865: LD_ADDR_EXP 37
45869: PUSH
45870: EMPTY
45871: PUSH
45872: EMPTY
45873: PUSH
45874: EMPTY
45875: PUSH
45876: EMPTY
45877: PUSH
45878: EMPTY
45879: PUSH
45880: EMPTY
45881: PUSH
45882: EMPTY
45883: PUSH
45884: EMPTY
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// mpEmissions := 0 ;
45896: LD_ADDR_EXP 34
45900: PUSH
45901: LD_INT 0
45903: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45904: LD_ADDR_EXP 23
45908: PUSH
45909: LD_INT 3
45911: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45912: LD_ADDR_EXP 22
45916: PUSH
45917: LD_INT 15
45919: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45920: LD_ADDR_EXP 35
45924: PUSH
45925: LD_INT 0
45927: ST_TO_ADDR
// mpGameActive := false ;
45928: LD_ADDR_EXP 36
45932: PUSH
45933: LD_INT 0
45935: ST_TO_ADDR
// mpBlockRespThread := false ;
45936: LD_ADDR_EXP 38
45940: PUSH
45941: LD_INT 0
45943: ST_TO_ADDR
// for i := 1 to 32 do
45944: LD_ADDR_VAR 0 2
45948: PUSH
45949: DOUBLE
45950: LD_INT 1
45952: DEC
45953: ST_TO_ADDR
45954: LD_INT 32
45956: PUSH
45957: FOR_TO
45958: IFFALSE 45985
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45960: LD_ADDR_EXP 4
45964: PUSH
45965: LD_EXP 4
45969: PPUSH
45970: LD_VAR 0 2
45974: PPUSH
45975: LD_INT 0
45977: PPUSH
45978: CALL_OW 1
45982: ST_TO_ADDR
45983: GO 45957
45985: POP
45986: POP
// end ;
45987: LD_VAR 0 1
45991: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45992: LD_INT 0
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46008: LD_ADDR_VAR 0 14
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// for i in gameTypes do
46027: LD_ADDR_VAR 0 2
46031: PUSH
46032: LD_VAR 0 14
46036: PUSH
46037: FOR_IN
46038: IFFALSE 46047
// disable ( i ) ;
46040: LD_VAR 0 2
46044: DISABLE_MARKED
46045: GO 46037
46047: POP
46048: POP
// if Multiplayer then
46049: LD_OWVAR 4
46053: IFFALSE 46237
// begin mpGameType := mp_game_type ;
46055: LD_ADDR_EXP 1
46059: PUSH
46060: LD_OWVAR 6
46064: ST_TO_ADDR
// your_side := mp_player_side ;
46065: LD_ADDR_OWVAR 2
46069: PUSH
46070: LD_OWVAR 7
46074: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46075: LD_ADDR_EXP 5
46079: PUSH
46080: LD_OWVAR 17
46084: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46085: LD_ADDR_EXP 6
46089: PUSH
46090: LD_OWVAR 15
46094: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46095: LD_ADDR_EXP 7
46099: PUSH
46100: LD_OWVAR 16
46104: ST_TO_ADDR
// mpTeams := mp_teams ;
46105: LD_ADDR_EXP 8
46109: PUSH
46110: LD_OWVAR 12
46114: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46115: LD_ADDR_VAR 0 2
46119: PUSH
46120: DOUBLE
46121: LD_INT 1
46123: DEC
46124: ST_TO_ADDR
46125: LD_EXP 2
46129: PPUSH
46130: CALL 4984 0 1
46134: PUSH
46135: FOR_TO
46136: IFFALSE 46212
// begin setting := mpGameSettingsKeys [ i ] ;
46138: LD_ADDR_VAR 0 12
46142: PUSH
46143: LD_EXP 2
46147: PUSH
46148: LD_VAR 0 2
46152: ARRAY
46153: ST_TO_ADDR
// if setting then
46154: LD_VAR 0 12
46158: IFFALSE 46210
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46160: LD_ADDR_EXP 4
46164: PUSH
46165: LD_EXP 4
46169: PPUSH
46170: LD_VAR 0 2
46174: PPUSH
46175: LD_EXP 3
46179: PUSH
46180: LD_VAR 0 2
46184: ARRAY
46185: PUSH
46186: LD_VAR 0 2
46190: PUSH
46191: LD_INT 1
46193: MINUS
46194: PPUSH
46195: CALL_OW 426
46199: PUSH
46200: LD_INT 1
46202: PLUS
46203: ARRAY
46204: PPUSH
46205: CALL_OW 1
46209: ST_TO_ADDR
// end ;
46210: GO 46135
46212: POP
46213: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46214: LD_ADDR_EXP 9
46218: PUSH
46219: LD_EXP 6
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: DIFF
46230: PUSH
46231: LD_INT 1
46233: GREATER
46234: ST_TO_ADDR
// end else
46235: GO 46237
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46237: LD_EXP 1
46241: PPUSH
46242: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
46246: LD_EXP 16
46250: PPUSH
46251: CALL 4984 0 1
46255: IFFALSE 46286
// begin for i in mpMarkedAreas do
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: LD_EXP 16
46266: PUSH
46267: FOR_IN
46268: IFFALSE 46284
// SetAreaMapShow ( i , 0 ) ;
46270: LD_VAR 0 2
46274: PPUSH
46275: LD_INT 0
46277: PPUSH
46278: CALL_OW 424
46282: GO 46267
46284: POP
46285: POP
// end ; for i := 1 to 8 do
46286: LD_ADDR_VAR 0 2
46290: PUSH
46291: DOUBLE
46292: LD_INT 1
46294: DEC
46295: ST_TO_ADDR
46296: LD_INT 8
46298: PUSH
46299: FOR_TO
46300: IFFALSE 47516
// begin if not mpSidePositions [ i ] then
46302: LD_EXP 5
46306: PUSH
46307: LD_VAR 0 2
46311: ARRAY
46312: NOT
46313: IFFALSE 46317
// continue ;
46315: GO 46299
// side := i ;
46317: LD_ADDR_VAR 0 7
46321: PUSH
46322: LD_VAR 0 2
46326: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46327: LD_ADDR_VAR 0 9
46331: PUSH
46332: LD_EXP 7
46336: PUSH
46337: LD_VAR 0 2
46341: ARRAY
46342: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46343: LD_ADDR_VAR 0 8
46347: PUSH
46348: LD_EXP 5
46352: PUSH
46353: LD_VAR 0 2
46357: ARRAY
46358: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46359: LD_EXP 10
46363: PPUSH
46364: CALL 4984 0 1
46368: IFFALSE 46445
// begin for j in mpOilDeposits [ pos ] do
46370: LD_ADDR_VAR 0 3
46374: PUSH
46375: LD_EXP 10
46379: PUSH
46380: LD_VAR 0 8
46384: ARRAY
46385: PUSH
46386: FOR_IN
46387: IFFALSE 46443
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46389: LD_VAR 0 3
46393: PUSH
46394: LD_INT 1
46396: ARRAY
46397: PPUSH
46398: LD_VAR 0 3
46402: PUSH
46403: LD_INT 2
46405: ARRAY
46406: PPUSH
46407: LD_INT 2
46409: PPUSH
46410: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46414: LD_VAR 0 3
46418: PUSH
46419: LD_INT 1
46421: ARRAY
46422: PPUSH
46423: LD_VAR 0 3
46427: PUSH
46428: LD_INT 2
46430: ARRAY
46431: PPUSH
46432: LD_VAR 0 7
46436: PPUSH
46437: CALL_OW 441
// end ;
46441: GO 46386
46443: POP
46444: POP
// end ; if Count ( mpSibDeposits ) then
46445: LD_EXP 11
46449: PPUSH
46450: CALL 4984 0 1
46454: IFFALSE 46531
// begin for j in mpSibDeposits [ pos ] do
46456: LD_ADDR_VAR 0 3
46460: PUSH
46461: LD_EXP 11
46465: PUSH
46466: LD_VAR 0 8
46470: ARRAY
46471: PUSH
46472: FOR_IN
46473: IFFALSE 46529
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46475: LD_VAR 0 3
46479: PUSH
46480: LD_INT 1
46482: ARRAY
46483: PPUSH
46484: LD_VAR 0 3
46488: PUSH
46489: LD_INT 2
46491: ARRAY
46492: PPUSH
46493: LD_INT 3
46495: PPUSH
46496: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46500: LD_VAR 0 3
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: PPUSH
46509: LD_VAR 0 3
46513: PUSH
46514: LD_INT 2
46516: ARRAY
46517: PPUSH
46518: LD_VAR 0 7
46522: PPUSH
46523: CALL_OW 441
// end ;
46527: GO 46472
46529: POP
46530: POP
// end ; InitBc ;
46531: CALL_OW 21
// InitUc ;
46535: CALL_OW 18
// uc_side := side ;
46539: LD_ADDR_OWVAR 20
46543: PUSH
46544: LD_VAR 0 7
46548: ST_TO_ADDR
// uc_nation := nation ;
46549: LD_ADDR_OWVAR 21
46553: PUSH
46554: LD_VAR 0 9
46558: ST_TO_ADDR
// if Count ( mpDepots ) then
46559: LD_EXP 12
46563: PPUSH
46564: CALL 4984 0 1
46568: IFFALSE 46738
// begin bc_level := 0 ;
46570: LD_ADDR_OWVAR 43
46574: PUSH
46575: LD_INT 0
46577: ST_TO_ADDR
// bc_type := b_depot ;
46578: LD_ADDR_OWVAR 42
46582: PUSH
46583: LD_INT 0
46585: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46586: LD_ADDR_VAR 0 4
46590: PUSH
46591: LD_EXP 12
46595: PUSH
46596: LD_VAR 0 8
46600: ARRAY
46601: PUSH
46602: LD_INT 1
46604: ARRAY
46605: PPUSH
46606: LD_EXP 12
46610: PUSH
46611: LD_VAR 0 8
46615: ARRAY
46616: PUSH
46617: LD_INT 2
46619: ARRAY
46620: PPUSH
46621: LD_EXP 12
46625: PUSH
46626: LD_VAR 0 8
46630: ARRAY
46631: PUSH
46632: LD_INT 3
46634: ARRAY
46635: PPUSH
46636: CALL_OW 47
46640: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46641: LD_VAR 0 4
46645: PPUSH
46646: LD_STRING @
46648: PUSH
46649: LD_VAR 0 7
46653: STR
46654: PPUSH
46655: CALL_OW 500
// SetTag ( b , side ) ;
46659: LD_VAR 0 4
46663: PPUSH
46664: LD_VAR 0 7
46668: PPUSH
46669: CALL_OW 109
// if Count ( mpStartingResources ) then
46673: LD_EXP 13
46677: PPUSH
46678: CALL 4984 0 1
46682: IFFALSE 46736
// begin for j := 1 to mpStartingResources do
46684: LD_ADDR_VAR 0 3
46688: PUSH
46689: DOUBLE
46690: LD_INT 1
46692: DEC
46693: ST_TO_ADDR
46694: LD_EXP 13
46698: PUSH
46699: FOR_TO
46700: IFFALSE 46734
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46702: LD_VAR 0 4
46706: PPUSH
46707: CALL_OW 274
46711: PPUSH
46712: LD_VAR 0 3
46716: PPUSH
46717: LD_EXP 13
46721: PUSH
46722: LD_VAR 0 3
46726: ARRAY
46727: PPUSH
46728: CALL_OW 277
46732: GO 46699
46734: POP
46735: POP
// end ; end else
46736: GO 46885
// if Count ( mpStartingResources ) then
46738: LD_EXP 13
46742: PPUSH
46743: CALL 4984 0 1
46747: IFFALSE 46885
// begin for j := 1 to mpStartingResources do
46749: LD_ADDR_VAR 0 3
46753: PUSH
46754: DOUBLE
46755: LD_INT 1
46757: DEC
46758: ST_TO_ADDR
46759: LD_EXP 13
46763: PUSH
46764: FOR_TO
46765: IFFALSE 46883
// begin resources := mpStartingResources [ j ] ;
46767: LD_ADDR_VAR 0 13
46771: PUSH
46772: LD_EXP 13
46776: PUSH
46777: LD_VAR 0 3
46781: ARRAY
46782: ST_TO_ADDR
// repeat if resources >= 50 then
46783: LD_VAR 0 13
46787: PUSH
46788: LD_INT 50
46790: GREATEREQUAL
46791: IFFALSE 46837
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46793: LD_VAR 0 3
46797: PPUSH
46798: LD_INT 5
46800: PPUSH
46801: LD_VAR 0 5
46805: PPUSH
46806: LD_VAR 0 6
46810: PPUSH
46811: LD_INT 4
46813: PPUSH
46814: LD_INT 0
46816: PPUSH
46817: CALL_OW 60
// resources := resources - 50 ;
46821: LD_ADDR_VAR 0 13
46825: PUSH
46826: LD_VAR 0 13
46830: PUSH
46831: LD_INT 50
46833: MINUS
46834: ST_TO_ADDR
// end else
46835: GO 46871
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46837: LD_VAR 0 3
46841: PPUSH
46842: LD_VAR 0 13
46846: PUSH
46847: LD_INT 10
46849: DIV
46850: PPUSH
46851: LD_VAR 0 5
46855: PPUSH
46856: LD_VAR 0 6
46860: PPUSH
46861: LD_INT 4
46863: PPUSH
46864: LD_INT 0
46866: PPUSH
46867: CALL_OW 60
// until resources <= 0 ;
46871: LD_VAR 0 13
46875: PUSH
46876: LD_INT 0
46878: LESSEQUAL
46879: IFFALSE 46783
// end ;
46881: GO 46764
46883: POP
46884: POP
// end ; if Count ( mpBuildings ) then
46885: LD_EXP 15
46889: PPUSH
46890: CALL 4984 0 1
46894: IFFALSE 46972
// begin for j in mpBuildings [ pos ] do
46896: LD_ADDR_VAR 0 3
46900: PUSH
46901: LD_EXP 15
46905: PUSH
46906: LD_VAR 0 8
46910: ARRAY
46911: PUSH
46912: FOR_IN
46913: IFFALSE 46970
// begin bc_level := 0 ;
46915: LD_ADDR_OWVAR 43
46919: PUSH
46920: LD_INT 0
46922: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46923: LD_ADDR_OWVAR 42
46927: PUSH
46928: LD_VAR 0 3
46932: PUSH
46933: LD_INT 1
46935: ARRAY
46936: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46937: LD_VAR 0 3
46941: PUSH
46942: LD_INT 2
46944: ARRAY
46945: PPUSH
46946: LD_VAR 0 3
46950: PUSH
46951: LD_INT 3
46953: ARRAY
46954: PPUSH
46955: LD_VAR 0 3
46959: PUSH
46960: LD_INT 4
46962: ARRAY
46963: PPUSH
46964: CALL_OW 47
// end ;
46968: GO 46912
46970: POP
46971: POP
// end ; if mpBattleFlag > - 1 then
46972: LD_EXP 20
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: GREATER
46981: IFFALSE 47140
// begin x := mpStartPos [ pos ] [ 1 ] ;
46983: LD_ADDR_VAR 0 5
46987: PUSH
46988: LD_EXP 19
46992: PUSH
46993: LD_VAR 0 8
46997: ARRAY
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47003: LD_ADDR_VAR 0 6
47007: PUSH
47008: LD_EXP 19
47012: PUSH
47013: LD_VAR 0 8
47017: ARRAY
47018: PUSH
47019: LD_INT 2
47021: ARRAY
47022: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47023: LD_VAR 0 5
47027: PPUSH
47028: LD_VAR 0 6
47032: PPUSH
47033: LD_INT 12
47035: PPUSH
47036: LD_INT 2
47038: PPUSH
47039: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47043: LD_ADDR_EXP 21
47047: PUSH
47048: LD_EXP 21
47052: PPUSH
47053: LD_VAR 0 7
47057: PPUSH
47058: LD_VAR 0 7
47062: PPUSH
47063: LD_VAR 0 5
47067: PPUSH
47068: LD_VAR 0 6
47072: PPUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 100
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 70
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: LD_INT 40
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 10
47105: PUSH
47106: LD_INT 25
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 20
47115: PUSH
47116: LD_INT 100
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: PPUSH
47130: CALL_OW 418
47134: PPUSH
47135: CALL_OW 1
47139: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47140: LD_EXP 24
47144: PUSH
47145: LD_INT 20
47147: PPUSH
47148: LD_VAR 0 7
47152: PPUSH
47153: CALL_OW 321
47157: PUSH
47158: LD_INT 1
47160: EQUAL
47161: AND
47162: IFFALSE 47179
// SetTech ( tech_SibDet , side , state_researched ) ;
47164: LD_INT 20
47166: PPUSH
47167: LD_VAR 0 7
47171: PPUSH
47172: LD_INT 2
47174: PPUSH
47175: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47179: LD_INT 24
47181: PPUSH
47182: LD_VAR 0 7
47186: PPUSH
47187: LD_INT 0
47189: PPUSH
47190: CALL_OW 322
// if mpSibBomb = 1 then
47194: LD_EXP 26
47198: PUSH
47199: LD_INT 1
47201: EQUAL
47202: IFFALSE 47221
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47204: LD_INT 25
47206: PPUSH
47207: LD_VAR 0 7
47211: PPUSH
47212: LD_INT 1
47214: PPUSH
47215: CALL_OW 322
// end else
47219: GO 47236
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47221: LD_INT 25
47223: PPUSH
47224: LD_VAR 0 7
47228: PPUSH
47229: LD_INT 0
47231: PPUSH
47232: CALL_OW 322
// end ; if mpVehicles then
47236: LD_EXP 33
47240: IFFALSE 47339
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47242: LD_ADDR_VAR 0 3
47246: PUSH
47247: LD_VAR 0 7
47251: PPUSH
47252: LD_VAR 0 9
47256: PPUSH
47257: LD_EXP 33
47261: PPUSH
47262: CALL 48426 0 3
47266: PUSH
47267: FOR_IN
47268: IFFALSE 47337
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47270: LD_VAR 0 3
47274: PPUSH
47275: LD_INT 0
47277: PPUSH
47278: LD_INT 5
47280: PPUSH
47281: CALL_OW 12
47285: PPUSH
47286: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47290: LD_VAR 0 3
47294: PPUSH
47295: LD_EXP 19
47299: PUSH
47300: LD_VAR 0 8
47304: ARRAY
47305: PUSH
47306: LD_INT 1
47308: ARRAY
47309: PPUSH
47310: LD_EXP 19
47314: PUSH
47315: LD_VAR 0 8
47319: ARRAY
47320: PUSH
47321: LD_INT 2
47323: ARRAY
47324: PPUSH
47325: LD_INT 12
47327: PPUSH
47328: LD_INT 0
47330: PPUSH
47331: CALL_OW 50
// end ;
47335: GO 47267
47337: POP
47338: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47339: LD_ADDR_VAR 0 11
47343: PUSH
47344: LD_VAR 0 7
47348: PPUSH
47349: LD_VAR 0 9
47353: PPUSH
47354: LD_EXP 22
47358: PPUSH
47359: LD_EXP 23
47363: PPUSH
47364: CALL 47928 0 4
47368: ST_TO_ADDR
// for j in team do
47369: LD_ADDR_VAR 0 3
47373: PUSH
47374: LD_VAR 0 11
47378: PUSH
47379: FOR_IN
47380: IFFALSE 47429
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47382: LD_VAR 0 3
47386: PPUSH
47387: LD_EXP 19
47391: PUSH
47392: LD_VAR 0 8
47396: ARRAY
47397: PUSH
47398: LD_INT 1
47400: ARRAY
47401: PPUSH
47402: LD_EXP 19
47406: PUSH
47407: LD_VAR 0 8
47411: ARRAY
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: LD_INT 12
47419: PPUSH
47420: LD_INT 0
47422: PPUSH
47423: CALL_OW 50
47427: GO 47379
47429: POP
47430: POP
// if mpApemans then
47431: LD_EXP 28
47435: IFFALSE 47514
// begin for j := 1 to mpApemans do
47437: LD_ADDR_VAR 0 3
47441: PUSH
47442: DOUBLE
47443: LD_INT 1
47445: DEC
47446: ST_TO_ADDR
47447: LD_EXP 28
47451: PUSH
47452: FOR_TO
47453: IFFALSE 47512
// begin PrepareApeman ( - 5 ) ;
47455: LD_INT 5
47457: NEG
47458: PPUSH
47459: CALL 36841 0 1
// ape := CreateHuman ;
47463: LD_ADDR_VAR 0 10
47467: PUSH
47468: CALL_OW 44
47472: ST_TO_ADDR
// SetTag ( ape , side ) ;
47473: LD_VAR 0 10
47477: PPUSH
47478: LD_VAR 0 7
47482: PPUSH
47483: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47487: LD_VAR 0 10
47491: PPUSH
47492: LD_EXP 29
47496: PUSH
47497: LD_VAR 0 8
47501: ARRAY
47502: PPUSH
47503: LD_INT 0
47505: PPUSH
47506: CALL_OW 49
// end ;
47510: GO 47452
47512: POP
47513: POP
// end ; end ;
47514: GO 46299
47516: POP
47517: POP
// if not mpTeamGame then
47518: LD_EXP 9
47522: NOT
47523: IFFALSE 47621
// begin for i := 1 to 8 do
47525: LD_ADDR_VAR 0 2
47529: PUSH
47530: DOUBLE
47531: LD_INT 1
47533: DEC
47534: ST_TO_ADDR
47535: LD_INT 8
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47617
// for j := 1 to 8 do
47541: LD_ADDR_VAR 0 3
47545: PUSH
47546: DOUBLE
47547: LD_INT 1
47549: DEC
47550: ST_TO_ADDR
47551: LD_INT 8
47553: PUSH
47554: FOR_TO
47555: IFFALSE 47613
// if i <> j then
47557: LD_VAR 0 2
47561: PUSH
47562: LD_VAR 0 3
47566: NONEQUAL
47567: IFFALSE 47591
// SetAttitude ( i , j , att_neutral , true ) else
47569: LD_VAR 0 2
47573: PPUSH
47574: LD_VAR 0 3
47578: PPUSH
47579: LD_INT 0
47581: PPUSH
47582: LD_INT 1
47584: PPUSH
47585: CALL_OW 80
47589: GO 47611
// SetAttitude ( i , j , att_friend , true ) ;
47591: LD_VAR 0 2
47595: PPUSH
47596: LD_VAR 0 3
47600: PPUSH
47601: LD_INT 1
47603: PPUSH
47604: LD_INT 1
47606: PPUSH
47607: CALL_OW 80
47611: GO 47554
47613: POP
47614: POP
47615: GO 47538
47617: POP
47618: POP
// end else
47619: GO 47796
// begin if mpSharedVision then
47621: LD_EXP 14
47625: IFFALSE 47690
// begin for i in mpTeams do
47627: LD_ADDR_VAR 0 2
47631: PUSH
47632: LD_EXP 8
47636: PUSH
47637: FOR_IN
47638: IFFALSE 47688
// for j := 2 to i do
47640: LD_ADDR_VAR 0 3
47644: PUSH
47645: DOUBLE
47646: LD_INT 2
47648: DEC
47649: ST_TO_ADDR
47650: LD_VAR 0 2
47654: PUSH
47655: FOR_TO
47656: IFFALSE 47684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47658: LD_VAR 0 2
47662: PUSH
47663: LD_VAR 0 3
47667: ARRAY
47668: PPUSH
47669: LD_VAR 0 2
47673: PUSH
47674: LD_INT 1
47676: ARRAY
47677: PPUSH
47678: CALL_OW 343
47682: GO 47655
47684: POP
47685: POP
47686: GO 47637
47688: POP
47689: POP
// end ; for i := 1 to 8 do
47690: LD_ADDR_VAR 0 2
47694: PUSH
47695: DOUBLE
47696: LD_INT 1
47698: DEC
47699: ST_TO_ADDR
47700: LD_INT 8
47702: PUSH
47703: FOR_TO
47704: IFFALSE 47794
// for j := 1 to 8 do
47706: LD_ADDR_VAR 0 3
47710: PUSH
47711: DOUBLE
47712: LD_INT 1
47714: DEC
47715: ST_TO_ADDR
47716: LD_INT 8
47718: PUSH
47719: FOR_TO
47720: IFFALSE 47790
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47722: LD_EXP 6
47726: PUSH
47727: LD_VAR 0 2
47731: ARRAY
47732: PUSH
47733: LD_EXP 6
47737: PUSH
47738: LD_VAR 0 3
47742: ARRAY
47743: EQUAL
47744: IFFALSE 47768
// SetAttitude ( i , j , att_friend , true ) else
47746: LD_VAR 0 2
47750: PPUSH
47751: LD_VAR 0 3
47755: PPUSH
47756: LD_INT 1
47758: PPUSH
47759: LD_INT 1
47761: PPUSH
47762: CALL_OW 80
47766: GO 47788
// SetAttitude ( i , j , att_enemy , true ) ;
47768: LD_VAR 0 2
47772: PPUSH
47773: LD_VAR 0 3
47777: PPUSH
47778: LD_INT 2
47780: PPUSH
47781: LD_INT 1
47783: PPUSH
47784: CALL_OW 80
47788: GO 47719
47790: POP
47791: POP
47792: GO 47703
47794: POP
47795: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47796: LD_ADDR_OWVAR 71
47800: PUSH
47801: LD_EXP 7
47805: PUSH
47806: LD_OWVAR 2
47810: ARRAY
47811: ST_TO_ADDR
// if IAmSpec then
47812: CALL_OW 531
47816: IFFALSE 47857
// begin FogOff ( true ) ;
47818: LD_INT 1
47820: PPUSH
47821: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47825: LD_EXP 27
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PUSH
47834: LD_INT 2
47836: DIV
47837: PPUSH
47838: LD_EXP 27
47842: PUSH
47843: LD_INT 2
47845: ARRAY
47846: PUSH
47847: LD_INT 2
47849: DIV
47850: PPUSH
47851: CALL_OW 86
// end else
47855: GO 47903
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47857: LD_EXP 19
47861: PUSH
47862: LD_EXP 5
47866: PUSH
47867: LD_OWVAR 2
47871: ARRAY
47872: ARRAY
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: PPUSH
47878: LD_EXP 19
47882: PUSH
47883: LD_EXP 5
47887: PUSH
47888: LD_OWVAR 2
47892: ARRAY
47893: ARRAY
47894: PUSH
47895: LD_INT 2
47897: ARRAY
47898: PPUSH
47899: CALL_OW 86
// end ; BeginBuildUp ;
47903: CALL 48904 0 0
// enable ( mpActive ) ;
47907: LD_INT 100
47909: ENABLE_MARKED
// enable ( mpGameType ) ;
47910: LD_EXP 1
47914: ENABLE_MARKED
// mpGameActive := true ;
47915: LD_ADDR_EXP 36
47919: PUSH
47920: LD_INT 1
47922: ST_TO_ADDR
// end ;
47923: LD_VAR 0 1
47927: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47928: LD_INT 0
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
// result := [ ] ;
47934: LD_ADDR_VAR 0 5
47938: PUSH
47939: EMPTY
47940: ST_TO_ADDR
// class := class_soldier ;
47941: LD_ADDR_VAR 0 8
47945: PUSH
47946: LD_INT 1
47948: ST_TO_ADDR
// uc_side := side ;
47949: LD_ADDR_OWVAR 20
47953: PUSH
47954: LD_VAR 0 1
47958: ST_TO_ADDR
// uc_nation := nation ;
47959: LD_ADDR_OWVAR 21
47963: PUSH
47964: LD_VAR 0 2
47968: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47969: LD_ADDR_OWVAR 26
47973: PUSH
47974: LD_OWVAR 19
47978: PUSH
47979: LD_VAR 0 1
47983: ARRAY
47984: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47985: LD_INT 1
47987: PPUSH
47988: LD_INT 2
47990: PPUSH
47991: CALL_OW 12
47995: PPUSH
47996: LD_VAR 0 8
48000: PPUSH
48001: LD_VAR 0 4
48005: PUSH
48006: LD_INT 2
48008: PLUS
48009: PPUSH
48010: CALL_OW 380
// hc_importance := 105 ;
48014: LD_ADDR_OWVAR 32
48018: PUSH
48019: LD_INT 105
48021: ST_TO_ADDR
// if Multiplayer then
48022: LD_OWVAR 4
48026: IFFALSE 48066
// begin hc_gallery := MULTIAVATARS ;
48028: LD_ADDR_OWVAR 33
48032: PUSH
48033: LD_STRING MULTIAVATARS
48035: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48036: LD_ADDR_OWVAR 34
48040: PUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 525
48050: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48051: LD_ADDR_OWVAR 27
48055: PUSH
48056: LD_VAR 0 1
48060: PPUSH
48061: CALL_OW 526
48065: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48066: LD_ADDR_VAR 0 5
48070: PUSH
48071: LD_VAR 0 5
48075: PPUSH
48076: CALL_OW 44
48080: PPUSH
48081: CALL 40593 0 2
48085: ST_TO_ADDR
// if mpTeamPreset then
48086: LD_LOC 1
48090: IFFALSE 48186
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48092: LD_LOC 1
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 5
48105: PUSH
48106: LD_VAR 0 5
48110: ARRAY
48111: PPUSH
48112: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48116: LD_VAR 0 5
48120: PUSH
48121: LD_VAR 0 5
48125: ARRAY
48126: PPUSH
48127: LD_INT 1
48129: PPUSH
48130: LD_LOC 1
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: LD_INT 1
48141: PPUSH
48142: CALL_OW 260
48146: PPUSH
48147: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48151: LD_VAR 0 5
48155: PUSH
48156: LD_VAR 0 5
48160: ARRAY
48161: PPUSH
48162: LD_INT 2
48164: PPUSH
48165: LD_LOC 1
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: PPUSH
48174: LD_INT 2
48176: PPUSH
48177: CALL_OW 260
48181: PPUSH
48182: CALL_OW 239
// end ; InitHc_All ( ) ;
48186: CALL_OW 584
// class := 2 ;
48190: LD_ADDR_VAR 0 8
48194: PUSH
48195: LD_INT 2
48197: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48198: LD_ADDR_VAR 0 6
48202: PUSH
48203: DOUBLE
48204: LD_INT 1
48206: DEC
48207: ST_TO_ADDR
48208: LD_VAR 0 3
48212: PUSH
48213: LD_INT 1
48215: MINUS
48216: PUSH
48217: FOR_TO
48218: IFFALSE 48402
// begin PrepareHuman ( false , class , skill ) ;
48220: LD_INT 0
48222: PPUSH
48223: LD_VAR 0 8
48227: PPUSH
48228: LD_VAR 0 4
48232: PPUSH
48233: CALL_OW 380
// un := CreateHuman ;
48237: LD_ADDR_VAR 0 7
48241: PUSH
48242: CALL_OW 44
48246: ST_TO_ADDR
// result := Join ( result , un ) ;
48247: LD_ADDR_VAR 0 5
48251: PUSH
48252: LD_VAR 0 5
48256: PPUSH
48257: LD_VAR 0 7
48261: PPUSH
48262: CALL 40593 0 2
48266: ST_TO_ADDR
// if mpTeamPreset then
48267: LD_LOC 1
48271: IFFALSE 48367
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48273: LD_LOC 1
48277: PUSH
48278: LD_VAR 0 6
48282: PUSH
48283: LD_INT 1
48285: PLUS
48286: ARRAY
48287: PPUSH
48288: LD_VAR 0 7
48292: PPUSH
48293: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48297: LD_VAR 0 7
48301: PPUSH
48302: LD_INT 1
48304: PPUSH
48305: LD_LOC 1
48309: PUSH
48310: LD_VAR 0 6
48314: PUSH
48315: LD_INT 1
48317: PLUS
48318: ARRAY
48319: PPUSH
48320: LD_INT 1
48322: PPUSH
48323: CALL_OW 260
48327: PPUSH
48328: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48332: LD_VAR 0 7
48336: PPUSH
48337: LD_INT 2
48339: PPUSH
48340: LD_LOC 1
48344: PUSH
48345: LD_VAR 0 6
48349: PUSH
48350: LD_INT 1
48352: PLUS
48353: ARRAY
48354: PPUSH
48355: LD_INT 2
48357: PPUSH
48358: CALL_OW 260
48362: PPUSH
48363: CALL_OW 239
// end ; class := Inc ( class ) ;
48367: LD_ADDR_VAR 0 8
48371: PUSH
48372: LD_VAR 0 8
48376: PPUSH
48377: CALL 41954 0 1
48381: ST_TO_ADDR
// if class = 5 then
48382: LD_VAR 0 8
48386: PUSH
48387: LD_INT 5
48389: EQUAL
48390: IFFALSE 48400
// class := 1 ;
48392: LD_ADDR_VAR 0 8
48396: PUSH
48397: LD_INT 1
48399: ST_TO_ADDR
// end ;
48400: GO 48217
48402: POP
48403: POP
// if not mpTeamPreset then
48404: LD_LOC 1
48408: NOT
48409: IFFALSE 48421
// mpTeamPreset := result ;
48411: LD_ADDR_LOC 1
48415: PUSH
48416: LD_VAR 0 5
48420: ST_TO_ADDR
// end ;
48421: LD_VAR 0 5
48425: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48426: LD_INT 0
48428: PPUSH
48429: PPUSH
// result := [ ] ;
48430: LD_ADDR_VAR 0 4
48434: PUSH
48435: EMPTY
48436: ST_TO_ADDR
// if not vehicles then
48437: LD_VAR 0 3
48441: NOT
48442: IFFALSE 48446
// exit ;
48444: GO 48605
// for i := 1 to vehicles [ nation ] do
48446: LD_ADDR_VAR 0 5
48450: PUSH
48451: DOUBLE
48452: LD_INT 1
48454: DEC
48455: ST_TO_ADDR
48456: LD_VAR 0 3
48460: PUSH
48461: LD_VAR 0 2
48465: ARRAY
48466: PUSH
48467: FOR_TO
48468: IFFALSE 48603
// begin uc_side := side ;
48470: LD_ADDR_OWVAR 20
48474: PUSH
48475: LD_VAR 0 1
48479: ST_TO_ADDR
// uc_nation := nation ;
48480: LD_ADDR_OWVAR 21
48484: PUSH
48485: LD_VAR 0 2
48489: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48490: LD_VAR 0 3
48494: PUSH
48495: LD_VAR 0 2
48499: ARRAY
48500: PUSH
48501: LD_VAR 0 5
48505: ARRAY
48506: PUSH
48507: LD_INT 1
48509: ARRAY
48510: PPUSH
48511: LD_VAR 0 3
48515: PUSH
48516: LD_VAR 0 2
48520: ARRAY
48521: PUSH
48522: LD_VAR 0 5
48526: ARRAY
48527: PUSH
48528: LD_INT 2
48530: ARRAY
48531: PPUSH
48532: LD_VAR 0 3
48536: PUSH
48537: LD_VAR 0 2
48541: ARRAY
48542: PUSH
48543: LD_VAR 0 5
48547: ARRAY
48548: PUSH
48549: LD_INT 3
48551: ARRAY
48552: PPUSH
48553: LD_VAR 0 3
48557: PUSH
48558: LD_VAR 0 2
48562: ARRAY
48563: PUSH
48564: LD_VAR 0 5
48568: ARRAY
48569: PUSH
48570: LD_INT 4
48572: ARRAY
48573: PPUSH
48574: LD_INT 80
48576: PPUSH
48577: CALL 7722 0 5
// result := Join ( result , CreateVehicle ) ;
48581: LD_ADDR_VAR 0 4
48585: PUSH
48586: LD_VAR 0 4
48590: PPUSH
48591: CALL_OW 45
48595: PPUSH
48596: CALL 40593 0 2
48600: ST_TO_ADDR
// end ;
48601: GO 48467
48603: POP
48604: POP
// end ;
48605: LD_VAR 0 4
48609: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48610: LD_INT 0
48612: PPUSH
48613: PPUSH
// for i in mpBattleFlags do
48614: LD_ADDR_VAR 0 3
48618: PUSH
48619: LD_EXP 21
48623: PUSH
48624: FOR_IN
48625: IFFALSE 48702
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48627: LD_VAR 0 3
48631: PPUSH
48632: LD_INT 1
48634: PUSH
48635: LD_VAR 0 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_VAR 0 1
48651: PUSH
48652: LD_REAL  7.00000000000000E-0001
48655: MUL
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_VAR 0 1
48668: PUSH
48669: LD_REAL  4.00000000000000E-0001
48672: MUL
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 20
48680: PUSH
48681: LD_VAR 0 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: PPUSH
48696: CALL_OW 423
48700: GO 48624
48702: POP
48703: POP
// end ;
48704: LD_VAR 0 2
48708: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48709: LD_INT 100
48711: IFFALSE 48806
48713: GO 48715
48715: DISABLE
48716: LD_INT 0
48718: PPUSH
48719: PPUSH
// begin if mpBattleFlag <= 0 then
48720: LD_EXP 20
48724: PUSH
48725: LD_INT 0
48727: LESSEQUAL
48728: IFFALSE 48732
// exit ;
48730: GO 48806
// strength := 100 ;
48732: LD_ADDR_VAR 0 2
48736: PUSH
48737: LD_INT 100
48739: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48740: LD_EXP 20
48744: PPUSH
48745: CALL_OW 67
// strength := Dec ( strength ) ;
48749: LD_ADDR_VAR 0 2
48753: PUSH
48754: LD_VAR 0 2
48758: PPUSH
48759: CALL 41976 0 1
48763: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48764: LD_VAR 0 2
48768: PPUSH
48769: CALL 48610 0 1
// until not strength ;
48773: LD_VAR 0 2
48777: NOT
48778: IFFALSE 48740
// for i in mpBattleFlags do
48780: LD_ADDR_VAR 0 1
48784: PUSH
48785: LD_EXP 21
48789: PUSH
48790: FOR_IN
48791: IFFALSE 48804
// KillBattleFlag ( i ) ;
48793: LD_VAR 0 1
48797: PPUSH
48798: CALL_OW 419
48802: GO 48790
48804: POP
48805: POP
// end ;
48806: PPOPN 2
48808: END
// every 0 0$1 marked mpActive do var side , tmp ;
48809: GO 48811
48811: DISABLE
48812: LD_INT 0
48814: PPUSH
48815: PPUSH
// begin if mpSibBomb <= 1 then
48816: LD_EXP 26
48820: PUSH
48821: LD_INT 1
48823: LESSEQUAL
48824: IFFALSE 48828
// exit ;
48826: GO 48901
// tmp := mpSibBomb ;
48828: LD_ADDR_VAR 0 2
48832: PUSH
48833: LD_EXP 26
48837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48838: LD_INT 35
48840: PPUSH
48841: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48845: LD_ADDR_VAR 0 2
48849: PUSH
48850: LD_VAR 0 2
48854: PUSH
48855: LD_INT 35
48857: MINUS
48858: ST_TO_ADDR
// until not tmp ;
48859: LD_VAR 0 2
48863: NOT
48864: IFFALSE 48838
// for side := 1 to 8 do
48866: LD_ADDR_VAR 0 1
48870: PUSH
48871: DOUBLE
48872: LD_INT 1
48874: DEC
48875: ST_TO_ADDR
48876: LD_INT 8
48878: PUSH
48879: FOR_TO
48880: IFFALSE 48899
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48882: LD_INT 25
48884: PPUSH
48885: LD_VAR 0 1
48889: PPUSH
48890: LD_INT 1
48892: PPUSH
48893: CALL_OW 322
48897: GO 48879
48899: POP
48900: POP
// end ;
48901: PPOPN 2
48903: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48904: LD_INT 0
48906: PPUSH
48907: PPUSH
48908: PPUSH
// mpBuildUpTimeDelay := 0 ;
48909: LD_ADDR_EXP 39
48913: PUSH
48914: LD_INT 0
48916: ST_TO_ADDR
// if not mpBuildUpTime then
48917: LD_EXP 18
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 49109
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48926: LD_ADDR_EXP 39
48930: PUSH
48931: LD_INT 8400
48933: PUSH
48934: LD_INT 2100
48936: PUSH
48937: LD_EXP 18
48941: MUL
48942: PLUS
48943: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48944: LD_ADDR_EXP 40
48948: PUSH
48949: LD_INT 1
48951: ST_TO_ADDR
// for i := 1 to 8 do
48952: LD_ADDR_VAR 0 2
48956: PUSH
48957: DOUBLE
48958: LD_INT 1
48960: DEC
48961: ST_TO_ADDR
48962: LD_INT 8
48964: PUSH
48965: FOR_TO
48966: IFFALSE 49107
// if mpSidePositions [ i ] then
48968: LD_EXP 5
48972: PUSH
48973: LD_VAR 0 2
48977: ARRAY
48978: IFFALSE 49105
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48980: LD_EXP 17
48984: PUSH
48985: LD_EXP 5
48989: PUSH
48990: LD_VAR 0 2
48994: ARRAY
48995: ARRAY
48996: PPUSH
48997: LD_INT 5
48999: PPUSH
49000: CALL_OW 424
// for j := 1 to 8 do
49004: LD_ADDR_VAR 0 3
49008: PUSH
49009: DOUBLE
49010: LD_INT 1
49012: DEC
49013: ST_TO_ADDR
49014: LD_INT 8
49016: PUSH
49017: FOR_TO
49018: IFFALSE 49103
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49020: LD_EXP 5
49024: PUSH
49025: LD_VAR 0 3
49029: ARRAY
49030: PUSH
49031: LD_EXP 6
49035: PUSH
49036: LD_VAR 0 2
49040: ARRAY
49041: PUSH
49042: LD_EXP 6
49046: PUSH
49047: LD_VAR 0 3
49051: ARRAY
49052: NONEQUAL
49053: PUSH
49054: LD_EXP 9
49058: NOT
49059: PUSH
49060: LD_VAR 0 2
49064: PUSH
49065: LD_VAR 0 3
49069: NONEQUAL
49070: AND
49071: OR
49072: AND
49073: IFFALSE 49101
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49075: LD_VAR 0 3
49079: PPUSH
49080: LD_EXP 17
49084: PUSH
49085: LD_EXP 5
49089: PUSH
49090: LD_VAR 0 2
49094: ARRAY
49095: ARRAY
49096: PPUSH
49097: CALL_OW 333
49101: GO 49017
49103: POP
49104: POP
// end ;
49105: GO 48965
49107: POP
49108: POP
// end ;
49109: LD_VAR 0 1
49113: RET
// function EndBuildUp ; var i , j ; begin
49114: LD_INT 0
49116: PPUSH
49117: PPUSH
49118: PPUSH
// mpBuildUpTimeActive := false ;
49119: LD_ADDR_EXP 40
49123: PUSH
49124: LD_INT 0
49126: ST_TO_ADDR
// for i := 1 to 8 do
49127: LD_ADDR_VAR 0 2
49131: PUSH
49132: DOUBLE
49133: LD_INT 1
49135: DEC
49136: ST_TO_ADDR
49137: LD_INT 8
49139: PUSH
49140: FOR_TO
49141: IFFALSE 49282
// if mpSidePositions [ i ] then
49143: LD_EXP 5
49147: PUSH
49148: LD_VAR 0 2
49152: ARRAY
49153: IFFALSE 49280
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49155: LD_EXP 17
49159: PUSH
49160: LD_EXP 5
49164: PUSH
49165: LD_VAR 0 2
49169: ARRAY
49170: ARRAY
49171: PPUSH
49172: LD_INT 0
49174: PPUSH
49175: CALL_OW 424
// for j := 1 to 8 do
49179: LD_ADDR_VAR 0 3
49183: PUSH
49184: DOUBLE
49185: LD_INT 1
49187: DEC
49188: ST_TO_ADDR
49189: LD_INT 8
49191: PUSH
49192: FOR_TO
49193: IFFALSE 49278
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49195: LD_EXP 5
49199: PUSH
49200: LD_VAR 0 3
49204: ARRAY
49205: PUSH
49206: LD_EXP 6
49210: PUSH
49211: LD_VAR 0 2
49215: ARRAY
49216: PUSH
49217: LD_EXP 6
49221: PUSH
49222: LD_VAR 0 3
49226: ARRAY
49227: NONEQUAL
49228: PUSH
49229: LD_EXP 9
49233: NOT
49234: PUSH
49235: LD_VAR 0 2
49239: PUSH
49240: LD_VAR 0 3
49244: NONEQUAL
49245: AND
49246: OR
49247: AND
49248: IFFALSE 49276
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49250: LD_VAR 0 3
49254: PPUSH
49255: LD_EXP 17
49259: PUSH
49260: LD_EXP 5
49264: PUSH
49265: LD_VAR 0 2
49269: ARRAY
49270: ARRAY
49271: PPUSH
49272: CALL_OW 334
49276: GO 49192
49278: POP
49279: POP
// end ;
49280: GO 49140
49282: POP
49283: POP
// end ;
49284: LD_VAR 0 1
49288: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49289: LD_EXP 40
49293: IFFALSE 49468
49295: GO 49297
49297: DISABLE
49298: LD_INT 0
49300: PPUSH
49301: PPUSH
// begin for i := 1 to 8 do
49302: LD_ADDR_VAR 0 1
49306: PUSH
49307: DOUBLE
49308: LD_INT 1
49310: DEC
49311: ST_TO_ADDR
49312: LD_INT 8
49314: PUSH
49315: FOR_TO
49316: IFFALSE 49465
// if mpSidePositions [ i ] then
49318: LD_EXP 5
49322: PUSH
49323: LD_VAR 0 1
49327: ARRAY
49328: IFFALSE 49463
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49330: LD_ADDR_VAR 0 2
49334: PUSH
49335: LD_EXP 17
49339: PUSH
49340: LD_EXP 5
49344: PUSH
49345: LD_VAR 0 1
49349: ARRAY
49350: ARRAY
49351: PPUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 21
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 21
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 22
49382: PUSH
49383: LD_OWVAR 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PPUSH
49396: CALL_OW 70
49400: PUSH
49401: FOR_IN
49402: IFFALSE 49461
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49404: LD_EXP 6
49408: PUSH
49409: LD_VAR 0 1
49413: ARRAY
49414: PUSH
49415: LD_EXP 6
49419: PUSH
49420: LD_OWVAR 2
49424: ARRAY
49425: NONEQUAL
49426: PUSH
49427: LD_EXP 9
49431: NOT
49432: PUSH
49433: LD_VAR 0 1
49437: PUSH
49438: LD_OWVAR 2
49442: NONEQUAL
49443: AND
49444: OR
49445: IFFALSE 49459
// ComMoveToArea ( un , BuildUpEscape ) ;
49447: LD_VAR 0 2
49451: PPUSH
49452: LD_INT 17
49454: PPUSH
49455: CALL_OW 113
49459: GO 49401
49461: POP
49462: POP
49463: GO 49315
49465: POP
49466: POP
// enable ;
49467: ENABLE
// end ;
49468: PPOPN 2
49470: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49471: LD_EXP 18
49475: IFFALSE 49525
49477: GO 49479
49479: DISABLE
49480: LD_INT 0
49482: PPUSH
// begin tmp := mpBuildUpTime ;
49483: LD_ADDR_VAR 0 1
49487: PUSH
49488: LD_EXP 18
49492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49493: LD_INT 35
49495: PPUSH
49496: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49500: LD_ADDR_VAR 0 1
49504: PUSH
49505: LD_VAR 0 1
49509: PUSH
49510: LD_INT 35
49512: MINUS
49513: ST_TO_ADDR
// until not tmp ;
49514: LD_VAR 0 1
49518: NOT
49519: IFFALSE 49493
// EndBuildUp ;
49521: CALL 49114 0 0
// end ;
49525: PPOPN 1
49527: END
// every 0 0$1 trigger mpActive marked mpWin do
49528: LD_INT 100
49530: IFFALSE 49564
49532: GO 49534
49534: DISABLE
// begin if IAmServer then
49535: CALL_OW 518
49539: IFFALSE 49548
// wait ( 0 0$3 ) ;
49541: LD_INT 105
49543: PPUSH
49544: CALL_OW 67
// if Multiplayer then
49548: LD_OWVAR 4
49552: IFFALSE 49560
// YouWinInMultiplayer else
49554: CALL_OW 106
49558: GO 49564
// YouWin ;
49560: CALL_OW 103
// end ;
49564: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49565: LD_INT 0
49567: PPUSH
// result := false ;
49568: LD_ADDR_VAR 0 3
49572: PUSH
49573: LD_INT 0
49575: ST_TO_ADDR
// case gameType of GameTypeNormal :
49576: LD_VAR 0 1
49580: PUSH
49581: LD_INT 1
49583: DOUBLE
49584: EQUAL
49585: IFTRUE 49589
49587: GO 49662
49589: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49590: LD_ADDR_VAR 0 3
49594: PUSH
49595: LD_INT 22
49597: PUSH
49598: LD_VAR 0 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: LD_INT 21
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 33
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 33
49632: PUSH
49633: LD_INT 5
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PPUSH
49650: CALL_OW 69
49654: PPUSH
49655: CALL 4984 0 1
49659: ST_TO_ADDR
// end ; GameTypeSurvival :
49660: GO 49897
49662: LD_INT 2
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49670
49668: GO 49798
49670: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49671: LD_ADDR_VAR 0 3
49675: PUSH
49676: LD_INT 22
49678: PUSH
49679: LD_VAR 0 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 30
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 30
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PPUSH
49720: CALL_OW 69
49724: PPUSH
49725: CALL 4984 0 1
49729: PUSH
49730: LD_INT 22
49732: PUSH
49733: LD_VAR 0 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 21
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 33
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 33
49767: PUSH
49768: LD_INT 5
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PPUSH
49785: CALL_OW 69
49789: PPUSH
49790: CALL 4984 0 1
49794: AND
49795: ST_TO_ADDR
// end ; GameTypeKing :
49796: GO 49897
49798: LD_INT 3
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49806
49804: GO 49896
49806: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: LD_INT 22
49814: PUSH
49815: LD_VAR 0 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 21
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 33
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 33
49849: PUSH
49850: LD_INT 5
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PPUSH
49867: CALL_OW 69
49871: PPUSH
49872: CALL 4984 0 1
49876: PUSH
49877: LD_VAR 0 2
49881: PPUSH
49882: CALL 53083 0 1
49886: PUSH
49887: LD_EXP 32
49891: LESS
49892: AND
49893: ST_TO_ADDR
// end ; end ;
49894: GO 49897
49896: POP
// end ;
49897: LD_VAR 0 3
49901: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49902: LD_INT 100
49904: IFFALSE 50126
49906: GO 49908
49908: DISABLE
49909: LD_INT 0
49911: PPUSH
49912: PPUSH
// begin if Multiplayer then
49913: LD_OWVAR 4
49917: IFFALSE 49925
// SetPlayerSpectator ( ) else
49919: CALL_OW 572
49923: GO 49934
// FogOff ( your_side ) ;
49925: LD_OWVAR 2
49929: PPUSH
49930: CALL_OW 344
// repeat gameIsOn := false ;
49934: LD_ADDR_VAR 0 1
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// for i := 1 to 8 do
49942: LD_ADDR_VAR 0 2
49946: PUSH
49947: DOUBLE
49948: LD_INT 1
49950: DEC
49951: ST_TO_ADDR
49952: LD_INT 8
49954: PUSH
49955: FOR_TO
49956: IFFALSE 50078
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49958: LD_EXP 5
49962: PUSH
49963: LD_VAR 0 2
49967: ARRAY
49968: PUSH
49969: LD_VAR 0 2
49973: PPUSH
49974: CALL_OW 108
49978: AND
49979: PUSH
49980: LD_VAR 0 2
49984: PUSH
49985: LD_OWVAR 2
49989: NONEQUAL
49990: AND
49991: IFFALSE 50076
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49993: LD_EXP 6
49997: PUSH
49998: LD_VAR 0 2
50002: ARRAY
50003: NOT
50004: PUSH
50005: LD_EXP 6
50009: PUSH
50010: LD_VAR 0 2
50014: ARRAY
50015: PUSH
50016: LD_EXP 6
50020: PUSH
50021: LD_OWVAR 2
50025: ARRAY
50026: NONEQUAL
50027: PUSH
50028: LD_OWVAR 2
50032: PPUSH
50033: LD_VAR 0 2
50037: PPUSH
50038: CALL_OW 81
50042: PUSH
50043: LD_INT 1
50045: NONEQUAL
50046: AND
50047: OR
50048: IFFALSE 50076
// if HasPowerByGameType ( mpGameType , i ) then
50050: LD_EXP 1
50054: PPUSH
50055: LD_VAR 0 2
50059: PPUSH
50060: CALL 49565 0 2
50064: IFFALSE 50076
// begin gameIsOn := true ;
50066: LD_ADDR_VAR 0 1
50070: PUSH
50071: LD_INT 1
50073: ST_TO_ADDR
// break ;
50074: GO 50078
// end ;
50076: GO 49955
50078: POP
50079: POP
// wait ( 100 ) ;
50080: LD_INT 100
50082: PPUSH
50083: CALL_OW 67
// until not gameIsOn ;
50087: LD_VAR 0 1
50091: NOT
50092: IFFALSE 49934
// if IAmServer then
50094: CALL_OW 518
50098: IFFALSE 50107
// wait ( 0 0$3 ) ;
50100: LD_INT 105
50102: PPUSH
50103: CALL_OW 67
// if Multiplayer then
50107: LD_OWVAR 4
50111: IFFALSE 50119
// YouLostInMultiplayer else
50113: CALL_OW 107
50117: GO 50126
// YouLost (  ) ;
50119: LD_STRING 
50121: PPUSH
50122: CALL_OW 104
// end ;
50126: PPOPN 2
50128: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50129: LD_EXP 30
50133: IFFALSE 50480
50135: GO 50137
50137: DISABLE
50138: LD_INT 0
50140: PPUSH
50141: PPUSH
50142: PPUSH
50143: PPUSH
50144: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50145: LD_ADDR_VAR 0 5
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 4
50161: PUSH
50162: LD_INT 5
50164: PUSH
50165: LD_INT 6
50167: PUSH
50168: LD_INT 7
50170: PUSH
50171: LD_INT 8
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50184: LD_INT 350
50186: PPUSH
50187: CALL_OW 67
// for i := 1 to 8 do
50191: LD_ADDR_VAR 0 1
50195: PUSH
50196: DOUBLE
50197: LD_INT 1
50199: DEC
50200: ST_TO_ADDR
50201: LD_INT 8
50203: PUSH
50204: FOR_TO
50205: IFFALSE 50450
// begin j := sides [ i ] ;
50207: LD_ADDR_VAR 0 2
50211: PUSH
50212: LD_VAR 0 5
50216: PUSH
50217: LD_VAR 0 1
50221: ARRAY
50222: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50223: LD_EXP 37
50227: PUSH
50228: LD_VAR 0 2
50232: ARRAY
50233: PPUSH
50234: CALL 4984 0 1
50238: PUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: CALL_OW 108
50248: AND
50249: PUSH
50250: LD_EXP 1
50254: PPUSH
50255: LD_VAR 0 2
50259: PPUSH
50260: CALL 49565 0 2
50264: AND
50265: IFFALSE 50448
// begin wait ( mpRespawn div 3 ) ;
50267: LD_EXP 30
50271: PUSH
50272: LD_INT 3
50274: DIV
50275: PPUSH
50276: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50280: LD_ADDR_VAR 0 3
50284: PUSH
50285: LD_INT 22
50287: PUSH
50288: LD_VAR 0 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 50
50299: PUSH
50300: EMPTY
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 30
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 30
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: PPUSH
50336: CALL_OW 69
50340: ST_TO_ADDR
// if not tmp then
50341: LD_VAR 0 3
50345: NOT
50346: IFFALSE 50350
// continue ;
50348: GO 50204
// spawn := tmp [ 1 ] ;
50350: LD_ADDR_VAR 0 4
50354: PUSH
50355: LD_VAR 0 3
50359: PUSH
50360: LD_INT 1
50362: ARRAY
50363: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50364: LD_EXP 37
50368: PUSH
50369: LD_VAR 0 2
50373: ARRAY
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: PPUSH
50379: LD_VAR 0 4
50383: PPUSH
50384: CALL_OW 250
50388: PPUSH
50389: LD_VAR 0 4
50393: PPUSH
50394: CALL_OW 251
50398: PPUSH
50399: LD_INT 32
50401: PPUSH
50402: LD_INT 1
50404: PPUSH
50405: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50409: LD_ADDR_EXP 37
50413: PUSH
50414: LD_EXP 37
50418: PPUSH
50419: LD_VAR 0 2
50423: PPUSH
50424: LD_EXP 37
50428: PUSH
50429: LD_VAR 0 2
50433: ARRAY
50434: PPUSH
50435: LD_INT 1
50437: PPUSH
50438: CALL_OW 3
50442: PPUSH
50443: CALL_OW 1
50447: ST_TO_ADDR
// end ; end ;
50448: GO 50204
50450: POP
50451: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50452: LD_ADDR_VAR 0 5
50456: PUSH
50457: LD_VAR 0 5
50461: PPUSH
50462: LD_INT 1
50464: PPUSH
50465: LD_INT 8
50467: PPUSH
50468: LD_INT 1
50470: PPUSH
50471: CALL 7262 0 4
50475: ST_TO_ADDR
// until false ;
50476: LD_INT 0
50478: IFFALSE 50184
// end ;
50480: PPOPN 5
50482: END
// every 0 0$1 marked mpActive do
50483: GO 50485
50485: DISABLE
// begin enable ;
50486: ENABLE
// if not mpDisplayStrings then
50487: LD_EXP 35
50491: NOT
50492: IFFALSE 50503
// begin display_strings := [ ] ;
50494: LD_ADDR_OWVAR 47
50498: PUSH
50499: EMPTY
50500: ST_TO_ADDR
// exit ;
50501: GO 50513
// end ; display_strings := mpDisplayStrings ;
50503: LD_ADDR_OWVAR 47
50507: PUSH
50508: LD_EXP 35
50512: ST_TO_ADDR
// end ; end_of_file
50513: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50514: LD_INT 0
50516: PPUSH
50517: PPUSH
50518: PPUSH
50519: PPUSH
50520: PPUSH
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
// if GetType ( un ) = unit_vehicle then
50525: LD_VAR 0 1
50529: PPUSH
50530: CALL_OW 247
50534: PUSH
50535: LD_INT 2
50537: EQUAL
50538: IFFALSE 50542
// exit ;
50540: GO 51112
// side := GetSide ( un ) ;
50542: LD_ADDR_VAR 0 9
50546: PUSH
50547: LD_VAR 0 1
50551: PPUSH
50552: CALL_OW 255
50556: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50557: LD_EXP 1
50561: PUSH
50562: LD_INT 2
50564: EQUAL
50565: IFFALSE 50658
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50567: LD_VAR 0 1
50571: PPUSH
50572: CALL_OW 266
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: IN
50587: PUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 110
50597: PUSH
50598: LD_VAR 0 9
50602: EQUAL
50603: AND
50604: IFFALSE 50658
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50606: LD_ADDR_VAR 0 3
50610: PUSH
50611: LD_INT 22
50613: PUSH
50614: LD_VAR 0 9
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 21
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PPUSH
50637: CALL_OW 69
50641: PUSH
50642: FOR_IN
50643: IFFALSE 50656
// KillUnit ( i ) ;
50645: LD_VAR 0 3
50649: PPUSH
50650: CALL_OW 66
50654: GO 50642
50656: POP
50657: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 257
50667: PUSH
50668: LD_INT 12
50670: PUSH
50671: LD_INT 17
50673: PUSH
50674: LD_INT 15
50676: PUSH
50677: LD_INT 16
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: IN
50686: PUSH
50687: LD_VAR 0 1
50691: PPUSH
50692: CALL_OW 263
50696: PUSH
50697: LD_INT 5
50699: EQUAL
50700: OR
50701: IFFALSE 50841
// begin tag := GetTag ( un ) ;
50703: LD_ADDR_VAR 0 5
50707: PUSH
50708: LD_VAR 0 1
50712: PPUSH
50713: CALL_OW 110
50717: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50718: LD_ADDR_VAR 0 7
50722: PUSH
50723: LD_EXP 29
50727: PUSH
50728: LD_EXP 5
50732: PUSH
50733: LD_VAR 0 5
50737: ARRAY
50738: ARRAY
50739: ST_TO_ADDR
// if not area then
50740: LD_VAR 0 7
50744: NOT
50745: IFFALSE 50749
// exit ;
50747: GO 51112
// wait ( 4 4$00 ) ;
50749: LD_INT 8400
50751: PPUSH
50752: CALL_OW 67
// repeat wait ( 10 ) ;
50756: LD_INT 10
50758: PPUSH
50759: CALL_OW 67
// until not mpBlockRespThread ;
50763: LD_EXP 38
50767: NOT
50768: IFFALSE 50756
// mpBlockRespThread := true ;
50770: LD_ADDR_EXP 38
50774: PUSH
50775: LD_INT 1
50777: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50778: LD_INT 0
50780: PPUSH
50781: CALL 36841 0 1
// ape := CreateHuman ;
50785: LD_ADDR_VAR 0 4
50789: PUSH
50790: CALL_OW 44
50794: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50795: LD_VAR 0 4
50799: PPUSH
50800: LD_VAR 0 5
50804: PPUSH
50805: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50809: LD_VAR 0 4
50813: PPUSH
50814: LD_VAR 0 7
50818: PPUSH
50819: LD_INT 0
50821: PPUSH
50822: CALL_OW 49
// wait ( 10 ) ;
50826: LD_INT 10
50828: PPUSH
50829: CALL_OW 67
// mpBlockRespThread := false ;
50833: LD_ADDR_EXP 38
50837: PUSH
50838: LD_INT 0
50840: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50841: LD_VAR 0 1
50845: PPUSH
50846: CALL_OW 247
50850: PUSH
50851: LD_INT 1
50853: EQUAL
50854: PUSH
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 248
50864: PUSH
50865: LD_INT 0
50867: GREATER
50868: AND
50869: IFFALSE 51112
// begin if not mpRespawn then
50871: LD_EXP 30
50875: NOT
50876: IFFALSE 50880
// exit ;
50878: GO 51112
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50880: LD_VAR 0 9
50884: PPUSH
50885: CALL_OW 108
50889: NOT
50890: PUSH
50891: LD_EXP 1
50895: PPUSH
50896: LD_VAR 0 9
50900: PPUSH
50901: CALL 49565 0 2
50905: NOT
50906: AND
50907: IFFALSE 50911
// exit ;
50909: GO 51112
// side := GetSide ( un ) ;
50911: LD_ADDR_VAR 0 9
50915: PUSH
50916: LD_VAR 0 1
50920: PPUSH
50921: CALL_OW 255
50925: ST_TO_ADDR
// nation := GetNation ( un ) ;
50926: LD_ADDR_VAR 0 8
50930: PUSH
50931: LD_VAR 0 1
50935: PPUSH
50936: CALL_OW 248
50940: ST_TO_ADDR
// class := GetClass ( un ) ;
50941: LD_ADDR_VAR 0 6
50945: PUSH
50946: LD_VAR 0 1
50950: PPUSH
50951: CALL_OW 257
50955: ST_TO_ADDR
// if class > 4 then
50956: LD_VAR 0 6
50960: PUSH
50961: LD_INT 4
50963: GREATER
50964: IFFALSE 50974
// class := 1 ;
50966: LD_ADDR_VAR 0 6
50970: PUSH
50971: LD_INT 1
50973: ST_TO_ADDR
// repeat wait ( 10 ) ;
50974: LD_INT 10
50976: PPUSH
50977: CALL_OW 67
// until not mpBlockRespThread ;
50981: LD_EXP 38
50985: NOT
50986: IFFALSE 50974
// mpBlockRespThread := true ;
50988: LD_ADDR_EXP 38
50992: PUSH
50993: LD_INT 1
50995: ST_TO_ADDR
// uc_side := side ;
50996: LD_ADDR_OWVAR 20
51000: PUSH
51001: LD_VAR 0 9
51005: ST_TO_ADDR
// uc_nation := nation ;
51006: LD_ADDR_OWVAR 21
51010: PUSH
51011: LD_VAR 0 8
51015: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51016: LD_INT 0
51018: PPUSH
51019: LD_VAR 0 6
51023: PPUSH
51024: LD_INT 2
51026: PPUSH
51027: CALL_OW 380
// un := CreateHuman ;
51031: LD_ADDR_VAR 0 1
51035: PUSH
51036: CALL_OW 44
51040: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51041: LD_ADDR_EXP 37
51045: PUSH
51046: LD_EXP 37
51050: PPUSH
51051: LD_VAR 0 9
51055: PPUSH
51056: LD_EXP 37
51060: PUSH
51061: LD_VAR 0 9
51065: ARRAY
51066: PPUSH
51067: LD_EXP 37
51071: PUSH
51072: LD_VAR 0 9
51076: ARRAY
51077: PUSH
51078: LD_INT 1
51080: PLUS
51081: PPUSH
51082: LD_VAR 0 1
51086: PPUSH
51087: CALL_OW 1
51091: PPUSH
51092: CALL_OW 1
51096: ST_TO_ADDR
// wait ( 10 ) ;
51097: LD_INT 10
51099: PPUSH
51100: CALL_OW 67
// mpBlockRespThread := false ;
51104: LD_ADDR_EXP 38
51108: PUSH
51109: LD_INT 0
51111: ST_TO_ADDR
// end ; end ;
51112: LD_VAR 0 2
51116: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51117: LD_INT 0
51119: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 266
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: IN
51140: IFFALSE 51165
// SetBName ( building , @ & GetSide ( building ) ) ;
51142: LD_VAR 0 1
51146: PPUSH
51147: LD_STRING @
51149: PUSH
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 255
51159: STR
51160: PPUSH
51161: CALL_OW 500
// end ;
51165: LD_VAR 0 2
51169: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51170: LD_INT 0
51172: PPUSH
51173: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51174: LD_EXP 1
51178: PUSH
51179: LD_INT 2
51181: EQUAL
51182: PUSH
51183: LD_VAR 0 1
51187: PPUSH
51188: CALL_OW 266
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: IN
51203: AND
51204: IFFALSE 51269
// begin KillUnit ( building ) ;
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51215: LD_ADDR_VAR 0 5
51219: PUSH
51220: LD_INT 22
51222: PUSH
51223: LD_VAR 0 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 21
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PPUSH
51246: CALL_OW 69
51250: PUSH
51251: FOR_IN
51252: IFFALSE 51265
// KillUnit ( i ) ;
51254: LD_VAR 0 5
51258: PPUSH
51259: CALL_OW 66
51263: GO 51251
51265: POP
51266: POP
// exit ;
51267: GO 51314
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51269: LD_VAR 0 1
51273: PPUSH
51274: CALL_OW 266
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: IN
51289: IFFALSE 51314
// SetBName ( building , @ & GetSide ( building ) ) ;
51291: LD_VAR 0 1
51295: PPUSH
51296: LD_STRING @
51298: PUSH
51299: LD_VAR 0 1
51303: PPUSH
51304: CALL_OW 255
51308: STR
51309: PPUSH
51310: CALL_OW 500
// end ; end_of_file
51314: LD_VAR 0 4
51318: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51319: LD_EXP 36
51323: PUSH
51324: CALL 51529 0 0
51328: AND
51329: PUSH
51330: LD_OWVAR 4
51334: AND
51335: IFFALSE 51526
51337: GO 51339
51339: DISABLE
51340: LD_INT 0
51342: PPUSH
51343: PPUSH
// begin canWin := false ;
51344: LD_ADDR_VAR 0 2
51348: PUSH
51349: LD_INT 0
51351: ST_TO_ADDR
// if not HasPower ( your_side ) then
51352: LD_OWVAR 2
51356: PPUSH
51357: CALL 51569 0 1
51361: NOT
51362: IFFALSE 51373
// begin Multiplayer_Loose_Message ;
51364: CALL_OW 521
// enable ( mpLose ) ;
51368: LD_INT 102
51370: ENABLE_MARKED
// end else
51371: GO 51526
// begin canWin := true ;
51373: LD_ADDR_VAR 0 2
51377: PUSH
51378: LD_INT 1
51380: ST_TO_ADDR
// for i := 1 to 8 do
51381: LD_ADDR_VAR 0 1
51385: PUSH
51386: DOUBLE
51387: LD_INT 1
51389: DEC
51390: ST_TO_ADDR
51391: LD_INT 8
51393: PUSH
51394: FOR_TO
51395: IFFALSE 51512
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51397: LD_EXP 5
51401: PUSH
51402: LD_VAR 0 1
51406: ARRAY
51407: PUSH
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 108
51417: AND
51418: PUSH
51419: LD_VAR 0 1
51423: PUSH
51424: LD_OWVAR 2
51428: NONEQUAL
51429: AND
51430: IFFALSE 51510
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51432: LD_EXP 6
51436: PUSH
51437: LD_VAR 0 1
51441: ARRAY
51442: NOT
51443: PUSH
51444: LD_EXP 6
51448: PUSH
51449: LD_VAR 0 1
51453: ARRAY
51454: PUSH
51455: LD_EXP 6
51459: PUSH
51460: LD_OWVAR 2
51464: ARRAY
51465: NONEQUAL
51466: PUSH
51467: LD_OWVAR 2
51471: PPUSH
51472: LD_VAR 0 1
51476: PPUSH
51477: CALL_OW 81
51481: PUSH
51482: LD_INT 1
51484: NONEQUAL
51485: AND
51486: OR
51487: IFFALSE 51510
// if HasPower ( i ) then
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL 51569 0 1
51498: IFFALSE 51510
// begin canWin := false ;
51500: LD_ADDR_VAR 0 2
51504: PUSH
51505: LD_INT 0
51507: ST_TO_ADDR
// break ;
51508: GO 51512
// end ;
51510: GO 51394
51512: POP
51513: POP
// if canWin then
51514: LD_VAR 0 2
51518: IFFALSE 51525
// enable ( mpWin ) else
51520: LD_INT 101
51522: ENABLE_MARKED
51523: GO 51526
// enable ;
51525: ENABLE
// end ; end ;
51526: PPOPN 2
51528: END
// function CanWinLoose ; begin
51529: LD_INT 0
51531: PPUSH
// result := true ;
51532: LD_ADDR_VAR 0 1
51536: PUSH
51537: LD_INT 1
51539: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51540: CALL_OW 531
51544: PUSH
51545: CALL_OW 519
51549: PUSH
51550: LD_INT 1
51552: GREATER
51553: AND
51554: IFFALSE 51564
// result := false ;
51556: LD_ADDR_VAR 0 1
51560: PUSH
51561: LD_INT 0
51563: ST_TO_ADDR
// end ;
51564: LD_VAR 0 1
51568: RET
// function HasPower ( i ) ; begin
51569: LD_INT 0
51571: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51572: LD_ADDR_VAR 0 2
51576: PUSH
51577: LD_INT 22
51579: PUSH
51580: LD_VAR 0 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: LD_INT 21
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 33
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 33
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PPUSH
51632: CALL_OW 69
51636: ST_TO_ADDR
// end ; end_of_file
51637: LD_VAR 0 2
51641: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51642: LD_EXP 36
51646: IFFALSE 51689
51648: GO 51650
51650: DISABLE
51651: LD_INT 0
51653: PPUSH
// begin for i := 1 to 8 do
51654: LD_ADDR_VAR 0 1
51658: PUSH
51659: DOUBLE
51660: LD_INT 1
51662: DEC
51663: ST_TO_ADDR
51664: LD_INT 8
51666: PUSH
51667: FOR_TO
51668: IFFALSE 51687
// SetRestrict ( b_depot , i , state_disabled ) ;
51670: LD_INT 0
51672: PPUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: LD_INT 0
51680: PPUSH
51681: CALL_OW 324
51685: GO 51667
51687: POP
51688: POP
// end ;
51689: PPOPN 1
51691: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51692: LD_EXP 36
51696: PUSH
51697: CALL 51902 0 0
51701: AND
51702: PUSH
51703: LD_OWVAR 4
51707: AND
51708: IFFALSE 51899
51710: GO 51712
51712: DISABLE
51713: LD_INT 0
51715: PPUSH
51716: PPUSH
// begin canWin := false ;
51717: LD_ADDR_VAR 0 2
51721: PUSH
51722: LD_INT 0
51724: ST_TO_ADDR
// if not HasPower ( your_side ) then
51725: LD_OWVAR 2
51729: PPUSH
51730: CALL 51942 0 1
51734: NOT
51735: IFFALSE 51746
// begin Multiplayer_Loose_Message ;
51737: CALL_OW 521
// enable ( mpLose ) ;
51741: LD_INT 102
51743: ENABLE_MARKED
// end else
51744: GO 51899
// begin canWin := true ;
51746: LD_ADDR_VAR 0 2
51750: PUSH
51751: LD_INT 1
51753: ST_TO_ADDR
// for i := 1 to 8 do
51754: LD_ADDR_VAR 0 1
51758: PUSH
51759: DOUBLE
51760: LD_INT 1
51762: DEC
51763: ST_TO_ADDR
51764: LD_INT 8
51766: PUSH
51767: FOR_TO
51768: IFFALSE 51885
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51770: LD_EXP 5
51774: PUSH
51775: LD_VAR 0 1
51779: ARRAY
51780: PUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 108
51790: AND
51791: PUSH
51792: LD_VAR 0 1
51796: PUSH
51797: LD_OWVAR 2
51801: NONEQUAL
51802: AND
51803: IFFALSE 51883
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51805: LD_EXP 6
51809: PUSH
51810: LD_VAR 0 1
51814: ARRAY
51815: NOT
51816: PUSH
51817: LD_EXP 6
51821: PUSH
51822: LD_VAR 0 1
51826: ARRAY
51827: PUSH
51828: LD_EXP 6
51832: PUSH
51833: LD_OWVAR 2
51837: ARRAY
51838: NONEQUAL
51839: PUSH
51840: LD_OWVAR 2
51844: PPUSH
51845: LD_VAR 0 1
51849: PPUSH
51850: CALL_OW 81
51854: PUSH
51855: LD_INT 1
51857: NONEQUAL
51858: AND
51859: OR
51860: IFFALSE 51883
// if HasPower ( i ) then
51862: LD_VAR 0 1
51866: PPUSH
51867: CALL 51942 0 1
51871: IFFALSE 51883
// begin canWin := false ;
51873: LD_ADDR_VAR 0 2
51877: PUSH
51878: LD_INT 0
51880: ST_TO_ADDR
// break ;
51881: GO 51885
// end ;
51883: GO 51767
51885: POP
51886: POP
// if canWin then
51887: LD_VAR 0 2
51891: IFFALSE 51898
// enable ( mpWin ) else
51893: LD_INT 101
51895: ENABLE_MARKED
51896: GO 51899
// enable ;
51898: ENABLE
// end ; end ;
51899: PPOPN 2
51901: END
// function CanWinLoose ; begin
51902: LD_INT 0
51904: PPUSH
// result := true ;
51905: LD_ADDR_VAR 0 1
51909: PUSH
51910: LD_INT 1
51912: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51913: CALL_OW 531
51917: PUSH
51918: CALL_OW 519
51922: PUSH
51923: LD_INT 1
51925: GREATER
51926: AND
51927: IFFALSE 51937
// result := false ;
51929: LD_ADDR_VAR 0 1
51933: PUSH
51934: LD_INT 0
51936: ST_TO_ADDR
// end ;
51937: LD_VAR 0 1
51941: RET
// function HasPower ( i ) ; begin
51942: LD_INT 0
51944: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51945: LD_INT 22
51947: PUSH
51948: LD_VAR 0 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 30
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 30
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PPUSH
51989: CALL_OW 69
51993: NOT
51994: IFFALSE 51998
// exit ;
51996: GO 52063
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51998: LD_ADDR_VAR 0 2
52002: PUSH
52003: LD_INT 22
52005: PUSH
52006: LD_VAR 0 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 21
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 33
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 33
52040: PUSH
52041: LD_INT 5
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PPUSH
52058: CALL_OW 69
52062: ST_TO_ADDR
// end ; end_of_file
52063: LD_VAR 0 2
52067: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52068: LD_EXP 36
52072: IFFALSE 52411
52074: GO 52076
52076: DISABLE
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
52081: PPUSH
// begin mpKingPoints := [ ] ;
52082: LD_ADDR_EXP 41
52086: PUSH
52087: EMPTY
52088: ST_TO_ADDR
// if mpTeamGame then
52089: LD_EXP 9
52093: IFFALSE 52147
// begin for i := 1 to Count ( mpTeams ) do
52095: LD_ADDR_VAR 0 1
52099: PUSH
52100: DOUBLE
52101: LD_INT 1
52103: DEC
52104: ST_TO_ADDR
52105: LD_EXP 8
52109: PPUSH
52110: CALL 4984 0 1
52114: PUSH
52115: FOR_TO
52116: IFFALSE 52143
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52118: LD_ADDR_EXP 41
52122: PUSH
52123: LD_EXP 41
52127: PPUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: LD_INT 0
52135: PPUSH
52136: CALL_OW 1
52140: ST_TO_ADDR
52141: GO 52115
52143: POP
52144: POP
// end else
52145: GO 52190
// begin for i := 1 to 8 do
52147: LD_ADDR_VAR 0 1
52151: PUSH
52152: DOUBLE
52153: LD_INT 1
52155: DEC
52156: ST_TO_ADDR
52157: LD_INT 8
52159: PUSH
52160: FOR_TO
52161: IFFALSE 52188
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52163: LD_ADDR_EXP 41
52167: PUSH
52168: LD_EXP 41
52172: PPUSH
52173: LD_VAR 0 1
52177: PPUSH
52178: LD_INT 0
52180: PPUSH
52181: CALL_OW 1
52185: ST_TO_ADDR
52186: GO 52160
52188: POP
52189: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52190: LD_ADDR_VAR 0 3
52194: PUSH
52195: LD_INT 73
52197: PPUSH
52198: LD_INT 0
52200: PPUSH
52201: CALL_OW 517
52205: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52206: LD_ADDR_VAR 0 1
52210: PUSH
52211: DOUBLE
52212: LD_INT 1
52214: DEC
52215: ST_TO_ADDR
52216: LD_VAR 0 3
52220: PUSH
52221: LD_INT 1
52223: ARRAY
52224: PUSH
52225: FOR_TO
52226: IFFALSE 52293
// for j := 1 to 8 do
52228: LD_ADDR_VAR 0 2
52232: PUSH
52233: DOUBLE
52234: LD_INT 1
52236: DEC
52237: ST_TO_ADDR
52238: LD_INT 8
52240: PUSH
52241: FOR_TO
52242: IFFALSE 52289
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52244: LD_VAR 0 3
52248: PUSH
52249: LD_INT 1
52251: ARRAY
52252: PUSH
52253: LD_VAR 0 1
52257: ARRAY
52258: PPUSH
52259: LD_VAR 0 3
52263: PUSH
52264: LD_INT 2
52266: ARRAY
52267: PUSH
52268: LD_VAR 0 1
52272: ARRAY
52273: PPUSH
52274: LD_VAR 0 2
52278: PPUSH
52279: LD_INT 12
52281: NEG
52282: PPUSH
52283: CALL_OW 330
52287: GO 52241
52289: POP
52290: POP
52291: GO 52225
52293: POP
52294: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52295: LD_EXP 31
52299: PPUSH
52300: LD_INT 1
52302: PPUSH
52303: CALL_OW 424
// UpdateCounter ;
52307: CALL 52913 0 0
// repeat wait ( 0 0$1 ) ;
52311: LD_INT 35
52313: PPUSH
52314: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52318: LD_ADDR_VAR 0 3
52322: PUSH
52323: LD_EXP 31
52327: PPUSH
52328: LD_INT 3
52330: PUSH
52331: LD_INT 57
52333: PUSH
52334: EMPTY
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 50
52343: PUSH
52344: EMPTY
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 30
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 30
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: PPUSH
52380: CALL_OW 70
52384: ST_TO_ADDR
// if not tmp then
52385: LD_VAR 0 3
52389: NOT
52390: IFFALSE 52394
// continue ;
52392: GO 52311
// AddPoints ( tmp ) ;
52394: LD_VAR 0 3
52398: PPUSH
52399: CALL 52591 0 1
// UpdateCounter ;
52403: CALL 52913 0 0
// until false ;
52407: LD_INT 0
52409: IFFALSE 52311
// end ;
52411: PPOPN 3
52413: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52414: LD_EXP 36
52418: PUSH
52419: LD_EXP 34
52423: AND
52424: IFFALSE 52588
52426: GO 52428
52428: DISABLE
52429: LD_INT 0
52431: PPUSH
52432: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52433: LD_ADDR_VAR 0 2
52437: PUSH
52438: LD_INT 73
52440: PPUSH
52441: LD_INT 0
52443: PPUSH
52444: CALL_OW 517
52448: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52449: LD_ADDR_VAR 0 1
52453: PUSH
52454: DOUBLE
52455: LD_INT 1
52457: DEC
52458: ST_TO_ADDR
52459: LD_VAR 0 2
52463: PUSH
52464: LD_INT 1
52466: ARRAY
52467: PUSH
52468: FOR_TO
52469: IFFALSE 52510
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52471: LD_VAR 0 2
52475: PUSH
52476: LD_INT 1
52478: ARRAY
52479: PUSH
52480: LD_VAR 0 1
52484: ARRAY
52485: PPUSH
52486: LD_VAR 0 2
52490: PUSH
52491: LD_INT 2
52493: ARRAY
52494: PUSH
52495: LD_VAR 0 1
52499: ARRAY
52500: PPUSH
52501: LD_INT 125
52503: PPUSH
52504: CALL_OW 495
52508: GO 52468
52510: POP
52511: POP
// repeat wait ( mpEmissions ) ;
52512: LD_EXP 34
52516: PPUSH
52517: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52521: LD_ADDR_VAR 0 1
52525: PUSH
52526: DOUBLE
52527: LD_INT 1
52529: DEC
52530: ST_TO_ADDR
52531: LD_VAR 0 2
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: PUSH
52540: FOR_TO
52541: IFFALSE 52582
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52543: LD_VAR 0 2
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PUSH
52552: LD_VAR 0 1
52556: ARRAY
52557: PPUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 2
52565: ARRAY
52566: PUSH
52567: LD_VAR 0 1
52571: ARRAY
52572: PPUSH
52573: LD_INT 15
52575: PPUSH
52576: CALL_OW 495
52580: GO 52540
52582: POP
52583: POP
// until false ;
52584: LD_INT 0
52586: IFFALSE 52512
// end ;
52588: PPOPN 2
52590: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52591: LD_INT 0
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
// if mpTeamGame then
52598: LD_EXP 9
52602: IFFALSE 52799
// begin first := depots [ 1 ] ;
52604: LD_ADDR_VAR 0 4
52608: PUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: ST_TO_ADDR
// side := GetSide ( first ) ;
52618: LD_ADDR_VAR 0 6
52622: PUSH
52623: LD_VAR 0 4
52627: PPUSH
52628: CALL_OW 255
52632: ST_TO_ADDR
// for i := 1 to mpTeams do
52633: LD_ADDR_VAR 0 3
52637: PUSH
52638: DOUBLE
52639: LD_INT 1
52641: DEC
52642: ST_TO_ADDR
52643: LD_EXP 8
52647: PUSH
52648: FOR_TO
52649: IFFALSE 52683
// if side in mpTeams [ i ] then
52651: LD_VAR 0 6
52655: PUSH
52656: LD_EXP 8
52660: PUSH
52661: LD_VAR 0 3
52665: ARRAY
52666: IN
52667: IFFALSE 52681
// begin team := i ;
52669: LD_ADDR_VAR 0 5
52673: PUSH
52674: LD_VAR 0 3
52678: ST_TO_ADDR
// break ;
52679: GO 52683
// end ;
52681: GO 52648
52683: POP
52684: POP
// if not team then
52685: LD_VAR 0 5
52689: NOT
52690: IFFALSE 52694
// exit ;
52692: GO 52908
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52694: LD_EXP 31
52698: PPUSH
52699: LD_INT 81
52701: PUSH
52702: LD_VAR 0 6
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PPUSH
52711: CALL_OW 70
52715: IFFALSE 52719
// exit ;
52717: GO 52908
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52719: LD_ADDR_EXP 41
52723: PUSH
52724: LD_EXP 41
52728: PPUSH
52729: LD_VAR 0 5
52733: PPUSH
52734: LD_EXP 41
52738: PUSH
52739: LD_VAR 0 5
52743: ARRAY
52744: PUSH
52745: LD_INT 1
52747: PLUS
52748: PPUSH
52749: CALL_OW 1
52753: ST_TO_ADDR
// for i in mpTeams [ team ] do
52754: LD_ADDR_VAR 0 3
52758: PUSH
52759: LD_EXP 8
52763: PUSH
52764: LD_VAR 0 5
52768: ARRAY
52769: PUSH
52770: FOR_IN
52771: IFFALSE 52795
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52773: LD_VAR 0 3
52777: PPUSH
52778: LD_EXP 41
52782: PUSH
52783: LD_VAR 0 5
52787: ARRAY
52788: PPUSH
52789: CALL_OW 506
52793: GO 52770
52795: POP
52796: POP
// end else
52797: GO 52908
// begin first := depots [ 1 ] ;
52799: LD_ADDR_VAR 0 4
52803: PUSH
52804: LD_VAR 0 1
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: ST_TO_ADDR
// side := GetSide ( first ) ;
52813: LD_ADDR_VAR 0 6
52817: PUSH
52818: LD_VAR 0 4
52822: PPUSH
52823: CALL_OW 255
52827: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52828: LD_EXP 31
52832: PPUSH
52833: LD_INT 81
52835: PUSH
52836: LD_VAR 0 6
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PPUSH
52845: CALL_OW 70
52849: IFFALSE 52853
// exit ;
52851: GO 52908
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52853: LD_ADDR_EXP 41
52857: PUSH
52858: LD_EXP 41
52862: PPUSH
52863: LD_VAR 0 6
52867: PPUSH
52868: LD_EXP 41
52872: PUSH
52873: LD_VAR 0 6
52877: ARRAY
52878: PUSH
52879: LD_INT 1
52881: PLUS
52882: PPUSH
52883: CALL_OW 1
52887: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52888: LD_VAR 0 6
52892: PPUSH
52893: LD_EXP 41
52897: PUSH
52898: LD_VAR 0 6
52902: ARRAY
52903: PPUSH
52904: CALL_OW 506
// end ; end ;
52908: LD_VAR 0 2
52912: RET
// function UpdateCounter ; var i ; begin
52913: LD_INT 0
52915: PPUSH
52916: PPUSH
// result := [ ] ;
52917: LD_ADDR_VAR 0 1
52921: PUSH
52922: EMPTY
52923: ST_TO_ADDR
// if mpTeamGame then
52924: LD_EXP 9
52928: IFFALSE 52995
// begin for i := 1 to mpTeams do
52930: LD_ADDR_VAR 0 2
52934: PUSH
52935: DOUBLE
52936: LD_INT 1
52938: DEC
52939: ST_TO_ADDR
52940: LD_EXP 8
52944: PUSH
52945: FOR_TO
52946: IFFALSE 52991
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52948: LD_ADDR_VAR 0 1
52952: PUSH
52953: LD_VAR 0 1
52957: PUSH
52958: LD_STRING #KingoftheHill-Team
52960: PUSH
52961: LD_VAR 0 2
52965: PUSH
52966: LD_EXP 41
52970: PUSH
52971: LD_VAR 0 2
52975: ARRAY
52976: PUSH
52977: LD_EXP 32
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ADD
52988: ST_TO_ADDR
52989: GO 52945
52991: POP
52992: POP
// end else
52993: GO 53068
// begin for i := 1 to 8 do
52995: LD_ADDR_VAR 0 2
52999: PUSH
53000: DOUBLE
53001: LD_INT 1
53003: DEC
53004: ST_TO_ADDR
53005: LD_INT 8
53007: PUSH
53008: FOR_TO
53009: IFFALSE 53066
// if mpSidePositions [ i ] then
53011: LD_EXP 5
53015: PUSH
53016: LD_VAR 0 2
53020: ARRAY
53021: IFFALSE 53064
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53023: LD_ADDR_VAR 0 1
53027: PUSH
53028: LD_VAR 0 1
53032: PUSH
53033: LD_STRING #KingoftheHill-Player
53035: PUSH
53036: LD_VAR 0 2
53040: PUSH
53041: LD_EXP 41
53045: PUSH
53046: LD_VAR 0 2
53050: ARRAY
53051: PUSH
53052: LD_EXP 32
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ADD
53063: ST_TO_ADDR
53064: GO 53008
53066: POP
53067: POP
// end ; mpDisplayStrings := result ;
53068: LD_ADDR_EXP 35
53072: PUSH
53073: LD_VAR 0 1
53077: ST_TO_ADDR
// end ;
53078: LD_VAR 0 1
53082: RET
// export function HowMuchPointsKing ( side ) ; begin
53083: LD_INT 0
53085: PPUSH
// result := HowMuchPoints ( side ) ;
53086: LD_ADDR_VAR 0 2
53090: PUSH
53091: LD_VAR 0 1
53095: PPUSH
53096: CALL 53106 0 1
53100: ST_TO_ADDR
// end ;
53101: LD_VAR 0 2
53105: RET
// function HowMuchPoints ( side ) ; var i ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
// if mpTeamGame then
53110: LD_EXP 9
53114: IFFALSE 53183
// begin for i := 1 to Count ( mpTeams ) do
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: DOUBLE
53122: LD_INT 1
53124: DEC
53125: ST_TO_ADDR
53126: LD_EXP 8
53130: PPUSH
53131: CALL 4984 0 1
53135: PUSH
53136: FOR_TO
53137: IFFALSE 53179
// begin if side in mpTeams [ i ] then
53139: LD_VAR 0 1
53143: PUSH
53144: LD_EXP 8
53148: PUSH
53149: LD_VAR 0 3
53153: ARRAY
53154: IN
53155: IFFALSE 53177
// begin result := mpKingPoints [ i ] ;
53157: LD_ADDR_VAR 0 2
53161: PUSH
53162: LD_EXP 41
53166: PUSH
53167: LD_VAR 0 3
53171: ARRAY
53172: ST_TO_ADDR
// exit ;
53173: POP
53174: POP
53175: GO 53199
// end ; end ;
53177: GO 53136
53179: POP
53180: POP
// end else
53181: GO 53199
// result := mpKingPoints [ side ] ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_EXP 41
53192: PUSH
53193: LD_VAR 0 1
53197: ARRAY
53198: ST_TO_ADDR
// end ;
53199: LD_VAR 0 2
53203: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53204: LD_EXP 36
53208: PUSH
53209: CALL 53531 0 0
53213: AND
53214: PUSH
53215: LD_OWVAR 4
53219: AND
53220: IFFALSE 53456
53222: GO 53224
53224: DISABLE
53225: LD_INT 0
53227: PPUSH
53228: PPUSH
// begin canWin := false ;
53229: LD_ADDR_VAR 0 2
53233: PUSH
53234: LD_INT 0
53236: ST_TO_ADDR
// if not HasPower ( your_side ) then
53237: LD_OWVAR 2
53241: PPUSH
53242: CALL 53571 0 1
53246: NOT
53247: IFFALSE 53258
// begin Multiplayer_Loose_Message ;
53249: CALL_OW 521
// enable ( mpLose ) ;
53253: LD_INT 102
53255: ENABLE_MARKED
// end else
53256: GO 53456
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53258: LD_ADDR_VAR 0 2
53262: PUSH
53263: LD_OWVAR 2
53267: PPUSH
53268: CALL 53106 0 1
53272: PUSH
53273: LD_EXP 32
53277: GREATEREQUAL
53278: PUSH
53279: LD_OWVAR 2
53283: PPUSH
53284: CALL 53571 0 1
53288: AND
53289: PUSH
53290: CALL 53459 0 0
53294: NOT
53295: OR
53296: ST_TO_ADDR
// for i := 1 to 8 do
53297: LD_ADDR_VAR 0 1
53301: PUSH
53302: DOUBLE
53303: LD_INT 1
53305: DEC
53306: ST_TO_ADDR
53307: LD_INT 8
53309: PUSH
53310: FOR_TO
53311: IFFALSE 53442
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53313: LD_EXP 5
53317: PUSH
53318: LD_VAR 0 1
53322: ARRAY
53323: PUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 108
53333: AND
53334: PUSH
53335: LD_VAR 0 1
53339: PUSH
53340: LD_OWVAR 2
53344: NONEQUAL
53345: AND
53346: IFFALSE 53440
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53348: LD_EXP 6
53352: PUSH
53353: LD_VAR 0 1
53357: ARRAY
53358: NOT
53359: PUSH
53360: LD_EXP 6
53364: PUSH
53365: LD_VAR 0 1
53369: ARRAY
53370: PUSH
53371: LD_EXP 6
53375: PUSH
53376: LD_OWVAR 2
53380: ARRAY
53381: NONEQUAL
53382: PUSH
53383: LD_OWVAR 2
53387: PPUSH
53388: LD_VAR 0 1
53392: PPUSH
53393: CALL_OW 81
53397: PUSH
53398: LD_INT 1
53400: NONEQUAL
53401: AND
53402: OR
53403: IFFALSE 53440
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53405: LD_VAR 0 1
53409: PPUSH
53410: CALL 53106 0 1
53414: PUSH
53415: LD_EXP 32
53419: GREATEREQUAL
53420: PUSH
53421: LD_VAR 0 1
53425: PPUSH
53426: CALL 53571 0 1
53430: AND
53431: IFFALSE 53440
// begin enable ( mpLose ) ;
53433: LD_INT 102
53435: ENABLE_MARKED
// exit ;
53436: POP
53437: POP
53438: GO 53456
// end ;
53440: GO 53310
53442: POP
53443: POP
// if canWin then
53444: LD_VAR 0 2
53448: IFFALSE 53455
// enable ( mpWin ) else
53450: LD_INT 101
53452: ENABLE_MARKED
53453: GO 53456
// enable ;
53455: ENABLE
// end ; end ;
53456: PPOPN 2
53458: END
// function EnemiesInGame ; var i ; begin
53459: LD_INT 0
53461: PPUSH
53462: PPUSH
// result := false ;
53463: LD_ADDR_VAR 0 1
53467: PUSH
53468: LD_INT 0
53470: ST_TO_ADDR
// for i := 1 to 8 do
53471: LD_ADDR_VAR 0 2
53475: PUSH
53476: DOUBLE
53477: LD_INT 1
53479: DEC
53480: ST_TO_ADDR
53481: LD_INT 8
53483: PUSH
53484: FOR_TO
53485: IFFALSE 53524
// if i <> your_side and HasPower ( i ) then
53487: LD_VAR 0 2
53491: PUSH
53492: LD_OWVAR 2
53496: NONEQUAL
53497: PUSH
53498: LD_VAR 0 2
53502: PPUSH
53503: CALL 53571 0 1
53507: AND
53508: IFFALSE 53522
// begin result := true ;
53510: LD_ADDR_VAR 0 1
53514: PUSH
53515: LD_INT 1
53517: ST_TO_ADDR
// exit ;
53518: POP
53519: POP
53520: GO 53526
// end ;
53522: GO 53484
53524: POP
53525: POP
// end ;
53526: LD_VAR 0 1
53530: RET
// function CanWinLoose ; begin
53531: LD_INT 0
53533: PPUSH
// result := true ;
53534: LD_ADDR_VAR 0 1
53538: PUSH
53539: LD_INT 1
53541: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53542: CALL_OW 531
53546: PUSH
53547: CALL_OW 519
53551: PUSH
53552: LD_INT 1
53554: GREATER
53555: AND
53556: IFFALSE 53566
// result := false ;
53558: LD_ADDR_VAR 0 1
53562: PUSH
53563: LD_INT 0
53565: ST_TO_ADDR
// end ;
53566: LD_VAR 0 1
53570: RET
// function HasPower ( i ) ; begin
53571: LD_INT 0
53573: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53574: LD_ADDR_VAR 0 2
53578: PUSH
53579: LD_INT 22
53581: PUSH
53582: LD_VAR 0 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 21
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 33
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 33
53616: PUSH
53617: LD_INT 5
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PPUSH
53634: CALL_OW 69
53638: ST_TO_ADDR
// end ; end_of_file end_of_file
53639: LD_VAR 0 2
53643: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53644: LD_VAR 0 1
53648: PUSH
53649: LD_INT 200
53651: DOUBLE
53652: GREATEREQUAL
53653: IFFALSE 53661
53655: LD_INT 299
53657: DOUBLE
53658: LESSEQUAL
53659: IFTRUE 53663
53661: GO 53695
53663: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53664: LD_VAR 0 1
53668: PPUSH
53669: LD_VAR 0 2
53673: PPUSH
53674: LD_VAR 0 3
53678: PPUSH
53679: LD_VAR 0 4
53683: PPUSH
53684: LD_VAR 0 5
53688: PPUSH
53689: CALL 54392 0 5
53693: GO 53772
53695: LD_INT 300
53697: DOUBLE
53698: GREATEREQUAL
53699: IFFALSE 53707
53701: LD_INT 399
53703: DOUBLE
53704: LESSEQUAL
53705: IFTRUE 53709
53707: GO 53771
53709: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53710: LD_VAR 0 1
53714: PPUSH
53715: LD_VAR 0 2
53719: PPUSH
53720: LD_VAR 0 3
53724: PPUSH
53725: LD_VAR 0 4
53729: PPUSH
53730: LD_VAR 0 5
53734: PPUSH
53735: LD_VAR 0 6
53739: PPUSH
53740: LD_VAR 0 7
53744: PPUSH
53745: LD_VAR 0 8
53749: PPUSH
53750: LD_VAR 0 9
53754: PPUSH
53755: LD_VAR 0 10
53759: PPUSH
53760: LD_VAR 0 11
53764: PPUSH
53765: CALL 59139 0 11
53769: GO 53772
53771: POP
// end ;
53772: PPOPN 11
53774: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53775: LD_VAR 0 1
53779: PPUSH
53780: LD_VAR 0 2
53784: PPUSH
53785: LD_VAR 0 3
53789: PPUSH
53790: LD_VAR 0 4
53794: PPUSH
53795: LD_VAR 0 5
53799: PPUSH
53800: CALL 53857 0 5
// end ; end_of_file
53804: PPOPN 5
53806: END
// export function SOS_UnitDestroyed ( un ) ; begin
53807: LD_INT 0
53809: PPUSH
// ComRadiation ( un ) ;
53810: LD_VAR 0 1
53814: PPUSH
53815: CALL 54796 0 1
// end ;
53819: LD_VAR 0 2
53823: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53824: LD_INT 0
53826: PPUSH
// ComRadiation ( un ) ;
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL 54796 0 1
// end ;
53836: LD_VAR 0 2
53840: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53841: LD_INT 0
53843: PPUSH
// end ;
53844: LD_VAR 0 4
53848: RET
// export function SOS_Command ( cmd ) ; begin
53849: LD_INT 0
53851: PPUSH
// end ;
53852: LD_VAR 0 2
53856: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53857: LD_INT 0
53859: PPUSH
// end ;
53860: LD_VAR 0 6
53864: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53865: LD_INT 0
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
// if not vehicle or not factory then
53872: LD_VAR 0 1
53876: NOT
53877: PUSH
53878: LD_VAR 0 2
53882: NOT
53883: OR
53884: IFFALSE 53888
// exit ;
53886: GO 54387
// if not factoryWaypoints then
53888: LD_EXP 52
53892: NOT
53893: IFFALSE 53897
// exit ;
53895: GO 54387
// for i := 1 to Count ( factoryWaypoints ) do
53897: LD_ADDR_VAR 0 4
53901: PUSH
53902: DOUBLE
53903: LD_INT 1
53905: DEC
53906: ST_TO_ADDR
53907: LD_EXP 52
53911: PPUSH
53912: CALL 4984 0 1
53916: PUSH
53917: FOR_TO
53918: IFFALSE 54385
// if factoryWaypoints [ i ] [ 2 ] = factory then
53920: LD_EXP 52
53924: PUSH
53925: LD_VAR 0 4
53929: ARRAY
53930: PUSH
53931: LD_INT 2
53933: ARRAY
53934: PUSH
53935: LD_VAR 0 2
53939: EQUAL
53940: IFFALSE 54383
// begin if GetControl ( vehicle ) = control_manual then
53942: LD_VAR 0 1
53946: PPUSH
53947: CALL_OW 263
53951: PUSH
53952: LD_INT 1
53954: EQUAL
53955: IFFALSE 54266
// begin driver := IsDrivenBy ( vehicle ) ;
53957: LD_ADDR_VAR 0 6
53961: PUSH
53962: LD_VAR 0 1
53966: PPUSH
53967: CALL_OW 311
53971: ST_TO_ADDR
// tag := GetTag ( driver ) ;
53972: LD_ADDR_VAR 0 5
53976: PUSH
53977: LD_VAR 0 6
53981: PPUSH
53982: CALL_OW 110
53986: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
53987: LD_VAR 0 5
53991: PUSH
53992: LD_INT 501
53994: EQUAL
53995: PUSH
53996: LD_VAR 0 1
54000: PPUSH
54001: CALL_OW 110
54005: PUSH
54006: LD_INT 501
54008: EQUAL
54009: OR
54010: IFFALSE 54016
// exit ;
54012: POP
54013: POP
54014: GO 54387
// if not HasTask ( driver ) then
54016: LD_VAR 0 6
54020: PPUSH
54021: CALL_OW 314
54025: NOT
54026: IFFALSE 54264
// begin SetTag ( driver , tDriver ) ;
54028: LD_VAR 0 6
54032: PPUSH
54033: LD_INT 501
54035: PPUSH
54036: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54040: LD_VAR 0 1
54044: PPUSH
54045: LD_INT 501
54047: PPUSH
54048: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54052: LD_ADDR_VAR 0 7
54056: PUSH
54057: LD_EXP 52
54061: PUSH
54062: LD_VAR 0 4
54066: ARRAY
54067: PUSH
54068: LD_INT 3
54070: ARRAY
54071: PPUSH
54072: LD_EXP 52
54076: PUSH
54077: LD_VAR 0 4
54081: ARRAY
54082: PUSH
54083: LD_INT 4
54085: ARRAY
54086: PPUSH
54087: CALL_OW 428
54091: ST_TO_ADDR
// if hex then
54092: LD_VAR 0 7
54096: IFFALSE 54114
// ComMoveUnit ( driver , hex ) else
54098: LD_VAR 0 6
54102: PPUSH
54103: LD_VAR 0 7
54107: PPUSH
54108: CALL_OW 112
54112: GO 54153
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54114: LD_VAR 0 6
54118: PPUSH
54119: LD_EXP 52
54123: PUSH
54124: LD_VAR 0 4
54128: ARRAY
54129: PUSH
54130: LD_INT 3
54132: ARRAY
54133: PPUSH
54134: LD_EXP 52
54138: PUSH
54139: LD_VAR 0 4
54143: ARRAY
54144: PUSH
54145: LD_INT 4
54147: ARRAY
54148: PPUSH
54149: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54153: LD_VAR 0 6
54157: PPUSH
54158: CALL_OW 181
// if Multiplayer then
54162: LD_OWVAR 4
54166: IFFALSE 54215
// begin repeat wait ( 10 ) ;
54168: LD_INT 10
54170: PPUSH
54171: CALL_OW 67
// until not IsInUnit ( driver ) ;
54175: LD_VAR 0 6
54179: PPUSH
54180: CALL_OW 310
54184: NOT
54185: IFFALSE 54168
// if not HasTask ( driver ) then
54187: LD_VAR 0 6
54191: PPUSH
54192: CALL_OW 314
54196: NOT
54197: IFFALSE 54213
// ComEnterUnit ( driver , factory ) ;
54199: LD_VAR 0 6
54203: PPUSH
54204: LD_VAR 0 2
54208: PPUSH
54209: CALL_OW 120
// end else
54213: GO 54229
// AddComEnterUnit ( driver , factory ) ;
54215: LD_VAR 0 6
54219: PPUSH
54220: LD_VAR 0 2
54224: PPUSH
54225: CALL_OW 180
// wait ( 0 0$1 ) ;
54229: LD_INT 35
54231: PPUSH
54232: CALL_OW 67
// SetTag ( driver , tag ) ;
54236: LD_VAR 0 6
54240: PPUSH
54241: LD_VAR 0 5
54245: PPUSH
54246: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54250: LD_VAR 0 1
54254: PPUSH
54255: LD_INT 0
54257: PPUSH
54258: CALL_OW 109
// break ;
54262: GO 54385
// end ; end else
54264: GO 54383
// if GetControl ( vehicle ) = control_remote then
54266: LD_VAR 0 1
54270: PPUSH
54271: CALL_OW 263
54275: PUSH
54276: LD_INT 2
54278: EQUAL
54279: IFFALSE 54342
// begin wait ( 0 0$2 ) ;
54281: LD_INT 70
54283: PPUSH
54284: CALL_OW 67
// if Connect ( vehicle ) then
54288: LD_VAR 0 1
54292: PPUSH
54293: CALL 11190 0 1
54297: IFFALSE 54338
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54299: LD_VAR 0 1
54303: PPUSH
54304: LD_EXP 52
54308: PUSH
54309: LD_VAR 0 4
54313: ARRAY
54314: PUSH
54315: LD_INT 3
54317: ARRAY
54318: PPUSH
54319: LD_EXP 52
54323: PUSH
54324: LD_VAR 0 4
54328: ARRAY
54329: PUSH
54330: LD_INT 4
54332: ARRAY
54333: PPUSH
54334: CALL_OW 171
// break ;
54338: GO 54385
// end else
54340: GO 54383
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54342: LD_VAR 0 1
54346: PPUSH
54347: LD_EXP 52
54351: PUSH
54352: LD_VAR 0 4
54356: ARRAY
54357: PUSH
54358: LD_INT 3
54360: ARRAY
54361: PPUSH
54362: LD_EXP 52
54366: PUSH
54367: LD_VAR 0 4
54371: ARRAY
54372: PUSH
54373: LD_INT 4
54375: ARRAY
54376: PPUSH
54377: CALL_OW 171
// break ;
54381: GO 54385
// end ; end ;
54383: GO 53917
54385: POP
54386: POP
// end ;
54387: LD_VAR 0 3
54391: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54392: LD_INT 0
54394: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54395: LD_VAR 0 1
54399: PUSH
54400: LD_INT 250
54402: EQUAL
54403: PUSH
54404: LD_VAR 0 2
54408: PPUSH
54409: CALL_OW 264
54413: PUSH
54414: LD_INT 81
54416: EQUAL
54417: AND
54418: IFFALSE 54439
// MinerPlaceMine ( unit , x , y ) ;
54420: LD_VAR 0 2
54424: PPUSH
54425: LD_VAR 0 4
54429: PPUSH
54430: LD_VAR 0 5
54434: PPUSH
54435: CALL 57531 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54439: LD_VAR 0 1
54443: PUSH
54444: LD_INT 251
54446: EQUAL
54447: PUSH
54448: LD_VAR 0 2
54452: PPUSH
54453: CALL_OW 264
54457: PUSH
54458: LD_INT 81
54460: EQUAL
54461: AND
54462: IFFALSE 54483
// MinerDetonateMine ( unit , x , y ) ;
54464: LD_VAR 0 2
54468: PPUSH
54469: LD_VAR 0 4
54473: PPUSH
54474: LD_VAR 0 5
54478: PPUSH
54479: CALL 57806 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54483: LD_VAR 0 1
54487: PUSH
54488: LD_INT 252
54490: EQUAL
54491: PUSH
54492: LD_VAR 0 2
54496: PPUSH
54497: CALL_OW 264
54501: PUSH
54502: LD_INT 81
54504: EQUAL
54505: AND
54506: IFFALSE 54527
// MinerCreateMinefield ( unit , x , y ) ;
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_VAR 0 4
54517: PPUSH
54518: LD_VAR 0 5
54522: PPUSH
54523: CALL 58223 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54527: LD_VAR 0 1
54531: PUSH
54532: LD_INT 253
54534: EQUAL
54535: PUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 257
54545: PUSH
54546: LD_INT 5
54548: EQUAL
54549: AND
54550: IFFALSE 54571
// ComBinocular ( unit , x , y ) ;
54552: LD_VAR 0 2
54556: PPUSH
54557: LD_VAR 0 4
54561: PPUSH
54562: LD_VAR 0 5
54566: PPUSH
54567: CALL 58592 0 3
// if selectedUnit then
54571: LD_VAR 0 3
54575: IFFALSE 54631
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54577: LD_VAR 0 1
54581: PUSH
54582: LD_INT 254
54584: EQUAL
54585: PUSH
54586: LD_VAR 0 2
54590: PPUSH
54591: CALL_OW 264
54595: PUSH
54596: LD_INT 99
54598: EQUAL
54599: AND
54600: PUSH
54601: LD_VAR 0 3
54605: PPUSH
54606: CALL_OW 263
54610: PUSH
54611: LD_INT 3
54613: EQUAL
54614: AND
54615: IFFALSE 54631
// HackDestroyVehicle ( unit , selectedUnit ) ;
54617: LD_VAR 0 2
54621: PPUSH
54622: LD_VAR 0 3
54626: PPUSH
54627: CALL 56895 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54631: LD_VAR 0 1
54635: PUSH
54636: LD_INT 255
54638: EQUAL
54639: PUSH
54640: LD_VAR 0 2
54644: PPUSH
54645: CALL_OW 264
54649: PUSH
54650: LD_INT 14
54652: PUSH
54653: LD_INT 53
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: IN
54660: AND
54661: PUSH
54662: LD_VAR 0 4
54666: PPUSH
54667: LD_VAR 0 5
54671: PPUSH
54672: CALL_OW 488
54676: AND
54677: IFFALSE 54701
// CutTreeXYR ( unit , x , y , 12 ) ;
54679: LD_VAR 0 2
54683: PPUSH
54684: LD_VAR 0 4
54688: PPUSH
54689: LD_VAR 0 5
54693: PPUSH
54694: LD_INT 12
54696: PPUSH
54697: CALL 54892 0 4
// if cmd = 256 then
54701: LD_VAR 0 1
54705: PUSH
54706: LD_INT 256
54708: EQUAL
54709: IFFALSE 54730
// SetFactoryWaypoint ( unit , x , y ) ;
54711: LD_VAR 0 2
54715: PPUSH
54716: LD_VAR 0 4
54720: PPUSH
54721: LD_VAR 0 5
54725: PPUSH
54726: CALL 59147 0 3
// if cmd = 257 then
54730: LD_VAR 0 1
54734: PUSH
54735: LD_INT 257
54737: EQUAL
54738: IFFALSE 54759
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54740: LD_VAR 0 2
54744: PPUSH
54745: LD_VAR 0 4
54749: PPUSH
54750: LD_VAR 0 5
54754: PPUSH
54755: CALL 59637 0 3
// if cmd = 258 then
54759: LD_VAR 0 1
54763: PUSH
54764: LD_INT 258
54766: EQUAL
54767: IFFALSE 54791
// BurnTreeXYR ( unit , x , y , 8 ) ;
54769: LD_VAR 0 2
54773: PPUSH
54774: LD_VAR 0 4
54778: PPUSH
54779: LD_VAR 0 5
54783: PPUSH
54784: LD_INT 8
54786: PPUSH
54787: CALL 55286 0 4
// end ;
54791: LD_VAR 0 6
54795: RET
// export function ComRadiation ( un ) ; var eff ; begin
54796: LD_INT 0
54798: PPUSH
54799: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 264
54809: PUSH
54810: LD_INT 91
54812: NONEQUAL
54813: IFFALSE 54817
// exit ;
54815: GO 54887
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54817: LD_INT 68
54819: PPUSH
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 255
54829: PPUSH
54830: CALL_OW 321
54834: PUSH
54835: LD_INT 2
54837: EQUAL
54838: IFFALSE 54850
// eff := 70 else
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_INT 70
54847: ST_TO_ADDR
54848: GO 54858
// eff := 30 ;
54850: LD_ADDR_VAR 0 3
54854: PUSH
54855: LD_INT 30
54857: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54858: LD_VAR 0 1
54862: PPUSH
54863: CALL_OW 250
54867: PPUSH
54868: LD_VAR 0 1
54872: PPUSH
54873: CALL_OW 251
54877: PPUSH
54878: LD_VAR 0 3
54882: PPUSH
54883: CALL_OW 495
// end ;
54887: LD_VAR 0 2
54891: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54892: LD_INT 0
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54903: LD_VAR 0 1
54907: PPUSH
54908: CALL_OW 302
54912: NOT
54913: PUSH
54914: LD_VAR 0 2
54918: PPUSH
54919: LD_VAR 0 3
54923: PPUSH
54924: CALL_OW 488
54928: NOT
54929: OR
54930: PUSH
54931: LD_VAR 0 4
54935: NOT
54936: OR
54937: IFFALSE 54941
// exit ;
54939: GO 55281
// list := [ ] ;
54941: LD_ADDR_VAR 0 13
54945: PUSH
54946: EMPTY
54947: ST_TO_ADDR
// if x - r < 0 then
54948: LD_VAR 0 2
54952: PUSH
54953: LD_VAR 0 4
54957: MINUS
54958: PUSH
54959: LD_INT 0
54961: LESS
54962: IFFALSE 54974
// min_x := 0 else
54964: LD_ADDR_VAR 0 7
54968: PUSH
54969: LD_INT 0
54971: ST_TO_ADDR
54972: GO 54990
// min_x := x - r ;
54974: LD_ADDR_VAR 0 7
54978: PUSH
54979: LD_VAR 0 2
54983: PUSH
54984: LD_VAR 0 4
54988: MINUS
54989: ST_TO_ADDR
// if y - r < 0 then
54990: LD_VAR 0 3
54994: PUSH
54995: LD_VAR 0 4
54999: MINUS
55000: PUSH
55001: LD_INT 0
55003: LESS
55004: IFFALSE 55016
// min_y := 0 else
55006: LD_ADDR_VAR 0 8
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
55014: GO 55032
// min_y := y - r ;
55016: LD_ADDR_VAR 0 8
55020: PUSH
55021: LD_VAR 0 3
55025: PUSH
55026: LD_VAR 0 4
55030: MINUS
55031: ST_TO_ADDR
// max_x := x + r ;
55032: LD_ADDR_VAR 0 9
55036: PUSH
55037: LD_VAR 0 2
55041: PUSH
55042: LD_VAR 0 4
55046: PLUS
55047: ST_TO_ADDR
// max_y := y + r ;
55048: LD_ADDR_VAR 0 10
55052: PUSH
55053: LD_VAR 0 3
55057: PUSH
55058: LD_VAR 0 4
55062: PLUS
55063: ST_TO_ADDR
// for _x = min_x to max_x do
55064: LD_ADDR_VAR 0 11
55068: PUSH
55069: DOUBLE
55070: LD_VAR 0 7
55074: DEC
55075: ST_TO_ADDR
55076: LD_VAR 0 9
55080: PUSH
55081: FOR_TO
55082: IFFALSE 55199
// for _y = min_y to max_y do
55084: LD_ADDR_VAR 0 12
55088: PUSH
55089: DOUBLE
55090: LD_VAR 0 8
55094: DEC
55095: ST_TO_ADDR
55096: LD_VAR 0 10
55100: PUSH
55101: FOR_TO
55102: IFFALSE 55195
// begin if not ValidHex ( _x , _y ) then
55104: LD_VAR 0 11
55108: PPUSH
55109: LD_VAR 0 12
55113: PPUSH
55114: CALL_OW 488
55118: NOT
55119: IFFALSE 55123
// continue ;
55121: GO 55101
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55123: LD_VAR 0 11
55127: PPUSH
55128: LD_VAR 0 12
55132: PPUSH
55133: CALL_OW 351
55137: PUSH
55138: LD_VAR 0 11
55142: PPUSH
55143: LD_VAR 0 12
55147: PPUSH
55148: CALL_OW 554
55152: AND
55153: IFFALSE 55193
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55155: LD_ADDR_VAR 0 13
55159: PUSH
55160: LD_VAR 0 13
55164: PPUSH
55165: LD_VAR 0 13
55169: PUSH
55170: LD_INT 1
55172: PLUS
55173: PPUSH
55174: LD_VAR 0 11
55178: PUSH
55179: LD_VAR 0 12
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PPUSH
55188: CALL_OW 2
55192: ST_TO_ADDR
// end ;
55193: GO 55101
55195: POP
55196: POP
55197: GO 55081
55199: POP
55200: POP
// if not list then
55201: LD_VAR 0 13
55205: NOT
55206: IFFALSE 55210
// exit ;
55208: GO 55281
// for i in list do
55210: LD_ADDR_VAR 0 6
55214: PUSH
55215: LD_VAR 0 13
55219: PUSH
55220: FOR_IN
55221: IFFALSE 55279
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55223: LD_VAR 0 1
55227: PPUSH
55228: LD_STRING M
55230: PUSH
55231: LD_VAR 0 6
55235: PUSH
55236: LD_INT 1
55238: ARRAY
55239: PUSH
55240: LD_VAR 0 6
55244: PUSH
55245: LD_INT 2
55247: ARRAY
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: PPUSH
55273: CALL_OW 447
55277: GO 55220
55279: POP
55280: POP
// end ;
55281: LD_VAR 0 5
55285: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55286: LD_INT 0
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
55297: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55298: LD_VAR 0 1
55302: PPUSH
55303: CALL_OW 302
55307: NOT
55308: PUSH
55309: LD_VAR 0 2
55313: PPUSH
55314: LD_VAR 0 3
55318: PPUSH
55319: CALL_OW 488
55323: NOT
55324: OR
55325: PUSH
55326: LD_VAR 0 4
55330: NOT
55331: OR
55332: IFFALSE 55336
// exit ;
55334: GO 55849
// list := [ ] ;
55336: LD_ADDR_VAR 0 13
55340: PUSH
55341: EMPTY
55342: ST_TO_ADDR
// if x - r < 0 then
55343: LD_VAR 0 2
55347: PUSH
55348: LD_VAR 0 4
55352: MINUS
55353: PUSH
55354: LD_INT 0
55356: LESS
55357: IFFALSE 55369
// min_x := 0 else
55359: LD_ADDR_VAR 0 7
55363: PUSH
55364: LD_INT 0
55366: ST_TO_ADDR
55367: GO 55385
// min_x := x - r ;
55369: LD_ADDR_VAR 0 7
55373: PUSH
55374: LD_VAR 0 2
55378: PUSH
55379: LD_VAR 0 4
55383: MINUS
55384: ST_TO_ADDR
// if y - r < 0 then
55385: LD_VAR 0 3
55389: PUSH
55390: LD_VAR 0 4
55394: MINUS
55395: PUSH
55396: LD_INT 0
55398: LESS
55399: IFFALSE 55411
// min_y := 0 else
55401: LD_ADDR_VAR 0 8
55405: PUSH
55406: LD_INT 0
55408: ST_TO_ADDR
55409: GO 55427
// min_y := y - r ;
55411: LD_ADDR_VAR 0 8
55415: PUSH
55416: LD_VAR 0 3
55420: PUSH
55421: LD_VAR 0 4
55425: MINUS
55426: ST_TO_ADDR
// max_x := x + r ;
55427: LD_ADDR_VAR 0 9
55431: PUSH
55432: LD_VAR 0 2
55436: PUSH
55437: LD_VAR 0 4
55441: PLUS
55442: ST_TO_ADDR
// max_y := y + r ;
55443: LD_ADDR_VAR 0 10
55447: PUSH
55448: LD_VAR 0 3
55452: PUSH
55453: LD_VAR 0 4
55457: PLUS
55458: ST_TO_ADDR
// for _x = min_x to max_x do
55459: LD_ADDR_VAR 0 11
55463: PUSH
55464: DOUBLE
55465: LD_VAR 0 7
55469: DEC
55470: ST_TO_ADDR
55471: LD_VAR 0 9
55475: PUSH
55476: FOR_TO
55477: IFFALSE 55594
// for _y = min_y to max_y do
55479: LD_ADDR_VAR 0 12
55483: PUSH
55484: DOUBLE
55485: LD_VAR 0 8
55489: DEC
55490: ST_TO_ADDR
55491: LD_VAR 0 10
55495: PUSH
55496: FOR_TO
55497: IFFALSE 55590
// begin if not ValidHex ( _x , _y ) then
55499: LD_VAR 0 11
55503: PPUSH
55504: LD_VAR 0 12
55508: PPUSH
55509: CALL_OW 488
55513: NOT
55514: IFFALSE 55518
// continue ;
55516: GO 55496
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55518: LD_VAR 0 11
55522: PPUSH
55523: LD_VAR 0 12
55527: PPUSH
55528: CALL_OW 351
55532: PUSH
55533: LD_VAR 0 11
55537: PPUSH
55538: LD_VAR 0 12
55542: PPUSH
55543: CALL_OW 554
55547: AND
55548: IFFALSE 55588
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55550: LD_ADDR_VAR 0 13
55554: PUSH
55555: LD_VAR 0 13
55559: PPUSH
55560: LD_VAR 0 13
55564: PUSH
55565: LD_INT 1
55567: PLUS
55568: PPUSH
55569: LD_VAR 0 11
55573: PUSH
55574: LD_VAR 0 12
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PPUSH
55583: CALL_OW 2
55587: ST_TO_ADDR
// end ;
55588: GO 55496
55590: POP
55591: POP
55592: GO 55476
55594: POP
55595: POP
// if not list then
55596: LD_VAR 0 13
55600: NOT
55601: IFFALSE 55605
// exit ;
55603: GO 55849
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55605: LD_ADDR_VAR 0 13
55609: PUSH
55610: LD_VAR 0 1
55614: PPUSH
55615: LD_VAR 0 13
55619: PPUSH
55620: LD_INT 1
55622: PPUSH
55623: LD_INT 1
55625: PPUSH
55626: CALL 8332 0 4
55630: ST_TO_ADDR
// ComStop ( flame ) ;
55631: LD_VAR 0 1
55635: PPUSH
55636: CALL_OW 141
// for i in list do
55640: LD_ADDR_VAR 0 6
55644: PUSH
55645: LD_VAR 0 13
55649: PUSH
55650: FOR_IN
55651: IFFALSE 55682
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55653: LD_VAR 0 1
55657: PPUSH
55658: LD_VAR 0 6
55662: PUSH
55663: LD_INT 1
55665: ARRAY
55666: PPUSH
55667: LD_VAR 0 6
55671: PUSH
55672: LD_INT 2
55674: ARRAY
55675: PPUSH
55676: CALL_OW 176
55680: GO 55650
55682: POP
55683: POP
// repeat wait ( 0 0$1 ) ;
55684: LD_INT 35
55686: PPUSH
55687: CALL_OW 67
// task := GetTaskList ( flame ) ;
55691: LD_ADDR_VAR 0 14
55695: PUSH
55696: LD_VAR 0 1
55700: PPUSH
55701: CALL_OW 437
55705: ST_TO_ADDR
// if not task then
55706: LD_VAR 0 14
55710: NOT
55711: IFFALSE 55715
// exit ;
55713: GO 55849
// if task [ 1 ] [ 1 ] <> | then
55715: LD_VAR 0 14
55719: PUSH
55720: LD_INT 1
55722: ARRAY
55723: PUSH
55724: LD_INT 1
55726: ARRAY
55727: PUSH
55728: LD_STRING |
55730: NONEQUAL
55731: IFFALSE 55735
// exit ;
55733: GO 55849
// _x := task [ 1 ] [ 2 ] ;
55735: LD_ADDR_VAR 0 11
55739: PUSH
55740: LD_VAR 0 14
55744: PUSH
55745: LD_INT 1
55747: ARRAY
55748: PUSH
55749: LD_INT 2
55751: ARRAY
55752: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55753: LD_ADDR_VAR 0 12
55757: PUSH
55758: LD_VAR 0 14
55762: PUSH
55763: LD_INT 1
55765: ARRAY
55766: PUSH
55767: LD_INT 3
55769: ARRAY
55770: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55771: LD_VAR 0 11
55775: PPUSH
55776: LD_VAR 0 12
55780: PPUSH
55781: CALL_OW 351
55785: NOT
55786: PUSH
55787: LD_VAR 0 11
55791: PPUSH
55792: LD_VAR 0 12
55796: PPUSH
55797: CALL_OW 554
55801: NOT
55802: OR
55803: IFFALSE 55837
// begin task := Delete ( task , 1 ) ;
55805: LD_ADDR_VAR 0 14
55809: PUSH
55810: LD_VAR 0 14
55814: PPUSH
55815: LD_INT 1
55817: PPUSH
55818: CALL_OW 3
55822: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55823: LD_VAR 0 1
55827: PPUSH
55828: LD_VAR 0 14
55832: PPUSH
55833: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55837: LD_VAR 0 1
55841: PPUSH
55842: CALL_OW 314
55846: NOT
55847: IFFALSE 55684
// end ;
55849: LD_VAR 0 5
55853: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55854: LD_EXP 42
55858: NOT
55859: IFFALSE 55909
55861: GO 55863
55863: DISABLE
// begin initHack := true ;
55864: LD_ADDR_EXP 42
55868: PUSH
55869: LD_INT 1
55871: ST_TO_ADDR
// hackTanks := [ ] ;
55872: LD_ADDR_EXP 43
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55879: LD_ADDR_EXP 44
55883: PUSH
55884: EMPTY
55885: ST_TO_ADDR
// hackLimit := 3 ;
55886: LD_ADDR_EXP 45
55890: PUSH
55891: LD_INT 3
55893: ST_TO_ADDR
// hackDist := 12 ;
55894: LD_ADDR_EXP 46
55898: PUSH
55899: LD_INT 12
55901: ST_TO_ADDR
// hackCounter := [ ] ;
55902: LD_ADDR_EXP 47
55906: PUSH
55907: EMPTY
55908: ST_TO_ADDR
// end ;
55909: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55910: LD_EXP 42
55914: PUSH
55915: LD_INT 34
55917: PUSH
55918: LD_INT 99
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PPUSH
55925: CALL_OW 69
55929: AND
55930: IFFALSE 56183
55932: GO 55934
55934: DISABLE
55935: LD_INT 0
55937: PPUSH
55938: PPUSH
// begin enable ;
55939: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55940: LD_ADDR_VAR 0 1
55944: PUSH
55945: LD_INT 34
55947: PUSH
55948: LD_INT 99
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PPUSH
55955: CALL_OW 69
55959: PUSH
55960: FOR_IN
55961: IFFALSE 56181
// begin if not i in hackTanks then
55963: LD_VAR 0 1
55967: PUSH
55968: LD_EXP 43
55972: IN
55973: NOT
55974: IFFALSE 56057
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55976: LD_ADDR_EXP 43
55980: PUSH
55981: LD_EXP 43
55985: PPUSH
55986: LD_EXP 43
55990: PUSH
55991: LD_INT 1
55993: PLUS
55994: PPUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: CALL_OW 1
56004: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56005: LD_ADDR_EXP 44
56009: PUSH
56010: LD_EXP 44
56014: PPUSH
56015: LD_EXP 44
56019: PUSH
56020: LD_INT 1
56022: PLUS
56023: PPUSH
56024: EMPTY
56025: PPUSH
56026: CALL_OW 1
56030: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56031: LD_ADDR_EXP 47
56035: PUSH
56036: LD_EXP 47
56040: PPUSH
56041: LD_EXP 47
56045: PUSH
56046: LD_INT 1
56048: PLUS
56049: PPUSH
56050: EMPTY
56051: PPUSH
56052: CALL_OW 1
56056: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56057: LD_VAR 0 1
56061: PPUSH
56062: CALL_OW 302
56066: NOT
56067: IFFALSE 56080
// begin HackUnlinkAll ( i ) ;
56069: LD_VAR 0 1
56073: PPUSH
56074: CALL 56186 0 1
// continue ;
56078: GO 55960
// end ; HackCheckCapturedStatus ( i ) ;
56080: LD_VAR 0 1
56084: PPUSH
56085: CALL 56629 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56089: LD_ADDR_VAR 0 2
56093: PUSH
56094: LD_INT 81
56096: PUSH
56097: LD_VAR 0 1
56101: PPUSH
56102: CALL_OW 255
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 33
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 91
56123: PUSH
56124: LD_VAR 0 1
56128: PUSH
56129: LD_EXP 46
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 50
56141: PUSH
56142: EMPTY
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: PPUSH
56151: CALL_OW 69
56155: ST_TO_ADDR
// if not tmp then
56156: LD_VAR 0 2
56160: NOT
56161: IFFALSE 56165
// continue ;
56163: GO 55960
// HackLink ( i , tmp ) ;
56165: LD_VAR 0 1
56169: PPUSH
56170: LD_VAR 0 2
56174: PPUSH
56175: CALL 56322 0 2
// end ;
56179: GO 55960
56181: POP
56182: POP
// end ;
56183: PPOPN 2
56185: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56186: LD_INT 0
56188: PPUSH
56189: PPUSH
56190: PPUSH
// if not hack in hackTanks then
56191: LD_VAR 0 1
56195: PUSH
56196: LD_EXP 43
56200: IN
56201: NOT
56202: IFFALSE 56206
// exit ;
56204: GO 56317
// index := GetElementIndex ( hackTanks , hack ) ;
56206: LD_ADDR_VAR 0 4
56210: PUSH
56211: LD_EXP 43
56215: PPUSH
56216: LD_VAR 0 1
56220: PPUSH
56221: CALL 7629 0 2
56225: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56226: LD_EXP 44
56230: PUSH
56231: LD_VAR 0 4
56235: ARRAY
56236: IFFALSE 56317
// begin for i in hackTanksCaptured [ index ] do
56238: LD_ADDR_VAR 0 3
56242: PUSH
56243: LD_EXP 44
56247: PUSH
56248: LD_VAR 0 4
56252: ARRAY
56253: PUSH
56254: FOR_IN
56255: IFFALSE 56281
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56257: LD_VAR 0 3
56261: PUSH
56262: LD_INT 1
56264: ARRAY
56265: PPUSH
56266: LD_VAR 0 3
56270: PUSH
56271: LD_INT 2
56273: ARRAY
56274: PPUSH
56275: CALL_OW 235
56279: GO 56254
56281: POP
56282: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56283: LD_ADDR_EXP 44
56287: PUSH
56288: LD_EXP 44
56292: PPUSH
56293: LD_VAR 0 4
56297: PPUSH
56298: EMPTY
56299: PPUSH
56300: CALL_OW 1
56304: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56305: LD_VAR 0 1
56309: PPUSH
56310: LD_INT 0
56312: PPUSH
56313: CALL_OW 505
// end ; end ;
56317: LD_VAR 0 2
56321: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56322: LD_INT 0
56324: PPUSH
56325: PPUSH
56326: PPUSH
// if not hack in hackTanks or not vehicles then
56327: LD_VAR 0 1
56331: PUSH
56332: LD_EXP 43
56336: IN
56337: NOT
56338: PUSH
56339: LD_VAR 0 2
56343: NOT
56344: OR
56345: IFFALSE 56349
// exit ;
56347: GO 56624
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56349: LD_ADDR_VAR 0 2
56353: PUSH
56354: LD_VAR 0 1
56358: PPUSH
56359: LD_VAR 0 2
56363: PPUSH
56364: LD_INT 1
56366: PPUSH
56367: LD_INT 1
56369: PPUSH
56370: CALL 8279 0 4
56374: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56375: LD_ADDR_VAR 0 5
56379: PUSH
56380: LD_EXP 43
56384: PPUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: CALL 7629 0 2
56394: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56395: LD_EXP 44
56399: PUSH
56400: LD_VAR 0 5
56404: ARRAY
56405: PUSH
56406: LD_EXP 45
56410: LESS
56411: IFFALSE 56600
// begin for i := 1 to vehicles do
56413: LD_ADDR_VAR 0 4
56417: PUSH
56418: DOUBLE
56419: LD_INT 1
56421: DEC
56422: ST_TO_ADDR
56423: LD_VAR 0 2
56427: PUSH
56428: FOR_TO
56429: IFFALSE 56598
// begin if hackTanksCaptured [ index ] = hackLimit then
56431: LD_EXP 44
56435: PUSH
56436: LD_VAR 0 5
56440: ARRAY
56441: PUSH
56442: LD_EXP 45
56446: EQUAL
56447: IFFALSE 56451
// break ;
56449: GO 56598
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56451: LD_ADDR_EXP 47
56455: PUSH
56456: LD_EXP 47
56460: PPUSH
56461: LD_VAR 0 5
56465: PPUSH
56466: LD_EXP 47
56470: PUSH
56471: LD_VAR 0 5
56475: ARRAY
56476: PUSH
56477: LD_INT 1
56479: PLUS
56480: PPUSH
56481: CALL_OW 1
56485: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56486: LD_ADDR_EXP 44
56490: PUSH
56491: LD_EXP 44
56495: PPUSH
56496: LD_VAR 0 5
56500: PUSH
56501: LD_EXP 44
56505: PUSH
56506: LD_VAR 0 5
56510: ARRAY
56511: PUSH
56512: LD_INT 1
56514: PLUS
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PPUSH
56520: LD_VAR 0 2
56524: PUSH
56525: LD_VAR 0 4
56529: ARRAY
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: LD_VAR 0 4
56540: ARRAY
56541: PPUSH
56542: CALL_OW 255
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PPUSH
56551: CALL 7844 0 3
56555: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56556: LD_VAR 0 2
56560: PUSH
56561: LD_VAR 0 4
56565: ARRAY
56566: PPUSH
56567: LD_VAR 0 1
56571: PPUSH
56572: CALL_OW 255
56576: PPUSH
56577: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56581: LD_VAR 0 2
56585: PUSH
56586: LD_VAR 0 4
56590: ARRAY
56591: PPUSH
56592: CALL_OW 141
// end ;
56596: GO 56428
56598: POP
56599: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56600: LD_VAR 0 1
56604: PPUSH
56605: LD_EXP 44
56609: PUSH
56610: LD_VAR 0 5
56614: ARRAY
56615: PUSH
56616: LD_INT 0
56618: PLUS
56619: PPUSH
56620: CALL_OW 505
// end ;
56624: LD_VAR 0 3
56628: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56629: LD_INT 0
56631: PPUSH
56632: PPUSH
56633: PPUSH
56634: PPUSH
// if not hack in hackTanks then
56635: LD_VAR 0 1
56639: PUSH
56640: LD_EXP 43
56644: IN
56645: NOT
56646: IFFALSE 56650
// exit ;
56648: GO 56890
// index := GetElementIndex ( hackTanks , hack ) ;
56650: LD_ADDR_VAR 0 4
56654: PUSH
56655: LD_EXP 43
56659: PPUSH
56660: LD_VAR 0 1
56664: PPUSH
56665: CALL 7629 0 2
56669: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56670: LD_ADDR_VAR 0 3
56674: PUSH
56675: DOUBLE
56676: LD_EXP 44
56680: PUSH
56681: LD_VAR 0 4
56685: ARRAY
56686: INC
56687: ST_TO_ADDR
56688: LD_INT 1
56690: PUSH
56691: FOR_DOWNTO
56692: IFFALSE 56864
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56694: LD_ADDR_VAR 0 5
56698: PUSH
56699: LD_EXP 44
56703: PUSH
56704: LD_VAR 0 4
56708: ARRAY
56709: PUSH
56710: LD_VAR 0 3
56714: ARRAY
56715: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56716: LD_VAR 0 5
56720: PUSH
56721: LD_INT 1
56723: ARRAY
56724: PPUSH
56725: CALL_OW 302
56729: NOT
56730: PUSH
56731: LD_VAR 0 5
56735: PUSH
56736: LD_INT 1
56738: ARRAY
56739: PPUSH
56740: CALL_OW 255
56744: PUSH
56745: LD_VAR 0 1
56749: PPUSH
56750: CALL_OW 255
56754: NONEQUAL
56755: OR
56756: IFFALSE 56862
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56758: LD_VAR 0 5
56762: PUSH
56763: LD_INT 1
56765: ARRAY
56766: PPUSH
56767: CALL_OW 305
56771: PUSH
56772: LD_VAR 0 5
56776: PUSH
56777: LD_INT 1
56779: ARRAY
56780: PPUSH
56781: CALL_OW 255
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 255
56795: EQUAL
56796: AND
56797: IFFALSE 56821
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56799: LD_VAR 0 5
56803: PUSH
56804: LD_INT 1
56806: ARRAY
56807: PPUSH
56808: LD_VAR 0 5
56812: PUSH
56813: LD_INT 2
56815: ARRAY
56816: PPUSH
56817: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56821: LD_ADDR_EXP 44
56825: PUSH
56826: LD_EXP 44
56830: PPUSH
56831: LD_VAR 0 4
56835: PPUSH
56836: LD_EXP 44
56840: PUSH
56841: LD_VAR 0 4
56845: ARRAY
56846: PPUSH
56847: LD_VAR 0 3
56851: PPUSH
56852: CALL_OW 3
56856: PPUSH
56857: CALL_OW 1
56861: ST_TO_ADDR
// end ; end ;
56862: GO 56691
56864: POP
56865: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56866: LD_VAR 0 1
56870: PPUSH
56871: LD_EXP 44
56875: PUSH
56876: LD_VAR 0 4
56880: ARRAY
56881: PUSH
56882: LD_INT 0
56884: PLUS
56885: PPUSH
56886: CALL_OW 505
// end ;
56890: LD_VAR 0 2
56894: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56895: LD_INT 0
56897: PPUSH
56898: PPUSH
56899: PPUSH
56900: PPUSH
// if not hack in hackTanks then
56901: LD_VAR 0 1
56905: PUSH
56906: LD_EXP 43
56910: IN
56911: NOT
56912: IFFALSE 56916
// exit ;
56914: GO 57001
// index := GetElementIndex ( hackTanks , hack ) ;
56916: LD_ADDR_VAR 0 5
56920: PUSH
56921: LD_EXP 43
56925: PPUSH
56926: LD_VAR 0 1
56930: PPUSH
56931: CALL 7629 0 2
56935: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56936: LD_ADDR_VAR 0 4
56940: PUSH
56941: DOUBLE
56942: LD_INT 1
56944: DEC
56945: ST_TO_ADDR
56946: LD_EXP 44
56950: PUSH
56951: LD_VAR 0 5
56955: ARRAY
56956: PUSH
56957: FOR_TO
56958: IFFALSE 56999
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56960: LD_EXP 44
56964: PUSH
56965: LD_VAR 0 5
56969: ARRAY
56970: PUSH
56971: LD_VAR 0 4
56975: ARRAY
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PUSH
56981: LD_VAR 0 2
56985: EQUAL
56986: IFFALSE 56997
// KillUnit ( vehicle ) ;
56988: LD_VAR 0 2
56992: PPUSH
56993: CALL_OW 66
56997: GO 56957
56999: POP
57000: POP
// end ;
57001: LD_VAR 0 3
57005: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57006: LD_EXP 48
57010: NOT
57011: IFFALSE 57046
57013: GO 57015
57015: DISABLE
// begin initMiner := true ;
57016: LD_ADDR_EXP 48
57020: PUSH
57021: LD_INT 1
57023: ST_TO_ADDR
// minersList := [ ] ;
57024: LD_ADDR_EXP 49
57028: PUSH
57029: EMPTY
57030: ST_TO_ADDR
// minerMinesList := [ ] ;
57031: LD_ADDR_EXP 50
57035: PUSH
57036: EMPTY
57037: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57038: LD_ADDR_EXP 51
57042: PUSH
57043: LD_INT 5
57045: ST_TO_ADDR
// end ;
57046: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57047: LD_EXP 48
57051: PUSH
57052: LD_INT 34
57054: PUSH
57055: LD_INT 81
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PPUSH
57062: CALL_OW 69
57066: AND
57067: IFFALSE 57528
57069: GO 57071
57071: DISABLE
57072: LD_INT 0
57074: PPUSH
57075: PPUSH
57076: PPUSH
57077: PPUSH
// begin enable ;
57078: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57079: LD_ADDR_VAR 0 1
57083: PUSH
57084: LD_INT 34
57086: PUSH
57087: LD_INT 81
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PPUSH
57094: CALL_OW 69
57098: PUSH
57099: FOR_IN
57100: IFFALSE 57172
// begin if not i in minersList then
57102: LD_VAR 0 1
57106: PUSH
57107: LD_EXP 49
57111: IN
57112: NOT
57113: IFFALSE 57170
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57115: LD_ADDR_EXP 49
57119: PUSH
57120: LD_EXP 49
57124: PPUSH
57125: LD_EXP 49
57129: PUSH
57130: LD_INT 1
57132: PLUS
57133: PPUSH
57134: LD_VAR 0 1
57138: PPUSH
57139: CALL_OW 1
57143: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57144: LD_ADDR_EXP 50
57148: PUSH
57149: LD_EXP 50
57153: PPUSH
57154: LD_EXP 50
57158: PUSH
57159: LD_INT 1
57161: PLUS
57162: PPUSH
57163: EMPTY
57164: PPUSH
57165: CALL_OW 1
57169: ST_TO_ADDR
// end end ;
57170: GO 57099
57172: POP
57173: POP
// for i := minerMinesList downto 1 do
57174: LD_ADDR_VAR 0 1
57178: PUSH
57179: DOUBLE
57180: LD_EXP 50
57184: INC
57185: ST_TO_ADDR
57186: LD_INT 1
57188: PUSH
57189: FOR_DOWNTO
57190: IFFALSE 57526
// begin if IsLive ( minersList [ i ] ) then
57192: LD_EXP 49
57196: PUSH
57197: LD_VAR 0 1
57201: ARRAY
57202: PPUSH
57203: CALL_OW 300
57207: IFFALSE 57235
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57209: LD_EXP 49
57213: PUSH
57214: LD_VAR 0 1
57218: ARRAY
57219: PPUSH
57220: LD_EXP 50
57224: PUSH
57225: LD_VAR 0 1
57229: ARRAY
57230: PPUSH
57231: CALL_OW 505
// if not minerMinesList [ i ] then
57235: LD_EXP 50
57239: PUSH
57240: LD_VAR 0 1
57244: ARRAY
57245: NOT
57246: IFFALSE 57250
// continue ;
57248: GO 57189
// for j := minerMinesList [ i ] downto 1 do
57250: LD_ADDR_VAR 0 2
57254: PUSH
57255: DOUBLE
57256: LD_EXP 50
57260: PUSH
57261: LD_VAR 0 1
57265: ARRAY
57266: INC
57267: ST_TO_ADDR
57268: LD_INT 1
57270: PUSH
57271: FOR_DOWNTO
57272: IFFALSE 57522
// begin side := GetSide ( minersList [ i ] ) ;
57274: LD_ADDR_VAR 0 3
57278: PUSH
57279: LD_EXP 49
57283: PUSH
57284: LD_VAR 0 1
57288: ARRAY
57289: PPUSH
57290: CALL_OW 255
57294: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57295: LD_ADDR_VAR 0 4
57299: PUSH
57300: LD_EXP 50
57304: PUSH
57305: LD_VAR 0 1
57309: ARRAY
57310: PUSH
57311: LD_VAR 0 2
57315: ARRAY
57316: PUSH
57317: LD_INT 1
57319: ARRAY
57320: PPUSH
57321: LD_EXP 50
57325: PUSH
57326: LD_VAR 0 1
57330: ARRAY
57331: PUSH
57332: LD_VAR 0 2
57336: ARRAY
57337: PUSH
57338: LD_INT 2
57340: ARRAY
57341: PPUSH
57342: CALL_OW 428
57346: ST_TO_ADDR
// if not tmp then
57347: LD_VAR 0 4
57351: NOT
57352: IFFALSE 57356
// continue ;
57354: GO 57271
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57356: LD_VAR 0 4
57360: PUSH
57361: LD_INT 81
57363: PUSH
57364: LD_VAR 0 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PPUSH
57373: CALL_OW 69
57377: IN
57378: PUSH
57379: LD_EXP 50
57383: PUSH
57384: LD_VAR 0 1
57388: ARRAY
57389: PUSH
57390: LD_VAR 0 2
57394: ARRAY
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: PPUSH
57400: LD_EXP 50
57404: PUSH
57405: LD_VAR 0 1
57409: ARRAY
57410: PUSH
57411: LD_VAR 0 2
57415: ARRAY
57416: PUSH
57417: LD_INT 2
57419: ARRAY
57420: PPUSH
57421: CALL_OW 458
57425: AND
57426: IFFALSE 57520
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57428: LD_EXP 50
57432: PUSH
57433: LD_VAR 0 1
57437: ARRAY
57438: PUSH
57439: LD_VAR 0 2
57443: ARRAY
57444: PUSH
57445: LD_INT 1
57447: ARRAY
57448: PPUSH
57449: LD_EXP 50
57453: PUSH
57454: LD_VAR 0 1
57458: ARRAY
57459: PUSH
57460: LD_VAR 0 2
57464: ARRAY
57465: PUSH
57466: LD_INT 2
57468: ARRAY
57469: PPUSH
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57479: LD_ADDR_EXP 50
57483: PUSH
57484: LD_EXP 50
57488: PPUSH
57489: LD_VAR 0 1
57493: PPUSH
57494: LD_EXP 50
57498: PUSH
57499: LD_VAR 0 1
57503: ARRAY
57504: PPUSH
57505: LD_VAR 0 2
57509: PPUSH
57510: CALL_OW 3
57514: PPUSH
57515: CALL_OW 1
57519: ST_TO_ADDR
// end ; end ;
57520: GO 57271
57522: POP
57523: POP
// end ;
57524: GO 57189
57526: POP
57527: POP
// end ;
57528: PPOPN 4
57530: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57531: LD_INT 0
57533: PPUSH
57534: PPUSH
// result := false ;
57535: LD_ADDR_VAR 0 4
57539: PUSH
57540: LD_INT 0
57542: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57543: LD_VAR 0 1
57547: PPUSH
57548: CALL_OW 264
57552: PUSH
57553: LD_INT 81
57555: EQUAL
57556: NOT
57557: IFFALSE 57561
// exit ;
57559: GO 57801
// index := GetElementIndex ( minersList , unit ) ;
57561: LD_ADDR_VAR 0 5
57565: PUSH
57566: LD_EXP 49
57570: PPUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL 7629 0 2
57580: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57581: LD_EXP 50
57585: PUSH
57586: LD_VAR 0 5
57590: ARRAY
57591: PUSH
57592: LD_EXP 51
57596: GREATEREQUAL
57597: IFFALSE 57601
// exit ;
57599: GO 57801
// ComMoveXY ( unit , x , y ) ;
57601: LD_VAR 0 1
57605: PPUSH
57606: LD_VAR 0 2
57610: PPUSH
57611: LD_VAR 0 3
57615: PPUSH
57616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57620: LD_INT 35
57622: PPUSH
57623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57627: LD_VAR 0 1
57631: PPUSH
57632: LD_VAR 0 2
57636: PPUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: CALL 39390 0 3
57646: NOT
57647: PUSH
57648: LD_VAR 0 1
57652: PPUSH
57653: CALL_OW 314
57657: AND
57658: IFFALSE 57662
// exit ;
57660: GO 57801
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57662: LD_VAR 0 2
57666: PPUSH
57667: LD_VAR 0 3
57671: PPUSH
57672: CALL_OW 428
57676: PUSH
57677: LD_VAR 0 1
57681: EQUAL
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: CALL_OW 314
57692: NOT
57693: AND
57694: IFFALSE 57620
// PlaySoundXY ( x , y , PlantMine ) ;
57696: LD_VAR 0 2
57700: PPUSH
57701: LD_VAR 0 3
57705: PPUSH
57706: LD_STRING PlantMine
57708: PPUSH
57709: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57713: LD_VAR 0 2
57717: PPUSH
57718: LD_VAR 0 3
57722: PPUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 255
57732: PPUSH
57733: LD_INT 0
57735: PPUSH
57736: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57740: LD_ADDR_EXP 50
57744: PUSH
57745: LD_EXP 50
57749: PPUSH
57750: LD_VAR 0 5
57754: PUSH
57755: LD_EXP 50
57759: PUSH
57760: LD_VAR 0 5
57764: ARRAY
57765: PUSH
57766: LD_INT 1
57768: PLUS
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PPUSH
57774: LD_VAR 0 2
57778: PUSH
57779: LD_VAR 0 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PPUSH
57788: CALL 7844 0 3
57792: ST_TO_ADDR
// result := true ;
57793: LD_ADDR_VAR 0 4
57797: PUSH
57798: LD_INT 1
57800: ST_TO_ADDR
// end ;
57801: LD_VAR 0 4
57805: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57806: LD_INT 0
57808: PPUSH
57809: PPUSH
57810: PPUSH
// if not unit in minersList then
57811: LD_VAR 0 1
57815: PUSH
57816: LD_EXP 49
57820: IN
57821: NOT
57822: IFFALSE 57826
// exit ;
57824: GO 58218
// index := GetElementIndex ( minersList , unit ) ;
57826: LD_ADDR_VAR 0 6
57830: PUSH
57831: LD_EXP 49
57835: PPUSH
57836: LD_VAR 0 1
57840: PPUSH
57841: CALL 7629 0 2
57845: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57846: LD_ADDR_VAR 0 5
57850: PUSH
57851: DOUBLE
57852: LD_EXP 50
57856: PUSH
57857: LD_VAR 0 6
57861: ARRAY
57862: INC
57863: ST_TO_ADDR
57864: LD_INT 1
57866: PUSH
57867: FOR_DOWNTO
57868: IFFALSE 58029
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57870: LD_EXP 50
57874: PUSH
57875: LD_VAR 0 6
57879: ARRAY
57880: PUSH
57881: LD_VAR 0 5
57885: ARRAY
57886: PUSH
57887: LD_INT 1
57889: ARRAY
57890: PUSH
57891: LD_VAR 0 2
57895: EQUAL
57896: PUSH
57897: LD_EXP 50
57901: PUSH
57902: LD_VAR 0 6
57906: ARRAY
57907: PUSH
57908: LD_VAR 0 5
57912: ARRAY
57913: PUSH
57914: LD_INT 2
57916: ARRAY
57917: PUSH
57918: LD_VAR 0 3
57922: EQUAL
57923: AND
57924: IFFALSE 58027
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57926: LD_EXP 50
57930: PUSH
57931: LD_VAR 0 6
57935: ARRAY
57936: PUSH
57937: LD_VAR 0 5
57941: ARRAY
57942: PUSH
57943: LD_INT 1
57945: ARRAY
57946: PPUSH
57947: LD_EXP 50
57951: PUSH
57952: LD_VAR 0 6
57956: ARRAY
57957: PUSH
57958: LD_VAR 0 5
57962: ARRAY
57963: PUSH
57964: LD_INT 2
57966: ARRAY
57967: PPUSH
57968: LD_VAR 0 1
57972: PPUSH
57973: CALL_OW 255
57977: PPUSH
57978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57982: LD_ADDR_EXP 50
57986: PUSH
57987: LD_EXP 50
57991: PPUSH
57992: LD_VAR 0 6
57996: PPUSH
57997: LD_EXP 50
58001: PUSH
58002: LD_VAR 0 6
58006: ARRAY
58007: PPUSH
58008: LD_VAR 0 5
58012: PPUSH
58013: CALL_OW 3
58017: PPUSH
58018: CALL_OW 1
58022: ST_TO_ADDR
// exit ;
58023: POP
58024: POP
58025: GO 58218
// end ; end ;
58027: GO 57867
58029: POP
58030: POP
// for i := minerMinesList [ index ] downto 1 do
58031: LD_ADDR_VAR 0 5
58035: PUSH
58036: DOUBLE
58037: LD_EXP 50
58041: PUSH
58042: LD_VAR 0 6
58046: ARRAY
58047: INC
58048: ST_TO_ADDR
58049: LD_INT 1
58051: PUSH
58052: FOR_DOWNTO
58053: IFFALSE 58216
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58055: LD_EXP 50
58059: PUSH
58060: LD_VAR 0 6
58064: ARRAY
58065: PUSH
58066: LD_VAR 0 5
58070: ARRAY
58071: PUSH
58072: LD_INT 1
58074: ARRAY
58075: PPUSH
58076: LD_EXP 50
58080: PUSH
58081: LD_VAR 0 6
58085: ARRAY
58086: PUSH
58087: LD_VAR 0 5
58091: ARRAY
58092: PUSH
58093: LD_INT 2
58095: ARRAY
58096: PPUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: LD_VAR 0 3
58106: PPUSH
58107: CALL_OW 298
58111: PUSH
58112: LD_INT 6
58114: LESS
58115: IFFALSE 58214
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58117: LD_EXP 50
58121: PUSH
58122: LD_VAR 0 6
58126: ARRAY
58127: PUSH
58128: LD_VAR 0 5
58132: ARRAY
58133: PUSH
58134: LD_INT 1
58136: ARRAY
58137: PPUSH
58138: LD_EXP 50
58142: PUSH
58143: LD_VAR 0 6
58147: ARRAY
58148: PUSH
58149: LD_VAR 0 5
58153: ARRAY
58154: PUSH
58155: LD_INT 2
58157: ARRAY
58158: PPUSH
58159: LD_VAR 0 1
58163: PPUSH
58164: CALL_OW 255
58168: PPUSH
58169: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58173: LD_ADDR_EXP 50
58177: PUSH
58178: LD_EXP 50
58182: PPUSH
58183: LD_VAR 0 6
58187: PPUSH
58188: LD_EXP 50
58192: PUSH
58193: LD_VAR 0 6
58197: ARRAY
58198: PPUSH
58199: LD_VAR 0 5
58203: PPUSH
58204: CALL_OW 3
58208: PPUSH
58209: CALL_OW 1
58213: ST_TO_ADDR
// end ; end ;
58214: GO 58052
58216: POP
58217: POP
// end ;
58218: LD_VAR 0 4
58222: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58223: LD_INT 0
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58234: LD_VAR 0 1
58238: PPUSH
58239: CALL_OW 264
58243: PUSH
58244: LD_INT 81
58246: EQUAL
58247: NOT
58248: PUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_EXP 49
58258: IN
58259: NOT
58260: OR
58261: IFFALSE 58265
// exit ;
58263: GO 58587
// index := GetElementIndex ( minersList , unit ) ;
58265: LD_ADDR_VAR 0 6
58269: PUSH
58270: LD_EXP 49
58274: PPUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: CALL 7629 0 2
58284: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58285: LD_ADDR_VAR 0 8
58289: PUSH
58290: LD_EXP 51
58294: PUSH
58295: LD_EXP 50
58299: PUSH
58300: LD_VAR 0 6
58304: ARRAY
58305: MINUS
58306: ST_TO_ADDR
// if not minesFreeAmount then
58307: LD_VAR 0 8
58311: NOT
58312: IFFALSE 58316
// exit ;
58314: GO 58587
// tmp := [ ] ;
58316: LD_ADDR_VAR 0 7
58320: PUSH
58321: EMPTY
58322: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58323: LD_ADDR_VAR 0 5
58327: PUSH
58328: DOUBLE
58329: LD_INT 1
58331: DEC
58332: ST_TO_ADDR
58333: LD_VAR 0 8
58337: PUSH
58338: FOR_TO
58339: IFFALSE 58534
// begin _d := rand ( 0 , 5 ) ;
58341: LD_ADDR_VAR 0 11
58345: PUSH
58346: LD_INT 0
58348: PPUSH
58349: LD_INT 5
58351: PPUSH
58352: CALL_OW 12
58356: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58357: LD_ADDR_VAR 0 12
58361: PUSH
58362: LD_INT 2
58364: PPUSH
58365: LD_INT 6
58367: PPUSH
58368: CALL_OW 12
58372: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58373: LD_ADDR_VAR 0 9
58377: PUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: LD_VAR 0 11
58387: PPUSH
58388: LD_VAR 0 12
58392: PPUSH
58393: CALL_OW 272
58397: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58398: LD_ADDR_VAR 0 10
58402: PUSH
58403: LD_VAR 0 3
58407: PPUSH
58408: LD_VAR 0 11
58412: PPUSH
58413: LD_VAR 0 12
58417: PPUSH
58418: CALL_OW 273
58422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58423: LD_VAR 0 9
58427: PPUSH
58428: LD_VAR 0 10
58432: PPUSH
58433: CALL_OW 488
58437: PUSH
58438: LD_VAR 0 9
58442: PUSH
58443: LD_VAR 0 10
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_VAR 0 7
58456: IN
58457: NOT
58458: AND
58459: PUSH
58460: LD_VAR 0 9
58464: PPUSH
58465: LD_VAR 0 10
58469: PPUSH
58470: CALL_OW 458
58474: NOT
58475: AND
58476: IFFALSE 58518
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58478: LD_ADDR_VAR 0 7
58482: PUSH
58483: LD_VAR 0 7
58487: PPUSH
58488: LD_VAR 0 7
58492: PUSH
58493: LD_INT 1
58495: PLUS
58496: PPUSH
58497: LD_VAR 0 9
58501: PUSH
58502: LD_VAR 0 10
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PPUSH
58511: CALL_OW 1
58515: ST_TO_ADDR
58516: GO 58532
// i := i - 1 ;
58518: LD_ADDR_VAR 0 5
58522: PUSH
58523: LD_VAR 0 5
58527: PUSH
58528: LD_INT 1
58530: MINUS
58531: ST_TO_ADDR
// end ;
58532: GO 58338
58534: POP
58535: POP
// for i in tmp do
58536: LD_ADDR_VAR 0 5
58540: PUSH
58541: LD_VAR 0 7
58545: PUSH
58546: FOR_IN
58547: IFFALSE 58585
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58549: LD_VAR 0 1
58553: PPUSH
58554: LD_VAR 0 5
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: PPUSH
58563: LD_VAR 0 5
58567: PUSH
58568: LD_INT 2
58570: ARRAY
58571: PPUSH
58572: CALL 57531 0 3
58576: NOT
58577: IFFALSE 58583
// exit ;
58579: POP
58580: POP
58581: GO 58587
58583: GO 58546
58585: POP
58586: POP
// end ;
58587: LD_VAR 0 4
58591: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58592: LD_INT 0
58594: PPUSH
58595: PPUSH
58596: PPUSH
58597: PPUSH
58598: PPUSH
58599: PPUSH
58600: PPUSH
58601: PPUSH
58602: PPUSH
// if GetClass ( unit ) <> class_sniper then
58603: LD_VAR 0 1
58607: PPUSH
58608: CALL_OW 257
58612: PUSH
58613: LD_INT 5
58615: NONEQUAL
58616: IFFALSE 58620
// exit ;
58618: GO 59086
// dist := 8 ;
58620: LD_ADDR_VAR 0 5
58624: PUSH
58625: LD_INT 8
58627: ST_TO_ADDR
// viewRange := 12 ;
58628: LD_ADDR_VAR 0 8
58632: PUSH
58633: LD_INT 12
58635: ST_TO_ADDR
// side := GetSide ( unit ) ;
58636: LD_ADDR_VAR 0 6
58640: PUSH
58641: LD_VAR 0 1
58645: PPUSH
58646: CALL_OW 255
58650: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58651: LD_INT 61
58653: PPUSH
58654: LD_VAR 0 6
58658: PPUSH
58659: CALL_OW 321
58663: PUSH
58664: LD_INT 2
58666: EQUAL
58667: IFFALSE 58677
// viewRange := 16 ;
58669: LD_ADDR_VAR 0 8
58673: PUSH
58674: LD_INT 16
58676: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58677: LD_VAR 0 1
58681: PPUSH
58682: LD_VAR 0 2
58686: PPUSH
58687: LD_VAR 0 3
58691: PPUSH
58692: CALL_OW 297
58696: PUSH
58697: LD_VAR 0 5
58701: GREATER
58702: IFFALSE 58781
// begin ComMoveXY ( unit , x , y ) ;
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_VAR 0 2
58713: PPUSH
58714: LD_VAR 0 3
58718: PPUSH
58719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58723: LD_INT 35
58725: PPUSH
58726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58730: LD_VAR 0 1
58734: PPUSH
58735: LD_VAR 0 2
58739: PPUSH
58740: LD_VAR 0 3
58744: PPUSH
58745: CALL 39390 0 3
58749: NOT
58750: IFFALSE 58754
// exit ;
58752: GO 59086
// until GetDistUnitXY ( unit , x , y ) < dist ;
58754: LD_VAR 0 1
58758: PPUSH
58759: LD_VAR 0 2
58763: PPUSH
58764: LD_VAR 0 3
58768: PPUSH
58769: CALL_OW 297
58773: PUSH
58774: LD_VAR 0 5
58778: LESS
58779: IFFALSE 58723
// end ; ComTurnXY ( unit , x , y ) ;
58781: LD_VAR 0 1
58785: PPUSH
58786: LD_VAR 0 2
58790: PPUSH
58791: LD_VAR 0 3
58795: PPUSH
58796: CALL_OW 118
// repeat if Multiplayer then
58800: LD_OWVAR 4
58804: IFFALSE 58815
// wait ( 35 ) else
58806: LD_INT 35
58808: PPUSH
58809: CALL_OW 67
58813: GO 58822
// wait ( 5 ) ;
58815: LD_INT 5
58817: PPUSH
58818: CALL_OW 67
// _d := GetDir ( unit ) ;
58822: LD_ADDR_VAR 0 11
58826: PUSH
58827: LD_VAR 0 1
58831: PPUSH
58832: CALL_OW 254
58836: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58837: LD_ADDR_VAR 0 7
58841: PUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: CALL_OW 250
58851: PPUSH
58852: LD_VAR 0 1
58856: PPUSH
58857: CALL_OW 251
58861: PPUSH
58862: LD_VAR 0 2
58866: PPUSH
58867: LD_VAR 0 3
58871: PPUSH
58872: CALL 41998 0 4
58876: ST_TO_ADDR
// until dir = _d ;
58877: LD_VAR 0 7
58881: PUSH
58882: LD_VAR 0 11
58886: EQUAL
58887: IFFALSE 58800
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58889: LD_ADDR_VAR 0 9
58893: PUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 250
58903: PPUSH
58904: LD_VAR 0 7
58908: PPUSH
58909: LD_VAR 0 5
58913: PPUSH
58914: CALL_OW 272
58918: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58919: LD_ADDR_VAR 0 10
58923: PUSH
58924: LD_VAR 0 1
58928: PPUSH
58929: CALL_OW 251
58933: PPUSH
58934: LD_VAR 0 7
58938: PPUSH
58939: LD_VAR 0 5
58943: PPUSH
58944: CALL_OW 273
58948: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58949: LD_VAR 0 9
58953: PPUSH
58954: LD_VAR 0 10
58958: PPUSH
58959: CALL_OW 488
58963: NOT
58964: IFFALSE 58968
// exit ;
58966: GO 59086
// ComAnimCustom ( unit , 1 ) ;
58968: LD_VAR 0 1
58972: PPUSH
58973: LD_INT 1
58975: PPUSH
58976: CALL_OW 592
// p := 0 ;
58980: LD_ADDR_VAR 0 12
58984: PUSH
58985: LD_INT 0
58987: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58988: LD_VAR 0 9
58992: PPUSH
58993: LD_VAR 0 10
58997: PPUSH
58998: LD_VAR 0 6
59002: PPUSH
59003: LD_VAR 0 8
59007: PPUSH
59008: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59012: LD_INT 35
59014: PPUSH
59015: CALL_OW 67
// p := Inc ( p ) ;
59019: LD_ADDR_VAR 0 12
59023: PUSH
59024: LD_VAR 0 12
59028: PPUSH
59029: CALL 41954 0 1
59033: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59034: LD_VAR 0 12
59038: PUSH
59039: LD_INT 3
59041: EQUAL
59042: PUSH
59043: LD_VAR 0 1
59047: PPUSH
59048: CALL_OW 302
59052: NOT
59053: OR
59054: PUSH
59055: LD_VAR 0 1
59059: PPUSH
59060: CALL_OW 301
59064: OR
59065: IFFALSE 59012
// RemoveSeeing ( _x , _y , side ) ;
59067: LD_VAR 0 9
59071: PPUSH
59072: LD_VAR 0 10
59076: PPUSH
59077: LD_VAR 0 6
59081: PPUSH
59082: CALL_OW 331
// end ; end_of_file
59086: LD_VAR 0 4
59090: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59091: PPOPN 6
59093: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59094: CALL 59123 0 0
// end ; end_of_file
59098: PPOPN 1
59100: END
// every 0 0$1 do
59101: GO 59103
59103: DISABLE
// begin enable ;
59104: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59105: LD_STRING updateTimer(
59107: PUSH
59108: LD_OWVAR 1
59112: STR
59113: PUSH
59114: LD_STRING );
59116: STR
59117: PPUSH
59118: CALL_OW 559
// end ;
59122: END
// export function SOS_MapStart ( ) ; begin
59123: LD_INT 0
59125: PPUSH
// UpdateFactoryWaypoints ( ) ;
59126: CALL 59495 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59130: CALL 59747 0 0
// end ;
59134: LD_VAR 0 1
59138: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59139: LD_INT 0
59141: PPUSH
// end ;
59142: LD_VAR 0 12
59146: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59147: LD_INT 0
59149: PPUSH
59150: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59151: LD_VAR 0 1
59155: NOT
59156: PUSH
59157: LD_VAR 0 2
59161: PPUSH
59162: LD_VAR 0 3
59166: PPUSH
59167: CALL_OW 488
59171: NOT
59172: OR
59173: PUSH
59174: LD_VAR 0 1
59178: PPUSH
59179: CALL_OW 266
59183: PUSH
59184: LD_INT 3
59186: NONEQUAL
59187: PUSH
59188: LD_VAR 0 1
59192: PPUSH
59193: CALL_OW 247
59197: PUSH
59198: LD_INT 1
59200: EQUAL
59201: NOT
59202: AND
59203: OR
59204: IFFALSE 59208
// exit ;
59206: GO 59490
// if GetType ( factory ) = unit_human then
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 247
59217: PUSH
59218: LD_INT 1
59220: EQUAL
59221: IFFALSE 59238
// factory := IsInUnit ( factory ) ;
59223: LD_ADDR_VAR 0 1
59227: PUSH
59228: LD_VAR 0 1
59232: PPUSH
59233: CALL_OW 310
59237: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 266
59247: PUSH
59248: LD_INT 3
59250: NONEQUAL
59251: IFFALSE 59255
// exit ;
59253: GO 59490
// for i := 1 to Count ( factoryWaypoints ) do
59255: LD_ADDR_VAR 0 5
59259: PUSH
59260: DOUBLE
59261: LD_INT 1
59263: DEC
59264: ST_TO_ADDR
59265: LD_EXP 52
59269: PPUSH
59270: CALL 4984 0 1
59274: PUSH
59275: FOR_TO
59276: IFFALSE 59438
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59278: LD_VAR 0 2
59282: PPUSH
59283: LD_VAR 0 3
59287: PPUSH
59288: CALL_OW 428
59292: PUSH
59293: LD_EXP 52
59297: PUSH
59298: LD_VAR 0 5
59302: ARRAY
59303: PUSH
59304: LD_INT 2
59306: ARRAY
59307: EQUAL
59308: IFFALSE 59340
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59310: LD_ADDR_EXP 52
59314: PUSH
59315: LD_EXP 52
59319: PPUSH
59320: LD_VAR 0 5
59324: PPUSH
59325: CALL_OW 3
59329: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59330: CALL 59495 0 0
// exit ;
59334: POP
59335: POP
59336: GO 59490
// end else
59338: GO 59436
// if factory = factoryWaypoints [ i ] [ 2 ] then
59340: LD_VAR 0 1
59344: PUSH
59345: LD_EXP 52
59349: PUSH
59350: LD_VAR 0 5
59354: ARRAY
59355: PUSH
59356: LD_INT 2
59358: ARRAY
59359: EQUAL
59360: IFFALSE 59436
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59362: LD_ADDR_EXP 52
59366: PUSH
59367: LD_EXP 52
59371: PPUSH
59372: LD_VAR 0 5
59376: PPUSH
59377: CALL_OW 3
59381: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59382: LD_ADDR_EXP 52
59386: PUSH
59387: LD_EXP 52
59391: PPUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 255
59401: PUSH
59402: LD_VAR 0 1
59406: PUSH
59407: LD_VAR 0 2
59411: PUSH
59412: LD_VAR 0 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: PPUSH
59423: CALL 40593 0 2
59427: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59428: CALL 59495 0 0
// exit ;
59432: POP
59433: POP
59434: GO 59490
// end ; end ;
59436: GO 59275
59438: POP
59439: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59440: LD_ADDR_EXP 52
59444: PUSH
59445: LD_EXP 52
59449: PPUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: CALL_OW 255
59459: PUSH
59460: LD_VAR 0 1
59464: PUSH
59465: LD_VAR 0 2
59469: PUSH
59470: LD_VAR 0 3
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: PPUSH
59481: CALL 40593 0 2
59485: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59486: CALL 59495 0 0
// end ;
59490: LD_VAR 0 4
59494: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59495: LD_INT 0
59497: PPUSH
59498: PPUSH
59499: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59500: LD_STRING resetFactoryWaypoint();
59502: PPUSH
59503: CALL_OW 559
// if factoryWaypoints then
59507: LD_EXP 52
59511: IFFALSE 59632
// begin list := factoryWaypoints ;
59513: LD_ADDR_VAR 0 3
59517: PUSH
59518: LD_EXP 52
59522: ST_TO_ADDR
// for i := 1 to list do
59523: LD_ADDR_VAR 0 2
59527: PUSH
59528: DOUBLE
59529: LD_INT 1
59531: DEC
59532: ST_TO_ADDR
59533: LD_VAR 0 3
59537: PUSH
59538: FOR_TO
59539: IFFALSE 59630
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59541: LD_STRING setFactoryWaypointXY(
59543: PUSH
59544: LD_VAR 0 3
59548: PUSH
59549: LD_VAR 0 2
59553: ARRAY
59554: PUSH
59555: LD_INT 1
59557: ARRAY
59558: STR
59559: PUSH
59560: LD_STRING ,
59562: STR
59563: PUSH
59564: LD_VAR 0 3
59568: PUSH
59569: LD_VAR 0 2
59573: ARRAY
59574: PUSH
59575: LD_INT 2
59577: ARRAY
59578: STR
59579: PUSH
59580: LD_STRING ,
59582: STR
59583: PUSH
59584: LD_VAR 0 3
59588: PUSH
59589: LD_VAR 0 2
59593: ARRAY
59594: PUSH
59595: LD_INT 3
59597: ARRAY
59598: STR
59599: PUSH
59600: LD_STRING ,
59602: STR
59603: PUSH
59604: LD_VAR 0 3
59608: PUSH
59609: LD_VAR 0 2
59613: ARRAY
59614: PUSH
59615: LD_INT 4
59617: ARRAY
59618: STR
59619: PUSH
59620: LD_STRING )
59622: STR
59623: PPUSH
59624: CALL_OW 559
59628: GO 59538
59630: POP
59631: POP
// end ; end ;
59632: LD_VAR 0 1
59636: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59637: LD_INT 0
59639: PPUSH
// if HexInfo ( x , y ) = warehouse then
59640: LD_VAR 0 2
59644: PPUSH
59645: LD_VAR 0 3
59649: PPUSH
59650: CALL_OW 428
59654: PUSH
59655: LD_VAR 0 1
59659: EQUAL
59660: IFFALSE 59687
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59662: LD_ADDR_EXP 53
59666: PUSH
59667: LD_EXP 53
59671: PPUSH
59672: LD_VAR 0 1
59676: PPUSH
59677: LD_INT 0
59679: PPUSH
59680: CALL_OW 1
59684: ST_TO_ADDR
59685: GO 59738
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59687: LD_ADDR_EXP 53
59691: PUSH
59692: LD_EXP 53
59696: PPUSH
59697: LD_VAR 0 1
59701: PPUSH
59702: LD_VAR 0 1
59706: PPUSH
59707: CALL_OW 255
59711: PUSH
59712: LD_VAR 0 1
59716: PUSH
59717: LD_VAR 0 2
59721: PUSH
59722: LD_VAR 0 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: PPUSH
59733: CALL_OW 1
59737: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59738: CALL 59747 0 0
// end ;
59742: LD_VAR 0 4
59746: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59747: LD_INT 0
59749: PPUSH
59750: PPUSH
59751: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59752: LD_STRING resetWarehouseGatheringPoints();
59754: PPUSH
59755: CALL_OW 559
// if warehouseGatheringPoints then
59759: LD_EXP 53
59763: IFFALSE 59889
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59765: LD_ADDR_VAR 0 3
59769: PUSH
59770: LD_EXP 53
59774: PPUSH
59775: CALL 44355 0 1
59779: ST_TO_ADDR
// for i := 1 to list do
59780: LD_ADDR_VAR 0 2
59784: PUSH
59785: DOUBLE
59786: LD_INT 1
59788: DEC
59789: ST_TO_ADDR
59790: LD_VAR 0 3
59794: PUSH
59795: FOR_TO
59796: IFFALSE 59887
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59798: LD_STRING setWarehouseGatheringPointXY(
59800: PUSH
59801: LD_VAR 0 3
59805: PUSH
59806: LD_VAR 0 2
59810: ARRAY
59811: PUSH
59812: LD_INT 1
59814: ARRAY
59815: STR
59816: PUSH
59817: LD_STRING ,
59819: STR
59820: PUSH
59821: LD_VAR 0 3
59825: PUSH
59826: LD_VAR 0 2
59830: ARRAY
59831: PUSH
59832: LD_INT 2
59834: ARRAY
59835: STR
59836: PUSH
59837: LD_STRING ,
59839: STR
59840: PUSH
59841: LD_VAR 0 3
59845: PUSH
59846: LD_VAR 0 2
59850: ARRAY
59851: PUSH
59852: LD_INT 3
59854: ARRAY
59855: STR
59856: PUSH
59857: LD_STRING ,
59859: STR
59860: PUSH
59861: LD_VAR 0 3
59865: PUSH
59866: LD_VAR 0 2
59870: ARRAY
59871: PUSH
59872: LD_INT 4
59874: ARRAY
59875: STR
59876: PUSH
59877: LD_STRING )
59879: STR
59880: PPUSH
59881: CALL_OW 559
59885: GO 59795
59887: POP
59888: POP
// end ; end ;
59889: LD_VAR 0 1
59893: RET
