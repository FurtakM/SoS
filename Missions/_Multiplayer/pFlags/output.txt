// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45698 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46013 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 31
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 32
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 31
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 32
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 34
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 33
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45153 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45153 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45153 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45153 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45153 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45153 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45153 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45153 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 5005 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44986 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44986 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44986 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44986 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 44986 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 44986 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 44986 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 44986 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 44986 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 44986 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 44986 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 44986 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 44986 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 44986 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 44986 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 44986 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45153 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45153 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45153 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45153 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45153 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45153 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45153 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45153 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45153 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45153 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45153 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45153 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45153 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45153 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45153 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45153 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45153 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45153 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45153 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45153 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45153 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45153 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45153 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45153 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 41975 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 53828 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 50535 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 53845 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 51138 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL 53886 0 2
2857: PPOPN 2
2859: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_VAR 0 3
2874: PPUSH
2875: CALL 51191 0 3
2879: PPOPN 3
2881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// if exist_mode then
2886: LD_VAR 0 2
2890: IFFALSE 2936
// begin unit := CreateCharacter ( prefix & ident ) ;
2892: LD_ADDR_VAR 0 5
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_VAR 0 1
2906: STR
2907: PPUSH
2908: CALL_OW 34
2912: ST_TO_ADDR
// if unit then
2913: LD_VAR 0 5
2917: IFFALSE 2934
// DeleteCharacters ( prefix & ident ) ;
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: STR
2929: PPUSH
2930: CALL_OW 40
// end else
2934: GO 2951
// unit := NewCharacter ( ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// result := unit ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_VAR 0 5
2960: ST_TO_ADDR
// end ;
2961: LD_VAR 0 4
2965: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2966: LD_INT 0
2968: PPUSH
2969: PPUSH
// if not side or not nation then
2970: LD_VAR 0 1
2974: NOT
2975: PUSH
2976: LD_VAR 0 2
2980: NOT
2981: OR
2982: IFFALSE 2986
// exit ;
2984: GO 3754
// case nation of nation_american :
2986: LD_VAR 0 2
2990: PUSH
2991: LD_INT 1
2993: DOUBLE
2994: EQUAL
2995: IFTRUE 2999
2997: GO 3213
2999: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3000: LD_ADDR_VAR 0 4
3004: PUSH
3005: LD_INT 35
3007: PUSH
3008: LD_INT 45
3010: PUSH
3011: LD_INT 46
3013: PUSH
3014: LD_INT 47
3016: PUSH
3017: LD_INT 82
3019: PUSH
3020: LD_INT 83
3022: PUSH
3023: LD_INT 84
3025: PUSH
3026: LD_INT 85
3028: PUSH
3029: LD_INT 86
3031: PUSH
3032: LD_INT 1
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: LD_INT 6
3040: PUSH
3041: LD_INT 15
3043: PUSH
3044: LD_INT 16
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 12
3052: PUSH
3053: LD_INT 13
3055: PUSH
3056: LD_INT 10
3058: PUSH
3059: LD_INT 14
3061: PUSH
3062: LD_INT 20
3064: PUSH
3065: LD_INT 21
3067: PUSH
3068: LD_INT 22
3070: PUSH
3071: LD_INT 25
3073: PUSH
3074: LD_INT 32
3076: PUSH
3077: LD_INT 27
3079: PUSH
3080: LD_INT 36
3082: PUSH
3083: LD_INT 69
3085: PUSH
3086: LD_INT 39
3088: PUSH
3089: LD_INT 34
3091: PUSH
3092: LD_INT 40
3094: PUSH
3095: LD_INT 48
3097: PUSH
3098: LD_INT 49
3100: PUSH
3101: LD_INT 50
3103: PUSH
3104: LD_INT 51
3106: PUSH
3107: LD_INT 52
3109: PUSH
3110: LD_INT 53
3112: PUSH
3113: LD_INT 54
3115: PUSH
3116: LD_INT 55
3118: PUSH
3119: LD_INT 56
3121: PUSH
3122: LD_INT 57
3124: PUSH
3125: LD_INT 58
3127: PUSH
3128: LD_INT 59
3130: PUSH
3131: LD_INT 60
3133: PUSH
3134: LD_INT 61
3136: PUSH
3137: LD_INT 62
3139: PUSH
3140: LD_INT 80
3142: PUSH
3143: LD_INT 82
3145: PUSH
3146: LD_INT 83
3148: PUSH
3149: LD_INT 84
3151: PUSH
3152: LD_INT 85
3154: PUSH
3155: LD_INT 86
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: ST_TO_ADDR
3211: GO 3678
3213: LD_INT 2
3215: DOUBLE
3216: EQUAL
3217: IFTRUE 3221
3219: GO 3447
3221: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3222: LD_ADDR_VAR 0 4
3226: PUSH
3227: LD_INT 35
3229: PUSH
3230: LD_INT 45
3232: PUSH
3233: LD_INT 46
3235: PUSH
3236: LD_INT 47
3238: PUSH
3239: LD_INT 82
3241: PUSH
3242: LD_INT 83
3244: PUSH
3245: LD_INT 84
3247: PUSH
3248: LD_INT 85
3250: PUSH
3251: LD_INT 87
3253: PUSH
3254: LD_INT 70
3256: PUSH
3257: LD_INT 1
3259: PUSH
3260: LD_INT 11
3262: PUSH
3263: LD_INT 3
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: LD_INT 5
3271: PUSH
3272: LD_INT 6
3274: PUSH
3275: LD_INT 15
3277: PUSH
3278: LD_INT 18
3280: PUSH
3281: LD_INT 7
3283: PUSH
3284: LD_INT 17
3286: PUSH
3287: LD_INT 8
3289: PUSH
3290: LD_INT 20
3292: PUSH
3293: LD_INT 21
3295: PUSH
3296: LD_INT 22
3298: PUSH
3299: LD_INT 72
3301: PUSH
3302: LD_INT 26
3304: PUSH
3305: LD_INT 69
3307: PUSH
3308: LD_INT 39
3310: PUSH
3311: LD_INT 40
3313: PUSH
3314: LD_INT 41
3316: PUSH
3317: LD_INT 42
3319: PUSH
3320: LD_INT 43
3322: PUSH
3323: LD_INT 48
3325: PUSH
3326: LD_INT 49
3328: PUSH
3329: LD_INT 50
3331: PUSH
3332: LD_INT 51
3334: PUSH
3335: LD_INT 52
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 54
3343: PUSH
3344: LD_INT 55
3346: PUSH
3347: LD_INT 56
3349: PUSH
3350: LD_INT 60
3352: PUSH
3353: LD_INT 61
3355: PUSH
3356: LD_INT 62
3358: PUSH
3359: LD_INT 66
3361: PUSH
3362: LD_INT 67
3364: PUSH
3365: LD_INT 68
3367: PUSH
3368: LD_INT 81
3370: PUSH
3371: LD_INT 82
3373: PUSH
3374: LD_INT 83
3376: PUSH
3377: LD_INT 84
3379: PUSH
3380: LD_INT 85
3382: PUSH
3383: LD_INT 87
3385: PUSH
3386: LD_INT 88
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: ST_TO_ADDR
3445: GO 3678
3447: LD_INT 3
3449: DOUBLE
3450: EQUAL
3451: IFTRUE 3455
3453: GO 3677
3455: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 46
3463: PUSH
3464: LD_INT 47
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: LD_INT 82
3475: PUSH
3476: LD_INT 83
3478: PUSH
3479: LD_INT 84
3481: PUSH
3482: LD_INT 85
3484: PUSH
3485: LD_INT 86
3487: PUSH
3488: LD_INT 11
3490: PUSH
3491: LD_INT 9
3493: PUSH
3494: LD_INT 20
3496: PUSH
3497: LD_INT 19
3499: PUSH
3500: LD_INT 21
3502: PUSH
3503: LD_INT 24
3505: PUSH
3506: LD_INT 22
3508: PUSH
3509: LD_INT 25
3511: PUSH
3512: LD_INT 28
3514: PUSH
3515: LD_INT 29
3517: PUSH
3518: LD_INT 30
3520: PUSH
3521: LD_INT 31
3523: PUSH
3524: LD_INT 37
3526: PUSH
3527: LD_INT 38
3529: PUSH
3530: LD_INT 32
3532: PUSH
3533: LD_INT 27
3535: PUSH
3536: LD_INT 33
3538: PUSH
3539: LD_INT 69
3541: PUSH
3542: LD_INT 39
3544: PUSH
3545: LD_INT 34
3547: PUSH
3548: LD_INT 40
3550: PUSH
3551: LD_INT 71
3553: PUSH
3554: LD_INT 23
3556: PUSH
3557: LD_INT 44
3559: PUSH
3560: LD_INT 48
3562: PUSH
3563: LD_INT 49
3565: PUSH
3566: LD_INT 50
3568: PUSH
3569: LD_INT 51
3571: PUSH
3572: LD_INT 52
3574: PUSH
3575: LD_INT 53
3577: PUSH
3578: LD_INT 54
3580: PUSH
3581: LD_INT 55
3583: PUSH
3584: LD_INT 56
3586: PUSH
3587: LD_INT 57
3589: PUSH
3590: LD_INT 58
3592: PUSH
3593: LD_INT 59
3595: PUSH
3596: LD_INT 63
3598: PUSH
3599: LD_INT 64
3601: PUSH
3602: LD_INT 65
3604: PUSH
3605: LD_INT 82
3607: PUSH
3608: LD_INT 83
3610: PUSH
3611: LD_INT 84
3613: PUSH
3614: LD_INT 85
3616: PUSH
3617: LD_INT 86
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: ST_TO_ADDR
3675: GO 3678
3677: POP
// if state > - 1 and state < 3 then
3678: LD_VAR 0 3
3682: PUSH
3683: LD_INT 1
3685: NEG
3686: GREATER
3687: PUSH
3688: LD_VAR 0 3
3692: PUSH
3693: LD_INT 3
3695: LESS
3696: AND
3697: IFFALSE 3754
// for i in result do
3699: LD_ADDR_VAR 0 5
3703: PUSH
3704: LD_VAR 0 4
3708: PUSH
3709: FOR_IN
3710: IFFALSE 3752
// if GetTech ( i , side ) <> state then
3712: LD_VAR 0 5
3716: PPUSH
3717: LD_VAR 0 1
3721: PPUSH
3722: CALL_OW 321
3726: PUSH
3727: LD_VAR 0 3
3731: NONEQUAL
3732: IFFALSE 3750
// result := result diff i ;
3734: LD_ADDR_VAR 0 4
3738: PUSH
3739: LD_VAR 0 4
3743: PUSH
3744: LD_VAR 0 5
3748: DIFF
3749: ST_TO_ADDR
3750: GO 3709
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 4
3758: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3759: LD_INT 0
3761: PPUSH
3762: PPUSH
3763: PPUSH
// result := true ;
3764: LD_ADDR_VAR 0 3
3768: PUSH
3769: LD_INT 1
3771: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3772: LD_ADDR_VAR 0 5
3776: PUSH
3777: LD_VAR 0 2
3781: PPUSH
3782: CALL_OW 480
3786: ST_TO_ADDR
// if not tmp then
3787: LD_VAR 0 5
3791: NOT
3792: IFFALSE 3796
// exit ;
3794: GO 3845
// for i in tmp do
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_VAR 0 5
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3843
// if GetTech ( i , side ) <> state_researched then
3809: LD_VAR 0 4
3813: PPUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 321
3823: PUSH
3824: LD_INT 2
3826: NONEQUAL
3827: IFFALSE 3841
// begin result := false ;
3829: LD_ADDR_VAR 0 3
3833: PUSH
3834: LD_INT 0
3836: ST_TO_ADDR
// exit ;
3837: POP
3838: POP
3839: GO 3845
// end ;
3841: GO 3806
3843: POP
3844: POP
// end ;
3845: LD_VAR 0 3
3849: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3865: LD_VAR 0 1
3869: NOT
3870: PUSH
3871: LD_VAR 0 1
3875: PPUSH
3876: CALL_OW 257
3880: PUSH
3881: LD_INT 9
3883: NONEQUAL
3884: OR
3885: IFFALSE 3889
// exit ;
3887: GO 4462
// side := GetSide ( unit ) ;
3889: LD_ADDR_VAR 0 9
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 255
3903: ST_TO_ADDR
// tech_space := tech_spacanom ;
3904: LD_ADDR_VAR 0 12
3908: PUSH
3909: LD_INT 29
3911: ST_TO_ADDR
// tech_time := tech_taurad ;
3912: LD_ADDR_VAR 0 13
3916: PUSH
3917: LD_INT 28
3919: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3920: LD_ADDR_VAR 0 11
3924: PUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: CALL_OW 310
3934: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3935: LD_VAR 0 11
3939: PPUSH
3940: CALL_OW 247
3944: PUSH
3945: LD_INT 2
3947: EQUAL
3948: IFFALSE 3952
// exit ;
3950: GO 4462
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3952: LD_ADDR_VAR 0 8
3956: PUSH
3957: LD_INT 81
3959: PUSH
3960: LD_VAR 0 9
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: LD_INT 21
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: ST_TO_ADDR
// if not tmp then
3995: LD_VAR 0 8
3999: NOT
4000: IFFALSE 4004
// exit ;
4002: GO 4462
// if in_unit then
4004: LD_VAR 0 11
4008: IFFALSE 4032
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4010: LD_ADDR_VAR 0 10
4014: PUSH
4015: LD_VAR 0 8
4019: PPUSH
4020: LD_VAR 0 11
4024: PPUSH
4025: CALL_OW 74
4029: ST_TO_ADDR
4030: GO 4052
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4032: LD_ADDR_VAR 0 10
4036: PUSH
4037: LD_VAR 0 8
4041: PPUSH
4042: LD_VAR 0 1
4046: PPUSH
4047: CALL_OW 74
4051: ST_TO_ADDR
// if not enemy then
4052: LD_VAR 0 10
4056: NOT
4057: IFFALSE 4061
// exit ;
4059: GO 4462
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4061: LD_VAR 0 11
4065: PUSH
4066: LD_VAR 0 11
4070: PPUSH
4071: LD_VAR 0 10
4075: PPUSH
4076: CALL_OW 296
4080: PUSH
4081: LD_INT 13
4083: GREATER
4084: AND
4085: PUSH
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_VAR 0 10
4095: PPUSH
4096: CALL_OW 296
4100: PUSH
4101: LD_INT 12
4103: GREATER
4104: OR
4105: IFFALSE 4109
// exit ;
4107: GO 4462
// missile := [ 1 ] ;
4109: LD_ADDR_VAR 0 14
4113: PUSH
4114: LD_INT 1
4116: PUSH
4117: EMPTY
4118: LIST
4119: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4120: LD_VAR 0 9
4124: PPUSH
4125: LD_VAR 0 12
4129: PPUSH
4130: CALL_OW 325
4134: IFFALSE 4163
// missile := Replace ( missile , missile + 1 , 2 ) ;
4136: LD_ADDR_VAR 0 14
4140: PUSH
4141: LD_VAR 0 14
4145: PPUSH
4146: LD_VAR 0 14
4150: PUSH
4151: LD_INT 1
4153: PLUS
4154: PPUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL_OW 1
4162: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4163: LD_VAR 0 9
4167: PPUSH
4168: LD_VAR 0 13
4172: PPUSH
4173: CALL_OW 325
4177: PUSH
4178: LD_VAR 0 10
4182: PPUSH
4183: CALL_OW 255
4187: PPUSH
4188: LD_VAR 0 13
4192: PPUSH
4193: CALL_OW 325
4197: NOT
4198: AND
4199: IFFALSE 4228
// missile := Replace ( missile , missile + 1 , 3 ) ;
4201: LD_ADDR_VAR 0 14
4205: PUSH
4206: LD_VAR 0 14
4210: PPUSH
4211: LD_VAR 0 14
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: CALL_OW 1
4227: ST_TO_ADDR
// if missile < 2 then
4228: LD_VAR 0 14
4232: PUSH
4233: LD_INT 2
4235: LESS
4236: IFFALSE 4240
// exit ;
4238: GO 4462
// x := GetX ( enemy ) ;
4240: LD_ADDR_VAR 0 4
4244: PUSH
4245: LD_VAR 0 10
4249: PPUSH
4250: CALL_OW 250
4254: ST_TO_ADDR
// y := GetY ( enemy ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_VAR 0 10
4264: PPUSH
4265: CALL_OW 251
4269: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4270: LD_ADDR_VAR 0 6
4274: PUSH
4275: LD_VAR 0 4
4279: PUSH
4280: LD_INT 1
4282: NEG
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 12
4291: PLUS
4292: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4293: LD_ADDR_VAR 0 7
4297: PUSH
4298: LD_VAR 0 5
4302: PUSH
4303: LD_INT 1
4305: NEG
4306: PPUSH
4307: LD_INT 1
4309: PPUSH
4310: CALL_OW 12
4314: PLUS
4315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4316: LD_VAR 0 6
4320: PPUSH
4321: LD_VAR 0 7
4325: PPUSH
4326: CALL_OW 488
4330: NOT
4331: IFFALSE 4353
// begin _x := x ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: LD_VAR 0 4
4342: ST_TO_ADDR
// _y := y ;
4343: LD_ADDR_VAR 0 7
4347: PUSH
4348: LD_VAR 0 5
4352: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_VAR 0 14
4365: PPUSH
4366: CALL_OW 12
4370: ST_TO_ADDR
// case i of 1 :
4371: LD_VAR 0 3
4375: PUSH
4376: LD_INT 1
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4401
4384: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_VAR 0 10
4394: PPUSH
4395: CALL_OW 115
4399: GO 4462
4401: LD_INT 2
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4431
4409: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4410: LD_VAR 0 1
4414: PPUSH
4415: LD_VAR 0 6
4419: PPUSH
4420: LD_VAR 0 7
4424: PPUSH
4425: CALL_OW 153
4429: GO 4462
4431: LD_INT 3
4433: DOUBLE
4434: EQUAL
4435: IFTRUE 4439
4437: GO 4461
4439: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_VAR 0 6
4449: PPUSH
4450: LD_VAR 0 7
4454: PPUSH
4455: CALL_OW 154
4459: GO 4462
4461: POP
// end ;
4462: LD_VAR 0 2
4466: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
// if not unit or not building then
4475: LD_VAR 0 1
4479: NOT
4480: PUSH
4481: LD_VAR 0 2
4485: NOT
4486: OR
4487: IFFALSE 4491
// exit ;
4489: GO 4649
// x := GetX ( building ) ;
4491: LD_ADDR_VAR 0 5
4495: PUSH
4496: LD_VAR 0 2
4500: PPUSH
4501: CALL_OW 250
4505: ST_TO_ADDR
// y := GetY ( building ) ;
4506: LD_ADDR_VAR 0 6
4510: PUSH
4511: LD_VAR 0 2
4515: PPUSH
4516: CALL_OW 251
4520: ST_TO_ADDR
// for i = 0 to 5 do
4521: LD_ADDR_VAR 0 4
4525: PUSH
4526: DOUBLE
4527: LD_INT 0
4529: DEC
4530: ST_TO_ADDR
4531: LD_INT 5
4533: PUSH
4534: FOR_TO
4535: IFFALSE 4647
// begin _x := ShiftX ( x , i , 3 ) ;
4537: LD_ADDR_VAR 0 7
4541: PUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_VAR 0 4
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: CALL_OW 272
4559: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4560: LD_ADDR_VAR 0 8
4564: PUSH
4565: LD_VAR 0 6
4569: PPUSH
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 273
4582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4583: LD_VAR 0 7
4587: PPUSH
4588: LD_VAR 0 8
4592: PPUSH
4593: CALL_OW 488
4597: NOT
4598: IFFALSE 4602
// continue ;
4600: GO 4534
// if HexInfo ( _x , _y ) = 0 then
4602: LD_VAR 0 7
4606: PPUSH
4607: LD_VAR 0 8
4611: PPUSH
4612: CALL_OW 428
4616: PUSH
4617: LD_INT 0
4619: EQUAL
4620: IFFALSE 4645
// begin ComMoveXY ( unit , _x , _y ) ;
4622: LD_VAR 0 1
4626: PPUSH
4627: LD_VAR 0 7
4631: PPUSH
4632: LD_VAR 0 8
4636: PPUSH
4637: CALL_OW 111
// exit ;
4641: POP
4642: POP
4643: GO 4649
// end ; end ;
4645: GO 4534
4647: POP
4648: POP
// end ;
4649: LD_VAR 0 3
4653: RET
// export function ScanBase ( side , base_area ) ; begin
4654: LD_INT 0
4656: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_VAR 0 2
4666: PPUSH
4667: LD_INT 81
4669: PUSH
4670: LD_VAR 0 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 70
4683: ST_TO_ADDR
// end ;
4684: LD_VAR 0 3
4688: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4689: LD_INT 0
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
// result := false ;
4695: LD_ADDR_VAR 0 2
4699: PUSH
4700: LD_INT 0
4702: ST_TO_ADDR
// side := GetSide ( unit ) ;
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 255
4717: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4718: LD_ADDR_VAR 0 4
4722: PUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: CALL_OW 248
4732: ST_TO_ADDR
// case nat of 1 :
4733: LD_VAR 0 4
4737: PUSH
4738: LD_INT 1
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4757
4746: POP
// tech := tech_lassight ; 2 :
4747: LD_ADDR_VAR 0 5
4751: PUSH
4752: LD_INT 12
4754: ST_TO_ADDR
4755: GO 4796
4757: LD_INT 2
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4776
4765: POP
// tech := tech_mortar ; 3 :
4766: LD_ADDR_VAR 0 5
4770: PUSH
4771: LD_INT 41
4773: ST_TO_ADDR
4774: GO 4796
4776: LD_INT 3
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4795
4784: POP
// tech := tech_bazooka ; end ;
4785: LD_ADDR_VAR 0 5
4789: PUSH
4790: LD_INT 44
4792: ST_TO_ADDR
4793: GO 4796
4795: POP
// if Researched ( side , tech ) then
4796: LD_VAR 0 3
4800: PPUSH
4801: LD_VAR 0 5
4805: PPUSH
4806: CALL_OW 325
4810: IFFALSE 4837
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 8
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: LD_VAR 0 4
4835: ARRAY
4836: ST_TO_ADDR
// end ;
4837: LD_VAR 0 2
4841: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4842: LD_INT 0
4844: PPUSH
4845: PPUSH
4846: PPUSH
// if not mines then
4847: LD_VAR 0 2
4851: NOT
4852: IFFALSE 4856
// exit ;
4854: GO 5000
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4856: LD_ADDR_VAR 0 5
4860: PUSH
4861: LD_INT 81
4863: PUSH
4864: LD_VAR 0 1
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: LD_INT 21
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PPUSH
4894: CALL_OW 69
4898: ST_TO_ADDR
// for i in mines do
4899: LD_ADDR_VAR 0 4
4903: PUSH
4904: LD_VAR 0 2
4908: PUSH
4909: FOR_IN
4910: IFFALSE 4998
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4912: LD_VAR 0 4
4916: PUSH
4917: LD_INT 1
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 4
4925: PUSH
4926: LD_INT 2
4928: ARRAY
4929: PPUSH
4930: CALL_OW 458
4934: NOT
4935: IFFALSE 4939
// continue ;
4937: GO 4909
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4939: LD_VAR 0 4
4943: PUSH
4944: LD_INT 1
4946: ARRAY
4947: PPUSH
4948: LD_VAR 0 4
4952: PUSH
4953: LD_INT 2
4955: ARRAY
4956: PPUSH
4957: CALL_OW 428
4961: PUSH
4962: LD_VAR 0 5
4966: IN
4967: IFFALSE 4996
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4969: LD_VAR 0 4
4973: PUSH
4974: LD_INT 1
4976: ARRAY
4977: PPUSH
4978: LD_VAR 0 4
4982: PUSH
4983: LD_INT 2
4985: ARRAY
4986: PPUSH
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 456
// end ;
4996: GO 4909
4998: POP
4999: POP
// end ;
5000: LD_VAR 0 3
5004: RET
// export function Count ( array ) ; begin
5005: LD_INT 0
5007: PPUSH
// result := array + 0 ;
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 0
5020: PLUS
5021: ST_TO_ADDR
// end ;
5022: LD_VAR 0 2
5026: RET
// export function IsEmpty ( building ) ; begin
5027: LD_INT 0
5029: PPUSH
// if not building then
5030: LD_VAR 0 1
5034: NOT
5035: IFFALSE 5039
// exit ;
5037: GO 5082
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5039: LD_ADDR_VAR 0 2
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 22
5051: PUSH
5052: LD_VAR 0 1
5056: PPUSH
5057: CALL_OW 255
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PUSH
5066: LD_INT 58
5068: PUSH
5069: EMPTY
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PPUSH
5076: CALL_OW 69
5080: IN
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 2
5086: RET
// export function IsNotFull ( building ) ; var places ; begin
5087: LD_INT 0
5089: PPUSH
5090: PPUSH
// if not building then
5091: LD_VAR 0 1
5095: NOT
5096: IFFALSE 5100
// exit ;
5098: GO 5128
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5100: LD_ADDR_VAR 0 2
5104: PUSH
5105: LD_VAR 0 1
5109: PPUSH
5110: LD_INT 3
5112: PUSH
5113: LD_INT 62
5115: PUSH
5116: EMPTY
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 72
5127: ST_TO_ADDR
// end ;
5128: LD_VAR 0 2
5132: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5133: LD_INT 0
5135: PPUSH
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tmp := [ ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: EMPTY
5145: ST_TO_ADDR
// list := [ ] ;
5146: LD_ADDR_VAR 0 5
5150: PUSH
5151: EMPTY
5152: ST_TO_ADDR
// for i = 16 to 25 do
5153: LD_ADDR_VAR 0 4
5157: PUSH
5158: DOUBLE
5159: LD_INT 16
5161: DEC
5162: ST_TO_ADDR
5163: LD_INT 25
5165: PUSH
5166: FOR_TO
5167: IFFALSE 5240
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 22
5181: PUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: CALL_OW 255
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 91
5198: PUSH
5199: LD_VAR 0 1
5203: PUSH
5204: LD_INT 6
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 30
5214: PUSH
5215: LD_VAR 0 4
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: ADD
5237: ST_TO_ADDR
5238: GO 5166
5240: POP
5241: POP
// for i = 1 to tmp do
5242: LD_ADDR_VAR 0 4
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_VAR 0 3
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5346
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5260: LD_ADDR_VAR 0 5
5264: PUSH
5265: LD_VAR 0 5
5269: PUSH
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 4
5279: ARRAY
5280: PPUSH
5281: CALL_OW 266
5285: PUSH
5286: LD_VAR 0 3
5290: PUSH
5291: LD_VAR 0 4
5295: ARRAY
5296: PPUSH
5297: CALL_OW 250
5301: PUSH
5302: LD_VAR 0 3
5306: PUSH
5307: LD_VAR 0 4
5311: ARRAY
5312: PPUSH
5313: CALL_OW 251
5317: PUSH
5318: LD_VAR 0 3
5322: PUSH
5323: LD_VAR 0 4
5327: ARRAY
5328: PPUSH
5329: CALL_OW 254
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: ADD
5343: ST_TO_ADDR
5344: GO 5257
5346: POP
5347: POP
// result := list ;
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 5
5357: ST_TO_ADDR
// end ;
5358: LD_VAR 0 2
5362: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5363: LD_INT 0
5365: PPUSH
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
5370: PPUSH
5371: PPUSH
// if not factory then
5372: LD_VAR 0 1
5376: NOT
5377: IFFALSE 5381
// exit ;
5379: GO 5974
// if control = control_apeman then
5381: LD_VAR 0 4
5385: PUSH
5386: LD_INT 5
5388: EQUAL
5389: IFFALSE 5498
// begin tmp := UnitsInside ( factory ) ;
5391: LD_ADDR_VAR 0 8
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 313
5405: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5406: LD_VAR 0 8
5410: PPUSH
5411: LD_INT 25
5413: PUSH
5414: LD_INT 12
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 72
5425: NOT
5426: IFFALSE 5436
// control := control_manual ;
5428: LD_ADDR_VAR 0 4
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_VAR 0 1
5445: PPUSH
5446: CALL 5133 0 1
5450: ST_TO_ADDR
// if tmp then
5451: LD_VAR 0 8
5455: IFFALSE 5498
// begin for i in tmp do
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 8
5466: PUSH
5467: FOR_IN
5468: IFFALSE 5496
// if i [ 1 ] = b_ext_radio then
5470: LD_VAR 0 7
5474: PUSH
5475: LD_INT 1
5477: ARRAY
5478: PUSH
5479: LD_INT 22
5481: EQUAL
5482: IFFALSE 5494
// begin control := control_remote ;
5484: LD_ADDR_VAR 0 4
5488: PUSH
5489: LD_INT 2
5491: ST_TO_ADDR
// break ;
5492: GO 5496
// end ;
5494: GO 5467
5496: POP
5497: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: LD_VAR 0 4
5517: PPUSH
5518: LD_VAR 0 5
5522: PPUSH
5523: CALL_OW 448
5527: IFFALSE 5562
// begin result := [ chassis , engine , control , weapon ] ;
5529: LD_ADDR_VAR 0 6
5533: PUSH
5534: LD_VAR 0 2
5538: PUSH
5539: LD_VAR 0 3
5543: PUSH
5544: LD_VAR 0 4
5548: PUSH
5549: LD_VAR 0 5
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// exit ;
5560: GO 5974
// end ; _chassis := AvailableChassisList ( factory ) ;
5562: LD_ADDR_VAR 0 9
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 475
5576: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5577: LD_ADDR_VAR 0 11
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 476
5591: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5592: LD_ADDR_VAR 0 12
5596: PUSH
5597: LD_VAR 0 1
5601: PPUSH
5602: CALL_OW 477
5606: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5607: LD_ADDR_VAR 0 10
5611: PUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 478
5621: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5622: LD_VAR 0 9
5626: NOT
5627: PUSH
5628: LD_VAR 0 11
5632: NOT
5633: OR
5634: PUSH
5635: LD_VAR 0 12
5639: NOT
5640: OR
5641: PUSH
5642: LD_VAR 0 10
5646: NOT
5647: OR
5648: IFFALSE 5683
// begin result := [ chassis , engine , control , weapon ] ;
5650: LD_ADDR_VAR 0 6
5654: PUSH
5655: LD_VAR 0 2
5659: PUSH
5660: LD_VAR 0 3
5664: PUSH
5665: LD_VAR 0 4
5669: PUSH
5670: LD_VAR 0 5
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: ST_TO_ADDR
// exit ;
5681: GO 5974
// end ; if not chassis in _chassis then
5683: LD_VAR 0 2
5687: PUSH
5688: LD_VAR 0 9
5692: IN
5693: NOT
5694: IFFALSE 5720
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_VAR 0 9
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_VAR 0 9
5713: PPUSH
5714: CALL_OW 12
5718: ARRAY
5719: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5720: LD_VAR 0 2
5724: PPUSH
5725: LD_VAR 0 3
5729: PPUSH
5730: CALL 5979 0 2
5734: NOT
5735: IFFALSE 5794
// repeat engine := _engine [ 1 ] ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_VAR 0 11
5746: PUSH
5747: LD_INT 1
5749: ARRAY
5750: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5751: LD_ADDR_VAR 0 11
5755: PUSH
5756: LD_VAR 0 11
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: CALL_OW 3
5768: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5769: LD_VAR 0 2
5773: PPUSH
5774: LD_VAR 0 3
5778: PPUSH
5779: CALL 5979 0 2
5783: PUSH
5784: LD_VAR 0 11
5788: PUSH
5789: EMPTY
5790: EQUAL
5791: OR
5792: IFFALSE 5737
// if not control in _control then
5794: LD_VAR 0 4
5798: PUSH
5799: LD_VAR 0 12
5803: IN
5804: NOT
5805: IFFALSE 5831
// control := _control [ rand ( 1 , _control ) ] ;
5807: LD_ADDR_VAR 0 4
5811: PUSH
5812: LD_VAR 0 12
5816: PUSH
5817: LD_INT 1
5819: PPUSH
5820: LD_VAR 0 12
5824: PPUSH
5825: CALL_OW 12
5829: ARRAY
5830: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5831: LD_VAR 0 2
5835: PPUSH
5836: LD_VAR 0 5
5840: PPUSH
5841: CALL 6199 0 2
5845: NOT
5846: IFFALSE 5905
// repeat weapon := _weapon [ 1 ] ;
5848: LD_ADDR_VAR 0 5
5852: PUSH
5853: LD_VAR 0 10
5857: PUSH
5858: LD_INT 1
5860: ARRAY
5861: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5862: LD_ADDR_VAR 0 10
5866: PUSH
5867: LD_VAR 0 10
5871: PPUSH
5872: LD_INT 1
5874: PPUSH
5875: CALL_OW 3
5879: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5880: LD_VAR 0 2
5884: PPUSH
5885: LD_VAR 0 5
5889: PPUSH
5890: CALL 6199 0 2
5894: PUSH
5895: LD_VAR 0 10
5899: PUSH
5900: EMPTY
5901: EQUAL
5902: OR
5903: IFFALSE 5848
// result := [ ] ;
5905: LD_ADDR_VAR 0 6
5909: PUSH
5910: EMPTY
5911: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_VAR 0 3
5926: PPUSH
5927: LD_VAR 0 4
5931: PPUSH
5932: LD_VAR 0 5
5936: PPUSH
5937: CALL_OW 448
5941: IFFALSE 5974
// result := [ chassis , engine , control , weapon ] ;
5943: LD_ADDR_VAR 0 6
5947: PUSH
5948: LD_VAR 0 2
5952: PUSH
5953: LD_VAR 0 3
5957: PUSH
5958: LD_VAR 0 4
5962: PUSH
5963: LD_VAR 0 5
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: ST_TO_ADDR
// end ;
5974: LD_VAR 0 6
5978: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5979: LD_INT 0
5981: PPUSH
// if not chassis or not engine then
5982: LD_VAR 0 1
5986: NOT
5987: PUSH
5988: LD_VAR 0 2
5992: NOT
5993: OR
5994: IFFALSE 5998
// exit ;
5996: GO 6194
// case engine of engine_solar :
5998: LD_VAR 0 2
6002: PUSH
6003: LD_INT 2
6005: DOUBLE
6006: EQUAL
6007: IFTRUE 6011
6009: GO 6049
6011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 11
6019: PUSH
6020: LD_INT 12
6022: PUSH
6023: LD_INT 13
6025: PUSH
6026: LD_INT 14
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: LD_INT 2
6034: PUSH
6035: LD_INT 3
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: ST_TO_ADDR
6047: GO 6178
6049: LD_INT 1
6051: DOUBLE
6052: EQUAL
6053: IFTRUE 6057
6055: GO 6119
6057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_INT 11
6065: PUSH
6066: LD_INT 12
6068: PUSH
6069: LD_INT 13
6071: PUSH
6072: LD_INT 14
6074: PUSH
6075: LD_INT 1
6077: PUSH
6078: LD_INT 2
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: LD_INT 5
6089: PUSH
6090: LD_INT 21
6092: PUSH
6093: LD_INT 23
6095: PUSH
6096: LD_INT 22
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: ST_TO_ADDR
6117: GO 6178
6119: LD_INT 3
6121: DOUBLE
6122: EQUAL
6123: IFTRUE 6127
6125: GO 6177
6127: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6128: LD_ADDR_VAR 0 3
6132: PUSH
6133: LD_INT 13
6135: PUSH
6136: LD_INT 14
6138: PUSH
6139: LD_INT 2
6141: PUSH
6142: LD_INT 3
6144: PUSH
6145: LD_INT 4
6147: PUSH
6148: LD_INT 5
6150: PUSH
6151: LD_INT 21
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 23
6159: PUSH
6160: LD_INT 24
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: ST_TO_ADDR
6175: GO 6178
6177: POP
// result := ( chassis in result ) ;
6178: LD_ADDR_VAR 0 3
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_VAR 0 3
6192: IN
6193: ST_TO_ADDR
// end ;
6194: LD_VAR 0 3
6198: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6199: LD_INT 0
6201: PPUSH
// if not chassis or not weapon then
6202: LD_VAR 0 1
6206: NOT
6207: PUSH
6208: LD_VAR 0 2
6212: NOT
6213: OR
6214: IFFALSE 6218
// exit ;
6216: GO 7278
// case weapon of us_machine_gun :
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 2
6225: DOUBLE
6226: EQUAL
6227: IFTRUE 6231
6229: GO 6261
6231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6232: LD_ADDR_VAR 0 3
6236: PUSH
6237: LD_INT 1
6239: PUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: LD_INT 5
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: ST_TO_ADDR
6259: GO 7262
6261: LD_INT 3
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6269
6267: GO 6299
6269: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6270: LD_ADDR_VAR 0 3
6274: PUSH
6275: LD_INT 1
6277: PUSH
6278: LD_INT 2
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: LD_INT 5
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: ST_TO_ADDR
6297: GO 7262
6299: LD_INT 11
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6337
6307: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: LD_INT 2
6318: PUSH
6319: LD_INT 3
6321: PUSH
6322: LD_INT 4
6324: PUSH
6325: LD_INT 5
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: ST_TO_ADDR
6335: GO 7262
6337: LD_INT 4
6339: DOUBLE
6340: EQUAL
6341: IFTRUE 6345
6343: GO 6371
6345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_INT 2
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: LD_INT 4
6359: PUSH
6360: LD_INT 5
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: ST_TO_ADDR
6369: GO 7262
6371: LD_INT 5
6373: DOUBLE
6374: EQUAL
6375: IFTRUE 6379
6377: GO 6405
6379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6380: LD_ADDR_VAR 0 3
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_INT 4
6393: PUSH
6394: LD_INT 5
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: ST_TO_ADDR
6403: GO 7262
6405: LD_INT 9
6407: DOUBLE
6408: EQUAL
6409: IFTRUE 6413
6411: GO 6439
6413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: ST_TO_ADDR
6437: GO 7262
6439: LD_INT 7
6441: DOUBLE
6442: EQUAL
6443: IFTRUE 6447
6445: GO 6473
6447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_INT 2
6455: PUSH
6456: LD_INT 3
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: LD_INT 5
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: ST_TO_ADDR
6471: GO 7262
6473: LD_INT 12
6475: DOUBLE
6476: EQUAL
6477: IFTRUE 6481
6479: GO 6507
6481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6482: LD_ADDR_VAR 0 3
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: LD_INT 4
6495: PUSH
6496: LD_INT 5
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
6505: GO 7262
6507: LD_INT 13
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6541
6515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 4
6529: PUSH
6530: LD_INT 5
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: ST_TO_ADDR
6539: GO 7262
6541: LD_INT 14
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6567
6549: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_INT 4
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: ST_TO_ADDR
6565: GO 7262
6567: LD_INT 6
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6593
6575: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6576: LD_ADDR_VAR 0 3
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: LD_INT 5
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: ST_TO_ADDR
6591: GO 7262
6593: LD_INT 10
6595: DOUBLE
6596: EQUAL
6597: IFTRUE 6601
6599: GO 6619
6601: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: LD_INT 4
6609: PUSH
6610: LD_INT 5
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 7262
6619: LD_INT 22
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6653
6627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6628: LD_ADDR_VAR 0 3
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 12
6638: PUSH
6639: LD_INT 13
6641: PUSH
6642: LD_INT 14
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: ST_TO_ADDR
6651: GO 7262
6653: LD_INT 23
6655: DOUBLE
6656: EQUAL
6657: IFTRUE 6661
6659: GO 6687
6661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: LD_INT 11
6669: PUSH
6670: LD_INT 12
6672: PUSH
6673: LD_INT 13
6675: PUSH
6676: LD_INT 14
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 7262
6687: LD_INT 24
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6721
6695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_INT 11
6703: PUSH
6704: LD_INT 12
6706: PUSH
6707: LD_INT 13
6709: PUSH
6710: LD_INT 14
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: ST_TO_ADDR
6719: GO 7262
6721: LD_INT 30
6723: DOUBLE
6724: EQUAL
6725: IFTRUE 6729
6727: GO 6755
6729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6730: LD_ADDR_VAR 0 3
6734: PUSH
6735: LD_INT 11
6737: PUSH
6738: LD_INT 12
6740: PUSH
6741: LD_INT 13
6743: PUSH
6744: LD_INT 14
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: ST_TO_ADDR
6753: GO 7262
6755: LD_INT 25
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 6781
6763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_INT 13
6771: PUSH
6772: LD_INT 14
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: ST_TO_ADDR
6779: GO 7262
6781: LD_INT 27
6783: DOUBLE
6784: EQUAL
6785: IFTRUE 6789
6787: GO 6807
6789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_INT 13
6797: PUSH
6798: LD_INT 14
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 7262
6807: LD_INT 92
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6841
6815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_INT 11
6823: PUSH
6824: LD_INT 12
6826: PUSH
6827: LD_INT 13
6829: PUSH
6830: LD_INT 14
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: ST_TO_ADDR
6839: GO 7262
6841: LD_INT 28
6843: DOUBLE
6844: EQUAL
6845: IFTRUE 6849
6847: GO 6867
6849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6850: LD_ADDR_VAR 0 3
6854: PUSH
6855: LD_INT 13
6857: PUSH
6858: LD_INT 14
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: ST_TO_ADDR
6865: GO 7262
6867: LD_INT 29
6869: DOUBLE
6870: EQUAL
6871: IFTRUE 6875
6873: GO 6893
6875: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6876: LD_ADDR_VAR 0 3
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: LD_INT 14
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: ST_TO_ADDR
6891: GO 7262
6893: LD_INT 31
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6919
6901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 13
6909: PUSH
6910: LD_INT 14
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 7262
6919: LD_INT 26
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6945
6927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6928: LD_ADDR_VAR 0 3
6932: PUSH
6933: LD_INT 13
6935: PUSH
6936: LD_INT 14
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: ST_TO_ADDR
6943: GO 7262
6945: LD_INT 42
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 6979
6953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 23
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 7262
6979: LD_INT 43
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 7013
6987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6988: LD_ADDR_VAR 0 3
6992: PUSH
6993: LD_INT 21
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 23
7001: PUSH
7002: LD_INT 24
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: ST_TO_ADDR
7011: GO 7262
7013: LD_INT 44
7015: DOUBLE
7016: EQUAL
7017: IFTRUE 7021
7019: GO 7047
7021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 24
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: ST_TO_ADDR
7045: GO 7262
7047: LD_INT 45
7049: DOUBLE
7050: EQUAL
7051: IFTRUE 7055
7053: GO 7081
7055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_INT 21
7063: PUSH
7064: LD_INT 22
7066: PUSH
7067: LD_INT 23
7069: PUSH
7070: LD_INT 24
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: ST_TO_ADDR
7079: GO 7262
7081: LD_INT 49
7083: DOUBLE
7084: EQUAL
7085: IFTRUE 7089
7087: GO 7115
7089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7090: LD_ADDR_VAR 0 3
7094: PUSH
7095: LD_INT 21
7097: PUSH
7098: LD_INT 22
7100: PUSH
7101: LD_INT 23
7103: PUSH
7104: LD_INT 24
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: ST_TO_ADDR
7113: GO 7262
7115: LD_INT 51
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7149
7123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7124: LD_ADDR_VAR 0 3
7128: PUSH
7129: LD_INT 21
7131: PUSH
7132: LD_INT 22
7134: PUSH
7135: LD_INT 23
7137: PUSH
7138: LD_INT 24
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: ST_TO_ADDR
7147: GO 7262
7149: LD_INT 52
7151: DOUBLE
7152: EQUAL
7153: IFTRUE 7157
7155: GO 7183
7157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7158: LD_ADDR_VAR 0 3
7162: PUSH
7163: LD_INT 21
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_INT 23
7171: PUSH
7172: LD_INT 24
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: ST_TO_ADDR
7181: GO 7262
7183: LD_INT 53
7185: DOUBLE
7186: EQUAL
7187: IFTRUE 7191
7189: GO 7209
7191: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7192: LD_ADDR_VAR 0 3
7196: PUSH
7197: LD_INT 23
7199: PUSH
7200: LD_INT 24
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: ST_TO_ADDR
7207: GO 7262
7209: LD_INT 46
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7217
7215: GO 7235
7217: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 23
7225: PUSH
7226: LD_INT 24
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: ST_TO_ADDR
7233: GO 7262
7235: LD_INT 47
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7261
7243: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: LD_INT 23
7251: PUSH
7252: LD_INT 24
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: ST_TO_ADDR
7259: GO 7262
7261: POP
// result := ( chassis in result ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 1
7271: PUSH
7272: LD_VAR 0 3
7276: IN
7277: ST_TO_ADDR
// end ;
7278: LD_VAR 0 3
7282: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7283: LD_INT 0
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
// result := array ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_VAR 0 1
7301: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7302: LD_VAR 0 1
7306: NOT
7307: PUSH
7308: LD_VAR 0 2
7312: NOT
7313: OR
7314: PUSH
7315: LD_VAR 0 3
7319: NOT
7320: OR
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_VAR 0 1
7331: GREATER
7332: OR
7333: PUSH
7334: LD_VAR 0 3
7338: PUSH
7339: LD_VAR 0 1
7343: GREATER
7344: OR
7345: IFFALSE 7349
// exit ;
7347: GO 7645
// if direction then
7349: LD_VAR 0 4
7353: IFFALSE 7417
// begin d := 1 ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if i_from > i_to then
7363: LD_VAR 0 2
7367: PUSH
7368: LD_VAR 0 3
7372: GREATER
7373: IFFALSE 7399
// length := ( array - i_from ) + i_to else
7375: LD_ADDR_VAR 0 11
7379: PUSH
7380: LD_VAR 0 1
7384: PUSH
7385: LD_VAR 0 2
7389: MINUS
7390: PUSH
7391: LD_VAR 0 3
7395: PLUS
7396: ST_TO_ADDR
7397: GO 7415
// length := i_to - i_from ;
7399: LD_ADDR_VAR 0 11
7403: PUSH
7404: LD_VAR 0 3
7408: PUSH
7409: LD_VAR 0 2
7413: MINUS
7414: ST_TO_ADDR
// end else
7415: GO 7478
// begin d := - 1 ;
7417: LD_ADDR_VAR 0 9
7421: PUSH
7422: LD_INT 1
7424: NEG
7425: ST_TO_ADDR
// if i_from > i_to then
7426: LD_VAR 0 2
7430: PUSH
7431: LD_VAR 0 3
7435: GREATER
7436: IFFALSE 7456
// length := i_from - i_to else
7438: LD_ADDR_VAR 0 11
7442: PUSH
7443: LD_VAR 0 2
7447: PUSH
7448: LD_VAR 0 3
7452: MINUS
7453: ST_TO_ADDR
7454: GO 7478
// length := ( array - i_to ) + i_from ;
7456: LD_ADDR_VAR 0 11
7460: PUSH
7461: LD_VAR 0 1
7465: PUSH
7466: LD_VAR 0 3
7470: MINUS
7471: PUSH
7472: LD_VAR 0 2
7476: PLUS
7477: ST_TO_ADDR
// end ; if not length then
7478: LD_VAR 0 11
7482: NOT
7483: IFFALSE 7487
// exit ;
7485: GO 7645
// tmp := array ;
7487: LD_ADDR_VAR 0 10
7491: PUSH
7492: LD_VAR 0 1
7496: ST_TO_ADDR
// for i = 1 to length do
7497: LD_ADDR_VAR 0 6
7501: PUSH
7502: DOUBLE
7503: LD_INT 1
7505: DEC
7506: ST_TO_ADDR
7507: LD_VAR 0 11
7511: PUSH
7512: FOR_TO
7513: IFFALSE 7633
// begin for j = 1 to array do
7515: LD_ADDR_VAR 0 7
7519: PUSH
7520: DOUBLE
7521: LD_INT 1
7523: DEC
7524: ST_TO_ADDR
7525: LD_VAR 0 1
7529: PUSH
7530: FOR_TO
7531: IFFALSE 7619
// begin k := j + d ;
7533: LD_ADDR_VAR 0 8
7537: PUSH
7538: LD_VAR 0 7
7542: PUSH
7543: LD_VAR 0 9
7547: PLUS
7548: ST_TO_ADDR
// if k > array then
7549: LD_VAR 0 8
7553: PUSH
7554: LD_VAR 0 1
7558: GREATER
7559: IFFALSE 7569
// k := 1 ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if not k then
7569: LD_VAR 0 8
7573: NOT
7574: IFFALSE 7586
// k := array ;
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: LD_VAR 0 1
7585: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7586: LD_ADDR_VAR 0 10
7590: PUSH
7591: LD_VAR 0 10
7595: PPUSH
7596: LD_VAR 0 8
7600: PPUSH
7601: LD_VAR 0 1
7605: PUSH
7606: LD_VAR 0 7
7610: ARRAY
7611: PPUSH
7612: CALL_OW 1
7616: ST_TO_ADDR
// end ;
7617: GO 7530
7619: POP
7620: POP
// array := tmp ;
7621: LD_ADDR_VAR 0 1
7625: PUSH
7626: LD_VAR 0 10
7630: ST_TO_ADDR
// end ;
7631: GO 7512
7633: POP
7634: POP
// result := array ;
7635: LD_ADDR_VAR 0 5
7639: PUSH
7640: LD_VAR 0 1
7644: ST_TO_ADDR
// end ;
7645: LD_VAR 0 5
7649: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7650: LD_INT 0
7652: PPUSH
7653: PPUSH
// result := 0 ;
7654: LD_ADDR_VAR 0 3
7658: PUSH
7659: LD_INT 0
7661: ST_TO_ADDR
// if not array or not value in array then
7662: LD_VAR 0 1
7666: NOT
7667: PUSH
7668: LD_VAR 0 2
7672: PUSH
7673: LD_VAR 0 1
7677: IN
7678: NOT
7679: OR
7680: IFFALSE 7684
// exit ;
7682: GO 7738
// for i = 1 to array do
7684: LD_ADDR_VAR 0 4
7688: PUSH
7689: DOUBLE
7690: LD_INT 1
7692: DEC
7693: ST_TO_ADDR
7694: LD_VAR 0 1
7698: PUSH
7699: FOR_TO
7700: IFFALSE 7736
// if value = array [ i ] then
7702: LD_VAR 0 2
7706: PUSH
7707: LD_VAR 0 1
7711: PUSH
7712: LD_VAR 0 4
7716: ARRAY
7717: EQUAL
7718: IFFALSE 7734
// begin result := i ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_VAR 0 4
7729: ST_TO_ADDR
// exit ;
7730: POP
7731: POP
7732: GO 7738
// end ;
7734: GO 7699
7736: POP
7737: POP
// end ;
7738: LD_VAR 0 3
7742: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7743: LD_INT 0
7745: PPUSH
// vc_chassis := chassis ;
7746: LD_ADDR_OWVAR 37
7750: PUSH
7751: LD_VAR 0 1
7755: ST_TO_ADDR
// vc_engine := engine ;
7756: LD_ADDR_OWVAR 39
7760: PUSH
7761: LD_VAR 0 2
7765: ST_TO_ADDR
// vc_control := control ;
7766: LD_ADDR_OWVAR 38
7770: PUSH
7771: LD_VAR 0 3
7775: ST_TO_ADDR
// vc_weapon := weapon ;
7776: LD_ADDR_OWVAR 40
7780: PUSH
7781: LD_VAR 0 4
7785: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7786: LD_ADDR_OWVAR 41
7790: PUSH
7791: LD_VAR 0 5
7795: ST_TO_ADDR
// end ;
7796: LD_VAR 0 6
7800: RET
// export function WantPlant ( unit ) ; var task ; begin
7801: LD_INT 0
7803: PPUSH
7804: PPUSH
// result := false ;
7805: LD_ADDR_VAR 0 2
7809: PUSH
7810: LD_INT 0
7812: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 437
7827: ST_TO_ADDR
// if task then
7828: LD_VAR 0 3
7832: IFFALSE 7860
// if task [ 1 ] [ 1 ] = p then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PUSH
7847: LD_STRING p
7849: EQUAL
7850: IFFALSE 7860
// result := true ;
7852: LD_ADDR_VAR 0 2
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// end ;
7860: LD_VAR 0 2
7864: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7865: LD_INT 0
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
// if pos < 1 then
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: LESS
7879: IFFALSE 7883
// exit ;
7881: GO 8186
// if pos = 1 then
7883: LD_VAR 0 2
7887: PUSH
7888: LD_INT 1
7890: EQUAL
7891: IFFALSE 7924
// result := Replace ( arr , pos [ 1 ] , value ) else
7893: LD_ADDR_VAR 0 4
7897: PUSH
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PPUSH
7912: LD_VAR 0 3
7916: PPUSH
7917: CALL_OW 1
7921: ST_TO_ADDR
7922: GO 8186
// begin tmp := arr ;
7924: LD_ADDR_VAR 0 6
7928: PUSH
7929: LD_VAR 0 1
7933: ST_TO_ADDR
// s_arr := [ tmp ] ;
7934: LD_ADDR_VAR 0 7
7938: PUSH
7939: LD_VAR 0 6
7943: PUSH
7944: EMPTY
7945: LIST
7946: ST_TO_ADDR
// for i = 1 to pos - 1 do
7947: LD_ADDR_VAR 0 5
7951: PUSH
7952: DOUBLE
7953: LD_INT 1
7955: DEC
7956: ST_TO_ADDR
7957: LD_VAR 0 2
7961: PUSH
7962: LD_INT 1
7964: MINUS
7965: PUSH
7966: FOR_TO
7967: IFFALSE 8012
// begin tmp := tmp [ pos [ i ] ] ;
7969: LD_ADDR_VAR 0 6
7973: PUSH
7974: LD_VAR 0 6
7978: PUSH
7979: LD_VAR 0 2
7983: PUSH
7984: LD_VAR 0 5
7988: ARRAY
7989: ARRAY
7990: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7991: LD_ADDR_VAR 0 7
7995: PUSH
7996: LD_VAR 0 7
8000: PUSH
8001: LD_VAR 0 6
8005: PUSH
8006: EMPTY
8007: LIST
8008: ADD
8009: ST_TO_ADDR
// end ;
8010: GO 7966
8012: POP
8013: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8014: LD_ADDR_VAR 0 6
8018: PUSH
8019: LD_VAR 0 6
8023: PPUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_VAR 0 2
8033: ARRAY
8034: PPUSH
8035: LD_VAR 0 3
8039: PPUSH
8040: CALL_OW 1
8044: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8045: LD_ADDR_VAR 0 7
8049: PUSH
8050: LD_VAR 0 7
8054: PPUSH
8055: LD_VAR 0 7
8059: PPUSH
8060: LD_VAR 0 6
8064: PPUSH
8065: CALL_OW 1
8069: ST_TO_ADDR
// for i = s_arr downto 2 do
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: DOUBLE
8076: LD_VAR 0 7
8080: INC
8081: ST_TO_ADDR
8082: LD_INT 2
8084: PUSH
8085: FOR_DOWNTO
8086: IFFALSE 8170
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8088: LD_ADDR_VAR 0 6
8092: PUSH
8093: LD_VAR 0 7
8097: PUSH
8098: LD_VAR 0 5
8102: PUSH
8103: LD_INT 1
8105: MINUS
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 2
8112: PUSH
8113: LD_VAR 0 5
8117: PUSH
8118: LD_INT 1
8120: MINUS
8121: ARRAY
8122: PPUSH
8123: LD_VAR 0 7
8127: PUSH
8128: LD_VAR 0 5
8132: ARRAY
8133: PPUSH
8134: CALL_OW 1
8138: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8139: LD_ADDR_VAR 0 7
8143: PUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_VAR 0 5
8153: PUSH
8154: LD_INT 1
8156: MINUS
8157: PPUSH
8158: LD_VAR 0 6
8162: PPUSH
8163: CALL_OW 1
8167: ST_TO_ADDR
// end ;
8168: GO 8085
8170: POP
8171: POP
// result := s_arr [ 1 ] ;
8172: LD_ADDR_VAR 0 4
8176: PUSH
8177: LD_VAR 0 7
8181: PUSH
8182: LD_INT 1
8184: ARRAY
8185: ST_TO_ADDR
// end ; end ;
8186: LD_VAR 0 4
8190: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8191: LD_INT 0
8193: PPUSH
8194: PPUSH
// if not list then
8195: LD_VAR 0 1
8199: NOT
8200: IFFALSE 8204
// exit ;
8202: GO 8295
// i := list [ pos1 ] ;
8204: LD_ADDR_VAR 0 5
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_VAR 0 2
8218: ARRAY
8219: ST_TO_ADDR
// if not i then
8220: LD_VAR 0 5
8224: NOT
8225: IFFALSE 8229
// exit ;
8227: GO 8295
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8229: LD_ADDR_VAR 0 1
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_VAR 0 2
8243: PPUSH
8244: LD_VAR 0 1
8248: PUSH
8249: LD_VAR 0 3
8253: ARRAY
8254: PPUSH
8255: CALL_OW 1
8259: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8260: LD_ADDR_VAR 0 1
8264: PUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 3
8274: PPUSH
8275: LD_VAR 0 5
8279: PPUSH
8280: CALL_OW 1
8284: ST_TO_ADDR
// result := list ;
8285: LD_ADDR_VAR 0 4
8289: PUSH
8290: LD_VAR 0 1
8294: ST_TO_ADDR
// end ;
8295: LD_VAR 0 4
8299: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8300: LD_INT 0
8302: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8303: LD_ADDR_VAR 0 5
8307: PUSH
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 250
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 251
8327: PPUSH
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_VAR 0 3
8337: PPUSH
8338: LD_VAR 0 4
8342: PPUSH
8343: CALL 8721 0 5
8347: ST_TO_ADDR
// end ;
8348: LD_VAR 0 5
8352: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8353: LD_INT 0
8355: PPUSH
8356: PPUSH
8357: PPUSH
8358: PPUSH
// if not list or not unit then
8359: LD_VAR 0 2
8363: NOT
8364: PUSH
8365: LD_VAR 0 1
8369: NOT
8370: OR
8371: IFFALSE 8375
// exit ;
8373: GO 8716
// result := [ ] ;
8375: LD_ADDR_VAR 0 5
8379: PUSH
8380: EMPTY
8381: ST_TO_ADDR
// for i in list do
8382: LD_ADDR_VAR 0 6
8386: PUSH
8387: LD_VAR 0 2
8391: PUSH
8392: FOR_IN
8393: IFFALSE 8611
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8395: LD_ADDR_VAR 0 8
8399: PUSH
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_VAR 0 6
8409: PUSH
8410: LD_INT 1
8412: ARRAY
8413: PPUSH
8414: LD_VAR 0 6
8418: PUSH
8419: LD_INT 2
8421: ARRAY
8422: PPUSH
8423: CALL_OW 297
8427: ST_TO_ADDR
// if not Count ( result ) then
8428: LD_VAR 0 5
8432: PPUSH
8433: CALL 5005 0 1
8437: NOT
8438: IFFALSE 8471
// begin result := Join ( result , [ i , tmp ] ) ;
8440: LD_ADDR_VAR 0 5
8444: PUSH
8445: LD_VAR 0 5
8449: PPUSH
8450: LD_VAR 0 6
8454: PUSH
8455: LD_VAR 0 8
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL 40614 0 2
8468: ST_TO_ADDR
// continue ;
8469: GO 8392
// end ; if result [ result ] [ 2 ] <= tmp then
8471: LD_VAR 0 5
8475: PUSH
8476: LD_VAR 0 5
8480: ARRAY
8481: PUSH
8482: LD_INT 2
8484: ARRAY
8485: PUSH
8486: LD_VAR 0 8
8490: LESSEQUAL
8491: IFFALSE 8524
// result := Join ( result , [ i , tmp ] ) else
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_VAR 0 5
8502: PPUSH
8503: LD_VAR 0 6
8507: PUSH
8508: LD_VAR 0 8
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PPUSH
8517: CALL 40614 0 2
8521: ST_TO_ADDR
8522: GO 8609
// begin for j := 1 to Count ( result ) do
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: DOUBLE
8530: LD_INT 1
8532: DEC
8533: ST_TO_ADDR
8534: LD_VAR 0 5
8538: PPUSH
8539: CALL 5005 0 1
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8607
// begin if tmp < result [ j ] [ 2 ] then
8547: LD_VAR 0 8
8551: PUSH
8552: LD_VAR 0 5
8556: PUSH
8557: LD_VAR 0 7
8561: ARRAY
8562: PUSH
8563: LD_INT 2
8565: ARRAY
8566: LESS
8567: IFFALSE 8605
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_VAR 0 5
8578: PPUSH
8579: LD_VAR 0 7
8583: PPUSH
8584: LD_VAR 0 6
8588: PUSH
8589: LD_VAR 0 8
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 2
8602: ST_TO_ADDR
// break ;
8603: GO 8607
// end ; end ;
8605: GO 8544
8607: POP
8608: POP
// end ; end ;
8609: GO 8392
8611: POP
8612: POP
// if result and not asc then
8613: LD_VAR 0 5
8617: PUSH
8618: LD_VAR 0 3
8622: NOT
8623: AND
8624: IFFALSE 8641
// result := ReverseArray ( result ) ;
8626: LD_ADDR_VAR 0 5
8630: PUSH
8631: LD_VAR 0 5
8635: PPUSH
8636: CALL 35881 0 1
8640: ST_TO_ADDR
// tmp := [ ] ;
8641: LD_ADDR_VAR 0 8
8645: PUSH
8646: EMPTY
8647: ST_TO_ADDR
// if mode then
8648: LD_VAR 0 4
8652: IFFALSE 8716
// begin for i := 1 to result do
8654: LD_ADDR_VAR 0 6
8658: PUSH
8659: DOUBLE
8660: LD_INT 1
8662: DEC
8663: ST_TO_ADDR
8664: LD_VAR 0 5
8668: PUSH
8669: FOR_TO
8670: IFFALSE 8704
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8672: LD_ADDR_VAR 0 8
8676: PUSH
8677: LD_VAR 0 8
8681: PPUSH
8682: LD_VAR 0 5
8686: PUSH
8687: LD_VAR 0 6
8691: ARRAY
8692: PUSH
8693: LD_INT 1
8695: ARRAY
8696: PPUSH
8697: CALL 40614 0 2
8701: ST_TO_ADDR
8702: GO 8669
8704: POP
8705: POP
// result := tmp ;
8706: LD_ADDR_VAR 0 5
8710: PUSH
8711: LD_VAR 0 8
8715: ST_TO_ADDR
// end ; end ;
8716: LD_VAR 0 5
8720: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
8725: PPUSH
8726: PPUSH
// if not list then
8727: LD_VAR 0 3
8731: NOT
8732: IFFALSE 8736
// exit ;
8734: GO 9124
// result := [ ] ;
8736: LD_ADDR_VAR 0 6
8740: PUSH
8741: EMPTY
8742: ST_TO_ADDR
// for i in list do
8743: LD_ADDR_VAR 0 7
8747: PUSH
8748: LD_VAR 0 3
8752: PUSH
8753: FOR_IN
8754: IFFALSE 8956
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_VAR 0 7
8765: PPUSH
8766: LD_VAR 0 1
8770: PPUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: CALL_OW 297
8780: ST_TO_ADDR
// if not result then
8781: LD_VAR 0 6
8785: NOT
8786: IFFALSE 8812
// result := [ [ i , tmp ] ] else
8788: LD_ADDR_VAR 0 6
8792: PUSH
8793: LD_VAR 0 7
8797: PUSH
8798: LD_VAR 0 9
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: ST_TO_ADDR
8810: GO 8954
// begin if result [ result ] [ 2 ] <= tmp then
8812: LD_VAR 0 6
8816: PUSH
8817: LD_VAR 0 6
8821: ARRAY
8822: PUSH
8823: LD_INT 2
8825: ARRAY
8826: PUSH
8827: LD_VAR 0 9
8831: LESSEQUAL
8832: IFFALSE 8874
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 6
8843: PPUSH
8844: LD_VAR 0 6
8848: PUSH
8849: LD_INT 1
8851: PLUS
8852: PPUSH
8853: LD_VAR 0 7
8857: PUSH
8858: LD_VAR 0 9
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 2
8871: ST_TO_ADDR
8872: GO 8954
// for j := 1 to result do
8874: LD_ADDR_VAR 0 8
8878: PUSH
8879: DOUBLE
8880: LD_INT 1
8882: DEC
8883: ST_TO_ADDR
8884: LD_VAR 0 6
8888: PUSH
8889: FOR_TO
8890: IFFALSE 8952
// begin if tmp < result [ j ] [ 2 ] then
8892: LD_VAR 0 9
8896: PUSH
8897: LD_VAR 0 6
8901: PUSH
8902: LD_VAR 0 8
8906: ARRAY
8907: PUSH
8908: LD_INT 2
8910: ARRAY
8911: LESS
8912: IFFALSE 8950
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8914: LD_ADDR_VAR 0 6
8918: PUSH
8919: LD_VAR 0 6
8923: PPUSH
8924: LD_VAR 0 8
8928: PPUSH
8929: LD_VAR 0 7
8933: PUSH
8934: LD_VAR 0 9
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 2
8947: ST_TO_ADDR
// break ;
8948: GO 8952
// end ; end ;
8950: GO 8889
8952: POP
8953: POP
// end ; end ;
8954: GO 8753
8956: POP
8957: POP
// if result and not asc then
8958: LD_VAR 0 6
8962: PUSH
8963: LD_VAR 0 4
8967: NOT
8968: AND
8969: IFFALSE 9044
// begin tmp := result ;
8971: LD_ADDR_VAR 0 9
8975: PUSH
8976: LD_VAR 0 6
8980: ST_TO_ADDR
// for i = tmp downto 1 do
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: DOUBLE
8987: LD_VAR 0 9
8991: INC
8992: ST_TO_ADDR
8993: LD_INT 1
8995: PUSH
8996: FOR_DOWNTO
8997: IFFALSE 9042
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8999: LD_ADDR_VAR 0 6
9003: PUSH
9004: LD_VAR 0 6
9008: PPUSH
9009: LD_VAR 0 9
9013: PUSH
9014: LD_VAR 0 7
9018: MINUS
9019: PUSH
9020: LD_INT 1
9022: PLUS
9023: PPUSH
9024: LD_VAR 0 9
9028: PUSH
9029: LD_VAR 0 7
9033: ARRAY
9034: PPUSH
9035: CALL_OW 1
9039: ST_TO_ADDR
9040: GO 8996
9042: POP
9043: POP
// end ; tmp := [ ] ;
9044: LD_ADDR_VAR 0 9
9048: PUSH
9049: EMPTY
9050: ST_TO_ADDR
// if mode then
9051: LD_VAR 0 5
9055: IFFALSE 9124
// begin for i = 1 to result do
9057: LD_ADDR_VAR 0 7
9061: PUSH
9062: DOUBLE
9063: LD_INT 1
9065: DEC
9066: ST_TO_ADDR
9067: LD_VAR 0 6
9071: PUSH
9072: FOR_TO
9073: IFFALSE 9112
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9075: LD_ADDR_VAR 0 9
9079: PUSH
9080: LD_VAR 0 9
9084: PPUSH
9085: LD_VAR 0 7
9089: PPUSH
9090: LD_VAR 0 6
9094: PUSH
9095: LD_VAR 0 7
9099: ARRAY
9100: PUSH
9101: LD_INT 1
9103: ARRAY
9104: PPUSH
9105: CALL_OW 1
9109: ST_TO_ADDR
9110: GO 9072
9112: POP
9113: POP
// result := tmp ;
9114: LD_ADDR_VAR 0 6
9118: PUSH
9119: LD_VAR 0 9
9123: ST_TO_ADDR
// end ; end ;
9124: LD_VAR 0 6
9128: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9129: LD_INT 0
9131: PPUSH
9132: PPUSH
9133: PPUSH
9134: PPUSH
9135: PPUSH
9136: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9137: LD_ADDR_VAR 0 5
9141: PUSH
9142: LD_INT 0
9144: PUSH
9145: LD_INT 0
9147: PUSH
9148: LD_INT 0
9150: PUSH
9151: EMPTY
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: ST_TO_ADDR
// if not x or not y then
9159: LD_VAR 0 2
9163: NOT
9164: PUSH
9165: LD_VAR 0 3
9169: NOT
9170: OR
9171: IFFALSE 9175
// exit ;
9173: GO 10825
// if not range then
9175: LD_VAR 0 4
9179: NOT
9180: IFFALSE 9190
// range := 10 ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_INT 10
9189: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9190: LD_ADDR_VAR 0 8
9194: PUSH
9195: LD_INT 81
9197: PUSH
9198: LD_VAR 0 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 92
9209: PUSH
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 3
9219: PUSH
9220: LD_VAR 0 4
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 3
9233: PUSH
9234: LD_INT 21
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL_OW 69
9257: ST_TO_ADDR
// if not tmp then
9258: LD_VAR 0 8
9262: NOT
9263: IFFALSE 9267
// exit ;
9265: GO 10825
// for i in tmp do
9267: LD_ADDR_VAR 0 6
9271: PUSH
9272: LD_VAR 0 8
9276: PUSH
9277: FOR_IN
9278: IFFALSE 10800
// begin points := [ 0 , 0 , 0 ] ;
9280: LD_ADDR_VAR 0 9
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: ST_TO_ADDR
// bpoints := 1 ;
9299: LD_ADDR_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9307: LD_VAR 0 6
9311: PPUSH
9312: CALL_OW 247
9316: PUSH
9317: LD_INT 1
9319: DOUBLE
9320: EQUAL
9321: IFTRUE 9325
9323: GO 9903
9325: POP
// begin if GetClass ( i ) = 1 then
9326: LD_VAR 0 6
9330: PPUSH
9331: CALL_OW 257
9335: PUSH
9336: LD_INT 1
9338: EQUAL
9339: IFFALSE 9360
// points := [ 10 , 5 , 3 ] ;
9341: LD_ADDR_VAR 0 9
9345: PUSH
9346: LD_INT 10
9348: PUSH
9349: LD_INT 5
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9360: LD_VAR 0 6
9364: PPUSH
9365: CALL_OW 257
9369: PUSH
9370: LD_INT 2
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: IN
9384: IFFALSE 9405
// points := [ 3 , 2 , 1 ] ;
9386: LD_ADDR_VAR 0 9
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9405: LD_VAR 0 6
9409: PPUSH
9410: CALL_OW 257
9414: PUSH
9415: LD_INT 5
9417: EQUAL
9418: IFFALSE 9439
// points := [ 130 , 5 , 2 ] ;
9420: LD_ADDR_VAR 0 9
9424: PUSH
9425: LD_INT 130
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9439: LD_VAR 0 6
9443: PPUSH
9444: CALL_OW 257
9448: PUSH
9449: LD_INT 8
9451: EQUAL
9452: IFFALSE 9473
// points := [ 35 , 35 , 30 ] ;
9454: LD_ADDR_VAR 0 9
9458: PUSH
9459: LD_INT 35
9461: PUSH
9462: LD_INT 35
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9473: LD_VAR 0 6
9477: PPUSH
9478: CALL_OW 257
9482: PUSH
9483: LD_INT 9
9485: EQUAL
9486: IFFALSE 9507
// points := [ 20 , 55 , 40 ] ;
9488: LD_ADDR_VAR 0 9
9492: PUSH
9493: LD_INT 20
9495: PUSH
9496: LD_INT 55
9498: PUSH
9499: LD_INT 40
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9507: LD_VAR 0 6
9511: PPUSH
9512: CALL_OW 257
9516: PUSH
9517: LD_INT 12
9519: PUSH
9520: LD_INT 16
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: IN
9527: IFFALSE 9548
// points := [ 5 , 3 , 2 ] ;
9529: LD_ADDR_VAR 0 9
9533: PUSH
9534: LD_INT 5
9536: PUSH
9537: LD_INT 3
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9548: LD_VAR 0 6
9552: PPUSH
9553: CALL_OW 257
9557: PUSH
9558: LD_INT 17
9560: EQUAL
9561: IFFALSE 9582
// points := [ 100 , 50 , 75 ] ;
9563: LD_ADDR_VAR 0 9
9567: PUSH
9568: LD_INT 100
9570: PUSH
9571: LD_INT 50
9573: PUSH
9574: LD_INT 75
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9582: LD_VAR 0 6
9586: PPUSH
9587: CALL_OW 257
9591: PUSH
9592: LD_INT 15
9594: EQUAL
9595: IFFALSE 9616
// points := [ 10 , 5 , 3 ] ;
9597: LD_ADDR_VAR 0 9
9601: PUSH
9602: LD_INT 10
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9616: LD_VAR 0 6
9620: PPUSH
9621: CALL_OW 257
9625: PUSH
9626: LD_INT 14
9628: EQUAL
9629: IFFALSE 9650
// points := [ 10 , 0 , 0 ] ;
9631: LD_ADDR_VAR 0 9
9635: PUSH
9636: LD_INT 10
9638: PUSH
9639: LD_INT 0
9641: PUSH
9642: LD_INT 0
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9650: LD_VAR 0 6
9654: PPUSH
9655: CALL_OW 257
9659: PUSH
9660: LD_INT 11
9662: EQUAL
9663: IFFALSE 9684
// points := [ 30 , 10 , 5 ] ;
9665: LD_ADDR_VAR 0 9
9669: PUSH
9670: LD_INT 30
9672: PUSH
9673: LD_INT 10
9675: PUSH
9676: LD_INT 5
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: LIST
9683: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9684: LD_VAR 0 1
9688: PPUSH
9689: LD_INT 5
9691: PPUSH
9692: CALL_OW 321
9696: PUSH
9697: LD_INT 2
9699: EQUAL
9700: IFFALSE 9717
// bpoints := bpoints * 1.8 ;
9702: LD_ADDR_VAR 0 10
9706: PUSH
9707: LD_VAR 0 10
9711: PUSH
9712: LD_REAL  1.80000000000000E+0000
9715: MUL
9716: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 257
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 4
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: IN
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 51
9753: PPUSH
9754: CALL_OW 321
9758: PUSH
9759: LD_INT 2
9761: EQUAL
9762: AND
9763: IFFALSE 9780
// bpoints := bpoints * 1.2 ;
9765: LD_ADDR_VAR 0 10
9769: PUSH
9770: LD_VAR 0 10
9774: PUSH
9775: LD_REAL  1.20000000000000E+0000
9778: MUL
9779: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9780: LD_VAR 0 6
9784: PPUSH
9785: CALL_OW 257
9789: PUSH
9790: LD_INT 5
9792: PUSH
9793: LD_INT 7
9795: PUSH
9796: LD_INT 9
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: IN
9804: PUSH
9805: LD_VAR 0 1
9809: PPUSH
9810: LD_INT 52
9812: PPUSH
9813: CALL_OW 321
9817: PUSH
9818: LD_INT 2
9820: EQUAL
9821: AND
9822: IFFALSE 9839
// bpoints := bpoints * 1.5 ;
9824: LD_ADDR_VAR 0 10
9828: PUSH
9829: LD_VAR 0 10
9833: PUSH
9834: LD_REAL  1.50000000000000E+0000
9837: MUL
9838: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_INT 66
9846: PPUSH
9847: CALL_OW 321
9851: PUSH
9852: LD_INT 2
9854: EQUAL
9855: IFFALSE 9872
// bpoints := bpoints * 1.1 ;
9857: LD_ADDR_VAR 0 10
9861: PUSH
9862: LD_VAR 0 10
9866: PUSH
9867: LD_REAL  1.10000000000000E+0000
9870: MUL
9871: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9872: LD_ADDR_VAR 0 10
9876: PUSH
9877: LD_VAR 0 10
9881: PUSH
9882: LD_VAR 0 6
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 259
9894: PUSH
9895: LD_REAL  1.15000000000000E+0000
9898: MUL
9899: MUL
9900: ST_TO_ADDR
// end ; unit_vehicle :
9901: GO 10729
9903: LD_INT 2
9905: DOUBLE
9906: EQUAL
9907: IFTRUE 9911
9909: GO 10717
9911: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9912: LD_VAR 0 6
9916: PPUSH
9917: CALL_OW 264
9921: PUSH
9922: LD_INT 2
9924: PUSH
9925: LD_INT 42
9927: PUSH
9928: LD_INT 24
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: IN
9936: IFFALSE 9957
// points := [ 25 , 5 , 3 ] ;
9938: LD_ADDR_VAR 0 9
9942: PUSH
9943: LD_INT 25
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: LD_INT 3
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9957: LD_VAR 0 6
9961: PPUSH
9962: CALL_OW 264
9966: PUSH
9967: LD_INT 4
9969: PUSH
9970: LD_INT 43
9972: PUSH
9973: LD_INT 25
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: IN
9981: IFFALSE 10002
// points := [ 40 , 15 , 5 ] ;
9983: LD_ADDR_VAR 0 9
9987: PUSH
9988: LD_INT 40
9990: PUSH
9991: LD_INT 15
9993: PUSH
9994: LD_INT 5
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10002: LD_VAR 0 6
10006: PPUSH
10007: CALL_OW 264
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 23
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: IN
10022: IFFALSE 10043
// points := [ 7 , 25 , 8 ] ;
10024: LD_ADDR_VAR 0 9
10028: PUSH
10029: LD_INT 7
10031: PUSH
10032: LD_INT 25
10034: PUSH
10035: LD_INT 8
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10043: LD_VAR 0 6
10047: PPUSH
10048: CALL_OW 264
10052: PUSH
10053: LD_INT 5
10055: PUSH
10056: LD_INT 27
10058: PUSH
10059: LD_INT 44
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: IN
10067: IFFALSE 10088
// points := [ 14 , 50 , 16 ] ;
10069: LD_ADDR_VAR 0 9
10073: PUSH
10074: LD_INT 14
10076: PUSH
10077: LD_INT 50
10079: PUSH
10080: LD_INT 16
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 264
10097: PUSH
10098: LD_INT 6
10100: PUSH
10101: LD_INT 46
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: IN
10108: IFFALSE 10129
// points := [ 32 , 120 , 70 ] ;
10110: LD_ADDR_VAR 0 9
10114: PUSH
10115: LD_INT 32
10117: PUSH
10118: LD_INT 120
10120: PUSH
10121: LD_INT 70
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10129: LD_VAR 0 6
10133: PPUSH
10134: CALL_OW 264
10138: PUSH
10139: LD_INT 7
10141: PUSH
10142: LD_INT 28
10144: PUSH
10145: LD_INT 45
10147: PUSH
10148: LD_INT 92
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: IN
10157: IFFALSE 10178
// points := [ 35 , 20 , 45 ] ;
10159: LD_ADDR_VAR 0 9
10163: PUSH
10164: LD_INT 35
10166: PUSH
10167: LD_INT 20
10169: PUSH
10170: LD_INT 45
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10178: LD_VAR 0 6
10182: PPUSH
10183: CALL_OW 264
10187: PUSH
10188: LD_INT 47
10190: PUSH
10191: EMPTY
10192: LIST
10193: IN
10194: IFFALSE 10215
// points := [ 67 , 45 , 75 ] ;
10196: LD_ADDR_VAR 0 9
10200: PUSH
10201: LD_INT 67
10203: PUSH
10204: LD_INT 45
10206: PUSH
10207: LD_INT 75
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10215: LD_VAR 0 6
10219: PPUSH
10220: CALL_OW 264
10224: PUSH
10225: LD_INT 26
10227: PUSH
10228: EMPTY
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 120 , 30 , 80 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 120
10240: PUSH
10241: LD_INT 30
10243: PUSH
10244: LD_INT 80
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 22
10264: PUSH
10265: EMPTY
10266: LIST
10267: IN
10268: IFFALSE 10289
// points := [ 40 , 1 , 1 ] ;
10270: LD_ADDR_VAR 0 9
10274: PUSH
10275: LD_INT 40
10277: PUSH
10278: LD_INT 1
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10289: LD_VAR 0 6
10293: PPUSH
10294: CALL_OW 264
10298: PUSH
10299: LD_INT 29
10301: PUSH
10302: EMPTY
10303: LIST
10304: IN
10305: IFFALSE 10326
// points := [ 70 , 200 , 400 ] ;
10307: LD_ADDR_VAR 0 9
10311: PUSH
10312: LD_INT 70
10314: PUSH
10315: LD_INT 200
10317: PUSH
10318: LD_INT 400
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10326: LD_VAR 0 6
10330: PPUSH
10331: CALL_OW 264
10335: PUSH
10336: LD_INT 14
10338: PUSH
10339: LD_INT 53
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: IN
10346: IFFALSE 10367
// points := [ 40 , 10 , 20 ] ;
10348: LD_ADDR_VAR 0 9
10352: PUSH
10353: LD_INT 40
10355: PUSH
10356: LD_INT 10
10358: PUSH
10359: LD_INT 20
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 264
10376: PUSH
10377: LD_INT 9
10379: PUSH
10380: EMPTY
10381: LIST
10382: IN
10383: IFFALSE 10404
// points := [ 5 , 70 , 20 ] ;
10385: LD_ADDR_VAR 0 9
10389: PUSH
10390: LD_INT 5
10392: PUSH
10393: LD_INT 70
10395: PUSH
10396: LD_INT 20
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10404: LD_VAR 0 6
10408: PPUSH
10409: CALL_OW 264
10413: PUSH
10414: LD_INT 10
10416: PUSH
10417: EMPTY
10418: LIST
10419: IN
10420: IFFALSE 10441
// points := [ 35 , 110 , 70 ] ;
10422: LD_ADDR_VAR 0 9
10426: PUSH
10427: LD_INT 35
10429: PUSH
10430: LD_INT 110
10432: PUSH
10433: LD_INT 70
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10441: LD_VAR 0 6
10445: PPUSH
10446: CALL_OW 265
10450: PUSH
10451: LD_INT 25
10453: EQUAL
10454: IFFALSE 10475
// points := [ 80 , 65 , 100 ] ;
10456: LD_ADDR_VAR 0 9
10460: PUSH
10461: LD_INT 80
10463: PUSH
10464: LD_INT 65
10466: PUSH
10467: LD_INT 100
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10475: LD_VAR 0 6
10479: PPUSH
10480: CALL_OW 263
10484: PUSH
10485: LD_INT 1
10487: EQUAL
10488: IFFALSE 10523
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10490: LD_ADDR_VAR 0 10
10494: PUSH
10495: LD_VAR 0 10
10499: PUSH
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 311
10509: PPUSH
10510: LD_INT 3
10512: PPUSH
10513: CALL_OW 259
10517: PUSH
10518: LD_INT 4
10520: MUL
10521: MUL
10522: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 263
10532: PUSH
10533: LD_INT 2
10535: EQUAL
10536: IFFALSE 10587
// begin j := IsControledBy ( i ) ;
10538: LD_ADDR_VAR 0 7
10542: PUSH
10543: LD_VAR 0 6
10547: PPUSH
10548: CALL_OW 312
10552: ST_TO_ADDR
// if j then
10553: LD_VAR 0 7
10557: IFFALSE 10587
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10559: LD_ADDR_VAR 0 10
10563: PUSH
10564: LD_VAR 0 10
10568: PUSH
10569: LD_VAR 0 7
10573: PPUSH
10574: LD_INT 3
10576: PPUSH
10577: CALL_OW 259
10581: PUSH
10582: LD_INT 3
10584: MUL
10585: MUL
10586: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10587: LD_VAR 0 6
10591: PPUSH
10592: CALL_OW 264
10596: PUSH
10597: LD_INT 5
10599: PUSH
10600: LD_INT 6
10602: PUSH
10603: LD_INT 46
10605: PUSH
10606: LD_INT 44
10608: PUSH
10609: LD_INT 47
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 28
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: LD_INT 27
10623: PUSH
10624: LD_INT 29
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: IN
10639: PUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: LD_INT 52
10647: PPUSH
10648: CALL_OW 321
10652: PUSH
10653: LD_INT 2
10655: EQUAL
10656: AND
10657: IFFALSE 10674
// bpoints := bpoints * 1.2 ;
10659: LD_ADDR_VAR 0 10
10663: PUSH
10664: LD_VAR 0 10
10668: PUSH
10669: LD_REAL  1.20000000000000E+0000
10672: MUL
10673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10674: LD_VAR 0 6
10678: PPUSH
10679: CALL_OW 264
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 46
10689: PUSH
10690: LD_INT 47
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: IN
10698: IFFALSE 10715
// bpoints := bpoints * 1.2 ;
10700: LD_ADDR_VAR 0 10
10704: PUSH
10705: LD_VAR 0 10
10709: PUSH
10710: LD_REAL  1.20000000000000E+0000
10713: MUL
10714: ST_TO_ADDR
// end ; unit_building :
10715: GO 10729
10717: LD_INT 3
10719: DOUBLE
10720: EQUAL
10721: IFTRUE 10725
10723: GO 10728
10725: POP
// ; end ;
10726: GO 10729
10728: POP
// for j = 1 to 3 do
10729: LD_ADDR_VAR 0 7
10733: PUSH
10734: DOUBLE
10735: LD_INT 1
10737: DEC
10738: ST_TO_ADDR
10739: LD_INT 3
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10796
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10745: LD_ADDR_VAR 0 5
10749: PUSH
10750: LD_VAR 0 5
10754: PPUSH
10755: LD_VAR 0 7
10759: PPUSH
10760: LD_VAR 0 5
10764: PUSH
10765: LD_VAR 0 7
10769: ARRAY
10770: PUSH
10771: LD_VAR 0 9
10775: PUSH
10776: LD_VAR 0 7
10780: ARRAY
10781: PUSH
10782: LD_VAR 0 10
10786: MUL
10787: PLUS
10788: PPUSH
10789: CALL_OW 1
10793: ST_TO_ADDR
10794: GO 10742
10796: POP
10797: POP
// end ;
10798: GO 9277
10800: POP
10801: POP
// result := Replace ( result , 4 , tmp ) ;
10802: LD_ADDR_VAR 0 5
10806: PUSH
10807: LD_VAR 0 5
10811: PPUSH
10812: LD_INT 4
10814: PPUSH
10815: LD_VAR 0 8
10819: PPUSH
10820: CALL_OW 1
10824: ST_TO_ADDR
// end ;
10825: LD_VAR 0 5
10829: RET
// export function DangerAtRange ( unit , range ) ; begin
10830: LD_INT 0
10832: PPUSH
// if not unit then
10833: LD_VAR 0 1
10837: NOT
10838: IFFALSE 10842
// exit ;
10840: GO 10887
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_VAR 0 1
10851: PPUSH
10852: CALL_OW 255
10856: PPUSH
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 250
10866: PPUSH
10867: LD_VAR 0 1
10871: PPUSH
10872: CALL_OW 251
10876: PPUSH
10877: LD_VAR 0 2
10881: PPUSH
10882: CALL 9129 0 4
10886: ST_TO_ADDR
// end ;
10887: LD_VAR 0 3
10891: RET
// export function DangerInArea ( side , area ) ; begin
10892: LD_INT 0
10894: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_VAR 0 2
10904: PPUSH
10905: LD_INT 81
10907: PUSH
10908: LD_VAR 0 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PPUSH
10917: CALL_OW 70
10921: ST_TO_ADDR
// end ;
10922: LD_VAR 0 3
10926: RET
// export function IsExtension ( b ) ; begin
10927: LD_INT 0
10929: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10930: LD_ADDR_VAR 0 2
10934: PUSH
10935: LD_VAR 0 1
10939: PUSH
10940: LD_INT 23
10942: PUSH
10943: LD_INT 20
10945: PUSH
10946: LD_INT 22
10948: PUSH
10949: LD_INT 17
10951: PUSH
10952: LD_INT 24
10954: PUSH
10955: LD_INT 21
10957: PUSH
10958: LD_INT 19
10960: PUSH
10961: LD_INT 16
10963: PUSH
10964: LD_INT 25
10966: PUSH
10967: LD_INT 18
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: IN
10982: ST_TO_ADDR
// end ;
10983: LD_VAR 0 2
10987: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10988: LD_INT 0
10990: PPUSH
10991: PPUSH
10992: PPUSH
// result := [ ] ;
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: EMPTY
10999: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11000: LD_ADDR_VAR 0 5
11004: PUSH
11005: LD_VAR 0 2
11009: PPUSH
11010: LD_INT 21
11012: PUSH
11013: LD_INT 3
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 70
11024: ST_TO_ADDR
// if not tmp then
11025: LD_VAR 0 5
11029: NOT
11030: IFFALSE 11034
// exit ;
11032: GO 11098
// if checkLink then
11034: LD_VAR 0 3
11038: IFFALSE 11088
// begin for i in tmp do
11040: LD_ADDR_VAR 0 6
11044: PUSH
11045: LD_VAR 0 5
11049: PUSH
11050: FOR_IN
11051: IFFALSE 11086
// if GetBase ( i ) <> base then
11053: LD_VAR 0 6
11057: PPUSH
11058: CALL_OW 274
11062: PUSH
11063: LD_VAR 0 1
11067: NONEQUAL
11068: IFFALSE 11084
// ComLinkToBase ( base , i ) ;
11070: LD_VAR 0 1
11074: PPUSH
11075: LD_VAR 0 6
11079: PPUSH
11080: CALL_OW 169
11084: GO 11050
11086: POP
11087: POP
// end ; result := tmp ;
11088: LD_ADDR_VAR 0 4
11092: PUSH
11093: LD_VAR 0 5
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 4
11102: RET
// export function ComComplete ( units , b ) ; var i ; begin
11103: LD_INT 0
11105: PPUSH
11106: PPUSH
// if not units then
11107: LD_VAR 0 1
11111: NOT
11112: IFFALSE 11116
// exit ;
11114: GO 11206
// for i in units do
11116: LD_ADDR_VAR 0 4
11120: PUSH
11121: LD_VAR 0 1
11125: PUSH
11126: FOR_IN
11127: IFFALSE 11204
// if BuildingStatus ( b ) = bs_build then
11129: LD_VAR 0 2
11133: PPUSH
11134: CALL_OW 461
11138: PUSH
11139: LD_INT 1
11141: EQUAL
11142: IFFALSE 11202
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11144: LD_VAR 0 4
11148: PPUSH
11149: LD_STRING h
11151: PUSH
11152: LD_VAR 0 2
11156: PPUSH
11157: CALL_OW 250
11161: PUSH
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 251
11171: PUSH
11172: LD_VAR 0 2
11176: PUSH
11177: LD_INT 0
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: LD_INT 0
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: PPUSH
11198: CALL_OW 446
11202: GO 11126
11204: POP
11205: POP
// end ;
11206: LD_VAR 0 3
11210: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11211: LD_INT 0
11213: PPUSH
11214: PPUSH
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11219: LD_VAR 0 1
11223: NOT
11224: PUSH
11225: LD_VAR 0 1
11229: PPUSH
11230: CALL_OW 263
11234: PUSH
11235: LD_INT 2
11237: NONEQUAL
11238: OR
11239: IFFALSE 11243
// exit ;
11241: GO 11559
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11243: LD_ADDR_VAR 0 6
11247: PUSH
11248: LD_INT 22
11250: PUSH
11251: LD_VAR 0 1
11255: PPUSH
11256: CALL_OW 255
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: LD_INT 30
11270: PUSH
11271: LD_INT 36
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 34
11280: PUSH
11281: LD_INT 31
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 69
11301: ST_TO_ADDR
// if not tmp then
11302: LD_VAR 0 6
11306: NOT
11307: IFFALSE 11311
// exit ;
11309: GO 11559
// result := [ ] ;
11311: LD_ADDR_VAR 0 2
11315: PUSH
11316: EMPTY
11317: ST_TO_ADDR
// for i in tmp do
11318: LD_ADDR_VAR 0 3
11322: PUSH
11323: LD_VAR 0 6
11327: PUSH
11328: FOR_IN
11329: IFFALSE 11400
// begin t := UnitsInside ( i ) ;
11331: LD_ADDR_VAR 0 4
11335: PUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: CALL_OW 313
11345: ST_TO_ADDR
// if t then
11346: LD_VAR 0 4
11350: IFFALSE 11398
// for j in t do
11352: LD_ADDR_VAR 0 7
11356: PUSH
11357: LD_VAR 0 4
11361: PUSH
11362: FOR_IN
11363: IFFALSE 11396
// result := Replace ( result , result + 1 , j ) ;
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: LD_VAR 0 2
11374: PPUSH
11375: LD_VAR 0 2
11379: PUSH
11380: LD_INT 1
11382: PLUS
11383: PPUSH
11384: LD_VAR 0 7
11388: PPUSH
11389: CALL_OW 1
11393: ST_TO_ADDR
11394: GO 11362
11396: POP
11397: POP
// end ;
11398: GO 11328
11400: POP
11401: POP
// if not result then
11402: LD_VAR 0 2
11406: NOT
11407: IFFALSE 11411
// exit ;
11409: GO 11559
// mech := result [ 1 ] ;
11411: LD_ADDR_VAR 0 5
11415: PUSH
11416: LD_VAR 0 2
11420: PUSH
11421: LD_INT 1
11423: ARRAY
11424: ST_TO_ADDR
// if result > 1 then
11425: LD_VAR 0 2
11429: PUSH
11430: LD_INT 1
11432: GREATER
11433: IFFALSE 11545
// begin for i = 2 to result do
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: DOUBLE
11441: LD_INT 2
11443: DEC
11444: ST_TO_ADDR
11445: LD_VAR 0 2
11449: PUSH
11450: FOR_TO
11451: IFFALSE 11543
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11453: LD_ADDR_VAR 0 4
11457: PUSH
11458: LD_VAR 0 2
11462: PUSH
11463: LD_VAR 0 3
11467: ARRAY
11468: PPUSH
11469: LD_INT 3
11471: PPUSH
11472: CALL_OW 259
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_VAR 0 3
11486: ARRAY
11487: PPUSH
11488: CALL_OW 432
11492: MINUS
11493: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11494: LD_VAR 0 4
11498: PUSH
11499: LD_VAR 0 5
11503: PPUSH
11504: LD_INT 3
11506: PPUSH
11507: CALL_OW 259
11511: PUSH
11512: LD_VAR 0 5
11516: PPUSH
11517: CALL_OW 432
11521: MINUS
11522: GREATEREQUAL
11523: IFFALSE 11541
// mech := result [ i ] ;
11525: LD_ADDR_VAR 0 5
11529: PUSH
11530: LD_VAR 0 2
11534: PUSH
11535: LD_VAR 0 3
11539: ARRAY
11540: ST_TO_ADDR
// end ;
11541: GO 11450
11543: POP
11544: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11545: LD_VAR 0 1
11549: PPUSH
11550: LD_VAR 0 5
11554: PPUSH
11555: CALL_OW 135
// end ;
11559: LD_VAR 0 2
11563: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11564: LD_INT 0
11566: PPUSH
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// result := [ ] ;
11579: LD_ADDR_VAR 0 7
11583: PUSH
11584: EMPTY
11585: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 266
11595: PUSH
11596: LD_INT 0
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: IN
11606: NOT
11607: IFFALSE 11611
// exit ;
11609: GO 13245
// if name then
11611: LD_VAR 0 3
11615: IFFALSE 11631
// SetBName ( base_dep , name ) ;
11617: LD_VAR 0 1
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: CALL_OW 500
// base := GetBase ( base_dep ) ;
11631: LD_ADDR_VAR 0 15
11635: PUSH
11636: LD_VAR 0 1
11640: PPUSH
11641: CALL_OW 274
11645: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11646: LD_ADDR_VAR 0 16
11650: PUSH
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL_OW 255
11660: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11661: LD_ADDR_VAR 0 17
11665: PUSH
11666: LD_VAR 0 1
11670: PPUSH
11671: CALL_OW 248
11675: ST_TO_ADDR
// if sources then
11676: LD_VAR 0 5
11680: IFFALSE 11727
// for i = 1 to 3 do
11682: LD_ADDR_VAR 0 8
11686: PUSH
11687: DOUBLE
11688: LD_INT 1
11690: DEC
11691: ST_TO_ADDR
11692: LD_INT 3
11694: PUSH
11695: FOR_TO
11696: IFFALSE 11725
// AddResourceType ( base , i , sources [ i ] ) ;
11698: LD_VAR 0 15
11702: PPUSH
11703: LD_VAR 0 8
11707: PPUSH
11708: LD_VAR 0 5
11712: PUSH
11713: LD_VAR 0 8
11717: ARRAY
11718: PPUSH
11719: CALL_OW 276
11723: GO 11695
11725: POP
11726: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_VAR 0 15
11736: PPUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL 10988 0 3
11749: ST_TO_ADDR
// InitHc ;
11750: CALL_OW 19
// InitUc ;
11754: CALL_OW 18
// uc_side := side ;
11758: LD_ADDR_OWVAR 20
11762: PUSH
11763: LD_VAR 0 16
11767: ST_TO_ADDR
// uc_nation := nation ;
11768: LD_ADDR_OWVAR 21
11772: PUSH
11773: LD_VAR 0 17
11777: ST_TO_ADDR
// if buildings then
11778: LD_VAR 0 18
11782: IFFALSE 13104
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11784: LD_ADDR_VAR 0 19
11788: PUSH
11789: LD_VAR 0 18
11793: PPUSH
11794: LD_INT 2
11796: PUSH
11797: LD_INT 30
11799: PUSH
11800: LD_INT 29
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 30
11809: PUSH
11810: LD_INT 30
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: PPUSH
11822: CALL_OW 72
11826: ST_TO_ADDR
// if tmp then
11827: LD_VAR 0 19
11831: IFFALSE 11879
// for i in tmp do
11833: LD_ADDR_VAR 0 8
11837: PUSH
11838: LD_VAR 0 19
11842: PUSH
11843: FOR_IN
11844: IFFALSE 11877
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11846: LD_VAR 0 8
11850: PPUSH
11851: CALL_OW 250
11855: PPUSH
11856: LD_VAR 0 8
11860: PPUSH
11861: CALL_OW 251
11865: PPUSH
11866: LD_VAR 0 16
11870: PPUSH
11871: CALL_OW 441
11875: GO 11843
11877: POP
11878: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11879: LD_VAR 0 18
11883: PPUSH
11884: LD_INT 2
11886: PUSH
11887: LD_INT 30
11889: PUSH
11890: LD_INT 32
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 30
11899: PUSH
11900: LD_INT 33
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: PPUSH
11912: CALL_OW 72
11916: IFFALSE 12004
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11918: LD_ADDR_VAR 0 8
11922: PUSH
11923: LD_VAR 0 18
11927: PPUSH
11928: LD_INT 2
11930: PUSH
11931: LD_INT 30
11933: PUSH
11934: LD_INT 32
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 33
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: PUSH
11961: FOR_IN
11962: IFFALSE 12002
// begin if not GetBWeapon ( i ) then
11964: LD_VAR 0 8
11968: PPUSH
11969: CALL_OW 269
11973: NOT
11974: IFFALSE 12000
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11976: LD_VAR 0 8
11980: PPUSH
11981: LD_VAR 0 8
11985: PPUSH
11986: LD_VAR 0 2
11990: PPUSH
11991: CALL 13250 0 2
11995: PPUSH
11996: CALL_OW 431
// end ;
12000: GO 11961
12002: POP
12003: POP
// end ; for i = 1 to personel do
12004: LD_ADDR_VAR 0 8
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_VAR 0 6
12018: PUSH
12019: FOR_TO
12020: IFFALSE 13084
// begin if i > 4 then
12022: LD_VAR 0 8
12026: PUSH
12027: LD_INT 4
12029: GREATER
12030: IFFALSE 12034
// break ;
12032: GO 13084
// case i of 1 :
12034: LD_VAR 0 8
12038: PUSH
12039: LD_INT 1
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12127
12047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12048: LD_ADDR_VAR 0 12
12052: PUSH
12053: LD_VAR 0 18
12057: PPUSH
12058: LD_INT 22
12060: PUSH
12061: LD_VAR 0 16
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 58
12072: PUSH
12073: EMPTY
12074: LIST
12075: PUSH
12076: LD_INT 2
12078: PUSH
12079: LD_INT 30
12081: PUSH
12082: LD_INT 32
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 30
12091: PUSH
12092: LD_INT 4
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 72
12124: ST_TO_ADDR
12125: GO 12349
12127: LD_INT 2
12129: DOUBLE
12130: EQUAL
12131: IFTRUE 12135
12133: GO 12197
12135: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12136: LD_ADDR_VAR 0 12
12140: PUSH
12141: LD_VAR 0 18
12145: PPUSH
12146: LD_INT 22
12148: PUSH
12149: LD_VAR 0 16
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 2
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 0
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 30
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 72
12194: ST_TO_ADDR
12195: GO 12349
12197: LD_INT 3
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12267
12205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12206: LD_ADDR_VAR 0 12
12210: PUSH
12211: LD_VAR 0 18
12215: PPUSH
12216: LD_INT 22
12218: PUSH
12219: LD_VAR 0 16
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 30
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 72
12264: ST_TO_ADDR
12265: GO 12349
12267: LD_INT 4
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12348
12275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12276: LD_ADDR_VAR 0 12
12280: PUSH
12281: LD_VAR 0 18
12285: PPUSH
12286: LD_INT 22
12288: PUSH
12289: LD_VAR 0 16
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 2
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 6
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 7
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: LD_INT 8
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 72
12345: ST_TO_ADDR
12346: GO 12349
12348: POP
// if i = 1 then
12349: LD_VAR 0 8
12353: PUSH
12354: LD_INT 1
12356: EQUAL
12357: IFFALSE 12468
// begin tmp := [ ] ;
12359: LD_ADDR_VAR 0 19
12363: PUSH
12364: EMPTY
12365: ST_TO_ADDR
// for j in f do
12366: LD_ADDR_VAR 0 9
12370: PUSH
12371: LD_VAR 0 12
12375: PUSH
12376: FOR_IN
12377: IFFALSE 12450
// if GetBType ( j ) = b_bunker then
12379: LD_VAR 0 9
12383: PPUSH
12384: CALL_OW 266
12388: PUSH
12389: LD_INT 32
12391: EQUAL
12392: IFFALSE 12419
// tmp := Insert ( tmp , 1 , j ) else
12394: LD_ADDR_VAR 0 19
12398: PUSH
12399: LD_VAR 0 19
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: LD_VAR 0 9
12411: PPUSH
12412: CALL_OW 2
12416: ST_TO_ADDR
12417: GO 12448
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12419: LD_ADDR_VAR 0 19
12423: PUSH
12424: LD_VAR 0 19
12428: PPUSH
12429: LD_VAR 0 19
12433: PUSH
12434: LD_INT 1
12436: PLUS
12437: PPUSH
12438: LD_VAR 0 9
12442: PPUSH
12443: CALL_OW 2
12447: ST_TO_ADDR
12448: GO 12376
12450: POP
12451: POP
// if tmp then
12452: LD_VAR 0 19
12456: IFFALSE 12468
// f := tmp ;
12458: LD_ADDR_VAR 0 12
12462: PUSH
12463: LD_VAR 0 19
12467: ST_TO_ADDR
// end ; x := personel [ i ] ;
12468: LD_ADDR_VAR 0 13
12472: PUSH
12473: LD_VAR 0 6
12477: PUSH
12478: LD_VAR 0 8
12482: ARRAY
12483: ST_TO_ADDR
// if x = - 1 then
12484: LD_VAR 0 13
12488: PUSH
12489: LD_INT 1
12491: NEG
12492: EQUAL
12493: IFFALSE 12702
// begin for j in f do
12495: LD_ADDR_VAR 0 9
12499: PUSH
12500: LD_VAR 0 12
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12698
// repeat InitHc ;
12508: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12512: LD_VAR 0 9
12516: PPUSH
12517: CALL_OW 266
12521: PUSH
12522: LD_INT 5
12524: EQUAL
12525: IFFALSE 12595
// begin if UnitsInside ( j ) < 3 then
12527: LD_VAR 0 9
12531: PPUSH
12532: CALL_OW 313
12536: PUSH
12537: LD_INT 3
12539: LESS
12540: IFFALSE 12576
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12542: LD_INT 0
12544: PPUSH
12545: LD_INT 5
12547: PUSH
12548: LD_INT 8
12550: PUSH
12551: LD_INT 9
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_VAR 0 17
12563: ARRAY
12564: PPUSH
12565: LD_VAR 0 4
12569: PPUSH
12570: CALL_OW 380
12574: GO 12593
// PrepareHuman ( false , i , skill ) ;
12576: LD_INT 0
12578: PPUSH
12579: LD_VAR 0 8
12583: PPUSH
12584: LD_VAR 0 4
12588: PPUSH
12589: CALL_OW 380
// end else
12593: GO 12612
// PrepareHuman ( false , i , skill ) ;
12595: LD_INT 0
12597: PPUSH
12598: LD_VAR 0 8
12602: PPUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: CALL_OW 380
// un := CreateHuman ;
12612: LD_ADDR_VAR 0 14
12616: PUSH
12617: CALL_OW 44
12621: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12622: LD_ADDR_VAR 0 7
12626: PUSH
12627: LD_VAR 0 7
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: LD_VAR 0 14
12639: PPUSH
12640: CALL_OW 2
12644: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12645: LD_VAR 0 14
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12659: LD_VAR 0 9
12663: PPUSH
12664: CALL_OW 313
12668: PUSH
12669: LD_INT 6
12671: EQUAL
12672: PUSH
12673: LD_VAR 0 9
12677: PPUSH
12678: CALL_OW 266
12682: PUSH
12683: LD_INT 32
12685: PUSH
12686: LD_INT 31
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: IN
12693: OR
12694: IFFALSE 12508
12696: GO 12505
12698: POP
12699: POP
// end else
12700: GO 13082
// for j = 1 to x do
12702: LD_ADDR_VAR 0 9
12706: PUSH
12707: DOUBLE
12708: LD_INT 1
12710: DEC
12711: ST_TO_ADDR
12712: LD_VAR 0 13
12716: PUSH
12717: FOR_TO
12718: IFFALSE 13080
// begin InitHc ;
12720: CALL_OW 19
// if not f then
12724: LD_VAR 0 12
12728: NOT
12729: IFFALSE 12818
// begin PrepareHuman ( false , i , skill ) ;
12731: LD_INT 0
12733: PPUSH
12734: LD_VAR 0 8
12738: PPUSH
12739: LD_VAR 0 4
12743: PPUSH
12744: CALL_OW 380
// un := CreateHuman ;
12748: LD_ADDR_VAR 0 14
12752: PUSH
12753: CALL_OW 44
12757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12758: LD_ADDR_VAR 0 7
12762: PUSH
12763: LD_VAR 0 7
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: LD_VAR 0 14
12775: PPUSH
12776: CALL_OW 2
12780: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12781: LD_VAR 0 14
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 250
12795: PPUSH
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 251
12805: PPUSH
12806: LD_INT 10
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 50
// continue ;
12816: GO 12717
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12818: LD_VAR 0 12
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 313
12831: PUSH
12832: LD_VAR 0 12
12836: PUSH
12837: LD_INT 1
12839: ARRAY
12840: PPUSH
12841: CALL_OW 266
12845: PUSH
12846: LD_INT 32
12848: PUSH
12849: LD_INT 31
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: IN
12856: AND
12857: PUSH
12858: LD_VAR 0 12
12862: PUSH
12863: LD_INT 1
12865: ARRAY
12866: PPUSH
12867: CALL_OW 313
12871: PUSH
12872: LD_INT 6
12874: EQUAL
12875: OR
12876: IFFALSE 12896
// f := Delete ( f , 1 ) ;
12878: LD_ADDR_VAR 0 12
12882: PUSH
12883: LD_VAR 0 12
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 3
12895: ST_TO_ADDR
// if not f then
12896: LD_VAR 0 12
12900: NOT
12901: IFFALSE 12919
// begin x := x + 2 ;
12903: LD_ADDR_VAR 0 13
12907: PUSH
12908: LD_VAR 0 13
12912: PUSH
12913: LD_INT 2
12915: PLUS
12916: ST_TO_ADDR
// continue ;
12917: GO 12717
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12919: LD_VAR 0 12
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: CALL_OW 266
12932: PUSH
12933: LD_INT 5
12935: EQUAL
12936: IFFALSE 13010
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12938: LD_VAR 0 12
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: CALL_OW 313
12951: PUSH
12952: LD_INT 3
12954: LESS
12955: IFFALSE 12991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12957: LD_INT 0
12959: PPUSH
12960: LD_INT 5
12962: PUSH
12963: LD_INT 8
12965: PUSH
12966: LD_INT 9
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: LD_VAR 0 17
12978: ARRAY
12979: PPUSH
12980: LD_VAR 0 4
12984: PPUSH
12985: CALL_OW 380
12989: GO 13008
// PrepareHuman ( false , i , skill ) ;
12991: LD_INT 0
12993: PPUSH
12994: LD_VAR 0 8
12998: PPUSH
12999: LD_VAR 0 4
13003: PPUSH
13004: CALL_OW 380
// end else
13008: GO 13027
// PrepareHuman ( false , i , skill ) ;
13010: LD_INT 0
13012: PPUSH
13013: LD_VAR 0 8
13017: PPUSH
13018: LD_VAR 0 4
13022: PPUSH
13023: CALL_OW 380
// un := CreateHuman ;
13027: LD_ADDR_VAR 0 14
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13037: LD_ADDR_VAR 0 7
13041: PUSH
13042: LD_VAR 0 7
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: LD_VAR 0 14
13054: PPUSH
13055: CALL_OW 2
13059: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13060: LD_VAR 0 14
13064: PPUSH
13065: LD_VAR 0 12
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 52
// end ;
13078: GO 12717
13080: POP
13081: POP
// end ;
13082: GO 12019
13084: POP
13085: POP
// result := result ^ buildings ;
13086: LD_ADDR_VAR 0 7
13090: PUSH
13091: LD_VAR 0 7
13095: PUSH
13096: LD_VAR 0 18
13100: ADD
13101: ST_TO_ADDR
// end else
13102: GO 13245
// begin for i = 1 to personel do
13104: LD_ADDR_VAR 0 8
13108: PUSH
13109: DOUBLE
13110: LD_INT 1
13112: DEC
13113: ST_TO_ADDR
13114: LD_VAR 0 6
13118: PUSH
13119: FOR_TO
13120: IFFALSE 13243
// begin if i > 4 then
13122: LD_VAR 0 8
13126: PUSH
13127: LD_INT 4
13129: GREATER
13130: IFFALSE 13134
// break ;
13132: GO 13243
// x := personel [ i ] ;
13134: LD_ADDR_VAR 0 13
13138: PUSH
13139: LD_VAR 0 6
13143: PUSH
13144: LD_VAR 0 8
13148: ARRAY
13149: ST_TO_ADDR
// if x = - 1 then
13150: LD_VAR 0 13
13154: PUSH
13155: LD_INT 1
13157: NEG
13158: EQUAL
13159: IFFALSE 13163
// continue ;
13161: GO 13119
// PrepareHuman ( false , i , skill ) ;
13163: LD_INT 0
13165: PPUSH
13166: LD_VAR 0 8
13170: PPUSH
13171: LD_VAR 0 4
13175: PPUSH
13176: CALL_OW 380
// un := CreateHuman ;
13180: LD_ADDR_VAR 0 14
13184: PUSH
13185: CALL_OW 44
13189: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13190: LD_VAR 0 14
13194: PPUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 250
13204: PPUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 251
13214: PPUSH
13215: LD_INT 10
13217: PPUSH
13218: LD_INT 0
13220: PPUSH
13221: CALL_OW 50
// result := result ^ un ;
13225: LD_ADDR_VAR 0 7
13229: PUSH
13230: LD_VAR 0 7
13234: PUSH
13235: LD_VAR 0 14
13239: ADD
13240: ST_TO_ADDR
// end ;
13241: GO 13119
13243: POP
13244: POP
// end ; end ;
13245: LD_VAR 0 7
13249: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13250: LD_INT 0
13252: PPUSH
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
// result := false ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_INT 0
13275: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13276: LD_VAR 0 1
13280: NOT
13281: PUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 266
13291: PUSH
13292: LD_INT 32
13294: PUSH
13295: LD_INT 33
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: IN
13302: NOT
13303: OR
13304: IFFALSE 13308
// exit ;
13306: GO 14417
// nat := GetNation ( tower ) ;
13308: LD_ADDR_VAR 0 12
13312: PUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 248
13322: ST_TO_ADDR
// side := GetSide ( tower ) ;
13323: LD_ADDR_VAR 0 16
13327: PUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 255
13337: ST_TO_ADDR
// x := GetX ( tower ) ;
13338: LD_ADDR_VAR 0 10
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 250
13352: ST_TO_ADDR
// y := GetY ( tower ) ;
13353: LD_ADDR_VAR 0 11
13357: PUSH
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 251
13367: ST_TO_ADDR
// if not x or not y then
13368: LD_VAR 0 10
13372: NOT
13373: PUSH
13374: LD_VAR 0 11
13378: NOT
13379: OR
13380: IFFALSE 13384
// exit ;
13382: GO 14417
// weapon := 0 ;
13384: LD_ADDR_VAR 0 18
13388: PUSH
13389: LD_INT 0
13391: ST_TO_ADDR
// fac_list := [ ] ;
13392: LD_ADDR_VAR 0 17
13396: PUSH
13397: EMPTY
13398: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13399: LD_ADDR_VAR 0 6
13403: PUSH
13404: LD_VAR 0 1
13408: PPUSH
13409: CALL_OW 274
13413: PPUSH
13414: LD_VAR 0 2
13418: PPUSH
13419: LD_INT 0
13421: PPUSH
13422: CALL 10988 0 3
13426: PPUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 72
13441: ST_TO_ADDR
// if not factories then
13442: LD_VAR 0 6
13446: NOT
13447: IFFALSE 13451
// exit ;
13449: GO 14417
// for i in factories do
13451: LD_ADDR_VAR 0 8
13455: PUSH
13456: LD_VAR 0 6
13460: PUSH
13461: FOR_IN
13462: IFFALSE 13487
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13464: LD_ADDR_VAR 0 17
13468: PUSH
13469: LD_VAR 0 17
13473: PUSH
13474: LD_VAR 0 8
13478: PPUSH
13479: CALL_OW 478
13483: UNION
13484: ST_TO_ADDR
13485: GO 13461
13487: POP
13488: POP
// if not fac_list then
13489: LD_VAR 0 17
13493: NOT
13494: IFFALSE 13498
// exit ;
13496: GO 14417
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13498: LD_ADDR_VAR 0 5
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: LD_INT 5
13508: PUSH
13509: LD_INT 9
13511: PUSH
13512: LD_INT 10
13514: PUSH
13515: LD_INT 6
13517: PUSH
13518: LD_INT 7
13520: PUSH
13521: LD_INT 11
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 27
13535: PUSH
13536: LD_INT 28
13538: PUSH
13539: LD_INT 26
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 43
13553: PUSH
13554: LD_INT 44
13556: PUSH
13557: LD_INT 46
13559: PUSH
13560: LD_INT 45
13562: PUSH
13563: LD_INT 47
13565: PUSH
13566: LD_INT 49
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: LD_VAR 0 12
13586: ARRAY
13587: ST_TO_ADDR
// list := list isect fac_list ;
13588: LD_ADDR_VAR 0 5
13592: PUSH
13593: LD_VAR 0 5
13597: PUSH
13598: LD_VAR 0 17
13602: ISECT
13603: ST_TO_ADDR
// if not list then
13604: LD_VAR 0 5
13608: NOT
13609: IFFALSE 13613
// exit ;
13611: GO 14417
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13613: LD_VAR 0 12
13617: PUSH
13618: LD_INT 3
13620: EQUAL
13621: PUSH
13622: LD_INT 49
13624: PUSH
13625: LD_VAR 0 5
13629: IN
13630: AND
13631: PUSH
13632: LD_INT 31
13634: PPUSH
13635: LD_VAR 0 16
13639: PPUSH
13640: CALL_OW 321
13644: PUSH
13645: LD_INT 2
13647: EQUAL
13648: AND
13649: IFFALSE 13709
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13651: LD_INT 22
13653: PUSH
13654: LD_VAR 0 16
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 35
13665: PUSH
13666: LD_INT 49
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 91
13675: PUSH
13676: LD_VAR 0 1
13680: PUSH
13681: LD_INT 10
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 69
13698: NOT
13699: IFFALSE 13709
// weapon := ru_time_lapser ;
13701: LD_ADDR_VAR 0 18
13705: PUSH
13706: LD_INT 49
13708: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13709: LD_VAR 0 12
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: LD_INT 2
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: IN
13724: PUSH
13725: LD_INT 11
13727: PUSH
13728: LD_VAR 0 5
13732: IN
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_VAR 0 5
13741: IN
13742: OR
13743: AND
13744: PUSH
13745: LD_INT 6
13747: PPUSH
13748: LD_VAR 0 16
13752: PPUSH
13753: CALL_OW 321
13757: PUSH
13758: LD_INT 2
13760: EQUAL
13761: AND
13762: IFFALSE 13927
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13764: LD_INT 22
13766: PUSH
13767: LD_VAR 0 16
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 35
13781: PUSH
13782: LD_INT 11
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 35
13791: PUSH
13792: LD_INT 30
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 91
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: LD_INT 18
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 69
13829: NOT
13830: PUSH
13831: LD_INT 22
13833: PUSH
13834: LD_VAR 0 16
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 32
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 30
13858: PUSH
13859: LD_INT 33
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 91
13873: PUSH
13874: LD_VAR 0 1
13878: PUSH
13879: LD_INT 12
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: EMPTY
13893: LIST
13894: PPUSH
13895: CALL_OW 69
13899: PUSH
13900: LD_INT 2
13902: GREATER
13903: AND
13904: IFFALSE 13927
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13906: LD_ADDR_VAR 0 18
13910: PUSH
13911: LD_INT 11
13913: PUSH
13914: LD_INT 30
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_VAR 0 12
13925: ARRAY
13926: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13927: LD_VAR 0 18
13931: NOT
13932: PUSH
13933: LD_INT 40
13935: PPUSH
13936: LD_VAR 0 16
13940: PPUSH
13941: CALL_OW 321
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: AND
13950: PUSH
13951: LD_INT 7
13953: PUSH
13954: LD_VAR 0 5
13958: IN
13959: PUSH
13960: LD_INT 28
13962: PUSH
13963: LD_VAR 0 5
13967: IN
13968: OR
13969: PUSH
13970: LD_INT 45
13972: PUSH
13973: LD_VAR 0 5
13977: IN
13978: OR
13979: AND
13980: IFFALSE 14234
// begin hex := GetHexInfo ( x , y ) ;
13982: LD_ADDR_VAR 0 4
13986: PUSH
13987: LD_VAR 0 10
13991: PPUSH
13992: LD_VAR 0 11
13996: PPUSH
13997: CALL_OW 546
14001: ST_TO_ADDR
// if hex [ 1 ] then
14002: LD_VAR 0 4
14006: PUSH
14007: LD_INT 1
14009: ARRAY
14010: IFFALSE 14014
// exit ;
14012: GO 14417
// height := hex [ 2 ] ;
14014: LD_ADDR_VAR 0 15
14018: PUSH
14019: LD_VAR 0 4
14023: PUSH
14024: LD_INT 2
14026: ARRAY
14027: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14028: LD_ADDR_VAR 0 14
14032: PUSH
14033: LD_INT 0
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 5
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: ST_TO_ADDR
// for i in tmp do
14051: LD_ADDR_VAR 0 8
14055: PUSH
14056: LD_VAR 0 14
14060: PUSH
14061: FOR_IN
14062: IFFALSE 14232
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14064: LD_ADDR_VAR 0 9
14068: PUSH
14069: LD_VAR 0 10
14073: PPUSH
14074: LD_VAR 0 8
14078: PPUSH
14079: LD_INT 5
14081: PPUSH
14082: CALL_OW 272
14086: PUSH
14087: LD_VAR 0 11
14091: PPUSH
14092: LD_VAR 0 8
14096: PPUSH
14097: LD_INT 5
14099: PPUSH
14100: CALL_OW 273
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14109: LD_VAR 0 9
14113: PUSH
14114: LD_INT 1
14116: ARRAY
14117: PPUSH
14118: LD_VAR 0 9
14122: PUSH
14123: LD_INT 2
14125: ARRAY
14126: PPUSH
14127: CALL_OW 488
14131: IFFALSE 14230
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14133: LD_ADDR_VAR 0 4
14137: PUSH
14138: LD_VAR 0 9
14142: PUSH
14143: LD_INT 1
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 9
14151: PUSH
14152: LD_INT 2
14154: ARRAY
14155: PPUSH
14156: CALL_OW 546
14160: ST_TO_ADDR
// if hex [ 1 ] then
14161: LD_VAR 0 4
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: IFFALSE 14173
// continue ;
14171: GO 14061
// h := hex [ 2 ] ;
14173: LD_ADDR_VAR 0 13
14177: PUSH
14178: LD_VAR 0 4
14182: PUSH
14183: LD_INT 2
14185: ARRAY
14186: ST_TO_ADDR
// if h + 7 < height then
14187: LD_VAR 0 13
14191: PUSH
14192: LD_INT 7
14194: PLUS
14195: PUSH
14196: LD_VAR 0 15
14200: LESS
14201: IFFALSE 14230
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14203: LD_ADDR_VAR 0 18
14207: PUSH
14208: LD_INT 7
14210: PUSH
14211: LD_INT 28
14213: PUSH
14214: LD_INT 45
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_VAR 0 12
14226: ARRAY
14227: ST_TO_ADDR
// break ;
14228: GO 14232
// end ; end ; end ;
14230: GO 14061
14232: POP
14233: POP
// end ; if not weapon then
14234: LD_VAR 0 18
14238: NOT
14239: IFFALSE 14299
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14241: LD_ADDR_VAR 0 5
14245: PUSH
14246: LD_VAR 0 5
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 49
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: DIFF
14265: ST_TO_ADDR
// if not list then
14266: LD_VAR 0 5
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14417
// weapon := list [ rand ( 1 , list ) ] ;
14275: LD_ADDR_VAR 0 18
14279: PUSH
14280: LD_VAR 0 5
14284: PUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_VAR 0 5
14292: PPUSH
14293: CALL_OW 12
14297: ARRAY
14298: ST_TO_ADDR
// end ; if weapon then
14299: LD_VAR 0 18
14303: IFFALSE 14417
// begin tmp := CostOfWeapon ( weapon ) ;
14305: LD_ADDR_VAR 0 14
14309: PUSH
14310: LD_VAR 0 18
14314: PPUSH
14315: CALL_OW 451
14319: ST_TO_ADDR
// j := GetBase ( tower ) ;
14320: LD_ADDR_VAR 0 9
14324: PUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 274
14334: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14335: LD_VAR 0 9
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 275
14347: PUSH
14348: LD_VAR 0 14
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: GREATEREQUAL
14357: PUSH
14358: LD_VAR 0 9
14362: PPUSH
14363: LD_INT 2
14365: PPUSH
14366: CALL_OW 275
14370: PUSH
14371: LD_VAR 0 14
14375: PUSH
14376: LD_INT 2
14378: ARRAY
14379: GREATEREQUAL
14380: AND
14381: PUSH
14382: LD_VAR 0 9
14386: PPUSH
14387: LD_INT 3
14389: PPUSH
14390: CALL_OW 275
14394: PUSH
14395: LD_VAR 0 14
14399: PUSH
14400: LD_INT 3
14402: ARRAY
14403: GREATEREQUAL
14404: AND
14405: IFFALSE 14417
// result := weapon ;
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_VAR 0 18
14416: ST_TO_ADDR
// end ; end ;
14417: LD_VAR 0 3
14421: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
// result := true ;
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_INT 1
14433: ST_TO_ADDR
// if array1 = array2 then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_VAR 0 2
14443: EQUAL
14444: IFFALSE 14504
// begin for i = 1 to array1 do
14446: LD_ADDR_VAR 0 4
14450: PUSH
14451: DOUBLE
14452: LD_INT 1
14454: DEC
14455: ST_TO_ADDR
14456: LD_VAR 0 1
14460: PUSH
14461: FOR_TO
14462: IFFALSE 14500
// if array1 [ i ] <> array2 [ i ] then
14464: LD_VAR 0 1
14468: PUSH
14469: LD_VAR 0 4
14473: ARRAY
14474: PUSH
14475: LD_VAR 0 2
14479: PUSH
14480: LD_VAR 0 4
14484: ARRAY
14485: NONEQUAL
14486: IFFALSE 14498
// begin result := false ;
14488: LD_ADDR_VAR 0 3
14492: PUSH
14493: LD_INT 0
14495: ST_TO_ADDR
// break ;
14496: GO 14500
// end ;
14498: GO 14461
14500: POP
14501: POP
// end else
14502: GO 14512
// result := false ;
14504: LD_ADDR_VAR 0 3
14508: PUSH
14509: LD_INT 0
14511: ST_TO_ADDR
// end ;
14512: LD_VAR 0 3
14516: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14517: LD_INT 0
14519: PPUSH
14520: PPUSH
// if not array1 or not array2 then
14521: LD_VAR 0 1
14525: NOT
14526: PUSH
14527: LD_VAR 0 2
14531: NOT
14532: OR
14533: IFFALSE 14537
// exit ;
14535: GO 14601
// result := true ;
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// for i = 1 to array1 do
14545: LD_ADDR_VAR 0 4
14549: PUSH
14550: DOUBLE
14551: LD_INT 1
14553: DEC
14554: ST_TO_ADDR
14555: LD_VAR 0 1
14559: PUSH
14560: FOR_TO
14561: IFFALSE 14599
// if array1 [ i ] <> array2 [ i ] then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_VAR 0 4
14572: ARRAY
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_VAR 0 4
14583: ARRAY
14584: NONEQUAL
14585: IFFALSE 14597
// begin result := false ;
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 0
14594: ST_TO_ADDR
// break ;
14595: GO 14599
// end ;
14597: GO 14560
14599: POP
14600: POP
// end ;
14601: LD_VAR 0 3
14605: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
14610: PPUSH
// pom := GetBase ( fac ) ;
14611: LD_ADDR_VAR 0 5
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 274
14625: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14626: LD_ADDR_VAR 0 4
14630: PUSH
14631: LD_VAR 0 2
14635: PUSH
14636: LD_INT 1
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 2
14644: PUSH
14645: LD_INT 2
14647: ARRAY
14648: PPUSH
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 3
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PUSH
14663: LD_INT 4
14665: ARRAY
14666: PPUSH
14667: CALL_OW 449
14671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14672: LD_ADDR_VAR 0 3
14676: PUSH
14677: LD_VAR 0 5
14681: PPUSH
14682: LD_INT 1
14684: PPUSH
14685: CALL_OW 275
14689: PUSH
14690: LD_VAR 0 4
14694: PUSH
14695: LD_INT 1
14697: ARRAY
14698: GREATEREQUAL
14699: PUSH
14700: LD_VAR 0 5
14704: PPUSH
14705: LD_INT 2
14707: PPUSH
14708: CALL_OW 275
14712: PUSH
14713: LD_VAR 0 4
14717: PUSH
14718: LD_INT 2
14720: ARRAY
14721: GREATEREQUAL
14722: AND
14723: PUSH
14724: LD_VAR 0 5
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: CALL_OW 275
14736: PUSH
14737: LD_VAR 0 4
14741: PUSH
14742: LD_INT 3
14744: ARRAY
14745: GREATEREQUAL
14746: AND
14747: ST_TO_ADDR
// end ;
14748: LD_VAR 0 3
14752: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
14757: PPUSH
14758: PPUSH
// pom := GetBase ( building ) ;
14759: LD_ADDR_VAR 0 3
14763: PUSH
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 274
14773: ST_TO_ADDR
// if not pom then
14774: LD_VAR 0 3
14778: NOT
14779: IFFALSE 14783
// exit ;
14781: GO 14953
// btype := GetBType ( building ) ;
14783: LD_ADDR_VAR 0 5
14787: PUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 266
14797: ST_TO_ADDR
// if btype = b_armoury then
14798: LD_VAR 0 5
14802: PUSH
14803: LD_INT 4
14805: EQUAL
14806: IFFALSE 14816
// btype := b_barracks ;
14808: LD_ADDR_VAR 0 5
14812: PUSH
14813: LD_INT 5
14815: ST_TO_ADDR
// if btype = b_depot then
14816: LD_VAR 0 5
14820: PUSH
14821: LD_INT 0
14823: EQUAL
14824: IFFALSE 14834
// btype := b_warehouse ;
14826: LD_ADDR_VAR 0 5
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// if btype = b_workshop then
14834: LD_VAR 0 5
14838: PUSH
14839: LD_INT 2
14841: EQUAL
14842: IFFALSE 14852
// btype := b_factory ;
14844: LD_ADDR_VAR 0 5
14848: PUSH
14849: LD_INT 3
14851: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14852: LD_ADDR_VAR 0 4
14856: PUSH
14857: LD_VAR 0 5
14861: PPUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 248
14871: PPUSH
14872: CALL_OW 450
14876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 275
14894: PUSH
14895: LD_VAR 0 4
14899: PUSH
14900: LD_INT 1
14902: ARRAY
14903: GREATEREQUAL
14904: PUSH
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_INT 2
14912: PPUSH
14913: CALL_OW 275
14917: PUSH
14918: LD_VAR 0 4
14922: PUSH
14923: LD_INT 2
14925: ARRAY
14926: GREATEREQUAL
14927: AND
14928: PUSH
14929: LD_VAR 0 3
14933: PPUSH
14934: LD_INT 3
14936: PPUSH
14937: CALL_OW 275
14941: PUSH
14942: LD_VAR 0 4
14946: PUSH
14947: LD_INT 3
14949: ARRAY
14950: GREATEREQUAL
14951: AND
14952: ST_TO_ADDR
// end ;
14953: LD_VAR 0 2
14957: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14958: LD_INT 0
14960: PPUSH
14961: PPUSH
14962: PPUSH
// pom := GetBase ( building ) ;
14963: LD_ADDR_VAR 0 4
14967: PUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 274
14977: ST_TO_ADDR
// if not pom then
14978: LD_VAR 0 4
14982: NOT
14983: IFFALSE 14987
// exit ;
14985: GO 15088
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14987: LD_ADDR_VAR 0 5
14991: PUSH
14992: LD_VAR 0 2
14996: PPUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 248
15006: PPUSH
15007: CALL_OW 450
15011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15012: LD_ADDR_VAR 0 3
15016: PUSH
15017: LD_VAR 0 4
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 275
15029: PUSH
15030: LD_VAR 0 5
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: GREATEREQUAL
15039: PUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: LD_INT 2
15047: PPUSH
15048: CALL_OW 275
15052: PUSH
15053: LD_VAR 0 5
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: GREATEREQUAL
15062: AND
15063: PUSH
15064: LD_VAR 0 4
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 275
15076: PUSH
15077: LD_VAR 0 5
15081: PUSH
15082: LD_INT 3
15084: ARRAY
15085: GREATEREQUAL
15086: AND
15087: ST_TO_ADDR
// end ;
15088: LD_VAR 0 3
15092: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
// result := false ;
15106: LD_ADDR_VAR 0 8
15110: PUSH
15111: LD_INT 0
15113: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15114: LD_VAR 0 5
15118: NOT
15119: PUSH
15120: LD_VAR 0 1
15124: NOT
15125: OR
15126: PUSH
15127: LD_VAR 0 2
15131: NOT
15132: OR
15133: PUSH
15134: LD_VAR 0 3
15138: NOT
15139: OR
15140: IFFALSE 15144
// exit ;
15142: GO 15958
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15144: LD_ADDR_VAR 0 14
15148: PUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: LD_VAR 0 4
15168: PPUSH
15169: LD_VAR 0 5
15173: PUSH
15174: LD_INT 1
15176: ARRAY
15177: PPUSH
15178: CALL_OW 248
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL 17211 0 6
15190: ST_TO_ADDR
// if not hexes then
15191: LD_VAR 0 14
15195: NOT
15196: IFFALSE 15200
// exit ;
15198: GO 15958
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15200: LD_ADDR_VAR 0 17
15204: PUSH
15205: LD_VAR 0 5
15209: PPUSH
15210: LD_INT 22
15212: PUSH
15213: LD_VAR 0 13
15217: PPUSH
15218: CALL_OW 255
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 2
15229: PUSH
15230: LD_INT 30
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL_OW 72
15263: ST_TO_ADDR
// for i = 1 to hexes do
15264: LD_ADDR_VAR 0 9
15268: PUSH
15269: DOUBLE
15270: LD_INT 1
15272: DEC
15273: ST_TO_ADDR
15274: LD_VAR 0 14
15278: PUSH
15279: FOR_TO
15280: IFFALSE 15956
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15282: LD_ADDR_VAR 0 13
15286: PUSH
15287: LD_VAR 0 14
15291: PUSH
15292: LD_VAR 0 9
15296: ARRAY
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: LD_VAR 0 14
15306: PUSH
15307: LD_VAR 0 9
15311: ARRAY
15312: PUSH
15313: LD_INT 2
15315: ARRAY
15316: PPUSH
15317: CALL_OW 428
15321: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15322: LD_VAR 0 14
15326: PUSH
15327: LD_VAR 0 9
15331: ARRAY
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: PPUSH
15337: LD_VAR 0 14
15341: PUSH
15342: LD_VAR 0 9
15346: ARRAY
15347: PUSH
15348: LD_INT 2
15350: ARRAY
15351: PPUSH
15352: CALL_OW 351
15356: PUSH
15357: LD_VAR 0 14
15361: PUSH
15362: LD_VAR 0 9
15366: ARRAY
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: LD_VAR 0 14
15376: PUSH
15377: LD_VAR 0 9
15381: ARRAY
15382: PUSH
15383: LD_INT 2
15385: ARRAY
15386: PPUSH
15387: CALL_OW 488
15391: NOT
15392: OR
15393: PUSH
15394: LD_VAR 0 13
15398: PPUSH
15399: CALL_OW 247
15403: PUSH
15404: LD_INT 3
15406: EQUAL
15407: OR
15408: IFFALSE 15414
// exit ;
15410: POP
15411: POP
15412: GO 15958
// if not tmp then
15414: LD_VAR 0 13
15418: NOT
15419: IFFALSE 15423
// continue ;
15421: GO 15279
// result := true ;
15423: LD_ADDR_VAR 0 8
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15431: LD_VAR 0 6
15435: PUSH
15436: LD_VAR 0 13
15440: PPUSH
15441: CALL_OW 247
15445: PUSH
15446: LD_INT 2
15448: EQUAL
15449: AND
15450: PUSH
15451: LD_VAR 0 13
15455: PPUSH
15456: CALL_OW 263
15460: PUSH
15461: LD_INT 1
15463: EQUAL
15464: AND
15465: IFFALSE 15629
// begin if IsDrivenBy ( tmp ) then
15467: LD_VAR 0 13
15471: PPUSH
15472: CALL_OW 311
15476: IFFALSE 15480
// continue ;
15478: GO 15279
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15480: LD_VAR 0 6
15484: PPUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 60
15490: PUSH
15491: EMPTY
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: LD_INT 55
15503: PUSH
15504: EMPTY
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 72
15519: IFFALSE 15627
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15521: LD_ADDR_VAR 0 18
15525: PUSH
15526: LD_VAR 0 6
15530: PPUSH
15531: LD_INT 3
15533: PUSH
15534: LD_INT 60
15536: PUSH
15537: EMPTY
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 3
15546: PUSH
15547: LD_INT 55
15549: PUSH
15550: EMPTY
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 72
15565: PUSH
15566: LD_INT 1
15568: ARRAY
15569: ST_TO_ADDR
// if IsInUnit ( driver ) then
15570: LD_VAR 0 18
15574: PPUSH
15575: CALL_OW 310
15579: IFFALSE 15590
// ComExit ( driver ) ;
15581: LD_VAR 0 18
15585: PPUSH
15586: CALL 41012 0 1
// AddComEnterUnit ( driver , tmp ) ;
15590: LD_VAR 0 18
15594: PPUSH
15595: LD_VAR 0 13
15599: PPUSH
15600: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15604: LD_VAR 0 18
15608: PPUSH
15609: LD_VAR 0 7
15613: PPUSH
15614: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15618: LD_VAR 0 18
15622: PPUSH
15623: CALL_OW 181
// end ; continue ;
15627: GO 15279
// end ; if not cleaners or not tmp in cleaners then
15629: LD_VAR 0 6
15633: NOT
15634: PUSH
15635: LD_VAR 0 13
15639: PUSH
15640: LD_VAR 0 6
15644: IN
15645: NOT
15646: OR
15647: IFFALSE 15954
// begin if dep then
15649: LD_VAR 0 17
15653: IFFALSE 15789
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15655: LD_ADDR_VAR 0 16
15659: PUSH
15660: LD_VAR 0 17
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 250
15673: PPUSH
15674: LD_VAR 0 17
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: CALL_OW 254
15687: PPUSH
15688: LD_INT 5
15690: PPUSH
15691: CALL_OW 272
15695: PUSH
15696: LD_VAR 0 17
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: CALL_OW 251
15709: PPUSH
15710: LD_VAR 0 17
15714: PUSH
15715: LD_INT 1
15717: ARRAY
15718: PPUSH
15719: CALL_OW 254
15723: PPUSH
15724: LD_INT 5
15726: PPUSH
15727: CALL_OW 273
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15736: LD_VAR 0 16
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: LD_VAR 0 16
15749: PUSH
15750: LD_INT 2
15752: ARRAY
15753: PPUSH
15754: CALL_OW 488
15758: IFFALSE 15789
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15760: LD_VAR 0 13
15764: PPUSH
15765: LD_VAR 0 16
15769: PUSH
15770: LD_INT 1
15772: ARRAY
15773: PPUSH
15774: LD_VAR 0 16
15778: PUSH
15779: LD_INT 2
15781: ARRAY
15782: PPUSH
15783: CALL_OW 111
// continue ;
15787: GO 15279
// end ; end ; r := GetDir ( tmp ) ;
15789: LD_ADDR_VAR 0 15
15793: PUSH
15794: LD_VAR 0 13
15798: PPUSH
15799: CALL_OW 254
15803: ST_TO_ADDR
// if r = 5 then
15804: LD_VAR 0 15
15808: PUSH
15809: LD_INT 5
15811: EQUAL
15812: IFFALSE 15822
// r := 0 ;
15814: LD_ADDR_VAR 0 15
15818: PUSH
15819: LD_INT 0
15821: ST_TO_ADDR
// for j = r to 5 do
15822: LD_ADDR_VAR 0 10
15826: PUSH
15827: DOUBLE
15828: LD_VAR 0 15
15832: DEC
15833: ST_TO_ADDR
15834: LD_INT 5
15836: PUSH
15837: FOR_TO
15838: IFFALSE 15952
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15840: LD_ADDR_VAR 0 11
15844: PUSH
15845: LD_VAR 0 13
15849: PPUSH
15850: CALL_OW 250
15854: PPUSH
15855: LD_VAR 0 10
15859: PPUSH
15860: LD_INT 2
15862: PPUSH
15863: CALL_OW 272
15867: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15868: LD_ADDR_VAR 0 12
15872: PUSH
15873: LD_VAR 0 13
15877: PPUSH
15878: CALL_OW 251
15882: PPUSH
15883: LD_VAR 0 10
15887: PPUSH
15888: LD_INT 2
15890: PPUSH
15891: CALL_OW 273
15895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15896: LD_VAR 0 11
15900: PPUSH
15901: LD_VAR 0 12
15905: PPUSH
15906: CALL_OW 488
15910: PUSH
15911: LD_VAR 0 11
15915: PPUSH
15916: LD_VAR 0 12
15920: PPUSH
15921: CALL_OW 428
15925: NOT
15926: AND
15927: IFFALSE 15950
// begin ComMoveXY ( tmp , _x , _y ) ;
15929: LD_VAR 0 13
15933: PPUSH
15934: LD_VAR 0 11
15938: PPUSH
15939: LD_VAR 0 12
15943: PPUSH
15944: CALL_OW 111
// break ;
15948: GO 15952
// end ; end ;
15950: GO 15837
15952: POP
15953: POP
// end ; end ;
15954: GO 15279
15956: POP
15957: POP
// end ;
15958: LD_VAR 0 8
15962: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15963: LD_INT 0
15965: PPUSH
// result := true ;
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15974: LD_VAR 0 2
15978: PUSH
15979: LD_INT 24
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15993
15985: LD_INT 33
15987: DOUBLE
15988: EQUAL
15989: IFTRUE 15993
15991: GO 16018
15993: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15994: LD_ADDR_VAR 0 3
15998: PUSH
15999: LD_INT 32
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 321
16011: PUSH
16012: LD_INT 2
16014: EQUAL
16015: ST_TO_ADDR
16016: GO 16334
16018: LD_INT 20
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16051
16026: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_INT 6
16034: PPUSH
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 321
16044: PUSH
16045: LD_INT 2
16047: EQUAL
16048: ST_TO_ADDR
16049: GO 16334
16051: LD_INT 22
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16065
16057: LD_INT 36
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16090
16065: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_INT 15
16073: PPUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 321
16083: PUSH
16084: LD_INT 2
16086: EQUAL
16087: ST_TO_ADDR
16088: GO 16334
16090: LD_INT 30
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16123
16098: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_INT 20
16106: PPUSH
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 321
16116: PUSH
16117: LD_INT 2
16119: EQUAL
16120: ST_TO_ADDR
16121: GO 16334
16123: LD_INT 28
16125: DOUBLE
16126: EQUAL
16127: IFTRUE 16137
16129: LD_INT 21
16131: DOUBLE
16132: EQUAL
16133: IFTRUE 16137
16135: GO 16162
16137: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 21
16145: PPUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 321
16155: PUSH
16156: LD_INT 2
16158: EQUAL
16159: ST_TO_ADDR
16160: GO 16334
16162: LD_INT 16
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16195
16170: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: LD_INT 84
16178: PPUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 321
16188: PUSH
16189: LD_INT 2
16191: EQUAL
16192: ST_TO_ADDR
16193: GO 16334
16195: LD_INT 19
16197: DOUBLE
16198: EQUAL
16199: IFTRUE 16209
16201: LD_INT 23
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16234
16209: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 83
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 321
16227: PUSH
16228: LD_INT 2
16230: EQUAL
16231: ST_TO_ADDR
16232: GO 16334
16234: LD_INT 17
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16267
16242: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16243: LD_ADDR_VAR 0 3
16247: PUSH
16248: LD_INT 39
16250: PPUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 321
16260: PUSH
16261: LD_INT 2
16263: EQUAL
16264: ST_TO_ADDR
16265: GO 16334
16267: LD_INT 18
16269: DOUBLE
16270: EQUAL
16271: IFTRUE 16275
16273: GO 16300
16275: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16276: LD_ADDR_VAR 0 3
16280: PUSH
16281: LD_INT 40
16283: PPUSH
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL_OW 321
16293: PUSH
16294: LD_INT 2
16296: EQUAL
16297: ST_TO_ADDR
16298: GO 16334
16300: LD_INT 27
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16333
16308: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_INT 35
16316: PPUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 321
16326: PUSH
16327: LD_INT 2
16329: EQUAL
16330: ST_TO_ADDR
16331: GO 16334
16333: POP
// end ;
16334: LD_VAR 0 3
16338: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16339: LD_INT 0
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
16351: PPUSH
// result := false ;
16352: LD_ADDR_VAR 0 6
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// if btype = b_depot then
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 0
16367: EQUAL
16368: IFFALSE 16380
// begin result := true ;
16370: LD_ADDR_VAR 0 6
16374: PUSH
16375: LD_INT 1
16377: ST_TO_ADDR
// exit ;
16378: GO 17206
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16380: LD_VAR 0 1
16384: NOT
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 266
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: IN
16406: NOT
16407: OR
16408: PUSH
16409: LD_VAR 0 2
16413: NOT
16414: OR
16415: PUSH
16416: LD_VAR 0 5
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: LD_INT 2
16429: PUSH
16430: LD_INT 3
16432: PUSH
16433: LD_INT 4
16435: PUSH
16436: LD_INT 5
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: IN
16447: NOT
16448: OR
16449: PUSH
16450: LD_VAR 0 3
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: CALL_OW 488
16464: NOT
16465: OR
16466: IFFALSE 16470
// exit ;
16468: GO 17206
// side := GetSide ( depot ) ;
16470: LD_ADDR_VAR 0 9
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 255
16484: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16485: LD_VAR 0 9
16489: PPUSH
16490: LD_VAR 0 2
16494: PPUSH
16495: CALL 15963 0 2
16499: NOT
16500: IFFALSE 16504
// exit ;
16502: GO 17206
// pom := GetBase ( depot ) ;
16504: LD_ADDR_VAR 0 10
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 274
16518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16519: LD_ADDR_VAR 0 11
16523: PUSH
16524: LD_VAR 0 2
16528: PPUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 248
16538: PPUSH
16539: CALL_OW 450
16543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16544: LD_VAR 0 10
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 275
16556: PUSH
16557: LD_VAR 0 11
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: GREATEREQUAL
16566: PUSH
16567: LD_VAR 0 10
16571: PPUSH
16572: LD_INT 2
16574: PPUSH
16575: CALL_OW 275
16579: PUSH
16580: LD_VAR 0 11
16584: PUSH
16585: LD_INT 2
16587: ARRAY
16588: GREATEREQUAL
16589: AND
16590: PUSH
16591: LD_VAR 0 10
16595: PPUSH
16596: LD_INT 3
16598: PPUSH
16599: CALL_OW 275
16603: PUSH
16604: LD_VAR 0 11
16608: PUSH
16609: LD_INT 3
16611: ARRAY
16612: GREATEREQUAL
16613: AND
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 17206
// if GetBType ( depot ) = b_depot then
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 266
16628: PUSH
16629: LD_INT 0
16631: EQUAL
16632: IFFALSE 16644
// dist := 28 else
16634: LD_ADDR_VAR 0 14
16638: PUSH
16639: LD_INT 28
16641: ST_TO_ADDR
16642: GO 16652
// dist := 36 ;
16644: LD_ADDR_VAR 0 14
16648: PUSH
16649: LD_INT 36
16651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16652: LD_VAR 0 1
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_VAR 0 4
16666: PPUSH
16667: CALL_OW 297
16671: PUSH
16672: LD_VAR 0 14
16676: GREATER
16677: IFFALSE 16681
// exit ;
16679: GO 17206
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16681: LD_ADDR_VAR 0 12
16685: PUSH
16686: LD_VAR 0 2
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 248
16715: PPUSH
16716: LD_INT 0
16718: PPUSH
16719: CALL 17211 0 6
16723: ST_TO_ADDR
// if not hexes then
16724: LD_VAR 0 12
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 17206
// hex := GetHexInfo ( x , y ) ;
16733: LD_ADDR_VAR 0 15
16737: PUSH
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_VAR 0 4
16747: PPUSH
16748: CALL_OW 546
16752: ST_TO_ADDR
// if hex [ 1 ] then
16753: LD_VAR 0 15
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: IFFALSE 16765
// exit ;
16763: GO 17206
// height := hex [ 2 ] ;
16765: LD_ADDR_VAR 0 13
16769: PUSH
16770: LD_VAR 0 15
16774: PUSH
16775: LD_INT 2
16777: ARRAY
16778: ST_TO_ADDR
// for i = 1 to hexes do
16779: LD_ADDR_VAR 0 7
16783: PUSH
16784: DOUBLE
16785: LD_INT 1
16787: DEC
16788: ST_TO_ADDR
16789: LD_VAR 0 12
16793: PUSH
16794: FOR_TO
16795: IFFALSE 17125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16797: LD_VAR 0 12
16801: PUSH
16802: LD_VAR 0 7
16806: ARRAY
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 12
16816: PUSH
16817: LD_VAR 0 7
16821: ARRAY
16822: PUSH
16823: LD_INT 2
16825: ARRAY
16826: PPUSH
16827: CALL_OW 488
16831: NOT
16832: PUSH
16833: LD_VAR 0 12
16837: PUSH
16838: LD_VAR 0 7
16842: ARRAY
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_VAR 0 12
16852: PUSH
16853: LD_VAR 0 7
16857: ARRAY
16858: PUSH
16859: LD_INT 2
16861: ARRAY
16862: PPUSH
16863: CALL_OW 428
16867: PUSH
16868: LD_INT 0
16870: GREATER
16871: OR
16872: PUSH
16873: LD_VAR 0 12
16877: PUSH
16878: LD_VAR 0 7
16882: ARRAY
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PPUSH
16888: LD_VAR 0 12
16892: PUSH
16893: LD_VAR 0 7
16897: ARRAY
16898: PUSH
16899: LD_INT 2
16901: ARRAY
16902: PPUSH
16903: CALL_OW 351
16907: OR
16908: IFFALSE 16914
// exit ;
16910: POP
16911: POP
16912: GO 17206
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16914: LD_ADDR_VAR 0 8
16918: PUSH
16919: LD_VAR 0 12
16923: PUSH
16924: LD_VAR 0 7
16928: ARRAY
16929: PUSH
16930: LD_INT 1
16932: ARRAY
16933: PPUSH
16934: LD_VAR 0 12
16938: PUSH
16939: LD_VAR 0 7
16943: ARRAY
16944: PUSH
16945: LD_INT 2
16947: ARRAY
16948: PPUSH
16949: CALL_OW 546
16953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16954: LD_VAR 0 8
16958: PUSH
16959: LD_INT 1
16961: ARRAY
16962: PUSH
16963: LD_VAR 0 8
16967: PUSH
16968: LD_INT 2
16970: ARRAY
16971: PUSH
16972: LD_VAR 0 13
16976: PUSH
16977: LD_INT 2
16979: PLUS
16980: GREATER
16981: OR
16982: PUSH
16983: LD_VAR 0 8
16987: PUSH
16988: LD_INT 2
16990: ARRAY
16991: PUSH
16992: LD_VAR 0 13
16996: PUSH
16997: LD_INT 2
16999: MINUS
17000: LESS
17001: OR
17002: PUSH
17003: LD_VAR 0 8
17007: PUSH
17008: LD_INT 3
17010: ARRAY
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: LD_INT 8
17017: PUSH
17018: LD_INT 9
17020: PUSH
17021: LD_INT 10
17023: PUSH
17024: LD_INT 11
17026: PUSH
17027: LD_INT 12
17029: PUSH
17030: LD_INT 13
17032: PUSH
17033: LD_INT 16
17035: PUSH
17036: LD_INT 17
17038: PUSH
17039: LD_INT 18
17041: PUSH
17042: LD_INT 19
17044: PUSH
17045: LD_INT 20
17047: PUSH
17048: LD_INT 21
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: IN
17066: NOT
17067: OR
17068: PUSH
17069: LD_VAR 0 8
17073: PUSH
17074: LD_INT 5
17076: ARRAY
17077: NOT
17078: OR
17079: PUSH
17080: LD_VAR 0 8
17084: PUSH
17085: LD_INT 6
17087: ARRAY
17088: PUSH
17089: LD_INT 1
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: LD_INT 7
17097: PUSH
17098: LD_INT 9
17100: PUSH
17101: LD_INT 10
17103: PUSH
17104: LD_INT 11
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: IN
17115: NOT
17116: OR
17117: IFFALSE 17123
// exit ;
17119: POP
17120: POP
17121: GO 17206
// end ;
17123: GO 16794
17125: POP
17126: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17127: LD_VAR 0 9
17131: PPUSH
17132: LD_VAR 0 3
17136: PPUSH
17137: LD_VAR 0 4
17141: PPUSH
17142: LD_INT 20
17144: PPUSH
17145: CALL 9129 0 4
17149: PUSH
17150: LD_INT 4
17152: ARRAY
17153: IFFALSE 17157
// exit ;
17155: GO 17206
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 29
17164: PUSH
17165: LD_INT 30
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: IN
17172: PUSH
17173: LD_VAR 0 3
17177: PPUSH
17178: LD_VAR 0 4
17182: PPUSH
17183: LD_VAR 0 9
17187: PPUSH
17188: CALL_OW 440
17192: NOT
17193: AND
17194: IFFALSE 17198
// exit ;
17196: GO 17206
// result := true ;
17198: LD_ADDR_VAR 0 6
17202: PUSH
17203: LD_INT 1
17205: ST_TO_ADDR
// end ;
17206: LD_VAR 0 6
17210: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
// result = [ ] ;
17271: LD_ADDR_VAR 0 7
17275: PUSH
17276: EMPTY
17277: ST_TO_ADDR
// temp_list = [ ] ;
17278: LD_ADDR_VAR 0 9
17282: PUSH
17283: EMPTY
17284: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17285: LD_VAR 0 4
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: LD_INT 4
17304: PUSH
17305: LD_INT 5
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: IN
17316: NOT
17317: PUSH
17318: LD_VAR 0 1
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: IN
17333: PUSH
17334: LD_VAR 0 5
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: IN
17353: NOT
17354: AND
17355: OR
17356: IFFALSE 17360
// exit ;
17358: GO 35751
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17360: LD_VAR 0 1
17364: PUSH
17365: LD_INT 6
17367: PUSH
17368: LD_INT 7
17370: PUSH
17371: LD_INT 8
17373: PUSH
17374: LD_INT 13
17376: PUSH
17377: LD_INT 12
17379: PUSH
17380: LD_INT 15
17382: PUSH
17383: LD_INT 11
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: LD_INT 10
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: IN
17403: IFFALSE 17413
// btype = b_lab ;
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_INT 6
17412: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17413: LD_VAR 0 6
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: IN
17432: NOT
17433: PUSH
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: LD_INT 6
17453: PUSH
17454: LD_INT 36
17456: PUSH
17457: LD_INT 4
17459: PUSH
17460: LD_INT 5
17462: PUSH
17463: LD_INT 31
17465: PUSH
17466: LD_INT 32
17468: PUSH
17469: LD_INT 33
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: IN
17485: NOT
17486: PUSH
17487: LD_VAR 0 6
17491: PUSH
17492: LD_INT 1
17494: EQUAL
17495: AND
17496: OR
17497: PUSH
17498: LD_VAR 0 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 3
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: IN
17513: NOT
17514: PUSH
17515: LD_VAR 0 6
17519: PUSH
17520: LD_INT 2
17522: EQUAL
17523: AND
17524: OR
17525: IFFALSE 17535
// mode = 0 ;
17527: LD_ADDR_VAR 0 6
17531: PUSH
17532: LD_INT 0
17534: ST_TO_ADDR
// case mode of 0 :
17535: LD_VAR 0 6
17539: PUSH
17540: LD_INT 0
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 29001
17548: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17549: LD_ADDR_VAR 0 11
17553: PUSH
17554: LD_INT 0
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: LD_INT 0
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: LD_INT 1
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: LD_INT 2
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 0
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 3
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17742: LD_ADDR_VAR 0 12
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 1
17762: NEG
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 2
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 2
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 2
17865: NEG
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: NEG
17877: PUSH
17878: LD_INT 1
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 3
17899: NEG
17900: PUSH
17901: LD_INT 0
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 3
17910: NEG
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17938: LD_ADDR_VAR 0 13
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 2
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 2
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 2
18061: NEG
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: NEG
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: NEG
18086: PUSH
18087: LD_INT 3
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 3
18097: NEG
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 3
18109: NEG
18110: PUSH
18111: LD_INT 3
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18137: LD_ADDR_VAR 0 14
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: LD_INT 3
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 3
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18333: LD_ADDR_VAR 0 15
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: LD_INT 1
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 3
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18526: LD_ADDR_VAR 0 16
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 1
18595: NEG
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 2
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 2
18661: NEG
18662: PUSH
18663: LD_INT 2
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 3
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: LD_INT 3
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18719: LD_ADDR_VAR 0 17
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: NEG
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 2
18906: NEG
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: NEG
18919: PUSH
18920: LD_INT 2
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18949: LD_ADDR_VAR 0 18
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: LD_INT 0
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 2
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: NEG
19149: PUSH
19150: LD_INT 2
19152: NEG
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19179: LD_ADDR_VAR 0 19
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 1
19286: NEG
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19409: LD_ADDR_VAR 0 20
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 2
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19639: LD_ADDR_VAR 0 21
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: LD_INT 2
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: NEG
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: NEG
19839: PUSH
19840: LD_INT 2
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19869: LD_ADDR_VAR 0 22
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 2
20056: NEG
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20099: LD_ADDR_VAR 0 23
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: LD_INT 1
20206: NEG
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 2
20310: NEG
20311: PUSH
20312: LD_INT 3
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 3
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20379: LD_ADDR_VAR 0 24
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 3
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 3
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20655: LD_ADDR_VAR 0 25
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: LD_INT 1
20728: NEG
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: NEG
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: NEG
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 2
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 3
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 3
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 3
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20929: LD_ADDR_VAR 0 26
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 2
21116: NEG
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 3
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: NEG
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21205: LD_ADDR_VAR 0 27
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: LD_INT 1
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 3
21438: NEG
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: NEG
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21485: LD_ADDR_VAR 0 28
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: NEG
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: LD_INT 1
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: LD_INT 2
21688: NEG
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 2
21696: NEG
21697: PUSH
21698: LD_INT 3
21700: NEG
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: LD_INT 3
21712: NEG
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 3
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 3
21732: NEG
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21767: LD_ADDR_VAR 0 29
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: LD_INT 1
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 2
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 2
21945: NEG
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: NEG
21958: PUSH
21959: LD_INT 3
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 3
22011: NEG
22012: PUSH
22013: LD_INT 2
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22046: LD_ADDR_VAR 0 30
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 3
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 3
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 3
22289: NEG
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22324: LD_ADDR_VAR 0 31
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: NEG
22514: PUSH
22515: LD_INT 3
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 3
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: LD_INT 3
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 3
22567: NEG
22568: PUSH
22569: LD_INT 2
22571: NEG
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22602: LD_ADDR_VAR 0 32
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 1
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 1
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 3
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 3
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22880: LD_ADDR_VAR 0 33
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 2
23070: NEG
23071: PUSH
23072: LD_INT 3
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 3
23124: NEG
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23159: LD_ADDR_VAR 0 34
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 2
23315: NEG
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: NEG
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: LD_INT 3
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 3
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 3
23404: NEG
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23439: LD_ADDR_VAR 0 35
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23551: LD_ADDR_VAR 0 36
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: NEG
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: LD_INT 2
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23663: LD_ADDR_VAR 0 37
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23775: LD_ADDR_VAR 0 38
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23887: LD_ADDR_VAR 0 39
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23999: LD_ADDR_VAR 0 40
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24111: LD_ADDR_VAR 0 41
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 2
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 3
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: NEG
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 3
24385: NEG
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 3
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 3
24408: NEG
24409: PUSH
24410: LD_INT 2
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 3
24420: NEG
24421: PUSH
24422: LD_INT 3
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24461: LD_ADDR_VAR 0 42
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 2
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: LD_INT 3
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 3
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: LD_INT 3
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 3
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 3
24758: NEG
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 3
24770: NEG
24771: PUSH
24772: LD_INT 3
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24811: LD_ADDR_VAR 0 43
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: NEG
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 3
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 3
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 3
25107: NEG
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 3
25118: NEG
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25159: LD_ADDR_VAR 0 44
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: LD_INT 3
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 3
25433: NEG
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 3
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: LD_INT 3
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25509: LD_ADDR_VAR 0 45
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 3
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 3
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 3
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 3
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 3
25818: NEG
25819: PUSH
25820: LD_INT 3
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25859: LD_ADDR_VAR 0 46
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 3
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 3
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 3
26155: NEG
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26207: LD_ADDR_VAR 0 47
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26358: LD_ADDR_VAR 0 48
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26505: LD_ADDR_VAR 0 49
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26649: LD_ADDR_VAR 0 50
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26793: LD_ADDR_VAR 0 51
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26940: LD_ADDR_VAR 0 52
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 2
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27091: LD_ADDR_VAR 0 53
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 2
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 2
27267: NEG
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27321: LD_ADDR_VAR 0 54
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27551: LD_ADDR_VAR 0 55
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27781: LD_ADDR_VAR 0 56
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28011: LD_ADDR_VAR 0 57
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28241: LD_ADDR_VAR 0 58
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: NEG
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28471: LD_ADDR_VAR 0 59
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28559: LD_ADDR_VAR 0 60
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28647: LD_ADDR_VAR 0 61
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28735: LD_ADDR_VAR 0 62
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: NEG
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28823: LD_ADDR_VAR 0 63
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28911: LD_ADDR_VAR 0 64
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
// end ; 1 :
28999: GO 34896
29001: LD_INT 1
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 31632
29009: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29010: LD_ADDR_VAR 0 11
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: LD_INT 3
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 3
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29054: LD_ADDR_VAR 0 12
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: LIST
29094: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29095: LD_ADDR_VAR 0 13
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29135: LD_ADDR_VAR 0 14
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 3
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29176: LD_ADDR_VAR 0 15
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29220: LD_ADDR_VAR 0 16
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 3
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 3
29239: NEG
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 3
29251: NEG
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29266: LD_ADDR_VAR 0 17
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: LD_INT 3
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 3
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29310: LD_ADDR_VAR 0 18
29314: PUSH
29315: LD_INT 2
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29351: LD_ADDR_VAR 0 19
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 3
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29391: LD_ADDR_VAR 0 20
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 3
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29432: LD_ADDR_VAR 0 21
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29476: LD_ADDR_VAR 0 22
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: LD_INT 3
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 3
29495: NEG
29496: PUSH
29497: LD_INT 2
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 3
29507: NEG
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29522: LD_ADDR_VAR 0 23
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 3
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 4
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29566: LD_ADDR_VAR 0 24
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 4
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29607: LD_ADDR_VAR 0 25
29611: PUSH
29612: LD_INT 3
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: LD_INT 4
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: LIST
29646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29647: LD_ADDR_VAR 0 26
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 4
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29688: LD_ADDR_VAR 0 27
29692: PUSH
29693: LD_INT 3
29695: NEG
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 3
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 4
29717: NEG
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29732: LD_ADDR_VAR 0 28
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: LD_INT 3
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 3
29751: NEG
29752: PUSH
29753: LD_INT 4
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 4
29763: NEG
29764: PUSH
29765: LD_INT 3
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29778: LD_ADDR_VAR 0 29
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 4
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: LD_INT 4
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 5
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 5
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 4
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 6
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 6
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 5
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29933: LD_ADDR_VAR 0 30
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 4
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 4
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 5
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 5
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 5
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 6
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 6
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30076: LD_ADDR_VAR 0 31
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 4
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 4
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: LD_INT 4
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 5
30143: PUSH
30144: LD_INT 4
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: LD_INT 5
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 6
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 6
30183: PUSH
30184: LD_INT 6
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 5
30193: PUSH
30194: LD_INT 6
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30215: LD_ADDR_VAR 0 32
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 4
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 5
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 4
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 6
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: LD_INT 5
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30358: LD_ADDR_VAR 0 33
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: NEG
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 4
30410: NEG
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 4
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 5
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 6
30478: NEG
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 6
30489: NEG
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30513: LD_ADDR_VAR 0 34
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 3
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 3
30532: NEG
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: LD_INT 4
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 4
30568: NEG
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 4
30580: NEG
30581: PUSH
30582: LD_INT 4
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: LD_INT 5
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 5
30604: NEG
30605: PUSH
30606: LD_INT 4
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 5
30616: NEG
30617: PUSH
30618: LD_INT 5
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 5
30628: NEG
30629: PUSH
30630: LD_INT 6
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 6
30640: NEG
30641: PUSH
30642: LD_INT 5
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 6
30652: NEG
30653: PUSH
30654: LD_INT 6
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30676: LD_ADDR_VAR 0 41
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30720: LD_ADDR_VAR 0 42
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30761: LD_ADDR_VAR 0 43
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30801: LD_ADDR_VAR 0 44
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 3
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30842: LD_ADDR_VAR 0 45
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30886: LD_ADDR_VAR 0 46
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 2
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: LD_INT 3
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30932: LD_ADDR_VAR 0 47
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 3
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 3
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30965: LD_ADDR_VAR 0 48
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30996: LD_ADDR_VAR 0 49
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31025: LD_ADDR_VAR 0 50
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31054: LD_ADDR_VAR 0 51
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31085: LD_ADDR_VAR 0 52
31089: PUSH
31090: LD_INT 3
31092: NEG
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31118: LD_ADDR_VAR 0 53
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: LD_INT 3
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 3
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31162: LD_ADDR_VAR 0 54
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31203: LD_ADDR_VAR 0 55
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31243: LD_ADDR_VAR 0 56
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31284: LD_ADDR_VAR 0 57
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31328: LD_ADDR_VAR 0 58
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31374: LD_ADDR_VAR 0 59
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31418: LD_ADDR_VAR 0 60
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31459: LD_ADDR_VAR 0 61
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31499: LD_ADDR_VAR 0 62
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31540: LD_ADDR_VAR 0 63
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31584: LD_ADDR_VAR 0 64
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 2
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// end ; 2 :
31630: GO 34896
31632: LD_INT 2
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 34895
31640: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31641: LD_ADDR_VAR 0 29
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 5
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 5
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 3
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: LD_INT 4
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: LD_INT 3
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 4
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 4
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 5
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: LD_INT 4
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 5
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 3
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 4
31980: NEG
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 4
31991: NEG
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 4
32003: NEG
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 4
32026: NEG
32027: PUSH
32028: LD_INT 4
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 4
32038: NEG
32039: PUSH
32040: LD_INT 5
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: NEG
32051: PUSH
32052: LD_INT 4
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 3
32062: NEG
32063: PUSH
32064: LD_INT 3
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 4
32074: NEG
32075: PUSH
32076: LD_INT 3
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 5
32086: NEG
32087: PUSH
32088: LD_INT 4
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 5
32098: NEG
32099: PUSH
32100: LD_INT 5
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 5
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 5
32122: NEG
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32179: LD_ADDR_VAR 0 30
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 4
32196: PUSH
32197: LD_INT 3
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 5
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: LD_INT 5
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 4
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 5
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: LD_INT 5
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 4
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: LD_INT 4
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 4
32369: NEG
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 5
32425: NEG
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 5
32436: NEG
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 5
32448: NEG
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: LD_INT 2
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 4
32531: NEG
32532: PUSH
32533: LD_INT 3
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 4
32543: NEG
32544: PUSH
32545: LD_INT 4
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 4
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: NEG
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 5
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: LD_INT 4
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 4
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 5
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: LD_INT 5
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32726: LD_ADDR_VAR 0 31
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 4
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 4
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 5
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 5
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 4
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 5
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 4
32882: NEG
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 4
32893: NEG
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 4
32905: NEG
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 4
32940: NEG
32941: PUSH
32942: LD_INT 5
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 3
32964: NEG
32965: PUSH
32966: LD_INT 3
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 5
32988: NEG
32989: PUSH
32990: LD_INT 4
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 5
33000: NEG
33001: PUSH
33002: LD_INT 5
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 5
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 5
33024: NEG
33025: PUSH
33026: LD_INT 3
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 4
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 3
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 4
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: LD_INT 4
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 4
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 5
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 4
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 5
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33276: LD_ADDR_VAR 0 32
33280: PUSH
33281: LD_INT 4
33283: NEG
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 4
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 5
33339: NEG
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 5
33350: NEG
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 5
33362: NEG
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: NEG
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 4
33445: NEG
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: LD_INT 4
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: LD_INT 4
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 4
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 5
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 4
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 4
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: LD_INT 5
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 5
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 3
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 4
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 4
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 4
33688: PUSH
33689: LD_INT 4
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 5
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 5
33718: PUSH
33719: LD_INT 5
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 4
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: LD_INT 5
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33823: LD_ADDR_VAR 0 33
33827: PUSH
33828: LD_INT 4
33830: NEG
33831: PUSH
33832: LD_INT 4
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 4
33842: NEG
33843: PUSH
33844: LD_INT 5
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 3
33854: NEG
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 3
33866: NEG
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 4
33878: NEG
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 5
33890: NEG
33891: PUSH
33892: LD_INT 4
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 5
33902: NEG
33903: PUSH
33904: LD_INT 5
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 3
33914: NEG
33915: PUSH
33916: LD_INT 5
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 5
33926: NEG
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 3
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 4
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: LD_INT 3
33963: NEG
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: LD_INT 3
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: LD_INT 4
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: NEG
34029: PUSH
34030: LD_INT 4
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 4
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 3
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 4
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 4
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 4
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 4
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 4
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: LD_INT 5
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 5
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 4
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 5
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34361: LD_ADDR_VAR 0 34
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 4
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 5
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 4
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 3
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 4
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 5
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 3
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 5
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 4
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 2
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 4
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 5
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: LD_INT 5
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 4
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 5
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 4
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 4
34746: NEG
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 3
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 4
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 5
34802: NEG
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 5
34813: NEG
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: NEG
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: NEG
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// end ; end ;
34893: GO 34896
34895: POP
// case btype of b_depot , b_warehouse :
34896: LD_VAR 0 1
34900: PUSH
34901: LD_INT 0
34903: DOUBLE
34904: EQUAL
34905: IFTRUE 34915
34907: LD_INT 1
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 35116
34915: POP
// case nation of nation_american :
34916: LD_VAR 0 5
34920: PUSH
34921: LD_INT 1
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 34985
34929: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34930: LD_ADDR_VAR 0 9
34934: PUSH
34935: LD_VAR 0 11
34939: PUSH
34940: LD_VAR 0 12
34944: PUSH
34945: LD_VAR 0 13
34949: PUSH
34950: LD_VAR 0 14
34954: PUSH
34955: LD_VAR 0 15
34959: PUSH
34960: LD_VAR 0 16
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: PUSH
34973: LD_VAR 0 4
34977: PUSH
34978: LD_INT 1
34980: PLUS
34981: ARRAY
34982: ST_TO_ADDR
34983: GO 35114
34985: LD_INT 2
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35049
34993: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_VAR 0 17
35003: PUSH
35004: LD_VAR 0 18
35008: PUSH
35009: LD_VAR 0 19
35013: PUSH
35014: LD_VAR 0 20
35018: PUSH
35019: LD_VAR 0 21
35023: PUSH
35024: LD_VAR 0 22
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: PUSH
35037: LD_VAR 0 4
35041: PUSH
35042: LD_INT 1
35044: PLUS
35045: ARRAY
35046: ST_TO_ADDR
35047: GO 35114
35049: LD_INT 3
35051: DOUBLE
35052: EQUAL
35053: IFTRUE 35057
35055: GO 35113
35057: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35058: LD_ADDR_VAR 0 9
35062: PUSH
35063: LD_VAR 0 23
35067: PUSH
35068: LD_VAR 0 24
35072: PUSH
35073: LD_VAR 0 25
35077: PUSH
35078: LD_VAR 0 26
35082: PUSH
35083: LD_VAR 0 27
35087: PUSH
35088: LD_VAR 0 28
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: PUSH
35101: LD_VAR 0 4
35105: PUSH
35106: LD_INT 1
35108: PLUS
35109: ARRAY
35110: ST_TO_ADDR
35111: GO 35114
35113: POP
35114: GO 35669
35116: LD_INT 2
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35130
35122: LD_INT 3
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35130
35128: GO 35186
35130: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35131: LD_ADDR_VAR 0 9
35135: PUSH
35136: LD_VAR 0 29
35140: PUSH
35141: LD_VAR 0 30
35145: PUSH
35146: LD_VAR 0 31
35150: PUSH
35151: LD_VAR 0 32
35155: PUSH
35156: LD_VAR 0 33
35160: PUSH
35161: LD_VAR 0 34
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: PUSH
35174: LD_VAR 0 4
35178: PUSH
35179: LD_INT 1
35181: PLUS
35182: ARRAY
35183: ST_TO_ADDR
35184: GO 35669
35186: LD_INT 16
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35248
35192: LD_INT 17
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35248
35198: LD_INT 18
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35248
35204: LD_INT 19
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35248
35210: LD_INT 22
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35248
35216: LD_INT 20
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35248
35222: LD_INT 21
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35248
35228: LD_INT 23
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35248
35234: LD_INT 24
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35248
35240: LD_INT 25
35242: DOUBLE
35243: EQUAL
35244: IFTRUE 35248
35246: GO 35304
35248: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_VAR 0 35
35258: PUSH
35259: LD_VAR 0 36
35263: PUSH
35264: LD_VAR 0 37
35268: PUSH
35269: LD_VAR 0 38
35273: PUSH
35274: LD_VAR 0 39
35278: PUSH
35279: LD_VAR 0 40
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: PUSH
35292: LD_VAR 0 4
35296: PUSH
35297: LD_INT 1
35299: PLUS
35300: ARRAY
35301: ST_TO_ADDR
35302: GO 35669
35304: LD_INT 6
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35360
35310: LD_INT 7
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35360
35316: LD_INT 8
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35360
35322: LD_INT 13
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35360
35328: LD_INT 12
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35360
35334: LD_INT 15
35336: DOUBLE
35337: EQUAL
35338: IFTRUE 35360
35340: LD_INT 11
35342: DOUBLE
35343: EQUAL
35344: IFTRUE 35360
35346: LD_INT 14
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35360
35352: LD_INT 10
35354: DOUBLE
35355: EQUAL
35356: IFTRUE 35360
35358: GO 35416
35360: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35361: LD_ADDR_VAR 0 9
35365: PUSH
35366: LD_VAR 0 41
35370: PUSH
35371: LD_VAR 0 42
35375: PUSH
35376: LD_VAR 0 43
35380: PUSH
35381: LD_VAR 0 44
35385: PUSH
35386: LD_VAR 0 45
35390: PUSH
35391: LD_VAR 0 46
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: LD_VAR 0 4
35408: PUSH
35409: LD_INT 1
35411: PLUS
35412: ARRAY
35413: ST_TO_ADDR
35414: GO 35669
35416: LD_INT 36
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35480
35424: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35425: LD_ADDR_VAR 0 9
35429: PUSH
35430: LD_VAR 0 47
35434: PUSH
35435: LD_VAR 0 48
35439: PUSH
35440: LD_VAR 0 49
35444: PUSH
35445: LD_VAR 0 50
35449: PUSH
35450: LD_VAR 0 51
35454: PUSH
35455: LD_VAR 0 52
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: PUSH
35468: LD_VAR 0 4
35472: PUSH
35473: LD_INT 1
35475: PLUS
35476: ARRAY
35477: ST_TO_ADDR
35478: GO 35669
35480: LD_INT 4
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35506
35486: LD_INT 5
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35506
35492: LD_INT 34
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35506
35498: LD_INT 37
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35562
35506: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_VAR 0 53
35516: PUSH
35517: LD_VAR 0 54
35521: PUSH
35522: LD_VAR 0 55
35526: PUSH
35527: LD_VAR 0 56
35531: PUSH
35532: LD_VAR 0 57
35536: PUSH
35537: LD_VAR 0 58
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: PUSH
35550: LD_VAR 0 4
35554: PUSH
35555: LD_INT 1
35557: PLUS
35558: ARRAY
35559: ST_TO_ADDR
35560: GO 35669
35562: LD_INT 31
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35612
35568: LD_INT 32
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35612
35574: LD_INT 33
35576: DOUBLE
35577: EQUAL
35578: IFTRUE 35612
35580: LD_INT 27
35582: DOUBLE
35583: EQUAL
35584: IFTRUE 35612
35586: LD_INT 26
35588: DOUBLE
35589: EQUAL
35590: IFTRUE 35612
35592: LD_INT 28
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35612
35598: LD_INT 29
35600: DOUBLE
35601: EQUAL
35602: IFTRUE 35612
35604: LD_INT 30
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35612
35610: GO 35668
35612: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35613: LD_ADDR_VAR 0 9
35617: PUSH
35618: LD_VAR 0 59
35622: PUSH
35623: LD_VAR 0 60
35627: PUSH
35628: LD_VAR 0 61
35632: PUSH
35633: LD_VAR 0 62
35637: PUSH
35638: LD_VAR 0 63
35642: PUSH
35643: LD_VAR 0 64
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: PUSH
35656: LD_VAR 0 4
35660: PUSH
35661: LD_INT 1
35663: PLUS
35664: ARRAY
35665: ST_TO_ADDR
35666: GO 35669
35668: POP
// temp_list2 = [ ] ;
35669: LD_ADDR_VAR 0 10
35673: PUSH
35674: EMPTY
35675: ST_TO_ADDR
// for i in temp_list do
35676: LD_ADDR_VAR 0 8
35680: PUSH
35681: LD_VAR 0 9
35685: PUSH
35686: FOR_IN
35687: IFFALSE 35739
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35689: LD_ADDR_VAR 0 10
35693: PUSH
35694: LD_VAR 0 10
35698: PUSH
35699: LD_VAR 0 8
35703: PUSH
35704: LD_INT 1
35706: ARRAY
35707: PUSH
35708: LD_VAR 0 2
35712: PLUS
35713: PUSH
35714: LD_VAR 0 8
35718: PUSH
35719: LD_INT 2
35721: ARRAY
35722: PUSH
35723: LD_VAR 0 3
35727: PLUS
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: ADD
35736: ST_TO_ADDR
35737: GO 35686
35739: POP
35740: POP
// result = temp_list2 ;
35741: LD_ADDR_VAR 0 7
35745: PUSH
35746: LD_VAR 0 10
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 7
35755: RET
// export function EnemyInRange ( unit , dist ) ; begin
35756: LD_INT 0
35758: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35759: LD_ADDR_VAR 0 3
35763: PUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 255
35773: PPUSH
35774: LD_VAR 0 1
35778: PPUSH
35779: CALL_OW 250
35783: PPUSH
35784: LD_VAR 0 1
35788: PPUSH
35789: CALL_OW 251
35793: PPUSH
35794: LD_VAR 0 2
35798: PPUSH
35799: CALL 9129 0 4
35803: PUSH
35804: LD_INT 4
35806: ARRAY
35807: ST_TO_ADDR
// end ;
35808: LD_VAR 0 3
35812: RET
// export function PlayerSeeMe ( unit ) ; begin
35813: LD_INT 0
35815: PPUSH
// result := See ( your_side , unit ) ;
35816: LD_ADDR_VAR 0 2
35820: PUSH
35821: LD_OWVAR 2
35825: PPUSH
35826: LD_VAR 0 1
35830: PPUSH
35831: CALL_OW 292
35835: ST_TO_ADDR
// end ;
35836: LD_VAR 0 2
35840: RET
// export function ReverseDir ( unit ) ; begin
35841: LD_INT 0
35843: PPUSH
// if not unit then
35844: LD_VAR 0 1
35848: NOT
35849: IFFALSE 35853
// exit ;
35851: GO 35876
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35853: LD_ADDR_VAR 0 2
35857: PUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 254
35867: PUSH
35868: LD_INT 3
35870: PLUS
35871: PUSH
35872: LD_INT 6
35874: MOD
35875: ST_TO_ADDR
// end ;
35876: LD_VAR 0 2
35880: RET
// export function ReverseArray ( array ) ; var i ; begin
35881: LD_INT 0
35883: PPUSH
35884: PPUSH
// if not array then
35885: LD_VAR 0 1
35889: NOT
35890: IFFALSE 35894
// exit ;
35892: GO 35949
// result := [ ] ;
35894: LD_ADDR_VAR 0 2
35898: PUSH
35899: EMPTY
35900: ST_TO_ADDR
// for i := array downto 1 do
35901: LD_ADDR_VAR 0 3
35905: PUSH
35906: DOUBLE
35907: LD_VAR 0 1
35911: INC
35912: ST_TO_ADDR
35913: LD_INT 1
35915: PUSH
35916: FOR_DOWNTO
35917: IFFALSE 35947
// result := Join ( result , array [ i ] ) ;
35919: LD_ADDR_VAR 0 2
35923: PUSH
35924: LD_VAR 0 2
35928: PPUSH
35929: LD_VAR 0 1
35933: PUSH
35934: LD_VAR 0 3
35938: ARRAY
35939: PPUSH
35940: CALL 40614 0 2
35944: ST_TO_ADDR
35945: GO 35916
35947: POP
35948: POP
// end ;
35949: LD_VAR 0 2
35953: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35954: LD_INT 0
35956: PPUSH
35957: PPUSH
35958: PPUSH
35959: PPUSH
35960: PPUSH
35961: PPUSH
// if not unit or not hexes then
35962: LD_VAR 0 1
35966: NOT
35967: PUSH
35968: LD_VAR 0 2
35972: NOT
35973: OR
35974: IFFALSE 35978
// exit ;
35976: GO 36101
// dist := 9999 ;
35978: LD_ADDR_VAR 0 5
35982: PUSH
35983: LD_INT 9999
35985: ST_TO_ADDR
// for i = 1 to hexes do
35986: LD_ADDR_VAR 0 4
35990: PUSH
35991: DOUBLE
35992: LD_INT 1
35994: DEC
35995: ST_TO_ADDR
35996: LD_VAR 0 2
36000: PUSH
36001: FOR_TO
36002: IFFALSE 36089
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36004: LD_ADDR_VAR 0 6
36008: PUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_VAR 0 2
36018: PUSH
36019: LD_VAR 0 4
36023: ARRAY
36024: PUSH
36025: LD_INT 1
36027: ARRAY
36028: PPUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_VAR 0 4
36038: ARRAY
36039: PUSH
36040: LD_INT 2
36042: ARRAY
36043: PPUSH
36044: CALL_OW 297
36048: ST_TO_ADDR
// if tdist < dist then
36049: LD_VAR 0 6
36053: PUSH
36054: LD_VAR 0 5
36058: LESS
36059: IFFALSE 36087
// begin hex := hexes [ i ] ;
36061: LD_ADDR_VAR 0 8
36065: PUSH
36066: LD_VAR 0 2
36070: PUSH
36071: LD_VAR 0 4
36075: ARRAY
36076: ST_TO_ADDR
// dist := tdist ;
36077: LD_ADDR_VAR 0 5
36081: PUSH
36082: LD_VAR 0 6
36086: ST_TO_ADDR
// end ; end ;
36087: GO 36001
36089: POP
36090: POP
// result := hex ;
36091: LD_ADDR_VAR 0 3
36095: PUSH
36096: LD_VAR 0 8
36100: ST_TO_ADDR
// end ;
36101: LD_VAR 0 3
36105: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36106: LD_INT 0
36108: PPUSH
36109: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36110: LD_VAR 0 1
36114: NOT
36115: PUSH
36116: LD_VAR 0 1
36120: PUSH
36121: LD_INT 21
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 23
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PPUSH
36145: CALL_OW 69
36149: IN
36150: NOT
36151: OR
36152: IFFALSE 36156
// exit ;
36154: GO 36203
// for i = 1 to 3 do
36156: LD_ADDR_VAR 0 3
36160: PUSH
36161: DOUBLE
36162: LD_INT 1
36164: DEC
36165: ST_TO_ADDR
36166: LD_INT 3
36168: PUSH
36169: FOR_TO
36170: IFFALSE 36201
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: CALL_OW 250
36181: PPUSH
36182: LD_VAR 0 1
36186: PPUSH
36187: CALL_OW 251
36191: PPUSH
36192: LD_INT 1
36194: PPUSH
36195: CALL_OW 453
36199: GO 36169
36201: POP
36202: POP
// end ;
36203: LD_VAR 0 2
36207: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36208: LD_INT 0
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
// if not unit or not enemy_unit then
36216: LD_VAR 0 1
36220: NOT
36221: PUSH
36222: LD_VAR 0 2
36226: NOT
36227: OR
36228: IFFALSE 36232
// exit ;
36230: GO 36699
// if GetLives ( i ) < 250 then
36232: LD_VAR 0 4
36236: PPUSH
36237: CALL_OW 256
36241: PUSH
36242: LD_INT 250
36244: LESS
36245: IFFALSE 36258
// begin ComAutodestruct ( i ) ;
36247: LD_VAR 0 4
36251: PPUSH
36252: CALL 36106 0 1
// exit ;
36256: GO 36699
// end ; x := GetX ( enemy_unit ) ;
36258: LD_ADDR_VAR 0 7
36262: PUSH
36263: LD_VAR 0 2
36267: PPUSH
36268: CALL_OW 250
36272: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36273: LD_ADDR_VAR 0 8
36277: PUSH
36278: LD_VAR 0 2
36282: PPUSH
36283: CALL_OW 251
36287: ST_TO_ADDR
// if not x or not y then
36288: LD_VAR 0 7
36292: NOT
36293: PUSH
36294: LD_VAR 0 8
36298: NOT
36299: OR
36300: IFFALSE 36304
// exit ;
36302: GO 36699
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36304: LD_ADDR_VAR 0 6
36308: PUSH
36309: LD_VAR 0 7
36313: PPUSH
36314: LD_INT 0
36316: PPUSH
36317: LD_INT 4
36319: PPUSH
36320: CALL_OW 272
36324: PUSH
36325: LD_VAR 0 8
36329: PPUSH
36330: LD_INT 0
36332: PPUSH
36333: LD_INT 4
36335: PPUSH
36336: CALL_OW 273
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_VAR 0 7
36349: PPUSH
36350: LD_INT 1
36352: PPUSH
36353: LD_INT 4
36355: PPUSH
36356: CALL_OW 272
36360: PUSH
36361: LD_VAR 0 8
36365: PPUSH
36366: LD_INT 1
36368: PPUSH
36369: LD_INT 4
36371: PPUSH
36372: CALL_OW 273
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_VAR 0 7
36385: PPUSH
36386: LD_INT 2
36388: PPUSH
36389: LD_INT 4
36391: PPUSH
36392: CALL_OW 272
36396: PUSH
36397: LD_VAR 0 8
36401: PPUSH
36402: LD_INT 2
36404: PPUSH
36405: LD_INT 4
36407: PPUSH
36408: CALL_OW 273
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_VAR 0 7
36421: PPUSH
36422: LD_INT 3
36424: PPUSH
36425: LD_INT 4
36427: PPUSH
36428: CALL_OW 272
36432: PUSH
36433: LD_VAR 0 8
36437: PPUSH
36438: LD_INT 3
36440: PPUSH
36441: LD_INT 4
36443: PPUSH
36444: CALL_OW 273
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_VAR 0 7
36457: PPUSH
36458: LD_INT 4
36460: PPUSH
36461: LD_INT 4
36463: PPUSH
36464: CALL_OW 272
36468: PUSH
36469: LD_VAR 0 8
36473: PPUSH
36474: LD_INT 4
36476: PPUSH
36477: LD_INT 4
36479: PPUSH
36480: CALL_OW 273
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_VAR 0 7
36493: PPUSH
36494: LD_INT 5
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: CALL_OW 272
36504: PUSH
36505: LD_VAR 0 8
36509: PPUSH
36510: LD_INT 5
36512: PPUSH
36513: LD_INT 4
36515: PPUSH
36516: CALL_OW 273
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// for i = tmp downto 1 do
36533: LD_ADDR_VAR 0 4
36537: PUSH
36538: DOUBLE
36539: LD_VAR 0 6
36543: INC
36544: ST_TO_ADDR
36545: LD_INT 1
36547: PUSH
36548: FOR_DOWNTO
36549: IFFALSE 36650
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36551: LD_VAR 0 6
36555: PUSH
36556: LD_VAR 0 4
36560: ARRAY
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: LD_VAR 0 6
36570: PUSH
36571: LD_VAR 0 4
36575: ARRAY
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: PPUSH
36581: CALL_OW 488
36585: NOT
36586: PUSH
36587: LD_VAR 0 6
36591: PUSH
36592: LD_VAR 0 4
36596: ARRAY
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: LD_VAR 0 6
36606: PUSH
36607: LD_VAR 0 4
36611: ARRAY
36612: PUSH
36613: LD_INT 2
36615: ARRAY
36616: PPUSH
36617: CALL_OW 428
36621: PUSH
36622: LD_INT 0
36624: NONEQUAL
36625: OR
36626: IFFALSE 36648
// tmp := Delete ( tmp , i ) ;
36628: LD_ADDR_VAR 0 6
36632: PUSH
36633: LD_VAR 0 6
36637: PPUSH
36638: LD_VAR 0 4
36642: PPUSH
36643: CALL_OW 3
36647: ST_TO_ADDR
36648: GO 36548
36650: POP
36651: POP
// j := GetClosestHex ( unit , tmp ) ;
36652: LD_ADDR_VAR 0 5
36656: PUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: LD_VAR 0 6
36666: PPUSH
36667: CALL 35954 0 2
36671: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36672: LD_VAR 0 1
36676: PPUSH
36677: LD_VAR 0 5
36681: PUSH
36682: LD_INT 1
36684: ARRAY
36685: PPUSH
36686: LD_VAR 0 5
36690: PUSH
36691: LD_INT 2
36693: ARRAY
36694: PPUSH
36695: CALL_OW 111
// end ;
36699: LD_VAR 0 3
36703: RET
// export function PrepareApemanSoldier ( ) ; begin
36704: LD_INT 0
36706: PPUSH
// uc_nation := 0 ;
36707: LD_ADDR_OWVAR 21
36711: PUSH
36712: LD_INT 0
36714: ST_TO_ADDR
// hc_sex := sex_male ;
36715: LD_ADDR_OWVAR 27
36719: PUSH
36720: LD_INT 1
36722: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36723: LD_ADDR_OWVAR 28
36727: PUSH
36728: LD_INT 15
36730: ST_TO_ADDR
// hc_gallery :=  ;
36731: LD_ADDR_OWVAR 33
36735: PUSH
36736: LD_STRING 
36738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36739: LD_ADDR_OWVAR 31
36743: PUSH
36744: LD_INT 0
36746: PPUSH
36747: LD_INT 3
36749: PPUSH
36750: CALL_OW 12
36754: PUSH
36755: LD_INT 0
36757: PPUSH
36758: LD_INT 3
36760: PPUSH
36761: CALL_OW 12
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: ST_TO_ADDR
// end ;
36778: LD_VAR 0 1
36782: RET
// export function PrepareApemanEngineer ( ) ; begin
36783: LD_INT 0
36785: PPUSH
// uc_nation := 0 ;
36786: LD_ADDR_OWVAR 21
36790: PUSH
36791: LD_INT 0
36793: ST_TO_ADDR
// hc_sex := sex_male ;
36794: LD_ADDR_OWVAR 27
36798: PUSH
36799: LD_INT 1
36801: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36802: LD_ADDR_OWVAR 28
36806: PUSH
36807: LD_INT 16
36809: ST_TO_ADDR
// hc_gallery :=  ;
36810: LD_ADDR_OWVAR 33
36814: PUSH
36815: LD_STRING 
36817: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36818: LD_ADDR_OWVAR 31
36822: PUSH
36823: LD_INT 0
36825: PPUSH
36826: LD_INT 3
36828: PPUSH
36829: CALL_OW 12
36833: PUSH
36834: LD_INT 0
36836: PPUSH
36837: LD_INT 3
36839: PPUSH
36840: CALL_OW 12
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// end ;
36857: LD_VAR 0 1
36861: RET
// export function PrepareApeman ( agressivity ) ; begin
36862: LD_INT 0
36864: PPUSH
// uc_side := 0 ;
36865: LD_ADDR_OWVAR 20
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
// uc_nation := 0 ;
36873: LD_ADDR_OWVAR 21
36877: PUSH
36878: LD_INT 0
36880: ST_TO_ADDR
// hc_sex := sex_male ;
36881: LD_ADDR_OWVAR 27
36885: PUSH
36886: LD_INT 1
36888: ST_TO_ADDR
// hc_class := class_apeman ;
36889: LD_ADDR_OWVAR 28
36893: PUSH
36894: LD_INT 12
36896: ST_TO_ADDR
// hc_gallery :=  ;
36897: LD_ADDR_OWVAR 33
36901: PUSH
36902: LD_STRING 
36904: ST_TO_ADDR
// if agressivity = 0 then
36905: LD_VAR 0 1
36909: PUSH
36910: LD_INT 0
36912: EQUAL
36913: IFFALSE 36925
// hc_agressivity := 0 else
36915: LD_ADDR_OWVAR 35
36919: PUSH
36920: LD_INT 0
36922: ST_TO_ADDR
36923: GO 36946
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36925: LD_ADDR_OWVAR 35
36929: PUSH
36930: LD_VAR 0 1
36934: NEG
36935: PPUSH
36936: LD_VAR 0 1
36940: PPUSH
36941: CALL_OW 12
36945: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36946: LD_ADDR_OWVAR 31
36950: PUSH
36951: LD_INT 0
36953: PPUSH
36954: LD_INT 3
36956: PPUSH
36957: CALL_OW 12
36961: PUSH
36962: LD_INT 0
36964: PPUSH
36965: LD_INT 3
36967: PPUSH
36968: CALL_OW 12
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// end ;
36985: LD_VAR 0 2
36989: RET
// export function PrepareTiger ( agressivity ) ; begin
36990: LD_INT 0
36992: PPUSH
// uc_side := 0 ;
36993: LD_ADDR_OWVAR 20
36997: PUSH
36998: LD_INT 0
37000: ST_TO_ADDR
// uc_nation := 0 ;
37001: LD_ADDR_OWVAR 21
37005: PUSH
37006: LD_INT 0
37008: ST_TO_ADDR
// hc_class := class_tiger ;
37009: LD_ADDR_OWVAR 28
37013: PUSH
37014: LD_INT 14
37016: ST_TO_ADDR
// hc_gallery :=  ;
37017: LD_ADDR_OWVAR 33
37021: PUSH
37022: LD_STRING 
37024: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37025: LD_ADDR_OWVAR 35
37029: PUSH
37030: LD_VAR 0 1
37034: NEG
37035: PPUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 12
37045: ST_TO_ADDR
// end ;
37046: LD_VAR 0 2
37050: RET
// export function PrepareEnchidna ( ) ; begin
37051: LD_INT 0
37053: PPUSH
// uc_side := 0 ;
37054: LD_ADDR_OWVAR 20
37058: PUSH
37059: LD_INT 0
37061: ST_TO_ADDR
// uc_nation := 0 ;
37062: LD_ADDR_OWVAR 21
37066: PUSH
37067: LD_INT 0
37069: ST_TO_ADDR
// hc_class := class_baggie ;
37070: LD_ADDR_OWVAR 28
37074: PUSH
37075: LD_INT 13
37077: ST_TO_ADDR
// hc_gallery :=  ;
37078: LD_ADDR_OWVAR 33
37082: PUSH
37083: LD_STRING 
37085: ST_TO_ADDR
// end ;
37086: LD_VAR 0 1
37090: RET
// export function PrepareFrog ( ) ; begin
37091: LD_INT 0
37093: PPUSH
// uc_side := 0 ;
37094: LD_ADDR_OWVAR 20
37098: PUSH
37099: LD_INT 0
37101: ST_TO_ADDR
// uc_nation := 0 ;
37102: LD_ADDR_OWVAR 21
37106: PUSH
37107: LD_INT 0
37109: ST_TO_ADDR
// hc_class := class_frog ;
37110: LD_ADDR_OWVAR 28
37114: PUSH
37115: LD_INT 19
37117: ST_TO_ADDR
// hc_gallery :=  ;
37118: LD_ADDR_OWVAR 33
37122: PUSH
37123: LD_STRING 
37125: ST_TO_ADDR
// end ;
37126: LD_VAR 0 1
37130: RET
// export function PrepareFish ( ) ; begin
37131: LD_INT 0
37133: PPUSH
// uc_side := 0 ;
37134: LD_ADDR_OWVAR 20
37138: PUSH
37139: LD_INT 0
37141: ST_TO_ADDR
// uc_nation := 0 ;
37142: LD_ADDR_OWVAR 21
37146: PUSH
37147: LD_INT 0
37149: ST_TO_ADDR
// hc_class := class_fish ;
37150: LD_ADDR_OWVAR 28
37154: PUSH
37155: LD_INT 20
37157: ST_TO_ADDR
// hc_gallery :=  ;
37158: LD_ADDR_OWVAR 33
37162: PUSH
37163: LD_STRING 
37165: ST_TO_ADDR
// end ;
37166: LD_VAR 0 1
37170: RET
// export function PrepareBird ( ) ; begin
37171: LD_INT 0
37173: PPUSH
// uc_side := 0 ;
37174: LD_ADDR_OWVAR 20
37178: PUSH
37179: LD_INT 0
37181: ST_TO_ADDR
// uc_nation := 0 ;
37182: LD_ADDR_OWVAR 21
37186: PUSH
37187: LD_INT 0
37189: ST_TO_ADDR
// hc_class := class_phororhacos ;
37190: LD_ADDR_OWVAR 28
37194: PUSH
37195: LD_INT 18
37197: ST_TO_ADDR
// hc_gallery :=  ;
37198: LD_ADDR_OWVAR 33
37202: PUSH
37203: LD_STRING 
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 1
37210: RET
// export function PrepareHorse ( ) ; begin
37211: LD_INT 0
37213: PPUSH
// uc_side := 0 ;
37214: LD_ADDR_OWVAR 20
37218: PUSH
37219: LD_INT 0
37221: ST_TO_ADDR
// uc_nation := 0 ;
37222: LD_ADDR_OWVAR 21
37226: PUSH
37227: LD_INT 0
37229: ST_TO_ADDR
// hc_class := class_horse ;
37230: LD_ADDR_OWVAR 28
37234: PUSH
37235: LD_INT 21
37237: ST_TO_ADDR
// hc_gallery :=  ;
37238: LD_ADDR_OWVAR 33
37242: PUSH
37243: LD_STRING 
37245: ST_TO_ADDR
// end ;
37246: LD_VAR 0 1
37250: RET
// export function PrepareMastodont ( ) ; begin
37251: LD_INT 0
37253: PPUSH
// uc_side := 0 ;
37254: LD_ADDR_OWVAR 20
37258: PUSH
37259: LD_INT 0
37261: ST_TO_ADDR
// uc_nation := 0 ;
37262: LD_ADDR_OWVAR 21
37266: PUSH
37267: LD_INT 0
37269: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37270: LD_ADDR_OWVAR 37
37274: PUSH
37275: LD_INT 31
37277: ST_TO_ADDR
// vc_control := control_rider ;
37278: LD_ADDR_OWVAR 38
37282: PUSH
37283: LD_INT 4
37285: ST_TO_ADDR
// end ;
37286: LD_VAR 0 1
37290: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37291: LD_INT 0
37293: PPUSH
37294: PPUSH
37295: PPUSH
// uc_side = 0 ;
37296: LD_ADDR_OWVAR 20
37300: PUSH
37301: LD_INT 0
37303: ST_TO_ADDR
// uc_nation = 0 ;
37304: LD_ADDR_OWVAR 21
37308: PUSH
37309: LD_INT 0
37311: ST_TO_ADDR
// InitHc_All ( ) ;
37312: CALL_OW 584
// InitVc ;
37316: CALL_OW 20
// if mastodonts then
37320: LD_VAR 0 6
37324: IFFALSE 37391
// for i = 1 to mastodonts do
37326: LD_ADDR_VAR 0 11
37330: PUSH
37331: DOUBLE
37332: LD_INT 1
37334: DEC
37335: ST_TO_ADDR
37336: LD_VAR 0 6
37340: PUSH
37341: FOR_TO
37342: IFFALSE 37389
// begin vc_chassis := 31 ;
37344: LD_ADDR_OWVAR 37
37348: PUSH
37349: LD_INT 31
37351: ST_TO_ADDR
// vc_control := control_rider ;
37352: LD_ADDR_OWVAR 38
37356: PUSH
37357: LD_INT 4
37359: ST_TO_ADDR
// animal := CreateVehicle ;
37360: LD_ADDR_VAR 0 12
37364: PUSH
37365: CALL_OW 45
37369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37370: LD_VAR 0 12
37374: PPUSH
37375: LD_VAR 0 8
37379: PPUSH
37380: LD_INT 0
37382: PPUSH
37383: CALL 39519 0 3
// end ;
37387: GO 37341
37389: POP
37390: POP
// if horses then
37391: LD_VAR 0 5
37395: IFFALSE 37462
// for i = 1 to horses do
37397: LD_ADDR_VAR 0 11
37401: PUSH
37402: DOUBLE
37403: LD_INT 1
37405: DEC
37406: ST_TO_ADDR
37407: LD_VAR 0 5
37411: PUSH
37412: FOR_TO
37413: IFFALSE 37460
// begin hc_class := 21 ;
37415: LD_ADDR_OWVAR 28
37419: PUSH
37420: LD_INT 21
37422: ST_TO_ADDR
// hc_gallery :=  ;
37423: LD_ADDR_OWVAR 33
37427: PUSH
37428: LD_STRING 
37430: ST_TO_ADDR
// animal := CreateHuman ;
37431: LD_ADDR_VAR 0 12
37435: PUSH
37436: CALL_OW 44
37440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37441: LD_VAR 0 12
37445: PPUSH
37446: LD_VAR 0 8
37450: PPUSH
37451: LD_INT 0
37453: PPUSH
37454: CALL 39519 0 3
// end ;
37458: GO 37412
37460: POP
37461: POP
// if birds then
37462: LD_VAR 0 1
37466: IFFALSE 37533
// for i = 1 to birds do
37468: LD_ADDR_VAR 0 11
37472: PUSH
37473: DOUBLE
37474: LD_INT 1
37476: DEC
37477: ST_TO_ADDR
37478: LD_VAR 0 1
37482: PUSH
37483: FOR_TO
37484: IFFALSE 37531
// begin hc_class := 18 ;
37486: LD_ADDR_OWVAR 28
37490: PUSH
37491: LD_INT 18
37493: ST_TO_ADDR
// hc_gallery =  ;
37494: LD_ADDR_OWVAR 33
37498: PUSH
37499: LD_STRING 
37501: ST_TO_ADDR
// animal := CreateHuman ;
37502: LD_ADDR_VAR 0 12
37506: PUSH
37507: CALL_OW 44
37511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37512: LD_VAR 0 12
37516: PPUSH
37517: LD_VAR 0 8
37521: PPUSH
37522: LD_INT 0
37524: PPUSH
37525: CALL 39519 0 3
// end ;
37529: GO 37483
37531: POP
37532: POP
// if tigers then
37533: LD_VAR 0 2
37537: IFFALSE 37621
// for i = 1 to tigers do
37539: LD_ADDR_VAR 0 11
37543: PUSH
37544: DOUBLE
37545: LD_INT 1
37547: DEC
37548: ST_TO_ADDR
37549: LD_VAR 0 2
37553: PUSH
37554: FOR_TO
37555: IFFALSE 37619
// begin hc_class = class_tiger ;
37557: LD_ADDR_OWVAR 28
37561: PUSH
37562: LD_INT 14
37564: ST_TO_ADDR
// hc_gallery =  ;
37565: LD_ADDR_OWVAR 33
37569: PUSH
37570: LD_STRING 
37572: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37573: LD_ADDR_OWVAR 35
37577: PUSH
37578: LD_INT 7
37580: NEG
37581: PPUSH
37582: LD_INT 7
37584: PPUSH
37585: CALL_OW 12
37589: ST_TO_ADDR
// animal := CreateHuman ;
37590: LD_ADDR_VAR 0 12
37594: PUSH
37595: CALL_OW 44
37599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37600: LD_VAR 0 12
37604: PPUSH
37605: LD_VAR 0 8
37609: PPUSH
37610: LD_INT 0
37612: PPUSH
37613: CALL 39519 0 3
// end ;
37617: GO 37554
37619: POP
37620: POP
// if apemans then
37621: LD_VAR 0 3
37625: IFFALSE 37748
// for i = 1 to apemans do
37627: LD_ADDR_VAR 0 11
37631: PUSH
37632: DOUBLE
37633: LD_INT 1
37635: DEC
37636: ST_TO_ADDR
37637: LD_VAR 0 3
37641: PUSH
37642: FOR_TO
37643: IFFALSE 37746
// begin hc_class = class_apeman ;
37645: LD_ADDR_OWVAR 28
37649: PUSH
37650: LD_INT 12
37652: ST_TO_ADDR
// hc_gallery =  ;
37653: LD_ADDR_OWVAR 33
37657: PUSH
37658: LD_STRING 
37660: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37661: LD_ADDR_OWVAR 35
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PPUSH
37670: LD_INT 2
37672: PPUSH
37673: CALL_OW 12
37677: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37678: LD_ADDR_OWVAR 31
37682: PUSH
37683: LD_INT 1
37685: PPUSH
37686: LD_INT 3
37688: PPUSH
37689: CALL_OW 12
37693: PUSH
37694: LD_INT 1
37696: PPUSH
37697: LD_INT 3
37699: PPUSH
37700: CALL_OW 12
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// animal := CreateHuman ;
37717: LD_ADDR_VAR 0 12
37721: PUSH
37722: CALL_OW 44
37726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37727: LD_VAR 0 12
37731: PPUSH
37732: LD_VAR 0 8
37736: PPUSH
37737: LD_INT 0
37739: PPUSH
37740: CALL 39519 0 3
// end ;
37744: GO 37642
37746: POP
37747: POP
// if enchidnas then
37748: LD_VAR 0 4
37752: IFFALSE 37819
// for i = 1 to enchidnas do
37754: LD_ADDR_VAR 0 11
37758: PUSH
37759: DOUBLE
37760: LD_INT 1
37762: DEC
37763: ST_TO_ADDR
37764: LD_VAR 0 4
37768: PUSH
37769: FOR_TO
37770: IFFALSE 37817
// begin hc_class = 13 ;
37772: LD_ADDR_OWVAR 28
37776: PUSH
37777: LD_INT 13
37779: ST_TO_ADDR
// hc_gallery =  ;
37780: LD_ADDR_OWVAR 33
37784: PUSH
37785: LD_STRING 
37787: ST_TO_ADDR
// animal := CreateHuman ;
37788: LD_ADDR_VAR 0 12
37792: PUSH
37793: CALL_OW 44
37797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37798: LD_VAR 0 12
37802: PPUSH
37803: LD_VAR 0 8
37807: PPUSH
37808: LD_INT 0
37810: PPUSH
37811: CALL 39519 0 3
// end ;
37815: GO 37769
37817: POP
37818: POP
// if fishes then
37819: LD_VAR 0 7
37823: IFFALSE 37890
// for i = 1 to fishes do
37825: LD_ADDR_VAR 0 11
37829: PUSH
37830: DOUBLE
37831: LD_INT 1
37833: DEC
37834: ST_TO_ADDR
37835: LD_VAR 0 7
37839: PUSH
37840: FOR_TO
37841: IFFALSE 37888
// begin hc_class = 20 ;
37843: LD_ADDR_OWVAR 28
37847: PUSH
37848: LD_INT 20
37850: ST_TO_ADDR
// hc_gallery =  ;
37851: LD_ADDR_OWVAR 33
37855: PUSH
37856: LD_STRING 
37858: ST_TO_ADDR
// animal := CreateHuman ;
37859: LD_ADDR_VAR 0 12
37863: PUSH
37864: CALL_OW 44
37868: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37869: LD_VAR 0 12
37873: PPUSH
37874: LD_VAR 0 9
37878: PPUSH
37879: LD_INT 0
37881: PPUSH
37882: CALL 39519 0 3
// end ;
37886: GO 37840
37888: POP
37889: POP
// end ;
37890: LD_VAR 0 10
37894: RET
// export function WantHeal ( sci , unit ) ; begin
37895: LD_INT 0
37897: PPUSH
// if GetTaskList ( sci ) > 0 then
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 437
37907: PUSH
37908: LD_INT 0
37910: GREATER
37911: IFFALSE 37981
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 437
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PUSH
37927: LD_INT 1
37929: ARRAY
37930: PUSH
37931: LD_STRING l
37933: EQUAL
37934: PUSH
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 437
37944: PUSH
37945: LD_INT 1
37947: ARRAY
37948: PUSH
37949: LD_INT 4
37951: ARRAY
37952: PUSH
37953: LD_VAR 0 2
37957: EQUAL
37958: AND
37959: IFFALSE 37971
// result := true else
37961: LD_ADDR_VAR 0 3
37965: PUSH
37966: LD_INT 1
37968: ST_TO_ADDR
37969: GO 37979
// result := false ;
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: LD_INT 0
37978: ST_TO_ADDR
// end else
37979: GO 37989
// result := false ;
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_INT 0
37988: ST_TO_ADDR
// end ;
37989: LD_VAR 0 3
37993: RET
// export function HealTarget ( sci ) ; begin
37994: LD_INT 0
37996: PPUSH
// if not sci then
37997: LD_VAR 0 1
38001: NOT
38002: IFFALSE 38006
// exit ;
38004: GO 38071
// result := 0 ;
38006: LD_ADDR_VAR 0 2
38010: PUSH
38011: LD_INT 0
38013: ST_TO_ADDR
// if GetTaskList ( sci ) then
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 437
38023: IFFALSE 38071
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 437
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PUSH
38039: LD_INT 1
38041: ARRAY
38042: PUSH
38043: LD_STRING l
38045: EQUAL
38046: IFFALSE 38071
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38048: LD_ADDR_VAR 0 2
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 437
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PUSH
38067: LD_INT 4
38069: ARRAY
38070: ST_TO_ADDR
// end ;
38071: LD_VAR 0 2
38075: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38076: LD_INT 0
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
// if not base_units then
38082: LD_VAR 0 1
38086: NOT
38087: IFFALSE 38091
// exit ;
38089: GO 38178
// result := false ;
38091: LD_ADDR_VAR 0 2
38095: PUSH
38096: LD_INT 0
38098: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38099: LD_ADDR_VAR 0 5
38103: PUSH
38104: LD_VAR 0 1
38108: PPUSH
38109: LD_INT 21
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PPUSH
38119: CALL_OW 72
38123: ST_TO_ADDR
// if not tmp then
38124: LD_VAR 0 5
38128: NOT
38129: IFFALSE 38133
// exit ;
38131: GO 38178
// for i in tmp do
38133: LD_ADDR_VAR 0 3
38137: PUSH
38138: LD_VAR 0 5
38142: PUSH
38143: FOR_IN
38144: IFFALSE 38176
// begin result := EnemyInRange ( i , 22 ) ;
38146: LD_ADDR_VAR 0 2
38150: PUSH
38151: LD_VAR 0 3
38155: PPUSH
38156: LD_INT 22
38158: PPUSH
38159: CALL 35756 0 2
38163: ST_TO_ADDR
// if result then
38164: LD_VAR 0 2
38168: IFFALSE 38174
// exit ;
38170: POP
38171: POP
38172: GO 38178
// end ;
38174: GO 38143
38176: POP
38177: POP
// end ;
38178: LD_VAR 0 2
38182: RET
// export function FilterByTag ( units , tag ) ; begin
38183: LD_INT 0
38185: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38186: LD_ADDR_VAR 0 3
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: LD_INT 120
38198: PUSH
38199: LD_VAR 0 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PPUSH
38208: CALL_OW 72
38212: ST_TO_ADDR
// end ;
38213: LD_VAR 0 3
38217: RET
// export function IsDriver ( un ) ; begin
38218: LD_INT 0
38220: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38221: LD_ADDR_VAR 0 2
38225: PUSH
38226: LD_VAR 0 1
38230: PUSH
38231: LD_INT 55
38233: PUSH
38234: EMPTY
38235: LIST
38236: PPUSH
38237: CALL_OW 69
38241: IN
38242: ST_TO_ADDR
// end ;
38243: LD_VAR 0 2
38247: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38248: LD_INT 0
38250: PPUSH
38251: PPUSH
// list := [ ] ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: EMPTY
38258: ST_TO_ADDR
// case d of 0 :
38259: LD_VAR 0 3
38263: PUSH
38264: LD_INT 0
38266: DOUBLE
38267: EQUAL
38268: IFTRUE 38272
38270: GO 38405
38272: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38273: LD_ADDR_VAR 0 5
38277: PUSH
38278: LD_VAR 0 1
38282: PUSH
38283: LD_INT 4
38285: MINUS
38286: PUSH
38287: LD_VAR 0 2
38291: PUSH
38292: LD_INT 4
38294: MINUS
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 1
38308: PUSH
38309: LD_INT 3
38311: MINUS
38312: PUSH
38313: LD_VAR 0 2
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_VAR 0 1
38330: PUSH
38331: LD_INT 4
38333: PLUS
38334: PUSH
38335: LD_VAR 0 2
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: PUSH
38348: LD_VAR 0 1
38352: PUSH
38353: LD_INT 3
38355: PLUS
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_INT 3
38364: PLUS
38365: PUSH
38366: LD_INT 5
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: LD_VAR 0 1
38378: PUSH
38379: LD_VAR 0 2
38383: PUSH
38384: LD_INT 4
38386: PLUS
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// end ; 1 :
38403: GO 39103
38405: LD_INT 1
38407: DOUBLE
38408: EQUAL
38409: IFTRUE 38413
38411: GO 38546
38413: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38414: LD_ADDR_VAR 0 5
38418: PUSH
38419: LD_VAR 0 1
38423: PUSH
38424: LD_VAR 0 2
38428: PUSH
38429: LD_INT 4
38431: MINUS
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: LD_INT 3
38448: MINUS
38449: PUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 3
38457: MINUS
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: PUSH
38467: LD_VAR 0 1
38471: PUSH
38472: LD_INT 4
38474: MINUS
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: PUSH
38489: LD_VAR 0 1
38493: PUSH
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 3
38501: PLUS
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: LD_INT 4
38518: PLUS
38519: PUSH
38520: LD_VAR 0 2
38524: PUSH
38525: LD_INT 4
38527: PLUS
38528: PUSH
38529: LD_INT 5
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: ST_TO_ADDR
// end ; 2 :
38544: GO 39103
38546: LD_INT 2
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38683
38554: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38555: LD_ADDR_VAR 0 5
38559: PUSH
38560: LD_VAR 0 1
38564: PUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_INT 3
38572: MINUS
38573: PUSH
38574: LD_INT 3
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: PUSH
38582: LD_VAR 0 1
38586: PUSH
38587: LD_INT 4
38589: PLUS
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 4
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: PUSH
38604: LD_VAR 0 1
38608: PUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 4
38616: PLUS
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: LD_VAR 0 1
38630: PUSH
38631: LD_INT 3
38633: MINUS
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: PUSH
38648: LD_VAR 0 1
38652: PUSH
38653: LD_INT 4
38655: MINUS
38656: PUSH
38657: LD_VAR 0 2
38661: PUSH
38662: LD_INT 4
38664: MINUS
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// end ; 3 :
38681: GO 39103
38683: LD_INT 3
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38824
38691: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38692: LD_ADDR_VAR 0 5
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 3
38704: PLUS
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 4
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: LD_INT 4
38726: PLUS
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_INT 4
38735: PLUS
38736: PUSH
38737: LD_INT 5
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 1
38749: PUSH
38750: LD_INT 4
38752: MINUS
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: LD_VAR 0 1
38771: PUSH
38772: LD_VAR 0 2
38776: PUSH
38777: LD_INT 4
38779: MINUS
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: PUSH
38789: LD_VAR 0 1
38793: PUSH
38794: LD_INT 3
38796: MINUS
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_INT 3
38805: MINUS
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// end ; 4 :
38822: GO 39103
38824: LD_INT 4
38826: DOUBLE
38827: EQUAL
38828: IFTRUE 38832
38830: GO 38965
38832: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38833: LD_ADDR_VAR 0 5
38837: PUSH
38838: LD_VAR 0 1
38842: PUSH
38843: LD_VAR 0 2
38847: PUSH
38848: LD_INT 4
38850: PLUS
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: PUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_INT 3
38867: PLUS
38868: PUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_INT 3
38876: PLUS
38877: PUSH
38878: LD_INT 5
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_INT 4
38893: PLUS
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 3
38920: MINUS
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: LD_VAR 0 1
38934: PUSH
38935: LD_INT 4
38937: MINUS
38938: PUSH
38939: LD_VAR 0 2
38943: PUSH
38944: LD_INT 4
38946: MINUS
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// end ; 5 :
38963: GO 39103
38965: LD_INT 5
38967: DOUBLE
38968: EQUAL
38969: IFTRUE 38973
38971: GO 39102
38973: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38974: LD_ADDR_VAR 0 5
38978: PUSH
38979: LD_VAR 0 1
38983: PUSH
38984: LD_INT 4
38986: MINUS
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: PUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_VAR 0 2
39010: PUSH
39011: LD_INT 4
39013: MINUS
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: LD_INT 4
39030: PLUS
39031: PUSH
39032: LD_VAR 0 2
39036: PUSH
39037: LD_INT 4
39039: PLUS
39040: PUSH
39041: LD_INT 5
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: PUSH
39049: LD_VAR 0 1
39053: PUSH
39054: LD_INT 3
39056: PLUS
39057: PUSH
39058: LD_VAR 0 2
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: PUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_INT 3
39083: PLUS
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: ST_TO_ADDR
// end ; end ;
39100: GO 39103
39102: POP
// result := list ;
39103: LD_ADDR_VAR 0 4
39107: PUSH
39108: LD_VAR 0 5
39112: ST_TO_ADDR
// end ;
39113: LD_VAR 0 4
39117: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39123: LD_VAR 0 1
39127: NOT
39128: PUSH
39129: LD_VAR 0 2
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 4
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: IN
39152: NOT
39153: OR
39154: IFFALSE 39158
// exit ;
39156: GO 39241
// tmp := [ ] ;
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: EMPTY
39164: ST_TO_ADDR
// for i in units do
39165: LD_ADDR_VAR 0 4
39169: PUSH
39170: LD_VAR 0 1
39174: PUSH
39175: FOR_IN
39176: IFFALSE 39210
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39178: LD_ADDR_VAR 0 5
39182: PUSH
39183: LD_VAR 0 5
39187: PPUSH
39188: LD_VAR 0 4
39192: PPUSH
39193: LD_VAR 0 2
39197: PPUSH
39198: CALL_OW 259
39202: PPUSH
39203: CALL 40614 0 2
39207: ST_TO_ADDR
39208: GO 39175
39210: POP
39211: POP
// if not tmp then
39212: LD_VAR 0 5
39216: NOT
39217: IFFALSE 39221
// exit ;
39219: GO 39241
// result := SortListByListDesc ( units , tmp ) ;
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: LD_VAR 0 5
39235: PPUSH
39236: CALL_OW 77
39240: ST_TO_ADDR
// end ;
39241: LD_VAR 0 3
39245: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39246: LD_INT 0
39248: PPUSH
39249: PPUSH
39250: PPUSH
// result := false ;
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_INT 0
39258: ST_TO_ADDR
// if not building then
39259: LD_VAR 0 2
39263: NOT
39264: IFFALSE 39268
// exit ;
39266: GO 39406
// x := GetX ( building ) ;
39268: LD_ADDR_VAR 0 4
39272: PUSH
39273: LD_VAR 0 2
39277: PPUSH
39278: CALL_OW 250
39282: ST_TO_ADDR
// y := GetY ( building ) ;
39283: LD_ADDR_VAR 0 5
39287: PUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: CALL_OW 251
39297: ST_TO_ADDR
// if not x or not y then
39298: LD_VAR 0 4
39302: NOT
39303: PUSH
39304: LD_VAR 0 5
39308: NOT
39309: OR
39310: IFFALSE 39314
// exit ;
39312: GO 39406
// if GetTaskList ( unit ) then
39314: LD_VAR 0 1
39318: PPUSH
39319: CALL_OW 437
39323: IFFALSE 39406
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39325: LD_STRING e
39327: PUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 437
39337: PUSH
39338: LD_INT 1
39340: ARRAY
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: EQUAL
39346: PUSH
39347: LD_VAR 0 4
39351: PUSH
39352: LD_VAR 0 1
39356: PPUSH
39357: CALL_OW 437
39361: PUSH
39362: LD_INT 1
39364: ARRAY
39365: PUSH
39366: LD_INT 2
39368: ARRAY
39369: EQUAL
39370: AND
39371: PUSH
39372: LD_VAR 0 5
39376: PUSH
39377: LD_VAR 0 1
39381: PPUSH
39382: CALL_OW 437
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PUSH
39391: LD_INT 3
39393: ARRAY
39394: EQUAL
39395: AND
39396: IFFALSE 39406
// result := true end ;
39398: LD_ADDR_VAR 0 3
39402: PUSH
39403: LD_INT 1
39405: ST_TO_ADDR
// end ;
39406: LD_VAR 0 3
39410: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39411: LD_INT 0
39413: PPUSH
// result := false ;
39414: LD_ADDR_VAR 0 4
39418: PUSH
39419: LD_INT 0
39421: ST_TO_ADDR
// if GetTaskList ( unit ) then
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 437
39431: IFFALSE 39514
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39433: LD_STRING M
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 437
39445: PUSH
39446: LD_INT 1
39448: ARRAY
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: EQUAL
39454: PUSH
39455: LD_VAR 0 2
39459: PUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: CALL_OW 437
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: PUSH
39474: LD_INT 2
39476: ARRAY
39477: EQUAL
39478: AND
39479: PUSH
39480: LD_VAR 0 3
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 437
39494: PUSH
39495: LD_INT 1
39497: ARRAY
39498: PUSH
39499: LD_INT 3
39501: ARRAY
39502: EQUAL
39503: AND
39504: IFFALSE 39514
// result := true ;
39506: LD_ADDR_VAR 0 4
39510: PUSH
39511: LD_INT 1
39513: ST_TO_ADDR
// end ; end ;
39514: LD_VAR 0 4
39518: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39519: LD_INT 0
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
// if not unit or not area then
39525: LD_VAR 0 1
39529: NOT
39530: PUSH
39531: LD_VAR 0 2
39535: NOT
39536: OR
39537: IFFALSE 39541
// exit ;
39539: GO 39717
// tmp := AreaToList ( area , i ) ;
39541: LD_ADDR_VAR 0 6
39545: PUSH
39546: LD_VAR 0 2
39550: PPUSH
39551: LD_VAR 0 5
39555: PPUSH
39556: CALL_OW 517
39560: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39561: LD_ADDR_VAR 0 5
39565: PUSH
39566: DOUBLE
39567: LD_INT 1
39569: DEC
39570: ST_TO_ADDR
39571: LD_VAR 0 6
39575: PUSH
39576: LD_INT 1
39578: ARRAY
39579: PUSH
39580: FOR_TO
39581: IFFALSE 39715
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39583: LD_ADDR_VAR 0 7
39587: PUSH
39588: LD_VAR 0 6
39592: PUSH
39593: LD_INT 1
39595: ARRAY
39596: PUSH
39597: LD_VAR 0 5
39601: ARRAY
39602: PUSH
39603: LD_VAR 0 6
39607: PUSH
39608: LD_INT 2
39610: ARRAY
39611: PUSH
39612: LD_VAR 0 5
39616: ARRAY
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39622: LD_INT 92
39624: PUSH
39625: LD_VAR 0 7
39629: PUSH
39630: LD_INT 1
39632: ARRAY
39633: PUSH
39634: LD_VAR 0 7
39638: PUSH
39639: LD_INT 2
39641: ARRAY
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: PPUSH
39652: CALL_OW 69
39656: PUSH
39657: LD_INT 0
39659: EQUAL
39660: IFFALSE 39713
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39662: LD_VAR 0 1
39666: PPUSH
39667: LD_VAR 0 7
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PPUSH
39676: LD_VAR 0 7
39680: PUSH
39681: LD_INT 2
39683: ARRAY
39684: PPUSH
39685: LD_VAR 0 3
39689: PPUSH
39690: CALL_OW 48
// result := IsPlaced ( unit ) ;
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 305
39708: ST_TO_ADDR
// exit ;
39709: POP
39710: POP
39711: GO 39717
// end ; end ;
39713: GO 39580
39715: POP
39716: POP
// end ;
39717: LD_VAR 0 4
39721: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39722: LD_INT 0
39724: PPUSH
39725: PPUSH
39726: PPUSH
// if not side or side > 8 then
39727: LD_VAR 0 1
39731: NOT
39732: PUSH
39733: LD_VAR 0 1
39737: PUSH
39738: LD_INT 8
39740: GREATER
39741: OR
39742: IFFALSE 39746
// exit ;
39744: GO 39933
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39746: LD_ADDR_VAR 0 4
39750: PUSH
39751: LD_INT 22
39753: PUSH
39754: LD_VAR 0 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 21
39765: PUSH
39766: LD_INT 3
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PPUSH
39777: CALL_OW 69
39781: ST_TO_ADDR
// if not tmp then
39782: LD_VAR 0 4
39786: NOT
39787: IFFALSE 39791
// exit ;
39789: GO 39933
// enable_addtolog := true ;
39791: LD_ADDR_OWVAR 81
39795: PUSH
39796: LD_INT 1
39798: ST_TO_ADDR
// AddToLog ( [ ) ;
39799: LD_STRING [
39801: PPUSH
39802: CALL_OW 561
// for i in tmp do
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_VAR 0 4
39815: PUSH
39816: FOR_IN
39817: IFFALSE 39924
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39819: LD_STRING [
39821: PUSH
39822: LD_VAR 0 3
39826: PPUSH
39827: CALL_OW 266
39831: STR
39832: PUSH
39833: LD_STRING , 
39835: STR
39836: PUSH
39837: LD_VAR 0 3
39841: PPUSH
39842: CALL_OW 250
39846: STR
39847: PUSH
39848: LD_STRING , 
39850: STR
39851: PUSH
39852: LD_VAR 0 3
39856: PPUSH
39857: CALL_OW 251
39861: STR
39862: PUSH
39863: LD_STRING , 
39865: STR
39866: PUSH
39867: LD_VAR 0 3
39871: PPUSH
39872: CALL_OW 254
39876: STR
39877: PUSH
39878: LD_STRING , 
39880: STR
39881: PUSH
39882: LD_VAR 0 3
39886: PPUSH
39887: LD_INT 1
39889: PPUSH
39890: CALL_OW 268
39894: STR
39895: PUSH
39896: LD_STRING , 
39898: STR
39899: PUSH
39900: LD_VAR 0 3
39904: PPUSH
39905: LD_INT 2
39907: PPUSH
39908: CALL_OW 268
39912: STR
39913: PUSH
39914: LD_STRING ],
39916: STR
39917: PPUSH
39918: CALL_OW 561
// end ;
39922: GO 39816
39924: POP
39925: POP
// AddToLog ( ]; ) ;
39926: LD_STRING ];
39928: PPUSH
39929: CALL_OW 561
// end ;
39933: LD_VAR 0 2
39937: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39938: LD_INT 0
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
// if not area or not rate or not max then
39945: LD_VAR 0 1
39949: NOT
39950: PUSH
39951: LD_VAR 0 2
39955: NOT
39956: OR
39957: PUSH
39958: LD_VAR 0 4
39962: NOT
39963: OR
39964: IFFALSE 39968
// exit ;
39966: GO 40157
// while 1 do
39968: LD_INT 1
39970: IFFALSE 40157
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39972: LD_ADDR_VAR 0 9
39976: PUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: LD_INT 1
39984: PPUSH
39985: CALL_OW 287
39989: PUSH
39990: LD_INT 10
39992: MUL
39993: ST_TO_ADDR
// r := rate / 10 ;
39994: LD_ADDR_VAR 0 7
39998: PUSH
39999: LD_VAR 0 2
40003: PUSH
40004: LD_INT 10
40006: DIVREAL
40007: ST_TO_ADDR
// time := 1 1$00 ;
40008: LD_ADDR_VAR 0 8
40012: PUSH
40013: LD_INT 2100
40015: ST_TO_ADDR
// if amount < min then
40016: LD_VAR 0 9
40020: PUSH
40021: LD_VAR 0 3
40025: LESS
40026: IFFALSE 40044
// r := r * 2 else
40028: LD_ADDR_VAR 0 7
40032: PUSH
40033: LD_VAR 0 7
40037: PUSH
40038: LD_INT 2
40040: MUL
40041: ST_TO_ADDR
40042: GO 40070
// if amount > max then
40044: LD_VAR 0 9
40048: PUSH
40049: LD_VAR 0 4
40053: GREATER
40054: IFFALSE 40070
// r := r / 2 ;
40056: LD_ADDR_VAR 0 7
40060: PUSH
40061: LD_VAR 0 7
40065: PUSH
40066: LD_INT 2
40068: DIVREAL
40069: ST_TO_ADDR
// time := time / r ;
40070: LD_ADDR_VAR 0 8
40074: PUSH
40075: LD_VAR 0 8
40079: PUSH
40080: LD_VAR 0 7
40084: DIVREAL
40085: ST_TO_ADDR
// if time < 0 then
40086: LD_VAR 0 8
40090: PUSH
40091: LD_INT 0
40093: LESS
40094: IFFALSE 40111
// time := time * - 1 ;
40096: LD_ADDR_VAR 0 8
40100: PUSH
40101: LD_VAR 0 8
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: MUL
40110: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40111: LD_VAR 0 8
40115: PUSH
40116: LD_INT 35
40118: PPUSH
40119: LD_INT 875
40121: PPUSH
40122: CALL_OW 12
40126: PLUS
40127: PPUSH
40128: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40132: LD_INT 1
40134: PPUSH
40135: LD_INT 5
40137: PPUSH
40138: CALL_OW 12
40142: PPUSH
40143: LD_VAR 0 1
40147: PPUSH
40148: LD_INT 1
40150: PPUSH
40151: CALL_OW 55
// end ;
40155: GO 39968
// end ;
40157: LD_VAR 0 5
40161: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40162: LD_INT 0
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
// if not turrets or not factories then
40172: LD_VAR 0 1
40176: NOT
40177: PUSH
40178: LD_VAR 0 2
40182: NOT
40183: OR
40184: IFFALSE 40188
// exit ;
40186: GO 40495
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40188: LD_ADDR_VAR 0 10
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: LD_INT 6
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 4
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 24
40230: PUSH
40231: LD_INT 25
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 23
40240: PUSH
40241: LD_INT 27
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 42
40254: PUSH
40255: LD_INT 43
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 44
40264: PUSH
40265: LD_INT 46
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 45
40274: PUSH
40275: LD_INT 47
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// result := [ ] ;
40292: LD_ADDR_VAR 0 3
40296: PUSH
40297: EMPTY
40298: ST_TO_ADDR
// for i in turrets do
40299: LD_ADDR_VAR 0 4
40303: PUSH
40304: LD_VAR 0 1
40308: PUSH
40309: FOR_IN
40310: IFFALSE 40493
// begin nat := GetNation ( i ) ;
40312: LD_ADDR_VAR 0 7
40316: PUSH
40317: LD_VAR 0 4
40321: PPUSH
40322: CALL_OW 248
40326: ST_TO_ADDR
// weapon := 0 ;
40327: LD_ADDR_VAR 0 8
40331: PUSH
40332: LD_INT 0
40334: ST_TO_ADDR
// if not nat then
40335: LD_VAR 0 7
40339: NOT
40340: IFFALSE 40344
// continue ;
40342: GO 40309
// for j in list [ nat ] do
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 10
40353: PUSH
40354: LD_VAR 0 7
40358: ARRAY
40359: PUSH
40360: FOR_IN
40361: IFFALSE 40402
// if GetBWeapon ( i ) = j [ 1 ] then
40363: LD_VAR 0 4
40367: PPUSH
40368: CALL_OW 269
40372: PUSH
40373: LD_VAR 0 5
40377: PUSH
40378: LD_INT 1
40380: ARRAY
40381: EQUAL
40382: IFFALSE 40400
// begin weapon := j [ 2 ] ;
40384: LD_ADDR_VAR 0 8
40388: PUSH
40389: LD_VAR 0 5
40393: PUSH
40394: LD_INT 2
40396: ARRAY
40397: ST_TO_ADDR
// break ;
40398: GO 40402
// end ;
40400: GO 40360
40402: POP
40403: POP
// if not weapon then
40404: LD_VAR 0 8
40408: NOT
40409: IFFALSE 40413
// continue ;
40411: GO 40309
// for k in factories do
40413: LD_ADDR_VAR 0 6
40417: PUSH
40418: LD_VAR 0 2
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40489
// begin weapons := AvailableWeaponList ( k ) ;
40426: LD_ADDR_VAR 0 9
40430: PUSH
40431: LD_VAR 0 6
40435: PPUSH
40436: CALL_OW 478
40440: ST_TO_ADDR
// if not weapons then
40441: LD_VAR 0 9
40445: NOT
40446: IFFALSE 40450
// continue ;
40448: GO 40423
// if weapon in weapons then
40450: LD_VAR 0 8
40454: PUSH
40455: LD_VAR 0 9
40459: IN
40460: IFFALSE 40487
// begin result := [ i , weapon ] ;
40462: LD_ADDR_VAR 0 3
40466: PUSH
40467: LD_VAR 0 4
40471: PUSH
40472: LD_VAR 0 8
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// exit ;
40481: POP
40482: POP
40483: POP
40484: POP
40485: GO 40495
// end ; end ;
40487: GO 40423
40489: POP
40490: POP
// end ;
40491: GO 40309
40493: POP
40494: POP
// end ;
40495: LD_VAR 0 3
40499: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40500: LD_INT 0
40502: PPUSH
// if not side or side > 8 then
40503: LD_VAR 0 3
40507: NOT
40508: PUSH
40509: LD_VAR 0 3
40513: PUSH
40514: LD_INT 8
40516: GREATER
40517: OR
40518: IFFALSE 40522
// exit ;
40520: GO 40581
// if not range then
40522: LD_VAR 0 4
40526: NOT
40527: IFFALSE 40538
// range := - 12 ;
40529: LD_ADDR_VAR 0 4
40533: PUSH
40534: LD_INT 12
40536: NEG
40537: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40538: LD_VAR 0 1
40542: PPUSH
40543: LD_VAR 0 2
40547: PPUSH
40548: LD_VAR 0 3
40552: PPUSH
40553: LD_VAR 0 4
40557: PPUSH
40558: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40562: LD_VAR 0 1
40566: PPUSH
40567: LD_VAR 0 2
40571: PPUSH
40572: LD_VAR 0 3
40576: PPUSH
40577: CALL_OW 331
// end ;
40581: LD_VAR 0 5
40585: RET
// export function Video ( mode ) ; begin
40586: LD_INT 0
40588: PPUSH
// ingame_video = mode ;
40589: LD_ADDR_OWVAR 52
40593: PUSH
40594: LD_VAR 0 1
40598: ST_TO_ADDR
// interface_hidden = mode ;
40599: LD_ADDR_OWVAR 54
40603: PUSH
40604: LD_VAR 0 1
40608: ST_TO_ADDR
// end ;
40609: LD_VAR 0 2
40613: RET
// export function Join ( array , element ) ; begin
40614: LD_INT 0
40616: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: LD_VAR 0 1
40631: PUSH
40632: LD_INT 1
40634: PLUS
40635: PPUSH
40636: LD_VAR 0 2
40640: PPUSH
40641: CALL_OW 1
40645: ST_TO_ADDR
// end ;
40646: LD_VAR 0 3
40650: RET
// export function JoinUnion ( array , element ) ; begin
40651: LD_INT 0
40653: PPUSH
// result := array union element ;
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_VAR 0 1
40663: PUSH
40664: LD_VAR 0 2
40668: UNION
40669: ST_TO_ADDR
// end ;
40670: LD_VAR 0 3
40674: RET
// export function GetBehemoths ( side ) ; begin
40675: LD_INT 0
40677: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40678: LD_ADDR_VAR 0 2
40682: PUSH
40683: LD_INT 22
40685: PUSH
40686: LD_VAR 0 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 31
40697: PUSH
40698: LD_INT 25
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PPUSH
40709: CALL_OW 69
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 2
40718: RET
// export function Shuffle ( array ) ; var i , index ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
40723: PPUSH
// result := [ ] ;
40724: LD_ADDR_VAR 0 2
40728: PUSH
40729: EMPTY
40730: ST_TO_ADDR
// if not array then
40731: LD_VAR 0 1
40735: NOT
40736: IFFALSE 40740
// exit ;
40738: GO 40839
// Randomize ;
40740: CALL_OW 10
// for i = array downto 1 do
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: DOUBLE
40750: LD_VAR 0 1
40754: INC
40755: ST_TO_ADDR
40756: LD_INT 1
40758: PUSH
40759: FOR_DOWNTO
40760: IFFALSE 40837
// begin index := rand ( 1 , array ) ;
40762: LD_ADDR_VAR 0 4
40766: PUSH
40767: LD_INT 1
40769: PPUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 12
40779: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40780: LD_ADDR_VAR 0 2
40784: PUSH
40785: LD_VAR 0 2
40789: PPUSH
40790: LD_VAR 0 2
40794: PUSH
40795: LD_INT 1
40797: PLUS
40798: PPUSH
40799: LD_VAR 0 1
40803: PUSH
40804: LD_VAR 0 4
40808: ARRAY
40809: PPUSH
40810: CALL_OW 2
40814: ST_TO_ADDR
// array := Delete ( array , index ) ;
40815: LD_ADDR_VAR 0 1
40819: PUSH
40820: LD_VAR 0 1
40824: PPUSH
40825: LD_VAR 0 4
40829: PPUSH
40830: CALL_OW 3
40834: ST_TO_ADDR
// end ;
40835: GO 40759
40837: POP
40838: POP
// end ;
40839: LD_VAR 0 2
40843: RET
// export function GetBaseMaterials ( base ) ; begin
40844: LD_INT 0
40846: PPUSH
// result := [ 0 , 0 , 0 ] ;
40847: LD_ADDR_VAR 0 2
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// if not base then
40866: LD_VAR 0 1
40870: NOT
40871: IFFALSE 40875
// exit ;
40873: GO 40924
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40875: LD_ADDR_VAR 0 2
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: LD_INT 1
40887: PPUSH
40888: CALL_OW 275
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: LD_INT 2
40900: PPUSH
40901: CALL_OW 275
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: LD_INT 3
40913: PPUSH
40914: CALL_OW 275
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// end ;
40924: LD_VAR 0 2
40928: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40929: LD_INT 0
40931: PPUSH
40932: PPUSH
// result := array ;
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_VAR 0 1
40942: ST_TO_ADDR
// if size >= result then
40943: LD_VAR 0 2
40947: PUSH
40948: LD_VAR 0 3
40952: GREATEREQUAL
40953: IFFALSE 40957
// exit ;
40955: GO 41007
// if size then
40957: LD_VAR 0 2
40961: IFFALSE 41007
// for i := array downto size do
40963: LD_ADDR_VAR 0 4
40967: PUSH
40968: DOUBLE
40969: LD_VAR 0 1
40973: INC
40974: ST_TO_ADDR
40975: LD_VAR 0 2
40979: PUSH
40980: FOR_DOWNTO
40981: IFFALSE 41005
// result := Delete ( result , result ) ;
40983: LD_ADDR_VAR 0 3
40987: PUSH
40988: LD_VAR 0 3
40992: PPUSH
40993: LD_VAR 0 3
40997: PPUSH
40998: CALL_OW 3
41002: ST_TO_ADDR
41003: GO 40980
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 3
41011: RET
// export function ComExit ( unit ) ; var tmp ; begin
41012: LD_INT 0
41014: PPUSH
41015: PPUSH
// if not IsInUnit ( unit ) then
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 310
41025: NOT
41026: IFFALSE 41030
// exit ;
41028: GO 41090
// tmp := IsInUnit ( unit ) ;
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 310
41044: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41045: LD_VAR 0 3
41049: PPUSH
41050: CALL_OW 247
41054: PUSH
41055: LD_INT 2
41057: EQUAL
41058: IFFALSE 41071
// ComExitVehicle ( unit ) else
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL_OW 121
41069: GO 41080
// ComExitBuilding ( unit ) ;
41071: LD_VAR 0 1
41075: PPUSH
41076: CALL_OW 122
// result := tmp ;
41080: LD_ADDR_VAR 0 2
41084: PUSH
41085: LD_VAR 0 3
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 2
41094: RET
// export function ComExitAll ( units ) ; var i ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
// if not units then
41099: LD_VAR 0 1
41103: NOT
41104: IFFALSE 41108
// exit ;
41106: GO 41134
// for i in units do
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_VAR 0 1
41117: PUSH
41118: FOR_IN
41119: IFFALSE 41132
// ComExit ( i ) ;
41121: LD_VAR 0 3
41125: PPUSH
41126: CALL 41012 0 1
41130: GO 41118
41132: POP
41133: POP
// end ;
41134: LD_VAR 0 2
41138: RET
// export function ResetHc ; begin
41139: LD_INT 0
41141: PPUSH
// InitHc ;
41142: CALL_OW 19
// hc_importance := 0 ;
41146: LD_ADDR_OWVAR 32
41150: PUSH
41151: LD_INT 0
41153: ST_TO_ADDR
// end ;
41154: LD_VAR 0 1
41158: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41159: LD_INT 0
41161: PPUSH
41162: PPUSH
41163: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41164: LD_ADDR_VAR 0 6
41168: PUSH
41169: LD_VAR 0 1
41173: PUSH
41174: LD_VAR 0 3
41178: PLUS
41179: PUSH
41180: LD_INT 2
41182: DIV
41183: ST_TO_ADDR
// if _x < 0 then
41184: LD_VAR 0 6
41188: PUSH
41189: LD_INT 0
41191: LESS
41192: IFFALSE 41209
// _x := _x * - 1 ;
41194: LD_ADDR_VAR 0 6
41198: PUSH
41199: LD_VAR 0 6
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: MUL
41208: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41209: LD_ADDR_VAR 0 7
41213: PUSH
41214: LD_VAR 0 2
41218: PUSH
41219: LD_VAR 0 4
41223: PLUS
41224: PUSH
41225: LD_INT 2
41227: DIV
41228: ST_TO_ADDR
// if _y < 0 then
41229: LD_VAR 0 7
41233: PUSH
41234: LD_INT 0
41236: LESS
41237: IFFALSE 41254
// _y := _y * - 1 ;
41239: LD_ADDR_VAR 0 7
41243: PUSH
41244: LD_VAR 0 7
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: MUL
41253: ST_TO_ADDR
// result := [ _x , _y ] ;
41254: LD_ADDR_VAR 0 5
41258: PUSH
41259: LD_VAR 0 6
41263: PUSH
41264: LD_VAR 0 7
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// end ;
41273: LD_VAR 0 5
41277: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
// task := GetTaskList ( unit ) ;
41284: LD_ADDR_VAR 0 7
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 437
41298: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41299: LD_VAR 0 7
41303: NOT
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: LD_VAR 0 2
41314: PPUSH
41315: CALL_OW 308
41319: NOT
41320: AND
41321: IFFALSE 41325
// exit ;
41323: GO 41443
// if IsInArea ( unit , area ) then
41325: LD_VAR 0 1
41329: PPUSH
41330: LD_VAR 0 2
41334: PPUSH
41335: CALL_OW 308
41339: IFFALSE 41357
// begin ComMoveToArea ( unit , goAway ) ;
41341: LD_VAR 0 1
41345: PPUSH
41346: LD_VAR 0 3
41350: PPUSH
41351: CALL_OW 113
// exit ;
41355: GO 41443
// end ; if task [ 1 ] [ 1 ] <> M then
41357: LD_VAR 0 7
41361: PUSH
41362: LD_INT 1
41364: ARRAY
41365: PUSH
41366: LD_INT 1
41368: ARRAY
41369: PUSH
41370: LD_STRING M
41372: NONEQUAL
41373: IFFALSE 41377
// exit ;
41375: GO 41443
// x := task [ 1 ] [ 2 ] ;
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: LD_VAR 0 7
41386: PUSH
41387: LD_INT 1
41389: ARRAY
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41395: LD_ADDR_VAR 0 6
41399: PUSH
41400: LD_VAR 0 7
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PUSH
41409: LD_INT 3
41411: ARRAY
41412: ST_TO_ADDR
// if InArea ( x , y , area ) then
41413: LD_VAR 0 5
41417: PPUSH
41418: LD_VAR 0 6
41422: PPUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: CALL_OW 309
41432: IFFALSE 41443
// ComStop ( unit ) ;
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 141
// end ;
41443: LD_VAR 0 4
41447: RET
// export function Abs ( value ) ; begin
41448: LD_INT 0
41450: PPUSH
// result := value ;
41451: LD_ADDR_VAR 0 2
41455: PUSH
41456: LD_VAR 0 1
41460: ST_TO_ADDR
// if value < 0 then
41461: LD_VAR 0 1
41465: PUSH
41466: LD_INT 0
41468: LESS
41469: IFFALSE 41486
// result := value * - 1 ;
41471: LD_ADDR_VAR 0 2
41475: PUSH
41476: LD_VAR 0 1
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: MUL
41485: ST_TO_ADDR
// end ;
41486: LD_VAR 0 2
41490: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41491: LD_INT 0
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
// if not unit or not building then
41501: LD_VAR 0 1
41505: NOT
41506: PUSH
41507: LD_VAR 0 2
41511: NOT
41512: OR
41513: IFFALSE 41517
// exit ;
41515: GO 41743
// x := GetX ( building ) ;
41517: LD_ADDR_VAR 0 4
41521: PUSH
41522: LD_VAR 0 2
41526: PPUSH
41527: CALL_OW 250
41531: ST_TO_ADDR
// y := GetY ( building ) ;
41532: LD_ADDR_VAR 0 6
41536: PUSH
41537: LD_VAR 0 2
41541: PPUSH
41542: CALL_OW 251
41546: ST_TO_ADDR
// d := GetDir ( building ) ;
41547: LD_ADDR_VAR 0 8
41551: PUSH
41552: LD_VAR 0 2
41556: PPUSH
41557: CALL_OW 254
41561: ST_TO_ADDR
// r := 4 ;
41562: LD_ADDR_VAR 0 9
41566: PUSH
41567: LD_INT 4
41569: ST_TO_ADDR
// for i := 1 to 5 do
41570: LD_ADDR_VAR 0 10
41574: PUSH
41575: DOUBLE
41576: LD_INT 1
41578: DEC
41579: ST_TO_ADDR
41580: LD_INT 5
41582: PUSH
41583: FOR_TO
41584: IFFALSE 41741
// begin _x := ShiftX ( x , d , r + i ) ;
41586: LD_ADDR_VAR 0 5
41590: PUSH
41591: LD_VAR 0 4
41595: PPUSH
41596: LD_VAR 0 8
41600: PPUSH
41601: LD_VAR 0 9
41605: PUSH
41606: LD_VAR 0 10
41610: PLUS
41611: PPUSH
41612: CALL_OW 272
41616: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41617: LD_ADDR_VAR 0 7
41621: PUSH
41622: LD_VAR 0 6
41626: PPUSH
41627: LD_VAR 0 8
41631: PPUSH
41632: LD_VAR 0 9
41636: PUSH
41637: LD_VAR 0 10
41641: PLUS
41642: PPUSH
41643: CALL_OW 273
41647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41648: LD_VAR 0 5
41652: PPUSH
41653: LD_VAR 0 7
41657: PPUSH
41658: CALL_OW 488
41662: PUSH
41663: LD_VAR 0 5
41667: PPUSH
41668: LD_VAR 0 7
41672: PPUSH
41673: CALL_OW 428
41677: PPUSH
41678: CALL_OW 247
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: IN
41693: NOT
41694: AND
41695: IFFALSE 41739
// begin ComMoveXY ( unit , _x , _y ) ;
41697: LD_VAR 0 1
41701: PPUSH
41702: LD_VAR 0 5
41706: PPUSH
41707: LD_VAR 0 7
41711: PPUSH
41712: CALL_OW 111
// result := [ _x , _y ] ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_VAR 0 5
41725: PUSH
41726: LD_VAR 0 7
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// exit ;
41735: POP
41736: POP
41737: GO 41743
// end ; end ;
41739: GO 41583
41741: POP
41742: POP
// end ;
41743: LD_VAR 0 3
41747: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41748: LD_INT 0
41750: PPUSH
41751: PPUSH
41752: PPUSH
// result := 0 ;
41753: LD_ADDR_VAR 0 3
41757: PUSH
41758: LD_INT 0
41760: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41761: LD_VAR 0 1
41765: PUSH
41766: LD_INT 0
41768: LESS
41769: PUSH
41770: LD_VAR 0 1
41774: PUSH
41775: LD_INT 8
41777: GREATER
41778: OR
41779: PUSH
41780: LD_VAR 0 2
41784: PUSH
41785: LD_INT 0
41787: LESS
41788: OR
41789: PUSH
41790: LD_VAR 0 2
41794: PUSH
41795: LD_INT 8
41797: GREATER
41798: OR
41799: IFFALSE 41803
// exit ;
41801: GO 41878
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41803: LD_ADDR_VAR 0 4
41807: PUSH
41808: LD_INT 22
41810: PUSH
41811: LD_VAR 0 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: CALL_OW 69
41824: PUSH
41825: FOR_IN
41826: IFFALSE 41876
// begin un := UnitShoot ( i ) ;
41828: LD_ADDR_VAR 0 5
41832: PUSH
41833: LD_VAR 0 4
41837: PPUSH
41838: CALL_OW 504
41842: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41843: LD_VAR 0 5
41847: PPUSH
41848: CALL_OW 255
41852: PUSH
41853: LD_VAR 0 1
41857: EQUAL
41858: IFFALSE 41874
// begin result := un ;
41860: LD_ADDR_VAR 0 3
41864: PUSH
41865: LD_VAR 0 5
41869: ST_TO_ADDR
// exit ;
41870: POP
41871: POP
41872: GO 41878
// end ; end ;
41874: GO 41825
41876: POP
41877: POP
// end ;
41878: LD_VAR 0 3
41882: RET
// export function GetCargoBay ( units ) ; begin
41883: LD_INT 0
41885: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41886: LD_ADDR_VAR 0 2
41890: PUSH
41891: LD_VAR 0 1
41895: PPUSH
41896: LD_INT 2
41898: PUSH
41899: LD_INT 34
41901: PUSH
41902: LD_INT 12
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 34
41911: PUSH
41912: LD_INT 51
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 34
41921: PUSH
41922: LD_INT 32
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 34
41931: PUSH
41932: LD_INT 89
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 72
41950: ST_TO_ADDR
// end ;
41951: LD_VAR 0 2
41955: RET
// export function Negate ( value ) ; begin
41956: LD_INT 0
41958: PPUSH
// result := not value ;
41959: LD_ADDR_VAR 0 2
41963: PUSH
41964: LD_VAR 0 1
41968: NOT
41969: ST_TO_ADDR
// end ;
41970: LD_VAR 0 2
41974: RET
// export function Inc ( value ) ; begin
41975: LD_INT 0
41977: PPUSH
// result := value + 1 ;
41978: LD_ADDR_VAR 0 2
41982: PUSH
41983: LD_VAR 0 1
41987: PUSH
41988: LD_INT 1
41990: PLUS
41991: ST_TO_ADDR
// end ;
41992: LD_VAR 0 2
41996: RET
// export function Dec ( value ) ; begin
41997: LD_INT 0
41999: PPUSH
// result := value - 1 ;
42000: LD_ADDR_VAR 0 2
42004: PUSH
42005: LD_VAR 0 1
42009: PUSH
42010: LD_INT 1
42012: MINUS
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 2
42018: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42029: LD_VAR 0 1
42033: PPUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: CALL_OW 488
42043: NOT
42044: PUSH
42045: LD_VAR 0 3
42049: PPUSH
42050: LD_VAR 0 4
42054: PPUSH
42055: CALL_OW 488
42059: NOT
42060: OR
42061: IFFALSE 42074
// begin result := - 1 ;
42063: LD_ADDR_VAR 0 5
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: ST_TO_ADDR
// exit ;
42072: GO 42309
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42074: LD_ADDR_VAR 0 12
42078: PUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: LD_VAR 0 2
42088: PPUSH
42089: LD_VAR 0 3
42093: PPUSH
42094: LD_VAR 0 4
42098: PPUSH
42099: CALL 41159 0 4
42103: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42104: LD_ADDR_VAR 0 11
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: LD_VAR 0 2
42118: PPUSH
42119: LD_VAR 0 12
42123: PUSH
42124: LD_INT 1
42126: ARRAY
42127: PPUSH
42128: LD_VAR 0 12
42132: PUSH
42133: LD_INT 2
42135: ARRAY
42136: PPUSH
42137: CALL_OW 298
42141: ST_TO_ADDR
// distance := 9999 ;
42142: LD_ADDR_VAR 0 10
42146: PUSH
42147: LD_INT 9999
42149: ST_TO_ADDR
// for i := 0 to 5 do
42150: LD_ADDR_VAR 0 6
42154: PUSH
42155: DOUBLE
42156: LD_INT 0
42158: DEC
42159: ST_TO_ADDR
42160: LD_INT 5
42162: PUSH
42163: FOR_TO
42164: IFFALSE 42307
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42166: LD_ADDR_VAR 0 7
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 6
42180: PPUSH
42181: LD_VAR 0 11
42185: PPUSH
42186: CALL_OW 272
42190: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42191: LD_ADDR_VAR 0 8
42195: PUSH
42196: LD_VAR 0 2
42200: PPUSH
42201: LD_VAR 0 6
42205: PPUSH
42206: LD_VAR 0 11
42210: PPUSH
42211: CALL_OW 273
42215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42216: LD_VAR 0 7
42220: PPUSH
42221: LD_VAR 0 8
42225: PPUSH
42226: CALL_OW 488
42230: NOT
42231: IFFALSE 42235
// continue ;
42233: GO 42163
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42235: LD_ADDR_VAR 0 9
42239: PUSH
42240: LD_VAR 0 12
42244: PUSH
42245: LD_INT 1
42247: ARRAY
42248: PPUSH
42249: LD_VAR 0 12
42253: PUSH
42254: LD_INT 2
42256: ARRAY
42257: PPUSH
42258: LD_VAR 0 7
42262: PPUSH
42263: LD_VAR 0 8
42267: PPUSH
42268: CALL_OW 298
42272: ST_TO_ADDR
// if tmp < distance then
42273: LD_VAR 0 9
42277: PUSH
42278: LD_VAR 0 10
42282: LESS
42283: IFFALSE 42305
// begin result := i ;
42285: LD_ADDR_VAR 0 5
42289: PUSH
42290: LD_VAR 0 6
42294: ST_TO_ADDR
// distance := tmp ;
42295: LD_ADDR_VAR 0 10
42299: PUSH
42300: LD_VAR 0 9
42304: ST_TO_ADDR
// end ; end ;
42305: GO 42163
42307: POP
42308: POP
// end ;
42309: LD_VAR 0 5
42313: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42314: LD_INT 0
42316: PPUSH
42317: PPUSH
// if not driver or not IsInUnit ( driver ) then
42318: LD_VAR 0 1
42322: NOT
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 310
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 42429
// vehicle := IsInUnit ( driver ) ;
42339: LD_ADDR_VAR 0 3
42343: PUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 310
42353: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42354: LD_VAR 0 1
42358: PPUSH
42359: LD_STRING \
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: PUSH
42389: LD_STRING E
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_VAR 0 3
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PPUSH
42425: CALL_OW 446
// end ;
42429: LD_VAR 0 2
42433: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42434: LD_INT 0
42436: PPUSH
42437: PPUSH
// if not driver or not IsInUnit ( driver ) then
42438: LD_VAR 0 1
42442: NOT
42443: PUSH
42444: LD_VAR 0 1
42448: PPUSH
42449: CALL_OW 310
42453: NOT
42454: OR
42455: IFFALSE 42459
// exit ;
42457: GO 42549
// vehicle := IsInUnit ( driver ) ;
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 310
42473: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42474: LD_VAR 0 1
42478: PPUSH
42479: LD_STRING \
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: PUSH
42509: LD_STRING E
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_VAR 0 3
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PPUSH
42545: CALL_OW 447
// end ;
42549: LD_VAR 0 2
42553: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42554: LD_INT 0
42556: PPUSH
42557: PPUSH
42558: PPUSH
// tmp := [ ] ;
42559: LD_ADDR_VAR 0 5
42563: PUSH
42564: EMPTY
42565: ST_TO_ADDR
// for i in units do
42566: LD_ADDR_VAR 0 4
42570: PUSH
42571: LD_VAR 0 1
42575: PUSH
42576: FOR_IN
42577: IFFALSE 42615
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42579: LD_ADDR_VAR 0 5
42583: PUSH
42584: LD_VAR 0 5
42588: PPUSH
42589: LD_VAR 0 5
42593: PUSH
42594: LD_INT 1
42596: PLUS
42597: PPUSH
42598: LD_VAR 0 4
42602: PPUSH
42603: CALL_OW 256
42607: PPUSH
42608: CALL_OW 2
42612: ST_TO_ADDR
42613: GO 42576
42615: POP
42616: POP
// if not tmp then
42617: LD_VAR 0 5
42621: NOT
42622: IFFALSE 42626
// exit ;
42624: GO 42674
// if asc then
42626: LD_VAR 0 2
42630: IFFALSE 42654
// result := SortListByListAsc ( units , tmp ) else
42632: LD_ADDR_VAR 0 3
42636: PUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: LD_VAR 0 5
42646: PPUSH
42647: CALL_OW 76
42651: ST_TO_ADDR
42652: GO 42674
// result := SortListByListDesc ( units , tmp ) ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_VAR 0 5
42668: PPUSH
42669: CALL_OW 77
42673: ST_TO_ADDR
// end ;
42674: LD_VAR 0 3
42678: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42679: LD_INT 0
42681: PPUSH
42682: PPUSH
// task := GetTaskList ( mech ) ;
42683: LD_ADDR_VAR 0 4
42687: PUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: CALL_OW 437
42697: ST_TO_ADDR
// if not task then
42698: LD_VAR 0 4
42702: NOT
42703: IFFALSE 42707
// exit ;
42705: GO 42749
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_VAR 0 4
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PUSH
42725: LD_STRING r
42727: EQUAL
42728: PUSH
42729: LD_VAR 0 4
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: PUSH
42738: LD_INT 4
42740: ARRAY
42741: PUSH
42742: LD_VAR 0 2
42746: EQUAL
42747: AND
42748: ST_TO_ADDR
// end ;
42749: LD_VAR 0 3
42753: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42754: LD_INT 0
42756: PPUSH
// SetDir ( unit , d ) ;
42757: LD_VAR 0 1
42761: PPUSH
42762: LD_VAR 0 4
42766: PPUSH
42767: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42771: LD_VAR 0 1
42775: PPUSH
42776: LD_VAR 0 2
42780: PPUSH
42781: LD_VAR 0 3
42785: PPUSH
42786: LD_VAR 0 5
42790: PPUSH
42791: CALL_OW 48
// end ;
42795: LD_VAR 0 6
42799: RET
// export function ToNaturalNumber ( number ) ; begin
42800: LD_INT 0
42802: PPUSH
// result := number div 1 ;
42803: LD_ADDR_VAR 0 2
42807: PUSH
42808: LD_VAR 0 1
42812: PUSH
42813: LD_INT 1
42815: DIV
42816: ST_TO_ADDR
// if number < 0 then
42817: LD_VAR 0 1
42821: PUSH
42822: LD_INT 0
42824: LESS
42825: IFFALSE 42835
// result := 0 ;
42827: LD_ADDR_VAR 0 2
42831: PUSH
42832: LD_INT 0
42834: ST_TO_ADDR
// end ;
42835: LD_VAR 0 2
42839: RET
// export function SortByClass ( units , class ) ; var un ; begin
42840: LD_INT 0
42842: PPUSH
42843: PPUSH
// if not units or not class then
42844: LD_VAR 0 1
42848: NOT
42849: PUSH
42850: LD_VAR 0 2
42854: NOT
42855: OR
42856: IFFALSE 42860
// exit ;
42858: GO 42955
// result := [ ] ;
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: EMPTY
42866: ST_TO_ADDR
// for un in units do
42867: LD_ADDR_VAR 0 4
42871: PUSH
42872: LD_VAR 0 1
42876: PUSH
42877: FOR_IN
42878: IFFALSE 42953
// if GetClass ( un ) = class then
42880: LD_VAR 0 4
42884: PPUSH
42885: CALL_OW 257
42889: PUSH
42890: LD_VAR 0 2
42894: EQUAL
42895: IFFALSE 42922
// result := Insert ( result , 1 , un ) else
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: LD_INT 1
42909: PPUSH
42910: LD_VAR 0 4
42914: PPUSH
42915: CALL_OW 2
42919: ST_TO_ADDR
42920: GO 42951
// result := Replace ( result , result + 1 , un ) ;
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_VAR 0 3
42931: PPUSH
42932: LD_VAR 0 3
42936: PUSH
42937: LD_INT 1
42939: PLUS
42940: PPUSH
42941: LD_VAR 0 4
42945: PPUSH
42946: CALL_OW 1
42950: ST_TO_ADDR
42951: GO 42877
42953: POP
42954: POP
// end ;
42955: LD_VAR 0 3
42959: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
// result := [ ] ;
42969: LD_ADDR_VAR 0 4
42973: PUSH
42974: EMPTY
42975: ST_TO_ADDR
// if x - r < 0 then
42976: LD_VAR 0 1
42980: PUSH
42981: LD_VAR 0 3
42985: MINUS
42986: PUSH
42987: LD_INT 0
42989: LESS
42990: IFFALSE 43002
// min_x := 0 else
42992: LD_ADDR_VAR 0 8
42996: PUSH
42997: LD_INT 0
42999: ST_TO_ADDR
43000: GO 43018
// min_x := x - r ;
43002: LD_ADDR_VAR 0 8
43006: PUSH
43007: LD_VAR 0 1
43011: PUSH
43012: LD_VAR 0 3
43016: MINUS
43017: ST_TO_ADDR
// if y - r < 0 then
43018: LD_VAR 0 2
43022: PUSH
43023: LD_VAR 0 3
43027: MINUS
43028: PUSH
43029: LD_INT 0
43031: LESS
43032: IFFALSE 43044
// min_y := 0 else
43034: LD_ADDR_VAR 0 7
43038: PUSH
43039: LD_INT 0
43041: ST_TO_ADDR
43042: GO 43060
// min_y := y - r ;
43044: LD_ADDR_VAR 0 7
43048: PUSH
43049: LD_VAR 0 2
43053: PUSH
43054: LD_VAR 0 3
43058: MINUS
43059: ST_TO_ADDR
// max_x := x + r ;
43060: LD_ADDR_VAR 0 9
43064: PUSH
43065: LD_VAR 0 1
43069: PUSH
43070: LD_VAR 0 3
43074: PLUS
43075: ST_TO_ADDR
// max_y := y + r ;
43076: LD_ADDR_VAR 0 10
43080: PUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_VAR 0 3
43090: PLUS
43091: ST_TO_ADDR
// for _x = min_x to max_x do
43092: LD_ADDR_VAR 0 5
43096: PUSH
43097: DOUBLE
43098: LD_VAR 0 8
43102: DEC
43103: ST_TO_ADDR
43104: LD_VAR 0 9
43108: PUSH
43109: FOR_TO
43110: IFFALSE 43211
// for _y = min_y to max_y do
43112: LD_ADDR_VAR 0 6
43116: PUSH
43117: DOUBLE
43118: LD_VAR 0 7
43122: DEC
43123: ST_TO_ADDR
43124: LD_VAR 0 10
43128: PUSH
43129: FOR_TO
43130: IFFALSE 43207
// begin if not ValidHex ( _x , _y ) then
43132: LD_VAR 0 5
43136: PPUSH
43137: LD_VAR 0 6
43141: PPUSH
43142: CALL_OW 488
43146: NOT
43147: IFFALSE 43151
// continue ;
43149: GO 43129
// if GetResourceTypeXY ( _x , _y ) then
43151: LD_VAR 0 5
43155: PPUSH
43156: LD_VAR 0 6
43160: PPUSH
43161: CALL_OW 283
43165: IFFALSE 43205
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43167: LD_ADDR_VAR 0 4
43171: PUSH
43172: LD_VAR 0 4
43176: PPUSH
43177: LD_VAR 0 4
43181: PUSH
43182: LD_INT 1
43184: PLUS
43185: PPUSH
43186: LD_VAR 0 5
43190: PUSH
43191: LD_VAR 0 6
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PPUSH
43200: CALL_OW 1
43204: ST_TO_ADDR
// end ;
43205: GO 43129
43207: POP
43208: POP
43209: GO 43109
43211: POP
43212: POP
// end ;
43213: LD_VAR 0 4
43217: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43218: LD_INT 0
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
// if not units then
43228: LD_VAR 0 1
43232: NOT
43233: IFFALSE 43237
// exit ;
43235: GO 43765
// result := UnitFilter ( units , [ f_ok ] ) ;
43237: LD_ADDR_VAR 0 3
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_INT 50
43249: PUSH
43250: EMPTY
43251: LIST
43252: PPUSH
43253: CALL_OW 72
43257: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43258: LD_ADDR_VAR 0 8
43262: PUSH
43263: LD_VAR 0 1
43267: PUSH
43268: LD_INT 1
43270: ARRAY
43271: PPUSH
43272: CALL_OW 255
43276: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43277: LD_ADDR_VAR 0 10
43281: PUSH
43282: LD_INT 29
43284: PUSH
43285: LD_INT 91
43287: PUSH
43288: LD_INT 49
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// if not result then
43296: LD_VAR 0 3
43300: NOT
43301: IFFALSE 43305
// exit ;
43303: GO 43765
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43305: LD_ADDR_VAR 0 5
43309: PUSH
43310: LD_INT 81
43312: PUSH
43313: LD_VAR 0 8
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PPUSH
43322: CALL_OW 69
43326: ST_TO_ADDR
// for i in result do
43327: LD_ADDR_VAR 0 4
43331: PUSH
43332: LD_VAR 0 3
43336: PUSH
43337: FOR_IN
43338: IFFALSE 43763
// begin tag := GetTag ( i ) + 1 ;
43340: LD_ADDR_VAR 0 9
43344: PUSH
43345: LD_VAR 0 4
43349: PPUSH
43350: CALL_OW 110
43354: PUSH
43355: LD_INT 1
43357: PLUS
43358: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43359: LD_ADDR_VAR 0 7
43363: PUSH
43364: LD_VAR 0 4
43368: PPUSH
43369: CALL_OW 250
43373: PPUSH
43374: LD_VAR 0 4
43378: PPUSH
43379: CALL_OW 251
43383: PPUSH
43384: LD_INT 4
43386: PPUSH
43387: CALL 42960 0 3
43391: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43392: LD_VAR 0 4
43396: PPUSH
43397: CALL_OW 247
43401: PUSH
43402: LD_INT 2
43404: EQUAL
43405: PUSH
43406: LD_VAR 0 7
43410: PUSH
43411: LD_INT 2
43413: GREATER
43414: AND
43415: PUSH
43416: LD_VAR 0 4
43420: PPUSH
43421: CALL_OW 264
43425: PUSH
43426: LD_VAR 0 10
43430: IN
43431: NOT
43432: AND
43433: IFFALSE 43472
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43435: LD_VAR 0 4
43439: PPUSH
43440: LD_VAR 0 7
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: PUSH
43449: LD_INT 1
43451: ARRAY
43452: PPUSH
43453: LD_VAR 0 7
43457: PUSH
43458: LD_INT 1
43460: ARRAY
43461: PUSH
43462: LD_INT 2
43464: ARRAY
43465: PPUSH
43466: CALL_OW 116
43470: GO 43761
// if path > tag then
43472: LD_VAR 0 2
43476: PUSH
43477: LD_VAR 0 9
43481: GREATER
43482: IFFALSE 43690
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43484: LD_ADDR_VAR 0 6
43488: PUSH
43489: LD_VAR 0 5
43493: PPUSH
43494: LD_INT 91
43496: PUSH
43497: LD_VAR 0 4
43501: PUSH
43502: LD_INT 8
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: PPUSH
43510: CALL_OW 72
43514: ST_TO_ADDR
// if nearEnemy then
43515: LD_VAR 0 6
43519: IFFALSE 43588
// begin if GetWeapon ( i ) = ru_time_lapser then
43521: LD_VAR 0 4
43525: PPUSH
43526: CALL_OW 264
43530: PUSH
43531: LD_INT 49
43533: EQUAL
43534: IFFALSE 43562
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43536: LD_VAR 0 4
43540: PPUSH
43541: LD_VAR 0 6
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: CALL_OW 74
43555: PPUSH
43556: CALL_OW 112
43560: GO 43586
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43562: LD_VAR 0 4
43566: PPUSH
43567: LD_VAR 0 6
43571: PPUSH
43572: LD_VAR 0 4
43576: PPUSH
43577: CALL_OW 74
43581: PPUSH
43582: CALL 44836 0 2
// end else
43586: GO 43688
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43588: LD_VAR 0 4
43592: PPUSH
43593: LD_VAR 0 2
43597: PUSH
43598: LD_VAR 0 9
43602: ARRAY
43603: PUSH
43604: LD_INT 1
43606: ARRAY
43607: PPUSH
43608: LD_VAR 0 2
43612: PUSH
43613: LD_VAR 0 9
43617: ARRAY
43618: PUSH
43619: LD_INT 2
43621: ARRAY
43622: PPUSH
43623: CALL_OW 297
43627: PUSH
43628: LD_INT 6
43630: GREATER
43631: IFFALSE 43674
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43633: LD_VAR 0 4
43637: PPUSH
43638: LD_VAR 0 2
43642: PUSH
43643: LD_VAR 0 9
43647: ARRAY
43648: PUSH
43649: LD_INT 1
43651: ARRAY
43652: PPUSH
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 9
43662: ARRAY
43663: PUSH
43664: LD_INT 2
43666: ARRAY
43667: PPUSH
43668: CALL_OW 114
43672: GO 43688
// SetTag ( i , tag ) ;
43674: LD_VAR 0 4
43678: PPUSH
43679: LD_VAR 0 9
43683: PPUSH
43684: CALL_OW 109
// end else
43688: GO 43761
// if enemy then
43690: LD_VAR 0 5
43694: IFFALSE 43761
// begin if GetWeapon ( i ) = ru_time_lapser then
43696: LD_VAR 0 4
43700: PPUSH
43701: CALL_OW 264
43705: PUSH
43706: LD_INT 49
43708: EQUAL
43709: IFFALSE 43737
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43711: LD_VAR 0 4
43715: PPUSH
43716: LD_VAR 0 5
43720: PPUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: CALL_OW 74
43730: PPUSH
43731: CALL_OW 112
43735: GO 43761
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43737: LD_VAR 0 4
43741: PPUSH
43742: LD_VAR 0 5
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: CALL_OW 74
43756: PPUSH
43757: CALL 44836 0 2
// end ; end ;
43761: GO 43337
43763: POP
43764: POP
// end ;
43765: LD_VAR 0 3
43769: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43770: LD_INT 0
43772: PPUSH
43773: PPUSH
43774: PPUSH
// if not unit or IsInUnit ( unit ) then
43775: LD_VAR 0 1
43779: NOT
43780: PUSH
43781: LD_VAR 0 1
43785: PPUSH
43786: CALL_OW 310
43790: OR
43791: IFFALSE 43795
// exit ;
43793: GO 43886
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43795: LD_ADDR_VAR 0 4
43799: PUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL_OW 250
43809: PPUSH
43810: LD_VAR 0 2
43814: PPUSH
43815: LD_INT 1
43817: PPUSH
43818: CALL_OW 272
43822: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43823: LD_ADDR_VAR 0 5
43827: PUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 251
43837: PPUSH
43838: LD_VAR 0 2
43842: PPUSH
43843: LD_INT 1
43845: PPUSH
43846: CALL_OW 273
43850: ST_TO_ADDR
// if ValidHex ( x , y ) then
43851: LD_VAR 0 4
43855: PPUSH
43856: LD_VAR 0 5
43860: PPUSH
43861: CALL_OW 488
43865: IFFALSE 43886
// ComTurnXY ( unit , x , y ) ;
43867: LD_VAR 0 1
43871: PPUSH
43872: LD_VAR 0 4
43876: PPUSH
43877: LD_VAR 0 5
43881: PPUSH
43882: CALL_OW 118
// end ;
43886: LD_VAR 0 3
43890: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43891: LD_INT 0
43893: PPUSH
43894: PPUSH
// result := false ;
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
// if not units then
43903: LD_VAR 0 2
43907: NOT
43908: IFFALSE 43912
// exit ;
43910: GO 43957
// for i in units do
43912: LD_ADDR_VAR 0 4
43916: PUSH
43917: LD_VAR 0 2
43921: PUSH
43922: FOR_IN
43923: IFFALSE 43955
// if See ( side , i ) then
43925: LD_VAR 0 1
43929: PPUSH
43930: LD_VAR 0 4
43934: PPUSH
43935: CALL_OW 292
43939: IFFALSE 43953
// begin result := true ;
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_INT 1
43948: ST_TO_ADDR
// exit ;
43949: POP
43950: POP
43951: GO 43957
// end ;
43953: GO 43922
43955: POP
43956: POP
// end ;
43957: LD_VAR 0 3
43961: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43962: LD_INT 0
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
// if not unit or not points then
43968: LD_VAR 0 1
43972: NOT
43973: PUSH
43974: LD_VAR 0 2
43978: NOT
43979: OR
43980: IFFALSE 43984
// exit ;
43982: GO 44074
// dist := 99999 ;
43984: LD_ADDR_VAR 0 5
43988: PUSH
43989: LD_INT 99999
43991: ST_TO_ADDR
// for i in points do
43992: LD_ADDR_VAR 0 4
43996: PUSH
43997: LD_VAR 0 2
44001: PUSH
44002: FOR_IN
44003: IFFALSE 44072
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44005: LD_ADDR_VAR 0 6
44009: PUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: LD_VAR 0 4
44019: PUSH
44020: LD_INT 1
44022: ARRAY
44023: PPUSH
44024: LD_VAR 0 4
44028: PUSH
44029: LD_INT 2
44031: ARRAY
44032: PPUSH
44033: CALL_OW 297
44037: ST_TO_ADDR
// if tmpDist < dist then
44038: LD_VAR 0 6
44042: PUSH
44043: LD_VAR 0 5
44047: LESS
44048: IFFALSE 44070
// begin result := i ;
44050: LD_ADDR_VAR 0 3
44054: PUSH
44055: LD_VAR 0 4
44059: ST_TO_ADDR
// dist := tmpDist ;
44060: LD_ADDR_VAR 0 5
44064: PUSH
44065: LD_VAR 0 6
44069: ST_TO_ADDR
// end ; end ;
44070: GO 44002
44072: POP
44073: POP
// end ;
44074: LD_VAR 0 3
44078: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44079: LD_INT 0
44081: PPUSH
// uc_side := side ;
44082: LD_ADDR_OWVAR 20
44086: PUSH
44087: LD_VAR 0 1
44091: ST_TO_ADDR
// uc_nation := 3 ;
44092: LD_ADDR_OWVAR 21
44096: PUSH
44097: LD_INT 3
44099: ST_TO_ADDR
// vc_chassis := 25 ;
44100: LD_ADDR_OWVAR 37
44104: PUSH
44105: LD_INT 25
44107: ST_TO_ADDR
// vc_engine := engine_siberite ;
44108: LD_ADDR_OWVAR 39
44112: PUSH
44113: LD_INT 3
44115: ST_TO_ADDR
// vc_control := control_computer ;
44116: LD_ADDR_OWVAR 38
44120: PUSH
44121: LD_INT 3
44123: ST_TO_ADDR
// vc_weapon := 59 ;
44124: LD_ADDR_OWVAR 40
44128: PUSH
44129: LD_INT 59
44131: ST_TO_ADDR
// result := CreateVehicle ;
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: CALL_OW 45
44141: ST_TO_ADDR
// SetDir ( result , d ) ;
44142: LD_VAR 0 5
44146: PPUSH
44147: LD_VAR 0 4
44151: PPUSH
44152: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44156: LD_VAR 0 5
44160: PPUSH
44161: LD_VAR 0 2
44165: PPUSH
44166: LD_VAR 0 3
44170: PPUSH
44171: LD_INT 0
44173: PPUSH
44174: CALL_OW 48
// end ;
44178: LD_VAR 0 5
44182: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44188: LD_ADDR_VAR 0 2
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44211: LD_VAR 0 1
44215: NOT
44216: PUSH
44217: LD_VAR 0 1
44221: PPUSH
44222: CALL_OW 264
44226: PUSH
44227: LD_INT 12
44229: PUSH
44230: LD_INT 51
44232: PUSH
44233: LD_INT 32
44235: PUSH
44236: LD_INT 89
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: IN
44245: NOT
44246: OR
44247: IFFALSE 44251
// exit ;
44249: GO 44349
// for i := 1 to 3 do
44251: LD_ADDR_VAR 0 3
44255: PUSH
44256: DOUBLE
44257: LD_INT 1
44259: DEC
44260: ST_TO_ADDR
44261: LD_INT 3
44263: PUSH
44264: FOR_TO
44265: IFFALSE 44347
// begin tmp := GetCargo ( cargo , i ) ;
44267: LD_ADDR_VAR 0 4
44271: PUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: LD_VAR 0 3
44281: PPUSH
44282: CALL_OW 289
44286: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44287: LD_ADDR_VAR 0 2
44291: PUSH
44292: LD_VAR 0 2
44296: PPUSH
44297: LD_VAR 0 3
44301: PPUSH
44302: LD_VAR 0 4
44306: PPUSH
44307: CALL_OW 1
44311: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44312: LD_ADDR_VAR 0 2
44316: PUSH
44317: LD_VAR 0 2
44321: PPUSH
44322: LD_INT 4
44324: PPUSH
44325: LD_VAR 0 2
44329: PUSH
44330: LD_INT 4
44332: ARRAY
44333: PUSH
44334: LD_VAR 0 4
44338: PLUS
44339: PPUSH
44340: CALL_OW 1
44344: ST_TO_ADDR
// end ;
44345: GO 44264
44347: POP
44348: POP
// end ;
44349: LD_VAR 0 2
44353: RET
// export function Length ( array ) ; begin
44354: LD_INT 0
44356: PPUSH
// result := array + 0 ;
44357: LD_ADDR_VAR 0 2
44361: PUSH
44362: LD_VAR 0 1
44366: PUSH
44367: LD_INT 0
44369: PLUS
44370: ST_TO_ADDR
// end ;
44371: LD_VAR 0 2
44375: RET
// export function PrepareArray ( array ) ; begin
44376: LD_INT 0
44378: PPUSH
// result := array diff 0 ;
44379: LD_ADDR_VAR 0 2
44383: PUSH
44384: LD_VAR 0 1
44388: PUSH
44389: LD_INT 0
44391: DIFF
44392: ST_TO_ADDR
// if not result [ 1 ] then
44393: LD_VAR 0 2
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: NOT
44402: IFFALSE 44422
// result := Delete ( result , 1 ) ;
44404: LD_ADDR_VAR 0 2
44408: PUSH
44409: LD_VAR 0 2
44413: PPUSH
44414: LD_INT 1
44416: PPUSH
44417: CALL_OW 3
44421: ST_TO_ADDR
// end ;
44422: LD_VAR 0 2
44426: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44427: LD_INT 0
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
// sibRocketRange := 25 ;
44433: LD_ADDR_VAR 0 6
44437: PUSH
44438: LD_INT 25
44440: ST_TO_ADDR
// result := false ;
44441: LD_ADDR_VAR 0 4
44445: PUSH
44446: LD_INT 0
44448: ST_TO_ADDR
// for i := 0 to 5 do
44449: LD_ADDR_VAR 0 5
44453: PUSH
44454: DOUBLE
44455: LD_INT 0
44457: DEC
44458: ST_TO_ADDR
44459: LD_INT 5
44461: PUSH
44462: FOR_TO
44463: IFFALSE 44530
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44465: LD_VAR 0 1
44469: PPUSH
44470: LD_VAR 0 5
44474: PPUSH
44475: LD_VAR 0 6
44479: PPUSH
44480: CALL_OW 272
44484: PPUSH
44485: LD_VAR 0 2
44489: PPUSH
44490: LD_VAR 0 5
44494: PPUSH
44495: LD_VAR 0 6
44499: PPUSH
44500: CALL_OW 273
44504: PPUSH
44505: LD_VAR 0 3
44509: PPUSH
44510: CALL_OW 309
44514: IFFALSE 44528
// begin result := true ;
44516: LD_ADDR_VAR 0 4
44520: PUSH
44521: LD_INT 1
44523: ST_TO_ADDR
// exit ;
44524: POP
44525: POP
44526: GO 44532
// end ;
44528: GO 44462
44530: POP
44531: POP
// end ;
44532: LD_VAR 0 4
44536: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44537: LD_INT 0
44539: PPUSH
44540: PPUSH
44541: PPUSH
// if btype = b_depot then
44542: LD_VAR 0 2
44546: PUSH
44547: LD_INT 0
44549: EQUAL
44550: IFFALSE 44562
// begin result := true ;
44552: LD_ADDR_VAR 0 3
44556: PUSH
44557: LD_INT 1
44559: ST_TO_ADDR
// exit ;
44560: GO 44678
// end ; pom := GetBase ( depot ) ;
44562: LD_ADDR_VAR 0 4
44566: PUSH
44567: LD_VAR 0 1
44571: PPUSH
44572: CALL_OW 274
44576: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44577: LD_ADDR_VAR 0 5
44581: PUSH
44582: LD_VAR 0 2
44586: PPUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: CALL_OW 248
44596: PPUSH
44597: CALL_OW 450
44601: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44602: LD_ADDR_VAR 0 3
44606: PUSH
44607: LD_VAR 0 4
44611: PPUSH
44612: LD_INT 1
44614: PPUSH
44615: CALL_OW 275
44619: PUSH
44620: LD_VAR 0 5
44624: PUSH
44625: LD_INT 1
44627: ARRAY
44628: GREATEREQUAL
44629: PUSH
44630: LD_VAR 0 4
44634: PPUSH
44635: LD_INT 2
44637: PPUSH
44638: CALL_OW 275
44642: PUSH
44643: LD_VAR 0 5
44647: PUSH
44648: LD_INT 2
44650: ARRAY
44651: GREATEREQUAL
44652: AND
44653: PUSH
44654: LD_VAR 0 4
44658: PPUSH
44659: LD_INT 3
44661: PPUSH
44662: CALL_OW 275
44666: PUSH
44667: LD_VAR 0 5
44671: PUSH
44672: LD_INT 3
44674: ARRAY
44675: GREATEREQUAL
44676: AND
44677: ST_TO_ADDR
// end ;
44678: LD_VAR 0 3
44682: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44683: LD_INT 0
44685: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44686: LD_VAR 0 1
44690: PPUSH
44691: LD_VAR 0 2
44695: PPUSH
44696: LD_INT 0
44698: PPUSH
44699: LD_INT 0
44701: PPUSH
44702: LD_INT 1
44704: PPUSH
44705: LD_INT 0
44707: PPUSH
44708: CALL_OW 587
// end ;
44712: LD_VAR 0 3
44716: RET
// export function CenterOnNow ( unit ) ; begin
44717: LD_INT 0
44719: PPUSH
// result := IsInUnit ( unit ) ;
44720: LD_ADDR_VAR 0 2
44724: PUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 310
44734: ST_TO_ADDR
// if not result then
44735: LD_VAR 0 2
44739: NOT
44740: IFFALSE 44752
// result := unit ;
44742: LD_ADDR_VAR 0 2
44746: PUSH
44747: LD_VAR 0 1
44751: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44752: LD_VAR 0 1
44756: PPUSH
44757: CALL_OW 87
// end ;
44761: LD_VAR 0 2
44765: RET
// export function ComMoveHex ( unit , hex ) ; begin
44766: LD_INT 0
44768: PPUSH
// if not hex then
44769: LD_VAR 0 2
44773: NOT
44774: IFFALSE 44778
// exit ;
44776: GO 44831
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44778: LD_VAR 0 2
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PPUSH
44787: LD_VAR 0 2
44791: PUSH
44792: LD_INT 2
44794: ARRAY
44795: PPUSH
44796: CALL_OW 428
44800: IFFALSE 44804
// exit ;
44802: GO 44831
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44804: LD_VAR 0 1
44808: PPUSH
44809: LD_VAR 0 2
44813: PUSH
44814: LD_INT 1
44816: ARRAY
44817: PPUSH
44818: LD_VAR 0 2
44822: PUSH
44823: LD_INT 2
44825: ARRAY
44826: PPUSH
44827: CALL_OW 111
// end ;
44831: LD_VAR 0 3
44835: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44836: LD_INT 0
44838: PPUSH
44839: PPUSH
44840: PPUSH
// if not unit or not enemy then
44841: LD_VAR 0 1
44845: NOT
44846: PUSH
44847: LD_VAR 0 2
44851: NOT
44852: OR
44853: IFFALSE 44857
// exit ;
44855: GO 44981
// x := GetX ( enemy ) ;
44857: LD_ADDR_VAR 0 4
44861: PUSH
44862: LD_VAR 0 2
44866: PPUSH
44867: CALL_OW 250
44871: ST_TO_ADDR
// y := GetY ( enemy ) ;
44872: LD_ADDR_VAR 0 5
44876: PUSH
44877: LD_VAR 0 2
44881: PPUSH
44882: CALL_OW 251
44886: ST_TO_ADDR
// if ValidHex ( x , y ) then
44887: LD_VAR 0 4
44891: PPUSH
44892: LD_VAR 0 5
44896: PPUSH
44897: CALL_OW 488
44901: IFFALSE 44981
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44903: LD_VAR 0 2
44907: PPUSH
44908: CALL_OW 247
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: IN
44923: PUSH
44924: LD_VAR 0 1
44928: PPUSH
44929: CALL_OW 255
44933: PPUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: CALL_OW 292
44943: OR
44944: IFFALSE 44962
// ComAttackUnit ( unit , enemy ) else
44946: LD_VAR 0 1
44950: PPUSH
44951: LD_VAR 0 2
44955: PPUSH
44956: CALL_OW 115
44960: GO 44981
// ComAgressiveMove ( unit , x , y ) ;
44962: LD_VAR 0 1
44966: PPUSH
44967: LD_VAR 0 4
44971: PPUSH
44972: LD_VAR 0 5
44976: PPUSH
44977: CALL_OW 114
// end ;
44981: LD_VAR 0 3
44985: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44986: LD_INT 0
44988: PPUSH
44989: PPUSH
44990: PPUSH
// list := AreaToList ( area , 0 ) ;
44991: LD_ADDR_VAR 0 5
44995: PUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: LD_INT 0
45003: PPUSH
45004: CALL_OW 517
45008: ST_TO_ADDR
// if not list then
45009: LD_VAR 0 5
45013: NOT
45014: IFFALSE 45018
// exit ;
45016: GO 45148
// if all then
45018: LD_VAR 0 2
45022: IFFALSE 45110
// begin for i := 1 to list [ 1 ] do
45024: LD_ADDR_VAR 0 4
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_VAR 0 5
45038: PUSH
45039: LD_INT 1
45041: ARRAY
45042: PUSH
45043: FOR_TO
45044: IFFALSE 45106
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45046: LD_ADDR_VAR 0 3
45050: PUSH
45051: LD_VAR 0 3
45055: PPUSH
45056: LD_VAR 0 3
45060: PUSH
45061: LD_INT 1
45063: PLUS
45064: PPUSH
45065: LD_VAR 0 5
45069: PUSH
45070: LD_INT 1
45072: ARRAY
45073: PUSH
45074: LD_VAR 0 4
45078: ARRAY
45079: PUSH
45080: LD_VAR 0 5
45084: PUSH
45085: LD_INT 2
45087: ARRAY
45088: PUSH
45089: LD_VAR 0 4
45093: ARRAY
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PPUSH
45099: CALL_OW 1
45103: ST_TO_ADDR
45104: GO 45043
45106: POP
45107: POP
// exit ;
45108: GO 45148
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_VAR 0 5
45119: PUSH
45120: LD_INT 1
45122: ARRAY
45123: PUSH
45124: LD_INT 1
45126: ARRAY
45127: PUSH
45128: LD_VAR 0 5
45132: PUSH
45133: LD_INT 2
45135: ARRAY
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: ST_TO_ADDR
// end ;
45148: LD_VAR 0 3
45152: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45153: LD_INT 0
45155: PPUSH
45156: PPUSH
// list := AreaToList ( area , 0 ) ;
45157: LD_ADDR_VAR 0 4
45161: PUSH
45162: LD_VAR 0 1
45166: PPUSH
45167: LD_INT 0
45169: PPUSH
45170: CALL_OW 517
45174: ST_TO_ADDR
// if not list then
45175: LD_VAR 0 4
45179: NOT
45180: IFFALSE 45184
// exit ;
45182: GO 45225
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_VAR 0 4
45193: PUSH
45194: LD_INT 1
45196: ARRAY
45197: PUSH
45198: LD_INT 1
45200: ARRAY
45201: PUSH
45202: LD_VAR 0 4
45206: PUSH
45207: LD_INT 2
45209: ARRAY
45210: PUSH
45211: LD_INT 1
45213: ARRAY
45214: PUSH
45215: LD_VAR 0 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// end ;
45225: LD_VAR 0 3
45229: RET
// export function First ( array ) ; begin
45230: LD_INT 0
45232: PPUSH
// if not array then
45233: LD_VAR 0 1
45237: NOT
45238: IFFALSE 45242
// exit ;
45240: GO 45256
// result := array [ 1 ] ;
45242: LD_ADDR_VAR 0 2
45246: PUSH
45247: LD_VAR 0 1
45251: PUSH
45252: LD_INT 1
45254: ARRAY
45255: ST_TO_ADDR
// end ;
45256: LD_VAR 0 2
45260: RET
// export function Last ( array ) ; begin
45261: LD_INT 0
45263: PPUSH
// if not array then
45264: LD_VAR 0 1
45268: NOT
45269: IFFALSE 45273
// exit ;
45271: GO 45289
// result := array [ array ] ;
45273: LD_ADDR_VAR 0 2
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: LD_VAR 0 1
45287: ARRAY
45288: ST_TO_ADDR
// end ;
45289: LD_VAR 0 2
45293: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
// result := [ ] ;
45298: LD_ADDR_VAR 0 5
45302: PUSH
45303: EMPTY
45304: ST_TO_ADDR
// if not array then
45305: LD_VAR 0 1
45309: NOT
45310: IFFALSE 45314
// exit ;
45312: GO 45426
// for i := 1 to array do
45314: LD_ADDR_VAR 0 6
45318: PUSH
45319: DOUBLE
45320: LD_INT 1
45322: DEC
45323: ST_TO_ADDR
45324: LD_VAR 0 1
45328: PUSH
45329: FOR_TO
45330: IFFALSE 45424
// if array [ i ] [ index ] = value then
45332: LD_VAR 0 1
45336: PUSH
45337: LD_VAR 0 6
45341: ARRAY
45342: PUSH
45343: LD_VAR 0 2
45347: ARRAY
45348: PUSH
45349: LD_VAR 0 3
45353: EQUAL
45354: IFFALSE 45422
// begin if indexColumn then
45356: LD_VAR 0 4
45360: IFFALSE 45396
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45362: LD_ADDR_VAR 0 5
45366: PUSH
45367: LD_VAR 0 5
45371: PPUSH
45372: LD_VAR 0 1
45376: PUSH
45377: LD_VAR 0 6
45381: ARRAY
45382: PUSH
45383: LD_VAR 0 4
45387: ARRAY
45388: PPUSH
45389: CALL 40614 0 2
45393: ST_TO_ADDR
45394: GO 45422
// result := Join ( result , array [ i ] ) ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_VAR 0 5
45405: PPUSH
45406: LD_VAR 0 1
45410: PUSH
45411: LD_VAR 0 6
45415: ARRAY
45416: PPUSH
45417: CALL 40614 0 2
45421: ST_TO_ADDR
// end ;
45422: GO 45329
45424: POP
45425: POP
// end ;
45426: LD_VAR 0 5
45430: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45431: LD_INT 0
45433: PPUSH
// if not vehicles or not parkingPoint then
45434: LD_VAR 0 1
45438: NOT
45439: PUSH
45440: LD_VAR 0 2
45444: NOT
45445: OR
45446: IFFALSE 45450
// exit ;
45448: GO 45548
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45450: LD_ADDR_VAR 0 1
45454: PUSH
45455: LD_VAR 0 1
45459: PPUSH
45460: LD_INT 50
45462: PUSH
45463: EMPTY
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: LD_INT 92
45471: PUSH
45472: LD_VAR 0 2
45476: PUSH
45477: LD_INT 1
45479: ARRAY
45480: PUSH
45481: LD_VAR 0 2
45485: PUSH
45486: LD_INT 2
45488: ARRAY
45489: PUSH
45490: LD_INT 8
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PPUSH
45507: CALL_OW 72
45511: ST_TO_ADDR
// if not vehicles then
45512: LD_VAR 0 1
45516: NOT
45517: IFFALSE 45521
// exit ;
45519: GO 45548
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45521: LD_VAR 0 1
45525: PPUSH
45526: LD_VAR 0 2
45530: PUSH
45531: LD_INT 1
45533: ARRAY
45534: PPUSH
45535: LD_VAR 0 2
45539: PUSH
45540: LD_INT 2
45542: ARRAY
45543: PPUSH
45544: CALL_OW 111
// end ;
45548: LD_VAR 0 3
45552: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45553: LD_INT 0
45555: PPUSH
45556: PPUSH
45557: PPUSH
// if not side or not area then
45558: LD_VAR 0 1
45562: NOT
45563: PUSH
45564: LD_VAR 0 2
45568: NOT
45569: OR
45570: IFFALSE 45574
// exit ;
45572: GO 45693
// tmp := AreaToList ( area , 0 ) ;
45574: LD_ADDR_VAR 0 5
45578: PUSH
45579: LD_VAR 0 2
45583: PPUSH
45584: LD_INT 0
45586: PPUSH
45587: CALL_OW 517
45591: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45592: LD_ADDR_VAR 0 4
45596: PUSH
45597: DOUBLE
45598: LD_INT 1
45600: DEC
45601: ST_TO_ADDR
45602: LD_VAR 0 5
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PUSH
45611: FOR_TO
45612: IFFALSE 45691
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45614: LD_VAR 0 5
45618: PUSH
45619: LD_INT 1
45621: ARRAY
45622: PUSH
45623: LD_VAR 0 4
45627: ARRAY
45628: PPUSH
45629: LD_VAR 0 5
45633: PUSH
45634: LD_INT 2
45636: ARRAY
45637: PUSH
45638: LD_VAR 0 4
45642: ARRAY
45643: PPUSH
45644: CALL_OW 351
45648: IFFALSE 45689
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45650: LD_VAR 0 5
45654: PUSH
45655: LD_INT 1
45657: ARRAY
45658: PUSH
45659: LD_VAR 0 4
45663: ARRAY
45664: PPUSH
45665: LD_VAR 0 5
45669: PUSH
45670: LD_INT 2
45672: ARRAY
45673: PUSH
45674: LD_VAR 0 4
45678: ARRAY
45679: PPUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 244
// end ;
45689: GO 45611
45691: POP
45692: POP
// end ; end_of_file
45693: LD_VAR 0 3
45697: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45698: LD_INT 0
45700: PPUSH
45701: PPUSH
// disable ( mpActive ) ;
45702: LD_INT 100
45704: DISABLE_MARKED
// disable ( mpWin ) ;
45705: LD_INT 101
45707: DISABLE_MARKED
// disable ( mpLose ) ;
45708: LD_INT 102
45710: DISABLE_MARKED
// mpGameType := 0 ;
45711: LD_ADDR_EXP 1
45715: PUSH
45716: LD_INT 0
45718: ST_TO_ADDR
// mpGameSettings := [ ] ;
45719: LD_ADDR_EXP 4
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45726: LD_ADDR_EXP 2
45730: PUSH
45731: EMPTY
45732: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45733: LD_ADDR_EXP 3
45737: PUSH
45738: EMPTY
45739: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45740: LD_ADDR_EXP 27
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45755: LD_ADDR_EXP 10
45759: PUSH
45760: EMPTY
45761: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45762: LD_ADDR_EXP 11
45766: PUSH
45767: EMPTY
45768: ST_TO_ADDR
// mpDepots := [ ] ;
45769: LD_ADDR_EXP 12
45773: PUSH
45774: EMPTY
45775: ST_TO_ADDR
// mpBuildings := [ ] ;
45776: LD_ADDR_EXP 15
45780: PUSH
45781: EMPTY
45782: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45783: LD_ADDR_EXP 16
45787: PUSH
45788: EMPTY
45789: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45790: LD_ADDR_EXP 17
45794: PUSH
45795: EMPTY
45796: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45797: LD_ADDR_EXP 18
45801: PUSH
45802: EMPTY
45803: ST_TO_ADDR
// mpStartingResources := [ ] ;
45804: LD_ADDR_EXP 13
45808: PUSH
45809: EMPTY
45810: ST_TO_ADDR
// mpStartPos := [ ] ;
45811: LD_ADDR_EXP 19
45815: PUSH
45816: EMPTY
45817: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45818: LD_ADDR_EXP 20
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45827: LD_ADDR_EXP 21
45831: PUSH
45832: EMPTY
45833: ST_TO_ADDR
// mpApemans := [ ] ;
45834: LD_ADDR_EXP 28
45838: PUSH
45839: EMPTY
45840: ST_TO_ADDR
// mpApemansArea := [ ] ;
45841: LD_ADDR_EXP 29
45845: PUSH
45846: EMPTY
45847: ST_TO_ADDR
// mpRespawn := [ ] ;
45848: LD_ADDR_EXP 30
45852: PUSH
45853: EMPTY
45854: ST_TO_ADDR
// mpKingArea := 0 ;
45855: LD_ADDR_EXP 31
45859: PUSH
45860: LD_INT 0
45862: ST_TO_ADDR
// mpPoints := [ ] ;
45863: LD_ADDR_EXP 32
45867: PUSH
45868: EMPTY
45869: ST_TO_ADDR
// mpVehicles := 0 ;
45870: LD_ADDR_EXP 33
45874: PUSH
45875: LD_INT 0
45877: ST_TO_ADDR
// mpShipments := 0 ;
45878: LD_ADDR_EXP 25
45882: PUSH
45883: LD_INT 0
45885: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45886: LD_ADDR_EXP 37
45890: PUSH
45891: EMPTY
45892: PUSH
45893: EMPTY
45894: PUSH
45895: EMPTY
45896: PUSH
45897: EMPTY
45898: PUSH
45899: EMPTY
45900: PUSH
45901: EMPTY
45902: PUSH
45903: EMPTY
45904: PUSH
45905: EMPTY
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// mpEmissions := 0 ;
45917: LD_ADDR_EXP 34
45921: PUSH
45922: LD_INT 0
45924: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45925: LD_ADDR_EXP 23
45929: PUSH
45930: LD_INT 3
45932: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45933: LD_ADDR_EXP 22
45937: PUSH
45938: LD_INT 15
45940: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45941: LD_ADDR_EXP 35
45945: PUSH
45946: LD_INT 0
45948: ST_TO_ADDR
// mpGameActive := false ;
45949: LD_ADDR_EXP 36
45953: PUSH
45954: LD_INT 0
45956: ST_TO_ADDR
// mpBlockRespThread := false ;
45957: LD_ADDR_EXP 38
45961: PUSH
45962: LD_INT 0
45964: ST_TO_ADDR
// for i := 1 to 32 do
45965: LD_ADDR_VAR 0 2
45969: PUSH
45970: DOUBLE
45971: LD_INT 1
45973: DEC
45974: ST_TO_ADDR
45975: LD_INT 32
45977: PUSH
45978: FOR_TO
45979: IFFALSE 46006
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45981: LD_ADDR_EXP 4
45985: PUSH
45986: LD_EXP 4
45990: PPUSH
45991: LD_VAR 0 2
45995: PPUSH
45996: LD_INT 0
45998: PPUSH
45999: CALL_OW 1
46003: ST_TO_ADDR
46004: GO 45978
46006: POP
46007: POP
// end ;
46008: LD_VAR 0 1
46012: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46013: LD_INT 0
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46029: LD_ADDR_VAR 0 14
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// for i in gameTypes do
46048: LD_ADDR_VAR 0 2
46052: PUSH
46053: LD_VAR 0 14
46057: PUSH
46058: FOR_IN
46059: IFFALSE 46068
// disable ( i ) ;
46061: LD_VAR 0 2
46065: DISABLE_MARKED
46066: GO 46058
46068: POP
46069: POP
// if Multiplayer then
46070: LD_OWVAR 4
46074: IFFALSE 46258
// begin mpGameType := mp_game_type ;
46076: LD_ADDR_EXP 1
46080: PUSH
46081: LD_OWVAR 6
46085: ST_TO_ADDR
// your_side := mp_player_side ;
46086: LD_ADDR_OWVAR 2
46090: PUSH
46091: LD_OWVAR 7
46095: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46096: LD_ADDR_EXP 5
46100: PUSH
46101: LD_OWVAR 17
46105: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46106: LD_ADDR_EXP 6
46110: PUSH
46111: LD_OWVAR 15
46115: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46116: LD_ADDR_EXP 7
46120: PUSH
46121: LD_OWVAR 16
46125: ST_TO_ADDR
// mpTeams := mp_teams ;
46126: LD_ADDR_EXP 8
46130: PUSH
46131: LD_OWVAR 12
46135: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46136: LD_ADDR_VAR 0 2
46140: PUSH
46141: DOUBLE
46142: LD_INT 1
46144: DEC
46145: ST_TO_ADDR
46146: LD_EXP 2
46150: PPUSH
46151: CALL 5005 0 1
46155: PUSH
46156: FOR_TO
46157: IFFALSE 46233
// begin setting := mpGameSettingsKeys [ i ] ;
46159: LD_ADDR_VAR 0 12
46163: PUSH
46164: LD_EXP 2
46168: PUSH
46169: LD_VAR 0 2
46173: ARRAY
46174: ST_TO_ADDR
// if setting then
46175: LD_VAR 0 12
46179: IFFALSE 46231
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46181: LD_ADDR_EXP 4
46185: PUSH
46186: LD_EXP 4
46190: PPUSH
46191: LD_VAR 0 2
46195: PPUSH
46196: LD_EXP 3
46200: PUSH
46201: LD_VAR 0 2
46205: ARRAY
46206: PUSH
46207: LD_VAR 0 2
46211: PUSH
46212: LD_INT 1
46214: MINUS
46215: PPUSH
46216: CALL_OW 426
46220: PUSH
46221: LD_INT 1
46223: PLUS
46224: ARRAY
46225: PPUSH
46226: CALL_OW 1
46230: ST_TO_ADDR
// end ;
46231: GO 46156
46233: POP
46234: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46235: LD_ADDR_EXP 9
46239: PUSH
46240: LD_EXP 6
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: DIFF
46251: PUSH
46252: LD_INT 1
46254: GREATER
46255: ST_TO_ADDR
// end else
46256: GO 46258
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46258: LD_EXP 1
46262: PPUSH
46263: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
46267: LD_EXP 16
46271: PPUSH
46272: CALL 5005 0 1
46276: IFFALSE 46307
// begin for i in mpMarkedAreas do
46278: LD_ADDR_VAR 0 2
46282: PUSH
46283: LD_EXP 16
46287: PUSH
46288: FOR_IN
46289: IFFALSE 46305
// SetAreaMapShow ( i , 0 ) ;
46291: LD_VAR 0 2
46295: PPUSH
46296: LD_INT 0
46298: PPUSH
46299: CALL_OW 424
46303: GO 46288
46305: POP
46306: POP
// end ; for i := 1 to 8 do
46307: LD_ADDR_VAR 0 2
46311: PUSH
46312: DOUBLE
46313: LD_INT 1
46315: DEC
46316: ST_TO_ADDR
46317: LD_INT 8
46319: PUSH
46320: FOR_TO
46321: IFFALSE 47537
// begin if not mpSidePositions [ i ] then
46323: LD_EXP 5
46327: PUSH
46328: LD_VAR 0 2
46332: ARRAY
46333: NOT
46334: IFFALSE 46338
// continue ;
46336: GO 46320
// side := i ;
46338: LD_ADDR_VAR 0 7
46342: PUSH
46343: LD_VAR 0 2
46347: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46348: LD_ADDR_VAR 0 9
46352: PUSH
46353: LD_EXP 7
46357: PUSH
46358: LD_VAR 0 2
46362: ARRAY
46363: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46364: LD_ADDR_VAR 0 8
46368: PUSH
46369: LD_EXP 5
46373: PUSH
46374: LD_VAR 0 2
46378: ARRAY
46379: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46380: LD_EXP 10
46384: PPUSH
46385: CALL 5005 0 1
46389: IFFALSE 46466
// begin for j in mpOilDeposits [ pos ] do
46391: LD_ADDR_VAR 0 3
46395: PUSH
46396: LD_EXP 10
46400: PUSH
46401: LD_VAR 0 8
46405: ARRAY
46406: PUSH
46407: FOR_IN
46408: IFFALSE 46464
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46410: LD_VAR 0 3
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PPUSH
46419: LD_VAR 0 3
46423: PUSH
46424: LD_INT 2
46426: ARRAY
46427: PPUSH
46428: LD_INT 2
46430: PPUSH
46431: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46435: LD_VAR 0 3
46439: PUSH
46440: LD_INT 1
46442: ARRAY
46443: PPUSH
46444: LD_VAR 0 3
46448: PUSH
46449: LD_INT 2
46451: ARRAY
46452: PPUSH
46453: LD_VAR 0 7
46457: PPUSH
46458: CALL_OW 441
// end ;
46462: GO 46407
46464: POP
46465: POP
// end ; if Count ( mpSibDeposits ) then
46466: LD_EXP 11
46470: PPUSH
46471: CALL 5005 0 1
46475: IFFALSE 46552
// begin for j in mpSibDeposits [ pos ] do
46477: LD_ADDR_VAR 0 3
46481: PUSH
46482: LD_EXP 11
46486: PUSH
46487: LD_VAR 0 8
46491: ARRAY
46492: PUSH
46493: FOR_IN
46494: IFFALSE 46550
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46496: LD_VAR 0 3
46500: PUSH
46501: LD_INT 1
46503: ARRAY
46504: PPUSH
46505: LD_VAR 0 3
46509: PUSH
46510: LD_INT 2
46512: ARRAY
46513: PPUSH
46514: LD_INT 3
46516: PPUSH
46517: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46521: LD_VAR 0 3
46525: PUSH
46526: LD_INT 1
46528: ARRAY
46529: PPUSH
46530: LD_VAR 0 3
46534: PUSH
46535: LD_INT 2
46537: ARRAY
46538: PPUSH
46539: LD_VAR 0 7
46543: PPUSH
46544: CALL_OW 441
// end ;
46548: GO 46493
46550: POP
46551: POP
// end ; InitBc ;
46552: CALL_OW 21
// InitUc ;
46556: CALL_OW 18
// uc_side := side ;
46560: LD_ADDR_OWVAR 20
46564: PUSH
46565: LD_VAR 0 7
46569: ST_TO_ADDR
// uc_nation := nation ;
46570: LD_ADDR_OWVAR 21
46574: PUSH
46575: LD_VAR 0 9
46579: ST_TO_ADDR
// if Count ( mpDepots ) then
46580: LD_EXP 12
46584: PPUSH
46585: CALL 5005 0 1
46589: IFFALSE 46759
// begin bc_level := 0 ;
46591: LD_ADDR_OWVAR 43
46595: PUSH
46596: LD_INT 0
46598: ST_TO_ADDR
// bc_type := b_depot ;
46599: LD_ADDR_OWVAR 42
46603: PUSH
46604: LD_INT 0
46606: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46607: LD_ADDR_VAR 0 4
46611: PUSH
46612: LD_EXP 12
46616: PUSH
46617: LD_VAR 0 8
46621: ARRAY
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PPUSH
46627: LD_EXP 12
46631: PUSH
46632: LD_VAR 0 8
46636: ARRAY
46637: PUSH
46638: LD_INT 2
46640: ARRAY
46641: PPUSH
46642: LD_EXP 12
46646: PUSH
46647: LD_VAR 0 8
46651: ARRAY
46652: PUSH
46653: LD_INT 3
46655: ARRAY
46656: PPUSH
46657: CALL_OW 47
46661: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46662: LD_VAR 0 4
46666: PPUSH
46667: LD_STRING @
46669: PUSH
46670: LD_VAR 0 7
46674: STR
46675: PPUSH
46676: CALL_OW 500
// SetTag ( b , side ) ;
46680: LD_VAR 0 4
46684: PPUSH
46685: LD_VAR 0 7
46689: PPUSH
46690: CALL_OW 109
// if Count ( mpStartingResources ) then
46694: LD_EXP 13
46698: PPUSH
46699: CALL 5005 0 1
46703: IFFALSE 46757
// begin for j := 1 to mpStartingResources do
46705: LD_ADDR_VAR 0 3
46709: PUSH
46710: DOUBLE
46711: LD_INT 1
46713: DEC
46714: ST_TO_ADDR
46715: LD_EXP 13
46719: PUSH
46720: FOR_TO
46721: IFFALSE 46755
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46723: LD_VAR 0 4
46727: PPUSH
46728: CALL_OW 274
46732: PPUSH
46733: LD_VAR 0 3
46737: PPUSH
46738: LD_EXP 13
46742: PUSH
46743: LD_VAR 0 3
46747: ARRAY
46748: PPUSH
46749: CALL_OW 277
46753: GO 46720
46755: POP
46756: POP
// end ; end else
46757: GO 46906
// if Count ( mpStartingResources ) then
46759: LD_EXP 13
46763: PPUSH
46764: CALL 5005 0 1
46768: IFFALSE 46906
// begin for j := 1 to mpStartingResources do
46770: LD_ADDR_VAR 0 3
46774: PUSH
46775: DOUBLE
46776: LD_INT 1
46778: DEC
46779: ST_TO_ADDR
46780: LD_EXP 13
46784: PUSH
46785: FOR_TO
46786: IFFALSE 46904
// begin resources := mpStartingResources [ j ] ;
46788: LD_ADDR_VAR 0 13
46792: PUSH
46793: LD_EXP 13
46797: PUSH
46798: LD_VAR 0 3
46802: ARRAY
46803: ST_TO_ADDR
// repeat if resources >= 50 then
46804: LD_VAR 0 13
46808: PUSH
46809: LD_INT 50
46811: GREATEREQUAL
46812: IFFALSE 46858
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46814: LD_VAR 0 3
46818: PPUSH
46819: LD_INT 5
46821: PPUSH
46822: LD_VAR 0 5
46826: PPUSH
46827: LD_VAR 0 6
46831: PPUSH
46832: LD_INT 4
46834: PPUSH
46835: LD_INT 0
46837: PPUSH
46838: CALL_OW 60
// resources := resources - 50 ;
46842: LD_ADDR_VAR 0 13
46846: PUSH
46847: LD_VAR 0 13
46851: PUSH
46852: LD_INT 50
46854: MINUS
46855: ST_TO_ADDR
// end else
46856: GO 46892
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46858: LD_VAR 0 3
46862: PPUSH
46863: LD_VAR 0 13
46867: PUSH
46868: LD_INT 10
46870: DIV
46871: PPUSH
46872: LD_VAR 0 5
46876: PPUSH
46877: LD_VAR 0 6
46881: PPUSH
46882: LD_INT 4
46884: PPUSH
46885: LD_INT 0
46887: PPUSH
46888: CALL_OW 60
// until resources <= 0 ;
46892: LD_VAR 0 13
46896: PUSH
46897: LD_INT 0
46899: LESSEQUAL
46900: IFFALSE 46804
// end ;
46902: GO 46785
46904: POP
46905: POP
// end ; if Count ( mpBuildings ) then
46906: LD_EXP 15
46910: PPUSH
46911: CALL 5005 0 1
46915: IFFALSE 46993
// begin for j in mpBuildings [ pos ] do
46917: LD_ADDR_VAR 0 3
46921: PUSH
46922: LD_EXP 15
46926: PUSH
46927: LD_VAR 0 8
46931: ARRAY
46932: PUSH
46933: FOR_IN
46934: IFFALSE 46991
// begin bc_level := 0 ;
46936: LD_ADDR_OWVAR 43
46940: PUSH
46941: LD_INT 0
46943: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46944: LD_ADDR_OWVAR 42
46948: PUSH
46949: LD_VAR 0 3
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46958: LD_VAR 0 3
46962: PUSH
46963: LD_INT 2
46965: ARRAY
46966: PPUSH
46967: LD_VAR 0 3
46971: PUSH
46972: LD_INT 3
46974: ARRAY
46975: PPUSH
46976: LD_VAR 0 3
46980: PUSH
46981: LD_INT 4
46983: ARRAY
46984: PPUSH
46985: CALL_OW 47
// end ;
46989: GO 46933
46991: POP
46992: POP
// end ; if mpBattleFlag > - 1 then
46993: LD_EXP 20
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: GREATER
47002: IFFALSE 47161
// begin x := mpStartPos [ pos ] [ 1 ] ;
47004: LD_ADDR_VAR 0 5
47008: PUSH
47009: LD_EXP 19
47013: PUSH
47014: LD_VAR 0 8
47018: ARRAY
47019: PUSH
47020: LD_INT 1
47022: ARRAY
47023: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47024: LD_ADDR_VAR 0 6
47028: PUSH
47029: LD_EXP 19
47033: PUSH
47034: LD_VAR 0 8
47038: ARRAY
47039: PUSH
47040: LD_INT 2
47042: ARRAY
47043: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47044: LD_VAR 0 5
47048: PPUSH
47049: LD_VAR 0 6
47053: PPUSH
47054: LD_INT 12
47056: PPUSH
47057: LD_INT 2
47059: PPUSH
47060: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47064: LD_ADDR_EXP 21
47068: PUSH
47069: LD_EXP 21
47073: PPUSH
47074: LD_VAR 0 7
47078: PPUSH
47079: LD_VAR 0 7
47083: PPUSH
47084: LD_VAR 0 5
47088: PPUSH
47089: LD_VAR 0 6
47093: PPUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 100
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 70
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 40
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 10
47126: PUSH
47127: LD_INT 25
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 20
47136: PUSH
47137: LD_INT 100
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: PPUSH
47151: CALL_OW 418
47155: PPUSH
47156: CALL_OW 1
47160: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47161: LD_EXP 24
47165: PUSH
47166: LD_INT 20
47168: PPUSH
47169: LD_VAR 0 7
47173: PPUSH
47174: CALL_OW 321
47178: PUSH
47179: LD_INT 1
47181: EQUAL
47182: AND
47183: IFFALSE 47200
// SetTech ( tech_SibDet , side , state_researched ) ;
47185: LD_INT 20
47187: PPUSH
47188: LD_VAR 0 7
47192: PPUSH
47193: LD_INT 2
47195: PPUSH
47196: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47200: LD_INT 24
47202: PPUSH
47203: LD_VAR 0 7
47207: PPUSH
47208: LD_INT 0
47210: PPUSH
47211: CALL_OW 322
// if mpSibBomb = 1 then
47215: LD_EXP 26
47219: PUSH
47220: LD_INT 1
47222: EQUAL
47223: IFFALSE 47242
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47225: LD_INT 25
47227: PPUSH
47228: LD_VAR 0 7
47232: PPUSH
47233: LD_INT 1
47235: PPUSH
47236: CALL_OW 322
// end else
47240: GO 47257
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47242: LD_INT 25
47244: PPUSH
47245: LD_VAR 0 7
47249: PPUSH
47250: LD_INT 0
47252: PPUSH
47253: CALL_OW 322
// end ; if mpVehicles then
47257: LD_EXP 33
47261: IFFALSE 47360
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47263: LD_ADDR_VAR 0 3
47267: PUSH
47268: LD_VAR 0 7
47272: PPUSH
47273: LD_VAR 0 9
47277: PPUSH
47278: LD_EXP 33
47282: PPUSH
47283: CALL 48447 0 3
47287: PUSH
47288: FOR_IN
47289: IFFALSE 47358
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47291: LD_VAR 0 3
47295: PPUSH
47296: LD_INT 0
47298: PPUSH
47299: LD_INT 5
47301: PPUSH
47302: CALL_OW 12
47306: PPUSH
47307: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47311: LD_VAR 0 3
47315: PPUSH
47316: LD_EXP 19
47320: PUSH
47321: LD_VAR 0 8
47325: ARRAY
47326: PUSH
47327: LD_INT 1
47329: ARRAY
47330: PPUSH
47331: LD_EXP 19
47335: PUSH
47336: LD_VAR 0 8
47340: ARRAY
47341: PUSH
47342: LD_INT 2
47344: ARRAY
47345: PPUSH
47346: LD_INT 12
47348: PPUSH
47349: LD_INT 0
47351: PPUSH
47352: CALL_OW 50
// end ;
47356: GO 47288
47358: POP
47359: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47360: LD_ADDR_VAR 0 11
47364: PUSH
47365: LD_VAR 0 7
47369: PPUSH
47370: LD_VAR 0 9
47374: PPUSH
47375: LD_EXP 22
47379: PPUSH
47380: LD_EXP 23
47384: PPUSH
47385: CALL 47949 0 4
47389: ST_TO_ADDR
// for j in team do
47390: LD_ADDR_VAR 0 3
47394: PUSH
47395: LD_VAR 0 11
47399: PUSH
47400: FOR_IN
47401: IFFALSE 47450
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47403: LD_VAR 0 3
47407: PPUSH
47408: LD_EXP 19
47412: PUSH
47413: LD_VAR 0 8
47417: ARRAY
47418: PUSH
47419: LD_INT 1
47421: ARRAY
47422: PPUSH
47423: LD_EXP 19
47427: PUSH
47428: LD_VAR 0 8
47432: ARRAY
47433: PUSH
47434: LD_INT 2
47436: ARRAY
47437: PPUSH
47438: LD_INT 12
47440: PPUSH
47441: LD_INT 0
47443: PPUSH
47444: CALL_OW 50
47448: GO 47400
47450: POP
47451: POP
// if mpApemans then
47452: LD_EXP 28
47456: IFFALSE 47535
// begin for j := 1 to mpApemans do
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: DOUBLE
47464: LD_INT 1
47466: DEC
47467: ST_TO_ADDR
47468: LD_EXP 28
47472: PUSH
47473: FOR_TO
47474: IFFALSE 47533
// begin PrepareApeman ( - 5 ) ;
47476: LD_INT 5
47478: NEG
47479: PPUSH
47480: CALL 36862 0 1
// ape := CreateHuman ;
47484: LD_ADDR_VAR 0 10
47488: PUSH
47489: CALL_OW 44
47493: ST_TO_ADDR
// SetTag ( ape , side ) ;
47494: LD_VAR 0 10
47498: PPUSH
47499: LD_VAR 0 7
47503: PPUSH
47504: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47508: LD_VAR 0 10
47512: PPUSH
47513: LD_EXP 29
47517: PUSH
47518: LD_VAR 0 8
47522: ARRAY
47523: PPUSH
47524: LD_INT 0
47526: PPUSH
47527: CALL_OW 49
// end ;
47531: GO 47473
47533: POP
47534: POP
// end ; end ;
47535: GO 46320
47537: POP
47538: POP
// if not mpTeamGame then
47539: LD_EXP 9
47543: NOT
47544: IFFALSE 47642
// begin for i := 1 to 8 do
47546: LD_ADDR_VAR 0 2
47550: PUSH
47551: DOUBLE
47552: LD_INT 1
47554: DEC
47555: ST_TO_ADDR
47556: LD_INT 8
47558: PUSH
47559: FOR_TO
47560: IFFALSE 47638
// for j := 1 to 8 do
47562: LD_ADDR_VAR 0 3
47566: PUSH
47567: DOUBLE
47568: LD_INT 1
47570: DEC
47571: ST_TO_ADDR
47572: LD_INT 8
47574: PUSH
47575: FOR_TO
47576: IFFALSE 47634
// if i <> j then
47578: LD_VAR 0 2
47582: PUSH
47583: LD_VAR 0 3
47587: NONEQUAL
47588: IFFALSE 47612
// SetAttitude ( i , j , att_neutral , true ) else
47590: LD_VAR 0 2
47594: PPUSH
47595: LD_VAR 0 3
47599: PPUSH
47600: LD_INT 0
47602: PPUSH
47603: LD_INT 1
47605: PPUSH
47606: CALL_OW 80
47610: GO 47632
// SetAttitude ( i , j , att_friend , true ) ;
47612: LD_VAR 0 2
47616: PPUSH
47617: LD_VAR 0 3
47621: PPUSH
47622: LD_INT 1
47624: PPUSH
47625: LD_INT 1
47627: PPUSH
47628: CALL_OW 80
47632: GO 47575
47634: POP
47635: POP
47636: GO 47559
47638: POP
47639: POP
// end else
47640: GO 47817
// begin if mpSharedVision then
47642: LD_EXP 14
47646: IFFALSE 47711
// begin for i in mpTeams do
47648: LD_ADDR_VAR 0 2
47652: PUSH
47653: LD_EXP 8
47657: PUSH
47658: FOR_IN
47659: IFFALSE 47709
// for j := 2 to i do
47661: LD_ADDR_VAR 0 3
47665: PUSH
47666: DOUBLE
47667: LD_INT 2
47669: DEC
47670: ST_TO_ADDR
47671: LD_VAR 0 2
47675: PUSH
47676: FOR_TO
47677: IFFALSE 47705
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47679: LD_VAR 0 2
47683: PUSH
47684: LD_VAR 0 3
47688: ARRAY
47689: PPUSH
47690: LD_VAR 0 2
47694: PUSH
47695: LD_INT 1
47697: ARRAY
47698: PPUSH
47699: CALL_OW 343
47703: GO 47676
47705: POP
47706: POP
47707: GO 47658
47709: POP
47710: POP
// end ; for i := 1 to 8 do
47711: LD_ADDR_VAR 0 2
47715: PUSH
47716: DOUBLE
47717: LD_INT 1
47719: DEC
47720: ST_TO_ADDR
47721: LD_INT 8
47723: PUSH
47724: FOR_TO
47725: IFFALSE 47815
// for j := 1 to 8 do
47727: LD_ADDR_VAR 0 3
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_INT 8
47739: PUSH
47740: FOR_TO
47741: IFFALSE 47811
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47743: LD_EXP 6
47747: PUSH
47748: LD_VAR 0 2
47752: ARRAY
47753: PUSH
47754: LD_EXP 6
47758: PUSH
47759: LD_VAR 0 3
47763: ARRAY
47764: EQUAL
47765: IFFALSE 47789
// SetAttitude ( i , j , att_friend , true ) else
47767: LD_VAR 0 2
47771: PPUSH
47772: LD_VAR 0 3
47776: PPUSH
47777: LD_INT 1
47779: PPUSH
47780: LD_INT 1
47782: PPUSH
47783: CALL_OW 80
47787: GO 47809
// SetAttitude ( i , j , att_enemy , true ) ;
47789: LD_VAR 0 2
47793: PPUSH
47794: LD_VAR 0 3
47798: PPUSH
47799: LD_INT 2
47801: PPUSH
47802: LD_INT 1
47804: PPUSH
47805: CALL_OW 80
47809: GO 47740
47811: POP
47812: POP
47813: GO 47724
47815: POP
47816: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47817: LD_ADDR_OWVAR 71
47821: PUSH
47822: LD_EXP 7
47826: PUSH
47827: LD_OWVAR 2
47831: ARRAY
47832: ST_TO_ADDR
// if IAmSpec then
47833: CALL_OW 531
47837: IFFALSE 47878
// begin FogOff ( true ) ;
47839: LD_INT 1
47841: PPUSH
47842: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47846: LD_EXP 27
47850: PUSH
47851: LD_INT 1
47853: ARRAY
47854: PUSH
47855: LD_INT 2
47857: DIV
47858: PPUSH
47859: LD_EXP 27
47863: PUSH
47864: LD_INT 2
47866: ARRAY
47867: PUSH
47868: LD_INT 2
47870: DIV
47871: PPUSH
47872: CALL_OW 86
// end else
47876: GO 47924
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47878: LD_EXP 19
47882: PUSH
47883: LD_EXP 5
47887: PUSH
47888: LD_OWVAR 2
47892: ARRAY
47893: ARRAY
47894: PUSH
47895: LD_INT 1
47897: ARRAY
47898: PPUSH
47899: LD_EXP 19
47903: PUSH
47904: LD_EXP 5
47908: PUSH
47909: LD_OWVAR 2
47913: ARRAY
47914: ARRAY
47915: PUSH
47916: LD_INT 2
47918: ARRAY
47919: PPUSH
47920: CALL_OW 86
// end ; BeginBuildUp ;
47924: CALL 48925 0 0
// enable ( mpActive ) ;
47928: LD_INT 100
47930: ENABLE_MARKED
// enable ( mpGameType ) ;
47931: LD_EXP 1
47935: ENABLE_MARKED
// mpGameActive := true ;
47936: LD_ADDR_EXP 36
47940: PUSH
47941: LD_INT 1
47943: ST_TO_ADDR
// end ;
47944: LD_VAR 0 1
47948: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47949: LD_INT 0
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
// result := [ ] ;
47955: LD_ADDR_VAR 0 5
47959: PUSH
47960: EMPTY
47961: ST_TO_ADDR
// class := class_soldier ;
47962: LD_ADDR_VAR 0 8
47966: PUSH
47967: LD_INT 1
47969: ST_TO_ADDR
// uc_side := side ;
47970: LD_ADDR_OWVAR 20
47974: PUSH
47975: LD_VAR 0 1
47979: ST_TO_ADDR
// uc_nation := nation ;
47980: LD_ADDR_OWVAR 21
47984: PUSH
47985: LD_VAR 0 2
47989: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47990: LD_ADDR_OWVAR 26
47994: PUSH
47995: LD_OWVAR 19
47999: PUSH
48000: LD_VAR 0 1
48004: ARRAY
48005: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48006: LD_INT 1
48008: PPUSH
48009: LD_INT 2
48011: PPUSH
48012: CALL_OW 12
48016: PPUSH
48017: LD_VAR 0 8
48021: PPUSH
48022: LD_VAR 0 4
48026: PUSH
48027: LD_INT 2
48029: PLUS
48030: PPUSH
48031: CALL_OW 380
// hc_importance := 105 ;
48035: LD_ADDR_OWVAR 32
48039: PUSH
48040: LD_INT 105
48042: ST_TO_ADDR
// if Multiplayer then
48043: LD_OWVAR 4
48047: IFFALSE 48087
// begin hc_gallery := MULTIAVATARS ;
48049: LD_ADDR_OWVAR 33
48053: PUSH
48054: LD_STRING MULTIAVATARS
48056: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48057: LD_ADDR_OWVAR 34
48061: PUSH
48062: LD_VAR 0 1
48066: PPUSH
48067: CALL_OW 525
48071: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48072: LD_ADDR_OWVAR 27
48076: PUSH
48077: LD_VAR 0 1
48081: PPUSH
48082: CALL_OW 526
48086: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48087: LD_ADDR_VAR 0 5
48091: PUSH
48092: LD_VAR 0 5
48096: PPUSH
48097: CALL_OW 44
48101: PPUSH
48102: CALL 40614 0 2
48106: ST_TO_ADDR
// if mpTeamPreset then
48107: LD_LOC 1
48111: IFFALSE 48207
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48113: LD_LOC 1
48117: PUSH
48118: LD_INT 1
48120: ARRAY
48121: PPUSH
48122: LD_VAR 0 5
48126: PUSH
48127: LD_VAR 0 5
48131: ARRAY
48132: PPUSH
48133: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48137: LD_VAR 0 5
48141: PUSH
48142: LD_VAR 0 5
48146: ARRAY
48147: PPUSH
48148: LD_INT 1
48150: PPUSH
48151: LD_LOC 1
48155: PUSH
48156: LD_INT 1
48158: ARRAY
48159: PPUSH
48160: LD_INT 1
48162: PPUSH
48163: CALL_OW 260
48167: PPUSH
48168: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48172: LD_VAR 0 5
48176: PUSH
48177: LD_VAR 0 5
48181: ARRAY
48182: PPUSH
48183: LD_INT 2
48185: PPUSH
48186: LD_LOC 1
48190: PUSH
48191: LD_INT 1
48193: ARRAY
48194: PPUSH
48195: LD_INT 2
48197: PPUSH
48198: CALL_OW 260
48202: PPUSH
48203: CALL_OW 239
// end ; InitHc_All ( ) ;
48207: CALL_OW 584
// class := 2 ;
48211: LD_ADDR_VAR 0 8
48215: PUSH
48216: LD_INT 2
48218: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48219: LD_ADDR_VAR 0 6
48223: PUSH
48224: DOUBLE
48225: LD_INT 1
48227: DEC
48228: ST_TO_ADDR
48229: LD_VAR 0 3
48233: PUSH
48234: LD_INT 1
48236: MINUS
48237: PUSH
48238: FOR_TO
48239: IFFALSE 48423
// begin PrepareHuman ( false , class , skill ) ;
48241: LD_INT 0
48243: PPUSH
48244: LD_VAR 0 8
48248: PPUSH
48249: LD_VAR 0 4
48253: PPUSH
48254: CALL_OW 380
// un := CreateHuman ;
48258: LD_ADDR_VAR 0 7
48262: PUSH
48263: CALL_OW 44
48267: ST_TO_ADDR
// result := Join ( result , un ) ;
48268: LD_ADDR_VAR 0 5
48272: PUSH
48273: LD_VAR 0 5
48277: PPUSH
48278: LD_VAR 0 7
48282: PPUSH
48283: CALL 40614 0 2
48287: ST_TO_ADDR
// if mpTeamPreset then
48288: LD_LOC 1
48292: IFFALSE 48388
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48294: LD_LOC 1
48298: PUSH
48299: LD_VAR 0 6
48303: PUSH
48304: LD_INT 1
48306: PLUS
48307: ARRAY
48308: PPUSH
48309: LD_VAR 0 7
48313: PPUSH
48314: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48318: LD_VAR 0 7
48322: PPUSH
48323: LD_INT 1
48325: PPUSH
48326: LD_LOC 1
48330: PUSH
48331: LD_VAR 0 6
48335: PUSH
48336: LD_INT 1
48338: PLUS
48339: ARRAY
48340: PPUSH
48341: LD_INT 1
48343: PPUSH
48344: CALL_OW 260
48348: PPUSH
48349: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48353: LD_VAR 0 7
48357: PPUSH
48358: LD_INT 2
48360: PPUSH
48361: LD_LOC 1
48365: PUSH
48366: LD_VAR 0 6
48370: PUSH
48371: LD_INT 1
48373: PLUS
48374: ARRAY
48375: PPUSH
48376: LD_INT 2
48378: PPUSH
48379: CALL_OW 260
48383: PPUSH
48384: CALL_OW 239
// end ; class := Inc ( class ) ;
48388: LD_ADDR_VAR 0 8
48392: PUSH
48393: LD_VAR 0 8
48397: PPUSH
48398: CALL 41975 0 1
48402: ST_TO_ADDR
// if class = 5 then
48403: LD_VAR 0 8
48407: PUSH
48408: LD_INT 5
48410: EQUAL
48411: IFFALSE 48421
// class := 1 ;
48413: LD_ADDR_VAR 0 8
48417: PUSH
48418: LD_INT 1
48420: ST_TO_ADDR
// end ;
48421: GO 48238
48423: POP
48424: POP
// if not mpTeamPreset then
48425: LD_LOC 1
48429: NOT
48430: IFFALSE 48442
// mpTeamPreset := result ;
48432: LD_ADDR_LOC 1
48436: PUSH
48437: LD_VAR 0 5
48441: ST_TO_ADDR
// end ;
48442: LD_VAR 0 5
48446: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48447: LD_INT 0
48449: PPUSH
48450: PPUSH
// result := [ ] ;
48451: LD_ADDR_VAR 0 4
48455: PUSH
48456: EMPTY
48457: ST_TO_ADDR
// if not vehicles then
48458: LD_VAR 0 3
48462: NOT
48463: IFFALSE 48467
// exit ;
48465: GO 48626
// for i := 1 to vehicles [ nation ] do
48467: LD_ADDR_VAR 0 5
48471: PUSH
48472: DOUBLE
48473: LD_INT 1
48475: DEC
48476: ST_TO_ADDR
48477: LD_VAR 0 3
48481: PUSH
48482: LD_VAR 0 2
48486: ARRAY
48487: PUSH
48488: FOR_TO
48489: IFFALSE 48624
// begin uc_side := side ;
48491: LD_ADDR_OWVAR 20
48495: PUSH
48496: LD_VAR 0 1
48500: ST_TO_ADDR
// uc_nation := nation ;
48501: LD_ADDR_OWVAR 21
48505: PUSH
48506: LD_VAR 0 2
48510: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48511: LD_VAR 0 3
48515: PUSH
48516: LD_VAR 0 2
48520: ARRAY
48521: PUSH
48522: LD_VAR 0 5
48526: ARRAY
48527: PUSH
48528: LD_INT 1
48530: ARRAY
48531: PPUSH
48532: LD_VAR 0 3
48536: PUSH
48537: LD_VAR 0 2
48541: ARRAY
48542: PUSH
48543: LD_VAR 0 5
48547: ARRAY
48548: PUSH
48549: LD_INT 2
48551: ARRAY
48552: PPUSH
48553: LD_VAR 0 3
48557: PUSH
48558: LD_VAR 0 2
48562: ARRAY
48563: PUSH
48564: LD_VAR 0 5
48568: ARRAY
48569: PUSH
48570: LD_INT 3
48572: ARRAY
48573: PPUSH
48574: LD_VAR 0 3
48578: PUSH
48579: LD_VAR 0 2
48583: ARRAY
48584: PUSH
48585: LD_VAR 0 5
48589: ARRAY
48590: PUSH
48591: LD_INT 4
48593: ARRAY
48594: PPUSH
48595: LD_INT 80
48597: PPUSH
48598: CALL 7743 0 5
// result := Join ( result , CreateVehicle ) ;
48602: LD_ADDR_VAR 0 4
48606: PUSH
48607: LD_VAR 0 4
48611: PPUSH
48612: CALL_OW 45
48616: PPUSH
48617: CALL 40614 0 2
48621: ST_TO_ADDR
// end ;
48622: GO 48488
48624: POP
48625: POP
// end ;
48626: LD_VAR 0 4
48630: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48631: LD_INT 0
48633: PPUSH
48634: PPUSH
// for i in mpBattleFlags do
48635: LD_ADDR_VAR 0 3
48639: PUSH
48640: LD_EXP 21
48644: PUSH
48645: FOR_IN
48646: IFFALSE 48723
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48648: LD_VAR 0 3
48652: PPUSH
48653: LD_INT 1
48655: PUSH
48656: LD_VAR 0 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_VAR 0 1
48672: PUSH
48673: LD_REAL  7.00000000000000E-0001
48676: MUL
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: LD_VAR 0 1
48689: PUSH
48690: LD_REAL  4.00000000000000E-0001
48693: MUL
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 20
48701: PUSH
48702: LD_VAR 0 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: PPUSH
48717: CALL_OW 423
48721: GO 48645
48723: POP
48724: POP
// end ;
48725: LD_VAR 0 2
48729: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48730: LD_INT 100
48732: IFFALSE 48827
48734: GO 48736
48736: DISABLE
48737: LD_INT 0
48739: PPUSH
48740: PPUSH
// begin if mpBattleFlag <= 0 then
48741: LD_EXP 20
48745: PUSH
48746: LD_INT 0
48748: LESSEQUAL
48749: IFFALSE 48753
// exit ;
48751: GO 48827
// strength := 100 ;
48753: LD_ADDR_VAR 0 2
48757: PUSH
48758: LD_INT 100
48760: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48761: LD_EXP 20
48765: PPUSH
48766: CALL_OW 67
// strength := Dec ( strength ) ;
48770: LD_ADDR_VAR 0 2
48774: PUSH
48775: LD_VAR 0 2
48779: PPUSH
48780: CALL 41997 0 1
48784: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48785: LD_VAR 0 2
48789: PPUSH
48790: CALL 48631 0 1
// until not strength ;
48794: LD_VAR 0 2
48798: NOT
48799: IFFALSE 48761
// for i in mpBattleFlags do
48801: LD_ADDR_VAR 0 1
48805: PUSH
48806: LD_EXP 21
48810: PUSH
48811: FOR_IN
48812: IFFALSE 48825
// KillBattleFlag ( i ) ;
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL_OW 419
48823: GO 48811
48825: POP
48826: POP
// end ;
48827: PPOPN 2
48829: END
// every 0 0$1 marked mpActive do var side , tmp ;
48830: GO 48832
48832: DISABLE
48833: LD_INT 0
48835: PPUSH
48836: PPUSH
// begin if mpSibBomb <= 1 then
48837: LD_EXP 26
48841: PUSH
48842: LD_INT 1
48844: LESSEQUAL
48845: IFFALSE 48849
// exit ;
48847: GO 48922
// tmp := mpSibBomb ;
48849: LD_ADDR_VAR 0 2
48853: PUSH
48854: LD_EXP 26
48858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48859: LD_INT 35
48861: PPUSH
48862: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48866: LD_ADDR_VAR 0 2
48870: PUSH
48871: LD_VAR 0 2
48875: PUSH
48876: LD_INT 35
48878: MINUS
48879: ST_TO_ADDR
// until not tmp ;
48880: LD_VAR 0 2
48884: NOT
48885: IFFALSE 48859
// for side := 1 to 8 do
48887: LD_ADDR_VAR 0 1
48891: PUSH
48892: DOUBLE
48893: LD_INT 1
48895: DEC
48896: ST_TO_ADDR
48897: LD_INT 8
48899: PUSH
48900: FOR_TO
48901: IFFALSE 48920
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48903: LD_INT 25
48905: PPUSH
48906: LD_VAR 0 1
48910: PPUSH
48911: LD_INT 1
48913: PPUSH
48914: CALL_OW 322
48918: GO 48900
48920: POP
48921: POP
// end ;
48922: PPOPN 2
48924: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48925: LD_INT 0
48927: PPUSH
48928: PPUSH
48929: PPUSH
// mpBuildUpTimeDelay := 0 ;
48930: LD_ADDR_EXP 39
48934: PUSH
48935: LD_INT 0
48937: ST_TO_ADDR
// if not mpBuildUpTime then
48938: LD_EXP 18
48942: NOT
48943: IFFALSE 48947
// exit ;
48945: GO 49130
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48947: LD_ADDR_EXP 39
48951: PUSH
48952: LD_INT 8400
48954: PUSH
48955: LD_INT 2100
48957: PUSH
48958: LD_EXP 18
48962: MUL
48963: PLUS
48964: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48965: LD_ADDR_EXP 40
48969: PUSH
48970: LD_INT 1
48972: ST_TO_ADDR
// for i := 1 to 8 do
48973: LD_ADDR_VAR 0 2
48977: PUSH
48978: DOUBLE
48979: LD_INT 1
48981: DEC
48982: ST_TO_ADDR
48983: LD_INT 8
48985: PUSH
48986: FOR_TO
48987: IFFALSE 49128
// if mpSidePositions [ i ] then
48989: LD_EXP 5
48993: PUSH
48994: LD_VAR 0 2
48998: ARRAY
48999: IFFALSE 49126
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49001: LD_EXP 17
49005: PUSH
49006: LD_EXP 5
49010: PUSH
49011: LD_VAR 0 2
49015: ARRAY
49016: ARRAY
49017: PPUSH
49018: LD_INT 5
49020: PPUSH
49021: CALL_OW 424
// for j := 1 to 8 do
49025: LD_ADDR_VAR 0 3
49029: PUSH
49030: DOUBLE
49031: LD_INT 1
49033: DEC
49034: ST_TO_ADDR
49035: LD_INT 8
49037: PUSH
49038: FOR_TO
49039: IFFALSE 49124
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49041: LD_EXP 5
49045: PUSH
49046: LD_VAR 0 3
49050: ARRAY
49051: PUSH
49052: LD_EXP 6
49056: PUSH
49057: LD_VAR 0 2
49061: ARRAY
49062: PUSH
49063: LD_EXP 6
49067: PUSH
49068: LD_VAR 0 3
49072: ARRAY
49073: NONEQUAL
49074: PUSH
49075: LD_EXP 9
49079: NOT
49080: PUSH
49081: LD_VAR 0 2
49085: PUSH
49086: LD_VAR 0 3
49090: NONEQUAL
49091: AND
49092: OR
49093: AND
49094: IFFALSE 49122
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49096: LD_VAR 0 3
49100: PPUSH
49101: LD_EXP 17
49105: PUSH
49106: LD_EXP 5
49110: PUSH
49111: LD_VAR 0 2
49115: ARRAY
49116: ARRAY
49117: PPUSH
49118: CALL_OW 333
49122: GO 49038
49124: POP
49125: POP
// end ;
49126: GO 48986
49128: POP
49129: POP
// end ;
49130: LD_VAR 0 1
49134: RET
// function EndBuildUp ; var i , j ; begin
49135: LD_INT 0
49137: PPUSH
49138: PPUSH
49139: PPUSH
// mpBuildUpTimeActive := false ;
49140: LD_ADDR_EXP 40
49144: PUSH
49145: LD_INT 0
49147: ST_TO_ADDR
// for i := 1 to 8 do
49148: LD_ADDR_VAR 0 2
49152: PUSH
49153: DOUBLE
49154: LD_INT 1
49156: DEC
49157: ST_TO_ADDR
49158: LD_INT 8
49160: PUSH
49161: FOR_TO
49162: IFFALSE 49303
// if mpSidePositions [ i ] then
49164: LD_EXP 5
49168: PUSH
49169: LD_VAR 0 2
49173: ARRAY
49174: IFFALSE 49301
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49176: LD_EXP 17
49180: PUSH
49181: LD_EXP 5
49185: PUSH
49186: LD_VAR 0 2
49190: ARRAY
49191: ARRAY
49192: PPUSH
49193: LD_INT 0
49195: PPUSH
49196: CALL_OW 424
// for j := 1 to 8 do
49200: LD_ADDR_VAR 0 3
49204: PUSH
49205: DOUBLE
49206: LD_INT 1
49208: DEC
49209: ST_TO_ADDR
49210: LD_INT 8
49212: PUSH
49213: FOR_TO
49214: IFFALSE 49299
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49216: LD_EXP 5
49220: PUSH
49221: LD_VAR 0 3
49225: ARRAY
49226: PUSH
49227: LD_EXP 6
49231: PUSH
49232: LD_VAR 0 2
49236: ARRAY
49237: PUSH
49238: LD_EXP 6
49242: PUSH
49243: LD_VAR 0 3
49247: ARRAY
49248: NONEQUAL
49249: PUSH
49250: LD_EXP 9
49254: NOT
49255: PUSH
49256: LD_VAR 0 2
49260: PUSH
49261: LD_VAR 0 3
49265: NONEQUAL
49266: AND
49267: OR
49268: AND
49269: IFFALSE 49297
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49271: LD_VAR 0 3
49275: PPUSH
49276: LD_EXP 17
49280: PUSH
49281: LD_EXP 5
49285: PUSH
49286: LD_VAR 0 2
49290: ARRAY
49291: ARRAY
49292: PPUSH
49293: CALL_OW 334
49297: GO 49213
49299: POP
49300: POP
// end ;
49301: GO 49161
49303: POP
49304: POP
// end ;
49305: LD_VAR 0 1
49309: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49310: LD_EXP 40
49314: IFFALSE 49489
49316: GO 49318
49318: DISABLE
49319: LD_INT 0
49321: PPUSH
49322: PPUSH
// begin for i := 1 to 8 do
49323: LD_ADDR_VAR 0 1
49327: PUSH
49328: DOUBLE
49329: LD_INT 1
49331: DEC
49332: ST_TO_ADDR
49333: LD_INT 8
49335: PUSH
49336: FOR_TO
49337: IFFALSE 49486
// if mpSidePositions [ i ] then
49339: LD_EXP 5
49343: PUSH
49344: LD_VAR 0 1
49348: ARRAY
49349: IFFALSE 49484
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49351: LD_ADDR_VAR 0 2
49355: PUSH
49356: LD_EXP 17
49360: PUSH
49361: LD_EXP 5
49365: PUSH
49366: LD_VAR 0 1
49370: ARRAY
49371: ARRAY
49372: PPUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 21
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 21
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 22
49403: PUSH
49404: LD_OWVAR 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 70
49421: PUSH
49422: FOR_IN
49423: IFFALSE 49482
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49425: LD_EXP 6
49429: PUSH
49430: LD_VAR 0 1
49434: ARRAY
49435: PUSH
49436: LD_EXP 6
49440: PUSH
49441: LD_OWVAR 2
49445: ARRAY
49446: NONEQUAL
49447: PUSH
49448: LD_EXP 9
49452: NOT
49453: PUSH
49454: LD_VAR 0 1
49458: PUSH
49459: LD_OWVAR 2
49463: NONEQUAL
49464: AND
49465: OR
49466: IFFALSE 49480
// ComMoveToArea ( un , BuildUpEscape ) ;
49468: LD_VAR 0 2
49472: PPUSH
49473: LD_INT 17
49475: PPUSH
49476: CALL_OW 113
49480: GO 49422
49482: POP
49483: POP
49484: GO 49336
49486: POP
49487: POP
// enable ;
49488: ENABLE
// end ;
49489: PPOPN 2
49491: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49492: LD_EXP 18
49496: IFFALSE 49546
49498: GO 49500
49500: DISABLE
49501: LD_INT 0
49503: PPUSH
// begin tmp := mpBuildUpTime ;
49504: LD_ADDR_VAR 0 1
49508: PUSH
49509: LD_EXP 18
49513: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49514: LD_INT 35
49516: PPUSH
49517: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49521: LD_ADDR_VAR 0 1
49525: PUSH
49526: LD_VAR 0 1
49530: PUSH
49531: LD_INT 35
49533: MINUS
49534: ST_TO_ADDR
// until not tmp ;
49535: LD_VAR 0 1
49539: NOT
49540: IFFALSE 49514
// EndBuildUp ;
49542: CALL 49135 0 0
// end ;
49546: PPOPN 1
49548: END
// every 0 0$1 trigger mpActive marked mpWin do
49549: LD_INT 100
49551: IFFALSE 49585
49553: GO 49555
49555: DISABLE
// begin if IAmServer then
49556: CALL_OW 518
49560: IFFALSE 49569
// wait ( 0 0$3 ) ;
49562: LD_INT 105
49564: PPUSH
49565: CALL_OW 67
// if Multiplayer then
49569: LD_OWVAR 4
49573: IFFALSE 49581
// YouWinInMultiplayer else
49575: CALL_OW 106
49579: GO 49585
// YouWin ;
49581: CALL_OW 103
// end ;
49585: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49586: LD_INT 0
49588: PPUSH
// result := false ;
49589: LD_ADDR_VAR 0 3
49593: PUSH
49594: LD_INT 0
49596: ST_TO_ADDR
// case gameType of GameTypeNormal :
49597: LD_VAR 0 1
49601: PUSH
49602: LD_INT 1
49604: DOUBLE
49605: EQUAL
49606: IFTRUE 49610
49608: GO 49683
49610: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49611: LD_ADDR_VAR 0 3
49615: PUSH
49616: LD_INT 22
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 21
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 33
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 33
49653: PUSH
49654: LD_INT 5
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PPUSH
49671: CALL_OW 69
49675: PPUSH
49676: CALL 5005 0 1
49680: ST_TO_ADDR
// end ; GameTypeSurvival :
49681: GO 49918
49683: LD_INT 2
49685: DOUBLE
49686: EQUAL
49687: IFTRUE 49691
49689: GO 49819
49691: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49692: LD_ADDR_VAR 0 3
49696: PUSH
49697: LD_INT 22
49699: PUSH
49700: LD_VAR 0 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 30
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 30
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PPUSH
49741: CALL_OW 69
49745: PPUSH
49746: CALL 5005 0 1
49750: PUSH
49751: LD_INT 22
49753: PUSH
49754: LD_VAR 0 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 21
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 33
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 33
49788: PUSH
49789: LD_INT 5
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PPUSH
49806: CALL_OW 69
49810: PPUSH
49811: CALL 5005 0 1
49815: AND
49816: ST_TO_ADDR
// end ; GameTypeKing :
49817: GO 49918
49819: LD_INT 3
49821: DOUBLE
49822: EQUAL
49823: IFTRUE 49827
49825: GO 49917
49827: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49828: LD_ADDR_VAR 0 3
49832: PUSH
49833: LD_INT 22
49835: PUSH
49836: LD_VAR 0 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 21
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 33
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 33
49870: PUSH
49871: LD_INT 5
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PPUSH
49888: CALL_OW 69
49892: PPUSH
49893: CALL 5005 0 1
49897: PUSH
49898: LD_VAR 0 2
49902: PPUSH
49903: CALL 53104 0 1
49907: PUSH
49908: LD_EXP 32
49912: LESS
49913: AND
49914: ST_TO_ADDR
// end ; end ;
49915: GO 49918
49917: POP
// end ;
49918: LD_VAR 0 3
49922: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49923: LD_INT 100
49925: IFFALSE 50147
49927: GO 49929
49929: DISABLE
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// begin if Multiplayer then
49934: LD_OWVAR 4
49938: IFFALSE 49946
// SetPlayerSpectator ( ) else
49940: CALL_OW 572
49944: GO 49955
// FogOff ( your_side ) ;
49946: LD_OWVAR 2
49950: PPUSH
49951: CALL_OW 344
// repeat gameIsOn := false ;
49955: LD_ADDR_VAR 0 1
49959: PUSH
49960: LD_INT 0
49962: ST_TO_ADDR
// for i := 1 to 8 do
49963: LD_ADDR_VAR 0 2
49967: PUSH
49968: DOUBLE
49969: LD_INT 1
49971: DEC
49972: ST_TO_ADDR
49973: LD_INT 8
49975: PUSH
49976: FOR_TO
49977: IFFALSE 50099
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49979: LD_EXP 5
49983: PUSH
49984: LD_VAR 0 2
49988: ARRAY
49989: PUSH
49990: LD_VAR 0 2
49994: PPUSH
49995: CALL_OW 108
49999: AND
50000: PUSH
50001: LD_VAR 0 2
50005: PUSH
50006: LD_OWVAR 2
50010: NONEQUAL
50011: AND
50012: IFFALSE 50097
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50014: LD_EXP 6
50018: PUSH
50019: LD_VAR 0 2
50023: ARRAY
50024: NOT
50025: PUSH
50026: LD_EXP 6
50030: PUSH
50031: LD_VAR 0 2
50035: ARRAY
50036: PUSH
50037: LD_EXP 6
50041: PUSH
50042: LD_OWVAR 2
50046: ARRAY
50047: NONEQUAL
50048: PUSH
50049: LD_OWVAR 2
50053: PPUSH
50054: LD_VAR 0 2
50058: PPUSH
50059: CALL_OW 81
50063: PUSH
50064: LD_INT 1
50066: NONEQUAL
50067: AND
50068: OR
50069: IFFALSE 50097
// if HasPowerByGameType ( mpGameType , i ) then
50071: LD_EXP 1
50075: PPUSH
50076: LD_VAR 0 2
50080: PPUSH
50081: CALL 49586 0 2
50085: IFFALSE 50097
// begin gameIsOn := true ;
50087: LD_ADDR_VAR 0 1
50091: PUSH
50092: LD_INT 1
50094: ST_TO_ADDR
// break ;
50095: GO 50099
// end ;
50097: GO 49976
50099: POP
50100: POP
// wait ( 100 ) ;
50101: LD_INT 100
50103: PPUSH
50104: CALL_OW 67
// until not gameIsOn ;
50108: LD_VAR 0 1
50112: NOT
50113: IFFALSE 49955
// if IAmServer then
50115: CALL_OW 518
50119: IFFALSE 50128
// wait ( 0 0$3 ) ;
50121: LD_INT 105
50123: PPUSH
50124: CALL_OW 67
// if Multiplayer then
50128: LD_OWVAR 4
50132: IFFALSE 50140
// YouLostInMultiplayer else
50134: CALL_OW 107
50138: GO 50147
// YouLost (  ) ;
50140: LD_STRING 
50142: PPUSH
50143: CALL_OW 104
// end ;
50147: PPOPN 2
50149: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50150: LD_EXP 30
50154: IFFALSE 50501
50156: GO 50158
50158: DISABLE
50159: LD_INT 0
50161: PPUSH
50162: PPUSH
50163: PPUSH
50164: PPUSH
50165: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50166: LD_ADDR_VAR 0 5
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: LD_INT 5
50185: PUSH
50186: LD_INT 6
50188: PUSH
50189: LD_INT 7
50191: PUSH
50192: LD_INT 8
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50205: LD_INT 350
50207: PPUSH
50208: CALL_OW 67
// for i := 1 to 8 do
50212: LD_ADDR_VAR 0 1
50216: PUSH
50217: DOUBLE
50218: LD_INT 1
50220: DEC
50221: ST_TO_ADDR
50222: LD_INT 8
50224: PUSH
50225: FOR_TO
50226: IFFALSE 50471
// begin j := sides [ i ] ;
50228: LD_ADDR_VAR 0 2
50232: PUSH
50233: LD_VAR 0 5
50237: PUSH
50238: LD_VAR 0 1
50242: ARRAY
50243: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50244: LD_EXP 37
50248: PUSH
50249: LD_VAR 0 2
50253: ARRAY
50254: PPUSH
50255: CALL 5005 0 1
50259: PUSH
50260: LD_VAR 0 2
50264: PPUSH
50265: CALL_OW 108
50269: AND
50270: PUSH
50271: LD_EXP 1
50275: PPUSH
50276: LD_VAR 0 2
50280: PPUSH
50281: CALL 49586 0 2
50285: AND
50286: IFFALSE 50469
// begin wait ( mpRespawn div 3 ) ;
50288: LD_EXP 30
50292: PUSH
50293: LD_INT 3
50295: DIV
50296: PPUSH
50297: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50301: LD_ADDR_VAR 0 3
50305: PUSH
50306: LD_INT 22
50308: PUSH
50309: LD_VAR 0 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 50
50320: PUSH
50321: EMPTY
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 30
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 30
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: PPUSH
50357: CALL_OW 69
50361: ST_TO_ADDR
// if not tmp then
50362: LD_VAR 0 3
50366: NOT
50367: IFFALSE 50371
// continue ;
50369: GO 50225
// spawn := tmp [ 1 ] ;
50371: LD_ADDR_VAR 0 4
50375: PUSH
50376: LD_VAR 0 3
50380: PUSH
50381: LD_INT 1
50383: ARRAY
50384: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50385: LD_EXP 37
50389: PUSH
50390: LD_VAR 0 2
50394: ARRAY
50395: PUSH
50396: LD_INT 1
50398: ARRAY
50399: PPUSH
50400: LD_VAR 0 4
50404: PPUSH
50405: CALL_OW 250
50409: PPUSH
50410: LD_VAR 0 4
50414: PPUSH
50415: CALL_OW 251
50419: PPUSH
50420: LD_INT 32
50422: PPUSH
50423: LD_INT 1
50425: PPUSH
50426: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50430: LD_ADDR_EXP 37
50434: PUSH
50435: LD_EXP 37
50439: PPUSH
50440: LD_VAR 0 2
50444: PPUSH
50445: LD_EXP 37
50449: PUSH
50450: LD_VAR 0 2
50454: ARRAY
50455: PPUSH
50456: LD_INT 1
50458: PPUSH
50459: CALL_OW 3
50463: PPUSH
50464: CALL_OW 1
50468: ST_TO_ADDR
// end ; end ;
50469: GO 50225
50471: POP
50472: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50473: LD_ADDR_VAR 0 5
50477: PUSH
50478: LD_VAR 0 5
50482: PPUSH
50483: LD_INT 1
50485: PPUSH
50486: LD_INT 8
50488: PPUSH
50489: LD_INT 1
50491: PPUSH
50492: CALL 7283 0 4
50496: ST_TO_ADDR
// until false ;
50497: LD_INT 0
50499: IFFALSE 50205
// end ;
50501: PPOPN 5
50503: END
// every 0 0$1 marked mpActive do
50504: GO 50506
50506: DISABLE
// begin enable ;
50507: ENABLE
// if not mpDisplayStrings then
50508: LD_EXP 35
50512: NOT
50513: IFFALSE 50524
// begin display_strings := [ ] ;
50515: LD_ADDR_OWVAR 47
50519: PUSH
50520: EMPTY
50521: ST_TO_ADDR
// exit ;
50522: GO 50534
// end ; display_strings := mpDisplayStrings ;
50524: LD_ADDR_OWVAR 47
50528: PUSH
50529: LD_EXP 35
50533: ST_TO_ADDR
// end ; end_of_file
50534: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50535: LD_INT 0
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
50543: PPUSH
50544: PPUSH
50545: PPUSH
// if GetType ( un ) = unit_vehicle then
50546: LD_VAR 0 1
50550: PPUSH
50551: CALL_OW 247
50555: PUSH
50556: LD_INT 2
50558: EQUAL
50559: IFFALSE 50563
// exit ;
50561: GO 51133
// side := GetSide ( un ) ;
50563: LD_ADDR_VAR 0 9
50567: PUSH
50568: LD_VAR 0 1
50572: PPUSH
50573: CALL_OW 255
50577: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50578: LD_EXP 1
50582: PUSH
50583: LD_INT 2
50585: EQUAL
50586: IFFALSE 50679
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 266
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: IN
50608: PUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: CALL_OW 110
50618: PUSH
50619: LD_VAR 0 9
50623: EQUAL
50624: AND
50625: IFFALSE 50679
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50627: LD_ADDR_VAR 0 3
50631: PUSH
50632: LD_INT 22
50634: PUSH
50635: LD_VAR 0 9
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 21
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PPUSH
50658: CALL_OW 69
50662: PUSH
50663: FOR_IN
50664: IFFALSE 50677
// KillUnit ( i ) ;
50666: LD_VAR 0 3
50670: PPUSH
50671: CALL_OW 66
50675: GO 50663
50677: POP
50678: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50679: LD_VAR 0 1
50683: PPUSH
50684: CALL_OW 257
50688: PUSH
50689: LD_INT 12
50691: PUSH
50692: LD_INT 17
50694: PUSH
50695: LD_INT 15
50697: PUSH
50698: LD_INT 16
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: IN
50707: PUSH
50708: LD_VAR 0 1
50712: PPUSH
50713: CALL_OW 263
50717: PUSH
50718: LD_INT 5
50720: EQUAL
50721: OR
50722: IFFALSE 50862
// begin tag := GetTag ( un ) ;
50724: LD_ADDR_VAR 0 5
50728: PUSH
50729: LD_VAR 0 1
50733: PPUSH
50734: CALL_OW 110
50738: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50739: LD_ADDR_VAR 0 7
50743: PUSH
50744: LD_EXP 29
50748: PUSH
50749: LD_EXP 5
50753: PUSH
50754: LD_VAR 0 5
50758: ARRAY
50759: ARRAY
50760: ST_TO_ADDR
// if not area then
50761: LD_VAR 0 7
50765: NOT
50766: IFFALSE 50770
// exit ;
50768: GO 51133
// wait ( 4 4$00 ) ;
50770: LD_INT 8400
50772: PPUSH
50773: CALL_OW 67
// repeat wait ( 10 ) ;
50777: LD_INT 10
50779: PPUSH
50780: CALL_OW 67
// until not mpBlockRespThread ;
50784: LD_EXP 38
50788: NOT
50789: IFFALSE 50777
// mpBlockRespThread := true ;
50791: LD_ADDR_EXP 38
50795: PUSH
50796: LD_INT 1
50798: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50799: LD_INT 0
50801: PPUSH
50802: CALL 36862 0 1
// ape := CreateHuman ;
50806: LD_ADDR_VAR 0 4
50810: PUSH
50811: CALL_OW 44
50815: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50816: LD_VAR 0 4
50820: PPUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50830: LD_VAR 0 4
50834: PPUSH
50835: LD_VAR 0 7
50839: PPUSH
50840: LD_INT 0
50842: PPUSH
50843: CALL_OW 49
// wait ( 10 ) ;
50847: LD_INT 10
50849: PPUSH
50850: CALL_OW 67
// mpBlockRespThread := false ;
50854: LD_ADDR_EXP 38
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50862: LD_VAR 0 1
50866: PPUSH
50867: CALL_OW 247
50871: PUSH
50872: LD_INT 1
50874: EQUAL
50875: PUSH
50876: LD_VAR 0 1
50880: PPUSH
50881: CALL_OW 248
50885: PUSH
50886: LD_INT 0
50888: GREATER
50889: AND
50890: IFFALSE 51133
// begin if not mpRespawn then
50892: LD_EXP 30
50896: NOT
50897: IFFALSE 50901
// exit ;
50899: GO 51133
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50901: LD_VAR 0 9
50905: PPUSH
50906: CALL_OW 108
50910: NOT
50911: PUSH
50912: LD_EXP 1
50916: PPUSH
50917: LD_VAR 0 9
50921: PPUSH
50922: CALL 49586 0 2
50926: NOT
50927: AND
50928: IFFALSE 50932
// exit ;
50930: GO 51133
// side := GetSide ( un ) ;
50932: LD_ADDR_VAR 0 9
50936: PUSH
50937: LD_VAR 0 1
50941: PPUSH
50942: CALL_OW 255
50946: ST_TO_ADDR
// nation := GetNation ( un ) ;
50947: LD_ADDR_VAR 0 8
50951: PUSH
50952: LD_VAR 0 1
50956: PPUSH
50957: CALL_OW 248
50961: ST_TO_ADDR
// class := GetClass ( un ) ;
50962: LD_ADDR_VAR 0 6
50966: PUSH
50967: LD_VAR 0 1
50971: PPUSH
50972: CALL_OW 257
50976: ST_TO_ADDR
// if class > 4 then
50977: LD_VAR 0 6
50981: PUSH
50982: LD_INT 4
50984: GREATER
50985: IFFALSE 50995
// class := 1 ;
50987: LD_ADDR_VAR 0 6
50991: PUSH
50992: LD_INT 1
50994: ST_TO_ADDR
// repeat wait ( 10 ) ;
50995: LD_INT 10
50997: PPUSH
50998: CALL_OW 67
// until not mpBlockRespThread ;
51002: LD_EXP 38
51006: NOT
51007: IFFALSE 50995
// mpBlockRespThread := true ;
51009: LD_ADDR_EXP 38
51013: PUSH
51014: LD_INT 1
51016: ST_TO_ADDR
// uc_side := side ;
51017: LD_ADDR_OWVAR 20
51021: PUSH
51022: LD_VAR 0 9
51026: ST_TO_ADDR
// uc_nation := nation ;
51027: LD_ADDR_OWVAR 21
51031: PUSH
51032: LD_VAR 0 8
51036: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51037: LD_INT 0
51039: PPUSH
51040: LD_VAR 0 6
51044: PPUSH
51045: LD_INT 2
51047: PPUSH
51048: CALL_OW 380
// un := CreateHuman ;
51052: LD_ADDR_VAR 0 1
51056: PUSH
51057: CALL_OW 44
51061: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51062: LD_ADDR_EXP 37
51066: PUSH
51067: LD_EXP 37
51071: PPUSH
51072: LD_VAR 0 9
51076: PPUSH
51077: LD_EXP 37
51081: PUSH
51082: LD_VAR 0 9
51086: ARRAY
51087: PPUSH
51088: LD_EXP 37
51092: PUSH
51093: LD_VAR 0 9
51097: ARRAY
51098: PUSH
51099: LD_INT 1
51101: PLUS
51102: PPUSH
51103: LD_VAR 0 1
51107: PPUSH
51108: CALL_OW 1
51112: PPUSH
51113: CALL_OW 1
51117: ST_TO_ADDR
// wait ( 10 ) ;
51118: LD_INT 10
51120: PPUSH
51121: CALL_OW 67
// mpBlockRespThread := false ;
51125: LD_ADDR_EXP 38
51129: PUSH
51130: LD_INT 0
51132: ST_TO_ADDR
// end ; end ;
51133: LD_VAR 0 2
51137: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51138: LD_INT 0
51140: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51141: LD_VAR 0 1
51145: PPUSH
51146: CALL_OW 266
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: IN
51161: IFFALSE 51186
// SetBName ( building , @ & GetSide ( building ) ) ;
51163: LD_VAR 0 1
51167: PPUSH
51168: LD_STRING @
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 255
51180: STR
51181: PPUSH
51182: CALL_OW 500
// end ;
51186: LD_VAR 0 2
51190: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51191: LD_INT 0
51193: PPUSH
51194: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51195: LD_EXP 1
51199: PUSH
51200: LD_INT 2
51202: EQUAL
51203: PUSH
51204: LD_VAR 0 1
51208: PPUSH
51209: CALL_OW 266
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: IN
51224: AND
51225: IFFALSE 51290
// begin KillUnit ( building ) ;
51227: LD_VAR 0 1
51231: PPUSH
51232: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51236: LD_ADDR_VAR 0 5
51240: PUSH
51241: LD_INT 22
51243: PUSH
51244: LD_VAR 0 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 21
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PPUSH
51267: CALL_OW 69
51271: PUSH
51272: FOR_IN
51273: IFFALSE 51286
// KillUnit ( i ) ;
51275: LD_VAR 0 5
51279: PPUSH
51280: CALL_OW 66
51284: GO 51272
51286: POP
51287: POP
// exit ;
51288: GO 51335
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51290: LD_VAR 0 1
51294: PPUSH
51295: CALL_OW 266
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: IN
51310: IFFALSE 51335
// SetBName ( building , @ & GetSide ( building ) ) ;
51312: LD_VAR 0 1
51316: PPUSH
51317: LD_STRING @
51319: PUSH
51320: LD_VAR 0 1
51324: PPUSH
51325: CALL_OW 255
51329: STR
51330: PPUSH
51331: CALL_OW 500
// end ; end_of_file
51335: LD_VAR 0 4
51339: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51340: LD_EXP 36
51344: PUSH
51345: CALL 51550 0 0
51349: AND
51350: PUSH
51351: LD_OWVAR 4
51355: AND
51356: IFFALSE 51547
51358: GO 51360
51360: DISABLE
51361: LD_INT 0
51363: PPUSH
51364: PPUSH
// begin canWin := false ;
51365: LD_ADDR_VAR 0 2
51369: PUSH
51370: LD_INT 0
51372: ST_TO_ADDR
// if not HasPower ( your_side ) then
51373: LD_OWVAR 2
51377: PPUSH
51378: CALL 51590 0 1
51382: NOT
51383: IFFALSE 51394
// begin Multiplayer_Loose_Message ;
51385: CALL_OW 521
// enable ( mpLose ) ;
51389: LD_INT 102
51391: ENABLE_MARKED
// end else
51392: GO 51547
// begin canWin := true ;
51394: LD_ADDR_VAR 0 2
51398: PUSH
51399: LD_INT 1
51401: ST_TO_ADDR
// for i := 1 to 8 do
51402: LD_ADDR_VAR 0 1
51406: PUSH
51407: DOUBLE
51408: LD_INT 1
51410: DEC
51411: ST_TO_ADDR
51412: LD_INT 8
51414: PUSH
51415: FOR_TO
51416: IFFALSE 51533
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51418: LD_EXP 5
51422: PUSH
51423: LD_VAR 0 1
51427: ARRAY
51428: PUSH
51429: LD_VAR 0 1
51433: PPUSH
51434: CALL_OW 108
51438: AND
51439: PUSH
51440: LD_VAR 0 1
51444: PUSH
51445: LD_OWVAR 2
51449: NONEQUAL
51450: AND
51451: IFFALSE 51531
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51453: LD_EXP 6
51457: PUSH
51458: LD_VAR 0 1
51462: ARRAY
51463: NOT
51464: PUSH
51465: LD_EXP 6
51469: PUSH
51470: LD_VAR 0 1
51474: ARRAY
51475: PUSH
51476: LD_EXP 6
51480: PUSH
51481: LD_OWVAR 2
51485: ARRAY
51486: NONEQUAL
51487: PUSH
51488: LD_OWVAR 2
51492: PPUSH
51493: LD_VAR 0 1
51497: PPUSH
51498: CALL_OW 81
51502: PUSH
51503: LD_INT 1
51505: NONEQUAL
51506: AND
51507: OR
51508: IFFALSE 51531
// if HasPower ( i ) then
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL 51590 0 1
51519: IFFALSE 51531
// begin canWin := false ;
51521: LD_ADDR_VAR 0 2
51525: PUSH
51526: LD_INT 0
51528: ST_TO_ADDR
// break ;
51529: GO 51533
// end ;
51531: GO 51415
51533: POP
51534: POP
// if canWin then
51535: LD_VAR 0 2
51539: IFFALSE 51546
// enable ( mpWin ) else
51541: LD_INT 101
51543: ENABLE_MARKED
51544: GO 51547
// enable ;
51546: ENABLE
// end ; end ;
51547: PPOPN 2
51549: END
// function CanWinLoose ; begin
51550: LD_INT 0
51552: PPUSH
// result := true ;
51553: LD_ADDR_VAR 0 1
51557: PUSH
51558: LD_INT 1
51560: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51561: CALL_OW 531
51565: PUSH
51566: CALL_OW 519
51570: PUSH
51571: LD_INT 1
51573: GREATER
51574: AND
51575: IFFALSE 51585
// result := false ;
51577: LD_ADDR_VAR 0 1
51581: PUSH
51582: LD_INT 0
51584: ST_TO_ADDR
// end ;
51585: LD_VAR 0 1
51589: RET
// function HasPower ( i ) ; begin
51590: LD_INT 0
51592: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51593: LD_ADDR_VAR 0 2
51597: PUSH
51598: LD_INT 22
51600: PUSH
51601: LD_VAR 0 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 21
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 33
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 33
51635: PUSH
51636: LD_INT 5
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PPUSH
51653: CALL_OW 69
51657: ST_TO_ADDR
// end ; end_of_file
51658: LD_VAR 0 2
51662: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51663: LD_EXP 36
51667: IFFALSE 51710
51669: GO 51671
51671: DISABLE
51672: LD_INT 0
51674: PPUSH
// begin for i := 1 to 8 do
51675: LD_ADDR_VAR 0 1
51679: PUSH
51680: DOUBLE
51681: LD_INT 1
51683: DEC
51684: ST_TO_ADDR
51685: LD_INT 8
51687: PUSH
51688: FOR_TO
51689: IFFALSE 51708
// SetRestrict ( b_depot , i , state_disabled ) ;
51691: LD_INT 0
51693: PPUSH
51694: LD_VAR 0 1
51698: PPUSH
51699: LD_INT 0
51701: PPUSH
51702: CALL_OW 324
51706: GO 51688
51708: POP
51709: POP
// end ;
51710: PPOPN 1
51712: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51713: LD_EXP 36
51717: PUSH
51718: CALL 51923 0 0
51722: AND
51723: PUSH
51724: LD_OWVAR 4
51728: AND
51729: IFFALSE 51920
51731: GO 51733
51733: DISABLE
51734: LD_INT 0
51736: PPUSH
51737: PPUSH
// begin canWin := false ;
51738: LD_ADDR_VAR 0 2
51742: PUSH
51743: LD_INT 0
51745: ST_TO_ADDR
// if not HasPower ( your_side ) then
51746: LD_OWVAR 2
51750: PPUSH
51751: CALL 51963 0 1
51755: NOT
51756: IFFALSE 51767
// begin Multiplayer_Loose_Message ;
51758: CALL_OW 521
// enable ( mpLose ) ;
51762: LD_INT 102
51764: ENABLE_MARKED
// end else
51765: GO 51920
// begin canWin := true ;
51767: LD_ADDR_VAR 0 2
51771: PUSH
51772: LD_INT 1
51774: ST_TO_ADDR
// for i := 1 to 8 do
51775: LD_ADDR_VAR 0 1
51779: PUSH
51780: DOUBLE
51781: LD_INT 1
51783: DEC
51784: ST_TO_ADDR
51785: LD_INT 8
51787: PUSH
51788: FOR_TO
51789: IFFALSE 51906
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51791: LD_EXP 5
51795: PUSH
51796: LD_VAR 0 1
51800: ARRAY
51801: PUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: CALL_OW 108
51811: AND
51812: PUSH
51813: LD_VAR 0 1
51817: PUSH
51818: LD_OWVAR 2
51822: NONEQUAL
51823: AND
51824: IFFALSE 51904
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51826: LD_EXP 6
51830: PUSH
51831: LD_VAR 0 1
51835: ARRAY
51836: NOT
51837: PUSH
51838: LD_EXP 6
51842: PUSH
51843: LD_VAR 0 1
51847: ARRAY
51848: PUSH
51849: LD_EXP 6
51853: PUSH
51854: LD_OWVAR 2
51858: ARRAY
51859: NONEQUAL
51860: PUSH
51861: LD_OWVAR 2
51865: PPUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: CALL_OW 81
51875: PUSH
51876: LD_INT 1
51878: NONEQUAL
51879: AND
51880: OR
51881: IFFALSE 51904
// if HasPower ( i ) then
51883: LD_VAR 0 1
51887: PPUSH
51888: CALL 51963 0 1
51892: IFFALSE 51904
// begin canWin := false ;
51894: LD_ADDR_VAR 0 2
51898: PUSH
51899: LD_INT 0
51901: ST_TO_ADDR
// break ;
51902: GO 51906
// end ;
51904: GO 51788
51906: POP
51907: POP
// if canWin then
51908: LD_VAR 0 2
51912: IFFALSE 51919
// enable ( mpWin ) else
51914: LD_INT 101
51916: ENABLE_MARKED
51917: GO 51920
// enable ;
51919: ENABLE
// end ; end ;
51920: PPOPN 2
51922: END
// function CanWinLoose ; begin
51923: LD_INT 0
51925: PPUSH
// result := true ;
51926: LD_ADDR_VAR 0 1
51930: PUSH
51931: LD_INT 1
51933: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51934: CALL_OW 531
51938: PUSH
51939: CALL_OW 519
51943: PUSH
51944: LD_INT 1
51946: GREATER
51947: AND
51948: IFFALSE 51958
// result := false ;
51950: LD_ADDR_VAR 0 1
51954: PUSH
51955: LD_INT 0
51957: ST_TO_ADDR
// end ;
51958: LD_VAR 0 1
51962: RET
// function HasPower ( i ) ; begin
51963: LD_INT 0
51965: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51966: LD_INT 22
51968: PUSH
51969: LD_VAR 0 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 30
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 30
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PPUSH
52010: CALL_OW 69
52014: NOT
52015: IFFALSE 52019
// exit ;
52017: GO 52084
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52019: LD_ADDR_VAR 0 2
52023: PUSH
52024: LD_INT 22
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 21
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 33
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 33
52061: PUSH
52062: LD_INT 5
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PPUSH
52079: CALL_OW 69
52083: ST_TO_ADDR
// end ; end_of_file
52084: LD_VAR 0 2
52088: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52089: LD_EXP 36
52093: IFFALSE 52432
52095: GO 52097
52097: DISABLE
52098: LD_INT 0
52100: PPUSH
52101: PPUSH
52102: PPUSH
// begin mpKingPoints := [ ] ;
52103: LD_ADDR_EXP 41
52107: PUSH
52108: EMPTY
52109: ST_TO_ADDR
// if mpTeamGame then
52110: LD_EXP 9
52114: IFFALSE 52168
// begin for i := 1 to Count ( mpTeams ) do
52116: LD_ADDR_VAR 0 1
52120: PUSH
52121: DOUBLE
52122: LD_INT 1
52124: DEC
52125: ST_TO_ADDR
52126: LD_EXP 8
52130: PPUSH
52131: CALL 5005 0 1
52135: PUSH
52136: FOR_TO
52137: IFFALSE 52164
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52139: LD_ADDR_EXP 41
52143: PUSH
52144: LD_EXP 41
52148: PPUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: LD_INT 0
52156: PPUSH
52157: CALL_OW 1
52161: ST_TO_ADDR
52162: GO 52136
52164: POP
52165: POP
// end else
52166: GO 52211
// begin for i := 1 to 8 do
52168: LD_ADDR_VAR 0 1
52172: PUSH
52173: DOUBLE
52174: LD_INT 1
52176: DEC
52177: ST_TO_ADDR
52178: LD_INT 8
52180: PUSH
52181: FOR_TO
52182: IFFALSE 52209
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52184: LD_ADDR_EXP 41
52188: PUSH
52189: LD_EXP 41
52193: PPUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: LD_INT 0
52201: PPUSH
52202: CALL_OW 1
52206: ST_TO_ADDR
52207: GO 52181
52209: POP
52210: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52211: LD_ADDR_VAR 0 3
52215: PUSH
52216: LD_INT 73
52218: PPUSH
52219: LD_INT 0
52221: PPUSH
52222: CALL_OW 517
52226: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52227: LD_ADDR_VAR 0 1
52231: PUSH
52232: DOUBLE
52233: LD_INT 1
52235: DEC
52236: ST_TO_ADDR
52237: LD_VAR 0 3
52241: PUSH
52242: LD_INT 1
52244: ARRAY
52245: PUSH
52246: FOR_TO
52247: IFFALSE 52314
// for j := 1 to 8 do
52249: LD_ADDR_VAR 0 2
52253: PUSH
52254: DOUBLE
52255: LD_INT 1
52257: DEC
52258: ST_TO_ADDR
52259: LD_INT 8
52261: PUSH
52262: FOR_TO
52263: IFFALSE 52310
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52265: LD_VAR 0 3
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PUSH
52274: LD_VAR 0 1
52278: ARRAY
52279: PPUSH
52280: LD_VAR 0 3
52284: PUSH
52285: LD_INT 2
52287: ARRAY
52288: PUSH
52289: LD_VAR 0 1
52293: ARRAY
52294: PPUSH
52295: LD_VAR 0 2
52299: PPUSH
52300: LD_INT 12
52302: NEG
52303: PPUSH
52304: CALL_OW 330
52308: GO 52262
52310: POP
52311: POP
52312: GO 52246
52314: POP
52315: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52316: LD_EXP 31
52320: PPUSH
52321: LD_INT 1
52323: PPUSH
52324: CALL_OW 424
// UpdateCounter ;
52328: CALL 52934 0 0
// repeat wait ( 0 0$1 ) ;
52332: LD_INT 35
52334: PPUSH
52335: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52339: LD_ADDR_VAR 0 3
52343: PUSH
52344: LD_EXP 31
52348: PPUSH
52349: LD_INT 3
52351: PUSH
52352: LD_INT 57
52354: PUSH
52355: EMPTY
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 50
52364: PUSH
52365: EMPTY
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 30
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 30
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: PPUSH
52401: CALL_OW 70
52405: ST_TO_ADDR
// if not tmp then
52406: LD_VAR 0 3
52410: NOT
52411: IFFALSE 52415
// continue ;
52413: GO 52332
// AddPoints ( tmp ) ;
52415: LD_VAR 0 3
52419: PPUSH
52420: CALL 52612 0 1
// UpdateCounter ;
52424: CALL 52934 0 0
// until false ;
52428: LD_INT 0
52430: IFFALSE 52332
// end ;
52432: PPOPN 3
52434: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52435: LD_EXP 36
52439: PUSH
52440: LD_EXP 34
52444: AND
52445: IFFALSE 52609
52447: GO 52449
52449: DISABLE
52450: LD_INT 0
52452: PPUSH
52453: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52454: LD_ADDR_VAR 0 2
52458: PUSH
52459: LD_INT 73
52461: PPUSH
52462: LD_INT 0
52464: PPUSH
52465: CALL_OW 517
52469: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52470: LD_ADDR_VAR 0 1
52474: PUSH
52475: DOUBLE
52476: LD_INT 1
52478: DEC
52479: ST_TO_ADDR
52480: LD_VAR 0 2
52484: PUSH
52485: LD_INT 1
52487: ARRAY
52488: PUSH
52489: FOR_TO
52490: IFFALSE 52531
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52492: LD_VAR 0 2
52496: PUSH
52497: LD_INT 1
52499: ARRAY
52500: PUSH
52501: LD_VAR 0 1
52505: ARRAY
52506: PPUSH
52507: LD_VAR 0 2
52511: PUSH
52512: LD_INT 2
52514: ARRAY
52515: PUSH
52516: LD_VAR 0 1
52520: ARRAY
52521: PPUSH
52522: LD_INT 125
52524: PPUSH
52525: CALL_OW 495
52529: GO 52489
52531: POP
52532: POP
// repeat wait ( mpEmissions ) ;
52533: LD_EXP 34
52537: PPUSH
52538: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52542: LD_ADDR_VAR 0 1
52546: PUSH
52547: DOUBLE
52548: LD_INT 1
52550: DEC
52551: ST_TO_ADDR
52552: LD_VAR 0 2
52556: PUSH
52557: LD_INT 1
52559: ARRAY
52560: PUSH
52561: FOR_TO
52562: IFFALSE 52603
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PUSH
52573: LD_VAR 0 1
52577: ARRAY
52578: PPUSH
52579: LD_VAR 0 2
52583: PUSH
52584: LD_INT 2
52586: ARRAY
52587: PUSH
52588: LD_VAR 0 1
52592: ARRAY
52593: PPUSH
52594: LD_INT 15
52596: PPUSH
52597: CALL_OW 495
52601: GO 52561
52603: POP
52604: POP
// until false ;
52605: LD_INT 0
52607: IFFALSE 52533
// end ;
52609: PPOPN 2
52611: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52612: LD_INT 0
52614: PPUSH
52615: PPUSH
52616: PPUSH
52617: PPUSH
52618: PPUSH
// if mpTeamGame then
52619: LD_EXP 9
52623: IFFALSE 52820
// begin first := depots [ 1 ] ;
52625: LD_ADDR_VAR 0 4
52629: PUSH
52630: LD_VAR 0 1
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: ST_TO_ADDR
// side := GetSide ( first ) ;
52639: LD_ADDR_VAR 0 6
52643: PUSH
52644: LD_VAR 0 4
52648: PPUSH
52649: CALL_OW 255
52653: ST_TO_ADDR
// for i := 1 to mpTeams do
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: DOUBLE
52660: LD_INT 1
52662: DEC
52663: ST_TO_ADDR
52664: LD_EXP 8
52668: PUSH
52669: FOR_TO
52670: IFFALSE 52704
// if side in mpTeams [ i ] then
52672: LD_VAR 0 6
52676: PUSH
52677: LD_EXP 8
52681: PUSH
52682: LD_VAR 0 3
52686: ARRAY
52687: IN
52688: IFFALSE 52702
// begin team := i ;
52690: LD_ADDR_VAR 0 5
52694: PUSH
52695: LD_VAR 0 3
52699: ST_TO_ADDR
// break ;
52700: GO 52704
// end ;
52702: GO 52669
52704: POP
52705: POP
// if not team then
52706: LD_VAR 0 5
52710: NOT
52711: IFFALSE 52715
// exit ;
52713: GO 52929
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52715: LD_EXP 31
52719: PPUSH
52720: LD_INT 81
52722: PUSH
52723: LD_VAR 0 6
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PPUSH
52732: CALL_OW 70
52736: IFFALSE 52740
// exit ;
52738: GO 52929
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52740: LD_ADDR_EXP 41
52744: PUSH
52745: LD_EXP 41
52749: PPUSH
52750: LD_VAR 0 5
52754: PPUSH
52755: LD_EXP 41
52759: PUSH
52760: LD_VAR 0 5
52764: ARRAY
52765: PUSH
52766: LD_INT 1
52768: PLUS
52769: PPUSH
52770: CALL_OW 1
52774: ST_TO_ADDR
// for i in mpTeams [ team ] do
52775: LD_ADDR_VAR 0 3
52779: PUSH
52780: LD_EXP 8
52784: PUSH
52785: LD_VAR 0 5
52789: ARRAY
52790: PUSH
52791: FOR_IN
52792: IFFALSE 52816
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52794: LD_VAR 0 3
52798: PPUSH
52799: LD_EXP 41
52803: PUSH
52804: LD_VAR 0 5
52808: ARRAY
52809: PPUSH
52810: CALL_OW 506
52814: GO 52791
52816: POP
52817: POP
// end else
52818: GO 52929
// begin first := depots [ 1 ] ;
52820: LD_ADDR_VAR 0 4
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: LD_INT 1
52832: ARRAY
52833: ST_TO_ADDR
// side := GetSide ( first ) ;
52834: LD_ADDR_VAR 0 6
52838: PUSH
52839: LD_VAR 0 4
52843: PPUSH
52844: CALL_OW 255
52848: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52849: LD_EXP 31
52853: PPUSH
52854: LD_INT 81
52856: PUSH
52857: LD_VAR 0 6
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PPUSH
52866: CALL_OW 70
52870: IFFALSE 52874
// exit ;
52872: GO 52929
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52874: LD_ADDR_EXP 41
52878: PUSH
52879: LD_EXP 41
52883: PPUSH
52884: LD_VAR 0 6
52888: PPUSH
52889: LD_EXP 41
52893: PUSH
52894: LD_VAR 0 6
52898: ARRAY
52899: PUSH
52900: LD_INT 1
52902: PLUS
52903: PPUSH
52904: CALL_OW 1
52908: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52909: LD_VAR 0 6
52913: PPUSH
52914: LD_EXP 41
52918: PUSH
52919: LD_VAR 0 6
52923: ARRAY
52924: PPUSH
52925: CALL_OW 506
// end ; end ;
52929: LD_VAR 0 2
52933: RET
// function UpdateCounter ; var i ; begin
52934: LD_INT 0
52936: PPUSH
52937: PPUSH
// result := [ ] ;
52938: LD_ADDR_VAR 0 1
52942: PUSH
52943: EMPTY
52944: ST_TO_ADDR
// if mpTeamGame then
52945: LD_EXP 9
52949: IFFALSE 53016
// begin for i := 1 to mpTeams do
52951: LD_ADDR_VAR 0 2
52955: PUSH
52956: DOUBLE
52957: LD_INT 1
52959: DEC
52960: ST_TO_ADDR
52961: LD_EXP 8
52965: PUSH
52966: FOR_TO
52967: IFFALSE 53012
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52969: LD_ADDR_VAR 0 1
52973: PUSH
52974: LD_VAR 0 1
52978: PUSH
52979: LD_STRING #KingoftheHill-Team
52981: PUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_EXP 41
52991: PUSH
52992: LD_VAR 0 2
52996: ARRAY
52997: PUSH
52998: LD_EXP 32
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: ADD
53009: ST_TO_ADDR
53010: GO 52966
53012: POP
53013: POP
// end else
53014: GO 53089
// begin for i := 1 to 8 do
53016: LD_ADDR_VAR 0 2
53020: PUSH
53021: DOUBLE
53022: LD_INT 1
53024: DEC
53025: ST_TO_ADDR
53026: LD_INT 8
53028: PUSH
53029: FOR_TO
53030: IFFALSE 53087
// if mpSidePositions [ i ] then
53032: LD_EXP 5
53036: PUSH
53037: LD_VAR 0 2
53041: ARRAY
53042: IFFALSE 53085
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53044: LD_ADDR_VAR 0 1
53048: PUSH
53049: LD_VAR 0 1
53053: PUSH
53054: LD_STRING #KingoftheHill-Player
53056: PUSH
53057: LD_VAR 0 2
53061: PUSH
53062: LD_EXP 41
53066: PUSH
53067: LD_VAR 0 2
53071: ARRAY
53072: PUSH
53073: LD_EXP 32
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: ADD
53084: ST_TO_ADDR
53085: GO 53029
53087: POP
53088: POP
// end ; mpDisplayStrings := result ;
53089: LD_ADDR_EXP 35
53093: PUSH
53094: LD_VAR 0 1
53098: ST_TO_ADDR
// end ;
53099: LD_VAR 0 1
53103: RET
// export function HowMuchPointsKing ( side ) ; begin
53104: LD_INT 0
53106: PPUSH
// result := HowMuchPoints ( side ) ;
53107: LD_ADDR_VAR 0 2
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL 53127 0 1
53121: ST_TO_ADDR
// end ;
53122: LD_VAR 0 2
53126: RET
// function HowMuchPoints ( side ) ; var i ; begin
53127: LD_INT 0
53129: PPUSH
53130: PPUSH
// if mpTeamGame then
53131: LD_EXP 9
53135: IFFALSE 53204
// begin for i := 1 to Count ( mpTeams ) do
53137: LD_ADDR_VAR 0 3
53141: PUSH
53142: DOUBLE
53143: LD_INT 1
53145: DEC
53146: ST_TO_ADDR
53147: LD_EXP 8
53151: PPUSH
53152: CALL 5005 0 1
53156: PUSH
53157: FOR_TO
53158: IFFALSE 53200
// begin if side in mpTeams [ i ] then
53160: LD_VAR 0 1
53164: PUSH
53165: LD_EXP 8
53169: PUSH
53170: LD_VAR 0 3
53174: ARRAY
53175: IN
53176: IFFALSE 53198
// begin result := mpKingPoints [ i ] ;
53178: LD_ADDR_VAR 0 2
53182: PUSH
53183: LD_EXP 41
53187: PUSH
53188: LD_VAR 0 3
53192: ARRAY
53193: ST_TO_ADDR
// exit ;
53194: POP
53195: POP
53196: GO 53220
// end ; end ;
53198: GO 53157
53200: POP
53201: POP
// end else
53202: GO 53220
// result := mpKingPoints [ side ] ;
53204: LD_ADDR_VAR 0 2
53208: PUSH
53209: LD_EXP 41
53213: PUSH
53214: LD_VAR 0 1
53218: ARRAY
53219: ST_TO_ADDR
// end ;
53220: LD_VAR 0 2
53224: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53225: LD_EXP 36
53229: PUSH
53230: CALL 53552 0 0
53234: AND
53235: PUSH
53236: LD_OWVAR 4
53240: AND
53241: IFFALSE 53477
53243: GO 53245
53245: DISABLE
53246: LD_INT 0
53248: PPUSH
53249: PPUSH
// begin canWin := false ;
53250: LD_ADDR_VAR 0 2
53254: PUSH
53255: LD_INT 0
53257: ST_TO_ADDR
// if not HasPower ( your_side ) then
53258: LD_OWVAR 2
53262: PPUSH
53263: CALL 53592 0 1
53267: NOT
53268: IFFALSE 53279
// begin Multiplayer_Loose_Message ;
53270: CALL_OW 521
// enable ( mpLose ) ;
53274: LD_INT 102
53276: ENABLE_MARKED
// end else
53277: GO 53477
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53279: LD_ADDR_VAR 0 2
53283: PUSH
53284: LD_OWVAR 2
53288: PPUSH
53289: CALL 53127 0 1
53293: PUSH
53294: LD_EXP 32
53298: GREATEREQUAL
53299: PUSH
53300: LD_OWVAR 2
53304: PPUSH
53305: CALL 53592 0 1
53309: AND
53310: PUSH
53311: CALL 53480 0 0
53315: NOT
53316: OR
53317: ST_TO_ADDR
// for i := 1 to 8 do
53318: LD_ADDR_VAR 0 1
53322: PUSH
53323: DOUBLE
53324: LD_INT 1
53326: DEC
53327: ST_TO_ADDR
53328: LD_INT 8
53330: PUSH
53331: FOR_TO
53332: IFFALSE 53463
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53334: LD_EXP 5
53338: PUSH
53339: LD_VAR 0 1
53343: ARRAY
53344: PUSH
53345: LD_VAR 0 1
53349: PPUSH
53350: CALL_OW 108
53354: AND
53355: PUSH
53356: LD_VAR 0 1
53360: PUSH
53361: LD_OWVAR 2
53365: NONEQUAL
53366: AND
53367: IFFALSE 53461
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53369: LD_EXP 6
53373: PUSH
53374: LD_VAR 0 1
53378: ARRAY
53379: NOT
53380: PUSH
53381: LD_EXP 6
53385: PUSH
53386: LD_VAR 0 1
53390: ARRAY
53391: PUSH
53392: LD_EXP 6
53396: PUSH
53397: LD_OWVAR 2
53401: ARRAY
53402: NONEQUAL
53403: PUSH
53404: LD_OWVAR 2
53408: PPUSH
53409: LD_VAR 0 1
53413: PPUSH
53414: CALL_OW 81
53418: PUSH
53419: LD_INT 1
53421: NONEQUAL
53422: AND
53423: OR
53424: IFFALSE 53461
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53426: LD_VAR 0 1
53430: PPUSH
53431: CALL 53127 0 1
53435: PUSH
53436: LD_EXP 32
53440: GREATEREQUAL
53441: PUSH
53442: LD_VAR 0 1
53446: PPUSH
53447: CALL 53592 0 1
53451: AND
53452: IFFALSE 53461
// begin enable ( mpLose ) ;
53454: LD_INT 102
53456: ENABLE_MARKED
// exit ;
53457: POP
53458: POP
53459: GO 53477
// end ;
53461: GO 53331
53463: POP
53464: POP
// if canWin then
53465: LD_VAR 0 2
53469: IFFALSE 53476
// enable ( mpWin ) else
53471: LD_INT 101
53473: ENABLE_MARKED
53474: GO 53477
// enable ;
53476: ENABLE
// end ; end ;
53477: PPOPN 2
53479: END
// function EnemiesInGame ; var i ; begin
53480: LD_INT 0
53482: PPUSH
53483: PPUSH
// result := false ;
53484: LD_ADDR_VAR 0 1
53488: PUSH
53489: LD_INT 0
53491: ST_TO_ADDR
// for i := 1 to 8 do
53492: LD_ADDR_VAR 0 2
53496: PUSH
53497: DOUBLE
53498: LD_INT 1
53500: DEC
53501: ST_TO_ADDR
53502: LD_INT 8
53504: PUSH
53505: FOR_TO
53506: IFFALSE 53545
// if i <> your_side and HasPower ( i ) then
53508: LD_VAR 0 2
53512: PUSH
53513: LD_OWVAR 2
53517: NONEQUAL
53518: PUSH
53519: LD_VAR 0 2
53523: PPUSH
53524: CALL 53592 0 1
53528: AND
53529: IFFALSE 53543
// begin result := true ;
53531: LD_ADDR_VAR 0 1
53535: PUSH
53536: LD_INT 1
53538: ST_TO_ADDR
// exit ;
53539: POP
53540: POP
53541: GO 53547
// end ;
53543: GO 53505
53545: POP
53546: POP
// end ;
53547: LD_VAR 0 1
53551: RET
// function CanWinLoose ; begin
53552: LD_INT 0
53554: PPUSH
// result := true ;
53555: LD_ADDR_VAR 0 1
53559: PUSH
53560: LD_INT 1
53562: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53563: CALL_OW 531
53567: PUSH
53568: CALL_OW 519
53572: PUSH
53573: LD_INT 1
53575: GREATER
53576: AND
53577: IFFALSE 53587
// result := false ;
53579: LD_ADDR_VAR 0 1
53583: PUSH
53584: LD_INT 0
53586: ST_TO_ADDR
// end ;
53587: LD_VAR 0 1
53591: RET
// function HasPower ( i ) ; begin
53592: LD_INT 0
53594: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53595: LD_ADDR_VAR 0 2
53599: PUSH
53600: LD_INT 22
53602: PUSH
53603: LD_VAR 0 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 21
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 33
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 33
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PPUSH
53655: CALL_OW 69
53659: ST_TO_ADDR
// end ; end_of_file end_of_file
53660: LD_VAR 0 2
53664: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53665: LD_VAR 0 1
53669: PUSH
53670: LD_INT 200
53672: DOUBLE
53673: GREATEREQUAL
53674: IFFALSE 53682
53676: LD_INT 299
53678: DOUBLE
53679: LESSEQUAL
53680: IFTRUE 53684
53682: GO 53716
53684: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53685: LD_VAR 0 1
53689: PPUSH
53690: LD_VAR 0 2
53694: PPUSH
53695: LD_VAR 0 3
53699: PPUSH
53700: LD_VAR 0 4
53704: PPUSH
53705: LD_VAR 0 5
53709: PPUSH
53710: CALL 54413 0 5
53714: GO 53793
53716: LD_INT 300
53718: DOUBLE
53719: GREATEREQUAL
53720: IFFALSE 53728
53722: LD_INT 399
53724: DOUBLE
53725: LESSEQUAL
53726: IFTRUE 53730
53728: GO 53792
53730: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53731: LD_VAR 0 1
53735: PPUSH
53736: LD_VAR 0 2
53740: PPUSH
53741: LD_VAR 0 3
53745: PPUSH
53746: LD_VAR 0 4
53750: PPUSH
53751: LD_VAR 0 5
53755: PPUSH
53756: LD_VAR 0 6
53760: PPUSH
53761: LD_VAR 0 7
53765: PPUSH
53766: LD_VAR 0 8
53770: PPUSH
53771: LD_VAR 0 9
53775: PPUSH
53776: LD_VAR 0 10
53780: PPUSH
53781: LD_VAR 0 11
53785: PPUSH
53786: CALL 59160 0 11
53790: GO 53793
53792: POP
// end ;
53793: PPOPN 11
53795: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53796: LD_VAR 0 1
53800: PPUSH
53801: LD_VAR 0 2
53805: PPUSH
53806: LD_VAR 0 3
53810: PPUSH
53811: LD_VAR 0 4
53815: PPUSH
53816: LD_VAR 0 5
53820: PPUSH
53821: CALL 53878 0 5
// end ; end_of_file
53825: PPOPN 5
53827: END
// export function SOS_UnitDestroyed ( un ) ; begin
53828: LD_INT 0
53830: PPUSH
// ComRadiation ( un ) ;
53831: LD_VAR 0 1
53835: PPUSH
53836: CALL 54817 0 1
// end ;
53840: LD_VAR 0 2
53844: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53845: LD_INT 0
53847: PPUSH
// ComRadiation ( un ) ;
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL 54817 0 1
// end ;
53857: LD_VAR 0 2
53861: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53862: LD_INT 0
53864: PPUSH
// end ;
53865: LD_VAR 0 4
53869: RET
// export function SOS_Command ( cmd ) ; begin
53870: LD_INT 0
53872: PPUSH
// end ;
53873: LD_VAR 0 2
53877: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53878: LD_INT 0
53880: PPUSH
// end ;
53881: LD_VAR 0 6
53885: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53886: LD_INT 0
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
// if not vehicle or not factory then
53893: LD_VAR 0 1
53897: NOT
53898: PUSH
53899: LD_VAR 0 2
53903: NOT
53904: OR
53905: IFFALSE 53909
// exit ;
53907: GO 54408
// if not factoryWaypoints then
53909: LD_EXP 52
53913: NOT
53914: IFFALSE 53918
// exit ;
53916: GO 54408
// for i := 1 to Count ( factoryWaypoints ) do
53918: LD_ADDR_VAR 0 4
53922: PUSH
53923: DOUBLE
53924: LD_INT 1
53926: DEC
53927: ST_TO_ADDR
53928: LD_EXP 52
53932: PPUSH
53933: CALL 5005 0 1
53937: PUSH
53938: FOR_TO
53939: IFFALSE 54406
// if factoryWaypoints [ i ] [ 2 ] = factory then
53941: LD_EXP 52
53945: PUSH
53946: LD_VAR 0 4
53950: ARRAY
53951: PUSH
53952: LD_INT 2
53954: ARRAY
53955: PUSH
53956: LD_VAR 0 2
53960: EQUAL
53961: IFFALSE 54404
// begin if GetControl ( vehicle ) = control_manual then
53963: LD_VAR 0 1
53967: PPUSH
53968: CALL_OW 263
53972: PUSH
53973: LD_INT 1
53975: EQUAL
53976: IFFALSE 54287
// begin driver := IsDrivenBy ( vehicle ) ;
53978: LD_ADDR_VAR 0 6
53982: PUSH
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 311
53992: ST_TO_ADDR
// tag := GetTag ( driver ) ;
53993: LD_ADDR_VAR 0 5
53997: PUSH
53998: LD_VAR 0 6
54002: PPUSH
54003: CALL_OW 110
54007: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
54008: LD_VAR 0 5
54012: PUSH
54013: LD_INT 501
54015: EQUAL
54016: PUSH
54017: LD_VAR 0 1
54021: PPUSH
54022: CALL_OW 110
54026: PUSH
54027: LD_INT 501
54029: EQUAL
54030: OR
54031: IFFALSE 54037
// exit ;
54033: POP
54034: POP
54035: GO 54408
// if not HasTask ( driver ) then
54037: LD_VAR 0 6
54041: PPUSH
54042: CALL_OW 314
54046: NOT
54047: IFFALSE 54285
// begin SetTag ( driver , tDriver ) ;
54049: LD_VAR 0 6
54053: PPUSH
54054: LD_INT 501
54056: PPUSH
54057: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54061: LD_VAR 0 1
54065: PPUSH
54066: LD_INT 501
54068: PPUSH
54069: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54073: LD_ADDR_VAR 0 7
54077: PUSH
54078: LD_EXP 52
54082: PUSH
54083: LD_VAR 0 4
54087: ARRAY
54088: PUSH
54089: LD_INT 3
54091: ARRAY
54092: PPUSH
54093: LD_EXP 52
54097: PUSH
54098: LD_VAR 0 4
54102: ARRAY
54103: PUSH
54104: LD_INT 4
54106: ARRAY
54107: PPUSH
54108: CALL_OW 428
54112: ST_TO_ADDR
// if hex then
54113: LD_VAR 0 7
54117: IFFALSE 54135
// ComMoveUnit ( driver , hex ) else
54119: LD_VAR 0 6
54123: PPUSH
54124: LD_VAR 0 7
54128: PPUSH
54129: CALL_OW 112
54133: GO 54174
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54135: LD_VAR 0 6
54139: PPUSH
54140: LD_EXP 52
54144: PUSH
54145: LD_VAR 0 4
54149: ARRAY
54150: PUSH
54151: LD_INT 3
54153: ARRAY
54154: PPUSH
54155: LD_EXP 52
54159: PUSH
54160: LD_VAR 0 4
54164: ARRAY
54165: PUSH
54166: LD_INT 4
54168: ARRAY
54169: PPUSH
54170: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54174: LD_VAR 0 6
54178: PPUSH
54179: CALL_OW 181
// if Multiplayer then
54183: LD_OWVAR 4
54187: IFFALSE 54236
// begin repeat wait ( 10 ) ;
54189: LD_INT 10
54191: PPUSH
54192: CALL_OW 67
// until not IsInUnit ( driver ) ;
54196: LD_VAR 0 6
54200: PPUSH
54201: CALL_OW 310
54205: NOT
54206: IFFALSE 54189
// if not HasTask ( driver ) then
54208: LD_VAR 0 6
54212: PPUSH
54213: CALL_OW 314
54217: NOT
54218: IFFALSE 54234
// ComEnterUnit ( driver , factory ) ;
54220: LD_VAR 0 6
54224: PPUSH
54225: LD_VAR 0 2
54229: PPUSH
54230: CALL_OW 120
// end else
54234: GO 54250
// AddComEnterUnit ( driver , factory ) ;
54236: LD_VAR 0 6
54240: PPUSH
54241: LD_VAR 0 2
54245: PPUSH
54246: CALL_OW 180
// wait ( 0 0$1 ) ;
54250: LD_INT 35
54252: PPUSH
54253: CALL_OW 67
// SetTag ( driver , tag ) ;
54257: LD_VAR 0 6
54261: PPUSH
54262: LD_VAR 0 5
54266: PPUSH
54267: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54271: LD_VAR 0 1
54275: PPUSH
54276: LD_INT 0
54278: PPUSH
54279: CALL_OW 109
// break ;
54283: GO 54406
// end ; end else
54285: GO 54404
// if GetControl ( vehicle ) = control_remote then
54287: LD_VAR 0 1
54291: PPUSH
54292: CALL_OW 263
54296: PUSH
54297: LD_INT 2
54299: EQUAL
54300: IFFALSE 54363
// begin wait ( 0 0$2 ) ;
54302: LD_INT 70
54304: PPUSH
54305: CALL_OW 67
// if Connect ( vehicle ) then
54309: LD_VAR 0 1
54313: PPUSH
54314: CALL 11211 0 1
54318: IFFALSE 54359
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54320: LD_VAR 0 1
54324: PPUSH
54325: LD_EXP 52
54329: PUSH
54330: LD_VAR 0 4
54334: ARRAY
54335: PUSH
54336: LD_INT 3
54338: ARRAY
54339: PPUSH
54340: LD_EXP 52
54344: PUSH
54345: LD_VAR 0 4
54349: ARRAY
54350: PUSH
54351: LD_INT 4
54353: ARRAY
54354: PPUSH
54355: CALL_OW 171
// break ;
54359: GO 54406
// end else
54361: GO 54404
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54363: LD_VAR 0 1
54367: PPUSH
54368: LD_EXP 52
54372: PUSH
54373: LD_VAR 0 4
54377: ARRAY
54378: PUSH
54379: LD_INT 3
54381: ARRAY
54382: PPUSH
54383: LD_EXP 52
54387: PUSH
54388: LD_VAR 0 4
54392: ARRAY
54393: PUSH
54394: LD_INT 4
54396: ARRAY
54397: PPUSH
54398: CALL_OW 171
// break ;
54402: GO 54406
// end ; end ;
54404: GO 53938
54406: POP
54407: POP
// end ;
54408: LD_VAR 0 3
54412: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54413: LD_INT 0
54415: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54416: LD_VAR 0 1
54420: PUSH
54421: LD_INT 250
54423: EQUAL
54424: PUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: CALL_OW 264
54434: PUSH
54435: LD_INT 81
54437: EQUAL
54438: AND
54439: IFFALSE 54460
// MinerPlaceMine ( unit , x , y ) ;
54441: LD_VAR 0 2
54445: PPUSH
54446: LD_VAR 0 4
54450: PPUSH
54451: LD_VAR 0 5
54455: PPUSH
54456: CALL 57552 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54460: LD_VAR 0 1
54464: PUSH
54465: LD_INT 251
54467: EQUAL
54468: PUSH
54469: LD_VAR 0 2
54473: PPUSH
54474: CALL_OW 264
54478: PUSH
54479: LD_INT 81
54481: EQUAL
54482: AND
54483: IFFALSE 54504
// MinerDetonateMine ( unit , x , y ) ;
54485: LD_VAR 0 2
54489: PPUSH
54490: LD_VAR 0 4
54494: PPUSH
54495: LD_VAR 0 5
54499: PPUSH
54500: CALL 57827 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54504: LD_VAR 0 1
54508: PUSH
54509: LD_INT 252
54511: EQUAL
54512: PUSH
54513: LD_VAR 0 2
54517: PPUSH
54518: CALL_OW 264
54522: PUSH
54523: LD_INT 81
54525: EQUAL
54526: AND
54527: IFFALSE 54548
// MinerCreateMinefield ( unit , x , y ) ;
54529: LD_VAR 0 2
54533: PPUSH
54534: LD_VAR 0 4
54538: PPUSH
54539: LD_VAR 0 5
54543: PPUSH
54544: CALL 58244 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54548: LD_VAR 0 1
54552: PUSH
54553: LD_INT 253
54555: EQUAL
54556: PUSH
54557: LD_VAR 0 2
54561: PPUSH
54562: CALL_OW 257
54566: PUSH
54567: LD_INT 5
54569: EQUAL
54570: AND
54571: IFFALSE 54592
// ComBinocular ( unit , x , y ) ;
54573: LD_VAR 0 2
54577: PPUSH
54578: LD_VAR 0 4
54582: PPUSH
54583: LD_VAR 0 5
54587: PPUSH
54588: CALL 58613 0 3
// if selectedUnit then
54592: LD_VAR 0 3
54596: IFFALSE 54652
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54598: LD_VAR 0 1
54602: PUSH
54603: LD_INT 254
54605: EQUAL
54606: PUSH
54607: LD_VAR 0 2
54611: PPUSH
54612: CALL_OW 264
54616: PUSH
54617: LD_INT 99
54619: EQUAL
54620: AND
54621: PUSH
54622: LD_VAR 0 3
54626: PPUSH
54627: CALL_OW 263
54631: PUSH
54632: LD_INT 3
54634: EQUAL
54635: AND
54636: IFFALSE 54652
// HackDestroyVehicle ( unit , selectedUnit ) ;
54638: LD_VAR 0 2
54642: PPUSH
54643: LD_VAR 0 3
54647: PPUSH
54648: CALL 56916 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54652: LD_VAR 0 1
54656: PUSH
54657: LD_INT 255
54659: EQUAL
54660: PUSH
54661: LD_VAR 0 2
54665: PPUSH
54666: CALL_OW 264
54670: PUSH
54671: LD_INT 14
54673: PUSH
54674: LD_INT 53
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: IN
54681: AND
54682: PUSH
54683: LD_VAR 0 4
54687: PPUSH
54688: LD_VAR 0 5
54692: PPUSH
54693: CALL_OW 488
54697: AND
54698: IFFALSE 54722
// CutTreeXYR ( unit , x , y , 12 ) ;
54700: LD_VAR 0 2
54704: PPUSH
54705: LD_VAR 0 4
54709: PPUSH
54710: LD_VAR 0 5
54714: PPUSH
54715: LD_INT 12
54717: PPUSH
54718: CALL 54913 0 4
// if cmd = 256 then
54722: LD_VAR 0 1
54726: PUSH
54727: LD_INT 256
54729: EQUAL
54730: IFFALSE 54751
// SetFactoryWaypoint ( unit , x , y ) ;
54732: LD_VAR 0 2
54736: PPUSH
54737: LD_VAR 0 4
54741: PPUSH
54742: LD_VAR 0 5
54746: PPUSH
54747: CALL 59168 0 3
// if cmd = 257 then
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 257
54758: EQUAL
54759: IFFALSE 54780
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54761: LD_VAR 0 2
54765: PPUSH
54766: LD_VAR 0 4
54770: PPUSH
54771: LD_VAR 0 5
54775: PPUSH
54776: CALL 59658 0 3
// if cmd = 258 then
54780: LD_VAR 0 1
54784: PUSH
54785: LD_INT 258
54787: EQUAL
54788: IFFALSE 54812
// BurnTreeXYR ( unit , x , y , 8 ) ;
54790: LD_VAR 0 2
54794: PPUSH
54795: LD_VAR 0 4
54799: PPUSH
54800: LD_VAR 0 5
54804: PPUSH
54805: LD_INT 8
54807: PPUSH
54808: CALL 55307 0 4
// end ;
54812: LD_VAR 0 6
54816: RET
// export function ComRadiation ( un ) ; var eff ; begin
54817: LD_INT 0
54819: PPUSH
54820: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 264
54830: PUSH
54831: LD_INT 91
54833: NONEQUAL
54834: IFFALSE 54838
// exit ;
54836: GO 54908
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54838: LD_INT 68
54840: PPUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 255
54850: PPUSH
54851: CALL_OW 321
54855: PUSH
54856: LD_INT 2
54858: EQUAL
54859: IFFALSE 54871
// eff := 70 else
54861: LD_ADDR_VAR 0 3
54865: PUSH
54866: LD_INT 70
54868: ST_TO_ADDR
54869: GO 54879
// eff := 30 ;
54871: LD_ADDR_VAR 0 3
54875: PUSH
54876: LD_INT 30
54878: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54879: LD_VAR 0 1
54883: PPUSH
54884: CALL_OW 250
54888: PPUSH
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 251
54898: PPUSH
54899: LD_VAR 0 3
54903: PPUSH
54904: CALL_OW 495
// end ;
54908: LD_VAR 0 2
54912: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54913: LD_INT 0
54915: PPUSH
54916: PPUSH
54917: PPUSH
54918: PPUSH
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54924: LD_VAR 0 1
54928: PPUSH
54929: CALL_OW 302
54933: NOT
54934: PUSH
54935: LD_VAR 0 2
54939: PPUSH
54940: LD_VAR 0 3
54944: PPUSH
54945: CALL_OW 488
54949: NOT
54950: OR
54951: PUSH
54952: LD_VAR 0 4
54956: NOT
54957: OR
54958: IFFALSE 54962
// exit ;
54960: GO 55302
// list := [ ] ;
54962: LD_ADDR_VAR 0 13
54966: PUSH
54967: EMPTY
54968: ST_TO_ADDR
// if x - r < 0 then
54969: LD_VAR 0 2
54973: PUSH
54974: LD_VAR 0 4
54978: MINUS
54979: PUSH
54980: LD_INT 0
54982: LESS
54983: IFFALSE 54995
// min_x := 0 else
54985: LD_ADDR_VAR 0 7
54989: PUSH
54990: LD_INT 0
54992: ST_TO_ADDR
54993: GO 55011
// min_x := x - r ;
54995: LD_ADDR_VAR 0 7
54999: PUSH
55000: LD_VAR 0 2
55004: PUSH
55005: LD_VAR 0 4
55009: MINUS
55010: ST_TO_ADDR
// if y - r < 0 then
55011: LD_VAR 0 3
55015: PUSH
55016: LD_VAR 0 4
55020: MINUS
55021: PUSH
55022: LD_INT 0
55024: LESS
55025: IFFALSE 55037
// min_y := 0 else
55027: LD_ADDR_VAR 0 8
55031: PUSH
55032: LD_INT 0
55034: ST_TO_ADDR
55035: GO 55053
// min_y := y - r ;
55037: LD_ADDR_VAR 0 8
55041: PUSH
55042: LD_VAR 0 3
55046: PUSH
55047: LD_VAR 0 4
55051: MINUS
55052: ST_TO_ADDR
// max_x := x + r ;
55053: LD_ADDR_VAR 0 9
55057: PUSH
55058: LD_VAR 0 2
55062: PUSH
55063: LD_VAR 0 4
55067: PLUS
55068: ST_TO_ADDR
// max_y := y + r ;
55069: LD_ADDR_VAR 0 10
55073: PUSH
55074: LD_VAR 0 3
55078: PUSH
55079: LD_VAR 0 4
55083: PLUS
55084: ST_TO_ADDR
// for _x = min_x to max_x do
55085: LD_ADDR_VAR 0 11
55089: PUSH
55090: DOUBLE
55091: LD_VAR 0 7
55095: DEC
55096: ST_TO_ADDR
55097: LD_VAR 0 9
55101: PUSH
55102: FOR_TO
55103: IFFALSE 55220
// for _y = min_y to max_y do
55105: LD_ADDR_VAR 0 12
55109: PUSH
55110: DOUBLE
55111: LD_VAR 0 8
55115: DEC
55116: ST_TO_ADDR
55117: LD_VAR 0 10
55121: PUSH
55122: FOR_TO
55123: IFFALSE 55216
// begin if not ValidHex ( _x , _y ) then
55125: LD_VAR 0 11
55129: PPUSH
55130: LD_VAR 0 12
55134: PPUSH
55135: CALL_OW 488
55139: NOT
55140: IFFALSE 55144
// continue ;
55142: GO 55122
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55144: LD_VAR 0 11
55148: PPUSH
55149: LD_VAR 0 12
55153: PPUSH
55154: CALL_OW 351
55158: PUSH
55159: LD_VAR 0 11
55163: PPUSH
55164: LD_VAR 0 12
55168: PPUSH
55169: CALL_OW 554
55173: AND
55174: IFFALSE 55214
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55176: LD_ADDR_VAR 0 13
55180: PUSH
55181: LD_VAR 0 13
55185: PPUSH
55186: LD_VAR 0 13
55190: PUSH
55191: LD_INT 1
55193: PLUS
55194: PPUSH
55195: LD_VAR 0 11
55199: PUSH
55200: LD_VAR 0 12
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PPUSH
55209: CALL_OW 2
55213: ST_TO_ADDR
// end ;
55214: GO 55122
55216: POP
55217: POP
55218: GO 55102
55220: POP
55221: POP
// if not list then
55222: LD_VAR 0 13
55226: NOT
55227: IFFALSE 55231
// exit ;
55229: GO 55302
// for i in list do
55231: LD_ADDR_VAR 0 6
55235: PUSH
55236: LD_VAR 0 13
55240: PUSH
55241: FOR_IN
55242: IFFALSE 55300
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_STRING M
55251: PUSH
55252: LD_VAR 0 6
55256: PUSH
55257: LD_INT 1
55259: ARRAY
55260: PUSH
55261: LD_VAR 0 6
55265: PUSH
55266: LD_INT 2
55268: ARRAY
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: PPUSH
55294: CALL_OW 447
55298: GO 55241
55300: POP
55301: POP
// end ;
55302: LD_VAR 0 5
55306: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55307: LD_INT 0
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
55317: PPUSH
55318: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55319: LD_VAR 0 1
55323: PPUSH
55324: CALL_OW 302
55328: NOT
55329: PUSH
55330: LD_VAR 0 2
55334: PPUSH
55335: LD_VAR 0 3
55339: PPUSH
55340: CALL_OW 488
55344: NOT
55345: OR
55346: PUSH
55347: LD_VAR 0 4
55351: NOT
55352: OR
55353: IFFALSE 55357
// exit ;
55355: GO 55870
// list := [ ] ;
55357: LD_ADDR_VAR 0 13
55361: PUSH
55362: EMPTY
55363: ST_TO_ADDR
// if x - r < 0 then
55364: LD_VAR 0 2
55368: PUSH
55369: LD_VAR 0 4
55373: MINUS
55374: PUSH
55375: LD_INT 0
55377: LESS
55378: IFFALSE 55390
// min_x := 0 else
55380: LD_ADDR_VAR 0 7
55384: PUSH
55385: LD_INT 0
55387: ST_TO_ADDR
55388: GO 55406
// min_x := x - r ;
55390: LD_ADDR_VAR 0 7
55394: PUSH
55395: LD_VAR 0 2
55399: PUSH
55400: LD_VAR 0 4
55404: MINUS
55405: ST_TO_ADDR
// if y - r < 0 then
55406: LD_VAR 0 3
55410: PUSH
55411: LD_VAR 0 4
55415: MINUS
55416: PUSH
55417: LD_INT 0
55419: LESS
55420: IFFALSE 55432
// min_y := 0 else
55422: LD_ADDR_VAR 0 8
55426: PUSH
55427: LD_INT 0
55429: ST_TO_ADDR
55430: GO 55448
// min_y := y - r ;
55432: LD_ADDR_VAR 0 8
55436: PUSH
55437: LD_VAR 0 3
55441: PUSH
55442: LD_VAR 0 4
55446: MINUS
55447: ST_TO_ADDR
// max_x := x + r ;
55448: LD_ADDR_VAR 0 9
55452: PUSH
55453: LD_VAR 0 2
55457: PUSH
55458: LD_VAR 0 4
55462: PLUS
55463: ST_TO_ADDR
// max_y := y + r ;
55464: LD_ADDR_VAR 0 10
55468: PUSH
55469: LD_VAR 0 3
55473: PUSH
55474: LD_VAR 0 4
55478: PLUS
55479: ST_TO_ADDR
// for _x = min_x to max_x do
55480: LD_ADDR_VAR 0 11
55484: PUSH
55485: DOUBLE
55486: LD_VAR 0 7
55490: DEC
55491: ST_TO_ADDR
55492: LD_VAR 0 9
55496: PUSH
55497: FOR_TO
55498: IFFALSE 55615
// for _y = min_y to max_y do
55500: LD_ADDR_VAR 0 12
55504: PUSH
55505: DOUBLE
55506: LD_VAR 0 8
55510: DEC
55511: ST_TO_ADDR
55512: LD_VAR 0 10
55516: PUSH
55517: FOR_TO
55518: IFFALSE 55611
// begin if not ValidHex ( _x , _y ) then
55520: LD_VAR 0 11
55524: PPUSH
55525: LD_VAR 0 12
55529: PPUSH
55530: CALL_OW 488
55534: NOT
55535: IFFALSE 55539
// continue ;
55537: GO 55517
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55539: LD_VAR 0 11
55543: PPUSH
55544: LD_VAR 0 12
55548: PPUSH
55549: CALL_OW 351
55553: PUSH
55554: LD_VAR 0 11
55558: PPUSH
55559: LD_VAR 0 12
55563: PPUSH
55564: CALL_OW 554
55568: AND
55569: IFFALSE 55609
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55571: LD_ADDR_VAR 0 13
55575: PUSH
55576: LD_VAR 0 13
55580: PPUSH
55581: LD_VAR 0 13
55585: PUSH
55586: LD_INT 1
55588: PLUS
55589: PPUSH
55590: LD_VAR 0 11
55594: PUSH
55595: LD_VAR 0 12
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PPUSH
55604: CALL_OW 2
55608: ST_TO_ADDR
// end ;
55609: GO 55517
55611: POP
55612: POP
55613: GO 55497
55615: POP
55616: POP
// if not list then
55617: LD_VAR 0 13
55621: NOT
55622: IFFALSE 55626
// exit ;
55624: GO 55870
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55626: LD_ADDR_VAR 0 13
55630: PUSH
55631: LD_VAR 0 1
55635: PPUSH
55636: LD_VAR 0 13
55640: PPUSH
55641: LD_INT 1
55643: PPUSH
55644: LD_INT 1
55646: PPUSH
55647: CALL 8353 0 4
55651: ST_TO_ADDR
// ComStop ( flame ) ;
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 141
// for i in list do
55661: LD_ADDR_VAR 0 6
55665: PUSH
55666: LD_VAR 0 13
55670: PUSH
55671: FOR_IN
55672: IFFALSE 55703
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55674: LD_VAR 0 1
55678: PPUSH
55679: LD_VAR 0 6
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: PPUSH
55688: LD_VAR 0 6
55692: PUSH
55693: LD_INT 2
55695: ARRAY
55696: PPUSH
55697: CALL_OW 176
55701: GO 55671
55703: POP
55704: POP
// repeat wait ( 0 0$1 ) ;
55705: LD_INT 35
55707: PPUSH
55708: CALL_OW 67
// task := GetTaskList ( flame ) ;
55712: LD_ADDR_VAR 0 14
55716: PUSH
55717: LD_VAR 0 1
55721: PPUSH
55722: CALL_OW 437
55726: ST_TO_ADDR
// if not task then
55727: LD_VAR 0 14
55731: NOT
55732: IFFALSE 55736
// exit ;
55734: GO 55870
// if task [ 1 ] [ 1 ] <> | then
55736: LD_VAR 0 14
55740: PUSH
55741: LD_INT 1
55743: ARRAY
55744: PUSH
55745: LD_INT 1
55747: ARRAY
55748: PUSH
55749: LD_STRING |
55751: NONEQUAL
55752: IFFALSE 55756
// exit ;
55754: GO 55870
// _x := task [ 1 ] [ 2 ] ;
55756: LD_ADDR_VAR 0 11
55760: PUSH
55761: LD_VAR 0 14
55765: PUSH
55766: LD_INT 1
55768: ARRAY
55769: PUSH
55770: LD_INT 2
55772: ARRAY
55773: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55774: LD_ADDR_VAR 0 12
55778: PUSH
55779: LD_VAR 0 14
55783: PUSH
55784: LD_INT 1
55786: ARRAY
55787: PUSH
55788: LD_INT 3
55790: ARRAY
55791: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55792: LD_VAR 0 11
55796: PPUSH
55797: LD_VAR 0 12
55801: PPUSH
55802: CALL_OW 351
55806: NOT
55807: PUSH
55808: LD_VAR 0 11
55812: PPUSH
55813: LD_VAR 0 12
55817: PPUSH
55818: CALL_OW 554
55822: NOT
55823: OR
55824: IFFALSE 55858
// begin task := Delete ( task , 1 ) ;
55826: LD_ADDR_VAR 0 14
55830: PUSH
55831: LD_VAR 0 14
55835: PPUSH
55836: LD_INT 1
55838: PPUSH
55839: CALL_OW 3
55843: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55844: LD_VAR 0 1
55848: PPUSH
55849: LD_VAR 0 14
55853: PPUSH
55854: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55858: LD_VAR 0 1
55862: PPUSH
55863: CALL_OW 314
55867: NOT
55868: IFFALSE 55705
// end ;
55870: LD_VAR 0 5
55874: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55875: LD_EXP 42
55879: NOT
55880: IFFALSE 55930
55882: GO 55884
55884: DISABLE
// begin initHack := true ;
55885: LD_ADDR_EXP 42
55889: PUSH
55890: LD_INT 1
55892: ST_TO_ADDR
// hackTanks := [ ] ;
55893: LD_ADDR_EXP 43
55897: PUSH
55898: EMPTY
55899: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55900: LD_ADDR_EXP 44
55904: PUSH
55905: EMPTY
55906: ST_TO_ADDR
// hackLimit := 3 ;
55907: LD_ADDR_EXP 45
55911: PUSH
55912: LD_INT 3
55914: ST_TO_ADDR
// hackDist := 12 ;
55915: LD_ADDR_EXP 46
55919: PUSH
55920: LD_INT 12
55922: ST_TO_ADDR
// hackCounter := [ ] ;
55923: LD_ADDR_EXP 47
55927: PUSH
55928: EMPTY
55929: ST_TO_ADDR
// end ;
55930: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55931: LD_EXP 42
55935: PUSH
55936: LD_INT 34
55938: PUSH
55939: LD_INT 99
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PPUSH
55946: CALL_OW 69
55950: AND
55951: IFFALSE 56204
55953: GO 55955
55955: DISABLE
55956: LD_INT 0
55958: PPUSH
55959: PPUSH
// begin enable ;
55960: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55961: LD_ADDR_VAR 0 1
55965: PUSH
55966: LD_INT 34
55968: PUSH
55969: LD_INT 99
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PPUSH
55976: CALL_OW 69
55980: PUSH
55981: FOR_IN
55982: IFFALSE 56202
// begin if not i in hackTanks then
55984: LD_VAR 0 1
55988: PUSH
55989: LD_EXP 43
55993: IN
55994: NOT
55995: IFFALSE 56078
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55997: LD_ADDR_EXP 43
56001: PUSH
56002: LD_EXP 43
56006: PPUSH
56007: LD_EXP 43
56011: PUSH
56012: LD_INT 1
56014: PLUS
56015: PPUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 1
56025: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56026: LD_ADDR_EXP 44
56030: PUSH
56031: LD_EXP 44
56035: PPUSH
56036: LD_EXP 44
56040: PUSH
56041: LD_INT 1
56043: PLUS
56044: PPUSH
56045: EMPTY
56046: PPUSH
56047: CALL_OW 1
56051: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56052: LD_ADDR_EXP 47
56056: PUSH
56057: LD_EXP 47
56061: PPUSH
56062: LD_EXP 47
56066: PUSH
56067: LD_INT 1
56069: PLUS
56070: PPUSH
56071: EMPTY
56072: PPUSH
56073: CALL_OW 1
56077: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56078: LD_VAR 0 1
56082: PPUSH
56083: CALL_OW 302
56087: NOT
56088: IFFALSE 56101
// begin HackUnlinkAll ( i ) ;
56090: LD_VAR 0 1
56094: PPUSH
56095: CALL 56207 0 1
// continue ;
56099: GO 55981
// end ; HackCheckCapturedStatus ( i ) ;
56101: LD_VAR 0 1
56105: PPUSH
56106: CALL 56650 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56110: LD_ADDR_VAR 0 2
56114: PUSH
56115: LD_INT 81
56117: PUSH
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 255
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 33
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 91
56144: PUSH
56145: LD_VAR 0 1
56149: PUSH
56150: LD_EXP 46
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 50
56162: PUSH
56163: EMPTY
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: PPUSH
56172: CALL_OW 69
56176: ST_TO_ADDR
// if not tmp then
56177: LD_VAR 0 2
56181: NOT
56182: IFFALSE 56186
// continue ;
56184: GO 55981
// HackLink ( i , tmp ) ;
56186: LD_VAR 0 1
56190: PPUSH
56191: LD_VAR 0 2
56195: PPUSH
56196: CALL 56343 0 2
// end ;
56200: GO 55981
56202: POP
56203: POP
// end ;
56204: PPOPN 2
56206: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56207: LD_INT 0
56209: PPUSH
56210: PPUSH
56211: PPUSH
// if not hack in hackTanks then
56212: LD_VAR 0 1
56216: PUSH
56217: LD_EXP 43
56221: IN
56222: NOT
56223: IFFALSE 56227
// exit ;
56225: GO 56338
// index := GetElementIndex ( hackTanks , hack ) ;
56227: LD_ADDR_VAR 0 4
56231: PUSH
56232: LD_EXP 43
56236: PPUSH
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL 7650 0 2
56246: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56247: LD_EXP 44
56251: PUSH
56252: LD_VAR 0 4
56256: ARRAY
56257: IFFALSE 56338
// begin for i in hackTanksCaptured [ index ] do
56259: LD_ADDR_VAR 0 3
56263: PUSH
56264: LD_EXP 44
56268: PUSH
56269: LD_VAR 0 4
56273: ARRAY
56274: PUSH
56275: FOR_IN
56276: IFFALSE 56302
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56278: LD_VAR 0 3
56282: PUSH
56283: LD_INT 1
56285: ARRAY
56286: PPUSH
56287: LD_VAR 0 3
56291: PUSH
56292: LD_INT 2
56294: ARRAY
56295: PPUSH
56296: CALL_OW 235
56300: GO 56275
56302: POP
56303: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56304: LD_ADDR_EXP 44
56308: PUSH
56309: LD_EXP 44
56313: PPUSH
56314: LD_VAR 0 4
56318: PPUSH
56319: EMPTY
56320: PPUSH
56321: CALL_OW 1
56325: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56326: LD_VAR 0 1
56330: PPUSH
56331: LD_INT 0
56333: PPUSH
56334: CALL_OW 505
// end ; end ;
56338: LD_VAR 0 2
56342: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56343: LD_INT 0
56345: PPUSH
56346: PPUSH
56347: PPUSH
// if not hack in hackTanks or not vehicles then
56348: LD_VAR 0 1
56352: PUSH
56353: LD_EXP 43
56357: IN
56358: NOT
56359: PUSH
56360: LD_VAR 0 2
56364: NOT
56365: OR
56366: IFFALSE 56370
// exit ;
56368: GO 56645
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56370: LD_ADDR_VAR 0 2
56374: PUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: LD_VAR 0 2
56384: PPUSH
56385: LD_INT 1
56387: PPUSH
56388: LD_INT 1
56390: PPUSH
56391: CALL 8300 0 4
56395: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56396: LD_ADDR_VAR 0 5
56400: PUSH
56401: LD_EXP 43
56405: PPUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL 7650 0 2
56415: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56416: LD_EXP 44
56420: PUSH
56421: LD_VAR 0 5
56425: ARRAY
56426: PUSH
56427: LD_EXP 45
56431: LESS
56432: IFFALSE 56621
// begin for i := 1 to vehicles do
56434: LD_ADDR_VAR 0 4
56438: PUSH
56439: DOUBLE
56440: LD_INT 1
56442: DEC
56443: ST_TO_ADDR
56444: LD_VAR 0 2
56448: PUSH
56449: FOR_TO
56450: IFFALSE 56619
// begin if hackTanksCaptured [ index ] = hackLimit then
56452: LD_EXP 44
56456: PUSH
56457: LD_VAR 0 5
56461: ARRAY
56462: PUSH
56463: LD_EXP 45
56467: EQUAL
56468: IFFALSE 56472
// break ;
56470: GO 56619
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56472: LD_ADDR_EXP 47
56476: PUSH
56477: LD_EXP 47
56481: PPUSH
56482: LD_VAR 0 5
56486: PPUSH
56487: LD_EXP 47
56491: PUSH
56492: LD_VAR 0 5
56496: ARRAY
56497: PUSH
56498: LD_INT 1
56500: PLUS
56501: PPUSH
56502: CALL_OW 1
56506: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56507: LD_ADDR_EXP 44
56511: PUSH
56512: LD_EXP 44
56516: PPUSH
56517: LD_VAR 0 5
56521: PUSH
56522: LD_EXP 44
56526: PUSH
56527: LD_VAR 0 5
56531: ARRAY
56532: PUSH
56533: LD_INT 1
56535: PLUS
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PPUSH
56541: LD_VAR 0 2
56545: PUSH
56546: LD_VAR 0 4
56550: ARRAY
56551: PUSH
56552: LD_VAR 0 2
56556: PUSH
56557: LD_VAR 0 4
56561: ARRAY
56562: PPUSH
56563: CALL_OW 255
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PPUSH
56572: CALL 7865 0 3
56576: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56577: LD_VAR 0 2
56581: PUSH
56582: LD_VAR 0 4
56586: ARRAY
56587: PPUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: CALL_OW 255
56597: PPUSH
56598: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56602: LD_VAR 0 2
56606: PUSH
56607: LD_VAR 0 4
56611: ARRAY
56612: PPUSH
56613: CALL_OW 141
// end ;
56617: GO 56449
56619: POP
56620: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56621: LD_VAR 0 1
56625: PPUSH
56626: LD_EXP 44
56630: PUSH
56631: LD_VAR 0 5
56635: ARRAY
56636: PUSH
56637: LD_INT 0
56639: PLUS
56640: PPUSH
56641: CALL_OW 505
// end ;
56645: LD_VAR 0 3
56649: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56650: LD_INT 0
56652: PPUSH
56653: PPUSH
56654: PPUSH
56655: PPUSH
// if not hack in hackTanks then
56656: LD_VAR 0 1
56660: PUSH
56661: LD_EXP 43
56665: IN
56666: NOT
56667: IFFALSE 56671
// exit ;
56669: GO 56911
// index := GetElementIndex ( hackTanks , hack ) ;
56671: LD_ADDR_VAR 0 4
56675: PUSH
56676: LD_EXP 43
56680: PPUSH
56681: LD_VAR 0 1
56685: PPUSH
56686: CALL 7650 0 2
56690: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56691: LD_ADDR_VAR 0 3
56695: PUSH
56696: DOUBLE
56697: LD_EXP 44
56701: PUSH
56702: LD_VAR 0 4
56706: ARRAY
56707: INC
56708: ST_TO_ADDR
56709: LD_INT 1
56711: PUSH
56712: FOR_DOWNTO
56713: IFFALSE 56885
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56715: LD_ADDR_VAR 0 5
56719: PUSH
56720: LD_EXP 44
56724: PUSH
56725: LD_VAR 0 4
56729: ARRAY
56730: PUSH
56731: LD_VAR 0 3
56735: ARRAY
56736: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56737: LD_VAR 0 5
56741: PUSH
56742: LD_INT 1
56744: ARRAY
56745: PPUSH
56746: CALL_OW 302
56750: NOT
56751: PUSH
56752: LD_VAR 0 5
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PPUSH
56761: CALL_OW 255
56765: PUSH
56766: LD_VAR 0 1
56770: PPUSH
56771: CALL_OW 255
56775: NONEQUAL
56776: OR
56777: IFFALSE 56883
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56779: LD_VAR 0 5
56783: PUSH
56784: LD_INT 1
56786: ARRAY
56787: PPUSH
56788: CALL_OW 305
56792: PUSH
56793: LD_VAR 0 5
56797: PUSH
56798: LD_INT 1
56800: ARRAY
56801: PPUSH
56802: CALL_OW 255
56806: PUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: CALL_OW 255
56816: EQUAL
56817: AND
56818: IFFALSE 56842
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56820: LD_VAR 0 5
56824: PUSH
56825: LD_INT 1
56827: ARRAY
56828: PPUSH
56829: LD_VAR 0 5
56833: PUSH
56834: LD_INT 2
56836: ARRAY
56837: PPUSH
56838: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56842: LD_ADDR_EXP 44
56846: PUSH
56847: LD_EXP 44
56851: PPUSH
56852: LD_VAR 0 4
56856: PPUSH
56857: LD_EXP 44
56861: PUSH
56862: LD_VAR 0 4
56866: ARRAY
56867: PPUSH
56868: LD_VAR 0 3
56872: PPUSH
56873: CALL_OW 3
56877: PPUSH
56878: CALL_OW 1
56882: ST_TO_ADDR
// end ; end ;
56883: GO 56712
56885: POP
56886: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56887: LD_VAR 0 1
56891: PPUSH
56892: LD_EXP 44
56896: PUSH
56897: LD_VAR 0 4
56901: ARRAY
56902: PUSH
56903: LD_INT 0
56905: PLUS
56906: PPUSH
56907: CALL_OW 505
// end ;
56911: LD_VAR 0 2
56915: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56916: LD_INT 0
56918: PPUSH
56919: PPUSH
56920: PPUSH
56921: PPUSH
// if not hack in hackTanks then
56922: LD_VAR 0 1
56926: PUSH
56927: LD_EXP 43
56931: IN
56932: NOT
56933: IFFALSE 56937
// exit ;
56935: GO 57022
// index := GetElementIndex ( hackTanks , hack ) ;
56937: LD_ADDR_VAR 0 5
56941: PUSH
56942: LD_EXP 43
56946: PPUSH
56947: LD_VAR 0 1
56951: PPUSH
56952: CALL 7650 0 2
56956: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56957: LD_ADDR_VAR 0 4
56961: PUSH
56962: DOUBLE
56963: LD_INT 1
56965: DEC
56966: ST_TO_ADDR
56967: LD_EXP 44
56971: PUSH
56972: LD_VAR 0 5
56976: ARRAY
56977: PUSH
56978: FOR_TO
56979: IFFALSE 57020
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56981: LD_EXP 44
56985: PUSH
56986: LD_VAR 0 5
56990: ARRAY
56991: PUSH
56992: LD_VAR 0 4
56996: ARRAY
56997: PUSH
56998: LD_INT 1
57000: ARRAY
57001: PUSH
57002: LD_VAR 0 2
57006: EQUAL
57007: IFFALSE 57018
// KillUnit ( vehicle ) ;
57009: LD_VAR 0 2
57013: PPUSH
57014: CALL_OW 66
57018: GO 56978
57020: POP
57021: POP
// end ;
57022: LD_VAR 0 3
57026: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57027: LD_EXP 48
57031: NOT
57032: IFFALSE 57067
57034: GO 57036
57036: DISABLE
// begin initMiner := true ;
57037: LD_ADDR_EXP 48
57041: PUSH
57042: LD_INT 1
57044: ST_TO_ADDR
// minersList := [ ] ;
57045: LD_ADDR_EXP 49
57049: PUSH
57050: EMPTY
57051: ST_TO_ADDR
// minerMinesList := [ ] ;
57052: LD_ADDR_EXP 50
57056: PUSH
57057: EMPTY
57058: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57059: LD_ADDR_EXP 51
57063: PUSH
57064: LD_INT 5
57066: ST_TO_ADDR
// end ;
57067: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57068: LD_EXP 48
57072: PUSH
57073: LD_INT 34
57075: PUSH
57076: LD_INT 81
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PPUSH
57083: CALL_OW 69
57087: AND
57088: IFFALSE 57549
57090: GO 57092
57092: DISABLE
57093: LD_INT 0
57095: PPUSH
57096: PPUSH
57097: PPUSH
57098: PPUSH
// begin enable ;
57099: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57100: LD_ADDR_VAR 0 1
57104: PUSH
57105: LD_INT 34
57107: PUSH
57108: LD_INT 81
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PPUSH
57115: CALL_OW 69
57119: PUSH
57120: FOR_IN
57121: IFFALSE 57193
// begin if not i in minersList then
57123: LD_VAR 0 1
57127: PUSH
57128: LD_EXP 49
57132: IN
57133: NOT
57134: IFFALSE 57191
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57136: LD_ADDR_EXP 49
57140: PUSH
57141: LD_EXP 49
57145: PPUSH
57146: LD_EXP 49
57150: PUSH
57151: LD_INT 1
57153: PLUS
57154: PPUSH
57155: LD_VAR 0 1
57159: PPUSH
57160: CALL_OW 1
57164: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57165: LD_ADDR_EXP 50
57169: PUSH
57170: LD_EXP 50
57174: PPUSH
57175: LD_EXP 50
57179: PUSH
57180: LD_INT 1
57182: PLUS
57183: PPUSH
57184: EMPTY
57185: PPUSH
57186: CALL_OW 1
57190: ST_TO_ADDR
// end end ;
57191: GO 57120
57193: POP
57194: POP
// for i := minerMinesList downto 1 do
57195: LD_ADDR_VAR 0 1
57199: PUSH
57200: DOUBLE
57201: LD_EXP 50
57205: INC
57206: ST_TO_ADDR
57207: LD_INT 1
57209: PUSH
57210: FOR_DOWNTO
57211: IFFALSE 57547
// begin if IsLive ( minersList [ i ] ) then
57213: LD_EXP 49
57217: PUSH
57218: LD_VAR 0 1
57222: ARRAY
57223: PPUSH
57224: CALL_OW 300
57228: IFFALSE 57256
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57230: LD_EXP 49
57234: PUSH
57235: LD_VAR 0 1
57239: ARRAY
57240: PPUSH
57241: LD_EXP 50
57245: PUSH
57246: LD_VAR 0 1
57250: ARRAY
57251: PPUSH
57252: CALL_OW 505
// if not minerMinesList [ i ] then
57256: LD_EXP 50
57260: PUSH
57261: LD_VAR 0 1
57265: ARRAY
57266: NOT
57267: IFFALSE 57271
// continue ;
57269: GO 57210
// for j := minerMinesList [ i ] downto 1 do
57271: LD_ADDR_VAR 0 2
57275: PUSH
57276: DOUBLE
57277: LD_EXP 50
57281: PUSH
57282: LD_VAR 0 1
57286: ARRAY
57287: INC
57288: ST_TO_ADDR
57289: LD_INT 1
57291: PUSH
57292: FOR_DOWNTO
57293: IFFALSE 57543
// begin side := GetSide ( minersList [ i ] ) ;
57295: LD_ADDR_VAR 0 3
57299: PUSH
57300: LD_EXP 49
57304: PUSH
57305: LD_VAR 0 1
57309: ARRAY
57310: PPUSH
57311: CALL_OW 255
57315: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57316: LD_ADDR_VAR 0 4
57320: PUSH
57321: LD_EXP 50
57325: PUSH
57326: LD_VAR 0 1
57330: ARRAY
57331: PUSH
57332: LD_VAR 0 2
57336: ARRAY
57337: PUSH
57338: LD_INT 1
57340: ARRAY
57341: PPUSH
57342: LD_EXP 50
57346: PUSH
57347: LD_VAR 0 1
57351: ARRAY
57352: PUSH
57353: LD_VAR 0 2
57357: ARRAY
57358: PUSH
57359: LD_INT 2
57361: ARRAY
57362: PPUSH
57363: CALL_OW 428
57367: ST_TO_ADDR
// if not tmp then
57368: LD_VAR 0 4
57372: NOT
57373: IFFALSE 57377
// continue ;
57375: GO 57292
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57377: LD_VAR 0 4
57381: PUSH
57382: LD_INT 81
57384: PUSH
57385: LD_VAR 0 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PPUSH
57394: CALL_OW 69
57398: IN
57399: PUSH
57400: LD_EXP 50
57404: PUSH
57405: LD_VAR 0 1
57409: ARRAY
57410: PUSH
57411: LD_VAR 0 2
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PPUSH
57421: LD_EXP 50
57425: PUSH
57426: LD_VAR 0 1
57430: ARRAY
57431: PUSH
57432: LD_VAR 0 2
57436: ARRAY
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: CALL_OW 458
57446: AND
57447: IFFALSE 57541
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57449: LD_EXP 50
57453: PUSH
57454: LD_VAR 0 1
57458: ARRAY
57459: PUSH
57460: LD_VAR 0 2
57464: ARRAY
57465: PUSH
57466: LD_INT 1
57468: ARRAY
57469: PPUSH
57470: LD_EXP 50
57474: PUSH
57475: LD_VAR 0 1
57479: ARRAY
57480: PUSH
57481: LD_VAR 0 2
57485: ARRAY
57486: PUSH
57487: LD_INT 2
57489: ARRAY
57490: PPUSH
57491: LD_VAR 0 3
57495: PPUSH
57496: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57500: LD_ADDR_EXP 50
57504: PUSH
57505: LD_EXP 50
57509: PPUSH
57510: LD_VAR 0 1
57514: PPUSH
57515: LD_EXP 50
57519: PUSH
57520: LD_VAR 0 1
57524: ARRAY
57525: PPUSH
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL_OW 3
57535: PPUSH
57536: CALL_OW 1
57540: ST_TO_ADDR
// end ; end ;
57541: GO 57292
57543: POP
57544: POP
// end ;
57545: GO 57210
57547: POP
57548: POP
// end ;
57549: PPOPN 4
57551: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57552: LD_INT 0
57554: PPUSH
57555: PPUSH
// result := false ;
57556: LD_ADDR_VAR 0 4
57560: PUSH
57561: LD_INT 0
57563: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL_OW 264
57573: PUSH
57574: LD_INT 81
57576: EQUAL
57577: NOT
57578: IFFALSE 57582
// exit ;
57580: GO 57822
// index := GetElementIndex ( minersList , unit ) ;
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: LD_EXP 49
57591: PPUSH
57592: LD_VAR 0 1
57596: PPUSH
57597: CALL 7650 0 2
57601: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57602: LD_EXP 50
57606: PUSH
57607: LD_VAR 0 5
57611: ARRAY
57612: PUSH
57613: LD_EXP 51
57617: GREATEREQUAL
57618: IFFALSE 57622
// exit ;
57620: GO 57822
// ComMoveXY ( unit , x , y ) ;
57622: LD_VAR 0 1
57626: PPUSH
57627: LD_VAR 0 2
57631: PPUSH
57632: LD_VAR 0 3
57636: PPUSH
57637: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57641: LD_INT 35
57643: PPUSH
57644: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57648: LD_VAR 0 1
57652: PPUSH
57653: LD_VAR 0 2
57657: PPUSH
57658: LD_VAR 0 3
57662: PPUSH
57663: CALL 39411 0 3
57667: NOT
57668: PUSH
57669: LD_VAR 0 1
57673: PPUSH
57674: CALL_OW 314
57678: AND
57679: IFFALSE 57683
// exit ;
57681: GO 57822
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57683: LD_VAR 0 2
57687: PPUSH
57688: LD_VAR 0 3
57692: PPUSH
57693: CALL_OW 428
57697: PUSH
57698: LD_VAR 0 1
57702: EQUAL
57703: PUSH
57704: LD_VAR 0 1
57708: PPUSH
57709: CALL_OW 314
57713: NOT
57714: AND
57715: IFFALSE 57641
// PlaySoundXY ( x , y , PlantMine ) ;
57717: LD_VAR 0 2
57721: PPUSH
57722: LD_VAR 0 3
57726: PPUSH
57727: LD_STRING PlantMine
57729: PPUSH
57730: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57734: LD_VAR 0 2
57738: PPUSH
57739: LD_VAR 0 3
57743: PPUSH
57744: LD_VAR 0 1
57748: PPUSH
57749: CALL_OW 255
57753: PPUSH
57754: LD_INT 0
57756: PPUSH
57757: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57761: LD_ADDR_EXP 50
57765: PUSH
57766: LD_EXP 50
57770: PPUSH
57771: LD_VAR 0 5
57775: PUSH
57776: LD_EXP 50
57780: PUSH
57781: LD_VAR 0 5
57785: ARRAY
57786: PUSH
57787: LD_INT 1
57789: PLUS
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PPUSH
57795: LD_VAR 0 2
57799: PUSH
57800: LD_VAR 0 3
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PPUSH
57809: CALL 7865 0 3
57813: ST_TO_ADDR
// result := true ;
57814: LD_ADDR_VAR 0 4
57818: PUSH
57819: LD_INT 1
57821: ST_TO_ADDR
// end ;
57822: LD_VAR 0 4
57826: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57827: LD_INT 0
57829: PPUSH
57830: PPUSH
57831: PPUSH
// if not unit in minersList then
57832: LD_VAR 0 1
57836: PUSH
57837: LD_EXP 49
57841: IN
57842: NOT
57843: IFFALSE 57847
// exit ;
57845: GO 58239
// index := GetElementIndex ( minersList , unit ) ;
57847: LD_ADDR_VAR 0 6
57851: PUSH
57852: LD_EXP 49
57856: PPUSH
57857: LD_VAR 0 1
57861: PPUSH
57862: CALL 7650 0 2
57866: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57867: LD_ADDR_VAR 0 5
57871: PUSH
57872: DOUBLE
57873: LD_EXP 50
57877: PUSH
57878: LD_VAR 0 6
57882: ARRAY
57883: INC
57884: ST_TO_ADDR
57885: LD_INT 1
57887: PUSH
57888: FOR_DOWNTO
57889: IFFALSE 58050
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57891: LD_EXP 50
57895: PUSH
57896: LD_VAR 0 6
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 5
57906: ARRAY
57907: PUSH
57908: LD_INT 1
57910: ARRAY
57911: PUSH
57912: LD_VAR 0 2
57916: EQUAL
57917: PUSH
57918: LD_EXP 50
57922: PUSH
57923: LD_VAR 0 6
57927: ARRAY
57928: PUSH
57929: LD_VAR 0 5
57933: ARRAY
57934: PUSH
57935: LD_INT 2
57937: ARRAY
57938: PUSH
57939: LD_VAR 0 3
57943: EQUAL
57944: AND
57945: IFFALSE 58048
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57947: LD_EXP 50
57951: PUSH
57952: LD_VAR 0 6
57956: ARRAY
57957: PUSH
57958: LD_VAR 0 5
57962: ARRAY
57963: PUSH
57964: LD_INT 1
57966: ARRAY
57967: PPUSH
57968: LD_EXP 50
57972: PUSH
57973: LD_VAR 0 6
57977: ARRAY
57978: PUSH
57979: LD_VAR 0 5
57983: ARRAY
57984: PUSH
57985: LD_INT 2
57987: ARRAY
57988: PPUSH
57989: LD_VAR 0 1
57993: PPUSH
57994: CALL_OW 255
57998: PPUSH
57999: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58003: LD_ADDR_EXP 50
58007: PUSH
58008: LD_EXP 50
58012: PPUSH
58013: LD_VAR 0 6
58017: PPUSH
58018: LD_EXP 50
58022: PUSH
58023: LD_VAR 0 6
58027: ARRAY
58028: PPUSH
58029: LD_VAR 0 5
58033: PPUSH
58034: CALL_OW 3
58038: PPUSH
58039: CALL_OW 1
58043: ST_TO_ADDR
// exit ;
58044: POP
58045: POP
58046: GO 58239
// end ; end ;
58048: GO 57888
58050: POP
58051: POP
// for i := minerMinesList [ index ] downto 1 do
58052: LD_ADDR_VAR 0 5
58056: PUSH
58057: DOUBLE
58058: LD_EXP 50
58062: PUSH
58063: LD_VAR 0 6
58067: ARRAY
58068: INC
58069: ST_TO_ADDR
58070: LD_INT 1
58072: PUSH
58073: FOR_DOWNTO
58074: IFFALSE 58237
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58076: LD_EXP 50
58080: PUSH
58081: LD_VAR 0 6
58085: ARRAY
58086: PUSH
58087: LD_VAR 0 5
58091: ARRAY
58092: PUSH
58093: LD_INT 1
58095: ARRAY
58096: PPUSH
58097: LD_EXP 50
58101: PUSH
58102: LD_VAR 0 6
58106: ARRAY
58107: PUSH
58108: LD_VAR 0 5
58112: ARRAY
58113: PUSH
58114: LD_INT 2
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 2
58122: PPUSH
58123: LD_VAR 0 3
58127: PPUSH
58128: CALL_OW 298
58132: PUSH
58133: LD_INT 6
58135: LESS
58136: IFFALSE 58235
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58138: LD_EXP 50
58142: PUSH
58143: LD_VAR 0 6
58147: ARRAY
58148: PUSH
58149: LD_VAR 0 5
58153: ARRAY
58154: PUSH
58155: LD_INT 1
58157: ARRAY
58158: PPUSH
58159: LD_EXP 50
58163: PUSH
58164: LD_VAR 0 6
58168: ARRAY
58169: PUSH
58170: LD_VAR 0 5
58174: ARRAY
58175: PUSH
58176: LD_INT 2
58178: ARRAY
58179: PPUSH
58180: LD_VAR 0 1
58184: PPUSH
58185: CALL_OW 255
58189: PPUSH
58190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58194: LD_ADDR_EXP 50
58198: PUSH
58199: LD_EXP 50
58203: PPUSH
58204: LD_VAR 0 6
58208: PPUSH
58209: LD_EXP 50
58213: PUSH
58214: LD_VAR 0 6
58218: ARRAY
58219: PPUSH
58220: LD_VAR 0 5
58224: PPUSH
58225: CALL_OW 3
58229: PPUSH
58230: CALL_OW 1
58234: ST_TO_ADDR
// end ; end ;
58235: GO 58073
58237: POP
58238: POP
// end ;
58239: LD_VAR 0 4
58243: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58244: LD_INT 0
58246: PPUSH
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58255: LD_VAR 0 1
58259: PPUSH
58260: CALL_OW 264
58264: PUSH
58265: LD_INT 81
58267: EQUAL
58268: NOT
58269: PUSH
58270: LD_VAR 0 1
58274: PUSH
58275: LD_EXP 49
58279: IN
58280: NOT
58281: OR
58282: IFFALSE 58286
// exit ;
58284: GO 58608
// index := GetElementIndex ( minersList , unit ) ;
58286: LD_ADDR_VAR 0 6
58290: PUSH
58291: LD_EXP 49
58295: PPUSH
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL 7650 0 2
58305: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58306: LD_ADDR_VAR 0 8
58310: PUSH
58311: LD_EXP 51
58315: PUSH
58316: LD_EXP 50
58320: PUSH
58321: LD_VAR 0 6
58325: ARRAY
58326: MINUS
58327: ST_TO_ADDR
// if not minesFreeAmount then
58328: LD_VAR 0 8
58332: NOT
58333: IFFALSE 58337
// exit ;
58335: GO 58608
// tmp := [ ] ;
58337: LD_ADDR_VAR 0 7
58341: PUSH
58342: EMPTY
58343: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58344: LD_ADDR_VAR 0 5
58348: PUSH
58349: DOUBLE
58350: LD_INT 1
58352: DEC
58353: ST_TO_ADDR
58354: LD_VAR 0 8
58358: PUSH
58359: FOR_TO
58360: IFFALSE 58555
// begin _d := rand ( 0 , 5 ) ;
58362: LD_ADDR_VAR 0 11
58366: PUSH
58367: LD_INT 0
58369: PPUSH
58370: LD_INT 5
58372: PPUSH
58373: CALL_OW 12
58377: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58378: LD_ADDR_VAR 0 12
58382: PUSH
58383: LD_INT 2
58385: PPUSH
58386: LD_INT 6
58388: PPUSH
58389: CALL_OW 12
58393: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58394: LD_ADDR_VAR 0 9
58398: PUSH
58399: LD_VAR 0 2
58403: PPUSH
58404: LD_VAR 0 11
58408: PPUSH
58409: LD_VAR 0 12
58413: PPUSH
58414: CALL_OW 272
58418: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58419: LD_ADDR_VAR 0 10
58423: PUSH
58424: LD_VAR 0 3
58428: PPUSH
58429: LD_VAR 0 11
58433: PPUSH
58434: LD_VAR 0 12
58438: PPUSH
58439: CALL_OW 273
58443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58444: LD_VAR 0 9
58448: PPUSH
58449: LD_VAR 0 10
58453: PPUSH
58454: CALL_OW 488
58458: PUSH
58459: LD_VAR 0 9
58463: PUSH
58464: LD_VAR 0 10
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_VAR 0 7
58477: IN
58478: NOT
58479: AND
58480: PUSH
58481: LD_VAR 0 9
58485: PPUSH
58486: LD_VAR 0 10
58490: PPUSH
58491: CALL_OW 458
58495: NOT
58496: AND
58497: IFFALSE 58539
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58499: LD_ADDR_VAR 0 7
58503: PUSH
58504: LD_VAR 0 7
58508: PPUSH
58509: LD_VAR 0 7
58513: PUSH
58514: LD_INT 1
58516: PLUS
58517: PPUSH
58518: LD_VAR 0 9
58522: PUSH
58523: LD_VAR 0 10
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PPUSH
58532: CALL_OW 1
58536: ST_TO_ADDR
58537: GO 58553
// i := i - 1 ;
58539: LD_ADDR_VAR 0 5
58543: PUSH
58544: LD_VAR 0 5
58548: PUSH
58549: LD_INT 1
58551: MINUS
58552: ST_TO_ADDR
// end ;
58553: GO 58359
58555: POP
58556: POP
// for i in tmp do
58557: LD_ADDR_VAR 0 5
58561: PUSH
58562: LD_VAR 0 7
58566: PUSH
58567: FOR_IN
58568: IFFALSE 58606
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58570: LD_VAR 0 1
58574: PPUSH
58575: LD_VAR 0 5
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: PPUSH
58584: LD_VAR 0 5
58588: PUSH
58589: LD_INT 2
58591: ARRAY
58592: PPUSH
58593: CALL 57552 0 3
58597: NOT
58598: IFFALSE 58604
// exit ;
58600: POP
58601: POP
58602: GO 58608
58604: GO 58567
58606: POP
58607: POP
// end ;
58608: LD_VAR 0 4
58612: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58613: LD_INT 0
58615: PPUSH
58616: PPUSH
58617: PPUSH
58618: PPUSH
58619: PPUSH
58620: PPUSH
58621: PPUSH
58622: PPUSH
58623: PPUSH
// if GetClass ( unit ) <> class_sniper then
58624: LD_VAR 0 1
58628: PPUSH
58629: CALL_OW 257
58633: PUSH
58634: LD_INT 5
58636: NONEQUAL
58637: IFFALSE 58641
// exit ;
58639: GO 59107
// dist := 8 ;
58641: LD_ADDR_VAR 0 5
58645: PUSH
58646: LD_INT 8
58648: ST_TO_ADDR
// viewRange := 12 ;
58649: LD_ADDR_VAR 0 8
58653: PUSH
58654: LD_INT 12
58656: ST_TO_ADDR
// side := GetSide ( unit ) ;
58657: LD_ADDR_VAR 0 6
58661: PUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: CALL_OW 255
58671: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58672: LD_INT 61
58674: PPUSH
58675: LD_VAR 0 6
58679: PPUSH
58680: CALL_OW 321
58684: PUSH
58685: LD_INT 2
58687: EQUAL
58688: IFFALSE 58698
// viewRange := 16 ;
58690: LD_ADDR_VAR 0 8
58694: PUSH
58695: LD_INT 16
58697: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_VAR 0 2
58707: PPUSH
58708: LD_VAR 0 3
58712: PPUSH
58713: CALL_OW 297
58717: PUSH
58718: LD_VAR 0 5
58722: GREATER
58723: IFFALSE 58802
// begin ComMoveXY ( unit , x , y ) ;
58725: LD_VAR 0 1
58729: PPUSH
58730: LD_VAR 0 2
58734: PPUSH
58735: LD_VAR 0 3
58739: PPUSH
58740: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58744: LD_INT 35
58746: PPUSH
58747: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58751: LD_VAR 0 1
58755: PPUSH
58756: LD_VAR 0 2
58760: PPUSH
58761: LD_VAR 0 3
58765: PPUSH
58766: CALL 39411 0 3
58770: NOT
58771: IFFALSE 58775
// exit ;
58773: GO 59107
// until GetDistUnitXY ( unit , x , y ) < dist ;
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: LD_VAR 0 3
58789: PPUSH
58790: CALL_OW 297
58794: PUSH
58795: LD_VAR 0 5
58799: LESS
58800: IFFALSE 58744
// end ; ComTurnXY ( unit , x , y ) ;
58802: LD_VAR 0 1
58806: PPUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: LD_VAR 0 3
58816: PPUSH
58817: CALL_OW 118
// repeat if Multiplayer then
58821: LD_OWVAR 4
58825: IFFALSE 58836
// wait ( 35 ) else
58827: LD_INT 35
58829: PPUSH
58830: CALL_OW 67
58834: GO 58843
// wait ( 5 ) ;
58836: LD_INT 5
58838: PPUSH
58839: CALL_OW 67
// _d := GetDir ( unit ) ;
58843: LD_ADDR_VAR 0 11
58847: PUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: CALL_OW 254
58857: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58858: LD_ADDR_VAR 0 7
58862: PUSH
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL_OW 250
58872: PPUSH
58873: LD_VAR 0 1
58877: PPUSH
58878: CALL_OW 251
58882: PPUSH
58883: LD_VAR 0 2
58887: PPUSH
58888: LD_VAR 0 3
58892: PPUSH
58893: CALL 42019 0 4
58897: ST_TO_ADDR
// until dir = _d ;
58898: LD_VAR 0 7
58902: PUSH
58903: LD_VAR 0 11
58907: EQUAL
58908: IFFALSE 58821
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58910: LD_ADDR_VAR 0 9
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 250
58924: PPUSH
58925: LD_VAR 0 7
58929: PPUSH
58930: LD_VAR 0 5
58934: PPUSH
58935: CALL_OW 272
58939: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58940: LD_ADDR_VAR 0 10
58944: PUSH
58945: LD_VAR 0 1
58949: PPUSH
58950: CALL_OW 251
58954: PPUSH
58955: LD_VAR 0 7
58959: PPUSH
58960: LD_VAR 0 5
58964: PPUSH
58965: CALL_OW 273
58969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58970: LD_VAR 0 9
58974: PPUSH
58975: LD_VAR 0 10
58979: PPUSH
58980: CALL_OW 488
58984: NOT
58985: IFFALSE 58989
// exit ;
58987: GO 59107
// ComAnimCustom ( unit , 1 ) ;
58989: LD_VAR 0 1
58993: PPUSH
58994: LD_INT 1
58996: PPUSH
58997: CALL_OW 592
// p := 0 ;
59001: LD_ADDR_VAR 0 12
59005: PUSH
59006: LD_INT 0
59008: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59009: LD_VAR 0 9
59013: PPUSH
59014: LD_VAR 0 10
59018: PPUSH
59019: LD_VAR 0 6
59023: PPUSH
59024: LD_VAR 0 8
59028: PPUSH
59029: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59033: LD_INT 35
59035: PPUSH
59036: CALL_OW 67
// p := Inc ( p ) ;
59040: LD_ADDR_VAR 0 12
59044: PUSH
59045: LD_VAR 0 12
59049: PPUSH
59050: CALL 41975 0 1
59054: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59055: LD_VAR 0 12
59059: PUSH
59060: LD_INT 3
59062: EQUAL
59063: PUSH
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 302
59073: NOT
59074: OR
59075: PUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 301
59085: OR
59086: IFFALSE 59033
// RemoveSeeing ( _x , _y , side ) ;
59088: LD_VAR 0 9
59092: PPUSH
59093: LD_VAR 0 10
59097: PPUSH
59098: LD_VAR 0 6
59102: PPUSH
59103: CALL_OW 331
// end ; end_of_file
59107: LD_VAR 0 4
59111: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59112: PPOPN 6
59114: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59115: CALL 59144 0 0
// end ; end_of_file
59119: PPOPN 1
59121: END
// every 0 0$1 do
59122: GO 59124
59124: DISABLE
// begin enable ;
59125: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59126: LD_STRING updateTimer(
59128: PUSH
59129: LD_OWVAR 1
59133: STR
59134: PUSH
59135: LD_STRING );
59137: STR
59138: PPUSH
59139: CALL_OW 559
// end ;
59143: END
// export function SOS_MapStart ( ) ; begin
59144: LD_INT 0
59146: PPUSH
// UpdateFactoryWaypoints ( ) ;
59147: CALL 59516 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59151: CALL 59768 0 0
// end ;
59155: LD_VAR 0 1
59159: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59160: LD_INT 0
59162: PPUSH
// end ;
59163: LD_VAR 0 12
59167: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59168: LD_INT 0
59170: PPUSH
59171: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59172: LD_VAR 0 1
59176: NOT
59177: PUSH
59178: LD_VAR 0 2
59182: PPUSH
59183: LD_VAR 0 3
59187: PPUSH
59188: CALL_OW 488
59192: NOT
59193: OR
59194: PUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL_OW 266
59204: PUSH
59205: LD_INT 3
59207: NONEQUAL
59208: PUSH
59209: LD_VAR 0 1
59213: PPUSH
59214: CALL_OW 247
59218: PUSH
59219: LD_INT 1
59221: EQUAL
59222: NOT
59223: AND
59224: OR
59225: IFFALSE 59229
// exit ;
59227: GO 59511
// if GetType ( factory ) = unit_human then
59229: LD_VAR 0 1
59233: PPUSH
59234: CALL_OW 247
59238: PUSH
59239: LD_INT 1
59241: EQUAL
59242: IFFALSE 59259
// factory := IsInUnit ( factory ) ;
59244: LD_ADDR_VAR 0 1
59248: PUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 310
59258: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 266
59268: PUSH
59269: LD_INT 3
59271: NONEQUAL
59272: IFFALSE 59276
// exit ;
59274: GO 59511
// for i := 1 to Count ( factoryWaypoints ) do
59276: LD_ADDR_VAR 0 5
59280: PUSH
59281: DOUBLE
59282: LD_INT 1
59284: DEC
59285: ST_TO_ADDR
59286: LD_EXP 52
59290: PPUSH
59291: CALL 5005 0 1
59295: PUSH
59296: FOR_TO
59297: IFFALSE 59459
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59299: LD_VAR 0 2
59303: PPUSH
59304: LD_VAR 0 3
59308: PPUSH
59309: CALL_OW 428
59313: PUSH
59314: LD_EXP 52
59318: PUSH
59319: LD_VAR 0 5
59323: ARRAY
59324: PUSH
59325: LD_INT 2
59327: ARRAY
59328: EQUAL
59329: IFFALSE 59361
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59331: LD_ADDR_EXP 52
59335: PUSH
59336: LD_EXP 52
59340: PPUSH
59341: LD_VAR 0 5
59345: PPUSH
59346: CALL_OW 3
59350: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59351: CALL 59516 0 0
// exit ;
59355: POP
59356: POP
59357: GO 59511
// end else
59359: GO 59457
// if factory = factoryWaypoints [ i ] [ 2 ] then
59361: LD_VAR 0 1
59365: PUSH
59366: LD_EXP 52
59370: PUSH
59371: LD_VAR 0 5
59375: ARRAY
59376: PUSH
59377: LD_INT 2
59379: ARRAY
59380: EQUAL
59381: IFFALSE 59457
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59383: LD_ADDR_EXP 52
59387: PUSH
59388: LD_EXP 52
59392: PPUSH
59393: LD_VAR 0 5
59397: PPUSH
59398: CALL_OW 3
59402: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59403: LD_ADDR_EXP 52
59407: PUSH
59408: LD_EXP 52
59412: PPUSH
59413: LD_VAR 0 1
59417: PPUSH
59418: CALL_OW 255
59422: PUSH
59423: LD_VAR 0 1
59427: PUSH
59428: LD_VAR 0 2
59432: PUSH
59433: LD_VAR 0 3
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: PPUSH
59444: CALL 40614 0 2
59448: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59449: CALL 59516 0 0
// exit ;
59453: POP
59454: POP
59455: GO 59511
// end ; end ;
59457: GO 59296
59459: POP
59460: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59461: LD_ADDR_EXP 52
59465: PUSH
59466: LD_EXP 52
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL_OW 255
59480: PUSH
59481: LD_VAR 0 1
59485: PUSH
59486: LD_VAR 0 2
59490: PUSH
59491: LD_VAR 0 3
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: PPUSH
59502: CALL 40614 0 2
59506: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59507: CALL 59516 0 0
// end ;
59511: LD_VAR 0 4
59515: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59516: LD_INT 0
59518: PPUSH
59519: PPUSH
59520: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59521: LD_STRING resetFactoryWaypoint();
59523: PPUSH
59524: CALL_OW 559
// if factoryWaypoints then
59528: LD_EXP 52
59532: IFFALSE 59653
// begin list := factoryWaypoints ;
59534: LD_ADDR_VAR 0 3
59538: PUSH
59539: LD_EXP 52
59543: ST_TO_ADDR
// for i := 1 to list do
59544: LD_ADDR_VAR 0 2
59548: PUSH
59549: DOUBLE
59550: LD_INT 1
59552: DEC
59553: ST_TO_ADDR
59554: LD_VAR 0 3
59558: PUSH
59559: FOR_TO
59560: IFFALSE 59651
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59562: LD_STRING setFactoryWaypointXY(
59564: PUSH
59565: LD_VAR 0 3
59569: PUSH
59570: LD_VAR 0 2
59574: ARRAY
59575: PUSH
59576: LD_INT 1
59578: ARRAY
59579: STR
59580: PUSH
59581: LD_STRING ,
59583: STR
59584: PUSH
59585: LD_VAR 0 3
59589: PUSH
59590: LD_VAR 0 2
59594: ARRAY
59595: PUSH
59596: LD_INT 2
59598: ARRAY
59599: STR
59600: PUSH
59601: LD_STRING ,
59603: STR
59604: PUSH
59605: LD_VAR 0 3
59609: PUSH
59610: LD_VAR 0 2
59614: ARRAY
59615: PUSH
59616: LD_INT 3
59618: ARRAY
59619: STR
59620: PUSH
59621: LD_STRING ,
59623: STR
59624: PUSH
59625: LD_VAR 0 3
59629: PUSH
59630: LD_VAR 0 2
59634: ARRAY
59635: PUSH
59636: LD_INT 4
59638: ARRAY
59639: STR
59640: PUSH
59641: LD_STRING )
59643: STR
59644: PPUSH
59645: CALL_OW 559
59649: GO 59559
59651: POP
59652: POP
// end ; end ;
59653: LD_VAR 0 1
59657: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59658: LD_INT 0
59660: PPUSH
// if HexInfo ( x , y ) = warehouse then
59661: LD_VAR 0 2
59665: PPUSH
59666: LD_VAR 0 3
59670: PPUSH
59671: CALL_OW 428
59675: PUSH
59676: LD_VAR 0 1
59680: EQUAL
59681: IFFALSE 59708
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59683: LD_ADDR_EXP 53
59687: PUSH
59688: LD_EXP 53
59692: PPUSH
59693: LD_VAR 0 1
59697: PPUSH
59698: LD_INT 0
59700: PPUSH
59701: CALL_OW 1
59705: ST_TO_ADDR
59706: GO 59759
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59708: LD_ADDR_EXP 53
59712: PUSH
59713: LD_EXP 53
59717: PPUSH
59718: LD_VAR 0 1
59722: PPUSH
59723: LD_VAR 0 1
59727: PPUSH
59728: CALL_OW 255
59732: PUSH
59733: LD_VAR 0 1
59737: PUSH
59738: LD_VAR 0 2
59742: PUSH
59743: LD_VAR 0 3
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: PPUSH
59754: CALL_OW 1
59758: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59759: CALL 59768 0 0
// end ;
59763: LD_VAR 0 4
59767: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59768: LD_INT 0
59770: PPUSH
59771: PPUSH
59772: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59773: LD_STRING resetWarehouseGatheringPoints();
59775: PPUSH
59776: CALL_OW 559
// if warehouseGatheringPoints then
59780: LD_EXP 53
59784: IFFALSE 59910
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59786: LD_ADDR_VAR 0 3
59790: PUSH
59791: LD_EXP 53
59795: PPUSH
59796: CALL 44376 0 1
59800: ST_TO_ADDR
// for i := 1 to list do
59801: LD_ADDR_VAR 0 2
59805: PUSH
59806: DOUBLE
59807: LD_INT 1
59809: DEC
59810: ST_TO_ADDR
59811: LD_VAR 0 3
59815: PUSH
59816: FOR_TO
59817: IFFALSE 59908
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59819: LD_STRING setWarehouseGatheringPointXY(
59821: PUSH
59822: LD_VAR 0 3
59826: PUSH
59827: LD_VAR 0 2
59831: ARRAY
59832: PUSH
59833: LD_INT 1
59835: ARRAY
59836: STR
59837: PUSH
59838: LD_STRING ,
59840: STR
59841: PUSH
59842: LD_VAR 0 3
59846: PUSH
59847: LD_VAR 0 2
59851: ARRAY
59852: PUSH
59853: LD_INT 2
59855: ARRAY
59856: STR
59857: PUSH
59858: LD_STRING ,
59860: STR
59861: PUSH
59862: LD_VAR 0 3
59866: PUSH
59867: LD_VAR 0 2
59871: ARRAY
59872: PUSH
59873: LD_INT 3
59875: ARRAY
59876: STR
59877: PUSH
59878: LD_STRING ,
59880: STR
59881: PUSH
59882: LD_VAR 0 3
59886: PUSH
59887: LD_VAR 0 2
59891: ARRAY
59892: PUSH
59893: LD_INT 4
59895: ARRAY
59896: STR
59897: PUSH
59898: LD_STRING )
59900: STR
59901: PPUSH
59902: CALL_OW 559
59906: GO 59816
59908: POP
59909: POP
// end ; end ;
59910: LD_VAR 0 1
59914: RET
