// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45767 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46113 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeSurvival ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 2
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 32
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 35
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 33
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 35
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 34
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 31
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45222 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45222 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45222 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45222 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45222 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45222 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45222 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45222 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 5068 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45055 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45055 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45055 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45055 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 45055 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 45055 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 45055 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 45055 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 45055 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 45055 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 45055 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 45055 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 45055 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 45055 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 45055 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 45055 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45222 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45222 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45222 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45222 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45222 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45222 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45222 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45222 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45222 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45222 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45222 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45222 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45222 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45222 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45222 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45222 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45222 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45222 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45222 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45222 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45222 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45222 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45222 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45222 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 42038 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 54054 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 50699 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 54071 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 51364 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL 54112 0 2
2857: PPOPN 2
2859: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_VAR 0 3
2874: PPUSH
2875: CALL 51417 0 3
2879: PPOPN 3
2881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// if exist_mode then
2886: LD_VAR 0 2
2890: IFFALSE 2936
// begin unit := CreateCharacter ( prefix & ident ) ;
2892: LD_ADDR_VAR 0 5
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_VAR 0 1
2906: STR
2907: PPUSH
2908: CALL_OW 34
2912: ST_TO_ADDR
// if unit then
2913: LD_VAR 0 5
2917: IFFALSE 2934
// DeleteCharacters ( prefix & ident ) ;
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: STR
2929: PPUSH
2930: CALL_OW 40
// end else
2934: GO 2951
// unit := NewCharacter ( ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// result := unit ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_VAR 0 5
2960: ST_TO_ADDR
// end ;
2961: LD_VAR 0 4
2965: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2966: LD_INT 0
2968: PPUSH
2969: PPUSH
// if exist_mode then
2970: LD_VAR 0 2
2974: IFFALSE 2999
// unit := CreateCharacter ( prefix & ident ) else
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: LD_VAR 0 3
2985: PUSH
2986: LD_VAR 0 1
2990: STR
2991: PPUSH
2992: CALL_OW 34
2996: ST_TO_ADDR
2997: GO 3014
// unit := NewCharacter ( ident ) ;
2999: LD_ADDR_VAR 0 5
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 25
3013: ST_TO_ADDR
// result := unit ;
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 5
3023: ST_TO_ADDR
// end ;
3024: LD_VAR 0 4
3028: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
// if not side or not nation then
3033: LD_VAR 0 1
3037: NOT
3038: PUSH
3039: LD_VAR 0 2
3043: NOT
3044: OR
3045: IFFALSE 3049
// exit ;
3047: GO 3817
// case nation of nation_american :
3049: LD_VAR 0 2
3053: PUSH
3054: LD_INT 1
3056: DOUBLE
3057: EQUAL
3058: IFTRUE 3062
3060: GO 3276
3062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3063: LD_ADDR_VAR 0 4
3067: PUSH
3068: LD_INT 35
3070: PUSH
3071: LD_INT 45
3073: PUSH
3074: LD_INT 46
3076: PUSH
3077: LD_INT 47
3079: PUSH
3080: LD_INT 82
3082: PUSH
3083: LD_INT 83
3085: PUSH
3086: LD_INT 84
3088: PUSH
3089: LD_INT 85
3091: PUSH
3092: LD_INT 86
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 6
3103: PUSH
3104: LD_INT 15
3106: PUSH
3107: LD_INT 16
3109: PUSH
3110: LD_INT 7
3112: PUSH
3113: LD_INT 12
3115: PUSH
3116: LD_INT 13
3118: PUSH
3119: LD_INT 10
3121: PUSH
3122: LD_INT 14
3124: PUSH
3125: LD_INT 20
3127: PUSH
3128: LD_INT 21
3130: PUSH
3131: LD_INT 22
3133: PUSH
3134: LD_INT 25
3136: PUSH
3137: LD_INT 32
3139: PUSH
3140: LD_INT 27
3142: PUSH
3143: LD_INT 36
3145: PUSH
3146: LD_INT 69
3148: PUSH
3149: LD_INT 39
3151: PUSH
3152: LD_INT 34
3154: PUSH
3155: LD_INT 40
3157: PUSH
3158: LD_INT 48
3160: PUSH
3161: LD_INT 49
3163: PUSH
3164: LD_INT 50
3166: PUSH
3167: LD_INT 51
3169: PUSH
3170: LD_INT 52
3172: PUSH
3173: LD_INT 53
3175: PUSH
3176: LD_INT 54
3178: PUSH
3179: LD_INT 55
3181: PUSH
3182: LD_INT 56
3184: PUSH
3185: LD_INT 57
3187: PUSH
3188: LD_INT 58
3190: PUSH
3191: LD_INT 59
3193: PUSH
3194: LD_INT 60
3196: PUSH
3197: LD_INT 61
3199: PUSH
3200: LD_INT 62
3202: PUSH
3203: LD_INT 80
3205: PUSH
3206: LD_INT 82
3208: PUSH
3209: LD_INT 83
3211: PUSH
3212: LD_INT 84
3214: PUSH
3215: LD_INT 85
3217: PUSH
3218: LD_INT 86
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: ST_TO_ADDR
3274: GO 3741
3276: LD_INT 2
3278: DOUBLE
3279: EQUAL
3280: IFTRUE 3284
3282: GO 3510
3284: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3285: LD_ADDR_VAR 0 4
3289: PUSH
3290: LD_INT 35
3292: PUSH
3293: LD_INT 45
3295: PUSH
3296: LD_INT 46
3298: PUSH
3299: LD_INT 47
3301: PUSH
3302: LD_INT 82
3304: PUSH
3305: LD_INT 83
3307: PUSH
3308: LD_INT 84
3310: PUSH
3311: LD_INT 85
3313: PUSH
3314: LD_INT 87
3316: PUSH
3317: LD_INT 70
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: LD_INT 11
3325: PUSH
3326: LD_INT 3
3328: PUSH
3329: LD_INT 4
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: LD_INT 15
3340: PUSH
3341: LD_INT 18
3343: PUSH
3344: LD_INT 7
3346: PUSH
3347: LD_INT 17
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 20
3355: PUSH
3356: LD_INT 21
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 72
3364: PUSH
3365: LD_INT 26
3367: PUSH
3368: LD_INT 69
3370: PUSH
3371: LD_INT 39
3373: PUSH
3374: LD_INT 40
3376: PUSH
3377: LD_INT 41
3379: PUSH
3380: LD_INT 42
3382: PUSH
3383: LD_INT 43
3385: PUSH
3386: LD_INT 48
3388: PUSH
3389: LD_INT 49
3391: PUSH
3392: LD_INT 50
3394: PUSH
3395: LD_INT 51
3397: PUSH
3398: LD_INT 52
3400: PUSH
3401: LD_INT 53
3403: PUSH
3404: LD_INT 54
3406: PUSH
3407: LD_INT 55
3409: PUSH
3410: LD_INT 56
3412: PUSH
3413: LD_INT 60
3415: PUSH
3416: LD_INT 61
3418: PUSH
3419: LD_INT 62
3421: PUSH
3422: LD_INT 66
3424: PUSH
3425: LD_INT 67
3427: PUSH
3428: LD_INT 68
3430: PUSH
3431: LD_INT 81
3433: PUSH
3434: LD_INT 82
3436: PUSH
3437: LD_INT 83
3439: PUSH
3440: LD_INT 84
3442: PUSH
3443: LD_INT 85
3445: PUSH
3446: LD_INT 87
3448: PUSH
3449: LD_INT 88
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: ST_TO_ADDR
3508: GO 3741
3510: LD_INT 3
3512: DOUBLE
3513: EQUAL
3514: IFTRUE 3518
3516: GO 3740
3518: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3519: LD_ADDR_VAR 0 4
3523: PUSH
3524: LD_INT 46
3526: PUSH
3527: LD_INT 47
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 82
3538: PUSH
3539: LD_INT 83
3541: PUSH
3542: LD_INT 84
3544: PUSH
3545: LD_INT 85
3547: PUSH
3548: LD_INT 86
3550: PUSH
3551: LD_INT 11
3553: PUSH
3554: LD_INT 9
3556: PUSH
3557: LD_INT 20
3559: PUSH
3560: LD_INT 19
3562: PUSH
3563: LD_INT 21
3565: PUSH
3566: LD_INT 24
3568: PUSH
3569: LD_INT 22
3571: PUSH
3572: LD_INT 25
3574: PUSH
3575: LD_INT 28
3577: PUSH
3578: LD_INT 29
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 31
3586: PUSH
3587: LD_INT 37
3589: PUSH
3590: LD_INT 38
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: LD_INT 27
3598: PUSH
3599: LD_INT 33
3601: PUSH
3602: LD_INT 69
3604: PUSH
3605: LD_INT 39
3607: PUSH
3608: LD_INT 34
3610: PUSH
3611: LD_INT 40
3613: PUSH
3614: LD_INT 71
3616: PUSH
3617: LD_INT 23
3619: PUSH
3620: LD_INT 44
3622: PUSH
3623: LD_INT 48
3625: PUSH
3626: LD_INT 49
3628: PUSH
3629: LD_INT 50
3631: PUSH
3632: LD_INT 51
3634: PUSH
3635: LD_INT 52
3637: PUSH
3638: LD_INT 53
3640: PUSH
3641: LD_INT 54
3643: PUSH
3644: LD_INT 55
3646: PUSH
3647: LD_INT 56
3649: PUSH
3650: LD_INT 57
3652: PUSH
3653: LD_INT 58
3655: PUSH
3656: LD_INT 59
3658: PUSH
3659: LD_INT 63
3661: PUSH
3662: LD_INT 64
3664: PUSH
3665: LD_INT 65
3667: PUSH
3668: LD_INT 82
3670: PUSH
3671: LD_INT 83
3673: PUSH
3674: LD_INT 84
3676: PUSH
3677: LD_INT 85
3679: PUSH
3680: LD_INT 86
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: ST_TO_ADDR
3738: GO 3741
3740: POP
// if state > - 1 and state < 3 then
3741: LD_VAR 0 3
3745: PUSH
3746: LD_INT 1
3748: NEG
3749: GREATER
3750: PUSH
3751: LD_VAR 0 3
3755: PUSH
3756: LD_INT 3
3758: LESS
3759: AND
3760: IFFALSE 3817
// for i in result do
3762: LD_ADDR_VAR 0 5
3766: PUSH
3767: LD_VAR 0 4
3771: PUSH
3772: FOR_IN
3773: IFFALSE 3815
// if GetTech ( i , side ) <> state then
3775: LD_VAR 0 5
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: CALL_OW 321
3789: PUSH
3790: LD_VAR 0 3
3794: NONEQUAL
3795: IFFALSE 3813
// result := result diff i ;
3797: LD_ADDR_VAR 0 4
3801: PUSH
3802: LD_VAR 0 4
3806: PUSH
3807: LD_VAR 0 5
3811: DIFF
3812: ST_TO_ADDR
3813: GO 3772
3815: POP
3816: POP
// end ;
3817: LD_VAR 0 4
3821: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3822: LD_INT 0
3824: PPUSH
3825: PPUSH
3826: PPUSH
// result := true ;
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: LD_INT 1
3834: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: LD_VAR 0 2
3844: PPUSH
3845: CALL_OW 480
3849: ST_TO_ADDR
// if not tmp then
3850: LD_VAR 0 5
3854: NOT
3855: IFFALSE 3859
// exit ;
3857: GO 3908
// for i in tmp do
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_VAR 0 5
3868: PUSH
3869: FOR_IN
3870: IFFALSE 3906
// if GetTech ( i , side ) <> state_researched then
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: CALL_OW 321
3886: PUSH
3887: LD_INT 2
3889: NONEQUAL
3890: IFFALSE 3904
// begin result := false ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_INT 0
3899: ST_TO_ADDR
// exit ;
3900: POP
3901: POP
3902: GO 3908
// end ;
3904: GO 3869
3906: POP
3907: POP
// end ;
3908: LD_VAR 0 3
3912: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3913: LD_INT 0
3915: PPUSH
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3928: LD_VAR 0 1
3932: NOT
3933: PUSH
3934: LD_VAR 0 1
3938: PPUSH
3939: CALL_OW 257
3943: PUSH
3944: LD_INT 9
3946: NONEQUAL
3947: OR
3948: IFFALSE 3952
// exit ;
3950: GO 4525
// side := GetSide ( unit ) ;
3952: LD_ADDR_VAR 0 9
3956: PUSH
3957: LD_VAR 0 1
3961: PPUSH
3962: CALL_OW 255
3966: ST_TO_ADDR
// tech_space := tech_spacanom ;
3967: LD_ADDR_VAR 0 12
3971: PUSH
3972: LD_INT 29
3974: ST_TO_ADDR
// tech_time := tech_taurad ;
3975: LD_ADDR_VAR 0 13
3979: PUSH
3980: LD_INT 28
3982: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3983: LD_ADDR_VAR 0 11
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: CALL_OW 310
3997: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3998: LD_VAR 0 11
4002: PPUSH
4003: CALL_OW 247
4007: PUSH
4008: LD_INT 2
4010: EQUAL
4011: IFFALSE 4015
// exit ;
4013: GO 4525
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4015: LD_ADDR_VAR 0 8
4019: PUSH
4020: LD_INT 81
4022: PUSH
4023: LD_VAR 0 9
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: LD_INT 21
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 69
4057: ST_TO_ADDR
// if not tmp then
4058: LD_VAR 0 8
4062: NOT
4063: IFFALSE 4067
// exit ;
4065: GO 4525
// if in_unit then
4067: LD_VAR 0 11
4071: IFFALSE 4095
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4073: LD_ADDR_VAR 0 10
4077: PUSH
4078: LD_VAR 0 8
4082: PPUSH
4083: LD_VAR 0 11
4087: PPUSH
4088: CALL_OW 74
4092: ST_TO_ADDR
4093: GO 4115
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4095: LD_ADDR_VAR 0 10
4099: PUSH
4100: LD_VAR 0 8
4104: PPUSH
4105: LD_VAR 0 1
4109: PPUSH
4110: CALL_OW 74
4114: ST_TO_ADDR
// if not enemy then
4115: LD_VAR 0 10
4119: NOT
4120: IFFALSE 4124
// exit ;
4122: GO 4525
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4124: LD_VAR 0 11
4128: PUSH
4129: LD_VAR 0 11
4133: PPUSH
4134: LD_VAR 0 10
4138: PPUSH
4139: CALL_OW 296
4143: PUSH
4144: LD_INT 13
4146: GREATER
4147: AND
4148: PUSH
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_VAR 0 10
4158: PPUSH
4159: CALL_OW 296
4163: PUSH
4164: LD_INT 12
4166: GREATER
4167: OR
4168: IFFALSE 4172
// exit ;
4170: GO 4525
// missile := [ 1 ] ;
4172: LD_ADDR_VAR 0 14
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: EMPTY
4181: LIST
4182: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4183: LD_VAR 0 9
4187: PPUSH
4188: LD_VAR 0 12
4192: PPUSH
4193: CALL_OW 325
4197: IFFALSE 4226
// missile := Replace ( missile , missile + 1 , 2 ) ;
4199: LD_ADDR_VAR 0 14
4203: PUSH
4204: LD_VAR 0 14
4208: PPUSH
4209: LD_VAR 0 14
4213: PUSH
4214: LD_INT 1
4216: PLUS
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 1
4225: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4226: LD_VAR 0 9
4230: PPUSH
4231: LD_VAR 0 13
4235: PPUSH
4236: CALL_OW 325
4240: PUSH
4241: LD_VAR 0 10
4245: PPUSH
4246: CALL_OW 255
4250: PPUSH
4251: LD_VAR 0 13
4255: PPUSH
4256: CALL_OW 325
4260: NOT
4261: AND
4262: IFFALSE 4291
// missile := Replace ( missile , missile + 1 , 3 ) ;
4264: LD_ADDR_VAR 0 14
4268: PUSH
4269: LD_VAR 0 14
4273: PPUSH
4274: LD_VAR 0 14
4278: PUSH
4279: LD_INT 1
4281: PLUS
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 1
4290: ST_TO_ADDR
// if missile < 2 then
4291: LD_VAR 0 14
4295: PUSH
4296: LD_INT 2
4298: LESS
4299: IFFALSE 4303
// exit ;
4301: GO 4525
// x := GetX ( enemy ) ;
4303: LD_ADDR_VAR 0 4
4307: PUSH
4308: LD_VAR 0 10
4312: PPUSH
4313: CALL_OW 250
4317: ST_TO_ADDR
// y := GetY ( enemy ) ;
4318: LD_ADDR_VAR 0 5
4322: PUSH
4323: LD_VAR 0 10
4327: PPUSH
4328: CALL_OW 251
4332: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: LD_VAR 0 4
4342: PUSH
4343: LD_INT 1
4345: NEG
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: CALL_OW 12
4354: PLUS
4355: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4356: LD_ADDR_VAR 0 7
4360: PUSH
4361: LD_VAR 0 5
4365: PUSH
4366: LD_INT 1
4368: NEG
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: CALL_OW 12
4377: PLUS
4378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4379: LD_VAR 0 6
4383: PPUSH
4384: LD_VAR 0 7
4388: PPUSH
4389: CALL_OW 488
4393: NOT
4394: IFFALSE 4416
// begin _x := x ;
4396: LD_ADDR_VAR 0 6
4400: PUSH
4401: LD_VAR 0 4
4405: ST_TO_ADDR
// _y := y ;
4406: LD_ADDR_VAR 0 7
4410: PUSH
4411: LD_VAR 0 5
4415: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4416: LD_ADDR_VAR 0 3
4420: PUSH
4421: LD_INT 1
4423: PPUSH
4424: LD_VAR 0 14
4428: PPUSH
4429: CALL_OW 12
4433: ST_TO_ADDR
// case i of 1 :
4434: LD_VAR 0 3
4438: PUSH
4439: LD_INT 1
4441: DOUBLE
4442: EQUAL
4443: IFTRUE 4447
4445: GO 4464
4447: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 10
4457: PPUSH
4458: CALL_OW 115
4462: GO 4525
4464: LD_INT 2
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4494
4472: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_VAR 0 6
4482: PPUSH
4483: LD_VAR 0 7
4487: PPUSH
4488: CALL_OW 153
4492: GO 4525
4494: LD_INT 3
4496: DOUBLE
4497: EQUAL
4498: IFTRUE 4502
4500: GO 4524
4502: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4503: LD_VAR 0 1
4507: PPUSH
4508: LD_VAR 0 6
4512: PPUSH
4513: LD_VAR 0 7
4517: PPUSH
4518: CALL_OW 154
4522: GO 4525
4524: POP
// end ;
4525: LD_VAR 0 2
4529: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4530: LD_INT 0
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// if not unit or not building then
4538: LD_VAR 0 1
4542: NOT
4543: PUSH
4544: LD_VAR 0 2
4548: NOT
4549: OR
4550: IFFALSE 4554
// exit ;
4552: GO 4712
// x := GetX ( building ) ;
4554: LD_ADDR_VAR 0 5
4558: PUSH
4559: LD_VAR 0 2
4563: PPUSH
4564: CALL_OW 250
4568: ST_TO_ADDR
// y := GetY ( building ) ;
4569: LD_ADDR_VAR 0 6
4573: PUSH
4574: LD_VAR 0 2
4578: PPUSH
4579: CALL_OW 251
4583: ST_TO_ADDR
// for i = 0 to 5 do
4584: LD_ADDR_VAR 0 4
4588: PUSH
4589: DOUBLE
4590: LD_INT 0
4592: DEC
4593: ST_TO_ADDR
4594: LD_INT 5
4596: PUSH
4597: FOR_TO
4598: IFFALSE 4710
// begin _x := ShiftX ( x , i , 3 ) ;
4600: LD_ADDR_VAR 0 7
4604: PUSH
4605: LD_VAR 0 5
4609: PPUSH
4610: LD_VAR 0 4
4614: PPUSH
4615: LD_INT 3
4617: PPUSH
4618: CALL_OW 272
4622: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4623: LD_ADDR_VAR 0 8
4627: PUSH
4628: LD_VAR 0 6
4632: PPUSH
4633: LD_VAR 0 4
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 273
4645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4646: LD_VAR 0 7
4650: PPUSH
4651: LD_VAR 0 8
4655: PPUSH
4656: CALL_OW 488
4660: NOT
4661: IFFALSE 4665
// continue ;
4663: GO 4597
// if HexInfo ( _x , _y ) = 0 then
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_VAR 0 8
4674: PPUSH
4675: CALL_OW 428
4679: PUSH
4680: LD_INT 0
4682: EQUAL
4683: IFFALSE 4708
// begin ComMoveXY ( unit , _x , _y ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: LD_VAR 0 8
4699: PPUSH
4700: CALL_OW 111
// exit ;
4704: POP
4705: POP
4706: GO 4712
// end ; end ;
4708: GO 4597
4710: POP
4711: POP
// end ;
4712: LD_VAR 0 3
4716: RET
// export function ScanBase ( side , base_area ) ; begin
4717: LD_INT 0
4719: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4720: LD_ADDR_VAR 0 3
4724: PUSH
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_INT 81
4732: PUSH
4733: LD_VAR 0 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PPUSH
4742: CALL_OW 70
4746: ST_TO_ADDR
// end ;
4747: LD_VAR 0 3
4751: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4752: LD_INT 0
4754: PPUSH
4755: PPUSH
4756: PPUSH
4757: PPUSH
// result := false ;
4758: LD_ADDR_VAR 0 2
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// side := GetSide ( unit ) ;
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_VAR 0 1
4775: PPUSH
4776: CALL_OW 255
4780: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4781: LD_ADDR_VAR 0 4
4785: PUSH
4786: LD_VAR 0 1
4790: PPUSH
4791: CALL_OW 248
4795: ST_TO_ADDR
// case nat of 1 :
4796: LD_VAR 0 4
4800: PUSH
4801: LD_INT 1
4803: DOUBLE
4804: EQUAL
4805: IFTRUE 4809
4807: GO 4820
4809: POP
// tech := tech_lassight ; 2 :
4810: LD_ADDR_VAR 0 5
4814: PUSH
4815: LD_INT 12
4817: ST_TO_ADDR
4818: GO 4859
4820: LD_INT 2
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 4839
4828: POP
// tech := tech_mortar ; 3 :
4829: LD_ADDR_VAR 0 5
4833: PUSH
4834: LD_INT 41
4836: ST_TO_ADDR
4837: GO 4859
4839: LD_INT 3
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4858
4847: POP
// tech := tech_bazooka ; end ;
4848: LD_ADDR_VAR 0 5
4852: PUSH
4853: LD_INT 44
4855: ST_TO_ADDR
4856: GO 4859
4858: POP
// if Researched ( side , tech ) then
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_VAR 0 5
4868: PPUSH
4869: CALL_OW 325
4873: IFFALSE 4900
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4875: LD_ADDR_VAR 0 2
4879: PUSH
4880: LD_INT 5
4882: PUSH
4883: LD_INT 8
4885: PUSH
4886: LD_INT 9
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: PUSH
4894: LD_VAR 0 4
4898: ARRAY
4899: ST_TO_ADDR
// end ;
4900: LD_VAR 0 2
4904: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
4909: PPUSH
// if not mines then
4910: LD_VAR 0 2
4914: NOT
4915: IFFALSE 4919
// exit ;
4917: GO 5063
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4919: LD_ADDR_VAR 0 5
4923: PUSH
4924: LD_INT 81
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 21
4941: PUSH
4942: LD_INT 3
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// for i in mines do
4962: LD_ADDR_VAR 0 4
4966: PUSH
4967: LD_VAR 0 2
4971: PUSH
4972: FOR_IN
4973: IFFALSE 5061
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4975: LD_VAR 0 4
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PPUSH
4984: LD_VAR 0 4
4988: PUSH
4989: LD_INT 2
4991: ARRAY
4992: PPUSH
4993: CALL_OW 458
4997: NOT
4998: IFFALSE 5002
// continue ;
5000: GO 4972
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5002: LD_VAR 0 4
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_VAR 0 4
5015: PUSH
5016: LD_INT 2
5018: ARRAY
5019: PPUSH
5020: CALL_OW 428
5024: PUSH
5025: LD_VAR 0 5
5029: IN
5030: IFFALSE 5059
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5032: LD_VAR 0 4
5036: PUSH
5037: LD_INT 1
5039: ARRAY
5040: PPUSH
5041: LD_VAR 0 4
5045: PUSH
5046: LD_INT 2
5048: ARRAY
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 456
// end ;
5059: GO 4972
5061: POP
5062: POP
// end ;
5063: LD_VAR 0 3
5067: RET
// export function Count ( array ) ; begin
5068: LD_INT 0
5070: PPUSH
// result := array + 0 ;
5071: LD_ADDR_VAR 0 2
5075: PUSH
5076: LD_VAR 0 1
5080: PUSH
5081: LD_INT 0
5083: PLUS
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 2
5089: RET
// export function IsEmpty ( building ) ; begin
5090: LD_INT 0
5092: PPUSH
// if not building then
5093: LD_VAR 0 1
5097: NOT
5098: IFFALSE 5102
// exit ;
5100: GO 5145
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 1
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL_OW 255
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 58
5131: PUSH
5132: EMPTY
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 69
5143: IN
5144: ST_TO_ADDR
// end ;
5145: LD_VAR 0 2
5149: RET
// export function IsNotFull ( building ) ; var places ; begin
5150: LD_INT 0
5152: PPUSH
5153: PPUSH
// if not building then
5154: LD_VAR 0 1
5158: NOT
5159: IFFALSE 5163
// exit ;
5161: GO 5191
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5163: LD_ADDR_VAR 0 2
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_INT 3
5175: PUSH
5176: LD_INT 62
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 72
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 2
5195: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
5201: PPUSH
// tmp := [ ] ;
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: EMPTY
5208: ST_TO_ADDR
// list := [ ] ;
5209: LD_ADDR_VAR 0 5
5213: PUSH
5214: EMPTY
5215: ST_TO_ADDR
// for i = 16 to 25 do
5216: LD_ADDR_VAR 0 4
5220: PUSH
5221: DOUBLE
5222: LD_INT 16
5224: DEC
5225: ST_TO_ADDR
5226: LD_INT 25
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5303
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_VAR 0 1
5249: PPUSH
5250: CALL_OW 255
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 91
5261: PUSH
5262: LD_VAR 0 1
5266: PUSH
5267: LD_INT 6
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 30
5277: PUSH
5278: LD_VAR 0 4
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: PPUSH
5295: CALL_OW 69
5299: ADD
5300: ST_TO_ADDR
5301: GO 5229
5303: POP
5304: POP
// for i = 1 to tmp do
5305: LD_ADDR_VAR 0 4
5309: PUSH
5310: DOUBLE
5311: LD_INT 1
5313: DEC
5314: ST_TO_ADDR
5315: LD_VAR 0 3
5319: PUSH
5320: FOR_TO
5321: IFFALSE 5409
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5323: LD_ADDR_VAR 0 5
5327: PUSH
5328: LD_VAR 0 5
5332: PUSH
5333: LD_VAR 0 3
5337: PUSH
5338: LD_VAR 0 4
5342: ARRAY
5343: PPUSH
5344: CALL_OW 266
5348: PUSH
5349: LD_VAR 0 3
5353: PUSH
5354: LD_VAR 0 4
5358: ARRAY
5359: PPUSH
5360: CALL_OW 250
5364: PUSH
5365: LD_VAR 0 3
5369: PUSH
5370: LD_VAR 0 4
5374: ARRAY
5375: PPUSH
5376: CALL_OW 251
5380: PUSH
5381: LD_VAR 0 3
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: PPUSH
5392: CALL_OW 254
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: PUSH
5403: EMPTY
5404: LIST
5405: ADD
5406: ST_TO_ADDR
5407: GO 5320
5409: POP
5410: POP
// result := list ;
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 5
5420: ST_TO_ADDR
// end ;
5421: LD_VAR 0 2
5425: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
// if not factory then
5435: LD_VAR 0 1
5439: NOT
5440: IFFALSE 5444
// exit ;
5442: GO 6037
// if control = control_apeman then
5444: LD_VAR 0 4
5448: PUSH
5449: LD_INT 5
5451: EQUAL
5452: IFFALSE 5561
// begin tmp := UnitsInside ( factory ) ;
5454: LD_ADDR_VAR 0 8
5458: PUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: CALL_OW 313
5468: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5469: LD_VAR 0 8
5473: PPUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 12
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PPUSH
5484: CALL_OW 72
5488: NOT
5489: IFFALSE 5499
// control := control_manual ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5499: LD_ADDR_VAR 0 8
5503: PUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL 5196 0 1
5513: ST_TO_ADDR
// if tmp then
5514: LD_VAR 0 8
5518: IFFALSE 5561
// begin for i in tmp do
5520: LD_ADDR_VAR 0 7
5524: PUSH
5525: LD_VAR 0 8
5529: PUSH
5530: FOR_IN
5531: IFFALSE 5559
// if i [ 1 ] = b_ext_radio then
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PUSH
5542: LD_INT 22
5544: EQUAL
5545: IFFALSE 5557
// begin control := control_remote ;
5547: LD_ADDR_VAR 0 4
5551: PUSH
5552: LD_INT 2
5554: ST_TO_ADDR
// break ;
5555: GO 5559
// end ;
5557: GO 5530
5559: POP
5560: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_VAR 0 2
5570: PPUSH
5571: LD_VAR 0 3
5575: PPUSH
5576: LD_VAR 0 4
5580: PPUSH
5581: LD_VAR 0 5
5585: PPUSH
5586: CALL_OW 448
5590: IFFALSE 5625
// begin result := [ chassis , engine , control , weapon ] ;
5592: LD_ADDR_VAR 0 6
5596: PUSH
5597: LD_VAR 0 2
5601: PUSH
5602: LD_VAR 0 3
5606: PUSH
5607: LD_VAR 0 4
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: ST_TO_ADDR
// exit ;
5623: GO 6037
// end ; _chassis := AvailableChassisList ( factory ) ;
5625: LD_ADDR_VAR 0 9
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: CALL_OW 475
5639: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5640: LD_ADDR_VAR 0 11
5644: PUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL_OW 476
5654: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5655: LD_ADDR_VAR 0 12
5659: PUSH
5660: LD_VAR 0 1
5664: PPUSH
5665: CALL_OW 477
5669: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5670: LD_ADDR_VAR 0 10
5674: PUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL_OW 478
5684: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5685: LD_VAR 0 9
5689: NOT
5690: PUSH
5691: LD_VAR 0 11
5695: NOT
5696: OR
5697: PUSH
5698: LD_VAR 0 12
5702: NOT
5703: OR
5704: PUSH
5705: LD_VAR 0 10
5709: NOT
5710: OR
5711: IFFALSE 5746
// begin result := [ chassis , engine , control , weapon ] ;
5713: LD_ADDR_VAR 0 6
5717: PUSH
5718: LD_VAR 0 2
5722: PUSH
5723: LD_VAR 0 3
5727: PUSH
5728: LD_VAR 0 4
5732: PUSH
5733: LD_VAR 0 5
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: ST_TO_ADDR
// exit ;
5744: GO 6037
// end ; if not chassis in _chassis then
5746: LD_VAR 0 2
5750: PUSH
5751: LD_VAR 0 9
5755: IN
5756: NOT
5757: IFFALSE 5783
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5759: LD_ADDR_VAR 0 2
5763: PUSH
5764: LD_VAR 0 9
5768: PUSH
5769: LD_INT 1
5771: PPUSH
5772: LD_VAR 0 9
5776: PPUSH
5777: CALL_OW 12
5781: ARRAY
5782: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_VAR 0 3
5792: PPUSH
5793: CALL 6042 0 2
5797: NOT
5798: IFFALSE 5857
// repeat engine := _engine [ 1 ] ;
5800: LD_ADDR_VAR 0 3
5804: PUSH
5805: LD_VAR 0 11
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: LD_VAR 0 11
5823: PPUSH
5824: LD_INT 1
5826: PPUSH
5827: CALL_OW 3
5831: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5832: LD_VAR 0 2
5836: PPUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: CALL 6042 0 2
5846: PUSH
5847: LD_VAR 0 11
5851: PUSH
5852: EMPTY
5853: EQUAL
5854: OR
5855: IFFALSE 5800
// if not control in _control then
5857: LD_VAR 0 4
5861: PUSH
5862: LD_VAR 0 12
5866: IN
5867: NOT
5868: IFFALSE 5894
// control := _control [ rand ( 1 , _control ) ] ;
5870: LD_ADDR_VAR 0 4
5874: PUSH
5875: LD_VAR 0 12
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_VAR 0 12
5887: PPUSH
5888: CALL_OW 12
5892: ARRAY
5893: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_VAR 0 5
5903: PPUSH
5904: CALL 6262 0 2
5908: NOT
5909: IFFALSE 5968
// repeat weapon := _weapon [ 1 ] ;
5911: LD_ADDR_VAR 0 5
5915: PUSH
5916: LD_VAR 0 10
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5925: LD_ADDR_VAR 0 10
5929: PUSH
5930: LD_VAR 0 10
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: CALL_OW 3
5942: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_VAR 0 5
5952: PPUSH
5953: CALL 6262 0 2
5957: PUSH
5958: LD_VAR 0 10
5962: PUSH
5963: EMPTY
5964: EQUAL
5965: OR
5966: IFFALSE 5911
// result := [ ] ;
5968: LD_ADDR_VAR 0 6
5972: PUSH
5973: EMPTY
5974: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5975: LD_VAR 0 1
5979: PPUSH
5980: LD_VAR 0 2
5984: PPUSH
5985: LD_VAR 0 3
5989: PPUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: LD_VAR 0 5
5999: PPUSH
6000: CALL_OW 448
6004: IFFALSE 6037
// result := [ chassis , engine , control , weapon ] ;
6006: LD_ADDR_VAR 0 6
6010: PUSH
6011: LD_VAR 0 2
6015: PUSH
6016: LD_VAR 0 3
6020: PUSH
6021: LD_VAR 0 4
6025: PUSH
6026: LD_VAR 0 5
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: ST_TO_ADDR
// end ;
6037: LD_VAR 0 6
6041: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6042: LD_INT 0
6044: PPUSH
// if not chassis or not engine then
6045: LD_VAR 0 1
6049: NOT
6050: PUSH
6051: LD_VAR 0 2
6055: NOT
6056: OR
6057: IFFALSE 6061
// exit ;
6059: GO 6257
// case engine of engine_solar :
6061: LD_VAR 0 2
6065: PUSH
6066: LD_INT 2
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6112
6074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6075: LD_ADDR_VAR 0 3
6079: PUSH
6080: LD_INT 11
6082: PUSH
6083: LD_INT 12
6085: PUSH
6086: LD_INT 13
6088: PUSH
6089: LD_INT 14
6091: PUSH
6092: LD_INT 1
6094: PUSH
6095: LD_INT 2
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: ST_TO_ADDR
6110: GO 6241
6112: LD_INT 1
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6182
6120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 13
6134: PUSH
6135: LD_INT 14
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: LD_INT 2
6143: PUSH
6144: LD_INT 3
6146: PUSH
6147: LD_INT 4
6149: PUSH
6150: LD_INT 5
6152: PUSH
6153: LD_INT 21
6155: PUSH
6156: LD_INT 23
6158: PUSH
6159: LD_INT 22
6161: PUSH
6162: LD_INT 24
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: ST_TO_ADDR
6180: GO 6241
6182: LD_INT 3
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6240
6190: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6191: LD_ADDR_VAR 0 3
6195: PUSH
6196: LD_INT 13
6198: PUSH
6199: LD_INT 14
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: LD_INT 3
6207: PUSH
6208: LD_INT 4
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: LD_INT 23
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: ST_TO_ADDR
6238: GO 6241
6240: POP
// result := ( chassis in result ) ;
6241: LD_ADDR_VAR 0 3
6245: PUSH
6246: LD_VAR 0 1
6250: PUSH
6251: LD_VAR 0 3
6255: IN
6256: ST_TO_ADDR
// end ;
6257: LD_VAR 0 3
6261: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6262: LD_INT 0
6264: PPUSH
// if not chassis or not weapon then
6265: LD_VAR 0 1
6269: NOT
6270: PUSH
6271: LD_VAR 0 2
6275: NOT
6276: OR
6277: IFFALSE 6281
// exit ;
6279: GO 7341
// case weapon of us_machine_gun :
6281: LD_VAR 0 2
6285: PUSH
6286: LD_INT 2
6288: DOUBLE
6289: EQUAL
6290: IFTRUE 6294
6292: GO 6324
6294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6295: LD_ADDR_VAR 0 3
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 3
6308: PUSH
6309: LD_INT 4
6311: PUSH
6312: LD_INT 5
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: ST_TO_ADDR
6322: GO 7325
6324: LD_INT 3
6326: DOUBLE
6327: EQUAL
6328: IFTRUE 6332
6330: GO 6362
6332: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6333: LD_ADDR_VAR 0 3
6337: PUSH
6338: LD_INT 1
6340: PUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 5
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: ST_TO_ADDR
6360: GO 7325
6362: LD_INT 11
6364: DOUBLE
6365: EQUAL
6366: IFTRUE 6370
6368: GO 6400
6370: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 5
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: ST_TO_ADDR
6398: GO 7325
6400: LD_INT 4
6402: DOUBLE
6403: EQUAL
6404: IFTRUE 6408
6406: GO 6434
6408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: LD_INT 2
6416: PUSH
6417: LD_INT 3
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 7325
6434: LD_INT 5
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6468
6442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: ST_TO_ADDR
6466: GO 7325
6468: LD_INT 9
6470: DOUBLE
6471: EQUAL
6472: IFTRUE 6476
6474: GO 6502
6476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6477: LD_ADDR_VAR 0 3
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 3
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: LD_INT 5
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: ST_TO_ADDR
6500: GO 7325
6502: LD_INT 7
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6536
6510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6511: LD_ADDR_VAR 0 3
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 3
6521: PUSH
6522: LD_INT 4
6524: PUSH
6525: LD_INT 5
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: ST_TO_ADDR
6534: GO 7325
6536: LD_INT 12
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6570
6544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: LD_INT 4
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: ST_TO_ADDR
6568: GO 7325
6570: LD_INT 13
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6578
6576: GO 6604
6578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: ST_TO_ADDR
6602: GO 7325
6604: LD_INT 14
6606: DOUBLE
6607: EQUAL
6608: IFTRUE 6612
6610: GO 6630
6612: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_INT 4
6620: PUSH
6621: LD_INT 5
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7325
6630: LD_INT 6
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6656
6638: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 4
6646: PUSH
6647: LD_INT 5
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 7325
6656: LD_INT 10
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6682
6664: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_INT 4
6672: PUSH
6673: LD_INT 5
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: ST_TO_ADDR
6680: GO 7325
6682: LD_INT 22
6684: DOUBLE
6685: EQUAL
6686: IFTRUE 6690
6688: GO 6716
6690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6691: LD_ADDR_VAR 0 3
6695: PUSH
6696: LD_INT 11
6698: PUSH
6699: LD_INT 12
6701: PUSH
6702: LD_INT 13
6704: PUSH
6705: LD_INT 14
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: ST_TO_ADDR
6714: GO 7325
6716: LD_INT 23
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6750
6724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6725: LD_ADDR_VAR 0 3
6729: PUSH
6730: LD_INT 11
6732: PUSH
6733: LD_INT 12
6735: PUSH
6736: LD_INT 13
6738: PUSH
6739: LD_INT 14
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
6748: GO 7325
6750: LD_INT 24
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6784
6758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 11
6766: PUSH
6767: LD_INT 12
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: ST_TO_ADDR
6782: GO 7325
6784: LD_INT 30
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6818
6792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_INT 11
6800: PUSH
6801: LD_INT 12
6803: PUSH
6804: LD_INT 13
6806: PUSH
6807: LD_INT 14
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: ST_TO_ADDR
6816: GO 7325
6818: LD_INT 25
6820: DOUBLE
6821: EQUAL
6822: IFTRUE 6826
6824: GO 6844
6826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6827: LD_ADDR_VAR 0 3
6831: PUSH
6832: LD_INT 13
6834: PUSH
6835: LD_INT 14
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: ST_TO_ADDR
6842: GO 7325
6844: LD_INT 27
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6870
6852: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6853: LD_ADDR_VAR 0 3
6857: PUSH
6858: LD_INT 13
6860: PUSH
6861: LD_INT 14
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: ST_TO_ADDR
6868: GO 7325
6870: LD_INT 92
6872: DOUBLE
6873: EQUAL
6874: IFTRUE 6878
6876: GO 6904
6878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_INT 11
6886: PUSH
6887: LD_INT 12
6889: PUSH
6890: LD_INT 13
6892: PUSH
6893: LD_INT 14
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: ST_TO_ADDR
6902: GO 7325
6904: LD_INT 28
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6930
6912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 13
6920: PUSH
6921: LD_INT 14
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: ST_TO_ADDR
6928: GO 7325
6930: LD_INT 29
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6938
6936: GO 6956
6938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: LD_INT 13
6946: PUSH
6947: LD_INT 14
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7325
6956: LD_INT 31
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 6982
6964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6965: LD_ADDR_VAR 0 3
6969: PUSH
6970: LD_INT 13
6972: PUSH
6973: LD_INT 14
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7325
6982: LD_INT 26
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7008
6990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 13
6998: PUSH
6999: LD_INT 14
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 7325
7008: LD_INT 42
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7042
7016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_INT 23
7030: PUSH
7031: LD_INT 24
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: ST_TO_ADDR
7040: GO 7325
7042: LD_INT 43
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7076
7050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7051: LD_ADDR_VAR 0 3
7055: PUSH
7056: LD_INT 21
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 23
7064: PUSH
7065: LD_INT 24
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7325
7076: LD_INT 44
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7110
7084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_INT 21
7092: PUSH
7093: LD_INT 22
7095: PUSH
7096: LD_INT 23
7098: PUSH
7099: LD_INT 24
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: ST_TO_ADDR
7108: GO 7325
7110: LD_INT 45
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7144
7118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 21
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 23
7132: PUSH
7133: LD_INT 24
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: ST_TO_ADDR
7142: GO 7325
7144: LD_INT 49
7146: DOUBLE
7147: EQUAL
7148: IFTRUE 7152
7150: GO 7178
7152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7153: LD_ADDR_VAR 0 3
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 22
7163: PUSH
7164: LD_INT 23
7166: PUSH
7167: LD_INT 24
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: ST_TO_ADDR
7176: GO 7325
7178: LD_INT 51
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7212
7186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: LD_INT 21
7194: PUSH
7195: LD_INT 22
7197: PUSH
7198: LD_INT 23
7200: PUSH
7201: LD_INT 24
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: ST_TO_ADDR
7210: GO 7325
7212: LD_INT 52
7214: DOUBLE
7215: EQUAL
7216: IFTRUE 7220
7218: GO 7246
7220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: ST_TO_ADDR
7244: GO 7325
7246: LD_INT 53
7248: DOUBLE
7249: EQUAL
7250: IFTRUE 7254
7252: GO 7272
7254: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_INT 23
7262: PUSH
7263: LD_INT 24
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: ST_TO_ADDR
7270: GO 7325
7272: LD_INT 46
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7298
7280: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: LD_INT 23
7288: PUSH
7289: LD_INT 24
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: ST_TO_ADDR
7296: GO 7325
7298: LD_INT 47
7300: DOUBLE
7301: EQUAL
7302: IFTRUE 7306
7304: GO 7324
7306: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: LD_INT 23
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: ST_TO_ADDR
7322: GO 7325
7324: POP
// result := ( chassis in result ) ;
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: LD_VAR 0 3
7339: IN
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 3
7345: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// result := array ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7365: LD_VAR 0 1
7369: NOT
7370: PUSH
7371: LD_VAR 0 2
7375: NOT
7376: OR
7377: PUSH
7378: LD_VAR 0 3
7382: NOT
7383: OR
7384: PUSH
7385: LD_VAR 0 2
7389: PUSH
7390: LD_VAR 0 1
7394: GREATER
7395: OR
7396: PUSH
7397: LD_VAR 0 3
7401: PUSH
7402: LD_VAR 0 1
7406: GREATER
7407: OR
7408: IFFALSE 7412
// exit ;
7410: GO 7708
// if direction then
7412: LD_VAR 0 4
7416: IFFALSE 7480
// begin d := 1 ;
7418: LD_ADDR_VAR 0 9
7422: PUSH
7423: LD_INT 1
7425: ST_TO_ADDR
// if i_from > i_to then
7426: LD_VAR 0 2
7430: PUSH
7431: LD_VAR 0 3
7435: GREATER
7436: IFFALSE 7462
// length := ( array - i_from ) + i_to else
7438: LD_ADDR_VAR 0 11
7442: PUSH
7443: LD_VAR 0 1
7447: PUSH
7448: LD_VAR 0 2
7452: MINUS
7453: PUSH
7454: LD_VAR 0 3
7458: PLUS
7459: ST_TO_ADDR
7460: GO 7478
// length := i_to - i_from ;
7462: LD_ADDR_VAR 0 11
7466: PUSH
7467: LD_VAR 0 3
7471: PUSH
7472: LD_VAR 0 2
7476: MINUS
7477: ST_TO_ADDR
// end else
7478: GO 7541
// begin d := - 1 ;
7480: LD_ADDR_VAR 0 9
7484: PUSH
7485: LD_INT 1
7487: NEG
7488: ST_TO_ADDR
// if i_from > i_to then
7489: LD_VAR 0 2
7493: PUSH
7494: LD_VAR 0 3
7498: GREATER
7499: IFFALSE 7519
// length := i_from - i_to else
7501: LD_ADDR_VAR 0 11
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: LD_VAR 0 3
7515: MINUS
7516: ST_TO_ADDR
7517: GO 7541
// length := ( array - i_to ) + i_from ;
7519: LD_ADDR_VAR 0 11
7523: PUSH
7524: LD_VAR 0 1
7528: PUSH
7529: LD_VAR 0 3
7533: MINUS
7534: PUSH
7535: LD_VAR 0 2
7539: PLUS
7540: ST_TO_ADDR
// end ; if not length then
7541: LD_VAR 0 11
7545: NOT
7546: IFFALSE 7550
// exit ;
7548: GO 7708
// tmp := array ;
7550: LD_ADDR_VAR 0 10
7554: PUSH
7555: LD_VAR 0 1
7559: ST_TO_ADDR
// for i = 1 to length do
7560: LD_ADDR_VAR 0 6
7564: PUSH
7565: DOUBLE
7566: LD_INT 1
7568: DEC
7569: ST_TO_ADDR
7570: LD_VAR 0 11
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7696
// begin for j = 1 to array do
7578: LD_ADDR_VAR 0 7
7582: PUSH
7583: DOUBLE
7584: LD_INT 1
7586: DEC
7587: ST_TO_ADDR
7588: LD_VAR 0 1
7592: PUSH
7593: FOR_TO
7594: IFFALSE 7682
// begin k := j + d ;
7596: LD_ADDR_VAR 0 8
7600: PUSH
7601: LD_VAR 0 7
7605: PUSH
7606: LD_VAR 0 9
7610: PLUS
7611: ST_TO_ADDR
// if k > array then
7612: LD_VAR 0 8
7616: PUSH
7617: LD_VAR 0 1
7621: GREATER
7622: IFFALSE 7632
// k := 1 ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// if not k then
7632: LD_VAR 0 8
7636: NOT
7637: IFFALSE 7649
// k := array ;
7639: LD_ADDR_VAR 0 8
7643: PUSH
7644: LD_VAR 0 1
7648: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7649: LD_ADDR_VAR 0 10
7653: PUSH
7654: LD_VAR 0 10
7658: PPUSH
7659: LD_VAR 0 8
7663: PPUSH
7664: LD_VAR 0 1
7668: PUSH
7669: LD_VAR 0 7
7673: ARRAY
7674: PPUSH
7675: CALL_OW 1
7679: ST_TO_ADDR
// end ;
7680: GO 7593
7682: POP
7683: POP
// array := tmp ;
7684: LD_ADDR_VAR 0 1
7688: PUSH
7689: LD_VAR 0 10
7693: ST_TO_ADDR
// end ;
7694: GO 7575
7696: POP
7697: POP
// result := array ;
7698: LD_ADDR_VAR 0 5
7702: PUSH
7703: LD_VAR 0 1
7707: ST_TO_ADDR
// end ;
7708: LD_VAR 0 5
7712: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
// result := 0 ;
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: LD_INT 0
7724: ST_TO_ADDR
// if not array or not value in array then
7725: LD_VAR 0 1
7729: NOT
7730: PUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 1
7740: IN
7741: NOT
7742: OR
7743: IFFALSE 7747
// exit ;
7745: GO 7801
// for i = 1 to array do
7747: LD_ADDR_VAR 0 4
7751: PUSH
7752: DOUBLE
7753: LD_INT 1
7755: DEC
7756: ST_TO_ADDR
7757: LD_VAR 0 1
7761: PUSH
7762: FOR_TO
7763: IFFALSE 7799
// if value = array [ i ] then
7765: LD_VAR 0 2
7769: PUSH
7770: LD_VAR 0 1
7774: PUSH
7775: LD_VAR 0 4
7779: ARRAY
7780: EQUAL
7781: IFFALSE 7797
// begin result := i ;
7783: LD_ADDR_VAR 0 3
7787: PUSH
7788: LD_VAR 0 4
7792: ST_TO_ADDR
// exit ;
7793: POP
7794: POP
7795: GO 7801
// end ;
7797: GO 7762
7799: POP
7800: POP
// end ;
7801: LD_VAR 0 3
7805: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7806: LD_INT 0
7808: PPUSH
// vc_chassis := chassis ;
7809: LD_ADDR_OWVAR 37
7813: PUSH
7814: LD_VAR 0 1
7818: ST_TO_ADDR
// vc_engine := engine ;
7819: LD_ADDR_OWVAR 39
7823: PUSH
7824: LD_VAR 0 2
7828: ST_TO_ADDR
// vc_control := control ;
7829: LD_ADDR_OWVAR 38
7833: PUSH
7834: LD_VAR 0 3
7838: ST_TO_ADDR
// vc_weapon := weapon ;
7839: LD_ADDR_OWVAR 40
7843: PUSH
7844: LD_VAR 0 4
7848: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7849: LD_ADDR_OWVAR 41
7853: PUSH
7854: LD_VAR 0 5
7858: ST_TO_ADDR
// end ;
7859: LD_VAR 0 6
7863: RET
// export function WantPlant ( unit ) ; var task ; begin
7864: LD_INT 0
7866: PPUSH
7867: PPUSH
// result := false ;
7868: LD_ADDR_VAR 0 2
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 437
7890: ST_TO_ADDR
// if task then
7891: LD_VAR 0 3
7895: IFFALSE 7923
// if task [ 1 ] [ 1 ] = p then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 1
7904: ARRAY
7905: PUSH
7906: LD_INT 1
7908: ARRAY
7909: PUSH
7910: LD_STRING p
7912: EQUAL
7913: IFFALSE 7923
// result := true ;
7915: LD_ADDR_VAR 0 2
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// end ;
7923: LD_VAR 0 2
7927: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
7932: PPUSH
7933: PPUSH
// if pos < 1 then
7934: LD_VAR 0 2
7938: PUSH
7939: LD_INT 1
7941: LESS
7942: IFFALSE 7946
// exit ;
7944: GO 8249
// if pos = 1 then
7946: LD_VAR 0 2
7950: PUSH
7951: LD_INT 1
7953: EQUAL
7954: IFFALSE 7987
// result := Replace ( arr , pos [ 1 ] , value ) else
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 2
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 3
7979: PPUSH
7980: CALL_OW 1
7984: ST_TO_ADDR
7985: GO 8249
// begin tmp := arr ;
7987: LD_ADDR_VAR 0 6
7991: PUSH
7992: LD_VAR 0 1
7996: ST_TO_ADDR
// s_arr := [ tmp ] ;
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_VAR 0 6
8006: PUSH
8007: EMPTY
8008: LIST
8009: ST_TO_ADDR
// for i = 1 to pos - 1 do
8010: LD_ADDR_VAR 0 5
8014: PUSH
8015: DOUBLE
8016: LD_INT 1
8018: DEC
8019: ST_TO_ADDR
8020: LD_VAR 0 2
8024: PUSH
8025: LD_INT 1
8027: MINUS
8028: PUSH
8029: FOR_TO
8030: IFFALSE 8075
// begin tmp := tmp [ pos [ i ] ] ;
8032: LD_ADDR_VAR 0 6
8036: PUSH
8037: LD_VAR 0 6
8041: PUSH
8042: LD_VAR 0 2
8046: PUSH
8047: LD_VAR 0 5
8051: ARRAY
8052: ARRAY
8053: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8054: LD_ADDR_VAR 0 7
8058: PUSH
8059: LD_VAR 0 7
8063: PUSH
8064: LD_VAR 0 6
8068: PUSH
8069: EMPTY
8070: LIST
8071: ADD
8072: ST_TO_ADDR
// end ;
8073: GO 8029
8075: POP
8076: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_VAR 0 6
8086: PPUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_VAR 0 2
8096: ARRAY
8097: PPUSH
8098: LD_VAR 0 3
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8108: LD_ADDR_VAR 0 7
8112: PUSH
8113: LD_VAR 0 7
8117: PPUSH
8118: LD_VAR 0 7
8122: PPUSH
8123: LD_VAR 0 6
8127: PPUSH
8128: CALL_OW 1
8132: ST_TO_ADDR
// for i = s_arr downto 2 do
8133: LD_ADDR_VAR 0 5
8137: PUSH
8138: DOUBLE
8139: LD_VAR 0 7
8143: INC
8144: ST_TO_ADDR
8145: LD_INT 2
8147: PUSH
8148: FOR_DOWNTO
8149: IFFALSE 8233
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8151: LD_ADDR_VAR 0 6
8155: PUSH
8156: LD_VAR 0 7
8160: PUSH
8161: LD_VAR 0 5
8165: PUSH
8166: LD_INT 1
8168: MINUS
8169: ARRAY
8170: PPUSH
8171: LD_VAR 0 2
8175: PUSH
8176: LD_VAR 0 5
8180: PUSH
8181: LD_INT 1
8183: MINUS
8184: ARRAY
8185: PPUSH
8186: LD_VAR 0 7
8190: PUSH
8191: LD_VAR 0 5
8195: ARRAY
8196: PPUSH
8197: CALL_OW 1
8201: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_VAR 0 7
8211: PPUSH
8212: LD_VAR 0 5
8216: PUSH
8217: LD_INT 1
8219: MINUS
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 1
8230: ST_TO_ADDR
// end ;
8231: GO 8148
8233: POP
8234: POP
// result := s_arr [ 1 ] ;
8235: LD_ADDR_VAR 0 4
8239: PUSH
8240: LD_VAR 0 7
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: ST_TO_ADDR
// end ; end ;
8249: LD_VAR 0 4
8253: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8254: LD_INT 0
8256: PPUSH
8257: PPUSH
// if not list then
8258: LD_VAR 0 1
8262: NOT
8263: IFFALSE 8267
// exit ;
8265: GO 8358
// i := list [ pos1 ] ;
8267: LD_ADDR_VAR 0 5
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: LD_VAR 0 2
8281: ARRAY
8282: ST_TO_ADDR
// if not i then
8283: LD_VAR 0 5
8287: NOT
8288: IFFALSE 8292
// exit ;
8290: GO 8358
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8292: LD_ADDR_VAR 0 1
8296: PUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_VAR 0 1
8311: PUSH
8312: LD_VAR 0 3
8316: ARRAY
8317: PPUSH
8318: CALL_OW 1
8322: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8323: LD_ADDR_VAR 0 1
8327: PUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: LD_VAR 0 3
8337: PPUSH
8338: LD_VAR 0 5
8342: PPUSH
8343: CALL_OW 1
8347: ST_TO_ADDR
// result := list ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_VAR 0 1
8357: ST_TO_ADDR
// end ;
8358: LD_VAR 0 4
8362: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8363: LD_INT 0
8365: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8366: LD_ADDR_VAR 0 5
8370: PUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 250
8380: PPUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 251
8390: PPUSH
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 3
8400: PPUSH
8401: LD_VAR 0 4
8405: PPUSH
8406: CALL 8784 0 5
8410: ST_TO_ADDR
// end ;
8411: LD_VAR 0 5
8415: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8416: LD_INT 0
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
// if not list or not unit then
8422: LD_VAR 0 2
8426: NOT
8427: PUSH
8428: LD_VAR 0 1
8432: NOT
8433: OR
8434: IFFALSE 8438
// exit ;
8436: GO 8779
// result := [ ] ;
8438: LD_ADDR_VAR 0 5
8442: PUSH
8443: EMPTY
8444: ST_TO_ADDR
// for i in list do
8445: LD_ADDR_VAR 0 6
8449: PUSH
8450: LD_VAR 0 2
8454: PUSH
8455: FOR_IN
8456: IFFALSE 8674
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8458: LD_ADDR_VAR 0 8
8462: PUSH
8463: LD_VAR 0 1
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 1
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 6
8481: PUSH
8482: LD_INT 2
8484: ARRAY
8485: PPUSH
8486: CALL_OW 297
8490: ST_TO_ADDR
// if not Count ( result ) then
8491: LD_VAR 0 5
8495: PPUSH
8496: CALL 5068 0 1
8500: NOT
8501: IFFALSE 8534
// begin result := Join ( result , [ i , tmp ] ) ;
8503: LD_ADDR_VAR 0 5
8507: PUSH
8508: LD_VAR 0 5
8512: PPUSH
8513: LD_VAR 0 6
8517: PUSH
8518: LD_VAR 0 8
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PPUSH
8527: CALL 40677 0 2
8531: ST_TO_ADDR
// continue ;
8532: GO 8455
// end ; if result [ result ] [ 2 ] <= tmp then
8534: LD_VAR 0 5
8538: PUSH
8539: LD_VAR 0 5
8543: ARRAY
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PUSH
8549: LD_VAR 0 8
8553: LESSEQUAL
8554: IFFALSE 8587
// result := Join ( result , [ i , tmp ] ) else
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 5
8565: PPUSH
8566: LD_VAR 0 6
8570: PUSH
8571: LD_VAR 0 8
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL 40677 0 2
8584: ST_TO_ADDR
8585: GO 8672
// begin for j := 1 to Count ( result ) do
8587: LD_ADDR_VAR 0 7
8591: PUSH
8592: DOUBLE
8593: LD_INT 1
8595: DEC
8596: ST_TO_ADDR
8597: LD_VAR 0 5
8601: PPUSH
8602: CALL 5068 0 1
8606: PUSH
8607: FOR_TO
8608: IFFALSE 8670
// begin if tmp < result [ j ] [ 2 ] then
8610: LD_VAR 0 8
8614: PUSH
8615: LD_VAR 0 5
8619: PUSH
8620: LD_VAR 0 7
8624: ARRAY
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: LESS
8630: IFFALSE 8668
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8632: LD_ADDR_VAR 0 5
8636: PUSH
8637: LD_VAR 0 5
8641: PPUSH
8642: LD_VAR 0 7
8646: PPUSH
8647: LD_VAR 0 6
8651: PUSH
8652: LD_VAR 0 8
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 2
8665: ST_TO_ADDR
// break ;
8666: GO 8670
// end ; end ;
8668: GO 8607
8670: POP
8671: POP
// end ; end ;
8672: GO 8455
8674: POP
8675: POP
// if result and not asc then
8676: LD_VAR 0 5
8680: PUSH
8681: LD_VAR 0 3
8685: NOT
8686: AND
8687: IFFALSE 8704
// result := ReverseArray ( result ) ;
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: LD_VAR 0 5
8698: PPUSH
8699: CALL 35944 0 1
8703: ST_TO_ADDR
// tmp := [ ] ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: EMPTY
8710: ST_TO_ADDR
// if mode then
8711: LD_VAR 0 4
8715: IFFALSE 8779
// begin for i := 1 to result do
8717: LD_ADDR_VAR 0 6
8721: PUSH
8722: DOUBLE
8723: LD_INT 1
8725: DEC
8726: ST_TO_ADDR
8727: LD_VAR 0 5
8731: PUSH
8732: FOR_TO
8733: IFFALSE 8767
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8735: LD_ADDR_VAR 0 8
8739: PUSH
8740: LD_VAR 0 8
8744: PPUSH
8745: LD_VAR 0 5
8749: PUSH
8750: LD_VAR 0 6
8754: ARRAY
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: CALL 40677 0 2
8764: ST_TO_ADDR
8765: GO 8732
8767: POP
8768: POP
// result := tmp ;
8769: LD_ADDR_VAR 0 5
8773: PUSH
8774: LD_VAR 0 8
8778: ST_TO_ADDR
// end ; end ;
8779: LD_VAR 0 5
8783: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8784: LD_INT 0
8786: PPUSH
8787: PPUSH
8788: PPUSH
8789: PPUSH
// if not list then
8790: LD_VAR 0 3
8794: NOT
8795: IFFALSE 8799
// exit ;
8797: GO 9187
// result := [ ] ;
8799: LD_ADDR_VAR 0 6
8803: PUSH
8804: EMPTY
8805: ST_TO_ADDR
// for i in list do
8806: LD_ADDR_VAR 0 7
8810: PUSH
8811: LD_VAR 0 3
8815: PUSH
8816: FOR_IN
8817: IFFALSE 9019
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8819: LD_ADDR_VAR 0 9
8823: PUSH
8824: LD_VAR 0 7
8828: PPUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: LD_VAR 0 2
8838: PPUSH
8839: CALL_OW 297
8843: ST_TO_ADDR
// if not result then
8844: LD_VAR 0 6
8848: NOT
8849: IFFALSE 8875
// result := [ [ i , tmp ] ] else
8851: LD_ADDR_VAR 0 6
8855: PUSH
8856: LD_VAR 0 7
8860: PUSH
8861: LD_VAR 0 9
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: ST_TO_ADDR
8873: GO 9017
// begin if result [ result ] [ 2 ] <= tmp then
8875: LD_VAR 0 6
8879: PUSH
8880: LD_VAR 0 6
8884: ARRAY
8885: PUSH
8886: LD_INT 2
8888: ARRAY
8889: PUSH
8890: LD_VAR 0 9
8894: LESSEQUAL
8895: IFFALSE 8937
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8897: LD_ADDR_VAR 0 6
8901: PUSH
8902: LD_VAR 0 6
8906: PPUSH
8907: LD_VAR 0 6
8911: PUSH
8912: LD_INT 1
8914: PLUS
8915: PPUSH
8916: LD_VAR 0 7
8920: PUSH
8921: LD_VAR 0 9
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 2
8934: ST_TO_ADDR
8935: GO 9017
// for j := 1 to result do
8937: LD_ADDR_VAR 0 8
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_VAR 0 6
8951: PUSH
8952: FOR_TO
8953: IFFALSE 9015
// begin if tmp < result [ j ] [ 2 ] then
8955: LD_VAR 0 9
8959: PUSH
8960: LD_VAR 0 6
8964: PUSH
8965: LD_VAR 0 8
8969: ARRAY
8970: PUSH
8971: LD_INT 2
8973: ARRAY
8974: LESS
8975: IFFALSE 9013
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8977: LD_ADDR_VAR 0 6
8981: PUSH
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 8
8991: PPUSH
8992: LD_VAR 0 7
8996: PUSH
8997: LD_VAR 0 9
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 2
9010: ST_TO_ADDR
// break ;
9011: GO 9015
// end ; end ;
9013: GO 8952
9015: POP
9016: POP
// end ; end ;
9017: GO 8816
9019: POP
9020: POP
// if result and not asc then
9021: LD_VAR 0 6
9025: PUSH
9026: LD_VAR 0 4
9030: NOT
9031: AND
9032: IFFALSE 9107
// begin tmp := result ;
9034: LD_ADDR_VAR 0 9
9038: PUSH
9039: LD_VAR 0 6
9043: ST_TO_ADDR
// for i = tmp downto 1 do
9044: LD_ADDR_VAR 0 7
9048: PUSH
9049: DOUBLE
9050: LD_VAR 0 9
9054: INC
9055: ST_TO_ADDR
9056: LD_INT 1
9058: PUSH
9059: FOR_DOWNTO
9060: IFFALSE 9105
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9062: LD_ADDR_VAR 0 6
9066: PUSH
9067: LD_VAR 0 6
9071: PPUSH
9072: LD_VAR 0 9
9076: PUSH
9077: LD_VAR 0 7
9081: MINUS
9082: PUSH
9083: LD_INT 1
9085: PLUS
9086: PPUSH
9087: LD_VAR 0 9
9091: PUSH
9092: LD_VAR 0 7
9096: ARRAY
9097: PPUSH
9098: CALL_OW 1
9102: ST_TO_ADDR
9103: GO 9059
9105: POP
9106: POP
// end ; tmp := [ ] ;
9107: LD_ADDR_VAR 0 9
9111: PUSH
9112: EMPTY
9113: ST_TO_ADDR
// if mode then
9114: LD_VAR 0 5
9118: IFFALSE 9187
// begin for i = 1 to result do
9120: LD_ADDR_VAR 0 7
9124: PUSH
9125: DOUBLE
9126: LD_INT 1
9128: DEC
9129: ST_TO_ADDR
9130: LD_VAR 0 6
9134: PUSH
9135: FOR_TO
9136: IFFALSE 9175
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9138: LD_ADDR_VAR 0 9
9142: PUSH
9143: LD_VAR 0 9
9147: PPUSH
9148: LD_VAR 0 7
9152: PPUSH
9153: LD_VAR 0 6
9157: PUSH
9158: LD_VAR 0 7
9162: ARRAY
9163: PUSH
9164: LD_INT 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 1
9172: ST_TO_ADDR
9173: GO 9135
9175: POP
9176: POP
// result := tmp ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_VAR 0 9
9186: ST_TO_ADDR
// end ; end ;
9187: LD_VAR 0 6
9191: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9192: LD_INT 0
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
9199: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9200: LD_ADDR_VAR 0 5
9204: PUSH
9205: LD_INT 0
9207: PUSH
9208: LD_INT 0
9210: PUSH
9211: LD_INT 0
9213: PUSH
9214: EMPTY
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if not x or not y then
9222: LD_VAR 0 2
9226: NOT
9227: PUSH
9228: LD_VAR 0 3
9232: NOT
9233: OR
9234: IFFALSE 9238
// exit ;
9236: GO 10888
// if not range then
9238: LD_VAR 0 4
9242: NOT
9243: IFFALSE 9253
// range := 10 ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 10
9252: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: LD_INT 81
9260: PUSH
9261: LD_VAR 0 1
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 92
9272: PUSH
9273: LD_VAR 0 2
9277: PUSH
9278: LD_VAR 0 3
9282: PUSH
9283: LD_VAR 0 4
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 21
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 69
9320: ST_TO_ADDR
// if not tmp then
9321: LD_VAR 0 8
9325: NOT
9326: IFFALSE 9330
// exit ;
9328: GO 10888
// for i in tmp do
9330: LD_ADDR_VAR 0 6
9334: PUSH
9335: LD_VAR 0 8
9339: PUSH
9340: FOR_IN
9341: IFFALSE 10863
// begin points := [ 0 , 0 , 0 ] ;
9343: LD_ADDR_VAR 0 9
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: ST_TO_ADDR
// bpoints := 1 ;
9362: LD_ADDR_VAR 0 10
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9370: LD_VAR 0 6
9374: PPUSH
9375: CALL_OW 247
9379: PUSH
9380: LD_INT 1
9382: DOUBLE
9383: EQUAL
9384: IFTRUE 9388
9386: GO 9966
9388: POP
// begin if GetClass ( i ) = 1 then
9389: LD_VAR 0 6
9393: PPUSH
9394: CALL_OW 257
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9423
// points := [ 10 , 5 , 3 ] ;
9404: LD_ADDR_VAR 0 9
9408: PUSH
9409: LD_INT 10
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9423: LD_VAR 0 6
9427: PPUSH
9428: CALL_OW 257
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 4
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: IN
9447: IFFALSE 9468
// points := [ 3 , 2 , 1 ] ;
9449: LD_ADDR_VAR 0 9
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: LD_INT 2
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9468: LD_VAR 0 6
9472: PPUSH
9473: CALL_OW 257
9477: PUSH
9478: LD_INT 5
9480: EQUAL
9481: IFFALSE 9502
// points := [ 130 , 5 , 2 ] ;
9483: LD_ADDR_VAR 0 9
9487: PUSH
9488: LD_INT 130
9490: PUSH
9491: LD_INT 5
9493: PUSH
9494: LD_INT 2
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9502: LD_VAR 0 6
9506: PPUSH
9507: CALL_OW 257
9511: PUSH
9512: LD_INT 8
9514: EQUAL
9515: IFFALSE 9536
// points := [ 35 , 35 , 30 ] ;
9517: LD_ADDR_VAR 0 9
9521: PUSH
9522: LD_INT 35
9524: PUSH
9525: LD_INT 35
9527: PUSH
9528: LD_INT 30
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9536: LD_VAR 0 6
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 9
9548: EQUAL
9549: IFFALSE 9570
// points := [ 20 , 55 , 40 ] ;
9551: LD_ADDR_VAR 0 9
9555: PUSH
9556: LD_INT 20
9558: PUSH
9559: LD_INT 55
9561: PUSH
9562: LD_INT 40
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9570: LD_VAR 0 6
9574: PPUSH
9575: CALL_OW 257
9579: PUSH
9580: LD_INT 12
9582: PUSH
9583: LD_INT 16
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: IN
9590: IFFALSE 9611
// points := [ 5 , 3 , 2 ] ;
9592: LD_ADDR_VAR 0 9
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9611: LD_VAR 0 6
9615: PPUSH
9616: CALL_OW 257
9620: PUSH
9621: LD_INT 17
9623: EQUAL
9624: IFFALSE 9645
// points := [ 100 , 50 , 75 ] ;
9626: LD_ADDR_VAR 0 9
9630: PUSH
9631: LD_INT 100
9633: PUSH
9634: LD_INT 50
9636: PUSH
9637: LD_INT 75
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9645: LD_VAR 0 6
9649: PPUSH
9650: CALL_OW 257
9654: PUSH
9655: LD_INT 15
9657: EQUAL
9658: IFFALSE 9679
// points := [ 10 , 5 , 3 ] ;
9660: LD_ADDR_VAR 0 9
9664: PUSH
9665: LD_INT 10
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9679: LD_VAR 0 6
9683: PPUSH
9684: CALL_OW 257
9688: PUSH
9689: LD_INT 14
9691: EQUAL
9692: IFFALSE 9713
// points := [ 10 , 0 , 0 ] ;
9694: LD_ADDR_VAR 0 9
9698: PUSH
9699: LD_INT 10
9701: PUSH
9702: LD_INT 0
9704: PUSH
9705: LD_INT 0
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9713: LD_VAR 0 6
9717: PPUSH
9718: CALL_OW 257
9722: PUSH
9723: LD_INT 11
9725: EQUAL
9726: IFFALSE 9747
// points := [ 30 , 10 , 5 ] ;
9728: LD_ADDR_VAR 0 9
9732: PUSH
9733: LD_INT 30
9735: PUSH
9736: LD_INT 10
9738: PUSH
9739: LD_INT 5
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_INT 5
9754: PPUSH
9755: CALL_OW 321
9759: PUSH
9760: LD_INT 2
9762: EQUAL
9763: IFFALSE 9780
// bpoints := bpoints * 1.8 ;
9765: LD_ADDR_VAR 0 10
9769: PUSH
9770: LD_VAR 0 10
9774: PUSH
9775: LD_REAL  1.80000000000000E+0000
9778: MUL
9779: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9780: LD_VAR 0 6
9784: PPUSH
9785: CALL_OW 257
9789: PUSH
9790: LD_INT 1
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: LD_INT 4
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: IN
9808: PUSH
9809: LD_VAR 0 1
9813: PPUSH
9814: LD_INT 51
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 2
9824: EQUAL
9825: AND
9826: IFFALSE 9843
// bpoints := bpoints * 1.2 ;
9828: LD_ADDR_VAR 0 10
9832: PUSH
9833: LD_VAR 0 10
9837: PUSH
9838: LD_REAL  1.20000000000000E+0000
9841: MUL
9842: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 257
9852: PUSH
9853: LD_INT 5
9855: PUSH
9856: LD_INT 7
9858: PUSH
9859: LD_INT 9
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: IN
9867: PUSH
9868: LD_VAR 0 1
9872: PPUSH
9873: LD_INT 52
9875: PPUSH
9876: CALL_OW 321
9880: PUSH
9881: LD_INT 2
9883: EQUAL
9884: AND
9885: IFFALSE 9902
// bpoints := bpoints * 1.5 ;
9887: LD_ADDR_VAR 0 10
9891: PUSH
9892: LD_VAR 0 10
9896: PUSH
9897: LD_REAL  1.50000000000000E+0000
9900: MUL
9901: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9902: LD_VAR 0 1
9906: PPUSH
9907: LD_INT 66
9909: PPUSH
9910: CALL_OW 321
9914: PUSH
9915: LD_INT 2
9917: EQUAL
9918: IFFALSE 9935
// bpoints := bpoints * 1.1 ;
9920: LD_ADDR_VAR 0 10
9924: PUSH
9925: LD_VAR 0 10
9929: PUSH
9930: LD_REAL  1.10000000000000E+0000
9933: MUL
9934: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9935: LD_ADDR_VAR 0 10
9939: PUSH
9940: LD_VAR 0 10
9944: PUSH
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 259
9957: PUSH
9958: LD_REAL  1.15000000000000E+0000
9961: MUL
9962: MUL
9963: ST_TO_ADDR
// end ; unit_vehicle :
9964: GO 10792
9966: LD_INT 2
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 10780
9974: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9975: LD_VAR 0 6
9979: PPUSH
9980: CALL_OW 264
9984: PUSH
9985: LD_INT 2
9987: PUSH
9988: LD_INT 42
9990: PUSH
9991: LD_INT 24
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: IN
9999: IFFALSE 10020
// points := [ 25 , 5 , 3 ] ;
10001: LD_ADDR_VAR 0 9
10005: PUSH
10006: LD_INT 25
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10020: LD_VAR 0 6
10024: PPUSH
10025: CALL_OW 264
10029: PUSH
10030: LD_INT 4
10032: PUSH
10033: LD_INT 43
10035: PUSH
10036: LD_INT 25
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: IN
10044: IFFALSE 10065
// points := [ 40 , 15 , 5 ] ;
10046: LD_ADDR_VAR 0 9
10050: PUSH
10051: LD_INT 40
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 5
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10065: LD_VAR 0 6
10069: PPUSH
10070: CALL_OW 264
10074: PUSH
10075: LD_INT 3
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: IN
10085: IFFALSE 10106
// points := [ 7 , 25 , 8 ] ;
10087: LD_ADDR_VAR 0 9
10091: PUSH
10092: LD_INT 7
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 8
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10106: LD_VAR 0 6
10110: PPUSH
10111: CALL_OW 264
10115: PUSH
10116: LD_INT 5
10118: PUSH
10119: LD_INT 27
10121: PUSH
10122: LD_INT 44
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: IN
10130: IFFALSE 10151
// points := [ 14 , 50 , 16 ] ;
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: LD_INT 14
10139: PUSH
10140: LD_INT 50
10142: PUSH
10143: LD_INT 16
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10151: LD_VAR 0 6
10155: PPUSH
10156: CALL_OW 264
10160: PUSH
10161: LD_INT 6
10163: PUSH
10164: LD_INT 46
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: IN
10171: IFFALSE 10192
// points := [ 32 , 120 , 70 ] ;
10173: LD_ADDR_VAR 0 9
10177: PUSH
10178: LD_INT 32
10180: PUSH
10181: LD_INT 120
10183: PUSH
10184: LD_INT 70
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10192: LD_VAR 0 6
10196: PPUSH
10197: CALL_OW 264
10201: PUSH
10202: LD_INT 7
10204: PUSH
10205: LD_INT 28
10207: PUSH
10208: LD_INT 45
10210: PUSH
10211: LD_INT 92
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: IN
10220: IFFALSE 10241
// points := [ 35 , 20 , 45 ] ;
10222: LD_ADDR_VAR 0 9
10226: PUSH
10227: LD_INT 35
10229: PUSH
10230: LD_INT 20
10232: PUSH
10233: LD_INT 45
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10241: LD_VAR 0 6
10245: PPUSH
10246: CALL_OW 264
10250: PUSH
10251: LD_INT 47
10253: PUSH
10254: EMPTY
10255: LIST
10256: IN
10257: IFFALSE 10278
// points := [ 67 , 45 , 75 ] ;
10259: LD_ADDR_VAR 0 9
10263: PUSH
10264: LD_INT 67
10266: PUSH
10267: LD_INT 45
10269: PUSH
10270: LD_INT 75
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10278: LD_VAR 0 6
10282: PPUSH
10283: CALL_OW 264
10287: PUSH
10288: LD_INT 26
10290: PUSH
10291: EMPTY
10292: LIST
10293: IN
10294: IFFALSE 10315
// points := [ 120 , 30 , 80 ] ;
10296: LD_ADDR_VAR 0 9
10300: PUSH
10301: LD_INT 120
10303: PUSH
10304: LD_INT 30
10306: PUSH
10307: LD_INT 80
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10315: LD_VAR 0 6
10319: PPUSH
10320: CALL_OW 264
10324: PUSH
10325: LD_INT 22
10327: PUSH
10328: EMPTY
10329: LIST
10330: IN
10331: IFFALSE 10352
// points := [ 40 , 1 , 1 ] ;
10333: LD_ADDR_VAR 0 9
10337: PUSH
10338: LD_INT 40
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10352: LD_VAR 0 6
10356: PPUSH
10357: CALL_OW 264
10361: PUSH
10362: LD_INT 29
10364: PUSH
10365: EMPTY
10366: LIST
10367: IN
10368: IFFALSE 10389
// points := [ 70 , 200 , 400 ] ;
10370: LD_ADDR_VAR 0 9
10374: PUSH
10375: LD_INT 70
10377: PUSH
10378: LD_INT 200
10380: PUSH
10381: LD_INT 400
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10389: LD_VAR 0 6
10393: PPUSH
10394: CALL_OW 264
10398: PUSH
10399: LD_INT 14
10401: PUSH
10402: LD_INT 53
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: IN
10409: IFFALSE 10430
// points := [ 40 , 10 , 20 ] ;
10411: LD_ADDR_VAR 0 9
10415: PUSH
10416: LD_INT 40
10418: PUSH
10419: LD_INT 10
10421: PUSH
10422: LD_INT 20
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10430: LD_VAR 0 6
10434: PPUSH
10435: CALL_OW 264
10439: PUSH
10440: LD_INT 9
10442: PUSH
10443: EMPTY
10444: LIST
10445: IN
10446: IFFALSE 10467
// points := [ 5 , 70 , 20 ] ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_INT 5
10455: PUSH
10456: LD_INT 70
10458: PUSH
10459: LD_INT 20
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10467: LD_VAR 0 6
10471: PPUSH
10472: CALL_OW 264
10476: PUSH
10477: LD_INT 10
10479: PUSH
10480: EMPTY
10481: LIST
10482: IN
10483: IFFALSE 10504
// points := [ 35 , 110 , 70 ] ;
10485: LD_ADDR_VAR 0 9
10489: PUSH
10490: LD_INT 35
10492: PUSH
10493: LD_INT 110
10495: PUSH
10496: LD_INT 70
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10504: LD_VAR 0 6
10508: PPUSH
10509: CALL_OW 265
10513: PUSH
10514: LD_INT 25
10516: EQUAL
10517: IFFALSE 10538
// points := [ 80 , 65 , 100 ] ;
10519: LD_ADDR_VAR 0 9
10523: PUSH
10524: LD_INT 80
10526: PUSH
10527: LD_INT 65
10529: PUSH
10530: LD_INT 100
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10538: LD_VAR 0 6
10542: PPUSH
10543: CALL_OW 263
10547: PUSH
10548: LD_INT 1
10550: EQUAL
10551: IFFALSE 10586
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10553: LD_ADDR_VAR 0 10
10557: PUSH
10558: LD_VAR 0 10
10562: PUSH
10563: LD_VAR 0 6
10567: PPUSH
10568: CALL_OW 311
10572: PPUSH
10573: LD_INT 3
10575: PPUSH
10576: CALL_OW 259
10580: PUSH
10581: LD_INT 4
10583: MUL
10584: MUL
10585: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10586: LD_VAR 0 6
10590: PPUSH
10591: CALL_OW 263
10595: PUSH
10596: LD_INT 2
10598: EQUAL
10599: IFFALSE 10650
// begin j := IsControledBy ( i ) ;
10601: LD_ADDR_VAR 0 7
10605: PUSH
10606: LD_VAR 0 6
10610: PPUSH
10611: CALL_OW 312
10615: ST_TO_ADDR
// if j then
10616: LD_VAR 0 7
10620: IFFALSE 10650
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10622: LD_ADDR_VAR 0 10
10626: PUSH
10627: LD_VAR 0 10
10631: PUSH
10632: LD_VAR 0 7
10636: PPUSH
10637: LD_INT 3
10639: PPUSH
10640: CALL_OW 259
10644: PUSH
10645: LD_INT 3
10647: MUL
10648: MUL
10649: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 264
10659: PUSH
10660: LD_INT 5
10662: PUSH
10663: LD_INT 6
10665: PUSH
10666: LD_INT 46
10668: PUSH
10669: LD_INT 44
10671: PUSH
10672: LD_INT 47
10674: PUSH
10675: LD_INT 45
10677: PUSH
10678: LD_INT 28
10680: PUSH
10681: LD_INT 7
10683: PUSH
10684: LD_INT 27
10686: PUSH
10687: LD_INT 29
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: IN
10702: PUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: LD_INT 52
10710: PPUSH
10711: CALL_OW 321
10715: PUSH
10716: LD_INT 2
10718: EQUAL
10719: AND
10720: IFFALSE 10737
// bpoints := bpoints * 1.2 ;
10722: LD_ADDR_VAR 0 10
10726: PUSH
10727: LD_VAR 0 10
10731: PUSH
10732: LD_REAL  1.20000000000000E+0000
10735: MUL
10736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10737: LD_VAR 0 6
10741: PPUSH
10742: CALL_OW 264
10746: PUSH
10747: LD_INT 6
10749: PUSH
10750: LD_INT 46
10752: PUSH
10753: LD_INT 47
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: IN
10761: IFFALSE 10778
// bpoints := bpoints * 1.2 ;
10763: LD_ADDR_VAR 0 10
10767: PUSH
10768: LD_VAR 0 10
10772: PUSH
10773: LD_REAL  1.20000000000000E+0000
10776: MUL
10777: ST_TO_ADDR
// end ; unit_building :
10778: GO 10792
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10791
10788: POP
// ; end ;
10789: GO 10792
10791: POP
// for j = 1 to 3 do
10792: LD_ADDR_VAR 0 7
10796: PUSH
10797: DOUBLE
10798: LD_INT 1
10800: DEC
10801: ST_TO_ADDR
10802: LD_INT 3
10804: PUSH
10805: FOR_TO
10806: IFFALSE 10859
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10808: LD_ADDR_VAR 0 5
10812: PUSH
10813: LD_VAR 0 5
10817: PPUSH
10818: LD_VAR 0 7
10822: PPUSH
10823: LD_VAR 0 5
10827: PUSH
10828: LD_VAR 0 7
10832: ARRAY
10833: PUSH
10834: LD_VAR 0 9
10838: PUSH
10839: LD_VAR 0 7
10843: ARRAY
10844: PUSH
10845: LD_VAR 0 10
10849: MUL
10850: PLUS
10851: PPUSH
10852: CALL_OW 1
10856: ST_TO_ADDR
10857: GO 10805
10859: POP
10860: POP
// end ;
10861: GO 9340
10863: POP
10864: POP
// result := Replace ( result , 4 , tmp ) ;
10865: LD_ADDR_VAR 0 5
10869: PUSH
10870: LD_VAR 0 5
10874: PPUSH
10875: LD_INT 4
10877: PPUSH
10878: LD_VAR 0 8
10882: PPUSH
10883: CALL_OW 1
10887: ST_TO_ADDR
// end ;
10888: LD_VAR 0 5
10892: RET
// export function DangerAtRange ( unit , range ) ; begin
10893: LD_INT 0
10895: PPUSH
// if not unit then
10896: LD_VAR 0 1
10900: NOT
10901: IFFALSE 10905
// exit ;
10903: GO 10950
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10905: LD_ADDR_VAR 0 3
10909: PUSH
10910: LD_VAR 0 1
10914: PPUSH
10915: CALL_OW 255
10919: PPUSH
10920: LD_VAR 0 1
10924: PPUSH
10925: CALL_OW 250
10929: PPUSH
10930: LD_VAR 0 1
10934: PPUSH
10935: CALL_OW 251
10939: PPUSH
10940: LD_VAR 0 2
10944: PPUSH
10945: CALL 9192 0 4
10949: ST_TO_ADDR
// end ;
10950: LD_VAR 0 3
10954: RET
// export function DangerInArea ( side , area ) ; begin
10955: LD_INT 0
10957: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10958: LD_ADDR_VAR 0 3
10962: PUSH
10963: LD_VAR 0 2
10967: PPUSH
10968: LD_INT 81
10970: PUSH
10971: LD_VAR 0 1
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PPUSH
10980: CALL_OW 70
10984: ST_TO_ADDR
// end ;
10985: LD_VAR 0 3
10989: RET
// export function IsExtension ( b ) ; begin
10990: LD_INT 0
10992: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10993: LD_ADDR_VAR 0 2
10997: PUSH
10998: LD_VAR 0 1
11002: PUSH
11003: LD_INT 23
11005: PUSH
11006: LD_INT 20
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_INT 17
11014: PUSH
11015: LD_INT 24
11017: PUSH
11018: LD_INT 21
11020: PUSH
11021: LD_INT 19
11023: PUSH
11024: LD_INT 16
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 18
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: IN
11045: ST_TO_ADDR
// end ;
11046: LD_VAR 0 2
11050: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11051: LD_INT 0
11053: PPUSH
11054: PPUSH
11055: PPUSH
// result := [ ] ;
11056: LD_ADDR_VAR 0 4
11060: PUSH
11061: EMPTY
11062: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11063: LD_ADDR_VAR 0 5
11067: PUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_INT 21
11075: PUSH
11076: LD_INT 3
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 70
11087: ST_TO_ADDR
// if not tmp then
11088: LD_VAR 0 5
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11161
// if checkLink then
11097: LD_VAR 0 3
11101: IFFALSE 11151
// begin for i in tmp do
11103: LD_ADDR_VAR 0 6
11107: PUSH
11108: LD_VAR 0 5
11112: PUSH
11113: FOR_IN
11114: IFFALSE 11149
// if GetBase ( i ) <> base then
11116: LD_VAR 0 6
11120: PPUSH
11121: CALL_OW 274
11125: PUSH
11126: LD_VAR 0 1
11130: NONEQUAL
11131: IFFALSE 11147
// ComLinkToBase ( base , i ) ;
11133: LD_VAR 0 1
11137: PPUSH
11138: LD_VAR 0 6
11142: PPUSH
11143: CALL_OW 169
11147: GO 11113
11149: POP
11150: POP
// end ; result := tmp ;
11151: LD_ADDR_VAR 0 4
11155: PUSH
11156: LD_VAR 0 5
11160: ST_TO_ADDR
// end ;
11161: LD_VAR 0 4
11165: RET
// export function ComComplete ( units , b ) ; var i ; begin
11166: LD_INT 0
11168: PPUSH
11169: PPUSH
// if not units then
11170: LD_VAR 0 1
11174: NOT
11175: IFFALSE 11179
// exit ;
11177: GO 11269
// for i in units do
11179: LD_ADDR_VAR 0 4
11183: PUSH
11184: LD_VAR 0 1
11188: PUSH
11189: FOR_IN
11190: IFFALSE 11267
// if BuildingStatus ( b ) = bs_build then
11192: LD_VAR 0 2
11196: PPUSH
11197: CALL_OW 461
11201: PUSH
11202: LD_INT 1
11204: EQUAL
11205: IFFALSE 11265
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11207: LD_VAR 0 4
11211: PPUSH
11212: LD_STRING h
11214: PUSH
11215: LD_VAR 0 2
11219: PPUSH
11220: CALL_OW 250
11224: PUSH
11225: LD_VAR 0 2
11229: PPUSH
11230: CALL_OW 251
11234: PUSH
11235: LD_VAR 0 2
11239: PUSH
11240: LD_INT 0
11242: PUSH
11243: LD_INT 0
11245: PUSH
11246: LD_INT 0
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: PPUSH
11261: CALL_OW 446
11265: GO 11189
11267: POP
11268: POP
// end ;
11269: LD_VAR 0 3
11273: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11274: LD_INT 0
11276: PPUSH
11277: PPUSH
11278: PPUSH
11279: PPUSH
11280: PPUSH
11281: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11282: LD_VAR 0 1
11286: NOT
11287: PUSH
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 263
11297: PUSH
11298: LD_INT 2
11300: NONEQUAL
11301: OR
11302: IFFALSE 11306
// exit ;
11304: GO 11622
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11306: LD_ADDR_VAR 0 6
11310: PUSH
11311: LD_INT 22
11313: PUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 255
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 36
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 34
11343: PUSH
11344: LD_INT 31
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: ST_TO_ADDR
// if not tmp then
11365: LD_VAR 0 6
11369: NOT
11370: IFFALSE 11374
// exit ;
11372: GO 11622
// result := [ ] ;
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: EMPTY
11380: ST_TO_ADDR
// for i in tmp do
11381: LD_ADDR_VAR 0 3
11385: PUSH
11386: LD_VAR 0 6
11390: PUSH
11391: FOR_IN
11392: IFFALSE 11463
// begin t := UnitsInside ( i ) ;
11394: LD_ADDR_VAR 0 4
11398: PUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: CALL_OW 313
11408: ST_TO_ADDR
// if t then
11409: LD_VAR 0 4
11413: IFFALSE 11461
// for j in t do
11415: LD_ADDR_VAR 0 7
11419: PUSH
11420: LD_VAR 0 4
11424: PUSH
11425: FOR_IN
11426: IFFALSE 11459
// result := Replace ( result , result + 1 , j ) ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_VAR 0 2
11437: PPUSH
11438: LD_VAR 0 2
11442: PUSH
11443: LD_INT 1
11445: PLUS
11446: PPUSH
11447: LD_VAR 0 7
11451: PPUSH
11452: CALL_OW 1
11456: ST_TO_ADDR
11457: GO 11425
11459: POP
11460: POP
// end ;
11461: GO 11391
11463: POP
11464: POP
// if not result then
11465: LD_VAR 0 2
11469: NOT
11470: IFFALSE 11474
// exit ;
11472: GO 11622
// mech := result [ 1 ] ;
11474: LD_ADDR_VAR 0 5
11478: PUSH
11479: LD_VAR 0 2
11483: PUSH
11484: LD_INT 1
11486: ARRAY
11487: ST_TO_ADDR
// if result > 1 then
11488: LD_VAR 0 2
11492: PUSH
11493: LD_INT 1
11495: GREATER
11496: IFFALSE 11608
// begin for i = 2 to result do
11498: LD_ADDR_VAR 0 3
11502: PUSH
11503: DOUBLE
11504: LD_INT 2
11506: DEC
11507: ST_TO_ADDR
11508: LD_VAR 0 2
11512: PUSH
11513: FOR_TO
11514: IFFALSE 11606
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11516: LD_ADDR_VAR 0 4
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: LD_VAR 0 3
11530: ARRAY
11531: PPUSH
11532: LD_INT 3
11534: PPUSH
11535: CALL_OW 259
11539: PUSH
11540: LD_VAR 0 2
11544: PUSH
11545: LD_VAR 0 3
11549: ARRAY
11550: PPUSH
11551: CALL_OW 432
11555: MINUS
11556: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11557: LD_VAR 0 4
11561: PUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: LD_INT 3
11569: PPUSH
11570: CALL_OW 259
11574: PUSH
11575: LD_VAR 0 5
11579: PPUSH
11580: CALL_OW 432
11584: MINUS
11585: GREATEREQUAL
11586: IFFALSE 11604
// mech := result [ i ] ;
11588: LD_ADDR_VAR 0 5
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 3
11602: ARRAY
11603: ST_TO_ADDR
// end ;
11604: GO 11513
11606: POP
11607: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11608: LD_VAR 0 1
11612: PPUSH
11613: LD_VAR 0 5
11617: PPUSH
11618: CALL_OW 135
// end ;
11622: LD_VAR 0 2
11626: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
// result := [ ] ;
11642: LD_ADDR_VAR 0 7
11646: PUSH
11647: EMPTY
11648: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11649: LD_VAR 0 1
11653: PPUSH
11654: CALL_OW 266
11658: PUSH
11659: LD_INT 0
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: IN
11669: NOT
11670: IFFALSE 11674
// exit ;
11672: GO 13308
// if name then
11674: LD_VAR 0 3
11678: IFFALSE 11694
// SetBName ( base_dep , name ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_VAR 0 3
11689: PPUSH
11690: CALL_OW 500
// base := GetBase ( base_dep ) ;
11694: LD_ADDR_VAR 0 15
11698: PUSH
11699: LD_VAR 0 1
11703: PPUSH
11704: CALL_OW 274
11708: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11709: LD_ADDR_VAR 0 16
11713: PUSH
11714: LD_VAR 0 1
11718: PPUSH
11719: CALL_OW 255
11723: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11724: LD_ADDR_VAR 0 17
11728: PUSH
11729: LD_VAR 0 1
11733: PPUSH
11734: CALL_OW 248
11738: ST_TO_ADDR
// if sources then
11739: LD_VAR 0 5
11743: IFFALSE 11790
// for i = 1 to 3 do
11745: LD_ADDR_VAR 0 8
11749: PUSH
11750: DOUBLE
11751: LD_INT 1
11753: DEC
11754: ST_TO_ADDR
11755: LD_INT 3
11757: PUSH
11758: FOR_TO
11759: IFFALSE 11788
// AddResourceType ( base , i , sources [ i ] ) ;
11761: LD_VAR 0 15
11765: PPUSH
11766: LD_VAR 0 8
11770: PPUSH
11771: LD_VAR 0 5
11775: PUSH
11776: LD_VAR 0 8
11780: ARRAY
11781: PPUSH
11782: CALL_OW 276
11786: GO 11758
11788: POP
11789: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11790: LD_ADDR_VAR 0 18
11794: PUSH
11795: LD_VAR 0 15
11799: PPUSH
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL 11051 0 3
11812: ST_TO_ADDR
// InitHc ;
11813: CALL_OW 19
// InitUc ;
11817: CALL_OW 18
// uc_side := side ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_VAR 0 16
11830: ST_TO_ADDR
// uc_nation := nation ;
11831: LD_ADDR_OWVAR 21
11835: PUSH
11836: LD_VAR 0 17
11840: ST_TO_ADDR
// if buildings then
11841: LD_VAR 0 18
11845: IFFALSE 13167
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11847: LD_ADDR_VAR 0 19
11851: PUSH
11852: LD_VAR 0 18
11856: PPUSH
11857: LD_INT 2
11859: PUSH
11860: LD_INT 30
11862: PUSH
11863: LD_INT 29
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 30
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 72
11889: ST_TO_ADDR
// if tmp then
11890: LD_VAR 0 19
11894: IFFALSE 11942
// for i in tmp do
11896: LD_ADDR_VAR 0 8
11900: PUSH
11901: LD_VAR 0 19
11905: PUSH
11906: FOR_IN
11907: IFFALSE 11940
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11909: LD_VAR 0 8
11913: PPUSH
11914: CALL_OW 250
11918: PPUSH
11919: LD_VAR 0 8
11923: PPUSH
11924: CALL_OW 251
11928: PPUSH
11929: LD_VAR 0 16
11933: PPUSH
11934: CALL_OW 441
11938: GO 11906
11940: POP
11941: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11942: LD_VAR 0 18
11946: PPUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 30
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 30
11962: PUSH
11963: LD_INT 33
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 72
11979: IFFALSE 12067
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11981: LD_ADDR_VAR 0 8
11985: PUSH
11986: LD_VAR 0 18
11990: PPUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 32
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 72
12023: PUSH
12024: FOR_IN
12025: IFFALSE 12065
// begin if not GetBWeapon ( i ) then
12027: LD_VAR 0 8
12031: PPUSH
12032: CALL_OW 269
12036: NOT
12037: IFFALSE 12063
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12039: LD_VAR 0 8
12043: PPUSH
12044: LD_VAR 0 8
12048: PPUSH
12049: LD_VAR 0 2
12053: PPUSH
12054: CALL 13313 0 2
12058: PPUSH
12059: CALL_OW 431
// end ;
12063: GO 12024
12065: POP
12066: POP
// end ; for i = 1 to personel do
12067: LD_ADDR_VAR 0 8
12071: PUSH
12072: DOUBLE
12073: LD_INT 1
12075: DEC
12076: ST_TO_ADDR
12077: LD_VAR 0 6
12081: PUSH
12082: FOR_TO
12083: IFFALSE 13147
// begin if i > 4 then
12085: LD_VAR 0 8
12089: PUSH
12090: LD_INT 4
12092: GREATER
12093: IFFALSE 12097
// break ;
12095: GO 13147
// case i of 1 :
12097: LD_VAR 0 8
12101: PUSH
12102: LD_INT 1
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12190
12110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12111: LD_ADDR_VAR 0 12
12115: PUSH
12116: LD_VAR 0 18
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 16
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 58
12135: PUSH
12136: EMPTY
12137: LIST
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: LD_INT 30
12144: PUSH
12145: LD_INT 32
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 30
12154: PUSH
12155: LD_INT 4
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 5
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: PPUSH
12183: CALL_OW 72
12187: ST_TO_ADDR
12188: GO 12412
12190: LD_INT 2
12192: DOUBLE
12193: EQUAL
12194: IFTRUE 12198
12196: GO 12260
12198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12199: LD_ADDR_VAR 0 12
12203: PUSH
12204: LD_VAR 0 18
12208: PPUSH
12209: LD_INT 22
12211: PUSH
12212: LD_VAR 0 16
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 0
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 30
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 72
12257: ST_TO_ADDR
12258: GO 12412
12260: LD_INT 3
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12330
12268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12269: LD_ADDR_VAR 0 12
12273: PUSH
12274: LD_VAR 0 18
12278: PPUSH
12279: LD_INT 22
12281: PUSH
12282: LD_VAR 0 16
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 30
12306: PUSH
12307: LD_INT 3
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: ST_TO_ADDR
12328: GO 12412
12330: LD_INT 4
12332: DOUBLE
12333: EQUAL
12334: IFTRUE 12338
12336: GO 12411
12338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12339: LD_ADDR_VAR 0 12
12343: PUSH
12344: LD_VAR 0 18
12348: PPUSH
12349: LD_INT 22
12351: PUSH
12352: LD_VAR 0 16
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 6
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 30
12376: PUSH
12377: LD_INT 7
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 8
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 72
12408: ST_TO_ADDR
12409: GO 12412
12411: POP
// if i = 1 then
12412: LD_VAR 0 8
12416: PUSH
12417: LD_INT 1
12419: EQUAL
12420: IFFALSE 12531
// begin tmp := [ ] ;
12422: LD_ADDR_VAR 0 19
12426: PUSH
12427: EMPTY
12428: ST_TO_ADDR
// for j in f do
12429: LD_ADDR_VAR 0 9
12433: PUSH
12434: LD_VAR 0 12
12438: PUSH
12439: FOR_IN
12440: IFFALSE 12513
// if GetBType ( j ) = b_bunker then
12442: LD_VAR 0 9
12446: PPUSH
12447: CALL_OW 266
12451: PUSH
12452: LD_INT 32
12454: EQUAL
12455: IFFALSE 12482
// tmp := Insert ( tmp , 1 , j ) else
12457: LD_ADDR_VAR 0 19
12461: PUSH
12462: LD_VAR 0 19
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: LD_VAR 0 9
12474: PPUSH
12475: CALL_OW 2
12479: ST_TO_ADDR
12480: GO 12511
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12482: LD_ADDR_VAR 0 19
12486: PUSH
12487: LD_VAR 0 19
12491: PPUSH
12492: LD_VAR 0 19
12496: PUSH
12497: LD_INT 1
12499: PLUS
12500: PPUSH
12501: LD_VAR 0 9
12505: PPUSH
12506: CALL_OW 2
12510: ST_TO_ADDR
12511: GO 12439
12513: POP
12514: POP
// if tmp then
12515: LD_VAR 0 19
12519: IFFALSE 12531
// f := tmp ;
12521: LD_ADDR_VAR 0 12
12525: PUSH
12526: LD_VAR 0 19
12530: ST_TO_ADDR
// end ; x := personel [ i ] ;
12531: LD_ADDR_VAR 0 13
12535: PUSH
12536: LD_VAR 0 6
12540: PUSH
12541: LD_VAR 0 8
12545: ARRAY
12546: ST_TO_ADDR
// if x = - 1 then
12547: LD_VAR 0 13
12551: PUSH
12552: LD_INT 1
12554: NEG
12555: EQUAL
12556: IFFALSE 12765
// begin for j in f do
12558: LD_ADDR_VAR 0 9
12562: PUSH
12563: LD_VAR 0 12
12567: PUSH
12568: FOR_IN
12569: IFFALSE 12761
// repeat InitHc ;
12571: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12575: LD_VAR 0 9
12579: PPUSH
12580: CALL_OW 266
12584: PUSH
12585: LD_INT 5
12587: EQUAL
12588: IFFALSE 12658
// begin if UnitsInside ( j ) < 3 then
12590: LD_VAR 0 9
12594: PPUSH
12595: CALL_OW 313
12599: PUSH
12600: LD_INT 3
12602: LESS
12603: IFFALSE 12639
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12605: LD_INT 0
12607: PPUSH
12608: LD_INT 5
12610: PUSH
12611: LD_INT 8
12613: PUSH
12614: LD_INT 9
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: LD_VAR 0 17
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 4
12632: PPUSH
12633: CALL_OW 380
12637: GO 12656
// PrepareHuman ( false , i , skill ) ;
12639: LD_INT 0
12641: PPUSH
12642: LD_VAR 0 8
12646: PPUSH
12647: LD_VAR 0 4
12651: PPUSH
12652: CALL_OW 380
// end else
12656: GO 12675
// PrepareHuman ( false , i , skill ) ;
12658: LD_INT 0
12660: PPUSH
12661: LD_VAR 0 8
12665: PPUSH
12666: LD_VAR 0 4
12670: PPUSH
12671: CALL_OW 380
// un := CreateHuman ;
12675: LD_ADDR_VAR 0 14
12679: PUSH
12680: CALL_OW 44
12684: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12685: LD_ADDR_VAR 0 7
12689: PUSH
12690: LD_VAR 0 7
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: LD_VAR 0 14
12702: PPUSH
12703: CALL_OW 2
12707: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12708: LD_VAR 0 14
12712: PPUSH
12713: LD_VAR 0 9
12717: PPUSH
12718: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12722: LD_VAR 0 9
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: LD_INT 6
12734: EQUAL
12735: PUSH
12736: LD_VAR 0 9
12740: PPUSH
12741: CALL_OW 266
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 31
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: IN
12756: OR
12757: IFFALSE 12571
12759: GO 12568
12761: POP
12762: POP
// end else
12763: GO 13145
// for j = 1 to x do
12765: LD_ADDR_VAR 0 9
12769: PUSH
12770: DOUBLE
12771: LD_INT 1
12773: DEC
12774: ST_TO_ADDR
12775: LD_VAR 0 13
12779: PUSH
12780: FOR_TO
12781: IFFALSE 13143
// begin InitHc ;
12783: CALL_OW 19
// if not f then
12787: LD_VAR 0 12
12791: NOT
12792: IFFALSE 12881
// begin PrepareHuman ( false , i , skill ) ;
12794: LD_INT 0
12796: PPUSH
12797: LD_VAR 0 8
12801: PPUSH
12802: LD_VAR 0 4
12806: PPUSH
12807: CALL_OW 380
// un := CreateHuman ;
12811: LD_ADDR_VAR 0 14
12815: PUSH
12816: CALL_OW 44
12820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12821: LD_ADDR_VAR 0 7
12825: PUSH
12826: LD_VAR 0 7
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: LD_VAR 0 14
12838: PPUSH
12839: CALL_OW 2
12843: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12844: LD_VAR 0 14
12848: PPUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 250
12858: PPUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 251
12868: PPUSH
12869: LD_INT 10
12871: PPUSH
12872: LD_INT 0
12874: PPUSH
12875: CALL_OW 50
// continue ;
12879: GO 12780
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12881: LD_VAR 0 12
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: CALL_OW 313
12894: PUSH
12895: LD_VAR 0 12
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PPUSH
12904: CALL_OW 266
12908: PUSH
12909: LD_INT 32
12911: PUSH
12912: LD_INT 31
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: IN
12919: AND
12920: PUSH
12921: LD_VAR 0 12
12925: PUSH
12926: LD_INT 1
12928: ARRAY
12929: PPUSH
12930: CALL_OW 313
12934: PUSH
12935: LD_INT 6
12937: EQUAL
12938: OR
12939: IFFALSE 12959
// f := Delete ( f , 1 ) ;
12941: LD_ADDR_VAR 0 12
12945: PUSH
12946: LD_VAR 0 12
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 3
12958: ST_TO_ADDR
// if not f then
12959: LD_VAR 0 12
12963: NOT
12964: IFFALSE 12982
// begin x := x + 2 ;
12966: LD_ADDR_VAR 0 13
12970: PUSH
12971: LD_VAR 0 13
12975: PUSH
12976: LD_INT 2
12978: PLUS
12979: ST_TO_ADDR
// continue ;
12980: GO 12780
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12982: LD_VAR 0 12
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: PPUSH
12991: CALL_OW 266
12995: PUSH
12996: LD_INT 5
12998: EQUAL
12999: IFFALSE 13073
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13001: LD_VAR 0 12
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: CALL_OW 313
13014: PUSH
13015: LD_INT 3
13017: LESS
13018: IFFALSE 13054
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13020: LD_INT 0
13022: PPUSH
13023: LD_INT 5
13025: PUSH
13026: LD_INT 8
13028: PUSH
13029: LD_INT 9
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_VAR 0 17
13041: ARRAY
13042: PPUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: CALL_OW 380
13052: GO 13071
// PrepareHuman ( false , i , skill ) ;
13054: LD_INT 0
13056: PPUSH
13057: LD_VAR 0 8
13061: PPUSH
13062: LD_VAR 0 4
13066: PPUSH
13067: CALL_OW 380
// end else
13071: GO 13090
// PrepareHuman ( false , i , skill ) ;
13073: LD_INT 0
13075: PPUSH
13076: LD_VAR 0 8
13080: PPUSH
13081: LD_VAR 0 4
13085: PPUSH
13086: CALL_OW 380
// un := CreateHuman ;
13090: LD_ADDR_VAR 0 14
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13100: LD_ADDR_VAR 0 7
13104: PUSH
13105: LD_VAR 0 7
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: LD_VAR 0 14
13117: PPUSH
13118: CALL_OW 2
13122: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13123: LD_VAR 0 14
13127: PPUSH
13128: LD_VAR 0 12
13132: PUSH
13133: LD_INT 1
13135: ARRAY
13136: PPUSH
13137: CALL_OW 52
// end ;
13141: GO 12780
13143: POP
13144: POP
// end ;
13145: GO 12082
13147: POP
13148: POP
// result := result ^ buildings ;
13149: LD_ADDR_VAR 0 7
13153: PUSH
13154: LD_VAR 0 7
13158: PUSH
13159: LD_VAR 0 18
13163: ADD
13164: ST_TO_ADDR
// end else
13165: GO 13308
// begin for i = 1 to personel do
13167: LD_ADDR_VAR 0 8
13171: PUSH
13172: DOUBLE
13173: LD_INT 1
13175: DEC
13176: ST_TO_ADDR
13177: LD_VAR 0 6
13181: PUSH
13182: FOR_TO
13183: IFFALSE 13306
// begin if i > 4 then
13185: LD_VAR 0 8
13189: PUSH
13190: LD_INT 4
13192: GREATER
13193: IFFALSE 13197
// break ;
13195: GO 13306
// x := personel [ i ] ;
13197: LD_ADDR_VAR 0 13
13201: PUSH
13202: LD_VAR 0 6
13206: PUSH
13207: LD_VAR 0 8
13211: ARRAY
13212: ST_TO_ADDR
// if x = - 1 then
13213: LD_VAR 0 13
13217: PUSH
13218: LD_INT 1
13220: NEG
13221: EQUAL
13222: IFFALSE 13226
// continue ;
13224: GO 13182
// PrepareHuman ( false , i , skill ) ;
13226: LD_INT 0
13228: PPUSH
13229: LD_VAR 0 8
13233: PPUSH
13234: LD_VAR 0 4
13238: PPUSH
13239: CALL_OW 380
// un := CreateHuman ;
13243: LD_ADDR_VAR 0 14
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13253: LD_VAR 0 14
13257: PPUSH
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 250
13267: PPUSH
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 251
13277: PPUSH
13278: LD_INT 10
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 50
// result := result ^ un ;
13288: LD_ADDR_VAR 0 7
13292: PUSH
13293: LD_VAR 0 7
13297: PUSH
13298: LD_VAR 0 14
13302: ADD
13303: ST_TO_ADDR
// end ;
13304: GO 13182
13306: POP
13307: POP
// end ; end ;
13308: LD_VAR 0 7
13312: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13313: LD_INT 0
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
// result := false ;
13331: LD_ADDR_VAR 0 3
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13339: LD_VAR 0 1
13343: NOT
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 266
13354: PUSH
13355: LD_INT 32
13357: PUSH
13358: LD_INT 33
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: IN
13365: NOT
13366: OR
13367: IFFALSE 13371
// exit ;
13369: GO 14480
// nat := GetNation ( tower ) ;
13371: LD_ADDR_VAR 0 12
13375: PUSH
13376: LD_VAR 0 1
13380: PPUSH
13381: CALL_OW 248
13385: ST_TO_ADDR
// side := GetSide ( tower ) ;
13386: LD_ADDR_VAR 0 16
13390: PUSH
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 255
13400: ST_TO_ADDR
// x := GetX ( tower ) ;
13401: LD_ADDR_VAR 0 10
13405: PUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 250
13415: ST_TO_ADDR
// y := GetY ( tower ) ;
13416: LD_ADDR_VAR 0 11
13420: PUSH
13421: LD_VAR 0 1
13425: PPUSH
13426: CALL_OW 251
13430: ST_TO_ADDR
// if not x or not y then
13431: LD_VAR 0 10
13435: NOT
13436: PUSH
13437: LD_VAR 0 11
13441: NOT
13442: OR
13443: IFFALSE 13447
// exit ;
13445: GO 14480
// weapon := 0 ;
13447: LD_ADDR_VAR 0 18
13451: PUSH
13452: LD_INT 0
13454: ST_TO_ADDR
// fac_list := [ ] ;
13455: LD_ADDR_VAR 0 17
13459: PUSH
13460: EMPTY
13461: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13462: LD_ADDR_VAR 0 6
13466: PUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 274
13476: PPUSH
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_INT 0
13484: PPUSH
13485: CALL 11051 0 3
13489: PPUSH
13490: LD_INT 30
13492: PUSH
13493: LD_INT 3
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PPUSH
13500: CALL_OW 72
13504: ST_TO_ADDR
// if not factories then
13505: LD_VAR 0 6
13509: NOT
13510: IFFALSE 13514
// exit ;
13512: GO 14480
// for i in factories do
13514: LD_ADDR_VAR 0 8
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: FOR_IN
13525: IFFALSE 13550
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13527: LD_ADDR_VAR 0 17
13531: PUSH
13532: LD_VAR 0 17
13536: PUSH
13537: LD_VAR 0 8
13541: PPUSH
13542: CALL_OW 478
13546: UNION
13547: ST_TO_ADDR
13548: GO 13524
13550: POP
13551: POP
// if not fac_list then
13552: LD_VAR 0 17
13556: NOT
13557: IFFALSE 13561
// exit ;
13559: GO 14480
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13561: LD_ADDR_VAR 0 5
13565: PUSH
13566: LD_INT 4
13568: PUSH
13569: LD_INT 5
13571: PUSH
13572: LD_INT 9
13574: PUSH
13575: LD_INT 10
13577: PUSH
13578: LD_INT 6
13580: PUSH
13581: LD_INT 7
13583: PUSH
13584: LD_INT 11
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 27
13598: PUSH
13599: LD_INT 28
13601: PUSH
13602: LD_INT 26
13604: PUSH
13605: LD_INT 30
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 43
13616: PUSH
13617: LD_INT 44
13619: PUSH
13620: LD_INT 46
13622: PUSH
13623: LD_INT 45
13625: PUSH
13626: LD_INT 47
13628: PUSH
13629: LD_INT 49
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_VAR 0 12
13649: ARRAY
13650: ST_TO_ADDR
// list := list isect fac_list ;
13651: LD_ADDR_VAR 0 5
13655: PUSH
13656: LD_VAR 0 5
13660: PUSH
13661: LD_VAR 0 17
13665: ISECT
13666: ST_TO_ADDR
// if not list then
13667: LD_VAR 0 5
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 14480
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13676: LD_VAR 0 12
13680: PUSH
13681: LD_INT 3
13683: EQUAL
13684: PUSH
13685: LD_INT 49
13687: PUSH
13688: LD_VAR 0 5
13692: IN
13693: AND
13694: PUSH
13695: LD_INT 31
13697: PPUSH
13698: LD_VAR 0 16
13702: PPUSH
13703: CALL_OW 321
13707: PUSH
13708: LD_INT 2
13710: EQUAL
13711: AND
13712: IFFALSE 13772
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13714: LD_INT 22
13716: PUSH
13717: LD_VAR 0 16
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 35
13728: PUSH
13729: LD_INT 49
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 91
13738: PUSH
13739: LD_VAR 0 1
13743: PUSH
13744: LD_INT 10
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 69
13761: NOT
13762: IFFALSE 13772
// weapon := ru_time_lapser ;
13764: LD_ADDR_VAR 0 18
13768: PUSH
13769: LD_INT 49
13771: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13772: LD_VAR 0 12
13776: PUSH
13777: LD_INT 1
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: IN
13787: PUSH
13788: LD_INT 11
13790: PUSH
13791: LD_VAR 0 5
13795: IN
13796: PUSH
13797: LD_INT 30
13799: PUSH
13800: LD_VAR 0 5
13804: IN
13805: OR
13806: AND
13807: PUSH
13808: LD_INT 6
13810: PPUSH
13811: LD_VAR 0 16
13815: PPUSH
13816: CALL_OW 321
13820: PUSH
13821: LD_INT 2
13823: EQUAL
13824: AND
13825: IFFALSE 13990
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13827: LD_INT 22
13829: PUSH
13830: LD_VAR 0 16
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 2
13841: PUSH
13842: LD_INT 35
13844: PUSH
13845: LD_INT 11
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 35
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 91
13869: PUSH
13870: LD_VAR 0 1
13874: PUSH
13875: LD_INT 18
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 69
13892: NOT
13893: PUSH
13894: LD_INT 22
13896: PUSH
13897: LD_VAR 0 16
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: LD_INT 30
13911: PUSH
13912: LD_INT 32
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 30
13921: PUSH
13922: LD_INT 33
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 91
13936: PUSH
13937: LD_VAR 0 1
13941: PUSH
13942: LD_INT 12
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: PPUSH
13958: CALL_OW 69
13962: PUSH
13963: LD_INT 2
13965: GREATER
13966: AND
13967: IFFALSE 13990
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13969: LD_ADDR_VAR 0 18
13973: PUSH
13974: LD_INT 11
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_VAR 0 12
13988: ARRAY
13989: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13990: LD_VAR 0 18
13994: NOT
13995: PUSH
13996: LD_INT 40
13998: PPUSH
13999: LD_VAR 0 16
14003: PPUSH
14004: CALL_OW 321
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_INT 7
14016: PUSH
14017: LD_VAR 0 5
14021: IN
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_VAR 0 5
14030: IN
14031: OR
14032: PUSH
14033: LD_INT 45
14035: PUSH
14036: LD_VAR 0 5
14040: IN
14041: OR
14042: AND
14043: IFFALSE 14297
// begin hex := GetHexInfo ( x , y ) ;
14045: LD_ADDR_VAR 0 4
14049: PUSH
14050: LD_VAR 0 10
14054: PPUSH
14055: LD_VAR 0 11
14059: PPUSH
14060: CALL_OW 546
14064: ST_TO_ADDR
// if hex [ 1 ] then
14065: LD_VAR 0 4
14069: PUSH
14070: LD_INT 1
14072: ARRAY
14073: IFFALSE 14077
// exit ;
14075: GO 14480
// height := hex [ 2 ] ;
14077: LD_ADDR_VAR 0 15
14081: PUSH
14082: LD_VAR 0 4
14086: PUSH
14087: LD_INT 2
14089: ARRAY
14090: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14091: LD_ADDR_VAR 0 14
14095: PUSH
14096: LD_INT 0
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 5
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: ST_TO_ADDR
// for i in tmp do
14114: LD_ADDR_VAR 0 8
14118: PUSH
14119: LD_VAR 0 14
14123: PUSH
14124: FOR_IN
14125: IFFALSE 14295
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14127: LD_ADDR_VAR 0 9
14131: PUSH
14132: LD_VAR 0 10
14136: PPUSH
14137: LD_VAR 0 8
14141: PPUSH
14142: LD_INT 5
14144: PPUSH
14145: CALL_OW 272
14149: PUSH
14150: LD_VAR 0 11
14154: PPUSH
14155: LD_VAR 0 8
14159: PPUSH
14160: LD_INT 5
14162: PPUSH
14163: CALL_OW 273
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14172: LD_VAR 0 9
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PPUSH
14181: LD_VAR 0 9
14185: PUSH
14186: LD_INT 2
14188: ARRAY
14189: PPUSH
14190: CALL_OW 488
14194: IFFALSE 14293
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14196: LD_ADDR_VAR 0 4
14200: PUSH
14201: LD_VAR 0 9
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PPUSH
14210: LD_VAR 0 9
14214: PUSH
14215: LD_INT 2
14217: ARRAY
14218: PPUSH
14219: CALL_OW 546
14223: ST_TO_ADDR
// if hex [ 1 ] then
14224: LD_VAR 0 4
14228: PUSH
14229: LD_INT 1
14231: ARRAY
14232: IFFALSE 14236
// continue ;
14234: GO 14124
// h := hex [ 2 ] ;
14236: LD_ADDR_VAR 0 13
14240: PUSH
14241: LD_VAR 0 4
14245: PUSH
14246: LD_INT 2
14248: ARRAY
14249: ST_TO_ADDR
// if h + 7 < height then
14250: LD_VAR 0 13
14254: PUSH
14255: LD_INT 7
14257: PLUS
14258: PUSH
14259: LD_VAR 0 15
14263: LESS
14264: IFFALSE 14293
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14266: LD_ADDR_VAR 0 18
14270: PUSH
14271: LD_INT 7
14273: PUSH
14274: LD_INT 28
14276: PUSH
14277: LD_INT 45
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: LD_VAR 0 12
14289: ARRAY
14290: ST_TO_ADDR
// break ;
14291: GO 14295
// end ; end ; end ;
14293: GO 14124
14295: POP
14296: POP
// end ; if not weapon then
14297: LD_VAR 0 18
14301: NOT
14302: IFFALSE 14362
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: LD_VAR 0 5
14313: PUSH
14314: LD_INT 11
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 49
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: DIFF
14328: ST_TO_ADDR
// if not list then
14329: LD_VAR 0 5
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14480
// weapon := list [ rand ( 1 , list ) ] ;
14338: LD_ADDR_VAR 0 18
14342: PUSH
14343: LD_VAR 0 5
14347: PUSH
14348: LD_INT 1
14350: PPUSH
14351: LD_VAR 0 5
14355: PPUSH
14356: CALL_OW 12
14360: ARRAY
14361: ST_TO_ADDR
// end ; if weapon then
14362: LD_VAR 0 18
14366: IFFALSE 14480
// begin tmp := CostOfWeapon ( weapon ) ;
14368: LD_ADDR_VAR 0 14
14372: PUSH
14373: LD_VAR 0 18
14377: PPUSH
14378: CALL_OW 451
14382: ST_TO_ADDR
// j := GetBase ( tower ) ;
14383: LD_ADDR_VAR 0 9
14387: PUSH
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 274
14397: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14398: LD_VAR 0 9
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 275
14410: PUSH
14411: LD_VAR 0 14
14415: PUSH
14416: LD_INT 1
14418: ARRAY
14419: GREATEREQUAL
14420: PUSH
14421: LD_VAR 0 9
14425: PPUSH
14426: LD_INT 2
14428: PPUSH
14429: CALL_OW 275
14433: PUSH
14434: LD_VAR 0 14
14438: PUSH
14439: LD_INT 2
14441: ARRAY
14442: GREATEREQUAL
14443: AND
14444: PUSH
14445: LD_VAR 0 9
14449: PPUSH
14450: LD_INT 3
14452: PPUSH
14453: CALL_OW 275
14457: PUSH
14458: LD_VAR 0 14
14462: PUSH
14463: LD_INT 3
14465: ARRAY
14466: GREATEREQUAL
14467: AND
14468: IFFALSE 14480
// result := weapon ;
14470: LD_ADDR_VAR 0 3
14474: PUSH
14475: LD_VAR 0 18
14479: ST_TO_ADDR
// end ; end ;
14480: LD_VAR 0 3
14484: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
// result := true ;
14489: LD_ADDR_VAR 0 3
14493: PUSH
14494: LD_INT 1
14496: ST_TO_ADDR
// if array1 = array2 then
14497: LD_VAR 0 1
14501: PUSH
14502: LD_VAR 0 2
14506: EQUAL
14507: IFFALSE 14567
// begin for i = 1 to array1 do
14509: LD_ADDR_VAR 0 4
14513: PUSH
14514: DOUBLE
14515: LD_INT 1
14517: DEC
14518: ST_TO_ADDR
14519: LD_VAR 0 1
14523: PUSH
14524: FOR_TO
14525: IFFALSE 14563
// if array1 [ i ] <> array2 [ i ] then
14527: LD_VAR 0 1
14531: PUSH
14532: LD_VAR 0 4
14536: ARRAY
14537: PUSH
14538: LD_VAR 0 2
14542: PUSH
14543: LD_VAR 0 4
14547: ARRAY
14548: NONEQUAL
14549: IFFALSE 14561
// begin result := false ;
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// break ;
14559: GO 14563
// end ;
14561: GO 14524
14563: POP
14564: POP
// end else
14565: GO 14575
// result := false ;
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// end ;
14575: LD_VAR 0 3
14579: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// if not array1 or not array2 then
14584: LD_VAR 0 1
14588: NOT
14589: PUSH
14590: LD_VAR 0 2
14594: NOT
14595: OR
14596: IFFALSE 14600
// exit ;
14598: GO 14664
// result := true ;
14600: LD_ADDR_VAR 0 3
14604: PUSH
14605: LD_INT 1
14607: ST_TO_ADDR
// for i = 1 to array1 do
14608: LD_ADDR_VAR 0 4
14612: PUSH
14613: DOUBLE
14614: LD_INT 1
14616: DEC
14617: ST_TO_ADDR
14618: LD_VAR 0 1
14622: PUSH
14623: FOR_TO
14624: IFFALSE 14662
// if array1 [ i ] <> array2 [ i ] then
14626: LD_VAR 0 1
14630: PUSH
14631: LD_VAR 0 4
14635: ARRAY
14636: PUSH
14637: LD_VAR 0 2
14641: PUSH
14642: LD_VAR 0 4
14646: ARRAY
14647: NONEQUAL
14648: IFFALSE 14660
// begin result := false ;
14650: LD_ADDR_VAR 0 3
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// break ;
14658: GO 14662
// end ;
14660: GO 14623
14662: POP
14663: POP
// end ;
14664: LD_VAR 0 3
14668: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14669: LD_INT 0
14671: PPUSH
14672: PPUSH
14673: PPUSH
// pom := GetBase ( fac ) ;
14674: LD_ADDR_VAR 0 5
14678: PUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 274
14688: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14689: LD_ADDR_VAR 0 4
14693: PUSH
14694: LD_VAR 0 2
14698: PUSH
14699: LD_INT 1
14701: ARRAY
14702: PPUSH
14703: LD_VAR 0 2
14707: PUSH
14708: LD_INT 2
14710: ARRAY
14711: PPUSH
14712: LD_VAR 0 2
14716: PUSH
14717: LD_INT 3
14719: ARRAY
14720: PPUSH
14721: LD_VAR 0 2
14725: PUSH
14726: LD_INT 4
14728: ARRAY
14729: PPUSH
14730: CALL_OW 449
14734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_VAR 0 5
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: CALL_OW 275
14752: PUSH
14753: LD_VAR 0 4
14757: PUSH
14758: LD_INT 1
14760: ARRAY
14761: GREATEREQUAL
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_INT 2
14770: PPUSH
14771: CALL_OW 275
14775: PUSH
14776: LD_VAR 0 4
14780: PUSH
14781: LD_INT 2
14783: ARRAY
14784: GREATEREQUAL
14785: AND
14786: PUSH
14787: LD_VAR 0 5
14791: PPUSH
14792: LD_INT 3
14794: PPUSH
14795: CALL_OW 275
14799: PUSH
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 3
14807: ARRAY
14808: GREATEREQUAL
14809: AND
14810: ST_TO_ADDR
// end ;
14811: LD_VAR 0 3
14815: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
// pom := GetBase ( building ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 274
14836: ST_TO_ADDR
// if not pom then
14837: LD_VAR 0 3
14841: NOT
14842: IFFALSE 14846
// exit ;
14844: GO 15016
// btype := GetBType ( building ) ;
14846: LD_ADDR_VAR 0 5
14850: PUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 266
14860: ST_TO_ADDR
// if btype = b_armoury then
14861: LD_VAR 0 5
14865: PUSH
14866: LD_INT 4
14868: EQUAL
14869: IFFALSE 14879
// btype := b_barracks ;
14871: LD_ADDR_VAR 0 5
14875: PUSH
14876: LD_INT 5
14878: ST_TO_ADDR
// if btype = b_depot then
14879: LD_VAR 0 5
14883: PUSH
14884: LD_INT 0
14886: EQUAL
14887: IFFALSE 14897
// btype := b_warehouse ;
14889: LD_ADDR_VAR 0 5
14893: PUSH
14894: LD_INT 1
14896: ST_TO_ADDR
// if btype = b_workshop then
14897: LD_VAR 0 5
14901: PUSH
14902: LD_INT 2
14904: EQUAL
14905: IFFALSE 14915
// btype := b_factory ;
14907: LD_ADDR_VAR 0 5
14911: PUSH
14912: LD_INT 3
14914: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14915: LD_ADDR_VAR 0 4
14919: PUSH
14920: LD_VAR 0 5
14924: PPUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 248
14934: PPUSH
14935: CALL_OW 450
14939: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_VAR 0 3
14949: PPUSH
14950: LD_INT 1
14952: PPUSH
14953: CALL_OW 275
14957: PUSH
14958: LD_VAR 0 4
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: GREATEREQUAL
14967: PUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 2
14975: PPUSH
14976: CALL_OW 275
14980: PUSH
14981: LD_VAR 0 4
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: GREATEREQUAL
14990: AND
14991: PUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 3
14999: PPUSH
15000: CALL_OW 275
15004: PUSH
15005: LD_VAR 0 4
15009: PUSH
15010: LD_INT 3
15012: ARRAY
15013: GREATEREQUAL
15014: AND
15015: ST_TO_ADDR
// end ;
15016: LD_VAR 0 2
15020: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
// pom := GetBase ( building ) ;
15026: LD_ADDR_VAR 0 4
15030: PUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 274
15040: ST_TO_ADDR
// if not pom then
15041: LD_VAR 0 4
15045: NOT
15046: IFFALSE 15050
// exit ;
15048: GO 15151
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15050: LD_ADDR_VAR 0 5
15054: PUSH
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 248
15069: PPUSH
15070: CALL_OW 450
15074: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: LD_VAR 0 4
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 275
15092: PUSH
15093: LD_VAR 0 5
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: GREATEREQUAL
15102: PUSH
15103: LD_VAR 0 4
15107: PPUSH
15108: LD_INT 2
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 2
15123: ARRAY
15124: GREATEREQUAL
15125: AND
15126: PUSH
15127: LD_VAR 0 4
15131: PPUSH
15132: LD_INT 3
15134: PPUSH
15135: CALL_OW 275
15139: PUSH
15140: LD_VAR 0 5
15144: PUSH
15145: LD_INT 3
15147: ARRAY
15148: GREATEREQUAL
15149: AND
15150: ST_TO_ADDR
// end ;
15151: LD_VAR 0 3
15155: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
// result := false ;
15169: LD_ADDR_VAR 0 8
15173: PUSH
15174: LD_INT 0
15176: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15177: LD_VAR 0 5
15181: NOT
15182: PUSH
15183: LD_VAR 0 1
15187: NOT
15188: OR
15189: PUSH
15190: LD_VAR 0 2
15194: NOT
15195: OR
15196: PUSH
15197: LD_VAR 0 3
15201: NOT
15202: OR
15203: IFFALSE 15207
// exit ;
15205: GO 16021
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15207: LD_ADDR_VAR 0 14
15211: PUSH
15212: LD_VAR 0 1
15216: PPUSH
15217: LD_VAR 0 2
15221: PPUSH
15222: LD_VAR 0 3
15226: PPUSH
15227: LD_VAR 0 4
15231: PPUSH
15232: LD_VAR 0 5
15236: PUSH
15237: LD_INT 1
15239: ARRAY
15240: PPUSH
15241: CALL_OW 248
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL 17274 0 6
15253: ST_TO_ADDR
// if not hexes then
15254: LD_VAR 0 14
15258: NOT
15259: IFFALSE 15263
// exit ;
15261: GO 16021
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15263: LD_ADDR_VAR 0 17
15267: PUSH
15268: LD_VAR 0 5
15272: PPUSH
15273: LD_INT 22
15275: PUSH
15276: LD_VAR 0 13
15280: PPUSH
15281: CALL_OW 255
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: LD_INT 30
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 30
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 72
15326: ST_TO_ADDR
// for i = 1 to hexes do
15327: LD_ADDR_VAR 0 9
15331: PUSH
15332: DOUBLE
15333: LD_INT 1
15335: DEC
15336: ST_TO_ADDR
15337: LD_VAR 0 14
15341: PUSH
15342: FOR_TO
15343: IFFALSE 16019
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15345: LD_ADDR_VAR 0 13
15349: PUSH
15350: LD_VAR 0 14
15354: PUSH
15355: LD_VAR 0 9
15359: ARRAY
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: LD_VAR 0 14
15369: PUSH
15370: LD_VAR 0 9
15374: ARRAY
15375: PUSH
15376: LD_INT 2
15378: ARRAY
15379: PPUSH
15380: CALL_OW 428
15384: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15385: LD_VAR 0 14
15389: PUSH
15390: LD_VAR 0 9
15394: ARRAY
15395: PUSH
15396: LD_INT 1
15398: ARRAY
15399: PPUSH
15400: LD_VAR 0 14
15404: PUSH
15405: LD_VAR 0 9
15409: ARRAY
15410: PUSH
15411: LD_INT 2
15413: ARRAY
15414: PPUSH
15415: CALL_OW 351
15419: PUSH
15420: LD_VAR 0 14
15424: PUSH
15425: LD_VAR 0 9
15429: ARRAY
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: LD_VAR 0 14
15439: PUSH
15440: LD_VAR 0 9
15444: ARRAY
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: PPUSH
15450: CALL_OW 488
15454: NOT
15455: OR
15456: PUSH
15457: LD_VAR 0 13
15461: PPUSH
15462: CALL_OW 247
15466: PUSH
15467: LD_INT 3
15469: EQUAL
15470: OR
15471: IFFALSE 15477
// exit ;
15473: POP
15474: POP
15475: GO 16021
// if not tmp then
15477: LD_VAR 0 13
15481: NOT
15482: IFFALSE 15486
// continue ;
15484: GO 15342
// result := true ;
15486: LD_ADDR_VAR 0 8
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15494: LD_VAR 0 6
15498: PUSH
15499: LD_VAR 0 13
15503: PPUSH
15504: CALL_OW 247
15508: PUSH
15509: LD_INT 2
15511: EQUAL
15512: AND
15513: PUSH
15514: LD_VAR 0 13
15518: PPUSH
15519: CALL_OW 263
15523: PUSH
15524: LD_INT 1
15526: EQUAL
15527: AND
15528: IFFALSE 15692
// begin if IsDrivenBy ( tmp ) then
15530: LD_VAR 0 13
15534: PPUSH
15535: CALL_OW 311
15539: IFFALSE 15543
// continue ;
15541: GO 15342
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15543: LD_VAR 0 6
15547: PPUSH
15548: LD_INT 3
15550: PUSH
15551: LD_INT 60
15553: PUSH
15554: EMPTY
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 3
15563: PUSH
15564: LD_INT 55
15566: PUSH
15567: EMPTY
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 72
15582: IFFALSE 15690
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15584: LD_ADDR_VAR 0 18
15588: PUSH
15589: LD_VAR 0 6
15593: PPUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 60
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 55
15612: PUSH
15613: EMPTY
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 72
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: ST_TO_ADDR
// if IsInUnit ( driver ) then
15633: LD_VAR 0 18
15637: PPUSH
15638: CALL_OW 310
15642: IFFALSE 15653
// ComExit ( driver ) ;
15644: LD_VAR 0 18
15648: PPUSH
15649: CALL 41075 0 1
// AddComEnterUnit ( driver , tmp ) ;
15653: LD_VAR 0 18
15657: PPUSH
15658: LD_VAR 0 13
15662: PPUSH
15663: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15667: LD_VAR 0 18
15671: PPUSH
15672: LD_VAR 0 7
15676: PPUSH
15677: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15681: LD_VAR 0 18
15685: PPUSH
15686: CALL_OW 181
// end ; continue ;
15690: GO 15342
// end ; if not cleaners or not tmp in cleaners then
15692: LD_VAR 0 6
15696: NOT
15697: PUSH
15698: LD_VAR 0 13
15702: PUSH
15703: LD_VAR 0 6
15707: IN
15708: NOT
15709: OR
15710: IFFALSE 16017
// begin if dep then
15712: LD_VAR 0 17
15716: IFFALSE 15852
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15718: LD_ADDR_VAR 0 16
15722: PUSH
15723: LD_VAR 0 17
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PPUSH
15732: CALL_OW 250
15736: PPUSH
15737: LD_VAR 0 17
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: CALL_OW 254
15750: PPUSH
15751: LD_INT 5
15753: PPUSH
15754: CALL_OW 272
15758: PUSH
15759: LD_VAR 0 17
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: CALL_OW 251
15772: PPUSH
15773: LD_VAR 0 17
15777: PUSH
15778: LD_INT 1
15780: ARRAY
15781: PPUSH
15782: CALL_OW 254
15786: PPUSH
15787: LD_INT 5
15789: PPUSH
15790: CALL_OW 273
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15799: LD_VAR 0 16
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: LD_VAR 0 16
15812: PUSH
15813: LD_INT 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 488
15821: IFFALSE 15852
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15823: LD_VAR 0 13
15827: PPUSH
15828: LD_VAR 0 16
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: LD_VAR 0 16
15841: PUSH
15842: LD_INT 2
15844: ARRAY
15845: PPUSH
15846: CALL_OW 111
// continue ;
15850: GO 15342
// end ; end ; r := GetDir ( tmp ) ;
15852: LD_ADDR_VAR 0 15
15856: PUSH
15857: LD_VAR 0 13
15861: PPUSH
15862: CALL_OW 254
15866: ST_TO_ADDR
// if r = 5 then
15867: LD_VAR 0 15
15871: PUSH
15872: LD_INT 5
15874: EQUAL
15875: IFFALSE 15885
// r := 0 ;
15877: LD_ADDR_VAR 0 15
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// for j = r to 5 do
15885: LD_ADDR_VAR 0 10
15889: PUSH
15890: DOUBLE
15891: LD_VAR 0 15
15895: DEC
15896: ST_TO_ADDR
15897: LD_INT 5
15899: PUSH
15900: FOR_TO
15901: IFFALSE 16015
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15903: LD_ADDR_VAR 0 11
15907: PUSH
15908: LD_VAR 0 13
15912: PPUSH
15913: CALL_OW 250
15917: PPUSH
15918: LD_VAR 0 10
15922: PPUSH
15923: LD_INT 2
15925: PPUSH
15926: CALL_OW 272
15930: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15931: LD_ADDR_VAR 0 12
15935: PUSH
15936: LD_VAR 0 13
15940: PPUSH
15941: CALL_OW 251
15945: PPUSH
15946: LD_VAR 0 10
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: CALL_OW 273
15958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15959: LD_VAR 0 11
15963: PPUSH
15964: LD_VAR 0 12
15968: PPUSH
15969: CALL_OW 488
15973: PUSH
15974: LD_VAR 0 11
15978: PPUSH
15979: LD_VAR 0 12
15983: PPUSH
15984: CALL_OW 428
15988: NOT
15989: AND
15990: IFFALSE 16013
// begin ComMoveXY ( tmp , _x , _y ) ;
15992: LD_VAR 0 13
15996: PPUSH
15997: LD_VAR 0 11
16001: PPUSH
16002: LD_VAR 0 12
16006: PPUSH
16007: CALL_OW 111
// break ;
16011: GO 16015
// end ; end ;
16013: GO 15900
16015: POP
16016: POP
// end ; end ;
16017: GO 15342
16019: POP
16020: POP
// end ;
16021: LD_VAR 0 8
16025: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16026: LD_INT 0
16028: PPUSH
// result := true ;
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_INT 1
16036: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16037: LD_VAR 0 2
16041: PUSH
16042: LD_INT 24
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16056
16048: LD_INT 33
16050: DOUBLE
16051: EQUAL
16052: IFTRUE 16056
16054: GO 16081
16056: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16057: LD_ADDR_VAR 0 3
16061: PUSH
16062: LD_INT 32
16064: PPUSH
16065: LD_VAR 0 1
16069: PPUSH
16070: CALL_OW 321
16074: PUSH
16075: LD_INT 2
16077: EQUAL
16078: ST_TO_ADDR
16079: GO 16397
16081: LD_INT 20
16083: DOUBLE
16084: EQUAL
16085: IFTRUE 16089
16087: GO 16114
16089: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16090: LD_ADDR_VAR 0 3
16094: PUSH
16095: LD_INT 6
16097: PPUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 321
16107: PUSH
16108: LD_INT 2
16110: EQUAL
16111: ST_TO_ADDR
16112: GO 16397
16114: LD_INT 22
16116: DOUBLE
16117: EQUAL
16118: IFTRUE 16128
16120: LD_INT 36
16122: DOUBLE
16123: EQUAL
16124: IFTRUE 16128
16126: GO 16153
16128: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_INT 15
16136: PPUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 321
16146: PUSH
16147: LD_INT 2
16149: EQUAL
16150: ST_TO_ADDR
16151: GO 16397
16153: LD_INT 30
16155: DOUBLE
16156: EQUAL
16157: IFTRUE 16161
16159: GO 16186
16161: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16162: LD_ADDR_VAR 0 3
16166: PUSH
16167: LD_INT 20
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 321
16179: PUSH
16180: LD_INT 2
16182: EQUAL
16183: ST_TO_ADDR
16184: GO 16397
16186: LD_INT 28
16188: DOUBLE
16189: EQUAL
16190: IFTRUE 16200
16192: LD_INT 21
16194: DOUBLE
16195: EQUAL
16196: IFTRUE 16200
16198: GO 16225
16200: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16201: LD_ADDR_VAR 0 3
16205: PUSH
16206: LD_INT 21
16208: PPUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 321
16218: PUSH
16219: LD_INT 2
16221: EQUAL
16222: ST_TO_ADDR
16223: GO 16397
16225: LD_INT 16
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16258
16233: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16234: LD_ADDR_VAR 0 3
16238: PUSH
16239: LD_INT 84
16241: PPUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 321
16251: PUSH
16252: LD_INT 2
16254: EQUAL
16255: ST_TO_ADDR
16256: GO 16397
16258: LD_INT 19
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16272
16264: LD_INT 23
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16297
16272: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 83
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 321
16290: PUSH
16291: LD_INT 2
16293: EQUAL
16294: ST_TO_ADDR
16295: GO 16397
16297: LD_INT 17
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16330
16305: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16306: LD_ADDR_VAR 0 3
16310: PUSH
16311: LD_INT 39
16313: PPUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 321
16323: PUSH
16324: LD_INT 2
16326: EQUAL
16327: ST_TO_ADDR
16328: GO 16397
16330: LD_INT 18
16332: DOUBLE
16333: EQUAL
16334: IFTRUE 16338
16336: GO 16363
16338: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_INT 40
16346: PPUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 321
16356: PUSH
16357: LD_INT 2
16359: EQUAL
16360: ST_TO_ADDR
16361: GO 16397
16363: LD_INT 27
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16396
16371: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16372: LD_ADDR_VAR 0 3
16376: PUSH
16377: LD_INT 35
16379: PPUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 321
16389: PUSH
16390: LD_INT 2
16392: EQUAL
16393: ST_TO_ADDR
16394: GO 16397
16396: POP
// end ;
16397: LD_VAR 0 3
16401: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16402: LD_INT 0
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
// result := false ;
16415: LD_ADDR_VAR 0 6
16419: PUSH
16420: LD_INT 0
16422: ST_TO_ADDR
// if btype = b_depot then
16423: LD_VAR 0 2
16427: PUSH
16428: LD_INT 0
16430: EQUAL
16431: IFFALSE 16443
// begin result := true ;
16433: LD_ADDR_VAR 0 6
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// exit ;
16441: GO 17269
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16443: LD_VAR 0 1
16447: NOT
16448: PUSH
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 266
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: IN
16469: NOT
16470: OR
16471: PUSH
16472: LD_VAR 0 2
16476: NOT
16477: OR
16478: PUSH
16479: LD_VAR 0 5
16483: PUSH
16484: LD_INT 0
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 4
16498: PUSH
16499: LD_INT 5
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: IN
16510: NOT
16511: OR
16512: PUSH
16513: LD_VAR 0 3
16517: PPUSH
16518: LD_VAR 0 4
16522: PPUSH
16523: CALL_OW 488
16527: NOT
16528: OR
16529: IFFALSE 16533
// exit ;
16531: GO 17269
// side := GetSide ( depot ) ;
16533: LD_ADDR_VAR 0 9
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 255
16547: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16548: LD_VAR 0 9
16552: PPUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL 16026 0 2
16562: NOT
16563: IFFALSE 16567
// exit ;
16565: GO 17269
// pom := GetBase ( depot ) ;
16567: LD_ADDR_VAR 0 10
16571: PUSH
16572: LD_VAR 0 1
16576: PPUSH
16577: CALL_OW 274
16581: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16582: LD_ADDR_VAR 0 11
16586: PUSH
16587: LD_VAR 0 2
16591: PPUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 248
16601: PPUSH
16602: CALL_OW 450
16606: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16607: LD_VAR 0 10
16611: PPUSH
16612: LD_INT 1
16614: PPUSH
16615: CALL_OW 275
16619: PUSH
16620: LD_VAR 0 11
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: GREATEREQUAL
16629: PUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: LD_INT 2
16637: PPUSH
16638: CALL_OW 275
16642: PUSH
16643: LD_VAR 0 11
16647: PUSH
16648: LD_INT 2
16650: ARRAY
16651: GREATEREQUAL
16652: AND
16653: PUSH
16654: LD_VAR 0 10
16658: PPUSH
16659: LD_INT 3
16661: PPUSH
16662: CALL_OW 275
16666: PUSH
16667: LD_VAR 0 11
16671: PUSH
16672: LD_INT 3
16674: ARRAY
16675: GREATEREQUAL
16676: AND
16677: NOT
16678: IFFALSE 16682
// exit ;
16680: GO 17269
// if GetBType ( depot ) = b_depot then
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 266
16691: PUSH
16692: LD_INT 0
16694: EQUAL
16695: IFFALSE 16707
// dist := 28 else
16697: LD_ADDR_VAR 0 14
16701: PUSH
16702: LD_INT 28
16704: ST_TO_ADDR
16705: GO 16715
// dist := 36 ;
16707: LD_ADDR_VAR 0 14
16711: PUSH
16712: LD_INT 36
16714: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16715: LD_VAR 0 1
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_VAR 0 4
16729: PPUSH
16730: CALL_OW 297
16734: PUSH
16735: LD_VAR 0 14
16739: GREATER
16740: IFFALSE 16744
// exit ;
16742: GO 17269
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16744: LD_ADDR_VAR 0 12
16748: PUSH
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: LD_VAR 0 4
16763: PPUSH
16764: LD_VAR 0 5
16768: PPUSH
16769: LD_VAR 0 1
16773: PPUSH
16774: CALL_OW 248
16778: PPUSH
16779: LD_INT 0
16781: PPUSH
16782: CALL 17274 0 6
16786: ST_TO_ADDR
// if not hexes then
16787: LD_VAR 0 12
16791: NOT
16792: IFFALSE 16796
// exit ;
16794: GO 17269
// hex := GetHexInfo ( x , y ) ;
16796: LD_ADDR_VAR 0 15
16800: PUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_VAR 0 4
16810: PPUSH
16811: CALL_OW 546
16815: ST_TO_ADDR
// if hex [ 1 ] then
16816: LD_VAR 0 15
16820: PUSH
16821: LD_INT 1
16823: ARRAY
16824: IFFALSE 16828
// exit ;
16826: GO 17269
// height := hex [ 2 ] ;
16828: LD_ADDR_VAR 0 13
16832: PUSH
16833: LD_VAR 0 15
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: ST_TO_ADDR
// for i = 1 to hexes do
16842: LD_ADDR_VAR 0 7
16846: PUSH
16847: DOUBLE
16848: LD_INT 1
16850: DEC
16851: ST_TO_ADDR
16852: LD_VAR 0 12
16856: PUSH
16857: FOR_TO
16858: IFFALSE 17188
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16860: LD_VAR 0 12
16864: PUSH
16865: LD_VAR 0 7
16869: ARRAY
16870: PUSH
16871: LD_INT 1
16873: ARRAY
16874: PPUSH
16875: LD_VAR 0 12
16879: PUSH
16880: LD_VAR 0 7
16884: ARRAY
16885: PUSH
16886: LD_INT 2
16888: ARRAY
16889: PPUSH
16890: CALL_OW 488
16894: NOT
16895: PUSH
16896: LD_VAR 0 12
16900: PUSH
16901: LD_VAR 0 7
16905: ARRAY
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: LD_VAR 0 12
16915: PUSH
16916: LD_VAR 0 7
16920: ARRAY
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: PPUSH
16926: CALL_OW 428
16930: PUSH
16931: LD_INT 0
16933: GREATER
16934: OR
16935: PUSH
16936: LD_VAR 0 12
16940: PUSH
16941: LD_VAR 0 7
16945: ARRAY
16946: PUSH
16947: LD_INT 1
16949: ARRAY
16950: PPUSH
16951: LD_VAR 0 12
16955: PUSH
16956: LD_VAR 0 7
16960: ARRAY
16961: PUSH
16962: LD_INT 2
16964: ARRAY
16965: PPUSH
16966: CALL_OW 351
16970: OR
16971: IFFALSE 16977
// exit ;
16973: POP
16974: POP
16975: GO 17269
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16977: LD_ADDR_VAR 0 8
16981: PUSH
16982: LD_VAR 0 12
16986: PUSH
16987: LD_VAR 0 7
16991: ARRAY
16992: PUSH
16993: LD_INT 1
16995: ARRAY
16996: PPUSH
16997: LD_VAR 0 12
17001: PUSH
17002: LD_VAR 0 7
17006: ARRAY
17007: PUSH
17008: LD_INT 2
17010: ARRAY
17011: PPUSH
17012: CALL_OW 546
17016: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17017: LD_VAR 0 8
17021: PUSH
17022: LD_INT 1
17024: ARRAY
17025: PUSH
17026: LD_VAR 0 8
17030: PUSH
17031: LD_INT 2
17033: ARRAY
17034: PUSH
17035: LD_VAR 0 13
17039: PUSH
17040: LD_INT 2
17042: PLUS
17043: GREATER
17044: OR
17045: PUSH
17046: LD_VAR 0 8
17050: PUSH
17051: LD_INT 2
17053: ARRAY
17054: PUSH
17055: LD_VAR 0 13
17059: PUSH
17060: LD_INT 2
17062: MINUS
17063: LESS
17064: OR
17065: PUSH
17066: LD_VAR 0 8
17070: PUSH
17071: LD_INT 3
17073: ARRAY
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 8
17080: PUSH
17081: LD_INT 9
17083: PUSH
17084: LD_INT 10
17086: PUSH
17087: LD_INT 11
17089: PUSH
17090: LD_INT 12
17092: PUSH
17093: LD_INT 13
17095: PUSH
17096: LD_INT 16
17098: PUSH
17099: LD_INT 17
17101: PUSH
17102: LD_INT 18
17104: PUSH
17105: LD_INT 19
17107: PUSH
17108: LD_INT 20
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: IN
17129: NOT
17130: OR
17131: PUSH
17132: LD_VAR 0 8
17136: PUSH
17137: LD_INT 5
17139: ARRAY
17140: NOT
17141: OR
17142: PUSH
17143: LD_VAR 0 8
17147: PUSH
17148: LD_INT 6
17150: ARRAY
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 7
17160: PUSH
17161: LD_INT 9
17163: PUSH
17164: LD_INT 10
17166: PUSH
17167: LD_INT 11
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: IN
17178: NOT
17179: OR
17180: IFFALSE 17186
// exit ;
17182: POP
17183: POP
17184: GO 17269
// end ;
17186: GO 16857
17188: POP
17189: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17190: LD_VAR 0 9
17194: PPUSH
17195: LD_VAR 0 3
17199: PPUSH
17200: LD_VAR 0 4
17204: PPUSH
17205: LD_INT 20
17207: PPUSH
17208: CALL 9192 0 4
17212: PUSH
17213: LD_INT 4
17215: ARRAY
17216: IFFALSE 17220
// exit ;
17218: GO 17269
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17220: LD_VAR 0 2
17224: PUSH
17225: LD_INT 29
17227: PUSH
17228: LD_INT 30
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: IN
17235: PUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_VAR 0 4
17245: PPUSH
17246: LD_VAR 0 9
17250: PPUSH
17251: CALL_OW 440
17255: NOT
17256: AND
17257: IFFALSE 17261
// exit ;
17259: GO 17269
// result := true ;
17261: LD_ADDR_VAR 0 6
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// end ;
17269: LD_VAR 0 6
17273: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17274: LD_INT 0
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
17333: PPUSH
// result = [ ] ;
17334: LD_ADDR_VAR 0 7
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// temp_list = [ ] ;
17341: LD_ADDR_VAR 0 9
17345: PUSH
17346: EMPTY
17347: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17348: LD_VAR 0 4
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: IN
17379: NOT
17380: PUSH
17381: LD_VAR 0 1
17385: PUSH
17386: LD_INT 0
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: IN
17396: PUSH
17397: LD_VAR 0 5
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 3
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: IN
17416: NOT
17417: AND
17418: OR
17419: IFFALSE 17423
// exit ;
17421: GO 35814
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 6
17430: PUSH
17431: LD_INT 7
17433: PUSH
17434: LD_INT 8
17436: PUSH
17437: LD_INT 13
17439: PUSH
17440: LD_INT 12
17442: PUSH
17443: LD_INT 15
17445: PUSH
17446: LD_INT 11
17448: PUSH
17449: LD_INT 14
17451: PUSH
17452: LD_INT 10
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: IN
17466: IFFALSE 17476
// btype = b_lab ;
17468: LD_ADDR_VAR 0 1
17472: PUSH
17473: LD_INT 6
17475: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17476: LD_VAR 0 6
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: IN
17495: NOT
17496: PUSH
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 6
17516: PUSH
17517: LD_INT 36
17519: PUSH
17520: LD_INT 4
17522: PUSH
17523: LD_INT 5
17525: PUSH
17526: LD_INT 31
17528: PUSH
17529: LD_INT 32
17531: PUSH
17532: LD_INT 33
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: IN
17548: NOT
17549: PUSH
17550: LD_VAR 0 6
17554: PUSH
17555: LD_INT 1
17557: EQUAL
17558: AND
17559: OR
17560: PUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: IN
17576: NOT
17577: PUSH
17578: LD_VAR 0 6
17582: PUSH
17583: LD_INT 2
17585: EQUAL
17586: AND
17587: OR
17588: IFFALSE 17598
// mode = 0 ;
17590: LD_ADDR_VAR 0 6
17594: PUSH
17595: LD_INT 0
17597: ST_TO_ADDR
// case mode of 0 :
17598: LD_VAR 0 6
17602: PUSH
17603: LD_INT 0
17605: DOUBLE
17606: EQUAL
17607: IFTRUE 17611
17609: GO 29064
17611: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17612: LD_ADDR_VAR 0 11
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: LD_INT 1
17632: NEG
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: LD_INT 0
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 2
17708: NEG
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 3
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: LD_INT 3
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 1
17778: NEG
17779: PUSH
17780: LD_INT 2
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17805: LD_ADDR_VAR 0 12
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 2
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 3
17962: NEG
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: NEG
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18001: LD_ADDR_VAR 0 13
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: NEG
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: LD_INT 2
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: LD_INT 1
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 2
18136: NEG
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: LD_INT 3
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 3
18160: NEG
18161: PUSH
18162: LD_INT 2
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 3
18172: NEG
18173: PUSH
18174: LD_INT 3
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18200: LD_ADDR_VAR 0 14
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: LD_INT 3
18350: NEG
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: LD_INT 3
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18396: LD_ADDR_VAR 0 15
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: LD_INT 1
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: NEG
18466: PUSH
18467: LD_INT 1
18469: NEG
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 1
18508: NEG
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: NEG
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18589: LD_ADDR_VAR 0 16
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: LD_INT 0
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: LD_INT 0
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: LD_INT 2
18674: NEG
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: NEG
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 2
18724: NEG
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18782: LD_ADDR_VAR 0 17
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 1
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: LD_INT 2
18867: NEG
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 2
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: LD_INT 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: NEG
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 2
18958: NEG
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: NEG
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 2
18981: NEG
18982: PUSH
18983: LD_INT 2
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19012: LD_ADDR_VAR 0 18
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 2
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: NEG
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19242: LD_ADDR_VAR 0 19
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 1
19300: NEG
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: NEG
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 2
19441: NEG
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19472: LD_ADDR_VAR 0 20
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 1
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: NEG
19672: PUSH
19673: LD_INT 2
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19702: LD_ADDR_VAR 0 21
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: LD_INT 1
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 2
19787: NEG
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: LD_INT 2
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19932: LD_ADDR_VAR 0 22
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20162: LD_ADDR_VAR 0 23
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 1
20220: NEG
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 2
20247: NEG
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: NEG
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: LD_INT 3
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: LD_INT 3
20389: NEG
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: LD_INT 2
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20442: LD_ADDR_VAR 0 24
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: LD_INT 1
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: LD_INT 2
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 2
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: NEG
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 3
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20718: LD_ADDR_VAR 0 25
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: LD_INT 1
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: LD_INT 2
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 3
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20992: LD_ADDR_VAR 0 26
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 2
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 3
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 2
21234: NEG
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21268: LD_ADDR_VAR 0 27
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: LD_INT 1
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 2
21364: NEG
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 1
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: NEG
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 3
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 3
21513: NEG
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21548: LD_ADDR_VAR 0 28
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 2
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 1
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 2
21747: NEG
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: LD_INT 3
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: LD_INT 3
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 3
21783: NEG
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21830: LD_ADDR_VAR 0 29
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 2
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: NEG
22021: PUSH
22022: LD_INT 3
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 3
22074: NEG
22075: PUSH
22076: LD_INT 2
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22109: LD_ADDR_VAR 0 30
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 1
22167: NEG
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: LD_INT 3
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: LD_INT 2
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 2
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 3
22352: NEG
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22387: LD_ADDR_VAR 0 31
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: LD_INT 2
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: NEG
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 2
22576: NEG
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 1
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 3
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 3
22630: NEG
22631: PUSH
22632: LD_INT 2
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22665: LD_ADDR_VAR 0 32
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: LD_INT 2
22750: NEG
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: LD_INT 2
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: LD_INT 2
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 2
22831: NEG
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 3
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: LD_INT 2
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 2
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 3
22908: NEG
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22943: LD_ADDR_VAR 0 33
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: LD_INT 1
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 2
23028: NEG
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: NEG
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: LD_INT 3
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: NEG
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23222: LD_ADDR_VAR 0 34
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: LD_INT 2
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: NEG
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 3
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 3
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 3
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23502: LD_ADDR_VAR 0 35
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: LD_INT 1
23575: NEG
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23614: LD_ADDR_VAR 0 36
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23726: LD_ADDR_VAR 0 37
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23838: LD_ADDR_VAR 0 38
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: NEG
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23950: LD_ADDR_VAR 0 39
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24062: LD_ADDR_VAR 0 40
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24174: LD_ADDR_VAR 0 41
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 3
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 3
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: NEG
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 3
24448: NEG
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 3
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 3
24483: NEG
24484: PUSH
24485: LD_INT 3
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24524: LD_ADDR_VAR 0 42
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 2
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: LD_INT 3
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 3
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 3
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 3
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 3
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 3
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 3
24833: NEG
24834: PUSH
24835: LD_INT 3
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24874: LD_ADDR_VAR 0 43
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: LD_INT 3
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 3
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 3
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 3
25170: NEG
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 3
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25222: LD_ADDR_VAR 0 44
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 2
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: NEG
25401: PUSH
25402: LD_INT 2
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: LD_INT 3
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: LD_INT 3
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: NEG
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 3
25496: NEG
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 3
25519: NEG
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 3
25531: NEG
25532: PUSH
25533: LD_INT 3
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25572: LD_ADDR_VAR 0 45
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: LD_INT 3
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 3
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 3
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 3
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: LD_INT 3
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 3
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 3
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 3
25881: NEG
25882: PUSH
25883: LD_INT 3
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25922: LD_ADDR_VAR 0 46
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 2
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: LD_INT 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 3
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 3
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 3
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26270: LD_ADDR_VAR 0 47
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26421: LD_ADDR_VAR 0 48
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26568: LD_ADDR_VAR 0 49
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26712: LD_ADDR_VAR 0 50
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26856: LD_ADDR_VAR 0 51
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27003: LD_ADDR_VAR 0 52
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: NEG
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27154: LD_ADDR_VAR 0 53
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: NEG
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 2
27353: NEG
27354: PUSH
27355: LD_INT 2
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27384: LD_ADDR_VAR 0 54
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: NEG
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27614: LD_ADDR_VAR 0 55
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: LD_INT 2
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27844: LD_ADDR_VAR 0 56
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 2
28031: NEG
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 2
28043: NEG
28044: PUSH
28045: LD_INT 2
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28074: LD_ADDR_VAR 0 57
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: LD_INT 2
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28304: LD_ADDR_VAR 0 58
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28534: LD_ADDR_VAR 0 59
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28622: LD_ADDR_VAR 0 60
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28710: LD_ADDR_VAR 0 61
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28798: LD_ADDR_VAR 0 62
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28886: LD_ADDR_VAR 0 63
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28974: LD_ADDR_VAR 0 64
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
// end ; 1 :
29062: GO 34959
29064: LD_INT 1
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 31695
29072: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29073: LD_ADDR_VAR 0 11
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 3
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29117: LD_ADDR_VAR 0 12
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 3
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29158: LD_ADDR_VAR 0 13
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 3
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 3
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29198: LD_ADDR_VAR 0 14
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 3
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29239: LD_ADDR_VAR 0 15
29243: PUSH
29244: LD_INT 2
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 3
29268: NEG
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29283: LD_ADDR_VAR 0 16
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 3
29302: NEG
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: NEG
29315: PUSH
29316: LD_INT 3
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29329: LD_ADDR_VAR 0 17
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29373: LD_ADDR_VAR 0 18
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 3
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29414: LD_ADDR_VAR 0 19
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 3
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29454: LD_ADDR_VAR 0 20
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29495: LD_ADDR_VAR 0 21
29499: PUSH
29500: LD_INT 2
29502: NEG
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 3
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29539: LD_ADDR_VAR 0 22
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: NEG
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 3
29570: NEG
29571: PUSH
29572: LD_INT 3
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29585: LD_ADDR_VAR 0 23
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: LD_INT 4
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29629: LD_ADDR_VAR 0 24
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29670: LD_ADDR_VAR 0 25
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 4
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: LD_INT 4
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29710: LD_ADDR_VAR 0 26
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: LD_INT 4
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29751: LD_ADDR_VAR 0 27
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: NEG
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: NEG
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29795: LD_ADDR_VAR 0 28
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 3
29814: NEG
29815: PUSH
29816: LD_INT 4
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 4
29826: NEG
29827: PUSH
29828: LD_INT 3
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29841: LD_ADDR_VAR 0 29
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: LD_INT 4
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 4
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 5
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 5
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 4
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 6
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 6
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 5
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29996: LD_ADDR_VAR 0 30
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 4
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 4
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 5
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 5
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 5
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 6
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 6
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30139: LD_ADDR_VAR 0 31
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 4
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 4
30186: PUSH
30187: LD_INT 4
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 4
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: LD_INT 4
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 5
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 4
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 6
30236: PUSH
30237: LD_INT 5
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 6
30246: PUSH
30247: LD_INT 6
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 5
30256: PUSH
30257: LD_INT 6
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30278: LD_ADDR_VAR 0 32
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 3
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 4
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: LD_INT 4
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: LD_INT 5
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 5
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 6
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 6
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30421: LD_ADDR_VAR 0 33
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 4
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 4
30496: NEG
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 5
30507: NEG
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 5
30518: NEG
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 5
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 6
30541: NEG
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 6
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30576: LD_ADDR_VAR 0 34
30580: PUSH
30581: LD_INT 2
30583: NEG
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 3
30607: NEG
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 4
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 4
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: LD_INT 4
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 5
30679: NEG
30680: PUSH
30681: LD_INT 5
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 5
30691: NEG
30692: PUSH
30693: LD_INT 6
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 6
30703: NEG
30704: PUSH
30705: LD_INT 5
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 6
30715: NEG
30716: PUSH
30717: LD_INT 6
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30739: LD_ADDR_VAR 0 41
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30783: LD_ADDR_VAR 0 42
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30824: LD_ADDR_VAR 0 43
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30864: LD_ADDR_VAR 0 44
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30905: LD_ADDR_VAR 0 45
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30949: LD_ADDR_VAR 0 46
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30995: LD_ADDR_VAR 0 47
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: LD_INT 3
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31028: LD_ADDR_VAR 0 48
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31059: LD_ADDR_VAR 0 49
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 3
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31088: LD_ADDR_VAR 0 50
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31117: LD_ADDR_VAR 0 51
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31148: LD_ADDR_VAR 0 52
31152: PUSH
31153: LD_INT 3
31155: NEG
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31181: LD_ADDR_VAR 0 53
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: LD_INT 3
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31225: LD_ADDR_VAR 0 54
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31266: LD_ADDR_VAR 0 55
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31306: LD_ADDR_VAR 0 56
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 3
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31347: LD_ADDR_VAR 0 57
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31391: LD_ADDR_VAR 0 58
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31437: LD_ADDR_VAR 0 59
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31481: LD_ADDR_VAR 0 60
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31522: LD_ADDR_VAR 0 61
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31562: LD_ADDR_VAR 0 62
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31603: LD_ADDR_VAR 0 63
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31647: LD_ADDR_VAR 0 64
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// end ; 2 :
31693: GO 34959
31695: LD_INT 2
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 34958
31703: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31704: LD_ADDR_VAR 0 29
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 5
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 5
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 3
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 3
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 3
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: LD_INT 4
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: LD_INT 4
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 4
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 4
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 4
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 4
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 5
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 5
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 4
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 5
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 3
32032: NEG
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 4
32043: NEG
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 4
32054: NEG
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 4
32066: NEG
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: NEG
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 4
32089: NEG
32090: PUSH
32091: LD_INT 4
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 4
32101: NEG
32102: PUSH
32103: LD_INT 5
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: LD_INT 4
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: NEG
32126: PUSH
32127: LD_INT 3
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 4
32137: NEG
32138: PUSH
32139: LD_INT 3
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 5
32149: NEG
32150: PUSH
32151: LD_INT 4
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: NEG
32162: PUSH
32163: LD_INT 5
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: LD_INT 5
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 5
32185: NEG
32186: PUSH
32187: LD_INT 3
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32242: LD_ADDR_VAR 0 30
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: LD_INT 4
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 4
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 5
32269: PUSH
32270: LD_INT 4
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 5
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 4
32289: PUSH
32290: LD_INT 5
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 5
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 5
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 4
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: NEG
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 4
32443: NEG
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 3
32455: NEG
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 4
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 5
32488: NEG
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: NEG
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 5
32511: NEG
32512: PUSH
32513: LD_INT 2
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 3
32546: NEG
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 3
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: NEG
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: LD_INT 4
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: LD_INT 4
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 4
32630: NEG
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 4
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 5
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 4
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: LD_INT 3
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 3
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: LD_INT 5
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 5
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32789: LD_ADDR_VAR 0 31
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 4
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 5
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: LD_INT 4
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 5
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: NEG
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 4
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 4
33003: NEG
33004: PUSH
33005: LD_INT 5
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: LD_INT 4
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 3
33027: NEG
33028: PUSH
33029: LD_INT 3
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 4
33039: NEG
33040: PUSH
33041: LD_INT 3
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 5
33051: NEG
33052: PUSH
33053: LD_INT 4
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 5
33063: NEG
33064: PUSH
33065: LD_INT 5
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: LD_INT 5
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 5
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: LD_INT 3
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 4
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: LD_INT 3
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 4
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 4
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 5
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 4
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33339: LD_ADDR_VAR 0 32
33343: PUSH
33344: LD_INT 4
33346: NEG
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 3
33380: NEG
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 5
33402: NEG
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 5
33413: NEG
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: NEG
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: LD_INT 4
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 3
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: LD_INT 3
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: LD_INT 4
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 4
33544: NEG
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 5
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 4
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 4
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 5
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 5
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 3
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 4
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 4
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: PUSH
33772: LD_INT 4
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: LD_INT 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 5
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 5
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33886: LD_ADDR_VAR 0 33
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 4
33905: NEG
33906: PUSH
33907: LD_INT 5
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: LD_INT 4
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 3
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: LD_INT 3
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 5
33953: NEG
33954: PUSH
33955: LD_INT 4
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: LD_INT 5
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 5
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 5
33989: NEG
33990: PUSH
33991: LD_INT 3
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: LD_INT 3
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 4
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 4
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: LD_INT 4
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 5
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 5
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 4
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 4
34226: PUSH
34227: LD_INT 4
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 3
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 4
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: LD_INT 4
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 3
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 4
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: LD_INT 5
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 5
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 5
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34424: LD_ADDR_VAR 0 34
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 4
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 5
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 4
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 4
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 5
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 3
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 5
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 4
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 4
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 5
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 5
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 5
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 3
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 4
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 4
34809: NEG
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 4
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 3
34832: NEG
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 3
34843: NEG
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 4
34854: NEG
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 5
34865: NEG
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 5
34876: NEG
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 5
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// end ; end ;
34956: GO 34959
34958: POP
// case btype of b_depot , b_warehouse :
34959: LD_VAR 0 1
34963: PUSH
34964: LD_INT 0
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34978
34970: LD_INT 1
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 35179
34978: POP
// case nation of nation_american :
34979: LD_VAR 0 5
34983: PUSH
34984: LD_INT 1
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 34992
34990: GO 35048
34992: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34993: LD_ADDR_VAR 0 9
34997: PUSH
34998: LD_VAR 0 11
35002: PUSH
35003: LD_VAR 0 12
35007: PUSH
35008: LD_VAR 0 13
35012: PUSH
35013: LD_VAR 0 14
35017: PUSH
35018: LD_VAR 0 15
35022: PUSH
35023: LD_VAR 0 16
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: PUSH
35036: LD_VAR 0 4
35040: PUSH
35041: LD_INT 1
35043: PLUS
35044: ARRAY
35045: ST_TO_ADDR
35046: GO 35177
35048: LD_INT 2
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35112
35056: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_VAR 0 17
35066: PUSH
35067: LD_VAR 0 18
35071: PUSH
35072: LD_VAR 0 19
35076: PUSH
35077: LD_VAR 0 20
35081: PUSH
35082: LD_VAR 0 21
35086: PUSH
35087: LD_VAR 0 22
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: PUSH
35100: LD_VAR 0 4
35104: PUSH
35105: LD_INT 1
35107: PLUS
35108: ARRAY
35109: ST_TO_ADDR
35110: GO 35177
35112: LD_INT 3
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35120
35118: GO 35176
35120: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35121: LD_ADDR_VAR 0 9
35125: PUSH
35126: LD_VAR 0 23
35130: PUSH
35131: LD_VAR 0 24
35135: PUSH
35136: LD_VAR 0 25
35140: PUSH
35141: LD_VAR 0 26
35145: PUSH
35146: LD_VAR 0 27
35150: PUSH
35151: LD_VAR 0 28
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: PUSH
35164: LD_VAR 0 4
35168: PUSH
35169: LD_INT 1
35171: PLUS
35172: ARRAY
35173: ST_TO_ADDR
35174: GO 35177
35176: POP
35177: GO 35732
35179: LD_INT 2
35181: DOUBLE
35182: EQUAL
35183: IFTRUE 35193
35185: LD_INT 3
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35249
35193: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35194: LD_ADDR_VAR 0 9
35198: PUSH
35199: LD_VAR 0 29
35203: PUSH
35204: LD_VAR 0 30
35208: PUSH
35209: LD_VAR 0 31
35213: PUSH
35214: LD_VAR 0 32
35218: PUSH
35219: LD_VAR 0 33
35223: PUSH
35224: LD_VAR 0 34
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: PUSH
35237: LD_VAR 0 4
35241: PUSH
35242: LD_INT 1
35244: PLUS
35245: ARRAY
35246: ST_TO_ADDR
35247: GO 35732
35249: LD_INT 16
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35311
35255: LD_INT 17
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35311
35261: LD_INT 18
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35311
35267: LD_INT 19
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35311
35273: LD_INT 22
35275: DOUBLE
35276: EQUAL
35277: IFTRUE 35311
35279: LD_INT 20
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35311
35285: LD_INT 21
35287: DOUBLE
35288: EQUAL
35289: IFTRUE 35311
35291: LD_INT 23
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35311
35297: LD_INT 24
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35311
35303: LD_INT 25
35305: DOUBLE
35306: EQUAL
35307: IFTRUE 35311
35309: GO 35367
35311: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35312: LD_ADDR_VAR 0 9
35316: PUSH
35317: LD_VAR 0 35
35321: PUSH
35322: LD_VAR 0 36
35326: PUSH
35327: LD_VAR 0 37
35331: PUSH
35332: LD_VAR 0 38
35336: PUSH
35337: LD_VAR 0 39
35341: PUSH
35342: LD_VAR 0 40
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: PUSH
35355: LD_VAR 0 4
35359: PUSH
35360: LD_INT 1
35362: PLUS
35363: ARRAY
35364: ST_TO_ADDR
35365: GO 35732
35367: LD_INT 6
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35423
35373: LD_INT 7
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35423
35379: LD_INT 8
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35423
35385: LD_INT 13
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35423
35391: LD_INT 12
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35423
35397: LD_INT 15
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35423
35403: LD_INT 11
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35423
35409: LD_INT 14
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35423
35415: LD_INT 10
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35479
35423: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35424: LD_ADDR_VAR 0 9
35428: PUSH
35429: LD_VAR 0 41
35433: PUSH
35434: LD_VAR 0 42
35438: PUSH
35439: LD_VAR 0 43
35443: PUSH
35444: LD_VAR 0 44
35448: PUSH
35449: LD_VAR 0 45
35453: PUSH
35454: LD_VAR 0 46
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_VAR 0 4
35471: PUSH
35472: LD_INT 1
35474: PLUS
35475: ARRAY
35476: ST_TO_ADDR
35477: GO 35732
35479: LD_INT 36
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35543
35487: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35488: LD_ADDR_VAR 0 9
35492: PUSH
35493: LD_VAR 0 47
35497: PUSH
35498: LD_VAR 0 48
35502: PUSH
35503: LD_VAR 0 49
35507: PUSH
35508: LD_VAR 0 50
35512: PUSH
35513: LD_VAR 0 51
35517: PUSH
35518: LD_VAR 0 52
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: LD_INT 1
35538: PLUS
35539: ARRAY
35540: ST_TO_ADDR
35541: GO 35732
35543: LD_INT 4
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35569
35549: LD_INT 5
35551: DOUBLE
35552: EQUAL
35553: IFTRUE 35569
35555: LD_INT 34
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35569
35561: LD_INT 37
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35625
35569: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35570: LD_ADDR_VAR 0 9
35574: PUSH
35575: LD_VAR 0 53
35579: PUSH
35580: LD_VAR 0 54
35584: PUSH
35585: LD_VAR 0 55
35589: PUSH
35590: LD_VAR 0 56
35594: PUSH
35595: LD_VAR 0 57
35599: PUSH
35600: LD_VAR 0 58
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: PUSH
35613: LD_VAR 0 4
35617: PUSH
35618: LD_INT 1
35620: PLUS
35621: ARRAY
35622: ST_TO_ADDR
35623: GO 35732
35625: LD_INT 31
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35675
35631: LD_INT 32
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35675
35637: LD_INT 33
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35675
35643: LD_INT 27
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35675
35649: LD_INT 26
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35675
35655: LD_INT 28
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35675
35661: LD_INT 29
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35675
35667: LD_INT 30
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35731
35675: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: LD_VAR 0 59
35685: PUSH
35686: LD_VAR 0 60
35690: PUSH
35691: LD_VAR 0 61
35695: PUSH
35696: LD_VAR 0 62
35700: PUSH
35701: LD_VAR 0 63
35705: PUSH
35706: LD_VAR 0 64
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: PUSH
35719: LD_VAR 0 4
35723: PUSH
35724: LD_INT 1
35726: PLUS
35727: ARRAY
35728: ST_TO_ADDR
35729: GO 35732
35731: POP
// temp_list2 = [ ] ;
35732: LD_ADDR_VAR 0 10
35736: PUSH
35737: EMPTY
35738: ST_TO_ADDR
// for i in temp_list do
35739: LD_ADDR_VAR 0 8
35743: PUSH
35744: LD_VAR 0 9
35748: PUSH
35749: FOR_IN
35750: IFFALSE 35802
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35752: LD_ADDR_VAR 0 10
35756: PUSH
35757: LD_VAR 0 10
35761: PUSH
35762: LD_VAR 0 8
35766: PUSH
35767: LD_INT 1
35769: ARRAY
35770: PUSH
35771: LD_VAR 0 2
35775: PLUS
35776: PUSH
35777: LD_VAR 0 8
35781: PUSH
35782: LD_INT 2
35784: ARRAY
35785: PUSH
35786: LD_VAR 0 3
35790: PLUS
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: ADD
35799: ST_TO_ADDR
35800: GO 35749
35802: POP
35803: POP
// result = temp_list2 ;
35804: LD_ADDR_VAR 0 7
35808: PUSH
35809: LD_VAR 0 10
35813: ST_TO_ADDR
// end ;
35814: LD_VAR 0 7
35818: RET
// export function EnemyInRange ( unit , dist ) ; begin
35819: LD_INT 0
35821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 255
35836: PPUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 250
35846: PPUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: CALL_OW 251
35856: PPUSH
35857: LD_VAR 0 2
35861: PPUSH
35862: CALL 9192 0 4
35866: PUSH
35867: LD_INT 4
35869: ARRAY
35870: ST_TO_ADDR
// end ;
35871: LD_VAR 0 3
35875: RET
// export function PlayerSeeMe ( unit ) ; begin
35876: LD_INT 0
35878: PPUSH
// result := See ( your_side , unit ) ;
35879: LD_ADDR_VAR 0 2
35883: PUSH
35884: LD_OWVAR 2
35888: PPUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 292
35898: ST_TO_ADDR
// end ;
35899: LD_VAR 0 2
35903: RET
// export function ReverseDir ( unit ) ; begin
35904: LD_INT 0
35906: PPUSH
// if not unit then
35907: LD_VAR 0 1
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 35939
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35916: LD_ADDR_VAR 0 2
35920: PUSH
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 254
35930: PUSH
35931: LD_INT 3
35933: PLUS
35934: PUSH
35935: LD_INT 6
35937: MOD
35938: ST_TO_ADDR
// end ;
35939: LD_VAR 0 2
35943: RET
// export function ReverseArray ( array ) ; var i ; begin
35944: LD_INT 0
35946: PPUSH
35947: PPUSH
// if not array then
35948: LD_VAR 0 1
35952: NOT
35953: IFFALSE 35957
// exit ;
35955: GO 36012
// result := [ ] ;
35957: LD_ADDR_VAR 0 2
35961: PUSH
35962: EMPTY
35963: ST_TO_ADDR
// for i := array downto 1 do
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: DOUBLE
35970: LD_VAR 0 1
35974: INC
35975: ST_TO_ADDR
35976: LD_INT 1
35978: PUSH
35979: FOR_DOWNTO
35980: IFFALSE 36010
// result := Join ( result , array [ i ] ) ;
35982: LD_ADDR_VAR 0 2
35986: PUSH
35987: LD_VAR 0 2
35991: PPUSH
35992: LD_VAR 0 1
35996: PUSH
35997: LD_VAR 0 3
36001: ARRAY
36002: PPUSH
36003: CALL 40677 0 2
36007: ST_TO_ADDR
36008: GO 35979
36010: POP
36011: POP
// end ;
36012: LD_VAR 0 2
36016: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36017: LD_INT 0
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
// if not unit or not hexes then
36025: LD_VAR 0 1
36029: NOT
36030: PUSH
36031: LD_VAR 0 2
36035: NOT
36036: OR
36037: IFFALSE 36041
// exit ;
36039: GO 36164
// dist := 9999 ;
36041: LD_ADDR_VAR 0 5
36045: PUSH
36046: LD_INT 9999
36048: ST_TO_ADDR
// for i = 1 to hexes do
36049: LD_ADDR_VAR 0 4
36053: PUSH
36054: DOUBLE
36055: LD_INT 1
36057: DEC
36058: ST_TO_ADDR
36059: LD_VAR 0 2
36063: PUSH
36064: FOR_TO
36065: IFFALSE 36152
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36067: LD_ADDR_VAR 0 6
36071: PUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: LD_VAR 0 2
36081: PUSH
36082: LD_VAR 0 4
36086: ARRAY
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PPUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_VAR 0 4
36101: ARRAY
36102: PUSH
36103: LD_INT 2
36105: ARRAY
36106: PPUSH
36107: CALL_OW 297
36111: ST_TO_ADDR
// if tdist < dist then
36112: LD_VAR 0 6
36116: PUSH
36117: LD_VAR 0 5
36121: LESS
36122: IFFALSE 36150
// begin hex := hexes [ i ] ;
36124: LD_ADDR_VAR 0 8
36128: PUSH
36129: LD_VAR 0 2
36133: PUSH
36134: LD_VAR 0 4
36138: ARRAY
36139: ST_TO_ADDR
// dist := tdist ;
36140: LD_ADDR_VAR 0 5
36144: PUSH
36145: LD_VAR 0 6
36149: ST_TO_ADDR
// end ; end ;
36150: GO 36064
36152: POP
36153: POP
// result := hex ;
36154: LD_ADDR_VAR 0 3
36158: PUSH
36159: LD_VAR 0 8
36163: ST_TO_ADDR
// end ;
36164: LD_VAR 0 3
36168: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36169: LD_INT 0
36171: PPUSH
36172: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36173: LD_VAR 0 1
36177: NOT
36178: PUSH
36179: LD_VAR 0 1
36183: PUSH
36184: LD_INT 21
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 23
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PPUSH
36208: CALL_OW 69
36212: IN
36213: NOT
36214: OR
36215: IFFALSE 36219
// exit ;
36217: GO 36266
// for i = 1 to 3 do
36219: LD_ADDR_VAR 0 3
36223: PUSH
36224: DOUBLE
36225: LD_INT 1
36227: DEC
36228: ST_TO_ADDR
36229: LD_INT 3
36231: PUSH
36232: FOR_TO
36233: IFFALSE 36264
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 250
36244: PPUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL_OW 251
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: CALL_OW 453
36262: GO 36232
36264: POP
36265: POP
// end ;
36266: LD_VAR 0 2
36270: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36271: LD_INT 0
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
// if not unit or not enemy_unit then
36279: LD_VAR 0 1
36283: NOT
36284: PUSH
36285: LD_VAR 0 2
36289: NOT
36290: OR
36291: IFFALSE 36295
// exit ;
36293: GO 36762
// if GetLives ( i ) < 250 then
36295: LD_VAR 0 4
36299: PPUSH
36300: CALL_OW 256
36304: PUSH
36305: LD_INT 250
36307: LESS
36308: IFFALSE 36321
// begin ComAutodestruct ( i ) ;
36310: LD_VAR 0 4
36314: PPUSH
36315: CALL 36169 0 1
// exit ;
36319: GO 36762
// end ; x := GetX ( enemy_unit ) ;
36321: LD_ADDR_VAR 0 7
36325: PUSH
36326: LD_VAR 0 2
36330: PPUSH
36331: CALL_OW 250
36335: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36336: LD_ADDR_VAR 0 8
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 251
36350: ST_TO_ADDR
// if not x or not y then
36351: LD_VAR 0 7
36355: NOT
36356: PUSH
36357: LD_VAR 0 8
36361: NOT
36362: OR
36363: IFFALSE 36367
// exit ;
36365: GO 36762
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_VAR 0 7
36376: PPUSH
36377: LD_INT 0
36379: PPUSH
36380: LD_INT 4
36382: PPUSH
36383: CALL_OW 272
36387: PUSH
36388: LD_VAR 0 8
36392: PPUSH
36393: LD_INT 0
36395: PPUSH
36396: LD_INT 4
36398: PPUSH
36399: CALL_OW 273
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_VAR 0 7
36412: PPUSH
36413: LD_INT 1
36415: PPUSH
36416: LD_INT 4
36418: PPUSH
36419: CALL_OW 272
36423: PUSH
36424: LD_VAR 0 8
36428: PPUSH
36429: LD_INT 1
36431: PPUSH
36432: LD_INT 4
36434: PPUSH
36435: CALL_OW 273
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_VAR 0 7
36448: PPUSH
36449: LD_INT 2
36451: PPUSH
36452: LD_INT 4
36454: PPUSH
36455: CALL_OW 272
36459: PUSH
36460: LD_VAR 0 8
36464: PPUSH
36465: LD_INT 2
36467: PPUSH
36468: LD_INT 4
36470: PPUSH
36471: CALL_OW 273
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_VAR 0 7
36484: PPUSH
36485: LD_INT 3
36487: PPUSH
36488: LD_INT 4
36490: PPUSH
36491: CALL_OW 272
36495: PUSH
36496: LD_VAR 0 8
36500: PPUSH
36501: LD_INT 3
36503: PPUSH
36504: LD_INT 4
36506: PPUSH
36507: CALL_OW 273
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_VAR 0 7
36520: PPUSH
36521: LD_INT 4
36523: PPUSH
36524: LD_INT 4
36526: PPUSH
36527: CALL_OW 272
36531: PUSH
36532: LD_VAR 0 8
36536: PPUSH
36537: LD_INT 4
36539: PPUSH
36540: LD_INT 4
36542: PPUSH
36543: CALL_OW 273
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_VAR 0 7
36556: PPUSH
36557: LD_INT 5
36559: PPUSH
36560: LD_INT 4
36562: PPUSH
36563: CALL_OW 272
36567: PUSH
36568: LD_VAR 0 8
36572: PPUSH
36573: LD_INT 5
36575: PPUSH
36576: LD_INT 4
36578: PPUSH
36579: CALL_OW 273
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// for i = tmp downto 1 do
36596: LD_ADDR_VAR 0 4
36600: PUSH
36601: DOUBLE
36602: LD_VAR 0 6
36606: INC
36607: ST_TO_ADDR
36608: LD_INT 1
36610: PUSH
36611: FOR_DOWNTO
36612: IFFALSE 36713
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36614: LD_VAR 0 6
36618: PUSH
36619: LD_VAR 0 4
36623: ARRAY
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 6
36633: PUSH
36634: LD_VAR 0 4
36638: ARRAY
36639: PUSH
36640: LD_INT 2
36642: ARRAY
36643: PPUSH
36644: CALL_OW 488
36648: NOT
36649: PUSH
36650: LD_VAR 0 6
36654: PUSH
36655: LD_VAR 0 4
36659: ARRAY
36660: PUSH
36661: LD_INT 1
36663: ARRAY
36664: PPUSH
36665: LD_VAR 0 6
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PUSH
36676: LD_INT 2
36678: ARRAY
36679: PPUSH
36680: CALL_OW 428
36684: PUSH
36685: LD_INT 0
36687: NONEQUAL
36688: OR
36689: IFFALSE 36711
// tmp := Delete ( tmp , i ) ;
36691: LD_ADDR_VAR 0 6
36695: PUSH
36696: LD_VAR 0 6
36700: PPUSH
36701: LD_VAR 0 4
36705: PPUSH
36706: CALL_OW 3
36710: ST_TO_ADDR
36711: GO 36611
36713: POP
36714: POP
// j := GetClosestHex ( unit , tmp ) ;
36715: LD_ADDR_VAR 0 5
36719: PUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: LD_VAR 0 6
36729: PPUSH
36730: CALL 36017 0 2
36734: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36735: LD_VAR 0 1
36739: PPUSH
36740: LD_VAR 0 5
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: PPUSH
36749: LD_VAR 0 5
36753: PUSH
36754: LD_INT 2
36756: ARRAY
36757: PPUSH
36758: CALL_OW 111
// end ;
36762: LD_VAR 0 3
36766: RET
// export function PrepareApemanSoldier ( ) ; begin
36767: LD_INT 0
36769: PPUSH
// uc_nation := 0 ;
36770: LD_ADDR_OWVAR 21
36774: PUSH
36775: LD_INT 0
36777: ST_TO_ADDR
// hc_sex := sex_male ;
36778: LD_ADDR_OWVAR 27
36782: PUSH
36783: LD_INT 1
36785: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36786: LD_ADDR_OWVAR 28
36790: PUSH
36791: LD_INT 15
36793: ST_TO_ADDR
// hc_gallery :=  ;
36794: LD_ADDR_OWVAR 33
36798: PUSH
36799: LD_STRING 
36801: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36802: LD_ADDR_OWVAR 31
36806: PUSH
36807: LD_INT 0
36809: PPUSH
36810: LD_INT 3
36812: PPUSH
36813: CALL_OW 12
36817: PUSH
36818: LD_INT 0
36820: PPUSH
36821: LD_INT 3
36823: PPUSH
36824: CALL_OW 12
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// end ;
36841: LD_VAR 0 1
36845: RET
// export function PrepareApemanEngineer ( ) ; begin
36846: LD_INT 0
36848: PPUSH
// uc_nation := 0 ;
36849: LD_ADDR_OWVAR 21
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// hc_sex := sex_male ;
36857: LD_ADDR_OWVAR 27
36861: PUSH
36862: LD_INT 1
36864: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36865: LD_ADDR_OWVAR 28
36869: PUSH
36870: LD_INT 16
36872: ST_TO_ADDR
// hc_gallery :=  ;
36873: LD_ADDR_OWVAR 33
36877: PUSH
36878: LD_STRING 
36880: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36881: LD_ADDR_OWVAR 31
36885: PUSH
36886: LD_INT 0
36888: PPUSH
36889: LD_INT 3
36891: PPUSH
36892: CALL_OW 12
36896: PUSH
36897: LD_INT 0
36899: PPUSH
36900: LD_INT 3
36902: PPUSH
36903: CALL_OW 12
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// end ;
36920: LD_VAR 0 1
36924: RET
// export function PrepareApeman ( agressivity ) ; begin
36925: LD_INT 0
36927: PPUSH
// uc_side := 0 ;
36928: LD_ADDR_OWVAR 20
36932: PUSH
36933: LD_INT 0
36935: ST_TO_ADDR
// uc_nation := 0 ;
36936: LD_ADDR_OWVAR 21
36940: PUSH
36941: LD_INT 0
36943: ST_TO_ADDR
// hc_sex := sex_male ;
36944: LD_ADDR_OWVAR 27
36948: PUSH
36949: LD_INT 1
36951: ST_TO_ADDR
// hc_class := class_apeman ;
36952: LD_ADDR_OWVAR 28
36956: PUSH
36957: LD_INT 12
36959: ST_TO_ADDR
// hc_gallery :=  ;
36960: LD_ADDR_OWVAR 33
36964: PUSH
36965: LD_STRING 
36967: ST_TO_ADDR
// if agressivity = 0 then
36968: LD_VAR 0 1
36972: PUSH
36973: LD_INT 0
36975: EQUAL
36976: IFFALSE 36988
// hc_agressivity := 0 else
36978: LD_ADDR_OWVAR 35
36982: PUSH
36983: LD_INT 0
36985: ST_TO_ADDR
36986: GO 37009
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36988: LD_ADDR_OWVAR 35
36992: PUSH
36993: LD_VAR 0 1
36997: NEG
36998: PPUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 12
37008: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37009: LD_ADDR_OWVAR 31
37013: PUSH
37014: LD_INT 0
37016: PPUSH
37017: LD_INT 3
37019: PPUSH
37020: CALL_OW 12
37024: PUSH
37025: LD_INT 0
37027: PPUSH
37028: LD_INT 3
37030: PPUSH
37031: CALL_OW 12
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// end ;
37048: LD_VAR 0 2
37052: RET
// export function PrepareTiger ( agressivity ) ; begin
37053: LD_INT 0
37055: PPUSH
// uc_side := 0 ;
37056: LD_ADDR_OWVAR 20
37060: PUSH
37061: LD_INT 0
37063: ST_TO_ADDR
// uc_nation := 0 ;
37064: LD_ADDR_OWVAR 21
37068: PUSH
37069: LD_INT 0
37071: ST_TO_ADDR
// hc_class := class_tiger ;
37072: LD_ADDR_OWVAR 28
37076: PUSH
37077: LD_INT 14
37079: ST_TO_ADDR
// hc_gallery :=  ;
37080: LD_ADDR_OWVAR 33
37084: PUSH
37085: LD_STRING 
37087: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37088: LD_ADDR_OWVAR 35
37092: PUSH
37093: LD_VAR 0 1
37097: NEG
37098: PPUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 12
37108: ST_TO_ADDR
// end ;
37109: LD_VAR 0 2
37113: RET
// export function PrepareEnchidna ( ) ; begin
37114: LD_INT 0
37116: PPUSH
// uc_side := 0 ;
37117: LD_ADDR_OWVAR 20
37121: PUSH
37122: LD_INT 0
37124: ST_TO_ADDR
// uc_nation := 0 ;
37125: LD_ADDR_OWVAR 21
37129: PUSH
37130: LD_INT 0
37132: ST_TO_ADDR
// hc_class := class_baggie ;
37133: LD_ADDR_OWVAR 28
37137: PUSH
37138: LD_INT 13
37140: ST_TO_ADDR
// hc_gallery :=  ;
37141: LD_ADDR_OWVAR 33
37145: PUSH
37146: LD_STRING 
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 1
37153: RET
// export function PrepareFrog ( ) ; begin
37154: LD_INT 0
37156: PPUSH
// uc_side := 0 ;
37157: LD_ADDR_OWVAR 20
37161: PUSH
37162: LD_INT 0
37164: ST_TO_ADDR
// uc_nation := 0 ;
37165: LD_ADDR_OWVAR 21
37169: PUSH
37170: LD_INT 0
37172: ST_TO_ADDR
// hc_class := class_frog ;
37173: LD_ADDR_OWVAR 28
37177: PUSH
37178: LD_INT 19
37180: ST_TO_ADDR
// hc_gallery :=  ;
37181: LD_ADDR_OWVAR 33
37185: PUSH
37186: LD_STRING 
37188: ST_TO_ADDR
// end ;
37189: LD_VAR 0 1
37193: RET
// export function PrepareFish ( ) ; begin
37194: LD_INT 0
37196: PPUSH
// uc_side := 0 ;
37197: LD_ADDR_OWVAR 20
37201: PUSH
37202: LD_INT 0
37204: ST_TO_ADDR
// uc_nation := 0 ;
37205: LD_ADDR_OWVAR 21
37209: PUSH
37210: LD_INT 0
37212: ST_TO_ADDR
// hc_class := class_fish ;
37213: LD_ADDR_OWVAR 28
37217: PUSH
37218: LD_INT 20
37220: ST_TO_ADDR
// hc_gallery :=  ;
37221: LD_ADDR_OWVAR 33
37225: PUSH
37226: LD_STRING 
37228: ST_TO_ADDR
// end ;
37229: LD_VAR 0 1
37233: RET
// export function PrepareBird ( ) ; begin
37234: LD_INT 0
37236: PPUSH
// uc_side := 0 ;
37237: LD_ADDR_OWVAR 20
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// uc_nation := 0 ;
37245: LD_ADDR_OWVAR 21
37249: PUSH
37250: LD_INT 0
37252: ST_TO_ADDR
// hc_class := class_phororhacos ;
37253: LD_ADDR_OWVAR 28
37257: PUSH
37258: LD_INT 18
37260: ST_TO_ADDR
// hc_gallery :=  ;
37261: LD_ADDR_OWVAR 33
37265: PUSH
37266: LD_STRING 
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 1
37273: RET
// export function PrepareHorse ( ) ; begin
37274: LD_INT 0
37276: PPUSH
// uc_side := 0 ;
37277: LD_ADDR_OWVAR 20
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
// uc_nation := 0 ;
37285: LD_ADDR_OWVAR 21
37289: PUSH
37290: LD_INT 0
37292: ST_TO_ADDR
// hc_class := class_horse ;
37293: LD_ADDR_OWVAR 28
37297: PUSH
37298: LD_INT 21
37300: ST_TO_ADDR
// hc_gallery :=  ;
37301: LD_ADDR_OWVAR 33
37305: PUSH
37306: LD_STRING 
37308: ST_TO_ADDR
// end ;
37309: LD_VAR 0 1
37313: RET
// export function PrepareMastodont ( ) ; begin
37314: LD_INT 0
37316: PPUSH
// uc_side := 0 ;
37317: LD_ADDR_OWVAR 20
37321: PUSH
37322: LD_INT 0
37324: ST_TO_ADDR
// uc_nation := 0 ;
37325: LD_ADDR_OWVAR 21
37329: PUSH
37330: LD_INT 0
37332: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37333: LD_ADDR_OWVAR 37
37337: PUSH
37338: LD_INT 31
37340: ST_TO_ADDR
// vc_control := control_rider ;
37341: LD_ADDR_OWVAR 38
37345: PUSH
37346: LD_INT 4
37348: ST_TO_ADDR
// end ;
37349: LD_VAR 0 1
37353: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37354: LD_INT 0
37356: PPUSH
37357: PPUSH
37358: PPUSH
// uc_side = 0 ;
37359: LD_ADDR_OWVAR 20
37363: PUSH
37364: LD_INT 0
37366: ST_TO_ADDR
// uc_nation = 0 ;
37367: LD_ADDR_OWVAR 21
37371: PUSH
37372: LD_INT 0
37374: ST_TO_ADDR
// InitHc_All ( ) ;
37375: CALL_OW 584
// InitVc ;
37379: CALL_OW 20
// if mastodonts then
37383: LD_VAR 0 6
37387: IFFALSE 37454
// for i = 1 to mastodonts do
37389: LD_ADDR_VAR 0 11
37393: PUSH
37394: DOUBLE
37395: LD_INT 1
37397: DEC
37398: ST_TO_ADDR
37399: LD_VAR 0 6
37403: PUSH
37404: FOR_TO
37405: IFFALSE 37452
// begin vc_chassis := 31 ;
37407: LD_ADDR_OWVAR 37
37411: PUSH
37412: LD_INT 31
37414: ST_TO_ADDR
// vc_control := control_rider ;
37415: LD_ADDR_OWVAR 38
37419: PUSH
37420: LD_INT 4
37422: ST_TO_ADDR
// animal := CreateVehicle ;
37423: LD_ADDR_VAR 0 12
37427: PUSH
37428: CALL_OW 45
37432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37433: LD_VAR 0 12
37437: PPUSH
37438: LD_VAR 0 8
37442: PPUSH
37443: LD_INT 0
37445: PPUSH
37446: CALL 39582 0 3
// end ;
37450: GO 37404
37452: POP
37453: POP
// if horses then
37454: LD_VAR 0 5
37458: IFFALSE 37525
// for i = 1 to horses do
37460: LD_ADDR_VAR 0 11
37464: PUSH
37465: DOUBLE
37466: LD_INT 1
37468: DEC
37469: ST_TO_ADDR
37470: LD_VAR 0 5
37474: PUSH
37475: FOR_TO
37476: IFFALSE 37523
// begin hc_class := 21 ;
37478: LD_ADDR_OWVAR 28
37482: PUSH
37483: LD_INT 21
37485: ST_TO_ADDR
// hc_gallery :=  ;
37486: LD_ADDR_OWVAR 33
37490: PUSH
37491: LD_STRING 
37493: ST_TO_ADDR
// animal := CreateHuman ;
37494: LD_ADDR_VAR 0 12
37498: PUSH
37499: CALL_OW 44
37503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37504: LD_VAR 0 12
37508: PPUSH
37509: LD_VAR 0 8
37513: PPUSH
37514: LD_INT 0
37516: PPUSH
37517: CALL 39582 0 3
// end ;
37521: GO 37475
37523: POP
37524: POP
// if birds then
37525: LD_VAR 0 1
37529: IFFALSE 37596
// for i = 1 to birds do
37531: LD_ADDR_VAR 0 11
37535: PUSH
37536: DOUBLE
37537: LD_INT 1
37539: DEC
37540: ST_TO_ADDR
37541: LD_VAR 0 1
37545: PUSH
37546: FOR_TO
37547: IFFALSE 37594
// begin hc_class := 18 ;
37549: LD_ADDR_OWVAR 28
37553: PUSH
37554: LD_INT 18
37556: ST_TO_ADDR
// hc_gallery =  ;
37557: LD_ADDR_OWVAR 33
37561: PUSH
37562: LD_STRING 
37564: ST_TO_ADDR
// animal := CreateHuman ;
37565: LD_ADDR_VAR 0 12
37569: PUSH
37570: CALL_OW 44
37574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37575: LD_VAR 0 12
37579: PPUSH
37580: LD_VAR 0 8
37584: PPUSH
37585: LD_INT 0
37587: PPUSH
37588: CALL 39582 0 3
// end ;
37592: GO 37546
37594: POP
37595: POP
// if tigers then
37596: LD_VAR 0 2
37600: IFFALSE 37684
// for i = 1 to tigers do
37602: LD_ADDR_VAR 0 11
37606: PUSH
37607: DOUBLE
37608: LD_INT 1
37610: DEC
37611: ST_TO_ADDR
37612: LD_VAR 0 2
37616: PUSH
37617: FOR_TO
37618: IFFALSE 37682
// begin hc_class = class_tiger ;
37620: LD_ADDR_OWVAR 28
37624: PUSH
37625: LD_INT 14
37627: ST_TO_ADDR
// hc_gallery =  ;
37628: LD_ADDR_OWVAR 33
37632: PUSH
37633: LD_STRING 
37635: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37636: LD_ADDR_OWVAR 35
37640: PUSH
37641: LD_INT 7
37643: NEG
37644: PPUSH
37645: LD_INT 7
37647: PPUSH
37648: CALL_OW 12
37652: ST_TO_ADDR
// animal := CreateHuman ;
37653: LD_ADDR_VAR 0 12
37657: PUSH
37658: CALL_OW 44
37662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37663: LD_VAR 0 12
37667: PPUSH
37668: LD_VAR 0 8
37672: PPUSH
37673: LD_INT 0
37675: PPUSH
37676: CALL 39582 0 3
// end ;
37680: GO 37617
37682: POP
37683: POP
// if apemans then
37684: LD_VAR 0 3
37688: IFFALSE 37811
// for i = 1 to apemans do
37690: LD_ADDR_VAR 0 11
37694: PUSH
37695: DOUBLE
37696: LD_INT 1
37698: DEC
37699: ST_TO_ADDR
37700: LD_VAR 0 3
37704: PUSH
37705: FOR_TO
37706: IFFALSE 37809
// begin hc_class = class_apeman ;
37708: LD_ADDR_OWVAR 28
37712: PUSH
37713: LD_INT 12
37715: ST_TO_ADDR
// hc_gallery =  ;
37716: LD_ADDR_OWVAR 33
37720: PUSH
37721: LD_STRING 
37723: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37724: LD_ADDR_OWVAR 35
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PPUSH
37733: LD_INT 2
37735: PPUSH
37736: CALL_OW 12
37740: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37741: LD_ADDR_OWVAR 31
37745: PUSH
37746: LD_INT 1
37748: PPUSH
37749: LD_INT 3
37751: PPUSH
37752: CALL_OW 12
37756: PUSH
37757: LD_INT 1
37759: PPUSH
37760: LD_INT 3
37762: PPUSH
37763: CALL_OW 12
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// animal := CreateHuman ;
37780: LD_ADDR_VAR 0 12
37784: PUSH
37785: CALL_OW 44
37789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37790: LD_VAR 0 12
37794: PPUSH
37795: LD_VAR 0 8
37799: PPUSH
37800: LD_INT 0
37802: PPUSH
37803: CALL 39582 0 3
// end ;
37807: GO 37705
37809: POP
37810: POP
// if enchidnas then
37811: LD_VAR 0 4
37815: IFFALSE 37882
// for i = 1 to enchidnas do
37817: LD_ADDR_VAR 0 11
37821: PUSH
37822: DOUBLE
37823: LD_INT 1
37825: DEC
37826: ST_TO_ADDR
37827: LD_VAR 0 4
37831: PUSH
37832: FOR_TO
37833: IFFALSE 37880
// begin hc_class = 13 ;
37835: LD_ADDR_OWVAR 28
37839: PUSH
37840: LD_INT 13
37842: ST_TO_ADDR
// hc_gallery =  ;
37843: LD_ADDR_OWVAR 33
37847: PUSH
37848: LD_STRING 
37850: ST_TO_ADDR
// animal := CreateHuman ;
37851: LD_ADDR_VAR 0 12
37855: PUSH
37856: CALL_OW 44
37860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37861: LD_VAR 0 12
37865: PPUSH
37866: LD_VAR 0 8
37870: PPUSH
37871: LD_INT 0
37873: PPUSH
37874: CALL 39582 0 3
// end ;
37878: GO 37832
37880: POP
37881: POP
// if fishes then
37882: LD_VAR 0 7
37886: IFFALSE 37953
// for i = 1 to fishes do
37888: LD_ADDR_VAR 0 11
37892: PUSH
37893: DOUBLE
37894: LD_INT 1
37896: DEC
37897: ST_TO_ADDR
37898: LD_VAR 0 7
37902: PUSH
37903: FOR_TO
37904: IFFALSE 37951
// begin hc_class = 20 ;
37906: LD_ADDR_OWVAR 28
37910: PUSH
37911: LD_INT 20
37913: ST_TO_ADDR
// hc_gallery =  ;
37914: LD_ADDR_OWVAR 33
37918: PUSH
37919: LD_STRING 
37921: ST_TO_ADDR
// animal := CreateHuman ;
37922: LD_ADDR_VAR 0 12
37926: PUSH
37927: CALL_OW 44
37931: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37932: LD_VAR 0 12
37936: PPUSH
37937: LD_VAR 0 9
37941: PPUSH
37942: LD_INT 0
37944: PPUSH
37945: CALL 39582 0 3
// end ;
37949: GO 37903
37951: POP
37952: POP
// end ;
37953: LD_VAR 0 10
37957: RET
// export function WantHeal ( sci , unit ) ; begin
37958: LD_INT 0
37960: PPUSH
// if GetTaskList ( sci ) > 0 then
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 437
37970: PUSH
37971: LD_INT 0
37973: GREATER
37974: IFFALSE 38044
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 437
37985: PUSH
37986: LD_INT 1
37988: ARRAY
37989: PUSH
37990: LD_INT 1
37992: ARRAY
37993: PUSH
37994: LD_STRING l
37996: EQUAL
37997: PUSH
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 437
38007: PUSH
38008: LD_INT 1
38010: ARRAY
38011: PUSH
38012: LD_INT 4
38014: ARRAY
38015: PUSH
38016: LD_VAR 0 2
38020: EQUAL
38021: AND
38022: IFFALSE 38034
// result := true else
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: LD_INT 1
38031: ST_TO_ADDR
38032: GO 38042
// result := false ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_INT 0
38041: ST_TO_ADDR
// end else
38042: GO 38052
// result := false ;
38044: LD_ADDR_VAR 0 3
38048: PUSH
38049: LD_INT 0
38051: ST_TO_ADDR
// end ;
38052: LD_VAR 0 3
38056: RET
// export function HealTarget ( sci ) ; begin
38057: LD_INT 0
38059: PPUSH
// if not sci then
38060: LD_VAR 0 1
38064: NOT
38065: IFFALSE 38069
// exit ;
38067: GO 38134
// result := 0 ;
38069: LD_ADDR_VAR 0 2
38073: PUSH
38074: LD_INT 0
38076: ST_TO_ADDR
// if GetTaskList ( sci ) then
38077: LD_VAR 0 1
38081: PPUSH
38082: CALL_OW 437
38086: IFFALSE 38134
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL_OW 437
38097: PUSH
38098: LD_INT 1
38100: ARRAY
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: PUSH
38106: LD_STRING l
38108: EQUAL
38109: IFFALSE 38134
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38111: LD_ADDR_VAR 0 2
38115: PUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 437
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PUSH
38130: LD_INT 4
38132: ARRAY
38133: ST_TO_ADDR
// end ;
38134: LD_VAR 0 2
38138: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
// if not base_units then
38145: LD_VAR 0 1
38149: NOT
38150: IFFALSE 38154
// exit ;
38152: GO 38241
// result := false ;
38154: LD_ADDR_VAR 0 2
38158: PUSH
38159: LD_INT 0
38161: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38162: LD_ADDR_VAR 0 5
38166: PUSH
38167: LD_VAR 0 1
38171: PPUSH
38172: LD_INT 21
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 72
38186: ST_TO_ADDR
// if not tmp then
38187: LD_VAR 0 5
38191: NOT
38192: IFFALSE 38196
// exit ;
38194: GO 38241
// for i in tmp do
38196: LD_ADDR_VAR 0 3
38200: PUSH
38201: LD_VAR 0 5
38205: PUSH
38206: FOR_IN
38207: IFFALSE 38239
// begin result := EnemyInRange ( i , 22 ) ;
38209: LD_ADDR_VAR 0 2
38213: PUSH
38214: LD_VAR 0 3
38218: PPUSH
38219: LD_INT 22
38221: PPUSH
38222: CALL 35819 0 2
38226: ST_TO_ADDR
// if result then
38227: LD_VAR 0 2
38231: IFFALSE 38237
// exit ;
38233: POP
38234: POP
38235: GO 38241
// end ;
38237: GO 38206
38239: POP
38240: POP
// end ;
38241: LD_VAR 0 2
38245: RET
// export function FilterByTag ( units , tag ) ; begin
38246: LD_INT 0
38248: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38249: LD_ADDR_VAR 0 3
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: LD_INT 120
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PPUSH
38271: CALL_OW 72
38275: ST_TO_ADDR
// end ;
38276: LD_VAR 0 3
38280: RET
// export function IsDriver ( un ) ; begin
38281: LD_INT 0
38283: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38284: LD_ADDR_VAR 0 2
38288: PUSH
38289: LD_VAR 0 1
38293: PUSH
38294: LD_INT 55
38296: PUSH
38297: EMPTY
38298: LIST
38299: PPUSH
38300: CALL_OW 69
38304: IN
38305: ST_TO_ADDR
// end ;
38306: LD_VAR 0 2
38310: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38311: LD_INT 0
38313: PPUSH
38314: PPUSH
// list := [ ] ;
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: EMPTY
38321: ST_TO_ADDR
// case d of 0 :
38322: LD_VAR 0 3
38326: PUSH
38327: LD_INT 0
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38335
38333: GO 38468
38335: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38336: LD_ADDR_VAR 0 5
38340: PUSH
38341: LD_VAR 0 1
38345: PUSH
38346: LD_INT 4
38348: MINUS
38349: PUSH
38350: LD_VAR 0 2
38354: PUSH
38355: LD_INT 4
38357: MINUS
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: LD_VAR 0 1
38371: PUSH
38372: LD_INT 3
38374: MINUS
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: PUSH
38389: LD_VAR 0 1
38393: PUSH
38394: LD_INT 4
38396: PLUS
38397: PUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_INT 4
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PUSH
38411: LD_VAR 0 1
38415: PUSH
38416: LD_INT 3
38418: PLUS
38419: PUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 3
38427: PLUS
38428: PUSH
38429: LD_INT 5
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: PUSH
38437: LD_VAR 0 1
38441: PUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 4
38449: PLUS
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
// end ; 1 :
38466: GO 39166
38468: LD_INT 1
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38476
38474: GO 38609
38476: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38477: LD_ADDR_VAR 0 5
38481: PUSH
38482: LD_VAR 0 1
38486: PUSH
38487: LD_VAR 0 2
38491: PUSH
38492: LD_INT 4
38494: MINUS
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: LD_VAR 0 1
38508: PUSH
38509: LD_INT 3
38511: MINUS
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_INT 3
38520: MINUS
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_VAR 0 1
38534: PUSH
38535: LD_INT 4
38537: MINUS
38538: PUSH
38539: LD_VAR 0 2
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: PUSH
38552: LD_VAR 0 1
38556: PUSH
38557: LD_VAR 0 2
38561: PUSH
38562: LD_INT 3
38564: PLUS
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: PUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_INT 4
38581: PLUS
38582: PUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_INT 4
38590: PLUS
38591: PUSH
38592: LD_INT 5
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// end ; 2 :
38607: GO 39166
38609: LD_INT 2
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38617
38615: GO 38746
38617: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: LD_VAR 0 2
38632: PUSH
38633: LD_INT 3
38635: MINUS
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 4
38652: PLUS
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 4
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_VAR 0 2
38676: PUSH
38677: LD_INT 4
38679: PLUS
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: PUSH
38689: LD_VAR 0 1
38693: PUSH
38694: LD_INT 3
38696: MINUS
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: PUSH
38711: LD_VAR 0 1
38715: PUSH
38716: LD_INT 4
38718: MINUS
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 4
38727: MINUS
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
// end ; 3 :
38744: GO 39166
38746: LD_INT 3
38748: DOUBLE
38749: EQUAL
38750: IFTRUE 38754
38752: GO 38887
38754: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38755: LD_ADDR_VAR 0 5
38759: PUSH
38760: LD_VAR 0 1
38764: PUSH
38765: LD_INT 3
38767: PLUS
38768: PUSH
38769: LD_VAR 0 2
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_VAR 0 1
38786: PUSH
38787: LD_INT 4
38789: PLUS
38790: PUSH
38791: LD_VAR 0 2
38795: PUSH
38796: LD_INT 4
38798: PLUS
38799: PUSH
38800: LD_INT 5
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: PUSH
38808: LD_VAR 0 1
38812: PUSH
38813: LD_INT 4
38815: MINUS
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 4
38842: MINUS
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 3
38859: MINUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 3
38868: MINUS
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: ST_TO_ADDR
// end ; 4 :
38885: GO 39166
38887: LD_INT 4
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 39028
38895: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38896: LD_ADDR_VAR 0 5
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_INT 4
38913: PLUS
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: PUSH
38923: LD_VAR 0 1
38927: PUSH
38928: LD_INT 3
38930: PLUS
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 3
38939: PLUS
38940: PUSH
38941: LD_INT 5
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: LD_VAR 0 1
38953: PUSH
38954: LD_INT 4
38956: PLUS
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 4
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: LD_VAR 0 1
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 3
38983: MINUS
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: PUSH
38993: LD_VAR 0 1
38997: PUSH
38998: LD_INT 4
39000: MINUS
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 4
39009: MINUS
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: ST_TO_ADDR
// end ; 5 :
39026: GO 39166
39028: LD_INT 5
39030: DOUBLE
39031: EQUAL
39032: IFTRUE 39036
39034: GO 39165
39036: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 1
39046: PUSH
39047: LD_INT 4
39049: MINUS
39050: PUSH
39051: LD_VAR 0 2
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: PUSH
39064: LD_VAR 0 1
39068: PUSH
39069: LD_VAR 0 2
39073: PUSH
39074: LD_INT 4
39076: MINUS
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: LD_VAR 0 1
39090: PUSH
39091: LD_INT 4
39093: PLUS
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 4
39102: PLUS
39103: PUSH
39104: LD_INT 5
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_VAR 0 1
39116: PUSH
39117: LD_INT 3
39119: PLUS
39120: PUSH
39121: LD_VAR 0 2
39125: PUSH
39126: LD_INT 4
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: PUSH
39134: LD_VAR 0 1
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_INT 3
39146: PLUS
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: ST_TO_ADDR
// end ; end ;
39163: GO 39166
39165: POP
// result := list ;
39166: LD_ADDR_VAR 0 4
39170: PUSH
39171: LD_VAR 0 5
39175: ST_TO_ADDR
// end ;
39176: LD_VAR 0 4
39180: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
39185: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39186: LD_VAR 0 1
39190: NOT
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: LD_INT 4
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: IN
39215: NOT
39216: OR
39217: IFFALSE 39221
// exit ;
39219: GO 39304
// tmp := [ ] ;
39221: LD_ADDR_VAR 0 5
39225: PUSH
39226: EMPTY
39227: ST_TO_ADDR
// for i in units do
39228: LD_ADDR_VAR 0 4
39232: PUSH
39233: LD_VAR 0 1
39237: PUSH
39238: FOR_IN
39239: IFFALSE 39273
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39241: LD_ADDR_VAR 0 5
39245: PUSH
39246: LD_VAR 0 5
39250: PPUSH
39251: LD_VAR 0 4
39255: PPUSH
39256: LD_VAR 0 2
39260: PPUSH
39261: CALL_OW 259
39265: PPUSH
39266: CALL 40677 0 2
39270: ST_TO_ADDR
39271: GO 39238
39273: POP
39274: POP
// if not tmp then
39275: LD_VAR 0 5
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39304
// result := SortListByListDesc ( units , tmp ) ;
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: LD_VAR 0 5
39298: PPUSH
39299: CALL_OW 77
39303: ST_TO_ADDR
// end ;
39304: LD_VAR 0 3
39308: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39309: LD_INT 0
39311: PPUSH
39312: PPUSH
39313: PPUSH
// result := false ;
39314: LD_ADDR_VAR 0 3
39318: PUSH
39319: LD_INT 0
39321: ST_TO_ADDR
// if not building then
39322: LD_VAR 0 2
39326: NOT
39327: IFFALSE 39331
// exit ;
39329: GO 39469
// x := GetX ( building ) ;
39331: LD_ADDR_VAR 0 4
39335: PUSH
39336: LD_VAR 0 2
39340: PPUSH
39341: CALL_OW 250
39345: ST_TO_ADDR
// y := GetY ( building ) ;
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 2
39355: PPUSH
39356: CALL_OW 251
39360: ST_TO_ADDR
// if not x or not y then
39361: LD_VAR 0 4
39365: NOT
39366: PUSH
39367: LD_VAR 0 5
39371: NOT
39372: OR
39373: IFFALSE 39377
// exit ;
39375: GO 39469
// if GetTaskList ( unit ) then
39377: LD_VAR 0 1
39381: PPUSH
39382: CALL_OW 437
39386: IFFALSE 39469
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39388: LD_STRING e
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 437
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: EQUAL
39409: PUSH
39410: LD_VAR 0 4
39414: PUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 437
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: EQUAL
39433: AND
39434: PUSH
39435: LD_VAR 0 5
39439: PUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL_OW 437
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PUSH
39454: LD_INT 3
39456: ARRAY
39457: EQUAL
39458: AND
39459: IFFALSE 39469
// result := true end ;
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: LD_INT 1
39468: ST_TO_ADDR
// end ;
39469: LD_VAR 0 3
39473: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39474: LD_INT 0
39476: PPUSH
// result := false ;
39477: LD_ADDR_VAR 0 4
39481: PUSH
39482: LD_INT 0
39484: ST_TO_ADDR
// if GetTaskList ( unit ) then
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 437
39494: IFFALSE 39577
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39496: LD_STRING M
39498: PUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 437
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: EQUAL
39517: PUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 437
39532: PUSH
39533: LD_INT 1
39535: ARRAY
39536: PUSH
39537: LD_INT 2
39539: ARRAY
39540: EQUAL
39541: AND
39542: PUSH
39543: LD_VAR 0 3
39547: PUSH
39548: LD_VAR 0 1
39552: PPUSH
39553: CALL_OW 437
39557: PUSH
39558: LD_INT 1
39560: ARRAY
39561: PUSH
39562: LD_INT 3
39564: ARRAY
39565: EQUAL
39566: AND
39567: IFFALSE 39577
// result := true ;
39569: LD_ADDR_VAR 0 4
39573: PUSH
39574: LD_INT 1
39576: ST_TO_ADDR
// end ; end ;
39577: LD_VAR 0 4
39581: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39582: LD_INT 0
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
// if not unit or not area then
39588: LD_VAR 0 1
39592: NOT
39593: PUSH
39594: LD_VAR 0 2
39598: NOT
39599: OR
39600: IFFALSE 39604
// exit ;
39602: GO 39780
// tmp := AreaToList ( area , i ) ;
39604: LD_ADDR_VAR 0 6
39608: PUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: LD_VAR 0 5
39618: PPUSH
39619: CALL_OW 517
39623: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: DOUBLE
39630: LD_INT 1
39632: DEC
39633: ST_TO_ADDR
39634: LD_VAR 0 6
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PUSH
39643: FOR_TO
39644: IFFALSE 39778
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39646: LD_ADDR_VAR 0 7
39650: PUSH
39651: LD_VAR 0 6
39655: PUSH
39656: LD_INT 1
39658: ARRAY
39659: PUSH
39660: LD_VAR 0 5
39664: ARRAY
39665: PUSH
39666: LD_VAR 0 6
39670: PUSH
39671: LD_INT 2
39673: ARRAY
39674: PUSH
39675: LD_VAR 0 5
39679: ARRAY
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39685: LD_INT 92
39687: PUSH
39688: LD_VAR 0 7
39692: PUSH
39693: LD_INT 1
39695: ARRAY
39696: PUSH
39697: LD_VAR 0 7
39701: PUSH
39702: LD_INT 2
39704: ARRAY
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: PPUSH
39715: CALL_OW 69
39719: PUSH
39720: LD_INT 0
39722: EQUAL
39723: IFFALSE 39776
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39725: LD_VAR 0 1
39729: PPUSH
39730: LD_VAR 0 7
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: PPUSH
39739: LD_VAR 0 7
39743: PUSH
39744: LD_INT 2
39746: ARRAY
39747: PPUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: CALL_OW 48
// result := IsPlaced ( unit ) ;
39757: LD_ADDR_VAR 0 4
39761: PUSH
39762: LD_VAR 0 1
39766: PPUSH
39767: CALL_OW 305
39771: ST_TO_ADDR
// exit ;
39772: POP
39773: POP
39774: GO 39780
// end ; end ;
39776: GO 39643
39778: POP
39779: POP
// end ;
39780: LD_VAR 0 4
39784: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
// if not side or side > 8 then
39790: LD_VAR 0 1
39794: NOT
39795: PUSH
39796: LD_VAR 0 1
39800: PUSH
39801: LD_INT 8
39803: GREATER
39804: OR
39805: IFFALSE 39809
// exit ;
39807: GO 39996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39809: LD_ADDR_VAR 0 4
39813: PUSH
39814: LD_INT 22
39816: PUSH
39817: LD_VAR 0 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 21
39828: PUSH
39829: LD_INT 3
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PPUSH
39840: CALL_OW 69
39844: ST_TO_ADDR
// if not tmp then
39845: LD_VAR 0 4
39849: NOT
39850: IFFALSE 39854
// exit ;
39852: GO 39996
// enable_addtolog := true ;
39854: LD_ADDR_OWVAR 81
39858: PUSH
39859: LD_INT 1
39861: ST_TO_ADDR
// AddToLog ( [ ) ;
39862: LD_STRING [
39864: PPUSH
39865: CALL_OW 561
// for i in tmp do
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_VAR 0 4
39878: PUSH
39879: FOR_IN
39880: IFFALSE 39987
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39882: LD_STRING [
39884: PUSH
39885: LD_VAR 0 3
39889: PPUSH
39890: CALL_OW 266
39894: STR
39895: PUSH
39896: LD_STRING , 
39898: STR
39899: PUSH
39900: LD_VAR 0 3
39904: PPUSH
39905: CALL_OW 250
39909: STR
39910: PUSH
39911: LD_STRING , 
39913: STR
39914: PUSH
39915: LD_VAR 0 3
39919: PPUSH
39920: CALL_OW 251
39924: STR
39925: PUSH
39926: LD_STRING , 
39928: STR
39929: PUSH
39930: LD_VAR 0 3
39934: PPUSH
39935: CALL_OW 254
39939: STR
39940: PUSH
39941: LD_STRING , 
39943: STR
39944: PUSH
39945: LD_VAR 0 3
39949: PPUSH
39950: LD_INT 1
39952: PPUSH
39953: CALL_OW 268
39957: STR
39958: PUSH
39959: LD_STRING , 
39961: STR
39962: PUSH
39963: LD_VAR 0 3
39967: PPUSH
39968: LD_INT 2
39970: PPUSH
39971: CALL_OW 268
39975: STR
39976: PUSH
39977: LD_STRING ],
39979: STR
39980: PPUSH
39981: CALL_OW 561
// end ;
39985: GO 39879
39987: POP
39988: POP
// AddToLog ( ]; ) ;
39989: LD_STRING ];
39991: PPUSH
39992: CALL_OW 561
// end ;
39996: LD_VAR 0 2
40000: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40001: LD_INT 0
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
// if not area or not rate or not max then
40008: LD_VAR 0 1
40012: NOT
40013: PUSH
40014: LD_VAR 0 2
40018: NOT
40019: OR
40020: PUSH
40021: LD_VAR 0 4
40025: NOT
40026: OR
40027: IFFALSE 40031
// exit ;
40029: GO 40220
// while 1 do
40031: LD_INT 1
40033: IFFALSE 40220
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40035: LD_ADDR_VAR 0 9
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: LD_INT 1
40047: PPUSH
40048: CALL_OW 287
40052: PUSH
40053: LD_INT 10
40055: MUL
40056: ST_TO_ADDR
// r := rate / 10 ;
40057: LD_ADDR_VAR 0 7
40061: PUSH
40062: LD_VAR 0 2
40066: PUSH
40067: LD_INT 10
40069: DIVREAL
40070: ST_TO_ADDR
// time := 1 1$00 ;
40071: LD_ADDR_VAR 0 8
40075: PUSH
40076: LD_INT 2100
40078: ST_TO_ADDR
// if amount < min then
40079: LD_VAR 0 9
40083: PUSH
40084: LD_VAR 0 3
40088: LESS
40089: IFFALSE 40107
// r := r * 2 else
40091: LD_ADDR_VAR 0 7
40095: PUSH
40096: LD_VAR 0 7
40100: PUSH
40101: LD_INT 2
40103: MUL
40104: ST_TO_ADDR
40105: GO 40133
// if amount > max then
40107: LD_VAR 0 9
40111: PUSH
40112: LD_VAR 0 4
40116: GREATER
40117: IFFALSE 40133
// r := r / 2 ;
40119: LD_ADDR_VAR 0 7
40123: PUSH
40124: LD_VAR 0 7
40128: PUSH
40129: LD_INT 2
40131: DIVREAL
40132: ST_TO_ADDR
// time := time / r ;
40133: LD_ADDR_VAR 0 8
40137: PUSH
40138: LD_VAR 0 8
40142: PUSH
40143: LD_VAR 0 7
40147: DIVREAL
40148: ST_TO_ADDR
// if time < 0 then
40149: LD_VAR 0 8
40153: PUSH
40154: LD_INT 0
40156: LESS
40157: IFFALSE 40174
// time := time * - 1 ;
40159: LD_ADDR_VAR 0 8
40163: PUSH
40164: LD_VAR 0 8
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: MUL
40173: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40174: LD_VAR 0 8
40178: PUSH
40179: LD_INT 35
40181: PPUSH
40182: LD_INT 875
40184: PPUSH
40185: CALL_OW 12
40189: PLUS
40190: PPUSH
40191: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40195: LD_INT 1
40197: PPUSH
40198: LD_INT 5
40200: PPUSH
40201: CALL_OW 12
40205: PPUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: LD_INT 1
40213: PPUSH
40214: CALL_OW 55
// end ;
40218: GO 40031
// end ;
40220: LD_VAR 0 5
40224: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40225: LD_INT 0
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
// if not turrets or not factories then
40235: LD_VAR 0 1
40239: NOT
40240: PUSH
40241: LD_VAR 0 2
40245: NOT
40246: OR
40247: IFFALSE 40251
// exit ;
40249: GO 40558
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40251: LD_ADDR_VAR 0 10
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: LD_INT 6
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 4
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: LD_INT 5
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 24
40293: PUSH
40294: LD_INT 25
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 23
40303: PUSH
40304: LD_INT 27
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 42
40317: PUSH
40318: LD_INT 43
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 44
40327: PUSH
40328: LD_INT 46
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 45
40337: PUSH
40338: LD_INT 47
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
// result := [ ] ;
40355: LD_ADDR_VAR 0 3
40359: PUSH
40360: EMPTY
40361: ST_TO_ADDR
// for i in turrets do
40362: LD_ADDR_VAR 0 4
40366: PUSH
40367: LD_VAR 0 1
40371: PUSH
40372: FOR_IN
40373: IFFALSE 40556
// begin nat := GetNation ( i ) ;
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_VAR 0 4
40384: PPUSH
40385: CALL_OW 248
40389: ST_TO_ADDR
// weapon := 0 ;
40390: LD_ADDR_VAR 0 8
40394: PUSH
40395: LD_INT 0
40397: ST_TO_ADDR
// if not nat then
40398: LD_VAR 0 7
40402: NOT
40403: IFFALSE 40407
// continue ;
40405: GO 40372
// for j in list [ nat ] do
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: LD_VAR 0 10
40416: PUSH
40417: LD_VAR 0 7
40421: ARRAY
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40465
// if GetBWeapon ( i ) = j [ 1 ] then
40426: LD_VAR 0 4
40430: PPUSH
40431: CALL_OW 269
40435: PUSH
40436: LD_VAR 0 5
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: EQUAL
40445: IFFALSE 40463
// begin weapon := j [ 2 ] ;
40447: LD_ADDR_VAR 0 8
40451: PUSH
40452: LD_VAR 0 5
40456: PUSH
40457: LD_INT 2
40459: ARRAY
40460: ST_TO_ADDR
// break ;
40461: GO 40465
// end ;
40463: GO 40423
40465: POP
40466: POP
// if not weapon then
40467: LD_VAR 0 8
40471: NOT
40472: IFFALSE 40476
// continue ;
40474: GO 40372
// for k in factories do
40476: LD_ADDR_VAR 0 6
40480: PUSH
40481: LD_VAR 0 2
40485: PUSH
40486: FOR_IN
40487: IFFALSE 40552
// begin weapons := AvailableWeaponList ( k ) ;
40489: LD_ADDR_VAR 0 9
40493: PUSH
40494: LD_VAR 0 6
40498: PPUSH
40499: CALL_OW 478
40503: ST_TO_ADDR
// if not weapons then
40504: LD_VAR 0 9
40508: NOT
40509: IFFALSE 40513
// continue ;
40511: GO 40486
// if weapon in weapons then
40513: LD_VAR 0 8
40517: PUSH
40518: LD_VAR 0 9
40522: IN
40523: IFFALSE 40550
// begin result := [ i , weapon ] ;
40525: LD_ADDR_VAR 0 3
40529: PUSH
40530: LD_VAR 0 4
40534: PUSH
40535: LD_VAR 0 8
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// exit ;
40544: POP
40545: POP
40546: POP
40547: POP
40548: GO 40558
// end ; end ;
40550: GO 40486
40552: POP
40553: POP
// end ;
40554: GO 40372
40556: POP
40557: POP
// end ;
40558: LD_VAR 0 3
40562: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40563: LD_INT 0
40565: PPUSH
// if not side or side > 8 then
40566: LD_VAR 0 3
40570: NOT
40571: PUSH
40572: LD_VAR 0 3
40576: PUSH
40577: LD_INT 8
40579: GREATER
40580: OR
40581: IFFALSE 40585
// exit ;
40583: GO 40644
// if not range then
40585: LD_VAR 0 4
40589: NOT
40590: IFFALSE 40601
// range := - 12 ;
40592: LD_ADDR_VAR 0 4
40596: PUSH
40597: LD_INT 12
40599: NEG
40600: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40601: LD_VAR 0 1
40605: PPUSH
40606: LD_VAR 0 2
40610: PPUSH
40611: LD_VAR 0 3
40615: PPUSH
40616: LD_VAR 0 4
40620: PPUSH
40621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_VAR 0 2
40634: PPUSH
40635: LD_VAR 0 3
40639: PPUSH
40640: CALL_OW 331
// end ;
40644: LD_VAR 0 5
40648: RET
// export function Video ( mode ) ; begin
40649: LD_INT 0
40651: PPUSH
// ingame_video = mode ;
40652: LD_ADDR_OWVAR 52
40656: PUSH
40657: LD_VAR 0 1
40661: ST_TO_ADDR
// interface_hidden = mode ;
40662: LD_ADDR_OWVAR 54
40666: PUSH
40667: LD_VAR 0 1
40671: ST_TO_ADDR
// end ;
40672: LD_VAR 0 2
40676: RET
// export function Join ( array , element ) ; begin
40677: LD_INT 0
40679: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: LD_VAR 0 1
40694: PUSH
40695: LD_INT 1
40697: PLUS
40698: PPUSH
40699: LD_VAR 0 2
40703: PPUSH
40704: CALL_OW 1
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 3
40713: RET
// export function JoinUnion ( array , element ) ; begin
40714: LD_INT 0
40716: PPUSH
// result := array union element ;
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_VAR 0 1
40726: PUSH
40727: LD_VAR 0 2
40731: UNION
40732: ST_TO_ADDR
// end ;
40733: LD_VAR 0 3
40737: RET
// export function GetBehemoths ( side ) ; begin
40738: LD_INT 0
40740: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40741: LD_ADDR_VAR 0 2
40745: PUSH
40746: LD_INT 22
40748: PUSH
40749: LD_VAR 0 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 31
40760: PUSH
40761: LD_INT 25
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PPUSH
40772: CALL_OW 69
40776: ST_TO_ADDR
// end ;
40777: LD_VAR 0 2
40781: RET
// export function Shuffle ( array ) ; var i , index ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
40786: PPUSH
// result := [ ] ;
40787: LD_ADDR_VAR 0 2
40791: PUSH
40792: EMPTY
40793: ST_TO_ADDR
// if not array then
40794: LD_VAR 0 1
40798: NOT
40799: IFFALSE 40803
// exit ;
40801: GO 40902
// Randomize ;
40803: CALL_OW 10
// for i = array downto 1 do
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: DOUBLE
40813: LD_VAR 0 1
40817: INC
40818: ST_TO_ADDR
40819: LD_INT 1
40821: PUSH
40822: FOR_DOWNTO
40823: IFFALSE 40900
// begin index := rand ( 1 , array ) ;
40825: LD_ADDR_VAR 0 4
40829: PUSH
40830: LD_INT 1
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL_OW 12
40842: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40843: LD_ADDR_VAR 0 2
40847: PUSH
40848: LD_VAR 0 2
40852: PPUSH
40853: LD_VAR 0 2
40857: PUSH
40858: LD_INT 1
40860: PLUS
40861: PPUSH
40862: LD_VAR 0 1
40866: PUSH
40867: LD_VAR 0 4
40871: ARRAY
40872: PPUSH
40873: CALL_OW 2
40877: ST_TO_ADDR
// array := Delete ( array , index ) ;
40878: LD_ADDR_VAR 0 1
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: CALL_OW 3
40897: ST_TO_ADDR
// end ;
40898: GO 40822
40900: POP
40901: POP
// end ;
40902: LD_VAR 0 2
40906: RET
// export function GetBaseMaterials ( base ) ; begin
40907: LD_INT 0
40909: PPUSH
// result := [ 0 , 0 , 0 ] ;
40910: LD_ADDR_VAR 0 2
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: ST_TO_ADDR
// if not base then
40929: LD_VAR 0 1
40933: NOT
40934: IFFALSE 40938
// exit ;
40936: GO 40987
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40938: LD_ADDR_VAR 0 2
40942: PUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: LD_INT 1
40950: PPUSH
40951: CALL_OW 275
40955: PUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: LD_INT 2
40963: PPUSH
40964: CALL_OW 275
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: LD_INT 3
40976: PPUSH
40977: CALL_OW 275
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// end ;
40987: LD_VAR 0 2
40991: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
// result := array ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 1
41005: ST_TO_ADDR
// if size >= result then
41006: LD_VAR 0 2
41010: PUSH
41011: LD_VAR 0 3
41015: GREATEREQUAL
41016: IFFALSE 41020
// exit ;
41018: GO 41070
// if size then
41020: LD_VAR 0 2
41024: IFFALSE 41070
// for i := array downto size do
41026: LD_ADDR_VAR 0 4
41030: PUSH
41031: DOUBLE
41032: LD_VAR 0 1
41036: INC
41037: ST_TO_ADDR
41038: LD_VAR 0 2
41042: PUSH
41043: FOR_DOWNTO
41044: IFFALSE 41068
// result := Delete ( result , result ) ;
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_VAR 0 3
41055: PPUSH
41056: LD_VAR 0 3
41060: PPUSH
41061: CALL_OW 3
41065: ST_TO_ADDR
41066: GO 41043
41068: POP
41069: POP
// end ;
41070: LD_VAR 0 3
41074: RET
// export function ComExit ( unit ) ; var tmp ; begin
41075: LD_INT 0
41077: PPUSH
41078: PPUSH
// if not IsInUnit ( unit ) then
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 310
41088: NOT
41089: IFFALSE 41093
// exit ;
41091: GO 41153
// tmp := IsInUnit ( unit ) ;
41093: LD_ADDR_VAR 0 3
41097: PUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: CALL_OW 310
41107: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41108: LD_VAR 0 3
41112: PPUSH
41113: CALL_OW 247
41117: PUSH
41118: LD_INT 2
41120: EQUAL
41121: IFFALSE 41134
// ComExitVehicle ( unit ) else
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 121
41132: GO 41143
// ComExitBuilding ( unit ) ;
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 122
// result := tmp ;
41143: LD_ADDR_VAR 0 2
41147: PUSH
41148: LD_VAR 0 3
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 2
41157: RET
// export function ComExitAll ( units ) ; var i ; begin
41158: LD_INT 0
41160: PPUSH
41161: PPUSH
// if not units then
41162: LD_VAR 0 1
41166: NOT
41167: IFFALSE 41171
// exit ;
41169: GO 41197
// for i in units do
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_VAR 0 1
41180: PUSH
41181: FOR_IN
41182: IFFALSE 41195
// ComExit ( i ) ;
41184: LD_VAR 0 3
41188: PPUSH
41189: CALL 41075 0 1
41193: GO 41181
41195: POP
41196: POP
// end ;
41197: LD_VAR 0 2
41201: RET
// export function ResetHc ; begin
41202: LD_INT 0
41204: PPUSH
// InitHc ;
41205: CALL_OW 19
// hc_importance := 0 ;
41209: LD_ADDR_OWVAR 32
41213: PUSH
41214: LD_INT 0
41216: ST_TO_ADDR
// end ;
41217: LD_VAR 0 1
41221: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41222: LD_INT 0
41224: PPUSH
41225: PPUSH
41226: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41227: LD_ADDR_VAR 0 6
41231: PUSH
41232: LD_VAR 0 1
41236: PUSH
41237: LD_VAR 0 3
41241: PLUS
41242: PUSH
41243: LD_INT 2
41245: DIV
41246: ST_TO_ADDR
// if _x < 0 then
41247: LD_VAR 0 6
41251: PUSH
41252: LD_INT 0
41254: LESS
41255: IFFALSE 41272
// _x := _x * - 1 ;
41257: LD_ADDR_VAR 0 6
41261: PUSH
41262: LD_VAR 0 6
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: MUL
41271: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41272: LD_ADDR_VAR 0 7
41276: PUSH
41277: LD_VAR 0 2
41281: PUSH
41282: LD_VAR 0 4
41286: PLUS
41287: PUSH
41288: LD_INT 2
41290: DIV
41291: ST_TO_ADDR
// if _y < 0 then
41292: LD_VAR 0 7
41296: PUSH
41297: LD_INT 0
41299: LESS
41300: IFFALSE 41317
// _y := _y * - 1 ;
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: LD_VAR 0 7
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: MUL
41316: ST_TO_ADDR
// result := [ _x , _y ] ;
41317: LD_ADDR_VAR 0 5
41321: PUSH
41322: LD_VAR 0 6
41326: PUSH
41327: LD_VAR 0 7
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// end ;
41336: LD_VAR 0 5
41340: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41341: LD_INT 0
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
// task := GetTaskList ( unit ) ;
41347: LD_ADDR_VAR 0 7
41351: PUSH
41352: LD_VAR 0 1
41356: PPUSH
41357: CALL_OW 437
41361: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41362: LD_VAR 0 7
41366: NOT
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_VAR 0 2
41377: PPUSH
41378: CALL_OW 308
41382: NOT
41383: AND
41384: IFFALSE 41388
// exit ;
41386: GO 41506
// if IsInArea ( unit , area ) then
41388: LD_VAR 0 1
41392: PPUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: CALL_OW 308
41402: IFFALSE 41420
// begin ComMoveToArea ( unit , goAway ) ;
41404: LD_VAR 0 1
41408: PPUSH
41409: LD_VAR 0 3
41413: PPUSH
41414: CALL_OW 113
// exit ;
41418: GO 41506
// end ; if task [ 1 ] [ 1 ] <> M then
41420: LD_VAR 0 7
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: PUSH
41429: LD_INT 1
41431: ARRAY
41432: PUSH
41433: LD_STRING M
41435: NONEQUAL
41436: IFFALSE 41440
// exit ;
41438: GO 41506
// x := task [ 1 ] [ 2 ] ;
41440: LD_ADDR_VAR 0 5
41444: PUSH
41445: LD_VAR 0 7
41449: PUSH
41450: LD_INT 1
41452: ARRAY
41453: PUSH
41454: LD_INT 2
41456: ARRAY
41457: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41458: LD_ADDR_VAR 0 6
41462: PUSH
41463: LD_VAR 0 7
41467: PUSH
41468: LD_INT 1
41470: ARRAY
41471: PUSH
41472: LD_INT 3
41474: ARRAY
41475: ST_TO_ADDR
// if InArea ( x , y , area ) then
41476: LD_VAR 0 5
41480: PPUSH
41481: LD_VAR 0 6
41485: PPUSH
41486: LD_VAR 0 2
41490: PPUSH
41491: CALL_OW 309
41495: IFFALSE 41506
// ComStop ( unit ) ;
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 141
// end ;
41506: LD_VAR 0 4
41510: RET
// export function Abs ( value ) ; begin
41511: LD_INT 0
41513: PPUSH
// result := value ;
41514: LD_ADDR_VAR 0 2
41518: PUSH
41519: LD_VAR 0 1
41523: ST_TO_ADDR
// if value < 0 then
41524: LD_VAR 0 1
41528: PUSH
41529: LD_INT 0
41531: LESS
41532: IFFALSE 41549
// result := value * - 1 ;
41534: LD_ADDR_VAR 0 2
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: MUL
41548: ST_TO_ADDR
// end ;
41549: LD_VAR 0 2
41553: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41554: LD_INT 0
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
41563: PPUSH
// if not unit or not building then
41564: LD_VAR 0 1
41568: NOT
41569: PUSH
41570: LD_VAR 0 2
41574: NOT
41575: OR
41576: IFFALSE 41580
// exit ;
41578: GO 41806
// x := GetX ( building ) ;
41580: LD_ADDR_VAR 0 4
41584: PUSH
41585: LD_VAR 0 2
41589: PPUSH
41590: CALL_OW 250
41594: ST_TO_ADDR
// y := GetY ( building ) ;
41595: LD_ADDR_VAR 0 6
41599: PUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: CALL_OW 251
41609: ST_TO_ADDR
// d := GetDir ( building ) ;
41610: LD_ADDR_VAR 0 8
41614: PUSH
41615: LD_VAR 0 2
41619: PPUSH
41620: CALL_OW 254
41624: ST_TO_ADDR
// r := 4 ;
41625: LD_ADDR_VAR 0 9
41629: PUSH
41630: LD_INT 4
41632: ST_TO_ADDR
// for i := 1 to 5 do
41633: LD_ADDR_VAR 0 10
41637: PUSH
41638: DOUBLE
41639: LD_INT 1
41641: DEC
41642: ST_TO_ADDR
41643: LD_INT 5
41645: PUSH
41646: FOR_TO
41647: IFFALSE 41804
// begin _x := ShiftX ( x , d , r + i ) ;
41649: LD_ADDR_VAR 0 5
41653: PUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: LD_VAR 0 8
41663: PPUSH
41664: LD_VAR 0 9
41668: PUSH
41669: LD_VAR 0 10
41673: PLUS
41674: PPUSH
41675: CALL_OW 272
41679: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41680: LD_ADDR_VAR 0 7
41684: PUSH
41685: LD_VAR 0 6
41689: PPUSH
41690: LD_VAR 0 8
41694: PPUSH
41695: LD_VAR 0 9
41699: PUSH
41700: LD_VAR 0 10
41704: PLUS
41705: PPUSH
41706: CALL_OW 273
41710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41711: LD_VAR 0 5
41715: PPUSH
41716: LD_VAR 0 7
41720: PPUSH
41721: CALL_OW 488
41725: PUSH
41726: LD_VAR 0 5
41730: PPUSH
41731: LD_VAR 0 7
41735: PPUSH
41736: CALL_OW 428
41740: PPUSH
41741: CALL_OW 247
41745: PUSH
41746: LD_INT 3
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: IN
41756: NOT
41757: AND
41758: IFFALSE 41802
// begin ComMoveXY ( unit , _x , _y ) ;
41760: LD_VAR 0 1
41764: PPUSH
41765: LD_VAR 0 5
41769: PPUSH
41770: LD_VAR 0 7
41774: PPUSH
41775: CALL_OW 111
// result := [ _x , _y ] ;
41779: LD_ADDR_VAR 0 3
41783: PUSH
41784: LD_VAR 0 5
41788: PUSH
41789: LD_VAR 0 7
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// exit ;
41798: POP
41799: POP
41800: GO 41806
// end ; end ;
41802: GO 41646
41804: POP
41805: POP
// end ;
41806: LD_VAR 0 3
41810: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41811: LD_INT 0
41813: PPUSH
41814: PPUSH
41815: PPUSH
// result := 0 ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_INT 0
41823: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41824: LD_VAR 0 1
41828: PUSH
41829: LD_INT 0
41831: LESS
41832: PUSH
41833: LD_VAR 0 1
41837: PUSH
41838: LD_INT 8
41840: GREATER
41841: OR
41842: PUSH
41843: LD_VAR 0 2
41847: PUSH
41848: LD_INT 0
41850: LESS
41851: OR
41852: PUSH
41853: LD_VAR 0 2
41857: PUSH
41858: LD_INT 8
41860: GREATER
41861: OR
41862: IFFALSE 41866
// exit ;
41864: GO 41941
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41866: LD_ADDR_VAR 0 4
41870: PUSH
41871: LD_INT 22
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 69
41887: PUSH
41888: FOR_IN
41889: IFFALSE 41939
// begin un := UnitShoot ( i ) ;
41891: LD_ADDR_VAR 0 5
41895: PUSH
41896: LD_VAR 0 4
41900: PPUSH
41901: CALL_OW 504
41905: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41906: LD_VAR 0 5
41910: PPUSH
41911: CALL_OW 255
41915: PUSH
41916: LD_VAR 0 1
41920: EQUAL
41921: IFFALSE 41937
// begin result := un ;
41923: LD_ADDR_VAR 0 3
41927: PUSH
41928: LD_VAR 0 5
41932: ST_TO_ADDR
// exit ;
41933: POP
41934: POP
41935: GO 41941
// end ; end ;
41937: GO 41888
41939: POP
41940: POP
// end ;
41941: LD_VAR 0 3
41945: RET
// export function GetCargoBay ( units ) ; begin
41946: LD_INT 0
41948: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41949: LD_ADDR_VAR 0 2
41953: PUSH
41954: LD_VAR 0 1
41958: PPUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 34
41964: PUSH
41965: LD_INT 12
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 34
41974: PUSH
41975: LD_INT 51
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 34
41984: PUSH
41985: LD_INT 32
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 34
41994: PUSH
41995: LD_INT 89
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: PPUSH
42009: CALL_OW 72
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 2
42018: RET
// export function Negate ( value ) ; begin
42019: LD_INT 0
42021: PPUSH
// result := not value ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_VAR 0 1
42031: NOT
42032: ST_TO_ADDR
// end ;
42033: LD_VAR 0 2
42037: RET
// export function Inc ( value ) ; begin
42038: LD_INT 0
42040: PPUSH
// result := value + 1 ;
42041: LD_ADDR_VAR 0 2
42045: PUSH
42046: LD_VAR 0 1
42050: PUSH
42051: LD_INT 1
42053: PLUS
42054: ST_TO_ADDR
// end ;
42055: LD_VAR 0 2
42059: RET
// export function Dec ( value ) ; begin
42060: LD_INT 0
42062: PPUSH
// result := value - 1 ;
42063: LD_ADDR_VAR 0 2
42067: PUSH
42068: LD_VAR 0 1
42072: PUSH
42073: LD_INT 1
42075: MINUS
42076: ST_TO_ADDR
// end ;
42077: LD_VAR 0 2
42081: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42082: LD_INT 0
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42092: LD_VAR 0 1
42096: PPUSH
42097: LD_VAR 0 2
42101: PPUSH
42102: CALL_OW 488
42106: NOT
42107: PUSH
42108: LD_VAR 0 3
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 488
42122: NOT
42123: OR
42124: IFFALSE 42137
// begin result := - 1 ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: ST_TO_ADDR
// exit ;
42135: GO 42372
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42137: LD_ADDR_VAR 0 12
42141: PUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: LD_VAR 0 2
42151: PPUSH
42152: LD_VAR 0 3
42156: PPUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: CALL 41222 0 4
42166: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42167: LD_ADDR_VAR 0 11
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_VAR 0 12
42186: PUSH
42187: LD_INT 1
42189: ARRAY
42190: PPUSH
42191: LD_VAR 0 12
42195: PUSH
42196: LD_INT 2
42198: ARRAY
42199: PPUSH
42200: CALL_OW 298
42204: ST_TO_ADDR
// distance := 9999 ;
42205: LD_ADDR_VAR 0 10
42209: PUSH
42210: LD_INT 9999
42212: ST_TO_ADDR
// for i := 0 to 5 do
42213: LD_ADDR_VAR 0 6
42217: PUSH
42218: DOUBLE
42219: LD_INT 0
42221: DEC
42222: ST_TO_ADDR
42223: LD_INT 5
42225: PUSH
42226: FOR_TO
42227: IFFALSE 42370
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42229: LD_ADDR_VAR 0 7
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_VAR 0 6
42243: PPUSH
42244: LD_VAR 0 11
42248: PPUSH
42249: CALL_OW 272
42253: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42254: LD_ADDR_VAR 0 8
42258: PUSH
42259: LD_VAR 0 2
42263: PPUSH
42264: LD_VAR 0 6
42268: PPUSH
42269: LD_VAR 0 11
42273: PPUSH
42274: CALL_OW 273
42278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42279: LD_VAR 0 7
42283: PPUSH
42284: LD_VAR 0 8
42288: PPUSH
42289: CALL_OW 488
42293: NOT
42294: IFFALSE 42298
// continue ;
42296: GO 42226
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42298: LD_ADDR_VAR 0 9
42302: PUSH
42303: LD_VAR 0 12
42307: PUSH
42308: LD_INT 1
42310: ARRAY
42311: PPUSH
42312: LD_VAR 0 12
42316: PUSH
42317: LD_INT 2
42319: ARRAY
42320: PPUSH
42321: LD_VAR 0 7
42325: PPUSH
42326: LD_VAR 0 8
42330: PPUSH
42331: CALL_OW 298
42335: ST_TO_ADDR
// if tmp < distance then
42336: LD_VAR 0 9
42340: PUSH
42341: LD_VAR 0 10
42345: LESS
42346: IFFALSE 42368
// begin result := i ;
42348: LD_ADDR_VAR 0 5
42352: PUSH
42353: LD_VAR 0 6
42357: ST_TO_ADDR
// distance := tmp ;
42358: LD_ADDR_VAR 0 10
42362: PUSH
42363: LD_VAR 0 9
42367: ST_TO_ADDR
// end ; end ;
42368: GO 42226
42370: POP
42371: POP
// end ;
42372: LD_VAR 0 5
42376: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42377: LD_INT 0
42379: PPUSH
42380: PPUSH
// if not driver or not IsInUnit ( driver ) then
42381: LD_VAR 0 1
42385: NOT
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 310
42396: NOT
42397: OR
42398: IFFALSE 42402
// exit ;
42400: GO 42492
// vehicle := IsInUnit ( driver ) ;
42402: LD_ADDR_VAR 0 3
42406: PUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 310
42416: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42417: LD_VAR 0 1
42421: PPUSH
42422: LD_STRING \
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: PUSH
42452: LD_STRING E
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_VAR 0 3
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PPUSH
42488: CALL_OW 446
// end ;
42492: LD_VAR 0 2
42496: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42497: LD_INT 0
42499: PPUSH
42500: PPUSH
// if not driver or not IsInUnit ( driver ) then
42501: LD_VAR 0 1
42505: NOT
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 310
42516: NOT
42517: OR
42518: IFFALSE 42522
// exit ;
42520: GO 42612
// vehicle := IsInUnit ( driver ) ;
42522: LD_ADDR_VAR 0 3
42526: PUSH
42527: LD_VAR 0 1
42531: PPUSH
42532: CALL_OW 310
42536: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42537: LD_VAR 0 1
42541: PPUSH
42542: LD_STRING \
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: PUSH
42572: LD_STRING E
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_VAR 0 3
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PPUSH
42608: CALL_OW 447
// end ;
42612: LD_VAR 0 2
42616: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42617: LD_INT 0
42619: PPUSH
42620: PPUSH
42621: PPUSH
// tmp := [ ] ;
42622: LD_ADDR_VAR 0 5
42626: PUSH
42627: EMPTY
42628: ST_TO_ADDR
// for i in units do
42629: LD_ADDR_VAR 0 4
42633: PUSH
42634: LD_VAR 0 1
42638: PUSH
42639: FOR_IN
42640: IFFALSE 42678
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42642: LD_ADDR_VAR 0 5
42646: PUSH
42647: LD_VAR 0 5
42651: PPUSH
42652: LD_VAR 0 5
42656: PUSH
42657: LD_INT 1
42659: PLUS
42660: PPUSH
42661: LD_VAR 0 4
42665: PPUSH
42666: CALL_OW 256
42670: PPUSH
42671: CALL_OW 2
42675: ST_TO_ADDR
42676: GO 42639
42678: POP
42679: POP
// if not tmp then
42680: LD_VAR 0 5
42684: NOT
42685: IFFALSE 42689
// exit ;
42687: GO 42737
// if asc then
42689: LD_VAR 0 2
42693: IFFALSE 42717
// result := SortListByListAsc ( units , tmp ) else
42695: LD_ADDR_VAR 0 3
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: LD_VAR 0 5
42709: PPUSH
42710: CALL_OW 76
42714: ST_TO_ADDR
42715: GO 42737
// result := SortListByListDesc ( units , tmp ) ;
42717: LD_ADDR_VAR 0 3
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: LD_VAR 0 5
42731: PPUSH
42732: CALL_OW 77
42736: ST_TO_ADDR
// end ;
42737: LD_VAR 0 3
42741: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42742: LD_INT 0
42744: PPUSH
42745: PPUSH
// task := GetTaskList ( mech ) ;
42746: LD_ADDR_VAR 0 4
42750: PUSH
42751: LD_VAR 0 1
42755: PPUSH
42756: CALL_OW 437
42760: ST_TO_ADDR
// if not task then
42761: LD_VAR 0 4
42765: NOT
42766: IFFALSE 42770
// exit ;
42768: GO 42812
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_VAR 0 4
42779: PUSH
42780: LD_INT 1
42782: ARRAY
42783: PUSH
42784: LD_INT 1
42786: ARRAY
42787: PUSH
42788: LD_STRING r
42790: EQUAL
42791: PUSH
42792: LD_VAR 0 4
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PUSH
42801: LD_INT 4
42803: ARRAY
42804: PUSH
42805: LD_VAR 0 2
42809: EQUAL
42810: AND
42811: ST_TO_ADDR
// end ;
42812: LD_VAR 0 3
42816: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42817: LD_INT 0
42819: PPUSH
// SetDir ( unit , d ) ;
42820: LD_VAR 0 1
42824: PPUSH
42825: LD_VAR 0 4
42829: PPUSH
42830: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42834: LD_ADDR_VAR 0 6
42838: PUSH
42839: LD_VAR 0 1
42843: PPUSH
42844: LD_VAR 0 2
42848: PPUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: LD_VAR 0 5
42858: PPUSH
42859: CALL_OW 48
42863: ST_TO_ADDR
// end ;
42864: LD_VAR 0 6
42868: RET
// export function ToNaturalNumber ( number ) ; begin
42869: LD_INT 0
42871: PPUSH
// result := number div 1 ;
42872: LD_ADDR_VAR 0 2
42876: PUSH
42877: LD_VAR 0 1
42881: PUSH
42882: LD_INT 1
42884: DIV
42885: ST_TO_ADDR
// if number < 0 then
42886: LD_VAR 0 1
42890: PUSH
42891: LD_INT 0
42893: LESS
42894: IFFALSE 42904
// result := 0 ;
42896: LD_ADDR_VAR 0 2
42900: PUSH
42901: LD_INT 0
42903: ST_TO_ADDR
// end ;
42904: LD_VAR 0 2
42908: RET
// export function SortByClass ( units , class ) ; var un ; begin
42909: LD_INT 0
42911: PPUSH
42912: PPUSH
// if not units or not class then
42913: LD_VAR 0 1
42917: NOT
42918: PUSH
42919: LD_VAR 0 2
42923: NOT
42924: OR
42925: IFFALSE 42929
// exit ;
42927: GO 43024
// result := [ ] ;
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: EMPTY
42935: ST_TO_ADDR
// for un in units do
42936: LD_ADDR_VAR 0 4
42940: PUSH
42941: LD_VAR 0 1
42945: PUSH
42946: FOR_IN
42947: IFFALSE 43022
// if GetClass ( un ) = class then
42949: LD_VAR 0 4
42953: PPUSH
42954: CALL_OW 257
42958: PUSH
42959: LD_VAR 0 2
42963: EQUAL
42964: IFFALSE 42991
// result := Insert ( result , 1 , un ) else
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_VAR 0 3
42975: PPUSH
42976: LD_INT 1
42978: PPUSH
42979: LD_VAR 0 4
42983: PPUSH
42984: CALL_OW 2
42988: ST_TO_ADDR
42989: GO 43020
// result := Replace ( result , result + 1 , un ) ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_VAR 0 3
43000: PPUSH
43001: LD_VAR 0 3
43005: PUSH
43006: LD_INT 1
43008: PLUS
43009: PPUSH
43010: LD_VAR 0 4
43014: PPUSH
43015: CALL_OW 1
43019: ST_TO_ADDR
43020: GO 42946
43022: POP
43023: POP
// end ;
43024: LD_VAR 0 3
43028: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43029: LD_INT 0
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
// result := [ ] ;
43038: LD_ADDR_VAR 0 4
43042: PUSH
43043: EMPTY
43044: ST_TO_ADDR
// if x - r < 0 then
43045: LD_VAR 0 1
43049: PUSH
43050: LD_VAR 0 3
43054: MINUS
43055: PUSH
43056: LD_INT 0
43058: LESS
43059: IFFALSE 43071
// min_x := 0 else
43061: LD_ADDR_VAR 0 8
43065: PUSH
43066: LD_INT 0
43068: ST_TO_ADDR
43069: GO 43087
// min_x := x - r ;
43071: LD_ADDR_VAR 0 8
43075: PUSH
43076: LD_VAR 0 1
43080: PUSH
43081: LD_VAR 0 3
43085: MINUS
43086: ST_TO_ADDR
// if y - r < 0 then
43087: LD_VAR 0 2
43091: PUSH
43092: LD_VAR 0 3
43096: MINUS
43097: PUSH
43098: LD_INT 0
43100: LESS
43101: IFFALSE 43113
// min_y := 0 else
43103: LD_ADDR_VAR 0 7
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
43111: GO 43129
// min_y := y - r ;
43113: LD_ADDR_VAR 0 7
43117: PUSH
43118: LD_VAR 0 2
43122: PUSH
43123: LD_VAR 0 3
43127: MINUS
43128: ST_TO_ADDR
// max_x := x + r ;
43129: LD_ADDR_VAR 0 9
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_VAR 0 3
43143: PLUS
43144: ST_TO_ADDR
// max_y := y + r ;
43145: LD_ADDR_VAR 0 10
43149: PUSH
43150: LD_VAR 0 2
43154: PUSH
43155: LD_VAR 0 3
43159: PLUS
43160: ST_TO_ADDR
// for _x = min_x to max_x do
43161: LD_ADDR_VAR 0 5
43165: PUSH
43166: DOUBLE
43167: LD_VAR 0 8
43171: DEC
43172: ST_TO_ADDR
43173: LD_VAR 0 9
43177: PUSH
43178: FOR_TO
43179: IFFALSE 43280
// for _y = min_y to max_y do
43181: LD_ADDR_VAR 0 6
43185: PUSH
43186: DOUBLE
43187: LD_VAR 0 7
43191: DEC
43192: ST_TO_ADDR
43193: LD_VAR 0 10
43197: PUSH
43198: FOR_TO
43199: IFFALSE 43276
// begin if not ValidHex ( _x , _y ) then
43201: LD_VAR 0 5
43205: PPUSH
43206: LD_VAR 0 6
43210: PPUSH
43211: CALL_OW 488
43215: NOT
43216: IFFALSE 43220
// continue ;
43218: GO 43198
// if GetResourceTypeXY ( _x , _y ) then
43220: LD_VAR 0 5
43224: PPUSH
43225: LD_VAR 0 6
43229: PPUSH
43230: CALL_OW 283
43234: IFFALSE 43274
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43236: LD_ADDR_VAR 0 4
43240: PUSH
43241: LD_VAR 0 4
43245: PPUSH
43246: LD_VAR 0 4
43250: PUSH
43251: LD_INT 1
43253: PLUS
43254: PPUSH
43255: LD_VAR 0 5
43259: PUSH
43260: LD_VAR 0 6
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: CALL_OW 1
43273: ST_TO_ADDR
// end ;
43274: GO 43198
43276: POP
43277: POP
43278: GO 43178
43280: POP
43281: POP
// end ;
43282: LD_VAR 0 4
43286: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43287: LD_INT 0
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
// if not units then
43297: LD_VAR 0 1
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43834
// result := UnitFilter ( units , [ f_ok ] ) ;
43306: LD_ADDR_VAR 0 3
43310: PUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: LD_INT 50
43318: PUSH
43319: EMPTY
43320: LIST
43321: PPUSH
43322: CALL_OW 72
43326: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43327: LD_ADDR_VAR 0 8
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PPUSH
43341: CALL_OW 255
43345: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43346: LD_ADDR_VAR 0 10
43350: PUSH
43351: LD_INT 29
43353: PUSH
43354: LD_INT 91
43356: PUSH
43357: LD_INT 49
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// if not result then
43365: LD_VAR 0 3
43369: NOT
43370: IFFALSE 43374
// exit ;
43372: GO 43834
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: LD_INT 81
43381: PUSH
43382: LD_VAR 0 8
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PPUSH
43391: CALL_OW 69
43395: ST_TO_ADDR
// for i in result do
43396: LD_ADDR_VAR 0 4
43400: PUSH
43401: LD_VAR 0 3
43405: PUSH
43406: FOR_IN
43407: IFFALSE 43832
// begin tag := GetTag ( i ) + 1 ;
43409: LD_ADDR_VAR 0 9
43413: PUSH
43414: LD_VAR 0 4
43418: PPUSH
43419: CALL_OW 110
43423: PUSH
43424: LD_INT 1
43426: PLUS
43427: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43428: LD_ADDR_VAR 0 7
43432: PUSH
43433: LD_VAR 0 4
43437: PPUSH
43438: CALL_OW 250
43442: PPUSH
43443: LD_VAR 0 4
43447: PPUSH
43448: CALL_OW 251
43452: PPUSH
43453: LD_INT 4
43455: PPUSH
43456: CALL 43029 0 3
43460: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43461: LD_VAR 0 4
43465: PPUSH
43466: CALL_OW 247
43470: PUSH
43471: LD_INT 2
43473: EQUAL
43474: PUSH
43475: LD_VAR 0 7
43479: PUSH
43480: LD_INT 2
43482: GREATER
43483: AND
43484: PUSH
43485: LD_VAR 0 4
43489: PPUSH
43490: CALL_OW 264
43494: PUSH
43495: LD_VAR 0 10
43499: IN
43500: NOT
43501: AND
43502: IFFALSE 43541
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43504: LD_VAR 0 4
43508: PPUSH
43509: LD_VAR 0 7
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: PPUSH
43522: LD_VAR 0 7
43526: PUSH
43527: LD_INT 1
43529: ARRAY
43530: PUSH
43531: LD_INT 2
43533: ARRAY
43534: PPUSH
43535: CALL_OW 116
43539: GO 43830
// if path > tag then
43541: LD_VAR 0 2
43545: PUSH
43546: LD_VAR 0 9
43550: GREATER
43551: IFFALSE 43759
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43553: LD_ADDR_VAR 0 6
43557: PUSH
43558: LD_VAR 0 5
43562: PPUSH
43563: LD_INT 91
43565: PUSH
43566: LD_VAR 0 4
43570: PUSH
43571: LD_INT 8
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: PPUSH
43579: CALL_OW 72
43583: ST_TO_ADDR
// if nearEnemy then
43584: LD_VAR 0 6
43588: IFFALSE 43657
// begin if GetWeapon ( i ) = ru_time_lapser then
43590: LD_VAR 0 4
43594: PPUSH
43595: CALL_OW 264
43599: PUSH
43600: LD_INT 49
43602: EQUAL
43603: IFFALSE 43631
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43605: LD_VAR 0 4
43609: PPUSH
43610: LD_VAR 0 6
43614: PPUSH
43615: LD_VAR 0 4
43619: PPUSH
43620: CALL_OW 74
43624: PPUSH
43625: CALL_OW 112
43629: GO 43655
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43631: LD_VAR 0 4
43635: PPUSH
43636: LD_VAR 0 6
43640: PPUSH
43641: LD_VAR 0 4
43645: PPUSH
43646: CALL_OW 74
43650: PPUSH
43651: CALL 44905 0 2
// end else
43655: GO 43757
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43657: LD_VAR 0 4
43661: PPUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_VAR 0 9
43671: ARRAY
43672: PUSH
43673: LD_INT 1
43675: ARRAY
43676: PPUSH
43677: LD_VAR 0 2
43681: PUSH
43682: LD_VAR 0 9
43686: ARRAY
43687: PUSH
43688: LD_INT 2
43690: ARRAY
43691: PPUSH
43692: CALL_OW 297
43696: PUSH
43697: LD_INT 6
43699: GREATER
43700: IFFALSE 43743
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43702: LD_VAR 0 4
43706: PPUSH
43707: LD_VAR 0 2
43711: PUSH
43712: LD_VAR 0 9
43716: ARRAY
43717: PUSH
43718: LD_INT 1
43720: ARRAY
43721: PPUSH
43722: LD_VAR 0 2
43726: PUSH
43727: LD_VAR 0 9
43731: ARRAY
43732: PUSH
43733: LD_INT 2
43735: ARRAY
43736: PPUSH
43737: CALL_OW 114
43741: GO 43757
// SetTag ( i , tag ) ;
43743: LD_VAR 0 4
43747: PPUSH
43748: LD_VAR 0 9
43752: PPUSH
43753: CALL_OW 109
// end else
43757: GO 43830
// if enemy then
43759: LD_VAR 0 5
43763: IFFALSE 43830
// begin if GetWeapon ( i ) = ru_time_lapser then
43765: LD_VAR 0 4
43769: PPUSH
43770: CALL_OW 264
43774: PUSH
43775: LD_INT 49
43777: EQUAL
43778: IFFALSE 43806
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43780: LD_VAR 0 4
43784: PPUSH
43785: LD_VAR 0 5
43789: PPUSH
43790: LD_VAR 0 4
43794: PPUSH
43795: CALL_OW 74
43799: PPUSH
43800: CALL_OW 112
43804: GO 43830
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43806: LD_VAR 0 4
43810: PPUSH
43811: LD_VAR 0 5
43815: PPUSH
43816: LD_VAR 0 4
43820: PPUSH
43821: CALL_OW 74
43825: PPUSH
43826: CALL 44905 0 2
// end ; end ;
43830: GO 43406
43832: POP
43833: POP
// end ;
43834: LD_VAR 0 3
43838: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43839: LD_INT 0
43841: PPUSH
43842: PPUSH
43843: PPUSH
// if not unit or IsInUnit ( unit ) then
43844: LD_VAR 0 1
43848: NOT
43849: PUSH
43850: LD_VAR 0 1
43854: PPUSH
43855: CALL_OW 310
43859: OR
43860: IFFALSE 43864
// exit ;
43862: GO 43955
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43864: LD_ADDR_VAR 0 4
43868: PUSH
43869: LD_VAR 0 1
43873: PPUSH
43874: CALL_OW 250
43878: PPUSH
43879: LD_VAR 0 2
43883: PPUSH
43884: LD_INT 1
43886: PPUSH
43887: CALL_OW 272
43891: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43892: LD_ADDR_VAR 0 5
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 251
43906: PPUSH
43907: LD_VAR 0 2
43911: PPUSH
43912: LD_INT 1
43914: PPUSH
43915: CALL_OW 273
43919: ST_TO_ADDR
// if ValidHex ( x , y ) then
43920: LD_VAR 0 4
43924: PPUSH
43925: LD_VAR 0 5
43929: PPUSH
43930: CALL_OW 488
43934: IFFALSE 43955
// ComTurnXY ( unit , x , y ) ;
43936: LD_VAR 0 1
43940: PPUSH
43941: LD_VAR 0 4
43945: PPUSH
43946: LD_VAR 0 5
43950: PPUSH
43951: CALL_OW 118
// end ;
43955: LD_VAR 0 3
43959: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
// result := false ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 0
43971: ST_TO_ADDR
// if not units then
43972: LD_VAR 0 2
43976: NOT
43977: IFFALSE 43981
// exit ;
43979: GO 44026
// for i in units do
43981: LD_ADDR_VAR 0 4
43985: PUSH
43986: LD_VAR 0 2
43990: PUSH
43991: FOR_IN
43992: IFFALSE 44024
// if See ( side , i ) then
43994: LD_VAR 0 1
43998: PPUSH
43999: LD_VAR 0 4
44003: PPUSH
44004: CALL_OW 292
44008: IFFALSE 44022
// begin result := true ;
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_INT 1
44017: ST_TO_ADDR
// exit ;
44018: POP
44019: POP
44020: GO 44026
// end ;
44022: GO 43991
44024: POP
44025: POP
// end ;
44026: LD_VAR 0 3
44030: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
// if not unit or not points then
44037: LD_VAR 0 1
44041: NOT
44042: PUSH
44043: LD_VAR 0 2
44047: NOT
44048: OR
44049: IFFALSE 44053
// exit ;
44051: GO 44143
// dist := 99999 ;
44053: LD_ADDR_VAR 0 5
44057: PUSH
44058: LD_INT 99999
44060: ST_TO_ADDR
// for i in points do
44061: LD_ADDR_VAR 0 4
44065: PUSH
44066: LD_VAR 0 2
44070: PUSH
44071: FOR_IN
44072: IFFALSE 44141
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44074: LD_ADDR_VAR 0 6
44078: PUSH
44079: LD_VAR 0 1
44083: PPUSH
44084: LD_VAR 0 4
44088: PUSH
44089: LD_INT 1
44091: ARRAY
44092: PPUSH
44093: LD_VAR 0 4
44097: PUSH
44098: LD_INT 2
44100: ARRAY
44101: PPUSH
44102: CALL_OW 297
44106: ST_TO_ADDR
// if tmpDist < dist then
44107: LD_VAR 0 6
44111: PUSH
44112: LD_VAR 0 5
44116: LESS
44117: IFFALSE 44139
// begin result := i ;
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_VAR 0 4
44128: ST_TO_ADDR
// dist := tmpDist ;
44129: LD_ADDR_VAR 0 5
44133: PUSH
44134: LD_VAR 0 6
44138: ST_TO_ADDR
// end ; end ;
44139: GO 44071
44141: POP
44142: POP
// end ;
44143: LD_VAR 0 3
44147: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44148: LD_INT 0
44150: PPUSH
// uc_side := side ;
44151: LD_ADDR_OWVAR 20
44155: PUSH
44156: LD_VAR 0 1
44160: ST_TO_ADDR
// uc_nation := 3 ;
44161: LD_ADDR_OWVAR 21
44165: PUSH
44166: LD_INT 3
44168: ST_TO_ADDR
// vc_chassis := 25 ;
44169: LD_ADDR_OWVAR 37
44173: PUSH
44174: LD_INT 25
44176: ST_TO_ADDR
// vc_engine := engine_siberite ;
44177: LD_ADDR_OWVAR 39
44181: PUSH
44182: LD_INT 3
44184: ST_TO_ADDR
// vc_control := control_computer ;
44185: LD_ADDR_OWVAR 38
44189: PUSH
44190: LD_INT 3
44192: ST_TO_ADDR
// vc_weapon := 59 ;
44193: LD_ADDR_OWVAR 40
44197: PUSH
44198: LD_INT 59
44200: ST_TO_ADDR
// result := CreateVehicle ;
44201: LD_ADDR_VAR 0 5
44205: PUSH
44206: CALL_OW 45
44210: ST_TO_ADDR
// SetDir ( result , d ) ;
44211: LD_VAR 0 5
44215: PPUSH
44216: LD_VAR 0 4
44220: PPUSH
44221: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44225: LD_VAR 0 5
44229: PPUSH
44230: LD_VAR 0 2
44234: PPUSH
44235: LD_VAR 0 3
44239: PPUSH
44240: LD_INT 0
44242: PPUSH
44243: CALL_OW 48
// end ;
44247: LD_VAR 0 5
44251: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44252: LD_INT 0
44254: PPUSH
44255: PPUSH
44256: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44257: LD_ADDR_VAR 0 2
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44280: LD_VAR 0 1
44284: NOT
44285: PUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: CALL_OW 264
44295: PUSH
44296: LD_INT 12
44298: PUSH
44299: LD_INT 51
44301: PUSH
44302: LD_INT 32
44304: PUSH
44305: LD_INT 89
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: IN
44314: NOT
44315: OR
44316: IFFALSE 44320
// exit ;
44318: GO 44418
// for i := 1 to 3 do
44320: LD_ADDR_VAR 0 3
44324: PUSH
44325: DOUBLE
44326: LD_INT 1
44328: DEC
44329: ST_TO_ADDR
44330: LD_INT 3
44332: PUSH
44333: FOR_TO
44334: IFFALSE 44416
// begin tmp := GetCargo ( cargo , i ) ;
44336: LD_ADDR_VAR 0 4
44340: PUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 289
44355: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44356: LD_ADDR_VAR 0 2
44360: PUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_VAR 0 3
44370: PPUSH
44371: LD_VAR 0 4
44375: PPUSH
44376: CALL_OW 1
44380: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44381: LD_ADDR_VAR 0 2
44385: PUSH
44386: LD_VAR 0 2
44390: PPUSH
44391: LD_INT 4
44393: PPUSH
44394: LD_VAR 0 2
44398: PUSH
44399: LD_INT 4
44401: ARRAY
44402: PUSH
44403: LD_VAR 0 4
44407: PLUS
44408: PPUSH
44409: CALL_OW 1
44413: ST_TO_ADDR
// end ;
44414: GO 44333
44416: POP
44417: POP
// end ;
44418: LD_VAR 0 2
44422: RET
// export function Length ( array ) ; begin
44423: LD_INT 0
44425: PPUSH
// result := array + 0 ;
44426: LD_ADDR_VAR 0 2
44430: PUSH
44431: LD_VAR 0 1
44435: PUSH
44436: LD_INT 0
44438: PLUS
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 2
44444: RET
// export function PrepareArray ( array ) ; begin
44445: LD_INT 0
44447: PPUSH
// result := array diff 0 ;
44448: LD_ADDR_VAR 0 2
44452: PUSH
44453: LD_VAR 0 1
44457: PUSH
44458: LD_INT 0
44460: DIFF
44461: ST_TO_ADDR
// if not result [ 1 ] then
44462: LD_VAR 0 2
44466: PUSH
44467: LD_INT 1
44469: ARRAY
44470: NOT
44471: IFFALSE 44491
// result := Delete ( result , 1 ) ;
44473: LD_ADDR_VAR 0 2
44477: PUSH
44478: LD_VAR 0 2
44482: PPUSH
44483: LD_INT 1
44485: PPUSH
44486: CALL_OW 3
44490: ST_TO_ADDR
// end ;
44491: LD_VAR 0 2
44495: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
// sibRocketRange := 25 ;
44502: LD_ADDR_VAR 0 6
44506: PUSH
44507: LD_INT 25
44509: ST_TO_ADDR
// result := false ;
44510: LD_ADDR_VAR 0 4
44514: PUSH
44515: LD_INT 0
44517: ST_TO_ADDR
// for i := 0 to 5 do
44518: LD_ADDR_VAR 0 5
44522: PUSH
44523: DOUBLE
44524: LD_INT 0
44526: DEC
44527: ST_TO_ADDR
44528: LD_INT 5
44530: PUSH
44531: FOR_TO
44532: IFFALSE 44599
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44534: LD_VAR 0 1
44538: PPUSH
44539: LD_VAR 0 5
44543: PPUSH
44544: LD_VAR 0 6
44548: PPUSH
44549: CALL_OW 272
44553: PPUSH
44554: LD_VAR 0 2
44558: PPUSH
44559: LD_VAR 0 5
44563: PPUSH
44564: LD_VAR 0 6
44568: PPUSH
44569: CALL_OW 273
44573: PPUSH
44574: LD_VAR 0 3
44578: PPUSH
44579: CALL_OW 309
44583: IFFALSE 44597
// begin result := true ;
44585: LD_ADDR_VAR 0 4
44589: PUSH
44590: LD_INT 1
44592: ST_TO_ADDR
// exit ;
44593: POP
44594: POP
44595: GO 44601
// end ;
44597: GO 44531
44599: POP
44600: POP
// end ;
44601: LD_VAR 0 4
44605: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44606: LD_INT 0
44608: PPUSH
44609: PPUSH
44610: PPUSH
// if btype = b_depot then
44611: LD_VAR 0 2
44615: PUSH
44616: LD_INT 0
44618: EQUAL
44619: IFFALSE 44631
// begin result := true ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_INT 1
44628: ST_TO_ADDR
// exit ;
44629: GO 44747
// end ; pom := GetBase ( depot ) ;
44631: LD_ADDR_VAR 0 4
44635: PUSH
44636: LD_VAR 0 1
44640: PPUSH
44641: CALL_OW 274
44645: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44646: LD_ADDR_VAR 0 5
44650: PUSH
44651: LD_VAR 0 2
44655: PPUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: CALL_OW 248
44665: PPUSH
44666: CALL_OW 450
44670: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44671: LD_ADDR_VAR 0 3
44675: PUSH
44676: LD_VAR 0 4
44680: PPUSH
44681: LD_INT 1
44683: PPUSH
44684: CALL_OW 275
44688: PUSH
44689: LD_VAR 0 5
44693: PUSH
44694: LD_INT 1
44696: ARRAY
44697: GREATEREQUAL
44698: PUSH
44699: LD_VAR 0 4
44703: PPUSH
44704: LD_INT 2
44706: PPUSH
44707: CALL_OW 275
44711: PUSH
44712: LD_VAR 0 5
44716: PUSH
44717: LD_INT 2
44719: ARRAY
44720: GREATEREQUAL
44721: AND
44722: PUSH
44723: LD_VAR 0 4
44727: PPUSH
44728: LD_INT 3
44730: PPUSH
44731: CALL_OW 275
44735: PUSH
44736: LD_VAR 0 5
44740: PUSH
44741: LD_INT 3
44743: ARRAY
44744: GREATEREQUAL
44745: AND
44746: ST_TO_ADDR
// end ;
44747: LD_VAR 0 3
44751: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44752: LD_INT 0
44754: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44755: LD_VAR 0 1
44759: PPUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: LD_INT 0
44767: PPUSH
44768: LD_INT 0
44770: PPUSH
44771: LD_INT 1
44773: PPUSH
44774: LD_INT 0
44776: PPUSH
44777: CALL_OW 587
// end ;
44781: LD_VAR 0 3
44785: RET
// export function CenterOnNow ( unit ) ; begin
44786: LD_INT 0
44788: PPUSH
// result := IsInUnit ( unit ) ;
44789: LD_ADDR_VAR 0 2
44793: PUSH
44794: LD_VAR 0 1
44798: PPUSH
44799: CALL_OW 310
44803: ST_TO_ADDR
// if not result then
44804: LD_VAR 0 2
44808: NOT
44809: IFFALSE 44821
// result := unit ;
44811: LD_ADDR_VAR 0 2
44815: PUSH
44816: LD_VAR 0 1
44820: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 87
// end ;
44830: LD_VAR 0 2
44834: RET
// export function ComMoveHex ( unit , hex ) ; begin
44835: LD_INT 0
44837: PPUSH
// if not hex then
44838: LD_VAR 0 2
44842: NOT
44843: IFFALSE 44847
// exit ;
44845: GO 44900
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44847: LD_VAR 0 2
44851: PUSH
44852: LD_INT 1
44854: ARRAY
44855: PPUSH
44856: LD_VAR 0 2
44860: PUSH
44861: LD_INT 2
44863: ARRAY
44864: PPUSH
44865: CALL_OW 428
44869: IFFALSE 44873
// exit ;
44871: GO 44900
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44873: LD_VAR 0 1
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 1
44885: ARRAY
44886: PPUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_INT 2
44894: ARRAY
44895: PPUSH
44896: CALL_OW 111
// end ;
44900: LD_VAR 0 3
44904: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44905: LD_INT 0
44907: PPUSH
44908: PPUSH
44909: PPUSH
// if not unit or not enemy then
44910: LD_VAR 0 1
44914: NOT
44915: PUSH
44916: LD_VAR 0 2
44920: NOT
44921: OR
44922: IFFALSE 44926
// exit ;
44924: GO 45050
// x := GetX ( enemy ) ;
44926: LD_ADDR_VAR 0 4
44930: PUSH
44931: LD_VAR 0 2
44935: PPUSH
44936: CALL_OW 250
44940: ST_TO_ADDR
// y := GetY ( enemy ) ;
44941: LD_ADDR_VAR 0 5
44945: PUSH
44946: LD_VAR 0 2
44950: PPUSH
44951: CALL_OW 251
44955: ST_TO_ADDR
// if ValidHex ( x , y ) then
44956: LD_VAR 0 4
44960: PPUSH
44961: LD_VAR 0 5
44965: PPUSH
44966: CALL_OW 488
44970: IFFALSE 45050
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44972: LD_VAR 0 2
44976: PPUSH
44977: CALL_OW 247
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: IN
44992: PUSH
44993: LD_VAR 0 1
44997: PPUSH
44998: CALL_OW 255
45002: PPUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: CALL_OW 292
45012: OR
45013: IFFALSE 45031
// ComAttackUnit ( unit , enemy ) else
45015: LD_VAR 0 1
45019: PPUSH
45020: LD_VAR 0 2
45024: PPUSH
45025: CALL_OW 115
45029: GO 45050
// ComAgressiveMove ( unit , x , y ) ;
45031: LD_VAR 0 1
45035: PPUSH
45036: LD_VAR 0 4
45040: PPUSH
45041: LD_VAR 0 5
45045: PPUSH
45046: CALL_OW 114
// end ;
45050: LD_VAR 0 3
45054: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45055: LD_INT 0
45057: PPUSH
45058: PPUSH
45059: PPUSH
// list := AreaToList ( area , 0 ) ;
45060: LD_ADDR_VAR 0 5
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: LD_INT 0
45072: PPUSH
45073: CALL_OW 517
45077: ST_TO_ADDR
// if not list then
45078: LD_VAR 0 5
45082: NOT
45083: IFFALSE 45087
// exit ;
45085: GO 45217
// if all then
45087: LD_VAR 0 2
45091: IFFALSE 45179
// begin for i := 1 to list [ 1 ] do
45093: LD_ADDR_VAR 0 4
45097: PUSH
45098: DOUBLE
45099: LD_INT 1
45101: DEC
45102: ST_TO_ADDR
45103: LD_VAR 0 5
45107: PUSH
45108: LD_INT 1
45110: ARRAY
45111: PUSH
45112: FOR_TO
45113: IFFALSE 45175
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: LD_VAR 0 3
45129: PUSH
45130: LD_INT 1
45132: PLUS
45133: PPUSH
45134: LD_VAR 0 5
45138: PUSH
45139: LD_INT 1
45141: ARRAY
45142: PUSH
45143: LD_VAR 0 4
45147: ARRAY
45148: PUSH
45149: LD_VAR 0 5
45153: PUSH
45154: LD_INT 2
45156: ARRAY
45157: PUSH
45158: LD_VAR 0 4
45162: ARRAY
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PPUSH
45168: CALL_OW 1
45172: ST_TO_ADDR
45173: GO 45112
45175: POP
45176: POP
// exit ;
45177: GO 45217
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_VAR 0 5
45188: PUSH
45189: LD_INT 1
45191: ARRAY
45192: PUSH
45193: LD_INT 1
45195: ARRAY
45196: PUSH
45197: LD_VAR 0 5
45201: PUSH
45202: LD_INT 2
45204: ARRAY
45205: PUSH
45206: LD_INT 1
45208: ARRAY
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: ST_TO_ADDR
// end ;
45217: LD_VAR 0 3
45221: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45222: LD_INT 0
45224: PPUSH
45225: PPUSH
// list := AreaToList ( area , 0 ) ;
45226: LD_ADDR_VAR 0 4
45230: PUSH
45231: LD_VAR 0 1
45235: PPUSH
45236: LD_INT 0
45238: PPUSH
45239: CALL_OW 517
45243: ST_TO_ADDR
// if not list then
45244: LD_VAR 0 4
45248: NOT
45249: IFFALSE 45253
// exit ;
45251: GO 45294
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_VAR 0 4
45262: PUSH
45263: LD_INT 1
45265: ARRAY
45266: PUSH
45267: LD_INT 1
45269: ARRAY
45270: PUSH
45271: LD_VAR 0 4
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: PUSH
45280: LD_INT 1
45282: ARRAY
45283: PUSH
45284: LD_VAR 0 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// end ;
45294: LD_VAR 0 3
45298: RET
// export function First ( array ) ; begin
45299: LD_INT 0
45301: PPUSH
// if not array then
45302: LD_VAR 0 1
45306: NOT
45307: IFFALSE 45311
// exit ;
45309: GO 45325
// result := array [ 1 ] ;
45311: LD_ADDR_VAR 0 2
45315: PUSH
45316: LD_VAR 0 1
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: ST_TO_ADDR
// end ;
45325: LD_VAR 0 2
45329: RET
// export function Last ( array ) ; begin
45330: LD_INT 0
45332: PPUSH
// if not array then
45333: LD_VAR 0 1
45337: NOT
45338: IFFALSE 45342
// exit ;
45340: GO 45358
// result := array [ array ] ;
45342: LD_ADDR_VAR 0 2
45346: PUSH
45347: LD_VAR 0 1
45351: PUSH
45352: LD_VAR 0 1
45356: ARRAY
45357: ST_TO_ADDR
// end ;
45358: LD_VAR 0 2
45362: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45363: LD_INT 0
45365: PPUSH
45366: PPUSH
// result := [ ] ;
45367: LD_ADDR_VAR 0 5
45371: PUSH
45372: EMPTY
45373: ST_TO_ADDR
// if not array then
45374: LD_VAR 0 1
45378: NOT
45379: IFFALSE 45383
// exit ;
45381: GO 45495
// for i := 1 to array do
45383: LD_ADDR_VAR 0 6
45387: PUSH
45388: DOUBLE
45389: LD_INT 1
45391: DEC
45392: ST_TO_ADDR
45393: LD_VAR 0 1
45397: PUSH
45398: FOR_TO
45399: IFFALSE 45493
// if array [ i ] [ index ] = value then
45401: LD_VAR 0 1
45405: PUSH
45406: LD_VAR 0 6
45410: ARRAY
45411: PUSH
45412: LD_VAR 0 2
45416: ARRAY
45417: PUSH
45418: LD_VAR 0 3
45422: EQUAL
45423: IFFALSE 45491
// begin if indexColumn then
45425: LD_VAR 0 4
45429: IFFALSE 45465
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45431: LD_ADDR_VAR 0 5
45435: PUSH
45436: LD_VAR 0 5
45440: PPUSH
45441: LD_VAR 0 1
45445: PUSH
45446: LD_VAR 0 6
45450: ARRAY
45451: PUSH
45452: LD_VAR 0 4
45456: ARRAY
45457: PPUSH
45458: CALL 40677 0 2
45462: ST_TO_ADDR
45463: GO 45491
// result := Join ( result , array [ i ] ) ;
45465: LD_ADDR_VAR 0 5
45469: PUSH
45470: LD_VAR 0 5
45474: PPUSH
45475: LD_VAR 0 1
45479: PUSH
45480: LD_VAR 0 6
45484: ARRAY
45485: PPUSH
45486: CALL 40677 0 2
45490: ST_TO_ADDR
// end ;
45491: GO 45398
45493: POP
45494: POP
// end ;
45495: LD_VAR 0 5
45499: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45500: LD_INT 0
45502: PPUSH
// if not vehicles or not parkingPoint then
45503: LD_VAR 0 1
45507: NOT
45508: PUSH
45509: LD_VAR 0 2
45513: NOT
45514: OR
45515: IFFALSE 45519
// exit ;
45517: GO 45617
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45519: LD_ADDR_VAR 0 1
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: LD_INT 50
45531: PUSH
45532: EMPTY
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: LD_INT 92
45540: PUSH
45541: LD_VAR 0 2
45545: PUSH
45546: LD_INT 1
45548: ARRAY
45549: PUSH
45550: LD_VAR 0 2
45554: PUSH
45555: LD_INT 2
45557: ARRAY
45558: PUSH
45559: LD_INT 8
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PPUSH
45576: CALL_OW 72
45580: ST_TO_ADDR
// if not vehicles then
45581: LD_VAR 0 1
45585: NOT
45586: IFFALSE 45590
// exit ;
45588: GO 45617
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45590: LD_VAR 0 1
45594: PPUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_INT 1
45602: ARRAY
45603: PPUSH
45604: LD_VAR 0 2
45608: PUSH
45609: LD_INT 2
45611: ARRAY
45612: PPUSH
45613: CALL_OW 111
// end ;
45617: LD_VAR 0 3
45621: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45622: LD_INT 0
45624: PPUSH
45625: PPUSH
45626: PPUSH
// if not side or not area then
45627: LD_VAR 0 1
45631: NOT
45632: PUSH
45633: LD_VAR 0 2
45637: NOT
45638: OR
45639: IFFALSE 45643
// exit ;
45641: GO 45762
// tmp := AreaToList ( area , 0 ) ;
45643: LD_ADDR_VAR 0 5
45647: PUSH
45648: LD_VAR 0 2
45652: PPUSH
45653: LD_INT 0
45655: PPUSH
45656: CALL_OW 517
45660: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45661: LD_ADDR_VAR 0 4
45665: PUSH
45666: DOUBLE
45667: LD_INT 1
45669: DEC
45670: ST_TO_ADDR
45671: LD_VAR 0 5
45675: PUSH
45676: LD_INT 1
45678: ARRAY
45679: PUSH
45680: FOR_TO
45681: IFFALSE 45760
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45683: LD_VAR 0 5
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: PUSH
45692: LD_VAR 0 4
45696: ARRAY
45697: PPUSH
45698: LD_VAR 0 5
45702: PUSH
45703: LD_INT 2
45705: ARRAY
45706: PUSH
45707: LD_VAR 0 4
45711: ARRAY
45712: PPUSH
45713: CALL_OW 351
45717: IFFALSE 45758
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45719: LD_VAR 0 5
45723: PUSH
45724: LD_INT 1
45726: ARRAY
45727: PUSH
45728: LD_VAR 0 4
45732: ARRAY
45733: PPUSH
45734: LD_VAR 0 5
45738: PUSH
45739: LD_INT 2
45741: ARRAY
45742: PUSH
45743: LD_VAR 0 4
45747: ARRAY
45748: PPUSH
45749: LD_VAR 0 1
45753: PPUSH
45754: CALL_OW 244
// end ;
45758: GO 45680
45760: POP
45761: POP
// end ; end_of_file
45762: LD_VAR 0 3
45766: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45767: LD_INT 0
45769: PPUSH
45770: PPUSH
// disable ( mpActive ) ;
45771: LD_INT 100
45773: DISABLE_MARKED
// disable ( mpWin ) ;
45774: LD_INT 101
45776: DISABLE_MARKED
// disable ( mpLose ) ;
45777: LD_INT 102
45779: DISABLE_MARKED
// mpGameType := 0 ;
45780: LD_ADDR_EXP 1
45784: PUSH
45785: LD_INT 0
45787: ST_TO_ADDR
// mpGameSettings := [ ] ;
45788: LD_ADDR_EXP 4
45792: PUSH
45793: EMPTY
45794: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45795: LD_ADDR_EXP 2
45799: PUSH
45800: EMPTY
45801: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45802: LD_ADDR_EXP 3
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45809: LD_ADDR_EXP 27
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45824: LD_ADDR_EXP 10
45828: PUSH
45829: EMPTY
45830: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45831: LD_ADDR_EXP 11
45835: PUSH
45836: EMPTY
45837: ST_TO_ADDR
// mpDepots := [ ] ;
45838: LD_ADDR_EXP 12
45842: PUSH
45843: EMPTY
45844: ST_TO_ADDR
// mpBuildings := [ ] ;
45845: LD_ADDR_EXP 15
45849: PUSH
45850: EMPTY
45851: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45852: LD_ADDR_EXP 16
45856: PUSH
45857: EMPTY
45858: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45859: LD_ADDR_EXP 17
45863: PUSH
45864: EMPTY
45865: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45866: LD_ADDR_EXP 18
45870: PUSH
45871: EMPTY
45872: ST_TO_ADDR
// mpStartingResources := [ ] ;
45873: LD_ADDR_EXP 13
45877: PUSH
45878: EMPTY
45879: ST_TO_ADDR
// mpStartPos := [ ] ;
45880: LD_ADDR_EXP 19
45884: PUSH
45885: EMPTY
45886: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45887: LD_ADDR_EXP 20
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45896: LD_ADDR_EXP 21
45900: PUSH
45901: EMPTY
45902: ST_TO_ADDR
// mpApemans := [ ] ;
45903: LD_ADDR_EXP 28
45907: PUSH
45908: EMPTY
45909: ST_TO_ADDR
// mpApemansArea := [ ] ;
45910: LD_ADDR_EXP 29
45914: PUSH
45915: EMPTY
45916: ST_TO_ADDR
// mpRespawn := [ ] ;
45917: LD_ADDR_EXP 31
45921: PUSH
45922: EMPTY
45923: ST_TO_ADDR
// mpKingArea := 0 ;
45924: LD_ADDR_EXP 32
45928: PUSH
45929: LD_INT 0
45931: ST_TO_ADDR
// mpPoints := [ ] ;
45932: LD_ADDR_EXP 33
45936: PUSH
45937: EMPTY
45938: ST_TO_ADDR
// mpVehicles := 0 ;
45939: LD_ADDR_EXP 34
45943: PUSH
45944: LD_INT 0
45946: ST_TO_ADDR
// mpShipments := 0 ;
45947: LD_ADDR_EXP 25
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45955: LD_ADDR_EXP 38
45959: PUSH
45960: EMPTY
45961: PUSH
45962: EMPTY
45963: PUSH
45964: EMPTY
45965: PUSH
45966: EMPTY
45967: PUSH
45968: EMPTY
45969: PUSH
45970: EMPTY
45971: PUSH
45972: EMPTY
45973: PUSH
45974: EMPTY
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45986: LD_ADDR_EXP 30
45990: PUSH
45991: EMPTY
45992: PUSH
45993: EMPTY
45994: PUSH
45995: EMPTY
45996: PUSH
45997: EMPTY
45998: PUSH
45999: EMPTY
46000: PUSH
46001: EMPTY
46002: PUSH
46003: EMPTY
46004: PUSH
46005: EMPTY
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// mpEmissions := 0 ;
46017: LD_ADDR_EXP 35
46021: PUSH
46022: LD_INT 0
46024: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46025: LD_ADDR_EXP 23
46029: PUSH
46030: LD_INT 3
46032: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46033: LD_ADDR_EXP 22
46037: PUSH
46038: LD_INT 15
46040: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46041: LD_ADDR_EXP 36
46045: PUSH
46046: LD_INT 0
46048: ST_TO_ADDR
// mpGameActive := false ;
46049: LD_ADDR_EXP 37
46053: PUSH
46054: LD_INT 0
46056: ST_TO_ADDR
// mpBlockRespThread := false ;
46057: LD_ADDR_EXP 39
46061: PUSH
46062: LD_INT 0
46064: ST_TO_ADDR
// for i := 1 to 32 do
46065: LD_ADDR_VAR 0 2
46069: PUSH
46070: DOUBLE
46071: LD_INT 1
46073: DEC
46074: ST_TO_ADDR
46075: LD_INT 32
46077: PUSH
46078: FOR_TO
46079: IFFALSE 46106
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46081: LD_ADDR_EXP 4
46085: PUSH
46086: LD_EXP 4
46090: PPUSH
46091: LD_VAR 0 2
46095: PPUSH
46096: LD_INT 0
46098: PPUSH
46099: CALL_OW 1
46103: ST_TO_ADDR
46104: GO 46078
46106: POP
46107: POP
// end ;
46108: LD_VAR 0 1
46112: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46113: LD_INT 0
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46129: LD_ADDR_VAR 0 14
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// for i in gameTypes do
46148: LD_ADDR_VAR 0 2
46152: PUSH
46153: LD_VAR 0 14
46157: PUSH
46158: FOR_IN
46159: IFFALSE 46168
// disable ( i ) ;
46161: LD_VAR 0 2
46165: DISABLE_MARKED
46166: GO 46158
46168: POP
46169: POP
// if Multiplayer then
46170: LD_OWVAR 4
46174: IFFALSE 46358
// begin mpGameType := mp_game_type ;
46176: LD_ADDR_EXP 1
46180: PUSH
46181: LD_OWVAR 6
46185: ST_TO_ADDR
// your_side := mp_player_side ;
46186: LD_ADDR_OWVAR 2
46190: PUSH
46191: LD_OWVAR 7
46195: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46196: LD_ADDR_EXP 5
46200: PUSH
46201: LD_OWVAR 17
46205: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46206: LD_ADDR_EXP 6
46210: PUSH
46211: LD_OWVAR 15
46215: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46216: LD_ADDR_EXP 7
46220: PUSH
46221: LD_OWVAR 16
46225: ST_TO_ADDR
// mpTeams := mp_teams ;
46226: LD_ADDR_EXP 8
46230: PUSH
46231: LD_OWVAR 12
46235: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46236: LD_ADDR_VAR 0 2
46240: PUSH
46241: DOUBLE
46242: LD_INT 1
46244: DEC
46245: ST_TO_ADDR
46246: LD_EXP 2
46250: PPUSH
46251: CALL 5068 0 1
46255: PUSH
46256: FOR_TO
46257: IFFALSE 46333
// begin setting := mpGameSettingsKeys [ i ] ;
46259: LD_ADDR_VAR 0 12
46263: PUSH
46264: LD_EXP 2
46268: PUSH
46269: LD_VAR 0 2
46273: ARRAY
46274: ST_TO_ADDR
// if setting then
46275: LD_VAR 0 12
46279: IFFALSE 46331
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46281: LD_ADDR_EXP 4
46285: PUSH
46286: LD_EXP 4
46290: PPUSH
46291: LD_VAR 0 2
46295: PPUSH
46296: LD_EXP 3
46300: PUSH
46301: LD_VAR 0 2
46305: ARRAY
46306: PUSH
46307: LD_VAR 0 2
46311: PUSH
46312: LD_INT 1
46314: MINUS
46315: PPUSH
46316: CALL_OW 426
46320: PUSH
46321: LD_INT 1
46323: PLUS
46324: ARRAY
46325: PPUSH
46326: CALL_OW 1
46330: ST_TO_ADDR
// end ;
46331: GO 46256
46333: POP
46334: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46335: LD_ADDR_EXP 9
46339: PUSH
46340: LD_EXP 6
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: DIFF
46351: PUSH
46352: LD_INT 1
46354: GREATER
46355: ST_TO_ADDR
// end else
46356: GO 46358
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46358: LD_EXP 1
46362: PPUSH
46363: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
46367: LD_EXP 16
46371: PPUSH
46372: CALL 5068 0 1
46376: IFFALSE 46407
// begin for i in mpMarkedAreas do
46378: LD_ADDR_VAR 0 2
46382: PUSH
46383: LD_EXP 16
46387: PUSH
46388: FOR_IN
46389: IFFALSE 46405
// SetAreaMapShow ( i , 0 ) ;
46391: LD_VAR 0 2
46395: PPUSH
46396: LD_INT 0
46398: PPUSH
46399: CALL_OW 424
46403: GO 46388
46405: POP
46406: POP
// end ; for i := 1 to 8 do
46407: LD_ADDR_VAR 0 2
46411: PUSH
46412: DOUBLE
46413: LD_INT 1
46415: DEC
46416: ST_TO_ADDR
46417: LD_INT 8
46419: PUSH
46420: FOR_TO
46421: IFFALSE 47672
// begin if not mpSidePositions [ i ] then
46423: LD_EXP 5
46427: PUSH
46428: LD_VAR 0 2
46432: ARRAY
46433: NOT
46434: IFFALSE 46438
// continue ;
46436: GO 46420
// side := i ;
46438: LD_ADDR_VAR 0 7
46442: PUSH
46443: LD_VAR 0 2
46447: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46448: LD_ADDR_VAR 0 9
46452: PUSH
46453: LD_EXP 7
46457: PUSH
46458: LD_VAR 0 2
46462: ARRAY
46463: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46464: LD_ADDR_VAR 0 8
46468: PUSH
46469: LD_EXP 5
46473: PUSH
46474: LD_VAR 0 2
46478: ARRAY
46479: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46480: LD_EXP 10
46484: PPUSH
46485: CALL 5068 0 1
46489: IFFALSE 46566
// begin for j in mpOilDeposits [ pos ] do
46491: LD_ADDR_VAR 0 3
46495: PUSH
46496: LD_EXP 10
46500: PUSH
46501: LD_VAR 0 8
46505: ARRAY
46506: PUSH
46507: FOR_IN
46508: IFFALSE 46564
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46510: LD_VAR 0 3
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: PPUSH
46519: LD_VAR 0 3
46523: PUSH
46524: LD_INT 2
46526: ARRAY
46527: PPUSH
46528: LD_INT 2
46530: PPUSH
46531: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46535: LD_VAR 0 3
46539: PUSH
46540: LD_INT 1
46542: ARRAY
46543: PPUSH
46544: LD_VAR 0 3
46548: PUSH
46549: LD_INT 2
46551: ARRAY
46552: PPUSH
46553: LD_VAR 0 7
46557: PPUSH
46558: CALL_OW 441
// end ;
46562: GO 46507
46564: POP
46565: POP
// end ; if Count ( mpSibDeposits ) then
46566: LD_EXP 11
46570: PPUSH
46571: CALL 5068 0 1
46575: IFFALSE 46652
// begin for j in mpSibDeposits [ pos ] do
46577: LD_ADDR_VAR 0 3
46581: PUSH
46582: LD_EXP 11
46586: PUSH
46587: LD_VAR 0 8
46591: ARRAY
46592: PUSH
46593: FOR_IN
46594: IFFALSE 46650
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46596: LD_VAR 0 3
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: PPUSH
46605: LD_VAR 0 3
46609: PUSH
46610: LD_INT 2
46612: ARRAY
46613: PPUSH
46614: LD_INT 3
46616: PPUSH
46617: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46621: LD_VAR 0 3
46625: PUSH
46626: LD_INT 1
46628: ARRAY
46629: PPUSH
46630: LD_VAR 0 3
46634: PUSH
46635: LD_INT 2
46637: ARRAY
46638: PPUSH
46639: LD_VAR 0 7
46643: PPUSH
46644: CALL_OW 441
// end ;
46648: GO 46593
46650: POP
46651: POP
// end ; InitBc ;
46652: CALL_OW 21
// InitUc ;
46656: CALL_OW 18
// uc_side := side ;
46660: LD_ADDR_OWVAR 20
46664: PUSH
46665: LD_VAR 0 7
46669: ST_TO_ADDR
// uc_nation := nation ;
46670: LD_ADDR_OWVAR 21
46674: PUSH
46675: LD_VAR 0 9
46679: ST_TO_ADDR
// if Count ( mpDepots ) then
46680: LD_EXP 12
46684: PPUSH
46685: CALL 5068 0 1
46689: IFFALSE 46867
// begin if GameTypeSurvival then
46691: LD_INT 2
46693: IFFALSE 46713
// begin bc_level := 10 ;
46695: LD_ADDR_OWVAR 43
46699: PUSH
46700: LD_INT 10
46702: ST_TO_ADDR
// bc_type := b_warehouse ;
46703: LD_ADDR_OWVAR 42
46707: PUSH
46708: LD_INT 1
46710: ST_TO_ADDR
// end else
46711: GO 46729
// begin bc_level := 0 ;
46713: LD_ADDR_OWVAR 43
46717: PUSH
46718: LD_INT 0
46720: ST_TO_ADDR
// bc_type := b_depot ;
46721: LD_ADDR_OWVAR 42
46725: PUSH
46726: LD_INT 0
46728: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46729: LD_ADDR_VAR 0 4
46733: PUSH
46734: LD_EXP 12
46738: PUSH
46739: LD_VAR 0 8
46743: ARRAY
46744: PUSH
46745: LD_INT 1
46747: ARRAY
46748: PPUSH
46749: LD_EXP 12
46753: PUSH
46754: LD_VAR 0 8
46758: ARRAY
46759: PUSH
46760: LD_INT 2
46762: ARRAY
46763: PPUSH
46764: LD_EXP 12
46768: PUSH
46769: LD_VAR 0 8
46773: ARRAY
46774: PUSH
46775: LD_INT 3
46777: ARRAY
46778: PPUSH
46779: CALL_OW 47
46783: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46784: LD_VAR 0 4
46788: PPUSH
46789: LD_STRING @
46791: PUSH
46792: LD_VAR 0 7
46796: STR
46797: PPUSH
46798: CALL_OW 500
// if Count ( mpStartingResources ) then
46802: LD_EXP 13
46806: PPUSH
46807: CALL 5068 0 1
46811: IFFALSE 46865
// begin for j := 1 to mpStartingResources do
46813: LD_ADDR_VAR 0 3
46817: PUSH
46818: DOUBLE
46819: LD_INT 1
46821: DEC
46822: ST_TO_ADDR
46823: LD_EXP 13
46827: PUSH
46828: FOR_TO
46829: IFFALSE 46863
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46831: LD_VAR 0 4
46835: PPUSH
46836: CALL_OW 274
46840: PPUSH
46841: LD_VAR 0 3
46845: PPUSH
46846: LD_EXP 13
46850: PUSH
46851: LD_VAR 0 3
46855: ARRAY
46856: PPUSH
46857: CALL_OW 277
46861: GO 46828
46863: POP
46864: POP
// end ; end else
46865: GO 47014
// if Count ( mpStartingResources ) then
46867: LD_EXP 13
46871: PPUSH
46872: CALL 5068 0 1
46876: IFFALSE 47014
// begin for j := 1 to mpStartingResources do
46878: LD_ADDR_VAR 0 3
46882: PUSH
46883: DOUBLE
46884: LD_INT 1
46886: DEC
46887: ST_TO_ADDR
46888: LD_EXP 13
46892: PUSH
46893: FOR_TO
46894: IFFALSE 47012
// begin resources := mpStartingResources [ j ] ;
46896: LD_ADDR_VAR 0 13
46900: PUSH
46901: LD_EXP 13
46905: PUSH
46906: LD_VAR 0 3
46910: ARRAY
46911: ST_TO_ADDR
// repeat if resources >= 50 then
46912: LD_VAR 0 13
46916: PUSH
46917: LD_INT 50
46919: GREATEREQUAL
46920: IFFALSE 46966
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46922: LD_VAR 0 3
46926: PPUSH
46927: LD_INT 5
46929: PPUSH
46930: LD_VAR 0 5
46934: PPUSH
46935: LD_VAR 0 6
46939: PPUSH
46940: LD_INT 4
46942: PPUSH
46943: LD_INT 0
46945: PPUSH
46946: CALL_OW 60
// resources := resources - 50 ;
46950: LD_ADDR_VAR 0 13
46954: PUSH
46955: LD_VAR 0 13
46959: PUSH
46960: LD_INT 50
46962: MINUS
46963: ST_TO_ADDR
// end else
46964: GO 47000
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46966: LD_VAR 0 3
46970: PPUSH
46971: LD_VAR 0 13
46975: PUSH
46976: LD_INT 10
46978: DIV
46979: PPUSH
46980: LD_VAR 0 5
46984: PPUSH
46985: LD_VAR 0 6
46989: PPUSH
46990: LD_INT 4
46992: PPUSH
46993: LD_INT 0
46995: PPUSH
46996: CALL_OW 60
// until resources <= 0 ;
47000: LD_VAR 0 13
47004: PUSH
47005: LD_INT 0
47007: LESSEQUAL
47008: IFFALSE 46912
// end ;
47010: GO 46893
47012: POP
47013: POP
// end ; if Count ( mpBuildings ) then
47014: LD_EXP 15
47018: PPUSH
47019: CALL 5068 0 1
47023: IFFALSE 47101
// begin for j in mpBuildings [ pos ] do
47025: LD_ADDR_VAR 0 3
47029: PUSH
47030: LD_EXP 15
47034: PUSH
47035: LD_VAR 0 8
47039: ARRAY
47040: PUSH
47041: FOR_IN
47042: IFFALSE 47099
// begin bc_level := 0 ;
47044: LD_ADDR_OWVAR 43
47048: PUSH
47049: LD_INT 0
47051: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_VAR 0 3
47061: PUSH
47062: LD_INT 1
47064: ARRAY
47065: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47066: LD_VAR 0 3
47070: PUSH
47071: LD_INT 2
47073: ARRAY
47074: PPUSH
47075: LD_VAR 0 3
47079: PUSH
47080: LD_INT 3
47082: ARRAY
47083: PPUSH
47084: LD_VAR 0 3
47088: PUSH
47089: LD_INT 4
47091: ARRAY
47092: PPUSH
47093: CALL_OW 47
// end ;
47097: GO 47041
47099: POP
47100: POP
// end ; if mpBattleFlag > - 1 then
47101: LD_EXP 20
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: GREATER
47110: IFFALSE 47269
// begin x := mpStartPos [ pos ] [ 1 ] ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_EXP 19
47121: PUSH
47122: LD_VAR 0 8
47126: ARRAY
47127: PUSH
47128: LD_INT 1
47130: ARRAY
47131: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47132: LD_ADDR_VAR 0 6
47136: PUSH
47137: LD_EXP 19
47141: PUSH
47142: LD_VAR 0 8
47146: ARRAY
47147: PUSH
47148: LD_INT 2
47150: ARRAY
47151: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47152: LD_VAR 0 5
47156: PPUSH
47157: LD_VAR 0 6
47161: PPUSH
47162: LD_INT 12
47164: PPUSH
47165: LD_INT 2
47167: PPUSH
47168: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47172: LD_ADDR_EXP 21
47176: PUSH
47177: LD_EXP 21
47181: PPUSH
47182: LD_VAR 0 7
47186: PPUSH
47187: LD_VAR 0 7
47191: PPUSH
47192: LD_VAR 0 5
47196: PPUSH
47197: LD_VAR 0 6
47201: PPUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 100
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 70
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: LD_INT 40
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 10
47234: PUSH
47235: LD_INT 25
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 20
47244: PUSH
47245: LD_INT 100
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: PPUSH
47259: CALL_OW 418
47263: PPUSH
47264: CALL_OW 1
47268: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47269: LD_EXP 24
47273: PUSH
47274: LD_INT 20
47276: PPUSH
47277: LD_VAR 0 7
47281: PPUSH
47282: CALL_OW 321
47286: PUSH
47287: LD_INT 1
47289: EQUAL
47290: AND
47291: IFFALSE 47308
// SetTech ( tech_SibDet , side , state_researched ) ;
47293: LD_INT 20
47295: PPUSH
47296: LD_VAR 0 7
47300: PPUSH
47301: LD_INT 2
47303: PPUSH
47304: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47308: LD_INT 24
47310: PPUSH
47311: LD_VAR 0 7
47315: PPUSH
47316: LD_INT 0
47318: PPUSH
47319: CALL_OW 322
// if mpSibBomb = 1 then
47323: LD_EXP 26
47327: PUSH
47328: LD_INT 1
47330: EQUAL
47331: IFFALSE 47350
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47333: LD_INT 25
47335: PPUSH
47336: LD_VAR 0 7
47340: PPUSH
47341: LD_INT 1
47343: PPUSH
47344: CALL_OW 322
// end else
47348: GO 47365
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47350: LD_INT 25
47352: PPUSH
47353: LD_VAR 0 7
47357: PPUSH
47358: LD_INT 0
47360: PPUSH
47361: CALL_OW 322
// end ; if mpVehicles then
47365: LD_EXP 34
47369: IFFALSE 47468
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47371: LD_ADDR_VAR 0 3
47375: PUSH
47376: LD_VAR 0 7
47380: PPUSH
47381: LD_VAR 0 9
47385: PPUSH
47386: LD_EXP 34
47390: PPUSH
47391: CALL 48582 0 3
47395: PUSH
47396: FOR_IN
47397: IFFALSE 47466
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47399: LD_VAR 0 3
47403: PPUSH
47404: LD_INT 0
47406: PPUSH
47407: LD_INT 5
47409: PPUSH
47410: CALL_OW 12
47414: PPUSH
47415: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47419: LD_VAR 0 3
47423: PPUSH
47424: LD_EXP 19
47428: PUSH
47429: LD_VAR 0 8
47433: ARRAY
47434: PUSH
47435: LD_INT 1
47437: ARRAY
47438: PPUSH
47439: LD_EXP 19
47443: PUSH
47444: LD_VAR 0 8
47448: ARRAY
47449: PUSH
47450: LD_INT 2
47452: ARRAY
47453: PPUSH
47454: LD_INT 12
47456: PPUSH
47457: LD_INT 0
47459: PPUSH
47460: CALL_OW 50
// end ;
47464: GO 47396
47466: POP
47467: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47468: LD_ADDR_VAR 0 11
47472: PUSH
47473: LD_VAR 0 7
47477: PPUSH
47478: LD_VAR 0 9
47482: PPUSH
47483: LD_EXP 22
47487: PPUSH
47488: LD_EXP 23
47492: PPUSH
47493: CALL 48084 0 4
47497: ST_TO_ADDR
// for j in team do
47498: LD_ADDR_VAR 0 3
47502: PUSH
47503: LD_VAR 0 11
47507: PUSH
47508: FOR_IN
47509: IFFALSE 47558
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47511: LD_VAR 0 3
47515: PPUSH
47516: LD_EXP 19
47520: PUSH
47521: LD_VAR 0 8
47525: ARRAY
47526: PUSH
47527: LD_INT 1
47529: ARRAY
47530: PPUSH
47531: LD_EXP 19
47535: PUSH
47536: LD_VAR 0 8
47540: ARRAY
47541: PUSH
47542: LD_INT 2
47544: ARRAY
47545: PPUSH
47546: LD_INT 12
47548: PPUSH
47549: LD_INT 0
47551: PPUSH
47552: CALL_OW 50
47556: GO 47508
47558: POP
47559: POP
// if mpApemans then
47560: LD_EXP 28
47564: IFFALSE 47670
// begin for j := 1 to mpApemans do
47566: LD_ADDR_VAR 0 3
47570: PUSH
47571: DOUBLE
47572: LD_INT 1
47574: DEC
47575: ST_TO_ADDR
47576: LD_EXP 28
47580: PUSH
47581: FOR_TO
47582: IFFALSE 47668
// begin PrepareApeman ( - 5 ) ;
47584: LD_INT 5
47586: NEG
47587: PPUSH
47588: CALL 36925 0 1
// ape := CreateHuman ;
47592: LD_ADDR_VAR 0 10
47596: PUSH
47597: CALL_OW 44
47601: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
47602: LD_ADDR_EXP 30
47606: PUSH
47607: LD_EXP 30
47611: PPUSH
47612: LD_VAR 0 8
47616: PPUSH
47617: LD_EXP 30
47621: PUSH
47622: LD_VAR 0 8
47626: ARRAY
47627: PPUSH
47628: LD_VAR 0 10
47632: PPUSH
47633: CALL 40677 0 2
47637: PPUSH
47638: CALL_OW 1
47642: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47643: LD_VAR 0 10
47647: PPUSH
47648: LD_EXP 29
47652: PUSH
47653: LD_VAR 0 8
47657: ARRAY
47658: PPUSH
47659: LD_INT 0
47661: PPUSH
47662: CALL_OW 49
// end ;
47666: GO 47581
47668: POP
47669: POP
// end ; end ;
47670: GO 46420
47672: POP
47673: POP
// if not mpTeamGame then
47674: LD_EXP 9
47678: NOT
47679: IFFALSE 47777
// begin for i := 1 to 8 do
47681: LD_ADDR_VAR 0 2
47685: PUSH
47686: DOUBLE
47687: LD_INT 1
47689: DEC
47690: ST_TO_ADDR
47691: LD_INT 8
47693: PUSH
47694: FOR_TO
47695: IFFALSE 47773
// for j := 1 to 8 do
47697: LD_ADDR_VAR 0 3
47701: PUSH
47702: DOUBLE
47703: LD_INT 1
47705: DEC
47706: ST_TO_ADDR
47707: LD_INT 8
47709: PUSH
47710: FOR_TO
47711: IFFALSE 47769
// if i <> j then
47713: LD_VAR 0 2
47717: PUSH
47718: LD_VAR 0 3
47722: NONEQUAL
47723: IFFALSE 47747
// SetAttitude ( i , j , att_neutral , true ) else
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_VAR 0 3
47734: PPUSH
47735: LD_INT 0
47737: PPUSH
47738: LD_INT 1
47740: PPUSH
47741: CALL_OW 80
47745: GO 47767
// SetAttitude ( i , j , att_friend , true ) ;
47747: LD_VAR 0 2
47751: PPUSH
47752: LD_VAR 0 3
47756: PPUSH
47757: LD_INT 1
47759: PPUSH
47760: LD_INT 1
47762: PPUSH
47763: CALL_OW 80
47767: GO 47710
47769: POP
47770: POP
47771: GO 47694
47773: POP
47774: POP
// end else
47775: GO 47952
// begin if mpSharedVision then
47777: LD_EXP 14
47781: IFFALSE 47846
// begin for i in mpTeams do
47783: LD_ADDR_VAR 0 2
47787: PUSH
47788: LD_EXP 8
47792: PUSH
47793: FOR_IN
47794: IFFALSE 47844
// for j := 2 to i do
47796: LD_ADDR_VAR 0 3
47800: PUSH
47801: DOUBLE
47802: LD_INT 2
47804: DEC
47805: ST_TO_ADDR
47806: LD_VAR 0 2
47810: PUSH
47811: FOR_TO
47812: IFFALSE 47840
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47814: LD_VAR 0 2
47818: PUSH
47819: LD_VAR 0 3
47823: ARRAY
47824: PPUSH
47825: LD_VAR 0 2
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PPUSH
47834: CALL_OW 343
47838: GO 47811
47840: POP
47841: POP
47842: GO 47793
47844: POP
47845: POP
// end ; for i := 1 to 8 do
47846: LD_ADDR_VAR 0 2
47850: PUSH
47851: DOUBLE
47852: LD_INT 1
47854: DEC
47855: ST_TO_ADDR
47856: LD_INT 8
47858: PUSH
47859: FOR_TO
47860: IFFALSE 47950
// for j := 1 to 8 do
47862: LD_ADDR_VAR 0 3
47866: PUSH
47867: DOUBLE
47868: LD_INT 1
47870: DEC
47871: ST_TO_ADDR
47872: LD_INT 8
47874: PUSH
47875: FOR_TO
47876: IFFALSE 47946
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47878: LD_EXP 6
47882: PUSH
47883: LD_VAR 0 2
47887: ARRAY
47888: PUSH
47889: LD_EXP 6
47893: PUSH
47894: LD_VAR 0 3
47898: ARRAY
47899: EQUAL
47900: IFFALSE 47924
// SetAttitude ( i , j , att_friend , true ) else
47902: LD_VAR 0 2
47906: PPUSH
47907: LD_VAR 0 3
47911: PPUSH
47912: LD_INT 1
47914: PPUSH
47915: LD_INT 1
47917: PPUSH
47918: CALL_OW 80
47922: GO 47944
// SetAttitude ( i , j , att_enemy , true ) ;
47924: LD_VAR 0 2
47928: PPUSH
47929: LD_VAR 0 3
47933: PPUSH
47934: LD_INT 2
47936: PPUSH
47937: LD_INT 1
47939: PPUSH
47940: CALL_OW 80
47944: GO 47875
47946: POP
47947: POP
47948: GO 47859
47950: POP
47951: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47952: LD_ADDR_OWVAR 71
47956: PUSH
47957: LD_EXP 7
47961: PUSH
47962: LD_OWVAR 2
47966: ARRAY
47967: ST_TO_ADDR
// if IAmSpec then
47968: CALL_OW 531
47972: IFFALSE 48013
// begin FogOff ( true ) ;
47974: LD_INT 1
47976: PPUSH
47977: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47981: LD_EXP 27
47985: PUSH
47986: LD_INT 1
47988: ARRAY
47989: PUSH
47990: LD_INT 2
47992: DIV
47993: PPUSH
47994: LD_EXP 27
47998: PUSH
47999: LD_INT 2
48001: ARRAY
48002: PUSH
48003: LD_INT 2
48005: DIV
48006: PPUSH
48007: CALL_OW 86
// end else
48011: GO 48059
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48013: LD_EXP 19
48017: PUSH
48018: LD_EXP 5
48022: PUSH
48023: LD_OWVAR 2
48027: ARRAY
48028: ARRAY
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: LD_EXP 19
48038: PUSH
48039: LD_EXP 5
48043: PUSH
48044: LD_OWVAR 2
48048: ARRAY
48049: ARRAY
48050: PUSH
48051: LD_INT 2
48053: ARRAY
48054: PPUSH
48055: CALL_OW 86
// end ; BeginBuildUp ;
48059: CALL 49060 0 0
// enable ( mpActive ) ;
48063: LD_INT 100
48065: ENABLE_MARKED
// enable ( mpGameType ) ;
48066: LD_EXP 1
48070: ENABLE_MARKED
// mpGameActive := true ;
48071: LD_ADDR_EXP 37
48075: PUSH
48076: LD_INT 1
48078: ST_TO_ADDR
// end ;
48079: LD_VAR 0 1
48083: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48084: LD_INT 0
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
// result := [ ] ;
48090: LD_ADDR_VAR 0 5
48094: PUSH
48095: EMPTY
48096: ST_TO_ADDR
// class := class_soldier ;
48097: LD_ADDR_VAR 0 8
48101: PUSH
48102: LD_INT 1
48104: ST_TO_ADDR
// uc_side := side ;
48105: LD_ADDR_OWVAR 20
48109: PUSH
48110: LD_VAR 0 1
48114: ST_TO_ADDR
// uc_nation := nation ;
48115: LD_ADDR_OWVAR 21
48119: PUSH
48120: LD_VAR 0 2
48124: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48125: LD_ADDR_OWVAR 26
48129: PUSH
48130: LD_OWVAR 19
48134: PUSH
48135: LD_VAR 0 1
48139: ARRAY
48140: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48141: LD_INT 1
48143: PPUSH
48144: LD_INT 2
48146: PPUSH
48147: CALL_OW 12
48151: PPUSH
48152: LD_VAR 0 8
48156: PPUSH
48157: LD_VAR 0 4
48161: PUSH
48162: LD_INT 2
48164: PLUS
48165: PPUSH
48166: CALL_OW 380
// hc_importance := 105 ;
48170: LD_ADDR_OWVAR 32
48174: PUSH
48175: LD_INT 105
48177: ST_TO_ADDR
// if Multiplayer then
48178: LD_OWVAR 4
48182: IFFALSE 48222
// begin hc_gallery := MULTIAVATARS ;
48184: LD_ADDR_OWVAR 33
48188: PUSH
48189: LD_STRING MULTIAVATARS
48191: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48192: LD_ADDR_OWVAR 34
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: CALL_OW 525
48206: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48207: LD_ADDR_OWVAR 27
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: CALL_OW 526
48221: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48222: LD_ADDR_VAR 0 5
48226: PUSH
48227: LD_VAR 0 5
48231: PPUSH
48232: CALL_OW 44
48236: PPUSH
48237: CALL 40677 0 2
48241: ST_TO_ADDR
// if mpTeamPreset then
48242: LD_LOC 1
48246: IFFALSE 48342
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48248: LD_LOC 1
48252: PUSH
48253: LD_INT 1
48255: ARRAY
48256: PPUSH
48257: LD_VAR 0 5
48261: PUSH
48262: LD_VAR 0 5
48266: ARRAY
48267: PPUSH
48268: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48272: LD_VAR 0 5
48276: PUSH
48277: LD_VAR 0 5
48281: ARRAY
48282: PPUSH
48283: LD_INT 1
48285: PPUSH
48286: LD_LOC 1
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: LD_INT 1
48297: PPUSH
48298: CALL_OW 260
48302: PPUSH
48303: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48307: LD_VAR 0 5
48311: PUSH
48312: LD_VAR 0 5
48316: ARRAY
48317: PPUSH
48318: LD_INT 2
48320: PPUSH
48321: LD_LOC 1
48325: PUSH
48326: LD_INT 1
48328: ARRAY
48329: PPUSH
48330: LD_INT 2
48332: PPUSH
48333: CALL_OW 260
48337: PPUSH
48338: CALL_OW 239
// end ; InitHc_All ( ) ;
48342: CALL_OW 584
// class := 2 ;
48346: LD_ADDR_VAR 0 8
48350: PUSH
48351: LD_INT 2
48353: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48354: LD_ADDR_VAR 0 6
48358: PUSH
48359: DOUBLE
48360: LD_INT 1
48362: DEC
48363: ST_TO_ADDR
48364: LD_VAR 0 3
48368: PUSH
48369: LD_INT 1
48371: MINUS
48372: PUSH
48373: FOR_TO
48374: IFFALSE 48558
// begin PrepareHuman ( false , class , skill ) ;
48376: LD_INT 0
48378: PPUSH
48379: LD_VAR 0 8
48383: PPUSH
48384: LD_VAR 0 4
48388: PPUSH
48389: CALL_OW 380
// un := CreateHuman ;
48393: LD_ADDR_VAR 0 7
48397: PUSH
48398: CALL_OW 44
48402: ST_TO_ADDR
// result := Join ( result , un ) ;
48403: LD_ADDR_VAR 0 5
48407: PUSH
48408: LD_VAR 0 5
48412: PPUSH
48413: LD_VAR 0 7
48417: PPUSH
48418: CALL 40677 0 2
48422: ST_TO_ADDR
// if mpTeamPreset then
48423: LD_LOC 1
48427: IFFALSE 48523
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48429: LD_LOC 1
48433: PUSH
48434: LD_VAR 0 6
48438: PUSH
48439: LD_INT 1
48441: PLUS
48442: ARRAY
48443: PPUSH
48444: LD_VAR 0 7
48448: PPUSH
48449: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48453: LD_VAR 0 7
48457: PPUSH
48458: LD_INT 1
48460: PPUSH
48461: LD_LOC 1
48465: PUSH
48466: LD_VAR 0 6
48470: PUSH
48471: LD_INT 1
48473: PLUS
48474: ARRAY
48475: PPUSH
48476: LD_INT 1
48478: PPUSH
48479: CALL_OW 260
48483: PPUSH
48484: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48488: LD_VAR 0 7
48492: PPUSH
48493: LD_INT 2
48495: PPUSH
48496: LD_LOC 1
48500: PUSH
48501: LD_VAR 0 6
48505: PUSH
48506: LD_INT 1
48508: PLUS
48509: ARRAY
48510: PPUSH
48511: LD_INT 2
48513: PPUSH
48514: CALL_OW 260
48518: PPUSH
48519: CALL_OW 239
// end ; class := Inc ( class ) ;
48523: LD_ADDR_VAR 0 8
48527: PUSH
48528: LD_VAR 0 8
48532: PPUSH
48533: CALL 42038 0 1
48537: ST_TO_ADDR
// if class = 5 then
48538: LD_VAR 0 8
48542: PUSH
48543: LD_INT 5
48545: EQUAL
48546: IFFALSE 48556
// class := 1 ;
48548: LD_ADDR_VAR 0 8
48552: PUSH
48553: LD_INT 1
48555: ST_TO_ADDR
// end ;
48556: GO 48373
48558: POP
48559: POP
// if not mpTeamPreset then
48560: LD_LOC 1
48564: NOT
48565: IFFALSE 48577
// mpTeamPreset := result ;
48567: LD_ADDR_LOC 1
48571: PUSH
48572: LD_VAR 0 5
48576: ST_TO_ADDR
// end ;
48577: LD_VAR 0 5
48581: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48582: LD_INT 0
48584: PPUSH
48585: PPUSH
// result := [ ] ;
48586: LD_ADDR_VAR 0 4
48590: PUSH
48591: EMPTY
48592: ST_TO_ADDR
// if not vehicles then
48593: LD_VAR 0 3
48597: NOT
48598: IFFALSE 48602
// exit ;
48600: GO 48761
// for i := 1 to vehicles [ nation ] do
48602: LD_ADDR_VAR 0 5
48606: PUSH
48607: DOUBLE
48608: LD_INT 1
48610: DEC
48611: ST_TO_ADDR
48612: LD_VAR 0 3
48616: PUSH
48617: LD_VAR 0 2
48621: ARRAY
48622: PUSH
48623: FOR_TO
48624: IFFALSE 48759
// begin uc_side := side ;
48626: LD_ADDR_OWVAR 20
48630: PUSH
48631: LD_VAR 0 1
48635: ST_TO_ADDR
// uc_nation := nation ;
48636: LD_ADDR_OWVAR 21
48640: PUSH
48641: LD_VAR 0 2
48645: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48646: LD_VAR 0 3
48650: PUSH
48651: LD_VAR 0 2
48655: ARRAY
48656: PUSH
48657: LD_VAR 0 5
48661: ARRAY
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: PPUSH
48667: LD_VAR 0 3
48671: PUSH
48672: LD_VAR 0 2
48676: ARRAY
48677: PUSH
48678: LD_VAR 0 5
48682: ARRAY
48683: PUSH
48684: LD_INT 2
48686: ARRAY
48687: PPUSH
48688: LD_VAR 0 3
48692: PUSH
48693: LD_VAR 0 2
48697: ARRAY
48698: PUSH
48699: LD_VAR 0 5
48703: ARRAY
48704: PUSH
48705: LD_INT 3
48707: ARRAY
48708: PPUSH
48709: LD_VAR 0 3
48713: PUSH
48714: LD_VAR 0 2
48718: ARRAY
48719: PUSH
48720: LD_VAR 0 5
48724: ARRAY
48725: PUSH
48726: LD_INT 4
48728: ARRAY
48729: PPUSH
48730: LD_INT 80
48732: PPUSH
48733: CALL 7806 0 5
// result := Join ( result , CreateVehicle ) ;
48737: LD_ADDR_VAR 0 4
48741: PUSH
48742: LD_VAR 0 4
48746: PPUSH
48747: CALL_OW 45
48751: PPUSH
48752: CALL 40677 0 2
48756: ST_TO_ADDR
// end ;
48757: GO 48623
48759: POP
48760: POP
// end ;
48761: LD_VAR 0 4
48765: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48766: LD_INT 0
48768: PPUSH
48769: PPUSH
// for i in mpBattleFlags do
48770: LD_ADDR_VAR 0 3
48774: PUSH
48775: LD_EXP 21
48779: PUSH
48780: FOR_IN
48781: IFFALSE 48858
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48783: LD_VAR 0 3
48787: PPUSH
48788: LD_INT 1
48790: PUSH
48791: LD_VAR 0 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_VAR 0 1
48807: PUSH
48808: LD_REAL  7.00000000000000E-0001
48811: MUL
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: LD_VAR 0 1
48824: PUSH
48825: LD_REAL  4.00000000000000E-0001
48828: MUL
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 20
48836: PUSH
48837: LD_VAR 0 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: PPUSH
48852: CALL_OW 423
48856: GO 48780
48858: POP
48859: POP
// end ;
48860: LD_VAR 0 2
48864: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48865: LD_INT 100
48867: IFFALSE 48962
48869: GO 48871
48871: DISABLE
48872: LD_INT 0
48874: PPUSH
48875: PPUSH
// begin if mpBattleFlag <= 0 then
48876: LD_EXP 20
48880: PUSH
48881: LD_INT 0
48883: LESSEQUAL
48884: IFFALSE 48888
// exit ;
48886: GO 48962
// strength := 100 ;
48888: LD_ADDR_VAR 0 2
48892: PUSH
48893: LD_INT 100
48895: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48896: LD_EXP 20
48900: PPUSH
48901: CALL_OW 67
// strength := Dec ( strength ) ;
48905: LD_ADDR_VAR 0 2
48909: PUSH
48910: LD_VAR 0 2
48914: PPUSH
48915: CALL 42060 0 1
48919: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48920: LD_VAR 0 2
48924: PPUSH
48925: CALL 48766 0 1
// until not strength ;
48929: LD_VAR 0 2
48933: NOT
48934: IFFALSE 48896
// for i in mpBattleFlags do
48936: LD_ADDR_VAR 0 1
48940: PUSH
48941: LD_EXP 21
48945: PUSH
48946: FOR_IN
48947: IFFALSE 48960
// KillBattleFlag ( i ) ;
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 419
48958: GO 48946
48960: POP
48961: POP
// end ;
48962: PPOPN 2
48964: END
// every 0 0$1 marked mpActive do var side , tmp ;
48965: GO 48967
48967: DISABLE
48968: LD_INT 0
48970: PPUSH
48971: PPUSH
// begin if mpSibBomb <= 1 then
48972: LD_EXP 26
48976: PUSH
48977: LD_INT 1
48979: LESSEQUAL
48980: IFFALSE 48984
// exit ;
48982: GO 49057
// tmp := mpSibBomb ;
48984: LD_ADDR_VAR 0 2
48988: PUSH
48989: LD_EXP 26
48993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48994: LD_INT 35
48996: PPUSH
48997: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49001: LD_ADDR_VAR 0 2
49005: PUSH
49006: LD_VAR 0 2
49010: PUSH
49011: LD_INT 35
49013: MINUS
49014: ST_TO_ADDR
// until not tmp ;
49015: LD_VAR 0 2
49019: NOT
49020: IFFALSE 48994
// for side := 1 to 8 do
49022: LD_ADDR_VAR 0 1
49026: PUSH
49027: DOUBLE
49028: LD_INT 1
49030: DEC
49031: ST_TO_ADDR
49032: LD_INT 8
49034: PUSH
49035: FOR_TO
49036: IFFALSE 49055
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49038: LD_INT 25
49040: PPUSH
49041: LD_VAR 0 1
49045: PPUSH
49046: LD_INT 1
49048: PPUSH
49049: CALL_OW 322
49053: GO 49035
49055: POP
49056: POP
// end ;
49057: PPOPN 2
49059: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49060: LD_INT 0
49062: PPUSH
49063: PPUSH
49064: PPUSH
// mpBuildUpTimeDelay := 0 ;
49065: LD_ADDR_EXP 40
49069: PUSH
49070: LD_INT 0
49072: ST_TO_ADDR
// if not mpBuildUpTime then
49073: LD_EXP 18
49077: NOT
49078: IFFALSE 49082
// exit ;
49080: GO 49265
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49082: LD_ADDR_EXP 40
49086: PUSH
49087: LD_INT 8400
49089: PUSH
49090: LD_INT 2100
49092: PUSH
49093: LD_EXP 18
49097: MUL
49098: PLUS
49099: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49100: LD_ADDR_EXP 41
49104: PUSH
49105: LD_INT 1
49107: ST_TO_ADDR
// for i := 1 to 8 do
49108: LD_ADDR_VAR 0 2
49112: PUSH
49113: DOUBLE
49114: LD_INT 1
49116: DEC
49117: ST_TO_ADDR
49118: LD_INT 8
49120: PUSH
49121: FOR_TO
49122: IFFALSE 49263
// if mpSidePositions [ i ] then
49124: LD_EXP 5
49128: PUSH
49129: LD_VAR 0 2
49133: ARRAY
49134: IFFALSE 49261
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49136: LD_EXP 17
49140: PUSH
49141: LD_EXP 5
49145: PUSH
49146: LD_VAR 0 2
49150: ARRAY
49151: ARRAY
49152: PPUSH
49153: LD_INT 5
49155: PPUSH
49156: CALL_OW 424
// for j := 1 to 8 do
49160: LD_ADDR_VAR 0 3
49164: PUSH
49165: DOUBLE
49166: LD_INT 1
49168: DEC
49169: ST_TO_ADDR
49170: LD_INT 8
49172: PUSH
49173: FOR_TO
49174: IFFALSE 49259
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49176: LD_EXP 5
49180: PUSH
49181: LD_VAR 0 3
49185: ARRAY
49186: PUSH
49187: LD_EXP 6
49191: PUSH
49192: LD_VAR 0 2
49196: ARRAY
49197: PUSH
49198: LD_EXP 6
49202: PUSH
49203: LD_VAR 0 3
49207: ARRAY
49208: NONEQUAL
49209: PUSH
49210: LD_EXP 9
49214: NOT
49215: PUSH
49216: LD_VAR 0 2
49220: PUSH
49221: LD_VAR 0 3
49225: NONEQUAL
49226: AND
49227: OR
49228: AND
49229: IFFALSE 49257
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49231: LD_VAR 0 3
49235: PPUSH
49236: LD_EXP 17
49240: PUSH
49241: LD_EXP 5
49245: PUSH
49246: LD_VAR 0 2
49250: ARRAY
49251: ARRAY
49252: PPUSH
49253: CALL_OW 333
49257: GO 49173
49259: POP
49260: POP
// end ;
49261: GO 49121
49263: POP
49264: POP
// end ;
49265: LD_VAR 0 1
49269: RET
// function EndBuildUp ; var i , j ; begin
49270: LD_INT 0
49272: PPUSH
49273: PPUSH
49274: PPUSH
// mpBuildUpTimeActive := false ;
49275: LD_ADDR_EXP 41
49279: PUSH
49280: LD_INT 0
49282: ST_TO_ADDR
// for i := 1 to 8 do
49283: LD_ADDR_VAR 0 2
49287: PUSH
49288: DOUBLE
49289: LD_INT 1
49291: DEC
49292: ST_TO_ADDR
49293: LD_INT 8
49295: PUSH
49296: FOR_TO
49297: IFFALSE 49438
// if mpSidePositions [ i ] then
49299: LD_EXP 5
49303: PUSH
49304: LD_VAR 0 2
49308: ARRAY
49309: IFFALSE 49436
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49311: LD_EXP 17
49315: PUSH
49316: LD_EXP 5
49320: PUSH
49321: LD_VAR 0 2
49325: ARRAY
49326: ARRAY
49327: PPUSH
49328: LD_INT 0
49330: PPUSH
49331: CALL_OW 424
// for j := 1 to 8 do
49335: LD_ADDR_VAR 0 3
49339: PUSH
49340: DOUBLE
49341: LD_INT 1
49343: DEC
49344: ST_TO_ADDR
49345: LD_INT 8
49347: PUSH
49348: FOR_TO
49349: IFFALSE 49434
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49351: LD_EXP 5
49355: PUSH
49356: LD_VAR 0 3
49360: ARRAY
49361: PUSH
49362: LD_EXP 6
49366: PUSH
49367: LD_VAR 0 2
49371: ARRAY
49372: PUSH
49373: LD_EXP 6
49377: PUSH
49378: LD_VAR 0 3
49382: ARRAY
49383: NONEQUAL
49384: PUSH
49385: LD_EXP 9
49389: NOT
49390: PUSH
49391: LD_VAR 0 2
49395: PUSH
49396: LD_VAR 0 3
49400: NONEQUAL
49401: AND
49402: OR
49403: AND
49404: IFFALSE 49432
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49406: LD_VAR 0 3
49410: PPUSH
49411: LD_EXP 17
49415: PUSH
49416: LD_EXP 5
49420: PUSH
49421: LD_VAR 0 2
49425: ARRAY
49426: ARRAY
49427: PPUSH
49428: CALL_OW 334
49432: GO 49348
49434: POP
49435: POP
// end ;
49436: GO 49296
49438: POP
49439: POP
// end ;
49440: LD_VAR 0 1
49444: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49445: LD_EXP 41
49449: IFFALSE 49624
49451: GO 49453
49453: DISABLE
49454: LD_INT 0
49456: PPUSH
49457: PPUSH
// begin for i := 1 to 8 do
49458: LD_ADDR_VAR 0 1
49462: PUSH
49463: DOUBLE
49464: LD_INT 1
49466: DEC
49467: ST_TO_ADDR
49468: LD_INT 8
49470: PUSH
49471: FOR_TO
49472: IFFALSE 49621
// if mpSidePositions [ i ] then
49474: LD_EXP 5
49478: PUSH
49479: LD_VAR 0 1
49483: ARRAY
49484: IFFALSE 49619
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49486: LD_ADDR_VAR 0 2
49490: PUSH
49491: LD_EXP 17
49495: PUSH
49496: LD_EXP 5
49500: PUSH
49501: LD_VAR 0 1
49505: ARRAY
49506: ARRAY
49507: PPUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 21
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 21
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 22
49538: PUSH
49539: LD_OWVAR 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 70
49556: PUSH
49557: FOR_IN
49558: IFFALSE 49617
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49560: LD_EXP 6
49564: PUSH
49565: LD_VAR 0 1
49569: ARRAY
49570: PUSH
49571: LD_EXP 6
49575: PUSH
49576: LD_OWVAR 2
49580: ARRAY
49581: NONEQUAL
49582: PUSH
49583: LD_EXP 9
49587: NOT
49588: PUSH
49589: LD_VAR 0 1
49593: PUSH
49594: LD_OWVAR 2
49598: NONEQUAL
49599: AND
49600: OR
49601: IFFALSE 49615
// ComMoveToArea ( un , BuildUpEscape ) ;
49603: LD_VAR 0 2
49607: PPUSH
49608: LD_INT 17
49610: PPUSH
49611: CALL_OW 113
49615: GO 49557
49617: POP
49618: POP
49619: GO 49471
49621: POP
49622: POP
// enable ;
49623: ENABLE
// end ;
49624: PPOPN 2
49626: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49627: LD_EXP 18
49631: IFFALSE 49681
49633: GO 49635
49635: DISABLE
49636: LD_INT 0
49638: PPUSH
// begin tmp := mpBuildUpTime ;
49639: LD_ADDR_VAR 0 1
49643: PUSH
49644: LD_EXP 18
49648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49649: LD_INT 35
49651: PPUSH
49652: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49656: LD_ADDR_VAR 0 1
49660: PUSH
49661: LD_VAR 0 1
49665: PUSH
49666: LD_INT 35
49668: MINUS
49669: ST_TO_ADDR
// until not tmp ;
49670: LD_VAR 0 1
49674: NOT
49675: IFFALSE 49649
// EndBuildUp ;
49677: CALL 49270 0 0
// end ;
49681: PPOPN 1
49683: END
// every 0 0$1 trigger mpActive marked mpWin do
49684: LD_INT 100
49686: IFFALSE 49720
49688: GO 49690
49690: DISABLE
// begin if IAmServer then
49691: CALL_OW 518
49695: IFFALSE 49704
// wait ( 0 0$3 ) ;
49697: LD_INT 105
49699: PPUSH
49700: CALL_OW 67
// if Multiplayer then
49704: LD_OWVAR 4
49708: IFFALSE 49716
// YouWinInMultiplayer else
49710: CALL_OW 106
49714: GO 49720
// YouWin ;
49716: CALL_OW 103
// end ;
49720: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49721: LD_INT 0
49723: PPUSH
// result := false ;
49724: LD_ADDR_VAR 0 3
49728: PUSH
49729: LD_INT 0
49731: ST_TO_ADDR
// case gameType of GameTypeNormal :
49732: LD_VAR 0 1
49736: PUSH
49737: LD_INT 1
49739: DOUBLE
49740: EQUAL
49741: IFTRUE 49745
49743: GO 49818
49745: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49746: LD_ADDR_VAR 0 3
49750: PUSH
49751: LD_INT 22
49753: PUSH
49754: LD_VAR 0 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 21
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 33
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 33
49788: PUSH
49789: LD_INT 5
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PPUSH
49806: CALL_OW 69
49810: PPUSH
49811: CALL 5068 0 1
49815: ST_TO_ADDR
// end ; GameTypeSurvival :
49816: GO 50053
49818: LD_INT 2
49820: DOUBLE
49821: EQUAL
49822: IFTRUE 49826
49824: GO 49954
49826: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49827: LD_ADDR_VAR 0 3
49831: PUSH
49832: LD_INT 22
49834: PUSH
49835: LD_VAR 0 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 30
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 30
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PPUSH
49876: CALL_OW 69
49880: PPUSH
49881: CALL 5068 0 1
49885: PUSH
49886: LD_INT 22
49888: PUSH
49889: LD_VAR 0 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 21
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 33
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 33
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PPUSH
49941: CALL_OW 69
49945: PPUSH
49946: CALL 5068 0 1
49950: AND
49951: ST_TO_ADDR
// end ; GameTypeKing :
49952: GO 50053
49954: LD_INT 3
49956: DOUBLE
49957: EQUAL
49958: IFTRUE 49962
49960: GO 50052
49962: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49963: LD_ADDR_VAR 0 3
49967: PUSH
49968: LD_INT 22
49970: PUSH
49971: LD_VAR 0 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 21
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 33
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 33
50005: PUSH
50006: LD_INT 5
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PPUSH
50023: CALL_OW 69
50027: PPUSH
50028: CALL 5068 0 1
50032: PUSH
50033: LD_VAR 0 2
50037: PPUSH
50038: CALL 53330 0 1
50042: PUSH
50043: LD_EXP 33
50047: LESS
50048: AND
50049: ST_TO_ADDR
// end ; end ;
50050: GO 50053
50052: POP
// end ;
50053: LD_VAR 0 3
50057: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50058: LD_INT 100
50060: IFFALSE 50282
50062: GO 50064
50064: DISABLE
50065: LD_INT 0
50067: PPUSH
50068: PPUSH
// begin if Multiplayer then
50069: LD_OWVAR 4
50073: IFFALSE 50081
// SetPlayerSpectator ( ) else
50075: CALL_OW 572
50079: GO 50090
// FogOff ( your_side ) ;
50081: LD_OWVAR 2
50085: PPUSH
50086: CALL_OW 344
// repeat gameIsOn := false ;
50090: LD_ADDR_VAR 0 1
50094: PUSH
50095: LD_INT 0
50097: ST_TO_ADDR
// for i := 1 to 8 do
50098: LD_ADDR_VAR 0 2
50102: PUSH
50103: DOUBLE
50104: LD_INT 1
50106: DEC
50107: ST_TO_ADDR
50108: LD_INT 8
50110: PUSH
50111: FOR_TO
50112: IFFALSE 50234
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50114: LD_EXP 5
50118: PUSH
50119: LD_VAR 0 2
50123: ARRAY
50124: PUSH
50125: LD_VAR 0 2
50129: PPUSH
50130: CALL_OW 108
50134: AND
50135: PUSH
50136: LD_VAR 0 2
50140: PUSH
50141: LD_OWVAR 2
50145: NONEQUAL
50146: AND
50147: IFFALSE 50232
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50149: LD_EXP 6
50153: PUSH
50154: LD_VAR 0 2
50158: ARRAY
50159: NOT
50160: PUSH
50161: LD_EXP 6
50165: PUSH
50166: LD_VAR 0 2
50170: ARRAY
50171: PUSH
50172: LD_EXP 6
50176: PUSH
50177: LD_OWVAR 2
50181: ARRAY
50182: NONEQUAL
50183: PUSH
50184: LD_OWVAR 2
50188: PPUSH
50189: LD_VAR 0 2
50193: PPUSH
50194: CALL_OW 81
50198: PUSH
50199: LD_INT 1
50201: NONEQUAL
50202: AND
50203: OR
50204: IFFALSE 50232
// if HasPowerByGameType ( mpGameType , i ) then
50206: LD_EXP 1
50210: PPUSH
50211: LD_VAR 0 2
50215: PPUSH
50216: CALL 49721 0 2
50220: IFFALSE 50232
// begin gameIsOn := true ;
50222: LD_ADDR_VAR 0 1
50226: PUSH
50227: LD_INT 1
50229: ST_TO_ADDR
// break ;
50230: GO 50234
// end ;
50232: GO 50111
50234: POP
50235: POP
// wait ( 100 ) ;
50236: LD_INT 100
50238: PPUSH
50239: CALL_OW 67
// until not gameIsOn ;
50243: LD_VAR 0 1
50247: NOT
50248: IFFALSE 50090
// if IAmServer then
50250: CALL_OW 518
50254: IFFALSE 50263
// wait ( 0 0$3 ) ;
50256: LD_INT 105
50258: PPUSH
50259: CALL_OW 67
// if Multiplayer then
50263: LD_OWVAR 4
50267: IFFALSE 50275
// YouLostInMultiplayer else
50269: CALL_OW 107
50273: GO 50282
// YouLost (  ) ;
50275: LD_STRING 
50277: PPUSH
50278: CALL_OW 104
// end ;
50282: PPOPN 2
50284: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50285: LD_EXP 31
50289: IFFALSE 50665
50291: GO 50293
50293: DISABLE
50294: LD_INT 0
50296: PPUSH
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50301: LD_ADDR_VAR 0 5
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 4
50317: PUSH
50318: LD_INT 5
50320: PUSH
50321: LD_INT 6
50323: PUSH
50324: LD_INT 7
50326: PUSH
50327: LD_INT 8
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50340: LD_INT 350
50342: PPUSH
50343: CALL_OW 67
// for i := 1 to 8 do
50347: LD_ADDR_VAR 0 1
50351: PUSH
50352: DOUBLE
50353: LD_INT 1
50355: DEC
50356: ST_TO_ADDR
50357: LD_INT 8
50359: PUSH
50360: FOR_TO
50361: IFFALSE 50635
// begin j := sides [ i ] ;
50363: LD_ADDR_VAR 0 2
50367: PUSH
50368: LD_VAR 0 5
50372: PUSH
50373: LD_VAR 0 1
50377: ARRAY
50378: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50379: LD_EXP 38
50383: PUSH
50384: LD_VAR 0 2
50388: ARRAY
50389: PPUSH
50390: CALL 5068 0 1
50394: PUSH
50395: LD_VAR 0 2
50399: PPUSH
50400: CALL_OW 108
50404: AND
50405: PUSH
50406: LD_EXP 1
50410: PPUSH
50411: LD_VAR 0 2
50415: PPUSH
50416: CALL 49721 0 2
50420: AND
50421: IFFALSE 50633
// begin wait ( mpRespawn div 3 ) ;
50423: LD_EXP 31
50427: PUSH
50428: LD_INT 3
50430: DIV
50431: PPUSH
50432: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50436: LD_ADDR_VAR 0 3
50440: PUSH
50441: LD_INT 22
50443: PUSH
50444: LD_VAR 0 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 50
50455: PUSH
50456: EMPTY
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 30
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 30
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: PPUSH
50492: CALL_OW 69
50496: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
50497: LD_VAR 0 3
50501: NOT
50502: PUSH
50503: LD_VAR 0 2
50507: PPUSH
50508: CALL_OW 108
50512: NOT
50513: OR
50514: PUSH
50515: LD_EXP 1
50519: PPUSH
50520: LD_VAR 0 2
50524: PPUSH
50525: CALL 49721 0 2
50529: NOT
50530: OR
50531: IFFALSE 50535
// continue ;
50533: GO 50360
// spawn := tmp [ 1 ] ;
50535: LD_ADDR_VAR 0 4
50539: PUSH
50540: LD_VAR 0 3
50544: PUSH
50545: LD_INT 1
50547: ARRAY
50548: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50549: LD_EXP 38
50553: PUSH
50554: LD_VAR 0 2
50558: ARRAY
50559: PUSH
50560: LD_INT 1
50562: ARRAY
50563: PPUSH
50564: LD_VAR 0 4
50568: PPUSH
50569: CALL_OW 250
50573: PPUSH
50574: LD_VAR 0 4
50578: PPUSH
50579: CALL_OW 251
50583: PPUSH
50584: LD_INT 32
50586: PPUSH
50587: LD_INT 1
50589: PPUSH
50590: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50594: LD_ADDR_EXP 38
50598: PUSH
50599: LD_EXP 38
50603: PPUSH
50604: LD_VAR 0 2
50608: PPUSH
50609: LD_EXP 38
50613: PUSH
50614: LD_VAR 0 2
50618: ARRAY
50619: PPUSH
50620: LD_INT 1
50622: PPUSH
50623: CALL_OW 3
50627: PPUSH
50628: CALL_OW 1
50632: ST_TO_ADDR
// end ; end ;
50633: GO 50360
50635: POP
50636: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50637: LD_ADDR_VAR 0 5
50641: PUSH
50642: LD_VAR 0 5
50646: PPUSH
50647: LD_INT 1
50649: PPUSH
50650: LD_INT 8
50652: PPUSH
50653: LD_INT 1
50655: PPUSH
50656: CALL 7346 0 4
50660: ST_TO_ADDR
// until false ;
50661: LD_INT 0
50663: IFFALSE 50340
// end ;
50665: PPOPN 5
50667: END
// every 0 0$1 marked mpActive do
50668: GO 50670
50670: DISABLE
// begin enable ;
50671: ENABLE
// if not mpDisplayStrings then
50672: LD_EXP 36
50676: NOT
50677: IFFALSE 50688
// begin display_strings := [ ] ;
50679: LD_ADDR_OWVAR 47
50683: PUSH
50684: EMPTY
50685: ST_TO_ADDR
// exit ;
50686: GO 50698
// end ; display_strings := mpDisplayStrings ;
50688: LD_ADDR_OWVAR 47
50692: PUSH
50693: LD_EXP 36
50697: ST_TO_ADDR
// end ; end_of_file
50698: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50699: LD_INT 0
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
// if GetType ( un ) = unit_vehicle then
50710: LD_VAR 0 1
50714: PPUSH
50715: CALL_OW 247
50719: PUSH
50720: LD_INT 2
50722: EQUAL
50723: IFFALSE 50727
// exit ;
50725: GO 51359
// side := GetSide ( un ) ;
50727: LD_ADDR_VAR 0 9
50731: PUSH
50732: LD_VAR 0 1
50736: PPUSH
50737: CALL_OW 255
50741: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50742: LD_EXP 1
50746: PUSH
50747: LD_INT 2
50749: EQUAL
50750: IFFALSE 50826
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 266
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: IN
50772: IFFALSE 50826
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50774: LD_ADDR_VAR 0 3
50778: PUSH
50779: LD_INT 22
50781: PUSH
50782: LD_VAR 0 9
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 21
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PPUSH
50805: CALL_OW 69
50809: PUSH
50810: FOR_IN
50811: IFFALSE 50824
// KillUnit ( i ) ;
50813: LD_VAR 0 3
50817: PPUSH
50818: CALL_OW 66
50822: GO 50810
50824: POP
50825: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 257
50835: PUSH
50836: LD_INT 12
50838: PUSH
50839: LD_INT 17
50841: PUSH
50842: LD_INT 15
50844: PUSH
50845: LD_INT 16
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: IN
50854: PUSH
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 263
50864: PUSH
50865: LD_INT 5
50867: EQUAL
50868: OR
50869: IFFALSE 51088
// begin tag := 0 ;
50871: LD_ADDR_VAR 0 5
50875: PUSH
50876: LD_INT 0
50878: ST_TO_ADDR
// for i := 1 to 8 do
50879: LD_ADDR_VAR 0 3
50883: PUSH
50884: DOUBLE
50885: LD_INT 1
50887: DEC
50888: ST_TO_ADDR
50889: LD_INT 8
50891: PUSH
50892: FOR_TO
50893: IFFALSE 50927
// if un in mpApePosIndex [ i ] then
50895: LD_VAR 0 1
50899: PUSH
50900: LD_EXP 30
50904: PUSH
50905: LD_VAR 0 3
50909: ARRAY
50910: IN
50911: IFFALSE 50925
// begin tag := i ;
50913: LD_ADDR_VAR 0 5
50917: PUSH
50918: LD_VAR 0 3
50922: ST_TO_ADDR
// break ;
50923: GO 50927
// end ;
50925: GO 50892
50927: POP
50928: POP
// if not tag then
50929: LD_VAR 0 5
50933: NOT
50934: IFFALSE 50938
// exit ;
50936: GO 51359
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50938: LD_ADDR_VAR 0 7
50942: PUSH
50943: LD_EXP 29
50947: PUSH
50948: LD_EXP 5
50952: PUSH
50953: LD_VAR 0 5
50957: ARRAY
50958: ARRAY
50959: ST_TO_ADDR
// if not area then
50960: LD_VAR 0 7
50964: NOT
50965: IFFALSE 50969
// exit ;
50967: GO 51359
// wait ( 4 4$00 ) ;
50969: LD_INT 8400
50971: PPUSH
50972: CALL_OW 67
// repeat wait ( 10 ) ;
50976: LD_INT 10
50978: PPUSH
50979: CALL_OW 67
// until not mpBlockRespThread ;
50983: LD_EXP 39
50987: NOT
50988: IFFALSE 50976
// mpBlockRespThread := true ;
50990: LD_ADDR_EXP 39
50994: PUSH
50995: LD_INT 1
50997: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50998: LD_INT 0
51000: PPUSH
51001: CALL 36925 0 1
// ape := CreateHuman ;
51005: LD_ADDR_VAR 0 4
51009: PUSH
51010: CALL_OW 44
51014: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51015: LD_ADDR_EXP 30
51019: PUSH
51020: LD_EXP 30
51024: PPUSH
51025: LD_VAR 0 5
51029: PPUSH
51030: LD_EXP 30
51034: PUSH
51035: LD_VAR 0 5
51039: ARRAY
51040: PPUSH
51041: LD_VAR 0 4
51045: PPUSH
51046: CALL 40677 0 2
51050: PPUSH
51051: CALL_OW 1
51055: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51056: LD_VAR 0 4
51060: PPUSH
51061: LD_VAR 0 7
51065: PPUSH
51066: LD_INT 0
51068: PPUSH
51069: CALL_OW 49
// wait ( 10 ) ;
51073: LD_INT 10
51075: PPUSH
51076: CALL_OW 67
// mpBlockRespThread := false ;
51080: LD_ADDR_EXP 39
51084: PUSH
51085: LD_INT 0
51087: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51088: LD_VAR 0 1
51092: PPUSH
51093: CALL_OW 247
51097: PUSH
51098: LD_INT 1
51100: EQUAL
51101: PUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: CALL_OW 248
51111: PUSH
51112: LD_INT 0
51114: GREATER
51115: AND
51116: IFFALSE 51359
// begin if not mpRespawn then
51118: LD_EXP 31
51122: NOT
51123: IFFALSE 51127
// exit ;
51125: GO 51359
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51127: LD_VAR 0 9
51131: PPUSH
51132: CALL_OW 108
51136: NOT
51137: PUSH
51138: LD_EXP 1
51142: PPUSH
51143: LD_VAR 0 9
51147: PPUSH
51148: CALL 49721 0 2
51152: NOT
51153: AND
51154: IFFALSE 51158
// exit ;
51156: GO 51359
// side := GetSide ( un ) ;
51158: LD_ADDR_VAR 0 9
51162: PUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 255
51172: ST_TO_ADDR
// nation := GetNation ( un ) ;
51173: LD_ADDR_VAR 0 8
51177: PUSH
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 248
51187: ST_TO_ADDR
// class := GetClass ( un ) ;
51188: LD_ADDR_VAR 0 6
51192: PUSH
51193: LD_VAR 0 1
51197: PPUSH
51198: CALL_OW 257
51202: ST_TO_ADDR
// if class > 4 then
51203: LD_VAR 0 6
51207: PUSH
51208: LD_INT 4
51210: GREATER
51211: IFFALSE 51221
// class := 1 ;
51213: LD_ADDR_VAR 0 6
51217: PUSH
51218: LD_INT 1
51220: ST_TO_ADDR
// repeat wait ( 10 ) ;
51221: LD_INT 10
51223: PPUSH
51224: CALL_OW 67
// until not mpBlockRespThread ;
51228: LD_EXP 39
51232: NOT
51233: IFFALSE 51221
// mpBlockRespThread := true ;
51235: LD_ADDR_EXP 39
51239: PUSH
51240: LD_INT 1
51242: ST_TO_ADDR
// uc_side := side ;
51243: LD_ADDR_OWVAR 20
51247: PUSH
51248: LD_VAR 0 9
51252: ST_TO_ADDR
// uc_nation := nation ;
51253: LD_ADDR_OWVAR 21
51257: PUSH
51258: LD_VAR 0 8
51262: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51263: LD_INT 0
51265: PPUSH
51266: LD_VAR 0 6
51270: PPUSH
51271: LD_INT 2
51273: PPUSH
51274: CALL_OW 380
// un := CreateHuman ;
51278: LD_ADDR_VAR 0 1
51282: PUSH
51283: CALL_OW 44
51287: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51288: LD_ADDR_EXP 38
51292: PUSH
51293: LD_EXP 38
51297: PPUSH
51298: LD_VAR 0 9
51302: PPUSH
51303: LD_EXP 38
51307: PUSH
51308: LD_VAR 0 9
51312: ARRAY
51313: PPUSH
51314: LD_EXP 38
51318: PUSH
51319: LD_VAR 0 9
51323: ARRAY
51324: PUSH
51325: LD_INT 1
51327: PLUS
51328: PPUSH
51329: LD_VAR 0 1
51333: PPUSH
51334: CALL_OW 1
51338: PPUSH
51339: CALL_OW 1
51343: ST_TO_ADDR
// wait ( 10 ) ;
51344: LD_INT 10
51346: PPUSH
51347: CALL_OW 67
// mpBlockRespThread := false ;
51351: LD_ADDR_EXP 39
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// end ; end ;
51359: LD_VAR 0 2
51363: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51364: LD_INT 0
51366: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 266
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: IN
51387: IFFALSE 51412
// SetBName ( building , @ & GetSide ( building ) ) ;
51389: LD_VAR 0 1
51393: PPUSH
51394: LD_STRING @
51396: PUSH
51397: LD_VAR 0 1
51401: PPUSH
51402: CALL_OW 255
51406: STR
51407: PPUSH
51408: CALL_OW 500
// end ;
51412: LD_VAR 0 2
51416: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51417: LD_INT 0
51419: PPUSH
51420: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51421: LD_EXP 1
51425: PUSH
51426: LD_INT 2
51428: EQUAL
51429: PUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 266
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: IN
51450: AND
51451: IFFALSE 51516
// begin KillUnit ( building ) ;
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51462: LD_ADDR_VAR 0 5
51466: PUSH
51467: LD_INT 22
51469: PUSH
51470: LD_VAR 0 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 21
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PPUSH
51493: CALL_OW 69
51497: PUSH
51498: FOR_IN
51499: IFFALSE 51512
// KillUnit ( i ) ;
51501: LD_VAR 0 5
51505: PPUSH
51506: CALL_OW 66
51510: GO 51498
51512: POP
51513: POP
// exit ;
51514: GO 51561
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51516: LD_VAR 0 1
51520: PPUSH
51521: CALL_OW 266
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: IN
51536: IFFALSE 51561
// SetBName ( building , @ & GetSide ( building ) ) ;
51538: LD_VAR 0 1
51542: PPUSH
51543: LD_STRING @
51545: PUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 255
51555: STR
51556: PPUSH
51557: CALL_OW 500
// end ; end_of_file
51561: LD_VAR 0 4
51565: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51566: LD_EXP 37
51570: PUSH
51571: CALL 51776 0 0
51575: AND
51576: PUSH
51577: LD_OWVAR 4
51581: AND
51582: IFFALSE 51773
51584: GO 51586
51586: DISABLE
51587: LD_INT 0
51589: PPUSH
51590: PPUSH
// begin canWin := false ;
51591: LD_ADDR_VAR 0 2
51595: PUSH
51596: LD_INT 0
51598: ST_TO_ADDR
// if not HasPower ( your_side ) then
51599: LD_OWVAR 2
51603: PPUSH
51604: CALL 51816 0 1
51608: NOT
51609: IFFALSE 51620
// begin Multiplayer_Loose_Message ;
51611: CALL_OW 521
// enable ( mpLose ) ;
51615: LD_INT 102
51617: ENABLE_MARKED
// end else
51618: GO 51773
// begin canWin := true ;
51620: LD_ADDR_VAR 0 2
51624: PUSH
51625: LD_INT 1
51627: ST_TO_ADDR
// for i := 1 to 8 do
51628: LD_ADDR_VAR 0 1
51632: PUSH
51633: DOUBLE
51634: LD_INT 1
51636: DEC
51637: ST_TO_ADDR
51638: LD_INT 8
51640: PUSH
51641: FOR_TO
51642: IFFALSE 51759
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51644: LD_EXP 5
51648: PUSH
51649: LD_VAR 0 1
51653: ARRAY
51654: PUSH
51655: LD_VAR 0 1
51659: PPUSH
51660: CALL_OW 108
51664: AND
51665: PUSH
51666: LD_VAR 0 1
51670: PUSH
51671: LD_OWVAR 2
51675: NONEQUAL
51676: AND
51677: IFFALSE 51757
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51679: LD_EXP 6
51683: PUSH
51684: LD_VAR 0 1
51688: ARRAY
51689: NOT
51690: PUSH
51691: LD_EXP 6
51695: PUSH
51696: LD_VAR 0 1
51700: ARRAY
51701: PUSH
51702: LD_EXP 6
51706: PUSH
51707: LD_OWVAR 2
51711: ARRAY
51712: NONEQUAL
51713: PUSH
51714: LD_OWVAR 2
51718: PPUSH
51719: LD_VAR 0 1
51723: PPUSH
51724: CALL_OW 81
51728: PUSH
51729: LD_INT 1
51731: NONEQUAL
51732: AND
51733: OR
51734: IFFALSE 51757
// if HasPower ( i ) then
51736: LD_VAR 0 1
51740: PPUSH
51741: CALL 51816 0 1
51745: IFFALSE 51757
// begin canWin := false ;
51747: LD_ADDR_VAR 0 2
51751: PUSH
51752: LD_INT 0
51754: ST_TO_ADDR
// break ;
51755: GO 51759
// end ;
51757: GO 51641
51759: POP
51760: POP
// if canWin then
51761: LD_VAR 0 2
51765: IFFALSE 51772
// enable ( mpWin ) else
51767: LD_INT 101
51769: ENABLE_MARKED
51770: GO 51773
// enable ;
51772: ENABLE
// end ; end ;
51773: PPOPN 2
51775: END
// function CanWinLoose ; begin
51776: LD_INT 0
51778: PPUSH
// result := true ;
51779: LD_ADDR_VAR 0 1
51783: PUSH
51784: LD_INT 1
51786: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51787: CALL_OW 531
51791: PUSH
51792: CALL_OW 519
51796: PUSH
51797: LD_INT 1
51799: GREATER
51800: AND
51801: IFFALSE 51811
// result := false ;
51803: LD_ADDR_VAR 0 1
51807: PUSH
51808: LD_INT 0
51810: ST_TO_ADDR
// end ;
51811: LD_VAR 0 1
51815: RET
// function HasPower ( i ) ; begin
51816: LD_INT 0
51818: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51819: LD_ADDR_VAR 0 2
51823: PUSH
51824: LD_INT 22
51826: PUSH
51827: LD_VAR 0 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 21
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 33
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 33
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PPUSH
51879: CALL_OW 69
51883: ST_TO_ADDR
// end ; end_of_file
51884: LD_VAR 0 2
51888: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51889: LD_EXP 37
51893: IFFALSE 51936
51895: GO 51897
51897: DISABLE
51898: LD_INT 0
51900: PPUSH
// begin for i := 1 to 8 do
51901: LD_ADDR_VAR 0 1
51905: PUSH
51906: DOUBLE
51907: LD_INT 1
51909: DEC
51910: ST_TO_ADDR
51911: LD_INT 8
51913: PUSH
51914: FOR_TO
51915: IFFALSE 51934
// SetRestrict ( b_depot , i , state_disabled ) ;
51917: LD_INT 0
51919: PPUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: LD_INT 0
51927: PPUSH
51928: CALL_OW 324
51932: GO 51914
51934: POP
51935: POP
// end ;
51936: PPOPN 1
51938: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51939: LD_EXP 37
51943: PUSH
51944: CALL 52149 0 0
51948: AND
51949: PUSH
51950: LD_OWVAR 4
51954: AND
51955: IFFALSE 52146
51957: GO 51959
51959: DISABLE
51960: LD_INT 0
51962: PPUSH
51963: PPUSH
// begin canWin := false ;
51964: LD_ADDR_VAR 0 2
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// if not HasPower ( your_side ) then
51972: LD_OWVAR 2
51976: PPUSH
51977: CALL 52189 0 1
51981: NOT
51982: IFFALSE 51993
// begin Multiplayer_Loose_Message ;
51984: CALL_OW 521
// enable ( mpLose ) ;
51988: LD_INT 102
51990: ENABLE_MARKED
// end else
51991: GO 52146
// begin canWin := true ;
51993: LD_ADDR_VAR 0 2
51997: PUSH
51998: LD_INT 1
52000: ST_TO_ADDR
// for i := 1 to 8 do
52001: LD_ADDR_VAR 0 1
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_INT 8
52013: PUSH
52014: FOR_TO
52015: IFFALSE 52132
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52017: LD_EXP 5
52021: PUSH
52022: LD_VAR 0 1
52026: ARRAY
52027: PUSH
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 108
52037: AND
52038: PUSH
52039: LD_VAR 0 1
52043: PUSH
52044: LD_OWVAR 2
52048: NONEQUAL
52049: AND
52050: IFFALSE 52130
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52052: LD_EXP 6
52056: PUSH
52057: LD_VAR 0 1
52061: ARRAY
52062: NOT
52063: PUSH
52064: LD_EXP 6
52068: PUSH
52069: LD_VAR 0 1
52073: ARRAY
52074: PUSH
52075: LD_EXP 6
52079: PUSH
52080: LD_OWVAR 2
52084: ARRAY
52085: NONEQUAL
52086: PUSH
52087: LD_OWVAR 2
52091: PPUSH
52092: LD_VAR 0 1
52096: PPUSH
52097: CALL_OW 81
52101: PUSH
52102: LD_INT 1
52104: NONEQUAL
52105: AND
52106: OR
52107: IFFALSE 52130
// if HasPower ( i ) then
52109: LD_VAR 0 1
52113: PPUSH
52114: CALL 52189 0 1
52118: IFFALSE 52130
// begin canWin := false ;
52120: LD_ADDR_VAR 0 2
52124: PUSH
52125: LD_INT 0
52127: ST_TO_ADDR
// break ;
52128: GO 52132
// end ;
52130: GO 52014
52132: POP
52133: POP
// if canWin then
52134: LD_VAR 0 2
52138: IFFALSE 52145
// enable ( mpWin ) else
52140: LD_INT 101
52142: ENABLE_MARKED
52143: GO 52146
// enable ;
52145: ENABLE
// end ; end ;
52146: PPOPN 2
52148: END
// function CanWinLoose ; begin
52149: LD_INT 0
52151: PPUSH
// result := true ;
52152: LD_ADDR_VAR 0 1
52156: PUSH
52157: LD_INT 1
52159: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52160: CALL_OW 531
52164: PUSH
52165: CALL_OW 519
52169: PUSH
52170: LD_INT 1
52172: GREATER
52173: AND
52174: IFFALSE 52184
// result := false ;
52176: LD_ADDR_VAR 0 1
52180: PUSH
52181: LD_INT 0
52183: ST_TO_ADDR
// end ;
52184: LD_VAR 0 1
52188: RET
// function HasPower ( i ) ; begin
52189: LD_INT 0
52191: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52192: LD_INT 22
52194: PUSH
52195: LD_VAR 0 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 30
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PPUSH
52236: CALL_OW 69
52240: NOT
52241: IFFALSE 52245
// exit ;
52243: GO 52310
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52245: LD_ADDR_VAR 0 2
52249: PUSH
52250: LD_INT 22
52252: PUSH
52253: LD_VAR 0 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 21
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 33
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 33
52287: PUSH
52288: LD_INT 5
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PPUSH
52305: CALL_OW 69
52309: ST_TO_ADDR
// end ; end_of_file
52310: LD_VAR 0 2
52314: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52315: LD_EXP 37
52319: IFFALSE 52658
52321: GO 52323
52323: DISABLE
52324: LD_INT 0
52326: PPUSH
52327: PPUSH
52328: PPUSH
// begin mpKingPoints := [ ] ;
52329: LD_ADDR_EXP 42
52333: PUSH
52334: EMPTY
52335: ST_TO_ADDR
// if mpTeamGame then
52336: LD_EXP 9
52340: IFFALSE 52394
// begin for i := 1 to Count ( mpTeams ) do
52342: LD_ADDR_VAR 0 1
52346: PUSH
52347: DOUBLE
52348: LD_INT 1
52350: DEC
52351: ST_TO_ADDR
52352: LD_EXP 8
52356: PPUSH
52357: CALL 5068 0 1
52361: PUSH
52362: FOR_TO
52363: IFFALSE 52390
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52365: LD_ADDR_EXP 42
52369: PUSH
52370: LD_EXP 42
52374: PPUSH
52375: LD_VAR 0 1
52379: PPUSH
52380: LD_INT 0
52382: PPUSH
52383: CALL_OW 1
52387: ST_TO_ADDR
52388: GO 52362
52390: POP
52391: POP
// end else
52392: GO 52437
// begin for i := 1 to 8 do
52394: LD_ADDR_VAR 0 1
52398: PUSH
52399: DOUBLE
52400: LD_INT 1
52402: DEC
52403: ST_TO_ADDR
52404: LD_INT 8
52406: PUSH
52407: FOR_TO
52408: IFFALSE 52435
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52410: LD_ADDR_EXP 42
52414: PUSH
52415: LD_EXP 42
52419: PPUSH
52420: LD_VAR 0 1
52424: PPUSH
52425: LD_INT 0
52427: PPUSH
52428: CALL_OW 1
52432: ST_TO_ADDR
52433: GO 52407
52435: POP
52436: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52437: LD_ADDR_VAR 0 3
52441: PUSH
52442: LD_INT 73
52444: PPUSH
52445: LD_INT 0
52447: PPUSH
52448: CALL_OW 517
52452: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52453: LD_ADDR_VAR 0 1
52457: PUSH
52458: DOUBLE
52459: LD_INT 1
52461: DEC
52462: ST_TO_ADDR
52463: LD_VAR 0 3
52467: PUSH
52468: LD_INT 1
52470: ARRAY
52471: PUSH
52472: FOR_TO
52473: IFFALSE 52540
// for j := 1 to 8 do
52475: LD_ADDR_VAR 0 2
52479: PUSH
52480: DOUBLE
52481: LD_INT 1
52483: DEC
52484: ST_TO_ADDR
52485: LD_INT 8
52487: PUSH
52488: FOR_TO
52489: IFFALSE 52536
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52491: LD_VAR 0 3
52495: PUSH
52496: LD_INT 1
52498: ARRAY
52499: PUSH
52500: LD_VAR 0 1
52504: ARRAY
52505: PPUSH
52506: LD_VAR 0 3
52510: PUSH
52511: LD_INT 2
52513: ARRAY
52514: PUSH
52515: LD_VAR 0 1
52519: ARRAY
52520: PPUSH
52521: LD_VAR 0 2
52525: PPUSH
52526: LD_INT 12
52528: NEG
52529: PPUSH
52530: CALL_OW 330
52534: GO 52488
52536: POP
52537: POP
52538: GO 52472
52540: POP
52541: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52542: LD_EXP 32
52546: PPUSH
52547: LD_INT 1
52549: PPUSH
52550: CALL_OW 424
// UpdateCounter ;
52554: CALL 53160 0 0
// repeat wait ( 0 0$1 ) ;
52558: LD_INT 35
52560: PPUSH
52561: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52565: LD_ADDR_VAR 0 3
52569: PUSH
52570: LD_EXP 32
52574: PPUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 57
52580: PUSH
52581: EMPTY
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 50
52590: PUSH
52591: EMPTY
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 30
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 30
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: PPUSH
52627: CALL_OW 70
52631: ST_TO_ADDR
// if not tmp then
52632: LD_VAR 0 3
52636: NOT
52637: IFFALSE 52641
// continue ;
52639: GO 52558
// AddPoints ( tmp ) ;
52641: LD_VAR 0 3
52645: PPUSH
52646: CALL 52838 0 1
// UpdateCounter ;
52650: CALL 53160 0 0
// until false ;
52654: LD_INT 0
52656: IFFALSE 52558
// end ;
52658: PPOPN 3
52660: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52661: LD_EXP 37
52665: PUSH
52666: LD_EXP 35
52670: AND
52671: IFFALSE 52835
52673: GO 52675
52675: DISABLE
52676: LD_INT 0
52678: PPUSH
52679: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52680: LD_ADDR_VAR 0 2
52684: PUSH
52685: LD_INT 73
52687: PPUSH
52688: LD_INT 0
52690: PPUSH
52691: CALL_OW 517
52695: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52696: LD_ADDR_VAR 0 1
52700: PUSH
52701: DOUBLE
52702: LD_INT 1
52704: DEC
52705: ST_TO_ADDR
52706: LD_VAR 0 2
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: FOR_TO
52716: IFFALSE 52757
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52718: LD_VAR 0 2
52722: PUSH
52723: LD_INT 1
52725: ARRAY
52726: PUSH
52727: LD_VAR 0 1
52731: ARRAY
52732: PPUSH
52733: LD_VAR 0 2
52737: PUSH
52738: LD_INT 2
52740: ARRAY
52741: PUSH
52742: LD_VAR 0 1
52746: ARRAY
52747: PPUSH
52748: LD_INT 125
52750: PPUSH
52751: CALL_OW 495
52755: GO 52715
52757: POP
52758: POP
// repeat wait ( mpEmissions ) ;
52759: LD_EXP 35
52763: PPUSH
52764: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52768: LD_ADDR_VAR 0 1
52772: PUSH
52773: DOUBLE
52774: LD_INT 1
52776: DEC
52777: ST_TO_ADDR
52778: LD_VAR 0 2
52782: PUSH
52783: LD_INT 1
52785: ARRAY
52786: PUSH
52787: FOR_TO
52788: IFFALSE 52829
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52790: LD_VAR 0 2
52794: PUSH
52795: LD_INT 1
52797: ARRAY
52798: PUSH
52799: LD_VAR 0 1
52803: ARRAY
52804: PPUSH
52805: LD_VAR 0 2
52809: PUSH
52810: LD_INT 2
52812: ARRAY
52813: PUSH
52814: LD_VAR 0 1
52818: ARRAY
52819: PPUSH
52820: LD_INT 15
52822: PPUSH
52823: CALL_OW 495
52827: GO 52787
52829: POP
52830: POP
// until false ;
52831: LD_INT 0
52833: IFFALSE 52759
// end ;
52835: PPOPN 2
52837: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52838: LD_INT 0
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
// if mpTeamGame then
52845: LD_EXP 9
52849: IFFALSE 53046
// begin first := depots [ 1 ] ;
52851: LD_ADDR_VAR 0 4
52855: PUSH
52856: LD_VAR 0 1
52860: PUSH
52861: LD_INT 1
52863: ARRAY
52864: ST_TO_ADDR
// side := GetSide ( first ) ;
52865: LD_ADDR_VAR 0 6
52869: PUSH
52870: LD_VAR 0 4
52874: PPUSH
52875: CALL_OW 255
52879: ST_TO_ADDR
// for i := 1 to mpTeams do
52880: LD_ADDR_VAR 0 3
52884: PUSH
52885: DOUBLE
52886: LD_INT 1
52888: DEC
52889: ST_TO_ADDR
52890: LD_EXP 8
52894: PUSH
52895: FOR_TO
52896: IFFALSE 52930
// if side in mpTeams [ i ] then
52898: LD_VAR 0 6
52902: PUSH
52903: LD_EXP 8
52907: PUSH
52908: LD_VAR 0 3
52912: ARRAY
52913: IN
52914: IFFALSE 52928
// begin team := i ;
52916: LD_ADDR_VAR 0 5
52920: PUSH
52921: LD_VAR 0 3
52925: ST_TO_ADDR
// break ;
52926: GO 52930
// end ;
52928: GO 52895
52930: POP
52931: POP
// if not team then
52932: LD_VAR 0 5
52936: NOT
52937: IFFALSE 52941
// exit ;
52939: GO 53155
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52941: LD_EXP 32
52945: PPUSH
52946: LD_INT 81
52948: PUSH
52949: LD_VAR 0 6
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PPUSH
52958: CALL_OW 70
52962: IFFALSE 52966
// exit ;
52964: GO 53155
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52966: LD_ADDR_EXP 42
52970: PUSH
52971: LD_EXP 42
52975: PPUSH
52976: LD_VAR 0 5
52980: PPUSH
52981: LD_EXP 42
52985: PUSH
52986: LD_VAR 0 5
52990: ARRAY
52991: PUSH
52992: LD_INT 1
52994: PLUS
52995: PPUSH
52996: CALL_OW 1
53000: ST_TO_ADDR
// for i in mpTeams [ team ] do
53001: LD_ADDR_VAR 0 3
53005: PUSH
53006: LD_EXP 8
53010: PUSH
53011: LD_VAR 0 5
53015: ARRAY
53016: PUSH
53017: FOR_IN
53018: IFFALSE 53042
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
53020: LD_VAR 0 3
53024: PPUSH
53025: LD_EXP 42
53029: PUSH
53030: LD_VAR 0 5
53034: ARRAY
53035: PPUSH
53036: CALL_OW 506
53040: GO 53017
53042: POP
53043: POP
// end else
53044: GO 53155
// begin first := depots [ 1 ] ;
53046: LD_ADDR_VAR 0 4
53050: PUSH
53051: LD_VAR 0 1
53055: PUSH
53056: LD_INT 1
53058: ARRAY
53059: ST_TO_ADDR
// side := GetSide ( first ) ;
53060: LD_ADDR_VAR 0 6
53064: PUSH
53065: LD_VAR 0 4
53069: PPUSH
53070: CALL_OW 255
53074: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
53075: LD_EXP 32
53079: PPUSH
53080: LD_INT 81
53082: PUSH
53083: LD_VAR 0 6
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PPUSH
53092: CALL_OW 70
53096: IFFALSE 53100
// exit ;
53098: GO 53155
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
53100: LD_ADDR_EXP 42
53104: PUSH
53105: LD_EXP 42
53109: PPUSH
53110: LD_VAR 0 6
53114: PPUSH
53115: LD_EXP 42
53119: PUSH
53120: LD_VAR 0 6
53124: ARRAY
53125: PUSH
53126: LD_INT 1
53128: PLUS
53129: PPUSH
53130: CALL_OW 1
53134: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
53135: LD_VAR 0 6
53139: PPUSH
53140: LD_EXP 42
53144: PUSH
53145: LD_VAR 0 6
53149: ARRAY
53150: PPUSH
53151: CALL_OW 506
// end ; end ;
53155: LD_VAR 0 2
53159: RET
// function UpdateCounter ; var i ; begin
53160: LD_INT 0
53162: PPUSH
53163: PPUSH
// result := [ ] ;
53164: LD_ADDR_VAR 0 1
53168: PUSH
53169: EMPTY
53170: ST_TO_ADDR
// if mpTeamGame then
53171: LD_EXP 9
53175: IFFALSE 53242
// begin for i := 1 to mpTeams do
53177: LD_ADDR_VAR 0 2
53181: PUSH
53182: DOUBLE
53183: LD_INT 1
53185: DEC
53186: ST_TO_ADDR
53187: LD_EXP 8
53191: PUSH
53192: FOR_TO
53193: IFFALSE 53238
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53195: LD_ADDR_VAR 0 1
53199: PUSH
53200: LD_VAR 0 1
53204: PUSH
53205: LD_STRING #KingoftheHill-Team
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_EXP 42
53217: PUSH
53218: LD_VAR 0 2
53222: ARRAY
53223: PUSH
53224: LD_EXP 33
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: ADD
53235: ST_TO_ADDR
53236: GO 53192
53238: POP
53239: POP
// end else
53240: GO 53315
// begin for i := 1 to 8 do
53242: LD_ADDR_VAR 0 2
53246: PUSH
53247: DOUBLE
53248: LD_INT 1
53250: DEC
53251: ST_TO_ADDR
53252: LD_INT 8
53254: PUSH
53255: FOR_TO
53256: IFFALSE 53313
// if mpSidePositions [ i ] then
53258: LD_EXP 5
53262: PUSH
53263: LD_VAR 0 2
53267: ARRAY
53268: IFFALSE 53311
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53270: LD_ADDR_VAR 0 1
53274: PUSH
53275: LD_VAR 0 1
53279: PUSH
53280: LD_STRING #KingoftheHill-Player
53282: PUSH
53283: LD_VAR 0 2
53287: PUSH
53288: LD_EXP 42
53292: PUSH
53293: LD_VAR 0 2
53297: ARRAY
53298: PUSH
53299: LD_EXP 33
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: ADD
53310: ST_TO_ADDR
53311: GO 53255
53313: POP
53314: POP
// end ; mpDisplayStrings := result ;
53315: LD_ADDR_EXP 36
53319: PUSH
53320: LD_VAR 0 1
53324: ST_TO_ADDR
// end ;
53325: LD_VAR 0 1
53329: RET
// export function HowMuchPointsKing ( side ) ; begin
53330: LD_INT 0
53332: PPUSH
// result := HowMuchPoints ( side ) ;
53333: LD_ADDR_VAR 0 2
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL 53353 0 1
53347: ST_TO_ADDR
// end ;
53348: LD_VAR 0 2
53352: RET
// function HowMuchPoints ( side ) ; var i ; begin
53353: LD_INT 0
53355: PPUSH
53356: PPUSH
// if mpTeamGame then
53357: LD_EXP 9
53361: IFFALSE 53430
// begin for i := 1 to Count ( mpTeams ) do
53363: LD_ADDR_VAR 0 3
53367: PUSH
53368: DOUBLE
53369: LD_INT 1
53371: DEC
53372: ST_TO_ADDR
53373: LD_EXP 8
53377: PPUSH
53378: CALL 5068 0 1
53382: PUSH
53383: FOR_TO
53384: IFFALSE 53426
// begin if side in mpTeams [ i ] then
53386: LD_VAR 0 1
53390: PUSH
53391: LD_EXP 8
53395: PUSH
53396: LD_VAR 0 3
53400: ARRAY
53401: IN
53402: IFFALSE 53424
// begin result := mpKingPoints [ i ] ;
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: LD_EXP 42
53413: PUSH
53414: LD_VAR 0 3
53418: ARRAY
53419: ST_TO_ADDR
// exit ;
53420: POP
53421: POP
53422: GO 53446
// end ; end ;
53424: GO 53383
53426: POP
53427: POP
// end else
53428: GO 53446
// result := mpKingPoints [ side ] ;
53430: LD_ADDR_VAR 0 2
53434: PUSH
53435: LD_EXP 42
53439: PUSH
53440: LD_VAR 0 1
53444: ARRAY
53445: ST_TO_ADDR
// end ;
53446: LD_VAR 0 2
53450: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53451: LD_EXP 37
53455: PUSH
53456: CALL 53778 0 0
53460: AND
53461: PUSH
53462: LD_OWVAR 4
53466: AND
53467: IFFALSE 53703
53469: GO 53471
53471: DISABLE
53472: LD_INT 0
53474: PPUSH
53475: PPUSH
// begin canWin := false ;
53476: LD_ADDR_VAR 0 2
53480: PUSH
53481: LD_INT 0
53483: ST_TO_ADDR
// if not HasPower ( your_side ) then
53484: LD_OWVAR 2
53488: PPUSH
53489: CALL 53818 0 1
53493: NOT
53494: IFFALSE 53505
// begin Multiplayer_Loose_Message ;
53496: CALL_OW 521
// enable ( mpLose ) ;
53500: LD_INT 102
53502: ENABLE_MARKED
// end else
53503: GO 53703
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53505: LD_ADDR_VAR 0 2
53509: PUSH
53510: LD_OWVAR 2
53514: PPUSH
53515: CALL 53353 0 1
53519: PUSH
53520: LD_EXP 33
53524: GREATEREQUAL
53525: PUSH
53526: LD_OWVAR 2
53530: PPUSH
53531: CALL 53818 0 1
53535: AND
53536: PUSH
53537: CALL 53706 0 0
53541: NOT
53542: OR
53543: ST_TO_ADDR
// for i := 1 to 8 do
53544: LD_ADDR_VAR 0 1
53548: PUSH
53549: DOUBLE
53550: LD_INT 1
53552: DEC
53553: ST_TO_ADDR
53554: LD_INT 8
53556: PUSH
53557: FOR_TO
53558: IFFALSE 53689
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53560: LD_EXP 5
53564: PUSH
53565: LD_VAR 0 1
53569: ARRAY
53570: PUSH
53571: LD_VAR 0 1
53575: PPUSH
53576: CALL_OW 108
53580: AND
53581: PUSH
53582: LD_VAR 0 1
53586: PUSH
53587: LD_OWVAR 2
53591: NONEQUAL
53592: AND
53593: IFFALSE 53687
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53595: LD_EXP 6
53599: PUSH
53600: LD_VAR 0 1
53604: ARRAY
53605: NOT
53606: PUSH
53607: LD_EXP 6
53611: PUSH
53612: LD_VAR 0 1
53616: ARRAY
53617: PUSH
53618: LD_EXP 6
53622: PUSH
53623: LD_OWVAR 2
53627: ARRAY
53628: NONEQUAL
53629: PUSH
53630: LD_OWVAR 2
53634: PPUSH
53635: LD_VAR 0 1
53639: PPUSH
53640: CALL_OW 81
53644: PUSH
53645: LD_INT 1
53647: NONEQUAL
53648: AND
53649: OR
53650: IFFALSE 53687
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53652: LD_VAR 0 1
53656: PPUSH
53657: CALL 53353 0 1
53661: PUSH
53662: LD_EXP 33
53666: GREATEREQUAL
53667: PUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: CALL 53818 0 1
53677: AND
53678: IFFALSE 53687
// begin enable ( mpLose ) ;
53680: LD_INT 102
53682: ENABLE_MARKED
// exit ;
53683: POP
53684: POP
53685: GO 53703
// end ;
53687: GO 53557
53689: POP
53690: POP
// if canWin then
53691: LD_VAR 0 2
53695: IFFALSE 53702
// enable ( mpWin ) else
53697: LD_INT 101
53699: ENABLE_MARKED
53700: GO 53703
// enable ;
53702: ENABLE
// end ; end ;
53703: PPOPN 2
53705: END
// function EnemiesInGame ; var i ; begin
53706: LD_INT 0
53708: PPUSH
53709: PPUSH
// result := false ;
53710: LD_ADDR_VAR 0 1
53714: PUSH
53715: LD_INT 0
53717: ST_TO_ADDR
// for i := 1 to 8 do
53718: LD_ADDR_VAR 0 2
53722: PUSH
53723: DOUBLE
53724: LD_INT 1
53726: DEC
53727: ST_TO_ADDR
53728: LD_INT 8
53730: PUSH
53731: FOR_TO
53732: IFFALSE 53771
// if i <> your_side and HasPower ( i ) then
53734: LD_VAR 0 2
53738: PUSH
53739: LD_OWVAR 2
53743: NONEQUAL
53744: PUSH
53745: LD_VAR 0 2
53749: PPUSH
53750: CALL 53818 0 1
53754: AND
53755: IFFALSE 53769
// begin result := true ;
53757: LD_ADDR_VAR 0 1
53761: PUSH
53762: LD_INT 1
53764: ST_TO_ADDR
// exit ;
53765: POP
53766: POP
53767: GO 53773
// end ;
53769: GO 53731
53771: POP
53772: POP
// end ;
53773: LD_VAR 0 1
53777: RET
// function CanWinLoose ; begin
53778: LD_INT 0
53780: PPUSH
// result := true ;
53781: LD_ADDR_VAR 0 1
53785: PUSH
53786: LD_INT 1
53788: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53789: CALL_OW 531
53793: PUSH
53794: CALL_OW 519
53798: PUSH
53799: LD_INT 1
53801: GREATER
53802: AND
53803: IFFALSE 53813
// result := false ;
53805: LD_ADDR_VAR 0 1
53809: PUSH
53810: LD_INT 0
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 1
53817: RET
// function HasPower ( i ) ; begin
53818: LD_INT 0
53820: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53821: LD_ADDR_VAR 0 2
53825: PUSH
53826: LD_INT 22
53828: PUSH
53829: LD_VAR 0 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 21
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 33
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 33
53863: PUSH
53864: LD_INT 5
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PPUSH
53881: CALL_OW 69
53885: ST_TO_ADDR
// end ; end_of_file end_of_file
53886: LD_VAR 0 2
53890: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53891: LD_VAR 0 1
53895: PUSH
53896: LD_INT 200
53898: DOUBLE
53899: GREATEREQUAL
53900: IFFALSE 53908
53902: LD_INT 299
53904: DOUBLE
53905: LESSEQUAL
53906: IFTRUE 53910
53908: GO 53942
53910: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53911: LD_VAR 0 1
53915: PPUSH
53916: LD_VAR 0 2
53920: PPUSH
53921: LD_VAR 0 3
53925: PPUSH
53926: LD_VAR 0 4
53930: PPUSH
53931: LD_VAR 0 5
53935: PPUSH
53936: CALL 54689 0 5
53940: GO 54019
53942: LD_INT 300
53944: DOUBLE
53945: GREATEREQUAL
53946: IFFALSE 53954
53948: LD_INT 399
53950: DOUBLE
53951: LESSEQUAL
53952: IFTRUE 53956
53954: GO 54018
53956: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53957: LD_VAR 0 1
53961: PPUSH
53962: LD_VAR 0 2
53966: PPUSH
53967: LD_VAR 0 3
53971: PPUSH
53972: LD_VAR 0 4
53976: PPUSH
53977: LD_VAR 0 5
53981: PPUSH
53982: LD_VAR 0 6
53986: PPUSH
53987: LD_VAR 0 7
53991: PPUSH
53992: LD_VAR 0 8
53996: PPUSH
53997: LD_VAR 0 9
54001: PPUSH
54002: LD_VAR 0 10
54006: PPUSH
54007: LD_VAR 0 11
54011: PPUSH
54012: CALL 59484 0 11
54016: GO 54019
54018: POP
// end ;
54019: PPOPN 11
54021: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54022: LD_VAR 0 1
54026: PPUSH
54027: LD_VAR 0 2
54031: PPUSH
54032: LD_VAR 0 3
54036: PPUSH
54037: LD_VAR 0 4
54041: PPUSH
54042: LD_VAR 0 5
54046: PPUSH
54047: CALL 54104 0 5
// end ; end_of_file
54051: PPOPN 5
54053: END
// export function SOS_UnitDestroyed ( un ) ; begin
54054: LD_INT 0
54056: PPUSH
// ComRadiation ( un ) ;
54057: LD_VAR 0 1
54061: PPUSH
54062: CALL 55093 0 1
// end ;
54066: LD_VAR 0 2
54070: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54071: LD_INT 0
54073: PPUSH
// ComRadiation ( un ) ;
54074: LD_VAR 0 1
54078: PPUSH
54079: CALL 55093 0 1
// end ;
54083: LD_VAR 0 2
54087: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54088: LD_INT 0
54090: PPUSH
// end ;
54091: LD_VAR 0 4
54095: RET
// export function SOS_Command ( cmd ) ; begin
54096: LD_INT 0
54098: PPUSH
// end ;
54099: LD_VAR 0 2
54103: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54104: LD_INT 0
54106: PPUSH
// end ;
54107: LD_VAR 0 6
54111: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
54112: LD_INT 0
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
// if not vehicle or not factory then
54118: LD_VAR 0 1
54122: NOT
54123: PUSH
54124: LD_VAR 0 2
54128: NOT
54129: OR
54130: IFFALSE 54134
// exit ;
54132: GO 54684
// if not factoryWaypoints then
54134: LD_EXP 53
54138: NOT
54139: IFFALSE 54143
// exit ;
54141: GO 54684
// for i := 1 to Count ( factoryWaypoints ) do
54143: LD_ADDR_VAR 0 4
54147: PUSH
54148: DOUBLE
54149: LD_INT 1
54151: DEC
54152: ST_TO_ADDR
54153: LD_EXP 53
54157: PPUSH
54158: CALL 5068 0 1
54162: PUSH
54163: FOR_TO
54164: IFFALSE 54682
// if factoryWaypoints [ i ] [ 2 ] = factory then
54166: LD_EXP 53
54170: PUSH
54171: LD_VAR 0 4
54175: ARRAY
54176: PUSH
54177: LD_INT 2
54179: ARRAY
54180: PUSH
54181: LD_VAR 0 2
54185: EQUAL
54186: IFFALSE 54680
// begin if GetControl ( vehicle ) = control_manual then
54188: LD_VAR 0 1
54192: PPUSH
54193: CALL_OW 263
54197: PUSH
54198: LD_INT 1
54200: EQUAL
54201: IFFALSE 54563
// begin driver := IsDrivenBy ( vehicle ) ;
54203: LD_ADDR_VAR 0 5
54207: PUSH
54208: LD_VAR 0 1
54212: PPUSH
54213: CALL_OW 311
54217: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54218: LD_VAR 0 5
54222: PUSH
54223: LD_EXP 54
54227: IN
54228: PUSH
54229: LD_VAR 0 1
54233: PUSH
54234: LD_EXP 54
54238: IN
54239: OR
54240: IFFALSE 54246
// exit ;
54242: POP
54243: POP
54244: GO 54684
// if not HasTask ( driver ) then
54246: LD_VAR 0 5
54250: PPUSH
54251: CALL_OW 314
54255: NOT
54256: IFFALSE 54561
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54258: LD_ADDR_EXP 54
54262: PUSH
54263: LD_EXP 54
54267: PPUSH
54268: LD_VAR 0 5
54272: PPUSH
54273: CALL 40677 0 2
54277: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54278: LD_ADDR_EXP 54
54282: PUSH
54283: LD_EXP 54
54287: PPUSH
54288: LD_VAR 0 1
54292: PPUSH
54293: CALL 40677 0 2
54297: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54298: LD_ADDR_VAR 0 6
54302: PUSH
54303: LD_EXP 53
54307: PUSH
54308: LD_VAR 0 4
54312: ARRAY
54313: PUSH
54314: LD_INT 3
54316: ARRAY
54317: PPUSH
54318: LD_EXP 53
54322: PUSH
54323: LD_VAR 0 4
54327: ARRAY
54328: PUSH
54329: LD_INT 4
54331: ARRAY
54332: PPUSH
54333: CALL_OW 428
54337: ST_TO_ADDR
// if hex then
54338: LD_VAR 0 6
54342: IFFALSE 54360
// ComMoveUnit ( driver , hex ) else
54344: LD_VAR 0 5
54348: PPUSH
54349: LD_VAR 0 6
54353: PPUSH
54354: CALL_OW 112
54358: GO 54444
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54360: LD_VAR 0 1
54364: PPUSH
54365: LD_EXP 53
54369: PUSH
54370: LD_VAR 0 4
54374: ARRAY
54375: PUSH
54376: LD_INT 3
54378: ARRAY
54379: PPUSH
54380: LD_EXP 53
54384: PUSH
54385: LD_VAR 0 4
54389: ARRAY
54390: PUSH
54391: LD_INT 4
54393: ARRAY
54394: PPUSH
54395: CALL_OW 297
54399: PUSH
54400: LD_INT 0
54402: GREATER
54403: IFFALSE 54444
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54405: LD_VAR 0 5
54409: PPUSH
54410: LD_EXP 53
54414: PUSH
54415: LD_VAR 0 4
54419: ARRAY
54420: PUSH
54421: LD_INT 3
54423: ARRAY
54424: PPUSH
54425: LD_EXP 53
54429: PUSH
54430: LD_VAR 0 4
54434: ARRAY
54435: PUSH
54436: LD_INT 4
54438: ARRAY
54439: PPUSH
54440: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54444: LD_VAR 0 5
54448: PPUSH
54449: CALL_OW 181
// if Multiplayer then
54453: LD_OWVAR 4
54457: IFFALSE 54506
// begin repeat wait ( 10 ) ;
54459: LD_INT 10
54461: PPUSH
54462: CALL_OW 67
// until not IsInUnit ( driver ) ;
54466: LD_VAR 0 5
54470: PPUSH
54471: CALL_OW 310
54475: NOT
54476: IFFALSE 54459
// if not HasTask ( driver ) then
54478: LD_VAR 0 5
54482: PPUSH
54483: CALL_OW 314
54487: NOT
54488: IFFALSE 54504
// ComEnterUnit ( driver , factory ) ;
54490: LD_VAR 0 5
54494: PPUSH
54495: LD_VAR 0 2
54499: PPUSH
54500: CALL_OW 120
// end else
54504: GO 54520
// AddComEnterUnit ( driver , factory ) ;
54506: LD_VAR 0 5
54510: PPUSH
54511: LD_VAR 0 2
54515: PPUSH
54516: CALL_OW 180
// wait ( 0 0$1 ) ;
54520: LD_INT 35
54522: PPUSH
54523: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54527: LD_ADDR_EXP 54
54531: PUSH
54532: LD_EXP 54
54536: PUSH
54537: LD_VAR 0 5
54541: DIFF
54542: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54543: LD_ADDR_EXP 54
54547: PUSH
54548: LD_EXP 54
54552: PUSH
54553: LD_VAR 0 1
54557: DIFF
54558: ST_TO_ADDR
// break ;
54559: GO 54682
// end ; end else
54561: GO 54680
// if GetControl ( vehicle ) = control_remote then
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 263
54572: PUSH
54573: LD_INT 2
54575: EQUAL
54576: IFFALSE 54639
// begin wait ( 0 0$2 ) ;
54578: LD_INT 70
54580: PPUSH
54581: CALL_OW 67
// if Connect ( vehicle ) then
54585: LD_VAR 0 1
54589: PPUSH
54590: CALL 11274 0 1
54594: IFFALSE 54635
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54596: LD_VAR 0 1
54600: PPUSH
54601: LD_EXP 53
54605: PUSH
54606: LD_VAR 0 4
54610: ARRAY
54611: PUSH
54612: LD_INT 3
54614: ARRAY
54615: PPUSH
54616: LD_EXP 53
54620: PUSH
54621: LD_VAR 0 4
54625: ARRAY
54626: PUSH
54627: LD_INT 4
54629: ARRAY
54630: PPUSH
54631: CALL_OW 111
// break ;
54635: GO 54682
// end else
54637: GO 54680
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_EXP 53
54648: PUSH
54649: LD_VAR 0 4
54653: ARRAY
54654: PUSH
54655: LD_INT 3
54657: ARRAY
54658: PPUSH
54659: LD_EXP 53
54663: PUSH
54664: LD_VAR 0 4
54668: ARRAY
54669: PUSH
54670: LD_INT 4
54672: ARRAY
54673: PPUSH
54674: CALL_OW 111
// break ;
54678: GO 54682
// end ; end ;
54680: GO 54163
54682: POP
54683: POP
// end ;
54684: LD_VAR 0 3
54688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54689: LD_INT 0
54691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54692: LD_VAR 0 1
54696: PUSH
54697: LD_INT 250
54699: EQUAL
54700: PUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: CALL_OW 264
54710: PUSH
54711: LD_INT 81
54713: EQUAL
54714: AND
54715: IFFALSE 54736
// MinerPlaceMine ( unit , x , y ) ;
54717: LD_VAR 0 2
54721: PPUSH
54722: LD_VAR 0 4
54726: PPUSH
54727: LD_VAR 0 5
54731: PPUSH
54732: CALL 57828 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54736: LD_VAR 0 1
54740: PUSH
54741: LD_INT 251
54743: EQUAL
54744: PUSH
54745: LD_VAR 0 2
54749: PPUSH
54750: CALL_OW 264
54754: PUSH
54755: LD_INT 81
54757: EQUAL
54758: AND
54759: IFFALSE 54780
// MinerDetonateMine ( unit , x , y ) ;
54761: LD_VAR 0 2
54765: PPUSH
54766: LD_VAR 0 4
54770: PPUSH
54771: LD_VAR 0 5
54775: PPUSH
54776: CALL 58103 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54780: LD_VAR 0 1
54784: PUSH
54785: LD_INT 252
54787: EQUAL
54788: PUSH
54789: LD_VAR 0 2
54793: PPUSH
54794: CALL_OW 264
54798: PUSH
54799: LD_INT 81
54801: EQUAL
54802: AND
54803: IFFALSE 54824
// MinerCreateMinefield ( unit , x , y ) ;
54805: LD_VAR 0 2
54809: PPUSH
54810: LD_VAR 0 4
54814: PPUSH
54815: LD_VAR 0 5
54819: PPUSH
54820: CALL 58520 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54824: LD_VAR 0 1
54828: PUSH
54829: LD_INT 253
54831: EQUAL
54832: PUSH
54833: LD_VAR 0 2
54837: PPUSH
54838: CALL_OW 257
54842: PUSH
54843: LD_INT 5
54845: EQUAL
54846: AND
54847: IFFALSE 54868
// ComBinocular ( unit , x , y ) ;
54849: LD_VAR 0 2
54853: PPUSH
54854: LD_VAR 0 4
54858: PPUSH
54859: LD_VAR 0 5
54863: PPUSH
54864: CALL 58889 0 3
// if selectedUnit then
54868: LD_VAR 0 3
54872: IFFALSE 54928
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 254
54881: EQUAL
54882: PUSH
54883: LD_VAR 0 2
54887: PPUSH
54888: CALL_OW 264
54892: PUSH
54893: LD_INT 99
54895: EQUAL
54896: AND
54897: PUSH
54898: LD_VAR 0 3
54902: PPUSH
54903: CALL_OW 263
54907: PUSH
54908: LD_INT 3
54910: EQUAL
54911: AND
54912: IFFALSE 54928
// HackDestroyVehicle ( unit , selectedUnit ) ;
54914: LD_VAR 0 2
54918: PPUSH
54919: LD_VAR 0 3
54923: PPUSH
54924: CALL 57192 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54928: LD_VAR 0 1
54932: PUSH
54933: LD_INT 255
54935: EQUAL
54936: PUSH
54937: LD_VAR 0 2
54941: PPUSH
54942: CALL_OW 264
54946: PUSH
54947: LD_INT 14
54949: PUSH
54950: LD_INT 53
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: IN
54957: AND
54958: PUSH
54959: LD_VAR 0 4
54963: PPUSH
54964: LD_VAR 0 5
54968: PPUSH
54969: CALL_OW 488
54973: AND
54974: IFFALSE 54998
// CutTreeXYR ( unit , x , y , 12 ) ;
54976: LD_VAR 0 2
54980: PPUSH
54981: LD_VAR 0 4
54985: PPUSH
54986: LD_VAR 0 5
54990: PPUSH
54991: LD_INT 12
54993: PPUSH
54994: CALL 55189 0 4
// if cmd = 256 then
54998: LD_VAR 0 1
55002: PUSH
55003: LD_INT 256
55005: EQUAL
55006: IFFALSE 55027
// SetFactoryWaypoint ( unit , x , y ) ;
55008: LD_VAR 0 2
55012: PPUSH
55013: LD_VAR 0 4
55017: PPUSH
55018: LD_VAR 0 5
55022: PPUSH
55023: CALL 59492 0 3
// if cmd = 257 then
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 257
55034: EQUAL
55035: IFFALSE 55056
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55037: LD_VAR 0 2
55041: PPUSH
55042: LD_VAR 0 4
55046: PPUSH
55047: LD_VAR 0 5
55051: PPUSH
55052: CALL 59982 0 3
// if cmd = 258 then
55056: LD_VAR 0 1
55060: PUSH
55061: LD_INT 258
55063: EQUAL
55064: IFFALSE 55088
// BurnTreeXYR ( unit , x , y , 8 ) ;
55066: LD_VAR 0 2
55070: PPUSH
55071: LD_VAR 0 4
55075: PPUSH
55076: LD_VAR 0 5
55080: PPUSH
55081: LD_INT 8
55083: PPUSH
55084: CALL 55583 0 4
// end ;
55088: LD_VAR 0 6
55092: RET
// export function ComRadiation ( un ) ; var eff ; begin
55093: LD_INT 0
55095: PPUSH
55096: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55097: LD_VAR 0 1
55101: PPUSH
55102: CALL_OW 264
55106: PUSH
55107: LD_INT 91
55109: NONEQUAL
55110: IFFALSE 55114
// exit ;
55112: GO 55184
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55114: LD_INT 68
55116: PPUSH
55117: LD_VAR 0 1
55121: PPUSH
55122: CALL_OW 255
55126: PPUSH
55127: CALL_OW 321
55131: PUSH
55132: LD_INT 2
55134: EQUAL
55135: IFFALSE 55147
// eff := 50 else
55137: LD_ADDR_VAR 0 3
55141: PUSH
55142: LD_INT 50
55144: ST_TO_ADDR
55145: GO 55155
// eff := 25 ;
55147: LD_ADDR_VAR 0 3
55151: PUSH
55152: LD_INT 25
55154: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55155: LD_VAR 0 1
55159: PPUSH
55160: CALL_OW 250
55164: PPUSH
55165: LD_VAR 0 1
55169: PPUSH
55170: CALL_OW 251
55174: PPUSH
55175: LD_VAR 0 3
55179: PPUSH
55180: CALL_OW 495
// end ;
55184: LD_VAR 0 2
55188: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55189: LD_INT 0
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
55199: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 302
55209: NOT
55210: PUSH
55211: LD_VAR 0 2
55215: PPUSH
55216: LD_VAR 0 3
55220: PPUSH
55221: CALL_OW 488
55225: NOT
55226: OR
55227: PUSH
55228: LD_VAR 0 4
55232: NOT
55233: OR
55234: IFFALSE 55238
// exit ;
55236: GO 55578
// list := [ ] ;
55238: LD_ADDR_VAR 0 13
55242: PUSH
55243: EMPTY
55244: ST_TO_ADDR
// if x - r < 0 then
55245: LD_VAR 0 2
55249: PUSH
55250: LD_VAR 0 4
55254: MINUS
55255: PUSH
55256: LD_INT 0
55258: LESS
55259: IFFALSE 55271
// min_x := 0 else
55261: LD_ADDR_VAR 0 7
55265: PUSH
55266: LD_INT 0
55268: ST_TO_ADDR
55269: GO 55287
// min_x := x - r ;
55271: LD_ADDR_VAR 0 7
55275: PUSH
55276: LD_VAR 0 2
55280: PUSH
55281: LD_VAR 0 4
55285: MINUS
55286: ST_TO_ADDR
// if y - r < 0 then
55287: LD_VAR 0 3
55291: PUSH
55292: LD_VAR 0 4
55296: MINUS
55297: PUSH
55298: LD_INT 0
55300: LESS
55301: IFFALSE 55313
// min_y := 0 else
55303: LD_ADDR_VAR 0 8
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
55311: GO 55329
// min_y := y - r ;
55313: LD_ADDR_VAR 0 8
55317: PUSH
55318: LD_VAR 0 3
55322: PUSH
55323: LD_VAR 0 4
55327: MINUS
55328: ST_TO_ADDR
// max_x := x + r ;
55329: LD_ADDR_VAR 0 9
55333: PUSH
55334: LD_VAR 0 2
55338: PUSH
55339: LD_VAR 0 4
55343: PLUS
55344: ST_TO_ADDR
// max_y := y + r ;
55345: LD_ADDR_VAR 0 10
55349: PUSH
55350: LD_VAR 0 3
55354: PUSH
55355: LD_VAR 0 4
55359: PLUS
55360: ST_TO_ADDR
// for _x = min_x to max_x do
55361: LD_ADDR_VAR 0 11
55365: PUSH
55366: DOUBLE
55367: LD_VAR 0 7
55371: DEC
55372: ST_TO_ADDR
55373: LD_VAR 0 9
55377: PUSH
55378: FOR_TO
55379: IFFALSE 55496
// for _y = min_y to max_y do
55381: LD_ADDR_VAR 0 12
55385: PUSH
55386: DOUBLE
55387: LD_VAR 0 8
55391: DEC
55392: ST_TO_ADDR
55393: LD_VAR 0 10
55397: PUSH
55398: FOR_TO
55399: IFFALSE 55492
// begin if not ValidHex ( _x , _y ) then
55401: LD_VAR 0 11
55405: PPUSH
55406: LD_VAR 0 12
55410: PPUSH
55411: CALL_OW 488
55415: NOT
55416: IFFALSE 55420
// continue ;
55418: GO 55398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55420: LD_VAR 0 11
55424: PPUSH
55425: LD_VAR 0 12
55429: PPUSH
55430: CALL_OW 351
55434: PUSH
55435: LD_VAR 0 11
55439: PPUSH
55440: LD_VAR 0 12
55444: PPUSH
55445: CALL_OW 554
55449: AND
55450: IFFALSE 55490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55452: LD_ADDR_VAR 0 13
55456: PUSH
55457: LD_VAR 0 13
55461: PPUSH
55462: LD_VAR 0 13
55466: PUSH
55467: LD_INT 1
55469: PLUS
55470: PPUSH
55471: LD_VAR 0 11
55475: PUSH
55476: LD_VAR 0 12
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PPUSH
55485: CALL_OW 2
55489: ST_TO_ADDR
// end ;
55490: GO 55398
55492: POP
55493: POP
55494: GO 55378
55496: POP
55497: POP
// if not list then
55498: LD_VAR 0 13
55502: NOT
55503: IFFALSE 55507
// exit ;
55505: GO 55578
// for i in list do
55507: LD_ADDR_VAR 0 6
55511: PUSH
55512: LD_VAR 0 13
55516: PUSH
55517: FOR_IN
55518: IFFALSE 55576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55520: LD_VAR 0 1
55524: PPUSH
55525: LD_STRING M
55527: PUSH
55528: LD_VAR 0 6
55532: PUSH
55533: LD_INT 1
55535: ARRAY
55536: PUSH
55537: LD_VAR 0 6
55541: PUSH
55542: LD_INT 2
55544: ARRAY
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: PPUSH
55570: CALL_OW 447
55574: GO 55517
55576: POP
55577: POP
// end ;
55578: LD_VAR 0 5
55582: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55583: LD_INT 0
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55595: LD_VAR 0 1
55599: PPUSH
55600: CALL_OW 302
55604: NOT
55605: PUSH
55606: LD_VAR 0 2
55610: PPUSH
55611: LD_VAR 0 3
55615: PPUSH
55616: CALL_OW 488
55620: NOT
55621: OR
55622: PUSH
55623: LD_VAR 0 4
55627: NOT
55628: OR
55629: IFFALSE 55633
// exit ;
55631: GO 56146
// list := [ ] ;
55633: LD_ADDR_VAR 0 13
55637: PUSH
55638: EMPTY
55639: ST_TO_ADDR
// if x - r < 0 then
55640: LD_VAR 0 2
55644: PUSH
55645: LD_VAR 0 4
55649: MINUS
55650: PUSH
55651: LD_INT 0
55653: LESS
55654: IFFALSE 55666
// min_x := 0 else
55656: LD_ADDR_VAR 0 7
55660: PUSH
55661: LD_INT 0
55663: ST_TO_ADDR
55664: GO 55682
// min_x := x - r ;
55666: LD_ADDR_VAR 0 7
55670: PUSH
55671: LD_VAR 0 2
55675: PUSH
55676: LD_VAR 0 4
55680: MINUS
55681: ST_TO_ADDR
// if y - r < 0 then
55682: LD_VAR 0 3
55686: PUSH
55687: LD_VAR 0 4
55691: MINUS
55692: PUSH
55693: LD_INT 0
55695: LESS
55696: IFFALSE 55708
// min_y := 0 else
55698: LD_ADDR_VAR 0 8
55702: PUSH
55703: LD_INT 0
55705: ST_TO_ADDR
55706: GO 55724
// min_y := y - r ;
55708: LD_ADDR_VAR 0 8
55712: PUSH
55713: LD_VAR 0 3
55717: PUSH
55718: LD_VAR 0 4
55722: MINUS
55723: ST_TO_ADDR
// max_x := x + r ;
55724: LD_ADDR_VAR 0 9
55728: PUSH
55729: LD_VAR 0 2
55733: PUSH
55734: LD_VAR 0 4
55738: PLUS
55739: ST_TO_ADDR
// max_y := y + r ;
55740: LD_ADDR_VAR 0 10
55744: PUSH
55745: LD_VAR 0 3
55749: PUSH
55750: LD_VAR 0 4
55754: PLUS
55755: ST_TO_ADDR
// for _x = min_x to max_x do
55756: LD_ADDR_VAR 0 11
55760: PUSH
55761: DOUBLE
55762: LD_VAR 0 7
55766: DEC
55767: ST_TO_ADDR
55768: LD_VAR 0 9
55772: PUSH
55773: FOR_TO
55774: IFFALSE 55891
// for _y = min_y to max_y do
55776: LD_ADDR_VAR 0 12
55780: PUSH
55781: DOUBLE
55782: LD_VAR 0 8
55786: DEC
55787: ST_TO_ADDR
55788: LD_VAR 0 10
55792: PUSH
55793: FOR_TO
55794: IFFALSE 55887
// begin if not ValidHex ( _x , _y ) then
55796: LD_VAR 0 11
55800: PPUSH
55801: LD_VAR 0 12
55805: PPUSH
55806: CALL_OW 488
55810: NOT
55811: IFFALSE 55815
// continue ;
55813: GO 55793
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55815: LD_VAR 0 11
55819: PPUSH
55820: LD_VAR 0 12
55824: PPUSH
55825: CALL_OW 351
55829: PUSH
55830: LD_VAR 0 11
55834: PPUSH
55835: LD_VAR 0 12
55839: PPUSH
55840: CALL_OW 554
55844: AND
55845: IFFALSE 55885
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55847: LD_ADDR_VAR 0 13
55851: PUSH
55852: LD_VAR 0 13
55856: PPUSH
55857: LD_VAR 0 13
55861: PUSH
55862: LD_INT 1
55864: PLUS
55865: PPUSH
55866: LD_VAR 0 11
55870: PUSH
55871: LD_VAR 0 12
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PPUSH
55880: CALL_OW 2
55884: ST_TO_ADDR
// end ;
55885: GO 55793
55887: POP
55888: POP
55889: GO 55773
55891: POP
55892: POP
// if not list then
55893: LD_VAR 0 13
55897: NOT
55898: IFFALSE 55902
// exit ;
55900: GO 56146
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55902: LD_ADDR_VAR 0 13
55906: PUSH
55907: LD_VAR 0 1
55911: PPUSH
55912: LD_VAR 0 13
55916: PPUSH
55917: LD_INT 1
55919: PPUSH
55920: LD_INT 1
55922: PPUSH
55923: CALL 8416 0 4
55927: ST_TO_ADDR
// ComStop ( flame ) ;
55928: LD_VAR 0 1
55932: PPUSH
55933: CALL_OW 141
// for i in list do
55937: LD_ADDR_VAR 0 6
55941: PUSH
55942: LD_VAR 0 13
55946: PUSH
55947: FOR_IN
55948: IFFALSE 55979
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55950: LD_VAR 0 1
55954: PPUSH
55955: LD_VAR 0 6
55959: PUSH
55960: LD_INT 1
55962: ARRAY
55963: PPUSH
55964: LD_VAR 0 6
55968: PUSH
55969: LD_INT 2
55971: ARRAY
55972: PPUSH
55973: CALL_OW 176
55977: GO 55947
55979: POP
55980: POP
// repeat wait ( 0 0$1 ) ;
55981: LD_INT 35
55983: PPUSH
55984: CALL_OW 67
// task := GetTaskList ( flame ) ;
55988: LD_ADDR_VAR 0 14
55992: PUSH
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 437
56002: ST_TO_ADDR
// if not task then
56003: LD_VAR 0 14
56007: NOT
56008: IFFALSE 56012
// exit ;
56010: GO 56146
// if task [ 1 ] [ 1 ] <> | then
56012: LD_VAR 0 14
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PUSH
56021: LD_INT 1
56023: ARRAY
56024: PUSH
56025: LD_STRING |
56027: NONEQUAL
56028: IFFALSE 56032
// exit ;
56030: GO 56146
// _x := task [ 1 ] [ 2 ] ;
56032: LD_ADDR_VAR 0 11
56036: PUSH
56037: LD_VAR 0 14
56041: PUSH
56042: LD_INT 1
56044: ARRAY
56045: PUSH
56046: LD_INT 2
56048: ARRAY
56049: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56050: LD_ADDR_VAR 0 12
56054: PUSH
56055: LD_VAR 0 14
56059: PUSH
56060: LD_INT 1
56062: ARRAY
56063: PUSH
56064: LD_INT 3
56066: ARRAY
56067: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56068: LD_VAR 0 11
56072: PPUSH
56073: LD_VAR 0 12
56077: PPUSH
56078: CALL_OW 351
56082: NOT
56083: PUSH
56084: LD_VAR 0 11
56088: PPUSH
56089: LD_VAR 0 12
56093: PPUSH
56094: CALL_OW 554
56098: NOT
56099: OR
56100: IFFALSE 56134
// begin task := Delete ( task , 1 ) ;
56102: LD_ADDR_VAR 0 14
56106: PUSH
56107: LD_VAR 0 14
56111: PPUSH
56112: LD_INT 1
56114: PPUSH
56115: CALL_OW 3
56119: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56120: LD_VAR 0 1
56124: PPUSH
56125: LD_VAR 0 14
56129: PPUSH
56130: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56134: LD_VAR 0 1
56138: PPUSH
56139: CALL_OW 314
56143: NOT
56144: IFFALSE 55981
// end ;
56146: LD_VAR 0 5
56150: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56151: LD_EXP 43
56155: NOT
56156: IFFALSE 56206
56158: GO 56160
56160: DISABLE
// begin initHack := true ;
56161: LD_ADDR_EXP 43
56165: PUSH
56166: LD_INT 1
56168: ST_TO_ADDR
// hackTanks := [ ] ;
56169: LD_ADDR_EXP 44
56173: PUSH
56174: EMPTY
56175: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56176: LD_ADDR_EXP 45
56180: PUSH
56181: EMPTY
56182: ST_TO_ADDR
// hackLimit := 3 ;
56183: LD_ADDR_EXP 46
56187: PUSH
56188: LD_INT 3
56190: ST_TO_ADDR
// hackDist := 12 ;
56191: LD_ADDR_EXP 47
56195: PUSH
56196: LD_INT 12
56198: ST_TO_ADDR
// hackCounter := [ ] ;
56199: LD_ADDR_EXP 48
56203: PUSH
56204: EMPTY
56205: ST_TO_ADDR
// end ;
56206: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56207: LD_EXP 43
56211: PUSH
56212: LD_INT 34
56214: PUSH
56215: LD_INT 99
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PPUSH
56222: CALL_OW 69
56226: AND
56227: IFFALSE 56480
56229: GO 56231
56231: DISABLE
56232: LD_INT 0
56234: PPUSH
56235: PPUSH
// begin enable ;
56236: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56237: LD_ADDR_VAR 0 1
56241: PUSH
56242: LD_INT 34
56244: PUSH
56245: LD_INT 99
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PPUSH
56252: CALL_OW 69
56256: PUSH
56257: FOR_IN
56258: IFFALSE 56478
// begin if not i in hackTanks then
56260: LD_VAR 0 1
56264: PUSH
56265: LD_EXP 44
56269: IN
56270: NOT
56271: IFFALSE 56354
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56273: LD_ADDR_EXP 44
56277: PUSH
56278: LD_EXP 44
56282: PPUSH
56283: LD_EXP 44
56287: PUSH
56288: LD_INT 1
56290: PLUS
56291: PPUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL_OW 1
56301: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56302: LD_ADDR_EXP 45
56306: PUSH
56307: LD_EXP 45
56311: PPUSH
56312: LD_EXP 45
56316: PUSH
56317: LD_INT 1
56319: PLUS
56320: PPUSH
56321: EMPTY
56322: PPUSH
56323: CALL_OW 1
56327: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56328: LD_ADDR_EXP 48
56332: PUSH
56333: LD_EXP 48
56337: PPUSH
56338: LD_EXP 48
56342: PUSH
56343: LD_INT 1
56345: PLUS
56346: PPUSH
56347: EMPTY
56348: PPUSH
56349: CALL_OW 1
56353: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56354: LD_VAR 0 1
56358: PPUSH
56359: CALL_OW 302
56363: NOT
56364: IFFALSE 56377
// begin HackUnlinkAll ( i ) ;
56366: LD_VAR 0 1
56370: PPUSH
56371: CALL 56483 0 1
// continue ;
56375: GO 56257
// end ; HackCheckCapturedStatus ( i ) ;
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL 56926 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56386: LD_ADDR_VAR 0 2
56390: PUSH
56391: LD_INT 81
56393: PUSH
56394: LD_VAR 0 1
56398: PPUSH
56399: CALL_OW 255
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 33
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 91
56420: PUSH
56421: LD_VAR 0 1
56425: PUSH
56426: LD_EXP 47
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 50
56438: PUSH
56439: EMPTY
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: PPUSH
56448: CALL_OW 69
56452: ST_TO_ADDR
// if not tmp then
56453: LD_VAR 0 2
56457: NOT
56458: IFFALSE 56462
// continue ;
56460: GO 56257
// HackLink ( i , tmp ) ;
56462: LD_VAR 0 1
56466: PPUSH
56467: LD_VAR 0 2
56471: PPUSH
56472: CALL 56619 0 2
// end ;
56476: GO 56257
56478: POP
56479: POP
// end ;
56480: PPOPN 2
56482: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56483: LD_INT 0
56485: PPUSH
56486: PPUSH
56487: PPUSH
// if not hack in hackTanks then
56488: LD_VAR 0 1
56492: PUSH
56493: LD_EXP 44
56497: IN
56498: NOT
56499: IFFALSE 56503
// exit ;
56501: GO 56614
// index := GetElementIndex ( hackTanks , hack ) ;
56503: LD_ADDR_VAR 0 4
56507: PUSH
56508: LD_EXP 44
56512: PPUSH
56513: LD_VAR 0 1
56517: PPUSH
56518: CALL 7713 0 2
56522: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56523: LD_EXP 45
56527: PUSH
56528: LD_VAR 0 4
56532: ARRAY
56533: IFFALSE 56614
// begin for i in hackTanksCaptured [ index ] do
56535: LD_ADDR_VAR 0 3
56539: PUSH
56540: LD_EXP 45
56544: PUSH
56545: LD_VAR 0 4
56549: ARRAY
56550: PUSH
56551: FOR_IN
56552: IFFALSE 56578
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56554: LD_VAR 0 3
56558: PUSH
56559: LD_INT 1
56561: ARRAY
56562: PPUSH
56563: LD_VAR 0 3
56567: PUSH
56568: LD_INT 2
56570: ARRAY
56571: PPUSH
56572: CALL_OW 235
56576: GO 56551
56578: POP
56579: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56580: LD_ADDR_EXP 45
56584: PUSH
56585: LD_EXP 45
56589: PPUSH
56590: LD_VAR 0 4
56594: PPUSH
56595: EMPTY
56596: PPUSH
56597: CALL_OW 1
56601: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56602: LD_VAR 0 1
56606: PPUSH
56607: LD_INT 0
56609: PPUSH
56610: CALL_OW 505
// end ; end ;
56614: LD_VAR 0 2
56618: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56619: LD_INT 0
56621: PPUSH
56622: PPUSH
56623: PPUSH
// if not hack in hackTanks or not vehicles then
56624: LD_VAR 0 1
56628: PUSH
56629: LD_EXP 44
56633: IN
56634: NOT
56635: PUSH
56636: LD_VAR 0 2
56640: NOT
56641: OR
56642: IFFALSE 56646
// exit ;
56644: GO 56921
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56646: LD_ADDR_VAR 0 2
56650: PUSH
56651: LD_VAR 0 1
56655: PPUSH
56656: LD_VAR 0 2
56660: PPUSH
56661: LD_INT 1
56663: PPUSH
56664: LD_INT 1
56666: PPUSH
56667: CALL 8363 0 4
56671: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56672: LD_ADDR_VAR 0 5
56676: PUSH
56677: LD_EXP 44
56681: PPUSH
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL 7713 0 2
56691: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56692: LD_EXP 45
56696: PUSH
56697: LD_VAR 0 5
56701: ARRAY
56702: PUSH
56703: LD_EXP 46
56707: LESS
56708: IFFALSE 56897
// begin for i := 1 to vehicles do
56710: LD_ADDR_VAR 0 4
56714: PUSH
56715: DOUBLE
56716: LD_INT 1
56718: DEC
56719: ST_TO_ADDR
56720: LD_VAR 0 2
56724: PUSH
56725: FOR_TO
56726: IFFALSE 56895
// begin if hackTanksCaptured [ index ] = hackLimit then
56728: LD_EXP 45
56732: PUSH
56733: LD_VAR 0 5
56737: ARRAY
56738: PUSH
56739: LD_EXP 46
56743: EQUAL
56744: IFFALSE 56748
// break ;
56746: GO 56895
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56748: LD_ADDR_EXP 48
56752: PUSH
56753: LD_EXP 48
56757: PPUSH
56758: LD_VAR 0 5
56762: PPUSH
56763: LD_EXP 48
56767: PUSH
56768: LD_VAR 0 5
56772: ARRAY
56773: PUSH
56774: LD_INT 1
56776: PLUS
56777: PPUSH
56778: CALL_OW 1
56782: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56783: LD_ADDR_EXP 45
56787: PUSH
56788: LD_EXP 45
56792: PPUSH
56793: LD_VAR 0 5
56797: PUSH
56798: LD_EXP 45
56802: PUSH
56803: LD_VAR 0 5
56807: ARRAY
56808: PUSH
56809: LD_INT 1
56811: PLUS
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PPUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_VAR 0 4
56826: ARRAY
56827: PUSH
56828: LD_VAR 0 2
56832: PUSH
56833: LD_VAR 0 4
56837: ARRAY
56838: PPUSH
56839: CALL_OW 255
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PPUSH
56848: CALL 7928 0 3
56852: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56853: LD_VAR 0 2
56857: PUSH
56858: LD_VAR 0 4
56862: ARRAY
56863: PPUSH
56864: LD_VAR 0 1
56868: PPUSH
56869: CALL_OW 255
56873: PPUSH
56874: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56878: LD_VAR 0 2
56882: PUSH
56883: LD_VAR 0 4
56887: ARRAY
56888: PPUSH
56889: CALL_OW 141
// end ;
56893: GO 56725
56895: POP
56896: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56897: LD_VAR 0 1
56901: PPUSH
56902: LD_EXP 45
56906: PUSH
56907: LD_VAR 0 5
56911: ARRAY
56912: PUSH
56913: LD_INT 0
56915: PLUS
56916: PPUSH
56917: CALL_OW 505
// end ;
56921: LD_VAR 0 3
56925: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56926: LD_INT 0
56928: PPUSH
56929: PPUSH
56930: PPUSH
56931: PPUSH
// if not hack in hackTanks then
56932: LD_VAR 0 1
56936: PUSH
56937: LD_EXP 44
56941: IN
56942: NOT
56943: IFFALSE 56947
// exit ;
56945: GO 57187
// index := GetElementIndex ( hackTanks , hack ) ;
56947: LD_ADDR_VAR 0 4
56951: PUSH
56952: LD_EXP 44
56956: PPUSH
56957: LD_VAR 0 1
56961: PPUSH
56962: CALL 7713 0 2
56966: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56967: LD_ADDR_VAR 0 3
56971: PUSH
56972: DOUBLE
56973: LD_EXP 45
56977: PUSH
56978: LD_VAR 0 4
56982: ARRAY
56983: INC
56984: ST_TO_ADDR
56985: LD_INT 1
56987: PUSH
56988: FOR_DOWNTO
56989: IFFALSE 57161
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56991: LD_ADDR_VAR 0 5
56995: PUSH
56996: LD_EXP 45
57000: PUSH
57001: LD_VAR 0 4
57005: ARRAY
57006: PUSH
57007: LD_VAR 0 3
57011: ARRAY
57012: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57013: LD_VAR 0 5
57017: PUSH
57018: LD_INT 1
57020: ARRAY
57021: PPUSH
57022: CALL_OW 302
57026: NOT
57027: PUSH
57028: LD_VAR 0 5
57032: PUSH
57033: LD_INT 1
57035: ARRAY
57036: PPUSH
57037: CALL_OW 255
57041: PUSH
57042: LD_VAR 0 1
57046: PPUSH
57047: CALL_OW 255
57051: NONEQUAL
57052: OR
57053: IFFALSE 57159
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57055: LD_VAR 0 5
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PPUSH
57064: CALL_OW 305
57068: PUSH
57069: LD_VAR 0 5
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: CALL_OW 255
57082: PUSH
57083: LD_VAR 0 1
57087: PPUSH
57088: CALL_OW 255
57092: EQUAL
57093: AND
57094: IFFALSE 57118
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57096: LD_VAR 0 5
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: PPUSH
57105: LD_VAR 0 5
57109: PUSH
57110: LD_INT 2
57112: ARRAY
57113: PPUSH
57114: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57118: LD_ADDR_EXP 45
57122: PUSH
57123: LD_EXP 45
57127: PPUSH
57128: LD_VAR 0 4
57132: PPUSH
57133: LD_EXP 45
57137: PUSH
57138: LD_VAR 0 4
57142: ARRAY
57143: PPUSH
57144: LD_VAR 0 3
57148: PPUSH
57149: CALL_OW 3
57153: PPUSH
57154: CALL_OW 1
57158: ST_TO_ADDR
// end ; end ;
57159: GO 56988
57161: POP
57162: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57163: LD_VAR 0 1
57167: PPUSH
57168: LD_EXP 45
57172: PUSH
57173: LD_VAR 0 4
57177: ARRAY
57178: PUSH
57179: LD_INT 0
57181: PLUS
57182: PPUSH
57183: CALL_OW 505
// end ;
57187: LD_VAR 0 2
57191: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57192: LD_INT 0
57194: PPUSH
57195: PPUSH
57196: PPUSH
57197: PPUSH
// if not hack in hackTanks then
57198: LD_VAR 0 1
57202: PUSH
57203: LD_EXP 44
57207: IN
57208: NOT
57209: IFFALSE 57213
// exit ;
57211: GO 57298
// index := GetElementIndex ( hackTanks , hack ) ;
57213: LD_ADDR_VAR 0 5
57217: PUSH
57218: LD_EXP 44
57222: PPUSH
57223: LD_VAR 0 1
57227: PPUSH
57228: CALL 7713 0 2
57232: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57233: LD_ADDR_VAR 0 4
57237: PUSH
57238: DOUBLE
57239: LD_INT 1
57241: DEC
57242: ST_TO_ADDR
57243: LD_EXP 45
57247: PUSH
57248: LD_VAR 0 5
57252: ARRAY
57253: PUSH
57254: FOR_TO
57255: IFFALSE 57296
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57257: LD_EXP 45
57261: PUSH
57262: LD_VAR 0 5
57266: ARRAY
57267: PUSH
57268: LD_VAR 0 4
57272: ARRAY
57273: PUSH
57274: LD_INT 1
57276: ARRAY
57277: PUSH
57278: LD_VAR 0 2
57282: EQUAL
57283: IFFALSE 57294
// KillUnit ( vehicle ) ;
57285: LD_VAR 0 2
57289: PPUSH
57290: CALL_OW 66
57294: GO 57254
57296: POP
57297: POP
// end ;
57298: LD_VAR 0 3
57302: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57303: LD_EXP 49
57307: NOT
57308: IFFALSE 57343
57310: GO 57312
57312: DISABLE
// begin initMiner := true ;
57313: LD_ADDR_EXP 49
57317: PUSH
57318: LD_INT 1
57320: ST_TO_ADDR
// minersList := [ ] ;
57321: LD_ADDR_EXP 50
57325: PUSH
57326: EMPTY
57327: ST_TO_ADDR
// minerMinesList := [ ] ;
57328: LD_ADDR_EXP 51
57332: PUSH
57333: EMPTY
57334: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57335: LD_ADDR_EXP 52
57339: PUSH
57340: LD_INT 5
57342: ST_TO_ADDR
// end ;
57343: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57344: LD_EXP 49
57348: PUSH
57349: LD_INT 34
57351: PUSH
57352: LD_INT 81
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PPUSH
57359: CALL_OW 69
57363: AND
57364: IFFALSE 57825
57366: GO 57368
57368: DISABLE
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
// begin enable ;
57375: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57376: LD_ADDR_VAR 0 1
57380: PUSH
57381: LD_INT 34
57383: PUSH
57384: LD_INT 81
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PPUSH
57391: CALL_OW 69
57395: PUSH
57396: FOR_IN
57397: IFFALSE 57469
// begin if not i in minersList then
57399: LD_VAR 0 1
57403: PUSH
57404: LD_EXP 50
57408: IN
57409: NOT
57410: IFFALSE 57467
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57412: LD_ADDR_EXP 50
57416: PUSH
57417: LD_EXP 50
57421: PPUSH
57422: LD_EXP 50
57426: PUSH
57427: LD_INT 1
57429: PLUS
57430: PPUSH
57431: LD_VAR 0 1
57435: PPUSH
57436: CALL_OW 1
57440: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57441: LD_ADDR_EXP 51
57445: PUSH
57446: LD_EXP 51
57450: PPUSH
57451: LD_EXP 51
57455: PUSH
57456: LD_INT 1
57458: PLUS
57459: PPUSH
57460: EMPTY
57461: PPUSH
57462: CALL_OW 1
57466: ST_TO_ADDR
// end end ;
57467: GO 57396
57469: POP
57470: POP
// for i := minerMinesList downto 1 do
57471: LD_ADDR_VAR 0 1
57475: PUSH
57476: DOUBLE
57477: LD_EXP 51
57481: INC
57482: ST_TO_ADDR
57483: LD_INT 1
57485: PUSH
57486: FOR_DOWNTO
57487: IFFALSE 57823
// begin if IsLive ( minersList [ i ] ) then
57489: LD_EXP 50
57493: PUSH
57494: LD_VAR 0 1
57498: ARRAY
57499: PPUSH
57500: CALL_OW 300
57504: IFFALSE 57532
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57506: LD_EXP 50
57510: PUSH
57511: LD_VAR 0 1
57515: ARRAY
57516: PPUSH
57517: LD_EXP 51
57521: PUSH
57522: LD_VAR 0 1
57526: ARRAY
57527: PPUSH
57528: CALL_OW 505
// if not minerMinesList [ i ] then
57532: LD_EXP 51
57536: PUSH
57537: LD_VAR 0 1
57541: ARRAY
57542: NOT
57543: IFFALSE 57547
// continue ;
57545: GO 57486
// for j := minerMinesList [ i ] downto 1 do
57547: LD_ADDR_VAR 0 2
57551: PUSH
57552: DOUBLE
57553: LD_EXP 51
57557: PUSH
57558: LD_VAR 0 1
57562: ARRAY
57563: INC
57564: ST_TO_ADDR
57565: LD_INT 1
57567: PUSH
57568: FOR_DOWNTO
57569: IFFALSE 57819
// begin side := GetSide ( minersList [ i ] ) ;
57571: LD_ADDR_VAR 0 3
57575: PUSH
57576: LD_EXP 50
57580: PUSH
57581: LD_VAR 0 1
57585: ARRAY
57586: PPUSH
57587: CALL_OW 255
57591: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57592: LD_ADDR_VAR 0 4
57596: PUSH
57597: LD_EXP 51
57601: PUSH
57602: LD_VAR 0 1
57606: ARRAY
57607: PUSH
57608: LD_VAR 0 2
57612: ARRAY
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: PPUSH
57618: LD_EXP 51
57622: PUSH
57623: LD_VAR 0 1
57627: ARRAY
57628: PUSH
57629: LD_VAR 0 2
57633: ARRAY
57634: PUSH
57635: LD_INT 2
57637: ARRAY
57638: PPUSH
57639: CALL_OW 428
57643: ST_TO_ADDR
// if not tmp then
57644: LD_VAR 0 4
57648: NOT
57649: IFFALSE 57653
// continue ;
57651: GO 57568
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57653: LD_VAR 0 4
57657: PUSH
57658: LD_INT 81
57660: PUSH
57661: LD_VAR 0 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PPUSH
57670: CALL_OW 69
57674: IN
57675: PUSH
57676: LD_EXP 51
57680: PUSH
57681: LD_VAR 0 1
57685: ARRAY
57686: PUSH
57687: LD_VAR 0 2
57691: ARRAY
57692: PUSH
57693: LD_INT 1
57695: ARRAY
57696: PPUSH
57697: LD_EXP 51
57701: PUSH
57702: LD_VAR 0 1
57706: ARRAY
57707: PUSH
57708: LD_VAR 0 2
57712: ARRAY
57713: PUSH
57714: LD_INT 2
57716: ARRAY
57717: PPUSH
57718: CALL_OW 458
57722: AND
57723: IFFALSE 57817
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57725: LD_EXP 51
57729: PUSH
57730: LD_VAR 0 1
57734: ARRAY
57735: PUSH
57736: LD_VAR 0 2
57740: ARRAY
57741: PUSH
57742: LD_INT 1
57744: ARRAY
57745: PPUSH
57746: LD_EXP 51
57750: PUSH
57751: LD_VAR 0 1
57755: ARRAY
57756: PUSH
57757: LD_VAR 0 2
57761: ARRAY
57762: PUSH
57763: LD_INT 2
57765: ARRAY
57766: PPUSH
57767: LD_VAR 0 3
57771: PPUSH
57772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57776: LD_ADDR_EXP 51
57780: PUSH
57781: LD_EXP 51
57785: PPUSH
57786: LD_VAR 0 1
57790: PPUSH
57791: LD_EXP 51
57795: PUSH
57796: LD_VAR 0 1
57800: ARRAY
57801: PPUSH
57802: LD_VAR 0 2
57806: PPUSH
57807: CALL_OW 3
57811: PPUSH
57812: CALL_OW 1
57816: ST_TO_ADDR
// end ; end ;
57817: GO 57568
57819: POP
57820: POP
// end ;
57821: GO 57486
57823: POP
57824: POP
// end ;
57825: PPOPN 4
57827: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57828: LD_INT 0
57830: PPUSH
57831: PPUSH
// result := false ;
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_INT 0
57839: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57840: LD_VAR 0 1
57844: PPUSH
57845: CALL_OW 264
57849: PUSH
57850: LD_INT 81
57852: EQUAL
57853: NOT
57854: IFFALSE 57858
// exit ;
57856: GO 58098
// index := GetElementIndex ( minersList , unit ) ;
57858: LD_ADDR_VAR 0 5
57862: PUSH
57863: LD_EXP 50
57867: PPUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL 7713 0 2
57877: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57878: LD_EXP 51
57882: PUSH
57883: LD_VAR 0 5
57887: ARRAY
57888: PUSH
57889: LD_EXP 52
57893: GREATEREQUAL
57894: IFFALSE 57898
// exit ;
57896: GO 58098
// ComMoveXY ( unit , x , y ) ;
57898: LD_VAR 0 1
57902: PPUSH
57903: LD_VAR 0 2
57907: PPUSH
57908: LD_VAR 0 3
57912: PPUSH
57913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57917: LD_INT 35
57919: PPUSH
57920: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57924: LD_VAR 0 1
57928: PPUSH
57929: LD_VAR 0 2
57933: PPUSH
57934: LD_VAR 0 3
57938: PPUSH
57939: CALL 39474 0 3
57943: NOT
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 314
57954: AND
57955: IFFALSE 57959
// exit ;
57957: GO 58098
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57959: LD_VAR 0 2
57963: PPUSH
57964: LD_VAR 0 3
57968: PPUSH
57969: CALL_OW 428
57973: PUSH
57974: LD_VAR 0 1
57978: EQUAL
57979: PUSH
57980: LD_VAR 0 1
57984: PPUSH
57985: CALL_OW 314
57989: NOT
57990: AND
57991: IFFALSE 57917
// PlaySoundXY ( x , y , PlantMine ) ;
57993: LD_VAR 0 2
57997: PPUSH
57998: LD_VAR 0 3
58002: PPUSH
58003: LD_STRING PlantMine
58005: PPUSH
58006: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58010: LD_VAR 0 2
58014: PPUSH
58015: LD_VAR 0 3
58019: PPUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: CALL_OW 255
58029: PPUSH
58030: LD_INT 0
58032: PPUSH
58033: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58037: LD_ADDR_EXP 51
58041: PUSH
58042: LD_EXP 51
58046: PPUSH
58047: LD_VAR 0 5
58051: PUSH
58052: LD_EXP 51
58056: PUSH
58057: LD_VAR 0 5
58061: ARRAY
58062: PUSH
58063: LD_INT 1
58065: PLUS
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PPUSH
58071: LD_VAR 0 2
58075: PUSH
58076: LD_VAR 0 3
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PPUSH
58085: CALL 7928 0 3
58089: ST_TO_ADDR
// result := true ;
58090: LD_ADDR_VAR 0 4
58094: PUSH
58095: LD_INT 1
58097: ST_TO_ADDR
// end ;
58098: LD_VAR 0 4
58102: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58103: LD_INT 0
58105: PPUSH
58106: PPUSH
58107: PPUSH
// if not unit in minersList then
58108: LD_VAR 0 1
58112: PUSH
58113: LD_EXP 50
58117: IN
58118: NOT
58119: IFFALSE 58123
// exit ;
58121: GO 58515
// index := GetElementIndex ( minersList , unit ) ;
58123: LD_ADDR_VAR 0 6
58127: PUSH
58128: LD_EXP 50
58132: PPUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL 7713 0 2
58142: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58143: LD_ADDR_VAR 0 5
58147: PUSH
58148: DOUBLE
58149: LD_EXP 51
58153: PUSH
58154: LD_VAR 0 6
58158: ARRAY
58159: INC
58160: ST_TO_ADDR
58161: LD_INT 1
58163: PUSH
58164: FOR_DOWNTO
58165: IFFALSE 58326
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58167: LD_EXP 51
58171: PUSH
58172: LD_VAR 0 6
58176: ARRAY
58177: PUSH
58178: LD_VAR 0 5
58182: ARRAY
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PUSH
58188: LD_VAR 0 2
58192: EQUAL
58193: PUSH
58194: LD_EXP 51
58198: PUSH
58199: LD_VAR 0 6
58203: ARRAY
58204: PUSH
58205: LD_VAR 0 5
58209: ARRAY
58210: PUSH
58211: LD_INT 2
58213: ARRAY
58214: PUSH
58215: LD_VAR 0 3
58219: EQUAL
58220: AND
58221: IFFALSE 58324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58223: LD_EXP 51
58227: PUSH
58228: LD_VAR 0 6
58232: ARRAY
58233: PUSH
58234: LD_VAR 0 5
58238: ARRAY
58239: PUSH
58240: LD_INT 1
58242: ARRAY
58243: PPUSH
58244: LD_EXP 51
58248: PUSH
58249: LD_VAR 0 6
58253: ARRAY
58254: PUSH
58255: LD_VAR 0 5
58259: ARRAY
58260: PUSH
58261: LD_INT 2
58263: ARRAY
58264: PPUSH
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL_OW 255
58274: PPUSH
58275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58279: LD_ADDR_EXP 51
58283: PUSH
58284: LD_EXP 51
58288: PPUSH
58289: LD_VAR 0 6
58293: PPUSH
58294: LD_EXP 51
58298: PUSH
58299: LD_VAR 0 6
58303: ARRAY
58304: PPUSH
58305: LD_VAR 0 5
58309: PPUSH
58310: CALL_OW 3
58314: PPUSH
58315: CALL_OW 1
58319: ST_TO_ADDR
// exit ;
58320: POP
58321: POP
58322: GO 58515
// end ; end ;
58324: GO 58164
58326: POP
58327: POP
// for i := minerMinesList [ index ] downto 1 do
58328: LD_ADDR_VAR 0 5
58332: PUSH
58333: DOUBLE
58334: LD_EXP 51
58338: PUSH
58339: LD_VAR 0 6
58343: ARRAY
58344: INC
58345: ST_TO_ADDR
58346: LD_INT 1
58348: PUSH
58349: FOR_DOWNTO
58350: IFFALSE 58513
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58352: LD_EXP 51
58356: PUSH
58357: LD_VAR 0 6
58361: ARRAY
58362: PUSH
58363: LD_VAR 0 5
58367: ARRAY
58368: PUSH
58369: LD_INT 1
58371: ARRAY
58372: PPUSH
58373: LD_EXP 51
58377: PUSH
58378: LD_VAR 0 6
58382: ARRAY
58383: PUSH
58384: LD_VAR 0 5
58388: ARRAY
58389: PUSH
58390: LD_INT 2
58392: ARRAY
58393: PPUSH
58394: LD_VAR 0 2
58398: PPUSH
58399: LD_VAR 0 3
58403: PPUSH
58404: CALL_OW 298
58408: PUSH
58409: LD_INT 6
58411: LESS
58412: IFFALSE 58511
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58414: LD_EXP 51
58418: PUSH
58419: LD_VAR 0 6
58423: ARRAY
58424: PUSH
58425: LD_VAR 0 5
58429: ARRAY
58430: PUSH
58431: LD_INT 1
58433: ARRAY
58434: PPUSH
58435: LD_EXP 51
58439: PUSH
58440: LD_VAR 0 6
58444: ARRAY
58445: PUSH
58446: LD_VAR 0 5
58450: ARRAY
58451: PUSH
58452: LD_INT 2
58454: ARRAY
58455: PPUSH
58456: LD_VAR 0 1
58460: PPUSH
58461: CALL_OW 255
58465: PPUSH
58466: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58470: LD_ADDR_EXP 51
58474: PUSH
58475: LD_EXP 51
58479: PPUSH
58480: LD_VAR 0 6
58484: PPUSH
58485: LD_EXP 51
58489: PUSH
58490: LD_VAR 0 6
58494: ARRAY
58495: PPUSH
58496: LD_VAR 0 5
58500: PPUSH
58501: CALL_OW 3
58505: PPUSH
58506: CALL_OW 1
58510: ST_TO_ADDR
// end ; end ;
58511: GO 58349
58513: POP
58514: POP
// end ;
58515: LD_VAR 0 4
58519: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58520: LD_INT 0
58522: PPUSH
58523: PPUSH
58524: PPUSH
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
58530: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58531: LD_VAR 0 1
58535: PPUSH
58536: CALL_OW 264
58540: PUSH
58541: LD_INT 81
58543: EQUAL
58544: NOT
58545: PUSH
58546: LD_VAR 0 1
58550: PUSH
58551: LD_EXP 50
58555: IN
58556: NOT
58557: OR
58558: IFFALSE 58562
// exit ;
58560: GO 58884
// index := GetElementIndex ( minersList , unit ) ;
58562: LD_ADDR_VAR 0 6
58566: PUSH
58567: LD_EXP 50
58571: PPUSH
58572: LD_VAR 0 1
58576: PPUSH
58577: CALL 7713 0 2
58581: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58582: LD_ADDR_VAR 0 8
58586: PUSH
58587: LD_EXP 52
58591: PUSH
58592: LD_EXP 51
58596: PUSH
58597: LD_VAR 0 6
58601: ARRAY
58602: MINUS
58603: ST_TO_ADDR
// if not minesFreeAmount then
58604: LD_VAR 0 8
58608: NOT
58609: IFFALSE 58613
// exit ;
58611: GO 58884
// tmp := [ ] ;
58613: LD_ADDR_VAR 0 7
58617: PUSH
58618: EMPTY
58619: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58620: LD_ADDR_VAR 0 5
58624: PUSH
58625: DOUBLE
58626: LD_INT 1
58628: DEC
58629: ST_TO_ADDR
58630: LD_VAR 0 8
58634: PUSH
58635: FOR_TO
58636: IFFALSE 58831
// begin _d := rand ( 0 , 5 ) ;
58638: LD_ADDR_VAR 0 11
58642: PUSH
58643: LD_INT 0
58645: PPUSH
58646: LD_INT 5
58648: PPUSH
58649: CALL_OW 12
58653: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58654: LD_ADDR_VAR 0 12
58658: PUSH
58659: LD_INT 2
58661: PPUSH
58662: LD_INT 6
58664: PPUSH
58665: CALL_OW 12
58669: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58670: LD_ADDR_VAR 0 9
58674: PUSH
58675: LD_VAR 0 2
58679: PPUSH
58680: LD_VAR 0 11
58684: PPUSH
58685: LD_VAR 0 12
58689: PPUSH
58690: CALL_OW 272
58694: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58695: LD_ADDR_VAR 0 10
58699: PUSH
58700: LD_VAR 0 3
58704: PPUSH
58705: LD_VAR 0 11
58709: PPUSH
58710: LD_VAR 0 12
58714: PPUSH
58715: CALL_OW 273
58719: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58720: LD_VAR 0 9
58724: PPUSH
58725: LD_VAR 0 10
58729: PPUSH
58730: CALL_OW 488
58734: PUSH
58735: LD_VAR 0 9
58739: PUSH
58740: LD_VAR 0 10
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_VAR 0 7
58753: IN
58754: NOT
58755: AND
58756: PUSH
58757: LD_VAR 0 9
58761: PPUSH
58762: LD_VAR 0 10
58766: PPUSH
58767: CALL_OW 458
58771: NOT
58772: AND
58773: IFFALSE 58815
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58775: LD_ADDR_VAR 0 7
58779: PUSH
58780: LD_VAR 0 7
58784: PPUSH
58785: LD_VAR 0 7
58789: PUSH
58790: LD_INT 1
58792: PLUS
58793: PPUSH
58794: LD_VAR 0 9
58798: PUSH
58799: LD_VAR 0 10
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PPUSH
58808: CALL_OW 1
58812: ST_TO_ADDR
58813: GO 58829
// i := i - 1 ;
58815: LD_ADDR_VAR 0 5
58819: PUSH
58820: LD_VAR 0 5
58824: PUSH
58825: LD_INT 1
58827: MINUS
58828: ST_TO_ADDR
// end ;
58829: GO 58635
58831: POP
58832: POP
// for i in tmp do
58833: LD_ADDR_VAR 0 5
58837: PUSH
58838: LD_VAR 0 7
58842: PUSH
58843: FOR_IN
58844: IFFALSE 58882
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58846: LD_VAR 0 1
58850: PPUSH
58851: LD_VAR 0 5
58855: PUSH
58856: LD_INT 1
58858: ARRAY
58859: PPUSH
58860: LD_VAR 0 5
58864: PUSH
58865: LD_INT 2
58867: ARRAY
58868: PPUSH
58869: CALL 57828 0 3
58873: NOT
58874: IFFALSE 58880
// exit ;
58876: POP
58877: POP
58878: GO 58884
58880: GO 58843
58882: POP
58883: POP
// end ;
58884: LD_VAR 0 4
58888: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58889: LD_INT 0
58891: PPUSH
58892: PPUSH
58893: PPUSH
58894: PPUSH
58895: PPUSH
58896: PPUSH
58897: PPUSH
58898: PPUSH
58899: PPUSH
// if GetClass ( unit ) <> class_sniper then
58900: LD_VAR 0 1
58904: PPUSH
58905: CALL_OW 257
58909: PUSH
58910: LD_INT 5
58912: NONEQUAL
58913: IFFALSE 58917
// exit ;
58915: GO 59383
// dist := 8 ;
58917: LD_ADDR_VAR 0 5
58921: PUSH
58922: LD_INT 8
58924: ST_TO_ADDR
// viewRange := 12 ;
58925: LD_ADDR_VAR 0 8
58929: PUSH
58930: LD_INT 12
58932: ST_TO_ADDR
// side := GetSide ( unit ) ;
58933: LD_ADDR_VAR 0 6
58937: PUSH
58938: LD_VAR 0 1
58942: PPUSH
58943: CALL_OW 255
58947: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58948: LD_INT 61
58950: PPUSH
58951: LD_VAR 0 6
58955: PPUSH
58956: CALL_OW 321
58960: PUSH
58961: LD_INT 2
58963: EQUAL
58964: IFFALSE 58974
// viewRange := 16 ;
58966: LD_ADDR_VAR 0 8
58970: PUSH
58971: LD_INT 16
58973: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58974: LD_VAR 0 1
58978: PPUSH
58979: LD_VAR 0 2
58983: PPUSH
58984: LD_VAR 0 3
58988: PPUSH
58989: CALL_OW 297
58993: PUSH
58994: LD_VAR 0 5
58998: GREATER
58999: IFFALSE 59078
// begin ComMoveXY ( unit , x , y ) ;
59001: LD_VAR 0 1
59005: PPUSH
59006: LD_VAR 0 2
59010: PPUSH
59011: LD_VAR 0 3
59015: PPUSH
59016: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59020: LD_INT 35
59022: PPUSH
59023: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59027: LD_VAR 0 1
59031: PPUSH
59032: LD_VAR 0 2
59036: PPUSH
59037: LD_VAR 0 3
59041: PPUSH
59042: CALL 39474 0 3
59046: NOT
59047: IFFALSE 59051
// exit ;
59049: GO 59383
// until GetDistUnitXY ( unit , x , y ) < dist ;
59051: LD_VAR 0 1
59055: PPUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: LD_VAR 0 3
59065: PPUSH
59066: CALL_OW 297
59070: PUSH
59071: LD_VAR 0 5
59075: LESS
59076: IFFALSE 59020
// end ; ComTurnXY ( unit , x , y ) ;
59078: LD_VAR 0 1
59082: PPUSH
59083: LD_VAR 0 2
59087: PPUSH
59088: LD_VAR 0 3
59092: PPUSH
59093: CALL_OW 118
// repeat if Multiplayer then
59097: LD_OWVAR 4
59101: IFFALSE 59112
// wait ( 35 ) else
59103: LD_INT 35
59105: PPUSH
59106: CALL_OW 67
59110: GO 59119
// wait ( 5 ) ;
59112: LD_INT 5
59114: PPUSH
59115: CALL_OW 67
// _d := GetDir ( unit ) ;
59119: LD_ADDR_VAR 0 11
59123: PUSH
59124: LD_VAR 0 1
59128: PPUSH
59129: CALL_OW 254
59133: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59134: LD_ADDR_VAR 0 7
59138: PUSH
59139: LD_VAR 0 1
59143: PPUSH
59144: CALL_OW 250
59148: PPUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL_OW 251
59158: PPUSH
59159: LD_VAR 0 2
59163: PPUSH
59164: LD_VAR 0 3
59168: PPUSH
59169: CALL 42082 0 4
59173: ST_TO_ADDR
// until dir = _d ;
59174: LD_VAR 0 7
59178: PUSH
59179: LD_VAR 0 11
59183: EQUAL
59184: IFFALSE 59097
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59186: LD_ADDR_VAR 0 9
59190: PUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL_OW 250
59200: PPUSH
59201: LD_VAR 0 7
59205: PPUSH
59206: LD_VAR 0 5
59210: PPUSH
59211: CALL_OW 272
59215: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59216: LD_ADDR_VAR 0 10
59220: PUSH
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL_OW 251
59230: PPUSH
59231: LD_VAR 0 7
59235: PPUSH
59236: LD_VAR 0 5
59240: PPUSH
59241: CALL_OW 273
59245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59246: LD_VAR 0 9
59250: PPUSH
59251: LD_VAR 0 10
59255: PPUSH
59256: CALL_OW 488
59260: NOT
59261: IFFALSE 59265
// exit ;
59263: GO 59383
// ComAnimCustom ( unit , 1 ) ;
59265: LD_VAR 0 1
59269: PPUSH
59270: LD_INT 1
59272: PPUSH
59273: CALL_OW 592
// p := 0 ;
59277: LD_ADDR_VAR 0 12
59281: PUSH
59282: LD_INT 0
59284: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59285: LD_VAR 0 9
59289: PPUSH
59290: LD_VAR 0 10
59294: PPUSH
59295: LD_VAR 0 6
59299: PPUSH
59300: LD_VAR 0 8
59304: PPUSH
59305: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59309: LD_INT 35
59311: PPUSH
59312: CALL_OW 67
// p := Inc ( p ) ;
59316: LD_ADDR_VAR 0 12
59320: PUSH
59321: LD_VAR 0 12
59325: PPUSH
59326: CALL 42038 0 1
59330: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59331: LD_VAR 0 12
59335: PUSH
59336: LD_INT 3
59338: EQUAL
59339: PUSH
59340: LD_VAR 0 1
59344: PPUSH
59345: CALL_OW 302
59349: NOT
59350: OR
59351: PUSH
59352: LD_VAR 0 1
59356: PPUSH
59357: CALL_OW 301
59361: OR
59362: IFFALSE 59309
// RemoveSeeing ( _x , _y , side ) ;
59364: LD_VAR 0 9
59368: PPUSH
59369: LD_VAR 0 10
59373: PPUSH
59374: LD_VAR 0 6
59378: PPUSH
59379: CALL_OW 331
// end ; end_of_file
59383: LD_VAR 0 4
59387: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59388: PPOPN 6
59390: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59391: LD_EXP 1
59395: PUSH
59396: LD_INT 4
59398: EQUAL
59399: IFFALSE 59435
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59401: LD_STRING setGameDifficulty(
59403: PUSH
59404: LD_OWVAR 67
59408: STR
59409: PUSH
59410: LD_STRING )
59412: STR
59413: PPUSH
59414: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59418: LD_STRING displayDifficulty(
59420: PUSH
59421: LD_OWVAR 67
59425: STR
59426: PUSH
59427: LD_STRING )
59429: STR
59430: PPUSH
59431: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59435: CALL 59464 0 0
// end ; end_of_file
59439: PPOPN 1
59441: END
// every 0 0$1 do
59442: GO 59444
59444: DISABLE
// begin enable ;
59445: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59446: LD_STRING updateTimer(
59448: PUSH
59449: LD_OWVAR 1
59453: STR
59454: PUSH
59455: LD_STRING );
59457: STR
59458: PPUSH
59459: CALL_OW 559
// end ;
59463: END
// export function SOS_MapStart ( ) ; begin
59464: LD_INT 0
59466: PPUSH
// UpdateFactoryWaypoints ( ) ;
59467: CALL 59840 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59471: CALL 60092 0 0
// ParseMultiDataToLua ( ) ;
59475: CALL 60239 0 0
// end ;
59479: LD_VAR 0 1
59483: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59484: LD_INT 0
59486: PPUSH
// end ;
59487: LD_VAR 0 12
59491: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59496: LD_VAR 0 1
59500: NOT
59501: PUSH
59502: LD_VAR 0 2
59506: PPUSH
59507: LD_VAR 0 3
59511: PPUSH
59512: CALL_OW 488
59516: NOT
59517: OR
59518: PUSH
59519: LD_VAR 0 1
59523: PPUSH
59524: CALL_OW 266
59528: PUSH
59529: LD_INT 3
59531: NONEQUAL
59532: PUSH
59533: LD_VAR 0 1
59537: PPUSH
59538: CALL_OW 247
59542: PUSH
59543: LD_INT 1
59545: EQUAL
59546: NOT
59547: AND
59548: OR
59549: IFFALSE 59553
// exit ;
59551: GO 59835
// if GetType ( factory ) = unit_human then
59553: LD_VAR 0 1
59557: PPUSH
59558: CALL_OW 247
59562: PUSH
59563: LD_INT 1
59565: EQUAL
59566: IFFALSE 59583
// factory := IsInUnit ( factory ) ;
59568: LD_ADDR_VAR 0 1
59572: PUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 310
59582: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59583: LD_VAR 0 1
59587: PPUSH
59588: CALL_OW 266
59592: PUSH
59593: LD_INT 3
59595: NONEQUAL
59596: IFFALSE 59600
// exit ;
59598: GO 59835
// for i := 1 to Count ( factoryWaypoints ) do
59600: LD_ADDR_VAR 0 5
59604: PUSH
59605: DOUBLE
59606: LD_INT 1
59608: DEC
59609: ST_TO_ADDR
59610: LD_EXP 53
59614: PPUSH
59615: CALL 5068 0 1
59619: PUSH
59620: FOR_TO
59621: IFFALSE 59783
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59623: LD_VAR 0 2
59627: PPUSH
59628: LD_VAR 0 3
59632: PPUSH
59633: CALL_OW 428
59637: PUSH
59638: LD_EXP 53
59642: PUSH
59643: LD_VAR 0 5
59647: ARRAY
59648: PUSH
59649: LD_INT 2
59651: ARRAY
59652: EQUAL
59653: IFFALSE 59685
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59655: LD_ADDR_EXP 53
59659: PUSH
59660: LD_EXP 53
59664: PPUSH
59665: LD_VAR 0 5
59669: PPUSH
59670: CALL_OW 3
59674: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59675: CALL 59840 0 0
// exit ;
59679: POP
59680: POP
59681: GO 59835
// end else
59683: GO 59781
// if factory = factoryWaypoints [ i ] [ 2 ] then
59685: LD_VAR 0 1
59689: PUSH
59690: LD_EXP 53
59694: PUSH
59695: LD_VAR 0 5
59699: ARRAY
59700: PUSH
59701: LD_INT 2
59703: ARRAY
59704: EQUAL
59705: IFFALSE 59781
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59707: LD_ADDR_EXP 53
59711: PUSH
59712: LD_EXP 53
59716: PPUSH
59717: LD_VAR 0 5
59721: PPUSH
59722: CALL_OW 3
59726: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59727: LD_ADDR_EXP 53
59731: PUSH
59732: LD_EXP 53
59736: PPUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: CALL_OW 255
59746: PUSH
59747: LD_VAR 0 1
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_VAR 0 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: PPUSH
59768: CALL 40677 0 2
59772: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59773: CALL 59840 0 0
// exit ;
59777: POP
59778: POP
59779: GO 59835
// end ; end ;
59781: GO 59620
59783: POP
59784: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59785: LD_ADDR_EXP 53
59789: PUSH
59790: LD_EXP 53
59794: PPUSH
59795: LD_VAR 0 1
59799: PPUSH
59800: CALL_OW 255
59804: PUSH
59805: LD_VAR 0 1
59809: PUSH
59810: LD_VAR 0 2
59814: PUSH
59815: LD_VAR 0 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: PPUSH
59826: CALL 40677 0 2
59830: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59831: CALL 59840 0 0
// end ;
59835: LD_VAR 0 4
59839: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59840: LD_INT 0
59842: PPUSH
59843: PPUSH
59844: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59845: LD_STRING resetFactoryWaypoint();
59847: PPUSH
59848: CALL_OW 559
// if factoryWaypoints then
59852: LD_EXP 53
59856: IFFALSE 59977
// begin list := factoryWaypoints ;
59858: LD_ADDR_VAR 0 3
59862: PUSH
59863: LD_EXP 53
59867: ST_TO_ADDR
// for i := 1 to list do
59868: LD_ADDR_VAR 0 2
59872: PUSH
59873: DOUBLE
59874: LD_INT 1
59876: DEC
59877: ST_TO_ADDR
59878: LD_VAR 0 3
59882: PUSH
59883: FOR_TO
59884: IFFALSE 59975
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59886: LD_STRING setFactoryWaypointXY(
59888: PUSH
59889: LD_VAR 0 3
59893: PUSH
59894: LD_VAR 0 2
59898: ARRAY
59899: PUSH
59900: LD_INT 1
59902: ARRAY
59903: STR
59904: PUSH
59905: LD_STRING ,
59907: STR
59908: PUSH
59909: LD_VAR 0 3
59913: PUSH
59914: LD_VAR 0 2
59918: ARRAY
59919: PUSH
59920: LD_INT 2
59922: ARRAY
59923: STR
59924: PUSH
59925: LD_STRING ,
59927: STR
59928: PUSH
59929: LD_VAR 0 3
59933: PUSH
59934: LD_VAR 0 2
59938: ARRAY
59939: PUSH
59940: LD_INT 3
59942: ARRAY
59943: STR
59944: PUSH
59945: LD_STRING ,
59947: STR
59948: PUSH
59949: LD_VAR 0 3
59953: PUSH
59954: LD_VAR 0 2
59958: ARRAY
59959: PUSH
59960: LD_INT 4
59962: ARRAY
59963: STR
59964: PUSH
59965: LD_STRING )
59967: STR
59968: PPUSH
59969: CALL_OW 559
59973: GO 59883
59975: POP
59976: POP
// end ; end ;
59977: LD_VAR 0 1
59981: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59982: LD_INT 0
59984: PPUSH
// if HexInfo ( x , y ) = warehouse then
59985: LD_VAR 0 2
59989: PPUSH
59990: LD_VAR 0 3
59994: PPUSH
59995: CALL_OW 428
59999: PUSH
60000: LD_VAR 0 1
60004: EQUAL
60005: IFFALSE 60032
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60007: LD_ADDR_EXP 55
60011: PUSH
60012: LD_EXP 55
60016: PPUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: LD_INT 0
60024: PPUSH
60025: CALL_OW 1
60029: ST_TO_ADDR
60030: GO 60083
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60032: LD_ADDR_EXP 55
60036: PUSH
60037: LD_EXP 55
60041: PPUSH
60042: LD_VAR 0 1
60046: PPUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL_OW 255
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_VAR 0 3
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: PPUSH
60078: CALL_OW 1
60082: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60083: CALL 60092 0 0
// end ;
60087: LD_VAR 0 4
60091: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
60096: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60097: LD_STRING resetWarehouseGatheringPoints();
60099: PPUSH
60100: CALL_OW 559
// if warehouseGatheringPoints then
60104: LD_EXP 55
60108: IFFALSE 60234
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60110: LD_ADDR_VAR 0 3
60114: PUSH
60115: LD_EXP 55
60119: PPUSH
60120: CALL 44445 0 1
60124: ST_TO_ADDR
// for i := 1 to list do
60125: LD_ADDR_VAR 0 2
60129: PUSH
60130: DOUBLE
60131: LD_INT 1
60133: DEC
60134: ST_TO_ADDR
60135: LD_VAR 0 3
60139: PUSH
60140: FOR_TO
60141: IFFALSE 60232
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60143: LD_STRING setWarehouseGatheringPointXY(
60145: PUSH
60146: LD_VAR 0 3
60150: PUSH
60151: LD_VAR 0 2
60155: ARRAY
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: STR
60161: PUSH
60162: LD_STRING ,
60164: STR
60165: PUSH
60166: LD_VAR 0 3
60170: PUSH
60171: LD_VAR 0 2
60175: ARRAY
60176: PUSH
60177: LD_INT 2
60179: ARRAY
60180: STR
60181: PUSH
60182: LD_STRING ,
60184: STR
60185: PUSH
60186: LD_VAR 0 3
60190: PUSH
60191: LD_VAR 0 2
60195: ARRAY
60196: PUSH
60197: LD_INT 3
60199: ARRAY
60200: STR
60201: PUSH
60202: LD_STRING ,
60204: STR
60205: PUSH
60206: LD_VAR 0 3
60210: PUSH
60211: LD_VAR 0 2
60215: ARRAY
60216: PUSH
60217: LD_INT 4
60219: ARRAY
60220: STR
60221: PUSH
60222: LD_STRING )
60224: STR
60225: PPUSH
60226: CALL_OW 559
60230: GO 60140
60232: POP
60233: POP
// end ; end ;
60234: LD_VAR 0 1
60238: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60239: LD_INT 0
60241: PPUSH
60242: PPUSH
// if not mpSidePositions then
60243: LD_EXP 5
60247: NOT
60248: IFFALSE 60252
// exit ;
60250: GO 60323
// result :=  ;
60252: LD_ADDR_VAR 0 1
60256: PUSH
60257: LD_STRING 
60259: ST_TO_ADDR
// for i := 1 to 8 do
60260: LD_ADDR_VAR 0 2
60264: PUSH
60265: DOUBLE
60266: LD_INT 1
60268: DEC
60269: ST_TO_ADDR
60270: LD_INT 8
60272: PUSH
60273: FOR_TO
60274: IFFALSE 60304
// begin result := result & mpSidePositions [ i ] & ; ;
60276: LD_ADDR_VAR 0 1
60280: PUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_EXP 5
60290: PUSH
60291: LD_VAR 0 2
60295: ARRAY
60296: STR
60297: PUSH
60298: LD_STRING ;
60300: STR
60301: ST_TO_ADDR
// end ;
60302: GO 60273
60304: POP
60305: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60306: LD_STRING setMultiplayerRealPosition("
60308: PUSH
60309: LD_VAR 0 1
60313: STR
60314: PUSH
60315: LD_STRING ");
60317: STR
60318: PPUSH
60319: CALL_OW 559
// end ;
60323: LD_VAR 0 1
60327: RET
