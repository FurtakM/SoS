// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46512 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46935 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeSurvivalHardcore ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 8
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 32
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 35
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 33
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 35
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 34
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 31
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45877 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45877 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45877 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45877 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45877 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45877 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45877 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45877 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 5182 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45710 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45710 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45710 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45710 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 45710 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 45710 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 45710 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 45710 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 45710 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 45710 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 45710 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 45710 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 45710 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 45710 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 45710 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 45710 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45877 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45877 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45877 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45877 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45877 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45877 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45877 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45877 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45877 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45877 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45877 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45877 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45877 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45877 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45877 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45877 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45877 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45877 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45877 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45877 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45877 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45877 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45877 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45877 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 42531 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 56888 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 52058 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 56905 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 53111 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_VAR 0 4
2862: PPUSH
2863: LD_VAR 0 5
2867: PPUSH
2868: CALL 53848 0 5
2872: PPOPN 5
2874: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: LD_VAR 0 2
2884: PPUSH
2885: CALL 56946 0 2
2889: PPOPN 2
2891: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: CALL 52864 0 2
2906: PPOPN 2
2908: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: CALL 53164 0 3
2928: PPOPN 3
2930: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: CALL 53951 0 4
2955: PPOPN 4
2957: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
// if exist_mode then
2962: LD_VAR 0 2
2966: IFFALSE 3012
// begin unit := CreateCharacter ( prefix & ident ) ;
2968: LD_ADDR_VAR 0 5
2972: PUSH
2973: LD_VAR 0 3
2977: PUSH
2978: LD_VAR 0 1
2982: STR
2983: PPUSH
2984: CALL_OW 34
2988: ST_TO_ADDR
// if unit then
2989: LD_VAR 0 5
2993: IFFALSE 3010
// DeleteCharacters ( prefix & ident ) ;
2995: LD_VAR 0 3
2999: PUSH
3000: LD_VAR 0 1
3004: STR
3005: PPUSH
3006: CALL_OW 40
// end else
3010: GO 3027
// unit := NewCharacter ( ident ) ;
3012: LD_ADDR_VAR 0 5
3016: PUSH
3017: LD_VAR 0 1
3021: PPUSH
3022: CALL_OW 25
3026: ST_TO_ADDR
// result := unit ;
3027: LD_ADDR_VAR 0 4
3031: PUSH
3032: LD_VAR 0 5
3036: ST_TO_ADDR
// end ;
3037: LD_VAR 0 4
3041: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3042: LD_INT 0
3044: PPUSH
3045: PPUSH
// if exist_mode then
3046: LD_VAR 0 2
3050: IFFALSE 3075
// unit := CreateCharacter ( prefix & ident ) else
3052: LD_ADDR_VAR 0 5
3056: PUSH
3057: LD_VAR 0 3
3061: PUSH
3062: LD_VAR 0 1
3066: STR
3067: PPUSH
3068: CALL_OW 34
3072: ST_TO_ADDR
3073: GO 3090
// unit := NewCharacter ( ident ) ;
3075: LD_ADDR_VAR 0 5
3079: PUSH
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 25
3089: ST_TO_ADDR
// result := unit ;
3090: LD_ADDR_VAR 0 4
3094: PUSH
3095: LD_VAR 0 5
3099: ST_TO_ADDR
// end ;
3100: LD_VAR 0 4
3104: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3105: LD_INT 0
3107: PPUSH
3108: PPUSH
// if not side or not nation then
3109: LD_VAR 0 1
3113: NOT
3114: IFTRUE 3123
3116: PUSH
3117: LD_VAR 0 2
3121: NOT
3122: OR
3123: IFFALSE 3127
// exit ;
3125: GO 3921
// case nation of nation_american :
3127: LD_VAR 0 2
3131: PUSH
3132: LD_INT 1
3134: DOUBLE
3135: EQUAL
3136: IFTRUE 3140
3138: GO 3362
3140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_INT 35
3148: PUSH
3149: LD_INT 45
3151: PUSH
3152: LD_INT 46
3154: PUSH
3155: LD_INT 47
3157: PUSH
3158: LD_INT 82
3160: PUSH
3161: LD_INT 83
3163: PUSH
3164: LD_INT 84
3166: PUSH
3167: LD_INT 85
3169: PUSH
3170: LD_INT 86
3172: PUSH
3173: LD_INT 1
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: LD_INT 6
3181: PUSH
3182: LD_INT 15
3184: PUSH
3185: LD_INT 16
3187: PUSH
3188: LD_INT 7
3190: PUSH
3191: LD_INT 12
3193: PUSH
3194: LD_INT 13
3196: PUSH
3197: LD_INT 10
3199: PUSH
3200: LD_INT 14
3202: PUSH
3203: LD_INT 20
3205: PUSH
3206: LD_INT 21
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 25
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 27
3220: PUSH
3221: LD_INT 36
3223: PUSH
3224: LD_INT 69
3226: PUSH
3227: LD_INT 39
3229: PUSH
3230: LD_INT 34
3232: PUSH
3233: LD_INT 40
3235: PUSH
3236: LD_INT 48
3238: PUSH
3239: LD_INT 49
3241: PUSH
3242: LD_INT 50
3244: PUSH
3245: LD_INT 51
3247: PUSH
3248: LD_INT 52
3250: PUSH
3251: LD_INT 53
3253: PUSH
3254: LD_INT 54
3256: PUSH
3257: LD_INT 55
3259: PUSH
3260: LD_INT 56
3262: PUSH
3263: LD_INT 57
3265: PUSH
3266: LD_INT 58
3268: PUSH
3269: LD_INT 59
3271: PUSH
3272: LD_INT 60
3274: PUSH
3275: LD_INT 61
3277: PUSH
3278: LD_INT 62
3280: PUSH
3281: LD_INT 80
3283: PUSH
3284: LD_INT 82
3286: PUSH
3287: LD_INT 83
3289: PUSH
3290: LD_INT 84
3292: PUSH
3293: LD_INT 85
3295: PUSH
3296: LD_INT 86
3298: PUSH
3299: LD_INT 90
3301: PUSH
3302: LD_INT 93
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
3360: GO 3843
3362: LD_INT 2
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3370
3368: GO 3604
3370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3371: LD_ADDR_VAR 0 4
3375: PUSH
3376: LD_INT 35
3378: PUSH
3379: LD_INT 45
3381: PUSH
3382: LD_INT 46
3384: PUSH
3385: LD_INT 47
3387: PUSH
3388: LD_INT 82
3390: PUSH
3391: LD_INT 83
3393: PUSH
3394: LD_INT 84
3396: PUSH
3397: LD_INT 85
3399: PUSH
3400: LD_INT 87
3402: PUSH
3403: LD_INT 70
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: LD_INT 11
3411: PUSH
3412: LD_INT 3
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: LD_INT 5
3420: PUSH
3421: LD_INT 6
3423: PUSH
3424: LD_INT 15
3426: PUSH
3427: LD_INT 18
3429: PUSH
3430: LD_INT 7
3432: PUSH
3433: LD_INT 17
3435: PUSH
3436: LD_INT 8
3438: PUSH
3439: LD_INT 20
3441: PUSH
3442: LD_INT 21
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 72
3450: PUSH
3451: LD_INT 26
3453: PUSH
3454: LD_INT 69
3456: PUSH
3457: LD_INT 39
3459: PUSH
3460: LD_INT 40
3462: PUSH
3463: LD_INT 41
3465: PUSH
3466: LD_INT 42
3468: PUSH
3469: LD_INT 43
3471: PUSH
3472: LD_INT 48
3474: PUSH
3475: LD_INT 49
3477: PUSH
3478: LD_INT 50
3480: PUSH
3481: LD_INT 51
3483: PUSH
3484: LD_INT 52
3486: PUSH
3487: LD_INT 53
3489: PUSH
3490: LD_INT 54
3492: PUSH
3493: LD_INT 55
3495: PUSH
3496: LD_INT 56
3498: PUSH
3499: LD_INT 60
3501: PUSH
3502: LD_INT 61
3504: PUSH
3505: LD_INT 62
3507: PUSH
3508: LD_INT 66
3510: PUSH
3511: LD_INT 67
3513: PUSH
3514: LD_INT 68
3516: PUSH
3517: LD_INT 81
3519: PUSH
3520: LD_INT 82
3522: PUSH
3523: LD_INT 83
3525: PUSH
3526: LD_INT 84
3528: PUSH
3529: LD_INT 85
3531: PUSH
3532: LD_INT 87
3534: PUSH
3535: LD_INT 88
3537: PUSH
3538: LD_INT 92
3540: PUSH
3541: LD_INT 94
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: ST_TO_ADDR
3602: GO 3843
3604: LD_INT 3
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3612
3610: GO 3842
3612: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_INT 46
3620: PUSH
3621: LD_INT 47
3623: PUSH
3624: LD_INT 1
3626: PUSH
3627: LD_INT 2
3629: PUSH
3630: LD_INT 82
3632: PUSH
3633: LD_INT 83
3635: PUSH
3636: LD_INT 84
3638: PUSH
3639: LD_INT 85
3641: PUSH
3642: LD_INT 86
3644: PUSH
3645: LD_INT 11
3647: PUSH
3648: LD_INT 9
3650: PUSH
3651: LD_INT 20
3653: PUSH
3654: LD_INT 19
3656: PUSH
3657: LD_INT 21
3659: PUSH
3660: LD_INT 24
3662: PUSH
3663: LD_INT 22
3665: PUSH
3666: LD_INT 25
3668: PUSH
3669: LD_INT 28
3671: PUSH
3672: LD_INT 29
3674: PUSH
3675: LD_INT 30
3677: PUSH
3678: LD_INT 31
3680: PUSH
3681: LD_INT 37
3683: PUSH
3684: LD_INT 38
3686: PUSH
3687: LD_INT 32
3689: PUSH
3690: LD_INT 27
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: LD_INT 69
3698: PUSH
3699: LD_INT 39
3701: PUSH
3702: LD_INT 34
3704: PUSH
3705: LD_INT 40
3707: PUSH
3708: LD_INT 71
3710: PUSH
3711: LD_INT 23
3713: PUSH
3714: LD_INT 44
3716: PUSH
3717: LD_INT 48
3719: PUSH
3720: LD_INT 49
3722: PUSH
3723: LD_INT 50
3725: PUSH
3726: LD_INT 51
3728: PUSH
3729: LD_INT 52
3731: PUSH
3732: LD_INT 53
3734: PUSH
3735: LD_INT 54
3737: PUSH
3738: LD_INT 55
3740: PUSH
3741: LD_INT 56
3743: PUSH
3744: LD_INT 57
3746: PUSH
3747: LD_INT 58
3749: PUSH
3750: LD_INT 59
3752: PUSH
3753: LD_INT 63
3755: PUSH
3756: LD_INT 64
3758: PUSH
3759: LD_INT 65
3761: PUSH
3762: LD_INT 82
3764: PUSH
3765: LD_INT 83
3767: PUSH
3768: LD_INT 84
3770: PUSH
3771: LD_INT 85
3773: PUSH
3774: LD_INT 86
3776: PUSH
3777: LD_INT 89
3779: PUSH
3780: LD_INT 91
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
3840: GO 3843
3842: POP
// if state > - 1 and state < 3 then
3843: LD_VAR 0 3
3847: PUSH
3848: LD_INT 1
3850: NEG
3851: GREATER
3852: IFFALSE 3864
3854: PUSH
3855: LD_VAR 0 3
3859: PUSH
3860: LD_INT 3
3862: LESS
3863: AND
3864: IFFALSE 3921
// for i in result do
3866: LD_ADDR_VAR 0 5
3870: PUSH
3871: LD_VAR 0 4
3875: PUSH
3876: FOR_IN
3877: IFFALSE 3919
// if GetTech ( i , side ) <> state then
3879: LD_VAR 0 5
3883: PPUSH
3884: LD_VAR 0 1
3888: PPUSH
3889: CALL_OW 321
3893: PUSH
3894: LD_VAR 0 3
3898: NONEQUAL
3899: IFFALSE 3917
// result := result diff i ;
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: LD_VAR 0 4
3910: PUSH
3911: LD_VAR 0 5
3915: DIFF
3916: ST_TO_ADDR
3917: GO 3876
3919: POP
3920: POP
// end ;
3921: LD_VAR 0 4
3925: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
// result := true ;
3931: LD_ADDR_VAR 0 3
3935: PUSH
3936: LD_INT 1
3938: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3939: LD_ADDR_VAR 0 5
3943: PUSH
3944: LD_VAR 0 2
3948: PPUSH
3949: CALL_OW 480
3953: ST_TO_ADDR
// if not tmp then
3954: LD_VAR 0 5
3958: NOT
3959: IFFALSE 3963
// exit ;
3961: GO 4012
// for i in tmp do
3963: LD_ADDR_VAR 0 4
3967: PUSH
3968: LD_VAR 0 5
3972: PUSH
3973: FOR_IN
3974: IFFALSE 4010
// if GetTech ( i , side ) <> state_researched then
3976: LD_VAR 0 4
3980: PPUSH
3981: LD_VAR 0 1
3985: PPUSH
3986: CALL_OW 321
3990: PUSH
3991: LD_INT 2
3993: NONEQUAL
3994: IFFALSE 4008
// begin result := false ;
3996: LD_ADDR_VAR 0 3
4000: PUSH
4001: LD_INT 0
4003: ST_TO_ADDR
// exit ;
4004: POP
4005: POP
4006: GO 4012
// end ;
4008: GO 3973
4010: POP
4011: POP
// end ;
4012: LD_VAR 0 3
4016: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
4029: PPUSH
4030: PPUSH
4031: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4032: LD_VAR 0 1
4036: NOT
4037: IFTRUE 4054
4039: PUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 257
4049: PUSH
4050: LD_INT 9
4052: NONEQUAL
4053: OR
4054: IFFALSE 4058
// exit ;
4056: GO 4637
// side := GetSide ( unit ) ;
4058: LD_ADDR_VAR 0 9
4062: PUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 255
4072: ST_TO_ADDR
// tech_space := tech_spacanom ;
4073: LD_ADDR_VAR 0 12
4077: PUSH
4078: LD_INT 29
4080: ST_TO_ADDR
// tech_time := tech_taurad ;
4081: LD_ADDR_VAR 0 13
4085: PUSH
4086: LD_INT 28
4088: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4089: LD_ADDR_VAR 0 11
4093: PUSH
4094: LD_VAR 0 1
4098: PPUSH
4099: CALL_OW 310
4103: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4104: LD_VAR 0 11
4108: PPUSH
4109: CALL_OW 247
4113: PUSH
4114: LD_INT 2
4116: EQUAL
4117: IFFALSE 4121
// exit ;
4119: GO 4637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4121: LD_ADDR_VAR 0 8
4125: PUSH
4126: LD_INT 81
4128: PUSH
4129: LD_VAR 0 9
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 21
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 69
4163: ST_TO_ADDR
// if not tmp then
4164: LD_VAR 0 8
4168: NOT
4169: IFFALSE 4173
// exit ;
4171: GO 4637
// if in_unit then
4173: LD_VAR 0 11
4177: IFFALSE 4201
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4179: LD_ADDR_VAR 0 10
4183: PUSH
4184: LD_VAR 0 8
4188: PPUSH
4189: LD_VAR 0 11
4193: PPUSH
4194: CALL_OW 74
4198: ST_TO_ADDR
4199: GO 4221
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4201: LD_ADDR_VAR 0 10
4205: PUSH
4206: LD_VAR 0 8
4210: PPUSH
4211: LD_VAR 0 1
4215: PPUSH
4216: CALL_OW 74
4220: ST_TO_ADDR
// if not enemy then
4221: LD_VAR 0 10
4225: NOT
4226: IFFALSE 4230
// exit ;
4228: GO 4637
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4230: LD_VAR 0 11
4234: IFFALSE 4256
4236: PUSH
4237: LD_VAR 0 11
4241: PPUSH
4242: LD_VAR 0 10
4246: PPUSH
4247: CALL_OW 296
4251: PUSH
4252: LD_INT 13
4254: GREATER
4255: AND
4256: IFTRUE 4278
4258: PUSH
4259: LD_VAR 0 1
4263: PPUSH
4264: LD_VAR 0 10
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 12
4276: GREATER
4277: OR
4278: IFFALSE 4282
// exit ;
4280: GO 4637
// missile := [ 1 ] ;
4282: LD_ADDR_VAR 0 14
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4293: LD_VAR 0 9
4297: PPUSH
4298: LD_VAR 0 12
4302: PPUSH
4303: CALL_OW 325
4307: IFFALSE 4336
// missile := Replace ( missile , missile + 1 , 2 ) ;
4309: LD_ADDR_VAR 0 14
4313: PUSH
4314: LD_VAR 0 14
4318: PPUSH
4319: LD_VAR 0 14
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_INT 2
4330: PPUSH
4331: CALL_OW 1
4335: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4336: LD_VAR 0 9
4340: PPUSH
4341: LD_VAR 0 13
4345: PPUSH
4346: CALL_OW 325
4350: IFFALSE 4374
4352: PUSH
4353: LD_VAR 0 10
4357: PPUSH
4358: CALL_OW 255
4362: PPUSH
4363: LD_VAR 0 13
4367: PPUSH
4368: CALL_OW 325
4372: NOT
4373: AND
4374: IFFALSE 4403
// missile := Replace ( missile , missile + 1 , 3 ) ;
4376: LD_ADDR_VAR 0 14
4380: PUSH
4381: LD_VAR 0 14
4385: PPUSH
4386: LD_VAR 0 14
4390: PUSH
4391: LD_INT 1
4393: PLUS
4394: PPUSH
4395: LD_INT 3
4397: PPUSH
4398: CALL_OW 1
4402: ST_TO_ADDR
// if missile < 2 then
4403: LD_VAR 0 14
4407: PUSH
4408: LD_INT 2
4410: LESS
4411: IFFALSE 4415
// exit ;
4413: GO 4637
// x := GetX ( enemy ) ;
4415: LD_ADDR_VAR 0 4
4419: PUSH
4420: LD_VAR 0 10
4424: PPUSH
4425: CALL_OW 250
4429: ST_TO_ADDR
// y := GetY ( enemy ) ;
4430: LD_ADDR_VAR 0 5
4434: PUSH
4435: LD_VAR 0 10
4439: PPUSH
4440: CALL_OW 251
4444: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4445: LD_ADDR_VAR 0 6
4449: PUSH
4450: LD_VAR 0 4
4454: PUSH
4455: LD_INT 1
4457: NEG
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: CALL_OW 12
4466: PLUS
4467: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4468: LD_ADDR_VAR 0 7
4472: PUSH
4473: LD_VAR 0 5
4477: PUSH
4478: LD_INT 1
4480: NEG
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 12
4489: PLUS
4490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4491: LD_VAR 0 6
4495: PPUSH
4496: LD_VAR 0 7
4500: PPUSH
4501: CALL_OW 488
4505: NOT
4506: IFFALSE 4528
// begin _x := x ;
4508: LD_ADDR_VAR 0 6
4512: PUSH
4513: LD_VAR 0 4
4517: ST_TO_ADDR
// _y := y ;
4518: LD_ADDR_VAR 0 7
4522: PUSH
4523: LD_VAR 0 5
4527: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_VAR 0 14
4540: PPUSH
4541: CALL_OW 12
4545: ST_TO_ADDR
// case i of 1 :
4546: LD_VAR 0 3
4550: PUSH
4551: LD_INT 1
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4576
4559: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4560: LD_VAR 0 1
4564: PPUSH
4565: LD_VAR 0 10
4569: PPUSH
4570: CALL_OW 115
4574: GO 4637
4576: LD_INT 2
4578: DOUBLE
4579: EQUAL
4580: IFTRUE 4584
4582: GO 4606
4584: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4585: LD_VAR 0 1
4589: PPUSH
4590: LD_VAR 0 6
4594: PPUSH
4595: LD_VAR 0 7
4599: PPUSH
4600: CALL_OW 153
4604: GO 4637
4606: LD_INT 3
4608: DOUBLE
4609: EQUAL
4610: IFTRUE 4614
4612: GO 4636
4614: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4615: LD_VAR 0 1
4619: PPUSH
4620: LD_VAR 0 6
4624: PPUSH
4625: LD_VAR 0 7
4629: PPUSH
4630: CALL_OW 154
4634: GO 4637
4636: POP
// end ;
4637: LD_VAR 0 2
4641: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
// if not unit or not building then
4650: LD_VAR 0 1
4654: NOT
4655: IFTRUE 4664
4657: PUSH
4658: LD_VAR 0 2
4662: NOT
4663: OR
4664: IFFALSE 4668
// exit ;
4666: GO 4826
// x := GetX ( building ) ;
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: LD_VAR 0 2
4677: PPUSH
4678: CALL_OW 250
4682: ST_TO_ADDR
// y := GetY ( building ) ;
4683: LD_ADDR_VAR 0 6
4687: PUSH
4688: LD_VAR 0 2
4692: PPUSH
4693: CALL_OW 251
4697: ST_TO_ADDR
// for i := 0 to 5 do
4698: LD_ADDR_VAR 0 4
4702: PUSH
4703: DOUBLE
4704: LD_INT 0
4706: DEC
4707: ST_TO_ADDR
4708: LD_INT 5
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4824
// begin _x := ShiftX ( x , i , 3 ) ;
4714: LD_ADDR_VAR 0 7
4718: PUSH
4719: LD_VAR 0 5
4723: PPUSH
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_INT 3
4731: PPUSH
4732: CALL_OW 272
4736: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4737: LD_ADDR_VAR 0 8
4741: PUSH
4742: LD_VAR 0 6
4746: PPUSH
4747: LD_VAR 0 4
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: CALL_OW 273
4759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4760: LD_VAR 0 7
4764: PPUSH
4765: LD_VAR 0 8
4769: PPUSH
4770: CALL_OW 488
4774: NOT
4775: IFFALSE 4779
// continue ;
4777: GO 4711
// if HexInfo ( _x , _y ) = 0 then
4779: LD_VAR 0 7
4783: PPUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: CALL_OW 428
4793: PUSH
4794: LD_INT 0
4796: EQUAL
4797: IFFALSE 4822
// begin ComMoveXY ( unit , _x , _y ) ;
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_VAR 0 7
4808: PPUSH
4809: LD_VAR 0 8
4813: PPUSH
4814: CALL_OW 111
// exit ;
4818: POP
4819: POP
4820: GO 4826
// end ; end ;
4822: GO 4711
4824: POP
4825: POP
// end ;
4826: LD_VAR 0 3
4830: RET
// export function ScanBase ( side , base_area ) ; begin
4831: LD_INT 0
4833: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 81
4846: PUSH
4847: LD_VAR 0 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PPUSH
4856: CALL_OW 70
4860: ST_TO_ADDR
// end ;
4861: LD_VAR 0 3
4865: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
4871: PPUSH
// result := false ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// side := GetSide ( unit ) ;
4880: LD_ADDR_VAR 0 3
4884: PUSH
4885: LD_VAR 0 1
4889: PPUSH
4890: CALL_OW 255
4894: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4895: LD_ADDR_VAR 0 4
4899: PUSH
4900: LD_VAR 0 1
4904: PPUSH
4905: CALL_OW 248
4909: ST_TO_ADDR
// case nat of 1 :
4910: LD_VAR 0 4
4914: PUSH
4915: LD_INT 1
4917: DOUBLE
4918: EQUAL
4919: IFTRUE 4923
4921: GO 4934
4923: POP
// tech := tech_lassight ; 2 :
4924: LD_ADDR_VAR 0 5
4928: PUSH
4929: LD_INT 12
4931: ST_TO_ADDR
4932: GO 4973
4934: LD_INT 2
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4942
4940: GO 4953
4942: POP
// tech := tech_mortar ; 3 :
4943: LD_ADDR_VAR 0 5
4947: PUSH
4948: LD_INT 41
4950: ST_TO_ADDR
4951: GO 4973
4953: LD_INT 3
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4972
4961: POP
// tech := tech_bazooka ; end ;
4962: LD_ADDR_VAR 0 5
4966: PUSH
4967: LD_INT 44
4969: ST_TO_ADDR
4970: GO 4973
4972: POP
// if Researched ( side , tech ) then
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_VAR 0 5
4982: PPUSH
4983: CALL_OW 325
4987: IFFALSE 5014
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4989: LD_ADDR_VAR 0 2
4993: PUSH
4994: LD_INT 5
4996: PUSH
4997: LD_INT 8
4999: PUSH
5000: LD_INT 9
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: LD_VAR 0 4
5012: ARRAY
5013: ST_TO_ADDR
// end ;
5014: LD_VAR 0 2
5018: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
5023: PPUSH
// if not mines then
5024: LD_VAR 0 2
5028: NOT
5029: IFFALSE 5033
// exit ;
5031: GO 5177
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5033: LD_ADDR_VAR 0 5
5037: PUSH
5038: LD_INT 81
5040: PUSH
5041: LD_VAR 0 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 21
5055: PUSH
5056: LD_INT 3
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: ST_TO_ADDR
// for i in mines do
5076: LD_ADDR_VAR 0 4
5080: PUSH
5081: LD_VAR 0 2
5085: PUSH
5086: FOR_IN
5087: IFFALSE 5175
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5089: LD_VAR 0 4
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PPUSH
5098: LD_VAR 0 4
5102: PUSH
5103: LD_INT 2
5105: ARRAY
5106: PPUSH
5107: CALL_OW 458
5111: NOT
5112: IFFALSE 5116
// continue ;
5114: GO 5086
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5116: LD_VAR 0 4
5120: PUSH
5121: LD_INT 1
5123: ARRAY
5124: PPUSH
5125: LD_VAR 0 4
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: CALL_OW 428
5138: PUSH
5139: LD_VAR 0 5
5143: IN
5144: IFFALSE 5173
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5146: LD_VAR 0 4
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 4
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: LD_VAR 0 1
5168: PPUSH
5169: CALL_OW 456
// end ;
5173: GO 5086
5175: POP
5176: POP
// end ;
5177: LD_VAR 0 3
5181: RET
// export function Count ( array ) ; begin
5182: LD_INT 0
5184: PPUSH
// result := array + 0 ;
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: LD_VAR 0 1
5194: PUSH
5195: LD_INT 0
5197: PLUS
5198: ST_TO_ADDR
// end ;
5199: LD_VAR 0 2
5203: RET
// export function IsEmpty ( building ) ; begin
5204: LD_INT 0
5206: PPUSH
// if not building then
5207: LD_VAR 0 1
5211: NOT
5212: IFFALSE 5216
// exit ;
5214: GO 5259
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5216: LD_ADDR_VAR 0 2
5220: PUSH
5221: LD_VAR 0 1
5225: PUSH
5226: LD_INT 22
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: CALL_OW 255
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 58
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PPUSH
5253: CALL_OW 69
5257: IN
5258: ST_TO_ADDR
// end ;
5259: LD_VAR 0 2
5263: RET
// export function IsNotFull ( building ) ; var places ; begin
5264: LD_INT 0
5266: PPUSH
5267: PPUSH
// if not building then
5268: LD_VAR 0 1
5272: NOT
5273: IFFALSE 5277
// exit ;
5275: GO 5305
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_VAR 0 1
5286: PPUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 62
5292: PUSH
5293: EMPTY
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 72
5304: ST_TO_ADDR
// end ;
5305: LD_VAR 0 2
5309: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5310: LD_INT 0
5312: PPUSH
5313: PPUSH
5314: PPUSH
5315: PPUSH
// tmp := [ ] ;
5316: LD_ADDR_VAR 0 3
5320: PUSH
5321: EMPTY
5322: ST_TO_ADDR
// list := [ ] ;
5323: LD_ADDR_VAR 0 5
5327: PUSH
5328: EMPTY
5329: ST_TO_ADDR
// for i = 16 to 25 do
5330: LD_ADDR_VAR 0 4
5334: PUSH
5335: DOUBLE
5336: LD_INT 16
5338: DEC
5339: ST_TO_ADDR
5340: LD_INT 25
5342: PUSH
5343: FOR_TO
5344: IFFALSE 5417
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_VAR 0 3
5355: PUSH
5356: LD_INT 22
5358: PUSH
5359: LD_VAR 0 1
5363: PPUSH
5364: CALL_OW 255
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 91
5375: PUSH
5376: LD_VAR 0 1
5380: PUSH
5381: LD_INT 6
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: PUSH
5389: LD_INT 30
5391: PUSH
5392: LD_VAR 0 4
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: PPUSH
5409: CALL_OW 69
5413: ADD
5414: ST_TO_ADDR
5415: GO 5343
5417: POP
5418: POP
// for i = 1 to tmp do
5419: LD_ADDR_VAR 0 4
5423: PUSH
5424: DOUBLE
5425: LD_INT 1
5427: DEC
5428: ST_TO_ADDR
5429: LD_VAR 0 3
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5523
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5437: LD_ADDR_VAR 0 5
5441: PUSH
5442: LD_VAR 0 5
5446: PUSH
5447: LD_VAR 0 3
5451: PUSH
5452: LD_VAR 0 4
5456: ARRAY
5457: PPUSH
5458: CALL_OW 266
5462: PUSH
5463: LD_VAR 0 3
5467: PUSH
5468: LD_VAR 0 4
5472: ARRAY
5473: PPUSH
5474: CALL_OW 250
5478: PUSH
5479: LD_VAR 0 3
5483: PUSH
5484: LD_VAR 0 4
5488: ARRAY
5489: PPUSH
5490: CALL_OW 251
5494: PUSH
5495: LD_VAR 0 3
5499: PUSH
5500: LD_VAR 0 4
5504: ARRAY
5505: PPUSH
5506: CALL_OW 254
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: PUSH
5517: EMPTY
5518: LIST
5519: ADD
5520: ST_TO_ADDR
5521: GO 5434
5523: POP
5524: POP
// result := list ;
5525: LD_ADDR_VAR 0 2
5529: PUSH
5530: LD_VAR 0 5
5534: ST_TO_ADDR
// end ;
5535: LD_VAR 0 2
5539: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
// if not factory then
5549: LD_VAR 0 1
5553: NOT
5554: IFFALSE 5558
// exit ;
5556: GO 6161
// if control = control_apeman then
5558: LD_VAR 0 4
5562: PUSH
5563: LD_INT 5
5565: EQUAL
5566: IFFALSE 5675
// begin tmp := UnitsInside ( factory ) ;
5568: LD_ADDR_VAR 0 8
5572: PUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: CALL_OW 313
5582: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5583: LD_VAR 0 8
5587: PPUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 12
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PPUSH
5598: CALL_OW 72
5602: NOT
5603: IFFALSE 5613
// control := control_manual ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 1
5612: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5613: LD_ADDR_VAR 0 8
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL 5310 0 1
5627: ST_TO_ADDR
// if tmp then
5628: LD_VAR 0 8
5632: IFFALSE 5675
// begin for i in tmp do
5634: LD_ADDR_VAR 0 7
5638: PUSH
5639: LD_VAR 0 8
5643: PUSH
5644: FOR_IN
5645: IFFALSE 5673
// if i [ 1 ] = b_ext_radio then
5647: LD_VAR 0 7
5651: PUSH
5652: LD_INT 1
5654: ARRAY
5655: PUSH
5656: LD_INT 22
5658: EQUAL
5659: IFFALSE 5671
// begin control := control_remote ;
5661: LD_ADDR_VAR 0 4
5665: PUSH
5666: LD_INT 2
5668: ST_TO_ADDR
// break ;
5669: GO 5673
// end ;
5671: GO 5644
5673: POP
5674: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5675: LD_VAR 0 1
5679: PPUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 5
5699: PPUSH
5700: CALL_OW 448
5704: IFFALSE 5739
// begin result := [ chassis , engine , control , weapon ] ;
5706: LD_ADDR_VAR 0 6
5710: PUSH
5711: LD_VAR 0 2
5715: PUSH
5716: LD_VAR 0 3
5720: PUSH
5721: LD_VAR 0 4
5725: PUSH
5726: LD_VAR 0 5
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: ST_TO_ADDR
// exit ;
5737: GO 6161
// end ; _chassis := AvailableChassisList ( factory ) ;
5739: LD_ADDR_VAR 0 9
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 475
5753: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5754: LD_ADDR_VAR 0 11
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: CALL_OW 476
5768: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5769: LD_ADDR_VAR 0 12
5773: PUSH
5774: LD_VAR 0 1
5778: PPUSH
5779: CALL_OW 477
5783: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5784: LD_ADDR_VAR 0 10
5788: PUSH
5789: LD_VAR 0 1
5793: PPUSH
5794: CALL_OW 478
5798: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5799: LD_VAR 0 9
5803: NOT
5804: IFTRUE 5813
5806: PUSH
5807: LD_VAR 0 11
5811: NOT
5812: OR
5813: IFTRUE 5822
5815: PUSH
5816: LD_VAR 0 12
5820: NOT
5821: OR
5822: IFTRUE 5831
5824: PUSH
5825: LD_VAR 0 10
5829: NOT
5830: OR
5831: IFFALSE 5866
// begin result := [ chassis , engine , control , weapon ] ;
5833: LD_ADDR_VAR 0 6
5837: PUSH
5838: LD_VAR 0 2
5842: PUSH
5843: LD_VAR 0 3
5847: PUSH
5848: LD_VAR 0 4
5852: PUSH
5853: LD_VAR 0 5
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: ST_TO_ADDR
// exit ;
5864: GO 6161
// end ; if not chassis in _chassis then
5866: LD_VAR 0 2
5870: PUSH
5871: LD_VAR 0 9
5875: IN
5876: NOT
5877: IFFALSE 5903
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5879: LD_ADDR_VAR 0 2
5883: PUSH
5884: LD_VAR 0 9
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 9
5896: PPUSH
5897: CALL_OW 12
5901: ARRAY
5902: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 3
5912: PPUSH
5913: CALL 6166 0 2
5917: NOT
5918: IFFALSE 5979
// repeat engine := _engine [ 1 ] ;
5920: LD_ADDR_VAR 0 3
5924: PUSH
5925: LD_VAR 0 11
5929: PUSH
5930: LD_INT 1
5932: ARRAY
5933: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_VAR 0 11
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: CALL_OW 3
5951: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5952: LD_VAR 0 2
5956: PPUSH
5957: LD_VAR 0 3
5961: PPUSH
5962: CALL 6166 0 2
5966: IFTRUE 5977
5968: PUSH
5969: LD_VAR 0 11
5973: PUSH
5974: EMPTY
5975: EQUAL
5976: OR
5977: IFFALSE 5920
// if not control in _control then
5979: LD_VAR 0 4
5983: PUSH
5984: LD_VAR 0 12
5988: IN
5989: NOT
5990: IFFALSE 6016
// control := _control [ rand ( 1 , _control ) ] ;
5992: LD_ADDR_VAR 0 4
5996: PUSH
5997: LD_VAR 0 12
6001: PUSH
6002: LD_INT 1
6004: PPUSH
6005: LD_VAR 0 12
6009: PPUSH
6010: CALL_OW 12
6014: ARRAY
6015: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6016: LD_VAR 0 2
6020: PPUSH
6021: LD_VAR 0 5
6025: PPUSH
6026: CALL 6388 0 2
6030: NOT
6031: IFFALSE 6092
// repeat weapon := _weapon [ 1 ] ;
6033: LD_ADDR_VAR 0 5
6037: PUSH
6038: LD_VAR 0 10
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6047: LD_ADDR_VAR 0 10
6051: PUSH
6052: LD_VAR 0 10
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6065: LD_VAR 0 2
6069: PPUSH
6070: LD_VAR 0 5
6074: PPUSH
6075: CALL 6388 0 2
6079: IFTRUE 6090
6081: PUSH
6082: LD_VAR 0 10
6086: PUSH
6087: EMPTY
6088: EQUAL
6089: OR
6090: IFFALSE 6033
// result := [ ] ;
6092: LD_ADDR_VAR 0 6
6096: PUSH
6097: EMPTY
6098: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6099: LD_VAR 0 1
6103: PPUSH
6104: LD_VAR 0 2
6108: PPUSH
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_VAR 0 4
6118: PPUSH
6119: LD_VAR 0 5
6123: PPUSH
6124: CALL_OW 448
6128: IFFALSE 6161
// result := [ chassis , engine , control , weapon ] ;
6130: LD_ADDR_VAR 0 6
6134: PUSH
6135: LD_VAR 0 2
6139: PUSH
6140: LD_VAR 0 3
6144: PUSH
6145: LD_VAR 0 4
6149: PUSH
6150: LD_VAR 0 5
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: ST_TO_ADDR
// end ;
6161: LD_VAR 0 6
6165: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6166: LD_INT 0
6168: PPUSH
// if not chassis or not engine then
6169: LD_VAR 0 1
6173: NOT
6174: IFTRUE 6183
6176: PUSH
6177: LD_VAR 0 2
6181: NOT
6182: OR
6183: IFFALSE 6187
// exit ;
6185: GO 6383
// case engine of engine_solar :
6187: LD_VAR 0 2
6191: PUSH
6192: LD_INT 2
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6238
6200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: LD_INT 11
6208: PUSH
6209: LD_INT 12
6211: PUSH
6212: LD_INT 13
6214: PUSH
6215: LD_INT 14
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: ST_TO_ADDR
6236: GO 6367
6238: LD_INT 1
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6308
6246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: LD_INT 11
6254: PUSH
6255: LD_INT 12
6257: PUSH
6258: LD_INT 13
6260: PUSH
6261: LD_INT 14
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: LD_INT 3
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 21
6281: PUSH
6282: LD_INT 23
6284: PUSH
6285: LD_INT 22
6287: PUSH
6288: LD_INT 24
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
6306: GO 6367
6308: LD_INT 3
6310: DOUBLE
6311: EQUAL
6312: IFTRUE 6316
6314: GO 6366
6316: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6317: LD_ADDR_VAR 0 3
6321: PUSH
6322: LD_INT 13
6324: PUSH
6325: LD_INT 14
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 4
6336: PUSH
6337: LD_INT 5
6339: PUSH
6340: LD_INT 21
6342: PUSH
6343: LD_INT 22
6345: PUSH
6346: LD_INT 23
6348: PUSH
6349: LD_INT 24
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: ST_TO_ADDR
6364: GO 6367
6366: POP
// result := ( chassis in result ) ;
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_VAR 0 1
6376: PUSH
6377: LD_VAR 0 3
6381: IN
6382: ST_TO_ADDR
// end ;
6383: LD_VAR 0 3
6387: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6388: LD_INT 0
6390: PPUSH
// if not chassis or not weapon then
6391: LD_VAR 0 1
6395: NOT
6396: IFTRUE 6405
6398: PUSH
6399: LD_VAR 0 2
6403: NOT
6404: OR
6405: IFFALSE 6409
// exit ;
6407: GO 7503
// case weapon of us_machine_gun :
6409: LD_VAR 0 2
6413: PUSH
6414: LD_INT 2
6416: DOUBLE
6417: EQUAL
6418: IFTRUE 6422
6420: GO 6452
6422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
6450: GO 7487
6452: LD_INT 3
6454: DOUBLE
6455: EQUAL
6456: IFTRUE 6460
6458: GO 6490
6460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6461: LD_ADDR_VAR 0 3
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: LD_INT 2
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 4
6477: PUSH
6478: LD_INT 5
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: ST_TO_ADDR
6488: GO 7487
6490: LD_INT 11
6492: DOUBLE
6493: EQUAL
6494: IFTRUE 6498
6496: GO 6528
6498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6499: LD_ADDR_VAR 0 3
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: LD_INT 2
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 4
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: ST_TO_ADDR
6526: GO 7487
6528: LD_INT 4
6530: DOUBLE
6531: EQUAL
6532: IFTRUE 6536
6534: GO 6562
6536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 3
6547: PUSH
6548: LD_INT 4
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: ST_TO_ADDR
6560: GO 7487
6562: LD_INT 5
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6596
6570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
6594: GO 7487
6596: LD_INT 9
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6630
6604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6605: LD_ADDR_VAR 0 3
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7487
6630: LD_INT 7
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6664
6638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 7487
6664: LD_INT 12
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6698
6672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: LD_INT 5
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: ST_TO_ADDR
6696: GO 7487
6698: LD_INT 13
6700: DOUBLE
6701: EQUAL
6702: IFTRUE 6706
6704: GO 6732
6706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 3
6717: PUSH
6718: LD_INT 4
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: ST_TO_ADDR
6730: GO 7487
6732: LD_INT 14
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6740
6738: GO 6758
6740: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: LD_INT 4
6748: PUSH
6749: LD_INT 5
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: ST_TO_ADDR
6756: GO 7487
6758: LD_INT 6
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 6784
6766: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6767: LD_ADDR_VAR 0 3
6771: PUSH
6772: LD_INT 4
6774: PUSH
6775: LD_INT 5
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: ST_TO_ADDR
6782: GO 7487
6784: LD_INT 10
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6810
6792: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_INT 4
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: ST_TO_ADDR
6808: GO 7487
6810: LD_INT 22
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6844
6818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_INT 11
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 13
6832: PUSH
6833: LD_INT 14
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: ST_TO_ADDR
6842: GO 7487
6844: LD_INT 23
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6878
6852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6853: LD_ADDR_VAR 0 3
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: ST_TO_ADDR
6876: GO 7487
6878: LD_INT 24
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6912
6886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 11
6894: PUSH
6895: LD_INT 12
6897: PUSH
6898: LD_INT 13
6900: PUSH
6901: LD_INT 14
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: ST_TO_ADDR
6910: GO 7487
6912: LD_INT 30
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6946
6920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_INT 11
6928: PUSH
6929: LD_INT 12
6931: PUSH
6932: LD_INT 13
6934: PUSH
6935: LD_INT 14
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
6944: GO 7487
6946: LD_INT 25
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 6972
6954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6955: LD_ADDR_VAR 0 3
6959: PUSH
6960: LD_INT 13
6962: PUSH
6963: LD_INT 14
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: ST_TO_ADDR
6970: GO 7487
6972: LD_INT 27
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 6998
6980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6981: LD_ADDR_VAR 0 3
6985: PUSH
6986: LD_INT 13
6988: PUSH
6989: LD_INT 14
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: ST_TO_ADDR
6996: GO 7487
6998: LD_INT 92
7000: DOUBLE
7001: EQUAL
7002: IFTRUE 7006
7004: GO 7032
7006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7007: LD_ADDR_VAR 0 3
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 13
7020: PUSH
7021: LD_INT 14
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: ST_TO_ADDR
7030: GO 7487
7032: LD_INT 28
7034: DOUBLE
7035: EQUAL
7036: IFTRUE 7040
7038: GO 7058
7040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7041: LD_ADDR_VAR 0 3
7045: PUSH
7046: LD_INT 13
7048: PUSH
7049: LD_INT 14
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: ST_TO_ADDR
7056: GO 7487
7058: LD_INT 29
7060: DOUBLE
7061: EQUAL
7062: IFTRUE 7066
7064: GO 7084
7066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7067: LD_ADDR_VAR 0 3
7071: PUSH
7072: LD_INT 13
7074: PUSH
7075: LD_INT 14
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 7487
7084: LD_INT 31
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7110
7092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 13
7100: PUSH
7101: LD_INT 14
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: ST_TO_ADDR
7108: GO 7487
7110: LD_INT 26
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7136
7118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 13
7126: PUSH
7127: LD_INT 14
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: ST_TO_ADDR
7134: GO 7487
7136: LD_INT 42
7138: DOUBLE
7139: EQUAL
7140: IFTRUE 7144
7142: GO 7170
7144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 23
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: ST_TO_ADDR
7168: GO 7487
7170: LD_INT 43
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7204
7178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 21
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 23
7192: PUSH
7193: LD_INT 24
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7487
7204: LD_INT 44
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7238
7212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 21
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 23
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: ST_TO_ADDR
7236: GO 7487
7238: LD_INT 45
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7272
7246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 21
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: ST_TO_ADDR
7270: GO 7487
7272: LD_INT 49
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7306
7280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: ST_TO_ADDR
7304: GO 7487
7306: LD_INT 51
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7340
7314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 22
7325: PUSH
7326: LD_INT 23
7328: PUSH
7329: LD_INT 24
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 7487
7340: LD_INT 52
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7374
7348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 21
7356: PUSH
7357: LD_INT 22
7359: PUSH
7360: LD_INT 23
7362: PUSH
7363: LD_INT 24
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: ST_TO_ADDR
7372: GO 7487
7374: LD_INT 53
7376: DOUBLE
7377: EQUAL
7378: IFTRUE 7382
7380: GO 7400
7382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_INT 23
7390: PUSH
7391: LD_INT 24
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 7487
7400: LD_INT 46
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7426
7408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 24
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: ST_TO_ADDR
7424: GO 7487
7426: LD_INT 47
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7452
7434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7435: LD_ADDR_VAR 0 3
7439: PUSH
7440: LD_INT 23
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: ST_TO_ADDR
7450: GO 7487
7452: LD_INT 98
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7460
7458: GO 7486
7460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7461: LD_ADDR_VAR 0 3
7465: PUSH
7466: LD_INT 21
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_INT 23
7474: PUSH
7475: LD_INT 24
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 7487
7486: POP
// result := ( chassis in result ) ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_VAR 0 1
7496: PUSH
7497: LD_VAR 0 3
7501: IN
7502: ST_TO_ADDR
// end ;
7503: LD_VAR 0 3
7507: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
7512: PPUSH
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
// result := array ;
7517: LD_ADDR_VAR 0 5
7521: PUSH
7522: LD_VAR 0 1
7526: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7527: LD_VAR 0 1
7531: NOT
7532: IFTRUE 7541
7534: PUSH
7535: LD_VAR 0 2
7539: NOT
7540: OR
7541: IFTRUE 7550
7543: PUSH
7544: LD_VAR 0 3
7548: NOT
7549: OR
7550: IFTRUE 7564
7552: PUSH
7553: LD_VAR 0 2
7557: PUSH
7558: LD_VAR 0 1
7562: GREATER
7563: OR
7564: IFTRUE 7578
7566: PUSH
7567: LD_VAR 0 3
7571: PUSH
7572: LD_VAR 0 1
7576: GREATER
7577: OR
7578: IFFALSE 7582
// exit ;
7580: GO 7878
// if direction then
7582: LD_VAR 0 4
7586: IFFALSE 7650
// begin d := 1 ;
7588: LD_ADDR_VAR 0 9
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// if i_from > i_to then
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 3
7605: GREATER
7606: IFFALSE 7632
// length := ( array - i_from ) + i_to else
7608: LD_ADDR_VAR 0 11
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_VAR 0 2
7622: MINUS
7623: PUSH
7624: LD_VAR 0 3
7628: PLUS
7629: ST_TO_ADDR
7630: GO 7648
// length := i_to - i_from ;
7632: LD_ADDR_VAR 0 11
7636: PUSH
7637: LD_VAR 0 3
7641: PUSH
7642: LD_VAR 0 2
7646: MINUS
7647: ST_TO_ADDR
// end else
7648: GO 7711
// begin d := - 1 ;
7650: LD_ADDR_VAR 0 9
7654: PUSH
7655: LD_INT 1
7657: NEG
7658: ST_TO_ADDR
// if i_from > i_to then
7659: LD_VAR 0 2
7663: PUSH
7664: LD_VAR 0 3
7668: GREATER
7669: IFFALSE 7689
// length := i_from - i_to else
7671: LD_ADDR_VAR 0 11
7675: PUSH
7676: LD_VAR 0 2
7680: PUSH
7681: LD_VAR 0 3
7685: MINUS
7686: ST_TO_ADDR
7687: GO 7711
// length := ( array - i_to ) + i_from ;
7689: LD_ADDR_VAR 0 11
7693: PUSH
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 3
7703: MINUS
7704: PUSH
7705: LD_VAR 0 2
7709: PLUS
7710: ST_TO_ADDR
// end ; if not length then
7711: LD_VAR 0 11
7715: NOT
7716: IFFALSE 7720
// exit ;
7718: GO 7878
// tmp := array ;
7720: LD_ADDR_VAR 0 10
7724: PUSH
7725: LD_VAR 0 1
7729: ST_TO_ADDR
// for i = 1 to length do
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: DOUBLE
7736: LD_INT 1
7738: DEC
7739: ST_TO_ADDR
7740: LD_VAR 0 11
7744: PUSH
7745: FOR_TO
7746: IFFALSE 7866
// begin for j = 1 to array do
7748: LD_ADDR_VAR 0 7
7752: PUSH
7753: DOUBLE
7754: LD_INT 1
7756: DEC
7757: ST_TO_ADDR
7758: LD_VAR 0 1
7762: PUSH
7763: FOR_TO
7764: IFFALSE 7852
// begin k := j + d ;
7766: LD_ADDR_VAR 0 8
7770: PUSH
7771: LD_VAR 0 7
7775: PUSH
7776: LD_VAR 0 9
7780: PLUS
7781: ST_TO_ADDR
// if k > array then
7782: LD_VAR 0 8
7786: PUSH
7787: LD_VAR 0 1
7791: GREATER
7792: IFFALSE 7802
// k := 1 ;
7794: LD_ADDR_VAR 0 8
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if not k then
7802: LD_VAR 0 8
7806: NOT
7807: IFFALSE 7819
// k := array ;
7809: LD_ADDR_VAR 0 8
7813: PUSH
7814: LD_VAR 0 1
7818: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7819: LD_ADDR_VAR 0 10
7823: PUSH
7824: LD_VAR 0 10
7828: PPUSH
7829: LD_VAR 0 8
7833: PPUSH
7834: LD_VAR 0 1
7838: PUSH
7839: LD_VAR 0 7
7843: ARRAY
7844: PPUSH
7845: CALL_OW 1
7849: ST_TO_ADDR
// end ;
7850: GO 7763
7852: POP
7853: POP
// array := tmp ;
7854: LD_ADDR_VAR 0 1
7858: PUSH
7859: LD_VAR 0 10
7863: ST_TO_ADDR
// end ;
7864: GO 7745
7866: POP
7867: POP
// result := array ;
7868: LD_ADDR_VAR 0 5
7872: PUSH
7873: LD_VAR 0 1
7877: ST_TO_ADDR
// end ;
7878: LD_VAR 0 5
7882: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7883: LD_INT 0
7885: PPUSH
7886: PPUSH
// result := 0 ;
7887: LD_ADDR_VAR 0 3
7891: PUSH
7892: LD_INT 0
7894: ST_TO_ADDR
// if not array or not value in array then
7895: LD_VAR 0 1
7899: NOT
7900: IFTRUE 7915
7902: PUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_VAR 0 1
7912: IN
7913: NOT
7914: OR
7915: IFFALSE 7919
// exit ;
7917: GO 7973
// for i = 1 to array do
7919: LD_ADDR_VAR 0 4
7923: PUSH
7924: DOUBLE
7925: LD_INT 1
7927: DEC
7928: ST_TO_ADDR
7929: LD_VAR 0 1
7933: PUSH
7934: FOR_TO
7935: IFFALSE 7971
// if value = array [ i ] then
7937: LD_VAR 0 2
7941: PUSH
7942: LD_VAR 0 1
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: EQUAL
7953: IFFALSE 7969
// begin result := i ;
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_VAR 0 4
7964: ST_TO_ADDR
// exit ;
7965: POP
7966: POP
7967: GO 7973
// end ;
7969: GO 7934
7971: POP
7972: POP
// end ;
7973: LD_VAR 0 3
7977: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7978: LD_INT 0
7980: PPUSH
// vc_chassis := chassis ;
7981: LD_ADDR_OWVAR 37
7985: PUSH
7986: LD_VAR 0 1
7990: ST_TO_ADDR
// vc_engine := engine ;
7991: LD_ADDR_OWVAR 39
7995: PUSH
7996: LD_VAR 0 2
8000: ST_TO_ADDR
// vc_control := control ;
8001: LD_ADDR_OWVAR 38
8005: PUSH
8006: LD_VAR 0 3
8010: ST_TO_ADDR
// vc_weapon := weapon ;
8011: LD_ADDR_OWVAR 40
8015: PUSH
8016: LD_VAR 0 4
8020: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8021: LD_ADDR_OWVAR 41
8025: PUSH
8026: LD_VAR 0 5
8030: ST_TO_ADDR
// end ;
8031: LD_VAR 0 6
8035: RET
// export function WantPlant ( unit ) ; var task ; begin
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
// result := false ;
8040: LD_ADDR_VAR 0 2
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8048: LD_ADDR_VAR 0 3
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: CALL_OW 437
8062: ST_TO_ADDR
// if task then
8063: LD_VAR 0 3
8067: IFFALSE 8095
// if task [ 1 ] [ 1 ] = p then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PUSH
8078: LD_INT 1
8080: ARRAY
8081: PUSH
8082: LD_STRING p
8084: EQUAL
8085: IFFALSE 8095
// result := true ;
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// end ;
8095: LD_VAR 0 2
8099: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8100: LD_INT 0
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
// if pos < 1 then
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 1
8113: LESS
8114: IFFALSE 8118
// exit ;
8116: GO 8421
// if pos = 1 then
8118: LD_VAR 0 2
8122: PUSH
8123: LD_INT 1
8125: EQUAL
8126: IFFALSE 8159
// result := Replace ( arr , pos [ 1 ] , value ) else
8128: LD_ADDR_VAR 0 4
8132: PUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_VAR 0 2
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: PPUSH
8147: LD_VAR 0 3
8151: PPUSH
8152: CALL_OW 1
8156: ST_TO_ADDR
8157: GO 8421
// begin tmp := arr ;
8159: LD_ADDR_VAR 0 6
8163: PUSH
8164: LD_VAR 0 1
8168: ST_TO_ADDR
// s_arr := [ tmp ] ;
8169: LD_ADDR_VAR 0 7
8173: PUSH
8174: LD_VAR 0 6
8178: PUSH
8179: EMPTY
8180: LIST
8181: ST_TO_ADDR
// for i = 1 to pos - 1 do
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_VAR 0 2
8196: PUSH
8197: LD_INT 1
8199: MINUS
8200: PUSH
8201: FOR_TO
8202: IFFALSE 8247
// begin tmp := tmp [ pos [ i ] ] ;
8204: LD_ADDR_VAR 0 6
8208: PUSH
8209: LD_VAR 0 6
8213: PUSH
8214: LD_VAR 0 2
8218: PUSH
8219: LD_VAR 0 5
8223: ARRAY
8224: ARRAY
8225: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8226: LD_ADDR_VAR 0 7
8230: PUSH
8231: LD_VAR 0 7
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: EMPTY
8242: LIST
8243: ADD
8244: ST_TO_ADDR
// end ;
8245: GO 8201
8247: POP
8248: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8249: LD_ADDR_VAR 0 6
8253: PUSH
8254: LD_VAR 0 6
8258: PPUSH
8259: LD_VAR 0 2
8263: PUSH
8264: LD_VAR 0 2
8268: ARRAY
8269: PPUSH
8270: LD_VAR 0 3
8274: PPUSH
8275: CALL_OW 1
8279: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8280: LD_ADDR_VAR 0 7
8284: PUSH
8285: LD_VAR 0 7
8289: PPUSH
8290: LD_VAR 0 7
8294: PPUSH
8295: LD_VAR 0 6
8299: PPUSH
8300: CALL_OW 1
8304: ST_TO_ADDR
// for i = s_arr downto 2 do
8305: LD_ADDR_VAR 0 5
8309: PUSH
8310: DOUBLE
8311: LD_VAR 0 7
8315: INC
8316: ST_TO_ADDR
8317: LD_INT 2
8319: PUSH
8320: FOR_DOWNTO
8321: IFFALSE 8405
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8323: LD_ADDR_VAR 0 6
8327: PUSH
8328: LD_VAR 0 7
8332: PUSH
8333: LD_VAR 0 5
8337: PUSH
8338: LD_INT 1
8340: MINUS
8341: ARRAY
8342: PPUSH
8343: LD_VAR 0 2
8347: PUSH
8348: LD_VAR 0 5
8352: PUSH
8353: LD_INT 1
8355: MINUS
8356: ARRAY
8357: PPUSH
8358: LD_VAR 0 7
8362: PUSH
8363: LD_VAR 0 5
8367: ARRAY
8368: PPUSH
8369: CALL_OW 1
8373: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8374: LD_ADDR_VAR 0 7
8378: PUSH
8379: LD_VAR 0 7
8383: PPUSH
8384: LD_VAR 0 5
8388: PUSH
8389: LD_INT 1
8391: MINUS
8392: PPUSH
8393: LD_VAR 0 6
8397: PPUSH
8398: CALL_OW 1
8402: ST_TO_ADDR
// end ;
8403: GO 8320
8405: POP
8406: POP
// result := s_arr [ 1 ] ;
8407: LD_ADDR_VAR 0 4
8411: PUSH
8412: LD_VAR 0 7
8416: PUSH
8417: LD_INT 1
8419: ARRAY
8420: ST_TO_ADDR
// end ; end ;
8421: LD_VAR 0 4
8425: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8426: LD_INT 0
8428: PPUSH
8429: PPUSH
// if not list then
8430: LD_VAR 0 1
8434: NOT
8435: IFFALSE 8439
// exit ;
8437: GO 8530
// i := list [ pos1 ] ;
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_VAR 0 2
8453: ARRAY
8454: ST_TO_ADDR
// if not i then
8455: LD_VAR 0 5
8459: NOT
8460: IFFALSE 8464
// exit ;
8462: GO 8530
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_VAR 0 1
8483: PUSH
8484: LD_VAR 0 3
8488: ARRAY
8489: PPUSH
8490: CALL_OW 1
8494: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_VAR 0 3
8509: PPUSH
8510: LD_VAR 0 5
8514: PPUSH
8515: CALL_OW 1
8519: ST_TO_ADDR
// result := list ;
8520: LD_ADDR_VAR 0 4
8524: PUSH
8525: LD_VAR 0 1
8529: ST_TO_ADDR
// end ;
8530: LD_VAR 0 4
8534: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8535: LD_INT 0
8537: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: LD_VAR 0 1
8547: PPUSH
8548: CALL_OW 250
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 251
8562: PPUSH
8563: LD_VAR 0 2
8567: PPUSH
8568: LD_VAR 0 3
8572: PPUSH
8573: LD_VAR 0 4
8577: PPUSH
8578: CALL 8960 0 5
8582: ST_TO_ADDR
// end ;
8583: LD_VAR 0 5
8587: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
8592: PPUSH
8593: PPUSH
// if not list or not unit then
8594: LD_VAR 0 2
8598: NOT
8599: IFTRUE 8608
8601: PUSH
8602: LD_VAR 0 1
8606: NOT
8607: OR
8608: IFFALSE 8612
// exit ;
8610: GO 8955
// result := [ ] ;
8612: LD_ADDR_VAR 0 5
8616: PUSH
8617: EMPTY
8618: ST_TO_ADDR
// for i in list do
8619: LD_ADDR_VAR 0 6
8623: PUSH
8624: LD_VAR 0 2
8628: PUSH
8629: FOR_IN
8630: IFFALSE 8848
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8632: LD_ADDR_VAR 0 8
8636: PUSH
8637: LD_VAR 0 1
8641: PPUSH
8642: LD_VAR 0 6
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: PPUSH
8651: LD_VAR 0 6
8655: PUSH
8656: LD_INT 2
8658: ARRAY
8659: PPUSH
8660: CALL_OW 297
8664: ST_TO_ADDR
// if not Count ( result ) then
8665: LD_VAR 0 5
8669: PPUSH
8670: CALL 5182 0 1
8674: NOT
8675: IFFALSE 8708
// begin result := Join ( result , [ i , tmp ] ) ;
8677: LD_ADDR_VAR 0 5
8681: PUSH
8682: LD_VAR 0 5
8686: PPUSH
8687: LD_VAR 0 6
8691: PUSH
8692: LD_VAR 0 8
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL 41158 0 2
8705: ST_TO_ADDR
// continue ;
8706: GO 8629
// end ; if result [ result ] [ 2 ] <= tmp then
8708: LD_VAR 0 5
8712: PUSH
8713: LD_VAR 0 5
8717: ARRAY
8718: PUSH
8719: LD_INT 2
8721: ARRAY
8722: PUSH
8723: LD_VAR 0 8
8727: LESSEQUAL
8728: IFFALSE 8761
// result := Join ( result , [ i , tmp ] ) else
8730: LD_ADDR_VAR 0 5
8734: PUSH
8735: LD_VAR 0 5
8739: PPUSH
8740: LD_VAR 0 6
8744: PUSH
8745: LD_VAR 0 8
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PPUSH
8754: CALL 41158 0 2
8758: ST_TO_ADDR
8759: GO 8846
// begin for j := 1 to Count ( result ) do
8761: LD_ADDR_VAR 0 7
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_VAR 0 5
8775: PPUSH
8776: CALL 5182 0 1
8780: PUSH
8781: FOR_TO
8782: IFFALSE 8844
// begin if tmp < result [ j ] [ 2 ] then
8784: LD_VAR 0 8
8788: PUSH
8789: LD_VAR 0 5
8793: PUSH
8794: LD_VAR 0 7
8798: ARRAY
8799: PUSH
8800: LD_INT 2
8802: ARRAY
8803: LESS
8804: IFFALSE 8842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8806: LD_ADDR_VAR 0 5
8810: PUSH
8811: LD_VAR 0 5
8815: PPUSH
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 6
8825: PUSH
8826: LD_VAR 0 8
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 2
8839: ST_TO_ADDR
// break ;
8840: GO 8844
// end ; end ;
8842: GO 8781
8844: POP
8845: POP
// end ; end ;
8846: GO 8629
8848: POP
8849: POP
// if result and not asc then
8850: LD_VAR 0 5
8854: IFFALSE 8863
8856: PUSH
8857: LD_VAR 0 3
8861: NOT
8862: AND
8863: IFFALSE 8880
// result := ReverseArray ( result ) ;
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_VAR 0 5
8874: PPUSH
8875: CALL 36238 0 1
8879: ST_TO_ADDR
// tmp := [ ] ;
8880: LD_ADDR_VAR 0 8
8884: PUSH
8885: EMPTY
8886: ST_TO_ADDR
// if mode then
8887: LD_VAR 0 4
8891: IFFALSE 8955
// begin for i := 1 to result do
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: DOUBLE
8899: LD_INT 1
8901: DEC
8902: ST_TO_ADDR
8903: LD_VAR 0 5
8907: PUSH
8908: FOR_TO
8909: IFFALSE 8943
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8911: LD_ADDR_VAR 0 8
8915: PUSH
8916: LD_VAR 0 8
8920: PPUSH
8921: LD_VAR 0 5
8925: PUSH
8926: LD_VAR 0 6
8930: ARRAY
8931: PUSH
8932: LD_INT 1
8934: ARRAY
8935: PPUSH
8936: CALL 41158 0 2
8940: ST_TO_ADDR
8941: GO 8908
8943: POP
8944: POP
// result := tmp ;
8945: LD_ADDR_VAR 0 5
8949: PUSH
8950: LD_VAR 0 8
8954: ST_TO_ADDR
// end ; end ;
8955: LD_VAR 0 5
8959: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8960: LD_INT 0
8962: PPUSH
8963: PPUSH
8964: PPUSH
8965: PPUSH
// if not list then
8966: LD_VAR 0 3
8970: NOT
8971: IFFALSE 8975
// exit ;
8973: GO 9365
// result := [ ] ;
8975: LD_ADDR_VAR 0 6
8979: PUSH
8980: EMPTY
8981: ST_TO_ADDR
// for i in list do
8982: LD_ADDR_VAR 0 7
8986: PUSH
8987: LD_VAR 0 3
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9195
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8995: LD_ADDR_VAR 0 9
8999: PUSH
9000: LD_VAR 0 7
9004: PPUSH
9005: LD_VAR 0 1
9009: PPUSH
9010: LD_VAR 0 2
9014: PPUSH
9015: CALL_OW 297
9019: ST_TO_ADDR
// if not result then
9020: LD_VAR 0 6
9024: NOT
9025: IFFALSE 9051
// result := [ [ i , tmp ] ] else
9027: LD_ADDR_VAR 0 6
9031: PUSH
9032: LD_VAR 0 7
9036: PUSH
9037: LD_VAR 0 9
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: ST_TO_ADDR
9049: GO 9193
// begin if result [ result ] [ 2 ] <= tmp then
9051: LD_VAR 0 6
9055: PUSH
9056: LD_VAR 0 6
9060: ARRAY
9061: PUSH
9062: LD_INT 2
9064: ARRAY
9065: PUSH
9066: LD_VAR 0 9
9070: LESSEQUAL
9071: IFFALSE 9113
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9073: LD_ADDR_VAR 0 6
9077: PUSH
9078: LD_VAR 0 6
9082: PPUSH
9083: LD_VAR 0 6
9087: PUSH
9088: LD_INT 1
9090: PLUS
9091: PPUSH
9092: LD_VAR 0 7
9096: PUSH
9097: LD_VAR 0 9
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 2
9110: ST_TO_ADDR
9111: GO 9193
// for j := 1 to result do
9113: LD_ADDR_VAR 0 8
9117: PUSH
9118: DOUBLE
9119: LD_INT 1
9121: DEC
9122: ST_TO_ADDR
9123: LD_VAR 0 6
9127: PUSH
9128: FOR_TO
9129: IFFALSE 9191
// begin if tmp < result [ j ] [ 2 ] then
9131: LD_VAR 0 9
9135: PUSH
9136: LD_VAR 0 6
9140: PUSH
9141: LD_VAR 0 8
9145: ARRAY
9146: PUSH
9147: LD_INT 2
9149: ARRAY
9150: LESS
9151: IFFALSE 9189
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9153: LD_ADDR_VAR 0 6
9157: PUSH
9158: LD_VAR 0 6
9162: PPUSH
9163: LD_VAR 0 8
9167: PPUSH
9168: LD_VAR 0 7
9172: PUSH
9173: LD_VAR 0 9
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 2
9186: ST_TO_ADDR
// break ;
9187: GO 9191
// end ; end ;
9189: GO 9128
9191: POP
9192: POP
// end ; end ;
9193: GO 8992
9195: POP
9196: POP
// if result and not asc then
9197: LD_VAR 0 6
9201: IFFALSE 9210
9203: PUSH
9204: LD_VAR 0 4
9208: NOT
9209: AND
9210: IFFALSE 9285
// begin tmp := result ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: LD_VAR 0 6
9221: ST_TO_ADDR
// for i = tmp downto 1 do
9222: LD_ADDR_VAR 0 7
9226: PUSH
9227: DOUBLE
9228: LD_VAR 0 9
9232: INC
9233: ST_TO_ADDR
9234: LD_INT 1
9236: PUSH
9237: FOR_DOWNTO
9238: IFFALSE 9283
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9240: LD_ADDR_VAR 0 6
9244: PUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: LD_VAR 0 9
9254: PUSH
9255: LD_VAR 0 7
9259: MINUS
9260: PUSH
9261: LD_INT 1
9263: PLUS
9264: PPUSH
9265: LD_VAR 0 9
9269: PUSH
9270: LD_VAR 0 7
9274: ARRAY
9275: PPUSH
9276: CALL_OW 1
9280: ST_TO_ADDR
9281: GO 9237
9283: POP
9284: POP
// end ; tmp := [ ] ;
9285: LD_ADDR_VAR 0 9
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// if mode then
9292: LD_VAR 0 5
9296: IFFALSE 9365
// begin for i = 1 to result do
9298: LD_ADDR_VAR 0 7
9302: PUSH
9303: DOUBLE
9304: LD_INT 1
9306: DEC
9307: ST_TO_ADDR
9308: LD_VAR 0 6
9312: PUSH
9313: FOR_TO
9314: IFFALSE 9353
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9316: LD_ADDR_VAR 0 9
9320: PUSH
9321: LD_VAR 0 9
9325: PPUSH
9326: LD_VAR 0 7
9330: PPUSH
9331: LD_VAR 0 6
9335: PUSH
9336: LD_VAR 0 7
9340: ARRAY
9341: PUSH
9342: LD_INT 1
9344: ARRAY
9345: PPUSH
9346: CALL_OW 1
9350: ST_TO_ADDR
9351: GO 9313
9353: POP
9354: POP
// result := tmp ;
9355: LD_ADDR_VAR 0 6
9359: PUSH
9360: LD_VAR 0 9
9364: ST_TO_ADDR
// end ; end ;
9365: LD_VAR 0 6
9369: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9370: LD_INT 0
9372: PPUSH
9373: PPUSH
9374: PPUSH
9375: PPUSH
9376: PPUSH
9377: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_INT 0
9385: PUSH
9386: LD_INT 0
9388: PUSH
9389: LD_INT 0
9391: PUSH
9392: EMPTY
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: ST_TO_ADDR
// if not x or not y then
9400: LD_VAR 0 2
9404: NOT
9405: IFTRUE 9414
9407: PUSH
9408: LD_VAR 0 3
9412: NOT
9413: OR
9414: IFFALSE 9418
// exit ;
9416: GO 11074
// if not range then
9418: LD_VAR 0 4
9422: NOT
9423: IFFALSE 9433
// range := 10 ;
9425: LD_ADDR_VAR 0 4
9429: PUSH
9430: LD_INT 10
9432: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9433: LD_ADDR_VAR 0 8
9437: PUSH
9438: LD_INT 81
9440: PUSH
9441: LD_VAR 0 1
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 92
9452: PUSH
9453: LD_VAR 0 2
9457: PUSH
9458: LD_VAR 0 3
9462: PUSH
9463: LD_VAR 0 4
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: LD_INT 21
9479: PUSH
9480: LD_INT 3
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: PPUSH
9496: CALL_OW 69
9500: ST_TO_ADDR
// if not tmp then
9501: LD_VAR 0 8
9505: NOT
9506: IFFALSE 9510
// exit ;
9508: GO 11074
// for i in tmp do
9510: LD_ADDR_VAR 0 6
9514: PUSH
9515: LD_VAR 0 8
9519: PUSH
9520: FOR_IN
9521: IFFALSE 11049
// begin points := [ 0 , 0 , 0 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 0
9530: PUSH
9531: LD_INT 0
9533: PUSH
9534: LD_INT 0
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// bpoints := 1 ;
9542: LD_ADDR_VAR 0 10
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9550: LD_VAR 0 6
9554: PPUSH
9555: CALL_OW 247
9559: PUSH
9560: LD_INT 1
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 10150
9568: POP
// begin if GetClass ( i ) = 1 then
9569: LD_VAR 0 6
9573: PPUSH
9574: CALL_OW 257
9578: PUSH
9579: LD_INT 1
9581: EQUAL
9582: IFFALSE 9603
// points := [ 10 , 5 , 3 ] ;
9584: LD_ADDR_VAR 0 9
9588: PUSH
9589: LD_INT 10
9591: PUSH
9592: LD_INT 5
9594: PUSH
9595: LD_INT 3
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9603: LD_VAR 0 6
9607: PPUSH
9608: CALL_OW 257
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: LD_INT 3
9618: PUSH
9619: LD_INT 4
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: IN
9627: IFFALSE 9648
// points := [ 3 , 2 , 1 ] ;
9629: LD_ADDR_VAR 0 9
9633: PUSH
9634: LD_INT 3
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: LD_INT 1
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 257
9657: PUSH
9658: LD_INT 5
9660: EQUAL
9661: IFFALSE 9682
// points := [ 130 , 5 , 2 ] ;
9663: LD_ADDR_VAR 0 9
9667: PUSH
9668: LD_INT 130
9670: PUSH
9671: LD_INT 5
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 257
9691: PUSH
9692: LD_INT 8
9694: EQUAL
9695: IFFALSE 9716
// points := [ 35 , 35 , 30 ] ;
9697: LD_ADDR_VAR 0 9
9701: PUSH
9702: LD_INT 35
9704: PUSH
9705: LD_INT 35
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9716: LD_VAR 0 6
9720: PPUSH
9721: CALL_OW 257
9725: PUSH
9726: LD_INT 9
9728: EQUAL
9729: IFFALSE 9750
// points := [ 20 , 55 , 40 ] ;
9731: LD_ADDR_VAR 0 9
9735: PUSH
9736: LD_INT 20
9738: PUSH
9739: LD_INT 55
9741: PUSH
9742: LD_INT 40
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9750: LD_VAR 0 6
9754: PPUSH
9755: CALL_OW 257
9759: PUSH
9760: LD_INT 12
9762: PUSH
9763: LD_INT 16
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: IN
9770: IFFALSE 9791
// points := [ 5 , 3 , 2 ] ;
9772: LD_ADDR_VAR 0 9
9776: PUSH
9777: LD_INT 5
9779: PUSH
9780: LD_INT 3
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9791: LD_VAR 0 6
9795: PPUSH
9796: CALL_OW 257
9800: PUSH
9801: LD_INT 17
9803: EQUAL
9804: IFFALSE 9825
// points := [ 100 , 50 , 75 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 100
9813: PUSH
9814: LD_INT 50
9816: PUSH
9817: LD_INT 75
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9825: LD_VAR 0 6
9829: PPUSH
9830: CALL_OW 257
9834: PUSH
9835: LD_INT 15
9837: EQUAL
9838: IFFALSE 9859
// points := [ 10 , 5 , 3 ] ;
9840: LD_ADDR_VAR 0 9
9844: PUSH
9845: LD_INT 10
9847: PUSH
9848: LD_INT 5
9850: PUSH
9851: LD_INT 3
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9859: LD_VAR 0 6
9863: PPUSH
9864: CALL_OW 257
9868: PUSH
9869: LD_INT 14
9871: EQUAL
9872: IFFALSE 9893
// points := [ 10 , 0 , 0 ] ;
9874: LD_ADDR_VAR 0 9
9878: PUSH
9879: LD_INT 10
9881: PUSH
9882: LD_INT 0
9884: PUSH
9885: LD_INT 0
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9893: LD_VAR 0 6
9897: PPUSH
9898: CALL_OW 257
9902: PUSH
9903: LD_INT 11
9905: EQUAL
9906: IFFALSE 9927
// points := [ 30 , 10 , 5 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 30
9915: PUSH
9916: LD_INT 10
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9927: LD_VAR 0 1
9931: PPUSH
9932: LD_INT 5
9934: PPUSH
9935: CALL_OW 321
9939: PUSH
9940: LD_INT 2
9942: EQUAL
9943: IFFALSE 9960
// bpoints := bpoints * 1.8 ;
9945: LD_ADDR_VAR 0 10
9949: PUSH
9950: LD_VAR 0 10
9954: PUSH
9955: LD_REAL  1.80000000000000E+0000
9958: MUL
9959: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9960: LD_VAR 0 6
9964: PPUSH
9965: CALL_OW 257
9969: PUSH
9970: LD_INT 1
9972: PUSH
9973: LD_INT 2
9975: PUSH
9976: LD_INT 3
9978: PUSH
9979: LD_INT 4
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: IN
9988: IFFALSE 10008
9990: PUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_INT 51
9998: PPUSH
9999: CALL_OW 321
10003: PUSH
10004: LD_INT 2
10006: EQUAL
10007: AND
10008: IFFALSE 10025
// bpoints := bpoints * 1.2 ;
10010: LD_ADDR_VAR 0 10
10014: PUSH
10015: LD_VAR 0 10
10019: PUSH
10020: LD_REAL  1.20000000000000E+0000
10023: MUL
10024: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10025: LD_VAR 0 6
10029: PPUSH
10030: CALL_OW 257
10034: PUSH
10035: LD_INT 5
10037: PUSH
10038: LD_INT 7
10040: PUSH
10041: LD_INT 9
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: IN
10049: IFFALSE 10069
10051: PUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_INT 52
10059: PPUSH
10060: CALL_OW 321
10064: PUSH
10065: LD_INT 2
10067: EQUAL
10068: AND
10069: IFFALSE 10086
// bpoints := bpoints * 1.5 ;
10071: LD_ADDR_VAR 0 10
10075: PUSH
10076: LD_VAR 0 10
10080: PUSH
10081: LD_REAL  1.50000000000000E+0000
10084: MUL
10085: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10086: LD_VAR 0 1
10090: PPUSH
10091: LD_INT 66
10093: PPUSH
10094: CALL_OW 321
10098: PUSH
10099: LD_INT 2
10101: EQUAL
10102: IFFALSE 10119
// bpoints := bpoints * 1.1 ;
10104: LD_ADDR_VAR 0 10
10108: PUSH
10109: LD_VAR 0 10
10113: PUSH
10114: LD_REAL  1.10000000000000E+0000
10117: MUL
10118: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10119: LD_ADDR_VAR 0 10
10123: PUSH
10124: LD_VAR 0 10
10128: PUSH
10129: LD_VAR 0 6
10133: PPUSH
10134: LD_INT 1
10136: PPUSH
10137: CALL_OW 259
10141: PUSH
10142: LD_REAL  1.15000000000000E+0000
10145: MUL
10146: MUL
10147: ST_TO_ADDR
// end ; unit_vehicle :
10148: GO 10978
10150: LD_INT 2
10152: DOUBLE
10153: EQUAL
10154: IFTRUE 10158
10156: GO 10966
10158: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 264
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: LD_INT 42
10174: PUSH
10175: LD_INT 24
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: IN
10183: IFFALSE 10204
// points := [ 25 , 5 , 3 ] ;
10185: LD_ADDR_VAR 0 9
10189: PUSH
10190: LD_INT 25
10192: PUSH
10193: LD_INT 5
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 264
10213: PUSH
10214: LD_INT 4
10216: PUSH
10217: LD_INT 43
10219: PUSH
10220: LD_INT 25
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: IN
10228: IFFALSE 10249
// points := [ 40 , 15 , 5 ] ;
10230: LD_ADDR_VAR 0 9
10234: PUSH
10235: LD_INT 40
10237: PUSH
10238: LD_INT 15
10240: PUSH
10241: LD_INT 5
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10249: LD_VAR 0 6
10253: PPUSH
10254: CALL_OW 264
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 23
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: IN
10269: IFFALSE 10290
// points := [ 7 , 25 , 8 ] ;
10271: LD_ADDR_VAR 0 9
10275: PUSH
10276: LD_INT 7
10278: PUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 8
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10290: LD_VAR 0 6
10294: PPUSH
10295: CALL_OW 264
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: LD_INT 27
10305: PUSH
10306: LD_INT 44
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: IN
10314: IFFALSE 10335
// points := [ 14 , 50 , 16 ] ;
10316: LD_ADDR_VAR 0 9
10320: PUSH
10321: LD_INT 14
10323: PUSH
10324: LD_INT 50
10326: PUSH
10327: LD_INT 16
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10335: LD_VAR 0 6
10339: PPUSH
10340: CALL_OW 264
10344: PUSH
10345: LD_INT 6
10347: PUSH
10348: LD_INT 46
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: IN
10355: IFFALSE 10376
// points := [ 32 , 120 , 70 ] ;
10357: LD_ADDR_VAR 0 9
10361: PUSH
10362: LD_INT 32
10364: PUSH
10365: LD_INT 120
10367: PUSH
10368: LD_INT 70
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10376: LD_VAR 0 6
10380: PPUSH
10381: CALL_OW 264
10385: PUSH
10386: LD_INT 7
10388: PUSH
10389: LD_INT 28
10391: PUSH
10392: LD_INT 45
10394: PUSH
10395: LD_INT 92
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: IN
10404: IFFALSE 10425
// points := [ 35 , 20 , 45 ] ;
10406: LD_ADDR_VAR 0 9
10410: PUSH
10411: LD_INT 35
10413: PUSH
10414: LD_INT 20
10416: PUSH
10417: LD_INT 45
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10425: LD_VAR 0 6
10429: PPUSH
10430: CALL_OW 264
10434: PUSH
10435: LD_INT 47
10437: PUSH
10438: EMPTY
10439: LIST
10440: IN
10441: IFFALSE 10462
// points := [ 67 , 45 , 75 ] ;
10443: LD_ADDR_VAR 0 9
10447: PUSH
10448: LD_INT 67
10450: PUSH
10451: LD_INT 45
10453: PUSH
10454: LD_INT 75
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10462: LD_VAR 0 6
10466: PPUSH
10467: CALL_OW 264
10471: PUSH
10472: LD_INT 26
10474: PUSH
10475: EMPTY
10476: LIST
10477: IN
10478: IFFALSE 10499
// points := [ 120 , 30 , 80 ] ;
10480: LD_ADDR_VAR 0 9
10484: PUSH
10485: LD_INT 120
10487: PUSH
10488: LD_INT 30
10490: PUSH
10491: LD_INT 80
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10499: LD_VAR 0 6
10503: PPUSH
10504: CALL_OW 264
10508: PUSH
10509: LD_INT 22
10511: PUSH
10512: EMPTY
10513: LIST
10514: IN
10515: IFFALSE 10536
// points := [ 40 , 1 , 1 ] ;
10517: LD_ADDR_VAR 0 9
10521: PUSH
10522: LD_INT 40
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10536: LD_VAR 0 6
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_INT 29
10548: PUSH
10549: EMPTY
10550: LIST
10551: IN
10552: IFFALSE 10573
// points := [ 70 , 200 , 400 ] ;
10554: LD_ADDR_VAR 0 9
10558: PUSH
10559: LD_INT 70
10561: PUSH
10562: LD_INT 200
10564: PUSH
10565: LD_INT 400
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10573: LD_VAR 0 6
10577: PPUSH
10578: CALL_OW 264
10582: PUSH
10583: LD_INT 14
10585: PUSH
10586: LD_INT 53
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: IN
10593: IFFALSE 10614
// points := [ 40 , 10 , 20 ] ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_INT 40
10602: PUSH
10603: LD_INT 10
10605: PUSH
10606: LD_INT 20
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10614: LD_VAR 0 6
10618: PPUSH
10619: CALL_OW 264
10623: PUSH
10624: LD_INT 9
10626: PUSH
10627: EMPTY
10628: LIST
10629: IN
10630: IFFALSE 10651
// points := [ 5 , 70 , 20 ] ;
10632: LD_ADDR_VAR 0 9
10636: PUSH
10637: LD_INT 5
10639: PUSH
10640: LD_INT 70
10642: PUSH
10643: LD_INT 20
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10651: LD_VAR 0 6
10655: PPUSH
10656: CALL_OW 264
10660: PUSH
10661: LD_INT 10
10663: PUSH
10664: EMPTY
10665: LIST
10666: IN
10667: IFFALSE 10688
// points := [ 35 , 110 , 70 ] ;
10669: LD_ADDR_VAR 0 9
10673: PUSH
10674: LD_INT 35
10676: PUSH
10677: LD_INT 110
10679: PUSH
10680: LD_INT 70
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10688: LD_VAR 0 6
10692: PPUSH
10693: CALL_OW 265
10697: PUSH
10698: LD_INT 25
10700: EQUAL
10701: IFFALSE 10722
// points := [ 80 , 65 , 100 ] ;
10703: LD_ADDR_VAR 0 9
10707: PUSH
10708: LD_INT 80
10710: PUSH
10711: LD_INT 65
10713: PUSH
10714: LD_INT 100
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10722: LD_VAR 0 6
10726: PPUSH
10727: CALL_OW 263
10731: PUSH
10732: LD_INT 1
10734: EQUAL
10735: IFFALSE 10770
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10737: LD_ADDR_VAR 0 10
10741: PUSH
10742: LD_VAR 0 10
10746: PUSH
10747: LD_VAR 0 6
10751: PPUSH
10752: CALL_OW 311
10756: PPUSH
10757: LD_INT 3
10759: PPUSH
10760: CALL_OW 259
10764: PUSH
10765: LD_INT 4
10767: MUL
10768: MUL
10769: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10770: LD_VAR 0 6
10774: PPUSH
10775: CALL_OW 263
10779: PUSH
10780: LD_INT 2
10782: EQUAL
10783: IFFALSE 10834
// begin j := IsControledBy ( i ) ;
10785: LD_ADDR_VAR 0 7
10789: PUSH
10790: LD_VAR 0 6
10794: PPUSH
10795: CALL_OW 312
10799: ST_TO_ADDR
// if j then
10800: LD_VAR 0 7
10804: IFFALSE 10834
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10806: LD_ADDR_VAR 0 10
10810: PUSH
10811: LD_VAR 0 10
10815: PUSH
10816: LD_VAR 0 7
10820: PPUSH
10821: LD_INT 3
10823: PPUSH
10824: CALL_OW 259
10828: PUSH
10829: LD_INT 3
10831: MUL
10832: MUL
10833: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10834: LD_VAR 0 6
10838: PPUSH
10839: CALL_OW 264
10843: PUSH
10844: LD_INT 5
10846: PUSH
10847: LD_INT 6
10849: PUSH
10850: LD_INT 46
10852: PUSH
10853: LD_INT 44
10855: PUSH
10856: LD_INT 47
10858: PUSH
10859: LD_INT 45
10861: PUSH
10862: LD_INT 28
10864: PUSH
10865: LD_INT 7
10867: PUSH
10868: LD_INT 27
10870: PUSH
10871: LD_INT 29
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: IN
10886: IFFALSE 10906
10888: PUSH
10889: LD_VAR 0 1
10893: PPUSH
10894: LD_INT 52
10896: PPUSH
10897: CALL_OW 321
10901: PUSH
10902: LD_INT 2
10904: EQUAL
10905: AND
10906: IFFALSE 10923
// bpoints := bpoints * 1.2 ;
10908: LD_ADDR_VAR 0 10
10912: PUSH
10913: LD_VAR 0 10
10917: PUSH
10918: LD_REAL  1.20000000000000E+0000
10921: MUL
10922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10923: LD_VAR 0 6
10927: PPUSH
10928: CALL_OW 264
10932: PUSH
10933: LD_INT 6
10935: PUSH
10936: LD_INT 46
10938: PUSH
10939: LD_INT 47
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: IN
10947: IFFALSE 10964
// bpoints := bpoints * 1.2 ;
10949: LD_ADDR_VAR 0 10
10953: PUSH
10954: LD_VAR 0 10
10958: PUSH
10959: LD_REAL  1.20000000000000E+0000
10962: MUL
10963: ST_TO_ADDR
// end ; unit_building :
10964: GO 10978
10966: LD_INT 3
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 10977
10974: POP
// ; end ;
10975: GO 10978
10977: POP
// for j = 1 to 3 do
10978: LD_ADDR_VAR 0 7
10982: PUSH
10983: DOUBLE
10984: LD_INT 1
10986: DEC
10987: ST_TO_ADDR
10988: LD_INT 3
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11045
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10994: LD_ADDR_VAR 0 5
10998: PUSH
10999: LD_VAR 0 5
11003: PPUSH
11004: LD_VAR 0 7
11008: PPUSH
11009: LD_VAR 0 5
11013: PUSH
11014: LD_VAR 0 7
11018: ARRAY
11019: PUSH
11020: LD_VAR 0 9
11024: PUSH
11025: LD_VAR 0 7
11029: ARRAY
11030: PUSH
11031: LD_VAR 0 10
11035: MUL
11036: PLUS
11037: PPUSH
11038: CALL_OW 1
11042: ST_TO_ADDR
11043: GO 10991
11045: POP
11046: POP
// end ;
11047: GO 9520
11049: POP
11050: POP
// result := Replace ( result , 4 , tmp ) ;
11051: LD_ADDR_VAR 0 5
11055: PUSH
11056: LD_VAR 0 5
11060: PPUSH
11061: LD_INT 4
11063: PPUSH
11064: LD_VAR 0 8
11068: PPUSH
11069: CALL_OW 1
11073: ST_TO_ADDR
// end ;
11074: LD_VAR 0 5
11078: RET
// export function DangerAtRange ( unit , range ) ; begin
11079: LD_INT 0
11081: PPUSH
// if not unit then
11082: LD_VAR 0 1
11086: NOT
11087: IFFALSE 11091
// exit ;
11089: GO 11136
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 255
11105: PPUSH
11106: LD_VAR 0 1
11110: PPUSH
11111: CALL_OW 250
11115: PPUSH
11116: LD_VAR 0 1
11120: PPUSH
11121: CALL_OW 251
11125: PPUSH
11126: LD_VAR 0 2
11130: PPUSH
11131: CALL 9370 0 4
11135: ST_TO_ADDR
// end ;
11136: LD_VAR 0 3
11140: RET
// export function DangerInArea ( side , area ) ; begin
11141: LD_INT 0
11143: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11144: LD_ADDR_VAR 0 3
11148: PUSH
11149: LD_VAR 0 2
11153: PPUSH
11154: LD_INT 81
11156: PUSH
11157: LD_VAR 0 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 70
11170: ST_TO_ADDR
// end ;
11171: LD_VAR 0 3
11175: RET
// export function IsExtension ( b ) ; begin
11176: LD_INT 0
11178: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: LD_VAR 0 1
11188: PUSH
11189: LD_INT 23
11191: PUSH
11192: LD_INT 20
11194: PUSH
11195: LD_INT 22
11197: PUSH
11198: LD_INT 17
11200: PUSH
11201: LD_INT 24
11203: PUSH
11204: LD_INT 21
11206: PUSH
11207: LD_INT 19
11209: PUSH
11210: LD_INT 16
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 18
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: IN
11231: ST_TO_ADDR
// end ;
11232: LD_VAR 0 2
11236: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
11241: PPUSH
// result := [ ] ;
11242: LD_ADDR_VAR 0 4
11246: PUSH
11247: EMPTY
11248: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11249: LD_ADDR_VAR 0 5
11253: PUSH
11254: LD_VAR 0 2
11258: PPUSH
11259: LD_INT 21
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 70
11273: ST_TO_ADDR
// if not tmp then
11274: LD_VAR 0 5
11278: NOT
11279: IFFALSE 11283
// exit ;
11281: GO 11347
// if checkLink then
11283: LD_VAR 0 3
11287: IFFALSE 11337
// begin for i in tmp do
11289: LD_ADDR_VAR 0 6
11293: PUSH
11294: LD_VAR 0 5
11298: PUSH
11299: FOR_IN
11300: IFFALSE 11335
// if GetBase ( i ) <> base then
11302: LD_VAR 0 6
11306: PPUSH
11307: CALL_OW 274
11311: PUSH
11312: LD_VAR 0 1
11316: NONEQUAL
11317: IFFALSE 11333
// ComLinkToBase ( base , i ) ;
11319: LD_VAR 0 1
11323: PPUSH
11324: LD_VAR 0 6
11328: PPUSH
11329: CALL_OW 169
11333: GO 11299
11335: POP
11336: POP
// end ; result := tmp ;
11337: LD_ADDR_VAR 0 4
11341: PUSH
11342: LD_VAR 0 5
11346: ST_TO_ADDR
// end ;
11347: LD_VAR 0 4
11351: RET
// export function ComComplete ( units , b ) ; var i ; begin
11352: LD_INT 0
11354: PPUSH
11355: PPUSH
// if not units then
11356: LD_VAR 0 1
11360: NOT
11361: IFFALSE 11365
// exit ;
11363: GO 11455
// for i in units do
11365: LD_ADDR_VAR 0 4
11369: PUSH
11370: LD_VAR 0 1
11374: PUSH
11375: FOR_IN
11376: IFFALSE 11453
// if BuildingStatus ( b ) = bs_build then
11378: LD_VAR 0 2
11382: PPUSH
11383: CALL_OW 461
11387: PUSH
11388: LD_INT 1
11390: EQUAL
11391: IFFALSE 11451
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11393: LD_VAR 0 4
11397: PPUSH
11398: LD_STRING h
11400: PUSH
11401: LD_VAR 0 2
11405: PPUSH
11406: CALL_OW 250
11410: PUSH
11411: LD_VAR 0 2
11415: PPUSH
11416: CALL_OW 251
11420: PUSH
11421: LD_VAR 0 2
11425: PUSH
11426: LD_INT 0
11428: PUSH
11429: LD_INT 0
11431: PUSH
11432: LD_INT 0
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: PPUSH
11447: CALL_OW 446
11451: GO 11375
11453: POP
11454: POP
// end ;
11455: LD_VAR 0 3
11459: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11460: LD_INT 0
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11468: LD_VAR 0 1
11472: NOT
11473: IFTRUE 11490
11475: PUSH
11476: LD_VAR 0 1
11480: PPUSH
11481: CALL_OW 263
11485: PUSH
11486: LD_INT 2
11488: NONEQUAL
11489: OR
11490: IFFALSE 11494
// exit ;
11492: GO 11810
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11494: LD_ADDR_VAR 0 6
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_VAR 0 1
11506: PPUSH
11507: CALL_OW 255
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 36
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 34
11531: PUSH
11532: LD_INT 31
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PPUSH
11548: CALL_OW 69
11552: ST_TO_ADDR
// if not tmp then
11553: LD_VAR 0 6
11557: NOT
11558: IFFALSE 11562
// exit ;
11560: GO 11810
// result := [ ] ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: EMPTY
11568: ST_TO_ADDR
// for i in tmp do
11569: LD_ADDR_VAR 0 3
11573: PUSH
11574: LD_VAR 0 6
11578: PUSH
11579: FOR_IN
11580: IFFALSE 11651
// begin t := UnitsInside ( i ) ;
11582: LD_ADDR_VAR 0 4
11586: PUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: CALL_OW 313
11596: ST_TO_ADDR
// if t then
11597: LD_VAR 0 4
11601: IFFALSE 11649
// for j in t do
11603: LD_ADDR_VAR 0 7
11607: PUSH
11608: LD_VAR 0 4
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11647
// result := Replace ( result , result + 1 , j ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_VAR 0 2
11625: PPUSH
11626: LD_VAR 0 2
11630: PUSH
11631: LD_INT 1
11633: PLUS
11634: PPUSH
11635: LD_VAR 0 7
11639: PPUSH
11640: CALL_OW 1
11644: ST_TO_ADDR
11645: GO 11613
11647: POP
11648: POP
// end ;
11649: GO 11579
11651: POP
11652: POP
// if not result then
11653: LD_VAR 0 2
11657: NOT
11658: IFFALSE 11662
// exit ;
11660: GO 11810
// mech := result [ 1 ] ;
11662: LD_ADDR_VAR 0 5
11666: PUSH
11667: LD_VAR 0 2
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: ST_TO_ADDR
// if result > 1 then
11676: LD_VAR 0 2
11680: PUSH
11681: LD_INT 1
11683: GREATER
11684: IFFALSE 11796
// begin for i = 2 to result do
11686: LD_ADDR_VAR 0 3
11690: PUSH
11691: DOUBLE
11692: LD_INT 2
11694: DEC
11695: ST_TO_ADDR
11696: LD_VAR 0 2
11700: PUSH
11701: FOR_TO
11702: IFFALSE 11794
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11704: LD_ADDR_VAR 0 4
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: LD_VAR 0 3
11718: ARRAY
11719: PPUSH
11720: LD_INT 3
11722: PPUSH
11723: CALL_OW 259
11727: PUSH
11728: LD_VAR 0 2
11732: PUSH
11733: LD_VAR 0 3
11737: ARRAY
11738: PPUSH
11739: CALL_OW 432
11743: MINUS
11744: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11745: LD_VAR 0 4
11749: PUSH
11750: LD_VAR 0 5
11754: PPUSH
11755: LD_INT 3
11757: PPUSH
11758: CALL_OW 259
11762: PUSH
11763: LD_VAR 0 5
11767: PPUSH
11768: CALL_OW 432
11772: MINUS
11773: GREATEREQUAL
11774: IFFALSE 11792
// mech := result [ i ] ;
11776: LD_ADDR_VAR 0 5
11780: PUSH
11781: LD_VAR 0 2
11785: PUSH
11786: LD_VAR 0 3
11790: ARRAY
11791: ST_TO_ADDR
// end ;
11792: GO 11701
11794: POP
11795: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11796: LD_VAR 0 1
11800: PPUSH
11801: LD_VAR 0 5
11805: PPUSH
11806: CALL_OW 135
// end ;
11810: LD_VAR 0 2
11814: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
11820: PPUSH
11821: PPUSH
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
// result := [ ] ;
11830: LD_ADDR_VAR 0 7
11834: PUSH
11835: EMPTY
11836: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11837: LD_VAR 0 1
11841: PPUSH
11842: CALL_OW 266
11846: PUSH
11847: LD_INT 0
11849: PUSH
11850: LD_INT 1
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: IN
11857: NOT
11858: IFFALSE 11862
// exit ;
11860: GO 13502
// if name then
11862: LD_VAR 0 3
11866: IFFALSE 11882
// SetBName ( base_dep , name ) ;
11868: LD_VAR 0 1
11872: PPUSH
11873: LD_VAR 0 3
11877: PPUSH
11878: CALL_OW 500
// base := GetBase ( base_dep ) ;
11882: LD_ADDR_VAR 0 15
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 274
11896: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11897: LD_ADDR_VAR 0 16
11901: PUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 255
11911: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11912: LD_ADDR_VAR 0 17
11916: PUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 248
11926: ST_TO_ADDR
// if sources then
11927: LD_VAR 0 5
11931: IFFALSE 11978
// for i = 1 to 3 do
11933: LD_ADDR_VAR 0 8
11937: PUSH
11938: DOUBLE
11939: LD_INT 1
11941: DEC
11942: ST_TO_ADDR
11943: LD_INT 3
11945: PUSH
11946: FOR_TO
11947: IFFALSE 11976
// AddResourceType ( base , i , sources [ i ] ) ;
11949: LD_VAR 0 15
11953: PPUSH
11954: LD_VAR 0 8
11958: PPUSH
11959: LD_VAR 0 5
11963: PUSH
11964: LD_VAR 0 8
11968: ARRAY
11969: PPUSH
11970: CALL_OW 276
11974: GO 11946
11976: POP
11977: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11978: LD_ADDR_VAR 0 18
11982: PUSH
11983: LD_VAR 0 15
11987: PPUSH
11988: LD_VAR 0 2
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL 11237 0 3
12000: ST_TO_ADDR
// InitHc ;
12001: CALL_OW 19
// InitUc ;
12005: CALL_OW 18
// uc_side := side ;
12009: LD_ADDR_OWVAR 20
12013: PUSH
12014: LD_VAR 0 16
12018: ST_TO_ADDR
// uc_nation := nation ;
12019: LD_ADDR_OWVAR 21
12023: PUSH
12024: LD_VAR 0 17
12028: ST_TO_ADDR
// if buildings then
12029: LD_VAR 0 18
12033: IFFALSE 13361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12035: LD_ADDR_VAR 0 19
12039: PUSH
12040: LD_VAR 0 18
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 29
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: ST_TO_ADDR
// if tmp then
12078: LD_VAR 0 19
12082: IFFALSE 12130
// for i in tmp do
12084: LD_ADDR_VAR 0 8
12088: PUSH
12089: LD_VAR 0 19
12093: PUSH
12094: FOR_IN
12095: IFFALSE 12128
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12097: LD_VAR 0 8
12101: PPUSH
12102: CALL_OW 250
12106: PPUSH
12107: LD_VAR 0 8
12111: PPUSH
12112: CALL_OW 251
12116: PPUSH
12117: LD_VAR 0 16
12121: PPUSH
12122: CALL_OW 441
12126: GO 12094
12128: POP
12129: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12130: LD_VAR 0 18
12134: PPUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 30
12140: PUSH
12141: LD_INT 32
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 33
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 72
12167: IFFALSE 12255
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12169: LD_ADDR_VAR 0 8
12173: PUSH
12174: LD_VAR 0 18
12178: PPUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 32
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 33
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: PPUSH
12207: CALL_OW 72
12211: PUSH
12212: FOR_IN
12213: IFFALSE 12253
// begin if not GetBWeapon ( i ) then
12215: LD_VAR 0 8
12219: PPUSH
12220: CALL_OW 269
12224: NOT
12225: IFFALSE 12251
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12227: LD_VAR 0 8
12231: PPUSH
12232: LD_VAR 0 8
12236: PPUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: CALL 13507 0 2
12246: PPUSH
12247: CALL_OW 431
// end ;
12251: GO 12212
12253: POP
12254: POP
// end ; for i = 1 to personel do
12255: LD_ADDR_VAR 0 8
12259: PUSH
12260: DOUBLE
12261: LD_INT 1
12263: DEC
12264: ST_TO_ADDR
12265: LD_VAR 0 6
12269: PUSH
12270: FOR_TO
12271: IFFALSE 13341
// begin if i > 4 then
12273: LD_VAR 0 8
12277: PUSH
12278: LD_INT 4
12280: GREATER
12281: IFFALSE 12285
// break ;
12283: GO 13341
// case i of 1 :
12285: LD_VAR 0 8
12289: PUSH
12290: LD_INT 1
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12378
12298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12299: LD_ADDR_VAR 0 12
12303: PUSH
12304: LD_VAR 0 18
12308: PPUSH
12309: LD_INT 22
12311: PUSH
12312: LD_VAR 0 16
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 58
12323: PUSH
12324: EMPTY
12325: LIST
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: LD_INT 30
12332: PUSH
12333: LD_INT 32
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 4
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 5
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: PPUSH
12371: CALL_OW 72
12375: ST_TO_ADDR
12376: GO 12600
12378: LD_INT 2
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12448
12386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12387: LD_ADDR_VAR 0 12
12391: PUSH
12392: LD_VAR 0 18
12396: PPUSH
12397: LD_INT 22
12399: PUSH
12400: LD_VAR 0 16
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: LD_INT 30
12414: PUSH
12415: LD_INT 0
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 30
12424: PUSH
12425: LD_INT 1
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 72
12445: ST_TO_ADDR
12446: GO 12600
12448: LD_INT 3
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12518
12456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12457: LD_ADDR_VAR 0 12
12461: PUSH
12462: LD_VAR 0 18
12466: PPUSH
12467: LD_INT 22
12469: PUSH
12470: LD_VAR 0 16
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 2
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 2
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: LD_INT 3
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 72
12515: ST_TO_ADDR
12516: GO 12600
12518: LD_INT 4
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12599
12526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12527: LD_ADDR_VAR 0 12
12531: PUSH
12532: LD_VAR 0 18
12536: PPUSH
12537: LD_INT 22
12539: PUSH
12540: LD_VAR 0 16
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 2
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 6
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 7
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 8
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PPUSH
12592: CALL_OW 72
12596: ST_TO_ADDR
12597: GO 12600
12599: POP
// if i = 1 then
12600: LD_VAR 0 8
12604: PUSH
12605: LD_INT 1
12607: EQUAL
12608: IFFALSE 12719
// begin tmp := [ ] ;
12610: LD_ADDR_VAR 0 19
12614: PUSH
12615: EMPTY
12616: ST_TO_ADDR
// for j in f do
12617: LD_ADDR_VAR 0 9
12621: PUSH
12622: LD_VAR 0 12
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12701
// if GetBType ( j ) = b_bunker then
12630: LD_VAR 0 9
12634: PPUSH
12635: CALL_OW 266
12639: PUSH
12640: LD_INT 32
12642: EQUAL
12643: IFFALSE 12670
// tmp := Insert ( tmp , 1 , j ) else
12645: LD_ADDR_VAR 0 19
12649: PUSH
12650: LD_VAR 0 19
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: LD_VAR 0 9
12662: PPUSH
12663: CALL_OW 2
12667: ST_TO_ADDR
12668: GO 12699
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12670: LD_ADDR_VAR 0 19
12674: PUSH
12675: LD_VAR 0 19
12679: PPUSH
12680: LD_VAR 0 19
12684: PUSH
12685: LD_INT 1
12687: PLUS
12688: PPUSH
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 2
12698: ST_TO_ADDR
12699: GO 12627
12701: POP
12702: POP
// if tmp then
12703: LD_VAR 0 19
12707: IFFALSE 12719
// f := tmp ;
12709: LD_ADDR_VAR 0 12
12713: PUSH
12714: LD_VAR 0 19
12718: ST_TO_ADDR
// end ; x := personel [ i ] ;
12719: LD_ADDR_VAR 0 13
12723: PUSH
12724: LD_VAR 0 6
12728: PUSH
12729: LD_VAR 0 8
12733: ARRAY
12734: ST_TO_ADDR
// if x = - 1 then
12735: LD_VAR 0 13
12739: PUSH
12740: LD_INT 1
12742: NEG
12743: EQUAL
12744: IFFALSE 12955
// begin for j in f do
12746: LD_ADDR_VAR 0 9
12750: PUSH
12751: LD_VAR 0 12
12755: PUSH
12756: FOR_IN
12757: IFFALSE 12951
// repeat InitHc ;
12759: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12763: LD_VAR 0 9
12767: PPUSH
12768: CALL_OW 266
12772: PUSH
12773: LD_INT 5
12775: EQUAL
12776: IFFALSE 12846
// begin if UnitsInside ( j ) < 3 then
12778: LD_VAR 0 9
12782: PPUSH
12783: CALL_OW 313
12787: PUSH
12788: LD_INT 3
12790: LESS
12791: IFFALSE 12827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12793: LD_INT 0
12795: PPUSH
12796: LD_INT 5
12798: PUSH
12799: LD_INT 8
12801: PUSH
12802: LD_INT 9
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_VAR 0 17
12814: ARRAY
12815: PPUSH
12816: LD_VAR 0 4
12820: PPUSH
12821: CALL_OW 380
12825: GO 12844
// PrepareHuman ( false , i , skill ) ;
12827: LD_INT 0
12829: PPUSH
12830: LD_VAR 0 8
12834: PPUSH
12835: LD_VAR 0 4
12839: PPUSH
12840: CALL_OW 380
// end else
12844: GO 12863
// PrepareHuman ( false , i , skill ) ;
12846: LD_INT 0
12848: PPUSH
12849: LD_VAR 0 8
12853: PPUSH
12854: LD_VAR 0 4
12858: PPUSH
12859: CALL_OW 380
// un := CreateHuman ;
12863: LD_ADDR_VAR 0 14
12867: PUSH
12868: CALL_OW 44
12872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12873: LD_ADDR_VAR 0 7
12877: PUSH
12878: LD_VAR 0 7
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: LD_VAR 0 14
12890: PPUSH
12891: CALL_OW 2
12895: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12896: LD_VAR 0 14
12900: PPUSH
12901: LD_VAR 0 9
12905: PPUSH
12906: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12910: LD_VAR 0 9
12914: PPUSH
12915: CALL_OW 313
12919: PUSH
12920: LD_INT 6
12922: EQUAL
12923: IFTRUE 12947
12925: PUSH
12926: LD_VAR 0 9
12930: PPUSH
12931: CALL_OW 266
12935: PUSH
12936: LD_INT 32
12938: PUSH
12939: LD_INT 31
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: IN
12946: OR
12947: IFFALSE 12759
12949: GO 12756
12951: POP
12952: POP
// end else
12953: GO 13339
// for j = 1 to x do
12955: LD_ADDR_VAR 0 9
12959: PUSH
12960: DOUBLE
12961: LD_INT 1
12963: DEC
12964: ST_TO_ADDR
12965: LD_VAR 0 13
12969: PUSH
12970: FOR_TO
12971: IFFALSE 13337
// begin InitHc ;
12973: CALL_OW 19
// if not f then
12977: LD_VAR 0 12
12981: NOT
12982: IFFALSE 13071
// begin PrepareHuman ( false , i , skill ) ;
12984: LD_INT 0
12986: PPUSH
12987: LD_VAR 0 8
12991: PPUSH
12992: LD_VAR 0 4
12996: PPUSH
12997: CALL_OW 380
// un := CreateHuman ;
13001: LD_ADDR_VAR 0 14
13005: PUSH
13006: CALL_OW 44
13010: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13011: LD_ADDR_VAR 0 7
13015: PUSH
13016: LD_VAR 0 7
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: LD_VAR 0 14
13028: PPUSH
13029: CALL_OW 2
13033: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13034: LD_VAR 0 14
13038: PPUSH
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 250
13048: PPUSH
13049: LD_VAR 0 1
13053: PPUSH
13054: CALL_OW 251
13058: PPUSH
13059: LD_INT 10
13061: PPUSH
13062: LD_INT 0
13064: PPUSH
13065: CALL_OW 50
// continue ;
13069: GO 12970
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13071: LD_VAR 0 12
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: CALL_OW 313
13084: IFFALSE 13112
13086: PUSH
13087: LD_VAR 0 12
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PPUSH
13096: CALL_OW 266
13100: PUSH
13101: LD_INT 32
13103: PUSH
13104: LD_INT 31
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: IN
13111: AND
13112: IFTRUE 13133
13114: PUSH
13115: LD_VAR 0 12
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 313
13128: PUSH
13129: LD_INT 6
13131: EQUAL
13132: OR
13133: IFFALSE 13153
// f := Delete ( f , 1 ) ;
13135: LD_ADDR_VAR 0 12
13139: PUSH
13140: LD_VAR 0 12
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 3
13152: ST_TO_ADDR
// if not f then
13153: LD_VAR 0 12
13157: NOT
13158: IFFALSE 13176
// begin x := x + 2 ;
13160: LD_ADDR_VAR 0 13
13164: PUSH
13165: LD_VAR 0 13
13169: PUSH
13170: LD_INT 2
13172: PLUS
13173: ST_TO_ADDR
// continue ;
13174: GO 12970
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13176: LD_VAR 0 12
13180: PUSH
13181: LD_INT 1
13183: ARRAY
13184: PPUSH
13185: CALL_OW 266
13189: PUSH
13190: LD_INT 5
13192: EQUAL
13193: IFFALSE 13267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13195: LD_VAR 0 12
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: PPUSH
13204: CALL_OW 313
13208: PUSH
13209: LD_INT 3
13211: LESS
13212: IFFALSE 13248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13214: LD_INT 0
13216: PPUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 8
13222: PUSH
13223: LD_INT 9
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_VAR 0 17
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 4
13241: PPUSH
13242: CALL_OW 380
13246: GO 13265
// PrepareHuman ( false , i , skill ) ;
13248: LD_INT 0
13250: PPUSH
13251: LD_VAR 0 8
13255: PPUSH
13256: LD_VAR 0 4
13260: PPUSH
13261: CALL_OW 380
// end else
13265: GO 13284
// PrepareHuman ( false , i , skill ) ;
13267: LD_INT 0
13269: PPUSH
13270: LD_VAR 0 8
13274: PPUSH
13275: LD_VAR 0 4
13279: PPUSH
13280: CALL_OW 380
// un := CreateHuman ;
13284: LD_ADDR_VAR 0 14
13288: PUSH
13289: CALL_OW 44
13293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13294: LD_ADDR_VAR 0 7
13298: PUSH
13299: LD_VAR 0 7
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: LD_VAR 0 14
13311: PPUSH
13312: CALL_OW 2
13316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13317: LD_VAR 0 14
13321: PPUSH
13322: LD_VAR 0 12
13326: PUSH
13327: LD_INT 1
13329: ARRAY
13330: PPUSH
13331: CALL_OW 52
// end ;
13335: GO 12970
13337: POP
13338: POP
// end ;
13339: GO 12270
13341: POP
13342: POP
// result := result ^ buildings ;
13343: LD_ADDR_VAR 0 7
13347: PUSH
13348: LD_VAR 0 7
13352: PUSH
13353: LD_VAR 0 18
13357: ADD
13358: ST_TO_ADDR
// end else
13359: GO 13502
// begin for i = 1 to personel do
13361: LD_ADDR_VAR 0 8
13365: PUSH
13366: DOUBLE
13367: LD_INT 1
13369: DEC
13370: ST_TO_ADDR
13371: LD_VAR 0 6
13375: PUSH
13376: FOR_TO
13377: IFFALSE 13500
// begin if i > 4 then
13379: LD_VAR 0 8
13383: PUSH
13384: LD_INT 4
13386: GREATER
13387: IFFALSE 13391
// break ;
13389: GO 13500
// x := personel [ i ] ;
13391: LD_ADDR_VAR 0 13
13395: PUSH
13396: LD_VAR 0 6
13400: PUSH
13401: LD_VAR 0 8
13405: ARRAY
13406: ST_TO_ADDR
// if x = - 1 then
13407: LD_VAR 0 13
13411: PUSH
13412: LD_INT 1
13414: NEG
13415: EQUAL
13416: IFFALSE 13420
// continue ;
13418: GO 13376
// PrepareHuman ( false , i , skill ) ;
13420: LD_INT 0
13422: PPUSH
13423: LD_VAR 0 8
13427: PPUSH
13428: LD_VAR 0 4
13432: PPUSH
13433: CALL_OW 380
// un := CreateHuman ;
13437: LD_ADDR_VAR 0 14
13441: PUSH
13442: CALL_OW 44
13446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13447: LD_VAR 0 14
13451: PPUSH
13452: LD_VAR 0 1
13456: PPUSH
13457: CALL_OW 250
13461: PPUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 251
13471: PPUSH
13472: LD_INT 10
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// result := result ^ un ;
13482: LD_ADDR_VAR 0 7
13486: PUSH
13487: LD_VAR 0 7
13491: PUSH
13492: LD_VAR 0 14
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13376
13500: POP
13501: POP
// end ; end ;
13502: LD_VAR 0 7
13506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13507: LD_INT 0
13509: PPUSH
13510: PPUSH
13511: PPUSH
13512: PPUSH
13513: PPUSH
13514: PPUSH
13515: PPUSH
13516: PPUSH
13517: PPUSH
13518: PPUSH
13519: PPUSH
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
// result := false ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13533: LD_VAR 0 1
13537: NOT
13538: IFTRUE 13563
13540: PUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 266
13550: PUSH
13551: LD_INT 32
13553: PUSH
13554: LD_INT 33
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: IN
13561: NOT
13562: OR
13563: IFFALSE 13567
// exit ;
13565: GO 14702
// nat := GetNation ( tower ) ;
13567: LD_ADDR_VAR 0 12
13571: PUSH
13572: LD_VAR 0 1
13576: PPUSH
13577: CALL_OW 248
13581: ST_TO_ADDR
// side := GetSide ( tower ) ;
13582: LD_ADDR_VAR 0 16
13586: PUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 255
13596: ST_TO_ADDR
// x := GetX ( tower ) ;
13597: LD_ADDR_VAR 0 10
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 250
13611: ST_TO_ADDR
// y := GetY ( tower ) ;
13612: LD_ADDR_VAR 0 11
13616: PUSH
13617: LD_VAR 0 1
13621: PPUSH
13622: CALL_OW 251
13626: ST_TO_ADDR
// if not x or not y then
13627: LD_VAR 0 10
13631: NOT
13632: IFTRUE 13641
13634: PUSH
13635: LD_VAR 0 11
13639: NOT
13640: OR
13641: IFFALSE 13645
// exit ;
13643: GO 14702
// weapon := 0 ;
13645: LD_ADDR_VAR 0 18
13649: PUSH
13650: LD_INT 0
13652: ST_TO_ADDR
// fac_list := [ ] ;
13653: LD_ADDR_VAR 0 17
13657: PUSH
13658: EMPTY
13659: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13660: LD_ADDR_VAR 0 6
13664: PUSH
13665: LD_VAR 0 1
13669: PPUSH
13670: CALL_OW 274
13674: PPUSH
13675: LD_VAR 0 2
13679: PPUSH
13680: LD_INT 0
13682: PPUSH
13683: CALL 11237 0 3
13687: PPUSH
13688: LD_INT 30
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 72
13702: ST_TO_ADDR
// if not factories then
13703: LD_VAR 0 6
13707: NOT
13708: IFFALSE 13712
// exit ;
13710: GO 14702
// for i in factories do
13712: LD_ADDR_VAR 0 8
13716: PUSH
13717: LD_VAR 0 6
13721: PUSH
13722: FOR_IN
13723: IFFALSE 13748
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13725: LD_ADDR_VAR 0 17
13729: PUSH
13730: LD_VAR 0 17
13734: PUSH
13735: LD_VAR 0 8
13739: PPUSH
13740: CALL_OW 478
13744: UNION
13745: ST_TO_ADDR
13746: GO 13722
13748: POP
13749: POP
// if not fac_list then
13750: LD_VAR 0 17
13754: NOT
13755: IFFALSE 13759
// exit ;
13757: GO 14702
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13759: LD_ADDR_VAR 0 5
13763: PUSH
13764: LD_INT 4
13766: PUSH
13767: LD_INT 5
13769: PUSH
13770: LD_INT 9
13772: PUSH
13773: LD_INT 10
13775: PUSH
13776: LD_INT 6
13778: PUSH
13779: LD_INT 7
13781: PUSH
13782: LD_INT 11
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 27
13796: PUSH
13797: LD_INT 28
13799: PUSH
13800: LD_INT 26
13802: PUSH
13803: LD_INT 30
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 43
13814: PUSH
13815: LD_INT 44
13817: PUSH
13818: LD_INT 46
13820: PUSH
13821: LD_INT 45
13823: PUSH
13824: LD_INT 47
13826: PUSH
13827: LD_INT 49
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: LD_VAR 0 12
13847: ARRAY
13848: ST_TO_ADDR
// list := list isect fac_list ;
13849: LD_ADDR_VAR 0 5
13853: PUSH
13854: LD_VAR 0 5
13858: PUSH
13859: LD_VAR 0 17
13863: ISECT
13864: ST_TO_ADDR
// if not list then
13865: LD_VAR 0 5
13869: NOT
13870: IFFALSE 13874
// exit ;
13872: GO 14702
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13874: LD_VAR 0 12
13878: PUSH
13879: LD_INT 3
13881: EQUAL
13882: IFFALSE 13894
13884: PUSH
13885: LD_INT 49
13887: PUSH
13888: LD_VAR 0 5
13892: IN
13893: AND
13894: IFFALSE 13914
13896: PUSH
13897: LD_INT 31
13899: PPUSH
13900: LD_VAR 0 16
13904: PPUSH
13905: CALL_OW 321
13909: PUSH
13910: LD_INT 2
13912: EQUAL
13913: AND
13914: IFFALSE 13974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13916: LD_INT 22
13918: PUSH
13919: LD_VAR 0 16
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 35
13930: PUSH
13931: LD_INT 49
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 91
13940: PUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_INT 10
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: NOT
13964: IFFALSE 13974
// weapon := ru_time_lapser ;
13966: LD_ADDR_VAR 0 18
13970: PUSH
13971: LD_INT 49
13973: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13974: LD_VAR 0 12
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: IN
13989: IFFALSE 14013
13991: PUSH
13992: LD_INT 11
13994: PUSH
13995: LD_VAR 0 5
13999: IN
14000: IFTRUE 14012
14002: PUSH
14003: LD_INT 30
14005: PUSH
14006: LD_VAR 0 5
14010: IN
14011: OR
14012: AND
14013: IFFALSE 14033
14015: PUSH
14016: LD_INT 6
14018: PPUSH
14019: LD_VAR 0 16
14023: PPUSH
14024: CALL_OW 321
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: AND
14033: IFFALSE 14200
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14035: LD_INT 22
14037: PUSH
14038: LD_VAR 0 16
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 35
14052: PUSH
14053: LD_INT 11
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 35
14062: PUSH
14063: LD_INT 30
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 91
14077: PUSH
14078: LD_VAR 0 1
14082: PUSH
14083: LD_INT 18
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 69
14100: NOT
14101: IFFALSE 14177
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_VAR 0 16
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 32
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 30
14131: PUSH
14132: LD_INT 33
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 91
14146: PUSH
14147: LD_VAR 0 1
14151: PUSH
14152: LD_INT 12
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PUSH
14173: LD_INT 2
14175: GREATER
14176: AND
14177: IFFALSE 14200
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14179: LD_ADDR_VAR 0 18
14183: PUSH
14184: LD_INT 11
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_VAR 0 12
14198: ARRAY
14199: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14200: LD_VAR 0 18
14204: NOT
14205: IFFALSE 14225
14207: PUSH
14208: LD_INT 40
14210: PPUSH
14211: LD_VAR 0 16
14215: PPUSH
14216: CALL_OW 321
14220: PUSH
14221: LD_INT 2
14223: EQUAL
14224: AND
14225: IFFALSE 14261
14227: PUSH
14228: LD_INT 7
14230: PUSH
14231: LD_VAR 0 5
14235: IN
14236: IFTRUE 14248
14238: PUSH
14239: LD_INT 28
14241: PUSH
14242: LD_VAR 0 5
14246: IN
14247: OR
14248: IFTRUE 14260
14250: PUSH
14251: LD_INT 45
14253: PUSH
14254: LD_VAR 0 5
14258: IN
14259: OR
14260: AND
14261: IFFALSE 14515
// begin hex := GetHexInfo ( x , y ) ;
14263: LD_ADDR_VAR 0 4
14267: PUSH
14268: LD_VAR 0 10
14272: PPUSH
14273: LD_VAR 0 11
14277: PPUSH
14278: CALL_OW 546
14282: ST_TO_ADDR
// if hex [ 1 ] then
14283: LD_VAR 0 4
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: IFFALSE 14295
// exit ;
14293: GO 14702
// height := hex [ 2 ] ;
14295: LD_ADDR_VAR 0 15
14299: PUSH
14300: LD_VAR 0 4
14304: PUSH
14305: LD_INT 2
14307: ARRAY
14308: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14309: LD_ADDR_VAR 0 14
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: LD_INT 2
14319: PUSH
14320: LD_INT 3
14322: PUSH
14323: LD_INT 5
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: ST_TO_ADDR
// for i in tmp do
14332: LD_ADDR_VAR 0 8
14336: PUSH
14337: LD_VAR 0 14
14341: PUSH
14342: FOR_IN
14343: IFFALSE 14513
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14345: LD_ADDR_VAR 0 9
14349: PUSH
14350: LD_VAR 0 10
14354: PPUSH
14355: LD_VAR 0 8
14359: PPUSH
14360: LD_INT 5
14362: PPUSH
14363: CALL_OW 272
14367: PUSH
14368: LD_VAR 0 11
14372: PPUSH
14373: LD_VAR 0 8
14377: PPUSH
14378: LD_INT 5
14380: PPUSH
14381: CALL_OW 273
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14390: LD_VAR 0 9
14394: PUSH
14395: LD_INT 1
14397: ARRAY
14398: PPUSH
14399: LD_VAR 0 9
14403: PUSH
14404: LD_INT 2
14406: ARRAY
14407: PPUSH
14408: CALL_OW 488
14412: IFFALSE 14511
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_VAR 0 9
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: LD_VAR 0 9
14432: PUSH
14433: LD_INT 2
14435: ARRAY
14436: PPUSH
14437: CALL_OW 546
14441: ST_TO_ADDR
// if hex [ 1 ] then
14442: LD_VAR 0 4
14446: PUSH
14447: LD_INT 1
14449: ARRAY
14450: IFFALSE 14454
// continue ;
14452: GO 14342
// h := hex [ 2 ] ;
14454: LD_ADDR_VAR 0 13
14458: PUSH
14459: LD_VAR 0 4
14463: PUSH
14464: LD_INT 2
14466: ARRAY
14467: ST_TO_ADDR
// if h + 7 < height then
14468: LD_VAR 0 13
14472: PUSH
14473: LD_INT 7
14475: PLUS
14476: PUSH
14477: LD_VAR 0 15
14481: LESS
14482: IFFALSE 14511
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14484: LD_ADDR_VAR 0 18
14488: PUSH
14489: LD_INT 7
14491: PUSH
14492: LD_INT 28
14494: PUSH
14495: LD_INT 45
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: LD_VAR 0 12
14507: ARRAY
14508: ST_TO_ADDR
// break ;
14509: GO 14513
// end ; end ; end ;
14511: GO 14342
14513: POP
14514: POP
// end ; if not weapon then
14515: LD_VAR 0 18
14519: NOT
14520: IFFALSE 14580
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: LD_VAR 0 5
14531: PUSH
14532: LD_INT 11
14534: PUSH
14535: LD_INT 30
14537: PUSH
14538: LD_INT 49
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: DIFF
14546: ST_TO_ADDR
// if not list then
14547: LD_VAR 0 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14702
// weapon := list [ rand ( 1 , list ) ] ;
14556: LD_ADDR_VAR 0 18
14560: PUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_VAR 0 5
14573: PPUSH
14574: CALL_OW 12
14578: ARRAY
14579: ST_TO_ADDR
// end ; if weapon then
14580: LD_VAR 0 18
14584: IFFALSE 14702
// begin tmp := CostOfWeapon ( weapon ) ;
14586: LD_ADDR_VAR 0 14
14590: PUSH
14591: LD_VAR 0 18
14595: PPUSH
14596: CALL_OW 451
14600: ST_TO_ADDR
// j := GetBase ( tower ) ;
14601: LD_ADDR_VAR 0 9
14605: PUSH
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 274
14615: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14616: LD_VAR 0 9
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 275
14628: PUSH
14629: LD_VAR 0 14
14633: PUSH
14634: LD_INT 1
14636: ARRAY
14637: GREATEREQUAL
14638: IFFALSE 14664
14640: PUSH
14641: LD_VAR 0 9
14645: PPUSH
14646: LD_INT 2
14648: PPUSH
14649: CALL_OW 275
14653: PUSH
14654: LD_VAR 0 14
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: GREATEREQUAL
14663: AND
14664: IFFALSE 14690
14666: PUSH
14667: LD_VAR 0 9
14671: PPUSH
14672: LD_INT 3
14674: PPUSH
14675: CALL_OW 275
14679: PUSH
14680: LD_VAR 0 14
14684: PUSH
14685: LD_INT 3
14687: ARRAY
14688: GREATEREQUAL
14689: AND
14690: IFFALSE 14702
// result := weapon ;
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_VAR 0 18
14701: ST_TO_ADDR
// end ; end ;
14702: LD_VAR 0 3
14706: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14707: LD_INT 0
14709: PPUSH
14710: PPUSH
// result := true ;
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_INT 1
14718: ST_TO_ADDR
// if array1 = array2 then
14719: LD_VAR 0 1
14723: PUSH
14724: LD_VAR 0 2
14728: EQUAL
14729: IFFALSE 14789
// begin for i = 1 to array1 do
14731: LD_ADDR_VAR 0 4
14735: PUSH
14736: DOUBLE
14737: LD_INT 1
14739: DEC
14740: ST_TO_ADDR
14741: LD_VAR 0 1
14745: PUSH
14746: FOR_TO
14747: IFFALSE 14785
// if array1 [ i ] <> array2 [ i ] then
14749: LD_VAR 0 1
14753: PUSH
14754: LD_VAR 0 4
14758: ARRAY
14759: PUSH
14760: LD_VAR 0 2
14764: PUSH
14765: LD_VAR 0 4
14769: ARRAY
14770: NONEQUAL
14771: IFFALSE 14783
// begin result := false ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// break ;
14781: GO 14785
// end ;
14783: GO 14746
14785: POP
14786: POP
// end else
14787: GO 14797
// result := false ;
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: LD_INT 0
14796: ST_TO_ADDR
// end ;
14797: LD_VAR 0 3
14801: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
// if not array1 or not array2 then
14806: LD_VAR 0 1
14810: NOT
14811: IFTRUE 14820
14813: PUSH
14814: LD_VAR 0 2
14818: NOT
14819: OR
14820: IFFALSE 14824
// exit ;
14822: GO 14888
// result := true ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 1
14831: ST_TO_ADDR
// for i = 1 to array1 do
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: DOUBLE
14838: LD_INT 1
14840: DEC
14841: ST_TO_ADDR
14842: LD_VAR 0 1
14846: PUSH
14847: FOR_TO
14848: IFFALSE 14886
// if array1 [ i ] <> array2 [ i ] then
14850: LD_VAR 0 1
14854: PUSH
14855: LD_VAR 0 4
14859: ARRAY
14860: PUSH
14861: LD_VAR 0 2
14865: PUSH
14866: LD_VAR 0 4
14870: ARRAY
14871: NONEQUAL
14872: IFFALSE 14884
// begin result := false ;
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: LD_INT 0
14881: ST_TO_ADDR
// break ;
14882: GO 14886
// end ;
14884: GO 14847
14886: POP
14887: POP
// end ;
14888: LD_VAR 0 3
14892: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14893: LD_INT 0
14895: PPUSH
14896: PPUSH
14897: PPUSH
// pom := GetBase ( fac ) ;
14898: LD_ADDR_VAR 0 5
14902: PUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 274
14912: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14913: LD_ADDR_VAR 0 4
14917: PUSH
14918: LD_VAR 0 2
14922: PUSH
14923: LD_INT 1
14925: ARRAY
14926: PPUSH
14927: LD_VAR 0 2
14931: PUSH
14932: LD_INT 2
14934: ARRAY
14935: PPUSH
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 3
14943: ARRAY
14944: PPUSH
14945: LD_VAR 0 2
14949: PUSH
14950: LD_INT 4
14952: ARRAY
14953: PPUSH
14954: CALL_OW 449
14958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_VAR 0 5
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 275
14976: PUSH
14977: LD_VAR 0 4
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: GREATEREQUAL
14986: IFFALSE 15012
14988: PUSH
14989: LD_VAR 0 5
14993: PPUSH
14994: LD_INT 2
14996: PPUSH
14997: CALL_OW 275
15001: PUSH
15002: LD_VAR 0 4
15006: PUSH
15007: LD_INT 2
15009: ARRAY
15010: GREATEREQUAL
15011: AND
15012: IFFALSE 15038
15014: PUSH
15015: LD_VAR 0 5
15019: PPUSH
15020: LD_INT 3
15022: PPUSH
15023: CALL_OW 275
15027: PUSH
15028: LD_VAR 0 4
15032: PUSH
15033: LD_INT 3
15035: ARRAY
15036: GREATEREQUAL
15037: AND
15038: ST_TO_ADDR
// end ;
15039: LD_VAR 0 3
15043: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15044: LD_INT 0
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
// pom := GetBase ( building ) ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 274
15064: ST_TO_ADDR
// if not pom then
15065: LD_VAR 0 3
15069: NOT
15070: IFFALSE 15074
// exit ;
15072: GO 15248
// btype := GetBType ( building ) ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 266
15088: ST_TO_ADDR
// if btype = b_armoury then
15089: LD_VAR 0 5
15093: PUSH
15094: LD_INT 4
15096: EQUAL
15097: IFFALSE 15107
// btype := b_barracks ;
15099: LD_ADDR_VAR 0 5
15103: PUSH
15104: LD_INT 5
15106: ST_TO_ADDR
// if btype = b_depot then
15107: LD_VAR 0 5
15111: PUSH
15112: LD_INT 0
15114: EQUAL
15115: IFFALSE 15125
// btype := b_warehouse ;
15117: LD_ADDR_VAR 0 5
15121: PUSH
15122: LD_INT 1
15124: ST_TO_ADDR
// if btype = b_workshop then
15125: LD_VAR 0 5
15129: PUSH
15130: LD_INT 2
15132: EQUAL
15133: IFFALSE 15143
// btype := b_factory ;
15135: LD_ADDR_VAR 0 5
15139: PUSH
15140: LD_INT 3
15142: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15143: LD_ADDR_VAR 0 4
15147: PUSH
15148: LD_VAR 0 5
15152: PPUSH
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL_OW 248
15162: PPUSH
15163: CALL_OW 450
15167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_VAR 0 3
15177: PPUSH
15178: LD_INT 1
15180: PPUSH
15181: CALL_OW 275
15185: PUSH
15186: LD_VAR 0 4
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: GREATEREQUAL
15195: IFFALSE 15221
15197: PUSH
15198: LD_VAR 0 3
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 275
15210: PUSH
15211: LD_VAR 0 4
15215: PUSH
15216: LD_INT 2
15218: ARRAY
15219: GREATEREQUAL
15220: AND
15221: IFFALSE 15247
15223: PUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 4
15241: PUSH
15242: LD_INT 3
15244: ARRAY
15245: GREATEREQUAL
15246: AND
15247: ST_TO_ADDR
// end ;
15248: LD_VAR 0 2
15252: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
// pom := GetBase ( building ) ;
15258: LD_ADDR_VAR 0 4
15262: PUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 274
15272: ST_TO_ADDR
// if not pom then
15273: LD_VAR 0 4
15277: NOT
15278: IFFALSE 15282
// exit ;
15280: GO 15387
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15282: LD_ADDR_VAR 0 5
15286: PUSH
15287: LD_VAR 0 2
15291: PPUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 248
15301: PPUSH
15302: CALL_OW 450
15306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15307: LD_ADDR_VAR 0 3
15311: PUSH
15312: LD_VAR 0 4
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 275
15324: PUSH
15325: LD_VAR 0 5
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: GREATEREQUAL
15334: IFFALSE 15360
15336: PUSH
15337: LD_VAR 0 4
15341: PPUSH
15342: LD_INT 2
15344: PPUSH
15345: CALL_OW 275
15349: PUSH
15350: LD_VAR 0 5
15354: PUSH
15355: LD_INT 2
15357: ARRAY
15358: GREATEREQUAL
15359: AND
15360: IFFALSE 15386
15362: PUSH
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 3
15370: PPUSH
15371: CALL_OW 275
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: LD_INT 3
15383: ARRAY
15384: GREATEREQUAL
15385: AND
15386: ST_TO_ADDR
// end ;
15387: LD_VAR 0 3
15391: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15392: LD_INT 0
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
// result := false ;
15405: LD_ADDR_VAR 0 8
15409: PUSH
15410: LD_INT 0
15412: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15413: LD_VAR 0 5
15417: NOT
15418: IFTRUE 15427
15420: PUSH
15421: LD_VAR 0 1
15425: NOT
15426: OR
15427: IFTRUE 15436
15429: PUSH
15430: LD_VAR 0 2
15434: NOT
15435: OR
15436: IFTRUE 15445
15438: PUSH
15439: LD_VAR 0 3
15443: NOT
15444: OR
15445: IFFALSE 15449
// exit ;
15447: GO 16275
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15449: LD_ADDR_VAR 0 14
15453: PUSH
15454: LD_VAR 0 1
15458: PPUSH
15459: LD_VAR 0 2
15463: PPUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: LD_VAR 0 4
15473: PPUSH
15474: LD_VAR 0 5
15478: PUSH
15479: LD_INT 1
15481: ARRAY
15482: PPUSH
15483: CALL_OW 248
15487: PPUSH
15488: LD_INT 0
15490: PPUSH
15491: CALL 17556 0 6
15495: ST_TO_ADDR
// if not hexes then
15496: LD_VAR 0 14
15500: NOT
15501: IFFALSE 15505
// exit ;
15503: GO 16275
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15505: LD_ADDR_VAR 0 17
15509: PUSH
15510: LD_VAR 0 5
15514: PPUSH
15515: LD_INT 22
15517: PUSH
15518: LD_VAR 0 13
15522: PPUSH
15523: CALL_OW 255
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 2
15534: PUSH
15535: LD_INT 30
15537: PUSH
15538: LD_INT 0
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 72
15568: ST_TO_ADDR
// for i = 1 to hexes do
15569: LD_ADDR_VAR 0 9
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_VAR 0 14
15583: PUSH
15584: FOR_TO
15585: IFFALSE 16273
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15587: LD_ADDR_VAR 0 13
15591: PUSH
15592: LD_VAR 0 14
15596: PUSH
15597: LD_VAR 0 9
15601: ARRAY
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 14
15611: PUSH
15612: LD_VAR 0 9
15616: ARRAY
15617: PUSH
15618: LD_INT 2
15620: ARRAY
15621: PPUSH
15622: CALL_OW 428
15626: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15627: LD_VAR 0 14
15631: PUSH
15632: LD_VAR 0 9
15636: ARRAY
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 14
15646: PUSH
15647: LD_VAR 0 9
15651: ARRAY
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: PPUSH
15657: CALL_OW 351
15661: IFTRUE 15700
15663: PUSH
15664: LD_VAR 0 14
15668: PUSH
15669: LD_VAR 0 9
15673: ARRAY
15674: PUSH
15675: LD_INT 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 14
15683: PUSH
15684: LD_VAR 0 9
15688: ARRAY
15689: PUSH
15690: LD_INT 2
15692: ARRAY
15693: PPUSH
15694: CALL_OW 488
15698: NOT
15699: OR
15700: IFTRUE 15717
15702: PUSH
15703: LD_VAR 0 13
15707: PPUSH
15708: CALL_OW 247
15712: PUSH
15713: LD_INT 3
15715: EQUAL
15716: OR
15717: IFFALSE 15723
// exit ;
15719: POP
15720: POP
15721: GO 16275
// if not tmp then
15723: LD_VAR 0 13
15727: NOT
15728: IFFALSE 15732
// continue ;
15730: GO 15584
// result := true ;
15732: LD_ADDR_VAR 0 8
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15740: LD_VAR 0 6
15744: IFFALSE 15761
15746: PUSH
15747: LD_VAR 0 13
15751: PPUSH
15752: CALL_OW 247
15756: PUSH
15757: LD_INT 2
15759: EQUAL
15760: AND
15761: IFFALSE 15778
15763: PUSH
15764: LD_VAR 0 13
15768: PPUSH
15769: CALL_OW 263
15773: PUSH
15774: LD_INT 1
15776: EQUAL
15777: AND
15778: IFFALSE 15942
// begin if IsDrivenBy ( tmp ) then
15780: LD_VAR 0 13
15784: PPUSH
15785: CALL_OW 311
15789: IFFALSE 15793
// continue ;
15791: GO 15584
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15793: LD_VAR 0 6
15797: PPUSH
15798: LD_INT 3
15800: PUSH
15801: LD_INT 60
15803: PUSH
15804: EMPTY
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: LD_INT 55
15816: PUSH
15817: EMPTY
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 72
15832: IFFALSE 15940
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15834: LD_ADDR_VAR 0 18
15838: PUSH
15839: LD_VAR 0 6
15843: PPUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 60
15849: PUSH
15850: EMPTY
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: LD_INT 55
15862: PUSH
15863: EMPTY
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PPUSH
15874: CALL_OW 72
15878: PUSH
15879: LD_INT 1
15881: ARRAY
15882: ST_TO_ADDR
// if IsInUnit ( driver ) then
15883: LD_VAR 0 18
15887: PPUSH
15888: CALL_OW 310
15892: IFFALSE 15903
// ComExit ( driver ) ;
15894: LD_VAR 0 18
15898: PPUSH
15899: CALL 41556 0 1
// AddComEnterUnit ( driver , tmp ) ;
15903: LD_VAR 0 18
15907: PPUSH
15908: LD_VAR 0 13
15912: PPUSH
15913: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15917: LD_VAR 0 18
15921: PPUSH
15922: LD_VAR 0 7
15926: PPUSH
15927: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15931: LD_VAR 0 18
15935: PPUSH
15936: CALL_OW 181
// end ; continue ;
15940: GO 15584
// end ; if not cleaners or not tmp in cleaners then
15942: LD_VAR 0 6
15946: NOT
15947: IFTRUE 15962
15949: PUSH
15950: LD_VAR 0 13
15954: PUSH
15955: LD_VAR 0 6
15959: IN
15960: NOT
15961: OR
15962: IFFALSE 16271
// begin if dep then
15964: LD_VAR 0 17
15968: IFFALSE 16104
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15970: LD_ADDR_VAR 0 16
15974: PUSH
15975: LD_VAR 0 17
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: CALL_OW 250
15988: PPUSH
15989: LD_VAR 0 17
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PPUSH
15998: CALL_OW 254
16002: PPUSH
16003: LD_INT 5
16005: PPUSH
16006: CALL_OW 272
16010: PUSH
16011: LD_VAR 0 17
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: CALL_OW 251
16024: PPUSH
16025: LD_VAR 0 17
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 254
16038: PPUSH
16039: LD_INT 5
16041: PPUSH
16042: CALL_OW 273
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16051: LD_VAR 0 16
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PPUSH
16060: LD_VAR 0 16
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PPUSH
16069: CALL_OW 488
16073: IFFALSE 16104
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16075: LD_VAR 0 13
16079: PPUSH
16080: LD_VAR 0 16
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: PPUSH
16089: LD_VAR 0 16
16093: PUSH
16094: LD_INT 2
16096: ARRAY
16097: PPUSH
16098: CALL_OW 111
// continue ;
16102: GO 15584
// end ; end ; r := GetDir ( tmp ) ;
16104: LD_ADDR_VAR 0 15
16108: PUSH
16109: LD_VAR 0 13
16113: PPUSH
16114: CALL_OW 254
16118: ST_TO_ADDR
// if r = 5 then
16119: LD_VAR 0 15
16123: PUSH
16124: LD_INT 5
16126: EQUAL
16127: IFFALSE 16137
// r := 0 ;
16129: LD_ADDR_VAR 0 15
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// for j = r to 5 do
16137: LD_ADDR_VAR 0 10
16141: PUSH
16142: DOUBLE
16143: LD_VAR 0 15
16147: DEC
16148: ST_TO_ADDR
16149: LD_INT 5
16151: PUSH
16152: FOR_TO
16153: IFFALSE 16269
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16155: LD_ADDR_VAR 0 11
16159: PUSH
16160: LD_VAR 0 13
16164: PPUSH
16165: CALL_OW 250
16169: PPUSH
16170: LD_VAR 0 10
16174: PPUSH
16175: LD_INT 2
16177: PPUSH
16178: CALL_OW 272
16182: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16183: LD_ADDR_VAR 0 12
16187: PUSH
16188: LD_VAR 0 13
16192: PPUSH
16193: CALL_OW 251
16197: PPUSH
16198: LD_VAR 0 10
16202: PPUSH
16203: LD_INT 2
16205: PPUSH
16206: CALL_OW 273
16210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16211: LD_VAR 0 11
16215: PPUSH
16216: LD_VAR 0 12
16220: PPUSH
16221: CALL_OW 488
16225: IFFALSE 16244
16227: PUSH
16228: LD_VAR 0 11
16232: PPUSH
16233: LD_VAR 0 12
16237: PPUSH
16238: CALL_OW 428
16242: NOT
16243: AND
16244: IFFALSE 16267
// begin ComMoveXY ( tmp , _x , _y ) ;
16246: LD_VAR 0 13
16250: PPUSH
16251: LD_VAR 0 11
16255: PPUSH
16256: LD_VAR 0 12
16260: PPUSH
16261: CALL_OW 111
// break ;
16265: GO 16269
// end ; end ;
16267: GO 16152
16269: POP
16270: POP
// end ; end ;
16271: GO 15584
16273: POP
16274: POP
// end ;
16275: LD_VAR 0 8
16279: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16280: LD_INT 0
16282: PPUSH
// result := true ;
16283: LD_ADDR_VAR 0 3
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16291: LD_VAR 0 2
16295: PUSH
16296: LD_INT 24
16298: DOUBLE
16299: EQUAL
16300: IFTRUE 16310
16302: LD_INT 33
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16335
16310: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16311: LD_ADDR_VAR 0 3
16315: PUSH
16316: LD_INT 32
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 321
16328: PUSH
16329: LD_INT 2
16331: EQUAL
16332: ST_TO_ADDR
16333: GO 16651
16335: LD_INT 20
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16368
16343: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16344: LD_ADDR_VAR 0 3
16348: PUSH
16349: LD_INT 6
16351: PPUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 321
16361: PUSH
16362: LD_INT 2
16364: EQUAL
16365: ST_TO_ADDR
16366: GO 16651
16368: LD_INT 22
16370: DOUBLE
16371: EQUAL
16372: IFTRUE 16382
16374: LD_INT 36
16376: DOUBLE
16377: EQUAL
16378: IFTRUE 16382
16380: GO 16407
16382: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16383: LD_ADDR_VAR 0 3
16387: PUSH
16388: LD_INT 15
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 321
16400: PUSH
16401: LD_INT 2
16403: EQUAL
16404: ST_TO_ADDR
16405: GO 16651
16407: LD_INT 30
16409: DOUBLE
16410: EQUAL
16411: IFTRUE 16415
16413: GO 16440
16415: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_INT 20
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 321
16433: PUSH
16434: LD_INT 2
16436: EQUAL
16437: ST_TO_ADDR
16438: GO 16651
16440: LD_INT 28
16442: DOUBLE
16443: EQUAL
16444: IFTRUE 16454
16446: LD_INT 21
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16479
16454: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_INT 21
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 321
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: ST_TO_ADDR
16477: GO 16651
16479: LD_INT 16
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16512
16487: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 84
16495: PPUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 321
16505: PUSH
16506: LD_INT 2
16508: EQUAL
16509: ST_TO_ADDR
16510: GO 16651
16512: LD_INT 19
16514: DOUBLE
16515: EQUAL
16516: IFTRUE 16526
16518: LD_INT 23
16520: DOUBLE
16521: EQUAL
16522: IFTRUE 16526
16524: GO 16551
16526: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_INT 83
16534: PPUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 321
16544: PUSH
16545: LD_INT 2
16547: EQUAL
16548: ST_TO_ADDR
16549: GO 16651
16551: LD_INT 17
16553: DOUBLE
16554: EQUAL
16555: IFTRUE 16559
16557: GO 16584
16559: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16560: LD_ADDR_VAR 0 3
16564: PUSH
16565: LD_INT 39
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 321
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: ST_TO_ADDR
16582: GO 16651
16584: LD_INT 18
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16617
16592: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: LD_INT 40
16600: PPUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 321
16610: PUSH
16611: LD_INT 2
16613: EQUAL
16614: ST_TO_ADDR
16615: GO 16651
16617: LD_INT 27
16619: DOUBLE
16620: EQUAL
16621: IFTRUE 16625
16623: GO 16650
16625: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16626: LD_ADDR_VAR 0 3
16630: PUSH
16631: LD_INT 35
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 321
16643: PUSH
16644: LD_INT 2
16646: EQUAL
16647: ST_TO_ADDR
16648: GO 16651
16650: POP
// end ;
16651: LD_VAR 0 3
16655: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16656: LD_INT 0
16658: PPUSH
16659: PPUSH
16660: PPUSH
16661: PPUSH
16662: PPUSH
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
// result := false ;
16669: LD_ADDR_VAR 0 6
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// if btype = b_depot then
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 0
16684: EQUAL
16685: IFFALSE 16697
// begin result := true ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 1
16694: ST_TO_ADDR
// exit ;
16695: GO 17551
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16697: LD_VAR 0 1
16701: NOT
16702: IFTRUE 16727
16704: PUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 266
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: LD_INT 1
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: IN
16725: NOT
16726: OR
16727: IFTRUE 16736
16729: PUSH
16730: LD_VAR 0 2
16734: NOT
16735: OR
16736: IFTRUE 16772
16738: PUSH
16739: LD_VAR 0 5
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 2
16752: PUSH
16753: LD_INT 3
16755: PUSH
16756: LD_INT 4
16758: PUSH
16759: LD_INT 5
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: IN
16770: NOT
16771: OR
16772: IFTRUE 16791
16774: PUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_VAR 0 4
16784: PPUSH
16785: CALL_OW 488
16789: NOT
16790: OR
16791: IFFALSE 16795
// exit ;
16793: GO 17551
// side := GetSide ( depot ) ;
16795: LD_ADDR_VAR 0 9
16799: PUSH
16800: LD_VAR 0 1
16804: PPUSH
16805: CALL_OW 255
16809: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16810: LD_VAR 0 9
16814: PPUSH
16815: LD_VAR 0 2
16819: PPUSH
16820: CALL 16280 0 2
16824: NOT
16825: IFFALSE 16829
// exit ;
16827: GO 17551
// pom := GetBase ( depot ) ;
16829: LD_ADDR_VAR 0 10
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 274
16843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16844: LD_ADDR_VAR 0 11
16848: PUSH
16849: LD_VAR 0 2
16853: PPUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 248
16863: PPUSH
16864: CALL_OW 450
16868: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16869: LD_VAR 0 10
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 275
16881: PUSH
16882: LD_VAR 0 11
16886: PUSH
16887: LD_INT 1
16889: ARRAY
16890: GREATEREQUAL
16891: IFFALSE 16917
16893: PUSH
16894: LD_VAR 0 10
16898: PPUSH
16899: LD_INT 2
16901: PPUSH
16902: CALL_OW 275
16906: PUSH
16907: LD_VAR 0 11
16911: PUSH
16912: LD_INT 2
16914: ARRAY
16915: GREATEREQUAL
16916: AND
16917: IFFALSE 16943
16919: PUSH
16920: LD_VAR 0 10
16924: PPUSH
16925: LD_INT 3
16927: PPUSH
16928: CALL_OW 275
16932: PUSH
16933: LD_VAR 0 11
16937: PUSH
16938: LD_INT 3
16940: ARRAY
16941: GREATEREQUAL
16942: AND
16943: NOT
16944: IFFALSE 16948
// exit ;
16946: GO 17551
// if GetBType ( depot ) = b_depot then
16948: LD_VAR 0 1
16952: PPUSH
16953: CALL_OW 266
16957: PUSH
16958: LD_INT 0
16960: EQUAL
16961: IFFALSE 16973
// dist := 28 else
16963: LD_ADDR_VAR 0 14
16967: PUSH
16968: LD_INT 28
16970: ST_TO_ADDR
16971: GO 16981
// dist := 36 ;
16973: LD_ADDR_VAR 0 14
16977: PUSH
16978: LD_INT 36
16980: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_VAR 0 4
16995: PPUSH
16996: CALL_OW 297
17000: PUSH
17001: LD_VAR 0 14
17005: GREATER
17006: IFFALSE 17010
// exit ;
17008: GO 17551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17010: LD_ADDR_VAR 0 12
17014: PUSH
17015: LD_VAR 0 2
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_VAR 0 4
17029: PPUSH
17030: LD_VAR 0 5
17034: PPUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 248
17044: PPUSH
17045: LD_INT 0
17047: PPUSH
17048: CALL 17556 0 6
17052: ST_TO_ADDR
// if not hexes then
17053: LD_VAR 0 12
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17551
// hex := GetHexInfo ( x , y ) ;
17062: LD_ADDR_VAR 0 15
17066: PUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PPUSH
17077: CALL_OW 546
17081: ST_TO_ADDR
// if hex [ 1 ] then
17082: LD_VAR 0 15
17086: PUSH
17087: LD_INT 1
17089: ARRAY
17090: IFFALSE 17094
// exit ;
17092: GO 17551
// height := hex [ 2 ] ;
17094: LD_ADDR_VAR 0 13
17098: PUSH
17099: LD_VAR 0 15
17103: PUSH
17104: LD_INT 2
17106: ARRAY
17107: ST_TO_ADDR
// for i = 1 to hexes do
17108: LD_ADDR_VAR 0 7
17112: PUSH
17113: DOUBLE
17114: LD_INT 1
17116: DEC
17117: ST_TO_ADDR
17118: LD_VAR 0 12
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17468
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17126: LD_VAR 0 12
17130: PUSH
17131: LD_VAR 0 7
17135: ARRAY
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_VAR 0 12
17145: PUSH
17146: LD_VAR 0 7
17150: ARRAY
17151: PUSH
17152: LD_INT 2
17154: ARRAY
17155: PPUSH
17156: CALL_OW 488
17160: NOT
17161: IFTRUE 17203
17163: PUSH
17164: LD_VAR 0 12
17168: PUSH
17169: LD_VAR 0 7
17173: ARRAY
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: PPUSH
17179: LD_VAR 0 12
17183: PUSH
17184: LD_VAR 0 7
17188: ARRAY
17189: PUSH
17190: LD_INT 2
17192: ARRAY
17193: PPUSH
17194: CALL_OW 428
17198: PUSH
17199: LD_INT 0
17201: GREATER
17202: OR
17203: IFTRUE 17241
17205: PUSH
17206: LD_VAR 0 12
17210: PUSH
17211: LD_VAR 0 7
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_VAR 0 12
17225: PUSH
17226: LD_VAR 0 7
17230: ARRAY
17231: PUSH
17232: LD_INT 2
17234: ARRAY
17235: PPUSH
17236: CALL_OW 351
17240: OR
17241: IFFALSE 17247
// exit ;
17243: POP
17244: POP
17245: GO 17551
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17247: LD_ADDR_VAR 0 8
17251: PUSH
17252: LD_VAR 0 12
17256: PUSH
17257: LD_VAR 0 7
17261: ARRAY
17262: PUSH
17263: LD_INT 1
17265: ARRAY
17266: PPUSH
17267: LD_VAR 0 12
17271: PUSH
17272: LD_VAR 0 7
17276: ARRAY
17277: PUSH
17278: LD_INT 2
17280: ARRAY
17281: PPUSH
17282: CALL_OW 546
17286: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17287: LD_VAR 0 8
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: IFTRUE 17317
17297: PUSH
17298: LD_VAR 0 8
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 13
17311: PUSH
17312: LD_INT 2
17314: PLUS
17315: GREATER
17316: OR
17317: IFTRUE 17339
17319: PUSH
17320: LD_VAR 0 8
17324: PUSH
17325: LD_INT 2
17327: ARRAY
17328: PUSH
17329: LD_VAR 0 13
17333: PUSH
17334: LD_INT 2
17336: MINUS
17337: LESS
17338: OR
17339: IFTRUE 17407
17341: PUSH
17342: LD_VAR 0 8
17346: PUSH
17347: LD_INT 3
17349: ARRAY
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: LD_INT 8
17356: PUSH
17357: LD_INT 9
17359: PUSH
17360: LD_INT 10
17362: PUSH
17363: LD_INT 11
17365: PUSH
17366: LD_INT 12
17368: PUSH
17369: LD_INT 13
17371: PUSH
17372: LD_INT 16
17374: PUSH
17375: LD_INT 17
17377: PUSH
17378: LD_INT 18
17380: PUSH
17381: LD_INT 19
17383: PUSH
17384: LD_INT 20
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: IN
17405: NOT
17406: OR
17407: IFTRUE 17420
17409: PUSH
17410: LD_VAR 0 8
17414: PUSH
17415: LD_INT 5
17417: ARRAY
17418: NOT
17419: OR
17420: IFTRUE 17460
17422: PUSH
17423: LD_VAR 0 8
17427: PUSH
17428: LD_INT 6
17430: ARRAY
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 7
17440: PUSH
17441: LD_INT 9
17443: PUSH
17444: LD_INT 10
17446: PUSH
17447: LD_INT 11
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: IN
17458: NOT
17459: OR
17460: IFFALSE 17466
// exit ;
17462: POP
17463: POP
17464: GO 17551
// end ;
17466: GO 17123
17468: POP
17469: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17470: LD_VAR 0 9
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_VAR 0 4
17484: PPUSH
17485: LD_INT 20
17487: PPUSH
17488: CALL 9370 0 4
17492: PUSH
17493: LD_INT 4
17495: ARRAY
17496: IFFALSE 17500
// exit ;
17498: GO 17551
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17500: LD_VAR 0 2
17504: PUSH
17505: LD_INT 29
17507: PUSH
17508: LD_INT 30
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: IN
17515: IFFALSE 17539
17517: PUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_VAR 0 4
17527: PPUSH
17528: LD_VAR 0 9
17532: PPUSH
17533: CALL_OW 440
17537: NOT
17538: AND
17539: IFFALSE 17543
// exit ;
17541: GO 17551
// result := true ;
17543: LD_ADDR_VAR 0 6
17547: PUSH
17548: LD_INT 1
17550: ST_TO_ADDR
// end ;
17551: LD_VAR 0 6
17555: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17556: LD_INT 0
17558: PPUSH
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
// result = [ ] ;
17616: LD_ADDR_VAR 0 7
17620: PUSH
17621: EMPTY
17622: ST_TO_ADDR
// temp_list = [ ] ;
17623: LD_ADDR_VAR 0 9
17627: PUSH
17628: EMPTY
17629: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17630: LD_VAR 0 4
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: LD_INT 5
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: IN
17661: NOT
17662: IFTRUE 17705
17664: PUSH
17665: LD_VAR 0 1
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: IN
17680: IFFALSE 17704
17682: PUSH
17683: LD_VAR 0 5
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 3
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: IN
17702: NOT
17703: AND
17704: OR
17705: IFFALSE 17709
// exit ;
17707: GO 36108
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17709: LD_VAR 0 1
17713: PUSH
17714: LD_INT 6
17716: PUSH
17717: LD_INT 7
17719: PUSH
17720: LD_INT 8
17722: PUSH
17723: LD_INT 13
17725: PUSH
17726: LD_INT 12
17728: PUSH
17729: LD_INT 15
17731: PUSH
17732: LD_INT 11
17734: PUSH
17735: LD_INT 14
17737: PUSH
17738: LD_INT 10
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: IN
17752: IFFALSE 17762
// btype = b_lab ;
17754: LD_ADDR_VAR 0 1
17758: PUSH
17759: LD_INT 6
17761: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17762: LD_VAR 0 6
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: IN
17781: NOT
17782: IFTRUE 17850
17784: PUSH
17785: LD_VAR 0 1
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 3
17801: PUSH
17802: LD_INT 6
17804: PUSH
17805: LD_INT 36
17807: PUSH
17808: LD_INT 4
17810: PUSH
17811: LD_INT 5
17813: PUSH
17814: LD_INT 31
17816: PUSH
17817: LD_INT 32
17819: PUSH
17820: LD_INT 33
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: IN
17836: NOT
17837: IFFALSE 17849
17839: PUSH
17840: LD_VAR 0 6
17844: PUSH
17845: LD_INT 1
17847: EQUAL
17848: AND
17849: OR
17850: IFTRUE 17882
17852: PUSH
17853: LD_VAR 0 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: IN
17868: NOT
17869: IFFALSE 17881
17871: PUSH
17872: LD_VAR 0 6
17876: PUSH
17877: LD_INT 2
17879: EQUAL
17880: AND
17881: OR
17882: IFFALSE 17892
// mode = 0 ;
17884: LD_ADDR_VAR 0 6
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// case mode of 0 :
17892: LD_VAR 0 6
17896: PUSH
17897: LD_INT 0
17899: DOUBLE
17900: EQUAL
17901: IFTRUE 17905
17903: GO 29358
17905: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17906: LD_ADDR_VAR 0 11
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 0
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 2
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18099: LD_ADDR_VAR 0 12
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 1
18168: NEG
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 2
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: NEG
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 3
18256: NEG
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 3
18267: NEG
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18295: LD_ADDR_VAR 0 13
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: NEG
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: LD_INT 2
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 2
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 2
18418: NEG
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: LD_INT 2
18434: NEG
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: LD_INT 3
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 3
18454: NEG
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 3
18466: NEG
18467: PUSH
18468: LD_INT 3
18470: NEG
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18494: LD_ADDR_VAR 0 14
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: NEG
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: LD_INT 3
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 3
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: NEG
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18690: LD_ADDR_VAR 0 15
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: LD_INT 1
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: NEG
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18883: LD_ADDR_VAR 0 16
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: NEG
19007: PUSH
19008: LD_INT 1
19010: NEG
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: LD_INT 2
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 3
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19076: LD_ADDR_VAR 0 17
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: LD_INT 1
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: LD_INT 0
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: LD_INT 2
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: NEG
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19306: LD_ADDR_VAR 0 18
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 2
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 1
19471: NEG
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: NEG
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 2
19493: NEG
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: LD_INT 2
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19536: LD_ADDR_VAR 0 19
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 2
19712: NEG
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19766: LD_ADDR_VAR 0 20
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 0
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: LD_INT 2
19969: NEG
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19996: LD_ADDR_VAR 0 21
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 1
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 2
20172: NEG
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: NEG
20184: PUSH
20185: LD_INT 1
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20226: LD_ADDR_VAR 0 22
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 2
20413: NEG
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 2
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20456: LD_ADDR_VAR 0 23
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: LD_INT 2
20541: NEG
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: PUSH
20592: LD_INT 2
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: NEG
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 2
20643: NEG
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: NEG
20668: PUSH
20669: LD_INT 3
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 3
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 1
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20736: LD_ADDR_VAR 0 24
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 0
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 0
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: NEG
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: NEG
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: NEG
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: LD_INT 2
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 2
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 3
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 3
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21012: LD_ADDR_VAR 0 25
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 1
21119: NEG
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: NEG
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: LD_INT 1
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 3
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 3
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 3
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21286: LD_ADDR_VAR 0 26
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 2
21473: NEG
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 2
21497: PUSH
21498: LD_INT 3
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 3
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21562: LD_ADDR_VAR 0 27
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: NEG
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: NEG
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: LD_INT 2
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21842: LD_ADDR_VAR 0 28
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 0
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: NEG
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: NEG
22054: PUSH
22055: LD_INT 3
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: LD_INT 3
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 3
22089: NEG
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22124: LD_ADDR_VAR 0 29
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: NEG
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 2
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: LD_INT 2
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 2
22302: NEG
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: NEG
22315: PUSH
22316: LD_INT 3
22318: NEG
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 3
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 3
22368: NEG
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22403: LD_ADDR_VAR 0 30
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: LD_INT 2
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: NEG
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 3
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 3
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22681: LD_ADDR_VAR 0 31
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: NEG
22751: PUSH
22752: LD_INT 1
22754: NEG
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 2
22858: NEG
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: LD_INT 3
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 3
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: NEG
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 3
22924: NEG
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22959: LD_ADDR_VAR 0 32
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 3
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 3
23202: NEG
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23237: LD_ADDR_VAR 0 33
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 2
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 2
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 2
23415: NEG
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: LD_INT 3
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 3
23481: NEG
23482: PUSH
23483: LD_INT 2
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23516: LD_ADDR_VAR 0 34
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 1
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 2
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: LD_INT 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 2
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: NEG
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 3
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 2
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 3
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 3
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 3
23761: NEG
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23796: LD_ADDR_VAR 0 35
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: NEG
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23908: LD_ADDR_VAR 0 36
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 1
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24020: LD_ADDR_VAR 0 37
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24132: LD_ADDR_VAR 0 38
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: LD_INT 1
24152: NEG
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24244: LD_ADDR_VAR 0 39
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24356: LD_ADDR_VAR 0 40
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24468: LD_ADDR_VAR 0 41
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: NEG
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: NEG
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: LD_INT 3
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 3
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: PUSH
24712: LD_INT 3
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 3
24742: NEG
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 3
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 3
24777: NEG
24778: PUSH
24779: LD_INT 3
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24818: LD_ADDR_VAR 0 42
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: NEG
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: LD_INT 3
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: LD_INT 3
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 3
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: NEG
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 3
25127: NEG
25128: PUSH
25129: LD_INT 3
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25168: LD_ADDR_VAR 0 43
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: NEG
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 3
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 3
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 3
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 3
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 3
25464: NEG
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 3
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25516: LD_ADDR_VAR 0 44
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: NEG
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: NEG
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 3
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: PUSH
25760: LD_INT 3
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 3
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 3
25790: NEG
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 3
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 3
25813: NEG
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 3
25825: NEG
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25866: LD_ADDR_VAR 0 45
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: NEG
26069: PUSH
26070: LD_INT 3
26072: NEG
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 3
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 3
26112: PUSH
26113: LD_INT 3
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 3
26163: NEG
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 3
26175: NEG
26176: PUSH
26177: LD_INT 3
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26216: LD_ADDR_VAR 0 46
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: LD_INT 2
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 2
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 3
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: LD_INT 2
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 3
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: LD_INT 3
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: NEG
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26564: LD_ADDR_VAR 0 47
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26715: LD_ADDR_VAR 0 48
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: LD_INT 2
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26862: LD_ADDR_VAR 0 49
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27006: LD_ADDR_VAR 0 50
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27150: LD_ADDR_VAR 0 51
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27297: LD_ADDR_VAR 0 52
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27448: LD_ADDR_VAR 0 53
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27678: LD_ADDR_VAR 0 54
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27908: LD_ADDR_VAR 0 55
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: LD_INT 2
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28138: LD_ADDR_VAR 0 56
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 2
28325: NEG
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28368: LD_ADDR_VAR 0 57
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28598: LD_ADDR_VAR 0 58
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 2
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28828: LD_ADDR_VAR 0 59
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28916: LD_ADDR_VAR 0 60
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29004: LD_ADDR_VAR 0 61
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29092: LD_ADDR_VAR 0 62
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 0
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 1
29161: NEG
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29180: LD_ADDR_VAR 0 63
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29268: LD_ADDR_VAR 0 64
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 1
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// end ; 1 :
29356: GO 35253
29358: LD_INT 1
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 31989
29366: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 3
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29411: LD_ADDR_VAR 0 12
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29452: LD_ADDR_VAR 0 13
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29492: LD_ADDR_VAR 0 14
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29533: LD_ADDR_VAR 0 15
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: NEG
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29577: LD_ADDR_VAR 0 16
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 3
29608: NEG
29609: PUSH
29610: LD_INT 3
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29623: LD_ADDR_VAR 0 17
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29667: LD_ADDR_VAR 0 18
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29708: LD_ADDR_VAR 0 19
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29748: LD_ADDR_VAR 0 20
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29789: LD_ADDR_VAR 0 21
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29833: LD_ADDR_VAR 0 22
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: NEG
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29879: LD_ADDR_VAR 0 23
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 3
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 4
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29923: LD_ADDR_VAR 0 24
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 4
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29964: LD_ADDR_VAR 0 25
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30004: LD_ADDR_VAR 0 26
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30045: LD_ADDR_VAR 0 27
30049: PUSH
30050: LD_INT 3
30052: NEG
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 3
30063: NEG
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 4
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30089: LD_ADDR_VAR 0 28
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: LD_INT 4
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 4
30120: NEG
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30135: LD_ADDR_VAR 0 29
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 4
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 4
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: LD_INT 3
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 5
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 5
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 4
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 6
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 6
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 5
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30290: LD_ADDR_VAR 0 30
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 3
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 4
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 5
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 5
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 6
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 6
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30433: LD_ADDR_VAR 0 31
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 3
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 4
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 4
30480: PUSH
30481: LD_INT 4
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 4
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 5
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 5
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 4
30520: PUSH
30521: LD_INT 5
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 6
30530: PUSH
30531: LD_INT 5
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 6
30540: PUSH
30541: LD_INT 6
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 5
30550: PUSH
30551: LD_INT 6
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30572: LD_ADDR_VAR 0 32
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 4
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 5
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 4
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 6
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 6
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 5
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30715: LD_ADDR_VAR 0 33
30719: PUSH
30720: LD_INT 2
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 3
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 4
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 4
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 4
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 5
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 5
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 5
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 6
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 6
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30870: LD_ADDR_VAR 0 34
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: LD_INT 4
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 4
30925: NEG
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: LD_INT 4
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 4
30949: NEG
30950: PUSH
30951: LD_INT 5
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 5
30961: NEG
30962: PUSH
30963: LD_INT 4
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 5
30973: NEG
30974: PUSH
30975: LD_INT 5
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 5
30985: NEG
30986: PUSH
30987: LD_INT 6
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 6
30997: NEG
30998: PUSH
30999: LD_INT 5
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 6
31009: NEG
31010: PUSH
31011: LD_INT 6
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31033: LD_ADDR_VAR 0 41
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 2
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31077: LD_ADDR_VAR 0 42
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31118: LD_ADDR_VAR 0 43
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31158: LD_ADDR_VAR 0 44
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31199: LD_ADDR_VAR 0 45
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31243: LD_ADDR_VAR 0 46
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: NEG
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31289: LD_ADDR_VAR 0 47
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: LD_INT 3
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31322: LD_ADDR_VAR 0 48
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31353: LD_ADDR_VAR 0 49
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31382: LD_ADDR_VAR 0 50
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31411: LD_ADDR_VAR 0 51
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31442: LD_ADDR_VAR 0 52
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31475: LD_ADDR_VAR 0 53
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 3
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31519: LD_ADDR_VAR 0 54
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31560: LD_ADDR_VAR 0 55
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 3
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31600: LD_ADDR_VAR 0 56
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 2
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31641: LD_ADDR_VAR 0 57
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 3
31659: NEG
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31685: LD_ADDR_VAR 0 58
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 3
31716: NEG
31717: PUSH
31718: LD_INT 3
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31731: LD_ADDR_VAR 0 59
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31775: LD_ADDR_VAR 0 60
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31816: LD_ADDR_VAR 0 61
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31856: LD_ADDR_VAR 0 62
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31897: LD_ADDR_VAR 0 63
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31941: LD_ADDR_VAR 0 64
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// end ; 2 :
31987: GO 35253
31989: LD_INT 2
31991: DOUBLE
31992: EQUAL
31993: IFTRUE 31997
31995: GO 35252
31997: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31998: LD_ADDR_VAR 0 29
32002: PUSH
32003: LD_INT 4
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 5
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 4
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 5
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 4
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 4
32337: NEG
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 4
32383: NEG
32384: PUSH
32385: LD_INT 4
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 4
32395: NEG
32396: PUSH
32397: LD_INT 5
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: LD_INT 4
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: LD_INT 4
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 5
32455: NEG
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: LD_INT 5
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 5
32479: NEG
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32536: LD_ADDR_VAR 0 30
32540: PUSH
32541: LD_INT 4
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 4
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 5
32563: PUSH
32564: LD_INT 4
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 5
32573: PUSH
32574: LD_INT 5
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: LD_INT 5
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: LD_INT 4
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 3
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 5
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 3
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 4
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 4
32726: NEG
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 4
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 4
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 5
32782: NEG
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 5
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 5
32805: NEG
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: LD_INT 3
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: LD_INT 4
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: LD_INT 3
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 4
32900: NEG
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 4
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 4
32924: NEG
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 4
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 5
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: LD_INT 4
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 3
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 5
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 3
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 5
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33083: LD_ADDR_VAR 0 31
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 4
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 4
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 5
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 4
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 4
33297: NEG
33298: PUSH
33299: LD_INT 5
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 3
33309: NEG
33310: PUSH
33311: LD_INT 4
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: LD_INT 3
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 3
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 5
33345: NEG
33346: PUSH
33347: LD_INT 4
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: LD_INT 5
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: LD_INT 5
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 5
33381: NEG
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 4
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 4
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 4
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 5
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 4
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 5
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33633: LD_ADDR_VAR 0 32
33637: PUSH
33638: LD_INT 4
33640: NEG
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 4
33651: NEG
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 5
33696: NEG
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 5
33707: NEG
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 5
33719: NEG
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: NEG
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: LD_INT 3
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: LD_INT 4
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: LD_INT 3
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 4
33802: NEG
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 4
33814: NEG
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: LD_INT 4
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 4
33838: NEG
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 5
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: LD_INT 4
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: LD_INT 3
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 4
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: LD_INT 5
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: LD_INT 5
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 4
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 4
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 2
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: LD_INT 4
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 4
34055: PUSH
34056: LD_INT 3
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 5
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: LD_INT 5
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 4
34085: PUSH
34086: LD_INT 5
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: LD_INT 4
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 5
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: LD_INT 5
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34180: LD_ADDR_VAR 0 33
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: LD_INT 4
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 4
34199: NEG
34200: PUSH
34201: LD_INT 5
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 3
34211: NEG
34212: PUSH
34213: LD_INT 4
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: LD_INT 3
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 5
34247: NEG
34248: PUSH
34249: LD_INT 4
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 5
34259: NEG
34260: PUSH
34261: LD_INT 5
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: LD_INT 5
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 4
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 3
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 4
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: LD_INT 4
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 4
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 4
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 5
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 5
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 4
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 5
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 4
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 4
34520: PUSH
34521: LD_INT 4
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 4
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 4
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 4
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 4
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 5
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 5
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34718: LD_ADDR_VAR 0 34
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 4
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 5
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 4
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 3
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 3
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 4
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 5
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: LD_INT 5
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 4
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 4
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 4
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 4
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 5
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 5
34950: PUSH
34951: LD_INT 5
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: LD_INT 5
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 3
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 3
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 4
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 4
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 4
35103: NEG
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 4
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 4
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 5
35159: NEG
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 5
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 5
35182: NEG
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// end ; end ;
35250: GO 35253
35252: POP
// case btype of b_depot , b_warehouse :
35253: LD_VAR 0 1
35257: PUSH
35258: LD_INT 0
35260: DOUBLE
35261: EQUAL
35262: IFTRUE 35272
35264: LD_INT 1
35266: DOUBLE
35267: EQUAL
35268: IFTRUE 35272
35270: GO 35473
35272: POP
// case nation of nation_american :
35273: LD_VAR 0 5
35277: PUSH
35278: LD_INT 1
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35342
35286: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35287: LD_ADDR_VAR 0 9
35291: PUSH
35292: LD_VAR 0 11
35296: PUSH
35297: LD_VAR 0 12
35301: PUSH
35302: LD_VAR 0 13
35306: PUSH
35307: LD_VAR 0 14
35311: PUSH
35312: LD_VAR 0 15
35316: PUSH
35317: LD_VAR 0 16
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_VAR 0 4
35334: PUSH
35335: LD_INT 1
35337: PLUS
35338: ARRAY
35339: ST_TO_ADDR
35340: GO 35471
35342: LD_INT 2
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35350
35348: GO 35406
35350: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35351: LD_ADDR_VAR 0 9
35355: PUSH
35356: LD_VAR 0 17
35360: PUSH
35361: LD_VAR 0 18
35365: PUSH
35366: LD_VAR 0 19
35370: PUSH
35371: LD_VAR 0 20
35375: PUSH
35376: LD_VAR 0 21
35380: PUSH
35381: LD_VAR 0 22
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: PUSH
35394: LD_VAR 0 4
35398: PUSH
35399: LD_INT 1
35401: PLUS
35402: ARRAY
35403: ST_TO_ADDR
35404: GO 35471
35406: LD_INT 3
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35470
35414: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35415: LD_ADDR_VAR 0 9
35419: PUSH
35420: LD_VAR 0 23
35424: PUSH
35425: LD_VAR 0 24
35429: PUSH
35430: LD_VAR 0 25
35434: PUSH
35435: LD_VAR 0 26
35439: PUSH
35440: LD_VAR 0 27
35444: PUSH
35445: LD_VAR 0 28
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: PUSH
35458: LD_VAR 0 4
35462: PUSH
35463: LD_INT 1
35465: PLUS
35466: ARRAY
35467: ST_TO_ADDR
35468: GO 35471
35470: POP
35471: GO 36026
35473: LD_INT 2
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35487
35479: LD_INT 3
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35543
35487: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35488: LD_ADDR_VAR 0 9
35492: PUSH
35493: LD_VAR 0 29
35497: PUSH
35498: LD_VAR 0 30
35502: PUSH
35503: LD_VAR 0 31
35507: PUSH
35508: LD_VAR 0 32
35512: PUSH
35513: LD_VAR 0 33
35517: PUSH
35518: LD_VAR 0 34
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: LD_INT 1
35538: PLUS
35539: ARRAY
35540: ST_TO_ADDR
35541: GO 36026
35543: LD_INT 16
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35605
35549: LD_INT 17
35551: DOUBLE
35552: EQUAL
35553: IFTRUE 35605
35555: LD_INT 18
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35605
35561: LD_INT 19
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35605
35567: LD_INT 22
35569: DOUBLE
35570: EQUAL
35571: IFTRUE 35605
35573: LD_INT 20
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35605
35579: LD_INT 21
35581: DOUBLE
35582: EQUAL
35583: IFTRUE 35605
35585: LD_INT 23
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35605
35591: LD_INT 24
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35605
35597: LD_INT 25
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35605
35603: GO 35661
35605: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35606: LD_ADDR_VAR 0 9
35610: PUSH
35611: LD_VAR 0 35
35615: PUSH
35616: LD_VAR 0 36
35620: PUSH
35621: LD_VAR 0 37
35625: PUSH
35626: LD_VAR 0 38
35630: PUSH
35631: LD_VAR 0 39
35635: PUSH
35636: LD_VAR 0 40
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: PUSH
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 1
35656: PLUS
35657: ARRAY
35658: ST_TO_ADDR
35659: GO 36026
35661: LD_INT 6
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35717
35667: LD_INT 7
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35717
35673: LD_INT 8
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35717
35679: LD_INT 13
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35717
35685: LD_INT 12
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35717
35691: LD_INT 15
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35717
35697: LD_INT 11
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35717
35703: LD_INT 14
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35717
35709: LD_INT 10
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35717
35715: GO 35773
35717: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35718: LD_ADDR_VAR 0 9
35722: PUSH
35723: LD_VAR 0 41
35727: PUSH
35728: LD_VAR 0 42
35732: PUSH
35733: LD_VAR 0 43
35737: PUSH
35738: LD_VAR 0 44
35742: PUSH
35743: LD_VAR 0 45
35747: PUSH
35748: LD_VAR 0 46
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: LD_VAR 0 4
35765: PUSH
35766: LD_INT 1
35768: PLUS
35769: ARRAY
35770: ST_TO_ADDR
35771: GO 36026
35773: LD_INT 36
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 35837
35781: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35782: LD_ADDR_VAR 0 9
35786: PUSH
35787: LD_VAR 0 47
35791: PUSH
35792: LD_VAR 0 48
35796: PUSH
35797: LD_VAR 0 49
35801: PUSH
35802: LD_VAR 0 50
35806: PUSH
35807: LD_VAR 0 51
35811: PUSH
35812: LD_VAR 0 52
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: PUSH
35825: LD_VAR 0 4
35829: PUSH
35830: LD_INT 1
35832: PLUS
35833: ARRAY
35834: ST_TO_ADDR
35835: GO 36026
35837: LD_INT 4
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35863
35843: LD_INT 5
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35863
35849: LD_INT 34
35851: DOUBLE
35852: EQUAL
35853: IFTRUE 35863
35855: LD_INT 37
35857: DOUBLE
35858: EQUAL
35859: IFTRUE 35863
35861: GO 35919
35863: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_VAR 0 53
35873: PUSH
35874: LD_VAR 0 54
35878: PUSH
35879: LD_VAR 0 55
35883: PUSH
35884: LD_VAR 0 56
35888: PUSH
35889: LD_VAR 0 57
35893: PUSH
35894: LD_VAR 0 58
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: PUSH
35907: LD_VAR 0 4
35911: PUSH
35912: LD_INT 1
35914: PLUS
35915: ARRAY
35916: ST_TO_ADDR
35917: GO 36026
35919: LD_INT 31
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35969
35925: LD_INT 32
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35969
35931: LD_INT 33
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35969
35937: LD_INT 27
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35969
35943: LD_INT 26
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35969
35949: LD_INT 28
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35969
35955: LD_INT 29
35957: DOUBLE
35958: EQUAL
35959: IFTRUE 35969
35961: LD_INT 30
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 36025
35969: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_VAR 0 59
35979: PUSH
35980: LD_VAR 0 60
35984: PUSH
35985: LD_VAR 0 61
35989: PUSH
35990: LD_VAR 0 62
35994: PUSH
35995: LD_VAR 0 63
35999: PUSH
36000: LD_VAR 0 64
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: PUSH
36013: LD_VAR 0 4
36017: PUSH
36018: LD_INT 1
36020: PLUS
36021: ARRAY
36022: ST_TO_ADDR
36023: GO 36026
36025: POP
// temp_list2 = [ ] ;
36026: LD_ADDR_VAR 0 10
36030: PUSH
36031: EMPTY
36032: ST_TO_ADDR
// for i in temp_list do
36033: LD_ADDR_VAR 0 8
36037: PUSH
36038: LD_VAR 0 9
36042: PUSH
36043: FOR_IN
36044: IFFALSE 36096
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36046: LD_ADDR_VAR 0 10
36050: PUSH
36051: LD_VAR 0 10
36055: PUSH
36056: LD_VAR 0 8
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: PUSH
36065: LD_VAR 0 2
36069: PLUS
36070: PUSH
36071: LD_VAR 0 8
36075: PUSH
36076: LD_INT 2
36078: ARRAY
36079: PUSH
36080: LD_VAR 0 3
36084: PLUS
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: ADD
36093: ST_TO_ADDR
36094: GO 36043
36096: POP
36097: POP
// result = temp_list2 ;
36098: LD_ADDR_VAR 0 7
36102: PUSH
36103: LD_VAR 0 10
36107: ST_TO_ADDR
// end ;
36108: LD_VAR 0 7
36112: RET
// export function EnemyInRange ( unit , dist ) ; begin
36113: LD_INT 0
36115: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36116: LD_ADDR_VAR 0 3
36120: PUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: CALL_OW 255
36130: PPUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL_OW 250
36140: PPUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 251
36150: PPUSH
36151: LD_VAR 0 2
36155: PPUSH
36156: CALL 9370 0 4
36160: PUSH
36161: LD_INT 4
36163: ARRAY
36164: ST_TO_ADDR
// end ;
36165: LD_VAR 0 3
36169: RET
// export function PlayerSeeMe ( unit ) ; begin
36170: LD_INT 0
36172: PPUSH
// result := See ( your_side , unit ) ;
36173: LD_ADDR_VAR 0 2
36177: PUSH
36178: LD_OWVAR 2
36182: PPUSH
36183: LD_VAR 0 1
36187: PPUSH
36188: CALL_OW 292
36192: ST_TO_ADDR
// end ;
36193: LD_VAR 0 2
36197: RET
// export function ReverseDir ( unit ) ; begin
36198: LD_INT 0
36200: PPUSH
// if not unit then
36201: LD_VAR 0 1
36205: NOT
36206: IFFALSE 36210
// exit ;
36208: GO 36233
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36210: LD_ADDR_VAR 0 2
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 254
36224: PUSH
36225: LD_INT 3
36227: PLUS
36228: PUSH
36229: LD_INT 6
36231: MOD
36232: ST_TO_ADDR
// end ;
36233: LD_VAR 0 2
36237: RET
// export function ReverseArray ( array ) ; var i ; begin
36238: LD_INT 0
36240: PPUSH
36241: PPUSH
// if not array then
36242: LD_VAR 0 1
36246: NOT
36247: IFFALSE 36251
// exit ;
36249: GO 36306
// result := [ ] ;
36251: LD_ADDR_VAR 0 2
36255: PUSH
36256: EMPTY
36257: ST_TO_ADDR
// for i := array downto 1 do
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: DOUBLE
36264: LD_VAR 0 1
36268: INC
36269: ST_TO_ADDR
36270: LD_INT 1
36272: PUSH
36273: FOR_DOWNTO
36274: IFFALSE 36304
// result := Join ( result , array [ i ] ) ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: LD_VAR 0 1
36290: PUSH
36291: LD_VAR 0 3
36295: ARRAY
36296: PPUSH
36297: CALL 41158 0 2
36301: ST_TO_ADDR
36302: GO 36273
36304: POP
36305: POP
// end ;
36306: LD_VAR 0 2
36310: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36311: LD_INT 0
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
// if not unit or not hexes then
36319: LD_VAR 0 1
36323: NOT
36324: IFTRUE 36333
36326: PUSH
36327: LD_VAR 0 2
36331: NOT
36332: OR
36333: IFFALSE 36337
// exit ;
36335: GO 36460
// dist := 9999 ;
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_INT 9999
36344: ST_TO_ADDR
// for i = 1 to hexes do
36345: LD_ADDR_VAR 0 4
36349: PUSH
36350: DOUBLE
36351: LD_INT 1
36353: DEC
36354: ST_TO_ADDR
36355: LD_VAR 0 2
36359: PUSH
36360: FOR_TO
36361: IFFALSE 36448
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36363: LD_ADDR_VAR 0 6
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: LD_VAR 0 2
36377: PUSH
36378: LD_VAR 0 4
36382: ARRAY
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PPUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_VAR 0 4
36397: ARRAY
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: PPUSH
36403: CALL_OW 297
36407: ST_TO_ADDR
// if tdist < dist then
36408: LD_VAR 0 6
36412: PUSH
36413: LD_VAR 0 5
36417: LESS
36418: IFFALSE 36446
// begin hex := hexes [ i ] ;
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_VAR 0 4
36434: ARRAY
36435: ST_TO_ADDR
// dist := tdist ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: LD_VAR 0 6
36445: ST_TO_ADDR
// end ; end ;
36446: GO 36360
36448: POP
36449: POP
// result := hex ;
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_VAR 0 8
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 3
36464: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36469: LD_VAR 0 1
36473: NOT
36474: IFTRUE 36513
36476: PUSH
36477: LD_VAR 0 1
36481: PUSH
36482: LD_INT 21
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 23
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PPUSH
36506: CALL_OW 69
36510: IN
36511: NOT
36512: OR
36513: IFFALSE 36517
// exit ;
36515: GO 36564
// for i = 1 to 3 do
36517: LD_ADDR_VAR 0 3
36521: PUSH
36522: DOUBLE
36523: LD_INT 1
36525: DEC
36526: ST_TO_ADDR
36527: LD_INT 3
36529: PUSH
36530: FOR_TO
36531: IFFALSE 36562
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 250
36542: PPUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 251
36552: PPUSH
36553: LD_INT 1
36555: PPUSH
36556: CALL_OW 453
36560: GO 36530
36562: POP
36563: POP
// end ;
36564: LD_VAR 0 2
36568: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36569: LD_INT 0
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
// if not unit or not enemy_unit then
36577: LD_VAR 0 1
36581: NOT
36582: IFTRUE 36591
36584: PUSH
36585: LD_VAR 0 2
36589: NOT
36590: OR
36591: IFFALSE 36595
// exit ;
36593: GO 37076
// if GetLives ( i ) < 250 then
36595: LD_VAR 0 4
36599: PPUSH
36600: CALL_OW 256
36604: PUSH
36605: LD_INT 250
36607: LESS
36608: IFFALSE 36621
// begin ComAutodestruct ( i ) ;
36610: LD_VAR 0 4
36614: PPUSH
36615: CALL 36465 0 1
// exit ;
36619: GO 37076
// end ; x := GetX ( enemy_unit ) ;
36621: LD_ADDR_VAR 0 7
36625: PUSH
36626: LD_VAR 0 2
36630: PPUSH
36631: CALL_OW 250
36635: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36636: LD_ADDR_VAR 0 8
36640: PUSH
36641: LD_VAR 0 2
36645: PPUSH
36646: CALL_OW 251
36650: ST_TO_ADDR
// if not x or not y then
36651: LD_VAR 0 7
36655: NOT
36656: IFTRUE 36665
36658: PUSH
36659: LD_VAR 0 8
36663: NOT
36664: OR
36665: IFFALSE 36669
// exit ;
36667: GO 37076
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36669: LD_ADDR_VAR 0 6
36673: PUSH
36674: LD_VAR 0 7
36678: PPUSH
36679: LD_INT 0
36681: PPUSH
36682: LD_INT 4
36684: PPUSH
36685: CALL_OW 272
36689: PUSH
36690: LD_VAR 0 8
36694: PPUSH
36695: LD_INT 0
36697: PPUSH
36698: LD_INT 4
36700: PPUSH
36701: CALL_OW 273
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_VAR 0 7
36714: PPUSH
36715: LD_INT 1
36717: PPUSH
36718: LD_INT 4
36720: PPUSH
36721: CALL_OW 272
36725: PUSH
36726: LD_VAR 0 8
36730: PPUSH
36731: LD_INT 1
36733: PPUSH
36734: LD_INT 4
36736: PPUSH
36737: CALL_OW 273
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_VAR 0 7
36750: PPUSH
36751: LD_INT 2
36753: PPUSH
36754: LD_INT 4
36756: PPUSH
36757: CALL_OW 272
36761: PUSH
36762: LD_VAR 0 8
36766: PPUSH
36767: LD_INT 2
36769: PPUSH
36770: LD_INT 4
36772: PPUSH
36773: CALL_OW 273
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_VAR 0 7
36786: PPUSH
36787: LD_INT 3
36789: PPUSH
36790: LD_INT 4
36792: PPUSH
36793: CALL_OW 272
36797: PUSH
36798: LD_VAR 0 8
36802: PPUSH
36803: LD_INT 3
36805: PPUSH
36806: LD_INT 4
36808: PPUSH
36809: CALL_OW 273
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_INT 4
36825: PPUSH
36826: LD_INT 4
36828: PPUSH
36829: CALL_OW 272
36833: PUSH
36834: LD_VAR 0 8
36838: PPUSH
36839: LD_INT 4
36841: PPUSH
36842: LD_INT 4
36844: PPUSH
36845: CALL_OW 273
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_VAR 0 7
36858: PPUSH
36859: LD_INT 5
36861: PPUSH
36862: LD_INT 4
36864: PPUSH
36865: CALL_OW 272
36869: PUSH
36870: LD_VAR 0 8
36874: PPUSH
36875: LD_INT 5
36877: PPUSH
36878: LD_INT 4
36880: PPUSH
36881: CALL_OW 273
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
// for i = tmp downto 1 do
36898: LD_ADDR_VAR 0 4
36902: PUSH
36903: DOUBLE
36904: LD_VAR 0 6
36908: INC
36909: ST_TO_ADDR
36910: LD_INT 1
36912: PUSH
36913: FOR_DOWNTO
36914: IFFALSE 37017
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36916: LD_VAR 0 6
36920: PUSH
36921: LD_VAR 0 4
36925: ARRAY
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PPUSH
36931: LD_VAR 0 6
36935: PUSH
36936: LD_VAR 0 4
36940: ARRAY
36941: PUSH
36942: LD_INT 2
36944: ARRAY
36945: PPUSH
36946: CALL_OW 488
36950: NOT
36951: IFTRUE 36993
36953: PUSH
36954: LD_VAR 0 6
36958: PUSH
36959: LD_VAR 0 4
36963: ARRAY
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: PPUSH
36969: LD_VAR 0 6
36973: PUSH
36974: LD_VAR 0 4
36978: ARRAY
36979: PUSH
36980: LD_INT 2
36982: ARRAY
36983: PPUSH
36984: CALL_OW 428
36988: PUSH
36989: LD_INT 0
36991: NONEQUAL
36992: OR
36993: IFFALSE 37015
// tmp := Delete ( tmp , i ) ;
36995: LD_ADDR_VAR 0 6
36999: PUSH
37000: LD_VAR 0 6
37004: PPUSH
37005: LD_VAR 0 4
37009: PPUSH
37010: CALL_OW 3
37014: ST_TO_ADDR
37015: GO 36913
37017: POP
37018: POP
// j := GetClosestHex ( unit , tmp ) ;
37019: LD_ADDR_VAR 0 5
37023: PUSH
37024: LD_VAR 0 1
37028: PPUSH
37029: LD_VAR 0 6
37033: PPUSH
37034: CALL 36311 0 2
37038: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 5
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 5
37057: PUSH
37058: LD_INT 2
37060: ARRAY
37061: PPUSH
37062: CALL_OW 111
// result := j ;
37066: LD_ADDR_VAR 0 3
37070: PUSH
37071: LD_VAR 0 5
37075: ST_TO_ADDR
// end ;
37076: LD_VAR 0 3
37080: RET
// export function PrepareApemanSoldier ( ) ; begin
37081: LD_INT 0
37083: PPUSH
// uc_nation := 0 ;
37084: LD_ADDR_OWVAR 21
37088: PUSH
37089: LD_INT 0
37091: ST_TO_ADDR
// hc_sex := sex_male ;
37092: LD_ADDR_OWVAR 27
37096: PUSH
37097: LD_INT 1
37099: ST_TO_ADDR
// hc_name :=  ;
37100: LD_ADDR_OWVAR 26
37104: PUSH
37105: LD_STRING 
37107: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37108: LD_ADDR_OWVAR 28
37112: PUSH
37113: LD_INT 15
37115: ST_TO_ADDR
// hc_gallery :=  ;
37116: LD_ADDR_OWVAR 33
37120: PUSH
37121: LD_STRING 
37123: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37124: LD_ADDR_OWVAR 31
37128: PUSH
37129: LD_INT 0
37131: PPUSH
37132: LD_INT 3
37134: PPUSH
37135: CALL_OW 12
37139: PUSH
37140: LD_INT 0
37142: PPUSH
37143: LD_INT 3
37145: PPUSH
37146: CALL_OW 12
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37163: LD_ADDR_OWVAR 29
37167: PUSH
37168: LD_INT 10
37170: PUSH
37171: LD_INT 12
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// end ;
37178: LD_VAR 0 1
37182: RET
// export function PrepareApemanEngineer ( ) ; begin
37183: LD_INT 0
37185: PPUSH
// uc_nation := 0 ;
37186: LD_ADDR_OWVAR 21
37190: PUSH
37191: LD_INT 0
37193: ST_TO_ADDR
// hc_sex := sex_male ;
37194: LD_ADDR_OWVAR 27
37198: PUSH
37199: LD_INT 1
37201: ST_TO_ADDR
// hc_name :=  ;
37202: LD_ADDR_OWVAR 26
37206: PUSH
37207: LD_STRING 
37209: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37210: LD_ADDR_OWVAR 28
37214: PUSH
37215: LD_INT 16
37217: ST_TO_ADDR
// hc_gallery :=  ;
37218: LD_ADDR_OWVAR 33
37222: PUSH
37223: LD_STRING 
37225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37226: LD_ADDR_OWVAR 31
37230: PUSH
37231: LD_INT 0
37233: PPUSH
37234: LD_INT 3
37236: PPUSH
37237: CALL_OW 12
37241: PUSH
37242: LD_INT 0
37244: PPUSH
37245: LD_INT 3
37247: PPUSH
37248: CALL_OW 12
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37265: LD_ADDR_OWVAR 29
37269: PUSH
37270: LD_INT 10
37272: PUSH
37273: LD_INT 12
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// end ;
37280: LD_VAR 0 1
37284: RET
// export function PrepareApeman ( agressivity ) ; begin
37285: LD_INT 0
37287: PPUSH
// uc_side := 0 ;
37288: LD_ADDR_OWVAR 20
37292: PUSH
37293: LD_INT 0
37295: ST_TO_ADDR
// uc_nation := 0 ;
37296: LD_ADDR_OWVAR 21
37300: PUSH
37301: LD_INT 0
37303: ST_TO_ADDR
// hc_sex := sex_male ;
37304: LD_ADDR_OWVAR 27
37308: PUSH
37309: LD_INT 1
37311: ST_TO_ADDR
// hc_class := class_apeman ;
37312: LD_ADDR_OWVAR 28
37316: PUSH
37317: LD_INT 12
37319: ST_TO_ADDR
// hc_gallery :=  ;
37320: LD_ADDR_OWVAR 33
37324: PUSH
37325: LD_STRING 
37327: ST_TO_ADDR
// hc_name :=  ;
37328: LD_ADDR_OWVAR 26
37332: PUSH
37333: LD_STRING 
37335: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37336: LD_ADDR_OWVAR 29
37340: PUSH
37341: LD_INT 10
37343: PUSH
37344: LD_INT 12
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// if agressivity = 0 then
37351: LD_VAR 0 1
37355: PUSH
37356: LD_INT 0
37358: EQUAL
37359: IFFALSE 37371
// hc_agressivity := 0 else
37361: LD_ADDR_OWVAR 35
37365: PUSH
37366: LD_INT 0
37368: ST_TO_ADDR
37369: GO 37392
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37371: LD_ADDR_OWVAR 35
37375: PUSH
37376: LD_VAR 0 1
37380: NEG
37381: PPUSH
37382: LD_VAR 0 1
37386: PPUSH
37387: CALL_OW 12
37391: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37392: LD_ADDR_OWVAR 31
37396: PUSH
37397: LD_INT 0
37399: PPUSH
37400: LD_INT 3
37402: PPUSH
37403: CALL_OW 12
37407: PUSH
37408: LD_INT 0
37410: PPUSH
37411: LD_INT 3
37413: PPUSH
37414: CALL_OW 12
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// end ;
37431: LD_VAR 0 2
37435: RET
// export function PrepareTiger ( agressivity ) ; begin
37436: LD_INT 0
37438: PPUSH
// uc_side := 0 ;
37439: LD_ADDR_OWVAR 20
37443: PUSH
37444: LD_INT 0
37446: ST_TO_ADDR
// uc_nation := 0 ;
37447: LD_ADDR_OWVAR 21
37451: PUSH
37452: LD_INT 0
37454: ST_TO_ADDR
// InitHc ;
37455: CALL_OW 19
// hc_class := class_tiger ;
37459: LD_ADDR_OWVAR 28
37463: PUSH
37464: LD_INT 14
37466: ST_TO_ADDR
// hc_gallery :=  ;
37467: LD_ADDR_OWVAR 33
37471: PUSH
37472: LD_STRING 
37474: ST_TO_ADDR
// hc_name :=  ;
37475: LD_ADDR_OWVAR 26
37479: PUSH
37480: LD_STRING 
37482: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37483: LD_ADDR_OWVAR 35
37487: PUSH
37488: LD_VAR 0 1
37492: NEG
37493: PPUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 12
37503: ST_TO_ADDR
// end ;
37504: LD_VAR 0 2
37508: RET
// export function PrepareEnchidna ( ) ; begin
37509: LD_INT 0
37511: PPUSH
// uc_side := 0 ;
37512: LD_ADDR_OWVAR 20
37516: PUSH
37517: LD_INT 0
37519: ST_TO_ADDR
// uc_nation := 0 ;
37520: LD_ADDR_OWVAR 21
37524: PUSH
37525: LD_INT 0
37527: ST_TO_ADDR
// InitHc ;
37528: CALL_OW 19
// hc_class := class_baggie ;
37532: LD_ADDR_OWVAR 28
37536: PUSH
37537: LD_INT 13
37539: ST_TO_ADDR
// hc_gallery :=  ;
37540: LD_ADDR_OWVAR 33
37544: PUSH
37545: LD_STRING 
37547: ST_TO_ADDR
// hc_name :=  ;
37548: LD_ADDR_OWVAR 26
37552: PUSH
37553: LD_STRING 
37555: ST_TO_ADDR
// end ;
37556: LD_VAR 0 1
37560: RET
// export function PrepareFrog ( ) ; begin
37561: LD_INT 0
37563: PPUSH
// uc_side := 0 ;
37564: LD_ADDR_OWVAR 20
37568: PUSH
37569: LD_INT 0
37571: ST_TO_ADDR
// uc_nation := 0 ;
37572: LD_ADDR_OWVAR 21
37576: PUSH
37577: LD_INT 0
37579: ST_TO_ADDR
// InitHc ;
37580: CALL_OW 19
// hc_class := class_frog ;
37584: LD_ADDR_OWVAR 28
37588: PUSH
37589: LD_INT 19
37591: ST_TO_ADDR
// hc_gallery :=  ;
37592: LD_ADDR_OWVAR 33
37596: PUSH
37597: LD_STRING 
37599: ST_TO_ADDR
// hc_name :=  ;
37600: LD_ADDR_OWVAR 26
37604: PUSH
37605: LD_STRING 
37607: ST_TO_ADDR
// end ;
37608: LD_VAR 0 1
37612: RET
// export function PrepareFish ( ) ; begin
37613: LD_INT 0
37615: PPUSH
// uc_side := 0 ;
37616: LD_ADDR_OWVAR 20
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
// uc_nation := 0 ;
37624: LD_ADDR_OWVAR 21
37628: PUSH
37629: LD_INT 0
37631: ST_TO_ADDR
// InitHc ;
37632: CALL_OW 19
// hc_class := class_fish ;
37636: LD_ADDR_OWVAR 28
37640: PUSH
37641: LD_INT 20
37643: ST_TO_ADDR
// hc_gallery :=  ;
37644: LD_ADDR_OWVAR 33
37648: PUSH
37649: LD_STRING 
37651: ST_TO_ADDR
// hc_name :=  ;
37652: LD_ADDR_OWVAR 26
37656: PUSH
37657: LD_STRING 
37659: ST_TO_ADDR
// end ;
37660: LD_VAR 0 1
37664: RET
// export function PrepareBird ( ) ; begin
37665: LD_INT 0
37667: PPUSH
// uc_side := 0 ;
37668: LD_ADDR_OWVAR 20
37672: PUSH
37673: LD_INT 0
37675: ST_TO_ADDR
// uc_nation := 0 ;
37676: LD_ADDR_OWVAR 21
37680: PUSH
37681: LD_INT 0
37683: ST_TO_ADDR
// InitHc ;
37684: CALL_OW 19
// hc_class := class_phororhacos ;
37688: LD_ADDR_OWVAR 28
37692: PUSH
37693: LD_INT 18
37695: ST_TO_ADDR
// hc_gallery :=  ;
37696: LD_ADDR_OWVAR 33
37700: PUSH
37701: LD_STRING 
37703: ST_TO_ADDR
// hc_name :=  ;
37704: LD_ADDR_OWVAR 26
37708: PUSH
37709: LD_STRING 
37711: ST_TO_ADDR
// end ;
37712: LD_VAR 0 1
37716: RET
// export function PrepareHorse ( ) ; begin
37717: LD_INT 0
37719: PPUSH
// uc_side := 0 ;
37720: LD_ADDR_OWVAR 20
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// uc_nation := 0 ;
37728: LD_ADDR_OWVAR 21
37732: PUSH
37733: LD_INT 0
37735: ST_TO_ADDR
// InitHc ;
37736: CALL_OW 19
// hc_class := class_horse ;
37740: LD_ADDR_OWVAR 28
37744: PUSH
37745: LD_INT 21
37747: ST_TO_ADDR
// hc_gallery :=  ;
37748: LD_ADDR_OWVAR 33
37752: PUSH
37753: LD_STRING 
37755: ST_TO_ADDR
// hc_name :=  ;
37756: LD_ADDR_OWVAR 26
37760: PUSH
37761: LD_STRING 
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 1
37768: RET
// export function PrepareMastodont ( ) ; begin
37769: LD_INT 0
37771: PPUSH
// uc_side := 0 ;
37772: LD_ADDR_OWVAR 20
37776: PUSH
37777: LD_INT 0
37779: ST_TO_ADDR
// uc_nation := 0 ;
37780: LD_ADDR_OWVAR 21
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37788: LD_ADDR_OWVAR 37
37792: PUSH
37793: LD_INT 31
37795: ST_TO_ADDR
// vc_control := control_rider ;
37796: LD_ADDR_OWVAR 38
37800: PUSH
37801: LD_INT 4
37803: ST_TO_ADDR
// end ;
37804: LD_VAR 0 1
37808: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37809: LD_INT 0
37811: PPUSH
37812: PPUSH
37813: PPUSH
// uc_side = 0 ;
37814: LD_ADDR_OWVAR 20
37818: PUSH
37819: LD_INT 0
37821: ST_TO_ADDR
// uc_nation = 0 ;
37822: LD_ADDR_OWVAR 21
37826: PUSH
37827: LD_INT 0
37829: ST_TO_ADDR
// InitHc_All ( ) ;
37830: CALL_OW 584
// InitVc ;
37834: CALL_OW 20
// if mastodonts then
37838: LD_VAR 0 6
37842: IFFALSE 37909
// for i = 1 to mastodonts do
37844: LD_ADDR_VAR 0 11
37848: PUSH
37849: DOUBLE
37850: LD_INT 1
37852: DEC
37853: ST_TO_ADDR
37854: LD_VAR 0 6
37858: PUSH
37859: FOR_TO
37860: IFFALSE 37907
// begin vc_chassis := 31 ;
37862: LD_ADDR_OWVAR 37
37866: PUSH
37867: LD_INT 31
37869: ST_TO_ADDR
// vc_control := control_rider ;
37870: LD_ADDR_OWVAR 38
37874: PUSH
37875: LD_INT 4
37877: ST_TO_ADDR
// animal := CreateVehicle ;
37878: LD_ADDR_VAR 0 12
37882: PUSH
37883: CALL_OW 45
37887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37888: LD_VAR 0 12
37892: PPUSH
37893: LD_VAR 0 8
37897: PPUSH
37898: LD_INT 0
37900: PPUSH
37901: CALL 40051 0 3
// end ;
37905: GO 37859
37907: POP
37908: POP
// if horses then
37909: LD_VAR 0 5
37913: IFFALSE 37980
// for i = 1 to horses do
37915: LD_ADDR_VAR 0 11
37919: PUSH
37920: DOUBLE
37921: LD_INT 1
37923: DEC
37924: ST_TO_ADDR
37925: LD_VAR 0 5
37929: PUSH
37930: FOR_TO
37931: IFFALSE 37978
// begin hc_class := 21 ;
37933: LD_ADDR_OWVAR 28
37937: PUSH
37938: LD_INT 21
37940: ST_TO_ADDR
// hc_gallery :=  ;
37941: LD_ADDR_OWVAR 33
37945: PUSH
37946: LD_STRING 
37948: ST_TO_ADDR
// animal := CreateHuman ;
37949: LD_ADDR_VAR 0 12
37953: PUSH
37954: CALL_OW 44
37958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37959: LD_VAR 0 12
37963: PPUSH
37964: LD_VAR 0 8
37968: PPUSH
37969: LD_INT 0
37971: PPUSH
37972: CALL 40051 0 3
// end ;
37976: GO 37930
37978: POP
37979: POP
// if birds then
37980: LD_VAR 0 1
37984: IFFALSE 38051
// for i = 1 to birds do
37986: LD_ADDR_VAR 0 11
37990: PUSH
37991: DOUBLE
37992: LD_INT 1
37994: DEC
37995: ST_TO_ADDR
37996: LD_VAR 0 1
38000: PUSH
38001: FOR_TO
38002: IFFALSE 38049
// begin hc_class := 18 ;
38004: LD_ADDR_OWVAR 28
38008: PUSH
38009: LD_INT 18
38011: ST_TO_ADDR
// hc_gallery =  ;
38012: LD_ADDR_OWVAR 33
38016: PUSH
38017: LD_STRING 
38019: ST_TO_ADDR
// animal := CreateHuman ;
38020: LD_ADDR_VAR 0 12
38024: PUSH
38025: CALL_OW 44
38029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38030: LD_VAR 0 12
38034: PPUSH
38035: LD_VAR 0 8
38039: PPUSH
38040: LD_INT 0
38042: PPUSH
38043: CALL 40051 0 3
// end ;
38047: GO 38001
38049: POP
38050: POP
// if tigers then
38051: LD_VAR 0 2
38055: IFFALSE 38139
// for i = 1 to tigers do
38057: LD_ADDR_VAR 0 11
38061: PUSH
38062: DOUBLE
38063: LD_INT 1
38065: DEC
38066: ST_TO_ADDR
38067: LD_VAR 0 2
38071: PUSH
38072: FOR_TO
38073: IFFALSE 38137
// begin hc_class = class_tiger ;
38075: LD_ADDR_OWVAR 28
38079: PUSH
38080: LD_INT 14
38082: ST_TO_ADDR
// hc_gallery =  ;
38083: LD_ADDR_OWVAR 33
38087: PUSH
38088: LD_STRING 
38090: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38091: LD_ADDR_OWVAR 35
38095: PUSH
38096: LD_INT 7
38098: NEG
38099: PPUSH
38100: LD_INT 7
38102: PPUSH
38103: CALL_OW 12
38107: ST_TO_ADDR
// animal := CreateHuman ;
38108: LD_ADDR_VAR 0 12
38112: PUSH
38113: CALL_OW 44
38117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38118: LD_VAR 0 12
38122: PPUSH
38123: LD_VAR 0 8
38127: PPUSH
38128: LD_INT 0
38130: PPUSH
38131: CALL 40051 0 3
// end ;
38135: GO 38072
38137: POP
38138: POP
// if apemans then
38139: LD_VAR 0 3
38143: IFFALSE 38266
// for i = 1 to apemans do
38145: LD_ADDR_VAR 0 11
38149: PUSH
38150: DOUBLE
38151: LD_INT 1
38153: DEC
38154: ST_TO_ADDR
38155: LD_VAR 0 3
38159: PUSH
38160: FOR_TO
38161: IFFALSE 38264
// begin hc_class = class_apeman ;
38163: LD_ADDR_OWVAR 28
38167: PUSH
38168: LD_INT 12
38170: ST_TO_ADDR
// hc_gallery =  ;
38171: LD_ADDR_OWVAR 33
38175: PUSH
38176: LD_STRING 
38178: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38179: LD_ADDR_OWVAR 35
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PPUSH
38188: LD_INT 2
38190: PPUSH
38191: CALL_OW 12
38195: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38196: LD_ADDR_OWVAR 31
38200: PUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_INT 3
38206: PPUSH
38207: CALL_OW 12
38211: PUSH
38212: LD_INT 1
38214: PPUSH
38215: LD_INT 3
38217: PPUSH
38218: CALL_OW 12
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// animal := CreateHuman ;
38235: LD_ADDR_VAR 0 12
38239: PUSH
38240: CALL_OW 44
38244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38245: LD_VAR 0 12
38249: PPUSH
38250: LD_VAR 0 8
38254: PPUSH
38255: LD_INT 0
38257: PPUSH
38258: CALL 40051 0 3
// end ;
38262: GO 38160
38264: POP
38265: POP
// if enchidnas then
38266: LD_VAR 0 4
38270: IFFALSE 38337
// for i = 1 to enchidnas do
38272: LD_ADDR_VAR 0 11
38276: PUSH
38277: DOUBLE
38278: LD_INT 1
38280: DEC
38281: ST_TO_ADDR
38282: LD_VAR 0 4
38286: PUSH
38287: FOR_TO
38288: IFFALSE 38335
// begin hc_class = 13 ;
38290: LD_ADDR_OWVAR 28
38294: PUSH
38295: LD_INT 13
38297: ST_TO_ADDR
// hc_gallery =  ;
38298: LD_ADDR_OWVAR 33
38302: PUSH
38303: LD_STRING 
38305: ST_TO_ADDR
// animal := CreateHuman ;
38306: LD_ADDR_VAR 0 12
38310: PUSH
38311: CALL_OW 44
38315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38316: LD_VAR 0 12
38320: PPUSH
38321: LD_VAR 0 8
38325: PPUSH
38326: LD_INT 0
38328: PPUSH
38329: CALL 40051 0 3
// end ;
38333: GO 38287
38335: POP
38336: POP
// if fishes then
38337: LD_VAR 0 7
38341: IFFALSE 38408
// for i = 1 to fishes do
38343: LD_ADDR_VAR 0 11
38347: PUSH
38348: DOUBLE
38349: LD_INT 1
38351: DEC
38352: ST_TO_ADDR
38353: LD_VAR 0 7
38357: PUSH
38358: FOR_TO
38359: IFFALSE 38406
// begin hc_class = 20 ;
38361: LD_ADDR_OWVAR 28
38365: PUSH
38366: LD_INT 20
38368: ST_TO_ADDR
// hc_gallery =  ;
38369: LD_ADDR_OWVAR 33
38373: PUSH
38374: LD_STRING 
38376: ST_TO_ADDR
// animal := CreateHuman ;
38377: LD_ADDR_VAR 0 12
38381: PUSH
38382: CALL_OW 44
38386: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38387: LD_VAR 0 12
38391: PPUSH
38392: LD_VAR 0 9
38396: PPUSH
38397: LD_INT 0
38399: PPUSH
38400: CALL 40051 0 3
// end ;
38404: GO 38358
38406: POP
38407: POP
// end ;
38408: LD_VAR 0 10
38412: RET
// export function WantHeal ( sci , unit ) ; begin
38413: LD_INT 0
38415: PPUSH
// if GetTaskList ( sci ) > 0 then
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 437
38425: PUSH
38426: LD_INT 0
38428: GREATER
38429: IFFALSE 38501
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 437
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: PUSH
38449: LD_STRING l
38451: EQUAL
38452: IFFALSE 38479
38454: PUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 437
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: PUSH
38469: LD_INT 4
38471: ARRAY
38472: PUSH
38473: LD_VAR 0 2
38477: EQUAL
38478: AND
38479: IFFALSE 38491
// result := true else
38481: LD_ADDR_VAR 0 3
38485: PUSH
38486: LD_INT 1
38488: ST_TO_ADDR
38489: GO 38499
// result := false ;
38491: LD_ADDR_VAR 0 3
38495: PUSH
38496: LD_INT 0
38498: ST_TO_ADDR
// end else
38499: GO 38509
// result := false ;
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_INT 0
38508: ST_TO_ADDR
// end ;
38509: LD_VAR 0 3
38513: RET
// export function HealTarget ( sci ) ; begin
38514: LD_INT 0
38516: PPUSH
// if not sci then
38517: LD_VAR 0 1
38521: NOT
38522: IFFALSE 38526
// exit ;
38524: GO 38591
// result := 0 ;
38526: LD_ADDR_VAR 0 2
38530: PUSH
38531: LD_INT 0
38533: ST_TO_ADDR
// if GetTaskList ( sci ) then
38534: LD_VAR 0 1
38538: PPUSH
38539: CALL_OW 437
38543: IFFALSE 38591
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 437
38554: PUSH
38555: LD_INT 1
38557: ARRAY
38558: PUSH
38559: LD_INT 1
38561: ARRAY
38562: PUSH
38563: LD_STRING l
38565: EQUAL
38566: IFFALSE 38591
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38568: LD_ADDR_VAR 0 2
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 437
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: PUSH
38587: LD_INT 4
38589: ARRAY
38590: ST_TO_ADDR
// end ;
38591: LD_VAR 0 2
38595: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38596: LD_INT 0
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
// if not base_units then
38602: LD_VAR 0 1
38606: NOT
38607: IFFALSE 38611
// exit ;
38609: GO 38698
// result := false ;
38611: LD_ADDR_VAR 0 2
38615: PUSH
38616: LD_INT 0
38618: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_INT 21
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PPUSH
38639: CALL_OW 72
38643: ST_TO_ADDR
// if not tmp then
38644: LD_VAR 0 5
38648: NOT
38649: IFFALSE 38653
// exit ;
38651: GO 38698
// for i in tmp do
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_VAR 0 5
38662: PUSH
38663: FOR_IN
38664: IFFALSE 38696
// begin result := EnemyInRange ( i , 22 ) ;
38666: LD_ADDR_VAR 0 2
38670: PUSH
38671: LD_VAR 0 3
38675: PPUSH
38676: LD_INT 22
38678: PPUSH
38679: CALL 36113 0 2
38683: ST_TO_ADDR
// if result then
38684: LD_VAR 0 2
38688: IFFALSE 38694
// exit ;
38690: POP
38691: POP
38692: GO 38698
// end ;
38694: GO 38663
38696: POP
38697: POP
// end ;
38698: LD_VAR 0 2
38702: RET
// export function FilterByTag ( units , tag ) ; begin
38703: LD_INT 0
38705: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38706: LD_ADDR_VAR 0 3
38710: PUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: LD_INT 120
38718: PUSH
38719: LD_VAR 0 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PPUSH
38728: CALL_OW 72
38732: ST_TO_ADDR
// end ;
38733: LD_VAR 0 3
38737: RET
// export function IsDriver ( un ) ; begin
38738: LD_INT 0
38740: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38741: LD_ADDR_VAR 0 2
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_INT 55
38753: PUSH
38754: EMPTY
38755: LIST
38756: PPUSH
38757: CALL_OW 69
38761: IN
38762: ST_TO_ADDR
// end ;
38763: LD_VAR 0 2
38767: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38768: LD_INT 0
38770: PPUSH
38771: PPUSH
// list := [ ] ;
38772: LD_ADDR_VAR 0 5
38776: PUSH
38777: EMPTY
38778: ST_TO_ADDR
// case d of 0 :
38779: LD_VAR 0 3
38783: PUSH
38784: LD_INT 0
38786: DOUBLE
38787: EQUAL
38788: IFTRUE 38792
38790: GO 38925
38792: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38793: LD_ADDR_VAR 0 5
38797: PUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_INT 4
38805: MINUS
38806: PUSH
38807: LD_VAR 0 2
38811: PUSH
38812: LD_INT 4
38814: MINUS
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: PUSH
38824: LD_VAR 0 1
38828: PUSH
38829: LD_INT 3
38831: MINUS
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: PUSH
38846: LD_VAR 0 1
38850: PUSH
38851: LD_INT 4
38853: PLUS
38854: PUSH
38855: LD_VAR 0 2
38859: PUSH
38860: LD_INT 4
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 3
38875: PLUS
38876: PUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 3
38884: PLUS
38885: PUSH
38886: LD_INT 5
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: PUSH
38894: LD_VAR 0 1
38898: PUSH
38899: LD_VAR 0 2
38903: PUSH
38904: LD_INT 4
38906: PLUS
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// end ; 1 :
38923: GO 39623
38925: LD_INT 1
38927: DOUBLE
38928: EQUAL
38929: IFTRUE 38933
38931: GO 39066
38933: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38934: LD_ADDR_VAR 0 5
38938: PUSH
38939: LD_VAR 0 1
38943: PUSH
38944: LD_VAR 0 2
38948: PUSH
38949: LD_INT 4
38951: MINUS
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: PUSH
38961: LD_VAR 0 1
38965: PUSH
38966: LD_INT 3
38968: MINUS
38969: PUSH
38970: LD_VAR 0 2
38974: PUSH
38975: LD_INT 3
38977: MINUS
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: PUSH
38987: LD_VAR 0 1
38991: PUSH
38992: LD_INT 4
38994: MINUS
38995: PUSH
38996: LD_VAR 0 2
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: PUSH
39009: LD_VAR 0 1
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_INT 3
39021: PLUS
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_INT 4
39038: PLUS
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 4
39047: PLUS
39048: PUSH
39049: LD_INT 5
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
// end ; 2 :
39064: GO 39623
39066: LD_INT 2
39068: DOUBLE
39069: EQUAL
39070: IFTRUE 39074
39072: GO 39203
39074: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39075: LD_ADDR_VAR 0 5
39079: PUSH
39080: LD_VAR 0 1
39084: PUSH
39085: LD_VAR 0 2
39089: PUSH
39090: LD_INT 3
39092: MINUS
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: PUSH
39102: LD_VAR 0 1
39106: PUSH
39107: LD_INT 4
39109: PLUS
39110: PUSH
39111: LD_VAR 0 2
39115: PUSH
39116: LD_INT 4
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: LD_VAR 0 1
39128: PUSH
39129: LD_VAR 0 2
39133: PUSH
39134: LD_INT 4
39136: PLUS
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_INT 3
39153: MINUS
39154: PUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: PUSH
39168: LD_VAR 0 1
39172: PUSH
39173: LD_INT 4
39175: MINUS
39176: PUSH
39177: LD_VAR 0 2
39181: PUSH
39182: LD_INT 4
39184: MINUS
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// end ; 3 :
39201: GO 39623
39203: LD_INT 3
39205: DOUBLE
39206: EQUAL
39207: IFTRUE 39211
39209: GO 39344
39211: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39212: LD_ADDR_VAR 0 5
39216: PUSH
39217: LD_VAR 0 1
39221: PUSH
39222: LD_INT 3
39224: PLUS
39225: PUSH
39226: LD_VAR 0 2
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: PUSH
39239: LD_VAR 0 1
39243: PUSH
39244: LD_INT 4
39246: PLUS
39247: PUSH
39248: LD_VAR 0 2
39252: PUSH
39253: LD_INT 4
39255: PLUS
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: PUSH
39265: LD_VAR 0 1
39269: PUSH
39270: LD_INT 4
39272: MINUS
39273: PUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: PUSH
39287: LD_VAR 0 1
39291: PUSH
39292: LD_VAR 0 2
39296: PUSH
39297: LD_INT 4
39299: MINUS
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PUSH
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 3
39316: MINUS
39317: PUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_INT 3
39325: MINUS
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
// end ; 4 :
39342: GO 39623
39344: LD_INT 4
39346: DOUBLE
39347: EQUAL
39348: IFTRUE 39352
39350: GO 39485
39352: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39353: LD_ADDR_VAR 0 5
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_VAR 0 2
39367: PUSH
39368: LD_INT 4
39370: PLUS
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: PUSH
39380: LD_VAR 0 1
39384: PUSH
39385: LD_INT 3
39387: PLUS
39388: PUSH
39389: LD_VAR 0 2
39393: PUSH
39394: LD_INT 3
39396: PLUS
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: PUSH
39406: LD_VAR 0 1
39410: PUSH
39411: LD_INT 4
39413: PLUS
39414: PUSH
39415: LD_VAR 0 2
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: PUSH
39428: LD_VAR 0 1
39432: PUSH
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 3
39440: MINUS
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: LD_INT 4
39457: MINUS
39458: PUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_INT 4
39466: MINUS
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
// end ; 5 :
39483: GO 39623
39485: LD_INT 5
39487: DOUBLE
39488: EQUAL
39489: IFTRUE 39493
39491: GO 39622
39493: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: LD_VAR 0 1
39503: PUSH
39504: LD_INT 4
39506: MINUS
39507: PUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: PUSH
39521: LD_VAR 0 1
39525: PUSH
39526: LD_VAR 0 2
39530: PUSH
39531: LD_INT 4
39533: MINUS
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: PUSH
39543: LD_VAR 0 1
39547: PUSH
39548: LD_INT 4
39550: PLUS
39551: PUSH
39552: LD_VAR 0 2
39556: PUSH
39557: LD_INT 4
39559: PLUS
39560: PUSH
39561: LD_INT 5
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: PUSH
39569: LD_VAR 0 1
39573: PUSH
39574: LD_INT 3
39576: PLUS
39577: PUSH
39578: LD_VAR 0 2
39582: PUSH
39583: LD_INT 4
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: PUSH
39591: LD_VAR 0 1
39595: PUSH
39596: LD_VAR 0 2
39600: PUSH
39601: LD_INT 3
39603: PLUS
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// end ; end ;
39620: GO 39623
39622: POP
// result := list ;
39623: LD_ADDR_VAR 0 4
39627: PUSH
39628: LD_VAR 0 5
39632: ST_TO_ADDR
// end ;
39633: LD_VAR 0 4
39637: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39638: LD_INT 0
39640: PPUSH
39641: PPUSH
39642: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39643: LD_VAR 0 1
39647: NOT
39648: IFTRUE 39676
39650: PUSH
39651: LD_VAR 0 2
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 4
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: IN
39674: NOT
39675: OR
39676: IFFALSE 39680
// exit ;
39678: GO 39763
// tmp := [ ] ;
39680: LD_ADDR_VAR 0 5
39684: PUSH
39685: EMPTY
39686: ST_TO_ADDR
// for i in units do
39687: LD_ADDR_VAR 0 4
39691: PUSH
39692: LD_VAR 0 1
39696: PUSH
39697: FOR_IN
39698: IFFALSE 39732
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39700: LD_ADDR_VAR 0 5
39704: PUSH
39705: LD_VAR 0 5
39709: PPUSH
39710: LD_VAR 0 4
39714: PPUSH
39715: LD_VAR 0 2
39719: PPUSH
39720: CALL_OW 259
39724: PPUSH
39725: CALL 41158 0 2
39729: ST_TO_ADDR
39730: GO 39697
39732: POP
39733: POP
// if not tmp then
39734: LD_VAR 0 5
39738: NOT
39739: IFFALSE 39743
// exit ;
39741: GO 39763
// result := SortListByListDesc ( units , tmp ) ;
39743: LD_ADDR_VAR 0 3
39747: PUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: LD_VAR 0 5
39757: PPUSH
39758: CALL_OW 77
39762: ST_TO_ADDR
// end ;
39763: LD_VAR 0 3
39767: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39768: LD_INT 0
39770: PPUSH
39771: PPUSH
39772: PPUSH
// result := false ;
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: LD_INT 0
39780: ST_TO_ADDR
// if not building then
39781: LD_VAR 0 2
39785: NOT
39786: IFFALSE 39790
// exit ;
39788: GO 39934
// x := GetX ( building ) ;
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: LD_VAR 0 2
39799: PPUSH
39800: CALL_OW 250
39804: ST_TO_ADDR
// y := GetY ( building ) ;
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: LD_VAR 0 2
39814: PPUSH
39815: CALL_OW 251
39819: ST_TO_ADDR
// if not x or not y then
39820: LD_VAR 0 4
39824: NOT
39825: IFTRUE 39834
39827: PUSH
39828: LD_VAR 0 5
39832: NOT
39833: OR
39834: IFFALSE 39838
// exit ;
39836: GO 39934
// if GetTaskList ( unit ) then
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 437
39847: IFFALSE 39934
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39849: LD_STRING e
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 437
39861: PUSH
39862: LD_INT 1
39864: ARRAY
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: EQUAL
39870: IFFALSE 39897
39872: PUSH
39873: LD_VAR 0 4
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 437
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PUSH
39892: LD_INT 2
39894: ARRAY
39895: EQUAL
39896: AND
39897: IFFALSE 39924
39899: PUSH
39900: LD_VAR 0 5
39904: PUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 437
39914: PUSH
39915: LD_INT 1
39917: ARRAY
39918: PUSH
39919: LD_INT 3
39921: ARRAY
39922: EQUAL
39923: AND
39924: IFFALSE 39934
// result := true end ;
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: LD_INT 1
39933: ST_TO_ADDR
// end ;
39934: LD_VAR 0 3
39938: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39939: LD_INT 0
39941: PPUSH
// result := false ;
39942: LD_ADDR_VAR 0 4
39946: PUSH
39947: LD_INT 0
39949: ST_TO_ADDR
// if GetTaskList ( unit ) then
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 437
39959: IFFALSE 40046
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39961: LD_STRING M
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 437
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: EQUAL
39982: IFFALSE 40009
39984: PUSH
39985: LD_VAR 0 2
39989: PUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 437
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PUSH
40004: LD_INT 2
40006: ARRAY
40007: EQUAL
40008: AND
40009: IFFALSE 40036
40011: PUSH
40012: LD_VAR 0 3
40016: PUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 437
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: PUSH
40031: LD_INT 3
40033: ARRAY
40034: EQUAL
40035: AND
40036: IFFALSE 40046
// result := true ;
40038: LD_ADDR_VAR 0 4
40042: PUSH
40043: LD_INT 1
40045: ST_TO_ADDR
// end ; end ;
40046: LD_VAR 0 4
40050: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40051: LD_INT 0
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
// if not unit or not area then
40057: LD_VAR 0 1
40061: NOT
40062: IFTRUE 40071
40064: PUSH
40065: LD_VAR 0 2
40069: NOT
40070: OR
40071: IFFALSE 40075
// exit ;
40073: GO 40251
// tmp := AreaToList ( area , i ) ;
40075: LD_ADDR_VAR 0 6
40079: PUSH
40080: LD_VAR 0 2
40084: PPUSH
40085: LD_VAR 0 5
40089: PPUSH
40090: CALL_OW 517
40094: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40095: LD_ADDR_VAR 0 5
40099: PUSH
40100: DOUBLE
40101: LD_INT 1
40103: DEC
40104: ST_TO_ADDR
40105: LD_VAR 0 6
40109: PUSH
40110: LD_INT 1
40112: ARRAY
40113: PUSH
40114: FOR_TO
40115: IFFALSE 40249
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: LD_VAR 0 6
40126: PUSH
40127: LD_INT 1
40129: ARRAY
40130: PUSH
40131: LD_VAR 0 5
40135: ARRAY
40136: PUSH
40137: LD_VAR 0 6
40141: PUSH
40142: LD_INT 2
40144: ARRAY
40145: PUSH
40146: LD_VAR 0 5
40150: ARRAY
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40156: LD_INT 92
40158: PUSH
40159: LD_VAR 0 7
40163: PUSH
40164: LD_INT 1
40166: ARRAY
40167: PUSH
40168: LD_VAR 0 7
40172: PUSH
40173: LD_INT 2
40175: ARRAY
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: PPUSH
40186: CALL_OW 69
40190: PUSH
40191: LD_INT 0
40193: EQUAL
40194: IFFALSE 40247
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40196: LD_VAR 0 1
40200: PPUSH
40201: LD_VAR 0 7
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: LD_VAR 0 7
40214: PUSH
40215: LD_INT 2
40217: ARRAY
40218: PPUSH
40219: LD_VAR 0 3
40223: PPUSH
40224: CALL_OW 48
// result := IsPlaced ( unit ) ;
40228: LD_ADDR_VAR 0 4
40232: PUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 305
40242: ST_TO_ADDR
// exit ;
40243: POP
40244: POP
40245: GO 40251
// end ; end ;
40247: GO 40114
40249: POP
40250: POP
// end ;
40251: LD_VAR 0 4
40255: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40256: LD_INT 0
40258: PPUSH
40259: PPUSH
40260: PPUSH
// if not side or side > 8 then
40261: LD_VAR 0 1
40265: NOT
40266: IFTRUE 40278
40268: PUSH
40269: LD_VAR 0 1
40273: PUSH
40274: LD_INT 8
40276: GREATER
40277: OR
40278: IFFALSE 40282
// exit ;
40280: GO 40469
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40282: LD_ADDR_VAR 0 4
40286: PUSH
40287: LD_INT 22
40289: PUSH
40290: LD_VAR 0 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 21
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PPUSH
40313: CALL_OW 69
40317: ST_TO_ADDR
// if not tmp then
40318: LD_VAR 0 4
40322: NOT
40323: IFFALSE 40327
// exit ;
40325: GO 40469
// enable_addtolog := true ;
40327: LD_ADDR_OWVAR 81
40331: PUSH
40332: LD_INT 1
40334: ST_TO_ADDR
// AddToLog ( [ ) ;
40335: LD_STRING [
40337: PPUSH
40338: CALL_OW 561
// for i in tmp do
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_VAR 0 4
40351: PUSH
40352: FOR_IN
40353: IFFALSE 40460
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40355: LD_STRING [
40357: PUSH
40358: LD_VAR 0 3
40362: PPUSH
40363: CALL_OW 266
40367: STR
40368: PUSH
40369: LD_STRING , 
40371: STR
40372: PUSH
40373: LD_VAR 0 3
40377: PPUSH
40378: CALL_OW 250
40382: STR
40383: PUSH
40384: LD_STRING , 
40386: STR
40387: PUSH
40388: LD_VAR 0 3
40392: PPUSH
40393: CALL_OW 251
40397: STR
40398: PUSH
40399: LD_STRING , 
40401: STR
40402: PUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: CALL_OW 254
40412: STR
40413: PUSH
40414: LD_STRING , 
40416: STR
40417: PUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: LD_INT 1
40425: PPUSH
40426: CALL_OW 268
40430: STR
40431: PUSH
40432: LD_STRING , 
40434: STR
40435: PUSH
40436: LD_VAR 0 3
40440: PPUSH
40441: LD_INT 2
40443: PPUSH
40444: CALL_OW 268
40448: STR
40449: PUSH
40450: LD_STRING ],
40452: STR
40453: PPUSH
40454: CALL_OW 561
// end ;
40458: GO 40352
40460: POP
40461: POP
// AddToLog ( ]; ) ;
40462: LD_STRING ];
40464: PPUSH
40465: CALL_OW 561
// end ;
40469: LD_VAR 0 2
40473: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40474: LD_INT 0
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
40480: PPUSH
// if not area or not rate or not max then
40481: LD_VAR 0 1
40485: NOT
40486: IFTRUE 40495
40488: PUSH
40489: LD_VAR 0 2
40493: NOT
40494: OR
40495: IFTRUE 40504
40497: PUSH
40498: LD_VAR 0 4
40502: NOT
40503: OR
40504: IFFALSE 40508
// exit ;
40506: GO 40697
// while 1 do
40508: LD_INT 1
40510: IFFALSE 40697
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40512: LD_ADDR_VAR 0 9
40516: PUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_INT 1
40524: PPUSH
40525: CALL_OW 287
40529: PUSH
40530: LD_INT 10
40532: MUL
40533: ST_TO_ADDR
// r := rate / 10 ;
40534: LD_ADDR_VAR 0 7
40538: PUSH
40539: LD_VAR 0 2
40543: PUSH
40544: LD_INT 10
40546: DIVREAL
40547: ST_TO_ADDR
// time := 1 1$00 ;
40548: LD_ADDR_VAR 0 8
40552: PUSH
40553: LD_INT 2100
40555: ST_TO_ADDR
// if amount < min then
40556: LD_VAR 0 9
40560: PUSH
40561: LD_VAR 0 3
40565: LESS
40566: IFFALSE 40584
// r := r * 2 else
40568: LD_ADDR_VAR 0 7
40572: PUSH
40573: LD_VAR 0 7
40577: PUSH
40578: LD_INT 2
40580: MUL
40581: ST_TO_ADDR
40582: GO 40610
// if amount > max then
40584: LD_VAR 0 9
40588: PUSH
40589: LD_VAR 0 4
40593: GREATER
40594: IFFALSE 40610
// r := r / 2 ;
40596: LD_ADDR_VAR 0 7
40600: PUSH
40601: LD_VAR 0 7
40605: PUSH
40606: LD_INT 2
40608: DIVREAL
40609: ST_TO_ADDR
// time := time / r ;
40610: LD_ADDR_VAR 0 8
40614: PUSH
40615: LD_VAR 0 8
40619: PUSH
40620: LD_VAR 0 7
40624: DIVREAL
40625: ST_TO_ADDR
// if time < 0 then
40626: LD_VAR 0 8
40630: PUSH
40631: LD_INT 0
40633: LESS
40634: IFFALSE 40651
// time := time * - 1 ;
40636: LD_ADDR_VAR 0 8
40640: PUSH
40641: LD_VAR 0 8
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: MUL
40650: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40651: LD_VAR 0 8
40655: PUSH
40656: LD_INT 35
40658: PPUSH
40659: LD_INT 875
40661: PPUSH
40662: CALL_OW 12
40666: PLUS
40667: PPUSH
40668: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40672: LD_INT 1
40674: PPUSH
40675: LD_INT 5
40677: PPUSH
40678: CALL_OW 12
40682: PPUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: LD_INT 1
40690: PPUSH
40691: CALL_OW 55
// end ;
40695: GO 40508
// end ;
40697: LD_VAR 0 5
40701: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
40711: PPUSH
// if not turrets or not factories then
40712: LD_VAR 0 1
40716: NOT
40717: IFTRUE 40726
40719: PUSH
40720: LD_VAR 0 2
40724: NOT
40725: OR
40726: IFFALSE 40730
// exit ;
40728: GO 41037
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40730: LD_ADDR_VAR 0 10
40734: PUSH
40735: LD_INT 5
40737: PUSH
40738: LD_INT 6
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 4
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: LD_INT 5
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 24
40772: PUSH
40773: LD_INT 25
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 23
40782: PUSH
40783: LD_INT 27
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 42
40796: PUSH
40797: LD_INT 43
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 44
40806: PUSH
40807: LD_INT 46
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 45
40816: PUSH
40817: LD_INT 47
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// result := [ ] ;
40834: LD_ADDR_VAR 0 3
40838: PUSH
40839: EMPTY
40840: ST_TO_ADDR
// for i in turrets do
40841: LD_ADDR_VAR 0 4
40845: PUSH
40846: LD_VAR 0 1
40850: PUSH
40851: FOR_IN
40852: IFFALSE 41035
// begin nat := GetNation ( i ) ;
40854: LD_ADDR_VAR 0 7
40858: PUSH
40859: LD_VAR 0 4
40863: PPUSH
40864: CALL_OW 248
40868: ST_TO_ADDR
// weapon := 0 ;
40869: LD_ADDR_VAR 0 8
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// if not nat then
40877: LD_VAR 0 7
40881: NOT
40882: IFFALSE 40886
// continue ;
40884: GO 40851
// for j in list [ nat ] do
40886: LD_ADDR_VAR 0 5
40890: PUSH
40891: LD_VAR 0 10
40895: PUSH
40896: LD_VAR 0 7
40900: ARRAY
40901: PUSH
40902: FOR_IN
40903: IFFALSE 40944
// if GetBWeapon ( i ) = j [ 1 ] then
40905: LD_VAR 0 4
40909: PPUSH
40910: CALL_OW 269
40914: PUSH
40915: LD_VAR 0 5
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: EQUAL
40924: IFFALSE 40942
// begin weapon := j [ 2 ] ;
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_VAR 0 5
40935: PUSH
40936: LD_INT 2
40938: ARRAY
40939: ST_TO_ADDR
// break ;
40940: GO 40944
// end ;
40942: GO 40902
40944: POP
40945: POP
// if not weapon then
40946: LD_VAR 0 8
40950: NOT
40951: IFFALSE 40955
// continue ;
40953: GO 40851
// for k in factories do
40955: LD_ADDR_VAR 0 6
40959: PUSH
40960: LD_VAR 0 2
40964: PUSH
40965: FOR_IN
40966: IFFALSE 41031
// begin weapons := AvailableWeaponList ( k ) ;
40968: LD_ADDR_VAR 0 9
40972: PUSH
40973: LD_VAR 0 6
40977: PPUSH
40978: CALL_OW 478
40982: ST_TO_ADDR
// if not weapons then
40983: LD_VAR 0 9
40987: NOT
40988: IFFALSE 40992
// continue ;
40990: GO 40965
// if weapon in weapons then
40992: LD_VAR 0 8
40996: PUSH
40997: LD_VAR 0 9
41001: IN
41002: IFFALSE 41029
// begin result := [ i , weapon ] ;
41004: LD_ADDR_VAR 0 3
41008: PUSH
41009: LD_VAR 0 4
41013: PUSH
41014: LD_VAR 0 8
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: ST_TO_ADDR
// exit ;
41023: POP
41024: POP
41025: POP
41026: POP
41027: GO 41037
// end ; end ;
41029: GO 40965
41031: POP
41032: POP
// end ;
41033: GO 40851
41035: POP
41036: POP
// end ;
41037: LD_VAR 0 3
41041: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41042: LD_INT 0
41044: PPUSH
// if not side or side > 8 then
41045: LD_VAR 0 3
41049: NOT
41050: IFTRUE 41062
41052: PUSH
41053: LD_VAR 0 3
41057: PUSH
41058: LD_INT 8
41060: GREATER
41061: OR
41062: IFFALSE 41066
// exit ;
41064: GO 41125
// if not range then
41066: LD_VAR 0 4
41070: NOT
41071: IFFALSE 41082
// range := - 12 ;
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: LD_INT 12
41080: NEG
41081: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41082: LD_VAR 0 1
41086: PPUSH
41087: LD_VAR 0 2
41091: PPUSH
41092: LD_VAR 0 3
41096: PPUSH
41097: LD_VAR 0 4
41101: PPUSH
41102: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: CALL_OW 331
// end ;
41125: LD_VAR 0 5
41129: RET
// export function Video ( mode ) ; begin
41130: LD_INT 0
41132: PPUSH
// ingame_video = mode ;
41133: LD_ADDR_OWVAR 52
41137: PUSH
41138: LD_VAR 0 1
41142: ST_TO_ADDR
// interface_hidden = mode ;
41143: LD_ADDR_OWVAR 54
41147: PUSH
41148: LD_VAR 0 1
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 2
41157: RET
// export function Join ( array , element ) ; begin
41158: LD_INT 0
41160: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: LD_VAR 0 1
41175: PUSH
41176: LD_INT 1
41178: PLUS
41179: PPUSH
41180: LD_VAR 0 2
41184: PPUSH
41185: CALL_OW 1
41189: ST_TO_ADDR
// end ;
41190: LD_VAR 0 3
41194: RET
// export function JoinUnion ( array , element ) ; begin
41195: LD_INT 0
41197: PPUSH
// result := array union element ;
41198: LD_ADDR_VAR 0 3
41202: PUSH
41203: LD_VAR 0 1
41207: PUSH
41208: LD_VAR 0 2
41212: UNION
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 3
41218: RET
// export function GetBehemoths ( side ) ; begin
41219: LD_INT 0
41221: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41222: LD_ADDR_VAR 0 2
41226: PUSH
41227: LD_INT 22
41229: PUSH
41230: LD_VAR 0 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 31
41241: PUSH
41242: LD_INT 25
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PPUSH
41253: CALL_OW 69
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 2
41262: RET
// export function Shuffle ( array ) ; var i , index ; begin
41263: LD_INT 0
41265: PPUSH
41266: PPUSH
41267: PPUSH
// result := [ ] ;
41268: LD_ADDR_VAR 0 2
41272: PUSH
41273: EMPTY
41274: ST_TO_ADDR
// if not array then
41275: LD_VAR 0 1
41279: NOT
41280: IFFALSE 41284
// exit ;
41282: GO 41383
// Randomize ;
41284: CALL_OW 10
// for i = array downto 1 do
41288: LD_ADDR_VAR 0 3
41292: PUSH
41293: DOUBLE
41294: LD_VAR 0 1
41298: INC
41299: ST_TO_ADDR
41300: LD_INT 1
41302: PUSH
41303: FOR_DOWNTO
41304: IFFALSE 41381
// begin index := rand ( 1 , array ) ;
41306: LD_ADDR_VAR 0 4
41310: PUSH
41311: LD_INT 1
41313: PPUSH
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 12
41323: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41324: LD_ADDR_VAR 0 2
41328: PUSH
41329: LD_VAR 0 2
41333: PPUSH
41334: LD_VAR 0 2
41338: PUSH
41339: LD_INT 1
41341: PLUS
41342: PPUSH
41343: LD_VAR 0 1
41347: PUSH
41348: LD_VAR 0 4
41352: ARRAY
41353: PPUSH
41354: CALL_OW 2
41358: ST_TO_ADDR
// array := Delete ( array , index ) ;
41359: LD_ADDR_VAR 0 1
41363: PUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 4
41373: PPUSH
41374: CALL_OW 3
41378: ST_TO_ADDR
// end ;
41379: GO 41303
41381: POP
41382: POP
// end ;
41383: LD_VAR 0 2
41387: RET
// export function GetBaseMaterials ( base ) ; begin
41388: LD_INT 0
41390: PPUSH
// result := [ 0 , 0 , 0 ] ;
41391: LD_ADDR_VAR 0 2
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// if not base then
41410: LD_VAR 0 1
41414: NOT
41415: IFFALSE 41419
// exit ;
41417: GO 41468
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41419: LD_ADDR_VAR 0 2
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: LD_INT 1
41431: PPUSH
41432: CALL_OW 275
41436: PUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: LD_INT 2
41444: PPUSH
41445: CALL_OW 275
41449: PUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: LD_INT 3
41457: PPUSH
41458: CALL_OW 275
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// end ;
41468: LD_VAR 0 2
41472: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
// result := array ;
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_VAR 0 1
41486: ST_TO_ADDR
// if size >= result then
41487: LD_VAR 0 2
41491: PUSH
41492: LD_VAR 0 3
41496: GREATEREQUAL
41497: IFFALSE 41501
// exit ;
41499: GO 41551
// if size then
41501: LD_VAR 0 2
41505: IFFALSE 41551
// for i := array downto size do
41507: LD_ADDR_VAR 0 4
41511: PUSH
41512: DOUBLE
41513: LD_VAR 0 1
41517: INC
41518: ST_TO_ADDR
41519: LD_VAR 0 2
41523: PUSH
41524: FOR_DOWNTO
41525: IFFALSE 41549
// result := Delete ( result , result ) ;
41527: LD_ADDR_VAR 0 3
41531: PUSH
41532: LD_VAR 0 3
41536: PPUSH
41537: LD_VAR 0 3
41541: PPUSH
41542: CALL_OW 3
41546: ST_TO_ADDR
41547: GO 41524
41549: POP
41550: POP
// end ;
41551: LD_VAR 0 3
41555: RET
// export function ComExit ( unit ) ; var tmp ; begin
41556: LD_INT 0
41558: PPUSH
41559: PPUSH
// if not IsInUnit ( unit ) then
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 310
41569: NOT
41570: IFFALSE 41574
// exit ;
41572: GO 41634
// tmp := IsInUnit ( unit ) ;
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 310
41588: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41589: LD_VAR 0 3
41593: PPUSH
41594: CALL_OW 247
41598: PUSH
41599: LD_INT 2
41601: EQUAL
41602: IFFALSE 41615
// ComExitVehicle ( unit ) else
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 121
41613: GO 41624
// ComExitBuilding ( unit ) ;
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 122
// result := tmp ;
41624: LD_ADDR_VAR 0 2
41628: PUSH
41629: LD_VAR 0 3
41633: ST_TO_ADDR
// end ;
41634: LD_VAR 0 2
41638: RET
// export function ComExitAll ( units ) ; var i ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
// if not units then
41643: LD_VAR 0 1
41647: NOT
41648: IFFALSE 41652
// exit ;
41650: GO 41678
// for i in units do
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_VAR 0 1
41661: PUSH
41662: FOR_IN
41663: IFFALSE 41676
// ComExit ( i ) ;
41665: LD_VAR 0 3
41669: PPUSH
41670: CALL 41556 0 1
41674: GO 41662
41676: POP
41677: POP
// end ;
41678: LD_VAR 0 2
41682: RET
// export function ResetHc ; begin
41683: LD_INT 0
41685: PPUSH
// InitHc ;
41686: CALL_OW 19
// hc_importance := 0 ;
41690: LD_ADDR_OWVAR 32
41694: PUSH
41695: LD_INT 0
41697: ST_TO_ADDR
// end ;
41698: LD_VAR 0 1
41702: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41703: LD_INT 0
41705: PPUSH
41706: PPUSH
41707: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41708: LD_ADDR_VAR 0 6
41712: PUSH
41713: LD_VAR 0 1
41717: PUSH
41718: LD_VAR 0 3
41722: PLUS
41723: PUSH
41724: LD_INT 2
41726: DIV
41727: ST_TO_ADDR
// if _x < 0 then
41728: LD_VAR 0 6
41732: PUSH
41733: LD_INT 0
41735: LESS
41736: IFFALSE 41753
// _x := _x * - 1 ;
41738: LD_ADDR_VAR 0 6
41742: PUSH
41743: LD_VAR 0 6
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: MUL
41752: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41753: LD_ADDR_VAR 0 7
41757: PUSH
41758: LD_VAR 0 2
41762: PUSH
41763: LD_VAR 0 4
41767: PLUS
41768: PUSH
41769: LD_INT 2
41771: DIV
41772: ST_TO_ADDR
// if _y < 0 then
41773: LD_VAR 0 7
41777: PUSH
41778: LD_INT 0
41780: LESS
41781: IFFALSE 41798
// _y := _y * - 1 ;
41783: LD_ADDR_VAR 0 7
41787: PUSH
41788: LD_VAR 0 7
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: MUL
41797: ST_TO_ADDR
// result := [ _x , _y ] ;
41798: LD_ADDR_VAR 0 5
41802: PUSH
41803: LD_VAR 0 6
41807: PUSH
41808: LD_VAR 0 7
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 5
41821: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41822: LD_INT 0
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
// task := GetTaskList ( unit ) ;
41828: LD_ADDR_VAR 0 7
41832: PUSH
41833: LD_VAR 0 1
41837: PPUSH
41838: CALL_OW 437
41842: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41843: LD_VAR 0 7
41847: NOT
41848: IFFALSE 41867
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: LD_VAR 0 2
41860: PPUSH
41861: CALL_OW 308
41865: NOT
41866: AND
41867: IFFALSE 41871
// exit ;
41869: GO 41989
// if IsInArea ( unit , area ) then
41871: LD_VAR 0 1
41875: PPUSH
41876: LD_VAR 0 2
41880: PPUSH
41881: CALL_OW 308
41885: IFFALSE 41903
// begin ComMoveToArea ( unit , goAway ) ;
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 3
41896: PPUSH
41897: CALL_OW 113
// exit ;
41901: GO 41989
// end ; if task [ 1 ] [ 1 ] <> M then
41903: LD_VAR 0 7
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PUSH
41912: LD_INT 1
41914: ARRAY
41915: PUSH
41916: LD_STRING M
41918: NONEQUAL
41919: IFFALSE 41923
// exit ;
41921: GO 41989
// x := task [ 1 ] [ 2 ] ;
41923: LD_ADDR_VAR 0 5
41927: PUSH
41928: LD_VAR 0 7
41932: PUSH
41933: LD_INT 1
41935: ARRAY
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41941: LD_ADDR_VAR 0 6
41945: PUSH
41946: LD_VAR 0 7
41950: PUSH
41951: LD_INT 1
41953: ARRAY
41954: PUSH
41955: LD_INT 3
41957: ARRAY
41958: ST_TO_ADDR
// if InArea ( x , y , area ) then
41959: LD_VAR 0 5
41963: PPUSH
41964: LD_VAR 0 6
41968: PPUSH
41969: LD_VAR 0 2
41973: PPUSH
41974: CALL_OW 309
41978: IFFALSE 41989
// ComStop ( unit ) ;
41980: LD_VAR 0 1
41984: PPUSH
41985: CALL_OW 141
// end ;
41989: LD_VAR 0 4
41993: RET
// export function Abs ( value ) ; begin
41994: LD_INT 0
41996: PPUSH
// result := value ;
41997: LD_ADDR_VAR 0 2
42001: PUSH
42002: LD_VAR 0 1
42006: ST_TO_ADDR
// if value < 0 then
42007: LD_VAR 0 1
42011: PUSH
42012: LD_INT 0
42014: LESS
42015: IFFALSE 42032
// result := value * - 1 ;
42017: LD_ADDR_VAR 0 2
42021: PUSH
42022: LD_VAR 0 1
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: MUL
42031: ST_TO_ADDR
// end ;
42032: LD_VAR 0 2
42036: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42037: LD_INT 0
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
// if not unit or not building then
42047: LD_VAR 0 1
42051: NOT
42052: IFTRUE 42061
42054: PUSH
42055: LD_VAR 0 2
42059: NOT
42060: OR
42061: IFFALSE 42065
// exit ;
42063: GO 42293
// x := GetX ( building ) ;
42065: LD_ADDR_VAR 0 4
42069: PUSH
42070: LD_VAR 0 2
42074: PPUSH
42075: CALL_OW 250
42079: ST_TO_ADDR
// y := GetY ( building ) ;
42080: LD_ADDR_VAR 0 6
42084: PUSH
42085: LD_VAR 0 2
42089: PPUSH
42090: CALL_OW 251
42094: ST_TO_ADDR
// d := GetDir ( building ) ;
42095: LD_ADDR_VAR 0 8
42099: PUSH
42100: LD_VAR 0 2
42104: PPUSH
42105: CALL_OW 254
42109: ST_TO_ADDR
// r := 4 ;
42110: LD_ADDR_VAR 0 9
42114: PUSH
42115: LD_INT 4
42117: ST_TO_ADDR
// for i := 1 to 5 do
42118: LD_ADDR_VAR 0 10
42122: PUSH
42123: DOUBLE
42124: LD_INT 1
42126: DEC
42127: ST_TO_ADDR
42128: LD_INT 5
42130: PUSH
42131: FOR_TO
42132: IFFALSE 42291
// begin _x := ShiftX ( x , d , r + i ) ;
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: LD_VAR 0 4
42143: PPUSH
42144: LD_VAR 0 8
42148: PPUSH
42149: LD_VAR 0 9
42153: PUSH
42154: LD_VAR 0 10
42158: PLUS
42159: PPUSH
42160: CALL_OW 272
42164: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42165: LD_ADDR_VAR 0 7
42169: PUSH
42170: LD_VAR 0 6
42174: PPUSH
42175: LD_VAR 0 8
42179: PPUSH
42180: LD_VAR 0 9
42184: PUSH
42185: LD_VAR 0 10
42189: PLUS
42190: PPUSH
42191: CALL_OW 273
42195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42196: LD_VAR 0 5
42200: PPUSH
42201: LD_VAR 0 7
42205: PPUSH
42206: CALL_OW 488
42210: IFFALSE 42245
42212: PUSH
42213: LD_VAR 0 5
42217: PPUSH
42218: LD_VAR 0 7
42222: PPUSH
42223: CALL_OW 428
42227: PPUSH
42228: CALL_OW 247
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: IN
42243: NOT
42244: AND
42245: IFFALSE 42289
// begin ComMoveXY ( unit , _x , _y ) ;
42247: LD_VAR 0 1
42251: PPUSH
42252: LD_VAR 0 5
42256: PPUSH
42257: LD_VAR 0 7
42261: PPUSH
42262: CALL_OW 111
// result := [ _x , _y ] ;
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: LD_VAR 0 5
42275: PUSH
42276: LD_VAR 0 7
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: ST_TO_ADDR
// exit ;
42285: POP
42286: POP
42287: GO 42293
// end ; end ;
42289: GO 42131
42291: POP
42292: POP
// end ;
42293: LD_VAR 0 3
42297: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42298: LD_INT 0
42300: PPUSH
42301: PPUSH
42302: PPUSH
// result := 0 ;
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_INT 0
42310: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42311: LD_VAR 0 1
42315: PUSH
42316: LD_INT 0
42318: LESS
42319: IFTRUE 42331
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: LD_INT 8
42329: GREATER
42330: OR
42331: IFTRUE 42343
42333: PUSH
42334: LD_VAR 0 2
42338: PUSH
42339: LD_INT 0
42341: LESS
42342: OR
42343: IFTRUE 42355
42345: PUSH
42346: LD_VAR 0 2
42350: PUSH
42351: LD_INT 8
42353: GREATER
42354: OR
42355: IFFALSE 42359
// exit ;
42357: GO 42434
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42359: LD_ADDR_VAR 0 4
42363: PUSH
42364: LD_INT 22
42366: PUSH
42367: LD_VAR 0 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PPUSH
42376: CALL_OW 69
42380: PUSH
42381: FOR_IN
42382: IFFALSE 42432
// begin un := UnitShoot ( i ) ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 4
42393: PPUSH
42394: CALL_OW 504
42398: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42399: LD_VAR 0 5
42403: PPUSH
42404: CALL_OW 255
42408: PUSH
42409: LD_VAR 0 1
42413: EQUAL
42414: IFFALSE 42430
// begin result := un ;
42416: LD_ADDR_VAR 0 3
42420: PUSH
42421: LD_VAR 0 5
42425: ST_TO_ADDR
// exit ;
42426: POP
42427: POP
42428: GO 42434
// end ; end ;
42430: GO 42381
42432: POP
42433: POP
// end ;
42434: LD_VAR 0 3
42438: RET
// export function GetCargoBay ( units ) ; begin
42439: LD_INT 0
42441: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42442: LD_ADDR_VAR 0 2
42446: PUSH
42447: LD_VAR 0 1
42451: PPUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 34
42457: PUSH
42458: LD_INT 12
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 34
42467: PUSH
42468: LD_INT 51
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 34
42477: PUSH
42478: LD_INT 32
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 34
42487: PUSH
42488: LD_INT 89
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: PPUSH
42502: CALL_OW 72
42506: ST_TO_ADDR
// end ;
42507: LD_VAR 0 2
42511: RET
// export function Negate ( value ) ; begin
42512: LD_INT 0
42514: PPUSH
// result := not value ;
42515: LD_ADDR_VAR 0 2
42519: PUSH
42520: LD_VAR 0 1
42524: NOT
42525: ST_TO_ADDR
// end ;
42526: LD_VAR 0 2
42530: RET
// export function Inc ( value ) ; begin
42531: LD_INT 0
42533: PPUSH
// result := value + 1 ;
42534: LD_ADDR_VAR 0 2
42538: PUSH
42539: LD_VAR 0 1
42543: PUSH
42544: LD_INT 1
42546: PLUS
42547: ST_TO_ADDR
// end ;
42548: LD_VAR 0 2
42552: RET
// export function Dec ( value ) ; begin
42553: LD_INT 0
42555: PPUSH
// result := value - 1 ;
42556: LD_ADDR_VAR 0 2
42560: PUSH
42561: LD_VAR 0 1
42565: PUSH
42566: LD_INT 1
42568: MINUS
42569: ST_TO_ADDR
// end ;
42570: LD_VAR 0 2
42574: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42575: LD_INT 0
42577: PPUSH
42578: PPUSH
42579: PPUSH
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42585: LD_VAR 0 1
42589: PPUSH
42590: LD_VAR 0 2
42594: PPUSH
42595: CALL_OW 488
42599: NOT
42600: IFTRUE 42619
42602: PUSH
42603: LD_VAR 0 3
42607: PPUSH
42608: LD_VAR 0 4
42612: PPUSH
42613: CALL_OW 488
42617: NOT
42618: OR
42619: IFFALSE 42632
// begin result := - 1 ;
42621: LD_ADDR_VAR 0 5
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: ST_TO_ADDR
// exit ;
42630: GO 42867
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42632: LD_ADDR_VAR 0 12
42636: PUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: LD_VAR 0 2
42646: PPUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: CALL 41703 0 4
42661: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42662: LD_ADDR_VAR 0 11
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: LD_VAR 0 2
42676: PPUSH
42677: LD_VAR 0 12
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: PPUSH
42686: LD_VAR 0 12
42690: PUSH
42691: LD_INT 2
42693: ARRAY
42694: PPUSH
42695: CALL_OW 298
42699: ST_TO_ADDR
// distance := 9999 ;
42700: LD_ADDR_VAR 0 10
42704: PUSH
42705: LD_INT 9999
42707: ST_TO_ADDR
// for i := 0 to 5 do
42708: LD_ADDR_VAR 0 6
42712: PUSH
42713: DOUBLE
42714: LD_INT 0
42716: DEC
42717: ST_TO_ADDR
42718: LD_INT 5
42720: PUSH
42721: FOR_TO
42722: IFFALSE 42865
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42724: LD_ADDR_VAR 0 7
42728: PUSH
42729: LD_VAR 0 1
42733: PPUSH
42734: LD_VAR 0 6
42738: PPUSH
42739: LD_VAR 0 11
42743: PPUSH
42744: CALL_OW 272
42748: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42749: LD_ADDR_VAR 0 8
42753: PUSH
42754: LD_VAR 0 2
42758: PPUSH
42759: LD_VAR 0 6
42763: PPUSH
42764: LD_VAR 0 11
42768: PPUSH
42769: CALL_OW 273
42773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42774: LD_VAR 0 7
42778: PPUSH
42779: LD_VAR 0 8
42783: PPUSH
42784: CALL_OW 488
42788: NOT
42789: IFFALSE 42793
// continue ;
42791: GO 42721
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42793: LD_ADDR_VAR 0 9
42797: PUSH
42798: LD_VAR 0 12
42802: PUSH
42803: LD_INT 1
42805: ARRAY
42806: PPUSH
42807: LD_VAR 0 12
42811: PUSH
42812: LD_INT 2
42814: ARRAY
42815: PPUSH
42816: LD_VAR 0 7
42820: PPUSH
42821: LD_VAR 0 8
42825: PPUSH
42826: CALL_OW 298
42830: ST_TO_ADDR
// if tmp < distance then
42831: LD_VAR 0 9
42835: PUSH
42836: LD_VAR 0 10
42840: LESS
42841: IFFALSE 42863
// begin result := i ;
42843: LD_ADDR_VAR 0 5
42847: PUSH
42848: LD_VAR 0 6
42852: ST_TO_ADDR
// distance := tmp ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 9
42862: ST_TO_ADDR
// end ; end ;
42863: GO 42721
42865: POP
42866: POP
// end ;
42867: LD_VAR 0 5
42871: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42872: LD_INT 0
42874: PPUSH
42875: PPUSH
// if not driver or not IsInUnit ( driver ) then
42876: LD_VAR 0 1
42880: NOT
42881: IFTRUE 42895
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 310
42893: NOT
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 42989
// vehicle := IsInUnit ( driver ) ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 310
42913: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42914: LD_VAR 0 1
42918: PPUSH
42919: LD_STRING \
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: LD_STRING E
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_VAR 0 3
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 446
// end ;
42989: LD_VAR 0 2
42993: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
// if not driver or not IsInUnit ( driver ) then
42998: LD_VAR 0 1
43002: NOT
43003: IFTRUE 43017
43005: PUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 310
43015: NOT
43016: OR
43017: IFFALSE 43021
// exit ;
43019: GO 43111
// vehicle := IsInUnit ( driver ) ;
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_VAR 0 1
43030: PPUSH
43031: CALL_OW 310
43035: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43036: LD_VAR 0 1
43040: PPUSH
43041: LD_STRING \
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: PUSH
43071: LD_STRING E
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_VAR 0 3
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PPUSH
43107: CALL_OW 447
// end ;
43111: LD_VAR 0 2
43115: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43116: LD_INT 0
43118: PPUSH
43119: PPUSH
43120: PPUSH
// tmp := [ ] ;
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: EMPTY
43127: ST_TO_ADDR
// for i in units do
43128: LD_ADDR_VAR 0 4
43132: PUSH
43133: LD_VAR 0 1
43137: PUSH
43138: FOR_IN
43139: IFFALSE 43177
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43141: LD_ADDR_VAR 0 5
43145: PUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: LD_VAR 0 5
43155: PUSH
43156: LD_INT 1
43158: PLUS
43159: PPUSH
43160: LD_VAR 0 4
43164: PPUSH
43165: CALL_OW 256
43169: PPUSH
43170: CALL_OW 2
43174: ST_TO_ADDR
43175: GO 43138
43177: POP
43178: POP
// if not tmp then
43179: LD_VAR 0 5
43183: NOT
43184: IFFALSE 43188
// exit ;
43186: GO 43236
// if asc then
43188: LD_VAR 0 2
43192: IFFALSE 43216
// result := SortListByListAsc ( units , tmp ) else
43194: LD_ADDR_VAR 0 3
43198: PUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: LD_VAR 0 5
43208: PPUSH
43209: CALL_OW 76
43213: ST_TO_ADDR
43214: GO 43236
// result := SortListByListDesc ( units , tmp ) ;
43216: LD_ADDR_VAR 0 3
43220: PUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: LD_VAR 0 5
43230: PPUSH
43231: CALL_OW 77
43235: ST_TO_ADDR
// end ;
43236: LD_VAR 0 3
43240: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43241: LD_INT 0
43243: PPUSH
43244: PPUSH
// task := GetTaskList ( mech ) ;
43245: LD_ADDR_VAR 0 4
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: CALL_OW 437
43259: ST_TO_ADDR
// if not task then
43260: LD_VAR 0 4
43264: NOT
43265: IFFALSE 43269
// exit ;
43267: GO 43313
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_VAR 0 4
43278: PUSH
43279: LD_INT 1
43281: ARRAY
43282: PUSH
43283: LD_INT 1
43285: ARRAY
43286: PUSH
43287: LD_STRING r
43289: EQUAL
43290: IFFALSE 43312
43292: PUSH
43293: LD_VAR 0 4
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PUSH
43302: LD_INT 4
43304: ARRAY
43305: PUSH
43306: LD_VAR 0 2
43310: EQUAL
43311: AND
43312: ST_TO_ADDR
// end ;
43313: LD_VAR 0 3
43317: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43318: LD_INT 0
43320: PPUSH
// SetDir ( unit , d ) ;
43321: LD_VAR 0 1
43325: PPUSH
43326: LD_VAR 0 4
43330: PPUSH
43331: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43335: LD_ADDR_VAR 0 6
43339: PUSH
43340: LD_VAR 0 1
43344: PPUSH
43345: LD_VAR 0 2
43349: PPUSH
43350: LD_VAR 0 3
43354: PPUSH
43355: LD_VAR 0 5
43359: PPUSH
43360: CALL_OW 48
43364: ST_TO_ADDR
// end ;
43365: LD_VAR 0 6
43369: RET
// export function ToNaturalNumber ( number ) ; begin
43370: LD_INT 0
43372: PPUSH
// result := number div 1 ;
43373: LD_ADDR_VAR 0 2
43377: PUSH
43378: LD_VAR 0 1
43382: PUSH
43383: LD_INT 1
43385: DIV
43386: ST_TO_ADDR
// if number < 0 then
43387: LD_VAR 0 1
43391: PUSH
43392: LD_INT 0
43394: LESS
43395: IFFALSE 43405
// result := 0 ;
43397: LD_ADDR_VAR 0 2
43401: PUSH
43402: LD_INT 0
43404: ST_TO_ADDR
// end ;
43405: LD_VAR 0 2
43409: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43410: LD_INT 0
43412: PPUSH
43413: PPUSH
43414: PPUSH
// if not buildings then
43415: LD_VAR 0 1
43419: NOT
43420: IFFALSE 43424
// exit ;
43422: GO 43539
// tmp := [ ] ;
43424: LD_ADDR_VAR 0 5
43428: PUSH
43429: EMPTY
43430: ST_TO_ADDR
// for b in buildings do
43431: LD_ADDR_VAR 0 4
43435: PUSH
43436: LD_VAR 0 1
43440: PUSH
43441: FOR_IN
43442: IFFALSE 43480
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: LD_VAR 0 5
43453: PPUSH
43454: LD_VAR 0 5
43458: PUSH
43459: LD_INT 1
43461: PLUS
43462: PPUSH
43463: LD_VAR 0 4
43467: PPUSH
43468: CALL_OW 266
43472: PPUSH
43473: CALL_OW 1
43477: ST_TO_ADDR
43478: GO 43441
43480: POP
43481: POP
// if not tmp then
43482: LD_VAR 0 5
43486: NOT
43487: IFFALSE 43491
// exit ;
43489: GO 43539
// if asc then
43491: LD_VAR 0 2
43495: IFFALSE 43519
// result := SortListByListAsc ( buildings , tmp ) else
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_VAR 0 1
43506: PPUSH
43507: LD_VAR 0 5
43511: PPUSH
43512: CALL_OW 76
43516: ST_TO_ADDR
43517: GO 43539
// result := SortListByListDesc ( buildings , tmp ) ;
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_VAR 0 1
43528: PPUSH
43529: LD_VAR 0 5
43533: PPUSH
43534: CALL_OW 77
43538: ST_TO_ADDR
// end ;
43539: LD_VAR 0 3
43543: RET
// export function SortByClass ( units , class ) ; var un ; begin
43544: LD_INT 0
43546: PPUSH
43547: PPUSH
// if not units or not class then
43548: LD_VAR 0 1
43552: NOT
43553: IFTRUE 43562
43555: PUSH
43556: LD_VAR 0 2
43560: NOT
43561: OR
43562: IFFALSE 43566
// exit ;
43564: GO 43661
// result := [ ] ;
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: EMPTY
43572: ST_TO_ADDR
// for un in units do
43573: LD_ADDR_VAR 0 4
43577: PUSH
43578: LD_VAR 0 1
43582: PUSH
43583: FOR_IN
43584: IFFALSE 43659
// if GetClass ( un ) = class then
43586: LD_VAR 0 4
43590: PPUSH
43591: CALL_OW 257
43595: PUSH
43596: LD_VAR 0 2
43600: EQUAL
43601: IFFALSE 43628
// result := Insert ( result , 1 , un ) else
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: LD_INT 1
43615: PPUSH
43616: LD_VAR 0 4
43620: PPUSH
43621: CALL_OW 2
43625: ST_TO_ADDR
43626: GO 43657
// result := Replace ( result , result + 1 , un ) ;
43628: LD_ADDR_VAR 0 3
43632: PUSH
43633: LD_VAR 0 3
43637: PPUSH
43638: LD_VAR 0 3
43642: PUSH
43643: LD_INT 1
43645: PLUS
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL_OW 1
43656: ST_TO_ADDR
43657: GO 43583
43659: POP
43660: POP
// end ;
43661: LD_VAR 0 3
43665: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
// result := [ ] ;
43675: LD_ADDR_VAR 0 4
43679: PUSH
43680: EMPTY
43681: ST_TO_ADDR
// if x - r < 0 then
43682: LD_VAR 0 1
43686: PUSH
43687: LD_VAR 0 3
43691: MINUS
43692: PUSH
43693: LD_INT 0
43695: LESS
43696: IFFALSE 43708
// min_x := 0 else
43698: LD_ADDR_VAR 0 8
43702: PUSH
43703: LD_INT 0
43705: ST_TO_ADDR
43706: GO 43724
// min_x := x - r ;
43708: LD_ADDR_VAR 0 8
43712: PUSH
43713: LD_VAR 0 1
43717: PUSH
43718: LD_VAR 0 3
43722: MINUS
43723: ST_TO_ADDR
// if y - r < 0 then
43724: LD_VAR 0 2
43728: PUSH
43729: LD_VAR 0 3
43733: MINUS
43734: PUSH
43735: LD_INT 0
43737: LESS
43738: IFFALSE 43750
// min_y := 0 else
43740: LD_ADDR_VAR 0 7
43744: PUSH
43745: LD_INT 0
43747: ST_TO_ADDR
43748: GO 43766
// min_y := y - r ;
43750: LD_ADDR_VAR 0 7
43754: PUSH
43755: LD_VAR 0 2
43759: PUSH
43760: LD_VAR 0 3
43764: MINUS
43765: ST_TO_ADDR
// max_x := x + r ;
43766: LD_ADDR_VAR 0 9
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: LD_VAR 0 3
43780: PLUS
43781: ST_TO_ADDR
// max_y := y + r ;
43782: LD_ADDR_VAR 0 10
43786: PUSH
43787: LD_VAR 0 2
43791: PUSH
43792: LD_VAR 0 3
43796: PLUS
43797: ST_TO_ADDR
// for _x = min_x to max_x do
43798: LD_ADDR_VAR 0 5
43802: PUSH
43803: DOUBLE
43804: LD_VAR 0 8
43808: DEC
43809: ST_TO_ADDR
43810: LD_VAR 0 9
43814: PUSH
43815: FOR_TO
43816: IFFALSE 43917
// for _y = min_y to max_y do
43818: LD_ADDR_VAR 0 6
43822: PUSH
43823: DOUBLE
43824: LD_VAR 0 7
43828: DEC
43829: ST_TO_ADDR
43830: LD_VAR 0 10
43834: PUSH
43835: FOR_TO
43836: IFFALSE 43913
// begin if not ValidHex ( _x , _y ) then
43838: LD_VAR 0 5
43842: PPUSH
43843: LD_VAR 0 6
43847: PPUSH
43848: CALL_OW 488
43852: NOT
43853: IFFALSE 43857
// continue ;
43855: GO 43835
// if GetResourceTypeXY ( _x , _y ) then
43857: LD_VAR 0 5
43861: PPUSH
43862: LD_VAR 0 6
43866: PPUSH
43867: CALL_OW 283
43871: IFFALSE 43911
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43873: LD_ADDR_VAR 0 4
43877: PUSH
43878: LD_VAR 0 4
43882: PPUSH
43883: LD_VAR 0 4
43887: PUSH
43888: LD_INT 1
43890: PLUS
43891: PPUSH
43892: LD_VAR 0 5
43896: PUSH
43897: LD_VAR 0 6
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PPUSH
43906: CALL_OW 1
43910: ST_TO_ADDR
// end ;
43911: GO 43835
43913: POP
43914: POP
43915: GO 43815
43917: POP
43918: POP
// end ;
43919: LD_VAR 0 4
43923: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43924: LD_INT 0
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
// if not units then
43934: LD_VAR 0 1
43938: NOT
43939: IFFALSE 43943
// exit ;
43941: GO 44475
// result := UnitFilter ( units , [ f_ok ] ) ;
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: LD_INT 50
43955: PUSH
43956: EMPTY
43957: LIST
43958: PPUSH
43959: CALL_OW 72
43963: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43964: LD_ADDR_VAR 0 8
43968: PUSH
43969: LD_VAR 0 1
43973: PUSH
43974: LD_INT 1
43976: ARRAY
43977: PPUSH
43978: CALL_OW 255
43982: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43983: LD_ADDR_VAR 0 10
43987: PUSH
43988: LD_INT 29
43990: PUSH
43991: LD_INT 91
43993: PUSH
43994: LD_INT 49
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// if not result then
44002: LD_VAR 0 3
44006: NOT
44007: IFFALSE 44011
// exit ;
44009: GO 44475
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44011: LD_ADDR_VAR 0 5
44015: PUSH
44016: LD_INT 81
44018: PUSH
44019: LD_VAR 0 8
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PPUSH
44028: CALL_OW 69
44032: ST_TO_ADDR
// for i in result do
44033: LD_ADDR_VAR 0 4
44037: PUSH
44038: LD_VAR 0 3
44042: PUSH
44043: FOR_IN
44044: IFFALSE 44473
// begin tag := GetTag ( i ) + 1 ;
44046: LD_ADDR_VAR 0 9
44050: PUSH
44051: LD_VAR 0 4
44055: PPUSH
44056: CALL_OW 110
44060: PUSH
44061: LD_INT 1
44063: PLUS
44064: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44065: LD_ADDR_VAR 0 7
44069: PUSH
44070: LD_VAR 0 4
44074: PPUSH
44075: CALL_OW 250
44079: PPUSH
44080: LD_VAR 0 4
44084: PPUSH
44085: CALL_OW 251
44089: PPUSH
44090: LD_INT 4
44092: PPUSH
44093: CALL 43666 0 3
44097: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44098: LD_VAR 0 4
44102: PPUSH
44103: CALL_OW 247
44107: PUSH
44108: LD_INT 2
44110: EQUAL
44111: IFFALSE 44123
44113: PUSH
44114: LD_VAR 0 7
44118: PUSH
44119: LD_INT 2
44121: GREATER
44122: AND
44123: IFFALSE 44143
44125: PUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 264
44135: PUSH
44136: LD_VAR 0 10
44140: IN
44141: NOT
44142: AND
44143: IFFALSE 44182
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44145: LD_VAR 0 4
44149: PPUSH
44150: LD_VAR 0 7
44154: PUSH
44155: LD_INT 1
44157: ARRAY
44158: PUSH
44159: LD_INT 1
44161: ARRAY
44162: PPUSH
44163: LD_VAR 0 7
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: PUSH
44172: LD_INT 2
44174: ARRAY
44175: PPUSH
44176: CALL_OW 116
44180: GO 44471
// if path > tag then
44182: LD_VAR 0 2
44186: PUSH
44187: LD_VAR 0 9
44191: GREATER
44192: IFFALSE 44400
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44194: LD_ADDR_VAR 0 6
44198: PUSH
44199: LD_VAR 0 5
44203: PPUSH
44204: LD_INT 91
44206: PUSH
44207: LD_VAR 0 4
44211: PUSH
44212: LD_INT 8
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: PPUSH
44220: CALL_OW 72
44224: ST_TO_ADDR
// if nearEnemy then
44225: LD_VAR 0 6
44229: IFFALSE 44298
// begin if GetWeapon ( i ) = ru_time_lapser then
44231: LD_VAR 0 4
44235: PPUSH
44236: CALL_OW 264
44240: PUSH
44241: LD_INT 49
44243: EQUAL
44244: IFFALSE 44272
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44246: LD_VAR 0 4
44250: PPUSH
44251: LD_VAR 0 6
44255: PPUSH
44256: LD_VAR 0 4
44260: PPUSH
44261: CALL_OW 74
44265: PPUSH
44266: CALL_OW 112
44270: GO 44296
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44272: LD_VAR 0 4
44276: PPUSH
44277: LD_VAR 0 6
44281: PPUSH
44282: LD_VAR 0 4
44286: PPUSH
44287: CALL_OW 74
44291: PPUSH
44292: CALL 45556 0 2
// end else
44296: GO 44398
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44298: LD_VAR 0 4
44302: PPUSH
44303: LD_VAR 0 2
44307: PUSH
44308: LD_VAR 0 9
44312: ARRAY
44313: PUSH
44314: LD_INT 1
44316: ARRAY
44317: PPUSH
44318: LD_VAR 0 2
44322: PUSH
44323: LD_VAR 0 9
44327: ARRAY
44328: PUSH
44329: LD_INT 2
44331: ARRAY
44332: PPUSH
44333: CALL_OW 297
44337: PUSH
44338: LD_INT 6
44340: GREATER
44341: IFFALSE 44384
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44343: LD_VAR 0 4
44347: PPUSH
44348: LD_VAR 0 2
44352: PUSH
44353: LD_VAR 0 9
44357: ARRAY
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: PPUSH
44363: LD_VAR 0 2
44367: PUSH
44368: LD_VAR 0 9
44372: ARRAY
44373: PUSH
44374: LD_INT 2
44376: ARRAY
44377: PPUSH
44378: CALL_OW 114
44382: GO 44398
// SetTag ( i , tag ) ;
44384: LD_VAR 0 4
44388: PPUSH
44389: LD_VAR 0 9
44393: PPUSH
44394: CALL_OW 109
// end else
44398: GO 44471
// if enemy then
44400: LD_VAR 0 5
44404: IFFALSE 44471
// begin if GetWeapon ( i ) = ru_time_lapser then
44406: LD_VAR 0 4
44410: PPUSH
44411: CALL_OW 264
44415: PUSH
44416: LD_INT 49
44418: EQUAL
44419: IFFALSE 44447
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44421: LD_VAR 0 4
44425: PPUSH
44426: LD_VAR 0 5
44430: PPUSH
44431: LD_VAR 0 4
44435: PPUSH
44436: CALL_OW 74
44440: PPUSH
44441: CALL_OW 112
44445: GO 44471
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44447: LD_VAR 0 4
44451: PPUSH
44452: LD_VAR 0 5
44456: PPUSH
44457: LD_VAR 0 4
44461: PPUSH
44462: CALL_OW 74
44466: PPUSH
44467: CALL 45556 0 2
// end ; end ;
44471: GO 44043
44473: POP
44474: POP
// end ;
44475: LD_VAR 0 3
44479: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44480: LD_INT 0
44482: PPUSH
44483: PPUSH
44484: PPUSH
// if not unit or IsInUnit ( unit ) then
44485: LD_VAR 0 1
44489: NOT
44490: IFTRUE 44503
44492: PUSH
44493: LD_VAR 0 1
44497: PPUSH
44498: CALL_OW 310
44502: OR
44503: IFFALSE 44507
// exit ;
44505: GO 44598
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44507: LD_ADDR_VAR 0 4
44511: PUSH
44512: LD_VAR 0 1
44516: PPUSH
44517: CALL_OW 250
44521: PPUSH
44522: LD_VAR 0 2
44526: PPUSH
44527: LD_INT 1
44529: PPUSH
44530: CALL_OW 272
44534: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44535: LD_ADDR_VAR 0 5
44539: PUSH
44540: LD_VAR 0 1
44544: PPUSH
44545: CALL_OW 251
44549: PPUSH
44550: LD_VAR 0 2
44554: PPUSH
44555: LD_INT 1
44557: PPUSH
44558: CALL_OW 273
44562: ST_TO_ADDR
// if ValidHex ( x , y ) then
44563: LD_VAR 0 4
44567: PPUSH
44568: LD_VAR 0 5
44572: PPUSH
44573: CALL_OW 488
44577: IFFALSE 44598
// ComTurnXY ( unit , x , y ) ;
44579: LD_VAR 0 1
44583: PPUSH
44584: LD_VAR 0 4
44588: PPUSH
44589: LD_VAR 0 5
44593: PPUSH
44594: CALL_OW 118
// end ;
44598: LD_VAR 0 3
44602: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44603: LD_INT 0
44605: PPUSH
44606: PPUSH
// result := false ;
44607: LD_ADDR_VAR 0 3
44611: PUSH
44612: LD_INT 0
44614: ST_TO_ADDR
// if not units then
44615: LD_VAR 0 2
44619: NOT
44620: IFFALSE 44624
// exit ;
44622: GO 44669
// for i in units do
44624: LD_ADDR_VAR 0 4
44628: PUSH
44629: LD_VAR 0 2
44633: PUSH
44634: FOR_IN
44635: IFFALSE 44667
// if See ( side , i ) then
44637: LD_VAR 0 1
44641: PPUSH
44642: LD_VAR 0 4
44646: PPUSH
44647: CALL_OW 292
44651: IFFALSE 44665
// begin result := true ;
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 1
44660: ST_TO_ADDR
// exit ;
44661: POP
44662: POP
44663: GO 44669
// end ;
44665: GO 44634
44667: POP
44668: POP
// end ;
44669: LD_VAR 0 3
44673: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44674: LD_INT 0
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
// if not unit or not points then
44680: LD_VAR 0 1
44684: NOT
44685: IFTRUE 44694
44687: PUSH
44688: LD_VAR 0 2
44692: NOT
44693: OR
44694: IFFALSE 44698
// exit ;
44696: GO 44788
// dist := 99999 ;
44698: LD_ADDR_VAR 0 5
44702: PUSH
44703: LD_INT 99999
44705: ST_TO_ADDR
// for i in points do
44706: LD_ADDR_VAR 0 4
44710: PUSH
44711: LD_VAR 0 2
44715: PUSH
44716: FOR_IN
44717: IFFALSE 44786
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_VAR 0 1
44728: PPUSH
44729: LD_VAR 0 4
44733: PUSH
44734: LD_INT 1
44736: ARRAY
44737: PPUSH
44738: LD_VAR 0 4
44742: PUSH
44743: LD_INT 2
44745: ARRAY
44746: PPUSH
44747: CALL_OW 297
44751: ST_TO_ADDR
// if tmpDist < dist then
44752: LD_VAR 0 6
44756: PUSH
44757: LD_VAR 0 5
44761: LESS
44762: IFFALSE 44784
// begin result := i ;
44764: LD_ADDR_VAR 0 3
44768: PUSH
44769: LD_VAR 0 4
44773: ST_TO_ADDR
// dist := tmpDist ;
44774: LD_ADDR_VAR 0 5
44778: PUSH
44779: LD_VAR 0 6
44783: ST_TO_ADDR
// end ; end ;
44784: GO 44716
44786: POP
44787: POP
// end ;
44788: LD_VAR 0 3
44792: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44793: LD_INT 0
44795: PPUSH
// uc_side := side ;
44796: LD_ADDR_OWVAR 20
44800: PUSH
44801: LD_VAR 0 1
44805: ST_TO_ADDR
// uc_nation := 3 ;
44806: LD_ADDR_OWVAR 21
44810: PUSH
44811: LD_INT 3
44813: ST_TO_ADDR
// vc_chassis := 25 ;
44814: LD_ADDR_OWVAR 37
44818: PUSH
44819: LD_INT 25
44821: ST_TO_ADDR
// vc_engine := engine_siberite ;
44822: LD_ADDR_OWVAR 39
44826: PUSH
44827: LD_INT 3
44829: ST_TO_ADDR
// vc_control := control_computer ;
44830: LD_ADDR_OWVAR 38
44834: PUSH
44835: LD_INT 3
44837: ST_TO_ADDR
// vc_weapon := 59 ;
44838: LD_ADDR_OWVAR 40
44842: PUSH
44843: LD_INT 59
44845: ST_TO_ADDR
// result := CreateVehicle ;
44846: LD_ADDR_VAR 0 5
44850: PUSH
44851: CALL_OW 45
44855: ST_TO_ADDR
// SetDir ( result , d ) ;
44856: LD_VAR 0 5
44860: PPUSH
44861: LD_VAR 0 4
44865: PPUSH
44866: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44870: LD_VAR 0 5
44874: PPUSH
44875: LD_VAR 0 2
44879: PPUSH
44880: LD_VAR 0 3
44884: PPUSH
44885: LD_INT 0
44887: PPUSH
44888: CALL_OW 48
// end ;
44892: LD_VAR 0 5
44896: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44897: LD_INT 0
44899: PPUSH
44900: PPUSH
44901: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44902: LD_ADDR_VAR 0 2
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44925: LD_VAR 0 1
44929: NOT
44930: IFTRUE 44963
44932: PUSH
44933: LD_VAR 0 1
44937: PPUSH
44938: CALL_OW 264
44942: PUSH
44943: LD_INT 12
44945: PUSH
44946: LD_INT 51
44948: PUSH
44949: LD_INT 32
44951: PUSH
44952: LD_INT 89
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: IN
44961: NOT
44962: OR
44963: IFFALSE 44967
// exit ;
44965: GO 45065
// for i := 1 to 3 do
44967: LD_ADDR_VAR 0 3
44971: PUSH
44972: DOUBLE
44973: LD_INT 1
44975: DEC
44976: ST_TO_ADDR
44977: LD_INT 3
44979: PUSH
44980: FOR_TO
44981: IFFALSE 45063
// begin tmp := GetCargo ( cargo , i ) ;
44983: LD_ADDR_VAR 0 4
44987: PUSH
44988: LD_VAR 0 1
44992: PPUSH
44993: LD_VAR 0 3
44997: PPUSH
44998: CALL_OW 289
45002: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45003: LD_ADDR_VAR 0 2
45007: PUSH
45008: LD_VAR 0 2
45012: PPUSH
45013: LD_VAR 0 3
45017: PPUSH
45018: LD_VAR 0 4
45022: PPUSH
45023: CALL_OW 1
45027: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45028: LD_ADDR_VAR 0 2
45032: PUSH
45033: LD_VAR 0 2
45037: PPUSH
45038: LD_INT 4
45040: PPUSH
45041: LD_VAR 0 2
45045: PUSH
45046: LD_INT 4
45048: ARRAY
45049: PUSH
45050: LD_VAR 0 4
45054: PLUS
45055: PPUSH
45056: CALL_OW 1
45060: ST_TO_ADDR
// end ;
45061: GO 44980
45063: POP
45064: POP
// end ;
45065: LD_VAR 0 2
45069: RET
// export function Length ( array ) ; begin
45070: LD_INT 0
45072: PPUSH
// result := array + 0 ;
45073: LD_ADDR_VAR 0 2
45077: PUSH
45078: LD_VAR 0 1
45082: PUSH
45083: LD_INT 0
45085: PLUS
45086: ST_TO_ADDR
// end ;
45087: LD_VAR 0 2
45091: RET
// export function PrepareArray ( array ) ; begin
45092: LD_INT 0
45094: PPUSH
// result := array diff 0 ;
45095: LD_ADDR_VAR 0 2
45099: PUSH
45100: LD_VAR 0 1
45104: PUSH
45105: LD_INT 0
45107: DIFF
45108: ST_TO_ADDR
// if not result [ 1 ] then
45109: LD_VAR 0 2
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: NOT
45118: IFFALSE 45138
// result := Delete ( result , 1 ) ;
45120: LD_ADDR_VAR 0 2
45124: PUSH
45125: LD_VAR 0 2
45129: PPUSH
45130: LD_INT 1
45132: PPUSH
45133: CALL_OW 3
45137: ST_TO_ADDR
// end ;
45138: LD_VAR 0 2
45142: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45143: LD_INT 0
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
// sibRocketRange := 25 ;
45149: LD_ADDR_VAR 0 6
45153: PUSH
45154: LD_INT 25
45156: ST_TO_ADDR
// result := false ;
45157: LD_ADDR_VAR 0 4
45161: PUSH
45162: LD_INT 0
45164: ST_TO_ADDR
// for i := 0 to 5 do
45165: LD_ADDR_VAR 0 5
45169: PUSH
45170: DOUBLE
45171: LD_INT 0
45173: DEC
45174: ST_TO_ADDR
45175: LD_INT 5
45177: PUSH
45178: FOR_TO
45179: IFFALSE 45246
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45181: LD_VAR 0 1
45185: PPUSH
45186: LD_VAR 0 5
45190: PPUSH
45191: LD_VAR 0 6
45195: PPUSH
45196: CALL_OW 272
45200: PPUSH
45201: LD_VAR 0 2
45205: PPUSH
45206: LD_VAR 0 5
45210: PPUSH
45211: LD_VAR 0 6
45215: PPUSH
45216: CALL_OW 273
45220: PPUSH
45221: LD_VAR 0 3
45225: PPUSH
45226: CALL_OW 309
45230: IFFALSE 45244
// begin result := true ;
45232: LD_ADDR_VAR 0 4
45236: PUSH
45237: LD_INT 1
45239: ST_TO_ADDR
// exit ;
45240: POP
45241: POP
45242: GO 45248
// end ;
45244: GO 45178
45246: POP
45247: POP
// end ;
45248: LD_VAR 0 4
45252: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45253: LD_INT 0
45255: PPUSH
45256: PPUSH
45257: PPUSH
// if btype = b_depot then
45258: LD_VAR 0 2
45262: PUSH
45263: LD_INT 0
45265: EQUAL
45266: IFFALSE 45278
// begin result := true ;
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 1
45275: ST_TO_ADDR
// exit ;
45276: GO 45398
// end ; pom := GetBase ( depot ) ;
45278: LD_ADDR_VAR 0 4
45282: PUSH
45283: LD_VAR 0 1
45287: PPUSH
45288: CALL_OW 274
45292: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45293: LD_ADDR_VAR 0 5
45297: PUSH
45298: LD_VAR 0 2
45302: PPUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: CALL_OW 248
45312: PPUSH
45313: CALL_OW 450
45317: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_VAR 0 4
45327: PPUSH
45328: LD_INT 1
45330: PPUSH
45331: CALL_OW 275
45335: PUSH
45336: LD_VAR 0 5
45340: PUSH
45341: LD_INT 1
45343: ARRAY
45344: GREATEREQUAL
45345: IFFALSE 45371
45347: PUSH
45348: LD_VAR 0 4
45352: PPUSH
45353: LD_INT 2
45355: PPUSH
45356: CALL_OW 275
45360: PUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_INT 2
45368: ARRAY
45369: GREATEREQUAL
45370: AND
45371: IFFALSE 45397
45373: PUSH
45374: LD_VAR 0 4
45378: PPUSH
45379: LD_INT 3
45381: PPUSH
45382: CALL_OW 275
45386: PUSH
45387: LD_VAR 0 5
45391: PUSH
45392: LD_INT 3
45394: ARRAY
45395: GREATEREQUAL
45396: AND
45397: ST_TO_ADDR
// end ;
45398: LD_VAR 0 3
45402: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45403: LD_INT 0
45405: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45406: LD_VAR 0 1
45410: PPUSH
45411: LD_VAR 0 2
45415: PPUSH
45416: LD_INT 0
45418: PPUSH
45419: LD_INT 0
45421: PPUSH
45422: LD_INT 1
45424: PPUSH
45425: LD_INT 0
45427: PPUSH
45428: CALL_OW 587
// end ;
45432: LD_VAR 0 3
45436: RET
// export function CenterOnNow ( unit ) ; begin
45437: LD_INT 0
45439: PPUSH
// result := IsInUnit ( unit ) ;
45440: LD_ADDR_VAR 0 2
45444: PUSH
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 310
45454: ST_TO_ADDR
// if not result then
45455: LD_VAR 0 2
45459: NOT
45460: IFFALSE 45472
// result := unit ;
45462: LD_ADDR_VAR 0 2
45466: PUSH
45467: LD_VAR 0 1
45471: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL_OW 87
// end ;
45481: LD_VAR 0 2
45485: RET
// export function ComMoveHex ( unit , hex ) ; begin
45486: LD_INT 0
45488: PPUSH
// if not hex then
45489: LD_VAR 0 2
45493: NOT
45494: IFFALSE 45498
// exit ;
45496: GO 45551
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45498: LD_VAR 0 2
45502: PUSH
45503: LD_INT 1
45505: ARRAY
45506: PPUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 2
45514: ARRAY
45515: PPUSH
45516: CALL_OW 428
45520: IFFALSE 45524
// exit ;
45522: GO 45551
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45524: LD_VAR 0 1
45528: PPUSH
45529: LD_VAR 0 2
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: PPUSH
45538: LD_VAR 0 2
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: PPUSH
45547: CALL_OW 111
// end ;
45551: LD_VAR 0 3
45555: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45556: LD_INT 0
45558: PPUSH
45559: PPUSH
45560: PPUSH
// if not unit or not enemy then
45561: LD_VAR 0 1
45565: NOT
45566: IFTRUE 45575
45568: PUSH
45569: LD_VAR 0 2
45573: NOT
45574: OR
45575: IFFALSE 45579
// exit ;
45577: GO 45705
// x := GetX ( enemy ) ;
45579: LD_ADDR_VAR 0 4
45583: PUSH
45584: LD_VAR 0 2
45588: PPUSH
45589: CALL_OW 250
45593: ST_TO_ADDR
// y := GetY ( enemy ) ;
45594: LD_ADDR_VAR 0 5
45598: PUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: CALL_OW 251
45608: ST_TO_ADDR
// if ValidHex ( x , y ) then
45609: LD_VAR 0 4
45613: PPUSH
45614: LD_VAR 0 5
45618: PPUSH
45619: CALL_OW 488
45623: IFFALSE 45705
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45625: LD_VAR 0 2
45629: PPUSH
45630: CALL_OW 247
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: IN
45645: IFTRUE 45668
45647: PUSH
45648: LD_VAR 0 1
45652: PPUSH
45653: CALL_OW 255
45657: PPUSH
45658: LD_VAR 0 2
45662: PPUSH
45663: CALL_OW 292
45667: OR
45668: IFFALSE 45686
// ComAttackUnit ( unit , enemy ) else
45670: LD_VAR 0 1
45674: PPUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: CALL_OW 115
45684: GO 45705
// ComAgressiveMove ( unit , x , y ) ;
45686: LD_VAR 0 1
45690: PPUSH
45691: LD_VAR 0 4
45695: PPUSH
45696: LD_VAR 0 5
45700: PPUSH
45701: CALL_OW 114
// end ;
45705: LD_VAR 0 3
45709: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45710: LD_INT 0
45712: PPUSH
45713: PPUSH
45714: PPUSH
// list := AreaToList ( area , 0 ) ;
45715: LD_ADDR_VAR 0 5
45719: PUSH
45720: LD_VAR 0 1
45724: PPUSH
45725: LD_INT 0
45727: PPUSH
45728: CALL_OW 517
45732: ST_TO_ADDR
// if not list then
45733: LD_VAR 0 5
45737: NOT
45738: IFFALSE 45742
// exit ;
45740: GO 45872
// if all then
45742: LD_VAR 0 2
45746: IFFALSE 45834
// begin for i := 1 to list [ 1 ] do
45748: LD_ADDR_VAR 0 4
45752: PUSH
45753: DOUBLE
45754: LD_INT 1
45756: DEC
45757: ST_TO_ADDR
45758: LD_VAR 0 5
45762: PUSH
45763: LD_INT 1
45765: ARRAY
45766: PUSH
45767: FOR_TO
45768: IFFALSE 45830
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45770: LD_ADDR_VAR 0 3
45774: PUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: LD_VAR 0 3
45784: PUSH
45785: LD_INT 1
45787: PLUS
45788: PPUSH
45789: LD_VAR 0 5
45793: PUSH
45794: LD_INT 1
45796: ARRAY
45797: PUSH
45798: LD_VAR 0 4
45802: ARRAY
45803: PUSH
45804: LD_VAR 0 5
45808: PUSH
45809: LD_INT 2
45811: ARRAY
45812: PUSH
45813: LD_VAR 0 4
45817: ARRAY
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PPUSH
45823: CALL_OW 1
45827: ST_TO_ADDR
45828: GO 45767
45830: POP
45831: POP
// exit ;
45832: GO 45872
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_VAR 0 5
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 5
45856: PUSH
45857: LD_INT 2
45859: ARRAY
45860: PUSH
45861: LD_INT 1
45863: ARRAY
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: ST_TO_ADDR
// end ;
45872: LD_VAR 0 3
45876: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45877: LD_INT 0
45879: PPUSH
45880: PPUSH
// list := AreaToList ( area , 0 ) ;
45881: LD_ADDR_VAR 0 4
45885: PUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: LD_INT 0
45893: PPUSH
45894: CALL_OW 517
45898: ST_TO_ADDR
// if not list then
45899: LD_VAR 0 4
45903: NOT
45904: IFFALSE 45908
// exit ;
45906: GO 45949
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45908: LD_ADDR_VAR 0 3
45912: PUSH
45913: LD_VAR 0 4
45917: PUSH
45918: LD_INT 1
45920: ARRAY
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: PUSH
45926: LD_VAR 0 4
45930: PUSH
45931: LD_INT 2
45933: ARRAY
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PUSH
45939: LD_VAR 0 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// end ;
45949: LD_VAR 0 3
45953: RET
// export function First ( array ) ; begin
45954: LD_INT 0
45956: PPUSH
// if not array then
45957: LD_VAR 0 1
45961: NOT
45962: IFFALSE 45966
// exit ;
45964: GO 45980
// result := array [ 1 ] ;
45966: LD_ADDR_VAR 0 2
45970: PUSH
45971: LD_VAR 0 1
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: ST_TO_ADDR
// end ;
45980: LD_VAR 0 2
45984: RET
// export function Last ( array ) ; begin
45985: LD_INT 0
45987: PPUSH
// if not array then
45988: LD_VAR 0 1
45992: NOT
45993: IFFALSE 45997
// exit ;
45995: GO 46013
// result := array [ array ] ;
45997: LD_ADDR_VAR 0 2
46001: PUSH
46002: LD_VAR 0 1
46006: PUSH
46007: LD_VAR 0 1
46011: ARRAY
46012: ST_TO_ADDR
// end ;
46013: LD_VAR 0 2
46017: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46018: LD_INT 0
46020: PPUSH
46021: PPUSH
// result := [ ] ;
46022: LD_ADDR_VAR 0 5
46026: PUSH
46027: EMPTY
46028: ST_TO_ADDR
// if not array then
46029: LD_VAR 0 1
46033: NOT
46034: IFFALSE 46038
// exit ;
46036: GO 46150
// for i := 1 to array do
46038: LD_ADDR_VAR 0 6
46042: PUSH
46043: DOUBLE
46044: LD_INT 1
46046: DEC
46047: ST_TO_ADDR
46048: LD_VAR 0 1
46052: PUSH
46053: FOR_TO
46054: IFFALSE 46148
// if array [ i ] [ index ] = value then
46056: LD_VAR 0 1
46060: PUSH
46061: LD_VAR 0 6
46065: ARRAY
46066: PUSH
46067: LD_VAR 0 2
46071: ARRAY
46072: PUSH
46073: LD_VAR 0 3
46077: EQUAL
46078: IFFALSE 46146
// begin if indexColumn then
46080: LD_VAR 0 4
46084: IFFALSE 46120
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46086: LD_ADDR_VAR 0 5
46090: PUSH
46091: LD_VAR 0 5
46095: PPUSH
46096: LD_VAR 0 1
46100: PUSH
46101: LD_VAR 0 6
46105: ARRAY
46106: PUSH
46107: LD_VAR 0 4
46111: ARRAY
46112: PPUSH
46113: CALL 41158 0 2
46117: ST_TO_ADDR
46118: GO 46146
// result := Join ( result , array [ i ] ) ;
46120: LD_ADDR_VAR 0 5
46124: PUSH
46125: LD_VAR 0 5
46129: PPUSH
46130: LD_VAR 0 1
46134: PUSH
46135: LD_VAR 0 6
46139: ARRAY
46140: PPUSH
46141: CALL 41158 0 2
46145: ST_TO_ADDR
// end ;
46146: GO 46053
46148: POP
46149: POP
// end ;
46150: LD_VAR 0 5
46154: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46155: LD_INT 0
46157: PPUSH
// if not vehicles or not parkingPoint then
46158: LD_VAR 0 1
46162: NOT
46163: IFTRUE 46172
46165: PUSH
46166: LD_VAR 0 2
46170: NOT
46171: OR
46172: IFFALSE 46176
// exit ;
46174: GO 46274
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46176: LD_ADDR_VAR 0 1
46180: PUSH
46181: LD_VAR 0 1
46185: PPUSH
46186: LD_INT 50
46188: PUSH
46189: EMPTY
46190: LIST
46191: PUSH
46192: LD_INT 3
46194: PUSH
46195: LD_INT 92
46197: PUSH
46198: LD_VAR 0 2
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: PUSH
46207: LD_VAR 0 2
46211: PUSH
46212: LD_INT 2
46214: ARRAY
46215: PUSH
46216: LD_INT 8
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PPUSH
46233: CALL_OW 72
46237: ST_TO_ADDR
// if not vehicles then
46238: LD_VAR 0 1
46242: NOT
46243: IFFALSE 46247
// exit ;
46245: GO 46274
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46247: LD_VAR 0 1
46251: PPUSH
46252: LD_VAR 0 2
46256: PUSH
46257: LD_INT 1
46259: ARRAY
46260: PPUSH
46261: LD_VAR 0 2
46265: PUSH
46266: LD_INT 2
46268: ARRAY
46269: PPUSH
46270: CALL_OW 111
// end ;
46274: LD_VAR 0 3
46278: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
46283: PPUSH
// if not side or not area then
46284: LD_VAR 0 1
46288: NOT
46289: IFTRUE 46298
46291: PUSH
46292: LD_VAR 0 2
46296: NOT
46297: OR
46298: IFFALSE 46302
// exit ;
46300: GO 46421
// tmp := AreaToList ( area , 0 ) ;
46302: LD_ADDR_VAR 0 5
46306: PUSH
46307: LD_VAR 0 2
46311: PPUSH
46312: LD_INT 0
46314: PPUSH
46315: CALL_OW 517
46319: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46320: LD_ADDR_VAR 0 4
46324: PUSH
46325: DOUBLE
46326: LD_INT 1
46328: DEC
46329: ST_TO_ADDR
46330: LD_VAR 0 5
46334: PUSH
46335: LD_INT 1
46337: ARRAY
46338: PUSH
46339: FOR_TO
46340: IFFALSE 46419
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46342: LD_VAR 0 5
46346: PUSH
46347: LD_INT 1
46349: ARRAY
46350: PUSH
46351: LD_VAR 0 4
46355: ARRAY
46356: PPUSH
46357: LD_VAR 0 5
46361: PUSH
46362: LD_INT 2
46364: ARRAY
46365: PUSH
46366: LD_VAR 0 4
46370: ARRAY
46371: PPUSH
46372: CALL_OW 351
46376: IFFALSE 46417
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46378: LD_VAR 0 5
46382: PUSH
46383: LD_INT 1
46385: ARRAY
46386: PUSH
46387: LD_VAR 0 4
46391: ARRAY
46392: PPUSH
46393: LD_VAR 0 5
46397: PUSH
46398: LD_INT 2
46400: ARRAY
46401: PUSH
46402: LD_VAR 0 4
46406: ARRAY
46407: PPUSH
46408: LD_VAR 0 1
46412: PPUSH
46413: CALL_OW 244
// end ;
46417: GO 46339
46419: POP
46420: POP
// end ;
46421: LD_VAR 0 3
46425: RET
// export function UniqueArray ( array ) ; var i ; begin
46426: LD_INT 0
46428: PPUSH
46429: PPUSH
// result := [ ] ;
46430: LD_ADDR_VAR 0 2
46434: PUSH
46435: EMPTY
46436: ST_TO_ADDR
// if not array then
46437: LD_VAR 0 1
46441: NOT
46442: IFFALSE 46446
// exit ;
46444: GO 46507
// for i := 1 to array do
46446: LD_ADDR_VAR 0 3
46450: PUSH
46451: DOUBLE
46452: LD_INT 1
46454: DEC
46455: ST_TO_ADDR
46456: LD_VAR 0 1
46460: PUSH
46461: FOR_TO
46462: IFFALSE 46505
// if not array [ i ] in result then
46464: LD_VAR 0 1
46468: PUSH
46469: LD_VAR 0 3
46473: ARRAY
46474: PUSH
46475: LD_VAR 0 2
46479: IN
46480: NOT
46481: IFFALSE 46503
// result := Join ( result , i ) ;
46483: LD_ADDR_VAR 0 2
46487: PUSH
46488: LD_VAR 0 2
46492: PPUSH
46493: LD_VAR 0 3
46497: PPUSH
46498: CALL 41158 0 2
46502: ST_TO_ADDR
46503: GO 46461
46505: POP
46506: POP
// end ; end_of_file
46507: LD_VAR 0 2
46511: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46512: LD_INT 0
46514: PPUSH
46515: PPUSH
// disable ( mpActive ) ;
46516: LD_INT 100
46518: DISABLE_MARKED
// disable ( mpWin ) ;
46519: LD_INT 101
46521: DISABLE_MARKED
// disable ( mpLose ) ;
46522: LD_INT 102
46524: DISABLE_MARKED
// mpGameType := 0 ;
46525: LD_ADDR_EXP 1
46529: PUSH
46530: LD_INT 0
46532: ST_TO_ADDR
// mpGameSettings := [ ] ;
46533: LD_ADDR_EXP 4
46537: PUSH
46538: EMPTY
46539: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46540: LD_ADDR_EXP 2
46544: PUSH
46545: EMPTY
46546: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46547: LD_ADDR_EXP 3
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46554: LD_ADDR_EXP 27
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46569: LD_ADDR_EXP 10
46573: PUSH
46574: EMPTY
46575: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46576: LD_ADDR_EXP 11
46580: PUSH
46581: EMPTY
46582: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46583: LD_ADDR_EXP 40
46587: PUSH
46588: EMPTY
46589: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46590: LD_ADDR_EXP 41
46594: PUSH
46595: EMPTY
46596: ST_TO_ADDR
// mpDepots := [ ] ;
46597: LD_ADDR_EXP 12
46601: PUSH
46602: EMPTY
46603: ST_TO_ADDR
// mpBuildings := [ ] ;
46604: LD_ADDR_EXP 15
46608: PUSH
46609: EMPTY
46610: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46611: LD_ADDR_EXP 16
46615: PUSH
46616: EMPTY
46617: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46618: LD_ADDR_EXP 17
46622: PUSH
46623: EMPTY
46624: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46625: LD_ADDR_EXP 18
46629: PUSH
46630: EMPTY
46631: ST_TO_ADDR
// mpStartingResources := [ ] ;
46632: LD_ADDR_EXP 13
46636: PUSH
46637: EMPTY
46638: ST_TO_ADDR
// mpStartPos := [ ] ;
46639: LD_ADDR_EXP 19
46643: PUSH
46644: EMPTY
46645: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46646: LD_ADDR_EXP 20
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46655: LD_ADDR_EXP 21
46659: PUSH
46660: EMPTY
46661: ST_TO_ADDR
// mpApemans := [ ] ;
46662: LD_ADDR_EXP 28
46666: PUSH
46667: EMPTY
46668: ST_TO_ADDR
// mpApemansArea := [ ] ;
46669: LD_ADDR_EXP 29
46673: PUSH
46674: EMPTY
46675: ST_TO_ADDR
// mpRespawn := [ ] ;
46676: LD_ADDR_EXP 31
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// mpKingArea := 0 ;
46683: LD_ADDR_EXP 32
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// mpPoints := [ ] ;
46691: LD_ADDR_EXP 33
46695: PUSH
46696: EMPTY
46697: ST_TO_ADDR
// mpVehicles := 0 ;
46698: LD_ADDR_EXP 34
46702: PUSH
46703: LD_INT 0
46705: ST_TO_ADDR
// mpShipments := 0 ;
46706: LD_ADDR_EXP 25
46710: PUSH
46711: LD_INT 0
46713: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46714: LD_ADDR_EXP 38
46718: PUSH
46719: EMPTY
46720: PUSH
46721: EMPTY
46722: PUSH
46723: EMPTY
46724: PUSH
46725: EMPTY
46726: PUSH
46727: EMPTY
46728: PUSH
46729: EMPTY
46730: PUSH
46731: EMPTY
46732: PUSH
46733: EMPTY
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46745: LD_ADDR_EXP 30
46749: PUSH
46750: EMPTY
46751: PUSH
46752: EMPTY
46753: PUSH
46754: EMPTY
46755: PUSH
46756: EMPTY
46757: PUSH
46758: EMPTY
46759: PUSH
46760: EMPTY
46761: PUSH
46762: EMPTY
46763: PUSH
46764: EMPTY
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46776: LD_ADDR_EXP 39
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// mpEmissions := 0 ;
46815: LD_ADDR_EXP 35
46819: PUSH
46820: LD_INT 0
46822: ST_TO_ADDR
// mpTeleports := 0 ;
46823: LD_ADDR_EXP 42
46827: PUSH
46828: LD_INT 0
46830: ST_TO_ADDR
// mpArtifacts := 0 ;
46831: LD_ADDR_EXP 43
46835: PUSH
46836: LD_INT 0
46838: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46839: LD_ADDR_EXP 44
46843: PUSH
46844: LD_INT 0
46846: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46847: LD_ADDR_EXP 23
46851: PUSH
46852: LD_INT 3
46854: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46855: LD_ADDR_EXP 22
46859: PUSH
46860: LD_INT 15
46862: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46863: LD_ADDR_EXP 36
46867: PUSH
46868: LD_INT 0
46870: ST_TO_ADDR
// mpGameActive := false ;
46871: LD_ADDR_EXP 37
46875: PUSH
46876: LD_INT 0
46878: ST_TO_ADDR
// mpBlockRespThread := false ;
46879: LD_ADDR_EXP 45
46883: PUSH
46884: LD_INT 0
46886: ST_TO_ADDR
// for i := 1 to 32 do
46887: LD_ADDR_VAR 0 2
46891: PUSH
46892: DOUBLE
46893: LD_INT 1
46895: DEC
46896: ST_TO_ADDR
46897: LD_INT 32
46899: PUSH
46900: FOR_TO
46901: IFFALSE 46928
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46903: LD_ADDR_EXP 4
46907: PUSH
46908: LD_EXP 4
46912: PPUSH
46913: LD_VAR 0 2
46917: PPUSH
46918: LD_INT 0
46920: PPUSH
46921: CALL_OW 1
46925: ST_TO_ADDR
46926: GO 46900
46928: POP
46929: POP
// end ;
46930: LD_VAR 0 1
46934: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46935: LD_INT 0
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
46951: LD_ADDR_VAR 0 14
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: LD_INT 5
46967: PUSH
46968: LD_INT 6
46970: PUSH
46971: LD_INT 7
46973: PUSH
46974: LD_INT 8
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// for i in gameTypes do
46986: LD_ADDR_VAR 0 2
46990: PUSH
46991: LD_VAR 0 14
46995: PUSH
46996: FOR_IN
46997: IFFALSE 47006
// disable ( i ) ;
46999: LD_VAR 0 2
47003: DISABLE_MARKED
47004: GO 46996
47006: POP
47007: POP
// if Multiplayer then
47008: LD_OWVAR 4
47012: IFFALSE 47196
// begin mpGameType := mp_game_type ;
47014: LD_ADDR_EXP 1
47018: PUSH
47019: LD_OWVAR 6
47023: ST_TO_ADDR
// your_side := mp_player_side ;
47024: LD_ADDR_OWVAR 2
47028: PUSH
47029: LD_OWVAR 7
47033: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47034: LD_ADDR_EXP 5
47038: PUSH
47039: LD_OWVAR 17
47043: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47044: LD_ADDR_EXP 6
47048: PUSH
47049: LD_OWVAR 15
47053: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47054: LD_ADDR_EXP 7
47058: PUSH
47059: LD_OWVAR 16
47063: ST_TO_ADDR
// mpTeams := mp_teams ;
47064: LD_ADDR_EXP 8
47068: PUSH
47069: LD_OWVAR 12
47073: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47074: LD_ADDR_VAR 0 2
47078: PUSH
47079: DOUBLE
47080: LD_INT 1
47082: DEC
47083: ST_TO_ADDR
47084: LD_EXP 2
47088: PPUSH
47089: CALL 5182 0 1
47093: PUSH
47094: FOR_TO
47095: IFFALSE 47171
// begin setting := mpGameSettingsKeys [ i ] ;
47097: LD_ADDR_VAR 0 12
47101: PUSH
47102: LD_EXP 2
47106: PUSH
47107: LD_VAR 0 2
47111: ARRAY
47112: ST_TO_ADDR
// if setting then
47113: LD_VAR 0 12
47117: IFFALSE 47169
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47119: LD_ADDR_EXP 4
47123: PUSH
47124: LD_EXP 4
47128: PPUSH
47129: LD_VAR 0 2
47133: PPUSH
47134: LD_EXP 3
47138: PUSH
47139: LD_VAR 0 2
47143: ARRAY
47144: PUSH
47145: LD_VAR 0 2
47149: PUSH
47150: LD_INT 1
47152: MINUS
47153: PPUSH
47154: CALL_OW 426
47158: PUSH
47159: LD_INT 1
47161: PLUS
47162: ARRAY
47163: PPUSH
47164: CALL_OW 1
47168: ST_TO_ADDR
// end ;
47169: GO 47094
47171: POP
47172: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47173: LD_ADDR_EXP 9
47177: PUSH
47178: LD_EXP 6
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: DIFF
47189: PUSH
47190: LD_INT 1
47192: GREATER
47193: ST_TO_ADDR
// end else
47194: GO 47196
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47196: LD_EXP 1
47200: PPUSH
47201: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
47205: LD_EXP 16
47209: PPUSH
47210: CALL 5182 0 1
47214: IFFALSE 47245
// begin for i in mpMarkedAreas do
47216: LD_ADDR_VAR 0 2
47220: PUSH
47221: LD_EXP 16
47225: PUSH
47226: FOR_IN
47227: IFFALSE 47243
// SetAreaMapShow ( i , 0 ) ;
47229: LD_VAR 0 2
47233: PPUSH
47234: LD_INT 0
47236: PPUSH
47237: CALL_OW 424
47241: GO 47226
47243: POP
47244: POP
// end ; for i := 1 to 8 do
47245: LD_ADDR_VAR 0 2
47249: PUSH
47250: DOUBLE
47251: LD_INT 1
47253: DEC
47254: ST_TO_ADDR
47255: LD_INT 8
47257: PUSH
47258: FOR_TO
47259: IFFALSE 48718
// begin if not mpSidePositions [ i ] then
47261: LD_EXP 5
47265: PUSH
47266: LD_VAR 0 2
47270: ARRAY
47271: NOT
47272: IFFALSE 47276
// continue ;
47274: GO 47258
// side := i ;
47276: LD_ADDR_VAR 0 7
47280: PUSH
47281: LD_VAR 0 2
47285: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47286: LD_ADDR_VAR 0 9
47290: PUSH
47291: LD_EXP 7
47295: PUSH
47296: LD_VAR 0 2
47300: ARRAY
47301: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47302: LD_ADDR_VAR 0 8
47306: PUSH
47307: LD_EXP 5
47311: PUSH
47312: LD_VAR 0 2
47316: ARRAY
47317: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47318: LD_EXP 10
47322: PPUSH
47323: CALL 5182 0 1
47327: IFFALSE 47404
// begin for j in mpOilDeposits [ pos ] do
47329: LD_ADDR_VAR 0 3
47333: PUSH
47334: LD_EXP 10
47338: PUSH
47339: LD_VAR 0 8
47343: ARRAY
47344: PUSH
47345: FOR_IN
47346: IFFALSE 47402
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47348: LD_VAR 0 3
47352: PUSH
47353: LD_INT 1
47355: ARRAY
47356: PPUSH
47357: LD_VAR 0 3
47361: PUSH
47362: LD_INT 2
47364: ARRAY
47365: PPUSH
47366: LD_INT 2
47368: PPUSH
47369: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47373: LD_VAR 0 3
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PPUSH
47382: LD_VAR 0 3
47386: PUSH
47387: LD_INT 2
47389: ARRAY
47390: PPUSH
47391: LD_VAR 0 7
47395: PPUSH
47396: CALL_OW 441
// end ;
47400: GO 47345
47402: POP
47403: POP
// end ; if Count ( mpSibDeposits ) then
47404: LD_EXP 11
47408: PPUSH
47409: CALL 5182 0 1
47413: IFFALSE 47490
// begin for j in mpSibDeposits [ pos ] do
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: LD_EXP 11
47424: PUSH
47425: LD_VAR 0 8
47429: ARRAY
47430: PUSH
47431: FOR_IN
47432: IFFALSE 47488
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47434: LD_VAR 0 3
47438: PUSH
47439: LD_INT 1
47441: ARRAY
47442: PPUSH
47443: LD_VAR 0 3
47447: PUSH
47448: LD_INT 2
47450: ARRAY
47451: PPUSH
47452: LD_INT 3
47454: PPUSH
47455: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47459: LD_VAR 0 3
47463: PUSH
47464: LD_INT 1
47466: ARRAY
47467: PPUSH
47468: LD_VAR 0 3
47472: PUSH
47473: LD_INT 2
47475: ARRAY
47476: PPUSH
47477: LD_VAR 0 7
47481: PPUSH
47482: CALL_OW 441
// end ;
47486: GO 47431
47488: POP
47489: POP
// end ; InitBc ;
47490: CALL_OW 21
// InitUc ;
47494: CALL_OW 18
// uc_side := side ;
47498: LD_ADDR_OWVAR 20
47502: PUSH
47503: LD_VAR 0 7
47507: ST_TO_ADDR
// uc_nation := nation ;
47508: LD_ADDR_OWVAR 21
47512: PUSH
47513: LD_VAR 0 9
47517: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47518: LD_EXP 20
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: GREATER
47527: IFFALSE 47686
// begin x := mpStartPos [ pos ] [ 1 ] ;
47529: LD_ADDR_VAR 0 5
47533: PUSH
47534: LD_EXP 19
47538: PUSH
47539: LD_VAR 0 8
47543: ARRAY
47544: PUSH
47545: LD_INT 1
47547: ARRAY
47548: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47549: LD_ADDR_VAR 0 6
47553: PUSH
47554: LD_EXP 19
47558: PUSH
47559: LD_VAR 0 8
47563: ARRAY
47564: PUSH
47565: LD_INT 2
47567: ARRAY
47568: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47569: LD_VAR 0 5
47573: PPUSH
47574: LD_VAR 0 6
47578: PPUSH
47579: LD_INT 12
47581: PPUSH
47582: LD_INT 2
47584: PPUSH
47585: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47589: LD_ADDR_EXP 21
47593: PUSH
47594: LD_EXP 21
47598: PPUSH
47599: LD_VAR 0 7
47603: PPUSH
47604: LD_VAR 0 7
47608: PPUSH
47609: LD_VAR 0 5
47613: PPUSH
47614: LD_VAR 0 6
47618: PPUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 100
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 70
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 40
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 10
47651: PUSH
47652: LD_INT 25
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 20
47661: PUSH
47662: LD_INT 100
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: PPUSH
47676: CALL_OW 418
47680: PPUSH
47681: CALL_OW 1
47685: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47686: LD_EXP 12
47690: PPUSH
47691: CALL 5182 0 1
47695: IFFALSE 47894
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
47697: LD_EXP 1
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 8
47707: PUSH
47708: LD_INT 6
47710: PUSH
47711: LD_INT 7
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: IN
47720: IFFALSE 47740
// begin bc_level := 10 ;
47722: LD_ADDR_OWVAR 43
47726: PUSH
47727: LD_INT 10
47729: ST_TO_ADDR
// bc_type := b_warehouse ;
47730: LD_ADDR_OWVAR 42
47734: PUSH
47735: LD_INT 1
47737: ST_TO_ADDR
// end else
47738: GO 47756
// begin bc_level := 0 ;
47740: LD_ADDR_OWVAR 43
47744: PUSH
47745: LD_INT 0
47747: ST_TO_ADDR
// bc_type := b_depot ;
47748: LD_ADDR_OWVAR 42
47752: PUSH
47753: LD_INT 0
47755: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47756: LD_ADDR_VAR 0 4
47760: PUSH
47761: LD_EXP 12
47765: PUSH
47766: LD_VAR 0 8
47770: ARRAY
47771: PUSH
47772: LD_INT 1
47774: ARRAY
47775: PPUSH
47776: LD_EXP 12
47780: PUSH
47781: LD_VAR 0 8
47785: ARRAY
47786: PUSH
47787: LD_INT 2
47789: ARRAY
47790: PPUSH
47791: LD_EXP 12
47795: PUSH
47796: LD_VAR 0 8
47800: ARRAY
47801: PUSH
47802: LD_INT 3
47804: ARRAY
47805: PPUSH
47806: CALL_OW 47
47810: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47811: LD_VAR 0 4
47815: PPUSH
47816: LD_STRING @
47818: PUSH
47819: LD_VAR 0 7
47823: STR
47824: PPUSH
47825: CALL_OW 500
// if Count ( mpStartingResources ) then
47829: LD_EXP 13
47833: PPUSH
47834: CALL 5182 0 1
47838: IFFALSE 47892
// begin for j := 1 to mpStartingResources do
47840: LD_ADDR_VAR 0 3
47844: PUSH
47845: DOUBLE
47846: LD_INT 1
47848: DEC
47849: ST_TO_ADDR
47850: LD_EXP 13
47854: PUSH
47855: FOR_TO
47856: IFFALSE 47890
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47858: LD_VAR 0 4
47862: PPUSH
47863: CALL_OW 274
47867: PPUSH
47868: LD_VAR 0 3
47872: PPUSH
47873: LD_EXP 13
47877: PUSH
47878: LD_VAR 0 3
47882: ARRAY
47883: PPUSH
47884: CALL_OW 277
47888: GO 47855
47890: POP
47891: POP
// end ; end else
47892: GO 48101
// if Count ( mpStartingResources ) then
47894: LD_EXP 13
47898: PPUSH
47899: CALL 5182 0 1
47903: IFFALSE 48101
// begin x := mpStartPos [ pos ] [ 1 ] ;
47905: LD_ADDR_VAR 0 5
47909: PUSH
47910: LD_EXP 19
47914: PUSH
47915: LD_VAR 0 8
47919: ARRAY
47920: PUSH
47921: LD_INT 1
47923: ARRAY
47924: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47925: LD_ADDR_VAR 0 6
47929: PUSH
47930: LD_EXP 19
47934: PUSH
47935: LD_VAR 0 8
47939: ARRAY
47940: PUSH
47941: LD_INT 2
47943: ARRAY
47944: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47945: LD_ADDR_VAR 0 3
47949: PUSH
47950: DOUBLE
47951: LD_INT 1
47953: DEC
47954: ST_TO_ADDR
47955: LD_EXP 13
47959: PUSH
47960: FOR_TO
47961: IFFALSE 48099
// begin resources := mpStartingResources [ j ] ;
47963: LD_ADDR_VAR 0 13
47967: PUSH
47968: LD_EXP 13
47972: PUSH
47973: LD_VAR 0 3
47977: ARRAY
47978: ST_TO_ADDR
// if resources = 0 then
47979: LD_VAR 0 13
47983: PUSH
47984: LD_INT 0
47986: EQUAL
47987: IFFALSE 47991
// continue ;
47989: GO 47960
// repeat if resources >= 50 then
47991: LD_VAR 0 13
47995: PUSH
47996: LD_INT 50
47998: GREATEREQUAL
47999: IFFALSE 48045
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48001: LD_VAR 0 3
48005: PPUSH
48006: LD_INT 5
48008: PPUSH
48009: LD_VAR 0 5
48013: PPUSH
48014: LD_VAR 0 6
48018: PPUSH
48019: LD_INT 6
48021: PPUSH
48022: LD_INT 0
48024: PPUSH
48025: CALL_OW 60
// resources := resources - 50 ;
48029: LD_ADDR_VAR 0 13
48033: PUSH
48034: LD_VAR 0 13
48038: PUSH
48039: LD_INT 50
48041: MINUS
48042: ST_TO_ADDR
// end else
48043: GO 48087
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48045: LD_VAR 0 3
48049: PPUSH
48050: LD_VAR 0 13
48054: PUSH
48055: LD_INT 10
48057: DIV
48058: PPUSH
48059: LD_VAR 0 5
48063: PPUSH
48064: LD_VAR 0 6
48068: PPUSH
48069: LD_INT 6
48071: PPUSH
48072: LD_INT 0
48074: PPUSH
48075: CALL_OW 60
// resources := 0 ;
48079: LD_ADDR_VAR 0 13
48083: PUSH
48084: LD_INT 0
48086: ST_TO_ADDR
// end ; until resources <= 0 ;
48087: LD_VAR 0 13
48091: PUSH
48092: LD_INT 0
48094: LESSEQUAL
48095: IFFALSE 47991
// end ;
48097: GO 47960
48099: POP
48100: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
48101: LD_EXP 15
48105: PPUSH
48106: CALL 5182 0 1
48110: IFFALSE 48130
48112: PUSH
48113: LD_EXP 1
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 8
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: IN
48128: NOT
48129: AND
48130: IFFALSE 48208
// begin for j in mpBuildings [ pos ] do
48132: LD_ADDR_VAR 0 3
48136: PUSH
48137: LD_EXP 15
48141: PUSH
48142: LD_VAR 0 8
48146: ARRAY
48147: PUSH
48148: FOR_IN
48149: IFFALSE 48206
// begin bc_level := 0 ;
48151: LD_ADDR_OWVAR 43
48155: PUSH
48156: LD_INT 0
48158: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48159: LD_ADDR_OWVAR 42
48163: PUSH
48164: LD_VAR 0 3
48168: PUSH
48169: LD_INT 1
48171: ARRAY
48172: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48173: LD_VAR 0 3
48177: PUSH
48178: LD_INT 2
48180: ARRAY
48181: PPUSH
48182: LD_VAR 0 3
48186: PUSH
48187: LD_INT 3
48189: ARRAY
48190: PPUSH
48191: LD_VAR 0 3
48195: PUSH
48196: LD_INT 4
48198: ARRAY
48199: PPUSH
48200: CALL_OW 47
// end ;
48204: GO 48148
48206: POP
48207: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48208: LD_EXP 24
48212: IFFALSE 48232
48214: PUSH
48215: LD_INT 20
48217: PPUSH
48218: LD_VAR 0 7
48222: PPUSH
48223: CALL_OW 321
48227: PUSH
48228: LD_INT 1
48230: EQUAL
48231: AND
48232: IFFALSE 48249
// SetTech ( tech_SibDet , side , state_researched ) ;
48234: LD_INT 20
48236: PPUSH
48237: LD_VAR 0 7
48241: PPUSH
48242: LD_INT 2
48244: PPUSH
48245: CALL_OW 322
// if not mpArtifacts then
48249: LD_EXP 43
48253: NOT
48254: IFFALSE 48271
// SetTech ( tech_artifact , side , state_disabled ) ;
48256: LD_INT 24
48258: PPUSH
48259: LD_VAR 0 7
48263: PPUSH
48264: LD_INT 0
48266: PPUSH
48267: CALL_OW 322
// if mpSibBomb = 1 then
48271: LD_EXP 26
48275: PUSH
48276: LD_INT 1
48278: EQUAL
48279: IFFALSE 48298
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48281: LD_INT 25
48283: PPUSH
48284: LD_VAR 0 7
48288: PPUSH
48289: LD_INT 1
48291: PPUSH
48292: CALL_OW 322
// end else
48296: GO 48313
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48298: LD_INT 25
48300: PPUSH
48301: LD_VAR 0 7
48305: PPUSH
48306: LD_INT 0
48308: PPUSH
48309: CALL_OW 322
// end ; if mpVehicles then
48313: LD_EXP 34
48317: IFFALSE 48416
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48319: LD_ADDR_VAR 0 3
48323: PUSH
48324: LD_VAR 0 7
48328: PPUSH
48329: LD_VAR 0 9
48333: PPUSH
48334: LD_EXP 34
48338: PPUSH
48339: CALL 49675 0 3
48343: PUSH
48344: FOR_IN
48345: IFFALSE 48414
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48347: LD_VAR 0 3
48351: PPUSH
48352: LD_INT 0
48354: PPUSH
48355: LD_INT 5
48357: PPUSH
48358: CALL_OW 12
48362: PPUSH
48363: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48367: LD_VAR 0 3
48371: PPUSH
48372: LD_EXP 19
48376: PUSH
48377: LD_VAR 0 8
48381: ARRAY
48382: PUSH
48383: LD_INT 1
48385: ARRAY
48386: PPUSH
48387: LD_EXP 19
48391: PUSH
48392: LD_VAR 0 8
48396: ARRAY
48397: PUSH
48398: LD_INT 2
48400: ARRAY
48401: PPUSH
48402: LD_INT 12
48404: PPUSH
48405: LD_INT 0
48407: PPUSH
48408: CALL_OW 50
// end ;
48412: GO 48344
48414: POP
48415: POP
// end ; uc_nation := nation ;
48416: LD_ADDR_OWVAR 21
48420: PUSH
48421: LD_VAR 0 9
48425: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48426: LD_EXP 1
48430: PUSH
48431: LD_INT 6
48433: PUSH
48434: LD_INT 7
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: IN
48441: IFFALSE 48466
48443: PUSH
48444: LD_EXP 5
48448: PUSH
48449: LD_VAR 0 2
48453: ARRAY
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: IN
48465: AND
48466: IFFALSE 48514
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48468: LD_ADDR_VAR 0 11
48472: PUSH
48473: LD_VAR 0 7
48477: PPUSH
48478: LD_VAR 0 9
48482: PPUSH
48483: LD_EXP 22
48487: PUSH
48488: LD_EXP 22
48492: PUSH
48493: LD_INT 2
48495: DIV
48496: PLUS
48497: PPUSH
48498: LD_EXP 23
48502: PUSH
48503: LD_INT 1
48505: PLUS
48506: PPUSH
48507: CALL 49130 0 4
48511: ST_TO_ADDR
48512: GO 48544
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48514: LD_ADDR_VAR 0 11
48518: PUSH
48519: LD_VAR 0 7
48523: PPUSH
48524: LD_VAR 0 9
48528: PPUSH
48529: LD_EXP 22
48533: PPUSH
48534: LD_EXP 23
48538: PPUSH
48539: CALL 49130 0 4
48543: ST_TO_ADDR
// for j in team do
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_VAR 0 11
48553: PUSH
48554: FOR_IN
48555: IFFALSE 48604
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48557: LD_VAR 0 3
48561: PPUSH
48562: LD_EXP 19
48566: PUSH
48567: LD_VAR 0 8
48571: ARRAY
48572: PUSH
48573: LD_INT 1
48575: ARRAY
48576: PPUSH
48577: LD_EXP 19
48581: PUSH
48582: LD_VAR 0 8
48586: ARRAY
48587: PUSH
48588: LD_INT 2
48590: ARRAY
48591: PPUSH
48592: LD_INT 12
48594: PPUSH
48595: LD_INT 0
48597: PPUSH
48598: CALL_OW 50
48602: GO 48554
48604: POP
48605: POP
// if mpApemans then
48606: LD_EXP 28
48610: IFFALSE 48716
// begin for j := 1 to mpApemans do
48612: LD_ADDR_VAR 0 3
48616: PUSH
48617: DOUBLE
48618: LD_INT 1
48620: DEC
48621: ST_TO_ADDR
48622: LD_EXP 28
48626: PUSH
48627: FOR_TO
48628: IFFALSE 48714
// begin PrepareApeman ( - 5 ) ;
48630: LD_INT 5
48632: NEG
48633: PPUSH
48634: CALL 37285 0 1
// ape := CreateHuman ;
48638: LD_ADDR_VAR 0 10
48642: PUSH
48643: CALL_OW 44
48647: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48648: LD_ADDR_EXP 30
48652: PUSH
48653: LD_EXP 30
48657: PPUSH
48658: LD_VAR 0 8
48662: PPUSH
48663: LD_EXP 30
48667: PUSH
48668: LD_VAR 0 8
48672: ARRAY
48673: PPUSH
48674: LD_VAR 0 10
48678: PPUSH
48679: CALL 41158 0 2
48683: PPUSH
48684: CALL_OW 1
48688: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48689: LD_VAR 0 10
48693: PPUSH
48694: LD_EXP 29
48698: PUSH
48699: LD_VAR 0 8
48703: ARRAY
48704: PPUSH
48705: LD_INT 0
48707: PPUSH
48708: CALL_OW 49
// end ;
48712: GO 48627
48714: POP
48715: POP
// end ; end ;
48716: GO 47258
48718: POP
48719: POP
// if not mpTeamGame then
48720: LD_EXP 9
48724: NOT
48725: IFFALSE 48823
// begin for i := 1 to 8 do
48727: LD_ADDR_VAR 0 2
48731: PUSH
48732: DOUBLE
48733: LD_INT 1
48735: DEC
48736: ST_TO_ADDR
48737: LD_INT 8
48739: PUSH
48740: FOR_TO
48741: IFFALSE 48819
// for j := 1 to 8 do
48743: LD_ADDR_VAR 0 3
48747: PUSH
48748: DOUBLE
48749: LD_INT 1
48751: DEC
48752: ST_TO_ADDR
48753: LD_INT 8
48755: PUSH
48756: FOR_TO
48757: IFFALSE 48815
// if i <> j then
48759: LD_VAR 0 2
48763: PUSH
48764: LD_VAR 0 3
48768: NONEQUAL
48769: IFFALSE 48793
// SetAttitude ( i , j , att_neutral , true ) else
48771: LD_VAR 0 2
48775: PPUSH
48776: LD_VAR 0 3
48780: PPUSH
48781: LD_INT 0
48783: PPUSH
48784: LD_INT 1
48786: PPUSH
48787: CALL_OW 80
48791: GO 48813
// SetAttitude ( i , j , att_friend , true ) ;
48793: LD_VAR 0 2
48797: PPUSH
48798: LD_VAR 0 3
48802: PPUSH
48803: LD_INT 1
48805: PPUSH
48806: LD_INT 1
48808: PPUSH
48809: CALL_OW 80
48813: GO 48756
48815: POP
48816: POP
48817: GO 48740
48819: POP
48820: POP
// end else
48821: GO 48998
// begin if mpSharedVision then
48823: LD_EXP 14
48827: IFFALSE 48892
// begin for i in mpTeams do
48829: LD_ADDR_VAR 0 2
48833: PUSH
48834: LD_EXP 8
48838: PUSH
48839: FOR_IN
48840: IFFALSE 48890
// for j := 2 to i do
48842: LD_ADDR_VAR 0 3
48846: PUSH
48847: DOUBLE
48848: LD_INT 2
48850: DEC
48851: ST_TO_ADDR
48852: LD_VAR 0 2
48856: PUSH
48857: FOR_TO
48858: IFFALSE 48886
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48860: LD_VAR 0 2
48864: PUSH
48865: LD_VAR 0 3
48869: ARRAY
48870: PPUSH
48871: LD_VAR 0 2
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: PPUSH
48880: CALL_OW 343
48884: GO 48857
48886: POP
48887: POP
48888: GO 48839
48890: POP
48891: POP
// end ; for i := 1 to 8 do
48892: LD_ADDR_VAR 0 2
48896: PUSH
48897: DOUBLE
48898: LD_INT 1
48900: DEC
48901: ST_TO_ADDR
48902: LD_INT 8
48904: PUSH
48905: FOR_TO
48906: IFFALSE 48996
// for j := 1 to 8 do
48908: LD_ADDR_VAR 0 3
48912: PUSH
48913: DOUBLE
48914: LD_INT 1
48916: DEC
48917: ST_TO_ADDR
48918: LD_INT 8
48920: PUSH
48921: FOR_TO
48922: IFFALSE 48992
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48924: LD_EXP 6
48928: PUSH
48929: LD_VAR 0 2
48933: ARRAY
48934: PUSH
48935: LD_EXP 6
48939: PUSH
48940: LD_VAR 0 3
48944: ARRAY
48945: EQUAL
48946: IFFALSE 48970
// SetAttitude ( i , j , att_friend , true ) else
48948: LD_VAR 0 2
48952: PPUSH
48953: LD_VAR 0 3
48957: PPUSH
48958: LD_INT 1
48960: PPUSH
48961: LD_INT 1
48963: PPUSH
48964: CALL_OW 80
48968: GO 48990
// SetAttitude ( i , j , att_enemy , true ) ;
48970: LD_VAR 0 2
48974: PPUSH
48975: LD_VAR 0 3
48979: PPUSH
48980: LD_INT 2
48982: PPUSH
48983: LD_INT 1
48985: PPUSH
48986: CALL_OW 80
48990: GO 48921
48992: POP
48993: POP
48994: GO 48905
48996: POP
48997: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48998: LD_ADDR_OWVAR 71
49002: PUSH
49003: LD_EXP 7
49007: PUSH
49008: LD_OWVAR 2
49012: ARRAY
49013: ST_TO_ADDR
// if IAmSpec then
49014: CALL_OW 531
49018: IFFALSE 49059
// begin FogOff ( true ) ;
49020: LD_INT 1
49022: PPUSH
49023: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49027: LD_EXP 27
49031: PUSH
49032: LD_INT 1
49034: ARRAY
49035: PUSH
49036: LD_INT 2
49038: DIV
49039: PPUSH
49040: LD_EXP 27
49044: PUSH
49045: LD_INT 2
49047: ARRAY
49048: PUSH
49049: LD_INT 2
49051: DIV
49052: PPUSH
49053: CALL_OW 86
// end else
49057: GO 49105
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49059: LD_EXP 19
49063: PUSH
49064: LD_EXP 5
49068: PUSH
49069: LD_OWVAR 2
49073: ARRAY
49074: ARRAY
49075: PUSH
49076: LD_INT 1
49078: ARRAY
49079: PPUSH
49080: LD_EXP 19
49084: PUSH
49085: LD_EXP 5
49089: PUSH
49090: LD_OWVAR 2
49094: ARRAY
49095: ARRAY
49096: PUSH
49097: LD_INT 2
49099: ARRAY
49100: PPUSH
49101: CALL_OW 86
// end ; BeginBuildUp ;
49105: CALL 50208 0 0
// enable ( mpActive ) ;
49109: LD_INT 100
49111: ENABLE_MARKED
// enable ( mpGameType ) ;
49112: LD_EXP 1
49116: ENABLE_MARKED
// mpGameActive := true ;
49117: LD_ADDR_EXP 37
49121: PUSH
49122: LD_INT 1
49124: ST_TO_ADDR
// end ;
49125: LD_VAR 0 1
49129: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49130: LD_INT 0
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
// result := [ ] ;
49137: LD_ADDR_VAR 0 5
49141: PUSH
49142: EMPTY
49143: ST_TO_ADDR
// class := class_soldier ;
49144: LD_ADDR_VAR 0 8
49148: PUSH
49149: LD_INT 1
49151: ST_TO_ADDR
// uc_side := side ;
49152: LD_ADDR_OWVAR 20
49156: PUSH
49157: LD_VAR 0 1
49161: ST_TO_ADDR
// uc_nation := nation ;
49162: LD_ADDR_OWVAR 21
49166: PUSH
49167: LD_VAR 0 2
49171: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49172: LD_ADDR_OWVAR 26
49176: PUSH
49177: LD_OWVAR 19
49181: PUSH
49182: LD_VAR 0 1
49186: ARRAY
49187: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49188: LD_INT 1
49190: PPUSH
49191: LD_INT 2
49193: PPUSH
49194: CALL_OW 12
49198: PPUSH
49199: LD_VAR 0 8
49203: PPUSH
49204: LD_VAR 0 4
49208: PUSH
49209: LD_INT 2
49211: PLUS
49212: PPUSH
49213: CALL_OW 380
// hc_importance := 105 ;
49217: LD_ADDR_OWVAR 32
49221: PUSH
49222: LD_INT 105
49224: ST_TO_ADDR
// if Multiplayer then
49225: LD_OWVAR 4
49229: IFFALSE 49269
// begin hc_gallery := MULTIAVATARS ;
49231: LD_ADDR_OWVAR 33
49235: PUSH
49236: LD_STRING MULTIAVATARS
49238: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49239: LD_ADDR_OWVAR 34
49243: PUSH
49244: LD_VAR 0 1
49248: PPUSH
49249: CALL_OW 525
49253: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49254: LD_ADDR_OWVAR 27
49258: PUSH
49259: LD_VAR 0 1
49263: PPUSH
49264: CALL_OW 526
49268: ST_TO_ADDR
// end ; commander := CreateHuman ;
49269: LD_ADDR_VAR 0 9
49273: PUSH
49274: CALL_OW 44
49278: ST_TO_ADDR
// result := Join ( result , commander ) ;
49279: LD_ADDR_VAR 0 5
49283: PUSH
49284: LD_VAR 0 5
49288: PPUSH
49289: LD_VAR 0 9
49293: PPUSH
49294: CALL 41158 0 2
49298: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49299: LD_ADDR_EXP 39
49303: PUSH
49304: LD_EXP 39
49308: PPUSH
49309: LD_VAR 0 1
49313: PPUSH
49314: LD_VAR 0 9
49318: PPUSH
49319: CALL_OW 1
49323: ST_TO_ADDR
// if mpTeamPreset then
49324: LD_LOC 1
49328: IFFALSE 49424
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49330: LD_LOC 1
49334: PUSH
49335: LD_INT 1
49337: ARRAY
49338: PPUSH
49339: LD_VAR 0 5
49343: PUSH
49344: LD_VAR 0 5
49348: ARRAY
49349: PPUSH
49350: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49354: LD_VAR 0 5
49358: PUSH
49359: LD_VAR 0 5
49363: ARRAY
49364: PPUSH
49365: LD_INT 1
49367: PPUSH
49368: LD_LOC 1
49372: PUSH
49373: LD_INT 1
49375: ARRAY
49376: PPUSH
49377: LD_INT 1
49379: PPUSH
49380: CALL_OW 260
49384: PPUSH
49385: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49389: LD_VAR 0 5
49393: PUSH
49394: LD_VAR 0 5
49398: ARRAY
49399: PPUSH
49400: LD_INT 2
49402: PPUSH
49403: LD_LOC 1
49407: PUSH
49408: LD_INT 1
49410: ARRAY
49411: PPUSH
49412: LD_INT 2
49414: PPUSH
49415: CALL_OW 260
49419: PPUSH
49420: CALL_OW 239
// end ; InitHc_All ( ) ;
49424: CALL_OW 584
// class := 2 ;
49428: LD_ADDR_VAR 0 8
49432: PUSH
49433: LD_INT 2
49435: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49436: LD_ADDR_VAR 0 6
49440: PUSH
49441: DOUBLE
49442: LD_INT 1
49444: DEC
49445: ST_TO_ADDR
49446: LD_VAR 0 3
49450: PUSH
49451: LD_INT 1
49453: MINUS
49454: PUSH
49455: FOR_TO
49456: IFFALSE 49651
// begin PrepareHuman ( false , class , skill ) ;
49458: LD_INT 0
49460: PPUSH
49461: LD_VAR 0 8
49465: PPUSH
49466: LD_VAR 0 4
49470: PPUSH
49471: CALL_OW 380
// un := CreateHuman ;
49475: LD_ADDR_VAR 0 7
49479: PUSH
49480: CALL_OW 44
49484: ST_TO_ADDR
// result := Join ( result , un ) ;
49485: LD_ADDR_VAR 0 5
49489: PUSH
49490: LD_VAR 0 5
49494: PPUSH
49495: LD_VAR 0 7
49499: PPUSH
49500: CALL 41158 0 2
49504: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49505: LD_LOC 1
49509: PPUSH
49510: CALL 5182 0 1
49514: PUSH
49515: LD_VAR 0 3
49519: GREATEREQUAL
49520: IFFALSE 49616
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49522: LD_LOC 1
49526: PUSH
49527: LD_VAR 0 6
49531: PUSH
49532: LD_INT 1
49534: PLUS
49535: ARRAY
49536: PPUSH
49537: LD_VAR 0 7
49541: PPUSH
49542: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49546: LD_VAR 0 7
49550: PPUSH
49551: LD_INT 1
49553: PPUSH
49554: LD_LOC 1
49558: PUSH
49559: LD_VAR 0 6
49563: PUSH
49564: LD_INT 1
49566: PLUS
49567: ARRAY
49568: PPUSH
49569: LD_INT 1
49571: PPUSH
49572: CALL_OW 260
49576: PPUSH
49577: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49581: LD_VAR 0 7
49585: PPUSH
49586: LD_INT 2
49588: PPUSH
49589: LD_LOC 1
49593: PUSH
49594: LD_VAR 0 6
49598: PUSH
49599: LD_INT 1
49601: PLUS
49602: ARRAY
49603: PPUSH
49604: LD_INT 2
49606: PPUSH
49607: CALL_OW 260
49611: PPUSH
49612: CALL_OW 239
// end ; class := Inc ( class ) ;
49616: LD_ADDR_VAR 0 8
49620: PUSH
49621: LD_VAR 0 8
49625: PPUSH
49626: CALL 42531 0 1
49630: ST_TO_ADDR
// if class = 5 then
49631: LD_VAR 0 8
49635: PUSH
49636: LD_INT 5
49638: EQUAL
49639: IFFALSE 49649
// class := 1 ;
49641: LD_ADDR_VAR 0 8
49645: PUSH
49646: LD_INT 1
49648: ST_TO_ADDR
// end ;
49649: GO 49455
49651: POP
49652: POP
// if not mpTeamPreset then
49653: LD_LOC 1
49657: NOT
49658: IFFALSE 49670
// mpTeamPreset := result ;
49660: LD_ADDR_LOC 1
49664: PUSH
49665: LD_VAR 0 5
49669: ST_TO_ADDR
// end ;
49670: LD_VAR 0 5
49674: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49675: LD_INT 0
49677: PPUSH
49678: PPUSH
// result := [ ] ;
49679: LD_ADDR_VAR 0 4
49683: PUSH
49684: EMPTY
49685: ST_TO_ADDR
// if not vehicles then
49686: LD_VAR 0 3
49690: NOT
49691: IFFALSE 49695
// exit ;
49693: GO 49909
// for i := 1 to vehicles [ nation ] do
49695: LD_ADDR_VAR 0 5
49699: PUSH
49700: DOUBLE
49701: LD_INT 1
49703: DEC
49704: ST_TO_ADDR
49705: LD_VAR 0 3
49709: PUSH
49710: LD_VAR 0 2
49714: ARRAY
49715: PUSH
49716: FOR_TO
49717: IFFALSE 49907
// begin uc_side := side ;
49719: LD_ADDR_OWVAR 20
49723: PUSH
49724: LD_VAR 0 1
49728: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49729: LD_VAR 0 3
49733: PUSH
49734: LD_VAR 0 2
49738: ARRAY
49739: PUSH
49740: LD_VAR 0 5
49744: ARRAY
49745: PPUSH
49746: CALL 5182 0 1
49750: PUSH
49751: LD_INT 4
49753: GREATER
49754: IFFALSE 49784
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49756: LD_ADDR_OWVAR 21
49760: PUSH
49761: LD_VAR 0 3
49765: PUSH
49766: LD_VAR 0 2
49770: ARRAY
49771: PUSH
49772: LD_VAR 0 5
49776: ARRAY
49777: PUSH
49778: LD_INT 5
49780: ARRAY
49781: ST_TO_ADDR
49782: GO 49794
// uc_nation := nation ;
49784: LD_ADDR_OWVAR 21
49788: PUSH
49789: LD_VAR 0 2
49793: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49794: LD_VAR 0 3
49798: PUSH
49799: LD_VAR 0 2
49803: ARRAY
49804: PUSH
49805: LD_VAR 0 5
49809: ARRAY
49810: PUSH
49811: LD_INT 1
49813: ARRAY
49814: PPUSH
49815: LD_VAR 0 3
49819: PUSH
49820: LD_VAR 0 2
49824: ARRAY
49825: PUSH
49826: LD_VAR 0 5
49830: ARRAY
49831: PUSH
49832: LD_INT 2
49834: ARRAY
49835: PPUSH
49836: LD_VAR 0 3
49840: PUSH
49841: LD_VAR 0 2
49845: ARRAY
49846: PUSH
49847: LD_VAR 0 5
49851: ARRAY
49852: PUSH
49853: LD_INT 3
49855: ARRAY
49856: PPUSH
49857: LD_VAR 0 3
49861: PUSH
49862: LD_VAR 0 2
49866: ARRAY
49867: PUSH
49868: LD_VAR 0 5
49872: ARRAY
49873: PUSH
49874: LD_INT 4
49876: ARRAY
49877: PPUSH
49878: LD_INT 80
49880: PPUSH
49881: CALL 7978 0 5
// result := Join ( result , CreateVehicle ) ;
49885: LD_ADDR_VAR 0 4
49889: PUSH
49890: LD_VAR 0 4
49894: PPUSH
49895: CALL_OW 45
49899: PPUSH
49900: CALL 41158 0 2
49904: ST_TO_ADDR
// end ;
49905: GO 49716
49907: POP
49908: POP
// end ;
49909: LD_VAR 0 4
49913: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
// for i in mpBattleFlags do
49918: LD_ADDR_VAR 0 3
49922: PUSH
49923: LD_EXP 21
49927: PUSH
49928: FOR_IN
49929: IFFALSE 50006
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49931: LD_VAR 0 3
49935: PPUSH
49936: LD_INT 1
49938: PUSH
49939: LD_VAR 0 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_VAR 0 1
49955: PUSH
49956: LD_REAL  7.00000000000000E-0001
49959: MUL
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: LD_VAR 0 1
49972: PUSH
49973: LD_REAL  4.00000000000000E-0001
49976: MUL
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 20
49984: PUSH
49985: LD_VAR 0 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: PPUSH
50000: CALL_OW 423
50004: GO 49928
50006: POP
50007: POP
// end ;
50008: LD_VAR 0 2
50012: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50013: LD_INT 100
50015: IFFALSE 50110
50017: GO 50019
50019: DISABLE
50020: LD_INT 0
50022: PPUSH
50023: PPUSH
// begin if mpBattleFlag <= 0 then
50024: LD_EXP 20
50028: PUSH
50029: LD_INT 0
50031: LESSEQUAL
50032: IFFALSE 50036
// exit ;
50034: GO 50110
// strength := 100 ;
50036: LD_ADDR_VAR 0 2
50040: PUSH
50041: LD_INT 100
50043: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50044: LD_EXP 20
50048: PPUSH
50049: CALL_OW 67
// strength := Dec ( strength ) ;
50053: LD_ADDR_VAR 0 2
50057: PUSH
50058: LD_VAR 0 2
50062: PPUSH
50063: CALL 42553 0 1
50067: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50068: LD_VAR 0 2
50072: PPUSH
50073: CALL 49914 0 1
// until not strength ;
50077: LD_VAR 0 2
50081: NOT
50082: IFFALSE 50044
// for i in mpBattleFlags do
50084: LD_ADDR_VAR 0 1
50088: PUSH
50089: LD_EXP 21
50093: PUSH
50094: FOR_IN
50095: IFFALSE 50108
// KillBattleFlag ( i ) ;
50097: LD_VAR 0 1
50101: PPUSH
50102: CALL_OW 419
50106: GO 50094
50108: POP
50109: POP
// end ;
50110: PPOPN 2
50112: END
// every 0 0$1 marked mpActive do var side , tmp ;
50113: GO 50115
50115: DISABLE
50116: LD_INT 0
50118: PPUSH
50119: PPUSH
// begin if mpSibBomb <= 1 then
50120: LD_EXP 26
50124: PUSH
50125: LD_INT 1
50127: LESSEQUAL
50128: IFFALSE 50132
// exit ;
50130: GO 50205
// tmp := mpSibBomb ;
50132: LD_ADDR_VAR 0 2
50136: PUSH
50137: LD_EXP 26
50141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50142: LD_INT 35
50144: PPUSH
50145: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50149: LD_ADDR_VAR 0 2
50153: PUSH
50154: LD_VAR 0 2
50158: PUSH
50159: LD_INT 35
50161: MINUS
50162: ST_TO_ADDR
// until not tmp ;
50163: LD_VAR 0 2
50167: NOT
50168: IFFALSE 50142
// for side := 1 to 8 do
50170: LD_ADDR_VAR 0 1
50174: PUSH
50175: DOUBLE
50176: LD_INT 1
50178: DEC
50179: ST_TO_ADDR
50180: LD_INT 8
50182: PUSH
50183: FOR_TO
50184: IFFALSE 50203
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50186: LD_INT 25
50188: PPUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: LD_INT 1
50196: PPUSH
50197: CALL_OW 322
50201: GO 50183
50203: POP
50204: POP
// end ;
50205: PPOPN 2
50207: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
50212: PPUSH
// mpBuildUpTimeDelay := 0 ;
50213: LD_ADDR_EXP 46
50217: PUSH
50218: LD_INT 0
50220: ST_TO_ADDR
// if not mpBuildUpTime then
50221: LD_EXP 18
50225: NOT
50226: IFFALSE 50230
// exit ;
50228: GO 50419
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50230: LD_ADDR_EXP 46
50234: PUSH
50235: LD_INT 8400
50237: PUSH
50238: LD_INT 2100
50240: PUSH
50241: LD_EXP 18
50245: MUL
50246: PLUS
50247: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50248: LD_ADDR_EXP 47
50252: PUSH
50253: LD_INT 1
50255: ST_TO_ADDR
// for i := 1 to 8 do
50256: LD_ADDR_VAR 0 2
50260: PUSH
50261: DOUBLE
50262: LD_INT 1
50264: DEC
50265: ST_TO_ADDR
50266: LD_INT 8
50268: PUSH
50269: FOR_TO
50270: IFFALSE 50417
// if mpSidePositions [ i ] then
50272: LD_EXP 5
50276: PUSH
50277: LD_VAR 0 2
50281: ARRAY
50282: IFFALSE 50415
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50284: LD_EXP 17
50288: PUSH
50289: LD_EXP 5
50293: PUSH
50294: LD_VAR 0 2
50298: ARRAY
50299: ARRAY
50300: PPUSH
50301: LD_INT 5
50303: PPUSH
50304: CALL_OW 424
// for j := 1 to 8 do
50308: LD_ADDR_VAR 0 3
50312: PUSH
50313: DOUBLE
50314: LD_INT 1
50316: DEC
50317: ST_TO_ADDR
50318: LD_INT 8
50320: PUSH
50321: FOR_TO
50322: IFFALSE 50413
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50324: LD_EXP 5
50328: PUSH
50329: LD_VAR 0 3
50333: ARRAY
50334: IFFALSE 50383
50336: PUSH
50337: LD_EXP 6
50341: PUSH
50342: LD_VAR 0 2
50346: ARRAY
50347: PUSH
50348: LD_EXP 6
50352: PUSH
50353: LD_VAR 0 3
50357: ARRAY
50358: NONEQUAL
50359: IFTRUE 50382
50361: PUSH
50362: LD_EXP 9
50366: NOT
50367: IFFALSE 50381
50369: PUSH
50370: LD_VAR 0 2
50374: PUSH
50375: LD_VAR 0 3
50379: NONEQUAL
50380: AND
50381: OR
50382: AND
50383: IFFALSE 50411
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50385: LD_VAR 0 3
50389: PPUSH
50390: LD_EXP 17
50394: PUSH
50395: LD_EXP 5
50399: PUSH
50400: LD_VAR 0 2
50404: ARRAY
50405: ARRAY
50406: PPUSH
50407: CALL_OW 333
50411: GO 50321
50413: POP
50414: POP
// end ;
50415: GO 50269
50417: POP
50418: POP
// end ;
50419: LD_VAR 0 1
50423: RET
// function EndBuildUp ; var i , j ; begin
50424: LD_INT 0
50426: PPUSH
50427: PPUSH
50428: PPUSH
// mpBuildUpTimeActive := false ;
50429: LD_ADDR_EXP 47
50433: PUSH
50434: LD_INT 0
50436: ST_TO_ADDR
// for i := 1 to 8 do
50437: LD_ADDR_VAR 0 2
50441: PUSH
50442: DOUBLE
50443: LD_INT 1
50445: DEC
50446: ST_TO_ADDR
50447: LD_INT 8
50449: PUSH
50450: FOR_TO
50451: IFFALSE 50598
// if mpSidePositions [ i ] then
50453: LD_EXP 5
50457: PUSH
50458: LD_VAR 0 2
50462: ARRAY
50463: IFFALSE 50596
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50465: LD_EXP 17
50469: PUSH
50470: LD_EXP 5
50474: PUSH
50475: LD_VAR 0 2
50479: ARRAY
50480: ARRAY
50481: PPUSH
50482: LD_INT 0
50484: PPUSH
50485: CALL_OW 424
// for j := 1 to 8 do
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: DOUBLE
50495: LD_INT 1
50497: DEC
50498: ST_TO_ADDR
50499: LD_INT 8
50501: PUSH
50502: FOR_TO
50503: IFFALSE 50594
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50505: LD_EXP 5
50509: PUSH
50510: LD_VAR 0 3
50514: ARRAY
50515: IFFALSE 50564
50517: PUSH
50518: LD_EXP 6
50522: PUSH
50523: LD_VAR 0 2
50527: ARRAY
50528: PUSH
50529: LD_EXP 6
50533: PUSH
50534: LD_VAR 0 3
50538: ARRAY
50539: NONEQUAL
50540: IFTRUE 50563
50542: PUSH
50543: LD_EXP 9
50547: NOT
50548: IFFALSE 50562
50550: PUSH
50551: LD_VAR 0 2
50555: PUSH
50556: LD_VAR 0 3
50560: NONEQUAL
50561: AND
50562: OR
50563: AND
50564: IFFALSE 50592
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50566: LD_VAR 0 3
50570: PPUSH
50571: LD_EXP 17
50575: PUSH
50576: LD_EXP 5
50580: PUSH
50581: LD_VAR 0 2
50585: ARRAY
50586: ARRAY
50587: PPUSH
50588: CALL_OW 334
50592: GO 50502
50594: POP
50595: POP
// end ;
50596: GO 50450
50598: POP
50599: POP
// end ;
50600: LD_VAR 0 1
50604: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50605: LD_EXP 47
50609: IFFALSE 50788
50611: GO 50613
50613: DISABLE
50614: LD_INT 0
50616: PPUSH
50617: PPUSH
// begin for i := 1 to 8 do
50618: LD_ADDR_VAR 0 1
50622: PUSH
50623: DOUBLE
50624: LD_INT 1
50626: DEC
50627: ST_TO_ADDR
50628: LD_INT 8
50630: PUSH
50631: FOR_TO
50632: IFFALSE 50785
// if mpSidePositions [ i ] then
50634: LD_EXP 5
50638: PUSH
50639: LD_VAR 0 1
50643: ARRAY
50644: IFFALSE 50783
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50646: LD_ADDR_VAR 0 2
50650: PUSH
50651: LD_EXP 17
50655: PUSH
50656: LD_EXP 5
50660: PUSH
50661: LD_VAR 0 1
50665: ARRAY
50666: ARRAY
50667: PPUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 21
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 21
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 22
50698: PUSH
50699: LD_OWVAR 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PPUSH
50712: CALL_OW 70
50716: PUSH
50717: FOR_IN
50718: IFFALSE 50781
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50720: LD_EXP 6
50724: PUSH
50725: LD_VAR 0 1
50729: ARRAY
50730: PUSH
50731: LD_EXP 6
50735: PUSH
50736: LD_OWVAR 2
50740: ARRAY
50741: NONEQUAL
50742: IFTRUE 50765
50744: PUSH
50745: LD_EXP 9
50749: NOT
50750: IFFALSE 50764
50752: PUSH
50753: LD_VAR 0 1
50757: PUSH
50758: LD_OWVAR 2
50762: NONEQUAL
50763: AND
50764: OR
50765: IFFALSE 50779
// ComMoveToArea ( un , BuildUpEscape ) ;
50767: LD_VAR 0 2
50771: PPUSH
50772: LD_INT 17
50774: PPUSH
50775: CALL_OW 113
50779: GO 50717
50781: POP
50782: POP
50783: GO 50631
50785: POP
50786: POP
// enable ;
50787: ENABLE
// end ;
50788: PPOPN 2
50790: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50791: LD_EXP 18
50795: IFFALSE 50845
50797: GO 50799
50799: DISABLE
50800: LD_INT 0
50802: PPUSH
// begin tmp := mpBuildUpTime ;
50803: LD_ADDR_VAR 0 1
50807: PUSH
50808: LD_EXP 18
50812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50813: LD_INT 35
50815: PPUSH
50816: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50820: LD_ADDR_VAR 0 1
50824: PUSH
50825: LD_VAR 0 1
50829: PUSH
50830: LD_INT 35
50832: MINUS
50833: ST_TO_ADDR
// until not tmp ;
50834: LD_VAR 0 1
50838: NOT
50839: IFFALSE 50813
// EndBuildUp ;
50841: CALL 50424 0 0
// end ;
50845: PPOPN 1
50847: END
// every 0 0$1 trigger mpActive marked mpWin do
50848: LD_INT 100
50850: IFFALSE 50884
50852: GO 50854
50854: DISABLE
// begin if IAmServer then
50855: CALL_OW 518
50859: IFFALSE 50868
// wait ( 0 0$3 ) ;
50861: LD_INT 105
50863: PPUSH
50864: CALL_OW 67
// if Multiplayer then
50868: LD_OWVAR 4
50872: IFFALSE 50880
// YouWinInMultiplayer else
50874: CALL_OW 106
50878: GO 50884
// YouWin ;
50880: CALL_OW 103
// end ;
50884: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50885: LD_INT 0
50887: PPUSH
// result := false ;
50888: LD_ADDR_VAR 0 3
50892: PUSH
50893: LD_INT 0
50895: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50896: LD_VAR 0 1
50900: PUSH
50901: LD_INT 1
50903: DOUBLE
50904: EQUAL
50905: IFTRUE 50927
50907: LD_INT 5
50909: DOUBLE
50910: EQUAL
50911: IFTRUE 50927
50913: LD_INT 6
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50927
50919: LD_INT 7
50921: DOUBLE
50922: EQUAL
50923: IFTRUE 50927
50925: GO 51000
50927: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50928: LD_ADDR_VAR 0 3
50932: PUSH
50933: LD_INT 22
50935: PUSH
50936: LD_VAR 0 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 21
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 33
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 33
50970: PUSH
50971: LD_INT 5
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PPUSH
50988: CALL_OW 69
50992: PPUSH
50993: CALL 5182 0 1
50997: ST_TO_ADDR
// end ; GameTypeSurvival :
50998: GO 51396
51000: LD_INT 2
51002: DOUBLE
51003: EQUAL
51004: IFTRUE 51008
51006: GO 51138
51008: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51009: LD_ADDR_VAR 0 3
51013: PUSH
51014: LD_INT 22
51016: PUSH
51017: LD_VAR 0 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 30
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 30
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PPUSH
51058: CALL_OW 69
51062: PPUSH
51063: CALL 5182 0 1
51067: IFFALSE 51135
51069: PUSH
51070: LD_INT 22
51072: PUSH
51073: LD_VAR 0 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: LD_INT 21
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 33
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 33
51107: PUSH
51108: LD_INT 5
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PPUSH
51125: CALL_OW 69
51129: PPUSH
51130: CALL 5182 0 1
51134: AND
51135: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
51136: GO 51396
51138: LD_INT 8
51140: DOUBLE
51141: EQUAL
51142: IFTRUE 51146
51144: GO 51295
51146: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51147: LD_ADDR_VAR 0 3
51151: PUSH
51152: LD_EXP 39
51156: PUSH
51157: LD_VAR 0 2
51161: ARRAY
51162: PPUSH
51163: CALL_OW 300
51167: IFFALSE 51224
51169: PUSH
51170: LD_INT 22
51172: PUSH
51173: LD_VAR 0 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 30
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 30
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PPUSH
51214: CALL_OW 69
51218: PPUSH
51219: CALL 5182 0 1
51223: AND
51224: IFFALSE 51292
51226: PUSH
51227: LD_INT 22
51229: PUSH
51230: LD_VAR 0 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 21
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 33
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 33
51264: PUSH
51265: LD_INT 5
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PPUSH
51282: CALL_OW 69
51286: PPUSH
51287: CALL 5182 0 1
51291: AND
51292: ST_TO_ADDR
// end ; GameTypeKing :
51293: GO 51396
51295: LD_INT 3
51297: DOUBLE
51298: EQUAL
51299: IFTRUE 51303
51301: GO 51395
51303: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51304: LD_ADDR_VAR 0 3
51308: PUSH
51309: LD_INT 22
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 21
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 33
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 33
51346: PUSH
51347: LD_INT 5
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PPUSH
51364: CALL_OW 69
51368: PPUSH
51369: CALL 5182 0 1
51373: IFFALSE 51392
51375: PUSH
51376: LD_VAR 0 2
51380: PPUSH
51381: CALL 56065 0 1
51385: PUSH
51386: LD_EXP 33
51390: LESS
51391: AND
51392: ST_TO_ADDR
// end ; end ;
51393: GO 51396
51395: POP
// end ;
51396: LD_VAR 0 3
51400: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51401: LD_INT 100
51403: IFFALSE 51633
51405: GO 51407
51407: DISABLE
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
// begin if Multiplayer then
51412: LD_OWVAR 4
51416: IFFALSE 51424
// SetPlayerSpectator ( ) else
51418: CALL_OW 572
51422: GO 51433
// FogOff ( your_side ) ;
51424: LD_OWVAR 2
51428: PPUSH
51429: CALL_OW 344
// repeat gameIsOn := false ;
51433: LD_ADDR_VAR 0 1
51437: PUSH
51438: LD_INT 0
51440: ST_TO_ADDR
// for i := 1 to 8 do
51441: LD_ADDR_VAR 0 2
51445: PUSH
51446: DOUBLE
51447: LD_INT 1
51449: DEC
51450: ST_TO_ADDR
51451: LD_INT 8
51453: PUSH
51454: FOR_TO
51455: IFFALSE 51585
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51457: LD_EXP 5
51461: PUSH
51462: LD_VAR 0 2
51466: ARRAY
51467: IFFALSE 51480
51469: PUSH
51470: LD_VAR 0 2
51474: PPUSH
51475: CALL_OW 108
51479: AND
51480: IFFALSE 51494
51482: PUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_OWVAR 2
51492: NONEQUAL
51493: AND
51494: IFFALSE 51583
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51496: LD_EXP 6
51500: PUSH
51501: LD_VAR 0 2
51505: ARRAY
51506: NOT
51507: IFTRUE 51555
51509: PUSH
51510: LD_EXP 6
51514: PUSH
51515: LD_VAR 0 2
51519: ARRAY
51520: PUSH
51521: LD_EXP 6
51525: PUSH
51526: LD_OWVAR 2
51530: ARRAY
51531: NONEQUAL
51532: IFFALSE 51554
51534: PUSH
51535: LD_OWVAR 2
51539: PPUSH
51540: LD_VAR 0 2
51544: PPUSH
51545: CALL_OW 81
51549: PUSH
51550: LD_INT 1
51552: NONEQUAL
51553: AND
51554: OR
51555: IFFALSE 51583
// if HasPowerByGameType ( mpGameType , i ) then
51557: LD_EXP 1
51561: PPUSH
51562: LD_VAR 0 2
51566: PPUSH
51567: CALL 50885 0 2
51571: IFFALSE 51583
// begin gameIsOn := true ;
51573: LD_ADDR_VAR 0 1
51577: PUSH
51578: LD_INT 1
51580: ST_TO_ADDR
// break ;
51581: GO 51585
// end ;
51583: GO 51454
51585: POP
51586: POP
// wait ( 100 ) ;
51587: LD_INT 100
51589: PPUSH
51590: CALL_OW 67
// until not gameIsOn ;
51594: LD_VAR 0 1
51598: NOT
51599: IFFALSE 51433
// if IAmServer then
51601: CALL_OW 518
51605: IFFALSE 51614
// wait ( 0 0$3 ) ;
51607: LD_INT 105
51609: PPUSH
51610: CALL_OW 67
// if Multiplayer then
51614: LD_OWVAR 4
51618: IFFALSE 51626
// YouLostInMultiplayer else
51620: CALL_OW 107
51624: GO 51633
// YouLost (  ) ;
51626: LD_STRING 
51628: PPUSH
51629: CALL_OW 104
// end ;
51633: PPOPN 2
51635: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51636: LD_EXP 31
51640: IFFALSE 52024
51642: GO 51644
51644: DISABLE
51645: LD_INT 0
51647: PPUSH
51648: PPUSH
51649: PPUSH
51650: PPUSH
51651: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51652: LD_ADDR_VAR 0 5
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 5
51671: PUSH
51672: LD_INT 6
51674: PUSH
51675: LD_INT 7
51677: PUSH
51678: LD_INT 8
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51691: LD_INT 350
51693: PPUSH
51694: CALL_OW 67
// for i := 1 to 8 do
51698: LD_ADDR_VAR 0 1
51702: PUSH
51703: DOUBLE
51704: LD_INT 1
51706: DEC
51707: ST_TO_ADDR
51708: LD_INT 8
51710: PUSH
51711: FOR_TO
51712: IFFALSE 51994
// begin j := sides [ i ] ;
51714: LD_ADDR_VAR 0 2
51718: PUSH
51719: LD_VAR 0 5
51723: PUSH
51724: LD_VAR 0 1
51728: ARRAY
51729: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51730: LD_EXP 38
51734: PUSH
51735: LD_VAR 0 2
51739: ARRAY
51740: PPUSH
51741: CALL 5182 0 1
51745: IFFALSE 51758
51747: PUSH
51748: LD_VAR 0 2
51752: PPUSH
51753: CALL_OW 108
51757: AND
51758: IFFALSE 51776
51760: PUSH
51761: LD_EXP 1
51765: PPUSH
51766: LD_VAR 0 2
51770: PPUSH
51771: CALL 50885 0 2
51775: AND
51776: IFFALSE 51992
// begin wait ( mpRespawn div 2 ) ;
51778: LD_EXP 31
51782: PUSH
51783: LD_INT 2
51785: DIV
51786: PPUSH
51787: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: LD_INT 22
51798: PUSH
51799: LD_VAR 0 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 50
51810: PUSH
51811: EMPTY
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 30
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 30
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: PPUSH
51847: CALL_OW 69
51851: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51852: LD_VAR 0 3
51856: NOT
51857: IFTRUE 51871
51859: PUSH
51860: LD_VAR 0 2
51864: PPUSH
51865: CALL_OW 108
51869: NOT
51870: OR
51871: IFTRUE 51890
51873: PUSH
51874: LD_EXP 1
51878: PPUSH
51879: LD_VAR 0 2
51883: PPUSH
51884: CALL 50885 0 2
51888: NOT
51889: OR
51890: IFFALSE 51894
// continue ;
51892: GO 51711
// spawn := tmp [ 1 ] ;
51894: LD_ADDR_VAR 0 4
51898: PUSH
51899: LD_VAR 0 3
51903: PUSH
51904: LD_INT 1
51906: ARRAY
51907: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51908: LD_EXP 38
51912: PUSH
51913: LD_VAR 0 2
51917: ARRAY
51918: PUSH
51919: LD_INT 1
51921: ARRAY
51922: PPUSH
51923: LD_VAR 0 4
51927: PPUSH
51928: CALL_OW 250
51932: PPUSH
51933: LD_VAR 0 4
51937: PPUSH
51938: CALL_OW 251
51942: PPUSH
51943: LD_INT 32
51945: PPUSH
51946: LD_INT 1
51948: PPUSH
51949: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51953: LD_ADDR_EXP 38
51957: PUSH
51958: LD_EXP 38
51962: PPUSH
51963: LD_VAR 0 2
51967: PPUSH
51968: LD_EXP 38
51972: PUSH
51973: LD_VAR 0 2
51977: ARRAY
51978: PPUSH
51979: LD_INT 1
51981: PPUSH
51982: CALL_OW 3
51986: PPUSH
51987: CALL_OW 1
51991: ST_TO_ADDR
// end ; end ;
51992: GO 51711
51994: POP
51995: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51996: LD_ADDR_VAR 0 5
52000: PUSH
52001: LD_VAR 0 5
52005: PPUSH
52006: LD_INT 1
52008: PPUSH
52009: LD_INT 8
52011: PPUSH
52012: LD_INT 1
52014: PPUSH
52015: CALL 7508 0 4
52019: ST_TO_ADDR
// until false ;
52020: LD_INT 0
52022: IFFALSE 51691
// end ;
52024: PPOPN 5
52026: END
// every 0 0$1 marked mpActive do
52027: GO 52029
52029: DISABLE
// begin enable ;
52030: ENABLE
// if not mpDisplayStrings then
52031: LD_EXP 36
52035: NOT
52036: IFFALSE 52047
// begin display_strings := [ ] ;
52038: LD_ADDR_OWVAR 47
52042: PUSH
52043: EMPTY
52044: ST_TO_ADDR
// exit ;
52045: GO 52057
// end ; display_strings := mpDisplayStrings ;
52047: LD_ADDR_OWVAR 47
52051: PUSH
52052: LD_EXP 36
52056: ST_TO_ADDR
// end ; end_of_file
52057: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
// if GetType ( un ) = unit_vehicle then
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 247
52078: PUSH
52079: LD_INT 2
52081: EQUAL
52082: IFFALSE 52086
// exit ;
52084: GO 52859
// side := GetSide ( un ) ;
52086: LD_ADDR_VAR 0 9
52090: PUSH
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 255
52100: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
52101: LD_EXP 1
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 8
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: IN
52116: IFFALSE 52210
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 266
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: IN
52138: IFFALSE 52210
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52140: LD_ADDR_VAR 0 3
52144: PUSH
52145: LD_INT 22
52147: PUSH
52148: LD_VAR 0 9
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 21
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 33
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PPUSH
52189: CALL_OW 69
52193: PUSH
52194: FOR_IN
52195: IFFALSE 52208
// KillUnit ( i ) ;
52197: LD_VAR 0 3
52201: PPUSH
52202: CALL_OW 66
52206: GO 52194
52208: POP
52209: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
52210: LD_EXP 1
52214: PUSH
52215: LD_INT 8
52217: EQUAL
52218: IFFALSE 52302
// if un in mpCommanders then
52220: LD_VAR 0 1
52224: PUSH
52225: LD_EXP 39
52229: IN
52230: IFFALSE 52302
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52232: LD_ADDR_VAR 0 3
52236: PUSH
52237: LD_INT 22
52239: PUSH
52240: LD_VAR 0 9
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 21
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 33
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PPUSH
52281: CALL_OW 69
52285: PUSH
52286: FOR_IN
52287: IFFALSE 52300
// KillUnit ( i ) ;
52289: LD_VAR 0 3
52293: PPUSH
52294: CALL_OW 66
52298: GO 52286
52300: POP
52301: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52302: LD_VAR 0 1
52306: PPUSH
52307: CALL_OW 257
52311: PUSH
52312: LD_INT 12
52314: PUSH
52315: LD_INT 17
52317: PUSH
52318: LD_INT 15
52320: PUSH
52321: LD_INT 16
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: IN
52330: IFTRUE 52347
52332: PUSH
52333: LD_VAR 0 1
52337: PPUSH
52338: CALL_OW 263
52342: PUSH
52343: LD_INT 5
52345: EQUAL
52346: OR
52347: IFFALSE 52584
// begin tag := 0 ;
52349: LD_ADDR_VAR 0 5
52353: PUSH
52354: LD_INT 0
52356: ST_TO_ADDR
// for i := 1 to 8 do
52357: LD_ADDR_VAR 0 3
52361: PUSH
52362: DOUBLE
52363: LD_INT 1
52365: DEC
52366: ST_TO_ADDR
52367: LD_INT 8
52369: PUSH
52370: FOR_TO
52371: IFFALSE 52405
// if un in mpApePosIndex [ i ] then
52373: LD_VAR 0 1
52377: PUSH
52378: LD_EXP 30
52382: PUSH
52383: LD_VAR 0 3
52387: ARRAY
52388: IN
52389: IFFALSE 52403
// begin tag := i ;
52391: LD_ADDR_VAR 0 5
52395: PUSH
52396: LD_VAR 0 3
52400: ST_TO_ADDR
// break ;
52401: GO 52405
// end ;
52403: GO 52370
52405: POP
52406: POP
// if not tag then
52407: LD_VAR 0 5
52411: NOT
52412: IFFALSE 52416
// exit ;
52414: GO 52859
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52416: LD_ADDR_VAR 0 7
52420: PUSH
52421: LD_EXP 29
52425: PUSH
52426: LD_EXP 5
52430: PUSH
52431: LD_VAR 0 5
52435: ARRAY
52436: ARRAY
52437: ST_TO_ADDR
// if not area then
52438: LD_VAR 0 7
52442: NOT
52443: IFFALSE 52447
// exit ;
52445: GO 52859
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52447: LD_INT 14700
52449: PUSH
52450: LD_VAR 0 1
52454: PUSH
52455: LD_INT 5
52457: MOD
52458: PUSH
52459: LD_INT 1
52461: PLUS
52462: PUSH
52463: LD_INT 700
52465: MUL
52466: PLUS
52467: PPUSH
52468: CALL_OW 67
// repeat wait ( 10 ) ;
52472: LD_INT 10
52474: PPUSH
52475: CALL_OW 67
// until not mpBlockRespThread ;
52479: LD_EXP 45
52483: NOT
52484: IFFALSE 52472
// mpBlockRespThread := true ;
52486: LD_ADDR_EXP 45
52490: PUSH
52491: LD_INT 1
52493: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52494: LD_INT 0
52496: PPUSH
52497: CALL 37285 0 1
// ape := CreateHuman ;
52501: LD_ADDR_VAR 0 4
52505: PUSH
52506: CALL_OW 44
52510: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52511: LD_ADDR_EXP 30
52515: PUSH
52516: LD_EXP 30
52520: PPUSH
52521: LD_VAR 0 5
52525: PPUSH
52526: LD_EXP 30
52530: PUSH
52531: LD_VAR 0 5
52535: ARRAY
52536: PPUSH
52537: LD_VAR 0 4
52541: PPUSH
52542: CALL 41158 0 2
52546: PPUSH
52547: CALL_OW 1
52551: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52552: LD_VAR 0 4
52556: PPUSH
52557: LD_VAR 0 7
52561: PPUSH
52562: LD_INT 0
52564: PPUSH
52565: CALL_OW 49
// wait ( 10 ) ;
52569: LD_INT 10
52571: PPUSH
52572: CALL_OW 67
// mpBlockRespThread := false ;
52576: LD_ADDR_EXP 45
52580: PUSH
52581: LD_INT 0
52583: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52584: LD_VAR 0 1
52588: PPUSH
52589: CALL_OW 247
52593: PUSH
52594: LD_INT 1
52596: EQUAL
52597: IFFALSE 52614
52599: PUSH
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 248
52609: PUSH
52610: LD_INT 0
52612: GREATER
52613: AND
52614: IFFALSE 52859
// begin if not mpRespawn then
52616: LD_EXP 31
52620: NOT
52621: IFFALSE 52625
// exit ;
52623: GO 52859
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52625: LD_VAR 0 9
52629: PPUSH
52630: CALL_OW 108
52634: NOT
52635: IFFALSE 52654
52637: PUSH
52638: LD_EXP 1
52642: PPUSH
52643: LD_VAR 0 9
52647: PPUSH
52648: CALL 50885 0 2
52652: NOT
52653: AND
52654: IFFALSE 52658
// exit ;
52656: GO 52859
// side := GetSide ( un ) ;
52658: LD_ADDR_VAR 0 9
52662: PUSH
52663: LD_VAR 0 1
52667: PPUSH
52668: CALL_OW 255
52672: ST_TO_ADDR
// nation := GetNation ( un ) ;
52673: LD_ADDR_VAR 0 8
52677: PUSH
52678: LD_VAR 0 1
52682: PPUSH
52683: CALL_OW 248
52687: ST_TO_ADDR
// class := GetClass ( un ) ;
52688: LD_ADDR_VAR 0 6
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 257
52702: ST_TO_ADDR
// if class > 4 then
52703: LD_VAR 0 6
52707: PUSH
52708: LD_INT 4
52710: GREATER
52711: IFFALSE 52721
// class := 1 ;
52713: LD_ADDR_VAR 0 6
52717: PUSH
52718: LD_INT 1
52720: ST_TO_ADDR
// repeat wait ( 10 ) ;
52721: LD_INT 10
52723: PPUSH
52724: CALL_OW 67
// until not mpBlockRespThread ;
52728: LD_EXP 45
52732: NOT
52733: IFFALSE 52721
// mpBlockRespThread := true ;
52735: LD_ADDR_EXP 45
52739: PUSH
52740: LD_INT 1
52742: ST_TO_ADDR
// uc_side := side ;
52743: LD_ADDR_OWVAR 20
52747: PUSH
52748: LD_VAR 0 9
52752: ST_TO_ADDR
// uc_nation := nation ;
52753: LD_ADDR_OWVAR 21
52757: PUSH
52758: LD_VAR 0 8
52762: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52763: LD_INT 0
52765: PPUSH
52766: LD_VAR 0 6
52770: PPUSH
52771: LD_INT 2
52773: PPUSH
52774: CALL_OW 380
// un := CreateHuman ;
52778: LD_ADDR_VAR 0 1
52782: PUSH
52783: CALL_OW 44
52787: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52788: LD_ADDR_EXP 38
52792: PUSH
52793: LD_EXP 38
52797: PPUSH
52798: LD_VAR 0 9
52802: PPUSH
52803: LD_EXP 38
52807: PUSH
52808: LD_VAR 0 9
52812: ARRAY
52813: PPUSH
52814: LD_EXP 38
52818: PUSH
52819: LD_VAR 0 9
52823: ARRAY
52824: PUSH
52825: LD_INT 1
52827: PLUS
52828: PPUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: CALL_OW 1
52838: PPUSH
52839: CALL_OW 1
52843: ST_TO_ADDR
// wait ( 10 ) ;
52844: LD_INT 10
52846: PPUSH
52847: CALL_OW 67
// mpBlockRespThread := false ;
52851: LD_ADDR_EXP 45
52855: PUSH
52856: LD_INT 0
52858: ST_TO_ADDR
// end ; end ;
52859: LD_VAR 0 2
52863: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52864: LD_INT 0
52866: PPUSH
52867: PPUSH
52868: PPUSH
52869: PPUSH
52870: PPUSH
// tag := 0 ;
52871: LD_ADDR_VAR 0 5
52875: PUSH
52876: LD_INT 0
52878: ST_TO_ADDR
// for i := 1 to 8 do
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: DOUBLE
52885: LD_INT 1
52887: DEC
52888: ST_TO_ADDR
52889: LD_INT 8
52891: PUSH
52892: FOR_TO
52893: IFFALSE 52927
// if un in mpApePosIndex [ i ] then
52895: LD_VAR 0 2
52899: PUSH
52900: LD_EXP 30
52904: PUSH
52905: LD_VAR 0 4
52909: ARRAY
52910: IN
52911: IFFALSE 52925
// begin tag := i ;
52913: LD_ADDR_VAR 0 5
52917: PUSH
52918: LD_VAR 0 4
52922: ST_TO_ADDR
// break ;
52923: GO 52927
// end ;
52925: GO 52892
52927: POP
52928: POP
// if not tag then
52929: LD_VAR 0 5
52933: NOT
52934: IFFALSE 52938
// exit ;
52936: GO 53106
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52938: LD_ADDR_VAR 0 6
52942: PUSH
52943: LD_EXP 29
52947: PUSH
52948: LD_EXP 5
52952: PUSH
52953: LD_VAR 0 5
52957: ARRAY
52958: ARRAY
52959: ST_TO_ADDR
// if not area then
52960: LD_VAR 0 6
52964: NOT
52965: IFFALSE 52969
// exit ;
52967: GO 53106
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52969: LD_INT 14700
52971: PUSH
52972: LD_VAR 0 2
52976: PUSH
52977: LD_INT 5
52979: MOD
52980: PUSH
52981: LD_INT 1
52983: PLUS
52984: PUSH
52985: LD_INT 700
52987: MUL
52988: PLUS
52989: PPUSH
52990: CALL_OW 67
// repeat wait ( 10 ) ;
52994: LD_INT 10
52996: PPUSH
52997: CALL_OW 67
// until not mpBlockRespThread ;
53001: LD_EXP 45
53005: NOT
53006: IFFALSE 52994
// mpBlockRespThread := true ;
53008: LD_ADDR_EXP 45
53012: PUSH
53013: LD_INT 1
53015: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53016: LD_INT 0
53018: PPUSH
53019: CALL 37285 0 1
// ape := CreateHuman ;
53023: LD_ADDR_VAR 0 7
53027: PUSH
53028: CALL_OW 44
53032: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53033: LD_ADDR_EXP 30
53037: PUSH
53038: LD_EXP 30
53042: PPUSH
53043: LD_VAR 0 5
53047: PPUSH
53048: LD_EXP 30
53052: PUSH
53053: LD_VAR 0 5
53057: ARRAY
53058: PPUSH
53059: LD_VAR 0 7
53063: PPUSH
53064: CALL 41158 0 2
53068: PPUSH
53069: CALL_OW 1
53073: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53074: LD_VAR 0 7
53078: PPUSH
53079: LD_VAR 0 6
53083: PPUSH
53084: LD_INT 0
53086: PPUSH
53087: CALL_OW 49
// wait ( 10 ) ;
53091: LD_INT 10
53093: PPUSH
53094: CALL_OW 67
// mpBlockRespThread := false ;
53098: LD_ADDR_EXP 45
53102: PUSH
53103: LD_INT 0
53105: ST_TO_ADDR
// end ;
53106: LD_VAR 0 3
53110: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53111: LD_INT 0
53113: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 266
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: IN
53134: IFFALSE 53159
// SetBName ( building , @ & GetSide ( building ) ) ;
53136: LD_VAR 0 1
53140: PPUSH
53141: LD_STRING @
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 255
53153: STR
53154: PPUSH
53155: CALL_OW 500
// end ;
53159: LD_VAR 0 2
53163: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53164: LD_INT 0
53166: PPUSH
53167: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53168: LD_EXP 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: LD_INT 8
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: IN
53183: IFFALSE 53207
53185: PUSH
53186: LD_VAR 0 1
53190: PPUSH
53191: CALL_OW 266
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: IN
53206: AND
53207: IFFALSE 53286
// begin SetSide ( building , oldSide ) ;
53209: LD_VAR 0 1
53213: PPUSH
53214: LD_VAR 0 2
53218: PPUSH
53219: CALL_OW 235
// KillUnit ( building ) ;
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53232: LD_ADDR_VAR 0 5
53236: PUSH
53237: LD_INT 22
53239: PUSH
53240: LD_VAR 0 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 21
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PPUSH
53263: CALL_OW 69
53267: PUSH
53268: FOR_IN
53269: IFFALSE 53282
// KillUnit ( i ) ;
53271: LD_VAR 0 5
53275: PPUSH
53276: CALL_OW 66
53280: GO 53268
53282: POP
53283: POP
// exit ;
53284: GO 53331
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 266
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: IN
53306: IFFALSE 53331
// SetBName ( building , @ & GetSide ( building ) ) ;
53308: LD_VAR 0 1
53312: PPUSH
53313: LD_STRING @
53315: PUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: CALL_OW 255
53325: STR
53326: PPUSH
53327: CALL_OW 500
// end ;
53331: LD_VAR 0 4
53335: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53336: LD_INT 0
53338: PPUSH
53339: PPUSH
53340: PPUSH
// if mpGameType <> GameTypeFamine then
53341: LD_EXP 1
53345: PUSH
53346: LD_INT 5
53348: NONEQUAL
53349: IFFALSE 53353
// exit ;
53351: GO 53587
// for i := 1 to mpGlobalOilDeposits do
53353: LD_ADDR_VAR 0 6
53357: PUSH
53358: DOUBLE
53359: LD_INT 1
53361: DEC
53362: ST_TO_ADDR
53363: LD_EXP 40
53367: PUSH
53368: FOR_TO
53369: IFFALSE 53585
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53371: LD_EXP 40
53375: PUSH
53376: LD_VAR 0 6
53380: ARRAY
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: PPUSH
53386: LD_EXP 40
53390: PUSH
53391: LD_VAR 0 6
53395: ARRAY
53396: PUSH
53397: LD_INT 2
53399: ARRAY
53400: PPUSH
53401: CALL_OW 428
53405: PUSH
53406: LD_VAR 0 1
53410: EQUAL
53411: IFFALSE 53583
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53413: LD_ADDR_VAR 0 7
53417: PUSH
53418: LD_EXP 40
53422: PUSH
53423: LD_VAR 0 6
53427: ARRAY
53428: PUSH
53429: LD_INT 3
53431: ARRAY
53432: ST_TO_ADDR
// value := value - amount ;
53433: LD_ADDR_VAR 0 7
53437: PUSH
53438: LD_VAR 0 7
53442: PUSH
53443: LD_VAR 0 4
53447: MINUS
53448: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53449: LD_ADDR_EXP 40
53453: PUSH
53454: LD_EXP 40
53458: PPUSH
53459: LD_VAR 0 6
53463: PPUSH
53464: LD_EXP 40
53468: PUSH
53469: LD_VAR 0 6
53473: ARRAY
53474: PPUSH
53475: LD_INT 3
53477: PPUSH
53478: LD_VAR 0 7
53482: PPUSH
53483: CALL_OW 1
53487: PPUSH
53488: CALL_OW 1
53492: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53493: LD_VAR 0 2
53497: PUSH
53498: LD_OWVAR 2
53502: PUSH
53503: LD_INT 9
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: IN
53510: IFFALSE 53526
// SetUnitDisplayNumber ( building , value ) ;
53512: LD_VAR 0 1
53516: PPUSH
53517: LD_VAR 0 7
53521: PPUSH
53522: CALL_OW 505
// if value <= 0 then
53526: LD_VAR 0 7
53530: PUSH
53531: LD_INT 0
53533: LESSEQUAL
53534: IFFALSE 53583
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53536: LD_EXP 40
53540: PUSH
53541: LD_VAR 0 6
53545: ARRAY
53546: PUSH
53547: LD_INT 1
53549: ARRAY
53550: PPUSH
53551: LD_EXP 40
53555: PUSH
53556: LD_VAR 0 6
53560: ARRAY
53561: PUSH
53562: LD_INT 2
53564: ARRAY
53565: PPUSH
53566: CALL_OW 63
// KillUnit ( building ) ;
53570: LD_VAR 0 1
53574: PPUSH
53575: CALL_OW 66
// exit ;
53579: POP
53580: POP
53581: GO 53587
// end ; end ; end ;
53583: GO 53368
53585: POP
53586: POP
// end ;
53587: LD_VAR 0 5
53591: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53592: LD_INT 0
53594: PPUSH
53595: PPUSH
53596: PPUSH
// if mpGameType <> GameTypeFamine then
53597: LD_EXP 1
53601: PUSH
53602: LD_INT 5
53604: NONEQUAL
53605: IFFALSE 53609
// exit ;
53607: GO 53843
// for i := 1 to mpGlobalSibDeposits do
53609: LD_ADDR_VAR 0 6
53613: PUSH
53614: DOUBLE
53615: LD_INT 1
53617: DEC
53618: ST_TO_ADDR
53619: LD_EXP 41
53623: PUSH
53624: FOR_TO
53625: IFFALSE 53841
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53627: LD_EXP 41
53631: PUSH
53632: LD_VAR 0 6
53636: ARRAY
53637: PUSH
53638: LD_INT 1
53640: ARRAY
53641: PPUSH
53642: LD_EXP 41
53646: PUSH
53647: LD_VAR 0 6
53651: ARRAY
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PPUSH
53657: CALL_OW 428
53661: PUSH
53662: LD_VAR 0 1
53666: EQUAL
53667: IFFALSE 53839
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53669: LD_ADDR_VAR 0 7
53673: PUSH
53674: LD_EXP 41
53678: PUSH
53679: LD_VAR 0 6
53683: ARRAY
53684: PUSH
53685: LD_INT 3
53687: ARRAY
53688: ST_TO_ADDR
// value := value - amount ;
53689: LD_ADDR_VAR 0 7
53693: PUSH
53694: LD_VAR 0 7
53698: PUSH
53699: LD_VAR 0 4
53703: MINUS
53704: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53705: LD_ADDR_EXP 41
53709: PUSH
53710: LD_EXP 41
53714: PPUSH
53715: LD_VAR 0 6
53719: PPUSH
53720: LD_EXP 41
53724: PUSH
53725: LD_VAR 0 6
53729: ARRAY
53730: PPUSH
53731: LD_INT 3
53733: PPUSH
53734: LD_VAR 0 7
53738: PPUSH
53739: CALL_OW 1
53743: PPUSH
53744: CALL_OW 1
53748: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53749: LD_VAR 0 2
53753: PUSH
53754: LD_OWVAR 2
53758: PUSH
53759: LD_INT 9
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: IN
53766: IFFALSE 53782
// SetUnitDisplayNumber ( building , value ) ;
53768: LD_VAR 0 1
53772: PPUSH
53773: LD_VAR 0 7
53777: PPUSH
53778: CALL_OW 505
// if value <= 0 then
53782: LD_VAR 0 7
53786: PUSH
53787: LD_INT 0
53789: LESSEQUAL
53790: IFFALSE 53839
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53792: LD_EXP 41
53796: PUSH
53797: LD_VAR 0 6
53801: ARRAY
53802: PUSH
53803: LD_INT 1
53805: ARRAY
53806: PPUSH
53807: LD_EXP 41
53811: PUSH
53812: LD_VAR 0 6
53816: ARRAY
53817: PUSH
53818: LD_INT 2
53820: ARRAY
53821: PPUSH
53822: CALL_OW 63
// KillUnit ( building ) ;
53826: LD_VAR 0 1
53830: PPUSH
53831: CALL_OW 66
// exit ;
53835: POP
53836: POP
53837: GO 53843
// end ; end ; end ;
53839: GO 53624
53841: POP
53842: POP
// end ;
53843: LD_VAR 0 5
53847: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53848: LD_INT 0
53850: PPUSH
53851: PPUSH
// side := GetSide ( factory ) ;
53852: LD_ADDR_VAR 0 7
53856: PUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 255
53866: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53867: LD_VAR 0 5
53871: PUSH
53872: LD_INT 81
53874: EQUAL
53875: IFFALSE 53913
53877: PUSH
53878: LD_INT 22
53880: PUSH
53881: LD_VAR 0 7
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 34
53892: PUSH
53893: LD_INT 81
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PPUSH
53904: CALL_OW 69
53908: PUSH
53909: LD_INT 0
53911: GREATER
53912: AND
53913: IFFALSE 53946
// begin ComCancel ( factory ) ;
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 127
// if side = your_side then
53924: LD_VAR 0 7
53928: PUSH
53929: LD_OWVAR 2
53933: EQUAL
53934: IFFALSE 53946
// HintSpec ( VehLimit , 2 ) ;
53936: LD_STRING VehLimit
53938: PPUSH
53939: LD_INT 2
53941: PPUSH
53942: CALL_OW 338
// end ; end ;
53946: LD_VAR 0 6
53950: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53951: LD_INT 0
53953: PPUSH
53954: PPUSH
53955: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53956: LD_VAR 0 1
53960: PPUSH
53961: CALL_OW 264
53965: PUSH
53966: LD_INT 81
53968: EQUAL
53969: IFFALSE 53986
53971: PUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 263
53981: PUSH
53982: LD_INT 1
53984: EQUAL
53985: AND
53986: IFFALSE 54266
// begin for i := 1 to Count ( minersList ) do
53988: LD_ADDR_VAR 0 6
53992: PUSH
53993: DOUBLE
53994: LD_INT 1
53996: DEC
53997: ST_TO_ADDR
53998: LD_EXP 56
54002: PPUSH
54003: CALL 5182 0 1
54007: PUSH
54008: FOR_TO
54009: IFFALSE 54127
// begin if minersList [ i ] = oldId then
54011: LD_EXP 56
54015: PUSH
54016: LD_VAR 0 6
54020: ARRAY
54021: PUSH
54022: LD_VAR 0 2
54026: EQUAL
54027: IFFALSE 54125
// begin for j := 1 to minerMinesList [ i ] do
54029: LD_ADDR_VAR 0 7
54033: PUSH
54034: DOUBLE
54035: LD_INT 1
54037: DEC
54038: ST_TO_ADDR
54039: LD_EXP 57
54043: PUSH
54044: LD_VAR 0 6
54048: ARRAY
54049: PUSH
54050: FOR_TO
54051: IFFALSE 54101
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54053: LD_EXP 57
54057: PUSH
54058: LD_VAR 0 6
54062: ARRAY
54063: PUSH
54064: LD_VAR 0 7
54068: ARRAY
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PPUSH
54074: LD_EXP 57
54078: PUSH
54079: LD_VAR 0 6
54083: ARRAY
54084: PUSH
54085: LD_VAR 0 7
54089: ARRAY
54090: PUSH
54091: LD_INT 2
54093: ARRAY
54094: PPUSH
54095: CALL_OW 612
54099: GO 54050
54101: POP
54102: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54103: LD_ADDR_EXP 57
54107: PUSH
54108: LD_EXP 57
54112: PPUSH
54113: LD_VAR 0 6
54117: PPUSH
54118: CALL_OW 3
54122: ST_TO_ADDR
// break ;
54123: GO 54127
// end ; end ;
54125: GO 54008
54127: POP
54128: POP
// minersList := minersList diff oldId ;
54129: LD_ADDR_EXP 56
54133: PUSH
54134: LD_EXP 56
54138: PUSH
54139: LD_VAR 0 2
54143: DIFF
54144: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54145: LD_INT 22
54147: PUSH
54148: LD_VAR 0 4
54152: PPUSH
54153: CALL_OW 255
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 34
54164: PUSH
54165: LD_INT 81
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PPUSH
54176: CALL_OW 69
54180: PUSH
54181: LD_INT 1
54183: GREATER
54184: IFFALSE 54211
// begin ComExit ( unit ) ;
54186: LD_VAR 0 4
54190: PPUSH
54191: CALL 41556 0 1
// SetSide ( newId , oldSide ) ;
54195: LD_VAR 0 1
54199: PPUSH
54200: LD_VAR 0 3
54204: PPUSH
54205: CALL_OW 235
// exit ;
54209: GO 54266
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54211: LD_ADDR_EXP 56
54215: PUSH
54216: LD_EXP 56
54220: PPUSH
54221: LD_EXP 56
54225: PUSH
54226: LD_INT 1
54228: PLUS
54229: PPUSH
54230: LD_VAR 0 1
54234: PPUSH
54235: CALL_OW 1
54239: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54240: LD_ADDR_EXP 57
54244: PUSH
54245: LD_EXP 57
54249: PPUSH
54250: LD_EXP 57
54254: PUSH
54255: LD_INT 1
54257: PLUS
54258: PPUSH
54259: EMPTY
54260: PPUSH
54261: CALL_OW 1
54265: ST_TO_ADDR
// end ; end ; end_of_file
54266: LD_VAR 0 5
54270: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54271: LD_EXP 37
54275: IFFALSE 54283
54277: PUSH
54278: CALL 54493 0 0
54282: AND
54283: IFFALSE 54291
54285: PUSH
54286: LD_OWVAR 4
54290: AND
54291: IFFALSE 54490
54293: GO 54295
54295: DISABLE
54296: LD_INT 0
54298: PPUSH
54299: PPUSH
// begin canWin := false ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: LD_INT 0
54307: ST_TO_ADDR
// if not HasPower ( your_side ) then
54308: LD_OWVAR 2
54312: PPUSH
54313: CALL 54535 0 1
54317: NOT
54318: IFFALSE 54329
// begin Multiplayer_Loose_Message ;
54320: CALL_OW 521
// enable ( mpLose ) ;
54324: LD_INT 102
54326: ENABLE_MARKED
// end else
54327: GO 54490
// begin canWin := true ;
54329: LD_ADDR_VAR 0 2
54333: PUSH
54334: LD_INT 1
54336: ST_TO_ADDR
// for i := 1 to 8 do
54337: LD_ADDR_VAR 0 1
54341: PUSH
54342: DOUBLE
54343: LD_INT 1
54345: DEC
54346: ST_TO_ADDR
54347: LD_INT 8
54349: PUSH
54350: FOR_TO
54351: IFFALSE 54476
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54353: LD_EXP 5
54357: PUSH
54358: LD_VAR 0 1
54362: ARRAY
54363: IFFALSE 54376
54365: PUSH
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 108
54375: AND
54376: IFFALSE 54390
54378: PUSH
54379: LD_VAR 0 1
54383: PUSH
54384: LD_OWVAR 2
54388: NONEQUAL
54389: AND
54390: IFFALSE 54474
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54392: LD_EXP 6
54396: PUSH
54397: LD_VAR 0 1
54401: ARRAY
54402: NOT
54403: IFTRUE 54451
54405: PUSH
54406: LD_EXP 6
54410: PUSH
54411: LD_VAR 0 1
54415: ARRAY
54416: PUSH
54417: LD_EXP 6
54421: PUSH
54422: LD_OWVAR 2
54426: ARRAY
54427: NONEQUAL
54428: IFFALSE 54450
54430: PUSH
54431: LD_OWVAR 2
54435: PPUSH
54436: LD_VAR 0 1
54440: PPUSH
54441: CALL_OW 81
54445: PUSH
54446: LD_INT 1
54448: NONEQUAL
54449: AND
54450: OR
54451: IFFALSE 54474
// if HasPower ( i ) then
54453: LD_VAR 0 1
54457: PPUSH
54458: CALL 54535 0 1
54462: IFFALSE 54474
// begin canWin := false ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_INT 0
54471: ST_TO_ADDR
// break ;
54472: GO 54476
// end ;
54474: GO 54350
54476: POP
54477: POP
// if canWin then
54478: LD_VAR 0 2
54482: IFFALSE 54489
// enable ( mpWin ) else
54484: LD_INT 101
54486: ENABLE_MARKED
54487: GO 54490
// enable ;
54489: ENABLE
// end ; end ;
54490: PPOPN 2
54492: END
// function CanWinLoose ; begin
54493: LD_INT 0
54495: PPUSH
// result := true ;
54496: LD_ADDR_VAR 0 1
54500: PUSH
54501: LD_INT 1
54503: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54504: CALL_OW 531
54508: IFFALSE 54520
54510: PUSH
54511: CALL_OW 519
54515: PUSH
54516: LD_INT 1
54518: GREATER
54519: AND
54520: IFFALSE 54530
// result := false ;
54522: LD_ADDR_VAR 0 1
54526: PUSH
54527: LD_INT 0
54529: ST_TO_ADDR
// end ;
54530: LD_VAR 0 1
54534: RET
// function HasPower ( i ) ; begin
54535: LD_INT 0
54537: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54538: LD_ADDR_VAR 0 2
54542: PUSH
54543: LD_INT 22
54545: PUSH
54546: LD_VAR 0 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 21
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 33
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 33
54580: PUSH
54581: LD_INT 5
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PPUSH
54598: CALL_OW 69
54602: ST_TO_ADDR
// end ; end_of_file
54603: LD_VAR 0 2
54607: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54608: LD_EXP 37
54612: IFFALSE 54655
54614: GO 54616
54616: DISABLE
54617: LD_INT 0
54619: PPUSH
// begin for i := 1 to 8 do
54620: LD_ADDR_VAR 0 1
54624: PUSH
54625: DOUBLE
54626: LD_INT 1
54628: DEC
54629: ST_TO_ADDR
54630: LD_INT 8
54632: PUSH
54633: FOR_TO
54634: IFFALSE 54653
// SetRestrict ( b_depot , i , state_disabled ) ;
54636: LD_INT 0
54638: PPUSH
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_INT 0
54646: PPUSH
54647: CALL_OW 324
54651: GO 54633
54653: POP
54654: POP
// end ;
54655: PPOPN 1
54657: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54658: LD_EXP 37
54662: IFFALSE 54670
54664: PUSH
54665: CALL 54880 0 0
54669: AND
54670: IFFALSE 54678
54672: PUSH
54673: LD_OWVAR 4
54677: AND
54678: IFFALSE 54877
54680: GO 54682
54682: DISABLE
54683: LD_INT 0
54685: PPUSH
54686: PPUSH
// begin canWin := false ;
54687: LD_ADDR_VAR 0 2
54691: PUSH
54692: LD_INT 0
54694: ST_TO_ADDR
// if not HasPower ( your_side ) then
54695: LD_OWVAR 2
54699: PPUSH
54700: CALL 54922 0 1
54704: NOT
54705: IFFALSE 54716
// begin Multiplayer_Loose_Message ;
54707: CALL_OW 521
// enable ( mpLose ) ;
54711: LD_INT 102
54713: ENABLE_MARKED
// end else
54714: GO 54877
// begin canWin := true ;
54716: LD_ADDR_VAR 0 2
54720: PUSH
54721: LD_INT 1
54723: ST_TO_ADDR
// for i := 1 to 8 do
54724: LD_ADDR_VAR 0 1
54728: PUSH
54729: DOUBLE
54730: LD_INT 1
54732: DEC
54733: ST_TO_ADDR
54734: LD_INT 8
54736: PUSH
54737: FOR_TO
54738: IFFALSE 54863
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54740: LD_EXP 5
54744: PUSH
54745: LD_VAR 0 1
54749: ARRAY
54750: IFFALSE 54763
54752: PUSH
54753: LD_VAR 0 1
54757: PPUSH
54758: CALL_OW 108
54762: AND
54763: IFFALSE 54777
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: LD_OWVAR 2
54775: NONEQUAL
54776: AND
54777: IFFALSE 54861
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54779: LD_EXP 6
54783: PUSH
54784: LD_VAR 0 1
54788: ARRAY
54789: NOT
54790: IFTRUE 54838
54792: PUSH
54793: LD_EXP 6
54797: PUSH
54798: LD_VAR 0 1
54802: ARRAY
54803: PUSH
54804: LD_EXP 6
54808: PUSH
54809: LD_OWVAR 2
54813: ARRAY
54814: NONEQUAL
54815: IFFALSE 54837
54817: PUSH
54818: LD_OWVAR 2
54822: PPUSH
54823: LD_VAR 0 1
54827: PPUSH
54828: CALL_OW 81
54832: PUSH
54833: LD_INT 1
54835: NONEQUAL
54836: AND
54837: OR
54838: IFFALSE 54861
// if HasPower ( i ) then
54840: LD_VAR 0 1
54844: PPUSH
54845: CALL 54922 0 1
54849: IFFALSE 54861
// begin canWin := false ;
54851: LD_ADDR_VAR 0 2
54855: PUSH
54856: LD_INT 0
54858: ST_TO_ADDR
// break ;
54859: GO 54863
// end ;
54861: GO 54737
54863: POP
54864: POP
// if canWin then
54865: LD_VAR 0 2
54869: IFFALSE 54876
// enable ( mpWin ) else
54871: LD_INT 101
54873: ENABLE_MARKED
54874: GO 54877
// enable ;
54876: ENABLE
// end ; end ;
54877: PPOPN 2
54879: END
// function CanWinLoose ; begin
54880: LD_INT 0
54882: PPUSH
// result := true ;
54883: LD_ADDR_VAR 0 1
54887: PUSH
54888: LD_INT 1
54890: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54891: CALL_OW 531
54895: IFFALSE 54907
54897: PUSH
54898: CALL_OW 519
54902: PUSH
54903: LD_INT 1
54905: GREATER
54906: AND
54907: IFFALSE 54917
// result := false ;
54909: LD_ADDR_VAR 0 1
54913: PUSH
54914: LD_INT 0
54916: ST_TO_ADDR
// end ;
54917: LD_VAR 0 1
54921: RET
// function HasPower ( i ) ; begin
54922: LD_INT 0
54924: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54925: LD_INT 22
54927: PUSH
54928: LD_VAR 0 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 30
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 30
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PPUSH
54969: CALL_OW 69
54973: NOT
54974: IFFALSE 54978
// exit ;
54976: GO 55043
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54978: LD_ADDR_VAR 0 2
54982: PUSH
54983: LD_INT 22
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 21
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 33
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 33
55020: PUSH
55021: LD_INT 5
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PPUSH
55038: CALL_OW 69
55042: ST_TO_ADDR
// end ; end_of_file
55043: LD_VAR 0 2
55047: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55048: LD_EXP 37
55052: IFFALSE 55391
55054: GO 55056
55056: DISABLE
55057: LD_INT 0
55059: PPUSH
55060: PPUSH
55061: PPUSH
// begin mpKingPoints := [ ] ;
55062: LD_ADDR_EXP 48
55066: PUSH
55067: EMPTY
55068: ST_TO_ADDR
// if mpTeamGame then
55069: LD_EXP 9
55073: IFFALSE 55127
// begin for i := 1 to Count ( mpTeams ) do
55075: LD_ADDR_VAR 0 1
55079: PUSH
55080: DOUBLE
55081: LD_INT 1
55083: DEC
55084: ST_TO_ADDR
55085: LD_EXP 8
55089: PPUSH
55090: CALL 5182 0 1
55094: PUSH
55095: FOR_TO
55096: IFFALSE 55123
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55098: LD_ADDR_EXP 48
55102: PUSH
55103: LD_EXP 48
55107: PPUSH
55108: LD_VAR 0 1
55112: PPUSH
55113: LD_INT 0
55115: PPUSH
55116: CALL_OW 1
55120: ST_TO_ADDR
55121: GO 55095
55123: POP
55124: POP
// end else
55125: GO 55170
// begin for i := 1 to 8 do
55127: LD_ADDR_VAR 0 1
55131: PUSH
55132: DOUBLE
55133: LD_INT 1
55135: DEC
55136: ST_TO_ADDR
55137: LD_INT 8
55139: PUSH
55140: FOR_TO
55141: IFFALSE 55168
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55143: LD_ADDR_EXP 48
55147: PUSH
55148: LD_EXP 48
55152: PPUSH
55153: LD_VAR 0 1
55157: PPUSH
55158: LD_INT 0
55160: PPUSH
55161: CALL_OW 1
55165: ST_TO_ADDR
55166: GO 55140
55168: POP
55169: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_INT 73
55177: PPUSH
55178: LD_INT 0
55180: PPUSH
55181: CALL_OW 517
55185: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55186: LD_ADDR_VAR 0 1
55190: PUSH
55191: DOUBLE
55192: LD_INT 1
55194: DEC
55195: ST_TO_ADDR
55196: LD_VAR 0 3
55200: PUSH
55201: LD_INT 1
55203: ARRAY
55204: PUSH
55205: FOR_TO
55206: IFFALSE 55273
// for j := 1 to 8 do
55208: LD_ADDR_VAR 0 2
55212: PUSH
55213: DOUBLE
55214: LD_INT 1
55216: DEC
55217: ST_TO_ADDR
55218: LD_INT 8
55220: PUSH
55221: FOR_TO
55222: IFFALSE 55269
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55224: LD_VAR 0 3
55228: PUSH
55229: LD_INT 1
55231: ARRAY
55232: PUSH
55233: LD_VAR 0 1
55237: ARRAY
55238: PPUSH
55239: LD_VAR 0 3
55243: PUSH
55244: LD_INT 2
55246: ARRAY
55247: PUSH
55248: LD_VAR 0 1
55252: ARRAY
55253: PPUSH
55254: LD_VAR 0 2
55258: PPUSH
55259: LD_INT 12
55261: NEG
55262: PPUSH
55263: CALL_OW 330
55267: GO 55221
55269: POP
55270: POP
55271: GO 55205
55273: POP
55274: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55275: LD_EXP 32
55279: PPUSH
55280: LD_INT 1
55282: PPUSH
55283: CALL_OW 424
// UpdateCounter ;
55287: CALL 55895 0 0
// repeat wait ( 0 0$1 ) ;
55291: LD_INT 35
55293: PPUSH
55294: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55298: LD_ADDR_VAR 0 3
55302: PUSH
55303: LD_EXP 32
55307: PPUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 57
55313: PUSH
55314: EMPTY
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 50
55323: PUSH
55324: EMPTY
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 30
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 30
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: PPUSH
55360: CALL_OW 70
55364: ST_TO_ADDR
// if not tmp then
55365: LD_VAR 0 3
55369: NOT
55370: IFFALSE 55374
// continue ;
55372: GO 55291
// AddPoints ( tmp ) ;
55374: LD_VAR 0 3
55378: PPUSH
55379: CALL 55573 0 1
// UpdateCounter ;
55383: CALL 55895 0 0
// until false ;
55387: LD_INT 0
55389: IFFALSE 55291
// end ;
55391: PPOPN 3
55393: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55394: LD_EXP 37
55398: IFFALSE 55406
55400: PUSH
55401: LD_EXP 35
55405: AND
55406: IFFALSE 55570
55408: GO 55410
55410: DISABLE
55411: LD_INT 0
55413: PPUSH
55414: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_INT 73
55422: PPUSH
55423: LD_INT 0
55425: PPUSH
55426: CALL_OW 517
55430: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55431: LD_ADDR_VAR 0 1
55435: PUSH
55436: DOUBLE
55437: LD_INT 1
55439: DEC
55440: ST_TO_ADDR
55441: LD_VAR 0 2
55445: PUSH
55446: LD_INT 1
55448: ARRAY
55449: PUSH
55450: FOR_TO
55451: IFFALSE 55492
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55453: LD_VAR 0 2
55457: PUSH
55458: LD_INT 1
55460: ARRAY
55461: PUSH
55462: LD_VAR 0 1
55466: ARRAY
55467: PPUSH
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 2
55475: ARRAY
55476: PUSH
55477: LD_VAR 0 1
55481: ARRAY
55482: PPUSH
55483: LD_INT 125
55485: PPUSH
55486: CALL_OW 495
55490: GO 55450
55492: POP
55493: POP
// repeat wait ( mpEmissions ) ;
55494: LD_EXP 35
55498: PPUSH
55499: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55503: LD_ADDR_VAR 0 1
55507: PUSH
55508: DOUBLE
55509: LD_INT 1
55511: DEC
55512: ST_TO_ADDR
55513: LD_VAR 0 2
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: FOR_TO
55523: IFFALSE 55564
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55525: LD_VAR 0 2
55529: PUSH
55530: LD_INT 1
55532: ARRAY
55533: PUSH
55534: LD_VAR 0 1
55538: ARRAY
55539: PPUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 2
55547: ARRAY
55548: PUSH
55549: LD_VAR 0 1
55553: ARRAY
55554: PPUSH
55555: LD_INT 15
55557: PPUSH
55558: CALL_OW 495
55562: GO 55522
55564: POP
55565: POP
// until false ;
55566: LD_INT 0
55568: IFFALSE 55494
// end ;
55570: PPOPN 2
55572: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55573: LD_INT 0
55575: PPUSH
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
// if mpTeamGame then
55580: LD_EXP 9
55584: IFFALSE 55781
// begin first := depots [ 1 ] ;
55586: LD_ADDR_VAR 0 4
55590: PUSH
55591: LD_VAR 0 1
55595: PUSH
55596: LD_INT 1
55598: ARRAY
55599: ST_TO_ADDR
// side := GetSide ( first ) ;
55600: LD_ADDR_VAR 0 6
55604: PUSH
55605: LD_VAR 0 4
55609: PPUSH
55610: CALL_OW 255
55614: ST_TO_ADDR
// for i := 1 to mpTeams do
55615: LD_ADDR_VAR 0 3
55619: PUSH
55620: DOUBLE
55621: LD_INT 1
55623: DEC
55624: ST_TO_ADDR
55625: LD_EXP 8
55629: PUSH
55630: FOR_TO
55631: IFFALSE 55665
// if side in mpTeams [ i ] then
55633: LD_VAR 0 6
55637: PUSH
55638: LD_EXP 8
55642: PUSH
55643: LD_VAR 0 3
55647: ARRAY
55648: IN
55649: IFFALSE 55663
// begin team := i ;
55651: LD_ADDR_VAR 0 5
55655: PUSH
55656: LD_VAR 0 3
55660: ST_TO_ADDR
// break ;
55661: GO 55665
// end ;
55663: GO 55630
55665: POP
55666: POP
// if not team then
55667: LD_VAR 0 5
55671: NOT
55672: IFFALSE 55676
// exit ;
55674: GO 55890
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55676: LD_EXP 32
55680: PPUSH
55681: LD_INT 81
55683: PUSH
55684: LD_VAR 0 6
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PPUSH
55693: CALL_OW 70
55697: IFFALSE 55701
// exit ;
55699: GO 55890
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55701: LD_ADDR_EXP 48
55705: PUSH
55706: LD_EXP 48
55710: PPUSH
55711: LD_VAR 0 5
55715: PPUSH
55716: LD_EXP 48
55720: PUSH
55721: LD_VAR 0 5
55725: ARRAY
55726: PUSH
55727: LD_INT 1
55729: PLUS
55730: PPUSH
55731: CALL_OW 1
55735: ST_TO_ADDR
// for i in mpTeams [ team ] do
55736: LD_ADDR_VAR 0 3
55740: PUSH
55741: LD_EXP 8
55745: PUSH
55746: LD_VAR 0 5
55750: ARRAY
55751: PUSH
55752: FOR_IN
55753: IFFALSE 55777
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55755: LD_VAR 0 3
55759: PPUSH
55760: LD_EXP 48
55764: PUSH
55765: LD_VAR 0 5
55769: ARRAY
55770: PPUSH
55771: CALL_OW 506
55775: GO 55752
55777: POP
55778: POP
// end else
55779: GO 55890
// begin first := depots [ 1 ] ;
55781: LD_ADDR_VAR 0 4
55785: PUSH
55786: LD_VAR 0 1
55790: PUSH
55791: LD_INT 1
55793: ARRAY
55794: ST_TO_ADDR
// side := GetSide ( first ) ;
55795: LD_ADDR_VAR 0 6
55799: PUSH
55800: LD_VAR 0 4
55804: PPUSH
55805: CALL_OW 255
55809: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55810: LD_EXP 32
55814: PPUSH
55815: LD_INT 81
55817: PUSH
55818: LD_VAR 0 6
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PPUSH
55827: CALL_OW 70
55831: IFFALSE 55835
// exit ;
55833: GO 55890
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55835: LD_ADDR_EXP 48
55839: PUSH
55840: LD_EXP 48
55844: PPUSH
55845: LD_VAR 0 6
55849: PPUSH
55850: LD_EXP 48
55854: PUSH
55855: LD_VAR 0 6
55859: ARRAY
55860: PUSH
55861: LD_INT 1
55863: PLUS
55864: PPUSH
55865: CALL_OW 1
55869: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55870: LD_VAR 0 6
55874: PPUSH
55875: LD_EXP 48
55879: PUSH
55880: LD_VAR 0 6
55884: ARRAY
55885: PPUSH
55886: CALL_OW 506
// end ; end ;
55890: LD_VAR 0 2
55894: RET
// function UpdateCounter ; var i ; begin
55895: LD_INT 0
55897: PPUSH
55898: PPUSH
// result := [ ] ;
55899: LD_ADDR_VAR 0 1
55903: PUSH
55904: EMPTY
55905: ST_TO_ADDR
// if mpTeamGame then
55906: LD_EXP 9
55910: IFFALSE 55977
// begin for i := 1 to mpTeams do
55912: LD_ADDR_VAR 0 2
55916: PUSH
55917: DOUBLE
55918: LD_INT 1
55920: DEC
55921: ST_TO_ADDR
55922: LD_EXP 8
55926: PUSH
55927: FOR_TO
55928: IFFALSE 55973
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55930: LD_ADDR_VAR 0 1
55934: PUSH
55935: LD_VAR 0 1
55939: PUSH
55940: LD_STRING #KingoftheHill-Team
55942: PUSH
55943: LD_VAR 0 2
55947: PUSH
55948: LD_EXP 48
55952: PUSH
55953: LD_VAR 0 2
55957: ARRAY
55958: PUSH
55959: LD_EXP 33
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: ADD
55970: ST_TO_ADDR
55971: GO 55927
55973: POP
55974: POP
// end else
55975: GO 56050
// begin for i := 1 to 8 do
55977: LD_ADDR_VAR 0 2
55981: PUSH
55982: DOUBLE
55983: LD_INT 1
55985: DEC
55986: ST_TO_ADDR
55987: LD_INT 8
55989: PUSH
55990: FOR_TO
55991: IFFALSE 56048
// if mpSidePositions [ i ] then
55993: LD_EXP 5
55997: PUSH
55998: LD_VAR 0 2
56002: ARRAY
56003: IFFALSE 56046
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56005: LD_ADDR_VAR 0 1
56009: PUSH
56010: LD_VAR 0 1
56014: PUSH
56015: LD_STRING #KingoftheHill-Player
56017: PUSH
56018: LD_VAR 0 2
56022: PUSH
56023: LD_EXP 48
56027: PUSH
56028: LD_VAR 0 2
56032: ARRAY
56033: PUSH
56034: LD_EXP 33
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: ADD
56045: ST_TO_ADDR
56046: GO 55990
56048: POP
56049: POP
// end ; mpDisplayStrings := result ;
56050: LD_ADDR_EXP 36
56054: PUSH
56055: LD_VAR 0 1
56059: ST_TO_ADDR
// end ;
56060: LD_VAR 0 1
56064: RET
// export function HowMuchPointsKing ( side ) ; begin
56065: LD_INT 0
56067: PPUSH
// result := HowMuchPoints ( side ) ;
56068: LD_ADDR_VAR 0 2
56072: PUSH
56073: LD_VAR 0 1
56077: PPUSH
56078: CALL 56088 0 1
56082: ST_TO_ADDR
// end ;
56083: LD_VAR 0 2
56087: RET
// function HowMuchPoints ( side ) ; var i ; begin
56088: LD_INT 0
56090: PPUSH
56091: PPUSH
// if mpTeamGame then
56092: LD_EXP 9
56096: IFFALSE 56165
// begin for i := 1 to Count ( mpTeams ) do
56098: LD_ADDR_VAR 0 3
56102: PUSH
56103: DOUBLE
56104: LD_INT 1
56106: DEC
56107: ST_TO_ADDR
56108: LD_EXP 8
56112: PPUSH
56113: CALL 5182 0 1
56117: PUSH
56118: FOR_TO
56119: IFFALSE 56161
// begin if side in mpTeams [ i ] then
56121: LD_VAR 0 1
56125: PUSH
56126: LD_EXP 8
56130: PUSH
56131: LD_VAR 0 3
56135: ARRAY
56136: IN
56137: IFFALSE 56159
// begin result := mpKingPoints [ i ] ;
56139: LD_ADDR_VAR 0 2
56143: PUSH
56144: LD_EXP 48
56148: PUSH
56149: LD_VAR 0 3
56153: ARRAY
56154: ST_TO_ADDR
// exit ;
56155: POP
56156: POP
56157: GO 56181
// end ; end ;
56159: GO 56118
56161: POP
56162: POP
// end else
56163: GO 56181
// result := mpKingPoints [ side ] ;
56165: LD_ADDR_VAR 0 2
56169: PUSH
56170: LD_EXP 48
56174: PUSH
56175: LD_VAR 0 1
56179: ARRAY
56180: ST_TO_ADDR
// end ;
56181: LD_VAR 0 2
56185: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56186: LD_EXP 37
56190: IFFALSE 56198
56192: PUSH
56193: CALL 56610 0 0
56197: AND
56198: IFFALSE 56206
56200: PUSH
56201: LD_OWVAR 4
56205: AND
56206: IFFALSE 56459
56208: GO 56210
56210: DISABLE
56211: LD_INT 0
56213: PPUSH
56214: PPUSH
// begin canWin := false ;
56215: LD_ADDR_VAR 0 2
56219: PUSH
56220: LD_INT 0
56222: ST_TO_ADDR
// if not HasPower ( your_side ) then
56223: LD_OWVAR 2
56227: PPUSH
56228: CALL 56652 0 1
56232: NOT
56233: IFFALSE 56244
// begin Multiplayer_Loose_Message ;
56235: CALL_OW 521
// enable ( mpLose ) ;
56239: LD_INT 102
56241: ENABLE_MARKED
// end else
56242: GO 56459
// begin if not EnemiesInGame then
56244: CALL 56462 0 0
56248: NOT
56249: IFFALSE 56256
// begin enable ( mpWin ) ;
56251: LD_INT 101
56253: ENABLE_MARKED
// exit ;
56254: GO 56459
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56256: LD_ADDR_VAR 0 2
56260: PUSH
56261: LD_OWVAR 2
56265: PPUSH
56266: CALL 56088 0 1
56270: PUSH
56271: LD_EXP 33
56275: GREATEREQUAL
56276: IFFALSE 56289
56278: PUSH
56279: LD_OWVAR 2
56283: PPUSH
56284: CALL 56652 0 1
56288: AND
56289: ST_TO_ADDR
// for i := 1 to 8 do
56290: LD_ADDR_VAR 0 1
56294: PUSH
56295: DOUBLE
56296: LD_INT 1
56298: DEC
56299: ST_TO_ADDR
56300: LD_INT 8
56302: PUSH
56303: FOR_TO
56304: IFFALSE 56445
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56306: LD_EXP 5
56310: PUSH
56311: LD_VAR 0 1
56315: ARRAY
56316: IFFALSE 56329
56318: PUSH
56319: LD_VAR 0 1
56323: PPUSH
56324: CALL_OW 108
56328: AND
56329: IFFALSE 56343
56331: PUSH
56332: LD_VAR 0 1
56336: PUSH
56337: LD_OWVAR 2
56341: NONEQUAL
56342: AND
56343: IFFALSE 56443
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56345: LD_EXP 6
56349: PUSH
56350: LD_VAR 0 1
56354: ARRAY
56355: NOT
56356: IFTRUE 56404
56358: PUSH
56359: LD_EXP 6
56363: PUSH
56364: LD_VAR 0 1
56368: ARRAY
56369: PUSH
56370: LD_EXP 6
56374: PUSH
56375: LD_OWVAR 2
56379: ARRAY
56380: NONEQUAL
56381: IFFALSE 56403
56383: PUSH
56384: LD_OWVAR 2
56388: PPUSH
56389: LD_VAR 0 1
56393: PPUSH
56394: CALL_OW 81
56398: PUSH
56399: LD_INT 1
56401: NONEQUAL
56402: AND
56403: OR
56404: IFFALSE 56443
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL 56088 0 1
56415: PUSH
56416: LD_EXP 33
56420: GREATEREQUAL
56421: IFFALSE 56434
56423: PUSH
56424: LD_VAR 0 1
56428: PPUSH
56429: CALL 56652 0 1
56433: AND
56434: IFFALSE 56443
// begin enable ( mpLose ) ;
56436: LD_INT 102
56438: ENABLE_MARKED
// exit ;
56439: POP
56440: POP
56441: GO 56459
// end ;
56443: GO 56303
56445: POP
56446: POP
// if canWin then
56447: LD_VAR 0 2
56451: IFFALSE 56458
// enable ( mpWin ) else
56453: LD_INT 101
56455: ENABLE_MARKED
56456: GO 56459
// enable ;
56458: ENABLE
// end ; end ;
56459: PPOPN 2
56461: END
// function EnemiesInGame ; var i ; begin
56462: LD_INT 0
56464: PPUSH
56465: PPUSH
// result := false ;
56466: LD_ADDR_VAR 0 1
56470: PUSH
56471: LD_INT 0
56473: ST_TO_ADDR
// for i := 1 to 8 do
56474: LD_ADDR_VAR 0 2
56478: PUSH
56479: DOUBLE
56480: LD_INT 1
56482: DEC
56483: ST_TO_ADDR
56484: LD_INT 8
56486: PUSH
56487: FOR_TO
56488: IFFALSE 56603
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56490: LD_VAR 0 2
56494: PUSH
56495: LD_OWVAR 2
56499: NONEQUAL
56500: IFFALSE 56513
56502: PUSH
56503: LD_VAR 0 2
56507: PPUSH
56508: CALL 56652 0 1
56512: AND
56513: IFFALSE 56526
56515: PUSH
56516: LD_VAR 0 2
56520: PPUSH
56521: CALL_OW 108
56525: AND
56526: IFFALSE 56601
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56528: LD_EXP 6
56532: PUSH
56533: LD_VAR 0 2
56537: ARRAY
56538: NOT
56539: IFTRUE 56587
56541: PUSH
56542: LD_EXP 6
56546: PUSH
56547: LD_VAR 0 2
56551: ARRAY
56552: PUSH
56553: LD_EXP 6
56557: PUSH
56558: LD_OWVAR 2
56562: ARRAY
56563: NONEQUAL
56564: IFFALSE 56586
56566: PUSH
56567: LD_OWVAR 2
56571: PPUSH
56572: LD_VAR 0 2
56576: PPUSH
56577: CALL_OW 81
56581: PUSH
56582: LD_INT 1
56584: NONEQUAL
56585: AND
56586: OR
56587: IFFALSE 56601
// begin result := true ;
56589: LD_ADDR_VAR 0 1
56593: PUSH
56594: LD_INT 1
56596: ST_TO_ADDR
// exit ;
56597: POP
56598: POP
56599: GO 56605
// end ;
56601: GO 56487
56603: POP
56604: POP
// end ;
56605: LD_VAR 0 1
56609: RET
// function CanWinLoose ; begin
56610: LD_INT 0
56612: PPUSH
// result := true ;
56613: LD_ADDR_VAR 0 1
56617: PUSH
56618: LD_INT 1
56620: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56621: CALL_OW 531
56625: IFFALSE 56637
56627: PUSH
56628: CALL_OW 519
56632: PUSH
56633: LD_INT 1
56635: GREATER
56636: AND
56637: IFFALSE 56647
// result := false ;
56639: LD_ADDR_VAR 0 1
56643: PUSH
56644: LD_INT 0
56646: ST_TO_ADDR
// end ;
56647: LD_VAR 0 1
56651: RET
// function HasPower ( i ) ; begin
56652: LD_INT 0
56654: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56655: LD_ADDR_VAR 0 2
56659: PUSH
56660: LD_INT 22
56662: PUSH
56663: LD_VAR 0 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 21
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 33
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 33
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PPUSH
56715: CALL_OW 69
56719: ST_TO_ADDR
// end ; end_of_file end_of_file
56720: LD_VAR 0 2
56724: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56725: LD_VAR 0 1
56729: PUSH
56730: LD_INT 200
56732: DOUBLE
56733: GREATEREQUAL
56734: IFFALSE 56742
56736: LD_INT 299
56738: DOUBLE
56739: LESSEQUAL
56740: IFTRUE 56744
56742: GO 56776
56744: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56745: LD_VAR 0 1
56749: PPUSH
56750: LD_VAR 0 2
56754: PPUSH
56755: LD_VAR 0 3
56759: PPUSH
56760: LD_VAR 0 4
56764: PPUSH
56765: LD_VAR 0 5
56769: PPUSH
56770: CALL 57638 0 5
56774: GO 56853
56776: LD_INT 300
56778: DOUBLE
56779: GREATEREQUAL
56780: IFFALSE 56788
56782: LD_INT 399
56784: DOUBLE
56785: LESSEQUAL
56786: IFTRUE 56790
56788: GO 56852
56790: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56791: LD_VAR 0 1
56795: PPUSH
56796: LD_VAR 0 2
56800: PPUSH
56801: LD_VAR 0 3
56805: PPUSH
56806: LD_VAR 0 4
56810: PPUSH
56811: LD_VAR 0 5
56815: PPUSH
56816: LD_VAR 0 6
56820: PPUSH
56821: LD_VAR 0 7
56825: PPUSH
56826: LD_VAR 0 8
56830: PPUSH
56831: LD_VAR 0 9
56835: PPUSH
56836: LD_VAR 0 10
56840: PPUSH
56841: LD_VAR 0 11
56845: PPUSH
56846: CALL 64066 0 11
56850: GO 56853
56852: POP
// end ;
56853: PPOPN 11
56855: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56856: LD_VAR 0 1
56860: PPUSH
56861: LD_VAR 0 2
56865: PPUSH
56866: LD_VAR 0 3
56870: PPUSH
56871: LD_VAR 0 4
56875: PPUSH
56876: LD_VAR 0 5
56880: PPUSH
56881: CALL 56938 0 5
// end ; end_of_file
56885: PPOPN 5
56887: END
// export function SOS_UnitDestroyed ( un ) ; begin
56888: LD_INT 0
56890: PPUSH
// ComRadiation ( un ) ;
56891: LD_VAR 0 1
56895: PPUSH
56896: CALL 58058 0 1
// end ;
56900: LD_VAR 0 2
56904: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56905: LD_INT 0
56907: PPUSH
// ComRadiation ( un ) ;
56908: LD_VAR 0 1
56912: PPUSH
56913: CALL 58058 0 1
// end ;
56917: LD_VAR 0 2
56921: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56922: LD_INT 0
56924: PPUSH
// end ;
56925: LD_VAR 0 4
56929: RET
// export function SOS_Command ( cmd ) ; begin
56930: LD_INT 0
56932: PPUSH
// end ;
56933: LD_VAR 0 2
56937: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56938: LD_INT 0
56940: PPUSH
// end ;
56941: LD_VAR 0 6
56945: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56946: LD_INT 0
56948: PPUSH
56949: PPUSH
56950: PPUSH
56951: PPUSH
56952: PPUSH
// if not vehicle or not factory then
56953: LD_VAR 0 1
56957: NOT
56958: IFTRUE 56967
56960: PUSH
56961: LD_VAR 0 2
56965: NOT
56966: OR
56967: IFFALSE 56971
// exit ;
56969: GO 57633
// weapon := GetWeapon ( vehicle ) ;
56971: LD_ADDR_VAR 0 7
56975: PUSH
56976: LD_VAR 0 1
56980: PPUSH
56981: CALL_OW 264
56985: ST_TO_ADDR
// if weapon = ar_miner then
56986: LD_VAR 0 7
56990: PUSH
56991: LD_INT 81
56993: EQUAL
56994: IFFALSE 57051
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56996: LD_ADDR_EXP 56
57000: PUSH
57001: LD_EXP 56
57005: PPUSH
57006: LD_EXP 56
57010: PUSH
57011: LD_INT 1
57013: PLUS
57014: PPUSH
57015: LD_VAR 0 1
57019: PPUSH
57020: CALL_OW 1
57024: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57025: LD_ADDR_EXP 57
57029: PUSH
57030: LD_EXP 57
57034: PPUSH
57035: LD_EXP 57
57039: PUSH
57040: LD_INT 1
57042: PLUS
57043: PPUSH
57044: EMPTY
57045: PPUSH
57046: CALL_OW 1
57050: ST_TO_ADDR
// end ; if not factoryWaypoints then
57051: LD_EXP 59
57055: NOT
57056: IFFALSE 57060
// exit ;
57058: GO 57633
// for i := 1 to Count ( factoryWaypoints ) do
57060: LD_ADDR_VAR 0 4
57064: PUSH
57065: DOUBLE
57066: LD_INT 1
57068: DEC
57069: ST_TO_ADDR
57070: LD_EXP 59
57074: PPUSH
57075: CALL 5182 0 1
57079: PUSH
57080: FOR_TO
57081: IFFALSE 57631
// if factoryWaypoints [ i ] [ 2 ] = factory then
57083: LD_EXP 59
57087: PUSH
57088: LD_VAR 0 4
57092: ARRAY
57093: PUSH
57094: LD_INT 2
57096: ARRAY
57097: PUSH
57098: LD_VAR 0 2
57102: EQUAL
57103: IFFALSE 57629
// begin if GetControl ( vehicle ) = control_manual then
57105: LD_VAR 0 1
57109: PPUSH
57110: CALL_OW 263
57114: PUSH
57115: LD_INT 1
57117: EQUAL
57118: IFFALSE 57482
// begin driver := IsDrivenBy ( vehicle ) ;
57120: LD_ADDR_VAR 0 5
57124: PUSH
57125: LD_VAR 0 1
57129: PPUSH
57130: CALL_OW 311
57134: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57135: LD_VAR 0 5
57139: PUSH
57140: LD_EXP 60
57144: IN
57145: IFTRUE 57159
57147: PUSH
57148: LD_VAR 0 1
57152: PUSH
57153: LD_EXP 60
57157: IN
57158: OR
57159: IFFALSE 57165
// exit ;
57161: POP
57162: POP
57163: GO 57633
// if not HasTask ( driver ) then
57165: LD_VAR 0 5
57169: PPUSH
57170: CALL_OW 314
57174: NOT
57175: IFFALSE 57480
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57177: LD_ADDR_EXP 60
57181: PUSH
57182: LD_EXP 60
57186: PPUSH
57187: LD_VAR 0 5
57191: PPUSH
57192: CALL 41158 0 2
57196: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57197: LD_ADDR_EXP 60
57201: PUSH
57202: LD_EXP 60
57206: PPUSH
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL 41158 0 2
57216: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57217: LD_ADDR_VAR 0 6
57221: PUSH
57222: LD_EXP 59
57226: PUSH
57227: LD_VAR 0 4
57231: ARRAY
57232: PUSH
57233: LD_INT 3
57235: ARRAY
57236: PPUSH
57237: LD_EXP 59
57241: PUSH
57242: LD_VAR 0 4
57246: ARRAY
57247: PUSH
57248: LD_INT 4
57250: ARRAY
57251: PPUSH
57252: CALL_OW 428
57256: ST_TO_ADDR
// if hex then
57257: LD_VAR 0 6
57261: IFFALSE 57279
// ComMoveUnit ( driver , hex ) else
57263: LD_VAR 0 5
57267: PPUSH
57268: LD_VAR 0 6
57272: PPUSH
57273: CALL_OW 112
57277: GO 57363
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57279: LD_VAR 0 1
57283: PPUSH
57284: LD_EXP 59
57288: PUSH
57289: LD_VAR 0 4
57293: ARRAY
57294: PUSH
57295: LD_INT 3
57297: ARRAY
57298: PPUSH
57299: LD_EXP 59
57303: PUSH
57304: LD_VAR 0 4
57308: ARRAY
57309: PUSH
57310: LD_INT 4
57312: ARRAY
57313: PPUSH
57314: CALL_OW 297
57318: PUSH
57319: LD_INT 0
57321: GREATER
57322: IFFALSE 57363
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57324: LD_VAR 0 5
57328: PPUSH
57329: LD_EXP 59
57333: PUSH
57334: LD_VAR 0 4
57338: ARRAY
57339: PUSH
57340: LD_INT 3
57342: ARRAY
57343: PPUSH
57344: LD_EXP 59
57348: PUSH
57349: LD_VAR 0 4
57353: ARRAY
57354: PUSH
57355: LD_INT 4
57357: ARRAY
57358: PPUSH
57359: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57363: LD_VAR 0 5
57367: PPUSH
57368: CALL_OW 181
// if Multiplayer then
57372: LD_OWVAR 4
57376: IFFALSE 57425
// begin repeat wait ( 10 ) ;
57378: LD_INT 10
57380: PPUSH
57381: CALL_OW 67
// until not IsInUnit ( driver ) ;
57385: LD_VAR 0 5
57389: PPUSH
57390: CALL_OW 310
57394: NOT
57395: IFFALSE 57378
// if not HasTask ( driver ) then
57397: LD_VAR 0 5
57401: PPUSH
57402: CALL_OW 314
57406: NOT
57407: IFFALSE 57423
// ComEnterUnit ( driver , factory ) ;
57409: LD_VAR 0 5
57413: PPUSH
57414: LD_VAR 0 2
57418: PPUSH
57419: CALL_OW 120
// end else
57423: GO 57439
// AddComEnterUnit ( driver , factory ) ;
57425: LD_VAR 0 5
57429: PPUSH
57430: LD_VAR 0 2
57434: PPUSH
57435: CALL_OW 180
// wait ( 0 0$1 ) ;
57439: LD_INT 35
57441: PPUSH
57442: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57446: LD_ADDR_EXP 60
57450: PUSH
57451: LD_EXP 60
57455: PUSH
57456: LD_VAR 0 5
57460: DIFF
57461: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57462: LD_ADDR_EXP 60
57466: PUSH
57467: LD_EXP 60
57471: PUSH
57472: LD_VAR 0 1
57476: DIFF
57477: ST_TO_ADDR
// break ;
57478: GO 57631
// end ; end else
57480: GO 57629
// if GetControl ( vehicle ) = control_remote then
57482: LD_VAR 0 1
57486: PPUSH
57487: CALL_OW 263
57491: PUSH
57492: LD_INT 2
57494: EQUAL
57495: IFFALSE 57581
// begin wait ( 0 0$2 ) ;
57497: LD_INT 70
57499: PPUSH
57500: CALL_OW 67
// repeat wait ( 10 ) ;
57504: LD_INT 10
57506: PPUSH
57507: CALL_OW 67
// Connect ( vehicle ) ;
57511: LD_VAR 0 1
57515: PPUSH
57516: CALL 11460 0 1
// until IsControledBy ( vehicle ) ;
57520: LD_VAR 0 1
57524: PPUSH
57525: CALL_OW 312
57529: IFFALSE 57504
// wait ( 10 ) ;
57531: LD_INT 10
57533: PPUSH
57534: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57538: LD_VAR 0 1
57542: PPUSH
57543: LD_EXP 59
57547: PUSH
57548: LD_VAR 0 4
57552: ARRAY
57553: PUSH
57554: LD_INT 3
57556: ARRAY
57557: PPUSH
57558: LD_EXP 59
57562: PUSH
57563: LD_VAR 0 4
57567: ARRAY
57568: PUSH
57569: LD_INT 4
57571: ARRAY
57572: PPUSH
57573: CALL_OW 111
// break ;
57577: GO 57631
// end else
57579: GO 57629
// begin wait ( 0 0$3 ) ;
57581: LD_INT 105
57583: PPUSH
57584: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_EXP 59
57597: PUSH
57598: LD_VAR 0 4
57602: ARRAY
57603: PUSH
57604: LD_INT 3
57606: ARRAY
57607: PPUSH
57608: LD_EXP 59
57612: PUSH
57613: LD_VAR 0 4
57617: ARRAY
57618: PUSH
57619: LD_INT 4
57621: ARRAY
57622: PPUSH
57623: CALL_OW 111
// break ;
57627: GO 57631
// end ; end ;
57629: GO 57080
57631: POP
57632: POP
// end ;
57633: LD_VAR 0 3
57637: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57638: LD_INT 0
57640: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57641: LD_VAR 0 1
57645: PUSH
57646: LD_INT 250
57648: EQUAL
57649: IFFALSE 57666
57651: PUSH
57652: LD_VAR 0 2
57656: PPUSH
57657: CALL_OW 264
57661: PUSH
57662: LD_INT 81
57664: EQUAL
57665: AND
57666: IFFALSE 57687
// MinerPlaceMine ( unit , x , y ) ;
57668: LD_VAR 0 2
57672: PPUSH
57673: LD_VAR 0 4
57677: PPUSH
57678: LD_VAR 0 5
57682: PPUSH
57683: CALL 61033 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57687: LD_VAR 0 1
57691: PUSH
57692: LD_INT 251
57694: EQUAL
57695: IFFALSE 57712
57697: PUSH
57698: LD_VAR 0 2
57702: PPUSH
57703: CALL_OW 264
57707: PUSH
57708: LD_INT 81
57710: EQUAL
57711: AND
57712: IFFALSE 57733
// MinerDetonateMine ( unit , x , y ) ;
57714: LD_VAR 0 2
57718: PPUSH
57719: LD_VAR 0 4
57723: PPUSH
57724: LD_VAR 0 5
57728: PPUSH
57729: CALL 61440 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57733: LD_VAR 0 1
57737: PUSH
57738: LD_INT 252
57740: EQUAL
57741: IFFALSE 57758
57743: PUSH
57744: LD_VAR 0 2
57748: PPUSH
57749: CALL_OW 264
57753: PUSH
57754: LD_INT 81
57756: EQUAL
57757: AND
57758: IFFALSE 57779
// MinerCreateMinefield ( unit , x , y ) ;
57760: LD_VAR 0 2
57764: PPUSH
57765: LD_VAR 0 4
57769: PPUSH
57770: LD_VAR 0 5
57774: PPUSH
57775: CALL 61672 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57779: LD_VAR 0 1
57783: PUSH
57784: LD_INT 253
57786: EQUAL
57787: IFFALSE 57804
57789: PUSH
57790: LD_VAR 0 2
57794: PPUSH
57795: CALL_OW 257
57799: PUSH
57800: LD_INT 5
57802: EQUAL
57803: AND
57804: IFFALSE 57825
// ComBinocular ( unit , x , y ) ;
57806: LD_VAR 0 2
57810: PPUSH
57811: LD_VAR 0 4
57815: PPUSH
57816: LD_VAR 0 5
57820: PPUSH
57821: CALL 62047 0 3
// if selectedUnit then
57825: LD_VAR 0 3
57829: IFFALSE 57889
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57831: LD_VAR 0 1
57835: PUSH
57836: LD_INT 254
57838: EQUAL
57839: IFFALSE 57856
57841: PUSH
57842: LD_VAR 0 2
57846: PPUSH
57847: CALL_OW 264
57851: PUSH
57852: LD_INT 99
57854: EQUAL
57855: AND
57856: IFFALSE 57873
57858: PUSH
57859: LD_VAR 0 3
57863: PPUSH
57864: CALL_OW 263
57868: PUSH
57869: LD_INT 3
57871: EQUAL
57872: AND
57873: IFFALSE 57889
// HackDestroyVehicle ( unit , selectedUnit ) ;
57875: LD_VAR 0 2
57879: PPUSH
57880: LD_VAR 0 3
57884: PPUSH
57885: CALL 60223 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57889: LD_VAR 0 1
57893: PUSH
57894: LD_INT 255
57896: EQUAL
57897: IFFALSE 57921
57899: PUSH
57900: LD_VAR 0 2
57904: PPUSH
57905: CALL_OW 264
57909: PUSH
57910: LD_INT 14
57912: PUSH
57913: LD_INT 53
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: IN
57920: AND
57921: IFFALSE 57939
57923: PUSH
57924: LD_VAR 0 4
57928: PPUSH
57929: LD_VAR 0 5
57933: PPUSH
57934: CALL_OW 488
57938: AND
57939: IFFALSE 57963
// CutTreeXYR ( unit , x , y , 12 ) ;
57941: LD_VAR 0 2
57945: PPUSH
57946: LD_VAR 0 4
57950: PPUSH
57951: LD_VAR 0 5
57955: PPUSH
57956: LD_INT 12
57958: PPUSH
57959: CALL 58154 0 4
// if cmd = 256 then
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 256
57970: EQUAL
57971: IFFALSE 57992
// SetFactoryWaypoint ( unit , x , y ) ;
57973: LD_VAR 0 2
57977: PPUSH
57978: LD_VAR 0 4
57982: PPUSH
57983: LD_VAR 0 5
57987: PPUSH
57988: CALL 64074 0 3
// if cmd = 257 then
57992: LD_VAR 0 1
57996: PUSH
57997: LD_INT 257
57999: EQUAL
58000: IFFALSE 58021
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58002: LD_VAR 0 2
58006: PPUSH
58007: LD_VAR 0 4
58011: PPUSH
58012: LD_VAR 0 5
58016: PPUSH
58017: CALL 64570 0 3
// if cmd = 258 then
58021: LD_VAR 0 1
58025: PUSH
58026: LD_INT 258
58028: EQUAL
58029: IFFALSE 58053
// BurnTreeXYR ( unit , x , y , 8 ) ;
58031: LD_VAR 0 2
58035: PPUSH
58036: LD_VAR 0 4
58040: PPUSH
58041: LD_VAR 0 5
58045: PPUSH
58046: LD_INT 8
58048: PPUSH
58049: CALL 58576 0 4
// end ;
58053: LD_VAR 0 6
58057: RET
// export function ComRadiation ( un ) ; var eff ; begin
58058: LD_INT 0
58060: PPUSH
58061: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58062: LD_VAR 0 1
58066: PPUSH
58067: CALL_OW 264
58071: PUSH
58072: LD_INT 91
58074: NONEQUAL
58075: IFFALSE 58079
// exit ;
58077: GO 58149
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58079: LD_INT 68
58081: PPUSH
58082: LD_VAR 0 1
58086: PPUSH
58087: CALL_OW 255
58091: PPUSH
58092: CALL_OW 321
58096: PUSH
58097: LD_INT 2
58099: EQUAL
58100: IFFALSE 58112
// eff := 50 else
58102: LD_ADDR_VAR 0 3
58106: PUSH
58107: LD_INT 50
58109: ST_TO_ADDR
58110: GO 58120
// eff := 25 ;
58112: LD_ADDR_VAR 0 3
58116: PUSH
58117: LD_INT 25
58119: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 250
58129: PPUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 251
58139: PPUSH
58140: LD_VAR 0 3
58144: PPUSH
58145: CALL_OW 495
// end ;
58149: LD_VAR 0 2
58153: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58154: LD_INT 0
58156: PPUSH
58157: PPUSH
58158: PPUSH
58159: PPUSH
58160: PPUSH
58161: PPUSH
58162: PPUSH
58163: PPUSH
58164: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58165: LD_VAR 0 1
58169: PPUSH
58170: CALL_OW 302
58174: NOT
58175: IFTRUE 58194
58177: PUSH
58178: LD_VAR 0 2
58182: PPUSH
58183: LD_VAR 0 3
58187: PPUSH
58188: CALL_OW 488
58192: NOT
58193: OR
58194: IFTRUE 58203
58196: PUSH
58197: LD_VAR 0 4
58201: NOT
58202: OR
58203: IFFALSE 58207
// exit ;
58205: GO 58571
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58207: LD_VAR 0 1
58211: PPUSH
58212: CALL_OW 437
58216: PPUSH
58217: CALL 5182 0 1
58221: PUSH
58222: LD_INT 10
58224: GREATER
58225: IFFALSE 58229
// exit ;
58227: GO 58571
// list := [ ] ;
58229: LD_ADDR_VAR 0 13
58233: PUSH
58234: EMPTY
58235: ST_TO_ADDR
// if x - r < 0 then
58236: LD_VAR 0 2
58240: PUSH
58241: LD_VAR 0 4
58245: MINUS
58246: PUSH
58247: LD_INT 0
58249: LESS
58250: IFFALSE 58262
// min_x := 0 else
58252: LD_ADDR_VAR 0 7
58256: PUSH
58257: LD_INT 0
58259: ST_TO_ADDR
58260: GO 58278
// min_x := x - r ;
58262: LD_ADDR_VAR 0 7
58266: PUSH
58267: LD_VAR 0 2
58271: PUSH
58272: LD_VAR 0 4
58276: MINUS
58277: ST_TO_ADDR
// if y - r < 0 then
58278: LD_VAR 0 3
58282: PUSH
58283: LD_VAR 0 4
58287: MINUS
58288: PUSH
58289: LD_INT 0
58291: LESS
58292: IFFALSE 58304
// min_y := 0 else
58294: LD_ADDR_VAR 0 8
58298: PUSH
58299: LD_INT 0
58301: ST_TO_ADDR
58302: GO 58320
// min_y := y - r ;
58304: LD_ADDR_VAR 0 8
58308: PUSH
58309: LD_VAR 0 3
58313: PUSH
58314: LD_VAR 0 4
58318: MINUS
58319: ST_TO_ADDR
// max_x := x + r ;
58320: LD_ADDR_VAR 0 9
58324: PUSH
58325: LD_VAR 0 2
58329: PUSH
58330: LD_VAR 0 4
58334: PLUS
58335: ST_TO_ADDR
// max_y := y + r ;
58336: LD_ADDR_VAR 0 10
58340: PUSH
58341: LD_VAR 0 3
58345: PUSH
58346: LD_VAR 0 4
58350: PLUS
58351: ST_TO_ADDR
// for _x = min_x to max_x do
58352: LD_ADDR_VAR 0 11
58356: PUSH
58357: DOUBLE
58358: LD_VAR 0 7
58362: DEC
58363: ST_TO_ADDR
58364: LD_VAR 0 9
58368: PUSH
58369: FOR_TO
58370: IFFALSE 58489
// for _y = min_y to max_y do
58372: LD_ADDR_VAR 0 12
58376: PUSH
58377: DOUBLE
58378: LD_VAR 0 8
58382: DEC
58383: ST_TO_ADDR
58384: LD_VAR 0 10
58388: PUSH
58389: FOR_TO
58390: IFFALSE 58485
// begin if not ValidHex ( _x , _y ) then
58392: LD_VAR 0 11
58396: PPUSH
58397: LD_VAR 0 12
58401: PPUSH
58402: CALL_OW 488
58406: NOT
58407: IFFALSE 58411
// continue ;
58409: GO 58389
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58411: LD_VAR 0 11
58415: PPUSH
58416: LD_VAR 0 12
58420: PPUSH
58421: CALL_OW 351
58425: IFFALSE 58443
58427: PUSH
58428: LD_VAR 0 11
58432: PPUSH
58433: LD_VAR 0 12
58437: PPUSH
58438: CALL_OW 554
58442: AND
58443: IFFALSE 58483
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58445: LD_ADDR_VAR 0 13
58449: PUSH
58450: LD_VAR 0 13
58454: PPUSH
58455: LD_VAR 0 13
58459: PUSH
58460: LD_INT 1
58462: PLUS
58463: PPUSH
58464: LD_VAR 0 11
58468: PUSH
58469: LD_VAR 0 12
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PPUSH
58478: CALL_OW 2
58482: ST_TO_ADDR
// end ;
58483: GO 58389
58485: POP
58486: POP
58487: GO 58369
58489: POP
58490: POP
// if not list then
58491: LD_VAR 0 13
58495: NOT
58496: IFFALSE 58500
// exit ;
58498: GO 58571
// for i in list do
58500: LD_ADDR_VAR 0 6
58504: PUSH
58505: LD_VAR 0 13
58509: PUSH
58510: FOR_IN
58511: IFFALSE 58569
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58513: LD_VAR 0 1
58517: PPUSH
58518: LD_STRING M
58520: PUSH
58521: LD_VAR 0 6
58525: PUSH
58526: LD_INT 1
58528: ARRAY
58529: PUSH
58530: LD_VAR 0 6
58534: PUSH
58535: LD_INT 2
58537: ARRAY
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: PPUSH
58563: CALL_OW 447
58567: GO 58510
58569: POP
58570: POP
// end ;
58571: LD_VAR 0 5
58575: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58576: LD_INT 0
58578: PPUSH
58579: PPUSH
58580: PPUSH
58581: PPUSH
58582: PPUSH
58583: PPUSH
58584: PPUSH
58585: PPUSH
58586: PPUSH
58587: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58588: LD_VAR 0 1
58592: PPUSH
58593: CALL_OW 302
58597: NOT
58598: IFTRUE 58617
58600: PUSH
58601: LD_VAR 0 2
58605: PPUSH
58606: LD_VAR 0 3
58610: PPUSH
58611: CALL_OW 488
58615: NOT
58616: OR
58617: IFTRUE 58626
58619: PUSH
58620: LD_VAR 0 4
58624: NOT
58625: OR
58626: IFFALSE 58630
// exit ;
58628: GO 59169
// if Count ( GetTaskList ( flame ) ) > 10 then
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 437
58639: PPUSH
58640: CALL 5182 0 1
58644: PUSH
58645: LD_INT 10
58647: GREATER
58648: IFFALSE 58652
// exit ;
58650: GO 59169
// list := [ ] ;
58652: LD_ADDR_VAR 0 13
58656: PUSH
58657: EMPTY
58658: ST_TO_ADDR
// if x - r < 0 then
58659: LD_VAR 0 2
58663: PUSH
58664: LD_VAR 0 4
58668: MINUS
58669: PUSH
58670: LD_INT 0
58672: LESS
58673: IFFALSE 58685
// min_x := 0 else
58675: LD_ADDR_VAR 0 7
58679: PUSH
58680: LD_INT 0
58682: ST_TO_ADDR
58683: GO 58701
// min_x := x - r ;
58685: LD_ADDR_VAR 0 7
58689: PUSH
58690: LD_VAR 0 2
58694: PUSH
58695: LD_VAR 0 4
58699: MINUS
58700: ST_TO_ADDR
// if y - r < 0 then
58701: LD_VAR 0 3
58705: PUSH
58706: LD_VAR 0 4
58710: MINUS
58711: PUSH
58712: LD_INT 0
58714: LESS
58715: IFFALSE 58727
// min_y := 0 else
58717: LD_ADDR_VAR 0 8
58721: PUSH
58722: LD_INT 0
58724: ST_TO_ADDR
58725: GO 58743
// min_y := y - r ;
58727: LD_ADDR_VAR 0 8
58731: PUSH
58732: LD_VAR 0 3
58736: PUSH
58737: LD_VAR 0 4
58741: MINUS
58742: ST_TO_ADDR
// max_x := x + r ;
58743: LD_ADDR_VAR 0 9
58747: PUSH
58748: LD_VAR 0 2
58752: PUSH
58753: LD_VAR 0 4
58757: PLUS
58758: ST_TO_ADDR
// max_y := y + r ;
58759: LD_ADDR_VAR 0 10
58763: PUSH
58764: LD_VAR 0 3
58768: PUSH
58769: LD_VAR 0 4
58773: PLUS
58774: ST_TO_ADDR
// for _x = min_x to max_x do
58775: LD_ADDR_VAR 0 11
58779: PUSH
58780: DOUBLE
58781: LD_VAR 0 7
58785: DEC
58786: ST_TO_ADDR
58787: LD_VAR 0 9
58791: PUSH
58792: FOR_TO
58793: IFFALSE 58912
// for _y = min_y to max_y do
58795: LD_ADDR_VAR 0 12
58799: PUSH
58800: DOUBLE
58801: LD_VAR 0 8
58805: DEC
58806: ST_TO_ADDR
58807: LD_VAR 0 10
58811: PUSH
58812: FOR_TO
58813: IFFALSE 58908
// begin if not ValidHex ( _x , _y ) then
58815: LD_VAR 0 11
58819: PPUSH
58820: LD_VAR 0 12
58824: PPUSH
58825: CALL_OW 488
58829: NOT
58830: IFFALSE 58834
// continue ;
58832: GO 58812
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58834: LD_VAR 0 11
58838: PPUSH
58839: LD_VAR 0 12
58843: PPUSH
58844: CALL_OW 351
58848: IFFALSE 58866
58850: PUSH
58851: LD_VAR 0 11
58855: PPUSH
58856: LD_VAR 0 12
58860: PPUSH
58861: CALL_OW 554
58865: AND
58866: IFFALSE 58906
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58868: LD_ADDR_VAR 0 13
58872: PUSH
58873: LD_VAR 0 13
58877: PPUSH
58878: LD_VAR 0 13
58882: PUSH
58883: LD_INT 1
58885: PLUS
58886: PPUSH
58887: LD_VAR 0 11
58891: PUSH
58892: LD_VAR 0 12
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 2
58905: ST_TO_ADDR
// end ;
58906: GO 58812
58908: POP
58909: POP
58910: GO 58792
58912: POP
58913: POP
// if not list then
58914: LD_VAR 0 13
58918: NOT
58919: IFFALSE 58923
// exit ;
58921: GO 59169
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58923: LD_ADDR_VAR 0 13
58927: PUSH
58928: LD_VAR 0 1
58932: PPUSH
58933: LD_VAR 0 13
58937: PPUSH
58938: LD_INT 1
58940: PPUSH
58941: LD_INT 1
58943: PPUSH
58944: CALL 8588 0 4
58948: ST_TO_ADDR
// ComStop ( flame ) ;
58949: LD_VAR 0 1
58953: PPUSH
58954: CALL_OW 141
// for i in list do
58958: LD_ADDR_VAR 0 6
58962: PUSH
58963: LD_VAR 0 13
58967: PUSH
58968: FOR_IN
58969: IFFALSE 59000
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58971: LD_VAR 0 1
58975: PPUSH
58976: LD_VAR 0 6
58980: PUSH
58981: LD_INT 1
58983: ARRAY
58984: PPUSH
58985: LD_VAR 0 6
58989: PUSH
58990: LD_INT 2
58992: ARRAY
58993: PPUSH
58994: CALL_OW 176
58998: GO 58968
59000: POP
59001: POP
// repeat wait ( 0 0$1 ) ;
59002: LD_INT 35
59004: PPUSH
59005: CALL_OW 67
// task := GetTaskList ( flame ) ;
59009: LD_ADDR_VAR 0 14
59013: PUSH
59014: LD_VAR 0 1
59018: PPUSH
59019: CALL_OW 437
59023: ST_TO_ADDR
// if not task then
59024: LD_VAR 0 14
59028: NOT
59029: IFFALSE 59033
// exit ;
59031: GO 59169
// if task [ 1 ] [ 1 ] <> | then
59033: LD_VAR 0 14
59037: PUSH
59038: LD_INT 1
59040: ARRAY
59041: PUSH
59042: LD_INT 1
59044: ARRAY
59045: PUSH
59046: LD_STRING |
59048: NONEQUAL
59049: IFFALSE 59053
// exit ;
59051: GO 59169
// _x := task [ 1 ] [ 2 ] ;
59053: LD_ADDR_VAR 0 11
59057: PUSH
59058: LD_VAR 0 14
59062: PUSH
59063: LD_INT 1
59065: ARRAY
59066: PUSH
59067: LD_INT 2
59069: ARRAY
59070: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59071: LD_ADDR_VAR 0 12
59075: PUSH
59076: LD_VAR 0 14
59080: PUSH
59081: LD_INT 1
59083: ARRAY
59084: PUSH
59085: LD_INT 3
59087: ARRAY
59088: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59089: LD_VAR 0 11
59093: PPUSH
59094: LD_VAR 0 12
59098: PPUSH
59099: CALL_OW 351
59103: NOT
59104: IFTRUE 59123
59106: PUSH
59107: LD_VAR 0 11
59111: PPUSH
59112: LD_VAR 0 12
59116: PPUSH
59117: CALL_OW 554
59121: NOT
59122: OR
59123: IFFALSE 59157
// begin task := Delete ( task , 1 ) ;
59125: LD_ADDR_VAR 0 14
59129: PUSH
59130: LD_VAR 0 14
59134: PPUSH
59135: LD_INT 1
59137: PPUSH
59138: CALL_OW 3
59142: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59143: LD_VAR 0 1
59147: PPUSH
59148: LD_VAR 0 14
59152: PPUSH
59153: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59157: LD_VAR 0 1
59161: PPUSH
59162: CALL_OW 314
59166: NOT
59167: IFFALSE 59002
// end ;
59169: LD_VAR 0 5
59173: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59174: LD_EXP 49
59178: NOT
59179: IFFALSE 59229
59181: GO 59183
59183: DISABLE
// begin initHack := true ;
59184: LD_ADDR_EXP 49
59188: PUSH
59189: LD_INT 1
59191: ST_TO_ADDR
// hackTanks := [ ] ;
59192: LD_ADDR_EXP 50
59196: PUSH
59197: EMPTY
59198: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59199: LD_ADDR_EXP 51
59203: PUSH
59204: EMPTY
59205: ST_TO_ADDR
// hackLimit := 3 ;
59206: LD_ADDR_EXP 52
59210: PUSH
59211: LD_INT 3
59213: ST_TO_ADDR
// hackDist := 12 ;
59214: LD_ADDR_EXP 53
59218: PUSH
59219: LD_INT 12
59221: ST_TO_ADDR
// hackCounter := [ ] ;
59222: LD_ADDR_EXP 54
59226: PUSH
59227: EMPTY
59228: ST_TO_ADDR
// end ;
59229: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59230: LD_EXP 49
59234: IFFALSE 59252
59236: PUSH
59237: LD_INT 34
59239: PUSH
59240: LD_INT 99
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PPUSH
59247: CALL_OW 69
59251: AND
59252: IFFALSE 59505
59254: GO 59256
59256: DISABLE
59257: LD_INT 0
59259: PPUSH
59260: PPUSH
// begin enable ;
59261: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59262: LD_ADDR_VAR 0 1
59266: PUSH
59267: LD_INT 34
59269: PUSH
59270: LD_INT 99
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PPUSH
59277: CALL_OW 69
59281: PUSH
59282: FOR_IN
59283: IFFALSE 59503
// begin if not i in hackTanks then
59285: LD_VAR 0 1
59289: PUSH
59290: LD_EXP 50
59294: IN
59295: NOT
59296: IFFALSE 59379
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59298: LD_ADDR_EXP 50
59302: PUSH
59303: LD_EXP 50
59307: PPUSH
59308: LD_EXP 50
59312: PUSH
59313: LD_INT 1
59315: PLUS
59316: PPUSH
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL_OW 1
59326: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59327: LD_ADDR_EXP 51
59331: PUSH
59332: LD_EXP 51
59336: PPUSH
59337: LD_EXP 51
59341: PUSH
59342: LD_INT 1
59344: PLUS
59345: PPUSH
59346: EMPTY
59347: PPUSH
59348: CALL_OW 1
59352: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59353: LD_ADDR_EXP 54
59357: PUSH
59358: LD_EXP 54
59362: PPUSH
59363: LD_EXP 54
59367: PUSH
59368: LD_INT 1
59370: PLUS
59371: PPUSH
59372: EMPTY
59373: PPUSH
59374: CALL_OW 1
59378: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59379: LD_VAR 0 1
59383: PPUSH
59384: CALL_OW 302
59388: NOT
59389: IFFALSE 59402
// begin HackUnlinkAll ( i ) ;
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL 59508 0 1
// continue ;
59400: GO 59282
// end ; HackCheckCapturedStatus ( i ) ;
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL 59953 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59411: LD_ADDR_VAR 0 2
59415: PUSH
59416: LD_INT 81
59418: PUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 255
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 33
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 91
59445: PUSH
59446: LD_VAR 0 1
59450: PUSH
59451: LD_EXP 53
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 50
59463: PUSH
59464: EMPTY
59465: LIST
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: PPUSH
59473: CALL_OW 69
59477: ST_TO_ADDR
// if not tmp then
59478: LD_VAR 0 2
59482: NOT
59483: IFFALSE 59487
// continue ;
59485: GO 59282
// HackLink ( i , tmp ) ;
59487: LD_VAR 0 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL 59644 0 2
// end ;
59501: GO 59282
59503: POP
59504: POP
// end ;
59505: PPOPN 2
59507: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59508: LD_INT 0
59510: PPUSH
59511: PPUSH
59512: PPUSH
// if not hack in hackTanks then
59513: LD_VAR 0 1
59517: PUSH
59518: LD_EXP 50
59522: IN
59523: NOT
59524: IFFALSE 59528
// exit ;
59526: GO 59639
// index := GetElementIndex ( hackTanks , hack ) ;
59528: LD_ADDR_VAR 0 4
59532: PUSH
59533: LD_EXP 50
59537: PPUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: CALL 7883 0 2
59547: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59548: LD_EXP 51
59552: PUSH
59553: LD_VAR 0 4
59557: ARRAY
59558: IFFALSE 59639
// begin for i in hackTanksCaptured [ index ] do
59560: LD_ADDR_VAR 0 3
59564: PUSH
59565: LD_EXP 51
59569: PUSH
59570: LD_VAR 0 4
59574: ARRAY
59575: PUSH
59576: FOR_IN
59577: IFFALSE 59603
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59579: LD_VAR 0 3
59583: PUSH
59584: LD_INT 1
59586: ARRAY
59587: PPUSH
59588: LD_VAR 0 3
59592: PUSH
59593: LD_INT 2
59595: ARRAY
59596: PPUSH
59597: CALL_OW 235
59601: GO 59576
59603: POP
59604: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59605: LD_ADDR_EXP 51
59609: PUSH
59610: LD_EXP 51
59614: PPUSH
59615: LD_VAR 0 4
59619: PPUSH
59620: EMPTY
59621: PPUSH
59622: CALL_OW 1
59626: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59627: LD_VAR 0 1
59631: PPUSH
59632: LD_INT 0
59634: PPUSH
59635: CALL_OW 505
// end ; end ;
59639: LD_VAR 0 2
59643: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59644: LD_INT 0
59646: PPUSH
59647: PPUSH
59648: PPUSH
// if not hack in hackTanks or not vehicles then
59649: LD_VAR 0 1
59653: PUSH
59654: LD_EXP 50
59658: IN
59659: NOT
59660: IFTRUE 59669
59662: PUSH
59663: LD_VAR 0 2
59667: NOT
59668: OR
59669: IFFALSE 59673
// exit ;
59671: GO 59948
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59673: LD_ADDR_VAR 0 2
59677: PUSH
59678: LD_VAR 0 1
59682: PPUSH
59683: LD_VAR 0 2
59687: PPUSH
59688: LD_INT 1
59690: PPUSH
59691: LD_INT 1
59693: PPUSH
59694: CALL 8535 0 4
59698: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59699: LD_ADDR_VAR 0 5
59703: PUSH
59704: LD_EXP 50
59708: PPUSH
59709: LD_VAR 0 1
59713: PPUSH
59714: CALL 7883 0 2
59718: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59719: LD_EXP 51
59723: PUSH
59724: LD_VAR 0 5
59728: ARRAY
59729: PUSH
59730: LD_EXP 52
59734: LESS
59735: IFFALSE 59924
// begin for i := 1 to vehicles do
59737: LD_ADDR_VAR 0 4
59741: PUSH
59742: DOUBLE
59743: LD_INT 1
59745: DEC
59746: ST_TO_ADDR
59747: LD_VAR 0 2
59751: PUSH
59752: FOR_TO
59753: IFFALSE 59922
// begin if hackTanksCaptured [ index ] = hackLimit then
59755: LD_EXP 51
59759: PUSH
59760: LD_VAR 0 5
59764: ARRAY
59765: PUSH
59766: LD_EXP 52
59770: EQUAL
59771: IFFALSE 59775
// break ;
59773: GO 59922
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59775: LD_ADDR_EXP 54
59779: PUSH
59780: LD_EXP 54
59784: PPUSH
59785: LD_VAR 0 5
59789: PPUSH
59790: LD_EXP 54
59794: PUSH
59795: LD_VAR 0 5
59799: ARRAY
59800: PUSH
59801: LD_INT 1
59803: PLUS
59804: PPUSH
59805: CALL_OW 1
59809: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59810: LD_ADDR_EXP 51
59814: PUSH
59815: LD_EXP 51
59819: PPUSH
59820: LD_VAR 0 5
59824: PUSH
59825: LD_EXP 51
59829: PUSH
59830: LD_VAR 0 5
59834: ARRAY
59835: PUSH
59836: LD_INT 1
59838: PLUS
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PPUSH
59844: LD_VAR 0 2
59848: PUSH
59849: LD_VAR 0 4
59853: ARRAY
59854: PUSH
59855: LD_VAR 0 2
59859: PUSH
59860: LD_VAR 0 4
59864: ARRAY
59865: PPUSH
59866: CALL_OW 255
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PPUSH
59875: CALL 8100 0 3
59879: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59880: LD_VAR 0 2
59884: PUSH
59885: LD_VAR 0 4
59889: ARRAY
59890: PPUSH
59891: LD_VAR 0 1
59895: PPUSH
59896: CALL_OW 255
59900: PPUSH
59901: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59905: LD_VAR 0 2
59909: PUSH
59910: LD_VAR 0 4
59914: ARRAY
59915: PPUSH
59916: CALL_OW 141
// end ;
59920: GO 59752
59922: POP
59923: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59924: LD_VAR 0 1
59928: PPUSH
59929: LD_EXP 51
59933: PUSH
59934: LD_VAR 0 5
59938: ARRAY
59939: PUSH
59940: LD_INT 0
59942: PLUS
59943: PPUSH
59944: CALL_OW 505
// end ;
59948: LD_VAR 0 3
59952: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59953: LD_INT 0
59955: PPUSH
59956: PPUSH
59957: PPUSH
59958: PPUSH
// if not hack in hackTanks then
59959: LD_VAR 0 1
59963: PUSH
59964: LD_EXP 50
59968: IN
59969: NOT
59970: IFFALSE 59974
// exit ;
59972: GO 60218
// index := GetElementIndex ( hackTanks , hack ) ;
59974: LD_ADDR_VAR 0 4
59978: PUSH
59979: LD_EXP 50
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL 7883 0 2
59993: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59994: LD_ADDR_VAR 0 3
59998: PUSH
59999: DOUBLE
60000: LD_EXP 51
60004: PUSH
60005: LD_VAR 0 4
60009: ARRAY
60010: INC
60011: ST_TO_ADDR
60012: LD_INT 1
60014: PUSH
60015: FOR_DOWNTO
60016: IFFALSE 60192
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60018: LD_ADDR_VAR 0 5
60022: PUSH
60023: LD_EXP 51
60027: PUSH
60028: LD_VAR 0 4
60032: ARRAY
60033: PUSH
60034: LD_VAR 0 3
60038: ARRAY
60039: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60040: LD_VAR 0 5
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: CALL_OW 302
60053: NOT
60054: IFTRUE 60082
60056: PUSH
60057: LD_VAR 0 5
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: PPUSH
60066: CALL_OW 255
60070: PUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: CALL_OW 255
60080: NONEQUAL
60081: OR
60082: IFFALSE 60190
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60084: LD_VAR 0 5
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PPUSH
60093: CALL_OW 305
60097: IFFALSE 60125
60099: PUSH
60100: LD_VAR 0 5
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: PPUSH
60109: CALL_OW 255
60113: PUSH
60114: LD_VAR 0 1
60118: PPUSH
60119: CALL_OW 255
60123: EQUAL
60124: AND
60125: IFFALSE 60149
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60127: LD_VAR 0 5
60131: PUSH
60132: LD_INT 1
60134: ARRAY
60135: PPUSH
60136: LD_VAR 0 5
60140: PUSH
60141: LD_INT 2
60143: ARRAY
60144: PPUSH
60145: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60149: LD_ADDR_EXP 51
60153: PUSH
60154: LD_EXP 51
60158: PPUSH
60159: LD_VAR 0 4
60163: PPUSH
60164: LD_EXP 51
60168: PUSH
60169: LD_VAR 0 4
60173: ARRAY
60174: PPUSH
60175: LD_VAR 0 3
60179: PPUSH
60180: CALL_OW 3
60184: PPUSH
60185: CALL_OW 1
60189: ST_TO_ADDR
// end ; end ;
60190: GO 60015
60192: POP
60193: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60194: LD_VAR 0 1
60198: PPUSH
60199: LD_EXP 51
60203: PUSH
60204: LD_VAR 0 4
60208: ARRAY
60209: PUSH
60210: LD_INT 0
60212: PLUS
60213: PPUSH
60214: CALL_OW 505
// end ;
60218: LD_VAR 0 2
60222: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60223: LD_INT 0
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
// if not hack in hackTanks then
60229: LD_VAR 0 1
60233: PUSH
60234: LD_EXP 50
60238: IN
60239: NOT
60240: IFFALSE 60244
// exit ;
60242: GO 60329
// index := GetElementIndex ( hackTanks , hack ) ;
60244: LD_ADDR_VAR 0 5
60248: PUSH
60249: LD_EXP 50
60253: PPUSH
60254: LD_VAR 0 1
60258: PPUSH
60259: CALL 7883 0 2
60263: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60264: LD_ADDR_VAR 0 4
60268: PUSH
60269: DOUBLE
60270: LD_INT 1
60272: DEC
60273: ST_TO_ADDR
60274: LD_EXP 51
60278: PUSH
60279: LD_VAR 0 5
60283: ARRAY
60284: PUSH
60285: FOR_TO
60286: IFFALSE 60327
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60288: LD_EXP 51
60292: PUSH
60293: LD_VAR 0 5
60297: ARRAY
60298: PUSH
60299: LD_VAR 0 4
60303: ARRAY
60304: PUSH
60305: LD_INT 1
60307: ARRAY
60308: PUSH
60309: LD_VAR 0 2
60313: EQUAL
60314: IFFALSE 60325
// KillUnit ( vehicle ) ;
60316: LD_VAR 0 2
60320: PPUSH
60321: CALL_OW 66
60325: GO 60285
60327: POP
60328: POP
// end ;
60329: LD_VAR 0 3
60333: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60334: LD_EXP 55
60338: NOT
60339: IFFALSE 60472
60341: GO 60343
60343: DISABLE
60344: LD_INT 0
60346: PPUSH
// begin initMiner := true ;
60347: LD_ADDR_EXP 55
60351: PUSH
60352: LD_INT 1
60354: ST_TO_ADDR
// minersList := [ ] ;
60355: LD_ADDR_EXP 56
60359: PUSH
60360: EMPTY
60361: ST_TO_ADDR
// minerMinesList := [ ] ;
60362: LD_ADDR_EXP 57
60366: PUSH
60367: EMPTY
60368: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60369: LD_ADDR_EXP 58
60373: PUSH
60374: LD_INT 10
60376: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60377: LD_ADDR_VAR 0 1
60381: PUSH
60382: LD_INT 34
60384: PUSH
60385: LD_INT 81
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PPUSH
60392: CALL_OW 69
60396: PUSH
60397: FOR_IN
60398: IFFALSE 60470
// begin if not i in minersList then
60400: LD_VAR 0 1
60404: PUSH
60405: LD_EXP 56
60409: IN
60410: NOT
60411: IFFALSE 60468
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60413: LD_ADDR_EXP 56
60417: PUSH
60418: LD_EXP 56
60422: PPUSH
60423: LD_EXP 56
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: PPUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: CALL_OW 1
60441: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60442: LD_ADDR_EXP 57
60446: PUSH
60447: LD_EXP 57
60451: PPUSH
60452: LD_EXP 57
60456: PUSH
60457: LD_INT 1
60459: PLUS
60460: PPUSH
60461: EMPTY
60462: PPUSH
60463: CALL_OW 1
60467: ST_TO_ADDR
// end end ;
60468: GO 60397
60470: POP
60471: POP
// end ;
60472: PPOPN 1
60474: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60475: LD_EXP 55
60479: IFFALSE 60510
60481: PUSH
60482: LD_EXP 57
60486: PPUSH
60487: CALL 5182 0 1
60491: IFTRUE 60509
60493: PUSH
60494: LD_INT 34
60496: PUSH
60497: LD_INT 81
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PPUSH
60504: CALL_OW 69
60508: OR
60509: AND
60510: IFFALSE 61030
60512: GO 60514
60514: DISABLE
60515: LD_INT 0
60517: PPUSH
60518: PPUSH
60519: PPUSH
60520: PPUSH
// begin enable ;
60521: ENABLE
// for i := minerMinesList downto 1 do
60522: LD_ADDR_VAR 0 1
60526: PUSH
60527: DOUBLE
60528: LD_EXP 57
60532: INC
60533: ST_TO_ADDR
60534: LD_INT 1
60536: PUSH
60537: FOR_DOWNTO
60538: IFFALSE 61028
// begin side := GetSide ( minersList [ i ] ) ;
60540: LD_ADDR_VAR 0 3
60544: PUSH
60545: LD_EXP 56
60549: PUSH
60550: LD_VAR 0 1
60554: ARRAY
60555: PPUSH
60556: CALL_OW 255
60560: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60561: LD_EXP 56
60565: PUSH
60566: LD_VAR 0 1
60570: ARRAY
60571: PPUSH
60572: CALL_OW 300
60576: IFFALSE 60597
60578: PUSH
60579: LD_VAR 0 3
60583: PUSH
60584: LD_OWVAR 2
60588: PUSH
60589: LD_INT 9
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: IN
60596: AND
60597: IFFALSE 60630
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60599: LD_EXP 56
60603: PUSH
60604: LD_VAR 0 1
60608: ARRAY
60609: PPUSH
60610: LD_EXP 57
60614: PUSH
60615: LD_VAR 0 1
60619: ARRAY
60620: PPUSH
60621: CALL 5182 0 1
60625: PPUSH
60626: CALL_OW 505
// if not minerMinesList [ i ] then
60630: LD_EXP 57
60634: PUSH
60635: LD_VAR 0 1
60639: ARRAY
60640: NOT
60641: IFFALSE 60645
// continue ;
60643: GO 60537
// for j := minerMinesList [ i ] downto 1 do
60645: LD_ADDR_VAR 0 2
60649: PUSH
60650: DOUBLE
60651: LD_EXP 57
60655: PUSH
60656: LD_VAR 0 1
60660: ARRAY
60661: INC
60662: ST_TO_ADDR
60663: LD_INT 1
60665: PUSH
60666: FOR_DOWNTO
60667: IFFALSE 61024
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60669: LD_EXP 56
60673: PUSH
60674: LD_VAR 0 1
60678: ARRAY
60679: PPUSH
60680: CALL_OW 301
60684: IFTRUE 60704
60686: PUSH
60687: LD_EXP 56
60691: PUSH
60692: LD_VAR 0 1
60696: ARRAY
60697: PPUSH
60698: CALL_OW 305
60702: NOT
60703: OR
60704: IFFALSE 60795
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60706: LD_EXP 57
60710: PUSH
60711: LD_VAR 0 1
60715: ARRAY
60716: PUSH
60717: LD_VAR 0 2
60721: ARRAY
60722: PUSH
60723: LD_INT 1
60725: ARRAY
60726: PPUSH
60727: LD_EXP 57
60731: PUSH
60732: LD_VAR 0 1
60736: ARRAY
60737: PUSH
60738: LD_VAR 0 2
60742: ARRAY
60743: PUSH
60744: LD_INT 2
60746: ARRAY
60747: PPUSH
60748: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60752: LD_ADDR_EXP 57
60756: PUSH
60757: LD_EXP 57
60761: PPUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: LD_EXP 57
60771: PUSH
60772: LD_VAR 0 1
60776: ARRAY
60777: PPUSH
60778: LD_VAR 0 2
60782: PPUSH
60783: CALL_OW 3
60787: PPUSH
60788: CALL_OW 1
60792: ST_TO_ADDR
// continue ;
60793: GO 60666
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60795: LD_ADDR_VAR 0 4
60799: PUSH
60800: LD_EXP 57
60804: PUSH
60805: LD_VAR 0 1
60809: ARRAY
60810: PUSH
60811: LD_VAR 0 2
60815: ARRAY
60816: PUSH
60817: LD_INT 1
60819: ARRAY
60820: PPUSH
60821: LD_EXP 57
60825: PUSH
60826: LD_VAR 0 1
60830: ARRAY
60831: PUSH
60832: LD_VAR 0 2
60836: ARRAY
60837: PUSH
60838: LD_INT 2
60840: ARRAY
60841: PPUSH
60842: CALL_OW 428
60846: ST_TO_ADDR
// if not tmp then
60847: LD_VAR 0 4
60851: NOT
60852: IFFALSE 60856
// continue ;
60854: GO 60666
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60856: LD_VAR 0 4
60860: PUSH
60861: LD_INT 81
60863: PUSH
60864: LD_VAR 0 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PPUSH
60873: CALL_OW 69
60877: IN
60878: IFFALSE 60928
60880: PUSH
60881: LD_EXP 57
60885: PUSH
60886: LD_VAR 0 1
60890: ARRAY
60891: PUSH
60892: LD_VAR 0 2
60896: ARRAY
60897: PUSH
60898: LD_INT 1
60900: ARRAY
60901: PPUSH
60902: LD_EXP 57
60906: PUSH
60907: LD_VAR 0 1
60911: ARRAY
60912: PUSH
60913: LD_VAR 0 2
60917: ARRAY
60918: PUSH
60919: LD_INT 2
60921: ARRAY
60922: PPUSH
60923: CALL_OW 458
60927: AND
60928: IFFALSE 61022
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60930: LD_EXP 57
60934: PUSH
60935: LD_VAR 0 1
60939: ARRAY
60940: PUSH
60941: LD_VAR 0 2
60945: ARRAY
60946: PUSH
60947: LD_INT 1
60949: ARRAY
60950: PPUSH
60951: LD_EXP 57
60955: PUSH
60956: LD_VAR 0 1
60960: ARRAY
60961: PUSH
60962: LD_VAR 0 2
60966: ARRAY
60967: PUSH
60968: LD_INT 2
60970: ARRAY
60971: PPUSH
60972: LD_VAR 0 3
60976: PPUSH
60977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60981: LD_ADDR_EXP 57
60985: PUSH
60986: LD_EXP 57
60990: PPUSH
60991: LD_VAR 0 1
60995: PPUSH
60996: LD_EXP 57
61000: PUSH
61001: LD_VAR 0 1
61005: ARRAY
61006: PPUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: CALL_OW 3
61016: PPUSH
61017: CALL_OW 1
61021: ST_TO_ADDR
// end ; end ;
61022: GO 60666
61024: POP
61025: POP
// end ;
61026: GO 60537
61028: POP
61029: POP
// end ;
61030: PPOPN 4
61032: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61033: LD_INT 0
61035: PPUSH
61036: PPUSH
61037: PPUSH
61038: PPUSH
// result := false ;
61039: LD_ADDR_VAR 0 4
61043: PUSH
61044: LD_INT 0
61046: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 264
61056: PUSH
61057: LD_INT 81
61059: EQUAL
61060: NOT
61061: IFFALSE 61065
// exit ;
61063: GO 61435
// side := GetSide ( unit ) ;
61065: LD_ADDR_VAR 0 6
61069: PUSH
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 255
61079: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61080: LD_ADDR_VAR 0 5
61084: PUSH
61085: LD_EXP 56
61089: PPUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: CALL 7883 0 2
61099: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61100: LD_EXP 57
61104: PUSH
61105: LD_VAR 0 5
61109: ARRAY
61110: PUSH
61111: LD_EXP 58
61115: GREATEREQUAL
61116: IFFALSE 61120
// exit ;
61118: GO 61435
// ComMoveXY ( unit , x , y ) ;
61120: LD_VAR 0 1
61124: PPUSH
61125: LD_VAR 0 2
61129: PPUSH
61130: LD_VAR 0 3
61134: PPUSH
61135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61139: LD_INT 35
61141: PPUSH
61142: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61146: LD_VAR 0 1
61150: PPUSH
61151: LD_VAR 0 2
61155: PPUSH
61156: LD_VAR 0 3
61160: PPUSH
61161: CALL 39939 0 3
61165: NOT
61166: IFFALSE 61179
61168: PUSH
61169: LD_VAR 0 1
61173: PPUSH
61174: CALL_OW 314
61178: AND
61179: IFFALSE 61183
// exit ;
61181: GO 61435
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61183: LD_VAR 0 2
61187: PPUSH
61188: LD_VAR 0 3
61192: PPUSH
61193: CALL_OW 428
61197: PUSH
61198: LD_VAR 0 1
61202: EQUAL
61203: IFFALSE 61217
61205: PUSH
61206: LD_VAR 0 1
61210: PPUSH
61211: CALL_OW 314
61215: NOT
61216: AND
61217: IFFALSE 61139
// if MineAtPos ( x , y ) then
61219: LD_VAR 0 2
61223: PPUSH
61224: LD_VAR 0 3
61228: PPUSH
61229: CALL_OW 458
61233: IFFALSE 61237
// exit ;
61235: GO 61435
// if your_side = side then
61237: LD_OWVAR 2
61241: PUSH
61242: LD_VAR 0 6
61246: EQUAL
61247: IFFALSE 61266
// PlaySoundXY ( x , y , PlantMine ) ;
61249: LD_VAR 0 2
61253: PPUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: LD_STRING PlantMine
61261: PPUSH
61262: CALL_OW 366
// repeat wait ( 1 ) ;
61266: LD_INT 1
61268: PPUSH
61269: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61273: LD_VAR 0 2
61277: PPUSH
61278: LD_VAR 0 3
61282: PPUSH
61283: LD_VAR 0 6
61287: PPUSH
61288: LD_INT 0
61290: PPUSH
61291: CALL_OW 454
61295: IFFALSE 61266
// if MineAtPos ( x , y ) then
61297: LD_VAR 0 2
61301: PPUSH
61302: LD_VAR 0 3
61306: PPUSH
61307: CALL_OW 458
61311: IFFALSE 61427
// begin for i in minerMinesList [ index ] do
61313: LD_ADDR_VAR 0 7
61317: PUSH
61318: LD_EXP 57
61322: PUSH
61323: LD_VAR 0 5
61327: ARRAY
61328: PUSH
61329: FOR_IN
61330: IFFALSE 61372
// if i [ 1 ] = x and i [ 2 ] = y then
61332: LD_VAR 0 7
61336: PUSH
61337: LD_INT 1
61339: ARRAY
61340: PUSH
61341: LD_VAR 0 2
61345: EQUAL
61346: IFFALSE 61364
61348: PUSH
61349: LD_VAR 0 7
61353: PUSH
61354: LD_INT 2
61356: ARRAY
61357: PUSH
61358: LD_VAR 0 3
61362: EQUAL
61363: AND
61364: IFFALSE 61370
// exit ;
61366: POP
61367: POP
61368: GO 61435
61370: GO 61329
61372: POP
61373: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61374: LD_ADDR_EXP 57
61378: PUSH
61379: LD_EXP 57
61383: PPUSH
61384: LD_VAR 0 5
61388: PUSH
61389: LD_EXP 57
61393: PUSH
61394: LD_VAR 0 5
61398: ARRAY
61399: PUSH
61400: LD_INT 1
61402: PLUS
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PPUSH
61408: LD_VAR 0 2
61412: PUSH
61413: LD_VAR 0 3
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PPUSH
61422: CALL 8100 0 3
61426: ST_TO_ADDR
// end ; result := true ;
61427: LD_ADDR_VAR 0 4
61431: PUSH
61432: LD_INT 1
61434: ST_TO_ADDR
// end ;
61435: LD_VAR 0 4
61439: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61440: LD_INT 0
61442: PPUSH
61443: PPUSH
61444: PPUSH
// if not unit in minersList then
61445: LD_VAR 0 1
61449: PUSH
61450: LD_EXP 56
61454: IN
61455: NOT
61456: IFFALSE 61460
// exit ;
61458: GO 61667
// index := GetElementIndex ( minersList , unit ) ;
61460: LD_ADDR_VAR 0 6
61464: PUSH
61465: LD_EXP 56
61469: PPUSH
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL 7883 0 2
61479: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61480: LD_ADDR_VAR 0 5
61484: PUSH
61485: DOUBLE
61486: LD_EXP 57
61490: PUSH
61491: LD_VAR 0 6
61495: ARRAY
61496: INC
61497: ST_TO_ADDR
61498: LD_INT 1
61500: PUSH
61501: FOR_DOWNTO
61502: IFFALSE 61665
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61504: LD_EXP 57
61508: PUSH
61509: LD_VAR 0 6
61513: ARRAY
61514: PUSH
61515: LD_VAR 0 5
61519: ARRAY
61520: PUSH
61521: LD_INT 1
61523: ARRAY
61524: PPUSH
61525: LD_EXP 57
61529: PUSH
61530: LD_VAR 0 6
61534: ARRAY
61535: PUSH
61536: LD_VAR 0 5
61540: ARRAY
61541: PUSH
61542: LD_INT 2
61544: ARRAY
61545: PPUSH
61546: LD_VAR 0 2
61550: PPUSH
61551: LD_VAR 0 3
61555: PPUSH
61556: CALL_OW 298
61560: PUSH
61561: LD_INT 6
61563: LESS
61564: IFFALSE 61663
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61566: LD_EXP 57
61570: PUSH
61571: LD_VAR 0 6
61575: ARRAY
61576: PUSH
61577: LD_VAR 0 5
61581: ARRAY
61582: PUSH
61583: LD_INT 1
61585: ARRAY
61586: PPUSH
61587: LD_EXP 57
61591: PUSH
61592: LD_VAR 0 6
61596: ARRAY
61597: PUSH
61598: LD_VAR 0 5
61602: ARRAY
61603: PUSH
61604: LD_INT 2
61606: ARRAY
61607: PPUSH
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 255
61617: PPUSH
61618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61622: LD_ADDR_EXP 57
61626: PUSH
61627: LD_EXP 57
61631: PPUSH
61632: LD_VAR 0 6
61636: PPUSH
61637: LD_EXP 57
61641: PUSH
61642: LD_VAR 0 6
61646: ARRAY
61647: PPUSH
61648: LD_VAR 0 5
61652: PPUSH
61653: CALL_OW 3
61657: PPUSH
61658: CALL_OW 1
61662: ST_TO_ADDR
// end ; end ;
61663: GO 61501
61665: POP
61666: POP
// end ;
61667: LD_VAR 0 4
61671: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61672: LD_INT 0
61674: PPUSH
61675: PPUSH
61676: PPUSH
61677: PPUSH
61678: PPUSH
61679: PPUSH
61680: PPUSH
61681: PPUSH
61682: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61683: LD_VAR 0 1
61687: PPUSH
61688: CALL_OW 264
61692: PUSH
61693: LD_INT 81
61695: EQUAL
61696: NOT
61697: IFTRUE 61712
61699: PUSH
61700: LD_VAR 0 1
61704: PUSH
61705: LD_EXP 56
61709: IN
61710: NOT
61711: OR
61712: IFFALSE 61716
// exit ;
61714: GO 62042
// index := GetElementIndex ( minersList , unit ) ;
61716: LD_ADDR_VAR 0 6
61720: PUSH
61721: LD_EXP 56
61725: PPUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL 7883 0 2
61735: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61736: LD_ADDR_VAR 0 8
61740: PUSH
61741: LD_EXP 58
61745: PUSH
61746: LD_EXP 57
61750: PUSH
61751: LD_VAR 0 6
61755: ARRAY
61756: MINUS
61757: ST_TO_ADDR
// if not minesFreeAmount then
61758: LD_VAR 0 8
61762: NOT
61763: IFFALSE 61767
// exit ;
61765: GO 62042
// tmp := [ ] ;
61767: LD_ADDR_VAR 0 7
61771: PUSH
61772: EMPTY
61773: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61774: LD_ADDR_VAR 0 5
61778: PUSH
61779: DOUBLE
61780: LD_INT 1
61782: DEC
61783: ST_TO_ADDR
61784: LD_VAR 0 8
61788: PUSH
61789: FOR_TO
61790: IFFALSE 61989
// begin _d := rand ( 0 , 5 ) ;
61792: LD_ADDR_VAR 0 11
61796: PUSH
61797: LD_INT 0
61799: PPUSH
61800: LD_INT 5
61802: PPUSH
61803: CALL_OW 12
61807: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61808: LD_ADDR_VAR 0 12
61812: PUSH
61813: LD_INT 2
61815: PPUSH
61816: LD_INT 6
61818: PPUSH
61819: CALL_OW 12
61823: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61824: LD_ADDR_VAR 0 9
61828: PUSH
61829: LD_VAR 0 2
61833: PPUSH
61834: LD_VAR 0 11
61838: PPUSH
61839: LD_VAR 0 12
61843: PPUSH
61844: CALL_OW 272
61848: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61849: LD_ADDR_VAR 0 10
61853: PUSH
61854: LD_VAR 0 3
61858: PPUSH
61859: LD_VAR 0 11
61863: PPUSH
61864: LD_VAR 0 12
61868: PPUSH
61869: CALL_OW 273
61873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61874: LD_VAR 0 9
61878: PPUSH
61879: LD_VAR 0 10
61883: PPUSH
61884: CALL_OW 488
61888: IFFALSE 61912
61890: PUSH
61891: LD_VAR 0 9
61895: PUSH
61896: LD_VAR 0 10
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_VAR 0 7
61909: IN
61910: NOT
61911: AND
61912: IFFALSE 61931
61914: PUSH
61915: LD_VAR 0 9
61919: PPUSH
61920: LD_VAR 0 10
61924: PPUSH
61925: CALL_OW 458
61929: NOT
61930: AND
61931: IFFALSE 61973
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61933: LD_ADDR_VAR 0 7
61937: PUSH
61938: LD_VAR 0 7
61942: PPUSH
61943: LD_VAR 0 7
61947: PUSH
61948: LD_INT 1
61950: PLUS
61951: PPUSH
61952: LD_VAR 0 9
61956: PUSH
61957: LD_VAR 0 10
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PPUSH
61966: CALL_OW 1
61970: ST_TO_ADDR
61971: GO 61987
// i := i - 1 ;
61973: LD_ADDR_VAR 0 5
61977: PUSH
61978: LD_VAR 0 5
61982: PUSH
61983: LD_INT 1
61985: MINUS
61986: ST_TO_ADDR
// end ;
61987: GO 61789
61989: POP
61990: POP
// for i in tmp do
61991: LD_ADDR_VAR 0 5
61995: PUSH
61996: LD_VAR 0 7
62000: PUSH
62001: FOR_IN
62002: IFFALSE 62040
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62004: LD_VAR 0 1
62008: PPUSH
62009: LD_VAR 0 5
62013: PUSH
62014: LD_INT 1
62016: ARRAY
62017: PPUSH
62018: LD_VAR 0 5
62022: PUSH
62023: LD_INT 2
62025: ARRAY
62026: PPUSH
62027: CALL 61033 0 3
62031: NOT
62032: IFFALSE 62038
// exit ;
62034: POP
62035: POP
62036: GO 62042
62038: GO 62001
62040: POP
62041: POP
// end ;
62042: LD_VAR 0 4
62046: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62047: LD_INT 0
62049: PPUSH
62050: PPUSH
62051: PPUSH
62052: PPUSH
62053: PPUSH
62054: PPUSH
62055: PPUSH
62056: PPUSH
62057: PPUSH
// if GetClass ( unit ) <> class_sniper then
62058: LD_VAR 0 1
62062: PPUSH
62063: CALL_OW 257
62067: PUSH
62068: LD_INT 5
62070: NONEQUAL
62071: IFFALSE 62075
// exit ;
62073: GO 62545
// dist := 8 ;
62075: LD_ADDR_VAR 0 5
62079: PUSH
62080: LD_INT 8
62082: ST_TO_ADDR
// viewRange := 12 ;
62083: LD_ADDR_VAR 0 8
62087: PUSH
62088: LD_INT 12
62090: ST_TO_ADDR
// side := GetSide ( unit ) ;
62091: LD_ADDR_VAR 0 6
62095: PUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 255
62105: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62106: LD_INT 61
62108: PPUSH
62109: LD_VAR 0 6
62113: PPUSH
62114: CALL_OW 321
62118: PUSH
62119: LD_INT 2
62121: EQUAL
62122: IFFALSE 62132
// viewRange := 16 ;
62124: LD_ADDR_VAR 0 8
62128: PUSH
62129: LD_INT 16
62131: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62132: LD_VAR 0 1
62136: PPUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 297
62151: PUSH
62152: LD_VAR 0 5
62156: GREATER
62157: IFFALSE 62236
// begin ComMoveXY ( unit , x , y ) ;
62159: LD_VAR 0 1
62163: PPUSH
62164: LD_VAR 0 2
62168: PPUSH
62169: LD_VAR 0 3
62173: PPUSH
62174: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62178: LD_INT 35
62180: PPUSH
62181: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62185: LD_VAR 0 1
62189: PPUSH
62190: LD_VAR 0 2
62194: PPUSH
62195: LD_VAR 0 3
62199: PPUSH
62200: CALL 39939 0 3
62204: NOT
62205: IFFALSE 62209
// exit ;
62207: GO 62545
// until GetDistUnitXY ( unit , x , y ) < dist ;
62209: LD_VAR 0 1
62213: PPUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: LD_VAR 0 3
62223: PPUSH
62224: CALL_OW 297
62228: PUSH
62229: LD_VAR 0 5
62233: LESS
62234: IFFALSE 62178
// end ; ComTurnXY ( unit , x , y ) ;
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: LD_VAR 0 3
62250: PPUSH
62251: CALL_OW 118
// repeat if Multiplayer then
62255: LD_OWVAR 4
62259: IFFALSE 62270
// wait ( 35 ) else
62261: LD_INT 35
62263: PPUSH
62264: CALL_OW 67
62268: GO 62277
// wait ( 5 ) ;
62270: LD_INT 5
62272: PPUSH
62273: CALL_OW 67
// _d := GetDir ( unit ) ;
62277: LD_ADDR_VAR 0 11
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: CALL_OW 254
62291: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62292: LD_ADDR_VAR 0 7
62296: PUSH
62297: LD_VAR 0 1
62301: PPUSH
62302: CALL_OW 250
62306: PPUSH
62307: LD_VAR 0 1
62311: PPUSH
62312: CALL_OW 251
62316: PPUSH
62317: LD_VAR 0 2
62321: PPUSH
62322: LD_VAR 0 3
62326: PPUSH
62327: CALL 42575 0 4
62331: ST_TO_ADDR
// until dir = _d ;
62332: LD_VAR 0 7
62336: PUSH
62337: LD_VAR 0 11
62341: EQUAL
62342: IFFALSE 62255
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62344: LD_ADDR_VAR 0 9
62348: PUSH
62349: LD_VAR 0 1
62353: PPUSH
62354: CALL_OW 250
62358: PPUSH
62359: LD_VAR 0 7
62363: PPUSH
62364: LD_VAR 0 5
62368: PPUSH
62369: CALL_OW 272
62373: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62374: LD_ADDR_VAR 0 10
62378: PUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 251
62388: PPUSH
62389: LD_VAR 0 7
62393: PPUSH
62394: LD_VAR 0 5
62398: PPUSH
62399: CALL_OW 273
62403: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62404: LD_VAR 0 9
62408: PPUSH
62409: LD_VAR 0 10
62413: PPUSH
62414: CALL_OW 488
62418: NOT
62419: IFFALSE 62423
// exit ;
62421: GO 62545
// ComAnimCustom ( unit , 1 ) ;
62423: LD_VAR 0 1
62427: PPUSH
62428: LD_INT 1
62430: PPUSH
62431: CALL_OW 592
// p := 0 ;
62435: LD_ADDR_VAR 0 12
62439: PUSH
62440: LD_INT 0
62442: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62443: LD_VAR 0 9
62447: PPUSH
62448: LD_VAR 0 10
62452: PPUSH
62453: LD_VAR 0 6
62457: PPUSH
62458: LD_VAR 0 8
62462: PPUSH
62463: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62467: LD_INT 35
62469: PPUSH
62470: CALL_OW 67
// p := Inc ( p ) ;
62474: LD_ADDR_VAR 0 12
62478: PUSH
62479: LD_VAR 0 12
62483: PPUSH
62484: CALL 42531 0 1
62488: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62489: LD_VAR 0 12
62493: PUSH
62494: LD_INT 3
62496: EQUAL
62497: IFTRUE 62511
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 302
62509: NOT
62510: OR
62511: IFTRUE 62524
62513: PUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: CALL_OW 301
62523: OR
62524: IFFALSE 62467
// RemoveSeeing ( _x , _y , side ) ;
62526: LD_VAR 0 9
62530: PPUSH
62531: LD_VAR 0 10
62535: PPUSH
62536: LD_VAR 0 6
62540: PPUSH
62541: CALL_OW 331
// end ;
62545: LD_VAR 0 4
62549: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62550: LD_INT 0
62552: PPUSH
62553: PPUSH
62554: PPUSH
62555: PPUSH
62556: PPUSH
62557: PPUSH
62558: PPUSH
62559: PPUSH
62560: PPUSH
62561: PPUSH
62562: PPUSH
// if not unit then
62563: LD_VAR 0 1
62567: NOT
62568: IFFALSE 62572
// exit ;
62570: GO 62843
// side := GetSide ( unit ) ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 255
62586: ST_TO_ADDR
// x := GetX ( unit ) ;
62587: LD_ADDR_VAR 0 5
62591: PUSH
62592: LD_VAR 0 1
62596: PPUSH
62597: CALL_OW 250
62601: ST_TO_ADDR
// y := GetY ( unit ) ;
62602: LD_ADDR_VAR 0 6
62606: PUSH
62607: LD_VAR 0 1
62611: PPUSH
62612: CALL_OW 251
62616: ST_TO_ADDR
// r := 8 ;
62617: LD_ADDR_VAR 0 4
62621: PUSH
62622: LD_INT 8
62624: ST_TO_ADDR
// if x - r < 0 then
62625: LD_VAR 0 5
62629: PUSH
62630: LD_VAR 0 4
62634: MINUS
62635: PUSH
62636: LD_INT 0
62638: LESS
62639: IFFALSE 62651
// min_x := 0 else
62641: LD_ADDR_VAR 0 7
62645: PUSH
62646: LD_INT 0
62648: ST_TO_ADDR
62649: GO 62667
// min_x := x - r ;
62651: LD_ADDR_VAR 0 7
62655: PUSH
62656: LD_VAR 0 5
62660: PUSH
62661: LD_VAR 0 4
62665: MINUS
62666: ST_TO_ADDR
// if y - r < 0 then
62667: LD_VAR 0 6
62671: PUSH
62672: LD_VAR 0 4
62676: MINUS
62677: PUSH
62678: LD_INT 0
62680: LESS
62681: IFFALSE 62693
// min_y := 0 else
62683: LD_ADDR_VAR 0 8
62687: PUSH
62688: LD_INT 0
62690: ST_TO_ADDR
62691: GO 62709
// min_y := y - r ;
62693: LD_ADDR_VAR 0 8
62697: PUSH
62698: LD_VAR 0 6
62702: PUSH
62703: LD_VAR 0 4
62707: MINUS
62708: ST_TO_ADDR
// max_x := x + r ;
62709: LD_ADDR_VAR 0 9
62713: PUSH
62714: LD_VAR 0 5
62718: PUSH
62719: LD_VAR 0 4
62723: PLUS
62724: ST_TO_ADDR
// max_y := y + r ;
62725: LD_ADDR_VAR 0 10
62729: PUSH
62730: LD_VAR 0 6
62734: PUSH
62735: LD_VAR 0 4
62739: PLUS
62740: ST_TO_ADDR
// for _x = min_x to max_x do
62741: LD_ADDR_VAR 0 11
62745: PUSH
62746: DOUBLE
62747: LD_VAR 0 7
62751: DEC
62752: ST_TO_ADDR
62753: LD_VAR 0 9
62757: PUSH
62758: FOR_TO
62759: IFFALSE 62841
// for _y = min_y to max_y do
62761: LD_ADDR_VAR 0 12
62765: PUSH
62766: DOUBLE
62767: LD_VAR 0 8
62771: DEC
62772: ST_TO_ADDR
62773: LD_VAR 0 10
62777: PUSH
62778: FOR_TO
62779: IFFALSE 62837
// begin if not ValidHex ( _x , _y ) then
62781: LD_VAR 0 11
62785: PPUSH
62786: LD_VAR 0 12
62790: PPUSH
62791: CALL_OW 488
62795: NOT
62796: IFFALSE 62800
// continue ;
62798: GO 62778
// if MineAtPos ( _x , _y ) then
62800: LD_VAR 0 11
62804: PPUSH
62805: LD_VAR 0 12
62809: PPUSH
62810: CALL_OW 458
62814: IFFALSE 62835
// ViewMineAtPos ( _x , _y , side ) ;
62816: LD_VAR 0 11
62820: PPUSH
62821: LD_VAR 0 12
62825: PPUSH
62826: LD_VAR 0 3
62830: PPUSH
62831: CALL_OW 457
// end ;
62835: GO 62778
62837: POP
62838: POP
62839: GO 62758
62841: POP
62842: POP
// end ;
62843: LD_VAR 0 2
62847: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
62854: PPUSH
62855: PPUSH
62856: PPUSH
// if not units then
62857: LD_VAR 0 1
62861: NOT
62862: IFFALSE 62866
// exit ;
62864: GO 63330
// scaners := [ ] ;
62866: LD_ADDR_VAR 0 6
62870: PUSH
62871: EMPTY
62872: ST_TO_ADDR
// for i in units do
62873: LD_ADDR_VAR 0 3
62877: PUSH
62878: LD_VAR 0 1
62882: PUSH
62883: FOR_IN
62884: IFFALSE 63041
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62886: LD_VAR 0 3
62890: PPUSH
62891: CALL_OW 264
62895: PUSH
62896: LD_INT 11
62898: NONEQUAL
62899: IFTRUE 62913
62901: PUSH
62902: LD_VAR 0 3
62906: PPUSH
62907: CALL_OW 302
62911: NOT
62912: OR
62913: IFTRUE 62930
62915: PUSH
62916: LD_VAR 0 3
62920: PPUSH
62921: CALL_OW 110
62925: PUSH
62926: LD_INT 502
62928: EQUAL
62929: OR
62930: IFFALSE 62934
// continue ;
62932: GO 62883
// ComStop ( i ) ;
62934: LD_VAR 0 3
62938: PPUSH
62939: CALL_OW 141
// x := GetX ( i ) ;
62943: LD_ADDR_VAR 0 4
62947: PUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: CALL_OW 250
62957: ST_TO_ADDR
// y := GetY ( i ) ;
62958: LD_ADDR_VAR 0 5
62962: PUSH
62963: LD_VAR 0 3
62967: PPUSH
62968: CALL_OW 251
62972: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62973: LD_VAR 0 3
62977: PPUSH
62978: CALL_OW 255
62982: PUSH
62983: LD_OWVAR 2
62987: EQUAL
62988: IFFALSE 63007
// PlaySoundXY ( x , y , mineDetector ) ;
62990: LD_VAR 0 4
62994: PPUSH
62995: LD_VAR 0 5
62999: PPUSH
63000: LD_STRING mineDetector
63002: PPUSH
63003: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63007: LD_ADDR_VAR 0 6
63011: PUSH
63012: LD_VAR 0 6
63016: PPUSH
63017: LD_VAR 0 3
63021: PPUSH
63022: CALL 41158 0 2
63026: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63027: LD_VAR 0 3
63031: PPUSH
63032: LD_INT 502
63034: PPUSH
63035: CALL_OW 109
// end ;
63039: GO 62883
63041: POP
63042: POP
// if not scaners then
63043: LD_VAR 0 6
63047: NOT
63048: IFFALSE 63052
// exit ;
63050: GO 63330
// wait ( 3 ) ;
63052: LD_INT 3
63054: PPUSH
63055: CALL_OW 67
// timer := 6 ;
63059: LD_ADDR_VAR 0 7
63063: PUSH
63064: LD_INT 6
63066: ST_TO_ADDR
// repeat for i in scaners do
63067: LD_ADDR_VAR 0 3
63071: PUSH
63072: LD_VAR 0 6
63076: PUSH
63077: FOR_IN
63078: IFFALSE 63228
// begin side := GetSide ( i ) ;
63080: LD_ADDR_VAR 0 8
63084: PUSH
63085: LD_VAR 0 3
63089: PPUSH
63090: CALL_OW 255
63094: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63095: LD_VAR 0 3
63099: PPUSH
63100: CALL_OW 302
63104: NOT
63105: IFTRUE 63118
63107: PUSH
63108: LD_VAR 0 3
63112: PPUSH
63113: CALL_OW 314
63117: OR
63118: IFTRUE 63149
63120: PUSH
63121: LD_VAR 0 3
63125: PPUSH
63126: CALL_OW 263
63130: PUSH
63131: LD_INT 1
63133: EQUAL
63134: IFFALSE 63148
63136: PUSH
63137: LD_VAR 0 3
63141: PPUSH
63142: CALL_OW 311
63146: NOT
63147: AND
63148: OR
63149: IFFALSE 63193
// begin SetUnitDisplayNumber ( i , 0 ) ;
63151: LD_VAR 0 3
63155: PPUSH
63156: LD_INT 0
63158: PPUSH
63159: CALL_OW 505
// SetTag ( i , 0 ) ;
63163: LD_VAR 0 3
63167: PPUSH
63168: LD_INT 0
63170: PPUSH
63171: CALL_OW 109
// scaners := scaners diff i ;
63175: LD_ADDR_VAR 0 6
63179: PUSH
63180: LD_VAR 0 6
63184: PUSH
63185: LD_VAR 0 3
63189: DIFF
63190: ST_TO_ADDR
// continue ;
63191: GO 63077
// end ; if side in [ your_side , 9 ] then
63193: LD_VAR 0 8
63197: PUSH
63198: LD_OWVAR 2
63202: PUSH
63203: LD_INT 9
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: IN
63210: IFFALSE 63226
// SetUnitDisplayNumber ( i , timer ) ;
63212: LD_VAR 0 3
63216: PPUSH
63217: LD_VAR 0 7
63221: PPUSH
63222: CALL_OW 505
// end ;
63226: GO 63077
63228: POP
63229: POP
// if not scaners then
63230: LD_VAR 0 6
63234: NOT
63235: IFFALSE 63239
// exit ;
63237: GO 63330
// timer := Dec ( timer ) ;
63239: LD_ADDR_VAR 0 7
63243: PUSH
63244: LD_VAR 0 7
63248: PPUSH
63249: CALL 42553 0 1
63253: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63254: LD_INT 35
63256: PPUSH
63257: CALL_OW 67
// until timer = 0 ;
63261: LD_VAR 0 7
63265: PUSH
63266: LD_INT 0
63268: EQUAL
63269: IFFALSE 63067
// if not scaners then
63271: LD_VAR 0 6
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63330
// for i in scaners do
63280: LD_ADDR_VAR 0 3
63284: PUSH
63285: LD_VAR 0 6
63289: PUSH
63290: FOR_IN
63291: IFFALSE 63328
// begin SetUnitDisplayNumber ( i , 0 ) ;
63293: LD_VAR 0 3
63297: PPUSH
63298: LD_INT 0
63300: PPUSH
63301: CALL_OW 505
// SetTag ( i , 0 ) ;
63305: LD_VAR 0 3
63309: PPUSH
63310: LD_INT 0
63312: PPUSH
63313: CALL_OW 109
// RevealDetectorMine ( i ) ;
63317: LD_VAR 0 3
63321: PPUSH
63322: CALL 62550 0 1
// end ;
63326: GO 63290
63328: POP
63329: POP
// end ;
63330: LD_VAR 0 2
63334: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63335: LD_INT 0
63337: PPUSH
// if p1 = mine_detector_mode then
63338: LD_VAR 0 2
63342: PUSH
63343: LD_INT 103
63345: EQUAL
63346: IFFALSE 63357
// DetectMine ( units ) ;
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL 62848 0 1
// end ; end_of_file
63357: LD_VAR 0 7
63361: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63362: PPOPN 6
63364: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63365: LD_INT 0
63367: PPUSH
// begin if not units then
63368: LD_VAR 0 1
63372: NOT
63373: IFFALSE 63377
// exit ;
63375: GO 63411
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_VAR 0 2
63386: PPUSH
63387: LD_VAR 0 3
63391: PPUSH
63392: LD_VAR 0 4
63396: PPUSH
63397: LD_VAR 0 5
63401: PPUSH
63402: LD_VAR 0 6
63406: PPUSH
63407: CALL 63335 0 6
// end ;
63411: PPOPN 7
63413: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63414: LD_EXP 1
63418: PUSH
63419: LD_INT 4
63421: EQUAL
63422: IFFALSE 63458
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63424: LD_STRING setGameDifficulty(
63426: PUSH
63427: LD_OWVAR 67
63431: STR
63432: PUSH
63433: LD_STRING )
63435: STR
63436: PPUSH
63437: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63441: LD_STRING displayDifficulty(
63443: PUSH
63444: LD_OWVAR 67
63448: STR
63449: PUSH
63450: LD_STRING )
63452: STR
63453: PPUSH
63454: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63458: CALL 63487 0 0
// end ; end_of_file
63462: PPOPN 1
63464: END
// every 0 0$1 do
63465: GO 63467
63467: DISABLE
// begin enable ;
63468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63469: LD_STRING updateTimer(
63471: PUSH
63472: LD_OWVAR 1
63476: STR
63477: PUSH
63478: LD_STRING );
63480: STR
63481: PPUSH
63482: CALL_OW 559
// end ;
63486: END
// export function SOS_MapStart ( ) ; begin
63487: LD_INT 0
63489: PPUSH
// UpdateFactoryWaypoints ( ) ;
63490: CALL 64428 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63494: CALL 64680 0 0
// ParseMultiDataToLua ( ) ;
63498: CALL 64827 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63502: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63504: PPUSH
63505: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63509: LD_STRING setSpecLogoNumber(
63511: PUSH
63512: LD_INT 2
63514: STR
63515: PUSH
63516: LD_STRING ,
63518: STR
63519: PUSH
63520: LD_INT 1
63522: STR
63523: PUSH
63524: LD_STRING )
63526: STR
63527: PPUSH
63528: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63532: LD_STRING setSpecLogoNumber(
63534: PUSH
63535: LD_INT 3
63537: STR
63538: PUSH
63539: LD_STRING ,
63541: STR
63542: PUSH
63543: LD_INT 2
63545: STR
63546: PUSH
63547: LD_STRING )
63549: STR
63550: PPUSH
63551: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63555: LD_STRING setSpecLogoNumber(
63557: PUSH
63558: LD_INT 4
63560: STR
63561: PUSH
63562: LD_STRING ,
63564: STR
63565: PUSH
63566: LD_INT 3
63568: STR
63569: PUSH
63570: LD_STRING )
63572: STR
63573: PPUSH
63574: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63578: LD_STRING setSpecLogoNumber(
63580: PUSH
63581: LD_INT 5
63583: STR
63584: PUSH
63585: LD_STRING ,
63587: STR
63588: PUSH
63589: LD_INT 4
63591: STR
63592: PUSH
63593: LD_STRING )
63595: STR
63596: PPUSH
63597: CALL_OW 559
// end ;
63601: LD_VAR 0 1
63605: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63606: LD_INT 0
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
63612: PPUSH
63613: PPUSH
63614: PPUSH
63615: PPUSH
63616: PPUSH
// for i := 1 to 8 do
63617: LD_ADDR_VAR 0 2
63621: PUSH
63622: DOUBLE
63623: LD_INT 1
63625: DEC
63626: ST_TO_ADDR
63627: LD_INT 8
63629: PUSH
63630: FOR_TO
63631: IFFALSE 64016
// begin if mpSidePositions [ i ] then
63633: LD_EXP 5
63637: PUSH
63638: LD_VAR 0 2
63642: ARRAY
63643: IFFALSE 64014
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63645: LD_ADDR_VAR 0 7
63649: PUSH
63650: LD_INT 22
63652: PUSH
63653: LD_VAR 0 2
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 21
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PPUSH
63676: CALL_OW 69
63680: PPUSH
63681: CALL 5182 0 1
63685: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63686: LD_ADDR_VAR 0 9
63690: PUSH
63691: LD_INT 22
63693: PUSH
63694: LD_VAR 0 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: LD_INT 30
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 30
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PPUSH
63735: CALL_OW 69
63739: ST_TO_ADDR
// crates := 0 ;
63740: LD_ADDR_VAR 0 4
63744: PUSH
63745: LD_INT 0
63747: ST_TO_ADDR
// oil := 0 ;
63748: LD_ADDR_VAR 0 5
63752: PUSH
63753: LD_INT 0
63755: ST_TO_ADDR
// sib := 0 ;
63756: LD_ADDR_VAR 0 6
63760: PUSH
63761: LD_INT 0
63763: ST_TO_ADDR
// if bases then
63764: LD_VAR 0 9
63768: IFFALSE 63874
// begin for j in bases do
63770: LD_ADDR_VAR 0 3
63774: PUSH
63775: LD_VAR 0 9
63779: PUSH
63780: FOR_IN
63781: IFFALSE 63872
// begin base := GetBase ( j ) ;
63783: LD_ADDR_VAR 0 8
63787: PUSH
63788: LD_VAR 0 3
63792: PPUSH
63793: CALL_OW 274
63797: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: LD_VAR 0 4
63807: PUSH
63808: LD_VAR 0 8
63812: PPUSH
63813: LD_INT 1
63815: PPUSH
63816: CALL_OW 275
63820: PLUS
63821: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: LD_VAR 0 5
63831: PUSH
63832: LD_VAR 0 8
63836: PPUSH
63837: LD_INT 2
63839: PPUSH
63840: CALL_OW 275
63844: PLUS
63845: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_VAR 0 6
63855: PUSH
63856: LD_VAR 0 8
63860: PPUSH
63861: LD_INT 3
63863: PPUSH
63864: CALL_OW 275
63868: PLUS
63869: ST_TO_ADDR
// end ;
63870: GO 63780
63872: POP
63873: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63874: LD_STRING setSpecText(
63876: PUSH
63877: LD_VAR 0 2
63881: STR
63882: PUSH
63883: LD_STRING ,
63885: STR
63886: PUSH
63887: LD_INT 2
63889: STR
63890: PUSH
63891: LD_STRING ,
63893: STR
63894: PUSH
63895: LD_VAR 0 4
63899: STR
63900: PUSH
63901: LD_STRING )
63903: STR
63904: PPUSH
63905: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63909: LD_STRING setSpecText(
63911: PUSH
63912: LD_VAR 0 2
63916: STR
63917: PUSH
63918: LD_STRING ,
63920: STR
63921: PUSH
63922: LD_INT 3
63924: STR
63925: PUSH
63926: LD_STRING ,
63928: STR
63929: PUSH
63930: LD_VAR 0 5
63934: STR
63935: PUSH
63936: LD_STRING )
63938: STR
63939: PPUSH
63940: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63944: LD_STRING setSpecText(
63946: PUSH
63947: LD_VAR 0 2
63951: STR
63952: PUSH
63953: LD_STRING ,
63955: STR
63956: PUSH
63957: LD_INT 4
63959: STR
63960: PUSH
63961: LD_STRING ,
63963: STR
63964: PUSH
63965: LD_VAR 0 6
63969: STR
63970: PUSH
63971: LD_STRING )
63973: STR
63974: PPUSH
63975: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63979: LD_STRING setSpecText(
63981: PUSH
63982: LD_VAR 0 2
63986: STR
63987: PUSH
63988: LD_STRING ,
63990: STR
63991: PUSH
63992: LD_INT 5
63994: STR
63995: PUSH
63996: LD_STRING ,
63998: STR
63999: PUSH
64000: LD_VAR 0 7
64004: STR
64005: PUSH
64006: LD_STRING )
64008: STR
64009: PPUSH
64010: CALL_OW 559
// end ; end ;
64014: GO 63630
64016: POP
64017: POP
// end ;
64018: LD_VAR 0 1
64022: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64023: LD_INT 2
64025: PUSH
64026: LD_INT 30
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 30
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: PPUSH
64051: CALL_OW 69
64055: IFFALSE 64065
64057: GO 64059
64059: DISABLE
// begin enable ;
64060: ENABLE
// UpdateSpectatorBar ;
64061: CALL 63606 0 0
// end ;
64065: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64066: LD_INT 0
64068: PPUSH
// end ;
64069: LD_VAR 0 12
64073: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64074: LD_INT 0
64076: PPUSH
64077: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64078: LD_VAR 0 1
64082: NOT
64083: IFTRUE 64102
64085: PUSH
64086: LD_VAR 0 2
64090: PPUSH
64091: LD_VAR 0 3
64095: PPUSH
64096: CALL_OW 488
64100: NOT
64101: OR
64102: IFTRUE 64137
64104: PUSH
64105: LD_VAR 0 1
64109: PPUSH
64110: CALL_OW 266
64114: PUSH
64115: LD_INT 3
64117: NONEQUAL
64118: IFFALSE 64136
64120: PUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: CALL_OW 247
64130: PUSH
64131: LD_INT 1
64133: EQUAL
64134: NOT
64135: AND
64136: OR
64137: IFFALSE 64141
// exit ;
64139: GO 64423
// if GetType ( factory ) = unit_human then
64141: LD_VAR 0 1
64145: PPUSH
64146: CALL_OW 247
64150: PUSH
64151: LD_INT 1
64153: EQUAL
64154: IFFALSE 64171
// factory := IsInUnit ( factory ) ;
64156: LD_ADDR_VAR 0 1
64160: PUSH
64161: LD_VAR 0 1
64165: PPUSH
64166: CALL_OW 310
64170: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64171: LD_VAR 0 1
64175: PPUSH
64176: CALL_OW 266
64180: PUSH
64181: LD_INT 3
64183: NONEQUAL
64184: IFFALSE 64188
// exit ;
64186: GO 64423
// for i := 1 to Count ( factoryWaypoints ) do
64188: LD_ADDR_VAR 0 5
64192: PUSH
64193: DOUBLE
64194: LD_INT 1
64196: DEC
64197: ST_TO_ADDR
64198: LD_EXP 59
64202: PPUSH
64203: CALL 5182 0 1
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64371
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64211: LD_VAR 0 2
64215: PPUSH
64216: LD_VAR 0 3
64220: PPUSH
64221: CALL_OW 428
64225: PUSH
64226: LD_EXP 59
64230: PUSH
64231: LD_VAR 0 5
64235: ARRAY
64236: PUSH
64237: LD_INT 2
64239: ARRAY
64240: EQUAL
64241: IFFALSE 64273
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64243: LD_ADDR_EXP 59
64247: PUSH
64248: LD_EXP 59
64252: PPUSH
64253: LD_VAR 0 5
64257: PPUSH
64258: CALL_OW 3
64262: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64263: CALL 64428 0 0
// exit ;
64267: POP
64268: POP
64269: GO 64423
// end else
64271: GO 64369
// if factory = factoryWaypoints [ i ] [ 2 ] then
64273: LD_VAR 0 1
64277: PUSH
64278: LD_EXP 59
64282: PUSH
64283: LD_VAR 0 5
64287: ARRAY
64288: PUSH
64289: LD_INT 2
64291: ARRAY
64292: EQUAL
64293: IFFALSE 64369
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64295: LD_ADDR_EXP 59
64299: PUSH
64300: LD_EXP 59
64304: PPUSH
64305: LD_VAR 0 5
64309: PPUSH
64310: CALL_OW 3
64314: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64315: LD_ADDR_EXP 59
64319: PUSH
64320: LD_EXP 59
64324: PPUSH
64325: LD_VAR 0 1
64329: PPUSH
64330: CALL_OW 255
64334: PUSH
64335: LD_VAR 0 1
64339: PUSH
64340: LD_VAR 0 2
64344: PUSH
64345: LD_VAR 0 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: PPUSH
64356: CALL 41158 0 2
64360: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64361: CALL 64428 0 0
// exit ;
64365: POP
64366: POP
64367: GO 64423
// end ; end ;
64369: GO 64208
64371: POP
64372: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64373: LD_ADDR_EXP 59
64377: PUSH
64378: LD_EXP 59
64382: PPUSH
64383: LD_VAR 0 1
64387: PPUSH
64388: CALL_OW 255
64392: PUSH
64393: LD_VAR 0 1
64397: PUSH
64398: LD_VAR 0 2
64402: PUSH
64403: LD_VAR 0 3
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: PPUSH
64414: CALL 41158 0 2
64418: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64419: CALL 64428 0 0
// end ;
64423: LD_VAR 0 4
64427: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64428: LD_INT 0
64430: PPUSH
64431: PPUSH
64432: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64433: LD_STRING resetFactoryWaypoint();
64435: PPUSH
64436: CALL_OW 559
// if factoryWaypoints then
64440: LD_EXP 59
64444: IFFALSE 64565
// begin list := factoryWaypoints ;
64446: LD_ADDR_VAR 0 3
64450: PUSH
64451: LD_EXP 59
64455: ST_TO_ADDR
// for i := 1 to list do
64456: LD_ADDR_VAR 0 2
64460: PUSH
64461: DOUBLE
64462: LD_INT 1
64464: DEC
64465: ST_TO_ADDR
64466: LD_VAR 0 3
64470: PUSH
64471: FOR_TO
64472: IFFALSE 64563
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64474: LD_STRING setFactoryWaypointXY(
64476: PUSH
64477: LD_VAR 0 3
64481: PUSH
64482: LD_VAR 0 2
64486: ARRAY
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: STR
64492: PUSH
64493: LD_STRING ,
64495: STR
64496: PUSH
64497: LD_VAR 0 3
64501: PUSH
64502: LD_VAR 0 2
64506: ARRAY
64507: PUSH
64508: LD_INT 2
64510: ARRAY
64511: STR
64512: PUSH
64513: LD_STRING ,
64515: STR
64516: PUSH
64517: LD_VAR 0 3
64521: PUSH
64522: LD_VAR 0 2
64526: ARRAY
64527: PUSH
64528: LD_INT 3
64530: ARRAY
64531: STR
64532: PUSH
64533: LD_STRING ,
64535: STR
64536: PUSH
64537: LD_VAR 0 3
64541: PUSH
64542: LD_VAR 0 2
64546: ARRAY
64547: PUSH
64548: LD_INT 4
64550: ARRAY
64551: STR
64552: PUSH
64553: LD_STRING )
64555: STR
64556: PPUSH
64557: CALL_OW 559
64561: GO 64471
64563: POP
64564: POP
// end ; end ;
64565: LD_VAR 0 1
64569: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64570: LD_INT 0
64572: PPUSH
// if HexInfo ( x , y ) = warehouse then
64573: LD_VAR 0 2
64577: PPUSH
64578: LD_VAR 0 3
64582: PPUSH
64583: CALL_OW 428
64587: PUSH
64588: LD_VAR 0 1
64592: EQUAL
64593: IFFALSE 64620
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64595: LD_ADDR_EXP 61
64599: PUSH
64600: LD_EXP 61
64604: PPUSH
64605: LD_VAR 0 1
64609: PPUSH
64610: LD_INT 0
64612: PPUSH
64613: CALL_OW 1
64617: ST_TO_ADDR
64618: GO 64671
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64620: LD_ADDR_EXP 61
64624: PUSH
64625: LD_EXP 61
64629: PPUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 255
64644: PUSH
64645: LD_VAR 0 1
64649: PUSH
64650: LD_VAR 0 2
64654: PUSH
64655: LD_VAR 0 3
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: PPUSH
64666: CALL_OW 1
64670: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64671: CALL 64680 0 0
// end ;
64675: LD_VAR 0 4
64679: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64680: LD_INT 0
64682: PPUSH
64683: PPUSH
64684: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64685: LD_STRING resetWarehouseGatheringPoints();
64687: PPUSH
64688: CALL_OW 559
// if warehouseGatheringPoints then
64692: LD_EXP 61
64696: IFFALSE 64822
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64698: LD_ADDR_VAR 0 3
64702: PUSH
64703: LD_EXP 61
64707: PPUSH
64708: CALL 45092 0 1
64712: ST_TO_ADDR
// for i := 1 to list do
64713: LD_ADDR_VAR 0 2
64717: PUSH
64718: DOUBLE
64719: LD_INT 1
64721: DEC
64722: ST_TO_ADDR
64723: LD_VAR 0 3
64727: PUSH
64728: FOR_TO
64729: IFFALSE 64820
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64731: LD_STRING setWarehouseGatheringPointXY(
64733: PUSH
64734: LD_VAR 0 3
64738: PUSH
64739: LD_VAR 0 2
64743: ARRAY
64744: PUSH
64745: LD_INT 1
64747: ARRAY
64748: STR
64749: PUSH
64750: LD_STRING ,
64752: STR
64753: PUSH
64754: LD_VAR 0 3
64758: PUSH
64759: LD_VAR 0 2
64763: ARRAY
64764: PUSH
64765: LD_INT 2
64767: ARRAY
64768: STR
64769: PUSH
64770: LD_STRING ,
64772: STR
64773: PUSH
64774: LD_VAR 0 3
64778: PUSH
64779: LD_VAR 0 2
64783: ARRAY
64784: PUSH
64785: LD_INT 3
64787: ARRAY
64788: STR
64789: PUSH
64790: LD_STRING ,
64792: STR
64793: PUSH
64794: LD_VAR 0 3
64798: PUSH
64799: LD_VAR 0 2
64803: ARRAY
64804: PUSH
64805: LD_INT 4
64807: ARRAY
64808: STR
64809: PUSH
64810: LD_STRING )
64812: STR
64813: PPUSH
64814: CALL_OW 559
64818: GO 64728
64820: POP
64821: POP
// end ; end ;
64822: LD_VAR 0 1
64826: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64827: LD_INT 0
64829: PPUSH
64830: PPUSH
// if not mpSidePositions then
64831: LD_EXP 5
64835: NOT
64836: IFFALSE 64840
// exit ;
64838: GO 64911
// result :=  ;
64840: LD_ADDR_VAR 0 1
64844: PUSH
64845: LD_STRING 
64847: ST_TO_ADDR
// for i := 1 to 8 do
64848: LD_ADDR_VAR 0 2
64852: PUSH
64853: DOUBLE
64854: LD_INT 1
64856: DEC
64857: ST_TO_ADDR
64858: LD_INT 8
64860: PUSH
64861: FOR_TO
64862: IFFALSE 64892
// begin result := result & mpSidePositions [ i ] & ; ;
64864: LD_ADDR_VAR 0 1
64868: PUSH
64869: LD_VAR 0 1
64873: PUSH
64874: LD_EXP 5
64878: PUSH
64879: LD_VAR 0 2
64883: ARRAY
64884: STR
64885: PUSH
64886: LD_STRING ;
64888: STR
64889: ST_TO_ADDR
// end ;
64890: GO 64861
64892: POP
64893: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64894: LD_STRING setMultiplayerRealPosition("
64896: PUSH
64897: LD_VAR 0 1
64901: STR
64902: PUSH
64903: LD_STRING ");
64905: STR
64906: PPUSH
64907: CALL_OW 559
// end ; end_of_file
64911: LD_VAR 0 1
64915: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
64916: LD_EXP 37
64920: IFFALSE 64963
64922: GO 64924
64924: DISABLE
64925: LD_INT 0
64927: PPUSH
// begin for i := 1 to 8 do
64928: LD_ADDR_VAR 0 1
64932: PUSH
64933: DOUBLE
64934: LD_INT 1
64936: DEC
64937: ST_TO_ADDR
64938: LD_INT 8
64940: PUSH
64941: FOR_TO
64942: IFFALSE 64961
// SetRestrict ( b_depot , i , state_disabled ) ;
64944: LD_INT 0
64946: PPUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: LD_INT 0
64954: PPUSH
64955: CALL_OW 324
64959: GO 64941
64961: POP
64962: POP
// end ;
64963: PPOPN 1
64965: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
64966: LD_EXP 37
64970: IFFALSE 64978
64972: PUSH
64973: CALL 65188 0 0
64977: AND
64978: IFFALSE 64986
64980: PUSH
64981: LD_OWVAR 4
64985: AND
64986: IFFALSE 65185
64988: GO 64990
64990: DISABLE
64991: LD_INT 0
64993: PPUSH
64994: PPUSH
// begin canWin := false ;
64995: LD_ADDR_VAR 0 2
64999: PUSH
65000: LD_INT 0
65002: ST_TO_ADDR
// if not HasPower ( your_side ) then
65003: LD_OWVAR 2
65007: PPUSH
65008: CALL 65230 0 1
65012: NOT
65013: IFFALSE 65024
// begin Multiplayer_Loose_Message ;
65015: CALL_OW 521
// enable ( mpLose ) ;
65019: LD_INT 102
65021: ENABLE_MARKED
// end else
65022: GO 65185
// begin canWin := true ;
65024: LD_ADDR_VAR 0 2
65028: PUSH
65029: LD_INT 1
65031: ST_TO_ADDR
// for i := 1 to 8 do
65032: LD_ADDR_VAR 0 1
65036: PUSH
65037: DOUBLE
65038: LD_INT 1
65040: DEC
65041: ST_TO_ADDR
65042: LD_INT 8
65044: PUSH
65045: FOR_TO
65046: IFFALSE 65171
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65048: LD_EXP 5
65052: PUSH
65053: LD_VAR 0 1
65057: ARRAY
65058: IFFALSE 65071
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: CALL_OW 108
65070: AND
65071: IFFALSE 65085
65073: PUSH
65074: LD_VAR 0 1
65078: PUSH
65079: LD_OWVAR 2
65083: NONEQUAL
65084: AND
65085: IFFALSE 65169
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65087: LD_EXP 6
65091: PUSH
65092: LD_VAR 0 1
65096: ARRAY
65097: NOT
65098: IFTRUE 65146
65100: PUSH
65101: LD_EXP 6
65105: PUSH
65106: LD_VAR 0 1
65110: ARRAY
65111: PUSH
65112: LD_EXP 6
65116: PUSH
65117: LD_OWVAR 2
65121: ARRAY
65122: NONEQUAL
65123: IFFALSE 65145
65125: PUSH
65126: LD_OWVAR 2
65130: PPUSH
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 81
65140: PUSH
65141: LD_INT 1
65143: NONEQUAL
65144: AND
65145: OR
65146: IFFALSE 65169
// if HasPower ( i ) then
65148: LD_VAR 0 1
65152: PPUSH
65153: CALL 65230 0 1
65157: IFFALSE 65169
// begin canWin := false ;
65159: LD_ADDR_VAR 0 2
65163: PUSH
65164: LD_INT 0
65166: ST_TO_ADDR
// break ;
65167: GO 65171
// end ;
65169: GO 65045
65171: POP
65172: POP
// if canWin then
65173: LD_VAR 0 2
65177: IFFALSE 65184
// enable ( mpWin ) else
65179: LD_INT 101
65181: ENABLE_MARKED
65182: GO 65185
// enable ;
65184: ENABLE
// end ; end ;
65185: PPOPN 2
65187: END
// function CanWinLoose ; begin
65188: LD_INT 0
65190: PPUSH
// result := true ;
65191: LD_ADDR_VAR 0 1
65195: PUSH
65196: LD_INT 1
65198: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65199: CALL_OW 531
65203: IFFALSE 65215
65205: PUSH
65206: CALL_OW 519
65210: PUSH
65211: LD_INT 1
65213: GREATER
65214: AND
65215: IFFALSE 65225
// result := false ;
65217: LD_ADDR_VAR 0 1
65221: PUSH
65222: LD_INT 0
65224: ST_TO_ADDR
// end ;
65225: LD_VAR 0 1
65229: RET
// function HasPower ( i ) ; begin
65230: LD_INT 0
65232: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65233: LD_INT 22
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: LD_INT 30
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 30
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PPUSH
65277: CALL_OW 69
65281: NOT
65282: IFFALSE 65286
// exit ;
65284: GO 65351
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65286: LD_ADDR_VAR 0 2
65290: PUSH
65291: LD_INT 22
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 21
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 33
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 33
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 69
65350: ST_TO_ADDR
// end ;
65351: LD_VAR 0 2
65355: RET
