// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45664 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45971 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 9
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeSurvival ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 2
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 18
 891: PUSH
 892: LD_INT 19
 894: PUSH
 895: LD_INT 20
 897: PUSH
 898: LD_INT 21
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 23
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 64
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 40
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45119 0 2
1411: PUSH
1412: LD_INT 41
1414: PPUSH
1415: LD_INT 5
1417: PPUSH
1418: CALL 45119 0 2
1422: PUSH
1423: LD_INT 42
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45119 0 2
1433: PUSH
1434: LD_INT 43
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45119 0 2
1444: PUSH
1445: LD_INT 44
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 45119 0 2
1455: PUSH
1456: LD_INT 45
1458: PPUSH
1459: LD_INT 2
1461: PPUSH
1462: CALL 45119 0 2
1466: PUSH
1467: LD_INT 46
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 45119 0 2
1477: PUSH
1478: LD_INT 47
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 45119 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 4991 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 24
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 44952 0 2
1667: PUSH
1668: LD_INT 25
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 44952 0 2
1680: PUSH
1681: LD_INT 26
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 44952 0 2
1693: PUSH
1694: LD_INT 27
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 44952 0 2
1706: PUSH
1707: LD_INT 28
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 44952 0 2
1719: PUSH
1720: LD_INT 29
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 44952 0 2
1732: PUSH
1733: LD_INT 30
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 44952 0 2
1745: PUSH
1746: LD_INT 31
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 44952 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 32
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 44952 0 2
1810: PUSH
1811: LD_INT 33
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 44952 0 2
1823: PUSH
1824: LD_INT 34
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 44952 0 2
1836: PUSH
1837: LD_INT 35
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 44952 0 2
1849: PUSH
1850: LD_INT 36
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 44952 0 2
1862: PUSH
1863: LD_INT 37
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 44952 0 2
1875: PUSH
1876: LD_INT 38
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 44952 0 2
1888: PUSH
1889: LD_INT 39
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 44952 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 48
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45119 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 49
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45119 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 65
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45119 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 50
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 45119 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 45119 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 66
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL 45119 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 52
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45119 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 53
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45119 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 67
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45119 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 54
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45119 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 55
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 45119 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 68
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45119 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 56
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 45119 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 57
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 45119 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 69
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 45119 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 58
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 45119 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 59
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 45119 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 70
2232: PPUSH
2233: LD_INT 5
2235: PPUSH
2236: CALL 45119 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 60
2252: PPUSH
2253: LD_INT 4
2255: PPUSH
2256: CALL 45119 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 61
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: CALL 45119 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 71
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 45119 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 62
2302: PPUSH
2303: LD_INT 4
2305: PPUSH
2306: CALL 45119 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 63
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: CALL 45119 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 72
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 45119 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2814
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 18
2569: PUSH
2570: LD_INT 19
2572: PUSH
2573: LD_INT 20
2575: PUSH
2576: LD_INT 21
2578: PUSH
2579: LD_INT 22
2581: PUSH
2582: LD_INT 23
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// repeat wait ( time ) ;
2695: LD_VAR 0 5
2699: PPUSH
2700: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 5
2714: PPUSH
2715: CALL_OW 12
2719: ST_TO_ADDR
// for i in areas do
2720: LD_ADDR_VAR 0 1
2724: PUSH
2725: LD_VAR 0 4
2729: PUSH
2730: FOR_IN
2731: IFFALSE 2770
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2733: LD_VAR 0 1
2737: PPUSH
2738: LD_INT 1
2740: PPUSH
2741: CALL_OW 287
2745: PUSH
2746: LD_INT 20
2748: LESS
2749: IFFALSE 2768
// begin CreateCratesArea ( x , i , true ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_INT 1
2763: PPUSH
2764: CALL_OW 55
// end ; end ;
2768: GO 2730
2770: POP
2771: POP
// time := time + delayTime ;
2772: LD_ADDR_VAR 0 5
2776: PUSH
2777: LD_VAR 0 5
2781: PUSH
2782: LD_VAR 0 7
2786: PLUS
2787: ST_TO_ADDR
// if time > maxTime then
2788: LD_VAR 0 5
2792: PUSH
2793: LD_VAR 0 8
2797: GREATER
2798: IFFALSE 2810
// time := normalTime ;
2800: LD_ADDR_VAR 0 5
2804: PUSH
2805: LD_VAR 0 6
2809: ST_TO_ADDR
// until false ;
2810: LD_INT 0
2812: IFFALSE 2695
// end ; end_of_file
2814: PPOPN 8
2816: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL 69270 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL 50256 0 1
// end ;
2835: PPOPN 1
2837: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL 69287 0 1
// end ;
2847: PPOPN 1
2849: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL 69328 0 2
2864: PPOPN 2
2866: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2867: LD_VAR 0 1
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL 50755 0 3
2886: PPOPN 3
2888: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
// if exist_mode then
2893: LD_VAR 0 2
2897: IFFALSE 2922
// unit := CreateCharacter ( prefix & ident ) else
2899: LD_ADDR_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 1
2913: STR
2914: PPUSH
2915: CALL_OW 34
2919: ST_TO_ADDR
2920: GO 2937
// unit := NewCharacter ( ident ) ;
2922: LD_ADDR_VAR 0 5
2926: PUSH
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 25
2936: ST_TO_ADDR
// result := unit ;
2937: LD_ADDR_VAR 0 4
2941: PUSH
2942: LD_VAR 0 5
2946: ST_TO_ADDR
// end ;
2947: LD_VAR 0 4
2951: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// if not side or not nation then
2956: LD_VAR 0 1
2960: NOT
2961: PUSH
2962: LD_VAR 0 2
2966: NOT
2967: OR
2968: IFFALSE 2972
// exit ;
2970: GO 3740
// case nation of nation_american :
2972: LD_VAR 0 2
2976: PUSH
2977: LD_INT 1
2979: DOUBLE
2980: EQUAL
2981: IFTRUE 2985
2983: GO 3199
2985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2986: LD_ADDR_VAR 0 4
2990: PUSH
2991: LD_INT 35
2993: PUSH
2994: LD_INT 45
2996: PUSH
2997: LD_INT 46
2999: PUSH
3000: LD_INT 47
3002: PUSH
3003: LD_INT 82
3005: PUSH
3006: LD_INT 83
3008: PUSH
3009: LD_INT 84
3011: PUSH
3012: LD_INT 85
3014: PUSH
3015: LD_INT 86
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: LD_INT 6
3026: PUSH
3027: LD_INT 15
3029: PUSH
3030: LD_INT 16
3032: PUSH
3033: LD_INT 7
3035: PUSH
3036: LD_INT 12
3038: PUSH
3039: LD_INT 13
3041: PUSH
3042: LD_INT 10
3044: PUSH
3045: LD_INT 14
3047: PUSH
3048: LD_INT 20
3050: PUSH
3051: LD_INT 21
3053: PUSH
3054: LD_INT 22
3056: PUSH
3057: LD_INT 25
3059: PUSH
3060: LD_INT 32
3062: PUSH
3063: LD_INT 27
3065: PUSH
3066: LD_INT 36
3068: PUSH
3069: LD_INT 69
3071: PUSH
3072: LD_INT 39
3074: PUSH
3075: LD_INT 34
3077: PUSH
3078: LD_INT 40
3080: PUSH
3081: LD_INT 48
3083: PUSH
3084: LD_INT 49
3086: PUSH
3087: LD_INT 50
3089: PUSH
3090: LD_INT 51
3092: PUSH
3093: LD_INT 52
3095: PUSH
3096: LD_INT 53
3098: PUSH
3099: LD_INT 54
3101: PUSH
3102: LD_INT 55
3104: PUSH
3105: LD_INT 56
3107: PUSH
3108: LD_INT 57
3110: PUSH
3111: LD_INT 58
3113: PUSH
3114: LD_INT 59
3116: PUSH
3117: LD_INT 60
3119: PUSH
3120: LD_INT 61
3122: PUSH
3123: LD_INT 62
3125: PUSH
3126: LD_INT 80
3128: PUSH
3129: LD_INT 82
3131: PUSH
3132: LD_INT 83
3134: PUSH
3135: LD_INT 84
3137: PUSH
3138: LD_INT 85
3140: PUSH
3141: LD_INT 86
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: ST_TO_ADDR
3197: GO 3664
3199: LD_INT 2
3201: DOUBLE
3202: EQUAL
3203: IFTRUE 3207
3205: GO 3433
3207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3208: LD_ADDR_VAR 0 4
3212: PUSH
3213: LD_INT 35
3215: PUSH
3216: LD_INT 45
3218: PUSH
3219: LD_INT 46
3221: PUSH
3222: LD_INT 47
3224: PUSH
3225: LD_INT 82
3227: PUSH
3228: LD_INT 83
3230: PUSH
3231: LD_INT 84
3233: PUSH
3234: LD_INT 85
3236: PUSH
3237: LD_INT 87
3239: PUSH
3240: LD_INT 70
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: LD_INT 11
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: LD_INT 6
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 18
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: LD_INT 17
3272: PUSH
3273: LD_INT 8
3275: PUSH
3276: LD_INT 20
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 72
3287: PUSH
3288: LD_INT 26
3290: PUSH
3291: LD_INT 69
3293: PUSH
3294: LD_INT 39
3296: PUSH
3297: LD_INT 40
3299: PUSH
3300: LD_INT 41
3302: PUSH
3303: LD_INT 42
3305: PUSH
3306: LD_INT 43
3308: PUSH
3309: LD_INT 48
3311: PUSH
3312: LD_INT 49
3314: PUSH
3315: LD_INT 50
3317: PUSH
3318: LD_INT 51
3320: PUSH
3321: LD_INT 52
3323: PUSH
3324: LD_INT 53
3326: PUSH
3327: LD_INT 54
3329: PUSH
3330: LD_INT 55
3332: PUSH
3333: LD_INT 56
3335: PUSH
3336: LD_INT 60
3338: PUSH
3339: LD_INT 61
3341: PUSH
3342: LD_INT 62
3344: PUSH
3345: LD_INT 66
3347: PUSH
3348: LD_INT 67
3350: PUSH
3351: LD_INT 68
3353: PUSH
3354: LD_INT 81
3356: PUSH
3357: LD_INT 82
3359: PUSH
3360: LD_INT 83
3362: PUSH
3363: LD_INT 84
3365: PUSH
3366: LD_INT 85
3368: PUSH
3369: LD_INT 87
3371: PUSH
3372: LD_INT 88
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: ST_TO_ADDR
3431: GO 3664
3433: LD_INT 3
3435: DOUBLE
3436: EQUAL
3437: IFTRUE 3441
3439: GO 3663
3441: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3442: LD_ADDR_VAR 0 4
3446: PUSH
3447: LD_INT 46
3449: PUSH
3450: LD_INT 47
3452: PUSH
3453: LD_INT 1
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 82
3461: PUSH
3462: LD_INT 83
3464: PUSH
3465: LD_INT 84
3467: PUSH
3468: LD_INT 85
3470: PUSH
3471: LD_INT 86
3473: PUSH
3474: LD_INT 11
3476: PUSH
3477: LD_INT 9
3479: PUSH
3480: LD_INT 20
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: LD_INT 21
3488: PUSH
3489: LD_INT 24
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_INT 25
3497: PUSH
3498: LD_INT 28
3500: PUSH
3501: LD_INT 29
3503: PUSH
3504: LD_INT 30
3506: PUSH
3507: LD_INT 31
3509: PUSH
3510: LD_INT 37
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: LD_INT 32
3518: PUSH
3519: LD_INT 27
3521: PUSH
3522: LD_INT 33
3524: PUSH
3525: LD_INT 69
3527: PUSH
3528: LD_INT 39
3530: PUSH
3531: LD_INT 34
3533: PUSH
3534: LD_INT 40
3536: PUSH
3537: LD_INT 71
3539: PUSH
3540: LD_INT 23
3542: PUSH
3543: LD_INT 44
3545: PUSH
3546: LD_INT 48
3548: PUSH
3549: LD_INT 49
3551: PUSH
3552: LD_INT 50
3554: PUSH
3555: LD_INT 51
3557: PUSH
3558: LD_INT 52
3560: PUSH
3561: LD_INT 53
3563: PUSH
3564: LD_INT 54
3566: PUSH
3567: LD_INT 55
3569: PUSH
3570: LD_INT 56
3572: PUSH
3573: LD_INT 57
3575: PUSH
3576: LD_INT 58
3578: PUSH
3579: LD_INT 59
3581: PUSH
3582: LD_INT 63
3584: PUSH
3585: LD_INT 64
3587: PUSH
3588: LD_INT 65
3590: PUSH
3591: LD_INT 82
3593: PUSH
3594: LD_INT 83
3596: PUSH
3597: LD_INT 84
3599: PUSH
3600: LD_INT 85
3602: PUSH
3603: LD_INT 86
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
3661: GO 3664
3663: POP
// if state > - 1 and state < 3 then
3664: LD_VAR 0 3
3668: PUSH
3669: LD_INT 1
3671: NEG
3672: GREATER
3673: PUSH
3674: LD_VAR 0 3
3678: PUSH
3679: LD_INT 3
3681: LESS
3682: AND
3683: IFFALSE 3740
// for i in result do
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_VAR 0 4
3694: PUSH
3695: FOR_IN
3696: IFFALSE 3738
// if GetTech ( i , side ) <> state then
3698: LD_VAR 0 5
3702: PPUSH
3703: LD_VAR 0 1
3707: PPUSH
3708: CALL_OW 321
3712: PUSH
3713: LD_VAR 0 3
3717: NONEQUAL
3718: IFFALSE 3736
// result := result diff i ;
3720: LD_ADDR_VAR 0 4
3724: PUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 5
3734: DIFF
3735: ST_TO_ADDR
3736: GO 3695
3738: POP
3739: POP
// end ;
3740: LD_VAR 0 4
3744: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3745: LD_INT 0
3747: PPUSH
3748: PPUSH
3749: PPUSH
// result := true ;
3750: LD_ADDR_VAR 0 3
3754: PUSH
3755: LD_INT 1
3757: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3758: LD_ADDR_VAR 0 5
3762: PUSH
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 480
3772: ST_TO_ADDR
// if not tmp then
3773: LD_VAR 0 5
3777: NOT
3778: IFFALSE 3782
// exit ;
3780: GO 3831
// for i in tmp do
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_VAR 0 5
3791: PUSH
3792: FOR_IN
3793: IFFALSE 3829
// if GetTech ( i , side ) <> state_researched then
3795: LD_VAR 0 4
3799: PPUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL_OW 321
3809: PUSH
3810: LD_INT 2
3812: NONEQUAL
3813: IFFALSE 3827
// begin result := false ;
3815: LD_ADDR_VAR 0 3
3819: PUSH
3820: LD_INT 0
3822: ST_TO_ADDR
// exit ;
3823: POP
3824: POP
3825: GO 3831
// end ;
3827: GO 3792
3829: POP
3830: POP
// end ;
3831: LD_VAR 0 3
3835: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3836: LD_INT 0
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3851: LD_VAR 0 1
3855: NOT
3856: PUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: CALL_OW 257
3866: PUSH
3867: LD_INT 9
3869: NONEQUAL
3870: OR
3871: IFFALSE 3875
// exit ;
3873: GO 4448
// side := GetSide ( unit ) ;
3875: LD_ADDR_VAR 0 9
3879: PUSH
3880: LD_VAR 0 1
3884: PPUSH
3885: CALL_OW 255
3889: ST_TO_ADDR
// tech_space := tech_spacanom ;
3890: LD_ADDR_VAR 0 12
3894: PUSH
3895: LD_INT 29
3897: ST_TO_ADDR
// tech_time := tech_taurad ;
3898: LD_ADDR_VAR 0 13
3902: PUSH
3903: LD_INT 28
3905: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3906: LD_ADDR_VAR 0 11
3910: PUSH
3911: LD_VAR 0 1
3915: PPUSH
3916: CALL_OW 310
3920: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3921: LD_VAR 0 11
3925: PPUSH
3926: CALL_OW 247
3930: PUSH
3931: LD_INT 2
3933: EQUAL
3934: IFFALSE 3938
// exit ;
3936: GO 4448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3938: LD_ADDR_VAR 0 8
3942: PUSH
3943: LD_INT 81
3945: PUSH
3946: LD_VAR 0 9
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: LD_INT 21
3960: PUSH
3961: LD_INT 3
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: ST_TO_ADDR
// if not tmp then
3981: LD_VAR 0 8
3985: NOT
3986: IFFALSE 3990
// exit ;
3988: GO 4448
// if in_unit then
3990: LD_VAR 0 11
3994: IFFALSE 4018
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3996: LD_ADDR_VAR 0 10
4000: PUSH
4001: LD_VAR 0 8
4005: PPUSH
4006: LD_VAR 0 11
4010: PPUSH
4011: CALL_OW 74
4015: ST_TO_ADDR
4016: GO 4038
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4018: LD_ADDR_VAR 0 10
4022: PUSH
4023: LD_VAR 0 8
4027: PPUSH
4028: LD_VAR 0 1
4032: PPUSH
4033: CALL_OW 74
4037: ST_TO_ADDR
// if not enemy then
4038: LD_VAR 0 10
4042: NOT
4043: IFFALSE 4047
// exit ;
4045: GO 4448
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4047: LD_VAR 0 11
4051: PUSH
4052: LD_VAR 0 11
4056: PPUSH
4057: LD_VAR 0 10
4061: PPUSH
4062: CALL_OW 296
4066: PUSH
4067: LD_INT 13
4069: GREATER
4070: AND
4071: PUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: LD_VAR 0 10
4081: PPUSH
4082: CALL_OW 296
4086: PUSH
4087: LD_INT 12
4089: GREATER
4090: OR
4091: IFFALSE 4095
// exit ;
4093: GO 4448
// missile := [ 1 ] ;
4095: LD_ADDR_VAR 0 14
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4106: LD_VAR 0 9
4110: PPUSH
4111: LD_VAR 0 12
4115: PPUSH
4116: CALL_OW 325
4120: IFFALSE 4149
// missile := Replace ( missile , missile + 1 , 2 ) ;
4122: LD_ADDR_VAR 0 14
4126: PUSH
4127: LD_VAR 0 14
4131: PPUSH
4132: LD_VAR 0 14
4136: PUSH
4137: LD_INT 1
4139: PLUS
4140: PPUSH
4141: LD_INT 2
4143: PPUSH
4144: CALL_OW 1
4148: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4149: LD_VAR 0 9
4153: PPUSH
4154: LD_VAR 0 13
4158: PPUSH
4159: CALL_OW 325
4163: PUSH
4164: LD_VAR 0 10
4168: PPUSH
4169: CALL_OW 255
4173: PPUSH
4174: LD_VAR 0 13
4178: PPUSH
4179: CALL_OW 325
4183: NOT
4184: AND
4185: IFFALSE 4214
// missile := Replace ( missile , missile + 1 , 3 ) ;
4187: LD_ADDR_VAR 0 14
4191: PUSH
4192: LD_VAR 0 14
4196: PPUSH
4197: LD_VAR 0 14
4201: PUSH
4202: LD_INT 1
4204: PLUS
4205: PPUSH
4206: LD_INT 3
4208: PPUSH
4209: CALL_OW 1
4213: ST_TO_ADDR
// if missile < 2 then
4214: LD_VAR 0 14
4218: PUSH
4219: LD_INT 2
4221: LESS
4222: IFFALSE 4226
// exit ;
4224: GO 4448
// x := GetX ( enemy ) ;
4226: LD_ADDR_VAR 0 4
4230: PUSH
4231: LD_VAR 0 10
4235: PPUSH
4236: CALL_OW 250
4240: ST_TO_ADDR
// y := GetY ( enemy ) ;
4241: LD_ADDR_VAR 0 5
4245: PUSH
4246: LD_VAR 0 10
4250: PPUSH
4251: CALL_OW 251
4255: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4256: LD_ADDR_VAR 0 6
4260: PUSH
4261: LD_VAR 0 4
4265: PUSH
4266: LD_INT 1
4268: NEG
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 12
4277: PLUS
4278: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4279: LD_ADDR_VAR 0 7
4283: PUSH
4284: LD_VAR 0 5
4288: PUSH
4289: LD_INT 1
4291: NEG
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: CALL_OW 12
4300: PLUS
4301: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4302: LD_VAR 0 6
4306: PPUSH
4307: LD_VAR 0 7
4311: PPUSH
4312: CALL_OW 488
4316: NOT
4317: IFFALSE 4339
// begin _x := x ;
4319: LD_ADDR_VAR 0 6
4323: PUSH
4324: LD_VAR 0 4
4328: ST_TO_ADDR
// _y := y ;
4329: LD_ADDR_VAR 0 7
4333: PUSH
4334: LD_VAR 0 5
4338: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4339: LD_ADDR_VAR 0 3
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_VAR 0 14
4351: PPUSH
4352: CALL_OW 12
4356: ST_TO_ADDR
// case i of 1 :
4357: LD_VAR 0 3
4361: PUSH
4362: LD_INT 1
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4387
4370: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4371: LD_VAR 0 1
4375: PPUSH
4376: LD_VAR 0 10
4380: PPUSH
4381: CALL_OW 115
4385: GO 4448
4387: LD_INT 2
4389: DOUBLE
4390: EQUAL
4391: IFTRUE 4395
4393: GO 4417
4395: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4396: LD_VAR 0 1
4400: PPUSH
4401: LD_VAR 0 6
4405: PPUSH
4406: LD_VAR 0 7
4410: PPUSH
4411: CALL_OW 153
4415: GO 4448
4417: LD_INT 3
4419: DOUBLE
4420: EQUAL
4421: IFTRUE 4425
4423: GO 4447
4425: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_VAR 0 6
4435: PPUSH
4436: LD_VAR 0 7
4440: PPUSH
4441: CALL_OW 154
4445: GO 4448
4447: POP
// end ;
4448: LD_VAR 0 2
4452: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4453: LD_INT 0
4455: PPUSH
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
4460: PPUSH
// if not unit or not building then
4461: LD_VAR 0 1
4465: NOT
4466: PUSH
4467: LD_VAR 0 2
4471: NOT
4472: OR
4473: IFFALSE 4477
// exit ;
4475: GO 4635
// x := GetX ( building ) ;
4477: LD_ADDR_VAR 0 5
4481: PUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 250
4491: ST_TO_ADDR
// y := GetY ( building ) ;
4492: LD_ADDR_VAR 0 6
4496: PUSH
4497: LD_VAR 0 2
4501: PPUSH
4502: CALL_OW 251
4506: ST_TO_ADDR
// for i = 0 to 5 do
4507: LD_ADDR_VAR 0 4
4511: PUSH
4512: DOUBLE
4513: LD_INT 0
4515: DEC
4516: ST_TO_ADDR
4517: LD_INT 5
4519: PUSH
4520: FOR_TO
4521: IFFALSE 4633
// begin _x := ShiftX ( x , i , 3 ) ;
4523: LD_ADDR_VAR 0 7
4527: PUSH
4528: LD_VAR 0 5
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_INT 3
4540: PPUSH
4541: CALL_OW 272
4545: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4546: LD_ADDR_VAR 0 8
4550: PUSH
4551: LD_VAR 0 6
4555: PPUSH
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_INT 3
4563: PPUSH
4564: CALL_OW 273
4568: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4569: LD_VAR 0 7
4573: PPUSH
4574: LD_VAR 0 8
4578: PPUSH
4579: CALL_OW 488
4583: NOT
4584: IFFALSE 4588
// continue ;
4586: GO 4520
// if HexInfo ( _x , _y ) = 0 then
4588: LD_VAR 0 7
4592: PPUSH
4593: LD_VAR 0 8
4597: PPUSH
4598: CALL_OW 428
4602: PUSH
4603: LD_INT 0
4605: EQUAL
4606: IFFALSE 4631
// begin ComMoveXY ( unit , _x , _y ) ;
4608: LD_VAR 0 1
4612: PPUSH
4613: LD_VAR 0 7
4617: PPUSH
4618: LD_VAR 0 8
4622: PPUSH
4623: CALL_OW 111
// exit ;
4627: POP
4628: POP
4629: GO 4635
// end ; end ;
4631: GO 4520
4633: POP
4634: POP
// end ;
4635: LD_VAR 0 3
4639: RET
// export function ScanBase ( side , base_area ) ; begin
4640: LD_INT 0
4642: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4643: LD_ADDR_VAR 0 3
4647: PUSH
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_INT 81
4655: PUSH
4656: LD_VAR 0 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 70
4669: ST_TO_ADDR
// end ;
4670: LD_VAR 0 3
4674: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4675: LD_INT 0
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
// result := false ;
4681: LD_ADDR_VAR 0 2
4685: PUSH
4686: LD_INT 0
4688: ST_TO_ADDR
// side := GetSide ( unit ) ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 1
4698: PPUSH
4699: CALL_OW 255
4703: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_VAR 0 1
4713: PPUSH
4714: CALL_OW 248
4718: ST_TO_ADDR
// case nat of 1 :
4719: LD_VAR 0 4
4723: PUSH
4724: LD_INT 1
4726: DOUBLE
4727: EQUAL
4728: IFTRUE 4732
4730: GO 4743
4732: POP
// tech := tech_lassight ; 2 :
4733: LD_ADDR_VAR 0 5
4737: PUSH
4738: LD_INT 12
4740: ST_TO_ADDR
4741: GO 4782
4743: LD_INT 2
4745: DOUBLE
4746: EQUAL
4747: IFTRUE 4751
4749: GO 4762
4751: POP
// tech := tech_mortar ; 3 :
4752: LD_ADDR_VAR 0 5
4756: PUSH
4757: LD_INT 41
4759: ST_TO_ADDR
4760: GO 4782
4762: LD_INT 3
4764: DOUBLE
4765: EQUAL
4766: IFTRUE 4770
4768: GO 4781
4770: POP
// tech := tech_bazooka ; end ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_INT 44
4778: ST_TO_ADDR
4779: GO 4782
4781: POP
// if Researched ( side , tech ) then
4782: LD_VAR 0 3
4786: PPUSH
4787: LD_VAR 0 5
4791: PPUSH
4792: CALL_OW 325
4796: IFFALSE 4823
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 8
4808: PUSH
4809: LD_INT 9
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: PUSH
4817: LD_VAR 0 4
4821: ARRAY
4822: ST_TO_ADDR
// end ;
4823: LD_VAR 0 2
4827: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// if not mines then
4833: LD_VAR 0 2
4837: NOT
4838: IFFALSE 4842
// exit ;
4840: GO 4986
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4842: LD_ADDR_VAR 0 5
4846: PUSH
4847: LD_INT 81
4849: PUSH
4850: LD_VAR 0 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: LD_INT 21
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PPUSH
4880: CALL_OW 69
4884: ST_TO_ADDR
// for i in mines do
4885: LD_ADDR_VAR 0 4
4889: PUSH
4890: LD_VAR 0 2
4894: PUSH
4895: FOR_IN
4896: IFFALSE 4984
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4898: LD_VAR 0 4
4902: PUSH
4903: LD_INT 1
4905: ARRAY
4906: PPUSH
4907: LD_VAR 0 4
4911: PUSH
4912: LD_INT 2
4914: ARRAY
4915: PPUSH
4916: CALL_OW 458
4920: NOT
4921: IFFALSE 4925
// continue ;
4923: GO 4895
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4925: LD_VAR 0 4
4929: PUSH
4930: LD_INT 1
4932: ARRAY
4933: PPUSH
4934: LD_VAR 0 4
4938: PUSH
4939: LD_INT 2
4941: ARRAY
4942: PPUSH
4943: CALL_OW 428
4947: PUSH
4948: LD_VAR 0 5
4952: IN
4953: IFFALSE 4982
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4955: LD_VAR 0 4
4959: PUSH
4960: LD_INT 1
4962: ARRAY
4963: PPUSH
4964: LD_VAR 0 4
4968: PUSH
4969: LD_INT 2
4971: ARRAY
4972: PPUSH
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 456
// end ;
4982: GO 4895
4984: POP
4985: POP
// end ;
4986: LD_VAR 0 3
4990: RET
// export function Count ( array ) ; begin
4991: LD_INT 0
4993: PPUSH
// result := array + 0 ;
4994: LD_ADDR_VAR 0 2
4998: PUSH
4999: LD_VAR 0 1
5003: PUSH
5004: LD_INT 0
5006: PLUS
5007: ST_TO_ADDR
// end ;
5008: LD_VAR 0 2
5012: RET
// export function IsEmpty ( building ) ; begin
5013: LD_INT 0
5015: PPUSH
// if not building then
5016: LD_VAR 0 1
5020: NOT
5021: IFFALSE 5025
// exit ;
5023: GO 5068
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_VAR 0 1
5034: PUSH
5035: LD_INT 22
5037: PUSH
5038: LD_VAR 0 1
5042: PPUSH
5043: CALL_OW 255
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: LD_INT 58
5054: PUSH
5055: EMPTY
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 69
5066: IN
5067: ST_TO_ADDR
// end ;
5068: LD_VAR 0 2
5072: RET
// export function IsNotFull ( building ) ; var places ; begin
5073: LD_INT 0
5075: PPUSH
5076: PPUSH
// if not building then
5077: LD_VAR 0 1
5081: NOT
5082: IFFALSE 5086
// exit ;
5084: GO 5114
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_INT 3
5098: PUSH
5099: LD_INT 62
5101: PUSH
5102: EMPTY
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 72
5113: ST_TO_ADDR
// end ;
5114: LD_VAR 0 2
5118: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5119: LD_INT 0
5121: PPUSH
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := [ ] ;
5125: LD_ADDR_VAR 0 3
5129: PUSH
5130: EMPTY
5131: ST_TO_ADDR
// list := [ ] ;
5132: LD_ADDR_VAR 0 5
5136: PUSH
5137: EMPTY
5138: ST_TO_ADDR
// for i = 16 to 25 do
5139: LD_ADDR_VAR 0 4
5143: PUSH
5144: DOUBLE
5145: LD_INT 16
5147: DEC
5148: ST_TO_ADDR
5149: LD_INT 25
5151: PUSH
5152: FOR_TO
5153: IFFALSE 5226
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5155: LD_ADDR_VAR 0 3
5159: PUSH
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 22
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 255
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 91
5184: PUSH
5185: LD_VAR 0 1
5189: PUSH
5190: LD_INT 6
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 30
5200: PUSH
5201: LD_VAR 0 4
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: PPUSH
5218: CALL_OW 69
5222: ADD
5223: ST_TO_ADDR
5224: GO 5152
5226: POP
5227: POP
// for i = 1 to tmp do
5228: LD_ADDR_VAR 0 4
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_TO
5244: IFFALSE 5332
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5246: LD_ADDR_VAR 0 5
5250: PUSH
5251: LD_VAR 0 5
5255: PUSH
5256: LD_VAR 0 3
5260: PUSH
5261: LD_VAR 0 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 266
5271: PUSH
5272: LD_VAR 0 3
5276: PUSH
5277: LD_VAR 0 4
5281: ARRAY
5282: PPUSH
5283: CALL_OW 250
5287: PUSH
5288: LD_VAR 0 3
5292: PUSH
5293: LD_VAR 0 4
5297: ARRAY
5298: PPUSH
5299: CALL_OW 251
5303: PUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: PPUSH
5315: CALL_OW 254
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: PUSH
5326: EMPTY
5327: LIST
5328: ADD
5329: ST_TO_ADDR
5330: GO 5243
5332: POP
5333: POP
// result := list ;
5334: LD_ADDR_VAR 0 2
5338: PUSH
5339: LD_VAR 0 5
5343: ST_TO_ADDR
// end ;
5344: LD_VAR 0 2
5348: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5349: LD_INT 0
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
5355: PPUSH
5356: PPUSH
5357: PPUSH
// if not factory then
5358: LD_VAR 0 1
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5960
// if control = control_apeman then
5367: LD_VAR 0 4
5371: PUSH
5372: LD_INT 5
5374: EQUAL
5375: IFFALSE 5484
// begin tmp := UnitsInside ( factory ) ;
5377: LD_ADDR_VAR 0 8
5381: PUSH
5382: LD_VAR 0 1
5386: PPUSH
5387: CALL_OW 313
5391: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5392: LD_VAR 0 8
5396: PPUSH
5397: LD_INT 25
5399: PUSH
5400: LD_INT 12
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 72
5411: NOT
5412: IFFALSE 5422
// control := control_manual ;
5414: LD_ADDR_VAR 0 4
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5422: LD_ADDR_VAR 0 8
5426: PUSH
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL 5119 0 1
5436: ST_TO_ADDR
// if tmp then
5437: LD_VAR 0 8
5441: IFFALSE 5484
// begin for i in tmp do
5443: LD_ADDR_VAR 0 7
5447: PUSH
5448: LD_VAR 0 8
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5482
// if i [ 1 ] = b_ext_radio then
5456: LD_VAR 0 7
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PUSH
5465: LD_INT 22
5467: EQUAL
5468: IFFALSE 5480
// begin control := control_remote ;
5470: LD_ADDR_VAR 0 4
5474: PUSH
5475: LD_INT 2
5477: ST_TO_ADDR
// break ;
5478: GO 5482
// end ;
5480: GO 5453
5482: POP
5483: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5484: LD_VAR 0 1
5488: PPUSH
5489: LD_VAR 0 2
5493: PPUSH
5494: LD_VAR 0 3
5498: PPUSH
5499: LD_VAR 0 4
5503: PPUSH
5504: LD_VAR 0 5
5508: PPUSH
5509: CALL_OW 448
5513: IFFALSE 5548
// begin result := [ chassis , engine , control , weapon ] ;
5515: LD_ADDR_VAR 0 6
5519: PUSH
5520: LD_VAR 0 2
5524: PUSH
5525: LD_VAR 0 3
5529: PUSH
5530: LD_VAR 0 4
5534: PUSH
5535: LD_VAR 0 5
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// exit ;
5546: GO 5960
// end ; _chassis := AvailableChassisList ( factory ) ;
5548: LD_ADDR_VAR 0 9
5552: PUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: CALL_OW 475
5562: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5563: LD_ADDR_VAR 0 11
5567: PUSH
5568: LD_VAR 0 1
5572: PPUSH
5573: CALL_OW 476
5577: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5578: LD_ADDR_VAR 0 12
5582: PUSH
5583: LD_VAR 0 1
5587: PPUSH
5588: CALL_OW 477
5592: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5593: LD_ADDR_VAR 0 10
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 478
5607: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5608: LD_VAR 0 9
5612: NOT
5613: PUSH
5614: LD_VAR 0 11
5618: NOT
5619: OR
5620: PUSH
5621: LD_VAR 0 12
5625: NOT
5626: OR
5627: PUSH
5628: LD_VAR 0 10
5632: NOT
5633: OR
5634: IFFALSE 5669
// begin result := [ chassis , engine , control , weapon ] ;
5636: LD_ADDR_VAR 0 6
5640: PUSH
5641: LD_VAR 0 2
5645: PUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_VAR 0 4
5655: PUSH
5656: LD_VAR 0 5
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// exit ;
5667: GO 5960
// end ; if not chassis in _chassis then
5669: LD_VAR 0 2
5673: PUSH
5674: LD_VAR 0 9
5678: IN
5679: NOT
5680: IFFALSE 5706
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_VAR 0 9
5691: PUSH
5692: LD_INT 1
5694: PPUSH
5695: LD_VAR 0 9
5699: PPUSH
5700: CALL_OW 12
5704: ARRAY
5705: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5706: LD_VAR 0 2
5710: PPUSH
5711: LD_VAR 0 3
5715: PPUSH
5716: CALL 5965 0 2
5720: NOT
5721: IFFALSE 5780
// repeat engine := _engine [ 1 ] ;
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_VAR 0 11
5732: PUSH
5733: LD_INT 1
5735: ARRAY
5736: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_VAR 0 11
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 3
5754: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5755: LD_VAR 0 2
5759: PPUSH
5760: LD_VAR 0 3
5764: PPUSH
5765: CALL 5965 0 2
5769: PUSH
5770: LD_VAR 0 11
5774: PUSH
5775: EMPTY
5776: EQUAL
5777: OR
5778: IFFALSE 5723
// if not control in _control then
5780: LD_VAR 0 4
5784: PUSH
5785: LD_VAR 0 12
5789: IN
5790: NOT
5791: IFFALSE 5817
// control := _control [ rand ( 1 , _control ) ] ;
5793: LD_ADDR_VAR 0 4
5797: PUSH
5798: LD_VAR 0 12
5802: PUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_VAR 0 12
5810: PPUSH
5811: CALL_OW 12
5815: ARRAY
5816: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5817: LD_VAR 0 2
5821: PPUSH
5822: LD_VAR 0 5
5826: PPUSH
5827: CALL 6185 0 2
5831: NOT
5832: IFFALSE 5891
// repeat weapon := _weapon [ 1 ] ;
5834: LD_ADDR_VAR 0 5
5838: PUSH
5839: LD_VAR 0 10
5843: PUSH
5844: LD_INT 1
5846: ARRAY
5847: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5848: LD_ADDR_VAR 0 10
5852: PUSH
5853: LD_VAR 0 10
5857: PPUSH
5858: LD_INT 1
5860: PPUSH
5861: CALL_OW 3
5865: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5866: LD_VAR 0 2
5870: PPUSH
5871: LD_VAR 0 5
5875: PPUSH
5876: CALL 6185 0 2
5880: PUSH
5881: LD_VAR 0 10
5885: PUSH
5886: EMPTY
5887: EQUAL
5888: OR
5889: IFFALSE 5834
// result := [ ] ;
5891: LD_ADDR_VAR 0 6
5895: PUSH
5896: EMPTY
5897: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5898: LD_VAR 0 1
5902: PPUSH
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 3
5912: PPUSH
5913: LD_VAR 0 4
5917: PPUSH
5918: LD_VAR 0 5
5922: PPUSH
5923: CALL_OW 448
5927: IFFALSE 5960
// result := [ chassis , engine , control , weapon ] ;
5929: LD_ADDR_VAR 0 6
5933: PUSH
5934: LD_VAR 0 2
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_VAR 0 4
5948: PUSH
5949: LD_VAR 0 5
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: ST_TO_ADDR
// end ;
5960: LD_VAR 0 6
5964: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5965: LD_INT 0
5967: PPUSH
// if not chassis or not engine then
5968: LD_VAR 0 1
5972: NOT
5973: PUSH
5974: LD_VAR 0 2
5978: NOT
5979: OR
5980: IFFALSE 5984
// exit ;
5982: GO 6180
// case engine of engine_solar :
5984: LD_VAR 0 2
5988: PUSH
5989: LD_INT 2
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6035
5997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5998: LD_ADDR_VAR 0 3
6002: PUSH
6003: LD_INT 11
6005: PUSH
6006: LD_INT 12
6008: PUSH
6009: LD_INT 13
6011: PUSH
6012: LD_INT 14
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
6033: GO 6164
6035: LD_INT 1
6037: DOUBLE
6038: EQUAL
6039: IFTRUE 6043
6041: GO 6105
6043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_INT 11
6051: PUSH
6052: LD_INT 12
6054: PUSH
6055: LD_INT 13
6057: PUSH
6058: LD_INT 14
6060: PUSH
6061: LD_INT 1
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: LD_INT 4
6072: PUSH
6073: LD_INT 5
6075: PUSH
6076: LD_INT 21
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 22
6084: PUSH
6085: LD_INT 24
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: ST_TO_ADDR
6103: GO 6164
6105: LD_INT 3
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6163
6113: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6114: LD_ADDR_VAR 0 3
6118: PUSH
6119: LD_INT 13
6121: PUSH
6122: LD_INT 14
6124: PUSH
6125: LD_INT 2
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 21
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 23
6145: PUSH
6146: LD_INT 24
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: ST_TO_ADDR
6161: GO 6164
6163: POP
// result := ( chassis in result ) ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_VAR 0 1
6173: PUSH
6174: LD_VAR 0 3
6178: IN
6179: ST_TO_ADDR
// end ;
6180: LD_VAR 0 3
6184: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6185: LD_INT 0
6187: PPUSH
// if not chassis or not weapon then
6188: LD_VAR 0 1
6192: NOT
6193: PUSH
6194: LD_VAR 0 2
6198: NOT
6199: OR
6200: IFFALSE 6204
// exit ;
6202: GO 7264
// case weapon of us_machine_gun :
6204: LD_VAR 0 2
6208: PUSH
6209: LD_INT 2
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6247
6217: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6218: LD_ADDR_VAR 0 3
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: LD_INT 2
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: LD_INT 4
6234: PUSH
6235: LD_INT 5
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: ST_TO_ADDR
6245: GO 7248
6247: LD_INT 3
6249: DOUBLE
6250: EQUAL
6251: IFTRUE 6255
6253: GO 6285
6255: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 5
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: ST_TO_ADDR
6283: GO 7248
6285: LD_INT 11
6287: DOUBLE
6288: EQUAL
6289: IFTRUE 6293
6291: GO 6323
6293: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6294: LD_ADDR_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: LD_INT 3
6307: PUSH
6308: LD_INT 4
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: ST_TO_ADDR
6321: GO 7248
6323: LD_INT 4
6325: DOUBLE
6326: EQUAL
6327: IFTRUE 6331
6329: GO 6357
6331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6332: LD_ADDR_VAR 0 3
6336: PUSH
6337: LD_INT 2
6339: PUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: LD_INT 5
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: ST_TO_ADDR
6355: GO 7248
6357: LD_INT 5
6359: DOUBLE
6360: EQUAL
6361: IFTRUE 6365
6363: GO 6391
6365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 7248
6391: LD_INT 9
6393: DOUBLE
6394: EQUAL
6395: IFTRUE 6399
6397: GO 6425
6399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_INT 2
6407: PUSH
6408: LD_INT 3
6410: PUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: ST_TO_ADDR
6423: GO 7248
6425: LD_INT 7
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6459
6433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6434: LD_ADDR_VAR 0 3
6438: PUSH
6439: LD_INT 2
6441: PUSH
6442: LD_INT 3
6444: PUSH
6445: LD_INT 4
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: ST_TO_ADDR
6457: GO 7248
6459: LD_INT 12
6461: DOUBLE
6462: EQUAL
6463: IFTRUE 6467
6465: GO 6493
6467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 3
6478: PUSH
6479: LD_INT 4
6481: PUSH
6482: LD_INT 5
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: ST_TO_ADDR
6491: GO 7248
6493: LD_INT 13
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6527
6501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_INT 2
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 4
6515: PUSH
6516: LD_INT 5
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: ST_TO_ADDR
6525: GO 7248
6527: LD_INT 14
6529: DOUBLE
6530: EQUAL
6531: IFTRUE 6535
6533: GO 6553
6535: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6536: LD_ADDR_VAR 0 3
6540: PUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: ST_TO_ADDR
6551: GO 7248
6553: LD_INT 6
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6579
6561: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7248
6579: LD_INT 10
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6605
6587: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 4
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 7248
6605: LD_INT 22
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6639
6613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6614: LD_ADDR_VAR 0 3
6618: PUSH
6619: LD_INT 11
6621: PUSH
6622: LD_INT 12
6624: PUSH
6625: LD_INT 13
6627: PUSH
6628: LD_INT 14
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 7248
6639: LD_INT 23
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6673
6647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 11
6655: PUSH
6656: LD_INT 12
6658: PUSH
6659: LD_INT 13
6661: PUSH
6662: LD_INT 14
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
6671: GO 7248
6673: LD_INT 24
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6707
6681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 13
6695: PUSH
6696: LD_INT 14
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
6705: GO 7248
6707: LD_INT 30
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6741
6715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 13
6729: PUSH
6730: LD_INT 14
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: ST_TO_ADDR
6739: GO 7248
6741: LD_INT 25
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6767
6749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 13
6757: PUSH
6758: LD_INT 14
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7248
6767: LD_INT 27
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6793
6775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7248
6793: LD_INT 92
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6827
6801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: LD_INT 11
6809: PUSH
6810: LD_INT 12
6812: PUSH
6813: LD_INT 13
6815: PUSH
6816: LD_INT 14
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: ST_TO_ADDR
6825: GO 7248
6827: LD_INT 28
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6853
6835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6836: LD_ADDR_VAR 0 3
6840: PUSH
6841: LD_INT 13
6843: PUSH
6844: LD_INT 14
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: ST_TO_ADDR
6851: GO 7248
6853: LD_INT 29
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6879
6861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_INT 13
6869: PUSH
6870: LD_INT 14
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 7248
6879: LD_INT 31
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6905
6887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_INT 13
6895: PUSH
6896: LD_INT 14
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 7248
6905: LD_INT 26
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6931
6913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_INT 13
6921: PUSH
6922: LD_INT 14
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
6929: GO 7248
6931: LD_INT 42
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6965
6939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 22
6950: PUSH
6951: LD_INT 23
6953: PUSH
6954: LD_INT 24
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
6963: GO 7248
6965: LD_INT 43
6967: DOUBLE
6968: EQUAL
6969: IFTRUE 6973
6971: GO 6999
6973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: LD_INT 21
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 23
6987: PUSH
6988: LD_INT 24
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: ST_TO_ADDR
6997: GO 7248
6999: LD_INT 44
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7033
7007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7008: LD_ADDR_VAR 0 3
7012: PUSH
7013: LD_INT 21
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_INT 23
7021: PUSH
7022: LD_INT 24
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: ST_TO_ADDR
7031: GO 7248
7033: LD_INT 45
7035: DOUBLE
7036: EQUAL
7037: IFTRUE 7041
7039: GO 7067
7041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7042: LD_ADDR_VAR 0 3
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 23
7055: PUSH
7056: LD_INT 24
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: ST_TO_ADDR
7065: GO 7248
7067: LD_INT 49
7069: DOUBLE
7070: EQUAL
7071: IFTRUE 7075
7073: GO 7101
7075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 21
7083: PUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 23
7089: PUSH
7090: LD_INT 24
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
7099: GO 7248
7101: LD_INT 51
7103: DOUBLE
7104: EQUAL
7105: IFTRUE 7109
7107: GO 7135
7109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 23
7123: PUSH
7124: LD_INT 24
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: ST_TO_ADDR
7133: GO 7248
7135: LD_INT 52
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7169
7143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_INT 21
7151: PUSH
7152: LD_INT 22
7154: PUSH
7155: LD_INT 23
7157: PUSH
7158: LD_INT 24
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: ST_TO_ADDR
7167: GO 7248
7169: LD_INT 53
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7195
7177: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: LD_INT 23
7185: PUSH
7186: LD_INT 24
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: ST_TO_ADDR
7193: GO 7248
7195: LD_INT 46
7197: DOUBLE
7198: EQUAL
7199: IFTRUE 7203
7201: GO 7221
7203: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: LD_INT 24
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: ST_TO_ADDR
7219: GO 7248
7221: LD_INT 47
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7247
7229: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_INT 23
7237: PUSH
7238: LD_INT 24
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7248
7247: POP
// result := ( chassis in result ) ;
7248: LD_ADDR_VAR 0 3
7252: PUSH
7253: LD_VAR 0 1
7257: PUSH
7258: LD_VAR 0 3
7262: IN
7263: ST_TO_ADDR
// end ;
7264: LD_VAR 0 3
7268: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
7276: PPUSH
7277: PPUSH
// result := array ;
7278: LD_ADDR_VAR 0 5
7282: PUSH
7283: LD_VAR 0 1
7287: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7288: LD_VAR 0 1
7292: NOT
7293: PUSH
7294: LD_VAR 0 2
7298: NOT
7299: OR
7300: PUSH
7301: LD_VAR 0 3
7305: NOT
7306: OR
7307: PUSH
7308: LD_VAR 0 2
7312: PUSH
7313: LD_VAR 0 1
7317: GREATER
7318: OR
7319: PUSH
7320: LD_VAR 0 3
7324: PUSH
7325: LD_VAR 0 1
7329: GREATER
7330: OR
7331: IFFALSE 7335
// exit ;
7333: GO 7631
// if direction then
7335: LD_VAR 0 4
7339: IFFALSE 7403
// begin d := 1 ;
7341: LD_ADDR_VAR 0 9
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if i_from > i_to then
7349: LD_VAR 0 2
7353: PUSH
7354: LD_VAR 0 3
7358: GREATER
7359: IFFALSE 7385
// length := ( array - i_from ) + i_to else
7361: LD_ADDR_VAR 0 11
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: LD_VAR 0 2
7375: MINUS
7376: PUSH
7377: LD_VAR 0 3
7381: PLUS
7382: ST_TO_ADDR
7383: GO 7401
// length := i_to - i_from ;
7385: LD_ADDR_VAR 0 11
7389: PUSH
7390: LD_VAR 0 3
7394: PUSH
7395: LD_VAR 0 2
7399: MINUS
7400: ST_TO_ADDR
// end else
7401: GO 7464
// begin d := - 1 ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_INT 1
7410: NEG
7411: ST_TO_ADDR
// if i_from > i_to then
7412: LD_VAR 0 2
7416: PUSH
7417: LD_VAR 0 3
7421: GREATER
7422: IFFALSE 7442
// length := i_from - i_to else
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_VAR 0 3
7438: MINUS
7439: ST_TO_ADDR
7440: GO 7464
// length := ( array - i_to ) + i_from ;
7442: LD_ADDR_VAR 0 11
7446: PUSH
7447: LD_VAR 0 1
7451: PUSH
7452: LD_VAR 0 3
7456: MINUS
7457: PUSH
7458: LD_VAR 0 2
7462: PLUS
7463: ST_TO_ADDR
// end ; if not length then
7464: LD_VAR 0 11
7468: NOT
7469: IFFALSE 7473
// exit ;
7471: GO 7631
// tmp := array ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 1
7482: ST_TO_ADDR
// for i = 1 to length do
7483: LD_ADDR_VAR 0 6
7487: PUSH
7488: DOUBLE
7489: LD_INT 1
7491: DEC
7492: ST_TO_ADDR
7493: LD_VAR 0 11
7497: PUSH
7498: FOR_TO
7499: IFFALSE 7619
// begin for j = 1 to array do
7501: LD_ADDR_VAR 0 7
7505: PUSH
7506: DOUBLE
7507: LD_INT 1
7509: DEC
7510: ST_TO_ADDR
7511: LD_VAR 0 1
7515: PUSH
7516: FOR_TO
7517: IFFALSE 7605
// begin k := j + d ;
7519: LD_ADDR_VAR 0 8
7523: PUSH
7524: LD_VAR 0 7
7528: PUSH
7529: LD_VAR 0 9
7533: PLUS
7534: ST_TO_ADDR
// if k > array then
7535: LD_VAR 0 8
7539: PUSH
7540: LD_VAR 0 1
7544: GREATER
7545: IFFALSE 7555
// k := 1 ;
7547: LD_ADDR_VAR 0 8
7551: PUSH
7552: LD_INT 1
7554: ST_TO_ADDR
// if not k then
7555: LD_VAR 0 8
7559: NOT
7560: IFFALSE 7572
// k := array ;
7562: LD_ADDR_VAR 0 8
7566: PUSH
7567: LD_VAR 0 1
7571: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7572: LD_ADDR_VAR 0 10
7576: PUSH
7577: LD_VAR 0 10
7581: PPUSH
7582: LD_VAR 0 8
7586: PPUSH
7587: LD_VAR 0 1
7591: PUSH
7592: LD_VAR 0 7
7596: ARRAY
7597: PPUSH
7598: CALL_OW 1
7602: ST_TO_ADDR
// end ;
7603: GO 7516
7605: POP
7606: POP
// array := tmp ;
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_VAR 0 10
7616: ST_TO_ADDR
// end ;
7617: GO 7498
7619: POP
7620: POP
// result := array ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_VAR 0 1
7630: ST_TO_ADDR
// end ;
7631: LD_VAR 0 5
7635: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// result := 0 ;
7640: LD_ADDR_VAR 0 3
7644: PUSH
7645: LD_INT 0
7647: ST_TO_ADDR
// if not array or not value in array then
7648: LD_VAR 0 1
7652: NOT
7653: PUSH
7654: LD_VAR 0 2
7658: PUSH
7659: LD_VAR 0 1
7663: IN
7664: NOT
7665: OR
7666: IFFALSE 7670
// exit ;
7668: GO 7724
// for i = 1 to array do
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_VAR 0 1
7684: PUSH
7685: FOR_TO
7686: IFFALSE 7722
// if value = array [ i ] then
7688: LD_VAR 0 2
7692: PUSH
7693: LD_VAR 0 1
7697: PUSH
7698: LD_VAR 0 4
7702: ARRAY
7703: EQUAL
7704: IFFALSE 7720
// begin result := i ;
7706: LD_ADDR_VAR 0 3
7710: PUSH
7711: LD_VAR 0 4
7715: ST_TO_ADDR
// exit ;
7716: POP
7717: POP
7718: GO 7724
// end ;
7720: GO 7685
7722: POP
7723: POP
// end ;
7724: LD_VAR 0 3
7728: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7729: LD_INT 0
7731: PPUSH
// vc_chassis := chassis ;
7732: LD_ADDR_OWVAR 37
7736: PUSH
7737: LD_VAR 0 1
7741: ST_TO_ADDR
// vc_engine := engine ;
7742: LD_ADDR_OWVAR 39
7746: PUSH
7747: LD_VAR 0 2
7751: ST_TO_ADDR
// vc_control := control ;
7752: LD_ADDR_OWVAR 38
7756: PUSH
7757: LD_VAR 0 3
7761: ST_TO_ADDR
// vc_weapon := weapon ;
7762: LD_ADDR_OWVAR 40
7766: PUSH
7767: LD_VAR 0 4
7771: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7772: LD_ADDR_OWVAR 41
7776: PUSH
7777: LD_VAR 0 5
7781: ST_TO_ADDR
// end ;
7782: LD_VAR 0 6
7786: RET
// export function WantPlant ( unit ) ; var task ; begin
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
// result := false ;
7791: LD_ADDR_VAR 0 2
7795: PUSH
7796: LD_INT 0
7798: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7799: LD_ADDR_VAR 0 3
7803: PUSH
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 437
7813: ST_TO_ADDR
// if task then
7814: LD_VAR 0 3
7818: IFFALSE 7846
// if task [ 1 ] [ 1 ] = p then
7820: LD_VAR 0 3
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PUSH
7829: LD_INT 1
7831: ARRAY
7832: PUSH
7833: LD_STRING p
7835: EQUAL
7836: IFFALSE 7846
// result := true ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 2
7850: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7851: LD_INT 0
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// if pos < 1 then
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 1
7864: LESS
7865: IFFALSE 7869
// exit ;
7867: GO 8172
// if pos = 1 then
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 1
7876: EQUAL
7877: IFFALSE 7910
// result := Replace ( arr , pos [ 1 ] , value ) else
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: LD_VAR 0 1
7888: PPUSH
7889: LD_VAR 0 2
7893: PUSH
7894: LD_INT 1
7896: ARRAY
7897: PPUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: CALL_OW 1
7907: ST_TO_ADDR
7908: GO 8172
// begin tmp := arr ;
7910: LD_ADDR_VAR 0 6
7914: PUSH
7915: LD_VAR 0 1
7919: ST_TO_ADDR
// s_arr := [ tmp ] ;
7920: LD_ADDR_VAR 0 7
7924: PUSH
7925: LD_VAR 0 6
7929: PUSH
7930: EMPTY
7931: LIST
7932: ST_TO_ADDR
// for i = 1 to pos - 1 do
7933: LD_ADDR_VAR 0 5
7937: PUSH
7938: DOUBLE
7939: LD_INT 1
7941: DEC
7942: ST_TO_ADDR
7943: LD_VAR 0 2
7947: PUSH
7948: LD_INT 1
7950: MINUS
7951: PUSH
7952: FOR_TO
7953: IFFALSE 7998
// begin tmp := tmp [ pos [ i ] ] ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 6
7964: PUSH
7965: LD_VAR 0 2
7969: PUSH
7970: LD_VAR 0 5
7974: ARRAY
7975: ARRAY
7976: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7977: LD_ADDR_VAR 0 7
7981: PUSH
7982: LD_VAR 0 7
7986: PUSH
7987: LD_VAR 0 6
7991: PUSH
7992: EMPTY
7993: LIST
7994: ADD
7995: ST_TO_ADDR
// end ;
7996: GO 7952
7998: POP
7999: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8000: LD_ADDR_VAR 0 6
8004: PUSH
8005: LD_VAR 0 6
8009: PPUSH
8010: LD_VAR 0 2
8014: PUSH
8015: LD_VAR 0 2
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 3
8025: PPUSH
8026: CALL_OW 1
8030: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8031: LD_ADDR_VAR 0 7
8035: PUSH
8036: LD_VAR 0 7
8040: PPUSH
8041: LD_VAR 0 7
8045: PPUSH
8046: LD_VAR 0 6
8050: PPUSH
8051: CALL_OW 1
8055: ST_TO_ADDR
// for i = s_arr downto 2 do
8056: LD_ADDR_VAR 0 5
8060: PUSH
8061: DOUBLE
8062: LD_VAR 0 7
8066: INC
8067: ST_TO_ADDR
8068: LD_INT 2
8070: PUSH
8071: FOR_DOWNTO
8072: IFFALSE 8156
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8074: LD_ADDR_VAR 0 6
8078: PUSH
8079: LD_VAR 0 7
8083: PUSH
8084: LD_VAR 0 5
8088: PUSH
8089: LD_INT 1
8091: MINUS
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 2
8098: PUSH
8099: LD_VAR 0 5
8103: PUSH
8104: LD_INT 1
8106: MINUS
8107: ARRAY
8108: PPUSH
8109: LD_VAR 0 7
8113: PUSH
8114: LD_VAR 0 5
8118: ARRAY
8119: PPUSH
8120: CALL_OW 1
8124: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8125: LD_ADDR_VAR 0 7
8129: PUSH
8130: LD_VAR 0 7
8134: PPUSH
8135: LD_VAR 0 5
8139: PUSH
8140: LD_INT 1
8142: MINUS
8143: PPUSH
8144: LD_VAR 0 6
8148: PPUSH
8149: CALL_OW 1
8153: ST_TO_ADDR
// end ;
8154: GO 8071
8156: POP
8157: POP
// result := s_arr [ 1 ] ;
8158: LD_ADDR_VAR 0 4
8162: PUSH
8163: LD_VAR 0 7
8167: PUSH
8168: LD_INT 1
8170: ARRAY
8171: ST_TO_ADDR
// end ; end ;
8172: LD_VAR 0 4
8176: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8177: LD_INT 0
8179: PPUSH
8180: PPUSH
// if not list then
8181: LD_VAR 0 1
8185: NOT
8186: IFFALSE 8190
// exit ;
8188: GO 8281
// i := list [ pos1 ] ;
8190: LD_ADDR_VAR 0 5
8194: PUSH
8195: LD_VAR 0 1
8199: PUSH
8200: LD_VAR 0 2
8204: ARRAY
8205: ST_TO_ADDR
// if not i then
8206: LD_VAR 0 5
8210: NOT
8211: IFFALSE 8215
// exit ;
8213: GO 8281
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_VAR 0 2
8229: PPUSH
8230: LD_VAR 0 1
8234: PUSH
8235: LD_VAR 0 3
8239: ARRAY
8240: PPUSH
8241: CALL_OW 1
8245: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8246: LD_ADDR_VAR 0 1
8250: PUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_VAR 0 3
8260: PPUSH
8261: LD_VAR 0 5
8265: PPUSH
8266: CALL_OW 1
8270: ST_TO_ADDR
// result := list ;
8271: LD_ADDR_VAR 0 4
8275: PUSH
8276: LD_VAR 0 1
8280: ST_TO_ADDR
// end ;
8281: LD_VAR 0 4
8285: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8286: LD_INT 0
8288: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8289: LD_ADDR_VAR 0 5
8293: PUSH
8294: LD_VAR 0 1
8298: PPUSH
8299: CALL_OW 250
8303: PPUSH
8304: LD_VAR 0 1
8308: PPUSH
8309: CALL_OW 251
8313: PPUSH
8314: LD_VAR 0 2
8318: PPUSH
8319: LD_VAR 0 3
8323: PPUSH
8324: LD_VAR 0 4
8328: PPUSH
8329: CALL 8707 0 5
8333: ST_TO_ADDR
// end ;
8334: LD_VAR 0 5
8338: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
// if not list or not unit then
8345: LD_VAR 0 2
8349: NOT
8350: PUSH
8351: LD_VAR 0 1
8355: NOT
8356: OR
8357: IFFALSE 8361
// exit ;
8359: GO 8702
// result := [ ] ;
8361: LD_ADDR_VAR 0 5
8365: PUSH
8366: EMPTY
8367: ST_TO_ADDR
// for i in list do
8368: LD_ADDR_VAR 0 6
8372: PUSH
8373: LD_VAR 0 2
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8597
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8381: LD_ADDR_VAR 0 8
8385: PUSH
8386: LD_VAR 0 1
8390: PPUSH
8391: LD_VAR 0 6
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_VAR 0 6
8404: PUSH
8405: LD_INT 2
8407: ARRAY
8408: PPUSH
8409: CALL_OW 297
8413: ST_TO_ADDR
// if not Count ( result ) then
8414: LD_VAR 0 5
8418: PPUSH
8419: CALL 4991 0 1
8423: NOT
8424: IFFALSE 8457
// begin result := Join ( result , [ i , tmp ] ) ;
8426: LD_ADDR_VAR 0 5
8430: PUSH
8431: LD_VAR 0 5
8435: PPUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 8
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL 40580 0 2
8454: ST_TO_ADDR
// continue ;
8455: GO 8378
// end ; if result [ result ] [ 2 ] <= tmp then
8457: LD_VAR 0 5
8461: PUSH
8462: LD_VAR 0 5
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: PUSH
8472: LD_VAR 0 8
8476: LESSEQUAL
8477: IFFALSE 8510
// result := Join ( result , [ i , tmp ] ) else
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL 40580 0 2
8507: ST_TO_ADDR
8508: GO 8595
// begin for j := 1 to Count ( result ) do
8510: LD_ADDR_VAR 0 7
8514: PUSH
8515: DOUBLE
8516: LD_INT 1
8518: DEC
8519: ST_TO_ADDR
8520: LD_VAR 0 5
8524: PPUSH
8525: CALL 4991 0 1
8529: PUSH
8530: FOR_TO
8531: IFFALSE 8593
// begin if tmp < result [ j ] [ 2 ] then
8533: LD_VAR 0 8
8537: PUSH
8538: LD_VAR 0 5
8542: PUSH
8543: LD_VAR 0 7
8547: ARRAY
8548: PUSH
8549: LD_INT 2
8551: ARRAY
8552: LESS
8553: IFFALSE 8591
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8555: LD_ADDR_VAR 0 5
8559: PUSH
8560: LD_VAR 0 5
8564: PPUSH
8565: LD_VAR 0 7
8569: PPUSH
8570: LD_VAR 0 6
8574: PUSH
8575: LD_VAR 0 8
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 2
8588: ST_TO_ADDR
// break ;
8589: GO 8593
// end ; end ;
8591: GO 8530
8593: POP
8594: POP
// end ; end ;
8595: GO 8378
8597: POP
8598: POP
// if result and not asc then
8599: LD_VAR 0 5
8603: PUSH
8604: LD_VAR 0 3
8608: NOT
8609: AND
8610: IFFALSE 8627
// result := ReverseArray ( result ) ;
8612: LD_ADDR_VAR 0 5
8616: PUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL 35867 0 1
8626: ST_TO_ADDR
// tmp := [ ] ;
8627: LD_ADDR_VAR 0 8
8631: PUSH
8632: EMPTY
8633: ST_TO_ADDR
// if mode then
8634: LD_VAR 0 4
8638: IFFALSE 8702
// begin for i := 1 to result do
8640: LD_ADDR_VAR 0 6
8644: PUSH
8645: DOUBLE
8646: LD_INT 1
8648: DEC
8649: ST_TO_ADDR
8650: LD_VAR 0 5
8654: PUSH
8655: FOR_TO
8656: IFFALSE 8690
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8658: LD_ADDR_VAR 0 8
8662: PUSH
8663: LD_VAR 0 8
8667: PPUSH
8668: LD_VAR 0 5
8672: PUSH
8673: LD_VAR 0 6
8677: ARRAY
8678: PUSH
8679: LD_INT 1
8681: ARRAY
8682: PPUSH
8683: CALL 40580 0 2
8687: ST_TO_ADDR
8688: GO 8655
8690: POP
8691: POP
// result := tmp ;
8692: LD_ADDR_VAR 0 5
8696: PUSH
8697: LD_VAR 0 8
8701: ST_TO_ADDR
// end ; end ;
8702: LD_VAR 0 5
8706: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8707: LD_INT 0
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
// if not list then
8713: LD_VAR 0 3
8717: NOT
8718: IFFALSE 8722
// exit ;
8720: GO 9110
// result := [ ] ;
8722: LD_ADDR_VAR 0 6
8726: PUSH
8727: EMPTY
8728: ST_TO_ADDR
// for i in list do
8729: LD_ADDR_VAR 0 7
8733: PUSH
8734: LD_VAR 0 3
8738: PUSH
8739: FOR_IN
8740: IFFALSE 8942
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_VAR 0 7
8751: PPUSH
8752: LD_VAR 0 1
8756: PPUSH
8757: LD_VAR 0 2
8761: PPUSH
8762: CALL_OW 297
8766: ST_TO_ADDR
// if not result then
8767: LD_VAR 0 6
8771: NOT
8772: IFFALSE 8798
// result := [ [ i , tmp ] ] else
8774: LD_ADDR_VAR 0 6
8778: PUSH
8779: LD_VAR 0 7
8783: PUSH
8784: LD_VAR 0 9
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: ST_TO_ADDR
8796: GO 8940
// begin if result [ result ] [ 2 ] < tmp then
8798: LD_VAR 0 6
8802: PUSH
8803: LD_VAR 0 6
8807: ARRAY
8808: PUSH
8809: LD_INT 2
8811: ARRAY
8812: PUSH
8813: LD_VAR 0 9
8817: LESS
8818: IFFALSE 8860
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8820: LD_ADDR_VAR 0 6
8824: PUSH
8825: LD_VAR 0 6
8829: PPUSH
8830: LD_VAR 0 6
8834: PUSH
8835: LD_INT 1
8837: PLUS
8838: PPUSH
8839: LD_VAR 0 7
8843: PUSH
8844: LD_VAR 0 9
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 2
8857: ST_TO_ADDR
8858: GO 8940
// for j = 1 to result do
8860: LD_ADDR_VAR 0 8
8864: PUSH
8865: DOUBLE
8866: LD_INT 1
8868: DEC
8869: ST_TO_ADDR
8870: LD_VAR 0 6
8874: PUSH
8875: FOR_TO
8876: IFFALSE 8938
// begin if tmp < result [ j ] [ 2 ] then
8878: LD_VAR 0 9
8882: PUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_VAR 0 8
8892: ARRAY
8893: PUSH
8894: LD_INT 2
8896: ARRAY
8897: LESS
8898: IFFALSE 8936
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8900: LD_ADDR_VAR 0 6
8904: PUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: LD_VAR 0 8
8914: PPUSH
8915: LD_VAR 0 7
8919: PUSH
8920: LD_VAR 0 9
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 2
8933: ST_TO_ADDR
// break ;
8934: GO 8938
// end ; end ;
8936: GO 8875
8938: POP
8939: POP
// end ; end ;
8940: GO 8739
8942: POP
8943: POP
// if result and not asc then
8944: LD_VAR 0 6
8948: PUSH
8949: LD_VAR 0 4
8953: NOT
8954: AND
8955: IFFALSE 9030
// begin tmp := result ;
8957: LD_ADDR_VAR 0 9
8961: PUSH
8962: LD_VAR 0 6
8966: ST_TO_ADDR
// for i = tmp downto 1 do
8967: LD_ADDR_VAR 0 7
8971: PUSH
8972: DOUBLE
8973: LD_VAR 0 9
8977: INC
8978: ST_TO_ADDR
8979: LD_INT 1
8981: PUSH
8982: FOR_DOWNTO
8983: IFFALSE 9028
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8985: LD_ADDR_VAR 0 6
8989: PUSH
8990: LD_VAR 0 6
8994: PPUSH
8995: LD_VAR 0 9
8999: PUSH
9000: LD_VAR 0 7
9004: MINUS
9005: PUSH
9006: LD_INT 1
9008: PLUS
9009: PPUSH
9010: LD_VAR 0 9
9014: PUSH
9015: LD_VAR 0 7
9019: ARRAY
9020: PPUSH
9021: CALL_OW 1
9025: ST_TO_ADDR
9026: GO 8982
9028: POP
9029: POP
// end ; tmp := [ ] ;
9030: LD_ADDR_VAR 0 9
9034: PUSH
9035: EMPTY
9036: ST_TO_ADDR
// if mode then
9037: LD_VAR 0 5
9041: IFFALSE 9110
// begin for i = 1 to result do
9043: LD_ADDR_VAR 0 7
9047: PUSH
9048: DOUBLE
9049: LD_INT 1
9051: DEC
9052: ST_TO_ADDR
9053: LD_VAR 0 6
9057: PUSH
9058: FOR_TO
9059: IFFALSE 9098
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9061: LD_ADDR_VAR 0 9
9065: PUSH
9066: LD_VAR 0 9
9070: PPUSH
9071: LD_VAR 0 7
9075: PPUSH
9076: LD_VAR 0 6
9080: PUSH
9081: LD_VAR 0 7
9085: ARRAY
9086: PUSH
9087: LD_INT 1
9089: ARRAY
9090: PPUSH
9091: CALL_OW 1
9095: ST_TO_ADDR
9096: GO 9058
9098: POP
9099: POP
// result := tmp ;
9100: LD_ADDR_VAR 0 6
9104: PUSH
9105: LD_VAR 0 9
9109: ST_TO_ADDR
// end ; end ;
9110: LD_VAR 0 6
9114: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9115: LD_INT 0
9117: PPUSH
9118: PPUSH
9119: PPUSH
9120: PPUSH
9121: PPUSH
9122: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9123: LD_ADDR_VAR 0 5
9127: PUSH
9128: LD_INT 0
9130: PUSH
9131: LD_INT 0
9133: PUSH
9134: LD_INT 0
9136: PUSH
9137: EMPTY
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: ST_TO_ADDR
// if not x or not y then
9145: LD_VAR 0 2
9149: NOT
9150: PUSH
9151: LD_VAR 0 3
9155: NOT
9156: OR
9157: IFFALSE 9161
// exit ;
9159: GO 10811
// if not range then
9161: LD_VAR 0 4
9165: NOT
9166: IFFALSE 9176
// range := 10 ;
9168: LD_ADDR_VAR 0 4
9172: PUSH
9173: LD_INT 10
9175: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9176: LD_ADDR_VAR 0 8
9180: PUSH
9181: LD_INT 81
9183: PUSH
9184: LD_VAR 0 1
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 92
9195: PUSH
9196: LD_VAR 0 2
9200: PUSH
9201: LD_VAR 0 3
9205: PUSH
9206: LD_VAR 0 4
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 3
9219: PUSH
9220: LD_INT 21
9222: PUSH
9223: LD_INT 3
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 69
9243: ST_TO_ADDR
// if not tmp then
9244: LD_VAR 0 8
9248: NOT
9249: IFFALSE 9253
// exit ;
9251: GO 10811
// for i in tmp do
9253: LD_ADDR_VAR 0 6
9257: PUSH
9258: LD_VAR 0 8
9262: PUSH
9263: FOR_IN
9264: IFFALSE 10786
// begin points := [ 0 , 0 , 0 ] ;
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_INT 0
9273: PUSH
9274: LD_INT 0
9276: PUSH
9277: LD_INT 0
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: ST_TO_ADDR
// bpoints := 1 ;
9285: LD_ADDR_VAR 0 10
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9293: LD_VAR 0 6
9297: PPUSH
9298: CALL_OW 247
9302: PUSH
9303: LD_INT 1
9305: DOUBLE
9306: EQUAL
9307: IFTRUE 9311
9309: GO 9889
9311: POP
// begin if GetClass ( i ) = 1 then
9312: LD_VAR 0 6
9316: PPUSH
9317: CALL_OW 257
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: IFFALSE 9346
// points := [ 10 , 5 , 3 ] ;
9327: LD_ADDR_VAR 0 9
9331: PUSH
9332: LD_INT 10
9334: PUSH
9335: LD_INT 5
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9346: LD_VAR 0 6
9350: PPUSH
9351: CALL_OW 257
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: IN
9370: IFFALSE 9391
// points := [ 3 , 2 , 1 ] ;
9372: LD_ADDR_VAR 0 9
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: LD_INT 1
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 257
9400: PUSH
9401: LD_INT 5
9403: EQUAL
9404: IFFALSE 9425
// points := [ 130 , 5 , 2 ] ;
9406: LD_ADDR_VAR 0 9
9410: PUSH
9411: LD_INT 130
9413: PUSH
9414: LD_INT 5
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9425: LD_VAR 0 6
9429: PPUSH
9430: CALL_OW 257
9434: PUSH
9435: LD_INT 8
9437: EQUAL
9438: IFFALSE 9459
// points := [ 35 , 35 , 30 ] ;
9440: LD_ADDR_VAR 0 9
9444: PUSH
9445: LD_INT 35
9447: PUSH
9448: LD_INT 35
9450: PUSH
9451: LD_INT 30
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9459: LD_VAR 0 6
9463: PPUSH
9464: CALL_OW 257
9468: PUSH
9469: LD_INT 9
9471: EQUAL
9472: IFFALSE 9493
// points := [ 20 , 55 , 40 ] ;
9474: LD_ADDR_VAR 0 9
9478: PUSH
9479: LD_INT 20
9481: PUSH
9482: LD_INT 55
9484: PUSH
9485: LD_INT 40
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9493: LD_VAR 0 6
9497: PPUSH
9498: CALL_OW 257
9502: PUSH
9503: LD_INT 12
9505: PUSH
9506: LD_INT 16
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: IN
9513: IFFALSE 9534
// points := [ 5 , 3 , 2 ] ;
9515: LD_ADDR_VAR 0 9
9519: PUSH
9520: LD_INT 5
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9534: LD_VAR 0 6
9538: PPUSH
9539: CALL_OW 257
9543: PUSH
9544: LD_INT 17
9546: EQUAL
9547: IFFALSE 9568
// points := [ 100 , 50 , 75 ] ;
9549: LD_ADDR_VAR 0 9
9553: PUSH
9554: LD_INT 100
9556: PUSH
9557: LD_INT 50
9559: PUSH
9560: LD_INT 75
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9568: LD_VAR 0 6
9572: PPUSH
9573: CALL_OW 257
9577: PUSH
9578: LD_INT 15
9580: EQUAL
9581: IFFALSE 9602
// points := [ 10 , 5 , 3 ] ;
9583: LD_ADDR_VAR 0 9
9587: PUSH
9588: LD_INT 10
9590: PUSH
9591: LD_INT 5
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9602: LD_VAR 0 6
9606: PPUSH
9607: CALL_OW 257
9611: PUSH
9612: LD_INT 14
9614: EQUAL
9615: IFFALSE 9636
// points := [ 10 , 0 , 0 ] ;
9617: LD_ADDR_VAR 0 9
9621: PUSH
9622: LD_INT 10
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9636: LD_VAR 0 6
9640: PPUSH
9641: CALL_OW 257
9645: PUSH
9646: LD_INT 11
9648: EQUAL
9649: IFFALSE 9670
// points := [ 30 , 10 , 5 ] ;
9651: LD_ADDR_VAR 0 9
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 10
9661: PUSH
9662: LD_INT 5
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9670: LD_VAR 0 1
9674: PPUSH
9675: LD_INT 5
9677: PPUSH
9678: CALL_OW 321
9682: PUSH
9683: LD_INT 2
9685: EQUAL
9686: IFFALSE 9703
// bpoints := bpoints * 1.8 ;
9688: LD_ADDR_VAR 0 10
9692: PUSH
9693: LD_VAR 0 10
9697: PUSH
9698: LD_REAL  1.80000000000000E+0000
9701: MUL
9702: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9703: LD_VAR 0 6
9707: PPUSH
9708: CALL_OW 257
9712: PUSH
9713: LD_INT 1
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: LD_INT 3
9721: PUSH
9722: LD_INT 4
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: IN
9731: PUSH
9732: LD_VAR 0 1
9736: PPUSH
9737: LD_INT 51
9739: PPUSH
9740: CALL_OW 321
9744: PUSH
9745: LD_INT 2
9747: EQUAL
9748: AND
9749: IFFALSE 9766
// bpoints := bpoints * 1.2 ;
9751: LD_ADDR_VAR 0 10
9755: PUSH
9756: LD_VAR 0 10
9760: PUSH
9761: LD_REAL  1.20000000000000E+0000
9764: MUL
9765: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9766: LD_VAR 0 6
9770: PPUSH
9771: CALL_OW 257
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 7
9781: PUSH
9782: LD_INT 9
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: IN
9790: PUSH
9791: LD_VAR 0 1
9795: PPUSH
9796: LD_INT 52
9798: PPUSH
9799: CALL_OW 321
9803: PUSH
9804: LD_INT 2
9806: EQUAL
9807: AND
9808: IFFALSE 9825
// bpoints := bpoints * 1.5 ;
9810: LD_ADDR_VAR 0 10
9814: PUSH
9815: LD_VAR 0 10
9819: PUSH
9820: LD_REAL  1.50000000000000E+0000
9823: MUL
9824: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_INT 66
9832: PPUSH
9833: CALL_OW 321
9837: PUSH
9838: LD_INT 2
9840: EQUAL
9841: IFFALSE 9858
// bpoints := bpoints * 1.1 ;
9843: LD_ADDR_VAR 0 10
9847: PUSH
9848: LD_VAR 0 10
9852: PUSH
9853: LD_REAL  1.10000000000000E+0000
9856: MUL
9857: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9858: LD_ADDR_VAR 0 10
9862: PUSH
9863: LD_VAR 0 10
9867: PUSH
9868: LD_VAR 0 6
9872: PPUSH
9873: LD_INT 1
9875: PPUSH
9876: CALL_OW 259
9880: PUSH
9881: LD_REAL  1.15000000000000E+0000
9884: MUL
9885: MUL
9886: ST_TO_ADDR
// end ; unit_vehicle :
9887: GO 10715
9889: LD_INT 2
9891: DOUBLE
9892: EQUAL
9893: IFTRUE 9897
9895: GO 10703
9897: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9898: LD_VAR 0 6
9902: PPUSH
9903: CALL_OW 264
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 42
9913: PUSH
9914: LD_INT 24
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: IN
9922: IFFALSE 9943
// points := [ 25 , 5 , 3 ] ;
9924: LD_ADDR_VAR 0 9
9928: PUSH
9929: LD_INT 25
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 264
9952: PUSH
9953: LD_INT 4
9955: PUSH
9956: LD_INT 43
9958: PUSH
9959: LD_INT 25
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: IN
9967: IFFALSE 9988
// points := [ 40 , 15 , 5 ] ;
9969: LD_ADDR_VAR 0 9
9973: PUSH
9974: LD_INT 40
9976: PUSH
9977: LD_INT 15
9979: PUSH
9980: LD_INT 5
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9988: LD_VAR 0 6
9992: PPUSH
9993: CALL_OW 264
9997: PUSH
9998: LD_INT 3
10000: PUSH
10001: LD_INT 23
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: IN
10008: IFFALSE 10029
// points := [ 7 , 25 , 8 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 7
10017: PUSH
10018: LD_INT 25
10020: PUSH
10021: LD_INT 8
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 264
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: LD_INT 27
10044: PUSH
10045: LD_INT 44
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: IN
10053: IFFALSE 10074
// points := [ 14 , 50 , 16 ] ;
10055: LD_ADDR_VAR 0 9
10059: PUSH
10060: LD_INT 14
10062: PUSH
10063: LD_INT 50
10065: PUSH
10066: LD_INT 16
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10074: LD_VAR 0 6
10078: PPUSH
10079: CALL_OW 264
10083: PUSH
10084: LD_INT 6
10086: PUSH
10087: LD_INT 46
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: IN
10094: IFFALSE 10115
// points := [ 32 , 120 , 70 ] ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_INT 32
10103: PUSH
10104: LD_INT 120
10106: PUSH
10107: LD_INT 70
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 264
10124: PUSH
10125: LD_INT 7
10127: PUSH
10128: LD_INT 28
10130: PUSH
10131: LD_INT 45
10133: PUSH
10134: LD_INT 92
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: IN
10143: IFFALSE 10164
// points := [ 35 , 20 , 45 ] ;
10145: LD_ADDR_VAR 0 9
10149: PUSH
10150: LD_INT 35
10152: PUSH
10153: LD_INT 20
10155: PUSH
10156: LD_INT 45
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10164: LD_VAR 0 6
10168: PPUSH
10169: CALL_OW 264
10173: PUSH
10174: LD_INT 47
10176: PUSH
10177: EMPTY
10178: LIST
10179: IN
10180: IFFALSE 10201
// points := [ 67 , 45 , 75 ] ;
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_INT 67
10189: PUSH
10190: LD_INT 45
10192: PUSH
10193: LD_INT 75
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10201: LD_VAR 0 6
10205: PPUSH
10206: CALL_OW 264
10210: PUSH
10211: LD_INT 26
10213: PUSH
10214: EMPTY
10215: LIST
10216: IN
10217: IFFALSE 10238
// points := [ 120 , 30 , 80 ] ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: LD_INT 120
10226: PUSH
10227: LD_INT 30
10229: PUSH
10230: LD_INT 80
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10238: LD_VAR 0 6
10242: PPUSH
10243: CALL_OW 264
10247: PUSH
10248: LD_INT 22
10250: PUSH
10251: EMPTY
10252: LIST
10253: IN
10254: IFFALSE 10275
// points := [ 40 , 1 , 1 ] ;
10256: LD_ADDR_VAR 0 9
10260: PUSH
10261: LD_INT 40
10263: PUSH
10264: LD_INT 1
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10275: LD_VAR 0 6
10279: PPUSH
10280: CALL_OW 264
10284: PUSH
10285: LD_INT 29
10287: PUSH
10288: EMPTY
10289: LIST
10290: IN
10291: IFFALSE 10312
// points := [ 70 , 200 , 400 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 70
10300: PUSH
10301: LD_INT 200
10303: PUSH
10304: LD_INT 400
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 264
10321: PUSH
10322: LD_INT 14
10324: PUSH
10325: LD_INT 53
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: IN
10332: IFFALSE 10353
// points := [ 40 , 10 , 20 ] ;
10334: LD_ADDR_VAR 0 9
10338: PUSH
10339: LD_INT 40
10341: PUSH
10342: LD_INT 10
10344: PUSH
10345: LD_INT 20
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 264
10362: PUSH
10363: LD_INT 9
10365: PUSH
10366: EMPTY
10367: LIST
10368: IN
10369: IFFALSE 10390
// points := [ 5 , 70 , 20 ] ;
10371: LD_ADDR_VAR 0 9
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 70
10381: PUSH
10382: LD_INT 20
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10390: LD_VAR 0 6
10394: PPUSH
10395: CALL_OW 264
10399: PUSH
10400: LD_INT 10
10402: PUSH
10403: EMPTY
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 35 , 110 , 70 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 35
10415: PUSH
10416: LD_INT 110
10418: PUSH
10419: LD_INT 70
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 265
10436: PUSH
10437: LD_INT 25
10439: EQUAL
10440: IFFALSE 10461
// points := [ 80 , 65 , 100 ] ;
10442: LD_ADDR_VAR 0 9
10446: PUSH
10447: LD_INT 80
10449: PUSH
10450: LD_INT 65
10452: PUSH
10453: LD_INT 100
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: LIST
10460: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10461: LD_VAR 0 6
10465: PPUSH
10466: CALL_OW 263
10470: PUSH
10471: LD_INT 1
10473: EQUAL
10474: IFFALSE 10509
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10476: LD_ADDR_VAR 0 10
10480: PUSH
10481: LD_VAR 0 10
10485: PUSH
10486: LD_VAR 0 6
10490: PPUSH
10491: CALL_OW 311
10495: PPUSH
10496: LD_INT 3
10498: PPUSH
10499: CALL_OW 259
10503: PUSH
10504: LD_INT 4
10506: MUL
10507: MUL
10508: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10509: LD_VAR 0 6
10513: PPUSH
10514: CALL_OW 263
10518: PUSH
10519: LD_INT 2
10521: EQUAL
10522: IFFALSE 10573
// begin j := IsControledBy ( i ) ;
10524: LD_ADDR_VAR 0 7
10528: PUSH
10529: LD_VAR 0 6
10533: PPUSH
10534: CALL_OW 312
10538: ST_TO_ADDR
// if j then
10539: LD_VAR 0 7
10543: IFFALSE 10573
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10545: LD_ADDR_VAR 0 10
10549: PUSH
10550: LD_VAR 0 10
10554: PUSH
10555: LD_VAR 0 7
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: CALL_OW 259
10567: PUSH
10568: LD_INT 3
10570: MUL
10571: MUL
10572: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10573: LD_VAR 0 6
10577: PPUSH
10578: CALL_OW 264
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: LD_INT 6
10588: PUSH
10589: LD_INT 46
10591: PUSH
10592: LD_INT 44
10594: PUSH
10595: LD_INT 47
10597: PUSH
10598: LD_INT 45
10600: PUSH
10601: LD_INT 28
10603: PUSH
10604: LD_INT 7
10606: PUSH
10607: LD_INT 27
10609: PUSH
10610: LD_INT 29
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: IN
10625: PUSH
10626: LD_VAR 0 1
10630: PPUSH
10631: LD_INT 52
10633: PPUSH
10634: CALL_OW 321
10638: PUSH
10639: LD_INT 2
10641: EQUAL
10642: AND
10643: IFFALSE 10660
// bpoints := bpoints * 1.2 ;
10645: LD_ADDR_VAR 0 10
10649: PUSH
10650: LD_VAR 0 10
10654: PUSH
10655: LD_REAL  1.20000000000000E+0000
10658: MUL
10659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10660: LD_VAR 0 6
10664: PPUSH
10665: CALL_OW 264
10669: PUSH
10670: LD_INT 6
10672: PUSH
10673: LD_INT 46
10675: PUSH
10676: LD_INT 47
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: IN
10684: IFFALSE 10701
// bpoints := bpoints * 1.2 ;
10686: LD_ADDR_VAR 0 10
10690: PUSH
10691: LD_VAR 0 10
10695: PUSH
10696: LD_REAL  1.20000000000000E+0000
10699: MUL
10700: ST_TO_ADDR
// end ; unit_building :
10701: GO 10715
10703: LD_INT 3
10705: DOUBLE
10706: EQUAL
10707: IFTRUE 10711
10709: GO 10714
10711: POP
// ; end ;
10712: GO 10715
10714: POP
// for j = 1 to 3 do
10715: LD_ADDR_VAR 0 7
10719: PUSH
10720: DOUBLE
10721: LD_INT 1
10723: DEC
10724: ST_TO_ADDR
10725: LD_INT 3
10727: PUSH
10728: FOR_TO
10729: IFFALSE 10782
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: LD_VAR 0 5
10740: PPUSH
10741: LD_VAR 0 7
10745: PPUSH
10746: LD_VAR 0 5
10750: PUSH
10751: LD_VAR 0 7
10755: ARRAY
10756: PUSH
10757: LD_VAR 0 9
10761: PUSH
10762: LD_VAR 0 7
10766: ARRAY
10767: PUSH
10768: LD_VAR 0 10
10772: MUL
10773: PLUS
10774: PPUSH
10775: CALL_OW 1
10779: ST_TO_ADDR
10780: GO 10728
10782: POP
10783: POP
// end ;
10784: GO 9263
10786: POP
10787: POP
// result := Replace ( result , 4 , tmp ) ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_VAR 0 5
10797: PPUSH
10798: LD_INT 4
10800: PPUSH
10801: LD_VAR 0 8
10805: PPUSH
10806: CALL_OW 1
10810: ST_TO_ADDR
// end ;
10811: LD_VAR 0 5
10815: RET
// export function DangerAtRange ( unit , range ) ; begin
10816: LD_INT 0
10818: PPUSH
// if not unit then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10873
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_VAR 0 1
10837: PPUSH
10838: CALL_OW 255
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 250
10852: PPUSH
10853: LD_VAR 0 1
10857: PPUSH
10858: CALL_OW 251
10862: PPUSH
10863: LD_VAR 0 2
10867: PPUSH
10868: CALL 9115 0 4
10872: ST_TO_ADDR
// end ;
10873: LD_VAR 0 3
10877: RET
// export function DangerInArea ( side , area ) ; begin
10878: LD_INT 0
10880: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_INT 81
10893: PUSH
10894: LD_VAR 0 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 70
10907: ST_TO_ADDR
// end ;
10908: LD_VAR 0 3
10912: RET
// export function IsExtension ( b ) ; begin
10913: LD_INT 0
10915: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: LD_VAR 0 1
10925: PUSH
10926: LD_INT 23
10928: PUSH
10929: LD_INT 20
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_INT 17
10937: PUSH
10938: LD_INT 24
10940: PUSH
10941: LD_INT 21
10943: PUSH
10944: LD_INT 19
10946: PUSH
10947: LD_INT 16
10949: PUSH
10950: LD_INT 25
10952: PUSH
10953: LD_INT 18
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: IN
10968: ST_TO_ADDR
// end ;
10969: LD_VAR 0 2
10973: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10974: LD_INT 0
10976: PPUSH
10977: PPUSH
10978: PPUSH
// result := [ ] ;
10979: LD_ADDR_VAR 0 4
10983: PUSH
10984: EMPTY
10985: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 2
10995: PPUSH
10996: LD_INT 21
10998: PUSH
10999: LD_INT 3
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 70
11010: ST_TO_ADDR
// if not tmp then
11011: LD_VAR 0 5
11015: NOT
11016: IFFALSE 11020
// exit ;
11018: GO 11084
// if checkLink then
11020: LD_VAR 0 3
11024: IFFALSE 11074
// begin for i in tmp do
11026: LD_ADDR_VAR 0 6
11030: PUSH
11031: LD_VAR 0 5
11035: PUSH
11036: FOR_IN
11037: IFFALSE 11072
// if GetBase ( i ) <> base then
11039: LD_VAR 0 6
11043: PPUSH
11044: CALL_OW 274
11048: PUSH
11049: LD_VAR 0 1
11053: NONEQUAL
11054: IFFALSE 11070
// ComLinkToBase ( base , i ) ;
11056: LD_VAR 0 1
11060: PPUSH
11061: LD_VAR 0 6
11065: PPUSH
11066: CALL_OW 169
11070: GO 11036
11072: POP
11073: POP
// end ; result := tmp ;
11074: LD_ADDR_VAR 0 4
11078: PUSH
11079: LD_VAR 0 5
11083: ST_TO_ADDR
// end ;
11084: LD_VAR 0 4
11088: RET
// export function ComComplete ( units , b ) ; var i ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
// if not units then
11093: LD_VAR 0 1
11097: NOT
11098: IFFALSE 11102
// exit ;
11100: GO 11192
// for i in units do
11102: LD_ADDR_VAR 0 4
11106: PUSH
11107: LD_VAR 0 1
11111: PUSH
11112: FOR_IN
11113: IFFALSE 11190
// if BuildingStatus ( b ) = bs_build then
11115: LD_VAR 0 2
11119: PPUSH
11120: CALL_OW 461
11124: PUSH
11125: LD_INT 1
11127: EQUAL
11128: IFFALSE 11188
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11130: LD_VAR 0 4
11134: PPUSH
11135: LD_STRING h
11137: PUSH
11138: LD_VAR 0 2
11142: PPUSH
11143: CALL_OW 250
11147: PUSH
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 251
11157: PUSH
11158: LD_VAR 0 2
11162: PUSH
11163: LD_INT 0
11165: PUSH
11166: LD_INT 0
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: PPUSH
11184: CALL_OW 446
11188: GO 11112
11190: POP
11191: POP
// end ;
11192: LD_VAR 0 3
11196: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11197: LD_INT 0
11199: PPUSH
11200: PPUSH
11201: PPUSH
11202: PPUSH
11203: PPUSH
11204: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11205: LD_VAR 0 1
11209: NOT
11210: PUSH
11211: LD_VAR 0 1
11215: PPUSH
11216: CALL_OW 263
11220: PUSH
11221: LD_INT 2
11223: NONEQUAL
11224: OR
11225: IFFALSE 11229
// exit ;
11227: GO 11545
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11229: LD_ADDR_VAR 0 6
11233: PUSH
11234: LD_INT 22
11236: PUSH
11237: LD_VAR 0 1
11241: PPUSH
11242: CALL_OW 255
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 36
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 34
11266: PUSH
11267: LD_INT 31
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 69
11287: ST_TO_ADDR
// if not tmp then
11288: LD_VAR 0 6
11292: NOT
11293: IFFALSE 11297
// exit ;
11295: GO 11545
// result := [ ] ;
11297: LD_ADDR_VAR 0 2
11301: PUSH
11302: EMPTY
11303: ST_TO_ADDR
// for i in tmp do
11304: LD_ADDR_VAR 0 3
11308: PUSH
11309: LD_VAR 0 6
11313: PUSH
11314: FOR_IN
11315: IFFALSE 11386
// begin t := UnitsInside ( i ) ;
11317: LD_ADDR_VAR 0 4
11321: PUSH
11322: LD_VAR 0 3
11326: PPUSH
11327: CALL_OW 313
11331: ST_TO_ADDR
// if t then
11332: LD_VAR 0 4
11336: IFFALSE 11384
// for j in t do
11338: LD_ADDR_VAR 0 7
11342: PUSH
11343: LD_VAR 0 4
11347: PUSH
11348: FOR_IN
11349: IFFALSE 11382
// result := Replace ( result , result + 1 , j ) ;
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_VAR 0 2
11365: PUSH
11366: LD_INT 1
11368: PLUS
11369: PPUSH
11370: LD_VAR 0 7
11374: PPUSH
11375: CALL_OW 1
11379: ST_TO_ADDR
11380: GO 11348
11382: POP
11383: POP
// end ;
11384: GO 11314
11386: POP
11387: POP
// if not result then
11388: LD_VAR 0 2
11392: NOT
11393: IFFALSE 11397
// exit ;
11395: GO 11545
// mech := result [ 1 ] ;
11397: LD_ADDR_VAR 0 5
11401: PUSH
11402: LD_VAR 0 2
11406: PUSH
11407: LD_INT 1
11409: ARRAY
11410: ST_TO_ADDR
// if result > 1 then
11411: LD_VAR 0 2
11415: PUSH
11416: LD_INT 1
11418: GREATER
11419: IFFALSE 11531
// begin for i = 2 to result do
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: DOUBLE
11427: LD_INT 2
11429: DEC
11430: ST_TO_ADDR
11431: LD_VAR 0 2
11435: PUSH
11436: FOR_TO
11437: IFFALSE 11529
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11439: LD_ADDR_VAR 0 4
11443: PUSH
11444: LD_VAR 0 2
11448: PUSH
11449: LD_VAR 0 3
11453: ARRAY
11454: PPUSH
11455: LD_INT 3
11457: PPUSH
11458: CALL_OW 259
11462: PUSH
11463: LD_VAR 0 2
11467: PUSH
11468: LD_VAR 0 3
11472: ARRAY
11473: PPUSH
11474: CALL_OW 432
11478: MINUS
11479: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11480: LD_VAR 0 4
11484: PUSH
11485: LD_VAR 0 5
11489: PPUSH
11490: LD_INT 3
11492: PPUSH
11493: CALL_OW 259
11497: PUSH
11498: LD_VAR 0 5
11502: PPUSH
11503: CALL_OW 432
11507: MINUS
11508: GREATEREQUAL
11509: IFFALSE 11527
// mech := result [ i ] ;
11511: LD_ADDR_VAR 0 5
11515: PUSH
11516: LD_VAR 0 2
11520: PUSH
11521: LD_VAR 0 3
11525: ARRAY
11526: ST_TO_ADDR
// end ;
11527: GO 11436
11529: POP
11530: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11531: LD_VAR 0 1
11535: PPUSH
11536: LD_VAR 0 5
11540: PPUSH
11541: CALL_OW 135
// end ;
11545: LD_VAR 0 2
11549: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11550: LD_INT 0
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
// result := [ ] ;
11565: LD_ADDR_VAR 0 7
11569: PUSH
11570: EMPTY
11571: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 266
11581: PUSH
11582: LD_INT 0
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: IN
11592: NOT
11593: IFFALSE 11597
// exit ;
11595: GO 13231
// if name then
11597: LD_VAR 0 3
11601: IFFALSE 11617
// SetBName ( base_dep , name ) ;
11603: LD_VAR 0 1
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: CALL_OW 500
// base := GetBase ( base_dep ) ;
11617: LD_ADDR_VAR 0 15
11621: PUSH
11622: LD_VAR 0 1
11626: PPUSH
11627: CALL_OW 274
11631: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11632: LD_ADDR_VAR 0 16
11636: PUSH
11637: LD_VAR 0 1
11641: PPUSH
11642: CALL_OW 255
11646: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11647: LD_ADDR_VAR 0 17
11651: PUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: CALL_OW 248
11661: ST_TO_ADDR
// if sources then
11662: LD_VAR 0 5
11666: IFFALSE 11713
// for i = 1 to 3 do
11668: LD_ADDR_VAR 0 8
11672: PUSH
11673: DOUBLE
11674: LD_INT 1
11676: DEC
11677: ST_TO_ADDR
11678: LD_INT 3
11680: PUSH
11681: FOR_TO
11682: IFFALSE 11711
// AddResourceType ( base , i , sources [ i ] ) ;
11684: LD_VAR 0 15
11688: PPUSH
11689: LD_VAR 0 8
11693: PPUSH
11694: LD_VAR 0 5
11698: PUSH
11699: LD_VAR 0 8
11703: ARRAY
11704: PPUSH
11705: CALL_OW 276
11709: GO 11681
11711: POP
11712: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11713: LD_ADDR_VAR 0 18
11717: PUSH
11718: LD_VAR 0 15
11722: PPUSH
11723: LD_VAR 0 2
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL 10974 0 3
11735: ST_TO_ADDR
// InitHc ;
11736: CALL_OW 19
// InitUc ;
11740: CALL_OW 18
// uc_side := side ;
11744: LD_ADDR_OWVAR 20
11748: PUSH
11749: LD_VAR 0 16
11753: ST_TO_ADDR
// uc_nation := nation ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_VAR 0 17
11763: ST_TO_ADDR
// if buildings then
11764: LD_VAR 0 18
11768: IFFALSE 13090
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11770: LD_ADDR_VAR 0 19
11774: PUSH
11775: LD_VAR 0 18
11779: PPUSH
11780: LD_INT 2
11782: PUSH
11783: LD_INT 30
11785: PUSH
11786: LD_INT 29
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 30
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: PPUSH
11808: CALL_OW 72
11812: ST_TO_ADDR
// if tmp then
11813: LD_VAR 0 19
11817: IFFALSE 11865
// for i in tmp do
11819: LD_ADDR_VAR 0 8
11823: PUSH
11824: LD_VAR 0 19
11828: PUSH
11829: FOR_IN
11830: IFFALSE 11863
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11832: LD_VAR 0 8
11836: PPUSH
11837: CALL_OW 250
11841: PPUSH
11842: LD_VAR 0 8
11846: PPUSH
11847: CALL_OW 251
11851: PPUSH
11852: LD_VAR 0 16
11856: PPUSH
11857: CALL_OW 441
11861: GO 11829
11863: POP
11864: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11865: LD_VAR 0 18
11869: PPUSH
11870: LD_INT 2
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: LD_INT 32
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 30
11885: PUSH
11886: LD_INT 33
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PPUSH
11898: CALL_OW 72
11902: IFFALSE 11990
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11904: LD_ADDR_VAR 0 8
11908: PUSH
11909: LD_VAR 0 18
11913: PPUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 32
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 30
11929: PUSH
11930: LD_INT 33
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 72
11946: PUSH
11947: FOR_IN
11948: IFFALSE 11988
// begin if not GetBWeapon ( i ) then
11950: LD_VAR 0 8
11954: PPUSH
11955: CALL_OW 269
11959: NOT
11960: IFFALSE 11986
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11962: LD_VAR 0 8
11966: PPUSH
11967: LD_VAR 0 8
11971: PPUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: CALL 13236 0 2
11981: PPUSH
11982: CALL_OW 431
// end ;
11986: GO 11947
11988: POP
11989: POP
// end ; for i = 1 to personel do
11990: LD_ADDR_VAR 0 8
11994: PUSH
11995: DOUBLE
11996: LD_INT 1
11998: DEC
11999: ST_TO_ADDR
12000: LD_VAR 0 6
12004: PUSH
12005: FOR_TO
12006: IFFALSE 13070
// begin if i > 4 then
12008: LD_VAR 0 8
12012: PUSH
12013: LD_INT 4
12015: GREATER
12016: IFFALSE 12020
// break ;
12018: GO 13070
// case i of 1 :
12020: LD_VAR 0 8
12024: PUSH
12025: LD_INT 1
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12113
12033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12034: LD_ADDR_VAR 0 12
12038: PUSH
12039: LD_VAR 0 18
12043: PPUSH
12044: LD_INT 22
12046: PUSH
12047: LD_VAR 0 16
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 58
12058: PUSH
12059: EMPTY
12060: LIST
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 32
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 4
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 30
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 72
12110: ST_TO_ADDR
12111: GO 12335
12113: LD_INT 2
12115: DOUBLE
12116: EQUAL
12117: IFTRUE 12121
12119: GO 12183
12121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12122: LD_ADDR_VAR 0 12
12126: PUSH
12127: LD_VAR 0 18
12131: PPUSH
12132: LD_INT 22
12134: PUSH
12135: LD_VAR 0 16
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 30
12149: PUSH
12150: LD_INT 0
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 30
12159: PUSH
12160: LD_INT 1
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 72
12180: ST_TO_ADDR
12181: GO 12335
12183: LD_INT 3
12185: DOUBLE
12186: EQUAL
12187: IFTRUE 12191
12189: GO 12253
12191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12192: LD_ADDR_VAR 0 12
12196: PUSH
12197: LD_VAR 0 18
12201: PPUSH
12202: LD_INT 22
12204: PUSH
12205: LD_VAR 0 16
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: LD_INT 30
12219: PUSH
12220: LD_INT 2
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 30
12229: PUSH
12230: LD_INT 3
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 72
12250: ST_TO_ADDR
12251: GO 12335
12253: LD_INT 4
12255: DOUBLE
12256: EQUAL
12257: IFTRUE 12261
12259: GO 12334
12261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12262: LD_ADDR_VAR 0 12
12266: PUSH
12267: LD_VAR 0 18
12271: PPUSH
12272: LD_INT 22
12274: PUSH
12275: LD_VAR 0 16
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 2
12286: PUSH
12287: LD_INT 30
12289: PUSH
12290: LD_INT 6
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: LD_INT 7
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 8
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 72
12331: ST_TO_ADDR
12332: GO 12335
12334: POP
// if i = 1 then
12335: LD_VAR 0 8
12339: PUSH
12340: LD_INT 1
12342: EQUAL
12343: IFFALSE 12454
// begin tmp := [ ] ;
12345: LD_ADDR_VAR 0 19
12349: PUSH
12350: EMPTY
12351: ST_TO_ADDR
// for j in f do
12352: LD_ADDR_VAR 0 9
12356: PUSH
12357: LD_VAR 0 12
12361: PUSH
12362: FOR_IN
12363: IFFALSE 12436
// if GetBType ( j ) = b_bunker then
12365: LD_VAR 0 9
12369: PPUSH
12370: CALL_OW 266
12374: PUSH
12375: LD_INT 32
12377: EQUAL
12378: IFFALSE 12405
// tmp := Insert ( tmp , 1 , j ) else
12380: LD_ADDR_VAR 0 19
12384: PUSH
12385: LD_VAR 0 19
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: LD_VAR 0 9
12397: PPUSH
12398: CALL_OW 2
12402: ST_TO_ADDR
12403: GO 12434
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12405: LD_ADDR_VAR 0 19
12409: PUSH
12410: LD_VAR 0 19
12414: PPUSH
12415: LD_VAR 0 19
12419: PUSH
12420: LD_INT 1
12422: PLUS
12423: PPUSH
12424: LD_VAR 0 9
12428: PPUSH
12429: CALL_OW 2
12433: ST_TO_ADDR
12434: GO 12362
12436: POP
12437: POP
// if tmp then
12438: LD_VAR 0 19
12442: IFFALSE 12454
// f := tmp ;
12444: LD_ADDR_VAR 0 12
12448: PUSH
12449: LD_VAR 0 19
12453: ST_TO_ADDR
// end ; x := personel [ i ] ;
12454: LD_ADDR_VAR 0 13
12458: PUSH
12459: LD_VAR 0 6
12463: PUSH
12464: LD_VAR 0 8
12468: ARRAY
12469: ST_TO_ADDR
// if x = - 1 then
12470: LD_VAR 0 13
12474: PUSH
12475: LD_INT 1
12477: NEG
12478: EQUAL
12479: IFFALSE 12688
// begin for j in f do
12481: LD_ADDR_VAR 0 9
12485: PUSH
12486: LD_VAR 0 12
12490: PUSH
12491: FOR_IN
12492: IFFALSE 12684
// repeat InitHc ;
12494: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12498: LD_VAR 0 9
12502: PPUSH
12503: CALL_OW 266
12507: PUSH
12508: LD_INT 5
12510: EQUAL
12511: IFFALSE 12581
// begin if UnitsInside ( j ) < 3 then
12513: LD_VAR 0 9
12517: PPUSH
12518: CALL_OW 313
12522: PUSH
12523: LD_INT 3
12525: LESS
12526: IFFALSE 12562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12528: LD_INT 0
12530: PPUSH
12531: LD_INT 5
12533: PUSH
12534: LD_INT 8
12536: PUSH
12537: LD_INT 9
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_VAR 0 17
12549: ARRAY
12550: PPUSH
12551: LD_VAR 0 4
12555: PPUSH
12556: CALL_OW 380
12560: GO 12579
// PrepareHuman ( false , i , skill ) ;
12562: LD_INT 0
12564: PPUSH
12565: LD_VAR 0 8
12569: PPUSH
12570: LD_VAR 0 4
12574: PPUSH
12575: CALL_OW 380
// end else
12579: GO 12598
// PrepareHuman ( false , i , skill ) ;
12581: LD_INT 0
12583: PPUSH
12584: LD_VAR 0 8
12588: PPUSH
12589: LD_VAR 0 4
12593: PPUSH
12594: CALL_OW 380
// un := CreateHuman ;
12598: LD_ADDR_VAR 0 14
12602: PUSH
12603: CALL_OW 44
12607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12608: LD_ADDR_VAR 0 7
12612: PUSH
12613: LD_VAR 0 7
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: LD_VAR 0 14
12625: PPUSH
12626: CALL_OW 2
12630: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12631: LD_VAR 0 14
12635: PPUSH
12636: LD_VAR 0 9
12640: PPUSH
12641: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12645: LD_VAR 0 9
12649: PPUSH
12650: CALL_OW 313
12654: PUSH
12655: LD_INT 6
12657: EQUAL
12658: PUSH
12659: LD_VAR 0 9
12663: PPUSH
12664: CALL_OW 266
12668: PUSH
12669: LD_INT 32
12671: PUSH
12672: LD_INT 31
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: IN
12679: OR
12680: IFFALSE 12494
12682: GO 12491
12684: POP
12685: POP
// end else
12686: GO 13068
// for j = 1 to x do
12688: LD_ADDR_VAR 0 9
12692: PUSH
12693: DOUBLE
12694: LD_INT 1
12696: DEC
12697: ST_TO_ADDR
12698: LD_VAR 0 13
12702: PUSH
12703: FOR_TO
12704: IFFALSE 13066
// begin InitHc ;
12706: CALL_OW 19
// if not f then
12710: LD_VAR 0 12
12714: NOT
12715: IFFALSE 12804
// begin PrepareHuman ( false , i , skill ) ;
12717: LD_INT 0
12719: PPUSH
12720: LD_VAR 0 8
12724: PPUSH
12725: LD_VAR 0 4
12729: PPUSH
12730: CALL_OW 380
// un := CreateHuman ;
12734: LD_ADDR_VAR 0 14
12738: PUSH
12739: CALL_OW 44
12743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12744: LD_ADDR_VAR 0 7
12748: PUSH
12749: LD_VAR 0 7
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: LD_VAR 0 14
12761: PPUSH
12762: CALL_OW 2
12766: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12767: LD_VAR 0 14
12771: PPUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 250
12781: PPUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 251
12791: PPUSH
12792: LD_INT 10
12794: PPUSH
12795: LD_INT 0
12797: PPUSH
12798: CALL_OW 50
// continue ;
12802: GO 12703
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12804: LD_VAR 0 12
12808: PUSH
12809: LD_INT 1
12811: ARRAY
12812: PPUSH
12813: CALL_OW 313
12817: PUSH
12818: LD_VAR 0 12
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 266
12831: PUSH
12832: LD_INT 32
12834: PUSH
12835: LD_INT 31
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: IN
12842: AND
12843: PUSH
12844: LD_VAR 0 12
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: CALL_OW 313
12857: PUSH
12858: LD_INT 6
12860: EQUAL
12861: OR
12862: IFFALSE 12882
// f := Delete ( f , 1 ) ;
12864: LD_ADDR_VAR 0 12
12868: PUSH
12869: LD_VAR 0 12
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 3
12881: ST_TO_ADDR
// if not f then
12882: LD_VAR 0 12
12886: NOT
12887: IFFALSE 12905
// begin x := x + 2 ;
12889: LD_ADDR_VAR 0 13
12893: PUSH
12894: LD_VAR 0 13
12898: PUSH
12899: LD_INT 2
12901: PLUS
12902: ST_TO_ADDR
// continue ;
12903: GO 12703
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12905: LD_VAR 0 12
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 266
12918: PUSH
12919: LD_INT 5
12921: EQUAL
12922: IFFALSE 12996
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12924: LD_VAR 0 12
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: CALL_OW 313
12937: PUSH
12938: LD_INT 3
12940: LESS
12941: IFFALSE 12977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12943: LD_INT 0
12945: PPUSH
12946: LD_INT 5
12948: PUSH
12949: LD_INT 8
12951: PUSH
12952: LD_INT 9
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_VAR 0 17
12964: ARRAY
12965: PPUSH
12966: LD_VAR 0 4
12970: PPUSH
12971: CALL_OW 380
12975: GO 12994
// PrepareHuman ( false , i , skill ) ;
12977: LD_INT 0
12979: PPUSH
12980: LD_VAR 0 8
12984: PPUSH
12985: LD_VAR 0 4
12989: PPUSH
12990: CALL_OW 380
// end else
12994: GO 13013
// PrepareHuman ( false , i , skill ) ;
12996: LD_INT 0
12998: PPUSH
12999: LD_VAR 0 8
13003: PPUSH
13004: LD_VAR 0 4
13008: PPUSH
13009: CALL_OW 380
// un := CreateHuman ;
13013: LD_ADDR_VAR 0 14
13017: PUSH
13018: CALL_OW 44
13022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13023: LD_ADDR_VAR 0 7
13027: PUSH
13028: LD_VAR 0 7
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: LD_VAR 0 14
13040: PPUSH
13041: CALL_OW 2
13045: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13046: LD_VAR 0 14
13050: PPUSH
13051: LD_VAR 0 12
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 52
// end ;
13064: GO 12703
13066: POP
13067: POP
// end ;
13068: GO 12005
13070: POP
13071: POP
// result := result ^ buildings ;
13072: LD_ADDR_VAR 0 7
13076: PUSH
13077: LD_VAR 0 7
13081: PUSH
13082: LD_VAR 0 18
13086: ADD
13087: ST_TO_ADDR
// end else
13088: GO 13231
// begin for i = 1 to personel do
13090: LD_ADDR_VAR 0 8
13094: PUSH
13095: DOUBLE
13096: LD_INT 1
13098: DEC
13099: ST_TO_ADDR
13100: LD_VAR 0 6
13104: PUSH
13105: FOR_TO
13106: IFFALSE 13229
// begin if i > 4 then
13108: LD_VAR 0 8
13112: PUSH
13113: LD_INT 4
13115: GREATER
13116: IFFALSE 13120
// break ;
13118: GO 13229
// x := personel [ i ] ;
13120: LD_ADDR_VAR 0 13
13124: PUSH
13125: LD_VAR 0 6
13129: PUSH
13130: LD_VAR 0 8
13134: ARRAY
13135: ST_TO_ADDR
// if x = - 1 then
13136: LD_VAR 0 13
13140: PUSH
13141: LD_INT 1
13143: NEG
13144: EQUAL
13145: IFFALSE 13149
// continue ;
13147: GO 13105
// PrepareHuman ( false , i , skill ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_VAR 0 8
13156: PPUSH
13157: LD_VAR 0 4
13161: PPUSH
13162: CALL_OW 380
// un := CreateHuman ;
13166: LD_ADDR_VAR 0 14
13170: PUSH
13171: CALL_OW 44
13175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13176: LD_VAR 0 14
13180: PPUSH
13181: LD_VAR 0 1
13185: PPUSH
13186: CALL_OW 250
13190: PPUSH
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 251
13200: PPUSH
13201: LD_INT 10
13203: PPUSH
13204: LD_INT 0
13206: PPUSH
13207: CALL_OW 50
// result := result ^ un ;
13211: LD_ADDR_VAR 0 7
13215: PUSH
13216: LD_VAR 0 7
13220: PUSH
13221: LD_VAR 0 14
13225: ADD
13226: ST_TO_ADDR
// end ;
13227: GO 13105
13229: POP
13230: POP
// end ; end ;
13231: LD_VAR 0 7
13235: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13236: LD_INT 0
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
13247: PPUSH
13248: PPUSH
13249: PPUSH
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
// result := false ;
13254: LD_ADDR_VAR 0 3
13258: PUSH
13259: LD_INT 0
13261: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13262: LD_VAR 0 1
13266: NOT
13267: PUSH
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 266
13277: PUSH
13278: LD_INT 32
13280: PUSH
13281: LD_INT 33
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: IN
13288: NOT
13289: OR
13290: IFFALSE 13294
// exit ;
13292: GO 14403
// nat := GetNation ( tower ) ;
13294: LD_ADDR_VAR 0 12
13298: PUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 248
13308: ST_TO_ADDR
// side := GetSide ( tower ) ;
13309: LD_ADDR_VAR 0 16
13313: PUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 255
13323: ST_TO_ADDR
// x := GetX ( tower ) ;
13324: LD_ADDR_VAR 0 10
13328: PUSH
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 250
13338: ST_TO_ADDR
// y := GetY ( tower ) ;
13339: LD_ADDR_VAR 0 11
13343: PUSH
13344: LD_VAR 0 1
13348: PPUSH
13349: CALL_OW 251
13353: ST_TO_ADDR
// if not x or not y then
13354: LD_VAR 0 10
13358: NOT
13359: PUSH
13360: LD_VAR 0 11
13364: NOT
13365: OR
13366: IFFALSE 13370
// exit ;
13368: GO 14403
// weapon := 0 ;
13370: LD_ADDR_VAR 0 18
13374: PUSH
13375: LD_INT 0
13377: ST_TO_ADDR
// fac_list := [ ] ;
13378: LD_ADDR_VAR 0 17
13382: PUSH
13383: EMPTY
13384: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13385: LD_ADDR_VAR 0 6
13389: PUSH
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_VAR 0 2
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL 10974 0 3
13412: PPUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 72
13427: ST_TO_ADDR
// if not factories then
13428: LD_VAR 0 6
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 14403
// for i in factories do
13437: LD_ADDR_VAR 0 8
13441: PUSH
13442: LD_VAR 0 6
13446: PUSH
13447: FOR_IN
13448: IFFALSE 13473
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13450: LD_ADDR_VAR 0 17
13454: PUSH
13455: LD_VAR 0 17
13459: PUSH
13460: LD_VAR 0 8
13464: PPUSH
13465: CALL_OW 478
13469: UNION
13470: ST_TO_ADDR
13471: GO 13447
13473: POP
13474: POP
// if not fac_list then
13475: LD_VAR 0 17
13479: NOT
13480: IFFALSE 13484
// exit ;
13482: GO 14403
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13484: LD_ADDR_VAR 0 5
13488: PUSH
13489: LD_INT 4
13491: PUSH
13492: LD_INT 5
13494: PUSH
13495: LD_INT 9
13497: PUSH
13498: LD_INT 10
13500: PUSH
13501: LD_INT 6
13503: PUSH
13504: LD_INT 7
13506: PUSH
13507: LD_INT 11
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 27
13521: PUSH
13522: LD_INT 28
13524: PUSH
13525: LD_INT 26
13527: PUSH
13528: LD_INT 30
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 43
13539: PUSH
13540: LD_INT 44
13542: PUSH
13543: LD_INT 46
13545: PUSH
13546: LD_INT 45
13548: PUSH
13549: LD_INT 47
13551: PUSH
13552: LD_INT 49
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: LD_VAR 0 12
13572: ARRAY
13573: ST_TO_ADDR
// list := list isect fac_list ;
13574: LD_ADDR_VAR 0 5
13578: PUSH
13579: LD_VAR 0 5
13583: PUSH
13584: LD_VAR 0 17
13588: ISECT
13589: ST_TO_ADDR
// if not list then
13590: LD_VAR 0 5
13594: NOT
13595: IFFALSE 13599
// exit ;
13597: GO 14403
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13599: LD_VAR 0 12
13603: PUSH
13604: LD_INT 3
13606: EQUAL
13607: PUSH
13608: LD_INT 49
13610: PUSH
13611: LD_VAR 0 5
13615: IN
13616: AND
13617: PUSH
13618: LD_INT 31
13620: PPUSH
13621: LD_VAR 0 16
13625: PPUSH
13626: CALL_OW 321
13630: PUSH
13631: LD_INT 2
13633: EQUAL
13634: AND
13635: IFFALSE 13695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13637: LD_INT 22
13639: PUSH
13640: LD_VAR 0 16
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 35
13651: PUSH
13652: LD_INT 49
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 91
13661: PUSH
13662: LD_VAR 0 1
13666: PUSH
13667: LD_INT 10
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: NOT
13685: IFFALSE 13695
// weapon := ru_time_lapser ;
13687: LD_ADDR_VAR 0 18
13691: PUSH
13692: LD_INT 49
13694: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13695: LD_VAR 0 12
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: IN
13710: PUSH
13711: LD_INT 11
13713: PUSH
13714: LD_VAR 0 5
13718: IN
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: LD_VAR 0 5
13727: IN
13728: OR
13729: AND
13730: PUSH
13731: LD_INT 6
13733: PPUSH
13734: LD_VAR 0 16
13738: PPUSH
13739: CALL_OW 321
13743: PUSH
13744: LD_INT 2
13746: EQUAL
13747: AND
13748: IFFALSE 13913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13750: LD_INT 22
13752: PUSH
13753: LD_VAR 0 16
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 35
13767: PUSH
13768: LD_INT 11
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 35
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 91
13792: PUSH
13793: LD_VAR 0 1
13797: PUSH
13798: LD_INT 18
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: PPUSH
13811: CALL_OW 69
13815: NOT
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_VAR 0 16
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 30
13834: PUSH
13835: LD_INT 32
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 33
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 91
13859: PUSH
13860: LD_VAR 0 1
13864: PUSH
13865: LD_INT 12
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: PUSH
13886: LD_INT 2
13888: GREATER
13889: AND
13890: IFFALSE 13913
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13892: LD_ADDR_VAR 0 18
13896: PUSH
13897: LD_INT 11
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_VAR 0 12
13911: ARRAY
13912: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13913: LD_VAR 0 18
13917: NOT
13918: PUSH
13919: LD_INT 40
13921: PPUSH
13922: LD_VAR 0 16
13926: PPUSH
13927: CALL_OW 321
13931: PUSH
13932: LD_INT 2
13934: EQUAL
13935: AND
13936: PUSH
13937: LD_INT 7
13939: PUSH
13940: LD_VAR 0 5
13944: IN
13945: PUSH
13946: LD_INT 28
13948: PUSH
13949: LD_VAR 0 5
13953: IN
13954: OR
13955: PUSH
13956: LD_INT 45
13958: PUSH
13959: LD_VAR 0 5
13963: IN
13964: OR
13965: AND
13966: IFFALSE 14220
// begin hex := GetHexInfo ( x , y ) ;
13968: LD_ADDR_VAR 0 4
13972: PUSH
13973: LD_VAR 0 10
13977: PPUSH
13978: LD_VAR 0 11
13982: PPUSH
13983: CALL_OW 546
13987: ST_TO_ADDR
// if hex [ 1 ] then
13988: LD_VAR 0 4
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: IFFALSE 14000
// exit ;
13998: GO 14403
// height := hex [ 2 ] ;
14000: LD_ADDR_VAR 0 15
14004: PUSH
14005: LD_VAR 0 4
14009: PUSH
14010: LD_INT 2
14012: ARRAY
14013: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14014: LD_ADDR_VAR 0 14
14018: PUSH
14019: LD_INT 0
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: LD_INT 5
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: ST_TO_ADDR
// for i in tmp do
14037: LD_ADDR_VAR 0 8
14041: PUSH
14042: LD_VAR 0 14
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14218
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14050: LD_ADDR_VAR 0 9
14054: PUSH
14055: LD_VAR 0 10
14059: PPUSH
14060: LD_VAR 0 8
14064: PPUSH
14065: LD_INT 5
14067: PPUSH
14068: CALL_OW 272
14072: PUSH
14073: LD_VAR 0 11
14077: PPUSH
14078: LD_VAR 0 8
14082: PPUSH
14083: LD_INT 5
14085: PPUSH
14086: CALL_OW 273
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14095: LD_VAR 0 9
14099: PUSH
14100: LD_INT 1
14102: ARRAY
14103: PPUSH
14104: LD_VAR 0 9
14108: PUSH
14109: LD_INT 2
14111: ARRAY
14112: PPUSH
14113: CALL_OW 488
14117: IFFALSE 14216
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14119: LD_ADDR_VAR 0 4
14123: PUSH
14124: LD_VAR 0 9
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 9
14137: PUSH
14138: LD_INT 2
14140: ARRAY
14141: PPUSH
14142: CALL_OW 546
14146: ST_TO_ADDR
// if hex [ 1 ] then
14147: LD_VAR 0 4
14151: PUSH
14152: LD_INT 1
14154: ARRAY
14155: IFFALSE 14159
// continue ;
14157: GO 14047
// h := hex [ 2 ] ;
14159: LD_ADDR_VAR 0 13
14163: PUSH
14164: LD_VAR 0 4
14168: PUSH
14169: LD_INT 2
14171: ARRAY
14172: ST_TO_ADDR
// if h + 7 < height then
14173: LD_VAR 0 13
14177: PUSH
14178: LD_INT 7
14180: PLUS
14181: PUSH
14182: LD_VAR 0 15
14186: LESS
14187: IFFALSE 14216
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14189: LD_ADDR_VAR 0 18
14193: PUSH
14194: LD_INT 7
14196: PUSH
14197: LD_INT 28
14199: PUSH
14200: LD_INT 45
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_VAR 0 12
14212: ARRAY
14213: ST_TO_ADDR
// break ;
14214: GO 14218
// end ; end ; end ;
14216: GO 14047
14218: POP
14219: POP
// end ; if not weapon then
14220: LD_VAR 0 18
14224: NOT
14225: IFFALSE 14285
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14227: LD_ADDR_VAR 0 5
14231: PUSH
14232: LD_VAR 0 5
14236: PUSH
14237: LD_INT 11
14239: PUSH
14240: LD_INT 30
14242: PUSH
14243: LD_INT 49
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: DIFF
14251: ST_TO_ADDR
// if not list then
14252: LD_VAR 0 5
14256: NOT
14257: IFFALSE 14261
// exit ;
14259: GO 14403
// weapon := list [ rand ( 1 , list ) ] ;
14261: LD_ADDR_VAR 0 18
14265: PUSH
14266: LD_VAR 0 5
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 5
14278: PPUSH
14279: CALL_OW 12
14283: ARRAY
14284: ST_TO_ADDR
// end ; if weapon then
14285: LD_VAR 0 18
14289: IFFALSE 14403
// begin tmp := CostOfWeapon ( weapon ) ;
14291: LD_ADDR_VAR 0 14
14295: PUSH
14296: LD_VAR 0 18
14300: PPUSH
14301: CALL_OW 451
14305: ST_TO_ADDR
// j := GetBase ( tower ) ;
14306: LD_ADDR_VAR 0 9
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 274
14320: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14321: LD_VAR 0 9
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 275
14333: PUSH
14334: LD_VAR 0 14
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: GREATEREQUAL
14343: PUSH
14344: LD_VAR 0 9
14348: PPUSH
14349: LD_INT 2
14351: PPUSH
14352: CALL_OW 275
14356: PUSH
14357: LD_VAR 0 14
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: GREATEREQUAL
14366: AND
14367: PUSH
14368: LD_VAR 0 9
14372: PPUSH
14373: LD_INT 3
14375: PPUSH
14376: CALL_OW 275
14380: PUSH
14381: LD_VAR 0 14
14385: PUSH
14386: LD_INT 3
14388: ARRAY
14389: GREATEREQUAL
14390: AND
14391: IFFALSE 14403
// result := weapon ;
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_VAR 0 18
14402: ST_TO_ADDR
// end ; end ;
14403: LD_VAR 0 3
14407: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14408: LD_INT 0
14410: PPUSH
14411: PPUSH
// result := true ;
14412: LD_ADDR_VAR 0 3
14416: PUSH
14417: LD_INT 1
14419: ST_TO_ADDR
// if array1 = array2 then
14420: LD_VAR 0 1
14424: PUSH
14425: LD_VAR 0 2
14429: EQUAL
14430: IFFALSE 14490
// begin for i = 1 to array1 do
14432: LD_ADDR_VAR 0 4
14436: PUSH
14437: DOUBLE
14438: LD_INT 1
14440: DEC
14441: ST_TO_ADDR
14442: LD_VAR 0 1
14446: PUSH
14447: FOR_TO
14448: IFFALSE 14486
// if array1 [ i ] <> array2 [ i ] then
14450: LD_VAR 0 1
14454: PUSH
14455: LD_VAR 0 4
14459: ARRAY
14460: PUSH
14461: LD_VAR 0 2
14465: PUSH
14466: LD_VAR 0 4
14470: ARRAY
14471: NONEQUAL
14472: IFFALSE 14484
// begin result := false ;
14474: LD_ADDR_VAR 0 3
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// break ;
14482: GO 14486
// end ;
14484: GO 14447
14486: POP
14487: POP
// end else
14488: GO 14498
// result := false ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// end ;
14498: LD_VAR 0 3
14502: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14503: LD_INT 0
14505: PPUSH
14506: PPUSH
// if not array1 or not array2 then
14507: LD_VAR 0 1
14511: NOT
14512: PUSH
14513: LD_VAR 0 2
14517: NOT
14518: OR
14519: IFFALSE 14523
// exit ;
14521: GO 14587
// result := true ;
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_INT 1
14530: ST_TO_ADDR
// for i = 1 to array1 do
14531: LD_ADDR_VAR 0 4
14535: PUSH
14536: DOUBLE
14537: LD_INT 1
14539: DEC
14540: ST_TO_ADDR
14541: LD_VAR 0 1
14545: PUSH
14546: FOR_TO
14547: IFFALSE 14585
// if array1 [ i ] <> array2 [ i ] then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_VAR 0 4
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 2
14564: PUSH
14565: LD_VAR 0 4
14569: ARRAY
14570: NONEQUAL
14571: IFFALSE 14583
// begin result := false ;
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// break ;
14581: GO 14585
// end ;
14583: GO 14546
14585: POP
14586: POP
// end ;
14587: LD_VAR 0 3
14591: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
14596: PPUSH
// pom := GetBase ( fac ) ;
14597: LD_ADDR_VAR 0 5
14601: PUSH
14602: LD_VAR 0 1
14606: PPUSH
14607: CALL_OW 274
14611: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14612: LD_ADDR_VAR 0 4
14616: PUSH
14617: LD_VAR 0 2
14621: PUSH
14622: LD_INT 1
14624: ARRAY
14625: PPUSH
14626: LD_VAR 0 2
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: PPUSH
14635: LD_VAR 0 2
14639: PUSH
14640: LD_INT 3
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 2
14648: PUSH
14649: LD_INT 4
14651: ARRAY
14652: PPUSH
14653: CALL_OW 449
14657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14658: LD_ADDR_VAR 0 3
14662: PUSH
14663: LD_VAR 0 5
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 275
14675: PUSH
14676: LD_VAR 0 4
14680: PUSH
14681: LD_INT 1
14683: ARRAY
14684: GREATEREQUAL
14685: PUSH
14686: LD_VAR 0 5
14690: PPUSH
14691: LD_INT 2
14693: PPUSH
14694: CALL_OW 275
14698: PUSH
14699: LD_VAR 0 4
14703: PUSH
14704: LD_INT 2
14706: ARRAY
14707: GREATEREQUAL
14708: AND
14709: PUSH
14710: LD_VAR 0 5
14714: PPUSH
14715: LD_INT 3
14717: PPUSH
14718: CALL_OW 275
14722: PUSH
14723: LD_VAR 0 4
14727: PUSH
14728: LD_INT 3
14730: ARRAY
14731: GREATEREQUAL
14732: AND
14733: ST_TO_ADDR
// end ;
14734: LD_VAR 0 3
14738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
// pom := GetBase ( building ) ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 274
14759: ST_TO_ADDR
// if not pom then
14760: LD_VAR 0 3
14764: NOT
14765: IFFALSE 14769
// exit ;
14767: GO 14939
// btype := GetBType ( building ) ;
14769: LD_ADDR_VAR 0 5
14773: PUSH
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 266
14783: ST_TO_ADDR
// if btype = b_armoury then
14784: LD_VAR 0 5
14788: PUSH
14789: LD_INT 4
14791: EQUAL
14792: IFFALSE 14802
// btype := b_barracks ;
14794: LD_ADDR_VAR 0 5
14798: PUSH
14799: LD_INT 5
14801: ST_TO_ADDR
// if btype = b_depot then
14802: LD_VAR 0 5
14806: PUSH
14807: LD_INT 0
14809: EQUAL
14810: IFFALSE 14820
// btype := b_warehouse ;
14812: LD_ADDR_VAR 0 5
14816: PUSH
14817: LD_INT 1
14819: ST_TO_ADDR
// if btype = b_workshop then
14820: LD_VAR 0 5
14824: PUSH
14825: LD_INT 2
14827: EQUAL
14828: IFFALSE 14838
// btype := b_factory ;
14830: LD_ADDR_VAR 0 5
14834: PUSH
14835: LD_INT 3
14837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14838: LD_ADDR_VAR 0 4
14842: PUSH
14843: LD_VAR 0 5
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 248
14857: PPUSH
14858: CALL_OW 450
14862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14863: LD_ADDR_VAR 0 2
14867: PUSH
14868: LD_VAR 0 3
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: CALL_OW 275
14880: PUSH
14881: LD_VAR 0 4
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: GREATEREQUAL
14890: PUSH
14891: LD_VAR 0 3
14895: PPUSH
14896: LD_INT 2
14898: PPUSH
14899: CALL_OW 275
14903: PUSH
14904: LD_VAR 0 4
14908: PUSH
14909: LD_INT 2
14911: ARRAY
14912: GREATEREQUAL
14913: AND
14914: PUSH
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 3
14922: PPUSH
14923: CALL_OW 275
14927: PUSH
14928: LD_VAR 0 4
14932: PUSH
14933: LD_INT 3
14935: ARRAY
14936: GREATEREQUAL
14937: AND
14938: ST_TO_ADDR
// end ;
14939: LD_VAR 0 2
14943: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// pom := GetBase ( building ) ;
14949: LD_ADDR_VAR 0 4
14953: PUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 274
14963: ST_TO_ADDR
// if not pom then
14964: LD_VAR 0 4
14968: NOT
14969: IFFALSE 14973
// exit ;
14971: GO 15074
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14973: LD_ADDR_VAR 0 5
14977: PUSH
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 248
14992: PPUSH
14993: CALL_OW 450
14997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14998: LD_ADDR_VAR 0 3
15002: PUSH
15003: LD_VAR 0 4
15007: PPUSH
15008: LD_INT 1
15010: PPUSH
15011: CALL_OW 275
15015: PUSH
15016: LD_VAR 0 5
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: GREATEREQUAL
15025: PUSH
15026: LD_VAR 0 4
15030: PPUSH
15031: LD_INT 2
15033: PPUSH
15034: CALL_OW 275
15038: PUSH
15039: LD_VAR 0 5
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: GREATEREQUAL
15048: AND
15049: PUSH
15050: LD_VAR 0 4
15054: PPUSH
15055: LD_INT 3
15057: PPUSH
15058: CALL_OW 275
15062: PUSH
15063: LD_VAR 0 5
15067: PUSH
15068: LD_INT 3
15070: ARRAY
15071: GREATEREQUAL
15072: AND
15073: ST_TO_ADDR
// end ;
15074: LD_VAR 0 3
15078: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15079: LD_INT 0
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
// result := false ;
15092: LD_ADDR_VAR 0 8
15096: PUSH
15097: LD_INT 0
15099: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15100: LD_VAR 0 5
15104: NOT
15105: PUSH
15106: LD_VAR 0 1
15110: NOT
15111: OR
15112: PUSH
15113: LD_VAR 0 2
15117: NOT
15118: OR
15119: PUSH
15120: LD_VAR 0 3
15124: NOT
15125: OR
15126: IFFALSE 15130
// exit ;
15128: GO 15944
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15130: LD_ADDR_VAR 0 14
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: LD_VAR 0 2
15144: PPUSH
15145: LD_VAR 0 3
15149: PPUSH
15150: LD_VAR 0 4
15154: PPUSH
15155: LD_VAR 0 5
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: CALL_OW 248
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL 17197 0 6
15176: ST_TO_ADDR
// if not hexes then
15177: LD_VAR 0 14
15181: NOT
15182: IFFALSE 15186
// exit ;
15184: GO 15944
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15186: LD_ADDR_VAR 0 17
15190: PUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_INT 22
15198: PUSH
15199: LD_VAR 0 13
15203: PPUSH
15204: CALL_OW 255
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 30
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 30
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 72
15249: ST_TO_ADDR
// for i = 1 to hexes do
15250: LD_ADDR_VAR 0 9
15254: PUSH
15255: DOUBLE
15256: LD_INT 1
15258: DEC
15259: ST_TO_ADDR
15260: LD_VAR 0 14
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15942
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15268: LD_ADDR_VAR 0 13
15272: PUSH
15273: LD_VAR 0 14
15277: PUSH
15278: LD_VAR 0 9
15282: ARRAY
15283: PUSH
15284: LD_INT 1
15286: ARRAY
15287: PPUSH
15288: LD_VAR 0 14
15292: PUSH
15293: LD_VAR 0 9
15297: ARRAY
15298: PUSH
15299: LD_INT 2
15301: ARRAY
15302: PPUSH
15303: CALL_OW 428
15307: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15308: LD_VAR 0 14
15312: PUSH
15313: LD_VAR 0 9
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: LD_VAR 0 14
15327: PUSH
15328: LD_VAR 0 9
15332: ARRAY
15333: PUSH
15334: LD_INT 2
15336: ARRAY
15337: PPUSH
15338: CALL_OW 351
15342: PUSH
15343: LD_VAR 0 14
15347: PUSH
15348: LD_VAR 0 9
15352: ARRAY
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 14
15362: PUSH
15363: LD_VAR 0 9
15367: ARRAY
15368: PUSH
15369: LD_INT 2
15371: ARRAY
15372: PPUSH
15373: CALL_OW 488
15377: NOT
15378: OR
15379: PUSH
15380: LD_VAR 0 13
15384: PPUSH
15385: CALL_OW 247
15389: PUSH
15390: LD_INT 3
15392: EQUAL
15393: OR
15394: IFFALSE 15400
// exit ;
15396: POP
15397: POP
15398: GO 15944
// if not tmp then
15400: LD_VAR 0 13
15404: NOT
15405: IFFALSE 15409
// continue ;
15407: GO 15265
// result := true ;
15409: LD_ADDR_VAR 0 8
15413: PUSH
15414: LD_INT 1
15416: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15417: LD_VAR 0 6
15421: PUSH
15422: LD_VAR 0 13
15426: PPUSH
15427: CALL_OW 247
15431: PUSH
15432: LD_INT 2
15434: EQUAL
15435: AND
15436: PUSH
15437: LD_VAR 0 13
15441: PPUSH
15442: CALL_OW 263
15446: PUSH
15447: LD_INT 1
15449: EQUAL
15450: AND
15451: IFFALSE 15615
// begin if IsDrivenBy ( tmp ) then
15453: LD_VAR 0 13
15457: PPUSH
15458: CALL_OW 311
15462: IFFALSE 15466
// continue ;
15464: GO 15265
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15466: LD_VAR 0 6
15470: PPUSH
15471: LD_INT 3
15473: PUSH
15474: LD_INT 60
15476: PUSH
15477: EMPTY
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 3
15486: PUSH
15487: LD_INT 55
15489: PUSH
15490: EMPTY
15491: LIST
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 72
15505: IFFALSE 15613
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15507: LD_ADDR_VAR 0 18
15511: PUSH
15512: LD_VAR 0 6
15516: PPUSH
15517: LD_INT 3
15519: PUSH
15520: LD_INT 60
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 55
15535: PUSH
15536: EMPTY
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 72
15551: PUSH
15552: LD_INT 1
15554: ARRAY
15555: ST_TO_ADDR
// if IsInUnit ( driver ) then
15556: LD_VAR 0 18
15560: PPUSH
15561: CALL_OW 310
15565: IFFALSE 15576
// ComExit ( driver ) ;
15567: LD_VAR 0 18
15571: PPUSH
15572: CALL 40978 0 1
// AddComEnterUnit ( driver , tmp ) ;
15576: LD_VAR 0 18
15580: PPUSH
15581: LD_VAR 0 13
15585: PPUSH
15586: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15590: LD_VAR 0 18
15594: PPUSH
15595: LD_VAR 0 7
15599: PPUSH
15600: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15604: LD_VAR 0 18
15608: PPUSH
15609: CALL_OW 181
// end ; continue ;
15613: GO 15265
// end ; if not cleaners or not tmp in cleaners then
15615: LD_VAR 0 6
15619: NOT
15620: PUSH
15621: LD_VAR 0 13
15625: PUSH
15626: LD_VAR 0 6
15630: IN
15631: NOT
15632: OR
15633: IFFALSE 15940
// begin if dep then
15635: LD_VAR 0 17
15639: IFFALSE 15775
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15641: LD_ADDR_VAR 0 16
15645: PUSH
15646: LD_VAR 0 17
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PPUSH
15655: CALL_OW 250
15659: PPUSH
15660: LD_VAR 0 17
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 254
15673: PPUSH
15674: LD_INT 5
15676: PPUSH
15677: CALL_OW 272
15681: PUSH
15682: LD_VAR 0 17
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: CALL_OW 251
15695: PPUSH
15696: LD_VAR 0 17
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: CALL_OW 254
15709: PPUSH
15710: LD_INT 5
15712: PPUSH
15713: CALL_OW 273
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15722: LD_VAR 0 16
15726: PUSH
15727: LD_INT 1
15729: ARRAY
15730: PPUSH
15731: LD_VAR 0 16
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: PPUSH
15740: CALL_OW 488
15744: IFFALSE 15775
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15746: LD_VAR 0 13
15750: PPUSH
15751: LD_VAR 0 16
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 16
15764: PUSH
15765: LD_INT 2
15767: ARRAY
15768: PPUSH
15769: CALL_OW 111
// continue ;
15773: GO 15265
// end ; end ; r := GetDir ( tmp ) ;
15775: LD_ADDR_VAR 0 15
15779: PUSH
15780: LD_VAR 0 13
15784: PPUSH
15785: CALL_OW 254
15789: ST_TO_ADDR
// if r = 5 then
15790: LD_VAR 0 15
15794: PUSH
15795: LD_INT 5
15797: EQUAL
15798: IFFALSE 15808
// r := 0 ;
15800: LD_ADDR_VAR 0 15
15804: PUSH
15805: LD_INT 0
15807: ST_TO_ADDR
// for j = r to 5 do
15808: LD_ADDR_VAR 0 10
15812: PUSH
15813: DOUBLE
15814: LD_VAR 0 15
15818: DEC
15819: ST_TO_ADDR
15820: LD_INT 5
15822: PUSH
15823: FOR_TO
15824: IFFALSE 15938
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15826: LD_ADDR_VAR 0 11
15830: PUSH
15831: LD_VAR 0 13
15835: PPUSH
15836: CALL_OW 250
15840: PPUSH
15841: LD_VAR 0 10
15845: PPUSH
15846: LD_INT 2
15848: PPUSH
15849: CALL_OW 272
15853: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15854: LD_ADDR_VAR 0 12
15858: PUSH
15859: LD_VAR 0 13
15863: PPUSH
15864: CALL_OW 251
15868: PPUSH
15869: LD_VAR 0 10
15873: PPUSH
15874: LD_INT 2
15876: PPUSH
15877: CALL_OW 273
15881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15882: LD_VAR 0 11
15886: PPUSH
15887: LD_VAR 0 12
15891: PPUSH
15892: CALL_OW 488
15896: PUSH
15897: LD_VAR 0 11
15901: PPUSH
15902: LD_VAR 0 12
15906: PPUSH
15907: CALL_OW 428
15911: NOT
15912: AND
15913: IFFALSE 15936
// begin ComMoveXY ( tmp , _x , _y ) ;
15915: LD_VAR 0 13
15919: PPUSH
15920: LD_VAR 0 11
15924: PPUSH
15925: LD_VAR 0 12
15929: PPUSH
15930: CALL_OW 111
// break ;
15934: GO 15938
// end ; end ;
15936: GO 15823
15938: POP
15939: POP
// end ; end ;
15940: GO 15265
15942: POP
15943: POP
// end ;
15944: LD_VAR 0 8
15948: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15949: LD_INT 0
15951: PPUSH
// result := true ;
15952: LD_ADDR_VAR 0 3
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15960: LD_VAR 0 2
15964: PUSH
15965: LD_INT 24
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15979
15971: LD_INT 33
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 16004
15979: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: LD_INT 32
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 321
15997: PUSH
15998: LD_INT 2
16000: EQUAL
16001: ST_TO_ADDR
16002: GO 16320
16004: LD_INT 20
16006: DOUBLE
16007: EQUAL
16008: IFTRUE 16012
16010: GO 16037
16012: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16013: LD_ADDR_VAR 0 3
16017: PUSH
16018: LD_INT 6
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 321
16030: PUSH
16031: LD_INT 2
16033: EQUAL
16034: ST_TO_ADDR
16035: GO 16320
16037: LD_INT 22
16039: DOUBLE
16040: EQUAL
16041: IFTRUE 16051
16043: LD_INT 36
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16076
16051: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: LD_INT 15
16059: PPUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 321
16069: PUSH
16070: LD_INT 2
16072: EQUAL
16073: ST_TO_ADDR
16074: GO 16320
16076: LD_INT 30
16078: DOUBLE
16079: EQUAL
16080: IFTRUE 16084
16082: GO 16109
16084: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16085: LD_ADDR_VAR 0 3
16089: PUSH
16090: LD_INT 20
16092: PPUSH
16093: LD_VAR 0 1
16097: PPUSH
16098: CALL_OW 321
16102: PUSH
16103: LD_INT 2
16105: EQUAL
16106: ST_TO_ADDR
16107: GO 16320
16109: LD_INT 28
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16123
16115: LD_INT 21
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16148
16123: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16124: LD_ADDR_VAR 0 3
16128: PUSH
16129: LD_INT 21
16131: PPUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 321
16141: PUSH
16142: LD_INT 2
16144: EQUAL
16145: ST_TO_ADDR
16146: GO 16320
16148: LD_INT 16
16150: DOUBLE
16151: EQUAL
16152: IFTRUE 16156
16154: GO 16181
16156: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16157: LD_ADDR_VAR 0 3
16161: PUSH
16162: LD_INT 84
16164: PPUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 321
16174: PUSH
16175: LD_INT 2
16177: EQUAL
16178: ST_TO_ADDR
16179: GO 16320
16181: LD_INT 19
16183: DOUBLE
16184: EQUAL
16185: IFTRUE 16195
16187: LD_INT 23
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16220
16195: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16196: LD_ADDR_VAR 0 3
16200: PUSH
16201: LD_INT 83
16203: PPUSH
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL_OW 321
16213: PUSH
16214: LD_INT 2
16216: EQUAL
16217: ST_TO_ADDR
16218: GO 16320
16220: LD_INT 17
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16253
16228: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16229: LD_ADDR_VAR 0 3
16233: PUSH
16234: LD_INT 39
16236: PPUSH
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL_OW 321
16246: PUSH
16247: LD_INT 2
16249: EQUAL
16250: ST_TO_ADDR
16251: GO 16320
16253: LD_INT 18
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16286
16261: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_INT 40
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 321
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: ST_TO_ADDR
16284: GO 16320
16286: LD_INT 27
16288: DOUBLE
16289: EQUAL
16290: IFTRUE 16294
16292: GO 16319
16294: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: LD_INT 35
16302: PPUSH
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 321
16312: PUSH
16313: LD_INT 2
16315: EQUAL
16316: ST_TO_ADDR
16317: GO 16320
16319: POP
// end ;
16320: LD_VAR 0 3
16324: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
16337: PPUSH
// result := false ;
16338: LD_ADDR_VAR 0 6
16342: PUSH
16343: LD_INT 0
16345: ST_TO_ADDR
// if btype = b_depot then
16346: LD_VAR 0 2
16350: PUSH
16351: LD_INT 0
16353: EQUAL
16354: IFFALSE 16366
// begin result := true ;
16356: LD_ADDR_VAR 0 6
16360: PUSH
16361: LD_INT 1
16363: ST_TO_ADDR
// exit ;
16364: GO 17192
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16366: LD_VAR 0 1
16370: NOT
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 266
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: IN
16392: NOT
16393: OR
16394: PUSH
16395: LD_VAR 0 2
16399: NOT
16400: OR
16401: PUSH
16402: LD_VAR 0 5
16406: PUSH
16407: LD_INT 0
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 3
16418: PUSH
16419: LD_INT 4
16421: PUSH
16422: LD_INT 5
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: IN
16433: NOT
16434: OR
16435: PUSH
16436: LD_VAR 0 3
16440: PPUSH
16441: LD_VAR 0 4
16445: PPUSH
16446: CALL_OW 488
16450: NOT
16451: OR
16452: IFFALSE 16456
// exit ;
16454: GO 17192
// side := GetSide ( depot ) ;
16456: LD_ADDR_VAR 0 9
16460: PUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL_OW 255
16470: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16471: LD_VAR 0 9
16475: PPUSH
16476: LD_VAR 0 2
16480: PPUSH
16481: CALL 15949 0 2
16485: NOT
16486: IFFALSE 16490
// exit ;
16488: GO 17192
// pom := GetBase ( depot ) ;
16490: LD_ADDR_VAR 0 10
16494: PUSH
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 274
16504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16505: LD_ADDR_VAR 0 11
16509: PUSH
16510: LD_VAR 0 2
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 248
16524: PPUSH
16525: CALL_OW 450
16529: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16530: LD_VAR 0 10
16534: PPUSH
16535: LD_INT 1
16537: PPUSH
16538: CALL_OW 275
16542: PUSH
16543: LD_VAR 0 11
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: GREATEREQUAL
16552: PUSH
16553: LD_VAR 0 10
16557: PPUSH
16558: LD_INT 2
16560: PPUSH
16561: CALL_OW 275
16565: PUSH
16566: LD_VAR 0 11
16570: PUSH
16571: LD_INT 2
16573: ARRAY
16574: GREATEREQUAL
16575: AND
16576: PUSH
16577: LD_VAR 0 10
16581: PPUSH
16582: LD_INT 3
16584: PPUSH
16585: CALL_OW 275
16589: PUSH
16590: LD_VAR 0 11
16594: PUSH
16595: LD_INT 3
16597: ARRAY
16598: GREATEREQUAL
16599: AND
16600: NOT
16601: IFFALSE 16605
// exit ;
16603: GO 17192
// if GetBType ( depot ) = b_depot then
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 266
16614: PUSH
16615: LD_INT 0
16617: EQUAL
16618: IFFALSE 16630
// dist := 28 else
16620: LD_ADDR_VAR 0 14
16624: PUSH
16625: LD_INT 28
16627: ST_TO_ADDR
16628: GO 16638
// dist := 36 ;
16630: LD_ADDR_VAR 0 14
16634: PUSH
16635: LD_INT 36
16637: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16638: LD_VAR 0 1
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: CALL_OW 297
16657: PUSH
16658: LD_VAR 0 14
16662: GREATER
16663: IFFALSE 16667
// exit ;
16665: GO 17192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16667: LD_ADDR_VAR 0 12
16671: PUSH
16672: LD_VAR 0 2
16676: PPUSH
16677: LD_VAR 0 3
16681: PPUSH
16682: LD_VAR 0 4
16686: PPUSH
16687: LD_VAR 0 5
16691: PPUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 248
16701: PPUSH
16702: LD_INT 0
16704: PPUSH
16705: CALL 17197 0 6
16709: ST_TO_ADDR
// if not hexes then
16710: LD_VAR 0 12
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 17192
// hex := GetHexInfo ( x , y ) ;
16719: LD_ADDR_VAR 0 15
16723: PUSH
16724: LD_VAR 0 3
16728: PPUSH
16729: LD_VAR 0 4
16733: PPUSH
16734: CALL_OW 546
16738: ST_TO_ADDR
// if hex [ 1 ] then
16739: LD_VAR 0 15
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: IFFALSE 16751
// exit ;
16749: GO 17192
// height := hex [ 2 ] ;
16751: LD_ADDR_VAR 0 13
16755: PUSH
16756: LD_VAR 0 15
16760: PUSH
16761: LD_INT 2
16763: ARRAY
16764: ST_TO_ADDR
// for i = 1 to hexes do
16765: LD_ADDR_VAR 0 7
16769: PUSH
16770: DOUBLE
16771: LD_INT 1
16773: DEC
16774: ST_TO_ADDR
16775: LD_VAR 0 12
16779: PUSH
16780: FOR_TO
16781: IFFALSE 17111
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16783: LD_VAR 0 12
16787: PUSH
16788: LD_VAR 0 7
16792: ARRAY
16793: PUSH
16794: LD_INT 1
16796: ARRAY
16797: PPUSH
16798: LD_VAR 0 12
16802: PUSH
16803: LD_VAR 0 7
16807: ARRAY
16808: PUSH
16809: LD_INT 2
16811: ARRAY
16812: PPUSH
16813: CALL_OW 488
16817: NOT
16818: PUSH
16819: LD_VAR 0 12
16823: PUSH
16824: LD_VAR 0 7
16828: ARRAY
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: LD_VAR 0 12
16838: PUSH
16839: LD_VAR 0 7
16843: ARRAY
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PPUSH
16849: CALL_OW 428
16853: PUSH
16854: LD_INT 0
16856: GREATER
16857: OR
16858: PUSH
16859: LD_VAR 0 12
16863: PUSH
16864: LD_VAR 0 7
16868: ARRAY
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: PPUSH
16874: LD_VAR 0 12
16878: PUSH
16879: LD_VAR 0 7
16883: ARRAY
16884: PUSH
16885: LD_INT 2
16887: ARRAY
16888: PPUSH
16889: CALL_OW 351
16893: OR
16894: IFFALSE 16900
// exit ;
16896: POP
16897: POP
16898: GO 17192
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16900: LD_ADDR_VAR 0 8
16904: PUSH
16905: LD_VAR 0 12
16909: PUSH
16910: LD_VAR 0 7
16914: ARRAY
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: PPUSH
16920: LD_VAR 0 12
16924: PUSH
16925: LD_VAR 0 7
16929: ARRAY
16930: PUSH
16931: LD_INT 2
16933: ARRAY
16934: PPUSH
16935: CALL_OW 546
16939: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16940: LD_VAR 0 8
16944: PUSH
16945: LD_INT 1
16947: ARRAY
16948: PUSH
16949: LD_VAR 0 8
16953: PUSH
16954: LD_INT 2
16956: ARRAY
16957: PUSH
16958: LD_VAR 0 13
16962: PUSH
16963: LD_INT 2
16965: PLUS
16966: GREATER
16967: OR
16968: PUSH
16969: LD_VAR 0 8
16973: PUSH
16974: LD_INT 2
16976: ARRAY
16977: PUSH
16978: LD_VAR 0 13
16982: PUSH
16983: LD_INT 2
16985: MINUS
16986: LESS
16987: OR
16988: PUSH
16989: LD_VAR 0 8
16993: PUSH
16994: LD_INT 3
16996: ARRAY
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: LD_INT 8
17003: PUSH
17004: LD_INT 9
17006: PUSH
17007: LD_INT 10
17009: PUSH
17010: LD_INT 11
17012: PUSH
17013: LD_INT 12
17015: PUSH
17016: LD_INT 13
17018: PUSH
17019: LD_INT 16
17021: PUSH
17022: LD_INT 17
17024: PUSH
17025: LD_INT 18
17027: PUSH
17028: LD_INT 19
17030: PUSH
17031: LD_INT 20
17033: PUSH
17034: LD_INT 21
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: IN
17052: NOT
17053: OR
17054: PUSH
17055: LD_VAR 0 8
17059: PUSH
17060: LD_INT 5
17062: ARRAY
17063: NOT
17064: OR
17065: PUSH
17066: LD_VAR 0 8
17070: PUSH
17071: LD_INT 6
17073: ARRAY
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: LD_INT 7
17083: PUSH
17084: LD_INT 9
17086: PUSH
17087: LD_INT 10
17089: PUSH
17090: LD_INT 11
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: IN
17101: NOT
17102: OR
17103: IFFALSE 17109
// exit ;
17105: POP
17106: POP
17107: GO 17192
// end ;
17109: GO 16780
17111: POP
17112: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17113: LD_VAR 0 9
17117: PPUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 4
17127: PPUSH
17128: LD_INT 20
17130: PPUSH
17131: CALL 9115 0 4
17135: PUSH
17136: LD_INT 4
17138: ARRAY
17139: IFFALSE 17143
// exit ;
17141: GO 17192
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17143: LD_VAR 0 2
17147: PUSH
17148: LD_INT 29
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: IN
17158: PUSH
17159: LD_VAR 0 3
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_VAR 0 9
17173: PPUSH
17174: CALL_OW 440
17178: NOT
17179: AND
17180: IFFALSE 17184
// exit ;
17182: GO 17192
// result := true ;
17184: LD_ADDR_VAR 0 6
17188: PUSH
17189: LD_INT 1
17191: ST_TO_ADDR
// end ;
17192: LD_VAR 0 6
17196: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17197: LD_INT 0
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
// result = [ ] ;
17257: LD_ADDR_VAR 0 7
17261: PUSH
17262: EMPTY
17263: ST_TO_ADDR
// temp_list = [ ] ;
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: EMPTY
17270: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17271: LD_VAR 0 4
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 4
17290: PUSH
17291: LD_INT 5
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: IN
17302: NOT
17303: PUSH
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: IN
17319: PUSH
17320: LD_VAR 0 5
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: IN
17339: NOT
17340: AND
17341: OR
17342: IFFALSE 17346
// exit ;
17344: GO 35737
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17346: LD_VAR 0 1
17350: PUSH
17351: LD_INT 6
17353: PUSH
17354: LD_INT 7
17356: PUSH
17357: LD_INT 8
17359: PUSH
17360: LD_INT 13
17362: PUSH
17363: LD_INT 12
17365: PUSH
17366: LD_INT 15
17368: PUSH
17369: LD_INT 11
17371: PUSH
17372: LD_INT 14
17374: PUSH
17375: LD_INT 10
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: IN
17389: IFFALSE 17399
// btype = b_lab ;
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: LD_INT 6
17398: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17399: LD_VAR 0 6
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: IN
17418: NOT
17419: PUSH
17420: LD_VAR 0 1
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: LD_INT 2
17433: PUSH
17434: LD_INT 3
17436: PUSH
17437: LD_INT 6
17439: PUSH
17440: LD_INT 36
17442: PUSH
17443: LD_INT 4
17445: PUSH
17446: LD_INT 5
17448: PUSH
17449: LD_INT 31
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 33
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: IN
17471: NOT
17472: PUSH
17473: LD_VAR 0 6
17477: PUSH
17478: LD_INT 1
17480: EQUAL
17481: AND
17482: OR
17483: PUSH
17484: LD_VAR 0 1
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: IN
17499: NOT
17500: PUSH
17501: LD_VAR 0 6
17505: PUSH
17506: LD_INT 2
17508: EQUAL
17509: AND
17510: OR
17511: IFFALSE 17521
// mode = 0 ;
17513: LD_ADDR_VAR 0 6
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// case mode of 0 :
17521: LD_VAR 0 6
17525: PUSH
17526: LD_INT 0
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 28987
17534: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17535: LD_ADDR_VAR 0 11
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: NEG
17605: PUSH
17606: LD_INT 1
17608: NEG
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: NEG
17617: PUSH
17618: LD_INT 2
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: LD_INT 2
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: NEG
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: LD_INT 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17728: LD_ADDR_VAR 0 12
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 1
17797: NEG
17798: PUSH
17799: LD_INT 1
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 2
17851: NEG
17852: PUSH
17853: LD_INT 0
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 2
17862: NEG
17863: PUSH
17864: LD_INT 1
17866: NEG
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 2
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 3
17885: NEG
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 3
17896: NEG
17897: PUSH
17898: LD_INT 1
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17924: LD_ADDR_VAR 0 13
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: LD_INT 1
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: NEG
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: NEG
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 2
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 2
18059: NEG
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 3
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 3
18083: NEG
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 3
18095: NEG
18096: PUSH
18097: LD_INT 3
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18123: LD_ADDR_VAR 0 14
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: LD_INT 1
18143: NEG
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: LD_INT 2
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 0
18216: PUSH
18217: LD_INT 2
18219: NEG
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 3
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 3
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 2
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18319: LD_ADDR_VAR 0 15
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 2
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 2
18453: NEG
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 3
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18512: LD_ADDR_VAR 0 16
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: NEG
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: LD_INT 2
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 3
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 3
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18705: LD_ADDR_VAR 0 17
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: LD_INT 2
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 2
18881: NEG
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: NEG
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: NEG
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18935: LD_ADDR_VAR 0 18
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 0
18952: PUSH
18953: LD_INT 1
18955: NEG
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 2
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: LD_INT 2
19031: NEG
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 1
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: NEG
19123: PUSH
19124: LD_INT 1
19126: NEG
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 2
19134: NEG
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19165: LD_ADDR_VAR 0 19
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: LD_INT 2
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 2
19341: NEG
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19395: LD_ADDR_VAR 0 20
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: NEG
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19625: LD_ADDR_VAR 0 21
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 2
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 2
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: NEG
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 2
19812: NEG
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: NEG
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19855: LD_ADDR_VAR 0 22
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 0
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20085: LD_ADDR_VAR 0 23
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: LD_INT 3
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 3
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 2
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20365: LD_ADDR_VAR 0 24
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 2
20541: NEG
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 3
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 3
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20641: LD_ADDR_VAR 0 25
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 3
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20915: LD_ADDR_VAR 0 26
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: NEG
20997: PUSH
20998: LD_INT 2
21000: NEG
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: NEG
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: LD_INT 3
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 3
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21191: LD_ADDR_VAR 0 27
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 1
21249: NEG
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: NEG
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: LD_INT 2
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: LD_INT 1
21298: NEG
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: NEG
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: NEG
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 3
21424: NEG
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 3
21436: NEG
21437: PUSH
21438: LD_INT 2
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21471: LD_ADDR_VAR 0 28
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: LD_INT 3
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 3
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 3
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 3
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21753: LD_ADDR_VAR 0 29
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: NEG
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: NEG
21944: PUSH
21945: LD_INT 3
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 3
21997: NEG
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22032: LD_ADDR_VAR 0 30
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 2
22198: NEG
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: LD_INT 3
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 2
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 3
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 3
22275: NEG
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22310: LD_ADDR_VAR 0 31
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: LD_INT 2
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 2
22487: NEG
22488: PUSH
22489: LD_INT 2
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: LD_INT 3
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 3
22553: NEG
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22588: LD_ADDR_VAR 0 32
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 2
22765: NEG
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: LD_INT 3
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: NEG
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 3
22831: NEG
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22866: LD_ADDR_VAR 0 33
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 2
23021: NEG
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: NEG
23057: PUSH
23058: LD_INT 3
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 3
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 3
23110: NEG
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23145: LD_ADDR_VAR 0 34
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 3
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23425: LD_ADDR_VAR 0 35
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23537: LD_ADDR_VAR 0 36
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 2
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23649: LD_ADDR_VAR 0 37
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23761: LD_ADDR_VAR 0 38
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23873: LD_ADDR_VAR 0 39
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23985: LD_ADDR_VAR 0 40
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: NEG
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: NEG
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24097: LD_ADDR_VAR 0 41
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 2
24252: NEG
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 2
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: NEG
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: LD_INT 3
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 3
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 3
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: LD_INT 3
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 3
24371: NEG
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 3
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 3
24394: NEG
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 3
24406: NEG
24407: PUSH
24408: LD_INT 3
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24447: LD_ADDR_VAR 0 42
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 3
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: LD_INT 3
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 3
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 2
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: NEG
24745: PUSH
24746: LD_INT 2
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: LD_INT 3
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24797: LD_ADDR_VAR 0 43
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: LD_INT 3
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 3
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 2
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 3
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 3
25093: NEG
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 3
25104: NEG
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25145: LD_ADDR_VAR 0 44
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 2
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: LD_INT 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: NEG
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: NEG
25336: PUSH
25337: LD_INT 3
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 3
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 3
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 3
25419: NEG
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 3
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 3
25454: NEG
25455: PUSH
25456: LD_INT 3
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25495: LD_ADDR_VAR 0 45
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: LD_INT 3
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 3
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 3
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 2
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 3
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: NEG
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 3
25804: NEG
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25845: LD_ADDR_VAR 0 46
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: NEG
26035: PUSH
26036: LD_INT 3
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 3
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 3
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 3
26141: NEG
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 3
26152: NEG
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26193: LD_ADDR_VAR 0 47
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 1
26300: NEG
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26344: LD_ADDR_VAR 0 48
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 2
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 2
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26491: LD_ADDR_VAR 0 49
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26635: LD_ADDR_VAR 0 50
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26779: LD_ADDR_VAR 0 51
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26926: LD_ADDR_VAR 0 52
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27077: LD_ADDR_VAR 0 53
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 2
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 2
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 2
27264: NEG
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27307: LD_ADDR_VAR 0 54
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27537: LD_ADDR_VAR 0 55
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 2
27724: NEG
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27767: LD_ADDR_VAR 0 56
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 2
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: LD_INT 2
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27997: LD_ADDR_VAR 0 57
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 2
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28227: LD_ADDR_VAR 0 58
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28457: LD_ADDR_VAR 0 59
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28545: LD_ADDR_VAR 0 60
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28633: LD_ADDR_VAR 0 61
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28721: LD_ADDR_VAR 0 62
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28809: LD_ADDR_VAR 0 63
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28897: LD_ADDR_VAR 0 64
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// end ; 1 :
28985: GO 34882
28987: LD_INT 1
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 31618
28995: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28996: LD_ADDR_VAR 0 11
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 3
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 3
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29040: LD_ADDR_VAR 0 12
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 1
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 3
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29081: LD_ADDR_VAR 0 13
29085: PUSH
29086: LD_INT 3
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 3
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: LD_INT 3
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29121: LD_ADDR_VAR 0 14
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 3
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: LIST
29161: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29162: LD_ADDR_VAR 0 15
29166: PUSH
29167: LD_INT 2
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: NEG
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29206: LD_ADDR_VAR 0 16
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29252: LD_ADDR_VAR 0 17
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 3
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 2
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29296: LD_ADDR_VAR 0 18
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29337: LD_ADDR_VAR 0 19
29341: PUSH
29342: LD_INT 3
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29377: LD_ADDR_VAR 0 20
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29418: LD_ADDR_VAR 0 21
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29462: LD_ADDR_VAR 0 22
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 3
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 3
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 3
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29508: LD_ADDR_VAR 0 23
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 4
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 3
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29552: LD_ADDR_VAR 0 24
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 4
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29593: LD_ADDR_VAR 0 25
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 4
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 4
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29633: LD_ADDR_VAR 0 26
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 4
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29674: LD_ADDR_VAR 0 27
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 4
29703: NEG
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29718: LD_ADDR_VAR 0 28
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: LD_INT 3
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 3
29737: NEG
29738: PUSH
29739: LD_INT 4
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 4
29749: NEG
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29764: LD_ADDR_VAR 0 29
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: LD_INT 3
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: LD_INT 4
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 4
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 3
29831: NEG
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: LD_INT 5
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 5
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: LD_INT 4
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: LD_INT 6
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 6
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 5
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29919: LD_ADDR_VAR 0 30
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 3
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 3
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 4
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 4
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 4
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 5
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 5
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 5
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 6
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 6
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30062: LD_ADDR_VAR 0 31
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: LD_INT 4
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 5
30129: PUSH
30130: LD_INT 4
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 5
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 4
30149: PUSH
30150: LD_INT 5
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 6
30159: PUSH
30160: LD_INT 5
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 6
30169: PUSH
30170: LD_INT 6
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: LD_INT 6
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30201: LD_ADDR_VAR 0 32
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 3
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: LD_INT 4
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 4
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 5
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 5
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 4
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 6
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 6
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 5
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30344: LD_ADDR_VAR 0 33
30348: PUSH
30349: LD_INT 2
30351: NEG
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 4
30396: NEG
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 4
30407: NEG
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 4
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 5
30430: NEG
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 5
30441: NEG
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 5
30453: NEG
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 6
30464: NEG
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 6
30475: NEG
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30499: LD_ADDR_VAR 0 34
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: LD_INT 4
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 4
30554: NEG
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 4
30566: NEG
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 4
30578: NEG
30579: PUSH
30580: LD_INT 5
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 5
30590: NEG
30591: PUSH
30592: LD_INT 4
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 5
30602: NEG
30603: PUSH
30604: LD_INT 5
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 5
30614: NEG
30615: PUSH
30616: LD_INT 6
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 6
30626: NEG
30627: PUSH
30628: LD_INT 5
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 6
30638: NEG
30639: PUSH
30640: LD_INT 6
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30662: LD_ADDR_VAR 0 41
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 3
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30706: LD_ADDR_VAR 0 42
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30747: LD_ADDR_VAR 0 43
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 3
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30787: LD_ADDR_VAR 0 44
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: LD_INT 3
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30828: LD_ADDR_VAR 0 45
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30872: LD_ADDR_VAR 0 46
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 3
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: NEG
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30918: LD_ADDR_VAR 0 47
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30951: LD_ADDR_VAR 0 48
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30982: LD_ADDR_VAR 0 49
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31011: LD_ADDR_VAR 0 50
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31040: LD_ADDR_VAR 0 51
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31071: LD_ADDR_VAR 0 52
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 3
31090: NEG
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31104: LD_ADDR_VAR 0 53
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 3
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31148: LD_ADDR_VAR 0 54
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31189: LD_ADDR_VAR 0 55
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31229: LD_ADDR_VAR 0 56
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31270: LD_ADDR_VAR 0 57
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31314: LD_ADDR_VAR 0 58
31318: PUSH
31319: LD_INT 2
31321: NEG
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 3
31345: NEG
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31360: LD_ADDR_VAR 0 59
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31404: LD_ADDR_VAR 0 60
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31445: LD_ADDR_VAR 0 61
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31485: LD_ADDR_VAR 0 62
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31526: LD_ADDR_VAR 0 63
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31570: LD_ADDR_VAR 0 64
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 2
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
// end ; 2 :
31616: GO 34882
31618: LD_INT 2
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 34881
31626: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31627: LD_ADDR_VAR 0 29
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 4
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 5
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 5
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 4
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 3
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 4
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 4
31757: PUSH
31758: LD_INT 4
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: LD_INT 4
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 0
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 4
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 5
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 5
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 3
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: NEG
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 3
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 4
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 4
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: NEG
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: LD_INT 4
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: LD_INT 5
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 3
32036: NEG
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: NEG
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 4
32060: NEG
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 5
32072: NEG
32073: PUSH
32074: LD_INT 4
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 5
32084: NEG
32085: PUSH
32086: LD_INT 5
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: LD_INT 5
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 5
32108: NEG
32109: PUSH
32110: LD_INT 3
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32165: LD_ADDR_VAR 0 30
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: LD_INT 4
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: LD_INT 5
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 5
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 5
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: LD_INT 3
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 4
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: LD_INT 3
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 4
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 4
32355: NEG
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 3
32378: NEG
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 3
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 4
32400: NEG
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 5
32411: NEG
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 5
32422: NEG
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 5
32434: NEG
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 3
32457: NEG
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: NEG
32470: PUSH
32471: LD_INT 4
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 4
32517: NEG
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: NEG
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 4
32553: NEG
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 4
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 5
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 4
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 3
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 3
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 4
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: LD_INT 5
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: LD_INT 5
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32712: LD_ADDR_VAR 0 31
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 4
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 5
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 4
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 5
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 4
32868: NEG
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 4
32879: NEG
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 4
32891: NEG
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: NEG
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 4
32914: NEG
32915: PUSH
32916: LD_INT 4
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: LD_INT 5
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 3
32938: NEG
32939: PUSH
32940: LD_INT 4
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: NEG
32951: PUSH
32952: LD_INT 3
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 4
32962: NEG
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 5
32974: NEG
32975: PUSH
32976: LD_INT 4
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 5
32986: NEG
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 5
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 5
33010: NEG
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 3
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 3
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: LD_INT 4
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 4
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 4
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 3
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 5
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33262: LD_ADDR_VAR 0 32
33266: PUSH
33267: LD_INT 4
33269: NEG
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 4
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 3
33292: NEG
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 4
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 5
33325: NEG
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 5
33336: NEG
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 5
33348: NEG
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: NEG
33372: PUSH
33373: LD_INT 3
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: NEG
33384: PUSH
33385: LD_INT 4
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 3
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: NEG
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 4
33443: NEG
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: LD_INT 4
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 4
33467: NEG
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 5
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 4
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 4
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 5
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: LD_INT 3
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: LD_INT 5
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 4
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 4
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 3
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 4
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 4
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 5
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: LD_INT 5
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 5
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 5
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33809: LD_ADDR_VAR 0 33
33813: PUSH
33814: LD_INT 4
33816: NEG
33817: PUSH
33818: LD_INT 4
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 4
33828: NEG
33829: PUSH
33830: LD_INT 5
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: LD_INT 4
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 4
33864: NEG
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 5
33876: NEG
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 5
33888: NEG
33889: PUSH
33890: LD_INT 5
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: LD_INT 5
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 5
33912: NEG
33913: PUSH
33914: LD_INT 3
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 3
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: LD_INT 4
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 4
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 4
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 5
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 5
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 4
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 3
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 5
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 4
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 4
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 4
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 4
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 4
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 5
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 5
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 4
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34347: LD_ADDR_VAR 0 34
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 4
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 5
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: LD_INT 4
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 4
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 5
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 3
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 5
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 4
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 4
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 4
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 4
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: LD_INT 4
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 5
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 4
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 4
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 3
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 4
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 4
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 4
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 5
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 5
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 5
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: ST_TO_ADDR
// end ; end ;
34879: GO 34882
34881: POP
// case btype of b_depot , b_warehouse :
34882: LD_VAR 0 1
34886: PUSH
34887: LD_INT 0
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34901
34893: LD_INT 1
34895: DOUBLE
34896: EQUAL
34897: IFTRUE 34901
34899: GO 35102
34901: POP
// case nation of nation_american :
34902: LD_VAR 0 5
34906: PUSH
34907: LD_INT 1
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34971
34915: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34916: LD_ADDR_VAR 0 9
34920: PUSH
34921: LD_VAR 0 11
34925: PUSH
34926: LD_VAR 0 12
34930: PUSH
34931: LD_VAR 0 13
34935: PUSH
34936: LD_VAR 0 14
34940: PUSH
34941: LD_VAR 0 15
34945: PUSH
34946: LD_VAR 0 16
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_VAR 0 4
34963: PUSH
34964: LD_INT 1
34966: PLUS
34967: ARRAY
34968: ST_TO_ADDR
34969: GO 35100
34971: LD_INT 2
34973: DOUBLE
34974: EQUAL
34975: IFTRUE 34979
34977: GO 35035
34979: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_VAR 0 17
34989: PUSH
34990: LD_VAR 0 18
34994: PUSH
34995: LD_VAR 0 19
34999: PUSH
35000: LD_VAR 0 20
35004: PUSH
35005: LD_VAR 0 21
35009: PUSH
35010: LD_VAR 0 22
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: PUSH
35023: LD_VAR 0 4
35027: PUSH
35028: LD_INT 1
35030: PLUS
35031: ARRAY
35032: ST_TO_ADDR
35033: GO 35100
35035: LD_INT 3
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35099
35043: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35044: LD_ADDR_VAR 0 9
35048: PUSH
35049: LD_VAR 0 23
35053: PUSH
35054: LD_VAR 0 24
35058: PUSH
35059: LD_VAR 0 25
35063: PUSH
35064: LD_VAR 0 26
35068: PUSH
35069: LD_VAR 0 27
35073: PUSH
35074: LD_VAR 0 28
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: PUSH
35087: LD_VAR 0 4
35091: PUSH
35092: LD_INT 1
35094: PLUS
35095: ARRAY
35096: ST_TO_ADDR
35097: GO 35100
35099: POP
35100: GO 35655
35102: LD_INT 2
35104: DOUBLE
35105: EQUAL
35106: IFTRUE 35116
35108: LD_INT 3
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35172
35116: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_VAR 0 29
35126: PUSH
35127: LD_VAR 0 30
35131: PUSH
35132: LD_VAR 0 31
35136: PUSH
35137: LD_VAR 0 32
35141: PUSH
35142: LD_VAR 0 33
35146: PUSH
35147: LD_VAR 0 34
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: PUSH
35160: LD_VAR 0 4
35164: PUSH
35165: LD_INT 1
35167: PLUS
35168: ARRAY
35169: ST_TO_ADDR
35170: GO 35655
35172: LD_INT 16
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35234
35178: LD_INT 17
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35234
35184: LD_INT 18
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35234
35190: LD_INT 19
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35234
35196: LD_INT 22
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35234
35202: LD_INT 20
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35234
35208: LD_INT 21
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35234
35214: LD_INT 23
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35234
35220: LD_INT 24
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35234
35226: LD_INT 25
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35290
35234: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35235: LD_ADDR_VAR 0 9
35239: PUSH
35240: LD_VAR 0 35
35244: PUSH
35245: LD_VAR 0 36
35249: PUSH
35250: LD_VAR 0 37
35254: PUSH
35255: LD_VAR 0 38
35259: PUSH
35260: LD_VAR 0 39
35264: PUSH
35265: LD_VAR 0 40
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: PUSH
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 1
35285: PLUS
35286: ARRAY
35287: ST_TO_ADDR
35288: GO 35655
35290: LD_INT 6
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35346
35296: LD_INT 7
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35346
35302: LD_INT 8
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35346
35308: LD_INT 13
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35346
35314: LD_INT 12
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35346
35320: LD_INT 15
35322: DOUBLE
35323: EQUAL
35324: IFTRUE 35346
35326: LD_INT 11
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35346
35332: LD_INT 14
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35346
35338: LD_INT 10
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35402
35346: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_VAR 0 41
35356: PUSH
35357: LD_VAR 0 42
35361: PUSH
35362: LD_VAR 0 43
35366: PUSH
35367: LD_VAR 0 44
35371: PUSH
35372: LD_VAR 0 45
35376: PUSH
35377: LD_VAR 0 46
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: LD_VAR 0 4
35394: PUSH
35395: LD_INT 1
35397: PLUS
35398: ARRAY
35399: ST_TO_ADDR
35400: GO 35655
35402: LD_INT 36
35404: DOUBLE
35405: EQUAL
35406: IFTRUE 35410
35408: GO 35466
35410: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_VAR 0 47
35420: PUSH
35421: LD_VAR 0 48
35425: PUSH
35426: LD_VAR 0 49
35430: PUSH
35431: LD_VAR 0 50
35435: PUSH
35436: LD_VAR 0 51
35440: PUSH
35441: LD_VAR 0 52
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: PUSH
35454: LD_VAR 0 4
35458: PUSH
35459: LD_INT 1
35461: PLUS
35462: ARRAY
35463: ST_TO_ADDR
35464: GO 35655
35466: LD_INT 4
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35492
35472: LD_INT 5
35474: DOUBLE
35475: EQUAL
35476: IFTRUE 35492
35478: LD_INT 34
35480: DOUBLE
35481: EQUAL
35482: IFTRUE 35492
35484: LD_INT 37
35486: DOUBLE
35487: EQUAL
35488: IFTRUE 35492
35490: GO 35548
35492: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35493: LD_ADDR_VAR 0 9
35497: PUSH
35498: LD_VAR 0 53
35502: PUSH
35503: LD_VAR 0 54
35507: PUSH
35508: LD_VAR 0 55
35512: PUSH
35513: LD_VAR 0 56
35517: PUSH
35518: LD_VAR 0 57
35522: PUSH
35523: LD_VAR 0 58
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: LD_VAR 0 4
35540: PUSH
35541: LD_INT 1
35543: PLUS
35544: ARRAY
35545: ST_TO_ADDR
35546: GO 35655
35548: LD_INT 31
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35598
35554: LD_INT 32
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35598
35560: LD_INT 33
35562: DOUBLE
35563: EQUAL
35564: IFTRUE 35598
35566: LD_INT 27
35568: DOUBLE
35569: EQUAL
35570: IFTRUE 35598
35572: LD_INT 26
35574: DOUBLE
35575: EQUAL
35576: IFTRUE 35598
35578: LD_INT 28
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35598
35584: LD_INT 29
35586: DOUBLE
35587: EQUAL
35588: IFTRUE 35598
35590: LD_INT 30
35592: DOUBLE
35593: EQUAL
35594: IFTRUE 35598
35596: GO 35654
35598: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_VAR 0 59
35608: PUSH
35609: LD_VAR 0 60
35613: PUSH
35614: LD_VAR 0 61
35618: PUSH
35619: LD_VAR 0 62
35623: PUSH
35624: LD_VAR 0 63
35628: PUSH
35629: LD_VAR 0 64
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: LD_VAR 0 4
35646: PUSH
35647: LD_INT 1
35649: PLUS
35650: ARRAY
35651: ST_TO_ADDR
35652: GO 35655
35654: POP
// temp_list2 = [ ] ;
35655: LD_ADDR_VAR 0 10
35659: PUSH
35660: EMPTY
35661: ST_TO_ADDR
// for i in temp_list do
35662: LD_ADDR_VAR 0 8
35666: PUSH
35667: LD_VAR 0 9
35671: PUSH
35672: FOR_IN
35673: IFFALSE 35725
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35675: LD_ADDR_VAR 0 10
35679: PUSH
35680: LD_VAR 0 10
35684: PUSH
35685: LD_VAR 0 8
35689: PUSH
35690: LD_INT 1
35692: ARRAY
35693: PUSH
35694: LD_VAR 0 2
35698: PLUS
35699: PUSH
35700: LD_VAR 0 8
35704: PUSH
35705: LD_INT 2
35707: ARRAY
35708: PUSH
35709: LD_VAR 0 3
35713: PLUS
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: ADD
35722: ST_TO_ADDR
35723: GO 35672
35725: POP
35726: POP
// result = temp_list2 ;
35727: LD_ADDR_VAR 0 7
35731: PUSH
35732: LD_VAR 0 10
35736: ST_TO_ADDR
// end ;
35737: LD_VAR 0 7
35741: RET
// export function EnemyInRange ( unit , dist ) ; begin
35742: LD_INT 0
35744: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35745: LD_ADDR_VAR 0 3
35749: PUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: CALL_OW 255
35759: PPUSH
35760: LD_VAR 0 1
35764: PPUSH
35765: CALL_OW 250
35769: PPUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 251
35779: PPUSH
35780: LD_VAR 0 2
35784: PPUSH
35785: CALL 9115 0 4
35789: PUSH
35790: LD_INT 4
35792: ARRAY
35793: ST_TO_ADDR
// end ;
35794: LD_VAR 0 3
35798: RET
// export function PlayerSeeMe ( unit ) ; begin
35799: LD_INT 0
35801: PPUSH
// result := See ( your_side , unit ) ;
35802: LD_ADDR_VAR 0 2
35806: PUSH
35807: LD_OWVAR 2
35811: PPUSH
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL_OW 292
35821: ST_TO_ADDR
// end ;
35822: LD_VAR 0 2
35826: RET
// export function ReverseDir ( unit ) ; begin
35827: LD_INT 0
35829: PPUSH
// if not unit then
35830: LD_VAR 0 1
35834: NOT
35835: IFFALSE 35839
// exit ;
35837: GO 35862
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35839: LD_ADDR_VAR 0 2
35843: PUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 254
35853: PUSH
35854: LD_INT 3
35856: PLUS
35857: PUSH
35858: LD_INT 6
35860: MOD
35861: ST_TO_ADDR
// end ;
35862: LD_VAR 0 2
35866: RET
// export function ReverseArray ( array ) ; var i ; begin
35867: LD_INT 0
35869: PPUSH
35870: PPUSH
// if not array then
35871: LD_VAR 0 1
35875: NOT
35876: IFFALSE 35880
// exit ;
35878: GO 35935
// result := [ ] ;
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: EMPTY
35886: ST_TO_ADDR
// for i := array downto 1 do
35887: LD_ADDR_VAR 0 3
35891: PUSH
35892: DOUBLE
35893: LD_VAR 0 1
35897: INC
35898: ST_TO_ADDR
35899: LD_INT 1
35901: PUSH
35902: FOR_DOWNTO
35903: IFFALSE 35933
// result := Join ( result , array [ i ] ) ;
35905: LD_ADDR_VAR 0 2
35909: PUSH
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_VAR 0 1
35919: PUSH
35920: LD_VAR 0 3
35924: ARRAY
35925: PPUSH
35926: CALL 40580 0 2
35930: ST_TO_ADDR
35931: GO 35902
35933: POP
35934: POP
// end ;
35935: LD_VAR 0 2
35939: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35940: LD_INT 0
35942: PPUSH
35943: PPUSH
35944: PPUSH
35945: PPUSH
35946: PPUSH
35947: PPUSH
// if not unit or not hexes then
35948: LD_VAR 0 1
35952: NOT
35953: PUSH
35954: LD_VAR 0 2
35958: NOT
35959: OR
35960: IFFALSE 35964
// exit ;
35962: GO 36087
// dist := 9999 ;
35964: LD_ADDR_VAR 0 5
35968: PUSH
35969: LD_INT 9999
35971: ST_TO_ADDR
// for i = 1 to hexes do
35972: LD_ADDR_VAR 0 4
35976: PUSH
35977: DOUBLE
35978: LD_INT 1
35980: DEC
35981: ST_TO_ADDR
35982: LD_VAR 0 2
35986: PUSH
35987: FOR_TO
35988: IFFALSE 36075
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35990: LD_ADDR_VAR 0 6
35994: PUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_VAR 0 2
36004: PUSH
36005: LD_VAR 0 4
36009: ARRAY
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: PPUSH
36015: LD_VAR 0 2
36019: PUSH
36020: LD_VAR 0 4
36024: ARRAY
36025: PUSH
36026: LD_INT 2
36028: ARRAY
36029: PPUSH
36030: CALL_OW 297
36034: ST_TO_ADDR
// if tdist < dist then
36035: LD_VAR 0 6
36039: PUSH
36040: LD_VAR 0 5
36044: LESS
36045: IFFALSE 36073
// begin hex := hexes [ i ] ;
36047: LD_ADDR_VAR 0 8
36051: PUSH
36052: LD_VAR 0 2
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: ST_TO_ADDR
// dist := tdist ;
36063: LD_ADDR_VAR 0 5
36067: PUSH
36068: LD_VAR 0 6
36072: ST_TO_ADDR
// end ; end ;
36073: GO 35987
36075: POP
36076: POP
// result := hex ;
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_VAR 0 8
36086: ST_TO_ADDR
// end ;
36087: LD_VAR 0 3
36091: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36092: LD_INT 0
36094: PPUSH
36095: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36096: LD_VAR 0 1
36100: NOT
36101: PUSH
36102: LD_VAR 0 1
36106: PUSH
36107: LD_INT 21
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 23
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PPUSH
36131: CALL_OW 69
36135: IN
36136: NOT
36137: OR
36138: IFFALSE 36142
// exit ;
36140: GO 36189
// for i = 1 to 3 do
36142: LD_ADDR_VAR 0 3
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_INT 3
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36187
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 250
36167: PPUSH
36168: LD_VAR 0 1
36172: PPUSH
36173: CALL_OW 251
36177: PPUSH
36178: LD_INT 1
36180: PPUSH
36181: CALL_OW 453
36185: GO 36155
36187: POP
36188: POP
// end ;
36189: LD_VAR 0 2
36193: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36194: LD_INT 0
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
// if not unit or not enemy_unit then
36202: LD_VAR 0 1
36206: NOT
36207: PUSH
36208: LD_VAR 0 2
36212: NOT
36213: OR
36214: IFFALSE 36218
// exit ;
36216: GO 36685
// if GetLives ( i ) < 250 then
36218: LD_VAR 0 4
36222: PPUSH
36223: CALL_OW 256
36227: PUSH
36228: LD_INT 250
36230: LESS
36231: IFFALSE 36244
// begin ComAutodestruct ( i ) ;
36233: LD_VAR 0 4
36237: PPUSH
36238: CALL 36092 0 1
// exit ;
36242: GO 36685
// end ; x := GetX ( enemy_unit ) ;
36244: LD_ADDR_VAR 0 7
36248: PUSH
36249: LD_VAR 0 2
36253: PPUSH
36254: CALL_OW 250
36258: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36259: LD_ADDR_VAR 0 8
36263: PUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: CALL_OW 251
36273: ST_TO_ADDR
// if not x or not y then
36274: LD_VAR 0 7
36278: NOT
36279: PUSH
36280: LD_VAR 0 8
36284: NOT
36285: OR
36286: IFFALSE 36290
// exit ;
36288: GO 36685
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36290: LD_ADDR_VAR 0 6
36294: PUSH
36295: LD_VAR 0 7
36299: PPUSH
36300: LD_INT 0
36302: PPUSH
36303: LD_INT 4
36305: PPUSH
36306: CALL_OW 272
36310: PUSH
36311: LD_VAR 0 8
36315: PPUSH
36316: LD_INT 0
36318: PPUSH
36319: LD_INT 4
36321: PPUSH
36322: CALL_OW 273
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 7
36335: PPUSH
36336: LD_INT 1
36338: PPUSH
36339: LD_INT 4
36341: PPUSH
36342: CALL_OW 272
36346: PUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_INT 1
36354: PPUSH
36355: LD_INT 4
36357: PPUSH
36358: CALL_OW 273
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_VAR 0 7
36371: PPUSH
36372: LD_INT 2
36374: PPUSH
36375: LD_INT 4
36377: PPUSH
36378: CALL_OW 272
36382: PUSH
36383: LD_VAR 0 8
36387: PPUSH
36388: LD_INT 2
36390: PPUSH
36391: LD_INT 4
36393: PPUSH
36394: CALL_OW 273
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 7
36407: PPUSH
36408: LD_INT 3
36410: PPUSH
36411: LD_INT 4
36413: PPUSH
36414: CALL_OW 272
36418: PUSH
36419: LD_VAR 0 8
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: LD_INT 4
36429: PPUSH
36430: CALL_OW 273
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_VAR 0 7
36443: PPUSH
36444: LD_INT 4
36446: PPUSH
36447: LD_INT 4
36449: PPUSH
36450: CALL_OW 272
36454: PUSH
36455: LD_VAR 0 8
36459: PPUSH
36460: LD_INT 4
36462: PPUSH
36463: LD_INT 4
36465: PPUSH
36466: CALL_OW 273
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_VAR 0 7
36479: PPUSH
36480: LD_INT 5
36482: PPUSH
36483: LD_INT 4
36485: PPUSH
36486: CALL_OW 272
36490: PUSH
36491: LD_VAR 0 8
36495: PPUSH
36496: LD_INT 5
36498: PPUSH
36499: LD_INT 4
36501: PPUSH
36502: CALL_OW 273
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// for i = tmp downto 1 do
36519: LD_ADDR_VAR 0 4
36523: PUSH
36524: DOUBLE
36525: LD_VAR 0 6
36529: INC
36530: ST_TO_ADDR
36531: LD_INT 1
36533: PUSH
36534: FOR_DOWNTO
36535: IFFALSE 36636
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36537: LD_VAR 0 6
36541: PUSH
36542: LD_VAR 0 4
36546: ARRAY
36547: PUSH
36548: LD_INT 1
36550: ARRAY
36551: PPUSH
36552: LD_VAR 0 6
36556: PUSH
36557: LD_VAR 0 4
36561: ARRAY
36562: PUSH
36563: LD_INT 2
36565: ARRAY
36566: PPUSH
36567: CALL_OW 488
36571: NOT
36572: PUSH
36573: LD_VAR 0 6
36577: PUSH
36578: LD_VAR 0 4
36582: ARRAY
36583: PUSH
36584: LD_INT 1
36586: ARRAY
36587: PPUSH
36588: LD_VAR 0 6
36592: PUSH
36593: LD_VAR 0 4
36597: ARRAY
36598: PUSH
36599: LD_INT 2
36601: ARRAY
36602: PPUSH
36603: CALL_OW 428
36607: PUSH
36608: LD_INT 0
36610: NONEQUAL
36611: OR
36612: IFFALSE 36634
// tmp := Delete ( tmp , i ) ;
36614: LD_ADDR_VAR 0 6
36618: PUSH
36619: LD_VAR 0 6
36623: PPUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: CALL_OW 3
36633: ST_TO_ADDR
36634: GO 36534
36636: POP
36637: POP
// j := GetClosestHex ( unit , tmp ) ;
36638: LD_ADDR_VAR 0 5
36642: PUSH
36643: LD_VAR 0 1
36647: PPUSH
36648: LD_VAR 0 6
36652: PPUSH
36653: CALL 35940 0 2
36657: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36658: LD_VAR 0 1
36662: PPUSH
36663: LD_VAR 0 5
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: PPUSH
36672: LD_VAR 0 5
36676: PUSH
36677: LD_INT 2
36679: ARRAY
36680: PPUSH
36681: CALL_OW 111
// end ;
36685: LD_VAR 0 3
36689: RET
// export function PrepareApemanSoldier ( ) ; begin
36690: LD_INT 0
36692: PPUSH
// uc_nation := 0 ;
36693: LD_ADDR_OWVAR 21
36697: PUSH
36698: LD_INT 0
36700: ST_TO_ADDR
// hc_sex := sex_male ;
36701: LD_ADDR_OWVAR 27
36705: PUSH
36706: LD_INT 1
36708: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36709: LD_ADDR_OWVAR 28
36713: PUSH
36714: LD_INT 15
36716: ST_TO_ADDR
// hc_gallery :=  ;
36717: LD_ADDR_OWVAR 33
36721: PUSH
36722: LD_STRING 
36724: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36725: LD_ADDR_OWVAR 31
36729: PUSH
36730: LD_INT 0
36732: PPUSH
36733: LD_INT 3
36735: PPUSH
36736: CALL_OW 12
36740: PUSH
36741: LD_INT 0
36743: PPUSH
36744: LD_INT 3
36746: PPUSH
36747: CALL_OW 12
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// end ;
36764: LD_VAR 0 1
36768: RET
// export function PrepareApemanEngineer ( ) ; begin
36769: LD_INT 0
36771: PPUSH
// uc_nation := 0 ;
36772: LD_ADDR_OWVAR 21
36776: PUSH
36777: LD_INT 0
36779: ST_TO_ADDR
// hc_sex := sex_male ;
36780: LD_ADDR_OWVAR 27
36784: PUSH
36785: LD_INT 1
36787: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36788: LD_ADDR_OWVAR 28
36792: PUSH
36793: LD_INT 16
36795: ST_TO_ADDR
// hc_gallery :=  ;
36796: LD_ADDR_OWVAR 33
36800: PUSH
36801: LD_STRING 
36803: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36804: LD_ADDR_OWVAR 31
36808: PUSH
36809: LD_INT 0
36811: PPUSH
36812: LD_INT 3
36814: PPUSH
36815: CALL_OW 12
36819: PUSH
36820: LD_INT 0
36822: PPUSH
36823: LD_INT 3
36825: PPUSH
36826: CALL_OW 12
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// end ;
36843: LD_VAR 0 1
36847: RET
// export function PrepareApeman ( agressivity ) ; begin
36848: LD_INT 0
36850: PPUSH
// uc_side := 0 ;
36851: LD_ADDR_OWVAR 20
36855: PUSH
36856: LD_INT 0
36858: ST_TO_ADDR
// uc_nation := 0 ;
36859: LD_ADDR_OWVAR 21
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// hc_sex := sex_male ;
36867: LD_ADDR_OWVAR 27
36871: PUSH
36872: LD_INT 1
36874: ST_TO_ADDR
// hc_class := class_apeman ;
36875: LD_ADDR_OWVAR 28
36879: PUSH
36880: LD_INT 12
36882: ST_TO_ADDR
// hc_gallery :=  ;
36883: LD_ADDR_OWVAR 33
36887: PUSH
36888: LD_STRING 
36890: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36891: LD_ADDR_OWVAR 35
36895: PUSH
36896: LD_VAR 0 1
36900: NEG
36901: PPUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 12
36911: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36912: LD_ADDR_OWVAR 31
36916: PUSH
36917: LD_INT 0
36919: PPUSH
36920: LD_INT 3
36922: PPUSH
36923: CALL_OW 12
36927: PUSH
36928: LD_INT 0
36930: PPUSH
36931: LD_INT 3
36933: PPUSH
36934: CALL_OW 12
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// end ;
36951: LD_VAR 0 2
36955: RET
// export function PrepareTiger ( agressivity ) ; begin
36956: LD_INT 0
36958: PPUSH
// uc_side := 0 ;
36959: LD_ADDR_OWVAR 20
36963: PUSH
36964: LD_INT 0
36966: ST_TO_ADDR
// uc_nation := 0 ;
36967: LD_ADDR_OWVAR 21
36971: PUSH
36972: LD_INT 0
36974: ST_TO_ADDR
// hc_class := class_tiger ;
36975: LD_ADDR_OWVAR 28
36979: PUSH
36980: LD_INT 14
36982: ST_TO_ADDR
// hc_gallery :=  ;
36983: LD_ADDR_OWVAR 33
36987: PUSH
36988: LD_STRING 
36990: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36991: LD_ADDR_OWVAR 35
36995: PUSH
36996: LD_VAR 0 1
37000: NEG
37001: PPUSH
37002: LD_VAR 0 1
37006: PPUSH
37007: CALL_OW 12
37011: ST_TO_ADDR
// end ;
37012: LD_VAR 0 2
37016: RET
// export function PrepareEnchidna ( ) ; begin
37017: LD_INT 0
37019: PPUSH
// uc_side := 0 ;
37020: LD_ADDR_OWVAR 20
37024: PUSH
37025: LD_INT 0
37027: ST_TO_ADDR
// uc_nation := 0 ;
37028: LD_ADDR_OWVAR 21
37032: PUSH
37033: LD_INT 0
37035: ST_TO_ADDR
// hc_class := class_baggie ;
37036: LD_ADDR_OWVAR 28
37040: PUSH
37041: LD_INT 13
37043: ST_TO_ADDR
// hc_gallery :=  ;
37044: LD_ADDR_OWVAR 33
37048: PUSH
37049: LD_STRING 
37051: ST_TO_ADDR
// end ;
37052: LD_VAR 0 1
37056: RET
// export function PrepareFrog ( ) ; begin
37057: LD_INT 0
37059: PPUSH
// uc_side := 0 ;
37060: LD_ADDR_OWVAR 20
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
// uc_nation := 0 ;
37068: LD_ADDR_OWVAR 21
37072: PUSH
37073: LD_INT 0
37075: ST_TO_ADDR
// hc_class := class_frog ;
37076: LD_ADDR_OWVAR 28
37080: PUSH
37081: LD_INT 19
37083: ST_TO_ADDR
// hc_gallery :=  ;
37084: LD_ADDR_OWVAR 33
37088: PUSH
37089: LD_STRING 
37091: ST_TO_ADDR
// end ;
37092: LD_VAR 0 1
37096: RET
// export function PrepareFish ( ) ; begin
37097: LD_INT 0
37099: PPUSH
// uc_side := 0 ;
37100: LD_ADDR_OWVAR 20
37104: PUSH
37105: LD_INT 0
37107: ST_TO_ADDR
// uc_nation := 0 ;
37108: LD_ADDR_OWVAR 21
37112: PUSH
37113: LD_INT 0
37115: ST_TO_ADDR
// hc_class := class_fish ;
37116: LD_ADDR_OWVAR 28
37120: PUSH
37121: LD_INT 20
37123: ST_TO_ADDR
// hc_gallery :=  ;
37124: LD_ADDR_OWVAR 33
37128: PUSH
37129: LD_STRING 
37131: ST_TO_ADDR
// end ;
37132: LD_VAR 0 1
37136: RET
// export function PrepareBird ( ) ; begin
37137: LD_INT 0
37139: PPUSH
// uc_side := 0 ;
37140: LD_ADDR_OWVAR 20
37144: PUSH
37145: LD_INT 0
37147: ST_TO_ADDR
// uc_nation := 0 ;
37148: LD_ADDR_OWVAR 21
37152: PUSH
37153: LD_INT 0
37155: ST_TO_ADDR
// hc_class := class_phororhacos ;
37156: LD_ADDR_OWVAR 28
37160: PUSH
37161: LD_INT 18
37163: ST_TO_ADDR
// hc_gallery :=  ;
37164: LD_ADDR_OWVAR 33
37168: PUSH
37169: LD_STRING 
37171: ST_TO_ADDR
// end ;
37172: LD_VAR 0 1
37176: RET
// export function PrepareHorse ( ) ; begin
37177: LD_INT 0
37179: PPUSH
// uc_side := 0 ;
37180: LD_ADDR_OWVAR 20
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// uc_nation := 0 ;
37188: LD_ADDR_OWVAR 21
37192: PUSH
37193: LD_INT 0
37195: ST_TO_ADDR
// hc_class := class_horse ;
37196: LD_ADDR_OWVAR 28
37200: PUSH
37201: LD_INT 21
37203: ST_TO_ADDR
// hc_gallery :=  ;
37204: LD_ADDR_OWVAR 33
37208: PUSH
37209: LD_STRING 
37211: ST_TO_ADDR
// end ;
37212: LD_VAR 0 1
37216: RET
// export function PrepareMastodont ( ) ; begin
37217: LD_INT 0
37219: PPUSH
// uc_side := 0 ;
37220: LD_ADDR_OWVAR 20
37224: PUSH
37225: LD_INT 0
37227: ST_TO_ADDR
// uc_nation := 0 ;
37228: LD_ADDR_OWVAR 21
37232: PUSH
37233: LD_INT 0
37235: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37236: LD_ADDR_OWVAR 37
37240: PUSH
37241: LD_INT 31
37243: ST_TO_ADDR
// vc_control := control_rider ;
37244: LD_ADDR_OWVAR 38
37248: PUSH
37249: LD_INT 4
37251: ST_TO_ADDR
// end ;
37252: LD_VAR 0 1
37256: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37257: LD_INT 0
37259: PPUSH
37260: PPUSH
37261: PPUSH
// uc_side = 0 ;
37262: LD_ADDR_OWVAR 20
37266: PUSH
37267: LD_INT 0
37269: ST_TO_ADDR
// uc_nation = 0 ;
37270: LD_ADDR_OWVAR 21
37274: PUSH
37275: LD_INT 0
37277: ST_TO_ADDR
// InitHc_All ( ) ;
37278: CALL_OW 584
// InitVc ;
37282: CALL_OW 20
// if mastodonts then
37286: LD_VAR 0 6
37290: IFFALSE 37357
// for i = 1 to mastodonts do
37292: LD_ADDR_VAR 0 11
37296: PUSH
37297: DOUBLE
37298: LD_INT 1
37300: DEC
37301: ST_TO_ADDR
37302: LD_VAR 0 6
37306: PUSH
37307: FOR_TO
37308: IFFALSE 37355
// begin vc_chassis := 31 ;
37310: LD_ADDR_OWVAR 37
37314: PUSH
37315: LD_INT 31
37317: ST_TO_ADDR
// vc_control := control_rider ;
37318: LD_ADDR_OWVAR 38
37322: PUSH
37323: LD_INT 4
37325: ST_TO_ADDR
// animal := CreateVehicle ;
37326: LD_ADDR_VAR 0 12
37330: PUSH
37331: CALL_OW 45
37335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37336: LD_VAR 0 12
37340: PPUSH
37341: LD_VAR 0 8
37345: PPUSH
37346: LD_INT 0
37348: PPUSH
37349: CALL 39485 0 3
// end ;
37353: GO 37307
37355: POP
37356: POP
// if horses then
37357: LD_VAR 0 5
37361: IFFALSE 37428
// for i = 1 to horses do
37363: LD_ADDR_VAR 0 11
37367: PUSH
37368: DOUBLE
37369: LD_INT 1
37371: DEC
37372: ST_TO_ADDR
37373: LD_VAR 0 5
37377: PUSH
37378: FOR_TO
37379: IFFALSE 37426
// begin hc_class := 21 ;
37381: LD_ADDR_OWVAR 28
37385: PUSH
37386: LD_INT 21
37388: ST_TO_ADDR
// hc_gallery :=  ;
37389: LD_ADDR_OWVAR 33
37393: PUSH
37394: LD_STRING 
37396: ST_TO_ADDR
// animal := CreateHuman ;
37397: LD_ADDR_VAR 0 12
37401: PUSH
37402: CALL_OW 44
37406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37407: LD_VAR 0 12
37411: PPUSH
37412: LD_VAR 0 8
37416: PPUSH
37417: LD_INT 0
37419: PPUSH
37420: CALL 39485 0 3
// end ;
37424: GO 37378
37426: POP
37427: POP
// if birds then
37428: LD_VAR 0 1
37432: IFFALSE 37499
// for i = 1 to birds do
37434: LD_ADDR_VAR 0 11
37438: PUSH
37439: DOUBLE
37440: LD_INT 1
37442: DEC
37443: ST_TO_ADDR
37444: LD_VAR 0 1
37448: PUSH
37449: FOR_TO
37450: IFFALSE 37497
// begin hc_class := 18 ;
37452: LD_ADDR_OWVAR 28
37456: PUSH
37457: LD_INT 18
37459: ST_TO_ADDR
// hc_gallery =  ;
37460: LD_ADDR_OWVAR 33
37464: PUSH
37465: LD_STRING 
37467: ST_TO_ADDR
// animal := CreateHuman ;
37468: LD_ADDR_VAR 0 12
37472: PUSH
37473: CALL_OW 44
37477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37478: LD_VAR 0 12
37482: PPUSH
37483: LD_VAR 0 8
37487: PPUSH
37488: LD_INT 0
37490: PPUSH
37491: CALL 39485 0 3
// end ;
37495: GO 37449
37497: POP
37498: POP
// if tigers then
37499: LD_VAR 0 2
37503: IFFALSE 37587
// for i = 1 to tigers do
37505: LD_ADDR_VAR 0 11
37509: PUSH
37510: DOUBLE
37511: LD_INT 1
37513: DEC
37514: ST_TO_ADDR
37515: LD_VAR 0 2
37519: PUSH
37520: FOR_TO
37521: IFFALSE 37585
// begin hc_class = class_tiger ;
37523: LD_ADDR_OWVAR 28
37527: PUSH
37528: LD_INT 14
37530: ST_TO_ADDR
// hc_gallery =  ;
37531: LD_ADDR_OWVAR 33
37535: PUSH
37536: LD_STRING 
37538: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37539: LD_ADDR_OWVAR 35
37543: PUSH
37544: LD_INT 7
37546: NEG
37547: PPUSH
37548: LD_INT 7
37550: PPUSH
37551: CALL_OW 12
37555: ST_TO_ADDR
// animal := CreateHuman ;
37556: LD_ADDR_VAR 0 12
37560: PUSH
37561: CALL_OW 44
37565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37566: LD_VAR 0 12
37570: PPUSH
37571: LD_VAR 0 8
37575: PPUSH
37576: LD_INT 0
37578: PPUSH
37579: CALL 39485 0 3
// end ;
37583: GO 37520
37585: POP
37586: POP
// if apemans then
37587: LD_VAR 0 3
37591: IFFALSE 37714
// for i = 1 to apemans do
37593: LD_ADDR_VAR 0 11
37597: PUSH
37598: DOUBLE
37599: LD_INT 1
37601: DEC
37602: ST_TO_ADDR
37603: LD_VAR 0 3
37607: PUSH
37608: FOR_TO
37609: IFFALSE 37712
// begin hc_class = class_apeman ;
37611: LD_ADDR_OWVAR 28
37615: PUSH
37616: LD_INT 12
37618: ST_TO_ADDR
// hc_gallery =  ;
37619: LD_ADDR_OWVAR 33
37623: PUSH
37624: LD_STRING 
37626: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37627: LD_ADDR_OWVAR 35
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PPUSH
37636: LD_INT 2
37638: PPUSH
37639: CALL_OW 12
37643: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37644: LD_ADDR_OWVAR 31
37648: PUSH
37649: LD_INT 1
37651: PPUSH
37652: LD_INT 3
37654: PPUSH
37655: CALL_OW 12
37659: PUSH
37660: LD_INT 1
37662: PPUSH
37663: LD_INT 3
37665: PPUSH
37666: CALL_OW 12
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// animal := CreateHuman ;
37683: LD_ADDR_VAR 0 12
37687: PUSH
37688: CALL_OW 44
37692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37693: LD_VAR 0 12
37697: PPUSH
37698: LD_VAR 0 8
37702: PPUSH
37703: LD_INT 0
37705: PPUSH
37706: CALL 39485 0 3
// end ;
37710: GO 37608
37712: POP
37713: POP
// if enchidnas then
37714: LD_VAR 0 4
37718: IFFALSE 37785
// for i = 1 to enchidnas do
37720: LD_ADDR_VAR 0 11
37724: PUSH
37725: DOUBLE
37726: LD_INT 1
37728: DEC
37729: ST_TO_ADDR
37730: LD_VAR 0 4
37734: PUSH
37735: FOR_TO
37736: IFFALSE 37783
// begin hc_class = 13 ;
37738: LD_ADDR_OWVAR 28
37742: PUSH
37743: LD_INT 13
37745: ST_TO_ADDR
// hc_gallery =  ;
37746: LD_ADDR_OWVAR 33
37750: PUSH
37751: LD_STRING 
37753: ST_TO_ADDR
// animal := CreateHuman ;
37754: LD_ADDR_VAR 0 12
37758: PUSH
37759: CALL_OW 44
37763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37764: LD_VAR 0 12
37768: PPUSH
37769: LD_VAR 0 8
37773: PPUSH
37774: LD_INT 0
37776: PPUSH
37777: CALL 39485 0 3
// end ;
37781: GO 37735
37783: POP
37784: POP
// if fishes then
37785: LD_VAR 0 7
37789: IFFALSE 37856
// for i = 1 to fishes do
37791: LD_ADDR_VAR 0 11
37795: PUSH
37796: DOUBLE
37797: LD_INT 1
37799: DEC
37800: ST_TO_ADDR
37801: LD_VAR 0 7
37805: PUSH
37806: FOR_TO
37807: IFFALSE 37854
// begin hc_class = 20 ;
37809: LD_ADDR_OWVAR 28
37813: PUSH
37814: LD_INT 20
37816: ST_TO_ADDR
// hc_gallery =  ;
37817: LD_ADDR_OWVAR 33
37821: PUSH
37822: LD_STRING 
37824: ST_TO_ADDR
// animal := CreateHuman ;
37825: LD_ADDR_VAR 0 12
37829: PUSH
37830: CALL_OW 44
37834: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37835: LD_VAR 0 12
37839: PPUSH
37840: LD_VAR 0 9
37844: PPUSH
37845: LD_INT 0
37847: PPUSH
37848: CALL 39485 0 3
// end ;
37852: GO 37806
37854: POP
37855: POP
// end ;
37856: LD_VAR 0 10
37860: RET
// export function WantHeal ( sci , unit ) ; begin
37861: LD_INT 0
37863: PPUSH
// if GetTaskList ( sci ) > 0 then
37864: LD_VAR 0 1
37868: PPUSH
37869: CALL_OW 437
37873: PUSH
37874: LD_INT 0
37876: GREATER
37877: IFFALSE 37947
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 437
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PUSH
37893: LD_INT 1
37895: ARRAY
37896: PUSH
37897: LD_STRING l
37899: EQUAL
37900: PUSH
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 437
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PUSH
37915: LD_INT 4
37917: ARRAY
37918: PUSH
37919: LD_VAR 0 2
37923: EQUAL
37924: AND
37925: IFFALSE 37937
// result := true else
37927: LD_ADDR_VAR 0 3
37931: PUSH
37932: LD_INT 1
37934: ST_TO_ADDR
37935: GO 37945
// result := false ;
37937: LD_ADDR_VAR 0 3
37941: PUSH
37942: LD_INT 0
37944: ST_TO_ADDR
// end else
37945: GO 37955
// result := false ;
37947: LD_ADDR_VAR 0 3
37951: PUSH
37952: LD_INT 0
37954: ST_TO_ADDR
// end ;
37955: LD_VAR 0 3
37959: RET
// export function HealTarget ( sci ) ; begin
37960: LD_INT 0
37962: PPUSH
// if not sci then
37963: LD_VAR 0 1
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38037
// result := 0 ;
37972: LD_ADDR_VAR 0 2
37976: PUSH
37977: LD_INT 0
37979: ST_TO_ADDR
// if GetTaskList ( sci ) then
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 437
37989: IFFALSE 38037
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 437
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PUSH
38009: LD_STRING l
38011: EQUAL
38012: IFFALSE 38037
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38014: LD_ADDR_VAR 0 2
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 437
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: PUSH
38033: LD_INT 4
38035: ARRAY
38036: ST_TO_ADDR
// end ;
38037: LD_VAR 0 2
38041: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38042: LD_INT 0
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
// if not base_units then
38048: LD_VAR 0 1
38052: NOT
38053: IFFALSE 38057
// exit ;
38055: GO 38144
// result := false ;
38057: LD_ADDR_VAR 0 2
38061: PUSH
38062: LD_INT 0
38064: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38065: LD_ADDR_VAR 0 5
38069: PUSH
38070: LD_VAR 0 1
38074: PPUSH
38075: LD_INT 21
38077: PUSH
38078: LD_INT 3
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PPUSH
38085: CALL_OW 72
38089: ST_TO_ADDR
// if not tmp then
38090: LD_VAR 0 5
38094: NOT
38095: IFFALSE 38099
// exit ;
38097: GO 38144
// for i in tmp do
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_VAR 0 5
38108: PUSH
38109: FOR_IN
38110: IFFALSE 38142
// begin result := EnemyInRange ( i , 22 ) ;
38112: LD_ADDR_VAR 0 2
38116: PUSH
38117: LD_VAR 0 3
38121: PPUSH
38122: LD_INT 22
38124: PPUSH
38125: CALL 35742 0 2
38129: ST_TO_ADDR
// if result then
38130: LD_VAR 0 2
38134: IFFALSE 38140
// exit ;
38136: POP
38137: POP
38138: GO 38144
// end ;
38140: GO 38109
38142: POP
38143: POP
// end ;
38144: LD_VAR 0 2
38148: RET
// export function FilterByTag ( units , tag ) ; begin
38149: LD_INT 0
38151: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: LD_INT 120
38164: PUSH
38165: LD_VAR 0 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PPUSH
38174: CALL_OW 72
38178: ST_TO_ADDR
// end ;
38179: LD_VAR 0 3
38183: RET
// export function IsDriver ( un ) ; begin
38184: LD_INT 0
38186: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38187: LD_ADDR_VAR 0 2
38191: PUSH
38192: LD_VAR 0 1
38196: PUSH
38197: LD_INT 55
38199: PUSH
38200: EMPTY
38201: LIST
38202: PPUSH
38203: CALL_OW 69
38207: IN
38208: ST_TO_ADDR
// end ;
38209: LD_VAR 0 2
38213: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38214: LD_INT 0
38216: PPUSH
38217: PPUSH
// list := [ ] ;
38218: LD_ADDR_VAR 0 5
38222: PUSH
38223: EMPTY
38224: ST_TO_ADDR
// case d of 0 :
38225: LD_VAR 0 3
38229: PUSH
38230: LD_INT 0
38232: DOUBLE
38233: EQUAL
38234: IFTRUE 38238
38236: GO 38371
38238: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38239: LD_ADDR_VAR 0 5
38243: PUSH
38244: LD_VAR 0 1
38248: PUSH
38249: LD_INT 4
38251: MINUS
38252: PUSH
38253: LD_VAR 0 2
38257: PUSH
38258: LD_INT 4
38260: MINUS
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: LD_INT 3
38277: MINUS
38278: PUSH
38279: LD_VAR 0 2
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: PUSH
38292: LD_VAR 0 1
38296: PUSH
38297: LD_INT 4
38299: PLUS
38300: PUSH
38301: LD_VAR 0 2
38305: PUSH
38306: LD_INT 4
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_VAR 0 1
38318: PUSH
38319: LD_INT 3
38321: PLUS
38322: PUSH
38323: LD_VAR 0 2
38327: PUSH
38328: LD_INT 3
38330: PLUS
38331: PUSH
38332: LD_INT 5
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: LD_VAR 0 2
38349: PUSH
38350: LD_INT 4
38352: PLUS
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// end ; 1 :
38369: GO 39069
38371: LD_INT 1
38373: DOUBLE
38374: EQUAL
38375: IFTRUE 38379
38377: GO 38512
38379: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38380: LD_ADDR_VAR 0 5
38384: PUSH
38385: LD_VAR 0 1
38389: PUSH
38390: LD_VAR 0 2
38394: PUSH
38395: LD_INT 4
38397: MINUS
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: PUSH
38407: LD_VAR 0 1
38411: PUSH
38412: LD_INT 3
38414: MINUS
38415: PUSH
38416: LD_VAR 0 2
38420: PUSH
38421: LD_INT 3
38423: MINUS
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: PUSH
38433: LD_VAR 0 1
38437: PUSH
38438: LD_INT 4
38440: MINUS
38441: PUSH
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: PUSH
38455: LD_VAR 0 1
38459: PUSH
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 3
38467: PLUS
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: PUSH
38477: LD_VAR 0 1
38481: PUSH
38482: LD_INT 4
38484: PLUS
38485: PUSH
38486: LD_VAR 0 2
38490: PUSH
38491: LD_INT 4
38493: PLUS
38494: PUSH
38495: LD_INT 5
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// end ; 2 :
38510: GO 39069
38512: LD_INT 2
38514: DOUBLE
38515: EQUAL
38516: IFTRUE 38520
38518: GO 38649
38520: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38521: LD_ADDR_VAR 0 5
38525: PUSH
38526: LD_VAR 0 1
38530: PUSH
38531: LD_VAR 0 2
38535: PUSH
38536: LD_INT 3
38538: MINUS
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: LD_VAR 0 1
38552: PUSH
38553: LD_INT 4
38555: PLUS
38556: PUSH
38557: LD_VAR 0 2
38561: PUSH
38562: LD_INT 4
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: PUSH
38570: LD_VAR 0 1
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_INT 4
38582: PLUS
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: LD_VAR 0 1
38596: PUSH
38597: LD_INT 3
38599: MINUS
38600: PUSH
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: PUSH
38614: LD_VAR 0 1
38618: PUSH
38619: LD_INT 4
38621: MINUS
38622: PUSH
38623: LD_VAR 0 2
38627: PUSH
38628: LD_INT 4
38630: MINUS
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
// end ; 3 :
38647: GO 39069
38649: LD_INT 3
38651: DOUBLE
38652: EQUAL
38653: IFTRUE 38657
38655: GO 38790
38657: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38658: LD_ADDR_VAR 0 5
38662: PUSH
38663: LD_VAR 0 1
38667: PUSH
38668: LD_INT 3
38670: PLUS
38671: PUSH
38672: LD_VAR 0 2
38676: PUSH
38677: LD_INT 4
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 4
38692: PLUS
38693: PUSH
38694: LD_VAR 0 2
38698: PUSH
38699: LD_INT 4
38701: PLUS
38702: PUSH
38703: LD_INT 5
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: PUSH
38711: LD_VAR 0 1
38715: PUSH
38716: LD_INT 4
38718: MINUS
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_VAR 0 2
38742: PUSH
38743: LD_INT 4
38745: MINUS
38746: PUSH
38747: LD_INT 3
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: LD_INT 3
38762: MINUS
38763: PUSH
38764: LD_VAR 0 2
38768: PUSH
38769: LD_INT 3
38771: MINUS
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// end ; 4 :
38788: GO 39069
38790: LD_INT 4
38792: DOUBLE
38793: EQUAL
38794: IFTRUE 38798
38796: GO 38931
38798: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38799: LD_ADDR_VAR 0 5
38803: PUSH
38804: LD_VAR 0 1
38808: PUSH
38809: LD_VAR 0 2
38813: PUSH
38814: LD_INT 4
38816: PLUS
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: PUSH
38826: LD_VAR 0 1
38830: PUSH
38831: LD_INT 3
38833: PLUS
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 3
38842: PLUS
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 4
38859: PLUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 4
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: LD_VAR 0 1
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 3
38886: MINUS
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 4
38903: MINUS
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 4
38912: MINUS
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: ST_TO_ADDR
// end ; 5 :
38929: GO 39069
38931: LD_INT 5
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38939
38937: GO 39068
38939: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38940: LD_ADDR_VAR 0 5
38944: PUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_INT 4
38952: MINUS
38953: PUSH
38954: LD_VAR 0 2
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_VAR 0 1
38971: PUSH
38972: LD_VAR 0 2
38976: PUSH
38977: LD_INT 4
38979: MINUS
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: PUSH
38989: LD_VAR 0 1
38993: PUSH
38994: LD_INT 4
38996: PLUS
38997: PUSH
38998: LD_VAR 0 2
39002: PUSH
39003: LD_INT 4
39005: PLUS
39006: PUSH
39007: LD_INT 5
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_INT 3
39022: PLUS
39023: PUSH
39024: LD_VAR 0 2
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: PUSH
39037: LD_VAR 0 1
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_INT 3
39049: PLUS
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: ST_TO_ADDR
// end ; end ;
39066: GO 39069
39068: POP
// result := list ;
39069: LD_ADDR_VAR 0 4
39073: PUSH
39074: LD_VAR 0 5
39078: ST_TO_ADDR
// end ;
39079: LD_VAR 0 4
39083: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39084: LD_INT 0
39086: PPUSH
39087: PPUSH
39088: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39089: LD_VAR 0 1
39093: NOT
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: LD_INT 4
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: IN
39118: NOT
39119: OR
39120: IFFALSE 39124
// exit ;
39122: GO 39207
// tmp := [ ] ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: EMPTY
39130: ST_TO_ADDR
// for i in units do
39131: LD_ADDR_VAR 0 4
39135: PUSH
39136: LD_VAR 0 1
39140: PUSH
39141: FOR_IN
39142: IFFALSE 39176
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39144: LD_ADDR_VAR 0 5
39148: PUSH
39149: LD_VAR 0 5
39153: PPUSH
39154: LD_VAR 0 4
39158: PPUSH
39159: LD_VAR 0 2
39163: PPUSH
39164: CALL_OW 259
39168: PPUSH
39169: CALL 40580 0 2
39173: ST_TO_ADDR
39174: GO 39141
39176: POP
39177: POP
// if not tmp then
39178: LD_VAR 0 5
39182: NOT
39183: IFFALSE 39187
// exit ;
39185: GO 39207
// result := SortListByListDesc ( units , tmp ) ;
39187: LD_ADDR_VAR 0 3
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: LD_VAR 0 5
39201: PPUSH
39202: CALL_OW 77
39206: ST_TO_ADDR
// end ;
39207: LD_VAR 0 3
39211: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39212: LD_INT 0
39214: PPUSH
39215: PPUSH
39216: PPUSH
// result := false ;
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_INT 0
39224: ST_TO_ADDR
// if not building then
39225: LD_VAR 0 2
39229: NOT
39230: IFFALSE 39234
// exit ;
39232: GO 39372
// x := GetX ( building ) ;
39234: LD_ADDR_VAR 0 4
39238: PUSH
39239: LD_VAR 0 2
39243: PPUSH
39244: CALL_OW 250
39248: ST_TO_ADDR
// y := GetY ( building ) ;
39249: LD_ADDR_VAR 0 5
39253: PUSH
39254: LD_VAR 0 2
39258: PPUSH
39259: CALL_OW 251
39263: ST_TO_ADDR
// if not x or not y then
39264: LD_VAR 0 4
39268: NOT
39269: PUSH
39270: LD_VAR 0 5
39274: NOT
39275: OR
39276: IFFALSE 39280
// exit ;
39278: GO 39372
// if GetTaskList ( unit ) then
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 437
39289: IFFALSE 39372
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39291: LD_STRING e
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: CALL_OW 437
39303: PUSH
39304: LD_INT 1
39306: ARRAY
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: EQUAL
39312: PUSH
39313: LD_VAR 0 4
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 437
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_INT 2
39334: ARRAY
39335: EQUAL
39336: AND
39337: PUSH
39338: LD_VAR 0 5
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 437
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PUSH
39357: LD_INT 3
39359: ARRAY
39360: EQUAL
39361: AND
39362: IFFALSE 39372
// result := true end ;
39364: LD_ADDR_VAR 0 3
39368: PUSH
39369: LD_INT 1
39371: ST_TO_ADDR
// end ;
39372: LD_VAR 0 3
39376: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39377: LD_INT 0
39379: PPUSH
// result := false ;
39380: LD_ADDR_VAR 0 4
39384: PUSH
39385: LD_INT 0
39387: ST_TO_ADDR
// if GetTaskList ( unit ) then
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 437
39397: IFFALSE 39480
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39399: LD_STRING M
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 437
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: EQUAL
39420: PUSH
39421: LD_VAR 0 2
39425: PUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 437
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: PUSH
39440: LD_INT 2
39442: ARRAY
39443: EQUAL
39444: AND
39445: PUSH
39446: LD_VAR 0 3
39450: PUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 437
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PUSH
39465: LD_INT 3
39467: ARRAY
39468: EQUAL
39469: AND
39470: IFFALSE 39480
// result := true ;
39472: LD_ADDR_VAR 0 4
39476: PUSH
39477: LD_INT 1
39479: ST_TO_ADDR
// end ; end ;
39480: LD_VAR 0 4
39484: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
// if not unit or not area then
39491: LD_VAR 0 1
39495: NOT
39496: PUSH
39497: LD_VAR 0 2
39501: NOT
39502: OR
39503: IFFALSE 39507
// exit ;
39505: GO 39683
// tmp := AreaToList ( area , i ) ;
39507: LD_ADDR_VAR 0 6
39511: PUSH
39512: LD_VAR 0 2
39516: PPUSH
39517: LD_VAR 0 5
39521: PPUSH
39522: CALL_OW 517
39526: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39527: LD_ADDR_VAR 0 5
39531: PUSH
39532: DOUBLE
39533: LD_INT 1
39535: DEC
39536: ST_TO_ADDR
39537: LD_VAR 0 6
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PUSH
39546: FOR_TO
39547: IFFALSE 39681
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39549: LD_ADDR_VAR 0 7
39553: PUSH
39554: LD_VAR 0 6
39558: PUSH
39559: LD_INT 1
39561: ARRAY
39562: PUSH
39563: LD_VAR 0 5
39567: ARRAY
39568: PUSH
39569: LD_VAR 0 6
39573: PUSH
39574: LD_INT 2
39576: ARRAY
39577: PUSH
39578: LD_VAR 0 5
39582: ARRAY
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39588: LD_INT 92
39590: PUSH
39591: LD_VAR 0 7
39595: PUSH
39596: LD_INT 1
39598: ARRAY
39599: PUSH
39600: LD_VAR 0 7
39604: PUSH
39605: LD_INT 2
39607: ARRAY
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: PPUSH
39618: CALL_OW 69
39622: PUSH
39623: LD_INT 0
39625: EQUAL
39626: IFFALSE 39679
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39628: LD_VAR 0 1
39632: PPUSH
39633: LD_VAR 0 7
39637: PUSH
39638: LD_INT 1
39640: ARRAY
39641: PPUSH
39642: LD_VAR 0 7
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: PPUSH
39651: LD_VAR 0 3
39655: PPUSH
39656: CALL_OW 48
// result := IsPlaced ( unit ) ;
39660: LD_ADDR_VAR 0 4
39664: PUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: CALL_OW 305
39674: ST_TO_ADDR
// exit ;
39675: POP
39676: POP
39677: GO 39683
// end ; end ;
39679: GO 39546
39681: POP
39682: POP
// end ;
39683: LD_VAR 0 4
39687: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
// if not side or side > 8 then
39693: LD_VAR 0 1
39697: NOT
39698: PUSH
39699: LD_VAR 0 1
39703: PUSH
39704: LD_INT 8
39706: GREATER
39707: OR
39708: IFFALSE 39712
// exit ;
39710: GO 39899
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39712: LD_ADDR_VAR 0 4
39716: PUSH
39717: LD_INT 22
39719: PUSH
39720: LD_VAR 0 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 21
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 69
39747: ST_TO_ADDR
// if not tmp then
39748: LD_VAR 0 4
39752: NOT
39753: IFFALSE 39757
// exit ;
39755: GO 39899
// enable_addtolog := true ;
39757: LD_ADDR_OWVAR 81
39761: PUSH
39762: LD_INT 1
39764: ST_TO_ADDR
// AddToLog ( [ ) ;
39765: LD_STRING [
39767: PPUSH
39768: CALL_OW 561
// for i in tmp do
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_VAR 0 4
39781: PUSH
39782: FOR_IN
39783: IFFALSE 39890
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39785: LD_STRING [
39787: PUSH
39788: LD_VAR 0 3
39792: PPUSH
39793: CALL_OW 266
39797: STR
39798: PUSH
39799: LD_STRING , 
39801: STR
39802: PUSH
39803: LD_VAR 0 3
39807: PPUSH
39808: CALL_OW 250
39812: STR
39813: PUSH
39814: LD_STRING , 
39816: STR
39817: PUSH
39818: LD_VAR 0 3
39822: PPUSH
39823: CALL_OW 251
39827: STR
39828: PUSH
39829: LD_STRING , 
39831: STR
39832: PUSH
39833: LD_VAR 0 3
39837: PPUSH
39838: CALL_OW 254
39842: STR
39843: PUSH
39844: LD_STRING , 
39846: STR
39847: PUSH
39848: LD_VAR 0 3
39852: PPUSH
39853: LD_INT 1
39855: PPUSH
39856: CALL_OW 268
39860: STR
39861: PUSH
39862: LD_STRING , 
39864: STR
39865: PUSH
39866: LD_VAR 0 3
39870: PPUSH
39871: LD_INT 2
39873: PPUSH
39874: CALL_OW 268
39878: STR
39879: PUSH
39880: LD_STRING ],
39882: STR
39883: PPUSH
39884: CALL_OW 561
// end ;
39888: GO 39782
39890: POP
39891: POP
// AddToLog ( ]; ) ;
39892: LD_STRING ];
39894: PPUSH
39895: CALL_OW 561
// end ;
39899: LD_VAR 0 2
39903: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39904: LD_INT 0
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
// if not area or not rate or not max then
39911: LD_VAR 0 1
39915: NOT
39916: PUSH
39917: LD_VAR 0 2
39921: NOT
39922: OR
39923: PUSH
39924: LD_VAR 0 4
39928: NOT
39929: OR
39930: IFFALSE 39934
// exit ;
39932: GO 40123
// while 1 do
39934: LD_INT 1
39936: IFFALSE 40123
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39938: LD_ADDR_VAR 0 9
39942: PUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: LD_INT 1
39950: PPUSH
39951: CALL_OW 287
39955: PUSH
39956: LD_INT 10
39958: MUL
39959: ST_TO_ADDR
// r := rate / 10 ;
39960: LD_ADDR_VAR 0 7
39964: PUSH
39965: LD_VAR 0 2
39969: PUSH
39970: LD_INT 10
39972: DIVREAL
39973: ST_TO_ADDR
// time := 1 1$00 ;
39974: LD_ADDR_VAR 0 8
39978: PUSH
39979: LD_INT 2100
39981: ST_TO_ADDR
// if amount < min then
39982: LD_VAR 0 9
39986: PUSH
39987: LD_VAR 0 3
39991: LESS
39992: IFFALSE 40010
// r := r * 2 else
39994: LD_ADDR_VAR 0 7
39998: PUSH
39999: LD_VAR 0 7
40003: PUSH
40004: LD_INT 2
40006: MUL
40007: ST_TO_ADDR
40008: GO 40036
// if amount > max then
40010: LD_VAR 0 9
40014: PUSH
40015: LD_VAR 0 4
40019: GREATER
40020: IFFALSE 40036
// r := r / 2 ;
40022: LD_ADDR_VAR 0 7
40026: PUSH
40027: LD_VAR 0 7
40031: PUSH
40032: LD_INT 2
40034: DIVREAL
40035: ST_TO_ADDR
// time := time / r ;
40036: LD_ADDR_VAR 0 8
40040: PUSH
40041: LD_VAR 0 8
40045: PUSH
40046: LD_VAR 0 7
40050: DIVREAL
40051: ST_TO_ADDR
// if time < 0 then
40052: LD_VAR 0 8
40056: PUSH
40057: LD_INT 0
40059: LESS
40060: IFFALSE 40077
// time := time * - 1 ;
40062: LD_ADDR_VAR 0 8
40066: PUSH
40067: LD_VAR 0 8
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: MUL
40076: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40077: LD_VAR 0 8
40081: PUSH
40082: LD_INT 35
40084: PPUSH
40085: LD_INT 875
40087: PPUSH
40088: CALL_OW 12
40092: PLUS
40093: PPUSH
40094: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40098: LD_INT 1
40100: PPUSH
40101: LD_INT 5
40103: PPUSH
40104: CALL_OW 12
40108: PPUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: LD_INT 1
40116: PPUSH
40117: CALL_OW 55
// end ;
40121: GO 39934
// end ;
40123: LD_VAR 0 5
40127: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40128: LD_INT 0
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
40136: PPUSH
40137: PPUSH
// if not turrets or not factories then
40138: LD_VAR 0 1
40142: NOT
40143: PUSH
40144: LD_VAR 0 2
40148: NOT
40149: OR
40150: IFFALSE 40154
// exit ;
40152: GO 40461
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40154: LD_ADDR_VAR 0 10
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: LD_INT 6
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 4
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 24
40196: PUSH
40197: LD_INT 25
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 23
40206: PUSH
40207: LD_INT 27
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 42
40220: PUSH
40221: LD_INT 43
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 44
40230: PUSH
40231: LD_INT 46
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 45
40240: PUSH
40241: LD_INT 47
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// result := [ ] ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: EMPTY
40264: ST_TO_ADDR
// for i in turrets do
40265: LD_ADDR_VAR 0 4
40269: PUSH
40270: LD_VAR 0 1
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40459
// begin nat := GetNation ( i ) ;
40278: LD_ADDR_VAR 0 7
40282: PUSH
40283: LD_VAR 0 4
40287: PPUSH
40288: CALL_OW 248
40292: ST_TO_ADDR
// weapon := 0 ;
40293: LD_ADDR_VAR 0 8
40297: PUSH
40298: LD_INT 0
40300: ST_TO_ADDR
// if not nat then
40301: LD_VAR 0 7
40305: NOT
40306: IFFALSE 40310
// continue ;
40308: GO 40275
// for j in list [ nat ] do
40310: LD_ADDR_VAR 0 5
40314: PUSH
40315: LD_VAR 0 10
40319: PUSH
40320: LD_VAR 0 7
40324: ARRAY
40325: PUSH
40326: FOR_IN
40327: IFFALSE 40368
// if GetBWeapon ( i ) = j [ 1 ] then
40329: LD_VAR 0 4
40333: PPUSH
40334: CALL_OW 269
40338: PUSH
40339: LD_VAR 0 5
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: EQUAL
40348: IFFALSE 40366
// begin weapon := j [ 2 ] ;
40350: LD_ADDR_VAR 0 8
40354: PUSH
40355: LD_VAR 0 5
40359: PUSH
40360: LD_INT 2
40362: ARRAY
40363: ST_TO_ADDR
// break ;
40364: GO 40368
// end ;
40366: GO 40326
40368: POP
40369: POP
// if not weapon then
40370: LD_VAR 0 8
40374: NOT
40375: IFFALSE 40379
// continue ;
40377: GO 40275
// for k in factories do
40379: LD_ADDR_VAR 0 6
40383: PUSH
40384: LD_VAR 0 2
40388: PUSH
40389: FOR_IN
40390: IFFALSE 40455
// begin weapons := AvailableWeaponList ( k ) ;
40392: LD_ADDR_VAR 0 9
40396: PUSH
40397: LD_VAR 0 6
40401: PPUSH
40402: CALL_OW 478
40406: ST_TO_ADDR
// if not weapons then
40407: LD_VAR 0 9
40411: NOT
40412: IFFALSE 40416
// continue ;
40414: GO 40389
// if weapon in weapons then
40416: LD_VAR 0 8
40420: PUSH
40421: LD_VAR 0 9
40425: IN
40426: IFFALSE 40453
// begin result := [ i , weapon ] ;
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_VAR 0 4
40437: PUSH
40438: LD_VAR 0 8
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// exit ;
40447: POP
40448: POP
40449: POP
40450: POP
40451: GO 40461
// end ; end ;
40453: GO 40389
40455: POP
40456: POP
// end ;
40457: GO 40275
40459: POP
40460: POP
// end ;
40461: LD_VAR 0 3
40465: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40466: LD_INT 0
40468: PPUSH
// if not side or side > 8 then
40469: LD_VAR 0 3
40473: NOT
40474: PUSH
40475: LD_VAR 0 3
40479: PUSH
40480: LD_INT 8
40482: GREATER
40483: OR
40484: IFFALSE 40488
// exit ;
40486: GO 40547
// if not range then
40488: LD_VAR 0 4
40492: NOT
40493: IFFALSE 40504
// range := - 12 ;
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: LD_INT 12
40502: NEG
40503: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40504: LD_VAR 0 1
40508: PPUSH
40509: LD_VAR 0 2
40513: PPUSH
40514: LD_VAR 0 3
40518: PPUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40528: LD_VAR 0 1
40532: PPUSH
40533: LD_VAR 0 2
40537: PPUSH
40538: LD_VAR 0 3
40542: PPUSH
40543: CALL_OW 331
// end ;
40547: LD_VAR 0 5
40551: RET
// export function Video ( mode ) ; begin
40552: LD_INT 0
40554: PPUSH
// ingame_video = mode ;
40555: LD_ADDR_OWVAR 52
40559: PUSH
40560: LD_VAR 0 1
40564: ST_TO_ADDR
// interface_hidden = mode ;
40565: LD_ADDR_OWVAR 54
40569: PUSH
40570: LD_VAR 0 1
40574: ST_TO_ADDR
// end ;
40575: LD_VAR 0 2
40579: RET
// export function Join ( array , element ) ; begin
40580: LD_INT 0
40582: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40583: LD_ADDR_VAR 0 3
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: LD_VAR 0 1
40597: PUSH
40598: LD_INT 1
40600: PLUS
40601: PPUSH
40602: LD_VAR 0 2
40606: PPUSH
40607: CALL_OW 1
40611: ST_TO_ADDR
// end ;
40612: LD_VAR 0 3
40616: RET
// export function JoinUnion ( array , element ) ; begin
40617: LD_INT 0
40619: PPUSH
// result := array union element ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_VAR 0 1
40629: PUSH
40630: LD_VAR 0 2
40634: UNION
40635: ST_TO_ADDR
// end ;
40636: LD_VAR 0 3
40640: RET
// export function GetBehemoths ( side ) ; begin
40641: LD_INT 0
40643: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40644: LD_ADDR_VAR 0 2
40648: PUSH
40649: LD_INT 22
40651: PUSH
40652: LD_VAR 0 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 31
40663: PUSH
40664: LD_INT 25
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PPUSH
40675: CALL_OW 69
40679: ST_TO_ADDR
// end ;
40680: LD_VAR 0 2
40684: RET
// export function Shuffle ( array ) ; var i , index ; begin
40685: LD_INT 0
40687: PPUSH
40688: PPUSH
40689: PPUSH
// result := [ ] ;
40690: LD_ADDR_VAR 0 2
40694: PUSH
40695: EMPTY
40696: ST_TO_ADDR
// if not array then
40697: LD_VAR 0 1
40701: NOT
40702: IFFALSE 40706
// exit ;
40704: GO 40805
// Randomize ;
40706: CALL_OW 10
// for i = array downto 1 do
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: DOUBLE
40716: LD_VAR 0 1
40720: INC
40721: ST_TO_ADDR
40722: LD_INT 1
40724: PUSH
40725: FOR_DOWNTO
40726: IFFALSE 40803
// begin index := rand ( 1 , array ) ;
40728: LD_ADDR_VAR 0 4
40732: PUSH
40733: LD_INT 1
40735: PPUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 12
40745: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40746: LD_ADDR_VAR 0 2
40750: PUSH
40751: LD_VAR 0 2
40755: PPUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_INT 1
40763: PLUS
40764: PPUSH
40765: LD_VAR 0 1
40769: PUSH
40770: LD_VAR 0 4
40774: ARRAY
40775: PPUSH
40776: CALL_OW 2
40780: ST_TO_ADDR
// array := Delete ( array , index ) ;
40781: LD_ADDR_VAR 0 1
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: LD_VAR 0 4
40795: PPUSH
40796: CALL_OW 3
40800: ST_TO_ADDR
// end ;
40801: GO 40725
40803: POP
40804: POP
// end ;
40805: LD_VAR 0 2
40809: RET
// export function GetBaseMaterials ( base ) ; begin
40810: LD_INT 0
40812: PPUSH
// result := [ 0 , 0 , 0 ] ;
40813: LD_ADDR_VAR 0 2
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: ST_TO_ADDR
// if not base then
40832: LD_VAR 0 1
40836: NOT
40837: IFFALSE 40841
// exit ;
40839: GO 40890
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40841: LD_ADDR_VAR 0 2
40845: PUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_INT 1
40853: PPUSH
40854: CALL_OW 275
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_INT 2
40866: PPUSH
40867: CALL_OW 275
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: LD_INT 3
40879: PPUSH
40880: CALL_OW 275
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 2
40894: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
// result := array ;
40899: LD_ADDR_VAR 0 3
40903: PUSH
40904: LD_VAR 0 1
40908: ST_TO_ADDR
// if size >= result then
40909: LD_VAR 0 2
40913: PUSH
40914: LD_VAR 0 3
40918: GREATEREQUAL
40919: IFFALSE 40923
// exit ;
40921: GO 40973
// if size then
40923: LD_VAR 0 2
40927: IFFALSE 40973
// for i := array downto size do
40929: LD_ADDR_VAR 0 4
40933: PUSH
40934: DOUBLE
40935: LD_VAR 0 1
40939: INC
40940: ST_TO_ADDR
40941: LD_VAR 0 2
40945: PUSH
40946: FOR_DOWNTO
40947: IFFALSE 40971
// result := Delete ( result , result ) ;
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: LD_VAR 0 3
40958: PPUSH
40959: LD_VAR 0 3
40963: PPUSH
40964: CALL_OW 3
40968: ST_TO_ADDR
40969: GO 40946
40971: POP
40972: POP
// end ;
40973: LD_VAR 0 3
40977: RET
// export function ComExit ( unit ) ; var tmp ; begin
40978: LD_INT 0
40980: PPUSH
40981: PPUSH
// if not IsInUnit ( unit ) then
40982: LD_VAR 0 1
40986: PPUSH
40987: CALL_OW 310
40991: NOT
40992: IFFALSE 40996
// exit ;
40994: GO 41056
// tmp := IsInUnit ( unit ) ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 310
41010: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41011: LD_VAR 0 3
41015: PPUSH
41016: CALL_OW 247
41020: PUSH
41021: LD_INT 2
41023: EQUAL
41024: IFFALSE 41037
// ComExitVehicle ( unit ) else
41026: LD_VAR 0 1
41030: PPUSH
41031: CALL_OW 121
41035: GO 41046
// ComExitBuilding ( unit ) ;
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 122
// result := tmp ;
41046: LD_ADDR_VAR 0 2
41050: PUSH
41051: LD_VAR 0 3
41055: ST_TO_ADDR
// end ;
41056: LD_VAR 0 2
41060: RET
// export function ComExitAll ( units ) ; var i ; begin
41061: LD_INT 0
41063: PPUSH
41064: PPUSH
// if not units then
41065: LD_VAR 0 1
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41100
// for i in units do
41074: LD_ADDR_VAR 0 3
41078: PUSH
41079: LD_VAR 0 1
41083: PUSH
41084: FOR_IN
41085: IFFALSE 41098
// ComExit ( i ) ;
41087: LD_VAR 0 3
41091: PPUSH
41092: CALL 40978 0 1
41096: GO 41084
41098: POP
41099: POP
// end ;
41100: LD_VAR 0 2
41104: RET
// export function ResetHc ; begin
41105: LD_INT 0
41107: PPUSH
// InitHc ;
41108: CALL_OW 19
// hc_importance := 0 ;
41112: LD_ADDR_OWVAR 32
41116: PUSH
41117: LD_INT 0
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 1
41124: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
41129: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41130: LD_ADDR_VAR 0 6
41134: PUSH
41135: LD_VAR 0 1
41139: PUSH
41140: LD_VAR 0 3
41144: PLUS
41145: PUSH
41146: LD_INT 2
41148: DIV
41149: ST_TO_ADDR
// if _x < 0 then
41150: LD_VAR 0 6
41154: PUSH
41155: LD_INT 0
41157: LESS
41158: IFFALSE 41175
// _x := _x * - 1 ;
41160: LD_ADDR_VAR 0 6
41164: PUSH
41165: LD_VAR 0 6
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: MUL
41174: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41175: LD_ADDR_VAR 0 7
41179: PUSH
41180: LD_VAR 0 2
41184: PUSH
41185: LD_VAR 0 4
41189: PLUS
41190: PUSH
41191: LD_INT 2
41193: DIV
41194: ST_TO_ADDR
// if _y < 0 then
41195: LD_VAR 0 7
41199: PUSH
41200: LD_INT 0
41202: LESS
41203: IFFALSE 41220
// _y := _y * - 1 ;
41205: LD_ADDR_VAR 0 7
41209: PUSH
41210: LD_VAR 0 7
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: MUL
41219: ST_TO_ADDR
// result := [ _x , _y ] ;
41220: LD_ADDR_VAR 0 5
41224: PUSH
41225: LD_VAR 0 6
41229: PUSH
41230: LD_VAR 0 7
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// end ;
41239: LD_VAR 0 5
41243: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41244: LD_INT 0
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
// task := GetTaskList ( unit ) ;
41250: LD_ADDR_VAR 0 7
41254: PUSH
41255: LD_VAR 0 1
41259: PPUSH
41260: CALL_OW 437
41264: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41265: LD_VAR 0 7
41269: NOT
41270: PUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: LD_VAR 0 2
41280: PPUSH
41281: CALL_OW 308
41285: NOT
41286: AND
41287: IFFALSE 41291
// exit ;
41289: GO 41409
// if IsInArea ( unit , area ) then
41291: LD_VAR 0 1
41295: PPUSH
41296: LD_VAR 0 2
41300: PPUSH
41301: CALL_OW 308
41305: IFFALSE 41323
// begin ComMoveToArea ( unit , goAway ) ;
41307: LD_VAR 0 1
41311: PPUSH
41312: LD_VAR 0 3
41316: PPUSH
41317: CALL_OW 113
// exit ;
41321: GO 41409
// end ; if task [ 1 ] [ 1 ] <> M then
41323: LD_VAR 0 7
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PUSH
41332: LD_INT 1
41334: ARRAY
41335: PUSH
41336: LD_STRING M
41338: NONEQUAL
41339: IFFALSE 41343
// exit ;
41341: GO 41409
// x := task [ 1 ] [ 2 ] ;
41343: LD_ADDR_VAR 0 5
41347: PUSH
41348: LD_VAR 0 7
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: PUSH
41357: LD_INT 2
41359: ARRAY
41360: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41361: LD_ADDR_VAR 0 6
41365: PUSH
41366: LD_VAR 0 7
41370: PUSH
41371: LD_INT 1
41373: ARRAY
41374: PUSH
41375: LD_INT 3
41377: ARRAY
41378: ST_TO_ADDR
// if InArea ( x , y , area ) then
41379: LD_VAR 0 5
41383: PPUSH
41384: LD_VAR 0 6
41388: PPUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: CALL_OW 309
41398: IFFALSE 41409
// ComStop ( unit ) ;
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 141
// end ;
41409: LD_VAR 0 4
41413: RET
// export function Abs ( value ) ; begin
41414: LD_INT 0
41416: PPUSH
// result := value ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 1
41426: ST_TO_ADDR
// if value < 0 then
41427: LD_VAR 0 1
41431: PUSH
41432: LD_INT 0
41434: LESS
41435: IFFALSE 41452
// result := value * - 1 ;
41437: LD_ADDR_VAR 0 2
41441: PUSH
41442: LD_VAR 0 1
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: MUL
41451: ST_TO_ADDR
// end ;
41452: LD_VAR 0 2
41456: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41457: LD_INT 0
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
// if not unit or not building then
41467: LD_VAR 0 1
41471: NOT
41472: PUSH
41473: LD_VAR 0 2
41477: NOT
41478: OR
41479: IFFALSE 41483
// exit ;
41481: GO 41709
// x := GetX ( building ) ;
41483: LD_ADDR_VAR 0 4
41487: PUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: CALL_OW 250
41497: ST_TO_ADDR
// y := GetY ( building ) ;
41498: LD_ADDR_VAR 0 6
41502: PUSH
41503: LD_VAR 0 2
41507: PPUSH
41508: CALL_OW 251
41512: ST_TO_ADDR
// d := GetDir ( building ) ;
41513: LD_ADDR_VAR 0 8
41517: PUSH
41518: LD_VAR 0 2
41522: PPUSH
41523: CALL_OW 254
41527: ST_TO_ADDR
// r := 4 ;
41528: LD_ADDR_VAR 0 9
41532: PUSH
41533: LD_INT 4
41535: ST_TO_ADDR
// for i := 1 to 5 do
41536: LD_ADDR_VAR 0 10
41540: PUSH
41541: DOUBLE
41542: LD_INT 1
41544: DEC
41545: ST_TO_ADDR
41546: LD_INT 5
41548: PUSH
41549: FOR_TO
41550: IFFALSE 41707
// begin _x := ShiftX ( x , d , r + i ) ;
41552: LD_ADDR_VAR 0 5
41556: PUSH
41557: LD_VAR 0 4
41561: PPUSH
41562: LD_VAR 0 8
41566: PPUSH
41567: LD_VAR 0 9
41571: PUSH
41572: LD_VAR 0 10
41576: PLUS
41577: PPUSH
41578: CALL_OW 272
41582: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41583: LD_ADDR_VAR 0 7
41587: PUSH
41588: LD_VAR 0 6
41592: PPUSH
41593: LD_VAR 0 8
41597: PPUSH
41598: LD_VAR 0 9
41602: PUSH
41603: LD_VAR 0 10
41607: PLUS
41608: PPUSH
41609: CALL_OW 273
41613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41614: LD_VAR 0 5
41618: PPUSH
41619: LD_VAR 0 7
41623: PPUSH
41624: CALL_OW 488
41628: PUSH
41629: LD_VAR 0 5
41633: PPUSH
41634: LD_VAR 0 7
41638: PPUSH
41639: CALL_OW 428
41643: PPUSH
41644: CALL_OW 247
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: IN
41659: NOT
41660: AND
41661: IFFALSE 41705
// begin ComMoveXY ( unit , _x , _y ) ;
41663: LD_VAR 0 1
41667: PPUSH
41668: LD_VAR 0 5
41672: PPUSH
41673: LD_VAR 0 7
41677: PPUSH
41678: CALL_OW 111
// result := [ _x , _y ] ;
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_VAR 0 5
41691: PUSH
41692: LD_VAR 0 7
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// exit ;
41701: POP
41702: POP
41703: GO 41709
// end ; end ;
41705: GO 41549
41707: POP
41708: POP
// end ;
41709: LD_VAR 0 3
41713: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41714: LD_INT 0
41716: PPUSH
41717: PPUSH
41718: PPUSH
// result := 0 ;
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_INT 0
41726: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41727: LD_VAR 0 1
41731: PUSH
41732: LD_INT 0
41734: LESS
41735: PUSH
41736: LD_VAR 0 1
41740: PUSH
41741: LD_INT 8
41743: GREATER
41744: OR
41745: PUSH
41746: LD_VAR 0 2
41750: PUSH
41751: LD_INT 0
41753: LESS
41754: OR
41755: PUSH
41756: LD_VAR 0 2
41760: PUSH
41761: LD_INT 8
41763: GREATER
41764: OR
41765: IFFALSE 41769
// exit ;
41767: GO 41844
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41769: LD_ADDR_VAR 0 4
41773: PUSH
41774: LD_INT 22
41776: PUSH
41777: LD_VAR 0 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PPUSH
41786: CALL_OW 69
41790: PUSH
41791: FOR_IN
41792: IFFALSE 41842
// begin un := UnitShoot ( i ) ;
41794: LD_ADDR_VAR 0 5
41798: PUSH
41799: LD_VAR 0 4
41803: PPUSH
41804: CALL_OW 504
41808: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41809: LD_VAR 0 5
41813: PPUSH
41814: CALL_OW 255
41818: PUSH
41819: LD_VAR 0 1
41823: EQUAL
41824: IFFALSE 41840
// begin result := un ;
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_VAR 0 5
41835: ST_TO_ADDR
// exit ;
41836: POP
41837: POP
41838: GO 41844
// end ; end ;
41840: GO 41791
41842: POP
41843: POP
// end ;
41844: LD_VAR 0 3
41848: RET
// export function GetCargoBay ( units ) ; begin
41849: LD_INT 0
41851: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41852: LD_ADDR_VAR 0 2
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 34
41867: PUSH
41868: LD_INT 12
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 34
41877: PUSH
41878: LD_INT 51
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 34
41887: PUSH
41888: LD_INT 32
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 34
41897: PUSH
41898: LD_INT 89
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: PPUSH
41912: CALL_OW 72
41916: ST_TO_ADDR
// end ;
41917: LD_VAR 0 2
41921: RET
// export function Negate ( value ) ; begin
41922: LD_INT 0
41924: PPUSH
// result := not value ;
41925: LD_ADDR_VAR 0 2
41929: PUSH
41930: LD_VAR 0 1
41934: NOT
41935: ST_TO_ADDR
// end ;
41936: LD_VAR 0 2
41940: RET
// export function Inc ( value ) ; begin
41941: LD_INT 0
41943: PPUSH
// result := value + 1 ;
41944: LD_ADDR_VAR 0 2
41948: PUSH
41949: LD_VAR 0 1
41953: PUSH
41954: LD_INT 1
41956: PLUS
41957: ST_TO_ADDR
// end ;
41958: LD_VAR 0 2
41962: RET
// export function Dec ( value ) ; begin
41963: LD_INT 0
41965: PPUSH
// result := value - 1 ;
41966: LD_ADDR_VAR 0 2
41970: PUSH
41971: LD_VAR 0 1
41975: PUSH
41976: LD_INT 1
41978: MINUS
41979: ST_TO_ADDR
// end ;
41980: LD_VAR 0 2
41984: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41985: LD_INT 0
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41995: LD_VAR 0 1
41999: PPUSH
42000: LD_VAR 0 2
42004: PPUSH
42005: CALL_OW 488
42009: NOT
42010: PUSH
42011: LD_VAR 0 3
42015: PPUSH
42016: LD_VAR 0 4
42020: PPUSH
42021: CALL_OW 488
42025: NOT
42026: OR
42027: IFFALSE 42040
// begin result := - 1 ;
42029: LD_ADDR_VAR 0 5
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: ST_TO_ADDR
// exit ;
42038: GO 42275
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42040: LD_ADDR_VAR 0 12
42044: PUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: LD_VAR 0 2
42054: PPUSH
42055: LD_VAR 0 3
42059: PPUSH
42060: LD_VAR 0 4
42064: PPUSH
42065: CALL 41125 0 4
42069: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42070: LD_ADDR_VAR 0 11
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: LD_VAR 0 2
42084: PPUSH
42085: LD_VAR 0 12
42089: PUSH
42090: LD_INT 1
42092: ARRAY
42093: PPUSH
42094: LD_VAR 0 12
42098: PUSH
42099: LD_INT 2
42101: ARRAY
42102: PPUSH
42103: CALL_OW 298
42107: ST_TO_ADDR
// distance := 9999 ;
42108: LD_ADDR_VAR 0 10
42112: PUSH
42113: LD_INT 9999
42115: ST_TO_ADDR
// for i := 0 to 5 do
42116: LD_ADDR_VAR 0 6
42120: PUSH
42121: DOUBLE
42122: LD_INT 0
42124: DEC
42125: ST_TO_ADDR
42126: LD_INT 5
42128: PUSH
42129: FOR_TO
42130: IFFALSE 42273
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 6
42146: PPUSH
42147: LD_VAR 0 11
42151: PPUSH
42152: CALL_OW 272
42156: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42157: LD_ADDR_VAR 0 8
42161: PUSH
42162: LD_VAR 0 2
42166: PPUSH
42167: LD_VAR 0 6
42171: PPUSH
42172: LD_VAR 0 11
42176: PPUSH
42177: CALL_OW 273
42181: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42182: LD_VAR 0 7
42186: PPUSH
42187: LD_VAR 0 8
42191: PPUSH
42192: CALL_OW 488
42196: NOT
42197: IFFALSE 42201
// continue ;
42199: GO 42129
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42201: LD_ADDR_VAR 0 9
42205: PUSH
42206: LD_VAR 0 12
42210: PUSH
42211: LD_INT 1
42213: ARRAY
42214: PPUSH
42215: LD_VAR 0 12
42219: PUSH
42220: LD_INT 2
42222: ARRAY
42223: PPUSH
42224: LD_VAR 0 7
42228: PPUSH
42229: LD_VAR 0 8
42233: PPUSH
42234: CALL_OW 298
42238: ST_TO_ADDR
// if tmp < distance then
42239: LD_VAR 0 9
42243: PUSH
42244: LD_VAR 0 10
42248: LESS
42249: IFFALSE 42271
// begin result := i ;
42251: LD_ADDR_VAR 0 5
42255: PUSH
42256: LD_VAR 0 6
42260: ST_TO_ADDR
// distance := tmp ;
42261: LD_ADDR_VAR 0 10
42265: PUSH
42266: LD_VAR 0 9
42270: ST_TO_ADDR
// end ; end ;
42271: GO 42129
42273: POP
42274: POP
// end ;
42275: LD_VAR 0 5
42279: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42280: LD_INT 0
42282: PPUSH
42283: PPUSH
// if not driver or not IsInUnit ( driver ) then
42284: LD_VAR 0 1
42288: NOT
42289: PUSH
42290: LD_VAR 0 1
42294: PPUSH
42295: CALL_OW 310
42299: NOT
42300: OR
42301: IFFALSE 42305
// exit ;
42303: GO 42395
// vehicle := IsInUnit ( driver ) ;
42305: LD_ADDR_VAR 0 3
42309: PUSH
42310: LD_VAR 0 1
42314: PPUSH
42315: CALL_OW 310
42319: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42320: LD_VAR 0 1
42324: PPUSH
42325: LD_STRING \
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: PUSH
42355: LD_STRING E
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_VAR 0 3
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PPUSH
42391: CALL_OW 446
// end ;
42395: LD_VAR 0 2
42399: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42400: LD_INT 0
42402: PPUSH
42403: PPUSH
// if not driver or not IsInUnit ( driver ) then
42404: LD_VAR 0 1
42408: NOT
42409: PUSH
42410: LD_VAR 0 1
42414: PPUSH
42415: CALL_OW 310
42419: NOT
42420: OR
42421: IFFALSE 42425
// exit ;
42423: GO 42515
// vehicle := IsInUnit ( driver ) ;
42425: LD_ADDR_VAR 0 3
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 310
42439: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_STRING \
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: PUSH
42475: LD_STRING E
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_VAR 0 3
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PPUSH
42511: CALL_OW 447
// end ;
42515: LD_VAR 0 2
42519: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42520: LD_INT 0
42522: PPUSH
42523: PPUSH
42524: PPUSH
// tmp := [ ] ;
42525: LD_ADDR_VAR 0 5
42529: PUSH
42530: EMPTY
42531: ST_TO_ADDR
// for i in units do
42532: LD_ADDR_VAR 0 4
42536: PUSH
42537: LD_VAR 0 1
42541: PUSH
42542: FOR_IN
42543: IFFALSE 42581
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42545: LD_ADDR_VAR 0 5
42549: PUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: LD_VAR 0 5
42559: PUSH
42560: LD_INT 1
42562: PLUS
42563: PPUSH
42564: LD_VAR 0 4
42568: PPUSH
42569: CALL_OW 256
42573: PPUSH
42574: CALL_OW 2
42578: ST_TO_ADDR
42579: GO 42542
42581: POP
42582: POP
// if not tmp then
42583: LD_VAR 0 5
42587: NOT
42588: IFFALSE 42592
// exit ;
42590: GO 42640
// if asc then
42592: LD_VAR 0 2
42596: IFFALSE 42620
// result := SortListByListAsc ( units , tmp ) else
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: CALL_OW 76
42617: ST_TO_ADDR
42618: GO 42640
// result := SortListByListDesc ( units , tmp ) ;
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: LD_VAR 0 5
42634: PPUSH
42635: CALL_OW 77
42639: ST_TO_ADDR
// end ;
42640: LD_VAR 0 3
42644: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42645: LD_INT 0
42647: PPUSH
42648: PPUSH
// task := GetTaskList ( mech ) ;
42649: LD_ADDR_VAR 0 4
42653: PUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 437
42663: ST_TO_ADDR
// if not task then
42664: LD_VAR 0 4
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_VAR 0 4
42682: PUSH
42683: LD_INT 1
42685: ARRAY
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: PUSH
42691: LD_STRING r
42693: EQUAL
42694: PUSH
42695: LD_VAR 0 4
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PUSH
42704: LD_INT 4
42706: ARRAY
42707: PUSH
42708: LD_VAR 0 2
42712: EQUAL
42713: AND
42714: ST_TO_ADDR
// end ;
42715: LD_VAR 0 3
42719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42720: LD_INT 0
42722: PPUSH
// SetDir ( unit , d ) ;
42723: LD_VAR 0 1
42727: PPUSH
42728: LD_VAR 0 4
42732: PPUSH
42733: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42737: LD_VAR 0 1
42741: PPUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: LD_VAR 0 3
42751: PPUSH
42752: LD_VAR 0 5
42756: PPUSH
42757: CALL_OW 48
// end ;
42761: LD_VAR 0 6
42765: RET
// export function ToNaturalNumber ( number ) ; begin
42766: LD_INT 0
42768: PPUSH
// result := number div 1 ;
42769: LD_ADDR_VAR 0 2
42773: PUSH
42774: LD_VAR 0 1
42778: PUSH
42779: LD_INT 1
42781: DIV
42782: ST_TO_ADDR
// if number < 0 then
42783: LD_VAR 0 1
42787: PUSH
42788: LD_INT 0
42790: LESS
42791: IFFALSE 42801
// result := 0 ;
42793: LD_ADDR_VAR 0 2
42797: PUSH
42798: LD_INT 0
42800: ST_TO_ADDR
// end ;
42801: LD_VAR 0 2
42805: RET
// export function SortByClass ( units , class ) ; var un ; begin
42806: LD_INT 0
42808: PPUSH
42809: PPUSH
// if not units or not class then
42810: LD_VAR 0 1
42814: NOT
42815: PUSH
42816: LD_VAR 0 2
42820: NOT
42821: OR
42822: IFFALSE 42826
// exit ;
42824: GO 42921
// result := [ ] ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: EMPTY
42832: ST_TO_ADDR
// for un in units do
42833: LD_ADDR_VAR 0 4
42837: PUSH
42838: LD_VAR 0 1
42842: PUSH
42843: FOR_IN
42844: IFFALSE 42919
// if GetClass ( un ) = class then
42846: LD_VAR 0 4
42850: PPUSH
42851: CALL_OW 257
42855: PUSH
42856: LD_VAR 0 2
42860: EQUAL
42861: IFFALSE 42888
// result := Insert ( result , 1 , un ) else
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_VAR 0 3
42872: PPUSH
42873: LD_INT 1
42875: PPUSH
42876: LD_VAR 0 4
42880: PPUSH
42881: CALL_OW 2
42885: ST_TO_ADDR
42886: GO 42917
// result := Replace ( result , result + 1 , un ) ;
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_VAR 0 3
42897: PPUSH
42898: LD_VAR 0 3
42902: PUSH
42903: LD_INT 1
42905: PLUS
42906: PPUSH
42907: LD_VAR 0 4
42911: PPUSH
42912: CALL_OW 1
42916: ST_TO_ADDR
42917: GO 42843
42919: POP
42920: POP
// end ;
42921: LD_VAR 0 3
42925: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
// result := [ ] ;
42935: LD_ADDR_VAR 0 4
42939: PUSH
42940: EMPTY
42941: ST_TO_ADDR
// if x - r < 0 then
42942: LD_VAR 0 1
42946: PUSH
42947: LD_VAR 0 3
42951: MINUS
42952: PUSH
42953: LD_INT 0
42955: LESS
42956: IFFALSE 42968
// min_x := 0 else
42958: LD_ADDR_VAR 0 8
42962: PUSH
42963: LD_INT 0
42965: ST_TO_ADDR
42966: GO 42984
// min_x := x - r ;
42968: LD_ADDR_VAR 0 8
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_VAR 0 3
42982: MINUS
42983: ST_TO_ADDR
// if y - r < 0 then
42984: LD_VAR 0 2
42988: PUSH
42989: LD_VAR 0 3
42993: MINUS
42994: PUSH
42995: LD_INT 0
42997: LESS
42998: IFFALSE 43010
// min_y := 0 else
43000: LD_ADDR_VAR 0 7
43004: PUSH
43005: LD_INT 0
43007: ST_TO_ADDR
43008: GO 43026
// min_y := y - r ;
43010: LD_ADDR_VAR 0 7
43014: PUSH
43015: LD_VAR 0 2
43019: PUSH
43020: LD_VAR 0 3
43024: MINUS
43025: ST_TO_ADDR
// max_x := x + r ;
43026: LD_ADDR_VAR 0 9
43030: PUSH
43031: LD_VAR 0 1
43035: PUSH
43036: LD_VAR 0 3
43040: PLUS
43041: ST_TO_ADDR
// max_y := y + r ;
43042: LD_ADDR_VAR 0 10
43046: PUSH
43047: LD_VAR 0 2
43051: PUSH
43052: LD_VAR 0 3
43056: PLUS
43057: ST_TO_ADDR
// for _x = min_x to max_x do
43058: LD_ADDR_VAR 0 5
43062: PUSH
43063: DOUBLE
43064: LD_VAR 0 8
43068: DEC
43069: ST_TO_ADDR
43070: LD_VAR 0 9
43074: PUSH
43075: FOR_TO
43076: IFFALSE 43177
// for _y = min_y to max_y do
43078: LD_ADDR_VAR 0 6
43082: PUSH
43083: DOUBLE
43084: LD_VAR 0 7
43088: DEC
43089: ST_TO_ADDR
43090: LD_VAR 0 10
43094: PUSH
43095: FOR_TO
43096: IFFALSE 43173
// begin if not ValidHex ( _x , _y ) then
43098: LD_VAR 0 5
43102: PPUSH
43103: LD_VAR 0 6
43107: PPUSH
43108: CALL_OW 488
43112: NOT
43113: IFFALSE 43117
// continue ;
43115: GO 43095
// if GetResourceTypeXY ( _x , _y ) then
43117: LD_VAR 0 5
43121: PPUSH
43122: LD_VAR 0 6
43126: PPUSH
43127: CALL_OW 283
43131: IFFALSE 43171
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43133: LD_ADDR_VAR 0 4
43137: PUSH
43138: LD_VAR 0 4
43142: PPUSH
43143: LD_VAR 0 4
43147: PUSH
43148: LD_INT 1
43150: PLUS
43151: PPUSH
43152: LD_VAR 0 5
43156: PUSH
43157: LD_VAR 0 6
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PPUSH
43166: CALL_OW 1
43170: ST_TO_ADDR
// end ;
43171: GO 43095
43173: POP
43174: POP
43175: GO 43075
43177: POP
43178: POP
// end ;
43179: LD_VAR 0 4
43183: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43184: LD_INT 0
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
// if not units then
43194: LD_VAR 0 1
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43731
// result := UnitFilter ( units , [ f_ok ] ) ;
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_VAR 0 1
43212: PPUSH
43213: LD_INT 50
43215: PUSH
43216: EMPTY
43217: LIST
43218: PPUSH
43219: CALL_OW 72
43223: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43224: LD_ADDR_VAR 0 8
43228: PUSH
43229: LD_VAR 0 1
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: CALL_OW 255
43242: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43243: LD_ADDR_VAR 0 10
43247: PUSH
43248: LD_INT 29
43250: PUSH
43251: LD_INT 91
43253: PUSH
43254: LD_INT 49
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// if not result then
43262: LD_VAR 0 3
43266: NOT
43267: IFFALSE 43271
// exit ;
43269: GO 43731
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43271: LD_ADDR_VAR 0 5
43275: PUSH
43276: LD_INT 81
43278: PUSH
43279: LD_VAR 0 8
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: CALL_OW 69
43292: ST_TO_ADDR
// for i in result do
43293: LD_ADDR_VAR 0 4
43297: PUSH
43298: LD_VAR 0 3
43302: PUSH
43303: FOR_IN
43304: IFFALSE 43729
// begin tag := GetTag ( i ) + 1 ;
43306: LD_ADDR_VAR 0 9
43310: PUSH
43311: LD_VAR 0 4
43315: PPUSH
43316: CALL_OW 110
43320: PUSH
43321: LD_INT 1
43323: PLUS
43324: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43325: LD_ADDR_VAR 0 7
43329: PUSH
43330: LD_VAR 0 4
43334: PPUSH
43335: CALL_OW 250
43339: PPUSH
43340: LD_VAR 0 4
43344: PPUSH
43345: CALL_OW 251
43349: PPUSH
43350: LD_INT 4
43352: PPUSH
43353: CALL 42926 0 3
43357: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43358: LD_VAR 0 4
43362: PPUSH
43363: CALL_OW 247
43367: PUSH
43368: LD_INT 2
43370: EQUAL
43371: PUSH
43372: LD_VAR 0 7
43376: PUSH
43377: LD_INT 2
43379: GREATER
43380: AND
43381: PUSH
43382: LD_VAR 0 4
43386: PPUSH
43387: CALL_OW 264
43391: PUSH
43392: LD_VAR 0 10
43396: IN
43397: NOT
43398: AND
43399: IFFALSE 43438
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43401: LD_VAR 0 4
43405: PPUSH
43406: LD_VAR 0 7
43410: PUSH
43411: LD_INT 1
43413: ARRAY
43414: PUSH
43415: LD_INT 1
43417: ARRAY
43418: PPUSH
43419: LD_VAR 0 7
43423: PUSH
43424: LD_INT 1
43426: ARRAY
43427: PUSH
43428: LD_INT 2
43430: ARRAY
43431: PPUSH
43432: CALL_OW 116
43436: GO 43727
// if path > tag then
43438: LD_VAR 0 2
43442: PUSH
43443: LD_VAR 0 9
43447: GREATER
43448: IFFALSE 43656
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43450: LD_ADDR_VAR 0 6
43454: PUSH
43455: LD_VAR 0 5
43459: PPUSH
43460: LD_INT 91
43462: PUSH
43463: LD_VAR 0 4
43467: PUSH
43468: LD_INT 8
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: PPUSH
43476: CALL_OW 72
43480: ST_TO_ADDR
// if nearEnemy then
43481: LD_VAR 0 6
43485: IFFALSE 43554
// begin if GetWeapon ( i ) = ru_time_lapser then
43487: LD_VAR 0 4
43491: PPUSH
43492: CALL_OW 264
43496: PUSH
43497: LD_INT 49
43499: EQUAL
43500: IFFALSE 43528
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43502: LD_VAR 0 4
43506: PPUSH
43507: LD_VAR 0 6
43511: PPUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: CALL_OW 74
43521: PPUSH
43522: CALL_OW 112
43526: GO 43552
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43528: LD_VAR 0 4
43532: PPUSH
43533: LD_VAR 0 6
43537: PPUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: CALL_OW 74
43547: PPUSH
43548: CALL 44802 0 2
// end else
43552: GO 43654
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43554: LD_VAR 0 4
43558: PPUSH
43559: LD_VAR 0 2
43563: PUSH
43564: LD_VAR 0 9
43568: ARRAY
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: PPUSH
43574: LD_VAR 0 2
43578: PUSH
43579: LD_VAR 0 9
43583: ARRAY
43584: PUSH
43585: LD_INT 2
43587: ARRAY
43588: PPUSH
43589: CALL_OW 297
43593: PUSH
43594: LD_INT 6
43596: GREATER
43597: IFFALSE 43640
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43599: LD_VAR 0 4
43603: PPUSH
43604: LD_VAR 0 2
43608: PUSH
43609: LD_VAR 0 9
43613: ARRAY
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PPUSH
43619: LD_VAR 0 2
43623: PUSH
43624: LD_VAR 0 9
43628: ARRAY
43629: PUSH
43630: LD_INT 2
43632: ARRAY
43633: PPUSH
43634: CALL_OW 114
43638: GO 43654
// SetTag ( i , tag ) ;
43640: LD_VAR 0 4
43644: PPUSH
43645: LD_VAR 0 9
43649: PPUSH
43650: CALL_OW 109
// end else
43654: GO 43727
// if enemy then
43656: LD_VAR 0 5
43660: IFFALSE 43727
// begin if GetWeapon ( i ) = ru_time_lapser then
43662: LD_VAR 0 4
43666: PPUSH
43667: CALL_OW 264
43671: PUSH
43672: LD_INT 49
43674: EQUAL
43675: IFFALSE 43703
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43677: LD_VAR 0 4
43681: PPUSH
43682: LD_VAR 0 5
43686: PPUSH
43687: LD_VAR 0 4
43691: PPUSH
43692: CALL_OW 74
43696: PPUSH
43697: CALL_OW 112
43701: GO 43727
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43703: LD_VAR 0 4
43707: PPUSH
43708: LD_VAR 0 5
43712: PPUSH
43713: LD_VAR 0 4
43717: PPUSH
43718: CALL_OW 74
43722: PPUSH
43723: CALL 44802 0 2
// end ; end ;
43727: GO 43303
43729: POP
43730: POP
// end ;
43731: LD_VAR 0 3
43735: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43736: LD_INT 0
43738: PPUSH
43739: PPUSH
43740: PPUSH
// if not unit or IsInUnit ( unit ) then
43741: LD_VAR 0 1
43745: NOT
43746: PUSH
43747: LD_VAR 0 1
43751: PPUSH
43752: CALL_OW 310
43756: OR
43757: IFFALSE 43761
// exit ;
43759: GO 43852
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43761: LD_ADDR_VAR 0 4
43765: PUSH
43766: LD_VAR 0 1
43770: PPUSH
43771: CALL_OW 250
43775: PPUSH
43776: LD_VAR 0 2
43780: PPUSH
43781: LD_INT 1
43783: PPUSH
43784: CALL_OW 272
43788: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43789: LD_ADDR_VAR 0 5
43793: PUSH
43794: LD_VAR 0 1
43798: PPUSH
43799: CALL_OW 251
43803: PPUSH
43804: LD_VAR 0 2
43808: PPUSH
43809: LD_INT 1
43811: PPUSH
43812: CALL_OW 273
43816: ST_TO_ADDR
// if ValidHex ( x , y ) then
43817: LD_VAR 0 4
43821: PPUSH
43822: LD_VAR 0 5
43826: PPUSH
43827: CALL_OW 488
43831: IFFALSE 43852
// ComTurnXY ( unit , x , y ) ;
43833: LD_VAR 0 1
43837: PPUSH
43838: LD_VAR 0 4
43842: PPUSH
43843: LD_VAR 0 5
43847: PPUSH
43848: CALL_OW 118
// end ;
43852: LD_VAR 0 3
43856: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43857: LD_INT 0
43859: PPUSH
43860: PPUSH
// result := false ;
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_INT 0
43868: ST_TO_ADDR
// if not units then
43869: LD_VAR 0 2
43873: NOT
43874: IFFALSE 43878
// exit ;
43876: GO 43923
// for i in units do
43878: LD_ADDR_VAR 0 4
43882: PUSH
43883: LD_VAR 0 2
43887: PUSH
43888: FOR_IN
43889: IFFALSE 43921
// if See ( side , i ) then
43891: LD_VAR 0 1
43895: PPUSH
43896: LD_VAR 0 4
43900: PPUSH
43901: CALL_OW 292
43905: IFFALSE 43919
// begin result := true ;
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: LD_INT 1
43914: ST_TO_ADDR
// exit ;
43915: POP
43916: POP
43917: GO 43923
// end ;
43919: GO 43888
43921: POP
43922: POP
// end ;
43923: LD_VAR 0 3
43927: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43928: LD_INT 0
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
// if not unit or not points then
43934: LD_VAR 0 1
43938: NOT
43939: PUSH
43940: LD_VAR 0 2
43944: NOT
43945: OR
43946: IFFALSE 43950
// exit ;
43948: GO 44040
// dist := 99999 ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_INT 99999
43957: ST_TO_ADDR
// for i in points do
43958: LD_ADDR_VAR 0 4
43962: PUSH
43963: LD_VAR 0 2
43967: PUSH
43968: FOR_IN
43969: IFFALSE 44038
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43971: LD_ADDR_VAR 0 6
43975: PUSH
43976: LD_VAR 0 1
43980: PPUSH
43981: LD_VAR 0 4
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PPUSH
43990: LD_VAR 0 4
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: PPUSH
43999: CALL_OW 297
44003: ST_TO_ADDR
// if tmpDist < dist then
44004: LD_VAR 0 6
44008: PUSH
44009: LD_VAR 0 5
44013: LESS
44014: IFFALSE 44036
// begin result := i ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_VAR 0 4
44025: ST_TO_ADDR
// dist := tmpDist ;
44026: LD_ADDR_VAR 0 5
44030: PUSH
44031: LD_VAR 0 6
44035: ST_TO_ADDR
// end ; end ;
44036: GO 43968
44038: POP
44039: POP
// end ;
44040: LD_VAR 0 3
44044: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44045: LD_INT 0
44047: PPUSH
// uc_side := side ;
44048: LD_ADDR_OWVAR 20
44052: PUSH
44053: LD_VAR 0 1
44057: ST_TO_ADDR
// uc_nation := 3 ;
44058: LD_ADDR_OWVAR 21
44062: PUSH
44063: LD_INT 3
44065: ST_TO_ADDR
// vc_chassis := 25 ;
44066: LD_ADDR_OWVAR 37
44070: PUSH
44071: LD_INT 25
44073: ST_TO_ADDR
// vc_engine := engine_siberite ;
44074: LD_ADDR_OWVAR 39
44078: PUSH
44079: LD_INT 3
44081: ST_TO_ADDR
// vc_control := control_computer ;
44082: LD_ADDR_OWVAR 38
44086: PUSH
44087: LD_INT 3
44089: ST_TO_ADDR
// vc_weapon := 59 ;
44090: LD_ADDR_OWVAR 40
44094: PUSH
44095: LD_INT 59
44097: ST_TO_ADDR
// result := CreateVehicle ;
44098: LD_ADDR_VAR 0 5
44102: PUSH
44103: CALL_OW 45
44107: ST_TO_ADDR
// SetDir ( result , d ) ;
44108: LD_VAR 0 5
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44122: LD_VAR 0 5
44126: PPUSH
44127: LD_VAR 0 2
44131: PPUSH
44132: LD_VAR 0 3
44136: PPUSH
44137: LD_INT 0
44139: PPUSH
44140: CALL_OW 48
// end ;
44144: LD_VAR 0 5
44148: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44149: LD_INT 0
44151: PPUSH
44152: PPUSH
44153: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44154: LD_ADDR_VAR 0 2
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44177: LD_VAR 0 1
44181: NOT
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 264
44192: PUSH
44193: LD_INT 12
44195: PUSH
44196: LD_INT 51
44198: PUSH
44199: LD_INT 32
44201: PUSH
44202: LD_INT 89
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: IN
44211: NOT
44212: OR
44213: IFFALSE 44217
// exit ;
44215: GO 44315
// for i := 1 to 3 do
44217: LD_ADDR_VAR 0 3
44221: PUSH
44222: DOUBLE
44223: LD_INT 1
44225: DEC
44226: ST_TO_ADDR
44227: LD_INT 3
44229: PUSH
44230: FOR_TO
44231: IFFALSE 44313
// begin tmp := GetCargo ( cargo , i ) ;
44233: LD_ADDR_VAR 0 4
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: LD_VAR 0 3
44247: PPUSH
44248: CALL_OW 289
44252: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44253: LD_ADDR_VAR 0 2
44257: PUSH
44258: LD_VAR 0 2
44262: PPUSH
44263: LD_VAR 0 3
44267: PPUSH
44268: LD_VAR 0 4
44272: PPUSH
44273: CALL_OW 1
44277: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44278: LD_ADDR_VAR 0 2
44282: PUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: LD_INT 4
44290: PPUSH
44291: LD_VAR 0 2
44295: PUSH
44296: LD_INT 4
44298: ARRAY
44299: PUSH
44300: LD_VAR 0 4
44304: PLUS
44305: PPUSH
44306: CALL_OW 1
44310: ST_TO_ADDR
// end ;
44311: GO 44230
44313: POP
44314: POP
// end ;
44315: LD_VAR 0 2
44319: RET
// export function Length ( array ) ; begin
44320: LD_INT 0
44322: PPUSH
// result := array + 0 ;
44323: LD_ADDR_VAR 0 2
44327: PUSH
44328: LD_VAR 0 1
44332: PUSH
44333: LD_INT 0
44335: PLUS
44336: ST_TO_ADDR
// end ;
44337: LD_VAR 0 2
44341: RET
// export function PrepareArray ( array ) ; begin
44342: LD_INT 0
44344: PPUSH
// result := array diff 0 ;
44345: LD_ADDR_VAR 0 2
44349: PUSH
44350: LD_VAR 0 1
44354: PUSH
44355: LD_INT 0
44357: DIFF
44358: ST_TO_ADDR
// if not result [ 1 ] then
44359: LD_VAR 0 2
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: NOT
44368: IFFALSE 44388
// result := Delete ( result , 1 ) ;
44370: LD_ADDR_VAR 0 2
44374: PUSH
44375: LD_VAR 0 2
44379: PPUSH
44380: LD_INT 1
44382: PPUSH
44383: CALL_OW 3
44387: ST_TO_ADDR
// end ;
44388: LD_VAR 0 2
44392: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44393: LD_INT 0
44395: PPUSH
44396: PPUSH
44397: PPUSH
44398: PPUSH
// sibRocketRange := 25 ;
44399: LD_ADDR_VAR 0 6
44403: PUSH
44404: LD_INT 25
44406: ST_TO_ADDR
// result := false ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: LD_INT 0
44414: ST_TO_ADDR
// for i := 0 to 5 do
44415: LD_ADDR_VAR 0 5
44419: PUSH
44420: DOUBLE
44421: LD_INT 0
44423: DEC
44424: ST_TO_ADDR
44425: LD_INT 5
44427: PUSH
44428: FOR_TO
44429: IFFALSE 44496
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44431: LD_VAR 0 1
44435: PPUSH
44436: LD_VAR 0 5
44440: PPUSH
44441: LD_VAR 0 6
44445: PPUSH
44446: CALL_OW 272
44450: PPUSH
44451: LD_VAR 0 2
44455: PPUSH
44456: LD_VAR 0 5
44460: PPUSH
44461: LD_VAR 0 6
44465: PPUSH
44466: CALL_OW 273
44470: PPUSH
44471: LD_VAR 0 3
44475: PPUSH
44476: CALL_OW 309
44480: IFFALSE 44494
// begin result := true ;
44482: LD_ADDR_VAR 0 4
44486: PUSH
44487: LD_INT 1
44489: ST_TO_ADDR
// exit ;
44490: POP
44491: POP
44492: GO 44498
// end ;
44494: GO 44428
44496: POP
44497: POP
// end ;
44498: LD_VAR 0 4
44502: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44503: LD_INT 0
44505: PPUSH
44506: PPUSH
44507: PPUSH
// if btype = b_depot then
44508: LD_VAR 0 2
44512: PUSH
44513: LD_INT 0
44515: EQUAL
44516: IFFALSE 44528
// begin result := true ;
44518: LD_ADDR_VAR 0 3
44522: PUSH
44523: LD_INT 1
44525: ST_TO_ADDR
// exit ;
44526: GO 44644
// end ; pom := GetBase ( depot ) ;
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 274
44542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44543: LD_ADDR_VAR 0 5
44547: PUSH
44548: LD_VAR 0 2
44552: PPUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: CALL_OW 248
44562: PPUSH
44563: CALL_OW 450
44567: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44568: LD_ADDR_VAR 0 3
44572: PUSH
44573: LD_VAR 0 4
44577: PPUSH
44578: LD_INT 1
44580: PPUSH
44581: CALL_OW 275
44585: PUSH
44586: LD_VAR 0 5
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: GREATEREQUAL
44595: PUSH
44596: LD_VAR 0 4
44600: PPUSH
44601: LD_INT 2
44603: PPUSH
44604: CALL_OW 275
44608: PUSH
44609: LD_VAR 0 5
44613: PUSH
44614: LD_INT 2
44616: ARRAY
44617: GREATEREQUAL
44618: AND
44619: PUSH
44620: LD_VAR 0 4
44624: PPUSH
44625: LD_INT 3
44627: PPUSH
44628: CALL_OW 275
44632: PUSH
44633: LD_VAR 0 5
44637: PUSH
44638: LD_INT 3
44640: ARRAY
44641: GREATEREQUAL
44642: AND
44643: ST_TO_ADDR
// end ;
44644: LD_VAR 0 3
44648: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44649: LD_INT 0
44651: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44652: LD_VAR 0 1
44656: PPUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: LD_INT 0
44664: PPUSH
44665: LD_INT 0
44667: PPUSH
44668: LD_INT 1
44670: PPUSH
44671: LD_INT 0
44673: PPUSH
44674: CALL_OW 587
// end ;
44678: LD_VAR 0 3
44682: RET
// export function CenterOnNow ( unit ) ; begin
44683: LD_INT 0
44685: PPUSH
// result := IsInUnit ( unit ) ;
44686: LD_ADDR_VAR 0 2
44690: PUSH
44691: LD_VAR 0 1
44695: PPUSH
44696: CALL_OW 310
44700: ST_TO_ADDR
// if not result then
44701: LD_VAR 0 2
44705: NOT
44706: IFFALSE 44718
// result := unit ;
44708: LD_ADDR_VAR 0 2
44712: PUSH
44713: LD_VAR 0 1
44717: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 87
// end ;
44727: LD_VAR 0 2
44731: RET
// export function ComMoveHex ( unit , hex ) ; begin
44732: LD_INT 0
44734: PPUSH
// if not hex then
44735: LD_VAR 0 2
44739: NOT
44740: IFFALSE 44744
// exit ;
44742: GO 44797
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: PPUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_INT 2
44760: ARRAY
44761: PPUSH
44762: CALL_OW 428
44766: IFFALSE 44770
// exit ;
44768: GO 44797
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44770: LD_VAR 0 1
44774: PPUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_INT 1
44782: ARRAY
44783: PPUSH
44784: LD_VAR 0 2
44788: PUSH
44789: LD_INT 2
44791: ARRAY
44792: PPUSH
44793: CALL_OW 111
// end ;
44797: LD_VAR 0 3
44801: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44802: LD_INT 0
44804: PPUSH
44805: PPUSH
44806: PPUSH
// if not unit or not enemy then
44807: LD_VAR 0 1
44811: NOT
44812: PUSH
44813: LD_VAR 0 2
44817: NOT
44818: OR
44819: IFFALSE 44823
// exit ;
44821: GO 44947
// x := GetX ( enemy ) ;
44823: LD_ADDR_VAR 0 4
44827: PUSH
44828: LD_VAR 0 2
44832: PPUSH
44833: CALL_OW 250
44837: ST_TO_ADDR
// y := GetY ( enemy ) ;
44838: LD_ADDR_VAR 0 5
44842: PUSH
44843: LD_VAR 0 2
44847: PPUSH
44848: CALL_OW 251
44852: ST_TO_ADDR
// if ValidHex ( x , y ) then
44853: LD_VAR 0 4
44857: PPUSH
44858: LD_VAR 0 5
44862: PPUSH
44863: CALL_OW 488
44867: IFFALSE 44947
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44869: LD_VAR 0 2
44873: PPUSH
44874: CALL_OW 247
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: IN
44889: PUSH
44890: LD_VAR 0 1
44894: PPUSH
44895: CALL_OW 255
44899: PPUSH
44900: LD_VAR 0 2
44904: PPUSH
44905: CALL_OW 292
44909: OR
44910: IFFALSE 44928
// ComAttackUnit ( unit , enemy ) else
44912: LD_VAR 0 1
44916: PPUSH
44917: LD_VAR 0 2
44921: PPUSH
44922: CALL_OW 115
44926: GO 44947
// ComAgressiveMove ( unit , x , y ) ;
44928: LD_VAR 0 1
44932: PPUSH
44933: LD_VAR 0 4
44937: PPUSH
44938: LD_VAR 0 5
44942: PPUSH
44943: CALL_OW 114
// end ;
44947: LD_VAR 0 3
44951: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44952: LD_INT 0
44954: PPUSH
44955: PPUSH
44956: PPUSH
// list := AreaToList ( area , 0 ) ;
44957: LD_ADDR_VAR 0 5
44961: PUSH
44962: LD_VAR 0 1
44966: PPUSH
44967: LD_INT 0
44969: PPUSH
44970: CALL_OW 517
44974: ST_TO_ADDR
// if not list then
44975: LD_VAR 0 5
44979: NOT
44980: IFFALSE 44984
// exit ;
44982: GO 45114
// if all then
44984: LD_VAR 0 2
44988: IFFALSE 45076
// begin for i := 1 to list [ 1 ] do
44990: LD_ADDR_VAR 0 4
44994: PUSH
44995: DOUBLE
44996: LD_INT 1
44998: DEC
44999: ST_TO_ADDR
45000: LD_VAR 0 5
45004: PUSH
45005: LD_INT 1
45007: ARRAY
45008: PUSH
45009: FOR_TO
45010: IFFALSE 45072
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45012: LD_ADDR_VAR 0 3
45016: PUSH
45017: LD_VAR 0 3
45021: PPUSH
45022: LD_VAR 0 3
45026: PUSH
45027: LD_INT 1
45029: PLUS
45030: PPUSH
45031: LD_VAR 0 5
45035: PUSH
45036: LD_INT 1
45038: ARRAY
45039: PUSH
45040: LD_VAR 0 4
45044: ARRAY
45045: PUSH
45046: LD_VAR 0 5
45050: PUSH
45051: LD_INT 2
45053: ARRAY
45054: PUSH
45055: LD_VAR 0 4
45059: ARRAY
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PPUSH
45065: CALL_OW 1
45069: ST_TO_ADDR
45070: GO 45009
45072: POP
45073: POP
// exit ;
45074: GO 45114
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_VAR 0 5
45085: PUSH
45086: LD_INT 1
45088: ARRAY
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: PUSH
45094: LD_VAR 0 5
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: PUSH
45103: LD_INT 1
45105: ARRAY
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: ST_TO_ADDR
// end ;
45114: LD_VAR 0 3
45118: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45119: LD_INT 0
45121: PPUSH
45122: PPUSH
// list := AreaToList ( area , 0 ) ;
45123: LD_ADDR_VAR 0 4
45127: PUSH
45128: LD_VAR 0 1
45132: PPUSH
45133: LD_INT 0
45135: PPUSH
45136: CALL_OW 517
45140: ST_TO_ADDR
// if not list then
45141: LD_VAR 0 4
45145: NOT
45146: IFFALSE 45150
// exit ;
45148: GO 45191
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45150: LD_ADDR_VAR 0 3
45154: PUSH
45155: LD_VAR 0 4
45159: PUSH
45160: LD_INT 1
45162: ARRAY
45163: PUSH
45164: LD_INT 1
45166: ARRAY
45167: PUSH
45168: LD_VAR 0 4
45172: PUSH
45173: LD_INT 2
45175: ARRAY
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: PUSH
45181: LD_VAR 0 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// end ;
45191: LD_VAR 0 3
45195: RET
// export function First ( array ) ; begin
45196: LD_INT 0
45198: PPUSH
// if not array then
45199: LD_VAR 0 1
45203: NOT
45204: IFFALSE 45208
// exit ;
45206: GO 45222
// result := array [ 1 ] ;
45208: LD_ADDR_VAR 0 2
45212: PUSH
45213: LD_VAR 0 1
45217: PUSH
45218: LD_INT 1
45220: ARRAY
45221: ST_TO_ADDR
// end ;
45222: LD_VAR 0 2
45226: RET
// export function Last ( array ) ; begin
45227: LD_INT 0
45229: PPUSH
// if not array then
45230: LD_VAR 0 1
45234: NOT
45235: IFFALSE 45239
// exit ;
45237: GO 45255
// result := array [ array ] ;
45239: LD_ADDR_VAR 0 2
45243: PUSH
45244: LD_VAR 0 1
45248: PUSH
45249: LD_VAR 0 1
45253: ARRAY
45254: ST_TO_ADDR
// end ;
45255: LD_VAR 0 2
45259: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45260: LD_INT 0
45262: PPUSH
45263: PPUSH
// result := [ ] ;
45264: LD_ADDR_VAR 0 5
45268: PUSH
45269: EMPTY
45270: ST_TO_ADDR
// if not array then
45271: LD_VAR 0 1
45275: NOT
45276: IFFALSE 45280
// exit ;
45278: GO 45392
// for i := 1 to array do
45280: LD_ADDR_VAR 0 6
45284: PUSH
45285: DOUBLE
45286: LD_INT 1
45288: DEC
45289: ST_TO_ADDR
45290: LD_VAR 0 1
45294: PUSH
45295: FOR_TO
45296: IFFALSE 45390
// if array [ i ] [ index ] = value then
45298: LD_VAR 0 1
45302: PUSH
45303: LD_VAR 0 6
45307: ARRAY
45308: PUSH
45309: LD_VAR 0 2
45313: ARRAY
45314: PUSH
45315: LD_VAR 0 3
45319: EQUAL
45320: IFFALSE 45388
// begin if indexColumn then
45322: LD_VAR 0 4
45326: IFFALSE 45362
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45328: LD_ADDR_VAR 0 5
45332: PUSH
45333: LD_VAR 0 5
45337: PPUSH
45338: LD_VAR 0 1
45342: PUSH
45343: LD_VAR 0 6
45347: ARRAY
45348: PUSH
45349: LD_VAR 0 4
45353: ARRAY
45354: PPUSH
45355: CALL 40580 0 2
45359: ST_TO_ADDR
45360: GO 45388
// result := Join ( result , array [ i ] ) ;
45362: LD_ADDR_VAR 0 5
45366: PUSH
45367: LD_VAR 0 5
45371: PPUSH
45372: LD_VAR 0 1
45376: PUSH
45377: LD_VAR 0 6
45381: ARRAY
45382: PPUSH
45383: CALL 40580 0 2
45387: ST_TO_ADDR
// end ;
45388: GO 45295
45390: POP
45391: POP
// end ;
45392: LD_VAR 0 5
45396: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45397: LD_INT 0
45399: PPUSH
// if not vehicles or not parkingPoint then
45400: LD_VAR 0 1
45404: NOT
45405: PUSH
45406: LD_VAR 0 2
45410: NOT
45411: OR
45412: IFFALSE 45416
// exit ;
45414: GO 45514
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45416: LD_ADDR_VAR 0 1
45420: PUSH
45421: LD_VAR 0 1
45425: PPUSH
45426: LD_INT 50
45428: PUSH
45429: EMPTY
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 92
45437: PUSH
45438: LD_VAR 0 2
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: PUSH
45447: LD_VAR 0 2
45451: PUSH
45452: LD_INT 2
45454: ARRAY
45455: PUSH
45456: LD_INT 8
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PPUSH
45473: CALL_OW 72
45477: ST_TO_ADDR
// if not vehicles then
45478: LD_VAR 0 1
45482: NOT
45483: IFFALSE 45487
// exit ;
45485: GO 45514
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45487: LD_VAR 0 1
45491: PPUSH
45492: LD_VAR 0 2
45496: PUSH
45497: LD_INT 1
45499: ARRAY
45500: PPUSH
45501: LD_VAR 0 2
45505: PUSH
45506: LD_INT 2
45508: ARRAY
45509: PPUSH
45510: CALL_OW 111
// end ;
45514: LD_VAR 0 3
45518: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45519: LD_INT 0
45521: PPUSH
45522: PPUSH
45523: PPUSH
// if not side or not area then
45524: LD_VAR 0 1
45528: NOT
45529: PUSH
45530: LD_VAR 0 2
45534: NOT
45535: OR
45536: IFFALSE 45540
// exit ;
45538: GO 45659
// tmp := AreaToList ( area , 0 ) ;
45540: LD_ADDR_VAR 0 5
45544: PUSH
45545: LD_VAR 0 2
45549: PPUSH
45550: LD_INT 0
45552: PPUSH
45553: CALL_OW 517
45557: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45558: LD_ADDR_VAR 0 4
45562: PUSH
45563: DOUBLE
45564: LD_INT 1
45566: DEC
45567: ST_TO_ADDR
45568: LD_VAR 0 5
45572: PUSH
45573: LD_INT 1
45575: ARRAY
45576: PUSH
45577: FOR_TO
45578: IFFALSE 45657
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45580: LD_VAR 0 5
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: PUSH
45589: LD_VAR 0 4
45593: ARRAY
45594: PPUSH
45595: LD_VAR 0 5
45599: PUSH
45600: LD_INT 2
45602: ARRAY
45603: PUSH
45604: LD_VAR 0 4
45608: ARRAY
45609: PPUSH
45610: CALL_OW 351
45614: IFFALSE 45655
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45616: LD_VAR 0 5
45620: PUSH
45621: LD_INT 1
45623: ARRAY
45624: PUSH
45625: LD_VAR 0 4
45629: ARRAY
45630: PPUSH
45631: LD_VAR 0 5
45635: PUSH
45636: LD_INT 2
45638: ARRAY
45639: PUSH
45640: LD_VAR 0 4
45644: ARRAY
45645: PPUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: CALL_OW 244
// end ;
45655: GO 45577
45657: POP
45658: POP
// end ; end_of_file
45659: LD_VAR 0 3
45663: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull ; export function InitMultiplayer ; var i ; begin
45664: LD_INT 0
45666: PPUSH
45667: PPUSH
// disable ( mpActive ) ;
45668: LD_INT 100
45670: DISABLE_MARKED
// disable ( mpWin ) ;
45671: LD_INT 101
45673: DISABLE_MARKED
// disable ( mpLose ) ;
45674: LD_INT 102
45676: DISABLE_MARKED
// mpGameType := 0 ;
45677: LD_ADDR_EXP 1
45681: PUSH
45682: LD_INT 0
45684: ST_TO_ADDR
// mpGameSettings := [ ] ;
45685: LD_ADDR_EXP 4
45689: PUSH
45690: EMPTY
45691: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45692: LD_ADDR_EXP 2
45696: PUSH
45697: EMPTY
45698: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45699: LD_ADDR_EXP 3
45703: PUSH
45704: EMPTY
45705: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45706: LD_ADDR_EXP 27
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45721: LD_ADDR_EXP 10
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45728: LD_ADDR_EXP 11
45732: PUSH
45733: EMPTY
45734: ST_TO_ADDR
// mpDepots := [ ] ;
45735: LD_ADDR_EXP 12
45739: PUSH
45740: EMPTY
45741: ST_TO_ADDR
// mpBuildings := [ ] ;
45742: LD_ADDR_EXP 15
45746: PUSH
45747: EMPTY
45748: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45749: LD_ADDR_EXP 16
45753: PUSH
45754: EMPTY
45755: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45756: LD_ADDR_EXP 17
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45763: LD_ADDR_EXP 18
45767: PUSH
45768: EMPTY
45769: ST_TO_ADDR
// mpStartingResources := [ ] ;
45770: LD_ADDR_EXP 13
45774: PUSH
45775: EMPTY
45776: ST_TO_ADDR
// mpStartPos := [ ] ;
45777: LD_ADDR_EXP 19
45781: PUSH
45782: EMPTY
45783: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45784: LD_ADDR_EXP 20
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45793: LD_ADDR_EXP 21
45797: PUSH
45798: EMPTY
45799: ST_TO_ADDR
// mpApemans := [ ] ;
45800: LD_ADDR_EXP 28
45804: PUSH
45805: EMPTY
45806: ST_TO_ADDR
// mpApemansArea := [ ] ;
45807: LD_ADDR_EXP 29
45811: PUSH
45812: EMPTY
45813: ST_TO_ADDR
// mpRespawn := [ ] ;
45814: LD_ADDR_EXP 30
45818: PUSH
45819: EMPTY
45820: ST_TO_ADDR
// mpKingArea := 0 ;
45821: LD_ADDR_EXP 31
45825: PUSH
45826: LD_INT 0
45828: ST_TO_ADDR
// mpPoints := [ ] ;
45829: LD_ADDR_EXP 32
45833: PUSH
45834: EMPTY
45835: ST_TO_ADDR
// mpVehicles := 0 ;
45836: LD_ADDR_EXP 33
45840: PUSH
45841: LD_INT 0
45843: ST_TO_ADDR
// mpShipments := 0 ;
45844: LD_ADDR_EXP 25
45848: PUSH
45849: LD_INT 0
45851: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45852: LD_ADDR_EXP 37
45856: PUSH
45857: EMPTY
45858: PUSH
45859: EMPTY
45860: PUSH
45861: EMPTY
45862: PUSH
45863: EMPTY
45864: PUSH
45865: EMPTY
45866: PUSH
45867: EMPTY
45868: PUSH
45869: EMPTY
45870: PUSH
45871: EMPTY
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// mpEmissions := 0 ;
45883: LD_ADDR_EXP 34
45887: PUSH
45888: LD_INT 0
45890: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45891: LD_ADDR_EXP 23
45895: PUSH
45896: LD_INT 3
45898: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45899: LD_ADDR_EXP 22
45903: PUSH
45904: LD_INT 15
45906: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45907: LD_ADDR_EXP 35
45911: PUSH
45912: LD_INT 0
45914: ST_TO_ADDR
// mpGameActive := false ;
45915: LD_ADDR_EXP 36
45919: PUSH
45920: LD_INT 0
45922: ST_TO_ADDR
// for i := 1 to 32 do
45923: LD_ADDR_VAR 0 2
45927: PUSH
45928: DOUBLE
45929: LD_INT 1
45931: DEC
45932: ST_TO_ADDR
45933: LD_INT 32
45935: PUSH
45936: FOR_TO
45937: IFFALSE 45964
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45939: LD_ADDR_EXP 4
45943: PUSH
45944: LD_EXP 4
45948: PPUSH
45949: LD_VAR 0 2
45953: PPUSH
45954: LD_INT 0
45956: PPUSH
45957: CALL_OW 1
45961: ST_TO_ADDR
45962: GO 45936
45964: POP
45965: POP
// end ;
45966: LD_VAR 0 1
45970: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45971: LD_INT 0
45973: PPUSH
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45987: LD_ADDR_VAR 0 14
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// for i in gameTypes do
46006: LD_ADDR_VAR 0 2
46010: PUSH
46011: LD_VAR 0 14
46015: PUSH
46016: FOR_IN
46017: IFFALSE 46026
// disable ( i ) ;
46019: LD_VAR 0 2
46023: DISABLE_MARKED
46024: GO 46016
46026: POP
46027: POP
// if Multiplayer then
46028: LD_OWVAR 4
46032: IFFALSE 46216
// begin mpGameType := mp_game_type ;
46034: LD_ADDR_EXP 1
46038: PUSH
46039: LD_OWVAR 6
46043: ST_TO_ADDR
// your_side := mp_player_side ;
46044: LD_ADDR_OWVAR 2
46048: PUSH
46049: LD_OWVAR 7
46053: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46054: LD_ADDR_EXP 5
46058: PUSH
46059: LD_OWVAR 17
46063: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46064: LD_ADDR_EXP 6
46068: PUSH
46069: LD_OWVAR 15
46073: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46074: LD_ADDR_EXP 7
46078: PUSH
46079: LD_OWVAR 16
46083: ST_TO_ADDR
// mpTeams := mp_teams ;
46084: LD_ADDR_EXP 8
46088: PUSH
46089: LD_OWVAR 12
46093: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46094: LD_ADDR_VAR 0 2
46098: PUSH
46099: DOUBLE
46100: LD_INT 1
46102: DEC
46103: ST_TO_ADDR
46104: LD_EXP 2
46108: PPUSH
46109: CALL 4991 0 1
46113: PUSH
46114: FOR_TO
46115: IFFALSE 46191
// begin setting := mpGameSettingsKeys [ i ] ;
46117: LD_ADDR_VAR 0 12
46121: PUSH
46122: LD_EXP 2
46126: PUSH
46127: LD_VAR 0 2
46131: ARRAY
46132: ST_TO_ADDR
// if setting then
46133: LD_VAR 0 12
46137: IFFALSE 46189
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46139: LD_ADDR_EXP 4
46143: PUSH
46144: LD_EXP 4
46148: PPUSH
46149: LD_VAR 0 2
46153: PPUSH
46154: LD_EXP 3
46158: PUSH
46159: LD_VAR 0 2
46163: ARRAY
46164: PUSH
46165: LD_VAR 0 2
46169: PUSH
46170: LD_INT 1
46172: MINUS
46173: PPUSH
46174: CALL_OW 426
46178: PUSH
46179: LD_INT 1
46181: PLUS
46182: ARRAY
46183: PPUSH
46184: CALL_OW 1
46188: ST_TO_ADDR
// end ;
46189: GO 46114
46191: POP
46192: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46193: LD_ADDR_EXP 9
46197: PUSH
46198: LD_EXP 6
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: DIFF
46209: PUSH
46210: LD_INT 1
46212: GREATER
46213: ST_TO_ADDR
// end else
46214: GO 46216
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46216: LD_EXP 1
46220: PPUSH
46221: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46225: LD_EXP 16
46229: PPUSH
46230: CALL 4991 0 1
46234: IFFALSE 46265
// begin for i in mpMarkedAreas do
46236: LD_ADDR_VAR 0 2
46240: PUSH
46241: LD_EXP 16
46245: PUSH
46246: FOR_IN
46247: IFFALSE 46263
// SetAreaMapShow ( i , 0 ) ;
46249: LD_VAR 0 2
46253: PPUSH
46254: LD_INT 0
46256: PPUSH
46257: CALL_OW 424
46261: GO 46246
46263: POP
46264: POP
// end ; for i := 1 to 8 do
46265: LD_ADDR_VAR 0 2
46269: PUSH
46270: DOUBLE
46271: LD_INT 1
46273: DEC
46274: ST_TO_ADDR
46275: LD_INT 8
46277: PUSH
46278: FOR_TO
46279: IFFALSE 47495
// begin if not mpSidePositions [ i ] then
46281: LD_EXP 5
46285: PUSH
46286: LD_VAR 0 2
46290: ARRAY
46291: NOT
46292: IFFALSE 46296
// continue ;
46294: GO 46278
// side := i ;
46296: LD_ADDR_VAR 0 7
46300: PUSH
46301: LD_VAR 0 2
46305: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46306: LD_ADDR_VAR 0 9
46310: PUSH
46311: LD_EXP 7
46315: PUSH
46316: LD_VAR 0 2
46320: ARRAY
46321: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46322: LD_ADDR_VAR 0 8
46326: PUSH
46327: LD_EXP 5
46331: PUSH
46332: LD_VAR 0 2
46336: ARRAY
46337: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46338: LD_EXP 10
46342: PPUSH
46343: CALL 4991 0 1
46347: IFFALSE 46424
// begin for j in mpOilDeposits [ pos ] do
46349: LD_ADDR_VAR 0 3
46353: PUSH
46354: LD_EXP 10
46358: PUSH
46359: LD_VAR 0 8
46363: ARRAY
46364: PUSH
46365: FOR_IN
46366: IFFALSE 46422
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46368: LD_VAR 0 3
46372: PUSH
46373: LD_INT 1
46375: ARRAY
46376: PPUSH
46377: LD_VAR 0 3
46381: PUSH
46382: LD_INT 2
46384: ARRAY
46385: PPUSH
46386: LD_INT 2
46388: PPUSH
46389: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46393: LD_VAR 0 3
46397: PUSH
46398: LD_INT 1
46400: ARRAY
46401: PPUSH
46402: LD_VAR 0 3
46406: PUSH
46407: LD_INT 2
46409: ARRAY
46410: PPUSH
46411: LD_VAR 0 7
46415: PPUSH
46416: CALL_OW 441
// end ;
46420: GO 46365
46422: POP
46423: POP
// end ; if Count ( mpSibDeposits ) then
46424: LD_EXP 11
46428: PPUSH
46429: CALL 4991 0 1
46433: IFFALSE 46510
// begin for j in mpSibDeposits [ pos ] do
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_EXP 11
46444: PUSH
46445: LD_VAR 0 8
46449: ARRAY
46450: PUSH
46451: FOR_IN
46452: IFFALSE 46508
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46454: LD_VAR 0 3
46458: PUSH
46459: LD_INT 1
46461: ARRAY
46462: PPUSH
46463: LD_VAR 0 3
46467: PUSH
46468: LD_INT 2
46470: ARRAY
46471: PPUSH
46472: LD_INT 3
46474: PPUSH
46475: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46479: LD_VAR 0 3
46483: PUSH
46484: LD_INT 1
46486: ARRAY
46487: PPUSH
46488: LD_VAR 0 3
46492: PUSH
46493: LD_INT 2
46495: ARRAY
46496: PPUSH
46497: LD_VAR 0 7
46501: PPUSH
46502: CALL_OW 441
// end ;
46506: GO 46451
46508: POP
46509: POP
// end ; InitBc ;
46510: CALL_OW 21
// InitUc ;
46514: CALL_OW 18
// uc_side := side ;
46518: LD_ADDR_OWVAR 20
46522: PUSH
46523: LD_VAR 0 7
46527: ST_TO_ADDR
// uc_nation := nation ;
46528: LD_ADDR_OWVAR 21
46532: PUSH
46533: LD_VAR 0 9
46537: ST_TO_ADDR
// if Count ( mpDepots ) then
46538: LD_EXP 12
46542: PPUSH
46543: CALL 4991 0 1
46547: IFFALSE 46717
// begin bc_level := 0 ;
46549: LD_ADDR_OWVAR 43
46553: PUSH
46554: LD_INT 0
46556: ST_TO_ADDR
// bc_type := b_depot ;
46557: LD_ADDR_OWVAR 42
46561: PUSH
46562: LD_INT 0
46564: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46565: LD_ADDR_VAR 0 4
46569: PUSH
46570: LD_EXP 12
46574: PUSH
46575: LD_VAR 0 8
46579: ARRAY
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: PPUSH
46585: LD_EXP 12
46589: PUSH
46590: LD_VAR 0 8
46594: ARRAY
46595: PUSH
46596: LD_INT 2
46598: ARRAY
46599: PPUSH
46600: LD_EXP 12
46604: PUSH
46605: LD_VAR 0 8
46609: ARRAY
46610: PUSH
46611: LD_INT 3
46613: ARRAY
46614: PPUSH
46615: CALL_OW 47
46619: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46620: LD_VAR 0 4
46624: PPUSH
46625: LD_STRING @
46627: PUSH
46628: LD_VAR 0 7
46632: STR
46633: PPUSH
46634: CALL_OW 500
// SetTag ( b , side ) ;
46638: LD_VAR 0 4
46642: PPUSH
46643: LD_VAR 0 7
46647: PPUSH
46648: CALL_OW 109
// if Count ( mpStartingResources ) then
46652: LD_EXP 13
46656: PPUSH
46657: CALL 4991 0 1
46661: IFFALSE 46715
// begin for j := 1 to mpStartingResources do
46663: LD_ADDR_VAR 0 3
46667: PUSH
46668: DOUBLE
46669: LD_INT 1
46671: DEC
46672: ST_TO_ADDR
46673: LD_EXP 13
46677: PUSH
46678: FOR_TO
46679: IFFALSE 46713
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46681: LD_VAR 0 4
46685: PPUSH
46686: CALL_OW 274
46690: PPUSH
46691: LD_VAR 0 3
46695: PPUSH
46696: LD_EXP 13
46700: PUSH
46701: LD_VAR 0 3
46705: ARRAY
46706: PPUSH
46707: CALL_OW 277
46711: GO 46678
46713: POP
46714: POP
// end ; end else
46715: GO 46864
// if Count ( mpStartingResources ) then
46717: LD_EXP 13
46721: PPUSH
46722: CALL 4991 0 1
46726: IFFALSE 46864
// begin for j := 1 to mpStartingResources do
46728: LD_ADDR_VAR 0 3
46732: PUSH
46733: DOUBLE
46734: LD_INT 1
46736: DEC
46737: ST_TO_ADDR
46738: LD_EXP 13
46742: PUSH
46743: FOR_TO
46744: IFFALSE 46862
// begin resources := mpStartingResources [ j ] ;
46746: LD_ADDR_VAR 0 13
46750: PUSH
46751: LD_EXP 13
46755: PUSH
46756: LD_VAR 0 3
46760: ARRAY
46761: ST_TO_ADDR
// repeat if resources >= 50 then
46762: LD_VAR 0 13
46766: PUSH
46767: LD_INT 50
46769: GREATEREQUAL
46770: IFFALSE 46816
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46772: LD_VAR 0 3
46776: PPUSH
46777: LD_INT 5
46779: PPUSH
46780: LD_VAR 0 5
46784: PPUSH
46785: LD_VAR 0 6
46789: PPUSH
46790: LD_INT 4
46792: PPUSH
46793: LD_INT 0
46795: PPUSH
46796: CALL_OW 60
// resources := resources - 50 ;
46800: LD_ADDR_VAR 0 13
46804: PUSH
46805: LD_VAR 0 13
46809: PUSH
46810: LD_INT 50
46812: MINUS
46813: ST_TO_ADDR
// end else
46814: GO 46850
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46816: LD_VAR 0 3
46820: PPUSH
46821: LD_VAR 0 13
46825: PUSH
46826: LD_INT 10
46828: DIV
46829: PPUSH
46830: LD_VAR 0 5
46834: PPUSH
46835: LD_VAR 0 6
46839: PPUSH
46840: LD_INT 4
46842: PPUSH
46843: LD_INT 0
46845: PPUSH
46846: CALL_OW 60
// until resources <= 0 ;
46850: LD_VAR 0 13
46854: PUSH
46855: LD_INT 0
46857: LESSEQUAL
46858: IFFALSE 46762
// end ;
46860: GO 46743
46862: POP
46863: POP
// end ; if Count ( mpBuildings ) then
46864: LD_EXP 15
46868: PPUSH
46869: CALL 4991 0 1
46873: IFFALSE 46951
// begin for j in mpBuildings [ pos ] do
46875: LD_ADDR_VAR 0 3
46879: PUSH
46880: LD_EXP 15
46884: PUSH
46885: LD_VAR 0 8
46889: ARRAY
46890: PUSH
46891: FOR_IN
46892: IFFALSE 46949
// begin bc_level := 0 ;
46894: LD_ADDR_OWVAR 43
46898: PUSH
46899: LD_INT 0
46901: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_VAR 0 3
46911: PUSH
46912: LD_INT 1
46914: ARRAY
46915: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46916: LD_VAR 0 3
46920: PUSH
46921: LD_INT 2
46923: ARRAY
46924: PPUSH
46925: LD_VAR 0 3
46929: PUSH
46930: LD_INT 3
46932: ARRAY
46933: PPUSH
46934: LD_VAR 0 3
46938: PUSH
46939: LD_INT 4
46941: ARRAY
46942: PPUSH
46943: CALL_OW 47
// end ;
46947: GO 46891
46949: POP
46950: POP
// end ; if mpBattleFlag > - 1 then
46951: LD_EXP 20
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: GREATER
46960: IFFALSE 47119
// begin x := mpStartPos [ pos ] [ 1 ] ;
46962: LD_ADDR_VAR 0 5
46966: PUSH
46967: LD_EXP 19
46971: PUSH
46972: LD_VAR 0 8
46976: ARRAY
46977: PUSH
46978: LD_INT 1
46980: ARRAY
46981: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46982: LD_ADDR_VAR 0 6
46986: PUSH
46987: LD_EXP 19
46991: PUSH
46992: LD_VAR 0 8
46996: ARRAY
46997: PUSH
46998: LD_INT 2
47000: ARRAY
47001: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47002: LD_VAR 0 5
47006: PPUSH
47007: LD_VAR 0 6
47011: PPUSH
47012: LD_INT 12
47014: PPUSH
47015: LD_INT 2
47017: PPUSH
47018: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47022: LD_ADDR_EXP 21
47026: PUSH
47027: LD_EXP 21
47031: PPUSH
47032: LD_VAR 0 7
47036: PPUSH
47037: LD_VAR 0 7
47041: PPUSH
47042: LD_VAR 0 5
47046: PPUSH
47047: LD_VAR 0 6
47051: PPUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 100
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 70
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: LD_INT 40
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 10
47084: PUSH
47085: LD_INT 25
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 20
47094: PUSH
47095: LD_INT 100
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: PPUSH
47109: CALL_OW 418
47113: PPUSH
47114: CALL_OW 1
47118: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47119: LD_EXP 24
47123: PUSH
47124: LD_INT 20
47126: PPUSH
47127: LD_VAR 0 7
47131: PPUSH
47132: CALL_OW 321
47136: PUSH
47137: LD_INT 1
47139: EQUAL
47140: AND
47141: IFFALSE 47158
// SetTech ( tech_SibDet , side , state_researched ) ;
47143: LD_INT 20
47145: PPUSH
47146: LD_VAR 0 7
47150: PPUSH
47151: LD_INT 2
47153: PPUSH
47154: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47158: LD_INT 24
47160: PPUSH
47161: LD_VAR 0 7
47165: PPUSH
47166: LD_INT 0
47168: PPUSH
47169: CALL_OW 322
// if mpSibBomb = 1 then
47173: LD_EXP 26
47177: PUSH
47178: LD_INT 1
47180: EQUAL
47181: IFFALSE 47200
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47183: LD_INT 25
47185: PPUSH
47186: LD_VAR 0 7
47190: PPUSH
47191: LD_INT 1
47193: PPUSH
47194: CALL_OW 322
// end else
47198: GO 47215
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47200: LD_INT 25
47202: PPUSH
47203: LD_VAR 0 7
47207: PPUSH
47208: LD_INT 0
47210: PPUSH
47211: CALL_OW 322
// end ; if mpVehicles then
47215: LD_EXP 33
47219: IFFALSE 47318
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47221: LD_ADDR_VAR 0 3
47225: PUSH
47226: LD_VAR 0 7
47230: PPUSH
47231: LD_VAR 0 9
47235: PPUSH
47236: LD_EXP 33
47240: PPUSH
47241: CALL 48177 0 3
47245: PUSH
47246: FOR_IN
47247: IFFALSE 47316
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47249: LD_VAR 0 3
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: LD_INT 5
47259: PPUSH
47260: CALL_OW 12
47264: PPUSH
47265: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47269: LD_VAR 0 3
47273: PPUSH
47274: LD_EXP 19
47278: PUSH
47279: LD_VAR 0 8
47283: ARRAY
47284: PUSH
47285: LD_INT 1
47287: ARRAY
47288: PPUSH
47289: LD_EXP 19
47293: PUSH
47294: LD_VAR 0 8
47298: ARRAY
47299: PUSH
47300: LD_INT 2
47302: ARRAY
47303: PPUSH
47304: LD_INT 12
47306: PPUSH
47307: LD_INT 0
47309: PPUSH
47310: CALL_OW 50
// end ;
47314: GO 47246
47316: POP
47317: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47318: LD_ADDR_VAR 0 11
47322: PUSH
47323: LD_VAR 0 7
47327: PPUSH
47328: LD_VAR 0 9
47332: PPUSH
47333: LD_EXP 22
47337: PPUSH
47338: LD_EXP 23
47342: PPUSH
47343: CALL 47907 0 4
47347: ST_TO_ADDR
// for j in team do
47348: LD_ADDR_VAR 0 3
47352: PUSH
47353: LD_VAR 0 11
47357: PUSH
47358: FOR_IN
47359: IFFALSE 47408
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47361: LD_VAR 0 3
47365: PPUSH
47366: LD_EXP 19
47370: PUSH
47371: LD_VAR 0 8
47375: ARRAY
47376: PUSH
47377: LD_INT 1
47379: ARRAY
47380: PPUSH
47381: LD_EXP 19
47385: PUSH
47386: LD_VAR 0 8
47390: ARRAY
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: PPUSH
47396: LD_INT 12
47398: PPUSH
47399: LD_INT 0
47401: PPUSH
47402: CALL_OW 50
47406: GO 47358
47408: POP
47409: POP
// if mpApemans then
47410: LD_EXP 28
47414: IFFALSE 47493
// begin for j := 1 to mpApemans do
47416: LD_ADDR_VAR 0 3
47420: PUSH
47421: DOUBLE
47422: LD_INT 1
47424: DEC
47425: ST_TO_ADDR
47426: LD_EXP 28
47430: PUSH
47431: FOR_TO
47432: IFFALSE 47491
// begin PrepareApeman ( - 5 ) ;
47434: LD_INT 5
47436: NEG
47437: PPUSH
47438: CALL 36848 0 1
// ape := CreateHuman ;
47442: LD_ADDR_VAR 0 10
47446: PUSH
47447: CALL_OW 44
47451: ST_TO_ADDR
// SetTag ( ape , side ) ;
47452: LD_VAR 0 10
47456: PPUSH
47457: LD_VAR 0 7
47461: PPUSH
47462: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47466: LD_VAR 0 10
47470: PPUSH
47471: LD_EXP 29
47475: PUSH
47476: LD_VAR 0 8
47480: ARRAY
47481: PPUSH
47482: LD_INT 0
47484: PPUSH
47485: CALL_OW 49
// end ;
47489: GO 47431
47491: POP
47492: POP
// end ; end ;
47493: GO 46278
47495: POP
47496: POP
// if not mpTeamGame then
47497: LD_EXP 9
47501: NOT
47502: IFFALSE 47600
// begin for i := 1 to 8 do
47504: LD_ADDR_VAR 0 2
47508: PUSH
47509: DOUBLE
47510: LD_INT 1
47512: DEC
47513: ST_TO_ADDR
47514: LD_INT 8
47516: PUSH
47517: FOR_TO
47518: IFFALSE 47596
// for j := 1 to 8 do
47520: LD_ADDR_VAR 0 3
47524: PUSH
47525: DOUBLE
47526: LD_INT 1
47528: DEC
47529: ST_TO_ADDR
47530: LD_INT 8
47532: PUSH
47533: FOR_TO
47534: IFFALSE 47592
// if i <> j then
47536: LD_VAR 0 2
47540: PUSH
47541: LD_VAR 0 3
47545: NONEQUAL
47546: IFFALSE 47570
// SetAttitude ( i , j , att_neutral , true ) else
47548: LD_VAR 0 2
47552: PPUSH
47553: LD_VAR 0 3
47557: PPUSH
47558: LD_INT 0
47560: PPUSH
47561: LD_INT 1
47563: PPUSH
47564: CALL_OW 80
47568: GO 47590
// SetAttitude ( i , j , att_friend , true ) ;
47570: LD_VAR 0 2
47574: PPUSH
47575: LD_VAR 0 3
47579: PPUSH
47580: LD_INT 1
47582: PPUSH
47583: LD_INT 1
47585: PPUSH
47586: CALL_OW 80
47590: GO 47533
47592: POP
47593: POP
47594: GO 47517
47596: POP
47597: POP
// end else
47598: GO 47669
// begin if mpSharedVision then
47600: LD_EXP 14
47604: IFFALSE 47669
// begin for i in mpTeams do
47606: LD_ADDR_VAR 0 2
47610: PUSH
47611: LD_EXP 8
47615: PUSH
47616: FOR_IN
47617: IFFALSE 47667
// for j := 2 to i do
47619: LD_ADDR_VAR 0 3
47623: PUSH
47624: DOUBLE
47625: LD_INT 2
47627: DEC
47628: ST_TO_ADDR
47629: LD_VAR 0 2
47633: PUSH
47634: FOR_TO
47635: IFFALSE 47663
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47637: LD_VAR 0 2
47641: PUSH
47642: LD_VAR 0 3
47646: ARRAY
47647: PPUSH
47648: LD_VAR 0 2
47652: PUSH
47653: LD_INT 1
47655: ARRAY
47656: PPUSH
47657: CALL_OW 343
47661: GO 47634
47663: POP
47664: POP
47665: GO 47616
47667: POP
47668: POP
// end ; end ; for i := 1 to 8 do
47669: LD_ADDR_VAR 0 2
47673: PUSH
47674: DOUBLE
47675: LD_INT 1
47677: DEC
47678: ST_TO_ADDR
47679: LD_INT 8
47681: PUSH
47682: FOR_TO
47683: IFFALSE 47773
// for j := 1 to 8 do
47685: LD_ADDR_VAR 0 3
47689: PUSH
47690: DOUBLE
47691: LD_INT 1
47693: DEC
47694: ST_TO_ADDR
47695: LD_INT 8
47697: PUSH
47698: FOR_TO
47699: IFFALSE 47769
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47701: LD_EXP 6
47705: PUSH
47706: LD_VAR 0 2
47710: ARRAY
47711: PUSH
47712: LD_EXP 6
47716: PUSH
47717: LD_VAR 0 3
47721: ARRAY
47722: EQUAL
47723: IFFALSE 47747
// SetAttitude ( i , j , att_friend , true ) else
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_VAR 0 3
47734: PPUSH
47735: LD_INT 1
47737: PPUSH
47738: LD_INT 1
47740: PPUSH
47741: CALL_OW 80
47745: GO 47767
// SetAttitude ( i , j , att_enemy , true ) ;
47747: LD_VAR 0 2
47751: PPUSH
47752: LD_VAR 0 3
47756: PPUSH
47757: LD_INT 2
47759: PPUSH
47760: LD_INT 1
47762: PPUSH
47763: CALL_OW 80
47767: GO 47698
47769: POP
47770: POP
47771: GO 47682
47773: POP
47774: POP
// music_nat := mpSideNations [ your_side ] ;
47775: LD_ADDR_OWVAR 71
47779: PUSH
47780: LD_EXP 7
47784: PUSH
47785: LD_OWVAR 2
47789: ARRAY
47790: ST_TO_ADDR
// if IAmSpec then
47791: CALL_OW 531
47795: IFFALSE 47836
// begin FogOff ( true ) ;
47797: LD_INT 1
47799: PPUSH
47800: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47804: LD_EXP 27
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: PUSH
47813: LD_INT 2
47815: DIV
47816: PPUSH
47817: LD_EXP 27
47821: PUSH
47822: LD_INT 2
47824: ARRAY
47825: PUSH
47826: LD_INT 2
47828: DIV
47829: PPUSH
47830: CALL_OW 86
// end else
47834: GO 47882
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47836: LD_EXP 19
47840: PUSH
47841: LD_EXP 5
47845: PUSH
47846: LD_OWVAR 2
47850: ARRAY
47851: ARRAY
47852: PUSH
47853: LD_INT 1
47855: ARRAY
47856: PPUSH
47857: LD_EXP 19
47861: PUSH
47862: LD_EXP 5
47866: PUSH
47867: LD_OWVAR 2
47871: ARRAY
47872: ARRAY
47873: PUSH
47874: LD_INT 2
47876: ARRAY
47877: PPUSH
47878: CALL_OW 86
// end ; BeginBuildUp ;
47882: CALL 48655 0 0
// enable ( mpActive ) ;
47886: LD_INT 100
47888: ENABLE_MARKED
// enable ( mpGameType ) ;
47889: LD_EXP 1
47893: ENABLE_MARKED
// mpGameActive := true ;
47894: LD_ADDR_EXP 36
47898: PUSH
47899: LD_INT 1
47901: ST_TO_ADDR
// end ;
47902: LD_VAR 0 1
47906: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47907: LD_INT 0
47909: PPUSH
47910: PPUSH
47911: PPUSH
// result := [ ] ;
47912: LD_ADDR_VAR 0 5
47916: PUSH
47917: EMPTY
47918: ST_TO_ADDR
// class := class_soldier ;
47919: LD_ADDR_VAR 0 7
47923: PUSH
47924: LD_INT 1
47926: ST_TO_ADDR
// uc_side := side ;
47927: LD_ADDR_OWVAR 20
47931: PUSH
47932: LD_VAR 0 1
47936: ST_TO_ADDR
// uc_nation := nation ;
47937: LD_ADDR_OWVAR 21
47941: PUSH
47942: LD_VAR 0 2
47946: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47947: LD_ADDR_OWVAR 26
47951: PUSH
47952: LD_OWVAR 19
47956: PUSH
47957: LD_VAR 0 1
47961: ARRAY
47962: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47963: LD_INT 1
47965: PPUSH
47966: LD_INT 2
47968: PPUSH
47969: CALL_OW 12
47973: PPUSH
47974: LD_VAR 0 7
47978: PPUSH
47979: LD_VAR 0 4
47983: PUSH
47984: LD_INT 2
47986: PLUS
47987: PPUSH
47988: CALL_OW 380
// hc_importance := 105 ;
47992: LD_ADDR_OWVAR 32
47996: PUSH
47997: LD_INT 105
47999: ST_TO_ADDR
// if Multiplayer then
48000: LD_OWVAR 4
48004: IFFALSE 48044
// begin hc_gallery := MULTIAVATARS ;
48006: LD_ADDR_OWVAR 33
48010: PUSH
48011: LD_STRING MULTIAVATARS
48013: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48014: LD_ADDR_OWVAR 34
48018: PUSH
48019: LD_VAR 0 1
48023: PPUSH
48024: CALL_OW 525
48028: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48029: LD_ADDR_OWVAR 27
48033: PUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: CALL_OW 526
48043: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48044: LD_ADDR_VAR 0 5
48048: PUSH
48049: LD_VAR 0 5
48053: PPUSH
48054: CALL_OW 44
48058: PPUSH
48059: CALL 40580 0 2
48063: ST_TO_ADDR
// InitHc_All ( ) ;
48064: CALL_OW 584
// class := 2 ;
48068: LD_ADDR_VAR 0 7
48072: PUSH
48073: LD_INT 2
48075: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48076: LD_ADDR_VAR 0 6
48080: PUSH
48081: DOUBLE
48082: LD_INT 1
48084: DEC
48085: ST_TO_ADDR
48086: LD_VAR 0 3
48090: PUSH
48091: LD_INT 1
48093: MINUS
48094: PUSH
48095: FOR_TO
48096: IFFALSE 48170
// begin PrepareHuman ( false , class , skill ) ;
48098: LD_INT 0
48100: PPUSH
48101: LD_VAR 0 7
48105: PPUSH
48106: LD_VAR 0 4
48110: PPUSH
48111: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48115: LD_ADDR_VAR 0 5
48119: PUSH
48120: LD_VAR 0 5
48124: PPUSH
48125: CALL_OW 44
48129: PPUSH
48130: CALL 40580 0 2
48134: ST_TO_ADDR
// class := Inc ( class ) ;
48135: LD_ADDR_VAR 0 7
48139: PUSH
48140: LD_VAR 0 7
48144: PPUSH
48145: CALL 41941 0 1
48149: ST_TO_ADDR
// if class = 5 then
48150: LD_VAR 0 7
48154: PUSH
48155: LD_INT 5
48157: EQUAL
48158: IFFALSE 48168
// class := 1 ;
48160: LD_ADDR_VAR 0 7
48164: PUSH
48165: LD_INT 1
48167: ST_TO_ADDR
// end ;
48168: GO 48095
48170: POP
48171: POP
// end ;
48172: LD_VAR 0 5
48176: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48177: LD_INT 0
48179: PPUSH
48180: PPUSH
// result := [ ] ;
48181: LD_ADDR_VAR 0 4
48185: PUSH
48186: EMPTY
48187: ST_TO_ADDR
// if not vehicles then
48188: LD_VAR 0 3
48192: NOT
48193: IFFALSE 48197
// exit ;
48195: GO 48356
// for i := 1 to vehicles [ nation ] do
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: DOUBLE
48203: LD_INT 1
48205: DEC
48206: ST_TO_ADDR
48207: LD_VAR 0 3
48211: PUSH
48212: LD_VAR 0 2
48216: ARRAY
48217: PUSH
48218: FOR_TO
48219: IFFALSE 48354
// begin uc_side := side ;
48221: LD_ADDR_OWVAR 20
48225: PUSH
48226: LD_VAR 0 1
48230: ST_TO_ADDR
// uc_nation := nation ;
48231: LD_ADDR_OWVAR 21
48235: PUSH
48236: LD_VAR 0 2
48240: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48241: LD_VAR 0 3
48245: PUSH
48246: LD_VAR 0 2
48250: ARRAY
48251: PUSH
48252: LD_VAR 0 5
48256: ARRAY
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: PPUSH
48262: LD_VAR 0 3
48266: PUSH
48267: LD_VAR 0 2
48271: ARRAY
48272: PUSH
48273: LD_VAR 0 5
48277: ARRAY
48278: PUSH
48279: LD_INT 2
48281: ARRAY
48282: PPUSH
48283: LD_VAR 0 3
48287: PUSH
48288: LD_VAR 0 2
48292: ARRAY
48293: PUSH
48294: LD_VAR 0 5
48298: ARRAY
48299: PUSH
48300: LD_INT 3
48302: ARRAY
48303: PPUSH
48304: LD_VAR 0 3
48308: PUSH
48309: LD_VAR 0 2
48313: ARRAY
48314: PUSH
48315: LD_VAR 0 5
48319: ARRAY
48320: PUSH
48321: LD_INT 4
48323: ARRAY
48324: PPUSH
48325: LD_INT 80
48327: PPUSH
48328: CALL 7729 0 5
// result := Join ( result , CreateVehicle ) ;
48332: LD_ADDR_VAR 0 4
48336: PUSH
48337: LD_VAR 0 4
48341: PPUSH
48342: CALL_OW 45
48346: PPUSH
48347: CALL 40580 0 2
48351: ST_TO_ADDR
// end ;
48352: GO 48218
48354: POP
48355: POP
// end ;
48356: LD_VAR 0 4
48360: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48361: LD_INT 0
48363: PPUSH
48364: PPUSH
// for i in mpBattleFlags do
48365: LD_ADDR_VAR 0 3
48369: PUSH
48370: LD_EXP 21
48374: PUSH
48375: FOR_IN
48376: IFFALSE 48453
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48378: LD_VAR 0 3
48382: PPUSH
48383: LD_INT 1
48385: PUSH
48386: LD_VAR 0 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_VAR 0 1
48402: PUSH
48403: LD_REAL  7.00000000000000E-0001
48406: MUL
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: LD_VAR 0 1
48419: PUSH
48420: LD_REAL  4.00000000000000E-0001
48423: MUL
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 20
48431: PUSH
48432: LD_VAR 0 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: PPUSH
48447: CALL_OW 423
48451: GO 48375
48453: POP
48454: POP
// end ;
48455: LD_VAR 0 2
48459: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48460: LD_INT 100
48462: IFFALSE 48557
48464: GO 48466
48466: DISABLE
48467: LD_INT 0
48469: PPUSH
48470: PPUSH
// begin if mpBattleFlag <= 0 then
48471: LD_EXP 20
48475: PUSH
48476: LD_INT 0
48478: LESSEQUAL
48479: IFFALSE 48483
// exit ;
48481: GO 48557
// strength := 100 ;
48483: LD_ADDR_VAR 0 2
48487: PUSH
48488: LD_INT 100
48490: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48491: LD_EXP 20
48495: PPUSH
48496: CALL_OW 67
// strength := Dec ( strength ) ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_VAR 0 2
48509: PPUSH
48510: CALL 41963 0 1
48514: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48515: LD_VAR 0 2
48519: PPUSH
48520: CALL 48361 0 1
// until not strength ;
48524: LD_VAR 0 2
48528: NOT
48529: IFFALSE 48491
// for i in mpBattleFlags do
48531: LD_ADDR_VAR 0 1
48535: PUSH
48536: LD_EXP 21
48540: PUSH
48541: FOR_IN
48542: IFFALSE 48555
// KillBattleFlag ( i ) ;
48544: LD_VAR 0 1
48548: PPUSH
48549: CALL_OW 419
48553: GO 48541
48555: POP
48556: POP
// end ;
48557: PPOPN 2
48559: END
// every 0 0$1 marked mpActive do var side , tmp ;
48560: GO 48562
48562: DISABLE
48563: LD_INT 0
48565: PPUSH
48566: PPUSH
// begin if mpSibBomb <= 1 then
48567: LD_EXP 26
48571: PUSH
48572: LD_INT 1
48574: LESSEQUAL
48575: IFFALSE 48579
// exit ;
48577: GO 48652
// tmp := mpSibBomb ;
48579: LD_ADDR_VAR 0 2
48583: PUSH
48584: LD_EXP 26
48588: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48589: LD_INT 35
48591: PPUSH
48592: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48596: LD_ADDR_VAR 0 2
48600: PUSH
48601: LD_VAR 0 2
48605: PUSH
48606: LD_INT 35
48608: MINUS
48609: ST_TO_ADDR
// until not tmp ;
48610: LD_VAR 0 2
48614: NOT
48615: IFFALSE 48589
// for side := 1 to 8 do
48617: LD_ADDR_VAR 0 1
48621: PUSH
48622: DOUBLE
48623: LD_INT 1
48625: DEC
48626: ST_TO_ADDR
48627: LD_INT 8
48629: PUSH
48630: FOR_TO
48631: IFFALSE 48650
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48633: LD_INT 25
48635: PPUSH
48636: LD_VAR 0 1
48640: PPUSH
48641: LD_INT 1
48643: PPUSH
48644: CALL_OW 322
48648: GO 48630
48650: POP
48651: POP
// end ;
48652: PPOPN 2
48654: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48655: LD_INT 0
48657: PPUSH
48658: PPUSH
48659: PPUSH
// mpBuildUpTimeDelay := 0 ;
48660: LD_ADDR_EXP 38
48664: PUSH
48665: LD_INT 0
48667: ST_TO_ADDR
// if not mpBuildUpTime then
48668: LD_EXP 18
48672: NOT
48673: IFFALSE 48677
// exit ;
48675: GO 48860
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48677: LD_ADDR_EXP 38
48681: PUSH
48682: LD_INT 8400
48684: PUSH
48685: LD_INT 2100
48687: PUSH
48688: LD_EXP 18
48692: MUL
48693: PLUS
48694: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48695: LD_ADDR_EXP 39
48699: PUSH
48700: LD_INT 1
48702: ST_TO_ADDR
// for i := 1 to 8 do
48703: LD_ADDR_VAR 0 2
48707: PUSH
48708: DOUBLE
48709: LD_INT 1
48711: DEC
48712: ST_TO_ADDR
48713: LD_INT 8
48715: PUSH
48716: FOR_TO
48717: IFFALSE 48858
// if mpSidePositions [ i ] then
48719: LD_EXP 5
48723: PUSH
48724: LD_VAR 0 2
48728: ARRAY
48729: IFFALSE 48856
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48731: LD_EXP 17
48735: PUSH
48736: LD_EXP 5
48740: PUSH
48741: LD_VAR 0 2
48745: ARRAY
48746: ARRAY
48747: PPUSH
48748: LD_INT 5
48750: PPUSH
48751: CALL_OW 424
// for j := 1 to 8 do
48755: LD_ADDR_VAR 0 3
48759: PUSH
48760: DOUBLE
48761: LD_INT 1
48763: DEC
48764: ST_TO_ADDR
48765: LD_INT 8
48767: PUSH
48768: FOR_TO
48769: IFFALSE 48854
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48771: LD_EXP 5
48775: PUSH
48776: LD_VAR 0 3
48780: ARRAY
48781: PUSH
48782: LD_EXP 6
48786: PUSH
48787: LD_VAR 0 2
48791: ARRAY
48792: PUSH
48793: LD_EXP 6
48797: PUSH
48798: LD_VAR 0 3
48802: ARRAY
48803: NONEQUAL
48804: PUSH
48805: LD_EXP 9
48809: NOT
48810: PUSH
48811: LD_VAR 0 2
48815: PUSH
48816: LD_VAR 0 3
48820: NONEQUAL
48821: AND
48822: OR
48823: AND
48824: IFFALSE 48852
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48826: LD_VAR 0 3
48830: PPUSH
48831: LD_EXP 17
48835: PUSH
48836: LD_EXP 5
48840: PUSH
48841: LD_VAR 0 2
48845: ARRAY
48846: ARRAY
48847: PPUSH
48848: CALL_OW 333
48852: GO 48768
48854: POP
48855: POP
// end ;
48856: GO 48716
48858: POP
48859: POP
// end ;
48860: LD_VAR 0 1
48864: RET
// function EndBuildUp ; var i , j ; begin
48865: LD_INT 0
48867: PPUSH
48868: PPUSH
48869: PPUSH
// mpBuildUpTimeActive := false ;
48870: LD_ADDR_EXP 39
48874: PUSH
48875: LD_INT 0
48877: ST_TO_ADDR
// for i := 1 to 8 do
48878: LD_ADDR_VAR 0 2
48882: PUSH
48883: DOUBLE
48884: LD_INT 1
48886: DEC
48887: ST_TO_ADDR
48888: LD_INT 8
48890: PUSH
48891: FOR_TO
48892: IFFALSE 49033
// if mpSidePositions [ i ] then
48894: LD_EXP 5
48898: PUSH
48899: LD_VAR 0 2
48903: ARRAY
48904: IFFALSE 49031
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48906: LD_EXP 17
48910: PUSH
48911: LD_EXP 5
48915: PUSH
48916: LD_VAR 0 2
48920: ARRAY
48921: ARRAY
48922: PPUSH
48923: LD_INT 0
48925: PPUSH
48926: CALL_OW 424
// for j := 1 to 8 do
48930: LD_ADDR_VAR 0 3
48934: PUSH
48935: DOUBLE
48936: LD_INT 1
48938: DEC
48939: ST_TO_ADDR
48940: LD_INT 8
48942: PUSH
48943: FOR_TO
48944: IFFALSE 49029
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48946: LD_EXP 5
48950: PUSH
48951: LD_VAR 0 3
48955: ARRAY
48956: PUSH
48957: LD_EXP 6
48961: PUSH
48962: LD_VAR 0 2
48966: ARRAY
48967: PUSH
48968: LD_EXP 6
48972: PUSH
48973: LD_VAR 0 3
48977: ARRAY
48978: NONEQUAL
48979: PUSH
48980: LD_EXP 9
48984: NOT
48985: PUSH
48986: LD_VAR 0 2
48990: PUSH
48991: LD_VAR 0 3
48995: NONEQUAL
48996: AND
48997: OR
48998: AND
48999: IFFALSE 49027
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49001: LD_VAR 0 3
49005: PPUSH
49006: LD_EXP 17
49010: PUSH
49011: LD_EXP 5
49015: PUSH
49016: LD_VAR 0 2
49020: ARRAY
49021: ARRAY
49022: PPUSH
49023: CALL_OW 334
49027: GO 48943
49029: POP
49030: POP
// end ;
49031: GO 48891
49033: POP
49034: POP
// end ;
49035: LD_VAR 0 1
49039: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49040: LD_EXP 39
49044: IFFALSE 49219
49046: GO 49048
49048: DISABLE
49049: LD_INT 0
49051: PPUSH
49052: PPUSH
// begin for i := 1 to 8 do
49053: LD_ADDR_VAR 0 1
49057: PUSH
49058: DOUBLE
49059: LD_INT 1
49061: DEC
49062: ST_TO_ADDR
49063: LD_INT 8
49065: PUSH
49066: FOR_TO
49067: IFFALSE 49216
// if mpSidePositions [ i ] then
49069: LD_EXP 5
49073: PUSH
49074: LD_VAR 0 1
49078: ARRAY
49079: IFFALSE 49214
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49081: LD_ADDR_VAR 0 2
49085: PUSH
49086: LD_EXP 17
49090: PUSH
49091: LD_EXP 5
49095: PUSH
49096: LD_VAR 0 1
49100: ARRAY
49101: ARRAY
49102: PPUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 21
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 21
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 22
49133: PUSH
49134: LD_OWVAR 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PPUSH
49147: CALL_OW 70
49151: PUSH
49152: FOR_IN
49153: IFFALSE 49212
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49155: LD_EXP 6
49159: PUSH
49160: LD_VAR 0 1
49164: ARRAY
49165: PUSH
49166: LD_EXP 6
49170: PUSH
49171: LD_OWVAR 2
49175: ARRAY
49176: NONEQUAL
49177: PUSH
49178: LD_EXP 9
49182: NOT
49183: PUSH
49184: LD_VAR 0 1
49188: PUSH
49189: LD_OWVAR 2
49193: NONEQUAL
49194: AND
49195: OR
49196: IFFALSE 49210
// ComMoveToArea ( un , BuildUpEscape ) ;
49198: LD_VAR 0 2
49202: PPUSH
49203: LD_INT 17
49205: PPUSH
49206: CALL_OW 113
49210: GO 49152
49212: POP
49213: POP
49214: GO 49066
49216: POP
49217: POP
// enable ;
49218: ENABLE
// end ;
49219: PPOPN 2
49221: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49222: LD_EXP 18
49226: IFFALSE 49276
49228: GO 49230
49230: DISABLE
49231: LD_INT 0
49233: PPUSH
// begin tmp := mpBuildUpTime ;
49234: LD_ADDR_VAR 0 1
49238: PUSH
49239: LD_EXP 18
49243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49244: LD_INT 35
49246: PPUSH
49247: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49251: LD_ADDR_VAR 0 1
49255: PUSH
49256: LD_VAR 0 1
49260: PUSH
49261: LD_INT 35
49263: MINUS
49264: ST_TO_ADDR
// until not tmp ;
49265: LD_VAR 0 1
49269: NOT
49270: IFFALSE 49244
// EndBuildUp ;
49272: CALL 48865 0 0
// end ;
49276: PPOPN 1
49278: END
// every 0 0$1 trigger mpActive marked mpWin do
49279: LD_INT 100
49281: IFFALSE 49315
49283: GO 49285
49285: DISABLE
// begin if IAmServer then
49286: CALL_OW 518
49290: IFFALSE 49299
// wait ( 0 0$3 ) ;
49292: LD_INT 105
49294: PPUSH
49295: CALL_OW 67
// if Multiplayer then
49299: LD_OWVAR 4
49303: IFFALSE 49311
// YouWinInMultiplayer else
49305: CALL_OW 106
49309: GO 49315
// YouWin ;
49311: CALL_OW 103
// end ;
49315: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49316: LD_INT 0
49318: PPUSH
// result := false ;
49319: LD_ADDR_VAR 0 3
49323: PUSH
49324: LD_INT 0
49326: ST_TO_ADDR
// case gameType of GameTypeNormal :
49327: LD_VAR 0 1
49331: PUSH
49332: LD_INT 1
49334: DOUBLE
49335: EQUAL
49336: IFTRUE 49340
49338: GO 49413
49340: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49341: LD_ADDR_VAR 0 3
49345: PUSH
49346: LD_INT 22
49348: PUSH
49349: LD_VAR 0 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 21
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 33
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 33
49383: PUSH
49384: LD_INT 5
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 69
49405: PPUSH
49406: CALL 4991 0 1
49410: ST_TO_ADDR
// end ; GameTypeSurvival :
49411: GO 49648
49413: LD_INT 2
49415: DOUBLE
49416: EQUAL
49417: IFTRUE 49421
49419: GO 49549
49421: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_INT 22
49429: PUSH
49430: LD_VAR 0 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 30
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 30
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PPUSH
49471: CALL_OW 69
49475: PPUSH
49476: CALL 4991 0 1
49480: PUSH
49481: LD_INT 22
49483: PUSH
49484: LD_VAR 0 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 21
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 33
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 33
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PPUSH
49536: CALL_OW 69
49540: PPUSH
49541: CALL 4991 0 1
49545: AND
49546: ST_TO_ADDR
// end ; GameTypeKing :
49547: GO 49648
49549: LD_INT 3
49551: DOUBLE
49552: EQUAL
49553: IFTRUE 49557
49555: GO 49647
49557: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49558: LD_ADDR_VAR 0 3
49562: PUSH
49563: LD_INT 22
49565: PUSH
49566: LD_VAR 0 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 21
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 33
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 33
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PPUSH
49618: CALL_OW 69
49622: PPUSH
49623: CALL 4991 0 1
49627: PUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: CALL 52668 0 1
49637: PUSH
49638: LD_EXP 32
49642: LESS
49643: AND
49644: ST_TO_ADDR
// end ; end ;
49645: GO 49648
49647: POP
// end ;
49648: LD_VAR 0 3
49652: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49653: LD_INT 100
49655: IFFALSE 49877
49657: GO 49659
49659: DISABLE
49660: LD_INT 0
49662: PPUSH
49663: PPUSH
// begin if Multiplayer then
49664: LD_OWVAR 4
49668: IFFALSE 49676
// SetPlayerSpectator ( ) else
49670: CALL_OW 572
49674: GO 49685
// FogOff ( your_side ) ;
49676: LD_OWVAR 2
49680: PPUSH
49681: CALL_OW 344
// repeat gameIsOn := false ;
49685: LD_ADDR_VAR 0 1
49689: PUSH
49690: LD_INT 0
49692: ST_TO_ADDR
// for i := 1 to 8 do
49693: LD_ADDR_VAR 0 2
49697: PUSH
49698: DOUBLE
49699: LD_INT 1
49701: DEC
49702: ST_TO_ADDR
49703: LD_INT 8
49705: PUSH
49706: FOR_TO
49707: IFFALSE 49829
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49709: LD_EXP 5
49713: PUSH
49714: LD_VAR 0 2
49718: ARRAY
49719: PUSH
49720: LD_VAR 0 2
49724: PPUSH
49725: CALL_OW 108
49729: AND
49730: PUSH
49731: LD_VAR 0 2
49735: PUSH
49736: LD_OWVAR 2
49740: NONEQUAL
49741: AND
49742: IFFALSE 49827
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49744: LD_EXP 6
49748: PUSH
49749: LD_VAR 0 2
49753: ARRAY
49754: NOT
49755: PUSH
49756: LD_EXP 6
49760: PUSH
49761: LD_VAR 0 2
49765: ARRAY
49766: PUSH
49767: LD_EXP 6
49771: PUSH
49772: LD_OWVAR 2
49776: ARRAY
49777: NONEQUAL
49778: PUSH
49779: LD_OWVAR 2
49783: PPUSH
49784: LD_VAR 0 2
49788: PPUSH
49789: CALL_OW 81
49793: PUSH
49794: LD_INT 1
49796: NONEQUAL
49797: AND
49798: OR
49799: IFFALSE 49827
// if HasPowerByGameType ( mpGameType , i ) then
49801: LD_EXP 1
49805: PPUSH
49806: LD_VAR 0 2
49810: PPUSH
49811: CALL 49316 0 2
49815: IFFALSE 49827
// begin gameIsOn := true ;
49817: LD_ADDR_VAR 0 1
49821: PUSH
49822: LD_INT 1
49824: ST_TO_ADDR
// break ;
49825: GO 49829
// end ;
49827: GO 49706
49829: POP
49830: POP
// wait ( 100 ) ;
49831: LD_INT 100
49833: PPUSH
49834: CALL_OW 67
// until not gameIsOn ;
49838: LD_VAR 0 1
49842: NOT
49843: IFFALSE 49685
// if IAmServer then
49845: CALL_OW 518
49849: IFFALSE 49858
// wait ( 0 0$3 ) ;
49851: LD_INT 105
49853: PPUSH
49854: CALL_OW 67
// if Multiplayer then
49858: LD_OWVAR 4
49862: IFFALSE 49870
// YouLostInMultiplayer else
49864: CALL_OW 107
49868: GO 49877
// YouLost (  ) ;
49870: LD_STRING 
49872: PPUSH
49873: CALL_OW 104
// end ;
49877: PPOPN 2
49879: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49880: LD_EXP 30
49884: IFFALSE 50222
49886: GO 49888
49888: DISABLE
49889: LD_INT 0
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49896: LD_ADDR_VAR 0 5
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 6
49918: PUSH
49919: LD_INT 7
49921: PUSH
49922: LD_INT 8
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
49935: LD_INT 1050
49937: PPUSH
49938: CALL_OW 67
// for i := 1 to 8 do
49942: LD_ADDR_VAR 0 1
49946: PUSH
49947: DOUBLE
49948: LD_INT 1
49950: DEC
49951: ST_TO_ADDR
49952: LD_INT 8
49954: PUSH
49955: FOR_TO
49956: IFFALSE 50201
// begin j := sides [ i ] ;
49958: LD_ADDR_VAR 0 2
49962: PUSH
49963: LD_VAR 0 5
49967: PUSH
49968: LD_VAR 0 1
49972: ARRAY
49973: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
49974: LD_EXP 37
49978: PUSH
49979: LD_VAR 0 2
49983: ARRAY
49984: PPUSH
49985: CALL 4991 0 1
49989: PUSH
49990: LD_VAR 0 2
49994: PPUSH
49995: CALL_OW 108
49999: AND
50000: PUSH
50001: LD_EXP 1
50005: PPUSH
50006: LD_VAR 0 2
50010: PPUSH
50011: CALL 49316 0 2
50015: AND
50016: IFFALSE 50199
// begin wait ( mpRespawn div 2 ) ;
50018: LD_EXP 30
50022: PUSH
50023: LD_INT 2
50025: DIV
50026: PPUSH
50027: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50031: LD_ADDR_VAR 0 3
50035: PUSH
50036: LD_INT 22
50038: PUSH
50039: LD_VAR 0 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 50
50050: PUSH
50051: EMPTY
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 30
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 30
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: PPUSH
50087: CALL_OW 69
50091: ST_TO_ADDR
// if not tmp then
50092: LD_VAR 0 3
50096: NOT
50097: IFFALSE 50101
// continue ;
50099: GO 49955
// spawn := tmp [ 1 ] ;
50101: LD_ADDR_VAR 0 4
50105: PUSH
50106: LD_VAR 0 3
50110: PUSH
50111: LD_INT 1
50113: ARRAY
50114: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50115: LD_EXP 37
50119: PUSH
50120: LD_VAR 0 2
50124: ARRAY
50125: PUSH
50126: LD_INT 1
50128: ARRAY
50129: PPUSH
50130: LD_VAR 0 4
50134: PPUSH
50135: CALL_OW 250
50139: PPUSH
50140: LD_VAR 0 4
50144: PPUSH
50145: CALL_OW 251
50149: PPUSH
50150: LD_INT 32
50152: PPUSH
50153: LD_INT 1
50155: PPUSH
50156: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50160: LD_ADDR_EXP 37
50164: PUSH
50165: LD_EXP 37
50169: PPUSH
50170: LD_VAR 0 2
50174: PPUSH
50175: LD_EXP 37
50179: PUSH
50180: LD_VAR 0 2
50184: ARRAY
50185: PPUSH
50186: LD_INT 1
50188: PPUSH
50189: CALL_OW 3
50193: PPUSH
50194: CALL_OW 1
50198: ST_TO_ADDR
// end ; end ;
50199: GO 49955
50201: POP
50202: POP
// sides := Shuffle ( sides ) ;
50203: LD_ADDR_VAR 0 5
50207: PUSH
50208: LD_VAR 0 5
50212: PPUSH
50213: CALL 40685 0 1
50217: ST_TO_ADDR
// until false ;
50218: LD_INT 0
50220: IFFALSE 49935
// end ;
50222: PPOPN 5
50224: END
// every 0 0$1 marked mpActive do
50225: GO 50227
50227: DISABLE
// begin enable ;
50228: ENABLE
// if not mpDisplayStrings then
50229: LD_EXP 35
50233: NOT
50234: IFFALSE 50245
// begin display_strings := [ ] ;
50236: LD_ADDR_OWVAR 47
50240: PUSH
50241: EMPTY
50242: ST_TO_ADDR
// exit ;
50243: GO 50255
// end ; display_strings := mpDisplayStrings ;
50245: LD_ADDR_OWVAR 47
50249: PUSH
50250: LD_EXP 35
50254: ST_TO_ADDR
// end ; end_of_file
50255: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50256: LD_INT 0
50258: PPUSH
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
// if GetType ( un ) = unit_vehicle then
50267: LD_VAR 0 1
50271: PPUSH
50272: CALL_OW 247
50276: PUSH
50277: LD_INT 2
50279: EQUAL
50280: IFFALSE 50284
// exit ;
50282: GO 50750
// side := GetSide ( un ) ;
50284: LD_ADDR_VAR 0 9
50288: PUSH
50289: LD_VAR 0 1
50293: PPUSH
50294: CALL_OW 255
50298: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50299: LD_EXP 1
50303: PUSH
50304: LD_INT 2
50306: EQUAL
50307: IFFALSE 50400
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50309: LD_VAR 0 1
50313: PPUSH
50314: CALL_OW 266
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: IN
50329: PUSH
50330: LD_VAR 0 1
50334: PPUSH
50335: CALL_OW 110
50339: PUSH
50340: LD_VAR 0 9
50344: EQUAL
50345: AND
50346: IFFALSE 50400
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50348: LD_ADDR_VAR 0 3
50352: PUSH
50353: LD_INT 22
50355: PUSH
50356: LD_VAR 0 9
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 21
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PPUSH
50379: CALL_OW 69
50383: PUSH
50384: FOR_IN
50385: IFFALSE 50398
// KillUnit ( i ) ;
50387: LD_VAR 0 3
50391: PPUSH
50392: CALL_OW 66
50396: GO 50384
50398: POP
50399: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50400: LD_VAR 0 1
50404: PPUSH
50405: CALL_OW 257
50409: PUSH
50410: LD_INT 12
50412: PUSH
50413: LD_INT 17
50415: PUSH
50416: LD_INT 15
50418: PUSH
50419: LD_INT 16
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: IN
50428: PUSH
50429: LD_VAR 0 1
50433: PPUSH
50434: CALL_OW 263
50438: PUSH
50439: LD_INT 5
50441: EQUAL
50442: OR
50443: IFFALSE 50532
// begin tag := GetTag ( un ) ;
50445: LD_ADDR_VAR 0 5
50449: PUSH
50450: LD_VAR 0 1
50454: PPUSH
50455: CALL_OW 110
50459: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
50460: LD_ADDR_VAR 0 7
50464: PUSH
50465: LD_EXP 29
50469: PUSH
50470: LD_VAR 0 5
50474: ARRAY
50475: ST_TO_ADDR
// wait ( 4 4$00 ) ;
50476: LD_INT 8400
50478: PPUSH
50479: CALL_OW 67
// PrepareApeman ( - 5 ) ;
50483: LD_INT 5
50485: NEG
50486: PPUSH
50487: CALL 36848 0 1
// ape := CreateHuman ;
50491: LD_ADDR_VAR 0 4
50495: PUSH
50496: CALL_OW 44
50500: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50501: LD_VAR 0 4
50505: PPUSH
50506: LD_VAR 0 5
50510: PPUSH
50511: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50515: LD_VAR 0 4
50519: PPUSH
50520: LD_VAR 0 7
50524: PPUSH
50525: LD_INT 0
50527: PPUSH
50528: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 247
50541: PUSH
50542: LD_INT 1
50544: EQUAL
50545: PUSH
50546: LD_VAR 0 1
50550: PPUSH
50551: CALL_OW 248
50555: PUSH
50556: LD_INT 0
50558: GREATER
50559: AND
50560: IFFALSE 50750
// begin if not mpRespawn then
50562: LD_EXP 30
50566: NOT
50567: IFFALSE 50571
// exit ;
50569: GO 50750
// side := GetSide ( un ) ;
50571: LD_ADDR_VAR 0 9
50575: PUSH
50576: LD_VAR 0 1
50580: PPUSH
50581: CALL_OW 255
50585: ST_TO_ADDR
// nation := GetNation ( un ) ;
50586: LD_ADDR_VAR 0 8
50590: PUSH
50591: LD_VAR 0 1
50595: PPUSH
50596: CALL_OW 248
50600: ST_TO_ADDR
// class := GetClass ( un ) ;
50601: LD_ADDR_VAR 0 6
50605: PUSH
50606: LD_VAR 0 1
50610: PPUSH
50611: CALL_OW 257
50615: ST_TO_ADDR
// if class > 4 then
50616: LD_VAR 0 6
50620: PUSH
50621: LD_INT 4
50623: GREATER
50624: IFFALSE 50634
// class := 1 ;
50626: LD_ADDR_VAR 0 6
50630: PUSH
50631: LD_INT 1
50633: ST_TO_ADDR
// wait ( mpRespawn ) ;
50634: LD_EXP 30
50638: PPUSH
50639: CALL_OW 67
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50643: LD_VAR 0 9
50647: PPUSH
50648: CALL_OW 108
50652: NOT
50653: PUSH
50654: LD_EXP 1
50658: PPUSH
50659: LD_VAR 0 9
50663: PPUSH
50664: CALL 49316 0 2
50668: NOT
50669: AND
50670: IFFALSE 50674
// exit ;
50672: GO 50750
// uc_side := side ;
50674: LD_ADDR_OWVAR 20
50678: PUSH
50679: LD_VAR 0 9
50683: ST_TO_ADDR
// uc_nation := nation ;
50684: LD_ADDR_OWVAR 21
50688: PUSH
50689: LD_VAR 0 8
50693: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50694: LD_INT 0
50696: PPUSH
50697: LD_VAR 0 6
50701: PPUSH
50702: LD_INT 2
50704: PPUSH
50705: CALL_OW 380
// mpRespawnPull := Replace ( mpRespawnPull , side , Join ( mpRespawnPull [ side ] , CreateHuman ) ) ;
50709: LD_ADDR_EXP 37
50713: PUSH
50714: LD_EXP 37
50718: PPUSH
50719: LD_VAR 0 9
50723: PPUSH
50724: LD_EXP 37
50728: PUSH
50729: LD_VAR 0 9
50733: ARRAY
50734: PPUSH
50735: CALL_OW 44
50739: PPUSH
50740: CALL 40580 0 2
50744: PPUSH
50745: CALL_OW 1
50749: ST_TO_ADDR
// end ; end ;
50750: LD_VAR 0 2
50754: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50755: LD_INT 0
50757: PPUSH
50758: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50759: LD_EXP 1
50763: PUSH
50764: LD_INT 2
50766: EQUAL
50767: PUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 266
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: IN
50788: AND
50789: IFFALSE 50854
// begin KillUnit ( building ) ;
50791: LD_VAR 0 1
50795: PPUSH
50796: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50800: LD_ADDR_VAR 0 5
50804: PUSH
50805: LD_INT 22
50807: PUSH
50808: LD_VAR 0 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 21
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PPUSH
50831: CALL_OW 69
50835: PUSH
50836: FOR_IN
50837: IFFALSE 50850
// KillUnit ( i ) ;
50839: LD_VAR 0 5
50843: PPUSH
50844: CALL_OW 66
50848: GO 50836
50850: POP
50851: POP
// exit ;
50852: GO 50899
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
50854: LD_VAR 0 1
50858: PPUSH
50859: CALL_OW 266
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: IN
50874: IFFALSE 50899
// SetBName ( building , @ & GetSide ( building ) ) ;
50876: LD_VAR 0 1
50880: PPUSH
50881: LD_STRING @
50883: PUSH
50884: LD_VAR 0 1
50888: PPUSH
50889: CALL_OW 255
50893: STR
50894: PPUSH
50895: CALL_OW 500
// end ; end_of_file
50899: LD_VAR 0 4
50903: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
50904: LD_EXP 36
50908: PUSH
50909: CALL 51114 0 0
50913: AND
50914: PUSH
50915: LD_OWVAR 4
50919: AND
50920: IFFALSE 51111
50922: GO 50924
50924: DISABLE
50925: LD_INT 0
50927: PPUSH
50928: PPUSH
// begin canWin := false ;
50929: LD_ADDR_VAR 0 2
50933: PUSH
50934: LD_INT 0
50936: ST_TO_ADDR
// if not HasPower ( your_side ) then
50937: LD_OWVAR 2
50941: PPUSH
50942: CALL 51154 0 1
50946: NOT
50947: IFFALSE 50958
// begin Multiplayer_Loose_Message ;
50949: CALL_OW 521
// enable ( mpLose ) ;
50953: LD_INT 102
50955: ENABLE_MARKED
// end else
50956: GO 51111
// begin canWin := true ;
50958: LD_ADDR_VAR 0 2
50962: PUSH
50963: LD_INT 1
50965: ST_TO_ADDR
// for i := 1 to 8 do
50966: LD_ADDR_VAR 0 1
50970: PUSH
50971: DOUBLE
50972: LD_INT 1
50974: DEC
50975: ST_TO_ADDR
50976: LD_INT 8
50978: PUSH
50979: FOR_TO
50980: IFFALSE 51097
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50982: LD_EXP 5
50986: PUSH
50987: LD_VAR 0 1
50991: ARRAY
50992: PUSH
50993: LD_VAR 0 1
50997: PPUSH
50998: CALL_OW 108
51002: AND
51003: PUSH
51004: LD_VAR 0 1
51008: PUSH
51009: LD_OWVAR 2
51013: NONEQUAL
51014: AND
51015: IFFALSE 51095
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51017: LD_EXP 6
51021: PUSH
51022: LD_VAR 0 1
51026: ARRAY
51027: NOT
51028: PUSH
51029: LD_EXP 6
51033: PUSH
51034: LD_VAR 0 1
51038: ARRAY
51039: PUSH
51040: LD_EXP 6
51044: PUSH
51045: LD_OWVAR 2
51049: ARRAY
51050: NONEQUAL
51051: PUSH
51052: LD_OWVAR 2
51056: PPUSH
51057: LD_VAR 0 1
51061: PPUSH
51062: CALL_OW 81
51066: PUSH
51067: LD_INT 1
51069: NONEQUAL
51070: AND
51071: OR
51072: IFFALSE 51095
// if HasPower ( i ) then
51074: LD_VAR 0 1
51078: PPUSH
51079: CALL 51154 0 1
51083: IFFALSE 51095
// begin canWin := false ;
51085: LD_ADDR_VAR 0 2
51089: PUSH
51090: LD_INT 0
51092: ST_TO_ADDR
// break ;
51093: GO 51097
// end ;
51095: GO 50979
51097: POP
51098: POP
// if canWin then
51099: LD_VAR 0 2
51103: IFFALSE 51110
// enable ( mpWin ) else
51105: LD_INT 101
51107: ENABLE_MARKED
51108: GO 51111
// enable ;
51110: ENABLE
// end ; end ;
51111: PPOPN 2
51113: END
// function CanWinLoose ; begin
51114: LD_INT 0
51116: PPUSH
// result := true ;
51117: LD_ADDR_VAR 0 1
51121: PUSH
51122: LD_INT 1
51124: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51125: CALL_OW 531
51129: PUSH
51130: CALL_OW 519
51134: PUSH
51135: LD_INT 1
51137: GREATER
51138: AND
51139: IFFALSE 51149
// result := false ;
51141: LD_ADDR_VAR 0 1
51145: PUSH
51146: LD_INT 0
51148: ST_TO_ADDR
// end ;
51149: LD_VAR 0 1
51153: RET
// function HasPower ( i ) ; begin
51154: LD_INT 0
51156: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51157: LD_ADDR_VAR 0 2
51161: PUSH
51162: LD_INT 22
51164: PUSH
51165: LD_VAR 0 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 21
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 33
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 33
51199: PUSH
51200: LD_INT 5
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PPUSH
51217: CALL_OW 69
51221: ST_TO_ADDR
// end ; end_of_file
51222: LD_VAR 0 2
51226: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51227: LD_EXP 36
51231: IFFALSE 51274
51233: GO 51235
51235: DISABLE
51236: LD_INT 0
51238: PPUSH
// begin for i := 1 to 8 do
51239: LD_ADDR_VAR 0 1
51243: PUSH
51244: DOUBLE
51245: LD_INT 1
51247: DEC
51248: ST_TO_ADDR
51249: LD_INT 8
51251: PUSH
51252: FOR_TO
51253: IFFALSE 51272
// SetRestrict ( b_depot , i , state_disabled ) ;
51255: LD_INT 0
51257: PPUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: LD_INT 0
51265: PPUSH
51266: CALL_OW 324
51270: GO 51252
51272: POP
51273: POP
// end ;
51274: PPOPN 1
51276: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51277: LD_EXP 36
51281: PUSH
51282: CALL 51487 0 0
51286: AND
51287: PUSH
51288: LD_OWVAR 4
51292: AND
51293: IFFALSE 51484
51295: GO 51297
51297: DISABLE
51298: LD_INT 0
51300: PPUSH
51301: PPUSH
// begin canWin := false ;
51302: LD_ADDR_VAR 0 2
51306: PUSH
51307: LD_INT 0
51309: ST_TO_ADDR
// if not HasPower ( your_side ) then
51310: LD_OWVAR 2
51314: PPUSH
51315: CALL 51527 0 1
51319: NOT
51320: IFFALSE 51331
// begin Multiplayer_Loose_Message ;
51322: CALL_OW 521
// enable ( mpLose ) ;
51326: LD_INT 102
51328: ENABLE_MARKED
// end else
51329: GO 51484
// begin canWin := true ;
51331: LD_ADDR_VAR 0 2
51335: PUSH
51336: LD_INT 1
51338: ST_TO_ADDR
// for i := 1 to 8 do
51339: LD_ADDR_VAR 0 1
51343: PUSH
51344: DOUBLE
51345: LD_INT 1
51347: DEC
51348: ST_TO_ADDR
51349: LD_INT 8
51351: PUSH
51352: FOR_TO
51353: IFFALSE 51470
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51355: LD_EXP 5
51359: PUSH
51360: LD_VAR 0 1
51364: ARRAY
51365: PUSH
51366: LD_VAR 0 1
51370: PPUSH
51371: CALL_OW 108
51375: AND
51376: PUSH
51377: LD_VAR 0 1
51381: PUSH
51382: LD_OWVAR 2
51386: NONEQUAL
51387: AND
51388: IFFALSE 51468
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51390: LD_EXP 6
51394: PUSH
51395: LD_VAR 0 1
51399: ARRAY
51400: NOT
51401: PUSH
51402: LD_EXP 6
51406: PUSH
51407: LD_VAR 0 1
51411: ARRAY
51412: PUSH
51413: LD_EXP 6
51417: PUSH
51418: LD_OWVAR 2
51422: ARRAY
51423: NONEQUAL
51424: PUSH
51425: LD_OWVAR 2
51429: PPUSH
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 81
51439: PUSH
51440: LD_INT 1
51442: NONEQUAL
51443: AND
51444: OR
51445: IFFALSE 51468
// if HasPower ( i ) then
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL 51527 0 1
51456: IFFALSE 51468
// begin canWin := false ;
51458: LD_ADDR_VAR 0 2
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// break ;
51466: GO 51470
// end ;
51468: GO 51352
51470: POP
51471: POP
// if canWin then
51472: LD_VAR 0 2
51476: IFFALSE 51483
// enable ( mpWin ) else
51478: LD_INT 101
51480: ENABLE_MARKED
51481: GO 51484
// enable ;
51483: ENABLE
// end ; end ;
51484: PPOPN 2
51486: END
// function CanWinLoose ; begin
51487: LD_INT 0
51489: PPUSH
// result := true ;
51490: LD_ADDR_VAR 0 1
51494: PUSH
51495: LD_INT 1
51497: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51498: CALL_OW 531
51502: PUSH
51503: CALL_OW 519
51507: PUSH
51508: LD_INT 1
51510: GREATER
51511: AND
51512: IFFALSE 51522
// result := false ;
51514: LD_ADDR_VAR 0 1
51518: PUSH
51519: LD_INT 0
51521: ST_TO_ADDR
// end ;
51522: LD_VAR 0 1
51526: RET
// function HasPower ( i ) ; begin
51527: LD_INT 0
51529: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51530: LD_INT 22
51532: PUSH
51533: LD_VAR 0 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 30
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 30
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PPUSH
51574: CALL_OW 69
51578: NOT
51579: IFFALSE 51583
// exit ;
51581: GO 51648
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51583: LD_ADDR_VAR 0 2
51587: PUSH
51588: LD_INT 22
51590: PUSH
51591: LD_VAR 0 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 21
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 33
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 33
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PPUSH
51643: CALL_OW 69
51647: ST_TO_ADDR
// end ; end_of_file
51648: LD_VAR 0 2
51652: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51653: LD_EXP 36
51657: IFFALSE 51996
51659: GO 51661
51661: DISABLE
51662: LD_INT 0
51664: PPUSH
51665: PPUSH
51666: PPUSH
// begin mpKingPoints := [ ] ;
51667: LD_ADDR_EXP 40
51671: PUSH
51672: EMPTY
51673: ST_TO_ADDR
// if mpTeamGame then
51674: LD_EXP 9
51678: IFFALSE 51732
// begin for i := 1 to Count ( mpTeams ) do
51680: LD_ADDR_VAR 0 1
51684: PUSH
51685: DOUBLE
51686: LD_INT 1
51688: DEC
51689: ST_TO_ADDR
51690: LD_EXP 8
51694: PPUSH
51695: CALL 4991 0 1
51699: PUSH
51700: FOR_TO
51701: IFFALSE 51728
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51703: LD_ADDR_EXP 40
51707: PUSH
51708: LD_EXP 40
51712: PPUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: LD_INT 0
51720: PPUSH
51721: CALL_OW 1
51725: ST_TO_ADDR
51726: GO 51700
51728: POP
51729: POP
// end else
51730: GO 51775
// begin for i := 1 to 8 do
51732: LD_ADDR_VAR 0 1
51736: PUSH
51737: DOUBLE
51738: LD_INT 1
51740: DEC
51741: ST_TO_ADDR
51742: LD_INT 8
51744: PUSH
51745: FOR_TO
51746: IFFALSE 51773
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51748: LD_ADDR_EXP 40
51752: PUSH
51753: LD_EXP 40
51757: PPUSH
51758: LD_VAR 0 1
51762: PPUSH
51763: LD_INT 0
51765: PPUSH
51766: CALL_OW 1
51770: ST_TO_ADDR
51771: GO 51745
51773: POP
51774: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_INT 73
51782: PPUSH
51783: LD_INT 0
51785: PPUSH
51786: CALL_OW 517
51790: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51791: LD_ADDR_VAR 0 1
51795: PUSH
51796: DOUBLE
51797: LD_INT 1
51799: DEC
51800: ST_TO_ADDR
51801: LD_VAR 0 3
51805: PUSH
51806: LD_INT 1
51808: ARRAY
51809: PUSH
51810: FOR_TO
51811: IFFALSE 51878
// for j := 1 to 8 do
51813: LD_ADDR_VAR 0 2
51817: PUSH
51818: DOUBLE
51819: LD_INT 1
51821: DEC
51822: ST_TO_ADDR
51823: LD_INT 8
51825: PUSH
51826: FOR_TO
51827: IFFALSE 51874
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
51829: LD_VAR 0 3
51833: PUSH
51834: LD_INT 1
51836: ARRAY
51837: PUSH
51838: LD_VAR 0 1
51842: ARRAY
51843: PPUSH
51844: LD_VAR 0 3
51848: PUSH
51849: LD_INT 2
51851: ARRAY
51852: PUSH
51853: LD_VAR 0 1
51857: ARRAY
51858: PPUSH
51859: LD_VAR 0 2
51863: PPUSH
51864: LD_INT 12
51866: NEG
51867: PPUSH
51868: CALL_OW 330
51872: GO 51826
51874: POP
51875: POP
51876: GO 51810
51878: POP
51879: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
51880: LD_EXP 31
51884: PPUSH
51885: LD_INT 1
51887: PPUSH
51888: CALL_OW 424
// UpdateCounter ;
51892: CALL 52498 0 0
// repeat wait ( 0 0$1 ) ;
51896: LD_INT 35
51898: PPUSH
51899: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51903: LD_ADDR_VAR 0 3
51907: PUSH
51908: LD_EXP 31
51912: PPUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 57
51918: PUSH
51919: EMPTY
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 50
51928: PUSH
51929: EMPTY
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 30
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 30
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: PPUSH
51965: CALL_OW 70
51969: ST_TO_ADDR
// if not tmp then
51970: LD_VAR 0 3
51974: NOT
51975: IFFALSE 51979
// continue ;
51977: GO 51896
// AddPoints ( tmp ) ;
51979: LD_VAR 0 3
51983: PPUSH
51984: CALL 52176 0 1
// UpdateCounter ;
51988: CALL 52498 0 0
// until false ;
51992: LD_INT 0
51994: IFFALSE 51896
// end ;
51996: PPOPN 3
51998: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
51999: LD_EXP 36
52003: PUSH
52004: LD_EXP 34
52008: AND
52009: IFFALSE 52173
52011: GO 52013
52013: DISABLE
52014: LD_INT 0
52016: PPUSH
52017: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52018: LD_ADDR_VAR 0 2
52022: PUSH
52023: LD_INT 73
52025: PPUSH
52026: LD_INT 0
52028: PPUSH
52029: CALL_OW 517
52033: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52034: LD_ADDR_VAR 0 1
52038: PUSH
52039: DOUBLE
52040: LD_INT 1
52042: DEC
52043: ST_TO_ADDR
52044: LD_VAR 0 2
52048: PUSH
52049: LD_INT 1
52051: ARRAY
52052: PUSH
52053: FOR_TO
52054: IFFALSE 52095
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52056: LD_VAR 0 2
52060: PUSH
52061: LD_INT 1
52063: ARRAY
52064: PUSH
52065: LD_VAR 0 1
52069: ARRAY
52070: PPUSH
52071: LD_VAR 0 2
52075: PUSH
52076: LD_INT 2
52078: ARRAY
52079: PUSH
52080: LD_VAR 0 1
52084: ARRAY
52085: PPUSH
52086: LD_INT 125
52088: PPUSH
52089: CALL_OW 495
52093: GO 52053
52095: POP
52096: POP
// repeat wait ( mpEmissions ) ;
52097: LD_EXP 34
52101: PPUSH
52102: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52106: LD_ADDR_VAR 0 1
52110: PUSH
52111: DOUBLE
52112: LD_INT 1
52114: DEC
52115: ST_TO_ADDR
52116: LD_VAR 0 2
52120: PUSH
52121: LD_INT 1
52123: ARRAY
52124: PUSH
52125: FOR_TO
52126: IFFALSE 52167
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 1
52135: ARRAY
52136: PUSH
52137: LD_VAR 0 1
52141: ARRAY
52142: PPUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 2
52150: ARRAY
52151: PUSH
52152: LD_VAR 0 1
52156: ARRAY
52157: PPUSH
52158: LD_INT 15
52160: PPUSH
52161: CALL_OW 495
52165: GO 52125
52167: POP
52168: POP
// until false ;
52169: LD_INT 0
52171: IFFALSE 52097
// end ;
52173: PPOPN 2
52175: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52176: LD_INT 0
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
// if mpTeamGame then
52183: LD_EXP 9
52187: IFFALSE 52384
// begin first := depots [ 1 ] ;
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: LD_VAR 0 1
52198: PUSH
52199: LD_INT 1
52201: ARRAY
52202: ST_TO_ADDR
// side := GetSide ( first ) ;
52203: LD_ADDR_VAR 0 6
52207: PUSH
52208: LD_VAR 0 4
52212: PPUSH
52213: CALL_OW 255
52217: ST_TO_ADDR
// for i := 1 to mpTeams do
52218: LD_ADDR_VAR 0 3
52222: PUSH
52223: DOUBLE
52224: LD_INT 1
52226: DEC
52227: ST_TO_ADDR
52228: LD_EXP 8
52232: PUSH
52233: FOR_TO
52234: IFFALSE 52268
// if side in mpTeams [ i ] then
52236: LD_VAR 0 6
52240: PUSH
52241: LD_EXP 8
52245: PUSH
52246: LD_VAR 0 3
52250: ARRAY
52251: IN
52252: IFFALSE 52266
// begin team := i ;
52254: LD_ADDR_VAR 0 5
52258: PUSH
52259: LD_VAR 0 3
52263: ST_TO_ADDR
// break ;
52264: GO 52268
// end ;
52266: GO 52233
52268: POP
52269: POP
// if not team then
52270: LD_VAR 0 5
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 52493
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52279: LD_EXP 31
52283: PPUSH
52284: LD_INT 81
52286: PUSH
52287: LD_VAR 0 6
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PPUSH
52296: CALL_OW 70
52300: IFFALSE 52304
// exit ;
52302: GO 52493
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52304: LD_ADDR_EXP 40
52308: PUSH
52309: LD_EXP 40
52313: PPUSH
52314: LD_VAR 0 5
52318: PPUSH
52319: LD_EXP 40
52323: PUSH
52324: LD_VAR 0 5
52328: ARRAY
52329: PUSH
52330: LD_INT 1
52332: PLUS
52333: PPUSH
52334: CALL_OW 1
52338: ST_TO_ADDR
// for i in mpTeams [ team ] do
52339: LD_ADDR_VAR 0 3
52343: PUSH
52344: LD_EXP 8
52348: PUSH
52349: LD_VAR 0 5
52353: ARRAY
52354: PUSH
52355: FOR_IN
52356: IFFALSE 52380
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52358: LD_VAR 0 3
52362: PPUSH
52363: LD_EXP 40
52367: PUSH
52368: LD_VAR 0 5
52372: ARRAY
52373: PPUSH
52374: CALL_OW 506
52378: GO 52355
52380: POP
52381: POP
// end else
52382: GO 52493
// begin first := depots [ 1 ] ;
52384: LD_ADDR_VAR 0 4
52388: PUSH
52389: LD_VAR 0 1
52393: PUSH
52394: LD_INT 1
52396: ARRAY
52397: ST_TO_ADDR
// side := GetSide ( first ) ;
52398: LD_ADDR_VAR 0 6
52402: PUSH
52403: LD_VAR 0 4
52407: PPUSH
52408: CALL_OW 255
52412: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52413: LD_EXP 31
52417: PPUSH
52418: LD_INT 81
52420: PUSH
52421: LD_VAR 0 6
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PPUSH
52430: CALL_OW 70
52434: IFFALSE 52438
// exit ;
52436: GO 52493
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52438: LD_ADDR_EXP 40
52442: PUSH
52443: LD_EXP 40
52447: PPUSH
52448: LD_VAR 0 6
52452: PPUSH
52453: LD_EXP 40
52457: PUSH
52458: LD_VAR 0 6
52462: ARRAY
52463: PUSH
52464: LD_INT 1
52466: PLUS
52467: PPUSH
52468: CALL_OW 1
52472: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52473: LD_VAR 0 6
52477: PPUSH
52478: LD_EXP 40
52482: PUSH
52483: LD_VAR 0 6
52487: ARRAY
52488: PPUSH
52489: CALL_OW 506
// end ; end ;
52493: LD_VAR 0 2
52497: RET
// function UpdateCounter ; var i ; begin
52498: LD_INT 0
52500: PPUSH
52501: PPUSH
// result := [ ] ;
52502: LD_ADDR_VAR 0 1
52506: PUSH
52507: EMPTY
52508: ST_TO_ADDR
// if mpTeamGame then
52509: LD_EXP 9
52513: IFFALSE 52580
// begin for i := 1 to mpTeams do
52515: LD_ADDR_VAR 0 2
52519: PUSH
52520: DOUBLE
52521: LD_INT 1
52523: DEC
52524: ST_TO_ADDR
52525: LD_EXP 8
52529: PUSH
52530: FOR_TO
52531: IFFALSE 52576
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52533: LD_ADDR_VAR 0 1
52537: PUSH
52538: LD_VAR 0 1
52542: PUSH
52543: LD_STRING #KingoftheHill-Team
52545: PUSH
52546: LD_VAR 0 2
52550: PUSH
52551: LD_EXP 40
52555: PUSH
52556: LD_VAR 0 2
52560: ARRAY
52561: PUSH
52562: LD_EXP 32
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: ADD
52573: ST_TO_ADDR
52574: GO 52530
52576: POP
52577: POP
// end else
52578: GO 52653
// begin for i := 1 to 8 do
52580: LD_ADDR_VAR 0 2
52584: PUSH
52585: DOUBLE
52586: LD_INT 1
52588: DEC
52589: ST_TO_ADDR
52590: LD_INT 8
52592: PUSH
52593: FOR_TO
52594: IFFALSE 52651
// if mpSidePositions [ i ] then
52596: LD_EXP 5
52600: PUSH
52601: LD_VAR 0 2
52605: ARRAY
52606: IFFALSE 52649
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52608: LD_ADDR_VAR 0 1
52612: PUSH
52613: LD_VAR 0 1
52617: PUSH
52618: LD_STRING #KingoftheHill-Player
52620: PUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_EXP 40
52630: PUSH
52631: LD_VAR 0 2
52635: ARRAY
52636: PUSH
52637: LD_EXP 32
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: ADD
52648: ST_TO_ADDR
52649: GO 52593
52651: POP
52652: POP
// end ; mpDisplayStrings := result ;
52653: LD_ADDR_EXP 35
52657: PUSH
52658: LD_VAR 0 1
52662: ST_TO_ADDR
// end ;
52663: LD_VAR 0 1
52667: RET
// export function HowMuchPointsKing ( side ) ; begin
52668: LD_INT 0
52670: PPUSH
// result := HowMuchPoints ( side ) ;
52671: LD_ADDR_VAR 0 2
52675: PUSH
52676: LD_VAR 0 1
52680: PPUSH
52681: CALL 52691 0 1
52685: ST_TO_ADDR
// end ;
52686: LD_VAR 0 2
52690: RET
// function HowMuchPoints ( side ) ; var i ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
// if mpTeamGame then
52695: LD_EXP 9
52699: IFFALSE 52768
// begin for i := 1 to Count ( mpTeams ) do
52701: LD_ADDR_VAR 0 3
52705: PUSH
52706: DOUBLE
52707: LD_INT 1
52709: DEC
52710: ST_TO_ADDR
52711: LD_EXP 8
52715: PPUSH
52716: CALL 4991 0 1
52720: PUSH
52721: FOR_TO
52722: IFFALSE 52764
// begin if side in mpTeams [ i ] then
52724: LD_VAR 0 1
52728: PUSH
52729: LD_EXP 8
52733: PUSH
52734: LD_VAR 0 3
52738: ARRAY
52739: IN
52740: IFFALSE 52762
// begin result := mpKingPoints [ i ] ;
52742: LD_ADDR_VAR 0 2
52746: PUSH
52747: LD_EXP 40
52751: PUSH
52752: LD_VAR 0 3
52756: ARRAY
52757: ST_TO_ADDR
// exit ;
52758: POP
52759: POP
52760: GO 52784
// end ; end ;
52762: GO 52721
52764: POP
52765: POP
// end else
52766: GO 52784
// result := mpKingPoints [ side ] ;
52768: LD_ADDR_VAR 0 2
52772: PUSH
52773: LD_EXP 40
52777: PUSH
52778: LD_VAR 0 1
52782: ARRAY
52783: ST_TO_ADDR
// end ;
52784: LD_VAR 0 2
52788: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52789: LD_EXP 36
52793: PUSH
52794: CALL 53116 0 0
52798: AND
52799: PUSH
52800: LD_OWVAR 4
52804: AND
52805: IFFALSE 53041
52807: GO 52809
52809: DISABLE
52810: LD_INT 0
52812: PPUSH
52813: PPUSH
// begin canWin := false ;
52814: LD_ADDR_VAR 0 2
52818: PUSH
52819: LD_INT 0
52821: ST_TO_ADDR
// if not HasPower ( your_side ) then
52822: LD_OWVAR 2
52826: PPUSH
52827: CALL 53156 0 1
52831: NOT
52832: IFFALSE 52843
// begin Multiplayer_Loose_Message ;
52834: CALL_OW 521
// enable ( mpLose ) ;
52838: LD_INT 102
52840: ENABLE_MARKED
// end else
52841: GO 53041
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
52843: LD_ADDR_VAR 0 2
52847: PUSH
52848: LD_OWVAR 2
52852: PPUSH
52853: CALL 52691 0 1
52857: PUSH
52858: LD_EXP 32
52862: GREATEREQUAL
52863: PUSH
52864: LD_OWVAR 2
52868: PPUSH
52869: CALL 53156 0 1
52873: AND
52874: PUSH
52875: CALL 53044 0 0
52879: NOT
52880: OR
52881: ST_TO_ADDR
// for i := 1 to 8 do
52882: LD_ADDR_VAR 0 1
52886: PUSH
52887: DOUBLE
52888: LD_INT 1
52890: DEC
52891: ST_TO_ADDR
52892: LD_INT 8
52894: PUSH
52895: FOR_TO
52896: IFFALSE 53027
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52898: LD_EXP 5
52902: PUSH
52903: LD_VAR 0 1
52907: ARRAY
52908: PUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 108
52918: AND
52919: PUSH
52920: LD_VAR 0 1
52924: PUSH
52925: LD_OWVAR 2
52929: NONEQUAL
52930: AND
52931: IFFALSE 53025
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52933: LD_EXP 6
52937: PUSH
52938: LD_VAR 0 1
52942: ARRAY
52943: NOT
52944: PUSH
52945: LD_EXP 6
52949: PUSH
52950: LD_VAR 0 1
52954: ARRAY
52955: PUSH
52956: LD_EXP 6
52960: PUSH
52961: LD_OWVAR 2
52965: ARRAY
52966: NONEQUAL
52967: PUSH
52968: LD_OWVAR 2
52972: PPUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 81
52982: PUSH
52983: LD_INT 1
52985: NONEQUAL
52986: AND
52987: OR
52988: IFFALSE 53025
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
52990: LD_VAR 0 1
52994: PPUSH
52995: CALL 52691 0 1
52999: PUSH
53000: LD_EXP 32
53004: GREATEREQUAL
53005: PUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL 53156 0 1
53015: AND
53016: IFFALSE 53025
// begin enable ( mpLose ) ;
53018: LD_INT 102
53020: ENABLE_MARKED
// exit ;
53021: POP
53022: POP
53023: GO 53041
// end ;
53025: GO 52895
53027: POP
53028: POP
// if canWin then
53029: LD_VAR 0 2
53033: IFFALSE 53040
// enable ( mpWin ) else
53035: LD_INT 101
53037: ENABLE_MARKED
53038: GO 53041
// enable ;
53040: ENABLE
// end ; end ;
53041: PPOPN 2
53043: END
// function EnemiesInGame ; var i ; begin
53044: LD_INT 0
53046: PPUSH
53047: PPUSH
// result := false ;
53048: LD_ADDR_VAR 0 1
53052: PUSH
53053: LD_INT 0
53055: ST_TO_ADDR
// for i := 1 to 8 do
53056: LD_ADDR_VAR 0 2
53060: PUSH
53061: DOUBLE
53062: LD_INT 1
53064: DEC
53065: ST_TO_ADDR
53066: LD_INT 8
53068: PUSH
53069: FOR_TO
53070: IFFALSE 53109
// if i <> your_side and MultiplayerSideAlive ( i ) then
53072: LD_VAR 0 2
53076: PUSH
53077: LD_OWVAR 2
53081: NONEQUAL
53082: PUSH
53083: LD_VAR 0 2
53087: PPUSH
53088: CALL_OW 108
53092: AND
53093: IFFALSE 53107
// begin result := true ;
53095: LD_ADDR_VAR 0 1
53099: PUSH
53100: LD_INT 1
53102: ST_TO_ADDR
// exit ;
53103: POP
53104: POP
53105: GO 53111
// end ;
53107: GO 53069
53109: POP
53110: POP
// end ;
53111: LD_VAR 0 1
53115: RET
// function CanWinLoose ; begin
53116: LD_INT 0
53118: PPUSH
// result := true ;
53119: LD_ADDR_VAR 0 1
53123: PUSH
53124: LD_INT 1
53126: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53127: CALL_OW 531
53131: PUSH
53132: CALL_OW 519
53136: PUSH
53137: LD_INT 1
53139: GREATER
53140: AND
53141: IFFALSE 53151
// result := false ;
53143: LD_ADDR_VAR 0 1
53147: PUSH
53148: LD_INT 0
53150: ST_TO_ADDR
// end ;
53151: LD_VAR 0 1
53155: RET
// function HasPower ( i ) ; begin
53156: LD_INT 0
53158: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53159: LD_ADDR_VAR 0 2
53163: PUSH
53164: LD_INT 22
53166: PUSH
53167: LD_VAR 0 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 21
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 33
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 33
53201: PUSH
53202: LD_INT 5
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PPUSH
53219: CALL_OW 69
53223: ST_TO_ADDR
// end ; end_of_file end_of_file
53224: LD_VAR 0 2
53228: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53229: LD_VAR 0 1
53233: PPUSH
53234: LD_VAR 0 2
53238: PPUSH
53239: LD_VAR 0 3
53243: PPUSH
53244: LD_VAR 0 4
53248: PPUSH
53249: LD_VAR 0 5
53253: PPUSH
53254: LD_VAR 0 6
53258: PPUSH
53259: CALL 53460 0 6
// end ;
53263: PPOPN 6
53265: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53266: LD_INT 0
53268: PPUSH
// begin if not units then
53269: LD_VAR 0 1
53273: NOT
53274: IFFALSE 53278
// exit ;
53276: GO 53278
// end ;
53278: PPOPN 7
53280: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53281: CALL 53347 0 0
// end ; end_of_file
53285: PPOPN 1
53287: END
// export globalGameSaveCounter ; every 0 0$1 do
53288: GO 53290
53290: DISABLE
// begin enable ;
53291: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53292: LD_STRING updateTimer(
53294: PUSH
53295: LD_OWVAR 1
53299: STR
53300: PUSH
53301: LD_STRING );
53303: STR
53304: PPUSH
53305: CALL_OW 559
// end ;
53309: END
// every 0 0$1 do
53310: GO 53312
53312: DISABLE
// begin globalGameSaveCounter := 0 ;
53313: LD_ADDR_EXP 41
53317: PUSH
53318: LD_INT 0
53320: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53321: LD_STRING setGameSaveCounter(0)
53323: PPUSH
53324: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53328: LD_STRING initStreamRollete();
53330: PPUSH
53331: CALL_OW 559
// InitStreamMode ;
53335: CALL 54678 0 0
// DefineStreamItems ( false ) ;
53339: LD_INT 0
53341: PPUSH
53342: CALL 55142 0 1
// end ;
53346: END
// export function SOS_MapStart ( ) ; begin
53347: LD_INT 0
53349: PPUSH
// if streamModeActive then
53350: LD_EXP 42
53354: IFFALSE 53363
// DefineStreamItems ( true ) ;
53356: LD_INT 1
53358: PPUSH
53359: CALL 55142 0 1
// UpdateLuaVariables ( ) ;
53363: CALL 53380 0 0
// UpdateFactoryWaypoints ( ) ;
53367: CALL 68011 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53371: CALL 68268 0 0
// end ;
53375: LD_VAR 0 1
53379: RET
// function UpdateLuaVariables ( ) ; begin
53380: LD_INT 0
53382: PPUSH
// if globalGameSaveCounter then
53383: LD_EXP 41
53387: IFFALSE 53421
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53389: LD_ADDR_EXP 41
53393: PUSH
53394: LD_EXP 41
53398: PPUSH
53399: CALL 41941 0 1
53403: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53404: LD_STRING setGameSaveCounter(
53406: PUSH
53407: LD_EXP 41
53411: STR
53412: PUSH
53413: LD_STRING )
53415: STR
53416: PPUSH
53417: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53421: LD_STRING setGameDifficulty(
53423: PUSH
53424: LD_OWVAR 67
53428: STR
53429: PUSH
53430: LD_STRING )
53432: STR
53433: PPUSH
53434: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53438: LD_STRING displayDifficulty(
53440: PUSH
53441: LD_OWVAR 67
53445: STR
53446: PUSH
53447: LD_STRING )
53449: STR
53450: PPUSH
53451: CALL_OW 559
// end ;
53455: LD_VAR 0 1
53459: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53460: LD_INT 0
53462: PPUSH
// if p2 = stream_mode then
53463: LD_VAR 0 2
53467: PUSH
53468: LD_INT 100
53470: EQUAL
53471: IFFALSE 54474
// begin if not StreamModeActive then
53473: LD_EXP 42
53477: NOT
53478: IFFALSE 53488
// StreamModeActive := true ;
53480: LD_ADDR_EXP 42
53484: PUSH
53485: LD_INT 1
53487: ST_TO_ADDR
// if p3 = 0 then
53488: LD_VAR 0 3
53492: PUSH
53493: LD_INT 0
53495: EQUAL
53496: IFFALSE 53502
// InitStreamMode ;
53498: CALL 54678 0 0
// if p3 = 1 then
53502: LD_VAR 0 3
53506: PUSH
53507: LD_INT 1
53509: EQUAL
53510: IFFALSE 53520
// sRocket := true ;
53512: LD_ADDR_EXP 47
53516: PUSH
53517: LD_INT 1
53519: ST_TO_ADDR
// if p3 = 2 then
53520: LD_VAR 0 3
53524: PUSH
53525: LD_INT 2
53527: EQUAL
53528: IFFALSE 53538
// sSpeed := true ;
53530: LD_ADDR_EXP 46
53534: PUSH
53535: LD_INT 1
53537: ST_TO_ADDR
// if p3 = 3 then
53538: LD_VAR 0 3
53542: PUSH
53543: LD_INT 3
53545: EQUAL
53546: IFFALSE 53556
// sEngine := true ;
53548: LD_ADDR_EXP 48
53552: PUSH
53553: LD_INT 1
53555: ST_TO_ADDR
// if p3 = 4 then
53556: LD_VAR 0 3
53560: PUSH
53561: LD_INT 4
53563: EQUAL
53564: IFFALSE 53574
// sSpec := true ;
53566: LD_ADDR_EXP 45
53570: PUSH
53571: LD_INT 1
53573: ST_TO_ADDR
// if p3 = 5 then
53574: LD_VAR 0 3
53578: PUSH
53579: LD_INT 5
53581: EQUAL
53582: IFFALSE 53592
// sLevel := true ;
53584: LD_ADDR_EXP 49
53588: PUSH
53589: LD_INT 1
53591: ST_TO_ADDR
// if p3 = 6 then
53592: LD_VAR 0 3
53596: PUSH
53597: LD_INT 6
53599: EQUAL
53600: IFFALSE 53610
// sArmoury := true ;
53602: LD_ADDR_EXP 50
53606: PUSH
53607: LD_INT 1
53609: ST_TO_ADDR
// if p3 = 7 then
53610: LD_VAR 0 3
53614: PUSH
53615: LD_INT 7
53617: EQUAL
53618: IFFALSE 53628
// sRadar := true ;
53620: LD_ADDR_EXP 51
53624: PUSH
53625: LD_INT 1
53627: ST_TO_ADDR
// if p3 = 8 then
53628: LD_VAR 0 3
53632: PUSH
53633: LD_INT 8
53635: EQUAL
53636: IFFALSE 53646
// sBunker := true ;
53638: LD_ADDR_EXP 52
53642: PUSH
53643: LD_INT 1
53645: ST_TO_ADDR
// if p3 = 9 then
53646: LD_VAR 0 3
53650: PUSH
53651: LD_INT 9
53653: EQUAL
53654: IFFALSE 53664
// sHack := true ;
53656: LD_ADDR_EXP 53
53660: PUSH
53661: LD_INT 1
53663: ST_TO_ADDR
// if p3 = 10 then
53664: LD_VAR 0 3
53668: PUSH
53669: LD_INT 10
53671: EQUAL
53672: IFFALSE 53682
// sFire := true ;
53674: LD_ADDR_EXP 54
53678: PUSH
53679: LD_INT 1
53681: ST_TO_ADDR
// if p3 = 11 then
53682: LD_VAR 0 3
53686: PUSH
53687: LD_INT 11
53689: EQUAL
53690: IFFALSE 53700
// sRefresh := true ;
53692: LD_ADDR_EXP 55
53696: PUSH
53697: LD_INT 1
53699: ST_TO_ADDR
// if p3 = 12 then
53700: LD_VAR 0 3
53704: PUSH
53705: LD_INT 12
53707: EQUAL
53708: IFFALSE 53718
// sExp := true ;
53710: LD_ADDR_EXP 56
53714: PUSH
53715: LD_INT 1
53717: ST_TO_ADDR
// if p3 = 13 then
53718: LD_VAR 0 3
53722: PUSH
53723: LD_INT 13
53725: EQUAL
53726: IFFALSE 53736
// sDepot := true ;
53728: LD_ADDR_EXP 57
53732: PUSH
53733: LD_INT 1
53735: ST_TO_ADDR
// if p3 = 14 then
53736: LD_VAR 0 3
53740: PUSH
53741: LD_INT 14
53743: EQUAL
53744: IFFALSE 53754
// sFlag := true ;
53746: LD_ADDR_EXP 58
53750: PUSH
53751: LD_INT 1
53753: ST_TO_ADDR
// if p3 = 15 then
53754: LD_VAR 0 3
53758: PUSH
53759: LD_INT 15
53761: EQUAL
53762: IFFALSE 53772
// sKamikadze := true ;
53764: LD_ADDR_EXP 66
53768: PUSH
53769: LD_INT 1
53771: ST_TO_ADDR
// if p3 = 16 then
53772: LD_VAR 0 3
53776: PUSH
53777: LD_INT 16
53779: EQUAL
53780: IFFALSE 53790
// sTroll := true ;
53782: LD_ADDR_EXP 67
53786: PUSH
53787: LD_INT 1
53789: ST_TO_ADDR
// if p3 = 17 then
53790: LD_VAR 0 3
53794: PUSH
53795: LD_INT 17
53797: EQUAL
53798: IFFALSE 53808
// sSlow := true ;
53800: LD_ADDR_EXP 68
53804: PUSH
53805: LD_INT 1
53807: ST_TO_ADDR
// if p3 = 18 then
53808: LD_VAR 0 3
53812: PUSH
53813: LD_INT 18
53815: EQUAL
53816: IFFALSE 53826
// sLack := true ;
53818: LD_ADDR_EXP 69
53822: PUSH
53823: LD_INT 1
53825: ST_TO_ADDR
// if p3 = 19 then
53826: LD_VAR 0 3
53830: PUSH
53831: LD_INT 19
53833: EQUAL
53834: IFFALSE 53844
// sTank := true ;
53836: LD_ADDR_EXP 71
53840: PUSH
53841: LD_INT 1
53843: ST_TO_ADDR
// if p3 = 20 then
53844: LD_VAR 0 3
53848: PUSH
53849: LD_INT 20
53851: EQUAL
53852: IFFALSE 53862
// sRemote := true ;
53854: LD_ADDR_EXP 72
53858: PUSH
53859: LD_INT 1
53861: ST_TO_ADDR
// if p3 = 21 then
53862: LD_VAR 0 3
53866: PUSH
53867: LD_INT 21
53869: EQUAL
53870: IFFALSE 53880
// sPowell := true ;
53872: LD_ADDR_EXP 73
53876: PUSH
53877: LD_INT 1
53879: ST_TO_ADDR
// if p3 = 22 then
53880: LD_VAR 0 3
53884: PUSH
53885: LD_INT 22
53887: EQUAL
53888: IFFALSE 53898
// sTeleport := true ;
53890: LD_ADDR_EXP 76
53894: PUSH
53895: LD_INT 1
53897: ST_TO_ADDR
// if p3 = 23 then
53898: LD_VAR 0 3
53902: PUSH
53903: LD_INT 23
53905: EQUAL
53906: IFFALSE 53916
// sOilTower := true ;
53908: LD_ADDR_EXP 78
53912: PUSH
53913: LD_INT 1
53915: ST_TO_ADDR
// if p3 = 24 then
53916: LD_VAR 0 3
53920: PUSH
53921: LD_INT 24
53923: EQUAL
53924: IFFALSE 53934
// sShovel := true ;
53926: LD_ADDR_EXP 79
53930: PUSH
53931: LD_INT 1
53933: ST_TO_ADDR
// if p3 = 25 then
53934: LD_VAR 0 3
53938: PUSH
53939: LD_INT 25
53941: EQUAL
53942: IFFALSE 53952
// sSheik := true ;
53944: LD_ADDR_EXP 80
53948: PUSH
53949: LD_INT 1
53951: ST_TO_ADDR
// if p3 = 26 then
53952: LD_VAR 0 3
53956: PUSH
53957: LD_INT 26
53959: EQUAL
53960: IFFALSE 53970
// sEarthquake := true ;
53962: LD_ADDR_EXP 82
53966: PUSH
53967: LD_INT 1
53969: ST_TO_ADDR
// if p3 = 27 then
53970: LD_VAR 0 3
53974: PUSH
53975: LD_INT 27
53977: EQUAL
53978: IFFALSE 53988
// sAI := true ;
53980: LD_ADDR_EXP 83
53984: PUSH
53985: LD_INT 1
53987: ST_TO_ADDR
// if p3 = 28 then
53988: LD_VAR 0 3
53992: PUSH
53993: LD_INT 28
53995: EQUAL
53996: IFFALSE 54006
// sCargo := true ;
53998: LD_ADDR_EXP 86
54002: PUSH
54003: LD_INT 1
54005: ST_TO_ADDR
// if p3 = 29 then
54006: LD_VAR 0 3
54010: PUSH
54011: LD_INT 29
54013: EQUAL
54014: IFFALSE 54024
// sDLaser := true ;
54016: LD_ADDR_EXP 87
54020: PUSH
54021: LD_INT 1
54023: ST_TO_ADDR
// if p3 = 30 then
54024: LD_VAR 0 3
54028: PUSH
54029: LD_INT 30
54031: EQUAL
54032: IFFALSE 54042
// sExchange := true ;
54034: LD_ADDR_EXP 88
54038: PUSH
54039: LD_INT 1
54041: ST_TO_ADDR
// if p3 = 31 then
54042: LD_VAR 0 3
54046: PUSH
54047: LD_INT 31
54049: EQUAL
54050: IFFALSE 54060
// sFac := true ;
54052: LD_ADDR_EXP 89
54056: PUSH
54057: LD_INT 1
54059: ST_TO_ADDR
// if p3 = 32 then
54060: LD_VAR 0 3
54064: PUSH
54065: LD_INT 32
54067: EQUAL
54068: IFFALSE 54078
// sPower := true ;
54070: LD_ADDR_EXP 90
54074: PUSH
54075: LD_INT 1
54077: ST_TO_ADDR
// if p3 = 33 then
54078: LD_VAR 0 3
54082: PUSH
54083: LD_INT 33
54085: EQUAL
54086: IFFALSE 54096
// sRandom := true ;
54088: LD_ADDR_EXP 91
54092: PUSH
54093: LD_INT 1
54095: ST_TO_ADDR
// if p3 = 34 then
54096: LD_VAR 0 3
54100: PUSH
54101: LD_INT 34
54103: EQUAL
54104: IFFALSE 54114
// sShield := true ;
54106: LD_ADDR_EXP 92
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
// if p3 = 35 then
54114: LD_VAR 0 3
54118: PUSH
54119: LD_INT 35
54121: EQUAL
54122: IFFALSE 54132
// sTime := true ;
54124: LD_ADDR_EXP 93
54128: PUSH
54129: LD_INT 1
54131: ST_TO_ADDR
// if p3 = 36 then
54132: LD_VAR 0 3
54136: PUSH
54137: LD_INT 36
54139: EQUAL
54140: IFFALSE 54150
// sTools := true ;
54142: LD_ADDR_EXP 94
54146: PUSH
54147: LD_INT 1
54149: ST_TO_ADDR
// if p3 = 101 then
54150: LD_VAR 0 3
54154: PUSH
54155: LD_INT 101
54157: EQUAL
54158: IFFALSE 54168
// sSold := true ;
54160: LD_ADDR_EXP 59
54164: PUSH
54165: LD_INT 1
54167: ST_TO_ADDR
// if p3 = 102 then
54168: LD_VAR 0 3
54172: PUSH
54173: LD_INT 102
54175: EQUAL
54176: IFFALSE 54186
// sDiff := true ;
54178: LD_ADDR_EXP 60
54182: PUSH
54183: LD_INT 1
54185: ST_TO_ADDR
// if p3 = 103 then
54186: LD_VAR 0 3
54190: PUSH
54191: LD_INT 103
54193: EQUAL
54194: IFFALSE 54204
// sFog := true ;
54196: LD_ADDR_EXP 63
54200: PUSH
54201: LD_INT 1
54203: ST_TO_ADDR
// if p3 = 104 then
54204: LD_VAR 0 3
54208: PUSH
54209: LD_INT 104
54211: EQUAL
54212: IFFALSE 54222
// sReset := true ;
54214: LD_ADDR_EXP 64
54218: PUSH
54219: LD_INT 1
54221: ST_TO_ADDR
// if p3 = 105 then
54222: LD_VAR 0 3
54226: PUSH
54227: LD_INT 105
54229: EQUAL
54230: IFFALSE 54240
// sSun := true ;
54232: LD_ADDR_EXP 65
54236: PUSH
54237: LD_INT 1
54239: ST_TO_ADDR
// if p3 = 106 then
54240: LD_VAR 0 3
54244: PUSH
54245: LD_INT 106
54247: EQUAL
54248: IFFALSE 54258
// sTiger := true ;
54250: LD_ADDR_EXP 61
54254: PUSH
54255: LD_INT 1
54257: ST_TO_ADDR
// if p3 = 107 then
54258: LD_VAR 0 3
54262: PUSH
54263: LD_INT 107
54265: EQUAL
54266: IFFALSE 54276
// sBomb := true ;
54268: LD_ADDR_EXP 62
54272: PUSH
54273: LD_INT 1
54275: ST_TO_ADDR
// if p3 = 108 then
54276: LD_VAR 0 3
54280: PUSH
54281: LD_INT 108
54283: EQUAL
54284: IFFALSE 54294
// sWound := true ;
54286: LD_ADDR_EXP 70
54290: PUSH
54291: LD_INT 1
54293: ST_TO_ADDR
// if p3 = 109 then
54294: LD_VAR 0 3
54298: PUSH
54299: LD_INT 109
54301: EQUAL
54302: IFFALSE 54312
// sBetray := true ;
54304: LD_ADDR_EXP 74
54308: PUSH
54309: LD_INT 1
54311: ST_TO_ADDR
// if p3 = 110 then
54312: LD_VAR 0 3
54316: PUSH
54317: LD_INT 110
54319: EQUAL
54320: IFFALSE 54330
// sContamin := true ;
54322: LD_ADDR_EXP 75
54326: PUSH
54327: LD_INT 1
54329: ST_TO_ADDR
// if p3 = 111 then
54330: LD_VAR 0 3
54334: PUSH
54335: LD_INT 111
54337: EQUAL
54338: IFFALSE 54348
// sOil := true ;
54340: LD_ADDR_EXP 77
54344: PUSH
54345: LD_INT 1
54347: ST_TO_ADDR
// if p3 = 112 then
54348: LD_VAR 0 3
54352: PUSH
54353: LD_INT 112
54355: EQUAL
54356: IFFALSE 54366
// sStu := true ;
54358: LD_ADDR_EXP 81
54362: PUSH
54363: LD_INT 1
54365: ST_TO_ADDR
// if p3 = 113 then
54366: LD_VAR 0 3
54370: PUSH
54371: LD_INT 113
54373: EQUAL
54374: IFFALSE 54384
// sBazooka := true ;
54376: LD_ADDR_EXP 84
54380: PUSH
54381: LD_INT 1
54383: ST_TO_ADDR
// if p3 = 114 then
54384: LD_VAR 0 3
54388: PUSH
54389: LD_INT 114
54391: EQUAL
54392: IFFALSE 54402
// sMortar := true ;
54394: LD_ADDR_EXP 85
54398: PUSH
54399: LD_INT 1
54401: ST_TO_ADDR
// if p3 = 115 then
54402: LD_VAR 0 3
54406: PUSH
54407: LD_INT 115
54409: EQUAL
54410: IFFALSE 54420
// sRanger := true ;
54412: LD_ADDR_EXP 95
54416: PUSH
54417: LD_INT 1
54419: ST_TO_ADDR
// if p3 = 116 then
54420: LD_VAR 0 3
54424: PUSH
54425: LD_INT 116
54427: EQUAL
54428: IFFALSE 54438
// sComputer := true ;
54430: LD_ADDR_EXP 96
54434: PUSH
54435: LD_INT 1
54437: ST_TO_ADDR
// if p3 = 117 then
54438: LD_VAR 0 3
54442: PUSH
54443: LD_INT 117
54445: EQUAL
54446: IFFALSE 54456
// s30 := true ;
54448: LD_ADDR_EXP 97
54452: PUSH
54453: LD_INT 1
54455: ST_TO_ADDR
// if p3 = 118 then
54456: LD_VAR 0 3
54460: PUSH
54461: LD_INT 118
54463: EQUAL
54464: IFFALSE 54474
// s60 := true ;
54466: LD_ADDR_EXP 98
54470: PUSH
54471: LD_INT 1
54473: ST_TO_ADDR
// end ; if p2 = hack_mode then
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 101
54481: EQUAL
54482: IFFALSE 54610
// begin case p3 of 1 :
54484: LD_VAR 0 3
54488: PUSH
54489: LD_INT 1
54491: DOUBLE
54492: EQUAL
54493: IFTRUE 54497
54495: GO 54504
54497: POP
// hHackUnlimitedResources ; 2 :
54498: CALL 66757 0 0
54502: GO 54610
54504: LD_INT 2
54506: DOUBLE
54507: EQUAL
54508: IFTRUE 54512
54510: GO 54519
54512: POP
// hHackSetLevel10 ; 3 :
54513: CALL 66890 0 0
54517: GO 54610
54519: LD_INT 3
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54527
54525: GO 54534
54527: POP
// hHackSetLevel10YourUnits ; 4 :
54528: CALL 66975 0 0
54532: GO 54610
54534: LD_INT 4
54536: DOUBLE
54537: EQUAL
54538: IFTRUE 54542
54540: GO 54549
54542: POP
// hHackInvincible ; 5 :
54543: CALL 67423 0 0
54547: GO 54610
54549: LD_INT 5
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54557
54555: GO 54564
54557: POP
// hHackInvisible ; 6 :
54558: CALL 67534 0 0
54562: GO 54610
54564: LD_INT 6
54566: DOUBLE
54567: EQUAL
54568: IFTRUE 54572
54570: GO 54579
54572: POP
// hHackChangeYourSide ; 7 :
54573: CALL 67591 0 0
54577: GO 54610
54579: LD_INT 7
54581: DOUBLE
54582: EQUAL
54583: IFTRUE 54587
54585: GO 54594
54587: POP
// hHackChangeUnitSide ; 8 :
54588: CALL 67633 0 0
54592: GO 54610
54594: LD_INT 8
54596: DOUBLE
54597: EQUAL
54598: IFTRUE 54602
54600: GO 54609
54602: POP
// hHackFog ; end ;
54603: CALL 67734 0 0
54607: GO 54610
54609: POP
// end ; if p2 = game_save_mode then
54610: LD_VAR 0 2
54614: PUSH
54615: LD_INT 102
54617: EQUAL
54618: IFFALSE 54673
// begin if p3 = 1 then
54620: LD_VAR 0 3
54624: PUSH
54625: LD_INT 1
54627: EQUAL
54628: IFFALSE 54640
// globalGameSaveCounter := p4 ;
54630: LD_ADDR_EXP 41
54634: PUSH
54635: LD_VAR 0 4
54639: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54640: LD_VAR 0 3
54644: PUSH
54645: LD_INT 2
54647: EQUAL
54648: PUSH
54649: LD_EXP 41
54653: AND
54654: IFFALSE 54673
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54656: LD_STRING setGameSaveCounter(
54658: PUSH
54659: LD_EXP 41
54663: STR
54664: PUSH
54665: LD_STRING )
54667: STR
54668: PPUSH
54669: CALL_OW 559
// end ; end ;
54673: LD_VAR 0 7
54677: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54678: LD_INT 0
54680: PPUSH
// streamModeActive := false ;
54681: LD_ADDR_EXP 42
54685: PUSH
54686: LD_INT 0
54688: ST_TO_ADDR
// normalCounter := 36 ;
54689: LD_ADDR_EXP 43
54693: PUSH
54694: LD_INT 36
54696: ST_TO_ADDR
// hardcoreCounter := 18 ;
54697: LD_ADDR_EXP 44
54701: PUSH
54702: LD_INT 18
54704: ST_TO_ADDR
// sRocket := false ;
54705: LD_ADDR_EXP 47
54709: PUSH
54710: LD_INT 0
54712: ST_TO_ADDR
// sSpeed := false ;
54713: LD_ADDR_EXP 46
54717: PUSH
54718: LD_INT 0
54720: ST_TO_ADDR
// sEngine := false ;
54721: LD_ADDR_EXP 48
54725: PUSH
54726: LD_INT 0
54728: ST_TO_ADDR
// sSpec := false ;
54729: LD_ADDR_EXP 45
54733: PUSH
54734: LD_INT 0
54736: ST_TO_ADDR
// sLevel := false ;
54737: LD_ADDR_EXP 49
54741: PUSH
54742: LD_INT 0
54744: ST_TO_ADDR
// sArmoury := false ;
54745: LD_ADDR_EXP 50
54749: PUSH
54750: LD_INT 0
54752: ST_TO_ADDR
// sRadar := false ;
54753: LD_ADDR_EXP 51
54757: PUSH
54758: LD_INT 0
54760: ST_TO_ADDR
// sBunker := false ;
54761: LD_ADDR_EXP 52
54765: PUSH
54766: LD_INT 0
54768: ST_TO_ADDR
// sHack := false ;
54769: LD_ADDR_EXP 53
54773: PUSH
54774: LD_INT 0
54776: ST_TO_ADDR
// sFire := false ;
54777: LD_ADDR_EXP 54
54781: PUSH
54782: LD_INT 0
54784: ST_TO_ADDR
// sRefresh := false ;
54785: LD_ADDR_EXP 55
54789: PUSH
54790: LD_INT 0
54792: ST_TO_ADDR
// sExp := false ;
54793: LD_ADDR_EXP 56
54797: PUSH
54798: LD_INT 0
54800: ST_TO_ADDR
// sDepot := false ;
54801: LD_ADDR_EXP 57
54805: PUSH
54806: LD_INT 0
54808: ST_TO_ADDR
// sFlag := false ;
54809: LD_ADDR_EXP 58
54813: PUSH
54814: LD_INT 0
54816: ST_TO_ADDR
// sKamikadze := false ;
54817: LD_ADDR_EXP 66
54821: PUSH
54822: LD_INT 0
54824: ST_TO_ADDR
// sTroll := false ;
54825: LD_ADDR_EXP 67
54829: PUSH
54830: LD_INT 0
54832: ST_TO_ADDR
// sSlow := false ;
54833: LD_ADDR_EXP 68
54837: PUSH
54838: LD_INT 0
54840: ST_TO_ADDR
// sLack := false ;
54841: LD_ADDR_EXP 69
54845: PUSH
54846: LD_INT 0
54848: ST_TO_ADDR
// sTank := false ;
54849: LD_ADDR_EXP 71
54853: PUSH
54854: LD_INT 0
54856: ST_TO_ADDR
// sRemote := false ;
54857: LD_ADDR_EXP 72
54861: PUSH
54862: LD_INT 0
54864: ST_TO_ADDR
// sPowell := false ;
54865: LD_ADDR_EXP 73
54869: PUSH
54870: LD_INT 0
54872: ST_TO_ADDR
// sTeleport := false ;
54873: LD_ADDR_EXP 76
54877: PUSH
54878: LD_INT 0
54880: ST_TO_ADDR
// sOilTower := false ;
54881: LD_ADDR_EXP 78
54885: PUSH
54886: LD_INT 0
54888: ST_TO_ADDR
// sShovel := false ;
54889: LD_ADDR_EXP 79
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// sSheik := false ;
54897: LD_ADDR_EXP 80
54901: PUSH
54902: LD_INT 0
54904: ST_TO_ADDR
// sEarthquake := false ;
54905: LD_ADDR_EXP 82
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
// sAI := false ;
54913: LD_ADDR_EXP 83
54917: PUSH
54918: LD_INT 0
54920: ST_TO_ADDR
// sCargo := false ;
54921: LD_ADDR_EXP 86
54925: PUSH
54926: LD_INT 0
54928: ST_TO_ADDR
// sDLaser := false ;
54929: LD_ADDR_EXP 87
54933: PUSH
54934: LD_INT 0
54936: ST_TO_ADDR
// sExchange := false ;
54937: LD_ADDR_EXP 88
54941: PUSH
54942: LD_INT 0
54944: ST_TO_ADDR
// sFac := false ;
54945: LD_ADDR_EXP 89
54949: PUSH
54950: LD_INT 0
54952: ST_TO_ADDR
// sPower := false ;
54953: LD_ADDR_EXP 90
54957: PUSH
54958: LD_INT 0
54960: ST_TO_ADDR
// sRandom := false ;
54961: LD_ADDR_EXP 91
54965: PUSH
54966: LD_INT 0
54968: ST_TO_ADDR
// sShield := false ;
54969: LD_ADDR_EXP 92
54973: PUSH
54974: LD_INT 0
54976: ST_TO_ADDR
// sTime := false ;
54977: LD_ADDR_EXP 93
54981: PUSH
54982: LD_INT 0
54984: ST_TO_ADDR
// sTools := false ;
54985: LD_ADDR_EXP 94
54989: PUSH
54990: LD_INT 0
54992: ST_TO_ADDR
// sSold := false ;
54993: LD_ADDR_EXP 59
54997: PUSH
54998: LD_INT 0
55000: ST_TO_ADDR
// sDiff := false ;
55001: LD_ADDR_EXP 60
55005: PUSH
55006: LD_INT 0
55008: ST_TO_ADDR
// sFog := false ;
55009: LD_ADDR_EXP 63
55013: PUSH
55014: LD_INT 0
55016: ST_TO_ADDR
// sReset := false ;
55017: LD_ADDR_EXP 64
55021: PUSH
55022: LD_INT 0
55024: ST_TO_ADDR
// sSun := false ;
55025: LD_ADDR_EXP 65
55029: PUSH
55030: LD_INT 0
55032: ST_TO_ADDR
// sTiger := false ;
55033: LD_ADDR_EXP 61
55037: PUSH
55038: LD_INT 0
55040: ST_TO_ADDR
// sBomb := false ;
55041: LD_ADDR_EXP 62
55045: PUSH
55046: LD_INT 0
55048: ST_TO_ADDR
// sWound := false ;
55049: LD_ADDR_EXP 70
55053: PUSH
55054: LD_INT 0
55056: ST_TO_ADDR
// sBetray := false ;
55057: LD_ADDR_EXP 74
55061: PUSH
55062: LD_INT 0
55064: ST_TO_ADDR
// sContamin := false ;
55065: LD_ADDR_EXP 75
55069: PUSH
55070: LD_INT 0
55072: ST_TO_ADDR
// sOil := false ;
55073: LD_ADDR_EXP 77
55077: PUSH
55078: LD_INT 0
55080: ST_TO_ADDR
// sStu := false ;
55081: LD_ADDR_EXP 81
55085: PUSH
55086: LD_INT 0
55088: ST_TO_ADDR
// sBazooka := false ;
55089: LD_ADDR_EXP 84
55093: PUSH
55094: LD_INT 0
55096: ST_TO_ADDR
// sMortar := false ;
55097: LD_ADDR_EXP 85
55101: PUSH
55102: LD_INT 0
55104: ST_TO_ADDR
// sRanger := false ;
55105: LD_ADDR_EXP 95
55109: PUSH
55110: LD_INT 0
55112: ST_TO_ADDR
// sComputer := false ;
55113: LD_ADDR_EXP 96
55117: PUSH
55118: LD_INT 0
55120: ST_TO_ADDR
// s30 := false ;
55121: LD_ADDR_EXP 97
55125: PUSH
55126: LD_INT 0
55128: ST_TO_ADDR
// s60 := false ;
55129: LD_ADDR_EXP 98
55133: PUSH
55134: LD_INT 0
55136: ST_TO_ADDR
// end ;
55137: LD_VAR 0 1
55141: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55142: LD_INT 0
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
// result := [ ] ;
55151: LD_ADDR_VAR 0 2
55155: PUSH
55156: EMPTY
55157: ST_TO_ADDR
// if campaign_id = 1 then
55158: LD_OWVAR 69
55162: PUSH
55163: LD_INT 1
55165: EQUAL
55166: IFFALSE 58332
// begin case mission_number of 1 :
55168: LD_OWVAR 70
55172: PUSH
55173: LD_INT 1
55175: DOUBLE
55176: EQUAL
55177: IFTRUE 55181
55179: GO 55257
55181: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55182: LD_ADDR_VAR 0 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 4
55192: PUSH
55193: LD_INT 11
55195: PUSH
55196: LD_INT 12
55198: PUSH
55199: LD_INT 15
55201: PUSH
55202: LD_INT 16
55204: PUSH
55205: LD_INT 22
55207: PUSH
55208: LD_INT 23
55210: PUSH
55211: LD_INT 26
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 101
55227: PUSH
55228: LD_INT 102
55230: PUSH
55231: LD_INT 106
55233: PUSH
55234: LD_INT 116
55236: PUSH
55237: LD_INT 117
55239: PUSH
55240: LD_INT 118
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: ST_TO_ADDR
55255: GO 58330
55257: LD_INT 2
55259: DOUBLE
55260: EQUAL
55261: IFTRUE 55265
55263: GO 55349
55265: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55266: LD_ADDR_VAR 0 2
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 11
55279: PUSH
55280: LD_INT 12
55282: PUSH
55283: LD_INT 15
55285: PUSH
55286: LD_INT 16
55288: PUSH
55289: LD_INT 22
55291: PUSH
55292: LD_INT 23
55294: PUSH
55295: LD_INT 26
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 101
55311: PUSH
55312: LD_INT 102
55314: PUSH
55315: LD_INT 105
55317: PUSH
55318: LD_INT 106
55320: PUSH
55321: LD_INT 108
55323: PUSH
55324: LD_INT 116
55326: PUSH
55327: LD_INT 117
55329: PUSH
55330: LD_INT 118
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: ST_TO_ADDR
55347: GO 58330
55349: LD_INT 3
55351: DOUBLE
55352: EQUAL
55353: IFTRUE 55357
55355: GO 55445
55357: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55358: LD_ADDR_VAR 0 2
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: LD_INT 5
55371: PUSH
55372: LD_INT 11
55374: PUSH
55375: LD_INT 12
55377: PUSH
55378: LD_INT 15
55380: PUSH
55381: LD_INT 16
55383: PUSH
55384: LD_INT 22
55386: PUSH
55387: LD_INT 26
55389: PUSH
55390: LD_INT 36
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 101
55407: PUSH
55408: LD_INT 102
55410: PUSH
55411: LD_INT 105
55413: PUSH
55414: LD_INT 106
55416: PUSH
55417: LD_INT 108
55419: PUSH
55420: LD_INT 116
55422: PUSH
55423: LD_INT 117
55425: PUSH
55426: LD_INT 118
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: ST_TO_ADDR
55443: GO 58330
55445: LD_INT 4
55447: DOUBLE
55448: EQUAL
55449: IFTRUE 55453
55451: GO 55549
55453: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55454: LD_ADDR_VAR 0 2
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: LD_INT 5
55467: PUSH
55468: LD_INT 8
55470: PUSH
55471: LD_INT 11
55473: PUSH
55474: LD_INT 12
55476: PUSH
55477: LD_INT 15
55479: PUSH
55480: LD_INT 16
55482: PUSH
55483: LD_INT 22
55485: PUSH
55486: LD_INT 23
55488: PUSH
55489: LD_INT 26
55491: PUSH
55492: LD_INT 36
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 101
55511: PUSH
55512: LD_INT 102
55514: PUSH
55515: LD_INT 105
55517: PUSH
55518: LD_INT 106
55520: PUSH
55521: LD_INT 108
55523: PUSH
55524: LD_INT 116
55526: PUSH
55527: LD_INT 117
55529: PUSH
55530: LD_INT 118
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: ST_TO_ADDR
55547: GO 58330
55549: LD_INT 5
55551: DOUBLE
55552: EQUAL
55553: IFTRUE 55557
55555: GO 55669
55557: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55558: LD_ADDR_VAR 0 2
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 4
55568: PUSH
55569: LD_INT 5
55571: PUSH
55572: LD_INT 6
55574: PUSH
55575: LD_INT 8
55577: PUSH
55578: LD_INT 11
55580: PUSH
55581: LD_INT 12
55583: PUSH
55584: LD_INT 15
55586: PUSH
55587: LD_INT 16
55589: PUSH
55590: LD_INT 22
55592: PUSH
55593: LD_INT 23
55595: PUSH
55596: LD_INT 25
55598: PUSH
55599: LD_INT 26
55601: PUSH
55602: LD_INT 36
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 101
55623: PUSH
55624: LD_INT 102
55626: PUSH
55627: LD_INT 105
55629: PUSH
55630: LD_INT 106
55632: PUSH
55633: LD_INT 108
55635: PUSH
55636: LD_INT 109
55638: PUSH
55639: LD_INT 112
55641: PUSH
55642: LD_INT 116
55644: PUSH
55645: LD_INT 117
55647: PUSH
55648: LD_INT 118
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: ST_TO_ADDR
55667: GO 58330
55669: LD_INT 6
55671: DOUBLE
55672: EQUAL
55673: IFTRUE 55677
55675: GO 55809
55677: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55678: LD_ADDR_VAR 0 2
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: LD_INT 6
55694: PUSH
55695: LD_INT 8
55697: PUSH
55698: LD_INT 11
55700: PUSH
55701: LD_INT 12
55703: PUSH
55704: LD_INT 15
55706: PUSH
55707: LD_INT 16
55709: PUSH
55710: LD_INT 20
55712: PUSH
55713: LD_INT 21
55715: PUSH
55716: LD_INT 22
55718: PUSH
55719: LD_INT 23
55721: PUSH
55722: LD_INT 25
55724: PUSH
55725: LD_INT 26
55727: PUSH
55728: LD_INT 30
55730: PUSH
55731: LD_INT 31
55733: PUSH
55734: LD_INT 32
55736: PUSH
55737: LD_INT 36
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 101
55763: PUSH
55764: LD_INT 102
55766: PUSH
55767: LD_INT 105
55769: PUSH
55770: LD_INT 106
55772: PUSH
55773: LD_INT 108
55775: PUSH
55776: LD_INT 109
55778: PUSH
55779: LD_INT 112
55781: PUSH
55782: LD_INT 116
55784: PUSH
55785: LD_INT 117
55787: PUSH
55788: LD_INT 118
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: ST_TO_ADDR
55807: GO 58330
55809: LD_INT 7
55811: DOUBLE
55812: EQUAL
55813: IFTRUE 55817
55815: GO 55929
55817: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55818: LD_ADDR_VAR 0 2
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 4
55828: PUSH
55829: LD_INT 5
55831: PUSH
55832: LD_INT 7
55834: PUSH
55835: LD_INT 11
55837: PUSH
55838: LD_INT 12
55840: PUSH
55841: LD_INT 15
55843: PUSH
55844: LD_INT 16
55846: PUSH
55847: LD_INT 20
55849: PUSH
55850: LD_INT 21
55852: PUSH
55853: LD_INT 22
55855: PUSH
55856: LD_INT 23
55858: PUSH
55859: LD_INT 25
55861: PUSH
55862: LD_INT 26
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 101
55883: PUSH
55884: LD_INT 102
55886: PUSH
55887: LD_INT 103
55889: PUSH
55890: LD_INT 105
55892: PUSH
55893: LD_INT 106
55895: PUSH
55896: LD_INT 108
55898: PUSH
55899: LD_INT 112
55901: PUSH
55902: LD_INT 116
55904: PUSH
55905: LD_INT 117
55907: PUSH
55908: LD_INT 118
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: ST_TO_ADDR
55927: GO 58330
55929: LD_INT 8
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55937
55935: GO 56077
55937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55938: LD_ADDR_VAR 0 2
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 4
55948: PUSH
55949: LD_INT 5
55951: PUSH
55952: LD_INT 6
55954: PUSH
55955: LD_INT 7
55957: PUSH
55958: LD_INT 8
55960: PUSH
55961: LD_INT 11
55963: PUSH
55964: LD_INT 12
55966: PUSH
55967: LD_INT 15
55969: PUSH
55970: LD_INT 16
55972: PUSH
55973: LD_INT 20
55975: PUSH
55976: LD_INT 21
55978: PUSH
55979: LD_INT 22
55981: PUSH
55982: LD_INT 23
55984: PUSH
55985: LD_INT 25
55987: PUSH
55988: LD_INT 26
55990: PUSH
55991: LD_INT 30
55993: PUSH
55994: LD_INT 31
55996: PUSH
55997: LD_INT 32
55999: PUSH
56000: LD_INT 36
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 101
56027: PUSH
56028: LD_INT 102
56030: PUSH
56031: LD_INT 103
56033: PUSH
56034: LD_INT 105
56036: PUSH
56037: LD_INT 106
56039: PUSH
56040: LD_INT 108
56042: PUSH
56043: LD_INT 109
56045: PUSH
56046: LD_INT 112
56048: PUSH
56049: LD_INT 116
56051: PUSH
56052: LD_INT 117
56054: PUSH
56055: LD_INT 118
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: ST_TO_ADDR
56075: GO 58330
56077: LD_INT 9
56079: DOUBLE
56080: EQUAL
56081: IFTRUE 56085
56083: GO 56233
56085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56086: LD_ADDR_VAR 0 2
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: LD_INT 5
56099: PUSH
56100: LD_INT 6
56102: PUSH
56103: LD_INT 7
56105: PUSH
56106: LD_INT 8
56108: PUSH
56109: LD_INT 11
56111: PUSH
56112: LD_INT 12
56114: PUSH
56115: LD_INT 15
56117: PUSH
56118: LD_INT 16
56120: PUSH
56121: LD_INT 20
56123: PUSH
56124: LD_INT 21
56126: PUSH
56127: LD_INT 22
56129: PUSH
56130: LD_INT 23
56132: PUSH
56133: LD_INT 25
56135: PUSH
56136: LD_INT 26
56138: PUSH
56139: LD_INT 28
56141: PUSH
56142: LD_INT 30
56144: PUSH
56145: LD_INT 31
56147: PUSH
56148: LD_INT 32
56150: PUSH
56151: LD_INT 36
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 101
56179: PUSH
56180: LD_INT 102
56182: PUSH
56183: LD_INT 103
56185: PUSH
56186: LD_INT 105
56188: PUSH
56189: LD_INT 106
56191: PUSH
56192: LD_INT 108
56194: PUSH
56195: LD_INT 109
56197: PUSH
56198: LD_INT 112
56200: PUSH
56201: LD_INT 114
56203: PUSH
56204: LD_INT 116
56206: PUSH
56207: LD_INT 117
56209: PUSH
56210: LD_INT 118
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: ST_TO_ADDR
56231: GO 58330
56233: LD_INT 10
56235: DOUBLE
56236: EQUAL
56237: IFTRUE 56241
56239: GO 56437
56241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56242: LD_ADDR_VAR 0 2
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: LD_INT 5
56255: PUSH
56256: LD_INT 6
56258: PUSH
56259: LD_INT 7
56261: PUSH
56262: LD_INT 8
56264: PUSH
56265: LD_INT 9
56267: PUSH
56268: LD_INT 10
56270: PUSH
56271: LD_INT 11
56273: PUSH
56274: LD_INT 12
56276: PUSH
56277: LD_INT 13
56279: PUSH
56280: LD_INT 14
56282: PUSH
56283: LD_INT 15
56285: PUSH
56286: LD_INT 16
56288: PUSH
56289: LD_INT 17
56291: PUSH
56292: LD_INT 18
56294: PUSH
56295: LD_INT 19
56297: PUSH
56298: LD_INT 20
56300: PUSH
56301: LD_INT 21
56303: PUSH
56304: LD_INT 22
56306: PUSH
56307: LD_INT 23
56309: PUSH
56310: LD_INT 24
56312: PUSH
56313: LD_INT 25
56315: PUSH
56316: LD_INT 26
56318: PUSH
56319: LD_INT 28
56321: PUSH
56322: LD_INT 30
56324: PUSH
56325: LD_INT 31
56327: PUSH
56328: LD_INT 32
56330: PUSH
56331: LD_INT 36
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 101
56367: PUSH
56368: LD_INT 102
56370: PUSH
56371: LD_INT 103
56373: PUSH
56374: LD_INT 104
56376: PUSH
56377: LD_INT 105
56379: PUSH
56380: LD_INT 106
56382: PUSH
56383: LD_INT 107
56385: PUSH
56386: LD_INT 108
56388: PUSH
56389: LD_INT 109
56391: PUSH
56392: LD_INT 110
56394: PUSH
56395: LD_INT 111
56397: PUSH
56398: LD_INT 112
56400: PUSH
56401: LD_INT 114
56403: PUSH
56404: LD_INT 116
56406: PUSH
56407: LD_INT 117
56409: PUSH
56410: LD_INT 118
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: ST_TO_ADDR
56435: GO 58330
56437: LD_INT 11
56439: DOUBLE
56440: EQUAL
56441: IFTRUE 56445
56443: GO 56649
56445: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56446: LD_ADDR_VAR 0 2
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: LD_INT 6
56465: PUSH
56466: LD_INT 7
56468: PUSH
56469: LD_INT 8
56471: PUSH
56472: LD_INT 9
56474: PUSH
56475: LD_INT 10
56477: PUSH
56478: LD_INT 11
56480: PUSH
56481: LD_INT 12
56483: PUSH
56484: LD_INT 13
56486: PUSH
56487: LD_INT 14
56489: PUSH
56490: LD_INT 15
56492: PUSH
56493: LD_INT 16
56495: PUSH
56496: LD_INT 17
56498: PUSH
56499: LD_INT 18
56501: PUSH
56502: LD_INT 19
56504: PUSH
56505: LD_INT 20
56507: PUSH
56508: LD_INT 21
56510: PUSH
56511: LD_INT 22
56513: PUSH
56514: LD_INT 23
56516: PUSH
56517: LD_INT 24
56519: PUSH
56520: LD_INT 25
56522: PUSH
56523: LD_INT 26
56525: PUSH
56526: LD_INT 28
56528: PUSH
56529: LD_INT 30
56531: PUSH
56532: LD_INT 31
56534: PUSH
56535: LD_INT 32
56537: PUSH
56538: LD_INT 34
56540: PUSH
56541: LD_INT 36
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 101
56579: PUSH
56580: LD_INT 102
56582: PUSH
56583: LD_INT 103
56585: PUSH
56586: LD_INT 104
56588: PUSH
56589: LD_INT 105
56591: PUSH
56592: LD_INT 106
56594: PUSH
56595: LD_INT 107
56597: PUSH
56598: LD_INT 108
56600: PUSH
56601: LD_INT 109
56603: PUSH
56604: LD_INT 110
56606: PUSH
56607: LD_INT 111
56609: PUSH
56610: LD_INT 112
56612: PUSH
56613: LD_INT 114
56615: PUSH
56616: LD_INT 116
56618: PUSH
56619: LD_INT 117
56621: PUSH
56622: LD_INT 118
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: ST_TO_ADDR
56647: GO 58330
56649: LD_INT 12
56651: DOUBLE
56652: EQUAL
56653: IFTRUE 56657
56655: GO 56877
56657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 4
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: LD_INT 6
56680: PUSH
56681: LD_INT 7
56683: PUSH
56684: LD_INT 8
56686: PUSH
56687: LD_INT 9
56689: PUSH
56690: LD_INT 10
56692: PUSH
56693: LD_INT 11
56695: PUSH
56696: LD_INT 12
56698: PUSH
56699: LD_INT 13
56701: PUSH
56702: LD_INT 14
56704: PUSH
56705: LD_INT 15
56707: PUSH
56708: LD_INT 16
56710: PUSH
56711: LD_INT 17
56713: PUSH
56714: LD_INT 18
56716: PUSH
56717: LD_INT 19
56719: PUSH
56720: LD_INT 20
56722: PUSH
56723: LD_INT 21
56725: PUSH
56726: LD_INT 22
56728: PUSH
56729: LD_INT 23
56731: PUSH
56732: LD_INT 24
56734: PUSH
56735: LD_INT 25
56737: PUSH
56738: LD_INT 26
56740: PUSH
56741: LD_INT 27
56743: PUSH
56744: LD_INT 28
56746: PUSH
56747: LD_INT 30
56749: PUSH
56750: LD_INT 31
56752: PUSH
56753: LD_INT 32
56755: PUSH
56756: LD_INT 33
56758: PUSH
56759: LD_INT 34
56761: PUSH
56762: LD_INT 36
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 101
56803: PUSH
56804: LD_INT 102
56806: PUSH
56807: LD_INT 103
56809: PUSH
56810: LD_INT 104
56812: PUSH
56813: LD_INT 105
56815: PUSH
56816: LD_INT 106
56818: PUSH
56819: LD_INT 107
56821: PUSH
56822: LD_INT 108
56824: PUSH
56825: LD_INT 109
56827: PUSH
56828: LD_INT 110
56830: PUSH
56831: LD_INT 111
56833: PUSH
56834: LD_INT 112
56836: PUSH
56837: LD_INT 113
56839: PUSH
56840: LD_INT 114
56842: PUSH
56843: LD_INT 116
56845: PUSH
56846: LD_INT 117
56848: PUSH
56849: LD_INT 118
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: ST_TO_ADDR
56875: GO 58330
56877: LD_INT 13
56879: DOUBLE
56880: EQUAL
56881: IFTRUE 56885
56883: GO 57093
56885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56886: LD_ADDR_VAR 0 2
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 4
56902: PUSH
56903: LD_INT 5
56905: PUSH
56906: LD_INT 8
56908: PUSH
56909: LD_INT 9
56911: PUSH
56912: LD_INT 10
56914: PUSH
56915: LD_INT 11
56917: PUSH
56918: LD_INT 12
56920: PUSH
56921: LD_INT 14
56923: PUSH
56924: LD_INT 15
56926: PUSH
56927: LD_INT 16
56929: PUSH
56930: LD_INT 17
56932: PUSH
56933: LD_INT 18
56935: PUSH
56936: LD_INT 19
56938: PUSH
56939: LD_INT 20
56941: PUSH
56942: LD_INT 21
56944: PUSH
56945: LD_INT 22
56947: PUSH
56948: LD_INT 23
56950: PUSH
56951: LD_INT 24
56953: PUSH
56954: LD_INT 25
56956: PUSH
56957: LD_INT 26
56959: PUSH
56960: LD_INT 27
56962: PUSH
56963: LD_INT 28
56965: PUSH
56966: LD_INT 30
56968: PUSH
56969: LD_INT 31
56971: PUSH
56972: LD_INT 32
56974: PUSH
56975: LD_INT 33
56977: PUSH
56978: LD_INT 34
56980: PUSH
56981: LD_INT 36
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 101
57019: PUSH
57020: LD_INT 102
57022: PUSH
57023: LD_INT 103
57025: PUSH
57026: LD_INT 104
57028: PUSH
57029: LD_INT 105
57031: PUSH
57032: LD_INT 106
57034: PUSH
57035: LD_INT 107
57037: PUSH
57038: LD_INT 108
57040: PUSH
57041: LD_INT 109
57043: PUSH
57044: LD_INT 110
57046: PUSH
57047: LD_INT 111
57049: PUSH
57050: LD_INT 112
57052: PUSH
57053: LD_INT 113
57055: PUSH
57056: LD_INT 114
57058: PUSH
57059: LD_INT 116
57061: PUSH
57062: LD_INT 117
57064: PUSH
57065: LD_INT 118
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: ST_TO_ADDR
57091: GO 58330
57093: LD_INT 14
57095: DOUBLE
57096: EQUAL
57097: IFTRUE 57101
57099: GO 57325
57101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57102: LD_ADDR_VAR 0 2
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 5
57121: PUSH
57122: LD_INT 6
57124: PUSH
57125: LD_INT 7
57127: PUSH
57128: LD_INT 8
57130: PUSH
57131: LD_INT 9
57133: PUSH
57134: LD_INT 10
57136: PUSH
57137: LD_INT 11
57139: PUSH
57140: LD_INT 12
57142: PUSH
57143: LD_INT 13
57145: PUSH
57146: LD_INT 14
57148: PUSH
57149: LD_INT 15
57151: PUSH
57152: LD_INT 16
57154: PUSH
57155: LD_INT 17
57157: PUSH
57158: LD_INT 18
57160: PUSH
57161: LD_INT 19
57163: PUSH
57164: LD_INT 20
57166: PUSH
57167: LD_INT 21
57169: PUSH
57170: LD_INT 22
57172: PUSH
57173: LD_INT 23
57175: PUSH
57176: LD_INT 24
57178: PUSH
57179: LD_INT 25
57181: PUSH
57182: LD_INT 26
57184: PUSH
57185: LD_INT 27
57187: PUSH
57188: LD_INT 28
57190: PUSH
57191: LD_INT 29
57193: PUSH
57194: LD_INT 30
57196: PUSH
57197: LD_INT 31
57199: PUSH
57200: LD_INT 32
57202: PUSH
57203: LD_INT 33
57205: PUSH
57206: LD_INT 34
57208: PUSH
57209: LD_INT 36
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 101
57251: PUSH
57252: LD_INT 102
57254: PUSH
57255: LD_INT 103
57257: PUSH
57258: LD_INT 104
57260: PUSH
57261: LD_INT 105
57263: PUSH
57264: LD_INT 106
57266: PUSH
57267: LD_INT 107
57269: PUSH
57270: LD_INT 108
57272: PUSH
57273: LD_INT 109
57275: PUSH
57276: LD_INT 110
57278: PUSH
57279: LD_INT 111
57281: PUSH
57282: LD_INT 112
57284: PUSH
57285: LD_INT 113
57287: PUSH
57288: LD_INT 114
57290: PUSH
57291: LD_INT 116
57293: PUSH
57294: LD_INT 117
57296: PUSH
57297: LD_INT 118
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: ST_TO_ADDR
57323: GO 58330
57325: LD_INT 15
57327: DOUBLE
57328: EQUAL
57329: IFTRUE 57333
57331: GO 57557
57333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57334: LD_ADDR_VAR 0 2
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 4
57350: PUSH
57351: LD_INT 5
57353: PUSH
57354: LD_INT 6
57356: PUSH
57357: LD_INT 7
57359: PUSH
57360: LD_INT 8
57362: PUSH
57363: LD_INT 9
57365: PUSH
57366: LD_INT 10
57368: PUSH
57369: LD_INT 11
57371: PUSH
57372: LD_INT 12
57374: PUSH
57375: LD_INT 13
57377: PUSH
57378: LD_INT 14
57380: PUSH
57381: LD_INT 15
57383: PUSH
57384: LD_INT 16
57386: PUSH
57387: LD_INT 17
57389: PUSH
57390: LD_INT 18
57392: PUSH
57393: LD_INT 19
57395: PUSH
57396: LD_INT 20
57398: PUSH
57399: LD_INT 21
57401: PUSH
57402: LD_INT 22
57404: PUSH
57405: LD_INT 23
57407: PUSH
57408: LD_INT 24
57410: PUSH
57411: LD_INT 25
57413: PUSH
57414: LD_INT 26
57416: PUSH
57417: LD_INT 27
57419: PUSH
57420: LD_INT 28
57422: PUSH
57423: LD_INT 29
57425: PUSH
57426: LD_INT 30
57428: PUSH
57429: LD_INT 31
57431: PUSH
57432: LD_INT 32
57434: PUSH
57435: LD_INT 33
57437: PUSH
57438: LD_INT 34
57440: PUSH
57441: LD_INT 36
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 101
57483: PUSH
57484: LD_INT 102
57486: PUSH
57487: LD_INT 103
57489: PUSH
57490: LD_INT 104
57492: PUSH
57493: LD_INT 105
57495: PUSH
57496: LD_INT 106
57498: PUSH
57499: LD_INT 107
57501: PUSH
57502: LD_INT 108
57504: PUSH
57505: LD_INT 109
57507: PUSH
57508: LD_INT 110
57510: PUSH
57511: LD_INT 111
57513: PUSH
57514: LD_INT 112
57516: PUSH
57517: LD_INT 113
57519: PUSH
57520: LD_INT 114
57522: PUSH
57523: LD_INT 116
57525: PUSH
57526: LD_INT 117
57528: PUSH
57529: LD_INT 118
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: ST_TO_ADDR
57555: GO 58330
57557: LD_INT 16
57559: DOUBLE
57560: EQUAL
57561: IFTRUE 57565
57563: GO 57701
57565: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57566: LD_ADDR_VAR 0 2
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 4
57576: PUSH
57577: LD_INT 5
57579: PUSH
57580: LD_INT 7
57582: PUSH
57583: LD_INT 11
57585: PUSH
57586: LD_INT 12
57588: PUSH
57589: LD_INT 15
57591: PUSH
57592: LD_INT 16
57594: PUSH
57595: LD_INT 20
57597: PUSH
57598: LD_INT 21
57600: PUSH
57601: LD_INT 22
57603: PUSH
57604: LD_INT 23
57606: PUSH
57607: LD_INT 25
57609: PUSH
57610: LD_INT 26
57612: PUSH
57613: LD_INT 30
57615: PUSH
57616: LD_INT 31
57618: PUSH
57619: LD_INT 32
57621: PUSH
57622: LD_INT 33
57624: PUSH
57625: LD_INT 34
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 101
57651: PUSH
57652: LD_INT 102
57654: PUSH
57655: LD_INT 103
57657: PUSH
57658: LD_INT 106
57660: PUSH
57661: LD_INT 108
57663: PUSH
57664: LD_INT 112
57666: PUSH
57667: LD_INT 113
57669: PUSH
57670: LD_INT 114
57672: PUSH
57673: LD_INT 116
57675: PUSH
57676: LD_INT 117
57678: PUSH
57679: LD_INT 118
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: ST_TO_ADDR
57699: GO 58330
57701: LD_INT 17
57703: DOUBLE
57704: EQUAL
57705: IFTRUE 57709
57707: GO 57933
57709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57710: LD_ADDR_VAR 0 2
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: LD_INT 5
57729: PUSH
57730: LD_INT 6
57732: PUSH
57733: LD_INT 7
57735: PUSH
57736: LD_INT 8
57738: PUSH
57739: LD_INT 9
57741: PUSH
57742: LD_INT 10
57744: PUSH
57745: LD_INT 11
57747: PUSH
57748: LD_INT 12
57750: PUSH
57751: LD_INT 13
57753: PUSH
57754: LD_INT 14
57756: PUSH
57757: LD_INT 15
57759: PUSH
57760: LD_INT 16
57762: PUSH
57763: LD_INT 17
57765: PUSH
57766: LD_INT 18
57768: PUSH
57769: LD_INT 19
57771: PUSH
57772: LD_INT 20
57774: PUSH
57775: LD_INT 21
57777: PUSH
57778: LD_INT 22
57780: PUSH
57781: LD_INT 23
57783: PUSH
57784: LD_INT 24
57786: PUSH
57787: LD_INT 25
57789: PUSH
57790: LD_INT 26
57792: PUSH
57793: LD_INT 27
57795: PUSH
57796: LD_INT 28
57798: PUSH
57799: LD_INT 29
57801: PUSH
57802: LD_INT 30
57804: PUSH
57805: LD_INT 31
57807: PUSH
57808: LD_INT 32
57810: PUSH
57811: LD_INT 33
57813: PUSH
57814: LD_INT 34
57816: PUSH
57817: LD_INT 36
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 101
57859: PUSH
57860: LD_INT 102
57862: PUSH
57863: LD_INT 103
57865: PUSH
57866: LD_INT 104
57868: PUSH
57869: LD_INT 105
57871: PUSH
57872: LD_INT 106
57874: PUSH
57875: LD_INT 107
57877: PUSH
57878: LD_INT 108
57880: PUSH
57881: LD_INT 109
57883: PUSH
57884: LD_INT 110
57886: PUSH
57887: LD_INT 111
57889: PUSH
57890: LD_INT 112
57892: PUSH
57893: LD_INT 113
57895: PUSH
57896: LD_INT 114
57898: PUSH
57899: LD_INT 116
57901: PUSH
57902: LD_INT 117
57904: PUSH
57905: LD_INT 118
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: ST_TO_ADDR
57931: GO 58330
57933: LD_INT 18
57935: DOUBLE
57936: EQUAL
57937: IFTRUE 57941
57939: GO 58089
57941: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57942: LD_ADDR_VAR 0 2
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 4
57952: PUSH
57953: LD_INT 5
57955: PUSH
57956: LD_INT 7
57958: PUSH
57959: LD_INT 11
57961: PUSH
57962: LD_INT 12
57964: PUSH
57965: LD_INT 15
57967: PUSH
57968: LD_INT 16
57970: PUSH
57971: LD_INT 20
57973: PUSH
57974: LD_INT 21
57976: PUSH
57977: LD_INT 22
57979: PUSH
57980: LD_INT 23
57982: PUSH
57983: LD_INT 25
57985: PUSH
57986: LD_INT 26
57988: PUSH
57989: LD_INT 30
57991: PUSH
57992: LD_INT 31
57994: PUSH
57995: LD_INT 32
57997: PUSH
57998: LD_INT 33
58000: PUSH
58001: LD_INT 34
58003: PUSH
58004: LD_INT 35
58006: PUSH
58007: LD_INT 36
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 101
58035: PUSH
58036: LD_INT 102
58038: PUSH
58039: LD_INT 103
58041: PUSH
58042: LD_INT 106
58044: PUSH
58045: LD_INT 108
58047: PUSH
58048: LD_INT 112
58050: PUSH
58051: LD_INT 113
58053: PUSH
58054: LD_INT 114
58056: PUSH
58057: LD_INT 115
58059: PUSH
58060: LD_INT 116
58062: PUSH
58063: LD_INT 117
58065: PUSH
58066: LD_INT 118
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: ST_TO_ADDR
58087: GO 58330
58089: LD_INT 19
58091: DOUBLE
58092: EQUAL
58093: IFTRUE 58097
58095: GO 58329
58097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58098: LD_ADDR_VAR 0 2
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: LD_INT 6
58120: PUSH
58121: LD_INT 7
58123: PUSH
58124: LD_INT 8
58126: PUSH
58127: LD_INT 9
58129: PUSH
58130: LD_INT 10
58132: PUSH
58133: LD_INT 11
58135: PUSH
58136: LD_INT 12
58138: PUSH
58139: LD_INT 13
58141: PUSH
58142: LD_INT 14
58144: PUSH
58145: LD_INT 15
58147: PUSH
58148: LD_INT 16
58150: PUSH
58151: LD_INT 17
58153: PUSH
58154: LD_INT 18
58156: PUSH
58157: LD_INT 19
58159: PUSH
58160: LD_INT 20
58162: PUSH
58163: LD_INT 21
58165: PUSH
58166: LD_INT 22
58168: PUSH
58169: LD_INT 23
58171: PUSH
58172: LD_INT 24
58174: PUSH
58175: LD_INT 25
58177: PUSH
58178: LD_INT 26
58180: PUSH
58181: LD_INT 27
58183: PUSH
58184: LD_INT 28
58186: PUSH
58187: LD_INT 29
58189: PUSH
58190: LD_INT 30
58192: PUSH
58193: LD_INT 31
58195: PUSH
58196: LD_INT 32
58198: PUSH
58199: LD_INT 33
58201: PUSH
58202: LD_INT 34
58204: PUSH
58205: LD_INT 35
58207: PUSH
58208: LD_INT 36
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 101
58251: PUSH
58252: LD_INT 102
58254: PUSH
58255: LD_INT 103
58257: PUSH
58258: LD_INT 104
58260: PUSH
58261: LD_INT 105
58263: PUSH
58264: LD_INT 106
58266: PUSH
58267: LD_INT 107
58269: PUSH
58270: LD_INT 108
58272: PUSH
58273: LD_INT 109
58275: PUSH
58276: LD_INT 110
58278: PUSH
58279: LD_INT 111
58281: PUSH
58282: LD_INT 112
58284: PUSH
58285: LD_INT 113
58287: PUSH
58288: LD_INT 114
58290: PUSH
58291: LD_INT 115
58293: PUSH
58294: LD_INT 116
58296: PUSH
58297: LD_INT 117
58299: PUSH
58300: LD_INT 118
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
58327: GO 58330
58329: POP
// end else
58330: GO 58561
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58332: LD_ADDR_VAR 0 2
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: LD_INT 6
58354: PUSH
58355: LD_INT 7
58357: PUSH
58358: LD_INT 8
58360: PUSH
58361: LD_INT 9
58363: PUSH
58364: LD_INT 10
58366: PUSH
58367: LD_INT 11
58369: PUSH
58370: LD_INT 12
58372: PUSH
58373: LD_INT 13
58375: PUSH
58376: LD_INT 14
58378: PUSH
58379: LD_INT 15
58381: PUSH
58382: LD_INT 16
58384: PUSH
58385: LD_INT 17
58387: PUSH
58388: LD_INT 18
58390: PUSH
58391: LD_INT 19
58393: PUSH
58394: LD_INT 20
58396: PUSH
58397: LD_INT 21
58399: PUSH
58400: LD_INT 22
58402: PUSH
58403: LD_INT 23
58405: PUSH
58406: LD_INT 24
58408: PUSH
58409: LD_INT 25
58411: PUSH
58412: LD_INT 26
58414: PUSH
58415: LD_INT 27
58417: PUSH
58418: LD_INT 28
58420: PUSH
58421: LD_INT 29
58423: PUSH
58424: LD_INT 30
58426: PUSH
58427: LD_INT 31
58429: PUSH
58430: LD_INT 32
58432: PUSH
58433: LD_INT 33
58435: PUSH
58436: LD_INT 34
58438: PUSH
58439: LD_INT 35
58441: PUSH
58442: LD_INT 36
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 101
58485: PUSH
58486: LD_INT 102
58488: PUSH
58489: LD_INT 103
58491: PUSH
58492: LD_INT 104
58494: PUSH
58495: LD_INT 105
58497: PUSH
58498: LD_INT 106
58500: PUSH
58501: LD_INT 107
58503: PUSH
58504: LD_INT 108
58506: PUSH
58507: LD_INT 109
58509: PUSH
58510: LD_INT 110
58512: PUSH
58513: LD_INT 111
58515: PUSH
58516: LD_INT 112
58518: PUSH
58519: LD_INT 113
58521: PUSH
58522: LD_INT 114
58524: PUSH
58525: LD_INT 115
58527: PUSH
58528: LD_INT 116
58530: PUSH
58531: LD_INT 117
58533: PUSH
58534: LD_INT 118
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// if result then
58561: LD_VAR 0 2
58565: IFFALSE 59351
// begin normal :=  ;
58567: LD_ADDR_VAR 0 5
58571: PUSH
58572: LD_STRING 
58574: ST_TO_ADDR
// hardcore :=  ;
58575: LD_ADDR_VAR 0 6
58579: PUSH
58580: LD_STRING 
58582: ST_TO_ADDR
// active :=  ;
58583: LD_ADDR_VAR 0 7
58587: PUSH
58588: LD_STRING 
58590: ST_TO_ADDR
// for i = 1 to normalCounter do
58591: LD_ADDR_VAR 0 8
58595: PUSH
58596: DOUBLE
58597: LD_INT 1
58599: DEC
58600: ST_TO_ADDR
58601: LD_EXP 43
58605: PUSH
58606: FOR_TO
58607: IFFALSE 58708
// begin tmp := 0 ;
58609: LD_ADDR_VAR 0 3
58613: PUSH
58614: LD_STRING 0
58616: ST_TO_ADDR
// if result [ 1 ] then
58617: LD_VAR 0 2
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: IFFALSE 58690
// if result [ 1 ] [ 1 ] = i then
58627: LD_VAR 0 2
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: PUSH
58640: LD_VAR 0 8
58644: EQUAL
58645: IFFALSE 58690
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58647: LD_ADDR_VAR 0 2
58651: PUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: LD_INT 1
58659: PPUSH
58660: LD_VAR 0 2
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PPUSH
58669: LD_INT 1
58671: PPUSH
58672: CALL_OW 3
58676: PPUSH
58677: CALL_OW 1
58681: ST_TO_ADDR
// tmp := 1 ;
58682: LD_ADDR_VAR 0 3
58686: PUSH
58687: LD_STRING 1
58689: ST_TO_ADDR
// end ; normal := normal & tmp ;
58690: LD_ADDR_VAR 0 5
58694: PUSH
58695: LD_VAR 0 5
58699: PUSH
58700: LD_VAR 0 3
58704: STR
58705: ST_TO_ADDR
// end ;
58706: GO 58606
58708: POP
58709: POP
// for i = 1 to hardcoreCounter do
58710: LD_ADDR_VAR 0 8
58714: PUSH
58715: DOUBLE
58716: LD_INT 1
58718: DEC
58719: ST_TO_ADDR
58720: LD_EXP 44
58724: PUSH
58725: FOR_TO
58726: IFFALSE 58831
// begin tmp := 0 ;
58728: LD_ADDR_VAR 0 3
58732: PUSH
58733: LD_STRING 0
58735: ST_TO_ADDR
// if result [ 2 ] then
58736: LD_VAR 0 2
58740: PUSH
58741: LD_INT 2
58743: ARRAY
58744: IFFALSE 58813
// if result [ 2 ] [ 1 ] = 100 + i then
58746: LD_VAR 0 2
58750: PUSH
58751: LD_INT 2
58753: ARRAY
58754: PUSH
58755: LD_INT 1
58757: ARRAY
58758: PUSH
58759: LD_INT 100
58761: PUSH
58762: LD_VAR 0 8
58766: PLUS
58767: EQUAL
58768: IFFALSE 58813
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58770: LD_ADDR_VAR 0 2
58774: PUSH
58775: LD_VAR 0 2
58779: PPUSH
58780: LD_INT 2
58782: PPUSH
58783: LD_VAR 0 2
58787: PUSH
58788: LD_INT 2
58790: ARRAY
58791: PPUSH
58792: LD_INT 1
58794: PPUSH
58795: CALL_OW 3
58799: PPUSH
58800: CALL_OW 1
58804: ST_TO_ADDR
// tmp := 1 ;
58805: LD_ADDR_VAR 0 3
58809: PUSH
58810: LD_STRING 1
58812: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58813: LD_ADDR_VAR 0 6
58817: PUSH
58818: LD_VAR 0 6
58822: PUSH
58823: LD_VAR 0 3
58827: STR
58828: ST_TO_ADDR
// end ;
58829: GO 58725
58831: POP
58832: POP
// if isGameLoad then
58833: LD_VAR 0 1
58837: IFFALSE 59312
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58839: LD_ADDR_VAR 0 4
58843: PUSH
58844: LD_EXP 47
58848: PUSH
58849: LD_EXP 46
58853: PUSH
58854: LD_EXP 48
58858: PUSH
58859: LD_EXP 45
58863: PUSH
58864: LD_EXP 49
58868: PUSH
58869: LD_EXP 50
58873: PUSH
58874: LD_EXP 51
58878: PUSH
58879: LD_EXP 52
58883: PUSH
58884: LD_EXP 53
58888: PUSH
58889: LD_EXP 54
58893: PUSH
58894: LD_EXP 55
58898: PUSH
58899: LD_EXP 56
58903: PUSH
58904: LD_EXP 57
58908: PUSH
58909: LD_EXP 58
58913: PUSH
58914: LD_EXP 66
58918: PUSH
58919: LD_EXP 67
58923: PUSH
58924: LD_EXP 68
58928: PUSH
58929: LD_EXP 69
58933: PUSH
58934: LD_EXP 71
58938: PUSH
58939: LD_EXP 72
58943: PUSH
58944: LD_EXP 73
58948: PUSH
58949: LD_EXP 76
58953: PUSH
58954: LD_EXP 78
58958: PUSH
58959: LD_EXP 79
58963: PUSH
58964: LD_EXP 80
58968: PUSH
58969: LD_EXP 82
58973: PUSH
58974: LD_EXP 83
58978: PUSH
58979: LD_EXP 86
58983: PUSH
58984: LD_EXP 87
58988: PUSH
58989: LD_EXP 88
58993: PUSH
58994: LD_EXP 89
58998: PUSH
58999: LD_EXP 90
59003: PUSH
59004: LD_EXP 91
59008: PUSH
59009: LD_EXP 92
59013: PUSH
59014: LD_EXP 93
59018: PUSH
59019: LD_EXP 94
59023: PUSH
59024: LD_EXP 59
59028: PUSH
59029: LD_EXP 60
59033: PUSH
59034: LD_EXP 63
59038: PUSH
59039: LD_EXP 64
59043: PUSH
59044: LD_EXP 65
59048: PUSH
59049: LD_EXP 61
59053: PUSH
59054: LD_EXP 62
59058: PUSH
59059: LD_EXP 70
59063: PUSH
59064: LD_EXP 74
59068: PUSH
59069: LD_EXP 75
59073: PUSH
59074: LD_EXP 77
59078: PUSH
59079: LD_EXP 81
59083: PUSH
59084: LD_EXP 84
59088: PUSH
59089: LD_EXP 85
59093: PUSH
59094: LD_EXP 95
59098: PUSH
59099: LD_EXP 96
59103: PUSH
59104: LD_EXP 97
59108: PUSH
59109: LD_EXP 98
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// tmp :=  ;
59170: LD_ADDR_VAR 0 3
59174: PUSH
59175: LD_STRING 
59177: ST_TO_ADDR
// for i = 1 to normalCounter do
59178: LD_ADDR_VAR 0 8
59182: PUSH
59183: DOUBLE
59184: LD_INT 1
59186: DEC
59187: ST_TO_ADDR
59188: LD_EXP 43
59192: PUSH
59193: FOR_TO
59194: IFFALSE 59230
// begin if flags [ i ] then
59196: LD_VAR 0 4
59200: PUSH
59201: LD_VAR 0 8
59205: ARRAY
59206: IFFALSE 59228
// tmp := tmp & i & ; ;
59208: LD_ADDR_VAR 0 3
59212: PUSH
59213: LD_VAR 0 3
59217: PUSH
59218: LD_VAR 0 8
59222: STR
59223: PUSH
59224: LD_STRING ;
59226: STR
59227: ST_TO_ADDR
// end ;
59228: GO 59193
59230: POP
59231: POP
// for i = 1 to hardcoreCounter do
59232: LD_ADDR_VAR 0 8
59236: PUSH
59237: DOUBLE
59238: LD_INT 1
59240: DEC
59241: ST_TO_ADDR
59242: LD_EXP 44
59246: PUSH
59247: FOR_TO
59248: IFFALSE 59294
// begin if flags [ normalCounter + i ] then
59250: LD_VAR 0 4
59254: PUSH
59255: LD_EXP 43
59259: PUSH
59260: LD_VAR 0 8
59264: PLUS
59265: ARRAY
59266: IFFALSE 59292
// tmp := tmp & ( 100 + i ) & ; ;
59268: LD_ADDR_VAR 0 3
59272: PUSH
59273: LD_VAR 0 3
59277: PUSH
59278: LD_INT 100
59280: PUSH
59281: LD_VAR 0 8
59285: PLUS
59286: STR
59287: PUSH
59288: LD_STRING ;
59290: STR
59291: ST_TO_ADDR
// end ;
59292: GO 59247
59294: POP
59295: POP
// if tmp then
59296: LD_VAR 0 3
59300: IFFALSE 59312
// active := tmp ;
59302: LD_ADDR_VAR 0 7
59306: PUSH
59307: LD_VAR 0 3
59311: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59312: LD_STRING getStreamItemsFromMission("
59314: PUSH
59315: LD_VAR 0 5
59319: STR
59320: PUSH
59321: LD_STRING ","
59323: STR
59324: PUSH
59325: LD_VAR 0 6
59329: STR
59330: PUSH
59331: LD_STRING ","
59333: STR
59334: PUSH
59335: LD_VAR 0 7
59339: STR
59340: PUSH
59341: LD_STRING ")
59343: STR
59344: PPUSH
59345: CALL_OW 559
// end else
59349: GO 59358
// ToLua ( getStreamItemsFromMission("","","") ) ;
59351: LD_STRING getStreamItemsFromMission("","","")
59353: PPUSH
59354: CALL_OW 559
// end ;
59358: LD_VAR 0 2
59362: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59363: LD_EXP 42
59367: PUSH
59368: LD_EXP 47
59372: AND
59373: IFFALSE 59497
59375: GO 59377
59377: DISABLE
59378: LD_INT 0
59380: PPUSH
59381: PPUSH
// begin enable ;
59382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59383: LD_ADDR_VAR 0 2
59387: PUSH
59388: LD_INT 22
59390: PUSH
59391: LD_OWVAR 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 34
59405: PUSH
59406: LD_INT 7
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 34
59415: PUSH
59416: LD_INT 45
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 34
59425: PUSH
59426: LD_INT 28
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 34
59435: PUSH
59436: LD_INT 47
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PPUSH
59454: CALL_OW 69
59458: ST_TO_ADDR
// if not tmp then
59459: LD_VAR 0 2
59463: NOT
59464: IFFALSE 59468
// exit ;
59466: GO 59497
// for i in tmp do
59468: LD_ADDR_VAR 0 1
59472: PUSH
59473: LD_VAR 0 2
59477: PUSH
59478: FOR_IN
59479: IFFALSE 59495
// begin SetLives ( i , 0 ) ;
59481: LD_VAR 0 1
59485: PPUSH
59486: LD_INT 0
59488: PPUSH
59489: CALL_OW 234
// end ;
59493: GO 59478
59495: POP
59496: POP
// end ;
59497: PPOPN 2
59499: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59500: LD_EXP 42
59504: PUSH
59505: LD_EXP 48
59509: AND
59510: IFFALSE 59594
59512: GO 59514
59514: DISABLE
59515: LD_INT 0
59517: PPUSH
59518: PPUSH
// begin enable ;
59519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59520: LD_ADDR_VAR 0 2
59524: PUSH
59525: LD_INT 22
59527: PUSH
59528: LD_OWVAR 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 32
59539: PUSH
59540: LD_INT 3
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PPUSH
59551: CALL_OW 69
59555: ST_TO_ADDR
// if not tmp then
59556: LD_VAR 0 2
59560: NOT
59561: IFFALSE 59565
// exit ;
59563: GO 59594
// for i in tmp do
59565: LD_ADDR_VAR 0 1
59569: PUSH
59570: LD_VAR 0 2
59574: PUSH
59575: FOR_IN
59576: IFFALSE 59592
// begin SetLives ( i , 0 ) ;
59578: LD_VAR 0 1
59582: PPUSH
59583: LD_INT 0
59585: PPUSH
59586: CALL_OW 234
// end ;
59590: GO 59575
59592: POP
59593: POP
// end ;
59594: PPOPN 2
59596: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59597: LD_EXP 42
59601: PUSH
59602: LD_EXP 45
59606: AND
59607: IFFALSE 59700
59609: GO 59611
59611: DISABLE
59612: LD_INT 0
59614: PPUSH
// begin enable ;
59615: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59616: LD_ADDR_VAR 0 1
59620: PUSH
59621: LD_INT 22
59623: PUSH
59624: LD_OWVAR 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 25
59638: PUSH
59639: LD_INT 5
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 25
59648: PUSH
59649: LD_INT 9
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 25
59658: PUSH
59659: LD_INT 8
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PPUSH
59676: CALL_OW 69
59680: PUSH
59681: FOR_IN
59682: IFFALSE 59698
// begin SetClass ( i , 1 ) ;
59684: LD_VAR 0 1
59688: PPUSH
59689: LD_INT 1
59691: PPUSH
59692: CALL_OW 336
// end ;
59696: GO 59681
59698: POP
59699: POP
// end ;
59700: PPOPN 1
59702: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59703: LD_EXP 42
59707: PUSH
59708: LD_EXP 46
59712: AND
59713: PUSH
59714: LD_OWVAR 65
59718: PUSH
59719: LD_INT 7
59721: LESS
59722: AND
59723: IFFALSE 59737
59725: GO 59727
59727: DISABLE
// begin enable ;
59728: ENABLE
// game_speed := 7 ;
59729: LD_ADDR_OWVAR 65
59733: PUSH
59734: LD_INT 7
59736: ST_TO_ADDR
// end ;
59737: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59738: LD_EXP 42
59742: PUSH
59743: LD_EXP 49
59747: AND
59748: IFFALSE 59950
59750: GO 59752
59752: DISABLE
59753: LD_INT 0
59755: PPUSH
59756: PPUSH
59757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59758: LD_ADDR_VAR 0 3
59762: PUSH
59763: LD_INT 81
59765: PUSH
59766: LD_OWVAR 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 21
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PPUSH
59789: CALL_OW 69
59793: ST_TO_ADDR
// if not tmp then
59794: LD_VAR 0 3
59798: NOT
59799: IFFALSE 59803
// exit ;
59801: GO 59950
// if tmp > 5 then
59803: LD_VAR 0 3
59807: PUSH
59808: LD_INT 5
59810: GREATER
59811: IFFALSE 59823
// k := 5 else
59813: LD_ADDR_VAR 0 2
59817: PUSH
59818: LD_INT 5
59820: ST_TO_ADDR
59821: GO 59833
// k := tmp ;
59823: LD_ADDR_VAR 0 2
59827: PUSH
59828: LD_VAR 0 3
59832: ST_TO_ADDR
// for i := 1 to k do
59833: LD_ADDR_VAR 0 1
59837: PUSH
59838: DOUBLE
59839: LD_INT 1
59841: DEC
59842: ST_TO_ADDR
59843: LD_VAR 0 2
59847: PUSH
59848: FOR_TO
59849: IFFALSE 59948
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59851: LD_VAR 0 3
59855: PUSH
59856: LD_VAR 0 1
59860: ARRAY
59861: PPUSH
59862: LD_VAR 0 1
59866: PUSH
59867: LD_INT 4
59869: MOD
59870: PUSH
59871: LD_INT 1
59873: PLUS
59874: PPUSH
59875: CALL_OW 259
59879: PUSH
59880: LD_INT 10
59882: LESS
59883: IFFALSE 59946
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59885: LD_VAR 0 3
59889: PUSH
59890: LD_VAR 0 1
59894: ARRAY
59895: PPUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_INT 4
59903: MOD
59904: PUSH
59905: LD_INT 1
59907: PLUS
59908: PPUSH
59909: LD_VAR 0 3
59913: PUSH
59914: LD_VAR 0 1
59918: ARRAY
59919: PPUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 4
59927: MOD
59928: PUSH
59929: LD_INT 1
59931: PLUS
59932: PPUSH
59933: CALL_OW 259
59937: PUSH
59938: LD_INT 1
59940: PLUS
59941: PPUSH
59942: CALL_OW 237
59946: GO 59848
59948: POP
59949: POP
// end ;
59950: PPOPN 3
59952: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59953: LD_EXP 42
59957: PUSH
59958: LD_EXP 50
59962: AND
59963: IFFALSE 59983
59965: GO 59967
59967: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59968: LD_INT 4
59970: PPUSH
59971: LD_OWVAR 2
59975: PPUSH
59976: LD_INT 0
59978: PPUSH
59979: CALL_OW 324
59983: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59984: LD_EXP 42
59988: PUSH
59989: LD_EXP 79
59993: AND
59994: IFFALSE 60014
59996: GO 59998
59998: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59999: LD_INT 19
60001: PPUSH
60002: LD_OWVAR 2
60006: PPUSH
60007: LD_INT 0
60009: PPUSH
60010: CALL_OW 324
60014: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60015: LD_EXP 42
60019: PUSH
60020: LD_EXP 51
60024: AND
60025: IFFALSE 60127
60027: GO 60029
60029: DISABLE
60030: LD_INT 0
60032: PPUSH
60033: PPUSH
// begin enable ;
60034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60035: LD_ADDR_VAR 0 2
60039: PUSH
60040: LD_INT 22
60042: PUSH
60043: LD_OWVAR 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 34
60057: PUSH
60058: LD_INT 11
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 34
60067: PUSH
60068: LD_INT 30
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PPUSH
60084: CALL_OW 69
60088: ST_TO_ADDR
// if not tmp then
60089: LD_VAR 0 2
60093: NOT
60094: IFFALSE 60098
// exit ;
60096: GO 60127
// for i in tmp do
60098: LD_ADDR_VAR 0 1
60102: PUSH
60103: LD_VAR 0 2
60107: PUSH
60108: FOR_IN
60109: IFFALSE 60125
// begin SetLives ( i , 0 ) ;
60111: LD_VAR 0 1
60115: PPUSH
60116: LD_INT 0
60118: PPUSH
60119: CALL_OW 234
// end ;
60123: GO 60108
60125: POP
60126: POP
// end ;
60127: PPOPN 2
60129: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60130: LD_EXP 42
60134: PUSH
60135: LD_EXP 52
60139: AND
60140: IFFALSE 60160
60142: GO 60144
60144: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60145: LD_INT 32
60147: PPUSH
60148: LD_OWVAR 2
60152: PPUSH
60153: LD_INT 0
60155: PPUSH
60156: CALL_OW 324
60160: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60161: LD_EXP 42
60165: PUSH
60166: LD_EXP 53
60170: AND
60171: IFFALSE 60352
60173: GO 60175
60175: DISABLE
60176: LD_INT 0
60178: PPUSH
60179: PPUSH
60180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60181: LD_ADDR_VAR 0 2
60185: PUSH
60186: LD_INT 22
60188: PUSH
60189: LD_OWVAR 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 33
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PPUSH
60212: CALL_OW 69
60216: ST_TO_ADDR
// if not tmp then
60217: LD_VAR 0 2
60221: NOT
60222: IFFALSE 60226
// exit ;
60224: GO 60352
// side := 0 ;
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_INT 0
60233: ST_TO_ADDR
// for i := 1 to 8 do
60234: LD_ADDR_VAR 0 1
60238: PUSH
60239: DOUBLE
60240: LD_INT 1
60242: DEC
60243: ST_TO_ADDR
60244: LD_INT 8
60246: PUSH
60247: FOR_TO
60248: IFFALSE 60296
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60250: LD_OWVAR 2
60254: PUSH
60255: LD_VAR 0 1
60259: NONEQUAL
60260: PUSH
60261: LD_OWVAR 2
60265: PPUSH
60266: LD_VAR 0 1
60270: PPUSH
60271: CALL_OW 81
60275: PUSH
60276: LD_INT 2
60278: EQUAL
60279: AND
60280: IFFALSE 60294
// begin side := i ;
60282: LD_ADDR_VAR 0 3
60286: PUSH
60287: LD_VAR 0 1
60291: ST_TO_ADDR
// break ;
60292: GO 60296
// end ;
60294: GO 60247
60296: POP
60297: POP
// if not side then
60298: LD_VAR 0 3
60302: NOT
60303: IFFALSE 60307
// exit ;
60305: GO 60352
// for i := 1 to tmp do
60307: LD_ADDR_VAR 0 1
60311: PUSH
60312: DOUBLE
60313: LD_INT 1
60315: DEC
60316: ST_TO_ADDR
60317: LD_VAR 0 2
60321: PUSH
60322: FOR_TO
60323: IFFALSE 60350
// if Prob ( 60 ) then
60325: LD_INT 60
60327: PPUSH
60328: CALL_OW 13
60332: IFFALSE 60348
// SetSide ( i , side ) ;
60334: LD_VAR 0 1
60338: PPUSH
60339: LD_VAR 0 3
60343: PPUSH
60344: CALL_OW 235
60348: GO 60322
60350: POP
60351: POP
// end ;
60352: PPOPN 3
60354: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60355: LD_EXP 42
60359: PUSH
60360: LD_EXP 55
60364: AND
60365: IFFALSE 60484
60367: GO 60369
60369: DISABLE
60370: LD_INT 0
60372: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60373: LD_ADDR_VAR 0 1
60377: PUSH
60378: LD_INT 22
60380: PUSH
60381: LD_OWVAR 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 21
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: LD_INT 23
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: PPUSH
60422: CALL_OW 69
60426: PUSH
60427: FOR_IN
60428: IFFALSE 60482
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60430: LD_VAR 0 1
60434: PPUSH
60435: CALL_OW 257
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: LD_INT 4
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: IN
60458: IFFALSE 60480
// SetClass ( un , rand ( 1 , 4 ) ) ;
60460: LD_VAR 0 1
60464: PPUSH
60465: LD_INT 1
60467: PPUSH
60468: LD_INT 4
60470: PPUSH
60471: CALL_OW 12
60475: PPUSH
60476: CALL_OW 336
60480: GO 60427
60482: POP
60483: POP
// end ;
60484: PPOPN 1
60486: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60487: LD_EXP 42
60491: PUSH
60492: LD_EXP 54
60496: AND
60497: IFFALSE 60576
60499: GO 60501
60501: DISABLE
60502: LD_INT 0
60504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60505: LD_ADDR_VAR 0 1
60509: PUSH
60510: LD_INT 22
60512: PUSH
60513: LD_OWVAR 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 21
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PPUSH
60536: CALL_OW 69
60540: ST_TO_ADDR
// if not tmp then
60541: LD_VAR 0 1
60545: NOT
60546: IFFALSE 60550
// exit ;
60548: GO 60576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60550: LD_VAR 0 1
60554: PUSH
60555: LD_INT 1
60557: PPUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 12
60567: ARRAY
60568: PPUSH
60569: LD_INT 100
60571: PPUSH
60572: CALL_OW 234
// end ;
60576: PPOPN 1
60578: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60579: LD_EXP 42
60583: PUSH
60584: LD_EXP 56
60588: AND
60589: IFFALSE 60687
60591: GO 60593
60593: DISABLE
60594: LD_INT 0
60596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60597: LD_ADDR_VAR 0 1
60601: PUSH
60602: LD_INT 22
60604: PUSH
60605: LD_OWVAR 2
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 21
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PPUSH
60628: CALL_OW 69
60632: ST_TO_ADDR
// if not tmp then
60633: LD_VAR 0 1
60637: NOT
60638: IFFALSE 60642
// exit ;
60640: GO 60687
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60642: LD_VAR 0 1
60646: PUSH
60647: LD_INT 1
60649: PPUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: CALL_OW 12
60659: ARRAY
60660: PPUSH
60661: LD_INT 1
60663: PPUSH
60664: LD_INT 4
60666: PPUSH
60667: CALL_OW 12
60671: PPUSH
60672: LD_INT 3000
60674: PPUSH
60675: LD_INT 9000
60677: PPUSH
60678: CALL_OW 12
60682: PPUSH
60683: CALL_OW 492
// end ;
60687: PPOPN 1
60689: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60690: LD_EXP 42
60694: PUSH
60695: LD_EXP 57
60699: AND
60700: IFFALSE 60720
60702: GO 60704
60704: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60705: LD_INT 1
60707: PPUSH
60708: LD_OWVAR 2
60712: PPUSH
60713: LD_INT 0
60715: PPUSH
60716: CALL_OW 324
60720: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60721: LD_EXP 42
60725: PUSH
60726: LD_EXP 58
60730: AND
60731: IFFALSE 60814
60733: GO 60735
60735: DISABLE
60736: LD_INT 0
60738: PPUSH
60739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60740: LD_ADDR_VAR 0 2
60744: PUSH
60745: LD_INT 22
60747: PUSH
60748: LD_OWVAR 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 21
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PPUSH
60771: CALL_OW 69
60775: ST_TO_ADDR
// if not tmp then
60776: LD_VAR 0 2
60780: NOT
60781: IFFALSE 60785
// exit ;
60783: GO 60814
// for i in tmp do
60785: LD_ADDR_VAR 0 1
60789: PUSH
60790: LD_VAR 0 2
60794: PUSH
60795: FOR_IN
60796: IFFALSE 60812
// SetBLevel ( i , 10 ) ;
60798: LD_VAR 0 1
60802: PPUSH
60803: LD_INT 10
60805: PPUSH
60806: CALL_OW 241
60810: GO 60795
60812: POP
60813: POP
// end ;
60814: PPOPN 2
60816: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60817: LD_EXP 42
60821: PUSH
60822: LD_EXP 59
60826: AND
60827: IFFALSE 60938
60829: GO 60831
60831: DISABLE
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
60836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60837: LD_ADDR_VAR 0 3
60841: PUSH
60842: LD_INT 22
60844: PUSH
60845: LD_OWVAR 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 25
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PPUSH
60868: CALL_OW 69
60872: ST_TO_ADDR
// if not tmp then
60873: LD_VAR 0 3
60877: NOT
60878: IFFALSE 60882
// exit ;
60880: GO 60938
// un := tmp [ rand ( 1 , tmp ) ] ;
60882: LD_ADDR_VAR 0 2
60886: PUSH
60887: LD_VAR 0 3
60891: PUSH
60892: LD_INT 1
60894: PPUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: CALL_OW 12
60904: ARRAY
60905: ST_TO_ADDR
// if Crawls ( un ) then
60906: LD_VAR 0 2
60910: PPUSH
60911: CALL_OW 318
60915: IFFALSE 60926
// ComWalk ( un ) ;
60917: LD_VAR 0 2
60921: PPUSH
60922: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60926: LD_VAR 0 2
60930: PPUSH
60931: LD_INT 5
60933: PPUSH
60934: CALL_OW 336
// end ;
60938: PPOPN 3
60940: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60941: LD_EXP 42
60945: PUSH
60946: LD_EXP 60
60950: AND
60951: PUSH
60952: LD_OWVAR 67
60956: PUSH
60957: LD_INT 4
60959: LESS
60960: AND
60961: IFFALSE 60980
60963: GO 60965
60965: DISABLE
// begin Difficulty := Difficulty + 1 ;
60966: LD_ADDR_OWVAR 67
60970: PUSH
60971: LD_OWVAR 67
60975: PUSH
60976: LD_INT 1
60978: PLUS
60979: ST_TO_ADDR
// end ;
60980: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60981: LD_EXP 42
60985: PUSH
60986: LD_EXP 61
60990: AND
60991: IFFALSE 61094
60993: GO 60995
60995: DISABLE
60996: LD_INT 0
60998: PPUSH
// begin for i := 1 to 5 do
60999: LD_ADDR_VAR 0 1
61003: PUSH
61004: DOUBLE
61005: LD_INT 1
61007: DEC
61008: ST_TO_ADDR
61009: LD_INT 5
61011: PUSH
61012: FOR_TO
61013: IFFALSE 61092
// begin uc_nation := nation_nature ;
61015: LD_ADDR_OWVAR 21
61019: PUSH
61020: LD_INT 0
61022: ST_TO_ADDR
// uc_side := 0 ;
61023: LD_ADDR_OWVAR 20
61027: PUSH
61028: LD_INT 0
61030: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61031: LD_ADDR_OWVAR 29
61035: PUSH
61036: LD_INT 12
61038: PUSH
61039: LD_INT 12
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: ST_TO_ADDR
// hc_agressivity := 20 ;
61046: LD_ADDR_OWVAR 35
61050: PUSH
61051: LD_INT 20
61053: ST_TO_ADDR
// hc_class := class_tiger ;
61054: LD_ADDR_OWVAR 28
61058: PUSH
61059: LD_INT 14
61061: ST_TO_ADDR
// hc_gallery :=  ;
61062: LD_ADDR_OWVAR 33
61066: PUSH
61067: LD_STRING 
61069: ST_TO_ADDR
// hc_name :=  ;
61070: LD_ADDR_OWVAR 26
61074: PUSH
61075: LD_STRING 
61077: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61078: CALL_OW 44
61082: PPUSH
61083: LD_INT 0
61085: PPUSH
61086: CALL_OW 51
// end ;
61090: GO 61012
61092: POP
61093: POP
// end ;
61094: PPOPN 1
61096: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61097: LD_EXP 42
61101: PUSH
61102: LD_EXP 62
61106: AND
61107: IFFALSE 61116
61109: GO 61111
61111: DISABLE
// StreamSibBomb ;
61112: CALL 61117 0 0
61116: END
// export function StreamSibBomb ; var i , x , y ; begin
61117: LD_INT 0
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
// result := false ;
61123: LD_ADDR_VAR 0 1
61127: PUSH
61128: LD_INT 0
61130: ST_TO_ADDR
// for i := 1 to 16 do
61131: LD_ADDR_VAR 0 2
61135: PUSH
61136: DOUBLE
61137: LD_INT 1
61139: DEC
61140: ST_TO_ADDR
61141: LD_INT 16
61143: PUSH
61144: FOR_TO
61145: IFFALSE 61344
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61147: LD_ADDR_VAR 0 3
61151: PUSH
61152: LD_INT 10
61154: PUSH
61155: LD_INT 20
61157: PUSH
61158: LD_INT 30
61160: PUSH
61161: LD_INT 40
61163: PUSH
61164: LD_INT 50
61166: PUSH
61167: LD_INT 60
61169: PUSH
61170: LD_INT 70
61172: PUSH
61173: LD_INT 80
61175: PUSH
61176: LD_INT 90
61178: PUSH
61179: LD_INT 100
61181: PUSH
61182: LD_INT 110
61184: PUSH
61185: LD_INT 120
61187: PUSH
61188: LD_INT 130
61190: PUSH
61191: LD_INT 140
61193: PUSH
61194: LD_INT 150
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PPUSH
61217: LD_INT 15
61219: PPUSH
61220: CALL_OW 12
61224: ARRAY
61225: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61226: LD_ADDR_VAR 0 4
61230: PUSH
61231: LD_INT 10
61233: PUSH
61234: LD_INT 20
61236: PUSH
61237: LD_INT 30
61239: PUSH
61240: LD_INT 40
61242: PUSH
61243: LD_INT 50
61245: PUSH
61246: LD_INT 60
61248: PUSH
61249: LD_INT 70
61251: PUSH
61252: LD_INT 80
61254: PUSH
61255: LD_INT 90
61257: PUSH
61258: LD_INT 100
61260: PUSH
61261: LD_INT 110
61263: PUSH
61264: LD_INT 120
61266: PUSH
61267: LD_INT 130
61269: PUSH
61270: LD_INT 140
61272: PUSH
61273: LD_INT 150
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PPUSH
61296: LD_INT 15
61298: PPUSH
61299: CALL_OW 12
61303: ARRAY
61304: ST_TO_ADDR
// if ValidHex ( x , y ) then
61305: LD_VAR 0 3
61309: PPUSH
61310: LD_VAR 0 4
61314: PPUSH
61315: CALL_OW 488
61319: IFFALSE 61342
// begin result := [ x , y ] ;
61321: LD_ADDR_VAR 0 1
61325: PUSH
61326: LD_VAR 0 3
61330: PUSH
61331: LD_VAR 0 4
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: ST_TO_ADDR
// break ;
61340: GO 61344
// end ; end ;
61342: GO 61144
61344: POP
61345: POP
// if result then
61346: LD_VAR 0 1
61350: IFFALSE 61410
// begin ToLua ( playSibBomb() ) ;
61352: LD_STRING playSibBomb()
61354: PPUSH
61355: CALL_OW 559
// wait ( 0 0$14 ) ;
61359: LD_INT 490
61361: PPUSH
61362: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61366: LD_VAR 0 1
61370: PUSH
61371: LD_INT 1
61373: ARRAY
61374: PPUSH
61375: LD_VAR 0 1
61379: PUSH
61380: LD_INT 2
61382: ARRAY
61383: PPUSH
61384: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61388: LD_VAR 0 1
61392: PUSH
61393: LD_INT 1
61395: ARRAY
61396: PPUSH
61397: LD_VAR 0 1
61401: PUSH
61402: LD_INT 2
61404: ARRAY
61405: PPUSH
61406: CALL_OW 429
// end ; end ;
61410: LD_VAR 0 1
61414: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61415: LD_EXP 42
61419: PUSH
61420: LD_EXP 64
61424: AND
61425: IFFALSE 61437
61427: GO 61429
61429: DISABLE
// YouLost (  ) ;
61430: LD_STRING 
61432: PPUSH
61433: CALL_OW 104
61437: END
// every 0 0$1 trigger StreamModeActive and sFog do
61438: LD_EXP 42
61442: PUSH
61443: LD_EXP 63
61447: AND
61448: IFFALSE 61462
61450: GO 61452
61452: DISABLE
// FogOff ( your_side ) ;
61453: LD_OWVAR 2
61457: PPUSH
61458: CALL_OW 344
61462: END
// every 0 0$1 trigger StreamModeActive and sSun do
61463: LD_EXP 42
61467: PUSH
61468: LD_EXP 65
61472: AND
61473: IFFALSE 61501
61475: GO 61477
61477: DISABLE
// begin solar_recharge_percent := 0 ;
61478: LD_ADDR_OWVAR 79
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61486: LD_INT 10500
61488: PPUSH
61489: CALL_OW 67
// solar_recharge_percent := 100 ;
61493: LD_ADDR_OWVAR 79
61497: PUSH
61498: LD_INT 100
61500: ST_TO_ADDR
// end ;
61501: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61502: LD_EXP 42
61506: PUSH
61507: LD_EXP 66
61511: AND
61512: IFFALSE 61751
61514: GO 61516
61516: DISABLE
61517: LD_INT 0
61519: PPUSH
61520: PPUSH
61521: PPUSH
// begin tmp := [ ] ;
61522: LD_ADDR_VAR 0 3
61526: PUSH
61527: EMPTY
61528: ST_TO_ADDR
// for i := 1 to 6 do
61529: LD_ADDR_VAR 0 1
61533: PUSH
61534: DOUBLE
61535: LD_INT 1
61537: DEC
61538: ST_TO_ADDR
61539: LD_INT 6
61541: PUSH
61542: FOR_TO
61543: IFFALSE 61648
// begin uc_nation := nation_nature ;
61545: LD_ADDR_OWVAR 21
61549: PUSH
61550: LD_INT 0
61552: ST_TO_ADDR
// uc_side := 0 ;
61553: LD_ADDR_OWVAR 20
61557: PUSH
61558: LD_INT 0
61560: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61561: LD_ADDR_OWVAR 29
61565: PUSH
61566: LD_INT 12
61568: PUSH
61569: LD_INT 12
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// hc_agressivity := 20 ;
61576: LD_ADDR_OWVAR 35
61580: PUSH
61581: LD_INT 20
61583: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61584: LD_ADDR_OWVAR 28
61588: PUSH
61589: LD_INT 17
61591: ST_TO_ADDR
// hc_gallery :=  ;
61592: LD_ADDR_OWVAR 33
61596: PUSH
61597: LD_STRING 
61599: ST_TO_ADDR
// hc_name :=  ;
61600: LD_ADDR_OWVAR 26
61604: PUSH
61605: LD_STRING 
61607: ST_TO_ADDR
// un := CreateHuman ;
61608: LD_ADDR_VAR 0 2
61612: PUSH
61613: CALL_OW 44
61617: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61618: LD_VAR 0 2
61622: PPUSH
61623: LD_INT 1
61625: PPUSH
61626: CALL_OW 51
// tmp := tmp ^ un ;
61630: LD_ADDR_VAR 0 3
61634: PUSH
61635: LD_VAR 0 3
61639: PUSH
61640: LD_VAR 0 2
61644: ADD
61645: ST_TO_ADDR
// end ;
61646: GO 61542
61648: POP
61649: POP
// repeat wait ( 0 0$1 ) ;
61650: LD_INT 35
61652: PPUSH
61653: CALL_OW 67
// for un in tmp do
61657: LD_ADDR_VAR 0 2
61661: PUSH
61662: LD_VAR 0 3
61666: PUSH
61667: FOR_IN
61668: IFFALSE 61742
// begin if IsDead ( un ) then
61670: LD_VAR 0 2
61674: PPUSH
61675: CALL_OW 301
61679: IFFALSE 61699
// begin tmp := tmp diff un ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: LD_VAR 0 3
61690: PUSH
61691: LD_VAR 0 2
61695: DIFF
61696: ST_TO_ADDR
// continue ;
61697: GO 61667
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61699: LD_VAR 0 2
61703: PPUSH
61704: LD_INT 3
61706: PUSH
61707: LD_INT 22
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PPUSH
61721: CALL_OW 69
61725: PPUSH
61726: LD_VAR 0 2
61730: PPUSH
61731: CALL_OW 74
61735: PPUSH
61736: CALL_OW 115
// end ;
61740: GO 61667
61742: POP
61743: POP
// until not tmp ;
61744: LD_VAR 0 3
61748: NOT
61749: IFFALSE 61650
// end ;
61751: PPOPN 3
61753: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61754: LD_EXP 42
61758: PUSH
61759: LD_EXP 67
61763: AND
61764: IFFALSE 61818
61766: GO 61768
61768: DISABLE
// begin ToLua ( displayTroll(); ) ;
61769: LD_STRING displayTroll();
61771: PPUSH
61772: CALL_OW 559
// wait ( 3 3$00 ) ;
61776: LD_INT 6300
61778: PPUSH
61779: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61783: LD_STRING hideTroll();
61785: PPUSH
61786: CALL_OW 559
// wait ( 1 1$00 ) ;
61790: LD_INT 2100
61792: PPUSH
61793: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61797: LD_STRING displayTroll();
61799: PPUSH
61800: CALL_OW 559
// wait ( 1 1$00 ) ;
61804: LD_INT 2100
61806: PPUSH
61807: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61811: LD_STRING hideTroll();
61813: PPUSH
61814: CALL_OW 559
// end ;
61818: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61819: LD_EXP 42
61823: PUSH
61824: LD_EXP 68
61828: AND
61829: IFFALSE 61892
61831: GO 61833
61833: DISABLE
61834: LD_INT 0
61836: PPUSH
// begin p := 0 ;
61837: LD_ADDR_VAR 0 1
61841: PUSH
61842: LD_INT 0
61844: ST_TO_ADDR
// repeat game_speed := 1 ;
61845: LD_ADDR_OWVAR 65
61849: PUSH
61850: LD_INT 1
61852: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61853: LD_INT 35
61855: PPUSH
61856: CALL_OW 67
// p := p + 1 ;
61860: LD_ADDR_VAR 0 1
61864: PUSH
61865: LD_VAR 0 1
61869: PUSH
61870: LD_INT 1
61872: PLUS
61873: ST_TO_ADDR
// until p >= 60 ;
61874: LD_VAR 0 1
61878: PUSH
61879: LD_INT 60
61881: GREATEREQUAL
61882: IFFALSE 61845
// game_speed := 4 ;
61884: LD_ADDR_OWVAR 65
61888: PUSH
61889: LD_INT 4
61891: ST_TO_ADDR
// end ;
61892: PPOPN 1
61894: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61895: LD_EXP 42
61899: PUSH
61900: LD_EXP 69
61904: AND
61905: IFFALSE 62051
61907: GO 61909
61909: DISABLE
61910: LD_INT 0
61912: PPUSH
61913: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61914: LD_ADDR_VAR 0 1
61918: PUSH
61919: LD_INT 22
61921: PUSH
61922: LD_OWVAR 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 30
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 30
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PPUSH
61963: CALL_OW 69
61967: ST_TO_ADDR
// if not depot then
61968: LD_VAR 0 1
61972: NOT
61973: IFFALSE 61977
// exit ;
61975: GO 62051
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61977: LD_ADDR_VAR 0 2
61981: PUSH
61982: LD_VAR 0 1
61986: PUSH
61987: LD_INT 1
61989: PPUSH
61990: LD_VAR 0 1
61994: PPUSH
61995: CALL_OW 12
61999: ARRAY
62000: PPUSH
62001: CALL_OW 274
62005: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62006: LD_VAR 0 2
62010: PPUSH
62011: LD_INT 1
62013: PPUSH
62014: LD_INT 0
62016: PPUSH
62017: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62021: LD_VAR 0 2
62025: PPUSH
62026: LD_INT 2
62028: PPUSH
62029: LD_INT 0
62031: PPUSH
62032: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62036: LD_VAR 0 2
62040: PPUSH
62041: LD_INT 3
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: CALL_OW 277
// end ;
62051: PPOPN 2
62053: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62054: LD_EXP 42
62058: PUSH
62059: LD_EXP 70
62063: AND
62064: IFFALSE 62161
62066: GO 62068
62068: DISABLE
62069: LD_INT 0
62071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62072: LD_ADDR_VAR 0 1
62076: PUSH
62077: LD_INT 22
62079: PUSH
62080: LD_OWVAR 2
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 21
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: LD_INT 23
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: PPUSH
62121: CALL_OW 69
62125: ST_TO_ADDR
// if not tmp then
62126: LD_VAR 0 1
62130: NOT
62131: IFFALSE 62135
// exit ;
62133: GO 62161
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62135: LD_VAR 0 1
62139: PUSH
62140: LD_INT 1
62142: PPUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL_OW 12
62152: ARRAY
62153: PPUSH
62154: LD_INT 200
62156: PPUSH
62157: CALL_OW 234
// end ;
62161: PPOPN 1
62163: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62164: LD_EXP 42
62168: PUSH
62169: LD_EXP 71
62173: AND
62174: IFFALSE 62253
62176: GO 62178
62178: DISABLE
62179: LD_INT 0
62181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62182: LD_ADDR_VAR 0 1
62186: PUSH
62187: LD_INT 22
62189: PUSH
62190: LD_OWVAR 2
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 21
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PPUSH
62213: CALL_OW 69
62217: ST_TO_ADDR
// if not tmp then
62218: LD_VAR 0 1
62222: NOT
62223: IFFALSE 62227
// exit ;
62225: GO 62253
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 1
62234: PPUSH
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 12
62244: ARRAY
62245: PPUSH
62246: LD_INT 60
62248: PPUSH
62249: CALL_OW 234
// end ;
62253: PPOPN 1
62255: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62256: LD_EXP 42
62260: PUSH
62261: LD_EXP 72
62265: AND
62266: IFFALSE 62365
62268: GO 62270
62270: DISABLE
62271: LD_INT 0
62273: PPUSH
62274: PPUSH
// begin enable ;
62275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62276: LD_ADDR_VAR 0 1
62280: PUSH
62281: LD_INT 22
62283: PUSH
62284: LD_OWVAR 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 61
62295: PUSH
62296: EMPTY
62297: LIST
62298: PUSH
62299: LD_INT 33
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: LIST
62313: PPUSH
62314: CALL_OW 69
62318: ST_TO_ADDR
// if not tmp then
62319: LD_VAR 0 1
62323: NOT
62324: IFFALSE 62328
// exit ;
62326: GO 62365
// for i in tmp do
62328: LD_ADDR_VAR 0 2
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: FOR_IN
62339: IFFALSE 62363
// if IsControledBy ( i ) then
62341: LD_VAR 0 2
62345: PPUSH
62346: CALL_OW 312
62350: IFFALSE 62361
// ComUnlink ( i ) ;
62352: LD_VAR 0 2
62356: PPUSH
62357: CALL_OW 136
62361: GO 62338
62363: POP
62364: POP
// end ;
62365: PPOPN 2
62367: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62368: LD_EXP 42
62372: PUSH
62373: LD_EXP 73
62377: AND
62378: IFFALSE 62518
62380: GO 62382
62382: DISABLE
62383: LD_INT 0
62385: PPUSH
62386: PPUSH
// begin ToLua ( displayPowell(); ) ;
62387: LD_STRING displayPowell();
62389: PPUSH
62390: CALL_OW 559
// uc_side := 0 ;
62394: LD_ADDR_OWVAR 20
62398: PUSH
62399: LD_INT 0
62401: ST_TO_ADDR
// uc_nation := 2 ;
62402: LD_ADDR_OWVAR 21
62406: PUSH
62407: LD_INT 2
62409: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62410: LD_ADDR_OWVAR 37
62414: PUSH
62415: LD_INT 14
62417: ST_TO_ADDR
// vc_engine := engine_siberite ;
62418: LD_ADDR_OWVAR 39
62422: PUSH
62423: LD_INT 3
62425: ST_TO_ADDR
// vc_control := control_apeman ;
62426: LD_ADDR_OWVAR 38
62430: PUSH
62431: LD_INT 5
62433: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62434: LD_ADDR_OWVAR 40
62438: PUSH
62439: LD_INT 29
62441: ST_TO_ADDR
// un := CreateVehicle ;
62442: LD_ADDR_VAR 0 2
62446: PUSH
62447: CALL_OW 45
62451: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62452: LD_VAR 0 2
62456: PPUSH
62457: LD_INT 1
62459: PPUSH
62460: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62464: LD_INT 35
62466: PPUSH
62467: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62471: LD_VAR 0 2
62475: PPUSH
62476: LD_INT 22
62478: PUSH
62479: LD_OWVAR 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PPUSH
62488: CALL_OW 69
62492: PPUSH
62493: LD_VAR 0 2
62497: PPUSH
62498: CALL_OW 74
62502: PPUSH
62503: CALL_OW 115
// until IsDead ( un ) ;
62507: LD_VAR 0 2
62511: PPUSH
62512: CALL_OW 301
62516: IFFALSE 62464
// end ;
62518: PPOPN 2
62520: END
// every 0 0$1 trigger StreamModeActive and sStu do
62521: LD_EXP 42
62525: PUSH
62526: LD_EXP 81
62530: AND
62531: IFFALSE 62547
62533: GO 62535
62535: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62536: LD_STRING displayStucuk();
62538: PPUSH
62539: CALL_OW 559
// ResetFog ;
62543: CALL_OW 335
// end ;
62547: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62548: LD_EXP 42
62552: PUSH
62553: LD_EXP 74
62557: AND
62558: IFFALSE 62699
62560: GO 62562
62562: DISABLE
62563: LD_INT 0
62565: PPUSH
62566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62567: LD_ADDR_VAR 0 2
62571: PUSH
62572: LD_INT 22
62574: PUSH
62575: LD_OWVAR 2
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 21
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PPUSH
62598: CALL_OW 69
62602: ST_TO_ADDR
// if not tmp then
62603: LD_VAR 0 2
62607: NOT
62608: IFFALSE 62612
// exit ;
62610: GO 62699
// un := tmp [ rand ( 1 , tmp ) ] ;
62612: LD_ADDR_VAR 0 1
62616: PUSH
62617: LD_VAR 0 2
62621: PUSH
62622: LD_INT 1
62624: PPUSH
62625: LD_VAR 0 2
62629: PPUSH
62630: CALL_OW 12
62634: ARRAY
62635: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62636: LD_VAR 0 1
62640: PPUSH
62641: LD_INT 0
62643: PPUSH
62644: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_OWVAR 3
62657: PUSH
62658: LD_VAR 0 1
62662: DIFF
62663: PPUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 74
62673: PPUSH
62674: CALL_OW 115
// wait ( 0 0$20 ) ;
62678: LD_INT 700
62680: PPUSH
62681: CALL_OW 67
// SetSide ( un , your_side ) ;
62685: LD_VAR 0 1
62689: PPUSH
62690: LD_OWVAR 2
62694: PPUSH
62695: CALL_OW 235
// end ;
62699: PPOPN 2
62701: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62702: LD_EXP 42
62706: PUSH
62707: LD_EXP 75
62711: AND
62712: IFFALSE 62818
62714: GO 62716
62716: DISABLE
62717: LD_INT 0
62719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62720: LD_ADDR_VAR 0 1
62724: PUSH
62725: LD_INT 22
62727: PUSH
62728: LD_OWVAR 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 30
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 30
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PPUSH
62769: CALL_OW 69
62773: ST_TO_ADDR
// if not depot then
62774: LD_VAR 0 1
62778: NOT
62779: IFFALSE 62783
// exit ;
62781: GO 62818
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62783: LD_VAR 0 1
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PPUSH
62792: CALL_OW 250
62796: PPUSH
62797: LD_VAR 0 1
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PPUSH
62806: CALL_OW 251
62810: PPUSH
62811: LD_INT 70
62813: PPUSH
62814: CALL_OW 495
// end ;
62818: PPOPN 1
62820: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62821: LD_EXP 42
62825: PUSH
62826: LD_EXP 76
62830: AND
62831: IFFALSE 63042
62833: GO 62835
62835: DISABLE
62836: LD_INT 0
62838: PPUSH
62839: PPUSH
62840: PPUSH
62841: PPUSH
62842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62843: LD_ADDR_VAR 0 5
62847: PUSH
62848: LD_INT 22
62850: PUSH
62851: LD_OWVAR 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 21
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PPUSH
62874: CALL_OW 69
62878: ST_TO_ADDR
// if not tmp then
62879: LD_VAR 0 5
62883: NOT
62884: IFFALSE 62888
// exit ;
62886: GO 63042
// for i in tmp do
62888: LD_ADDR_VAR 0 1
62892: PUSH
62893: LD_VAR 0 5
62897: PUSH
62898: FOR_IN
62899: IFFALSE 63040
// begin d := rand ( 0 , 5 ) ;
62901: LD_ADDR_VAR 0 4
62905: PUSH
62906: LD_INT 0
62908: PPUSH
62909: LD_INT 5
62911: PPUSH
62912: CALL_OW 12
62916: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62917: LD_ADDR_VAR 0 2
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL_OW 250
62931: PPUSH
62932: LD_VAR 0 4
62936: PPUSH
62937: LD_INT 3
62939: PPUSH
62940: LD_INT 12
62942: PPUSH
62943: CALL_OW 12
62947: PPUSH
62948: CALL_OW 272
62952: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62953: LD_ADDR_VAR 0 3
62957: PUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL_OW 251
62967: PPUSH
62968: LD_VAR 0 4
62972: PPUSH
62973: LD_INT 3
62975: PPUSH
62976: LD_INT 12
62978: PPUSH
62979: CALL_OW 12
62983: PPUSH
62984: CALL_OW 273
62988: ST_TO_ADDR
// if ValidHex ( x , y ) then
62989: LD_VAR 0 2
62993: PPUSH
62994: LD_VAR 0 3
62998: PPUSH
62999: CALL_OW 488
63003: IFFALSE 63038
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63005: LD_VAR 0 1
63009: PPUSH
63010: LD_VAR 0 2
63014: PPUSH
63015: LD_VAR 0 3
63019: PPUSH
63020: LD_INT 3
63022: PPUSH
63023: LD_INT 6
63025: PPUSH
63026: CALL_OW 12
63030: PPUSH
63031: LD_INT 1
63033: PPUSH
63034: CALL_OW 483
// end ;
63038: GO 62898
63040: POP
63041: POP
// end ;
63042: PPOPN 5
63044: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63045: LD_EXP 42
63049: PUSH
63050: LD_EXP 77
63054: AND
63055: IFFALSE 63149
63057: GO 63059
63059: DISABLE
63060: LD_INT 0
63062: PPUSH
63063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63064: LD_ADDR_VAR 0 2
63068: PUSH
63069: LD_INT 22
63071: PUSH
63072: LD_OWVAR 2
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 32
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 21
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PPUSH
63106: CALL_OW 69
63110: ST_TO_ADDR
// if not tmp then
63111: LD_VAR 0 2
63115: NOT
63116: IFFALSE 63120
// exit ;
63118: GO 63149
// for i in tmp do
63120: LD_ADDR_VAR 0 1
63124: PUSH
63125: LD_VAR 0 2
63129: PUSH
63130: FOR_IN
63131: IFFALSE 63147
// SetFuel ( i , 0 ) ;
63133: LD_VAR 0 1
63137: PPUSH
63138: LD_INT 0
63140: PPUSH
63141: CALL_OW 240
63145: GO 63130
63147: POP
63148: POP
// end ;
63149: PPOPN 2
63151: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63152: LD_EXP 42
63156: PUSH
63157: LD_EXP 78
63161: AND
63162: IFFALSE 63228
63164: GO 63166
63166: DISABLE
63167: LD_INT 0
63169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63170: LD_ADDR_VAR 0 1
63174: PUSH
63175: LD_INT 22
63177: PUSH
63178: LD_OWVAR 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 30
63189: PUSH
63190: LD_INT 29
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PPUSH
63201: CALL_OW 69
63205: ST_TO_ADDR
// if not tmp then
63206: LD_VAR 0 1
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 63228
// DestroyUnit ( tmp [ 1 ] ) ;
63215: LD_VAR 0 1
63219: PUSH
63220: LD_INT 1
63222: ARRAY
63223: PPUSH
63224: CALL_OW 65
// end ;
63228: PPOPN 1
63230: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63231: LD_EXP 42
63235: PUSH
63236: LD_EXP 80
63240: AND
63241: IFFALSE 63370
63243: GO 63245
63245: DISABLE
63246: LD_INT 0
63248: PPUSH
// begin uc_side := 0 ;
63249: LD_ADDR_OWVAR 20
63253: PUSH
63254: LD_INT 0
63256: ST_TO_ADDR
// uc_nation := nation_arabian ;
63257: LD_ADDR_OWVAR 21
63261: PUSH
63262: LD_INT 2
63264: ST_TO_ADDR
// hc_gallery :=  ;
63265: LD_ADDR_OWVAR 33
63269: PUSH
63270: LD_STRING 
63272: ST_TO_ADDR
// hc_name :=  ;
63273: LD_ADDR_OWVAR 26
63277: PUSH
63278: LD_STRING 
63280: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63281: LD_INT 1
63283: PPUSH
63284: LD_INT 11
63286: PPUSH
63287: LD_INT 10
63289: PPUSH
63290: CALL_OW 380
// un := CreateHuman ;
63294: LD_ADDR_VAR 0 1
63298: PUSH
63299: CALL_OW 44
63303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63304: LD_VAR 0 1
63308: PPUSH
63309: LD_INT 1
63311: PPUSH
63312: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63316: LD_INT 35
63318: PPUSH
63319: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_INT 22
63330: PUSH
63331: LD_OWVAR 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PPUSH
63340: CALL_OW 69
63344: PPUSH
63345: LD_VAR 0 1
63349: PPUSH
63350: CALL_OW 74
63354: PPUSH
63355: CALL_OW 115
// until IsDead ( un ) ;
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 301
63368: IFFALSE 63316
// end ;
63370: PPOPN 1
63372: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63373: LD_EXP 42
63377: PUSH
63378: LD_EXP 82
63382: AND
63383: IFFALSE 63395
63385: GO 63387
63387: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63388: LD_STRING earthquake(getX(game), 0, 32)
63390: PPUSH
63391: CALL_OW 559
63395: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63396: LD_EXP 42
63400: PUSH
63401: LD_EXP 83
63405: AND
63406: IFFALSE 63497
63408: GO 63410
63410: DISABLE
63411: LD_INT 0
63413: PPUSH
// begin enable ;
63414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63415: LD_ADDR_VAR 0 1
63419: PUSH
63420: LD_INT 22
63422: PUSH
63423: LD_OWVAR 2
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 21
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 33
63444: PUSH
63445: LD_INT 3
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: PPUSH
63457: CALL_OW 69
63461: ST_TO_ADDR
// if not tmp then
63462: LD_VAR 0 1
63466: NOT
63467: IFFALSE 63471
// exit ;
63469: GO 63497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63471: LD_VAR 0 1
63475: PUSH
63476: LD_INT 1
63478: PPUSH
63479: LD_VAR 0 1
63483: PPUSH
63484: CALL_OW 12
63488: ARRAY
63489: PPUSH
63490: LD_INT 1
63492: PPUSH
63493: CALL_OW 234
// end ;
63497: PPOPN 1
63499: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63500: LD_EXP 42
63504: PUSH
63505: LD_EXP 84
63509: AND
63510: IFFALSE 63651
63512: GO 63514
63514: DISABLE
63515: LD_INT 0
63517: PPUSH
63518: PPUSH
63519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63520: LD_ADDR_VAR 0 3
63524: PUSH
63525: LD_INT 22
63527: PUSH
63528: LD_OWVAR 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 25
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PPUSH
63551: CALL_OW 69
63555: ST_TO_ADDR
// if not tmp then
63556: LD_VAR 0 3
63560: NOT
63561: IFFALSE 63565
// exit ;
63563: GO 63651
// un := tmp [ rand ( 1 , tmp ) ] ;
63565: LD_ADDR_VAR 0 2
63569: PUSH
63570: LD_VAR 0 3
63574: PUSH
63575: LD_INT 1
63577: PPUSH
63578: LD_VAR 0 3
63582: PPUSH
63583: CALL_OW 12
63587: ARRAY
63588: ST_TO_ADDR
// if Crawls ( un ) then
63589: LD_VAR 0 2
63593: PPUSH
63594: CALL_OW 318
63598: IFFALSE 63609
// ComWalk ( un ) ;
63600: LD_VAR 0 2
63604: PPUSH
63605: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63609: LD_VAR 0 2
63613: PPUSH
63614: LD_INT 9
63616: PPUSH
63617: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63621: LD_INT 28
63623: PPUSH
63624: LD_OWVAR 2
63628: PPUSH
63629: LD_INT 2
63631: PPUSH
63632: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63636: LD_INT 29
63638: PPUSH
63639: LD_OWVAR 2
63643: PPUSH
63644: LD_INT 2
63646: PPUSH
63647: CALL_OW 322
// end ;
63651: PPOPN 3
63653: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63654: LD_EXP 42
63658: PUSH
63659: LD_EXP 85
63663: AND
63664: IFFALSE 63775
63666: GO 63668
63668: DISABLE
63669: LD_INT 0
63671: PPUSH
63672: PPUSH
63673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63674: LD_ADDR_VAR 0 3
63678: PUSH
63679: LD_INT 22
63681: PUSH
63682: LD_OWVAR 2
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 25
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PPUSH
63705: CALL_OW 69
63709: ST_TO_ADDR
// if not tmp then
63710: LD_VAR 0 3
63714: NOT
63715: IFFALSE 63719
// exit ;
63717: GO 63775
// un := tmp [ rand ( 1 , tmp ) ] ;
63719: LD_ADDR_VAR 0 2
63723: PUSH
63724: LD_VAR 0 3
63728: PUSH
63729: LD_INT 1
63731: PPUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: CALL_OW 12
63741: ARRAY
63742: ST_TO_ADDR
// if Crawls ( un ) then
63743: LD_VAR 0 2
63747: PPUSH
63748: CALL_OW 318
63752: IFFALSE 63763
// ComWalk ( un ) ;
63754: LD_VAR 0 2
63758: PPUSH
63759: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63763: LD_VAR 0 2
63767: PPUSH
63768: LD_INT 8
63770: PPUSH
63771: CALL_OW 336
// end ;
63775: PPOPN 3
63777: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63778: LD_EXP 42
63782: PUSH
63783: LD_EXP 86
63787: AND
63788: IFFALSE 63932
63790: GO 63792
63792: DISABLE
63793: LD_INT 0
63795: PPUSH
63796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63797: LD_ADDR_VAR 0 2
63801: PUSH
63802: LD_INT 22
63804: PUSH
63805: LD_OWVAR 2
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 21
63816: PUSH
63817: LD_INT 2
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: LD_INT 34
63829: PUSH
63830: LD_INT 12
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 34
63839: PUSH
63840: LD_INT 51
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 34
63849: PUSH
63850: LD_INT 32
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PPUSH
63868: CALL_OW 69
63872: ST_TO_ADDR
// if not tmp then
63873: LD_VAR 0 2
63877: NOT
63878: IFFALSE 63882
// exit ;
63880: GO 63932
// for i in tmp do
63882: LD_ADDR_VAR 0 1
63886: PUSH
63887: LD_VAR 0 2
63891: PUSH
63892: FOR_IN
63893: IFFALSE 63930
// if GetCargo ( i , mat_artifact ) = 0 then
63895: LD_VAR 0 1
63899: PPUSH
63900: LD_INT 4
63902: PPUSH
63903: CALL_OW 289
63907: PUSH
63908: LD_INT 0
63910: EQUAL
63911: IFFALSE 63928
// SetCargo ( i , mat_siberit , 100 ) ;
63913: LD_VAR 0 1
63917: PPUSH
63918: LD_INT 3
63920: PPUSH
63921: LD_INT 100
63923: PPUSH
63924: CALL_OW 290
63928: GO 63892
63930: POP
63931: POP
// end ;
63932: PPOPN 2
63934: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63935: LD_EXP 42
63939: PUSH
63940: LD_EXP 87
63944: AND
63945: IFFALSE 64128
63947: GO 63949
63949: DISABLE
63950: LD_INT 0
63952: PPUSH
63953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63954: LD_ADDR_VAR 0 2
63958: PUSH
63959: LD_INT 22
63961: PUSH
63962: LD_OWVAR 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PPUSH
63971: CALL_OW 69
63975: ST_TO_ADDR
// if not tmp then
63976: LD_VAR 0 2
63980: NOT
63981: IFFALSE 63985
// exit ;
63983: GO 64128
// for i := 1 to 2 do
63985: LD_ADDR_VAR 0 1
63989: PUSH
63990: DOUBLE
63991: LD_INT 1
63993: DEC
63994: ST_TO_ADDR
63995: LD_INT 2
63997: PUSH
63998: FOR_TO
63999: IFFALSE 64126
// begin uc_side := your_side ;
64001: LD_ADDR_OWVAR 20
64005: PUSH
64006: LD_OWVAR 2
64010: ST_TO_ADDR
// uc_nation := nation_american ;
64011: LD_ADDR_OWVAR 21
64015: PUSH
64016: LD_INT 1
64018: ST_TO_ADDR
// vc_chassis := us_morphling ;
64019: LD_ADDR_OWVAR 37
64023: PUSH
64024: LD_INT 5
64026: ST_TO_ADDR
// vc_engine := engine_siberite ;
64027: LD_ADDR_OWVAR 39
64031: PUSH
64032: LD_INT 3
64034: ST_TO_ADDR
// vc_control := control_computer ;
64035: LD_ADDR_OWVAR 38
64039: PUSH
64040: LD_INT 3
64042: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64043: LD_ADDR_OWVAR 40
64047: PUSH
64048: LD_INT 10
64050: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64051: LD_VAR 0 2
64055: PUSH
64056: LD_INT 1
64058: ARRAY
64059: PPUSH
64060: CALL_OW 310
64064: NOT
64065: IFFALSE 64112
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64067: CALL_OW 45
64071: PPUSH
64072: LD_VAR 0 2
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PPUSH
64081: CALL_OW 250
64085: PPUSH
64086: LD_VAR 0 2
64090: PUSH
64091: LD_INT 1
64093: ARRAY
64094: PPUSH
64095: CALL_OW 251
64099: PPUSH
64100: LD_INT 12
64102: PPUSH
64103: LD_INT 1
64105: PPUSH
64106: CALL_OW 50
64110: GO 64124
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64112: CALL_OW 45
64116: PPUSH
64117: LD_INT 1
64119: PPUSH
64120: CALL_OW 51
// end ;
64124: GO 63998
64126: POP
64127: POP
// end ;
64128: PPOPN 2
64130: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64131: LD_EXP 42
64135: PUSH
64136: LD_EXP 88
64140: AND
64141: IFFALSE 64363
64143: GO 64145
64145: DISABLE
64146: LD_INT 0
64148: PPUSH
64149: PPUSH
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64154: LD_ADDR_VAR 0 6
64158: PUSH
64159: LD_INT 22
64161: PUSH
64162: LD_OWVAR 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 21
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: LD_INT 23
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: PPUSH
64203: CALL_OW 69
64207: ST_TO_ADDR
// if not tmp then
64208: LD_VAR 0 6
64212: NOT
64213: IFFALSE 64217
// exit ;
64215: GO 64363
// s1 := rand ( 1 , 4 ) ;
64217: LD_ADDR_VAR 0 2
64221: PUSH
64222: LD_INT 1
64224: PPUSH
64225: LD_INT 4
64227: PPUSH
64228: CALL_OW 12
64232: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64233: LD_ADDR_VAR 0 4
64237: PUSH
64238: LD_VAR 0 6
64242: PUSH
64243: LD_INT 1
64245: ARRAY
64246: PPUSH
64247: LD_VAR 0 2
64251: PPUSH
64252: CALL_OW 259
64256: ST_TO_ADDR
// if s1 = 1 then
64257: LD_VAR 0 2
64261: PUSH
64262: LD_INT 1
64264: EQUAL
64265: IFFALSE 64285
// s2 := rand ( 2 , 4 ) else
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: LD_INT 2
64274: PPUSH
64275: LD_INT 4
64277: PPUSH
64278: CALL_OW 12
64282: ST_TO_ADDR
64283: GO 64293
// s2 := 1 ;
64285: LD_ADDR_VAR 0 3
64289: PUSH
64290: LD_INT 1
64292: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: LD_VAR 0 6
64302: PUSH
64303: LD_INT 1
64305: ARRAY
64306: PPUSH
64307: LD_VAR 0 3
64311: PPUSH
64312: CALL_OW 259
64316: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64317: LD_VAR 0 6
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PPUSH
64326: LD_VAR 0 2
64330: PPUSH
64331: LD_VAR 0 5
64335: PPUSH
64336: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64340: LD_VAR 0 6
64344: PUSH
64345: LD_INT 1
64347: ARRAY
64348: PPUSH
64349: LD_VAR 0 3
64353: PPUSH
64354: LD_VAR 0 4
64358: PPUSH
64359: CALL_OW 237
// end ;
64363: PPOPN 6
64365: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64366: LD_EXP 42
64370: PUSH
64371: LD_EXP 89
64375: AND
64376: IFFALSE 64455
64378: GO 64380
64380: DISABLE
64381: LD_INT 0
64383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64384: LD_ADDR_VAR 0 1
64388: PUSH
64389: LD_INT 22
64391: PUSH
64392: LD_OWVAR 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 30
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PPUSH
64415: CALL_OW 69
64419: ST_TO_ADDR
// if not tmp then
64420: LD_VAR 0 1
64424: NOT
64425: IFFALSE 64429
// exit ;
64427: GO 64455
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64429: LD_VAR 0 1
64433: PUSH
64434: LD_INT 1
64436: PPUSH
64437: LD_VAR 0 1
64441: PPUSH
64442: CALL_OW 12
64446: ARRAY
64447: PPUSH
64448: LD_INT 1
64450: PPUSH
64451: CALL_OW 234
// end ;
64455: PPOPN 1
64457: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64458: LD_EXP 42
64462: PUSH
64463: LD_EXP 90
64467: AND
64468: IFFALSE 64580
64470: GO 64472
64472: DISABLE
64473: LD_INT 0
64475: PPUSH
64476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64477: LD_ADDR_VAR 0 2
64481: PUSH
64482: LD_INT 22
64484: PUSH
64485: LD_OWVAR 2
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 30
64499: PUSH
64500: LD_INT 27
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 30
64509: PUSH
64510: LD_INT 26
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 30
64519: PUSH
64520: LD_INT 28
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PPUSH
64537: CALL_OW 69
64541: ST_TO_ADDR
// if not tmp then
64542: LD_VAR 0 2
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 64580
// for i in tmp do
64551: LD_ADDR_VAR 0 1
64555: PUSH
64556: LD_VAR 0 2
64560: PUSH
64561: FOR_IN
64562: IFFALSE 64578
// SetLives ( i , 1 ) ;
64564: LD_VAR 0 1
64568: PPUSH
64569: LD_INT 1
64571: PPUSH
64572: CALL_OW 234
64576: GO 64561
64578: POP
64579: POP
// end ;
64580: PPOPN 2
64582: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64583: LD_EXP 42
64587: PUSH
64588: LD_EXP 91
64592: AND
64593: IFFALSE 64880
64595: GO 64597
64597: DISABLE
64598: LD_INT 0
64600: PPUSH
64601: PPUSH
64602: PPUSH
// begin i := rand ( 1 , 7 ) ;
64603: LD_ADDR_VAR 0 1
64607: PUSH
64608: LD_INT 1
64610: PPUSH
64611: LD_INT 7
64613: PPUSH
64614: CALL_OW 12
64618: ST_TO_ADDR
// case i of 1 :
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 1
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64632
64630: GO 64642
64632: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64633: LD_STRING earthquake(getX(game), 0, 32)
64635: PPUSH
64636: CALL_OW 559
64640: GO 64880
64642: LD_INT 2
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64650
64648: GO 64664
64650: POP
// begin ToLua ( displayStucuk(); ) ;
64651: LD_STRING displayStucuk();
64653: PPUSH
64654: CALL_OW 559
// ResetFog ;
64658: CALL_OW 335
// end ; 3 :
64662: GO 64880
64664: LD_INT 3
64666: DOUBLE
64667: EQUAL
64668: IFTRUE 64672
64670: GO 64776
64672: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64673: LD_ADDR_VAR 0 2
64677: PUSH
64678: LD_INT 22
64680: PUSH
64681: LD_OWVAR 2
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 25
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PPUSH
64704: CALL_OW 69
64708: ST_TO_ADDR
// if not tmp then
64709: LD_VAR 0 2
64713: NOT
64714: IFFALSE 64718
// exit ;
64716: GO 64880
// un := tmp [ rand ( 1 , tmp ) ] ;
64718: LD_ADDR_VAR 0 3
64722: PUSH
64723: LD_VAR 0 2
64727: PUSH
64728: LD_INT 1
64730: PPUSH
64731: LD_VAR 0 2
64735: PPUSH
64736: CALL_OW 12
64740: ARRAY
64741: ST_TO_ADDR
// if Crawls ( un ) then
64742: LD_VAR 0 3
64746: PPUSH
64747: CALL_OW 318
64751: IFFALSE 64762
// ComWalk ( un ) ;
64753: LD_VAR 0 3
64757: PPUSH
64758: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64762: LD_VAR 0 3
64766: PPUSH
64767: LD_INT 8
64769: PPUSH
64770: CALL_OW 336
// end ; 4 :
64774: GO 64880
64776: LD_INT 4
64778: DOUBLE
64779: EQUAL
64780: IFTRUE 64784
64782: GO 64858
64784: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64785: LD_ADDR_VAR 0 2
64789: PUSH
64790: LD_INT 22
64792: PUSH
64793: LD_OWVAR 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 30
64804: PUSH
64805: LD_INT 29
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PPUSH
64816: CALL_OW 69
64820: ST_TO_ADDR
// if not tmp then
64821: LD_VAR 0 2
64825: NOT
64826: IFFALSE 64830
// exit ;
64828: GO 64880
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64830: LD_VAR 0 2
64834: PUSH
64835: LD_INT 1
64837: ARRAY
64838: PPUSH
64839: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64843: LD_VAR 0 2
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PPUSH
64852: CALL_OW 65
// end ; 5 .. 7 :
64856: GO 64880
64858: LD_INT 5
64860: DOUBLE
64861: GREATEREQUAL
64862: IFFALSE 64870
64864: LD_INT 7
64866: DOUBLE
64867: LESSEQUAL
64868: IFTRUE 64872
64870: GO 64879
64872: POP
// StreamSibBomb ; end ;
64873: CALL 61117 0 0
64877: GO 64880
64879: POP
// end ;
64880: PPOPN 3
64882: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64883: LD_EXP 42
64887: PUSH
64888: LD_EXP 92
64892: AND
64893: IFFALSE 65049
64895: GO 64897
64897: DISABLE
64898: LD_INT 0
64900: PPUSH
64901: PPUSH
64902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64903: LD_ADDR_VAR 0 2
64907: PUSH
64908: LD_INT 81
64910: PUSH
64911: LD_OWVAR 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: LD_INT 21
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 21
64935: PUSH
64936: LD_INT 2
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PPUSH
64952: CALL_OW 69
64956: ST_TO_ADDR
// if not tmp then
64957: LD_VAR 0 2
64961: NOT
64962: IFFALSE 64966
// exit ;
64964: GO 65049
// p := 0 ;
64966: LD_ADDR_VAR 0 3
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64974: LD_INT 35
64976: PPUSH
64977: CALL_OW 67
// p := p + 1 ;
64981: LD_ADDR_VAR 0 3
64985: PUSH
64986: LD_VAR 0 3
64990: PUSH
64991: LD_INT 1
64993: PLUS
64994: ST_TO_ADDR
// for i in tmp do
64995: LD_ADDR_VAR 0 1
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: FOR_IN
65006: IFFALSE 65037
// if GetLives ( i ) < 1000 then
65008: LD_VAR 0 1
65012: PPUSH
65013: CALL_OW 256
65017: PUSH
65018: LD_INT 1000
65020: LESS
65021: IFFALSE 65035
// SetLives ( i , 1000 ) ;
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_INT 1000
65030: PPUSH
65031: CALL_OW 234
65035: GO 65005
65037: POP
65038: POP
// until p > 20 ;
65039: LD_VAR 0 3
65043: PUSH
65044: LD_INT 20
65046: GREATER
65047: IFFALSE 64974
// end ;
65049: PPOPN 3
65051: END
// every 0 0$1 trigger StreamModeActive and sTime do
65052: LD_EXP 42
65056: PUSH
65057: LD_EXP 93
65061: AND
65062: IFFALSE 65097
65064: GO 65066
65066: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65067: LD_INT 28
65069: PPUSH
65070: LD_OWVAR 2
65074: PPUSH
65075: LD_INT 2
65077: PPUSH
65078: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65082: LD_INT 30
65084: PPUSH
65085: LD_OWVAR 2
65089: PPUSH
65090: LD_INT 2
65092: PPUSH
65093: CALL_OW 322
// end ;
65097: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65098: LD_EXP 42
65102: PUSH
65103: LD_EXP 94
65107: AND
65108: IFFALSE 65229
65110: GO 65112
65112: DISABLE
65113: LD_INT 0
65115: PPUSH
65116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65117: LD_ADDR_VAR 0 2
65121: PUSH
65122: LD_INT 22
65124: PUSH
65125: LD_OWVAR 2
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 21
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: LD_INT 23
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PPUSH
65166: CALL_OW 69
65170: ST_TO_ADDR
// if not tmp then
65171: LD_VAR 0 2
65175: NOT
65176: IFFALSE 65180
// exit ;
65178: GO 65229
// for i in tmp do
65180: LD_ADDR_VAR 0 1
65184: PUSH
65185: LD_VAR 0 2
65189: PUSH
65190: FOR_IN
65191: IFFALSE 65227
// begin if Crawls ( i ) then
65193: LD_VAR 0 1
65197: PPUSH
65198: CALL_OW 318
65202: IFFALSE 65213
// ComWalk ( i ) ;
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 138
// SetClass ( i , 2 ) ;
65213: LD_VAR 0 1
65217: PPUSH
65218: LD_INT 2
65220: PPUSH
65221: CALL_OW 336
// end ;
65225: GO 65190
65227: POP
65228: POP
// end ;
65229: PPOPN 2
65231: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65232: LD_EXP 42
65236: PUSH
65237: LD_EXP 95
65241: AND
65242: IFFALSE 65530
65244: GO 65246
65246: DISABLE
65247: LD_INT 0
65249: PPUSH
65250: PPUSH
65251: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65252: LD_OWVAR 2
65256: PPUSH
65257: LD_INT 9
65259: PPUSH
65260: LD_INT 1
65262: PPUSH
65263: LD_INT 1
65265: PPUSH
65266: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65270: LD_INT 9
65272: PPUSH
65273: LD_OWVAR 2
65277: PPUSH
65278: CALL_OW 343
// uc_side := 9 ;
65282: LD_ADDR_OWVAR 20
65286: PUSH
65287: LD_INT 9
65289: ST_TO_ADDR
// uc_nation := 2 ;
65290: LD_ADDR_OWVAR 21
65294: PUSH
65295: LD_INT 2
65297: ST_TO_ADDR
// hc_name := Dark Warrior ;
65298: LD_ADDR_OWVAR 26
65302: PUSH
65303: LD_STRING Dark Warrior
65305: ST_TO_ADDR
// hc_gallery :=  ;
65306: LD_ADDR_OWVAR 33
65310: PUSH
65311: LD_STRING 
65313: ST_TO_ADDR
// hc_noskilllimit := true ;
65314: LD_ADDR_OWVAR 76
65318: PUSH
65319: LD_INT 1
65321: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65322: LD_ADDR_OWVAR 31
65326: PUSH
65327: LD_INT 30
65329: PUSH
65330: LD_INT 30
65332: PUSH
65333: LD_INT 30
65335: PUSH
65336: LD_INT 30
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
// un := CreateHuman ;
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: CALL_OW 44
65354: ST_TO_ADDR
// hc_noskilllimit := false ;
65355: LD_ADDR_OWVAR 76
65359: PUSH
65360: LD_INT 0
65362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65363: LD_VAR 0 3
65367: PPUSH
65368: LD_INT 1
65370: PPUSH
65371: CALL_OW 51
// ToLua ( playRanger() ) ;
65375: LD_STRING playRanger()
65377: PPUSH
65378: CALL_OW 559
// p := 0 ;
65382: LD_ADDR_VAR 0 2
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65390: LD_INT 35
65392: PPUSH
65393: CALL_OW 67
// p := p + 1 ;
65397: LD_ADDR_VAR 0 2
65401: PUSH
65402: LD_VAR 0 2
65406: PUSH
65407: LD_INT 1
65409: PLUS
65410: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65411: LD_VAR 0 3
65415: PPUSH
65416: CALL_OW 256
65420: PUSH
65421: LD_INT 1000
65423: LESS
65424: IFFALSE 65438
// SetLives ( un , 1000 ) ;
65426: LD_VAR 0 3
65430: PPUSH
65431: LD_INT 1000
65433: PPUSH
65434: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65438: LD_VAR 0 3
65442: PPUSH
65443: LD_INT 81
65445: PUSH
65446: LD_OWVAR 2
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 91
65457: PUSH
65458: LD_VAR 0 3
65462: PUSH
65463: LD_INT 30
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PPUSH
65475: CALL_OW 69
65479: PPUSH
65480: LD_VAR 0 3
65484: PPUSH
65485: CALL_OW 74
65489: PPUSH
65490: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65494: LD_VAR 0 2
65498: PUSH
65499: LD_INT 80
65501: GREATER
65502: PUSH
65503: LD_VAR 0 3
65507: PPUSH
65508: CALL_OW 301
65512: OR
65513: IFFALSE 65390
// if un then
65515: LD_VAR 0 3
65519: IFFALSE 65530
// RemoveUnit ( un ) ;
65521: LD_VAR 0 3
65525: PPUSH
65526: CALL_OW 64
// end ;
65530: PPOPN 3
65532: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65533: LD_EXP 96
65537: IFFALSE 65653
65539: GO 65541
65541: DISABLE
65542: LD_INT 0
65544: PPUSH
65545: PPUSH
65546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65547: LD_ADDR_VAR 0 2
65551: PUSH
65552: LD_INT 81
65554: PUSH
65555: LD_OWVAR 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 21
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PPUSH
65578: CALL_OW 69
65582: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65583: LD_STRING playComputer()
65585: PPUSH
65586: CALL_OW 559
// if not tmp then
65590: LD_VAR 0 2
65594: NOT
65595: IFFALSE 65599
// exit ;
65597: GO 65653
// for i in tmp do
65599: LD_ADDR_VAR 0 1
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: FOR_IN
65610: IFFALSE 65651
// for j := 1 to 4 do
65612: LD_ADDR_VAR 0 3
65616: PUSH
65617: DOUBLE
65618: LD_INT 1
65620: DEC
65621: ST_TO_ADDR
65622: LD_INT 4
65624: PUSH
65625: FOR_TO
65626: IFFALSE 65647
// SetSkill ( i , j , 10 ) ;
65628: LD_VAR 0 1
65632: PPUSH
65633: LD_VAR 0 3
65637: PPUSH
65638: LD_INT 10
65640: PPUSH
65641: CALL_OW 237
65645: GO 65625
65647: POP
65648: POP
65649: GO 65609
65651: POP
65652: POP
// end ;
65653: PPOPN 3
65655: END
// every 0 0$1 trigger s30 do var i , tmp ;
65656: LD_EXP 97
65660: IFFALSE 65729
65662: GO 65664
65664: DISABLE
65665: LD_INT 0
65667: PPUSH
65668: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65669: LD_ADDR_VAR 0 2
65673: PUSH
65674: LD_INT 22
65676: PUSH
65677: LD_OWVAR 2
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PPUSH
65686: CALL_OW 69
65690: ST_TO_ADDR
// if not tmp then
65691: LD_VAR 0 2
65695: NOT
65696: IFFALSE 65700
// exit ;
65698: GO 65729
// for i in tmp do
65700: LD_ADDR_VAR 0 1
65704: PUSH
65705: LD_VAR 0 2
65709: PUSH
65710: FOR_IN
65711: IFFALSE 65727
// SetLives ( i , 300 ) ;
65713: LD_VAR 0 1
65717: PPUSH
65718: LD_INT 300
65720: PPUSH
65721: CALL_OW 234
65725: GO 65710
65727: POP
65728: POP
// end ;
65729: PPOPN 2
65731: END
// every 0 0$1 trigger s60 do var i , tmp ;
65732: LD_EXP 98
65736: IFFALSE 65805
65738: GO 65740
65740: DISABLE
65741: LD_INT 0
65743: PPUSH
65744: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: LD_INT 22
65752: PUSH
65753: LD_OWVAR 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PPUSH
65762: CALL_OW 69
65766: ST_TO_ADDR
// if not tmp then
65767: LD_VAR 0 2
65771: NOT
65772: IFFALSE 65776
// exit ;
65774: GO 65805
// for i in tmp do
65776: LD_ADDR_VAR 0 1
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: FOR_IN
65787: IFFALSE 65803
// SetLives ( i , 600 ) ;
65789: LD_VAR 0 1
65793: PPUSH
65794: LD_INT 600
65796: PPUSH
65797: CALL_OW 234
65801: GO 65786
65803: POP
65804: POP
// end ;
65805: PPOPN 2
65807: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65808: LD_INT 0
65810: PPUSH
// case cmd of 301 :
65811: LD_VAR 0 1
65815: PUSH
65816: LD_INT 301
65818: DOUBLE
65819: EQUAL
65820: IFTRUE 65824
65822: GO 65856
65824: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65825: LD_VAR 0 6
65829: PPUSH
65830: LD_VAR 0 7
65834: PPUSH
65835: LD_VAR 0 8
65839: PPUSH
65840: LD_VAR 0 4
65844: PPUSH
65845: LD_VAR 0 5
65849: PPUSH
65850: CALL 67065 0 5
65854: GO 65977
65856: LD_INT 302
65858: DOUBLE
65859: EQUAL
65860: IFTRUE 65864
65862: GO 65901
65864: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65865: LD_VAR 0 6
65869: PPUSH
65870: LD_VAR 0 7
65874: PPUSH
65875: LD_VAR 0 8
65879: PPUSH
65880: LD_VAR 0 9
65884: PPUSH
65885: LD_VAR 0 4
65889: PPUSH
65890: LD_VAR 0 5
65894: PPUSH
65895: CALL 67156 0 6
65899: GO 65977
65901: LD_INT 303
65903: DOUBLE
65904: EQUAL
65905: IFTRUE 65909
65907: GO 65946
65909: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65910: LD_VAR 0 6
65914: PPUSH
65915: LD_VAR 0 7
65919: PPUSH
65920: LD_VAR 0 8
65924: PPUSH
65925: LD_VAR 0 9
65929: PPUSH
65930: LD_VAR 0 4
65934: PPUSH
65935: LD_VAR 0 5
65939: PPUSH
65940: CALL 65982 0 6
65944: GO 65977
65946: LD_INT 304
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65954
65952: GO 65976
65954: POP
// hHackTeleport ( unit , x , y ) ; end ;
65955: LD_VAR 0 2
65959: PPUSH
65960: LD_VAR 0 4
65964: PPUSH
65965: LD_VAR 0 5
65969: PPUSH
65970: CALL 67749 0 3
65974: GO 65977
65976: POP
// end ;
65977: LD_VAR 0 12
65981: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65986: LD_VAR 0 1
65990: PUSH
65991: LD_INT 1
65993: LESS
65994: PUSH
65995: LD_VAR 0 1
65999: PUSH
66000: LD_INT 3
66002: GREATER
66003: OR
66004: PUSH
66005: LD_VAR 0 5
66009: PPUSH
66010: LD_VAR 0 6
66014: PPUSH
66015: CALL_OW 428
66019: OR
66020: IFFALSE 66024
// exit ;
66022: GO 66752
// uc_side := your_side ;
66024: LD_ADDR_OWVAR 20
66028: PUSH
66029: LD_OWVAR 2
66033: ST_TO_ADDR
// uc_nation := nation ;
66034: LD_ADDR_OWVAR 21
66038: PUSH
66039: LD_VAR 0 1
66043: ST_TO_ADDR
// bc_level = 1 ;
66044: LD_ADDR_OWVAR 43
66048: PUSH
66049: LD_INT 1
66051: ST_TO_ADDR
// case btype of 1 :
66052: LD_VAR 0 2
66056: PUSH
66057: LD_INT 1
66059: DOUBLE
66060: EQUAL
66061: IFTRUE 66065
66063: GO 66076
66065: POP
// bc_type := b_depot ; 2 :
66066: LD_ADDR_OWVAR 42
66070: PUSH
66071: LD_INT 0
66073: ST_TO_ADDR
66074: GO 66696
66076: LD_INT 2
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66084
66082: GO 66095
66084: POP
// bc_type := b_warehouse ; 3 :
66085: LD_ADDR_OWVAR 42
66089: PUSH
66090: LD_INT 1
66092: ST_TO_ADDR
66093: GO 66696
66095: LD_INT 3
66097: DOUBLE
66098: EQUAL
66099: IFTRUE 66103
66101: GO 66114
66103: POP
// bc_type := b_lab ; 4 .. 9 :
66104: LD_ADDR_OWVAR 42
66108: PUSH
66109: LD_INT 6
66111: ST_TO_ADDR
66112: GO 66696
66114: LD_INT 4
66116: DOUBLE
66117: GREATEREQUAL
66118: IFFALSE 66126
66120: LD_INT 9
66122: DOUBLE
66123: LESSEQUAL
66124: IFTRUE 66128
66126: GO 66188
66128: POP
// begin bc_type := b_lab_half ;
66129: LD_ADDR_OWVAR 42
66133: PUSH
66134: LD_INT 7
66136: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66137: LD_ADDR_OWVAR 44
66141: PUSH
66142: LD_INT 10
66144: PUSH
66145: LD_INT 11
66147: PUSH
66148: LD_INT 12
66150: PUSH
66151: LD_INT 15
66153: PUSH
66154: LD_INT 14
66156: PUSH
66157: LD_INT 13
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: PUSH
66168: LD_VAR 0 2
66172: PUSH
66173: LD_INT 3
66175: MINUS
66176: ARRAY
66177: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66178: LD_ADDR_OWVAR 45
66182: PUSH
66183: LD_INT 9
66185: ST_TO_ADDR
// end ; 10 .. 13 :
66186: GO 66696
66188: LD_INT 10
66190: DOUBLE
66191: GREATEREQUAL
66192: IFFALSE 66200
66194: LD_INT 13
66196: DOUBLE
66197: LESSEQUAL
66198: IFTRUE 66202
66200: GO 66279
66202: POP
// begin bc_type := b_lab_full ;
66203: LD_ADDR_OWVAR 42
66207: PUSH
66208: LD_INT 8
66210: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66211: LD_ADDR_OWVAR 44
66215: PUSH
66216: LD_INT 10
66218: PUSH
66219: LD_INT 12
66221: PUSH
66222: LD_INT 14
66224: PUSH
66225: LD_INT 13
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_VAR 0 2
66238: PUSH
66239: LD_INT 9
66241: MINUS
66242: ARRAY
66243: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66244: LD_ADDR_OWVAR 45
66248: PUSH
66249: LD_INT 11
66251: PUSH
66252: LD_INT 15
66254: PUSH
66255: LD_INT 12
66257: PUSH
66258: LD_INT 15
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: PUSH
66267: LD_VAR 0 2
66271: PUSH
66272: LD_INT 9
66274: MINUS
66275: ARRAY
66276: ST_TO_ADDR
// end ; 14 :
66277: GO 66696
66279: LD_INT 14
66281: DOUBLE
66282: EQUAL
66283: IFTRUE 66287
66285: GO 66298
66287: POP
// bc_type := b_workshop ; 15 :
66288: LD_ADDR_OWVAR 42
66292: PUSH
66293: LD_INT 2
66295: ST_TO_ADDR
66296: GO 66696
66298: LD_INT 15
66300: DOUBLE
66301: EQUAL
66302: IFTRUE 66306
66304: GO 66317
66306: POP
// bc_type := b_factory ; 16 :
66307: LD_ADDR_OWVAR 42
66311: PUSH
66312: LD_INT 3
66314: ST_TO_ADDR
66315: GO 66696
66317: LD_INT 16
66319: DOUBLE
66320: EQUAL
66321: IFTRUE 66325
66323: GO 66336
66325: POP
// bc_type := b_ext_gun ; 17 :
66326: LD_ADDR_OWVAR 42
66330: PUSH
66331: LD_INT 17
66333: ST_TO_ADDR
66334: GO 66696
66336: LD_INT 17
66338: DOUBLE
66339: EQUAL
66340: IFTRUE 66344
66342: GO 66372
66344: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66345: LD_ADDR_OWVAR 42
66349: PUSH
66350: LD_INT 19
66352: PUSH
66353: LD_INT 23
66355: PUSH
66356: LD_INT 19
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: LIST
66363: PUSH
66364: LD_VAR 0 1
66368: ARRAY
66369: ST_TO_ADDR
66370: GO 66696
66372: LD_INT 18
66374: DOUBLE
66375: EQUAL
66376: IFTRUE 66380
66378: GO 66391
66380: POP
// bc_type := b_ext_radar ; 19 :
66381: LD_ADDR_OWVAR 42
66385: PUSH
66386: LD_INT 20
66388: ST_TO_ADDR
66389: GO 66696
66391: LD_INT 19
66393: DOUBLE
66394: EQUAL
66395: IFTRUE 66399
66397: GO 66410
66399: POP
// bc_type := b_ext_radio ; 20 :
66400: LD_ADDR_OWVAR 42
66404: PUSH
66405: LD_INT 22
66407: ST_TO_ADDR
66408: GO 66696
66410: LD_INT 20
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66418
66416: GO 66429
66418: POP
// bc_type := b_ext_siberium ; 21 :
66419: LD_ADDR_OWVAR 42
66423: PUSH
66424: LD_INT 21
66426: ST_TO_ADDR
66427: GO 66696
66429: LD_INT 21
66431: DOUBLE
66432: EQUAL
66433: IFTRUE 66437
66435: GO 66448
66437: POP
// bc_type := b_ext_computer ; 22 :
66438: LD_ADDR_OWVAR 42
66442: PUSH
66443: LD_INT 24
66445: ST_TO_ADDR
66446: GO 66696
66448: LD_INT 22
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66467
66456: POP
// bc_type := b_ext_track ; 23 :
66457: LD_ADDR_OWVAR 42
66461: PUSH
66462: LD_INT 16
66464: ST_TO_ADDR
66465: GO 66696
66467: LD_INT 23
66469: DOUBLE
66470: EQUAL
66471: IFTRUE 66475
66473: GO 66486
66475: POP
// bc_type := b_ext_laser ; 24 :
66476: LD_ADDR_OWVAR 42
66480: PUSH
66481: LD_INT 25
66483: ST_TO_ADDR
66484: GO 66696
66486: LD_INT 24
66488: DOUBLE
66489: EQUAL
66490: IFTRUE 66494
66492: GO 66505
66494: POP
// bc_type := b_control_tower ; 25 :
66495: LD_ADDR_OWVAR 42
66499: PUSH
66500: LD_INT 36
66502: ST_TO_ADDR
66503: GO 66696
66505: LD_INT 25
66507: DOUBLE
66508: EQUAL
66509: IFTRUE 66513
66511: GO 66524
66513: POP
// bc_type := b_breastwork ; 26 :
66514: LD_ADDR_OWVAR 42
66518: PUSH
66519: LD_INT 31
66521: ST_TO_ADDR
66522: GO 66696
66524: LD_INT 26
66526: DOUBLE
66527: EQUAL
66528: IFTRUE 66532
66530: GO 66543
66532: POP
// bc_type := b_bunker ; 27 :
66533: LD_ADDR_OWVAR 42
66537: PUSH
66538: LD_INT 32
66540: ST_TO_ADDR
66541: GO 66696
66543: LD_INT 27
66545: DOUBLE
66546: EQUAL
66547: IFTRUE 66551
66549: GO 66562
66551: POP
// bc_type := b_turret ; 28 :
66552: LD_ADDR_OWVAR 42
66556: PUSH
66557: LD_INT 33
66559: ST_TO_ADDR
66560: GO 66696
66562: LD_INT 28
66564: DOUBLE
66565: EQUAL
66566: IFTRUE 66570
66568: GO 66581
66570: POP
// bc_type := b_armoury ; 29 :
66571: LD_ADDR_OWVAR 42
66575: PUSH
66576: LD_INT 4
66578: ST_TO_ADDR
66579: GO 66696
66581: LD_INT 29
66583: DOUBLE
66584: EQUAL
66585: IFTRUE 66589
66587: GO 66600
66589: POP
// bc_type := b_barracks ; 30 :
66590: LD_ADDR_OWVAR 42
66594: PUSH
66595: LD_INT 5
66597: ST_TO_ADDR
66598: GO 66696
66600: LD_INT 30
66602: DOUBLE
66603: EQUAL
66604: IFTRUE 66608
66606: GO 66619
66608: POP
// bc_type := b_solar_power ; 31 :
66609: LD_ADDR_OWVAR 42
66613: PUSH
66614: LD_INT 27
66616: ST_TO_ADDR
66617: GO 66696
66619: LD_INT 31
66621: DOUBLE
66622: EQUAL
66623: IFTRUE 66627
66625: GO 66638
66627: POP
// bc_type := b_oil_power ; 32 :
66628: LD_ADDR_OWVAR 42
66632: PUSH
66633: LD_INT 26
66635: ST_TO_ADDR
66636: GO 66696
66638: LD_INT 32
66640: DOUBLE
66641: EQUAL
66642: IFTRUE 66646
66644: GO 66657
66646: POP
// bc_type := b_siberite_power ; 33 :
66647: LD_ADDR_OWVAR 42
66651: PUSH
66652: LD_INT 28
66654: ST_TO_ADDR
66655: GO 66696
66657: LD_INT 33
66659: DOUBLE
66660: EQUAL
66661: IFTRUE 66665
66663: GO 66676
66665: POP
// bc_type := b_oil_mine ; 34 :
66666: LD_ADDR_OWVAR 42
66670: PUSH
66671: LD_INT 29
66673: ST_TO_ADDR
66674: GO 66696
66676: LD_INT 34
66678: DOUBLE
66679: EQUAL
66680: IFTRUE 66684
66682: GO 66695
66684: POP
// bc_type := b_siberite_mine ; end ;
66685: LD_ADDR_OWVAR 42
66689: PUSH
66690: LD_INT 30
66692: ST_TO_ADDR
66693: GO 66696
66695: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66696: LD_ADDR_VAR 0 8
66700: PUSH
66701: LD_VAR 0 5
66705: PPUSH
66706: LD_VAR 0 6
66710: PPUSH
66711: LD_VAR 0 3
66715: PPUSH
66716: CALL_OW 47
66720: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66721: LD_OWVAR 42
66725: PUSH
66726: LD_INT 32
66728: PUSH
66729: LD_INT 33
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: IN
66736: IFFALSE 66752
// PlaceWeaponTurret ( b , weapon ) ;
66738: LD_VAR 0 8
66742: PPUSH
66743: LD_VAR 0 4
66747: PPUSH
66748: CALL_OW 431
// end ;
66752: LD_VAR 0 7
66756: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66757: LD_INT 0
66759: PPUSH
66760: PPUSH
66761: PPUSH
66762: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66763: LD_ADDR_VAR 0 4
66767: PUSH
66768: LD_INT 22
66770: PUSH
66771: LD_OWVAR 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: LD_INT 30
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 30
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PPUSH
66812: CALL_OW 69
66816: ST_TO_ADDR
// if not tmp then
66817: LD_VAR 0 4
66821: NOT
66822: IFFALSE 66826
// exit ;
66824: GO 66885
// for i in tmp do
66826: LD_ADDR_VAR 0 2
66830: PUSH
66831: LD_VAR 0 4
66835: PUSH
66836: FOR_IN
66837: IFFALSE 66883
// for j = 1 to 3 do
66839: LD_ADDR_VAR 0 3
66843: PUSH
66844: DOUBLE
66845: LD_INT 1
66847: DEC
66848: ST_TO_ADDR
66849: LD_INT 3
66851: PUSH
66852: FOR_TO
66853: IFFALSE 66879
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66855: LD_VAR 0 2
66859: PPUSH
66860: CALL_OW 274
66864: PPUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: LD_INT 99999
66872: PPUSH
66873: CALL_OW 277
66877: GO 66852
66879: POP
66880: POP
66881: GO 66836
66883: POP
66884: POP
// end ;
66885: LD_VAR 0 1
66889: RET
// export function hHackSetLevel10 ; var i , j ; begin
66890: LD_INT 0
66892: PPUSH
66893: PPUSH
66894: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66895: LD_ADDR_VAR 0 2
66899: PUSH
66900: LD_INT 21
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PPUSH
66910: CALL_OW 69
66914: PUSH
66915: FOR_IN
66916: IFFALSE 66968
// if IsSelected ( i ) then
66918: LD_VAR 0 2
66922: PPUSH
66923: CALL_OW 306
66927: IFFALSE 66966
// begin for j := 1 to 4 do
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: DOUBLE
66935: LD_INT 1
66937: DEC
66938: ST_TO_ADDR
66939: LD_INT 4
66941: PUSH
66942: FOR_TO
66943: IFFALSE 66964
// SetSkill ( i , j , 10 ) ;
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_VAR 0 3
66954: PPUSH
66955: LD_INT 10
66957: PPUSH
66958: CALL_OW 237
66962: GO 66942
66964: POP
66965: POP
// end ;
66966: GO 66915
66968: POP
66969: POP
// end ;
66970: LD_VAR 0 1
66974: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66975: LD_INT 0
66977: PPUSH
66978: PPUSH
66979: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66980: LD_ADDR_VAR 0 2
66984: PUSH
66985: LD_INT 22
66987: PUSH
66988: LD_OWVAR 2
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 21
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 69
67015: PUSH
67016: FOR_IN
67017: IFFALSE 67058
// begin for j := 1 to 4 do
67019: LD_ADDR_VAR 0 3
67023: PUSH
67024: DOUBLE
67025: LD_INT 1
67027: DEC
67028: ST_TO_ADDR
67029: LD_INT 4
67031: PUSH
67032: FOR_TO
67033: IFFALSE 67054
// SetSkill ( i , j , 10 ) ;
67035: LD_VAR 0 2
67039: PPUSH
67040: LD_VAR 0 3
67044: PPUSH
67045: LD_INT 10
67047: PPUSH
67048: CALL_OW 237
67052: GO 67032
67054: POP
67055: POP
// end ;
67056: GO 67016
67058: POP
67059: POP
// end ;
67060: LD_VAR 0 1
67064: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67065: LD_INT 0
67067: PPUSH
// uc_side := your_side ;
67068: LD_ADDR_OWVAR 20
67072: PUSH
67073: LD_OWVAR 2
67077: ST_TO_ADDR
// uc_nation := nation ;
67078: LD_ADDR_OWVAR 21
67082: PUSH
67083: LD_VAR 0 1
67087: ST_TO_ADDR
// InitHc ;
67088: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67092: LD_INT 0
67094: PPUSH
67095: LD_VAR 0 2
67099: PPUSH
67100: LD_VAR 0 3
67104: PPUSH
67105: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67109: LD_VAR 0 4
67113: PPUSH
67114: LD_VAR 0 5
67118: PPUSH
67119: CALL_OW 428
67123: PUSH
67124: LD_INT 0
67126: EQUAL
67127: IFFALSE 67151
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67129: CALL_OW 44
67133: PPUSH
67134: LD_VAR 0 4
67138: PPUSH
67139: LD_VAR 0 5
67143: PPUSH
67144: LD_INT 1
67146: PPUSH
67147: CALL_OW 48
// end ;
67151: LD_VAR 0 6
67155: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67156: LD_INT 0
67158: PPUSH
67159: PPUSH
// uc_side := your_side ;
67160: LD_ADDR_OWVAR 20
67164: PUSH
67165: LD_OWVAR 2
67169: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67170: LD_VAR 0 1
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: LD_INT 5
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: IN
67197: IFFALSE 67209
// uc_nation := nation_american else
67199: LD_ADDR_OWVAR 21
67203: PUSH
67204: LD_INT 1
67206: ST_TO_ADDR
67207: GO 67252
// if chassis in [ 11 , 12 , 13 , 14 ] then
67209: LD_VAR 0 1
67213: PUSH
67214: LD_INT 11
67216: PUSH
67217: LD_INT 12
67219: PUSH
67220: LD_INT 13
67222: PUSH
67223: LD_INT 14
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: IN
67232: IFFALSE 67244
// uc_nation := nation_arabian else
67234: LD_ADDR_OWVAR 21
67238: PUSH
67239: LD_INT 2
67241: ST_TO_ADDR
67242: GO 67252
// uc_nation := nation_russian ;
67244: LD_ADDR_OWVAR 21
67248: PUSH
67249: LD_INT 3
67251: ST_TO_ADDR
// vc_chassis := chassis ;
67252: LD_ADDR_OWVAR 37
67256: PUSH
67257: LD_VAR 0 1
67261: ST_TO_ADDR
// vc_engine := engine ;
67262: LD_ADDR_OWVAR 39
67266: PUSH
67267: LD_VAR 0 2
67271: ST_TO_ADDR
// vc_control := control ;
67272: LD_ADDR_OWVAR 38
67276: PUSH
67277: LD_VAR 0 3
67281: ST_TO_ADDR
// vc_weapon := weapon ;
67282: LD_ADDR_OWVAR 40
67286: PUSH
67287: LD_VAR 0 4
67291: ST_TO_ADDR
// un := CreateVehicle ;
67292: LD_ADDR_VAR 0 8
67296: PUSH
67297: CALL_OW 45
67301: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67302: LD_VAR 0 8
67306: PPUSH
67307: LD_INT 0
67309: PPUSH
67310: LD_INT 5
67312: PPUSH
67313: CALL_OW 12
67317: PPUSH
67318: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67322: LD_VAR 0 8
67326: PPUSH
67327: LD_VAR 0 5
67331: PPUSH
67332: LD_VAR 0 6
67336: PPUSH
67337: LD_INT 1
67339: PPUSH
67340: CALL_OW 48
// end ;
67344: LD_VAR 0 7
67348: RET
// export hInvincible ; every 1 do
67349: GO 67351
67351: DISABLE
// hInvincible := [ ] ;
67352: LD_ADDR_EXP 99
67356: PUSH
67357: EMPTY
67358: ST_TO_ADDR
67359: END
// every 10 do var i ;
67360: GO 67362
67362: DISABLE
67363: LD_INT 0
67365: PPUSH
// begin enable ;
67366: ENABLE
// if not hInvincible then
67367: LD_EXP 99
67371: NOT
67372: IFFALSE 67376
// exit ;
67374: GO 67420
// for i in hInvincible do
67376: LD_ADDR_VAR 0 1
67380: PUSH
67381: LD_EXP 99
67385: PUSH
67386: FOR_IN
67387: IFFALSE 67418
// if GetLives ( i ) < 1000 then
67389: LD_VAR 0 1
67393: PPUSH
67394: CALL_OW 256
67398: PUSH
67399: LD_INT 1000
67401: LESS
67402: IFFALSE 67416
// SetLives ( i , 1000 ) ;
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_INT 1000
67411: PPUSH
67412: CALL_OW 234
67416: GO 67386
67418: POP
67419: POP
// end ;
67420: PPOPN 1
67422: END
// export function hHackInvincible ; var i ; begin
67423: LD_INT 0
67425: PPUSH
67426: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67427: LD_ADDR_VAR 0 2
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 21
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 21
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: PPUSH
67460: CALL_OW 69
67464: PUSH
67465: FOR_IN
67466: IFFALSE 67527
// if IsSelected ( i ) then
67468: LD_VAR 0 2
67472: PPUSH
67473: CALL_OW 306
67477: IFFALSE 67525
// begin if i in hInvincible then
67479: LD_VAR 0 2
67483: PUSH
67484: LD_EXP 99
67488: IN
67489: IFFALSE 67509
// hInvincible := hInvincible diff i else
67491: LD_ADDR_EXP 99
67495: PUSH
67496: LD_EXP 99
67500: PUSH
67501: LD_VAR 0 2
67505: DIFF
67506: ST_TO_ADDR
67507: GO 67525
// hInvincible := hInvincible union i ;
67509: LD_ADDR_EXP 99
67513: PUSH
67514: LD_EXP 99
67518: PUSH
67519: LD_VAR 0 2
67523: UNION
67524: ST_TO_ADDR
// end ;
67525: GO 67465
67527: POP
67528: POP
// end ;
67529: LD_VAR 0 1
67533: RET
// export function hHackInvisible ; var i , j ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67539: LD_ADDR_VAR 0 2
67543: PUSH
67544: LD_INT 21
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PPUSH
67554: CALL_OW 69
67558: PUSH
67559: FOR_IN
67560: IFFALSE 67584
// if IsSelected ( i ) then
67562: LD_VAR 0 2
67566: PPUSH
67567: CALL_OW 306
67571: IFFALSE 67582
// ComForceInvisible ( i ) ;
67573: LD_VAR 0 2
67577: PPUSH
67578: CALL_OW 496
67582: GO 67559
67584: POP
67585: POP
// end ;
67586: LD_VAR 0 1
67590: RET
// export function hHackChangeYourSide ; begin
67591: LD_INT 0
67593: PPUSH
// if your_side = 8 then
67594: LD_OWVAR 2
67598: PUSH
67599: LD_INT 8
67601: EQUAL
67602: IFFALSE 67614
// your_side := 0 else
67604: LD_ADDR_OWVAR 2
67608: PUSH
67609: LD_INT 0
67611: ST_TO_ADDR
67612: GO 67628
// your_side := your_side + 1 ;
67614: LD_ADDR_OWVAR 2
67618: PUSH
67619: LD_OWVAR 2
67623: PUSH
67624: LD_INT 1
67626: PLUS
67627: ST_TO_ADDR
// end ;
67628: LD_VAR 0 1
67632: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67633: LD_INT 0
67635: PPUSH
67636: PPUSH
67637: PPUSH
// for i in all_units do
67638: LD_ADDR_VAR 0 2
67642: PUSH
67643: LD_OWVAR 3
67647: PUSH
67648: FOR_IN
67649: IFFALSE 67727
// if IsSelected ( i ) then
67651: LD_VAR 0 2
67655: PPUSH
67656: CALL_OW 306
67660: IFFALSE 67725
// begin j := GetSide ( i ) ;
67662: LD_ADDR_VAR 0 3
67666: PUSH
67667: LD_VAR 0 2
67671: PPUSH
67672: CALL_OW 255
67676: ST_TO_ADDR
// if j = 8 then
67677: LD_VAR 0 3
67681: PUSH
67682: LD_INT 8
67684: EQUAL
67685: IFFALSE 67697
// j := 0 else
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_INT 0
67694: ST_TO_ADDR
67695: GO 67711
// j := j + 1 ;
67697: LD_ADDR_VAR 0 3
67701: PUSH
67702: LD_VAR 0 3
67706: PUSH
67707: LD_INT 1
67709: PLUS
67710: ST_TO_ADDR
// SetSide ( i , j ) ;
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_VAR 0 3
67720: PPUSH
67721: CALL_OW 235
// end ;
67725: GO 67648
67727: POP
67728: POP
// end ;
67729: LD_VAR 0 1
67733: RET
// export function hHackFog ; begin
67734: LD_INT 0
67736: PPUSH
// FogOff ( true ) ;
67737: LD_INT 1
67739: PPUSH
67740: CALL_OW 344
// end ;
67744: LD_VAR 0 1
67748: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67749: LD_INT 0
67751: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_VAR 0 2
67761: PPUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: LD_INT 1
67769: PPUSH
67770: LD_INT 1
67772: PPUSH
67773: CALL_OW 483
// CenterOnXY ( x , y ) ;
67777: LD_VAR 0 2
67781: PPUSH
67782: LD_VAR 0 3
67786: PPUSH
67787: CALL_OW 84
// end ;
67791: LD_VAR 0 4
67795: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67796: LD_INT 0
67798: PPUSH
67799: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67800: LD_VAR 0 1
67804: NOT
67805: PUSH
67806: LD_VAR 0 2
67810: PPUSH
67811: LD_VAR 0 3
67815: PPUSH
67816: CALL_OW 488
67820: NOT
67821: OR
67822: PUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: CALL_OW 266
67832: PUSH
67833: LD_INT 3
67835: NONEQUAL
67836: PUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 247
67846: PUSH
67847: LD_INT 1
67849: EQUAL
67850: NOT
67851: AND
67852: OR
67853: IFFALSE 67857
// exit ;
67855: GO 68006
// if GetType ( factory ) = unit_human then
67857: LD_VAR 0 1
67861: PPUSH
67862: CALL_OW 247
67866: PUSH
67867: LD_INT 1
67869: EQUAL
67870: IFFALSE 67887
// factory := IsInUnit ( factory ) ;
67872: LD_ADDR_VAR 0 1
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 310
67886: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 266
67896: PUSH
67897: LD_INT 3
67899: NONEQUAL
67900: IFFALSE 67904
// exit ;
67902: GO 68006
// if HexInfo ( x , y ) = factory then
67904: LD_VAR 0 2
67908: PPUSH
67909: LD_VAR 0 3
67913: PPUSH
67914: CALL_OW 428
67918: PUSH
67919: LD_VAR 0 1
67923: EQUAL
67924: IFFALSE 67951
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
67926: LD_ADDR_EXP 100
67930: PUSH
67931: LD_EXP 100
67935: PPUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: LD_INT 0
67943: PPUSH
67944: CALL_OW 1
67948: ST_TO_ADDR
67949: GO 68002
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
67951: LD_ADDR_EXP 100
67955: PUSH
67956: LD_EXP 100
67960: PPUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: LD_VAR 0 1
67970: PPUSH
67971: CALL_OW 255
67975: PUSH
67976: LD_VAR 0 1
67980: PUSH
67981: LD_VAR 0 2
67985: PUSH
67986: LD_VAR 0 3
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: PPUSH
67997: CALL_OW 1
68001: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68002: CALL 68011 0 0
// end ;
68006: LD_VAR 0 4
68010: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68011: LD_INT 0
68013: PPUSH
68014: PPUSH
68015: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68016: LD_STRING resetFactoryWaypoint();
68018: PPUSH
68019: CALL_OW 559
// if factoryWaypoints then
68023: LD_EXP 100
68027: IFFALSE 68153
// begin list := PrepareArray ( factoryWaypoints ) ;
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_EXP 100
68038: PPUSH
68039: CALL 44342 0 1
68043: ST_TO_ADDR
// for i := 1 to list do
68044: LD_ADDR_VAR 0 2
68048: PUSH
68049: DOUBLE
68050: LD_INT 1
68052: DEC
68053: ST_TO_ADDR
68054: LD_VAR 0 3
68058: PUSH
68059: FOR_TO
68060: IFFALSE 68151
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68062: LD_STRING setFactoryWaypointXY(
68064: PUSH
68065: LD_VAR 0 3
68069: PUSH
68070: LD_VAR 0 2
68074: ARRAY
68075: PUSH
68076: LD_INT 1
68078: ARRAY
68079: STR
68080: PUSH
68081: LD_STRING ,
68083: STR
68084: PUSH
68085: LD_VAR 0 3
68089: PUSH
68090: LD_VAR 0 2
68094: ARRAY
68095: PUSH
68096: LD_INT 2
68098: ARRAY
68099: STR
68100: PUSH
68101: LD_STRING ,
68103: STR
68104: PUSH
68105: LD_VAR 0 3
68109: PUSH
68110: LD_VAR 0 2
68114: ARRAY
68115: PUSH
68116: LD_INT 3
68118: ARRAY
68119: STR
68120: PUSH
68121: LD_STRING ,
68123: STR
68124: PUSH
68125: LD_VAR 0 3
68129: PUSH
68130: LD_VAR 0 2
68134: ARRAY
68135: PUSH
68136: LD_INT 4
68138: ARRAY
68139: STR
68140: PUSH
68141: LD_STRING )
68143: STR
68144: PPUSH
68145: CALL_OW 559
68149: GO 68059
68151: POP
68152: POP
// end ; end ;
68153: LD_VAR 0 1
68157: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68158: LD_INT 0
68160: PPUSH
// if HexInfo ( x , y ) = warehouse then
68161: LD_VAR 0 2
68165: PPUSH
68166: LD_VAR 0 3
68170: PPUSH
68171: CALL_OW 428
68175: PUSH
68176: LD_VAR 0 1
68180: EQUAL
68181: IFFALSE 68208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68183: LD_ADDR_EXP 101
68187: PUSH
68188: LD_EXP 101
68192: PPUSH
68193: LD_VAR 0 1
68197: PPUSH
68198: LD_INT 0
68200: PPUSH
68201: CALL_OW 1
68205: ST_TO_ADDR
68206: GO 68259
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68208: LD_ADDR_EXP 101
68212: PUSH
68213: LD_EXP 101
68217: PPUSH
68218: LD_VAR 0 1
68222: PPUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 255
68232: PUSH
68233: LD_VAR 0 1
68237: PUSH
68238: LD_VAR 0 2
68242: PUSH
68243: LD_VAR 0 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: PPUSH
68254: CALL_OW 1
68258: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68259: CALL 68268 0 0
// end ;
68263: LD_VAR 0 4
68267: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68268: LD_INT 0
68270: PPUSH
68271: PPUSH
68272: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68273: LD_STRING resetWarehouseGatheringPoints();
68275: PPUSH
68276: CALL_OW 559
// if warehouseGatheringPoints then
68280: LD_EXP 101
68284: IFFALSE 68410
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_EXP 101
68295: PPUSH
68296: CALL 44342 0 1
68300: ST_TO_ADDR
// for i := 1 to list do
68301: LD_ADDR_VAR 0 2
68305: PUSH
68306: DOUBLE
68307: LD_INT 1
68309: DEC
68310: ST_TO_ADDR
68311: LD_VAR 0 3
68315: PUSH
68316: FOR_TO
68317: IFFALSE 68408
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68319: LD_STRING setWarehouseGatheringPointXY(
68321: PUSH
68322: LD_VAR 0 3
68326: PUSH
68327: LD_VAR 0 2
68331: ARRAY
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: STR
68337: PUSH
68338: LD_STRING ,
68340: STR
68341: PUSH
68342: LD_VAR 0 3
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PUSH
68353: LD_INT 2
68355: ARRAY
68356: STR
68357: PUSH
68358: LD_STRING ,
68360: STR
68361: PUSH
68362: LD_VAR 0 3
68366: PUSH
68367: LD_VAR 0 2
68371: ARRAY
68372: PUSH
68373: LD_INT 3
68375: ARRAY
68376: STR
68377: PUSH
68378: LD_STRING ,
68380: STR
68381: PUSH
68382: LD_VAR 0 3
68386: PUSH
68387: LD_VAR 0 2
68391: ARRAY
68392: PUSH
68393: LD_INT 4
68395: ARRAY
68396: STR
68397: PUSH
68398: LD_STRING )
68400: STR
68401: PPUSH
68402: CALL_OW 559
68406: GO 68316
68408: POP
68409: POP
// end ; end ;
68410: LD_VAR 0 1
68414: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68415: LD_EXP 101
68419: IFFALSE 69104
68421: GO 68423
68423: DISABLE
68424: LD_INT 0
68426: PPUSH
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
68433: PPUSH
68434: PPUSH
// begin enable ;
68435: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_EXP 101
68445: PPUSH
68446: CALL 44342 0 1
68450: ST_TO_ADDR
// if not list then
68451: LD_VAR 0 3
68455: NOT
68456: IFFALSE 68460
// exit ;
68458: GO 69104
// for i := 1 to list do
68460: LD_ADDR_VAR 0 1
68464: PUSH
68465: DOUBLE
68466: LD_INT 1
68468: DEC
68469: ST_TO_ADDR
68470: LD_VAR 0 3
68474: PUSH
68475: FOR_TO
68476: IFFALSE 69102
// begin depot := list [ i ] [ 2 ] ;
68478: LD_ADDR_VAR 0 8
68482: PUSH
68483: LD_VAR 0 3
68487: PUSH
68488: LD_VAR 0 1
68492: ARRAY
68493: PUSH
68494: LD_INT 2
68496: ARRAY
68497: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68498: LD_ADDR_VAR 0 5
68502: PUSH
68503: LD_VAR 0 3
68507: PUSH
68508: LD_VAR 0 1
68512: ARRAY
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68518: LD_VAR 0 8
68522: PPUSH
68523: CALL_OW 301
68527: PUSH
68528: LD_VAR 0 5
68532: PUSH
68533: LD_VAR 0 8
68537: PPUSH
68538: CALL_OW 255
68542: NONEQUAL
68543: OR
68544: IFFALSE 68573
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68546: LD_ADDR_EXP 101
68550: PUSH
68551: LD_EXP 101
68555: PPUSH
68556: LD_VAR 0 8
68560: PPUSH
68561: LD_INT 0
68563: PPUSH
68564: CALL_OW 1
68568: ST_TO_ADDR
// exit ;
68569: POP
68570: POP
68571: GO 69104
// end ; x := list [ i ] [ 3 ] ;
68573: LD_ADDR_VAR 0 6
68577: PUSH
68578: LD_VAR 0 3
68582: PUSH
68583: LD_VAR 0 1
68587: ARRAY
68588: PUSH
68589: LD_INT 3
68591: ARRAY
68592: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68593: LD_ADDR_VAR 0 7
68597: PUSH
68598: LD_VAR 0 3
68602: PUSH
68603: LD_VAR 0 1
68607: ARRAY
68608: PUSH
68609: LD_INT 4
68611: ARRAY
68612: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68613: LD_ADDR_VAR 0 9
68617: PUSH
68618: LD_VAR 0 6
68622: PPUSH
68623: LD_VAR 0 7
68627: PPUSH
68628: LD_INT 16
68630: PPUSH
68631: CALL 42926 0 3
68635: ST_TO_ADDR
// if not cratesNearbyPoint then
68636: LD_VAR 0 9
68640: NOT
68641: IFFALSE 68647
// exit ;
68643: POP
68644: POP
68645: GO 69104
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68647: LD_ADDR_VAR 0 4
68651: PUSH
68652: LD_INT 22
68654: PUSH
68655: LD_VAR 0 5
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 60
68669: PUSH
68670: EMPTY
68671: LIST
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 91
68679: PUSH
68680: LD_VAR 0 8
68684: PUSH
68685: LD_INT 6
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 2
68695: PUSH
68696: LD_INT 25
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 25
68708: PUSH
68709: LD_INT 16
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: PPUSH
68727: CALL_OW 69
68731: PUSH
68732: LD_VAR 0 8
68736: PPUSH
68737: CALL_OW 313
68741: PPUSH
68742: LD_INT 3
68744: PUSH
68745: LD_INT 60
68747: PUSH
68748: EMPTY
68749: LIST
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 25
68760: PUSH
68761: LD_INT 2
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 25
68770: PUSH
68771: LD_INT 16
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PPUSH
68787: CALL_OW 72
68791: UNION
68792: ST_TO_ADDR
// if tmp then
68793: LD_VAR 0 4
68797: IFFALSE 68877
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68799: LD_ADDR_VAR 0 4
68803: PUSH
68804: LD_VAR 0 4
68808: PPUSH
68809: LD_INT 3
68811: PPUSH
68812: CALL 40895 0 2
68816: ST_TO_ADDR
// for j in tmp do
68817: LD_ADDR_VAR 0 2
68821: PUSH
68822: LD_VAR 0 4
68826: PUSH
68827: FOR_IN
68828: IFFALSE 68871
// begin if IsInUnit ( j ) then
68830: LD_VAR 0 2
68834: PPUSH
68835: CALL_OW 310
68839: IFFALSE 68850
// ComExit ( j ) ;
68841: LD_VAR 0 2
68845: PPUSH
68846: CALL 40978 0 1
// AddComCollect ( j , x , y ) ;
68850: LD_VAR 0 2
68854: PPUSH
68855: LD_VAR 0 6
68859: PPUSH
68860: LD_VAR 0 7
68864: PPUSH
68865: CALL_OW 177
// end ;
68869: GO 68827
68871: POP
68872: POP
// exit ;
68873: POP
68874: POP
68875: GO 69104
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68877: LD_ADDR_VAR 0 4
68881: PUSH
68882: LD_INT 22
68884: PUSH
68885: LD_VAR 0 5
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 91
68896: PUSH
68897: LD_VAR 0 8
68901: PUSH
68902: LD_INT 8
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 34
68915: PUSH
68916: LD_INT 12
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 34
68925: PUSH
68926: LD_INT 51
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 34
68935: PUSH
68936: LD_INT 32
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 34
68945: PUSH
68946: LD_INT 89
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: PPUSH
68965: CALL_OW 69
68969: ST_TO_ADDR
// if tmp then
68970: LD_VAR 0 4
68974: IFFALSE 69100
// begin for j in tmp do
68976: LD_ADDR_VAR 0 2
68980: PUSH
68981: LD_VAR 0 4
68985: PUSH
68986: FOR_IN
68987: IFFALSE 69098
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68989: LD_VAR 0 2
68993: PPUSH
68994: CALL_OW 262
68998: PUSH
68999: LD_INT 3
69001: EQUAL
69002: PUSH
69003: LD_VAR 0 2
69007: PPUSH
69008: CALL_OW 261
69012: PUSH
69013: LD_INT 20
69015: GREATER
69016: OR
69017: PUSH
69018: LD_VAR 0 2
69022: PPUSH
69023: CALL_OW 314
69027: NOT
69028: AND
69029: PUSH
69030: LD_VAR 0 2
69034: PPUSH
69035: CALL_OW 263
69039: PUSH
69040: LD_INT 1
69042: NONEQUAL
69043: PUSH
69044: LD_VAR 0 2
69048: PPUSH
69049: CALL_OW 311
69053: OR
69054: AND
69055: IFFALSE 69096
// begin ComCollect ( j , x , y ) ;
69057: LD_VAR 0 2
69061: PPUSH
69062: LD_VAR 0 6
69066: PPUSH
69067: LD_VAR 0 7
69071: PPUSH
69072: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69076: LD_VAR 0 2
69080: PPUSH
69081: LD_VAR 0 8
69085: PPUSH
69086: CALL_OW 172
// exit ;
69090: POP
69091: POP
69092: POP
69093: POP
69094: GO 69104
// end ;
69096: GO 68986
69098: POP
69099: POP
// end ; end ;
69100: GO 68475
69102: POP
69103: POP
// end ; end_of_file
69104: PPOPN 9
69106: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69107: LD_VAR 0 1
69111: PUSH
69112: LD_INT 200
69114: DOUBLE
69115: GREATEREQUAL
69116: IFFALSE 69124
69118: LD_INT 299
69120: DOUBLE
69121: LESSEQUAL
69122: IFTRUE 69126
69124: GO 69158
69126: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69127: LD_VAR 0 1
69131: PPUSH
69132: LD_VAR 0 2
69136: PPUSH
69137: LD_VAR 0 3
69141: PPUSH
69142: LD_VAR 0 4
69146: PPUSH
69147: LD_VAR 0 5
69151: PPUSH
69152: CALL 69759 0 5
69156: GO 69235
69158: LD_INT 300
69160: DOUBLE
69161: GREATEREQUAL
69162: IFFALSE 69170
69164: LD_INT 399
69166: DOUBLE
69167: LESSEQUAL
69168: IFTRUE 69172
69170: GO 69234
69172: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69173: LD_VAR 0 1
69177: PPUSH
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_VAR 0 3
69187: PPUSH
69188: LD_VAR 0 4
69192: PPUSH
69193: LD_VAR 0 5
69197: PPUSH
69198: LD_VAR 0 6
69202: PPUSH
69203: LD_VAR 0 7
69207: PPUSH
69208: LD_VAR 0 8
69212: PPUSH
69213: LD_VAR 0 9
69217: PPUSH
69218: LD_VAR 0 10
69222: PPUSH
69223: LD_VAR 0 11
69227: PPUSH
69228: CALL 65808 0 11
69232: GO 69235
69234: POP
// end ;
69235: PPOPN 11
69237: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69238: LD_VAR 0 1
69242: PPUSH
69243: LD_VAR 0 2
69247: PPUSH
69248: LD_VAR 0 3
69252: PPUSH
69253: LD_VAR 0 4
69257: PPUSH
69258: LD_VAR 0 5
69262: PPUSH
69263: CALL 69320 0 5
// end ; end_of_file
69267: PPOPN 5
69269: END
// export function SOS_UnitDestroyed ( un ) ; begin
69270: LD_INT 0
69272: PPUSH
// ComRadiation ( un ) ;
69273: LD_VAR 0 1
69277: PPUSH
69278: CALL 70163 0 1
// end ;
69282: LD_VAR 0 2
69286: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69287: LD_INT 0
69289: PPUSH
// ComRadiation ( un ) ;
69290: LD_VAR 0 1
69294: PPUSH
69295: CALL 70163 0 1
// end ;
69299: LD_VAR 0 2
69303: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69304: LD_INT 0
69306: PPUSH
// end ;
69307: LD_VAR 0 4
69311: RET
// export function SOS_Command ( cmd ) ; begin
69312: LD_INT 0
69314: PPUSH
// end ;
69315: LD_VAR 0 2
69319: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69320: LD_INT 0
69322: PPUSH
// end ;
69323: LD_VAR 0 6
69327: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69328: LD_INT 0
69330: PPUSH
69331: PPUSH
69332: PPUSH
69333: PPUSH
// if not vehicle or not factory then
69334: LD_VAR 0 1
69338: NOT
69339: PUSH
69340: LD_VAR 0 2
69344: NOT
69345: OR
69346: IFFALSE 69350
// exit ;
69348: GO 69754
// if factoryWaypoints >= factory then
69350: LD_EXP 100
69354: PUSH
69355: LD_VAR 0 2
69359: GREATEREQUAL
69360: IFFALSE 69754
// if factoryWaypoints [ factory ] then
69362: LD_EXP 100
69366: PUSH
69367: LD_VAR 0 2
69371: ARRAY
69372: IFFALSE 69754
// begin if GetControl ( vehicle ) = control_manual then
69374: LD_VAR 0 1
69378: PPUSH
69379: CALL_OW 263
69383: PUSH
69384: LD_INT 1
69386: EQUAL
69387: IFFALSE 69641
// begin driver := IsDrivenBy ( vehicle ) ;
69389: LD_ADDR_VAR 0 5
69393: PUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: CALL_OW 311
69403: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69404: LD_ADDR_VAR 0 4
69408: PUSH
69409: LD_VAR 0 5
69413: PPUSH
69414: CALL_OW 110
69418: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69419: LD_VAR 0 4
69423: PUSH
69424: LD_INT 501
69426: EQUAL
69427: PUSH
69428: LD_VAR 0 1
69432: PPUSH
69433: CALL_OW 110
69437: PUSH
69438: LD_INT 501
69440: EQUAL
69441: OR
69442: IFFALSE 69446
// exit ;
69444: GO 69754
// if not HasTask ( driver ) then
69446: LD_VAR 0 5
69450: PPUSH
69451: CALL_OW 314
69455: NOT
69456: IFFALSE 69639
// begin SetTag ( driver , tDriver ) ;
69458: LD_VAR 0 5
69462: PPUSH
69463: LD_INT 501
69465: PPUSH
69466: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69470: LD_VAR 0 1
69474: PPUSH
69475: LD_INT 501
69477: PPUSH
69478: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69482: LD_ADDR_VAR 0 6
69486: PUSH
69487: LD_EXP 100
69491: PUSH
69492: LD_VAR 0 2
69496: ARRAY
69497: PUSH
69498: LD_INT 3
69500: ARRAY
69501: PPUSH
69502: LD_EXP 100
69506: PUSH
69507: LD_VAR 0 2
69511: ARRAY
69512: PUSH
69513: LD_INT 4
69515: ARRAY
69516: PPUSH
69517: CALL_OW 428
69521: ST_TO_ADDR
// if hex then
69522: LD_VAR 0 6
69526: IFFALSE 69544
// ComMoveUnit ( driver , hex ) else
69528: LD_VAR 0 5
69532: PPUSH
69533: LD_VAR 0 6
69537: PPUSH
69538: CALL_OW 112
69542: GO 69583
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69544: LD_VAR 0 5
69548: PPUSH
69549: LD_EXP 100
69553: PUSH
69554: LD_VAR 0 2
69558: ARRAY
69559: PUSH
69560: LD_INT 3
69562: ARRAY
69563: PPUSH
69564: LD_EXP 100
69568: PUSH
69569: LD_VAR 0 2
69573: ARRAY
69574: PUSH
69575: LD_INT 4
69577: ARRAY
69578: PPUSH
69579: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69583: LD_VAR 0 5
69587: PPUSH
69588: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
69592: LD_VAR 0 5
69596: PPUSH
69597: LD_VAR 0 2
69601: PPUSH
69602: CALL_OW 180
// wait ( 0 0$1 ) ;
69606: LD_INT 35
69608: PPUSH
69609: CALL_OW 67
// SetTag ( driver , tag ) ;
69613: LD_VAR 0 5
69617: PPUSH
69618: LD_VAR 0 4
69622: PPUSH
69623: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69627: LD_VAR 0 1
69631: PPUSH
69632: LD_INT 0
69634: PPUSH
69635: CALL_OW 109
// end ; end else
69639: GO 69754
// if GetControl ( vehicle ) = control_remote then
69641: LD_VAR 0 1
69645: PPUSH
69646: CALL_OW 263
69650: PUSH
69651: LD_INT 2
69653: EQUAL
69654: IFFALSE 69715
// begin wait ( 0 0$2 ) ;
69656: LD_INT 70
69658: PPUSH
69659: CALL_OW 67
// if Connect ( vehicle ) then
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL 11197 0 1
69672: IFFALSE 69713
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69674: LD_VAR 0 1
69678: PPUSH
69679: LD_EXP 100
69683: PUSH
69684: LD_VAR 0 2
69688: ARRAY
69689: PUSH
69690: LD_INT 3
69692: ARRAY
69693: PPUSH
69694: LD_EXP 100
69698: PUSH
69699: LD_VAR 0 2
69703: ARRAY
69704: PUSH
69705: LD_INT 4
69707: ARRAY
69708: PPUSH
69709: CALL_OW 171
// end else
69713: GO 69754
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69715: LD_VAR 0 1
69719: PPUSH
69720: LD_EXP 100
69724: PUSH
69725: LD_VAR 0 2
69729: ARRAY
69730: PUSH
69731: LD_INT 3
69733: ARRAY
69734: PPUSH
69735: LD_EXP 100
69739: PUSH
69740: LD_VAR 0 2
69744: ARRAY
69745: PUSH
69746: LD_INT 4
69748: ARRAY
69749: PPUSH
69750: CALL_OW 171
// end ; end ;
69754: LD_VAR 0 3
69758: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69759: LD_INT 0
69761: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69762: LD_VAR 0 1
69766: PUSH
69767: LD_INT 250
69769: EQUAL
69770: PUSH
69771: LD_VAR 0 2
69775: PPUSH
69776: CALL_OW 264
69780: PUSH
69781: LD_INT 81
69783: EQUAL
69784: AND
69785: IFFALSE 69806
// MinerPlaceMine ( unit , x , y ) ;
69787: LD_VAR 0 2
69791: PPUSH
69792: LD_VAR 0 4
69796: PPUSH
69797: LD_VAR 0 5
69801: PPUSH
69802: CALL 72898 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69806: LD_VAR 0 1
69810: PUSH
69811: LD_INT 251
69813: EQUAL
69814: PUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: CALL_OW 264
69824: PUSH
69825: LD_INT 81
69827: EQUAL
69828: AND
69829: IFFALSE 69850
// MinerDetonateMine ( unit , x , y ) ;
69831: LD_VAR 0 2
69835: PPUSH
69836: LD_VAR 0 4
69840: PPUSH
69841: LD_VAR 0 5
69845: PPUSH
69846: CALL 73173 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69850: LD_VAR 0 1
69854: PUSH
69855: LD_INT 252
69857: EQUAL
69858: PUSH
69859: LD_VAR 0 2
69863: PPUSH
69864: CALL_OW 264
69868: PUSH
69869: LD_INT 81
69871: EQUAL
69872: AND
69873: IFFALSE 69894
// MinerCreateMinefield ( unit , x , y ) ;
69875: LD_VAR 0 2
69879: PPUSH
69880: LD_VAR 0 4
69884: PPUSH
69885: LD_VAR 0 5
69889: PPUSH
69890: CALL 73590 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69894: LD_VAR 0 1
69898: PUSH
69899: LD_INT 253
69901: EQUAL
69902: PUSH
69903: LD_VAR 0 2
69907: PPUSH
69908: CALL_OW 257
69912: PUSH
69913: LD_INT 5
69915: EQUAL
69916: AND
69917: IFFALSE 69938
// ComBinocular ( unit , x , y ) ;
69919: LD_VAR 0 2
69923: PPUSH
69924: LD_VAR 0 4
69928: PPUSH
69929: LD_VAR 0 5
69933: PPUSH
69934: CALL 73959 0 3
// if selectedUnit then
69938: LD_VAR 0 3
69942: IFFALSE 69998
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
69944: LD_VAR 0 1
69948: PUSH
69949: LD_INT 254
69951: EQUAL
69952: PUSH
69953: LD_VAR 0 2
69957: PPUSH
69958: CALL_OW 264
69962: PUSH
69963: LD_INT 99
69965: EQUAL
69966: AND
69967: PUSH
69968: LD_VAR 0 3
69972: PPUSH
69973: CALL_OW 263
69977: PUSH
69978: LD_INT 3
69980: EQUAL
69981: AND
69982: IFFALSE 69998
// HackDestroyVehicle ( unit , selectedUnit ) ;
69984: LD_VAR 0 2
69988: PPUSH
69989: LD_VAR 0 3
69993: PPUSH
69994: CALL 72262 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 255
70005: EQUAL
70006: PUSH
70007: LD_VAR 0 2
70011: PPUSH
70012: CALL_OW 264
70016: PUSH
70017: LD_INT 14
70019: PUSH
70020: LD_INT 53
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: IN
70027: AND
70028: PUSH
70029: LD_VAR 0 4
70033: PPUSH
70034: LD_VAR 0 5
70038: PPUSH
70039: CALL_OW 488
70043: AND
70044: IFFALSE 70068
// CutTreeXYR ( unit , x , y , 12 ) ;
70046: LD_VAR 0 2
70050: PPUSH
70051: LD_VAR 0 4
70055: PPUSH
70056: LD_VAR 0 5
70060: PPUSH
70061: LD_INT 12
70063: PPUSH
70064: CALL 70259 0 4
// if cmd = 256 then
70068: LD_VAR 0 1
70072: PUSH
70073: LD_INT 256
70075: EQUAL
70076: IFFALSE 70097
// SetFactoryWaypoint ( unit , x , y ) ;
70078: LD_VAR 0 2
70082: PPUSH
70083: LD_VAR 0 4
70087: PPUSH
70088: LD_VAR 0 5
70092: PPUSH
70093: CALL 67796 0 3
// if cmd = 257 then
70097: LD_VAR 0 1
70101: PUSH
70102: LD_INT 257
70104: EQUAL
70105: IFFALSE 70126
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70107: LD_VAR 0 2
70111: PPUSH
70112: LD_VAR 0 4
70116: PPUSH
70117: LD_VAR 0 5
70121: PPUSH
70122: CALL 68158 0 3
// if cmd = 258 then
70126: LD_VAR 0 1
70130: PUSH
70131: LD_INT 258
70133: EQUAL
70134: IFFALSE 70158
// BurnTreeXYR ( unit , x , y , 8 ) ;
70136: LD_VAR 0 2
70140: PPUSH
70141: LD_VAR 0 4
70145: PPUSH
70146: LD_VAR 0 5
70150: PPUSH
70151: LD_INT 8
70153: PPUSH
70154: CALL 70653 0 4
// end ;
70158: LD_VAR 0 6
70162: RET
// export function ComRadiation ( un ) ; var eff ; begin
70163: LD_INT 0
70165: PPUSH
70166: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70167: LD_VAR 0 1
70171: PPUSH
70172: CALL_OW 264
70176: PUSH
70177: LD_INT 91
70179: NONEQUAL
70180: IFFALSE 70184
// exit ;
70182: GO 70254
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70184: LD_INT 68
70186: PPUSH
70187: LD_VAR 0 1
70191: PPUSH
70192: CALL_OW 255
70196: PPUSH
70197: CALL_OW 321
70201: PUSH
70202: LD_INT 2
70204: EQUAL
70205: IFFALSE 70217
// eff := 70 else
70207: LD_ADDR_VAR 0 3
70211: PUSH
70212: LD_INT 70
70214: ST_TO_ADDR
70215: GO 70225
// eff := 30 ;
70217: LD_ADDR_VAR 0 3
70221: PUSH
70222: LD_INT 30
70224: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70225: LD_VAR 0 1
70229: PPUSH
70230: CALL_OW 250
70234: PPUSH
70235: LD_VAR 0 1
70239: PPUSH
70240: CALL_OW 251
70244: PPUSH
70245: LD_VAR 0 3
70249: PPUSH
70250: CALL_OW 495
// end ;
70254: LD_VAR 0 2
70258: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70259: LD_INT 0
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70270: LD_VAR 0 1
70274: PPUSH
70275: CALL_OW 302
70279: NOT
70280: PUSH
70281: LD_VAR 0 2
70285: PPUSH
70286: LD_VAR 0 3
70290: PPUSH
70291: CALL_OW 488
70295: NOT
70296: OR
70297: PUSH
70298: LD_VAR 0 4
70302: NOT
70303: OR
70304: IFFALSE 70308
// exit ;
70306: GO 70648
// list := [ ] ;
70308: LD_ADDR_VAR 0 13
70312: PUSH
70313: EMPTY
70314: ST_TO_ADDR
// if x - r < 0 then
70315: LD_VAR 0 2
70319: PUSH
70320: LD_VAR 0 4
70324: MINUS
70325: PUSH
70326: LD_INT 0
70328: LESS
70329: IFFALSE 70341
// min_x := 0 else
70331: LD_ADDR_VAR 0 7
70335: PUSH
70336: LD_INT 0
70338: ST_TO_ADDR
70339: GO 70357
// min_x := x - r ;
70341: LD_ADDR_VAR 0 7
70345: PUSH
70346: LD_VAR 0 2
70350: PUSH
70351: LD_VAR 0 4
70355: MINUS
70356: ST_TO_ADDR
// if y - r < 0 then
70357: LD_VAR 0 3
70361: PUSH
70362: LD_VAR 0 4
70366: MINUS
70367: PUSH
70368: LD_INT 0
70370: LESS
70371: IFFALSE 70383
// min_y := 0 else
70373: LD_ADDR_VAR 0 8
70377: PUSH
70378: LD_INT 0
70380: ST_TO_ADDR
70381: GO 70399
// min_y := y - r ;
70383: LD_ADDR_VAR 0 8
70387: PUSH
70388: LD_VAR 0 3
70392: PUSH
70393: LD_VAR 0 4
70397: MINUS
70398: ST_TO_ADDR
// max_x := x + r ;
70399: LD_ADDR_VAR 0 9
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_VAR 0 4
70413: PLUS
70414: ST_TO_ADDR
// max_y := y + r ;
70415: LD_ADDR_VAR 0 10
70419: PUSH
70420: LD_VAR 0 3
70424: PUSH
70425: LD_VAR 0 4
70429: PLUS
70430: ST_TO_ADDR
// for _x = min_x to max_x do
70431: LD_ADDR_VAR 0 11
70435: PUSH
70436: DOUBLE
70437: LD_VAR 0 7
70441: DEC
70442: ST_TO_ADDR
70443: LD_VAR 0 9
70447: PUSH
70448: FOR_TO
70449: IFFALSE 70566
// for _y = min_y to max_y do
70451: LD_ADDR_VAR 0 12
70455: PUSH
70456: DOUBLE
70457: LD_VAR 0 8
70461: DEC
70462: ST_TO_ADDR
70463: LD_VAR 0 10
70467: PUSH
70468: FOR_TO
70469: IFFALSE 70562
// begin if not ValidHex ( _x , _y ) then
70471: LD_VAR 0 11
70475: PPUSH
70476: LD_VAR 0 12
70480: PPUSH
70481: CALL_OW 488
70485: NOT
70486: IFFALSE 70490
// continue ;
70488: GO 70468
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70490: LD_VAR 0 11
70494: PPUSH
70495: LD_VAR 0 12
70499: PPUSH
70500: CALL_OW 351
70504: PUSH
70505: LD_VAR 0 11
70509: PPUSH
70510: LD_VAR 0 12
70514: PPUSH
70515: CALL_OW 554
70519: AND
70520: IFFALSE 70560
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70522: LD_ADDR_VAR 0 13
70526: PUSH
70527: LD_VAR 0 13
70531: PPUSH
70532: LD_VAR 0 13
70536: PUSH
70537: LD_INT 1
70539: PLUS
70540: PPUSH
70541: LD_VAR 0 11
70545: PUSH
70546: LD_VAR 0 12
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PPUSH
70555: CALL_OW 2
70559: ST_TO_ADDR
// end ;
70560: GO 70468
70562: POP
70563: POP
70564: GO 70448
70566: POP
70567: POP
// if not list then
70568: LD_VAR 0 13
70572: NOT
70573: IFFALSE 70577
// exit ;
70575: GO 70648
// for i in list do
70577: LD_ADDR_VAR 0 6
70581: PUSH
70582: LD_VAR 0 13
70586: PUSH
70587: FOR_IN
70588: IFFALSE 70646
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70590: LD_VAR 0 1
70594: PPUSH
70595: LD_STRING M
70597: PUSH
70598: LD_VAR 0 6
70602: PUSH
70603: LD_INT 1
70605: ARRAY
70606: PUSH
70607: LD_VAR 0 6
70611: PUSH
70612: LD_INT 2
70614: ARRAY
70615: PUSH
70616: LD_INT 0
70618: PUSH
70619: LD_INT 0
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: PUSH
70637: EMPTY
70638: LIST
70639: PPUSH
70640: CALL_OW 447
70644: GO 70587
70646: POP
70647: POP
// end ;
70648: LD_VAR 0 5
70652: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70653: LD_INT 0
70655: PPUSH
70656: PPUSH
70657: PPUSH
70658: PPUSH
70659: PPUSH
70660: PPUSH
70661: PPUSH
70662: PPUSH
70663: PPUSH
70664: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70665: LD_VAR 0 1
70669: PPUSH
70670: CALL_OW 302
70674: NOT
70675: PUSH
70676: LD_VAR 0 2
70680: PPUSH
70681: LD_VAR 0 3
70685: PPUSH
70686: CALL_OW 488
70690: NOT
70691: OR
70692: PUSH
70693: LD_VAR 0 4
70697: NOT
70698: OR
70699: IFFALSE 70703
// exit ;
70701: GO 71216
// list := [ ] ;
70703: LD_ADDR_VAR 0 13
70707: PUSH
70708: EMPTY
70709: ST_TO_ADDR
// if x - r < 0 then
70710: LD_VAR 0 2
70714: PUSH
70715: LD_VAR 0 4
70719: MINUS
70720: PUSH
70721: LD_INT 0
70723: LESS
70724: IFFALSE 70736
// min_x := 0 else
70726: LD_ADDR_VAR 0 7
70730: PUSH
70731: LD_INT 0
70733: ST_TO_ADDR
70734: GO 70752
// min_x := x - r ;
70736: LD_ADDR_VAR 0 7
70740: PUSH
70741: LD_VAR 0 2
70745: PUSH
70746: LD_VAR 0 4
70750: MINUS
70751: ST_TO_ADDR
// if y - r < 0 then
70752: LD_VAR 0 3
70756: PUSH
70757: LD_VAR 0 4
70761: MINUS
70762: PUSH
70763: LD_INT 0
70765: LESS
70766: IFFALSE 70778
// min_y := 0 else
70768: LD_ADDR_VAR 0 8
70772: PUSH
70773: LD_INT 0
70775: ST_TO_ADDR
70776: GO 70794
// min_y := y - r ;
70778: LD_ADDR_VAR 0 8
70782: PUSH
70783: LD_VAR 0 3
70787: PUSH
70788: LD_VAR 0 4
70792: MINUS
70793: ST_TO_ADDR
// max_x := x + r ;
70794: LD_ADDR_VAR 0 9
70798: PUSH
70799: LD_VAR 0 2
70803: PUSH
70804: LD_VAR 0 4
70808: PLUS
70809: ST_TO_ADDR
// max_y := y + r ;
70810: LD_ADDR_VAR 0 10
70814: PUSH
70815: LD_VAR 0 3
70819: PUSH
70820: LD_VAR 0 4
70824: PLUS
70825: ST_TO_ADDR
// for _x = min_x to max_x do
70826: LD_ADDR_VAR 0 11
70830: PUSH
70831: DOUBLE
70832: LD_VAR 0 7
70836: DEC
70837: ST_TO_ADDR
70838: LD_VAR 0 9
70842: PUSH
70843: FOR_TO
70844: IFFALSE 70961
// for _y = min_y to max_y do
70846: LD_ADDR_VAR 0 12
70850: PUSH
70851: DOUBLE
70852: LD_VAR 0 8
70856: DEC
70857: ST_TO_ADDR
70858: LD_VAR 0 10
70862: PUSH
70863: FOR_TO
70864: IFFALSE 70957
// begin if not ValidHex ( _x , _y ) then
70866: LD_VAR 0 11
70870: PPUSH
70871: LD_VAR 0 12
70875: PPUSH
70876: CALL_OW 488
70880: NOT
70881: IFFALSE 70885
// continue ;
70883: GO 70863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70885: LD_VAR 0 11
70889: PPUSH
70890: LD_VAR 0 12
70894: PPUSH
70895: CALL_OW 351
70899: PUSH
70900: LD_VAR 0 11
70904: PPUSH
70905: LD_VAR 0 12
70909: PPUSH
70910: CALL_OW 554
70914: AND
70915: IFFALSE 70955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70917: LD_ADDR_VAR 0 13
70921: PUSH
70922: LD_VAR 0 13
70926: PPUSH
70927: LD_VAR 0 13
70931: PUSH
70932: LD_INT 1
70934: PLUS
70935: PPUSH
70936: LD_VAR 0 11
70940: PUSH
70941: LD_VAR 0 12
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PPUSH
70950: CALL_OW 2
70954: ST_TO_ADDR
// end ;
70955: GO 70863
70957: POP
70958: POP
70959: GO 70843
70961: POP
70962: POP
// if not list then
70963: LD_VAR 0 13
70967: NOT
70968: IFFALSE 70972
// exit ;
70970: GO 71216
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
70972: LD_ADDR_VAR 0 13
70976: PUSH
70977: LD_VAR 0 1
70981: PPUSH
70982: LD_VAR 0 13
70986: PPUSH
70987: LD_INT 1
70989: PPUSH
70990: LD_INT 1
70992: PPUSH
70993: CALL 8339 0 4
70997: ST_TO_ADDR
// ComStop ( flame ) ;
70998: LD_VAR 0 1
71002: PPUSH
71003: CALL_OW 141
// for i in list do
71007: LD_ADDR_VAR 0 6
71011: PUSH
71012: LD_VAR 0 13
71016: PUSH
71017: FOR_IN
71018: IFFALSE 71049
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71020: LD_VAR 0 1
71024: PPUSH
71025: LD_VAR 0 6
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PPUSH
71034: LD_VAR 0 6
71038: PUSH
71039: LD_INT 2
71041: ARRAY
71042: PPUSH
71043: CALL_OW 176
71047: GO 71017
71049: POP
71050: POP
// repeat wait ( 0 0$1 ) ;
71051: LD_INT 35
71053: PPUSH
71054: CALL_OW 67
// task := GetTaskList ( flame ) ;
71058: LD_ADDR_VAR 0 14
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 437
71072: ST_TO_ADDR
// if not task then
71073: LD_VAR 0 14
71077: NOT
71078: IFFALSE 71082
// exit ;
71080: GO 71216
// if task [ 1 ] [ 1 ] <> | then
71082: LD_VAR 0 14
71086: PUSH
71087: LD_INT 1
71089: ARRAY
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PUSH
71095: LD_STRING |
71097: NONEQUAL
71098: IFFALSE 71102
// exit ;
71100: GO 71216
// _x := task [ 1 ] [ 2 ] ;
71102: LD_ADDR_VAR 0 11
71106: PUSH
71107: LD_VAR 0 14
71111: PUSH
71112: LD_INT 1
71114: ARRAY
71115: PUSH
71116: LD_INT 2
71118: ARRAY
71119: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71120: LD_ADDR_VAR 0 12
71124: PUSH
71125: LD_VAR 0 14
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PUSH
71134: LD_INT 3
71136: ARRAY
71137: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71138: LD_VAR 0 11
71142: PPUSH
71143: LD_VAR 0 12
71147: PPUSH
71148: CALL_OW 351
71152: NOT
71153: PUSH
71154: LD_VAR 0 11
71158: PPUSH
71159: LD_VAR 0 12
71163: PPUSH
71164: CALL_OW 554
71168: NOT
71169: OR
71170: IFFALSE 71204
// begin task := Delete ( task , 1 ) ;
71172: LD_ADDR_VAR 0 14
71176: PUSH
71177: LD_VAR 0 14
71181: PPUSH
71182: LD_INT 1
71184: PPUSH
71185: CALL_OW 3
71189: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71190: LD_VAR 0 1
71194: PPUSH
71195: LD_VAR 0 14
71199: PPUSH
71200: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 314
71213: NOT
71214: IFFALSE 71051
// end ;
71216: LD_VAR 0 5
71220: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71221: LD_EXP 103
71225: NOT
71226: IFFALSE 71276
71228: GO 71230
71230: DISABLE
// begin initHack := true ;
71231: LD_ADDR_EXP 103
71235: PUSH
71236: LD_INT 1
71238: ST_TO_ADDR
// hackTanks := [ ] ;
71239: LD_ADDR_EXP 104
71243: PUSH
71244: EMPTY
71245: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71246: LD_ADDR_EXP 105
71250: PUSH
71251: EMPTY
71252: ST_TO_ADDR
// hackLimit := 3 ;
71253: LD_ADDR_EXP 106
71257: PUSH
71258: LD_INT 3
71260: ST_TO_ADDR
// hackDist := 12 ;
71261: LD_ADDR_EXP 107
71265: PUSH
71266: LD_INT 12
71268: ST_TO_ADDR
// hackCounter := [ ] ;
71269: LD_ADDR_EXP 108
71273: PUSH
71274: EMPTY
71275: ST_TO_ADDR
// end ;
71276: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71277: LD_EXP 103
71281: PUSH
71282: LD_INT 34
71284: PUSH
71285: LD_INT 99
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PPUSH
71292: CALL_OW 69
71296: AND
71297: IFFALSE 71550
71299: GO 71301
71301: DISABLE
71302: LD_INT 0
71304: PPUSH
71305: PPUSH
// begin enable ;
71306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71307: LD_ADDR_VAR 0 1
71311: PUSH
71312: LD_INT 34
71314: PUSH
71315: LD_INT 99
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PPUSH
71322: CALL_OW 69
71326: PUSH
71327: FOR_IN
71328: IFFALSE 71548
// begin if not i in hackTanks then
71330: LD_VAR 0 1
71334: PUSH
71335: LD_EXP 104
71339: IN
71340: NOT
71341: IFFALSE 71424
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71343: LD_ADDR_EXP 104
71347: PUSH
71348: LD_EXP 104
71352: PPUSH
71353: LD_EXP 104
71357: PUSH
71358: LD_INT 1
71360: PLUS
71361: PPUSH
71362: LD_VAR 0 1
71366: PPUSH
71367: CALL_OW 1
71371: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71372: LD_ADDR_EXP 105
71376: PUSH
71377: LD_EXP 105
71381: PPUSH
71382: LD_EXP 105
71386: PUSH
71387: LD_INT 1
71389: PLUS
71390: PPUSH
71391: EMPTY
71392: PPUSH
71393: CALL_OW 1
71397: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71398: LD_ADDR_EXP 108
71402: PUSH
71403: LD_EXP 108
71407: PPUSH
71408: LD_EXP 108
71412: PUSH
71413: LD_INT 1
71415: PLUS
71416: PPUSH
71417: EMPTY
71418: PPUSH
71419: CALL_OW 1
71423: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71424: LD_VAR 0 1
71428: PPUSH
71429: CALL_OW 302
71433: NOT
71434: IFFALSE 71447
// begin HackUnlinkAll ( i ) ;
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL 71553 0 1
// continue ;
71445: GO 71327
// end ; HackCheckCapturedStatus ( i ) ;
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL 71996 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71456: LD_ADDR_VAR 0 2
71460: PUSH
71461: LD_INT 81
71463: PUSH
71464: LD_VAR 0 1
71468: PPUSH
71469: CALL_OW 255
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 33
71480: PUSH
71481: LD_INT 3
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 91
71490: PUSH
71491: LD_VAR 0 1
71495: PUSH
71496: LD_EXP 107
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 50
71508: PUSH
71509: EMPTY
71510: LIST
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: PPUSH
71518: CALL_OW 69
71522: ST_TO_ADDR
// if not tmp then
71523: LD_VAR 0 2
71527: NOT
71528: IFFALSE 71532
// continue ;
71530: GO 71327
// HackLink ( i , tmp ) ;
71532: LD_VAR 0 1
71536: PPUSH
71537: LD_VAR 0 2
71541: PPUSH
71542: CALL 71689 0 2
// end ;
71546: GO 71327
71548: POP
71549: POP
// end ;
71550: PPOPN 2
71552: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71553: LD_INT 0
71555: PPUSH
71556: PPUSH
71557: PPUSH
// if not hack in hackTanks then
71558: LD_VAR 0 1
71562: PUSH
71563: LD_EXP 104
71567: IN
71568: NOT
71569: IFFALSE 71573
// exit ;
71571: GO 71684
// index := GetElementIndex ( hackTanks , hack ) ;
71573: LD_ADDR_VAR 0 4
71577: PUSH
71578: LD_EXP 104
71582: PPUSH
71583: LD_VAR 0 1
71587: PPUSH
71588: CALL 7636 0 2
71592: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71593: LD_EXP 105
71597: PUSH
71598: LD_VAR 0 4
71602: ARRAY
71603: IFFALSE 71684
// begin for i in hackTanksCaptured [ index ] do
71605: LD_ADDR_VAR 0 3
71609: PUSH
71610: LD_EXP 105
71614: PUSH
71615: LD_VAR 0 4
71619: ARRAY
71620: PUSH
71621: FOR_IN
71622: IFFALSE 71648
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71624: LD_VAR 0 3
71628: PUSH
71629: LD_INT 1
71631: ARRAY
71632: PPUSH
71633: LD_VAR 0 3
71637: PUSH
71638: LD_INT 2
71640: ARRAY
71641: PPUSH
71642: CALL_OW 235
71646: GO 71621
71648: POP
71649: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71650: LD_ADDR_EXP 105
71654: PUSH
71655: LD_EXP 105
71659: PPUSH
71660: LD_VAR 0 4
71664: PPUSH
71665: EMPTY
71666: PPUSH
71667: CALL_OW 1
71671: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71672: LD_VAR 0 1
71676: PPUSH
71677: LD_INT 0
71679: PPUSH
71680: CALL_OW 505
// end ; end ;
71684: LD_VAR 0 2
71688: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71689: LD_INT 0
71691: PPUSH
71692: PPUSH
71693: PPUSH
// if not hack in hackTanks or not vehicles then
71694: LD_VAR 0 1
71698: PUSH
71699: LD_EXP 104
71703: IN
71704: NOT
71705: PUSH
71706: LD_VAR 0 2
71710: NOT
71711: OR
71712: IFFALSE 71716
// exit ;
71714: GO 71991
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71716: LD_ADDR_VAR 0 2
71720: PUSH
71721: LD_VAR 0 1
71725: PPUSH
71726: LD_VAR 0 2
71730: PPUSH
71731: LD_INT 1
71733: PPUSH
71734: LD_INT 1
71736: PPUSH
71737: CALL 8286 0 4
71741: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71742: LD_ADDR_VAR 0 5
71746: PUSH
71747: LD_EXP 104
71751: PPUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL 7636 0 2
71761: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71762: LD_EXP 105
71766: PUSH
71767: LD_VAR 0 5
71771: ARRAY
71772: PUSH
71773: LD_EXP 106
71777: LESS
71778: IFFALSE 71967
// begin for i := 1 to vehicles do
71780: LD_ADDR_VAR 0 4
71784: PUSH
71785: DOUBLE
71786: LD_INT 1
71788: DEC
71789: ST_TO_ADDR
71790: LD_VAR 0 2
71794: PUSH
71795: FOR_TO
71796: IFFALSE 71965
// begin if hackTanksCaptured [ index ] = hackLimit then
71798: LD_EXP 105
71802: PUSH
71803: LD_VAR 0 5
71807: ARRAY
71808: PUSH
71809: LD_EXP 106
71813: EQUAL
71814: IFFALSE 71818
// break ;
71816: GO 71965
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71818: LD_ADDR_EXP 108
71822: PUSH
71823: LD_EXP 108
71827: PPUSH
71828: LD_VAR 0 5
71832: PPUSH
71833: LD_EXP 108
71837: PUSH
71838: LD_VAR 0 5
71842: ARRAY
71843: PUSH
71844: LD_INT 1
71846: PLUS
71847: PPUSH
71848: CALL_OW 1
71852: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71853: LD_ADDR_EXP 105
71857: PUSH
71858: LD_EXP 105
71862: PPUSH
71863: LD_VAR 0 5
71867: PUSH
71868: LD_EXP 105
71872: PUSH
71873: LD_VAR 0 5
71877: ARRAY
71878: PUSH
71879: LD_INT 1
71881: PLUS
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PPUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_VAR 0 4
71896: ARRAY
71897: PUSH
71898: LD_VAR 0 2
71902: PUSH
71903: LD_VAR 0 4
71907: ARRAY
71908: PPUSH
71909: CALL_OW 255
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PPUSH
71918: CALL 7851 0 3
71922: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
71923: LD_VAR 0 2
71927: PUSH
71928: LD_VAR 0 4
71932: ARRAY
71933: PPUSH
71934: LD_VAR 0 1
71938: PPUSH
71939: CALL_OW 255
71943: PPUSH
71944: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
71948: LD_VAR 0 2
71952: PUSH
71953: LD_VAR 0 4
71957: ARRAY
71958: PPUSH
71959: CALL_OW 141
// end ;
71963: GO 71795
71965: POP
71966: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
71967: LD_VAR 0 1
71971: PPUSH
71972: LD_EXP 105
71976: PUSH
71977: LD_VAR 0 5
71981: ARRAY
71982: PUSH
71983: LD_INT 0
71985: PLUS
71986: PPUSH
71987: CALL_OW 505
// end ;
71991: LD_VAR 0 3
71995: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
71996: LD_INT 0
71998: PPUSH
71999: PPUSH
72000: PPUSH
72001: PPUSH
// if not hack in hackTanks then
72002: LD_VAR 0 1
72006: PUSH
72007: LD_EXP 104
72011: IN
72012: NOT
72013: IFFALSE 72017
// exit ;
72015: GO 72257
// index := GetElementIndex ( hackTanks , hack ) ;
72017: LD_ADDR_VAR 0 4
72021: PUSH
72022: LD_EXP 104
72026: PPUSH
72027: LD_VAR 0 1
72031: PPUSH
72032: CALL 7636 0 2
72036: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72037: LD_ADDR_VAR 0 3
72041: PUSH
72042: DOUBLE
72043: LD_EXP 105
72047: PUSH
72048: LD_VAR 0 4
72052: ARRAY
72053: INC
72054: ST_TO_ADDR
72055: LD_INT 1
72057: PUSH
72058: FOR_DOWNTO
72059: IFFALSE 72231
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72061: LD_ADDR_VAR 0 5
72065: PUSH
72066: LD_EXP 105
72070: PUSH
72071: LD_VAR 0 4
72075: ARRAY
72076: PUSH
72077: LD_VAR 0 3
72081: ARRAY
72082: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72083: LD_VAR 0 5
72087: PUSH
72088: LD_INT 1
72090: ARRAY
72091: PPUSH
72092: CALL_OW 302
72096: NOT
72097: PUSH
72098: LD_VAR 0 5
72102: PUSH
72103: LD_INT 1
72105: ARRAY
72106: PPUSH
72107: CALL_OW 255
72111: PUSH
72112: LD_VAR 0 1
72116: PPUSH
72117: CALL_OW 255
72121: NONEQUAL
72122: OR
72123: IFFALSE 72229
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72125: LD_VAR 0 5
72129: PUSH
72130: LD_INT 1
72132: ARRAY
72133: PPUSH
72134: CALL_OW 305
72138: PUSH
72139: LD_VAR 0 5
72143: PUSH
72144: LD_INT 1
72146: ARRAY
72147: PPUSH
72148: CALL_OW 255
72152: PUSH
72153: LD_VAR 0 1
72157: PPUSH
72158: CALL_OW 255
72162: EQUAL
72163: AND
72164: IFFALSE 72188
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72166: LD_VAR 0 5
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PPUSH
72175: LD_VAR 0 5
72179: PUSH
72180: LD_INT 2
72182: ARRAY
72183: PPUSH
72184: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72188: LD_ADDR_EXP 105
72192: PUSH
72193: LD_EXP 105
72197: PPUSH
72198: LD_VAR 0 4
72202: PPUSH
72203: LD_EXP 105
72207: PUSH
72208: LD_VAR 0 4
72212: ARRAY
72213: PPUSH
72214: LD_VAR 0 3
72218: PPUSH
72219: CALL_OW 3
72223: PPUSH
72224: CALL_OW 1
72228: ST_TO_ADDR
// end ; end ;
72229: GO 72058
72231: POP
72232: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72233: LD_VAR 0 1
72237: PPUSH
72238: LD_EXP 105
72242: PUSH
72243: LD_VAR 0 4
72247: ARRAY
72248: PUSH
72249: LD_INT 0
72251: PLUS
72252: PPUSH
72253: CALL_OW 505
// end ;
72257: LD_VAR 0 2
72261: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72262: LD_INT 0
72264: PPUSH
72265: PPUSH
72266: PPUSH
72267: PPUSH
// if not hack in hackTanks then
72268: LD_VAR 0 1
72272: PUSH
72273: LD_EXP 104
72277: IN
72278: NOT
72279: IFFALSE 72283
// exit ;
72281: GO 72368
// index := GetElementIndex ( hackTanks , hack ) ;
72283: LD_ADDR_VAR 0 5
72287: PUSH
72288: LD_EXP 104
72292: PPUSH
72293: LD_VAR 0 1
72297: PPUSH
72298: CALL 7636 0 2
72302: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72303: LD_ADDR_VAR 0 4
72307: PUSH
72308: DOUBLE
72309: LD_INT 1
72311: DEC
72312: ST_TO_ADDR
72313: LD_EXP 105
72317: PUSH
72318: LD_VAR 0 5
72322: ARRAY
72323: PUSH
72324: FOR_TO
72325: IFFALSE 72366
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72327: LD_EXP 105
72331: PUSH
72332: LD_VAR 0 5
72336: ARRAY
72337: PUSH
72338: LD_VAR 0 4
72342: ARRAY
72343: PUSH
72344: LD_INT 1
72346: ARRAY
72347: PUSH
72348: LD_VAR 0 2
72352: EQUAL
72353: IFFALSE 72364
// KillUnit ( vehicle ) ;
72355: LD_VAR 0 2
72359: PPUSH
72360: CALL_OW 66
72364: GO 72324
72366: POP
72367: POP
// end ;
72368: LD_VAR 0 3
72372: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72373: LD_EXP 109
72377: NOT
72378: IFFALSE 72413
72380: GO 72382
72382: DISABLE
// begin initMiner := true ;
72383: LD_ADDR_EXP 109
72387: PUSH
72388: LD_INT 1
72390: ST_TO_ADDR
// minersList := [ ] ;
72391: LD_ADDR_EXP 110
72395: PUSH
72396: EMPTY
72397: ST_TO_ADDR
// minerMinesList := [ ] ;
72398: LD_ADDR_EXP 111
72402: PUSH
72403: EMPTY
72404: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72405: LD_ADDR_EXP 112
72409: PUSH
72410: LD_INT 5
72412: ST_TO_ADDR
// end ;
72413: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72414: LD_EXP 109
72418: PUSH
72419: LD_INT 34
72421: PUSH
72422: LD_INT 81
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PPUSH
72429: CALL_OW 69
72433: AND
72434: IFFALSE 72895
72436: GO 72438
72438: DISABLE
72439: LD_INT 0
72441: PPUSH
72442: PPUSH
72443: PPUSH
72444: PPUSH
// begin enable ;
72445: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72446: LD_ADDR_VAR 0 1
72450: PUSH
72451: LD_INT 34
72453: PUSH
72454: LD_INT 81
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PPUSH
72461: CALL_OW 69
72465: PUSH
72466: FOR_IN
72467: IFFALSE 72539
// begin if not i in minersList then
72469: LD_VAR 0 1
72473: PUSH
72474: LD_EXP 110
72478: IN
72479: NOT
72480: IFFALSE 72537
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72482: LD_ADDR_EXP 110
72486: PUSH
72487: LD_EXP 110
72491: PPUSH
72492: LD_EXP 110
72496: PUSH
72497: LD_INT 1
72499: PLUS
72500: PPUSH
72501: LD_VAR 0 1
72505: PPUSH
72506: CALL_OW 1
72510: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72511: LD_ADDR_EXP 111
72515: PUSH
72516: LD_EXP 111
72520: PPUSH
72521: LD_EXP 111
72525: PUSH
72526: LD_INT 1
72528: PLUS
72529: PPUSH
72530: EMPTY
72531: PPUSH
72532: CALL_OW 1
72536: ST_TO_ADDR
// end end ;
72537: GO 72466
72539: POP
72540: POP
// for i := minerMinesList downto 1 do
72541: LD_ADDR_VAR 0 1
72545: PUSH
72546: DOUBLE
72547: LD_EXP 111
72551: INC
72552: ST_TO_ADDR
72553: LD_INT 1
72555: PUSH
72556: FOR_DOWNTO
72557: IFFALSE 72893
// begin if IsLive ( minersList [ i ] ) then
72559: LD_EXP 110
72563: PUSH
72564: LD_VAR 0 1
72568: ARRAY
72569: PPUSH
72570: CALL_OW 300
72574: IFFALSE 72602
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72576: LD_EXP 110
72580: PUSH
72581: LD_VAR 0 1
72585: ARRAY
72586: PPUSH
72587: LD_EXP 111
72591: PUSH
72592: LD_VAR 0 1
72596: ARRAY
72597: PPUSH
72598: CALL_OW 505
// if not minerMinesList [ i ] then
72602: LD_EXP 111
72606: PUSH
72607: LD_VAR 0 1
72611: ARRAY
72612: NOT
72613: IFFALSE 72617
// continue ;
72615: GO 72556
// for j := minerMinesList [ i ] downto 1 do
72617: LD_ADDR_VAR 0 2
72621: PUSH
72622: DOUBLE
72623: LD_EXP 111
72627: PUSH
72628: LD_VAR 0 1
72632: ARRAY
72633: INC
72634: ST_TO_ADDR
72635: LD_INT 1
72637: PUSH
72638: FOR_DOWNTO
72639: IFFALSE 72889
// begin side := GetSide ( minersList [ i ] ) ;
72641: LD_ADDR_VAR 0 3
72645: PUSH
72646: LD_EXP 110
72650: PUSH
72651: LD_VAR 0 1
72655: ARRAY
72656: PPUSH
72657: CALL_OW 255
72661: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72662: LD_ADDR_VAR 0 4
72666: PUSH
72667: LD_EXP 111
72671: PUSH
72672: LD_VAR 0 1
72676: ARRAY
72677: PUSH
72678: LD_VAR 0 2
72682: ARRAY
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PPUSH
72688: LD_EXP 111
72692: PUSH
72693: LD_VAR 0 1
72697: ARRAY
72698: PUSH
72699: LD_VAR 0 2
72703: ARRAY
72704: PUSH
72705: LD_INT 2
72707: ARRAY
72708: PPUSH
72709: CALL_OW 428
72713: ST_TO_ADDR
// if not tmp then
72714: LD_VAR 0 4
72718: NOT
72719: IFFALSE 72723
// continue ;
72721: GO 72638
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72723: LD_VAR 0 4
72727: PUSH
72728: LD_INT 81
72730: PUSH
72731: LD_VAR 0 3
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PPUSH
72740: CALL_OW 69
72744: IN
72745: PUSH
72746: LD_EXP 111
72750: PUSH
72751: LD_VAR 0 1
72755: ARRAY
72756: PUSH
72757: LD_VAR 0 2
72761: ARRAY
72762: PUSH
72763: LD_INT 1
72765: ARRAY
72766: PPUSH
72767: LD_EXP 111
72771: PUSH
72772: LD_VAR 0 1
72776: ARRAY
72777: PUSH
72778: LD_VAR 0 2
72782: ARRAY
72783: PUSH
72784: LD_INT 2
72786: ARRAY
72787: PPUSH
72788: CALL_OW 458
72792: AND
72793: IFFALSE 72887
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72795: LD_EXP 111
72799: PUSH
72800: LD_VAR 0 1
72804: ARRAY
72805: PUSH
72806: LD_VAR 0 2
72810: ARRAY
72811: PUSH
72812: LD_INT 1
72814: ARRAY
72815: PPUSH
72816: LD_EXP 111
72820: PUSH
72821: LD_VAR 0 1
72825: ARRAY
72826: PUSH
72827: LD_VAR 0 2
72831: ARRAY
72832: PUSH
72833: LD_INT 2
72835: ARRAY
72836: PPUSH
72837: LD_VAR 0 3
72841: PPUSH
72842: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72846: LD_ADDR_EXP 111
72850: PUSH
72851: LD_EXP 111
72855: PPUSH
72856: LD_VAR 0 1
72860: PPUSH
72861: LD_EXP 111
72865: PUSH
72866: LD_VAR 0 1
72870: ARRAY
72871: PPUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: CALL_OW 3
72881: PPUSH
72882: CALL_OW 1
72886: ST_TO_ADDR
// end ; end ;
72887: GO 72638
72889: POP
72890: POP
// end ;
72891: GO 72556
72893: POP
72894: POP
// end ;
72895: PPOPN 4
72897: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
72898: LD_INT 0
72900: PPUSH
72901: PPUSH
// result := false ;
72902: LD_ADDR_VAR 0 4
72906: PUSH
72907: LD_INT 0
72909: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
72910: LD_VAR 0 1
72914: PPUSH
72915: CALL_OW 264
72919: PUSH
72920: LD_INT 81
72922: EQUAL
72923: NOT
72924: IFFALSE 72928
// exit ;
72926: GO 73168
// index := GetElementIndex ( minersList , unit ) ;
72928: LD_ADDR_VAR 0 5
72932: PUSH
72933: LD_EXP 110
72937: PPUSH
72938: LD_VAR 0 1
72942: PPUSH
72943: CALL 7636 0 2
72947: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
72948: LD_EXP 111
72952: PUSH
72953: LD_VAR 0 5
72957: ARRAY
72958: PUSH
72959: LD_EXP 112
72963: GREATEREQUAL
72964: IFFALSE 72968
// exit ;
72966: GO 73168
// ComMoveXY ( unit , x , y ) ;
72968: LD_VAR 0 1
72972: PPUSH
72973: LD_VAR 0 2
72977: PPUSH
72978: LD_VAR 0 3
72982: PPUSH
72983: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72987: LD_INT 35
72989: PPUSH
72990: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
72994: LD_VAR 0 1
72998: PPUSH
72999: LD_VAR 0 2
73003: PPUSH
73004: LD_VAR 0 3
73008: PPUSH
73009: CALL 39377 0 3
73013: NOT
73014: PUSH
73015: LD_VAR 0 1
73019: PPUSH
73020: CALL_OW 314
73024: AND
73025: IFFALSE 73029
// exit ;
73027: GO 73168
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73029: LD_VAR 0 2
73033: PPUSH
73034: LD_VAR 0 3
73038: PPUSH
73039: CALL_OW 428
73043: PUSH
73044: LD_VAR 0 1
73048: EQUAL
73049: PUSH
73050: LD_VAR 0 1
73054: PPUSH
73055: CALL_OW 314
73059: NOT
73060: AND
73061: IFFALSE 72987
// PlaySoundXY ( x , y , PlantMine ) ;
73063: LD_VAR 0 2
73067: PPUSH
73068: LD_VAR 0 3
73072: PPUSH
73073: LD_STRING PlantMine
73075: PPUSH
73076: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73080: LD_VAR 0 2
73084: PPUSH
73085: LD_VAR 0 3
73089: PPUSH
73090: LD_VAR 0 1
73094: PPUSH
73095: CALL_OW 255
73099: PPUSH
73100: LD_INT 0
73102: PPUSH
73103: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73107: LD_ADDR_EXP 111
73111: PUSH
73112: LD_EXP 111
73116: PPUSH
73117: LD_VAR 0 5
73121: PUSH
73122: LD_EXP 111
73126: PUSH
73127: LD_VAR 0 5
73131: ARRAY
73132: PUSH
73133: LD_INT 1
73135: PLUS
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PPUSH
73141: LD_VAR 0 2
73145: PUSH
73146: LD_VAR 0 3
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PPUSH
73155: CALL 7851 0 3
73159: ST_TO_ADDR
// result := true ;
73160: LD_ADDR_VAR 0 4
73164: PUSH
73165: LD_INT 1
73167: ST_TO_ADDR
// end ;
73168: LD_VAR 0 4
73172: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73173: LD_INT 0
73175: PPUSH
73176: PPUSH
73177: PPUSH
// if not unit in minersList then
73178: LD_VAR 0 1
73182: PUSH
73183: LD_EXP 110
73187: IN
73188: NOT
73189: IFFALSE 73193
// exit ;
73191: GO 73585
// index := GetElementIndex ( minersList , unit ) ;
73193: LD_ADDR_VAR 0 6
73197: PUSH
73198: LD_EXP 110
73202: PPUSH
73203: LD_VAR 0 1
73207: PPUSH
73208: CALL 7636 0 2
73212: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73213: LD_ADDR_VAR 0 5
73217: PUSH
73218: DOUBLE
73219: LD_EXP 111
73223: PUSH
73224: LD_VAR 0 6
73228: ARRAY
73229: INC
73230: ST_TO_ADDR
73231: LD_INT 1
73233: PUSH
73234: FOR_DOWNTO
73235: IFFALSE 73396
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73237: LD_EXP 111
73241: PUSH
73242: LD_VAR 0 6
73246: ARRAY
73247: PUSH
73248: LD_VAR 0 5
73252: ARRAY
73253: PUSH
73254: LD_INT 1
73256: ARRAY
73257: PUSH
73258: LD_VAR 0 2
73262: EQUAL
73263: PUSH
73264: LD_EXP 111
73268: PUSH
73269: LD_VAR 0 6
73273: ARRAY
73274: PUSH
73275: LD_VAR 0 5
73279: ARRAY
73280: PUSH
73281: LD_INT 2
73283: ARRAY
73284: PUSH
73285: LD_VAR 0 3
73289: EQUAL
73290: AND
73291: IFFALSE 73394
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73293: LD_EXP 111
73297: PUSH
73298: LD_VAR 0 6
73302: ARRAY
73303: PUSH
73304: LD_VAR 0 5
73308: ARRAY
73309: PUSH
73310: LD_INT 1
73312: ARRAY
73313: PPUSH
73314: LD_EXP 111
73318: PUSH
73319: LD_VAR 0 6
73323: ARRAY
73324: PUSH
73325: LD_VAR 0 5
73329: ARRAY
73330: PUSH
73331: LD_INT 2
73333: ARRAY
73334: PPUSH
73335: LD_VAR 0 1
73339: PPUSH
73340: CALL_OW 255
73344: PPUSH
73345: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73349: LD_ADDR_EXP 111
73353: PUSH
73354: LD_EXP 111
73358: PPUSH
73359: LD_VAR 0 6
73363: PPUSH
73364: LD_EXP 111
73368: PUSH
73369: LD_VAR 0 6
73373: ARRAY
73374: PPUSH
73375: LD_VAR 0 5
73379: PPUSH
73380: CALL_OW 3
73384: PPUSH
73385: CALL_OW 1
73389: ST_TO_ADDR
// exit ;
73390: POP
73391: POP
73392: GO 73585
// end ; end ;
73394: GO 73234
73396: POP
73397: POP
// for i := minerMinesList [ index ] downto 1 do
73398: LD_ADDR_VAR 0 5
73402: PUSH
73403: DOUBLE
73404: LD_EXP 111
73408: PUSH
73409: LD_VAR 0 6
73413: ARRAY
73414: INC
73415: ST_TO_ADDR
73416: LD_INT 1
73418: PUSH
73419: FOR_DOWNTO
73420: IFFALSE 73583
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73422: LD_EXP 111
73426: PUSH
73427: LD_VAR 0 6
73431: ARRAY
73432: PUSH
73433: LD_VAR 0 5
73437: ARRAY
73438: PUSH
73439: LD_INT 1
73441: ARRAY
73442: PPUSH
73443: LD_EXP 111
73447: PUSH
73448: LD_VAR 0 6
73452: ARRAY
73453: PUSH
73454: LD_VAR 0 5
73458: ARRAY
73459: PUSH
73460: LD_INT 2
73462: ARRAY
73463: PPUSH
73464: LD_VAR 0 2
73468: PPUSH
73469: LD_VAR 0 3
73473: PPUSH
73474: CALL_OW 298
73478: PUSH
73479: LD_INT 6
73481: LESS
73482: IFFALSE 73581
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73484: LD_EXP 111
73488: PUSH
73489: LD_VAR 0 6
73493: ARRAY
73494: PUSH
73495: LD_VAR 0 5
73499: ARRAY
73500: PUSH
73501: LD_INT 1
73503: ARRAY
73504: PPUSH
73505: LD_EXP 111
73509: PUSH
73510: LD_VAR 0 6
73514: ARRAY
73515: PUSH
73516: LD_VAR 0 5
73520: ARRAY
73521: PUSH
73522: LD_INT 2
73524: ARRAY
73525: PPUSH
73526: LD_VAR 0 1
73530: PPUSH
73531: CALL_OW 255
73535: PPUSH
73536: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73540: LD_ADDR_EXP 111
73544: PUSH
73545: LD_EXP 111
73549: PPUSH
73550: LD_VAR 0 6
73554: PPUSH
73555: LD_EXP 111
73559: PUSH
73560: LD_VAR 0 6
73564: ARRAY
73565: PPUSH
73566: LD_VAR 0 5
73570: PPUSH
73571: CALL_OW 3
73575: PPUSH
73576: CALL_OW 1
73580: ST_TO_ADDR
// end ; end ;
73581: GO 73419
73583: POP
73584: POP
// end ;
73585: LD_VAR 0 4
73589: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73590: LD_INT 0
73592: PPUSH
73593: PPUSH
73594: PPUSH
73595: PPUSH
73596: PPUSH
73597: PPUSH
73598: PPUSH
73599: PPUSH
73600: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73601: LD_VAR 0 1
73605: PPUSH
73606: CALL_OW 264
73610: PUSH
73611: LD_INT 81
73613: EQUAL
73614: NOT
73615: PUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_EXP 110
73625: IN
73626: NOT
73627: OR
73628: IFFALSE 73632
// exit ;
73630: GO 73954
// index := GetElementIndex ( minersList , unit ) ;
73632: LD_ADDR_VAR 0 6
73636: PUSH
73637: LD_EXP 110
73641: PPUSH
73642: LD_VAR 0 1
73646: PPUSH
73647: CALL 7636 0 2
73651: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73652: LD_ADDR_VAR 0 8
73656: PUSH
73657: LD_EXP 112
73661: PUSH
73662: LD_EXP 111
73666: PUSH
73667: LD_VAR 0 6
73671: ARRAY
73672: MINUS
73673: ST_TO_ADDR
// if not minesFreeAmount then
73674: LD_VAR 0 8
73678: NOT
73679: IFFALSE 73683
// exit ;
73681: GO 73954
// tmp := [ ] ;
73683: LD_ADDR_VAR 0 7
73687: PUSH
73688: EMPTY
73689: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73690: LD_ADDR_VAR 0 5
73694: PUSH
73695: DOUBLE
73696: LD_INT 1
73698: DEC
73699: ST_TO_ADDR
73700: LD_VAR 0 8
73704: PUSH
73705: FOR_TO
73706: IFFALSE 73901
// begin _d := rand ( 0 , 5 ) ;
73708: LD_ADDR_VAR 0 11
73712: PUSH
73713: LD_INT 0
73715: PPUSH
73716: LD_INT 5
73718: PPUSH
73719: CALL_OW 12
73723: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73724: LD_ADDR_VAR 0 12
73728: PUSH
73729: LD_INT 2
73731: PPUSH
73732: LD_INT 6
73734: PPUSH
73735: CALL_OW 12
73739: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73740: LD_ADDR_VAR 0 9
73744: PUSH
73745: LD_VAR 0 2
73749: PPUSH
73750: LD_VAR 0 11
73754: PPUSH
73755: LD_VAR 0 12
73759: PPUSH
73760: CALL_OW 272
73764: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73765: LD_ADDR_VAR 0 10
73769: PUSH
73770: LD_VAR 0 3
73774: PPUSH
73775: LD_VAR 0 11
73779: PPUSH
73780: LD_VAR 0 12
73784: PPUSH
73785: CALL_OW 273
73789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73790: LD_VAR 0 9
73794: PPUSH
73795: LD_VAR 0 10
73799: PPUSH
73800: CALL_OW 488
73804: PUSH
73805: LD_VAR 0 9
73809: PUSH
73810: LD_VAR 0 10
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_VAR 0 7
73823: IN
73824: NOT
73825: AND
73826: PUSH
73827: LD_VAR 0 9
73831: PPUSH
73832: LD_VAR 0 10
73836: PPUSH
73837: CALL_OW 458
73841: NOT
73842: AND
73843: IFFALSE 73885
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73845: LD_ADDR_VAR 0 7
73849: PUSH
73850: LD_VAR 0 7
73854: PPUSH
73855: LD_VAR 0 7
73859: PUSH
73860: LD_INT 1
73862: PLUS
73863: PPUSH
73864: LD_VAR 0 9
73868: PUSH
73869: LD_VAR 0 10
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PPUSH
73878: CALL_OW 1
73882: ST_TO_ADDR
73883: GO 73899
// i := i - 1 ;
73885: LD_ADDR_VAR 0 5
73889: PUSH
73890: LD_VAR 0 5
73894: PUSH
73895: LD_INT 1
73897: MINUS
73898: ST_TO_ADDR
// end ;
73899: GO 73705
73901: POP
73902: POP
// for i in tmp do
73903: LD_ADDR_VAR 0 5
73907: PUSH
73908: LD_VAR 0 7
73912: PUSH
73913: FOR_IN
73914: IFFALSE 73952
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_VAR 0 5
73925: PUSH
73926: LD_INT 1
73928: ARRAY
73929: PPUSH
73930: LD_VAR 0 5
73934: PUSH
73935: LD_INT 2
73937: ARRAY
73938: PPUSH
73939: CALL 72898 0 3
73943: NOT
73944: IFFALSE 73950
// exit ;
73946: POP
73947: POP
73948: GO 73954
73950: GO 73913
73952: POP
73953: POP
// end ;
73954: LD_VAR 0 4
73958: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
73959: LD_INT 0
73961: PPUSH
73962: PPUSH
73963: PPUSH
73964: PPUSH
73965: PPUSH
73966: PPUSH
73967: PPUSH
73968: PPUSH
73969: PPUSH
// if GetClass ( unit ) <> class_sniper then
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 257
73979: PUSH
73980: LD_INT 5
73982: NONEQUAL
73983: IFFALSE 73987
// exit ;
73985: GO 74453
// dist := 8 ;
73987: LD_ADDR_VAR 0 5
73991: PUSH
73992: LD_INT 8
73994: ST_TO_ADDR
// viewRange := 12 ;
73995: LD_ADDR_VAR 0 8
73999: PUSH
74000: LD_INT 12
74002: ST_TO_ADDR
// side := GetSide ( unit ) ;
74003: LD_ADDR_VAR 0 6
74007: PUSH
74008: LD_VAR 0 1
74012: PPUSH
74013: CALL_OW 255
74017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74018: LD_INT 61
74020: PPUSH
74021: LD_VAR 0 6
74025: PPUSH
74026: CALL_OW 321
74030: PUSH
74031: LD_INT 2
74033: EQUAL
74034: IFFALSE 74044
// viewRange := 16 ;
74036: LD_ADDR_VAR 0 8
74040: PUSH
74041: LD_INT 16
74043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: CALL_OW 297
74063: PUSH
74064: LD_VAR 0 5
74068: GREATER
74069: IFFALSE 74148
// begin ComMoveXY ( unit , x , y ) ;
74071: LD_VAR 0 1
74075: PPUSH
74076: LD_VAR 0 2
74080: PPUSH
74081: LD_VAR 0 3
74085: PPUSH
74086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74090: LD_INT 35
74092: PPUSH
74093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74097: LD_VAR 0 1
74101: PPUSH
74102: LD_VAR 0 2
74106: PPUSH
74107: LD_VAR 0 3
74111: PPUSH
74112: CALL 39377 0 3
74116: NOT
74117: IFFALSE 74121
// exit ;
74119: GO 74453
// until GetDistUnitXY ( unit , x , y ) < dist ;
74121: LD_VAR 0 1
74125: PPUSH
74126: LD_VAR 0 2
74130: PPUSH
74131: LD_VAR 0 3
74135: PPUSH
74136: CALL_OW 297
74140: PUSH
74141: LD_VAR 0 5
74145: LESS
74146: IFFALSE 74090
// end ; ComTurnXY ( unit , x , y ) ;
74148: LD_VAR 0 1
74152: PPUSH
74153: LD_VAR 0 2
74157: PPUSH
74158: LD_VAR 0 3
74162: PPUSH
74163: CALL_OW 118
// repeat if Multiplayer then
74167: LD_OWVAR 4
74171: IFFALSE 74182
// wait ( 35 ) else
74173: LD_INT 35
74175: PPUSH
74176: CALL_OW 67
74180: GO 74189
// wait ( 5 ) ;
74182: LD_INT 5
74184: PPUSH
74185: CALL_OW 67
// _d := GetDir ( unit ) ;
74189: LD_ADDR_VAR 0 11
74193: PUSH
74194: LD_VAR 0 1
74198: PPUSH
74199: CALL_OW 254
74203: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74204: LD_ADDR_VAR 0 7
74208: PUSH
74209: LD_VAR 0 1
74213: PPUSH
74214: CALL_OW 250
74218: PPUSH
74219: LD_VAR 0 1
74223: PPUSH
74224: CALL_OW 251
74228: PPUSH
74229: LD_VAR 0 2
74233: PPUSH
74234: LD_VAR 0 3
74238: PPUSH
74239: CALL 41985 0 4
74243: ST_TO_ADDR
// until dir = _d ;
74244: LD_VAR 0 7
74248: PUSH
74249: LD_VAR 0 11
74253: EQUAL
74254: IFFALSE 74167
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74256: LD_ADDR_VAR 0 9
74260: PUSH
74261: LD_VAR 0 1
74265: PPUSH
74266: CALL_OW 250
74270: PPUSH
74271: LD_VAR 0 7
74275: PPUSH
74276: LD_VAR 0 5
74280: PPUSH
74281: CALL_OW 272
74285: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74286: LD_ADDR_VAR 0 10
74290: PUSH
74291: LD_VAR 0 1
74295: PPUSH
74296: CALL_OW 251
74300: PPUSH
74301: LD_VAR 0 7
74305: PPUSH
74306: LD_VAR 0 5
74310: PPUSH
74311: CALL_OW 273
74315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74316: LD_VAR 0 9
74320: PPUSH
74321: LD_VAR 0 10
74325: PPUSH
74326: CALL_OW 488
74330: NOT
74331: IFFALSE 74335
// exit ;
74333: GO 74453
// ComAnimCustom ( unit , 1 ) ;
74335: LD_VAR 0 1
74339: PPUSH
74340: LD_INT 1
74342: PPUSH
74343: CALL_OW 592
// p := 0 ;
74347: LD_ADDR_VAR 0 12
74351: PUSH
74352: LD_INT 0
74354: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74355: LD_VAR 0 9
74359: PPUSH
74360: LD_VAR 0 10
74364: PPUSH
74365: LD_VAR 0 6
74369: PPUSH
74370: LD_VAR 0 8
74374: PPUSH
74375: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74379: LD_INT 35
74381: PPUSH
74382: CALL_OW 67
// p := Inc ( p ) ;
74386: LD_ADDR_VAR 0 12
74390: PUSH
74391: LD_VAR 0 12
74395: PPUSH
74396: CALL 41941 0 1
74400: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74401: LD_VAR 0 12
74405: PUSH
74406: LD_INT 3
74408: EQUAL
74409: PUSH
74410: LD_VAR 0 1
74414: PPUSH
74415: CALL_OW 302
74419: NOT
74420: OR
74421: PUSH
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 301
74431: OR
74432: IFFALSE 74379
// RemoveSeeing ( _x , _y , side ) ;
74434: LD_VAR 0 9
74438: PPUSH
74439: LD_VAR 0 10
74443: PPUSH
74444: LD_VAR 0 6
74448: PPUSH
74449: CALL_OW 331
// end ;
74453: LD_VAR 0 4
74457: RET
