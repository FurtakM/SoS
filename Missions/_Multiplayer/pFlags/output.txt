// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45657 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45972 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 31
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 32
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 31
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 32
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 34
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 33
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45112 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45112 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45112 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45112 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45112 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45112 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45112 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45112 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 4984 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 44945 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 44945 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 44945 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 44945 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 44945 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 44945 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 44945 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 44945 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 44945 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 44945 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 44945 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 44945 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 44945 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 44945 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 44945 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 44945 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45112 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45112 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45112 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45112 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45112 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45112 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45112 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45112 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45112 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45112 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45112 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45112 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45112 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45112 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45112 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45112 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45112 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45112 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45112 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45112 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45112 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45112 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45112 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45112 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 41934 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 69424 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 50266 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 69441 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 50856 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL 69482 0 2
2857: PPOPN 2
2859: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_VAR 0 3
2874: PPUSH
2875: CALL 50909 0 3
2879: PPOPN 3
2881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// if exist_mode then
2886: LD_VAR 0 2
2890: IFFALSE 2915
// unit := CreateCharacter ( prefix & ident ) else
2892: LD_ADDR_VAR 0 5
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_VAR 0 1
2906: STR
2907: PPUSH
2908: CALL_OW 34
2912: ST_TO_ADDR
2913: GO 2930
// unit := NewCharacter ( ident ) ;
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL_OW 25
2929: ST_TO_ADDR
// result := unit ;
2930: LD_ADDR_VAR 0 4
2934: PUSH
2935: LD_VAR 0 5
2939: ST_TO_ADDR
// end ;
2940: LD_VAR 0 4
2944: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2945: LD_INT 0
2947: PPUSH
2948: PPUSH
// if not side or not nation then
2949: LD_VAR 0 1
2953: NOT
2954: PUSH
2955: LD_VAR 0 2
2959: NOT
2960: OR
2961: IFFALSE 2965
// exit ;
2963: GO 3733
// case nation of nation_american :
2965: LD_VAR 0 2
2969: PUSH
2970: LD_INT 1
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3192
2978: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_INT 35
2986: PUSH
2987: LD_INT 45
2989: PUSH
2990: LD_INT 46
2992: PUSH
2993: LD_INT 47
2995: PUSH
2996: LD_INT 82
2998: PUSH
2999: LD_INT 83
3001: PUSH
3002: LD_INT 84
3004: PUSH
3005: LD_INT 85
3007: PUSH
3008: LD_INT 86
3010: PUSH
3011: LD_INT 1
3013: PUSH
3014: LD_INT 2
3016: PUSH
3017: LD_INT 6
3019: PUSH
3020: LD_INT 15
3022: PUSH
3023: LD_INT 16
3025: PUSH
3026: LD_INT 7
3028: PUSH
3029: LD_INT 12
3031: PUSH
3032: LD_INT 13
3034: PUSH
3035: LD_INT 10
3037: PUSH
3038: LD_INT 14
3040: PUSH
3041: LD_INT 20
3043: PUSH
3044: LD_INT 21
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 25
3052: PUSH
3053: LD_INT 32
3055: PUSH
3056: LD_INT 27
3058: PUSH
3059: LD_INT 36
3061: PUSH
3062: LD_INT 69
3064: PUSH
3065: LD_INT 39
3067: PUSH
3068: LD_INT 34
3070: PUSH
3071: LD_INT 40
3073: PUSH
3074: LD_INT 48
3076: PUSH
3077: LD_INT 49
3079: PUSH
3080: LD_INT 50
3082: PUSH
3083: LD_INT 51
3085: PUSH
3086: LD_INT 52
3088: PUSH
3089: LD_INT 53
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: LD_INT 55
3097: PUSH
3098: LD_INT 56
3100: PUSH
3101: LD_INT 57
3103: PUSH
3104: LD_INT 58
3106: PUSH
3107: LD_INT 59
3109: PUSH
3110: LD_INT 60
3112: PUSH
3113: LD_INT 61
3115: PUSH
3116: LD_INT 62
3118: PUSH
3119: LD_INT 80
3121: PUSH
3122: LD_INT 82
3124: PUSH
3125: LD_INT 83
3127: PUSH
3128: LD_INT 84
3130: PUSH
3131: LD_INT 85
3133: PUSH
3134: LD_INT 86
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: ST_TO_ADDR
3190: GO 3657
3192: LD_INT 2
3194: DOUBLE
3195: EQUAL
3196: IFTRUE 3200
3198: GO 3426
3200: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3201: LD_ADDR_VAR 0 4
3205: PUSH
3206: LD_INT 35
3208: PUSH
3209: LD_INT 45
3211: PUSH
3212: LD_INT 46
3214: PUSH
3215: LD_INT 47
3217: PUSH
3218: LD_INT 82
3220: PUSH
3221: LD_INT 83
3223: PUSH
3224: LD_INT 84
3226: PUSH
3227: LD_INT 85
3229: PUSH
3230: LD_INT 87
3232: PUSH
3233: LD_INT 70
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: LD_INT 11
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: LD_INT 15
3256: PUSH
3257: LD_INT 18
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 17
3265: PUSH
3266: LD_INT 8
3268: PUSH
3269: LD_INT 20
3271: PUSH
3272: LD_INT 21
3274: PUSH
3275: LD_INT 22
3277: PUSH
3278: LD_INT 72
3280: PUSH
3281: LD_INT 26
3283: PUSH
3284: LD_INT 69
3286: PUSH
3287: LD_INT 39
3289: PUSH
3290: LD_INT 40
3292: PUSH
3293: LD_INT 41
3295: PUSH
3296: LD_INT 42
3298: PUSH
3299: LD_INT 43
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: LD_INT 49
3307: PUSH
3308: LD_INT 50
3310: PUSH
3311: LD_INT 51
3313: PUSH
3314: LD_INT 52
3316: PUSH
3317: LD_INT 53
3319: PUSH
3320: LD_INT 54
3322: PUSH
3323: LD_INT 55
3325: PUSH
3326: LD_INT 56
3328: PUSH
3329: LD_INT 60
3331: PUSH
3332: LD_INT 61
3334: PUSH
3335: LD_INT 62
3337: PUSH
3338: LD_INT 66
3340: PUSH
3341: LD_INT 67
3343: PUSH
3344: LD_INT 68
3346: PUSH
3347: LD_INT 81
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: LD_INT 83
3355: PUSH
3356: LD_INT 84
3358: PUSH
3359: LD_INT 85
3361: PUSH
3362: LD_INT 87
3364: PUSH
3365: LD_INT 88
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: ST_TO_ADDR
3424: GO 3657
3426: LD_INT 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3656
3434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3435: LD_ADDR_VAR 0 4
3439: PUSH
3440: LD_INT 46
3442: PUSH
3443: LD_INT 47
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: LD_INT 2
3451: PUSH
3452: LD_INT 82
3454: PUSH
3455: LD_INT 83
3457: PUSH
3458: LD_INT 84
3460: PUSH
3461: LD_INT 85
3463: PUSH
3464: LD_INT 86
3466: PUSH
3467: LD_INT 11
3469: PUSH
3470: LD_INT 9
3472: PUSH
3473: LD_INT 20
3475: PUSH
3476: LD_INT 19
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 24
3484: PUSH
3485: LD_INT 22
3487: PUSH
3488: LD_INT 25
3490: PUSH
3491: LD_INT 28
3493: PUSH
3494: LD_INT 29
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 31
3502: PUSH
3503: LD_INT 37
3505: PUSH
3506: LD_INT 38
3508: PUSH
3509: LD_INT 32
3511: PUSH
3512: LD_INT 27
3514: PUSH
3515: LD_INT 33
3517: PUSH
3518: LD_INT 69
3520: PUSH
3521: LD_INT 39
3523: PUSH
3524: LD_INT 34
3526: PUSH
3527: LD_INT 40
3529: PUSH
3530: LD_INT 71
3532: PUSH
3533: LD_INT 23
3535: PUSH
3536: LD_INT 44
3538: PUSH
3539: LD_INT 48
3541: PUSH
3542: LD_INT 49
3544: PUSH
3545: LD_INT 50
3547: PUSH
3548: LD_INT 51
3550: PUSH
3551: LD_INT 52
3553: PUSH
3554: LD_INT 53
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: LD_INT 55
3562: PUSH
3563: LD_INT 56
3565: PUSH
3566: LD_INT 57
3568: PUSH
3569: LD_INT 58
3571: PUSH
3572: LD_INT 59
3574: PUSH
3575: LD_INT 63
3577: PUSH
3578: LD_INT 64
3580: PUSH
3581: LD_INT 65
3583: PUSH
3584: LD_INT 82
3586: PUSH
3587: LD_INT 83
3589: PUSH
3590: LD_INT 84
3592: PUSH
3593: LD_INT 85
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 3657
3656: POP
// if state > - 1 and state < 3 then
3657: LD_VAR 0 3
3661: PUSH
3662: LD_INT 1
3664: NEG
3665: GREATER
3666: PUSH
3667: LD_VAR 0 3
3671: PUSH
3672: LD_INT 3
3674: LESS
3675: AND
3676: IFFALSE 3733
// for i in result do
3678: LD_ADDR_VAR 0 5
3682: PUSH
3683: LD_VAR 0 4
3687: PUSH
3688: FOR_IN
3689: IFFALSE 3731
// if GetTech ( i , side ) <> state then
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_VAR 0 1
3700: PPUSH
3701: CALL_OW 321
3705: PUSH
3706: LD_VAR 0 3
3710: NONEQUAL
3711: IFFALSE 3729
// result := result diff i ;
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_VAR 0 4
3722: PUSH
3723: LD_VAR 0 5
3727: DIFF
3728: ST_TO_ADDR
3729: GO 3688
3731: POP
3732: POP
// end ;
3733: LD_VAR 0 4
3737: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
// result := true ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL_OW 480
3765: ST_TO_ADDR
// if not tmp then
3766: LD_VAR 0 5
3770: NOT
3771: IFFALSE 3775
// exit ;
3773: GO 3824
// for i in tmp do
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_VAR 0 5
3784: PUSH
3785: FOR_IN
3786: IFFALSE 3822
// if GetTech ( i , side ) <> state_researched then
3788: LD_VAR 0 4
3792: PPUSH
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 321
3802: PUSH
3803: LD_INT 2
3805: NONEQUAL
3806: IFFALSE 3820
// begin result := false ;
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: LD_INT 0
3815: ST_TO_ADDR
// exit ;
3816: POP
3817: POP
3818: GO 3824
// end ;
3820: GO 3785
3822: POP
3823: POP
// end ;
3824: LD_VAR 0 3
3828: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3829: LD_INT 0
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3844: LD_VAR 0 1
3848: NOT
3849: PUSH
3850: LD_VAR 0 1
3854: PPUSH
3855: CALL_OW 257
3859: PUSH
3860: LD_INT 9
3862: NONEQUAL
3863: OR
3864: IFFALSE 3868
// exit ;
3866: GO 4441
// side := GetSide ( unit ) ;
3868: LD_ADDR_VAR 0 9
3872: PUSH
3873: LD_VAR 0 1
3877: PPUSH
3878: CALL_OW 255
3882: ST_TO_ADDR
// tech_space := tech_spacanom ;
3883: LD_ADDR_VAR 0 12
3887: PUSH
3888: LD_INT 29
3890: ST_TO_ADDR
// tech_time := tech_taurad ;
3891: LD_ADDR_VAR 0 13
3895: PUSH
3896: LD_INT 28
3898: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3899: LD_ADDR_VAR 0 11
3903: PUSH
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 310
3913: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3914: LD_VAR 0 11
3918: PPUSH
3919: CALL_OW 247
3923: PUSH
3924: LD_INT 2
3926: EQUAL
3927: IFFALSE 3931
// exit ;
3929: GO 4441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3931: LD_ADDR_VAR 0 8
3935: PUSH
3936: LD_INT 81
3938: PUSH
3939: LD_VAR 0 9
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: LD_INT 21
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not tmp then
3974: LD_VAR 0 8
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4441
// if in_unit then
3983: LD_VAR 0 11
3987: IFFALSE 4011
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3989: LD_ADDR_VAR 0 10
3993: PUSH
3994: LD_VAR 0 8
3998: PPUSH
3999: LD_VAR 0 11
4003: PPUSH
4004: CALL_OW 74
4008: ST_TO_ADDR
4009: GO 4031
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4011: LD_ADDR_VAR 0 10
4015: PUSH
4016: LD_VAR 0 8
4020: PPUSH
4021: LD_VAR 0 1
4025: PPUSH
4026: CALL_OW 74
4030: ST_TO_ADDR
// if not enemy then
4031: LD_VAR 0 10
4035: NOT
4036: IFFALSE 4040
// exit ;
4038: GO 4441
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4040: LD_VAR 0 11
4044: PUSH
4045: LD_VAR 0 11
4049: PPUSH
4050: LD_VAR 0 10
4054: PPUSH
4055: CALL_OW 296
4059: PUSH
4060: LD_INT 13
4062: GREATER
4063: AND
4064: PUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: LD_VAR 0 10
4074: PPUSH
4075: CALL_OW 296
4079: PUSH
4080: LD_INT 12
4082: GREATER
4083: OR
4084: IFFALSE 4088
// exit ;
4086: GO 4441
// missile := [ 1 ] ;
4088: LD_ADDR_VAR 0 14
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4099: LD_VAR 0 9
4103: PPUSH
4104: LD_VAR 0 12
4108: PPUSH
4109: CALL_OW 325
4113: IFFALSE 4142
// missile := Replace ( missile , missile + 1 , 2 ) ;
4115: LD_ADDR_VAR 0 14
4119: PUSH
4120: LD_VAR 0 14
4124: PPUSH
4125: LD_VAR 0 14
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: PPUSH
4134: LD_INT 2
4136: PPUSH
4137: CALL_OW 1
4141: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4142: LD_VAR 0 9
4146: PPUSH
4147: LD_VAR 0 13
4151: PPUSH
4152: CALL_OW 325
4156: PUSH
4157: LD_VAR 0 10
4161: PPUSH
4162: CALL_OW 255
4166: PPUSH
4167: LD_VAR 0 13
4171: PPUSH
4172: CALL_OW 325
4176: NOT
4177: AND
4178: IFFALSE 4207
// missile := Replace ( missile , missile + 1 , 3 ) ;
4180: LD_ADDR_VAR 0 14
4184: PUSH
4185: LD_VAR 0 14
4189: PPUSH
4190: LD_VAR 0 14
4194: PUSH
4195: LD_INT 1
4197: PLUS
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: CALL_OW 1
4206: ST_TO_ADDR
// if missile < 2 then
4207: LD_VAR 0 14
4211: PUSH
4212: LD_INT 2
4214: LESS
4215: IFFALSE 4219
// exit ;
4217: GO 4441
// x := GetX ( enemy ) ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 10
4228: PPUSH
4229: CALL_OW 250
4233: ST_TO_ADDR
// y := GetY ( enemy ) ;
4234: LD_ADDR_VAR 0 5
4238: PUSH
4239: LD_VAR 0 10
4243: PPUSH
4244: CALL_OW 251
4248: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4249: LD_ADDR_VAR 0 6
4253: PUSH
4254: LD_VAR 0 4
4258: PUSH
4259: LD_INT 1
4261: NEG
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: PLUS
4271: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4272: LD_ADDR_VAR 0 7
4276: PUSH
4277: LD_VAR 0 5
4281: PUSH
4282: LD_INT 1
4284: NEG
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 12
4293: PLUS
4294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4295: LD_VAR 0 6
4299: PPUSH
4300: LD_VAR 0 7
4304: PPUSH
4305: CALL_OW 488
4309: NOT
4310: IFFALSE 4332
// begin _x := x ;
4312: LD_ADDR_VAR 0 6
4316: PUSH
4317: LD_VAR 0 4
4321: ST_TO_ADDR
// _y := y ;
4322: LD_ADDR_VAR 0 7
4326: PUSH
4327: LD_VAR 0 5
4331: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_VAR 0 14
4344: PPUSH
4345: CALL_OW 12
4349: ST_TO_ADDR
// case i of 1 :
4350: LD_VAR 0 3
4354: PUSH
4355: LD_INT 1
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4380
4363: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4364: LD_VAR 0 1
4368: PPUSH
4369: LD_VAR 0 10
4373: PPUSH
4374: CALL_OW 115
4378: GO 4441
4380: LD_INT 2
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4410
4388: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_VAR 0 6
4398: PPUSH
4399: LD_VAR 0 7
4403: PPUSH
4404: CALL_OW 153
4408: GO 4441
4410: LD_INT 3
4412: DOUBLE
4413: EQUAL
4414: IFTRUE 4418
4416: GO 4440
4418: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_VAR 0 6
4428: PPUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: CALL_OW 154
4438: GO 4441
4440: POP
// end ;
4441: LD_VAR 0 2
4445: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4446: LD_INT 0
4448: PPUSH
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// if not unit or not building then
4454: LD_VAR 0 1
4458: NOT
4459: PUSH
4460: LD_VAR 0 2
4464: NOT
4465: OR
4466: IFFALSE 4470
// exit ;
4468: GO 4628
// x := GetX ( building ) ;
4470: LD_ADDR_VAR 0 5
4474: PUSH
4475: LD_VAR 0 2
4479: PPUSH
4480: CALL_OW 250
4484: ST_TO_ADDR
// y := GetY ( building ) ;
4485: LD_ADDR_VAR 0 6
4489: PUSH
4490: LD_VAR 0 2
4494: PPUSH
4495: CALL_OW 251
4499: ST_TO_ADDR
// for i = 0 to 5 do
4500: LD_ADDR_VAR 0 4
4504: PUSH
4505: DOUBLE
4506: LD_INT 0
4508: DEC
4509: ST_TO_ADDR
4510: LD_INT 5
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4626
// begin _x := ShiftX ( x , i , 3 ) ;
4516: LD_ADDR_VAR 0 7
4520: PUSH
4521: LD_VAR 0 5
4525: PPUSH
4526: LD_VAR 0 4
4530: PPUSH
4531: LD_INT 3
4533: PPUSH
4534: CALL_OW 272
4538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4539: LD_ADDR_VAR 0 8
4543: PUSH
4544: LD_VAR 0 6
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_INT 3
4556: PPUSH
4557: CALL_OW 273
4561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4562: LD_VAR 0 7
4566: PPUSH
4567: LD_VAR 0 8
4571: PPUSH
4572: CALL_OW 488
4576: NOT
4577: IFFALSE 4581
// continue ;
4579: GO 4513
// if HexInfo ( _x , _y ) = 0 then
4581: LD_VAR 0 7
4585: PPUSH
4586: LD_VAR 0 8
4590: PPUSH
4591: CALL_OW 428
4595: PUSH
4596: LD_INT 0
4598: EQUAL
4599: IFFALSE 4624
// begin ComMoveXY ( unit , _x , _y ) ;
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_VAR 0 7
4610: PPUSH
4611: LD_VAR 0 8
4615: PPUSH
4616: CALL_OW 111
// exit ;
4620: POP
4621: POP
4622: GO 4628
// end ; end ;
4624: GO 4513
4626: POP
4627: POP
// end ;
4628: LD_VAR 0 3
4632: RET
// export function ScanBase ( side , base_area ) ; begin
4633: LD_INT 0
4635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: LD_VAR 0 2
4645: PPUSH
4646: LD_INT 81
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 70
4662: ST_TO_ADDR
// end ;
4663: LD_VAR 0 3
4667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4668: LD_INT 0
4670: PPUSH
4671: PPUSH
4672: PPUSH
4673: PPUSH
// result := false ;
4674: LD_ADDR_VAR 0 2
4678: PUSH
4679: LD_INT 0
4681: ST_TO_ADDR
// side := GetSide ( unit ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 1
4691: PPUSH
4692: CALL_OW 255
4696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 248
4711: ST_TO_ADDR
// case nat of 1 :
4712: LD_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: DOUBLE
4720: EQUAL
4721: IFTRUE 4725
4723: GO 4736
4725: POP
// tech := tech_lassight ; 2 :
4726: LD_ADDR_VAR 0 5
4730: PUSH
4731: LD_INT 12
4733: ST_TO_ADDR
4734: GO 4775
4736: LD_INT 2
4738: DOUBLE
4739: EQUAL
4740: IFTRUE 4744
4742: GO 4755
4744: POP
// tech := tech_mortar ; 3 :
4745: LD_ADDR_VAR 0 5
4749: PUSH
4750: LD_INT 41
4752: ST_TO_ADDR
4753: GO 4775
4755: LD_INT 3
4757: DOUBLE
4758: EQUAL
4759: IFTRUE 4763
4761: GO 4774
4763: POP
// tech := tech_bazooka ; end ;
4764: LD_ADDR_VAR 0 5
4768: PUSH
4769: LD_INT 44
4771: ST_TO_ADDR
4772: GO 4775
4774: POP
// if Researched ( side , tech ) then
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_VAR 0 5
4784: PPUSH
4785: CALL_OW 325
4789: IFFALSE 4816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4791: LD_ADDR_VAR 0 2
4795: PUSH
4796: LD_INT 5
4798: PUSH
4799: LD_INT 8
4801: PUSH
4802: LD_INT 9
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: LD_VAR 0 4
4814: ARRAY
4815: ST_TO_ADDR
// end ;
4816: LD_VAR 0 2
4820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
// if not mines then
4826: LD_VAR 0 2
4830: NOT
4831: IFFALSE 4835
// exit ;
4833: GO 4979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 81
4842: PUSH
4843: LD_VAR 0 1
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 21
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// for i in mines do
4878: LD_ADDR_VAR 0 4
4882: PUSH
4883: LD_VAR 0 2
4887: PUSH
4888: FOR_IN
4889: IFFALSE 4977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4891: LD_VAR 0 4
4895: PUSH
4896: LD_INT 1
4898: ARRAY
4899: PPUSH
4900: LD_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ARRAY
4908: PPUSH
4909: CALL_OW 458
4913: NOT
4914: IFFALSE 4918
// continue ;
4916: GO 4888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4918: LD_VAR 0 4
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 4
4931: PUSH
4932: LD_INT 2
4934: ARRAY
4935: PPUSH
4936: CALL_OW 428
4940: PUSH
4941: LD_VAR 0 5
4945: IN
4946: IFFALSE 4975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4948: LD_VAR 0 4
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 2
4964: ARRAY
4965: PPUSH
4966: LD_VAR 0 1
4970: PPUSH
4971: CALL_OW 456
// end ;
4975: GO 4888
4977: POP
4978: POP
// end ;
4979: LD_VAR 0 3
4983: RET
// export function Count ( array ) ; begin
4984: LD_INT 0
4986: PPUSH
// result := array + 0 ;
4987: LD_ADDR_VAR 0 2
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: LD_INT 0
4999: PLUS
5000: ST_TO_ADDR
// end ;
5001: LD_VAR 0 2
5005: RET
// export function IsEmpty ( building ) ; begin
5006: LD_INT 0
5008: PPUSH
// if not building then
5009: LD_VAR 0 1
5013: NOT
5014: IFFALSE 5018
// exit ;
5016: GO 5061
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: LD_VAR 0 1
5027: PUSH
5028: LD_INT 22
5030: PUSH
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 255
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 58
5047: PUSH
5048: EMPTY
5049: LIST
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PPUSH
5055: CALL_OW 69
5059: IN
5060: ST_TO_ADDR
// end ;
5061: LD_VAR 0 2
5065: RET
// export function IsNotFull ( building ) ; var places ; begin
5066: LD_INT 0
5068: PPUSH
5069: PPUSH
// if not building then
5070: LD_VAR 0 1
5074: NOT
5075: IFFALSE 5079
// exit ;
5077: GO 5107
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_VAR 0 1
5088: PPUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 62
5094: PUSH
5095: EMPTY
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 72
5106: ST_TO_ADDR
// end ;
5107: LD_VAR 0 2
5111: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5112: LD_INT 0
5114: PPUSH
5115: PPUSH
5116: PPUSH
5117: PPUSH
// tmp := [ ] ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// list := [ ] ;
5125: LD_ADDR_VAR 0 5
5129: PUSH
5130: EMPTY
5131: ST_TO_ADDR
// for i = 16 to 25 do
5132: LD_ADDR_VAR 0 4
5136: PUSH
5137: DOUBLE
5138: LD_INT 16
5140: DEC
5141: ST_TO_ADDR
5142: LD_INT 25
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5219
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_VAR 0 3
5157: PUSH
5158: LD_INT 22
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 255
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 91
5177: PUSH
5178: LD_VAR 0 1
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 30
5193: PUSH
5194: LD_VAR 0 4
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: ADD
5216: ST_TO_ADDR
5217: GO 5145
5219: POP
5220: POP
// for i = 1 to tmp do
5221: LD_ADDR_VAR 0 4
5225: PUSH
5226: DOUBLE
5227: LD_INT 1
5229: DEC
5230: ST_TO_ADDR
5231: LD_VAR 0 3
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5325
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5239: LD_ADDR_VAR 0 5
5243: PUSH
5244: LD_VAR 0 5
5248: PUSH
5249: LD_VAR 0 3
5253: PUSH
5254: LD_VAR 0 4
5258: ARRAY
5259: PPUSH
5260: CALL_OW 266
5264: PUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: PPUSH
5276: CALL_OW 250
5280: PUSH
5281: LD_VAR 0 3
5285: PUSH
5286: LD_VAR 0 4
5290: ARRAY
5291: PPUSH
5292: CALL_OW 251
5296: PUSH
5297: LD_VAR 0 3
5301: PUSH
5302: LD_VAR 0 4
5306: ARRAY
5307: PPUSH
5308: CALL_OW 254
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: ADD
5322: ST_TO_ADDR
5323: GO 5236
5325: POP
5326: POP
// result := list ;
5327: LD_ADDR_VAR 0 2
5331: PUSH
5332: LD_VAR 0 5
5336: ST_TO_ADDR
// end ;
5337: LD_VAR 0 2
5341: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5342: LD_INT 0
5344: PPUSH
5345: PPUSH
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
// if not factory then
5351: LD_VAR 0 1
5355: NOT
5356: IFFALSE 5360
// exit ;
5358: GO 5953
// if control = control_apeman then
5360: LD_VAR 0 4
5364: PUSH
5365: LD_INT 5
5367: EQUAL
5368: IFFALSE 5477
// begin tmp := UnitsInside ( factory ) ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: CALL_OW 313
5384: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5385: LD_VAR 0 8
5389: PPUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 12
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: NOT
5405: IFFALSE 5415
// control := control_manual ;
5407: LD_ADDR_VAR 0 4
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5415: LD_ADDR_VAR 0 8
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL 5112 0 1
5429: ST_TO_ADDR
// if tmp then
5430: LD_VAR 0 8
5434: IFFALSE 5477
// begin for i in tmp do
5436: LD_ADDR_VAR 0 7
5440: PUSH
5441: LD_VAR 0 8
5445: PUSH
5446: FOR_IN
5447: IFFALSE 5475
// if i [ 1 ] = b_ext_radio then
5449: LD_VAR 0 7
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PUSH
5458: LD_INT 22
5460: EQUAL
5461: IFFALSE 5473
// begin control := control_remote ;
5463: LD_ADDR_VAR 0 4
5467: PUSH
5468: LD_INT 2
5470: ST_TO_ADDR
// break ;
5471: GO 5475
// end ;
5473: GO 5446
5475: POP
5476: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5477: LD_VAR 0 1
5481: PPUSH
5482: LD_VAR 0 2
5486: PPUSH
5487: LD_VAR 0 3
5491: PPUSH
5492: LD_VAR 0 4
5496: PPUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: CALL_OW 448
5506: IFFALSE 5541
// begin result := [ chassis , engine , control , weapon ] ;
5508: LD_ADDR_VAR 0 6
5512: PUSH
5513: LD_VAR 0 2
5517: PUSH
5518: LD_VAR 0 3
5522: PUSH
5523: LD_VAR 0 4
5527: PUSH
5528: LD_VAR 0 5
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: ST_TO_ADDR
// exit ;
5539: GO 5953
// end ; _chassis := AvailableChassisList ( factory ) ;
5541: LD_ADDR_VAR 0 9
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 475
5555: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5556: LD_ADDR_VAR 0 11
5560: PUSH
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 476
5570: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5571: LD_ADDR_VAR 0 12
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 477
5585: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL_OW 478
5600: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5601: LD_VAR 0 9
5605: NOT
5606: PUSH
5607: LD_VAR 0 11
5611: NOT
5612: OR
5613: PUSH
5614: LD_VAR 0 12
5618: NOT
5619: OR
5620: PUSH
5621: LD_VAR 0 10
5625: NOT
5626: OR
5627: IFFALSE 5662
// begin result := [ chassis , engine , control , weapon ] ;
5629: LD_ADDR_VAR 0 6
5633: PUSH
5634: LD_VAR 0 2
5638: PUSH
5639: LD_VAR 0 3
5643: PUSH
5644: LD_VAR 0 4
5648: PUSH
5649: LD_VAR 0 5
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: ST_TO_ADDR
// exit ;
5660: GO 5953
// end ; if not chassis in _chassis then
5662: LD_VAR 0 2
5666: PUSH
5667: LD_VAR 0 9
5671: IN
5672: NOT
5673: IFFALSE 5699
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_VAR 0 9
5684: PUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_VAR 0 9
5692: PPUSH
5693: CALL_OW 12
5697: ARRAY
5698: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5699: LD_VAR 0 2
5703: PPUSH
5704: LD_VAR 0 3
5708: PPUSH
5709: CALL 5958 0 2
5713: NOT
5714: IFFALSE 5773
// repeat engine := _engine [ 1 ] ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_VAR 0 11
5725: PUSH
5726: LD_INT 1
5728: ARRAY
5729: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5730: LD_ADDR_VAR 0 11
5734: PUSH
5735: LD_VAR 0 11
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 3
5747: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL 5958 0 2
5762: PUSH
5763: LD_VAR 0 11
5767: PUSH
5768: EMPTY
5769: EQUAL
5770: OR
5771: IFFALSE 5716
// if not control in _control then
5773: LD_VAR 0 4
5777: PUSH
5778: LD_VAR 0 12
5782: IN
5783: NOT
5784: IFFALSE 5810
// control := _control [ rand ( 1 , _control ) ] ;
5786: LD_ADDR_VAR 0 4
5790: PUSH
5791: LD_VAR 0 12
5795: PUSH
5796: LD_INT 1
5798: PPUSH
5799: LD_VAR 0 12
5803: PPUSH
5804: CALL_OW 12
5808: ARRAY
5809: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_VAR 0 5
5819: PPUSH
5820: CALL 6178 0 2
5824: NOT
5825: IFFALSE 5884
// repeat weapon := _weapon [ 1 ] ;
5827: LD_ADDR_VAR 0 5
5831: PUSH
5832: LD_VAR 0 10
5836: PUSH
5837: LD_INT 1
5839: ARRAY
5840: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_VAR 0 10
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL_OW 3
5858: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 5
5868: PPUSH
5869: CALL 6178 0 2
5873: PUSH
5874: LD_VAR 0 10
5878: PUSH
5879: EMPTY
5880: EQUAL
5881: OR
5882: IFFALSE 5827
// result := [ ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: EMPTY
5890: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5891: LD_VAR 0 1
5895: PPUSH
5896: LD_VAR 0 2
5900: PPUSH
5901: LD_VAR 0 3
5905: PPUSH
5906: LD_VAR 0 4
5910: PPUSH
5911: LD_VAR 0 5
5915: PPUSH
5916: CALL_OW 448
5920: IFFALSE 5953
// result := [ chassis , engine , control , weapon ] ;
5922: LD_ADDR_VAR 0 6
5926: PUSH
5927: LD_VAR 0 2
5931: PUSH
5932: LD_VAR 0 3
5936: PUSH
5937: LD_VAR 0 4
5941: PUSH
5942: LD_VAR 0 5
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: ST_TO_ADDR
// end ;
5953: LD_VAR 0 6
5957: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5958: LD_INT 0
5960: PPUSH
// if not chassis or not engine then
5961: LD_VAR 0 1
5965: NOT
5966: PUSH
5967: LD_VAR 0 2
5971: NOT
5972: OR
5973: IFFALSE 5977
// exit ;
5975: GO 6173
// case engine of engine_solar :
5977: LD_VAR 0 2
5981: PUSH
5982: LD_INT 2
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6028
5990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5991: LD_ADDR_VAR 0 3
5995: PUSH
5996: LD_INT 11
5998: PUSH
5999: LD_INT 12
6001: PUSH
6002: LD_INT 13
6004: PUSH
6005: LD_INT 14
6007: PUSH
6008: LD_INT 1
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 3
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: ST_TO_ADDR
6026: GO 6157
6028: LD_INT 1
6030: DOUBLE
6031: EQUAL
6032: IFTRUE 6036
6034: GO 6098
6036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6037: LD_ADDR_VAR 0 3
6041: PUSH
6042: LD_INT 11
6044: PUSH
6045: LD_INT 12
6047: PUSH
6048: LD_INT 13
6050: PUSH
6051: LD_INT 14
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: LD_INT 4
6065: PUSH
6066: LD_INT 5
6068: PUSH
6069: LD_INT 21
6071: PUSH
6072: LD_INT 23
6074: PUSH
6075: LD_INT 22
6077: PUSH
6078: LD_INT 24
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: ST_TO_ADDR
6096: GO 6157
6098: LD_INT 3
6100: DOUBLE
6101: EQUAL
6102: IFTRUE 6106
6104: GO 6156
6106: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6107: LD_ADDR_VAR 0 3
6111: PUSH
6112: LD_INT 13
6114: PUSH
6115: LD_INT 14
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 24
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
6154: GO 6157
6156: POP
// result := ( chassis in result ) ;
6157: LD_ADDR_VAR 0 3
6161: PUSH
6162: LD_VAR 0 1
6166: PUSH
6167: LD_VAR 0 3
6171: IN
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 3
6177: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6178: LD_INT 0
6180: PPUSH
// if not chassis or not weapon then
6181: LD_VAR 0 1
6185: NOT
6186: PUSH
6187: LD_VAR 0 2
6191: NOT
6192: OR
6193: IFFALSE 6197
// exit ;
6195: GO 7257
// case weapon of us_machine_gun :
6197: LD_VAR 0 2
6201: PUSH
6202: LD_INT 2
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6240
6210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_INT 1
6218: PUSH
6219: LD_INT 2
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 4
6227: PUSH
6228: LD_INT 5
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: ST_TO_ADDR
6238: GO 7241
6240: LD_INT 3
6242: DOUBLE
6243: EQUAL
6244: IFTRUE 6248
6246: GO 6278
6248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6249: LD_ADDR_VAR 0 3
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: ST_TO_ADDR
6276: GO 7241
6278: LD_INT 11
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6316
6286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: LD_INT 2
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: ST_TO_ADDR
6314: GO 7241
6316: LD_INT 4
6318: DOUBLE
6319: EQUAL
6320: IFTRUE 6324
6322: GO 6350
6324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 4
6338: PUSH
6339: LD_INT 5
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: ST_TO_ADDR
6348: GO 7241
6350: LD_INT 5
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6384
6358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6359: LD_ADDR_VAR 0 3
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: LD_INT 4
6372: PUSH
6373: LD_INT 5
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: ST_TO_ADDR
6382: GO 7241
6384: LD_INT 9
6386: DOUBLE
6387: EQUAL
6388: IFTRUE 6392
6390: GO 6418
6392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 5
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: ST_TO_ADDR
6416: GO 7241
6418: LD_INT 7
6420: DOUBLE
6421: EQUAL
6422: IFTRUE 6426
6424: GO 6452
6426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6427: LD_ADDR_VAR 0 3
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 4
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
6450: GO 7241
6452: LD_INT 12
6454: DOUBLE
6455: EQUAL
6456: IFTRUE 6460
6458: GO 6486
6460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6461: LD_ADDR_VAR 0 3
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 3
6471: PUSH
6472: LD_INT 4
6474: PUSH
6475: LD_INT 5
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7241
6486: LD_INT 13
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6520
6494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 4
6508: PUSH
6509: LD_INT 5
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7241
6520: LD_INT 14
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6546
6528: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 4
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 7241
6546: LD_INT 6
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6572
6554: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: ST_TO_ADDR
6570: GO 7241
6572: LD_INT 10
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6598
6580: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: LD_INT 4
6588: PUSH
6589: LD_INT 5
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: ST_TO_ADDR
6596: GO 7241
6598: LD_INT 22
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6632
6606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: LD_INT 11
6614: PUSH
6615: LD_INT 12
6617: PUSH
6618: LD_INT 13
6620: PUSH
6621: LD_INT 14
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7241
6632: LD_INT 23
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6666
6640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 13
6654: PUSH
6655: LD_INT 14
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: ST_TO_ADDR
6664: GO 7241
6666: LD_INT 24
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6674
6672: GO 6700
6674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 11
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 13
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 7241
6700: LD_INT 30
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6734
6708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 13
6722: PUSH
6723: LD_INT 14
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 7241
6734: LD_INT 25
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6760
6742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7241
6760: LD_INT 27
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6786
6768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 7241
6786: LD_INT 92
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6794
6792: GO 6820
6794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_INT 11
6802: PUSH
6803: LD_INT 12
6805: PUSH
6806: LD_INT 13
6808: PUSH
6809: LD_INT 14
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7241
6820: LD_INT 28
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6846
6828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6829: LD_ADDR_VAR 0 3
6833: PUSH
6834: LD_INT 13
6836: PUSH
6837: LD_INT 14
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7241
6846: LD_INT 29
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6872
6854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 13
6862: PUSH
6863: LD_INT 14
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7241
6872: LD_INT 31
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6898
6880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 13
6888: PUSH
6889: LD_INT 14
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7241
6898: LD_INT 26
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6924
6906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 13
6914: PUSH
6915: LD_INT 14
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 7241
6924: LD_INT 42
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6958
6932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_INT 23
6946: PUSH
6947: LD_INT 24
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7241
6958: LD_INT 43
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6992
6966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 22
6977: PUSH
6978: LD_INT 23
6980: PUSH
6981: LD_INT 24
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: ST_TO_ADDR
6990: GO 7241
6992: LD_INT 44
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7000
6998: GO 7026
7000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7001: LD_ADDR_VAR 0 3
7005: PUSH
7006: LD_INT 21
7008: PUSH
7009: LD_INT 22
7011: PUSH
7012: LD_INT 23
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: ST_TO_ADDR
7024: GO 7241
7026: LD_INT 45
7028: DOUBLE
7029: EQUAL
7030: IFTRUE 7034
7032: GO 7060
7034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_INT 21
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 23
7048: PUSH
7049: LD_INT 24
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: ST_TO_ADDR
7058: GO 7241
7060: LD_INT 49
7062: DOUBLE
7063: EQUAL
7064: IFTRUE 7068
7066: GO 7094
7068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7069: LD_ADDR_VAR 0 3
7073: PUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 23
7082: PUSH
7083: LD_INT 24
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7241
7094: LD_INT 51
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7128
7102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 22
7113: PUSH
7114: LD_INT 23
7116: PUSH
7117: LD_INT 24
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7241
7128: LD_INT 52
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7162
7136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 21
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_INT 23
7150: PUSH
7151: LD_INT 24
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: ST_TO_ADDR
7160: GO 7241
7162: LD_INT 53
7164: DOUBLE
7165: EQUAL
7166: IFTRUE 7170
7168: GO 7188
7170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7171: LD_ADDR_VAR 0 3
7175: PUSH
7176: LD_INT 23
7178: PUSH
7179: LD_INT 24
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 7241
7188: LD_INT 46
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7214
7196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 23
7204: PUSH
7205: LD_INT 24
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 7241
7214: LD_INT 47
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7240
7222: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 23
7230: PUSH
7231: LD_INT 24
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 7241
7240: POP
// result := ( chassis in result ) ;
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_VAR 0 1
7250: PUSH
7251: LD_VAR 0 3
7255: IN
7256: ST_TO_ADDR
// end ;
7257: LD_VAR 0 3
7261: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7262: LD_INT 0
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
// result := array ;
7271: LD_ADDR_VAR 0 5
7275: PUSH
7276: LD_VAR 0 1
7280: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7281: LD_VAR 0 1
7285: NOT
7286: PUSH
7287: LD_VAR 0 2
7291: NOT
7292: OR
7293: PUSH
7294: LD_VAR 0 3
7298: NOT
7299: OR
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_VAR 0 1
7310: GREATER
7311: OR
7312: PUSH
7313: LD_VAR 0 3
7317: PUSH
7318: LD_VAR 0 1
7322: GREATER
7323: OR
7324: IFFALSE 7328
// exit ;
7326: GO 7624
// if direction then
7328: LD_VAR 0 4
7332: IFFALSE 7396
// begin d := 1 ;
7334: LD_ADDR_VAR 0 9
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if i_from > i_to then
7342: LD_VAR 0 2
7346: PUSH
7347: LD_VAR 0 3
7351: GREATER
7352: IFFALSE 7378
// length := ( array - i_from ) + i_to else
7354: LD_ADDR_VAR 0 11
7358: PUSH
7359: LD_VAR 0 1
7363: PUSH
7364: LD_VAR 0 2
7368: MINUS
7369: PUSH
7370: LD_VAR 0 3
7374: PLUS
7375: ST_TO_ADDR
7376: GO 7394
// length := i_to - i_from ;
7378: LD_ADDR_VAR 0 11
7382: PUSH
7383: LD_VAR 0 3
7387: PUSH
7388: LD_VAR 0 2
7392: MINUS
7393: ST_TO_ADDR
// end else
7394: GO 7457
// begin d := - 1 ;
7396: LD_ADDR_VAR 0 9
7400: PUSH
7401: LD_INT 1
7403: NEG
7404: ST_TO_ADDR
// if i_from > i_to then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_VAR 0 3
7414: GREATER
7415: IFFALSE 7435
// length := i_from - i_to else
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 2
7426: PUSH
7427: LD_VAR 0 3
7431: MINUS
7432: ST_TO_ADDR
7433: GO 7457
// length := ( array - i_to ) + i_from ;
7435: LD_ADDR_VAR 0 11
7439: PUSH
7440: LD_VAR 0 1
7444: PUSH
7445: LD_VAR 0 3
7449: MINUS
7450: PUSH
7451: LD_VAR 0 2
7455: PLUS
7456: ST_TO_ADDR
// end ; if not length then
7457: LD_VAR 0 11
7461: NOT
7462: IFFALSE 7466
// exit ;
7464: GO 7624
// tmp := array ;
7466: LD_ADDR_VAR 0 10
7470: PUSH
7471: LD_VAR 0 1
7475: ST_TO_ADDR
// for i = 1 to length do
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: DOUBLE
7482: LD_INT 1
7484: DEC
7485: ST_TO_ADDR
7486: LD_VAR 0 11
7490: PUSH
7491: FOR_TO
7492: IFFALSE 7612
// begin for j = 1 to array do
7494: LD_ADDR_VAR 0 7
7498: PUSH
7499: DOUBLE
7500: LD_INT 1
7502: DEC
7503: ST_TO_ADDR
7504: LD_VAR 0 1
7508: PUSH
7509: FOR_TO
7510: IFFALSE 7598
// begin k := j + d ;
7512: LD_ADDR_VAR 0 8
7516: PUSH
7517: LD_VAR 0 7
7521: PUSH
7522: LD_VAR 0 9
7526: PLUS
7527: ST_TO_ADDR
// if k > array then
7528: LD_VAR 0 8
7532: PUSH
7533: LD_VAR 0 1
7537: GREATER
7538: IFFALSE 7548
// k := 1 ;
7540: LD_ADDR_VAR 0 8
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// if not k then
7548: LD_VAR 0 8
7552: NOT
7553: IFFALSE 7565
// k := array ;
7555: LD_ADDR_VAR 0 8
7559: PUSH
7560: LD_VAR 0 1
7564: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7565: LD_ADDR_VAR 0 10
7569: PUSH
7570: LD_VAR 0 10
7574: PPUSH
7575: LD_VAR 0 8
7579: PPUSH
7580: LD_VAR 0 1
7584: PUSH
7585: LD_VAR 0 7
7589: ARRAY
7590: PPUSH
7591: CALL_OW 1
7595: ST_TO_ADDR
// end ;
7596: GO 7509
7598: POP
7599: POP
// array := tmp ;
7600: LD_ADDR_VAR 0 1
7604: PUSH
7605: LD_VAR 0 10
7609: ST_TO_ADDR
// end ;
7610: GO 7491
7612: POP
7613: POP
// result := array ;
7614: LD_ADDR_VAR 0 5
7618: PUSH
7619: LD_VAR 0 1
7623: ST_TO_ADDR
// end ;
7624: LD_VAR 0 5
7628: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
// result := 0 ;
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 0
7640: ST_TO_ADDR
// if not array or not value in array then
7641: LD_VAR 0 1
7645: NOT
7646: PUSH
7647: LD_VAR 0 2
7651: PUSH
7652: LD_VAR 0 1
7656: IN
7657: NOT
7658: OR
7659: IFFALSE 7663
// exit ;
7661: GO 7717
// for i = 1 to array do
7663: LD_ADDR_VAR 0 4
7667: PUSH
7668: DOUBLE
7669: LD_INT 1
7671: DEC
7672: ST_TO_ADDR
7673: LD_VAR 0 1
7677: PUSH
7678: FOR_TO
7679: IFFALSE 7715
// if value = array [ i ] then
7681: LD_VAR 0 2
7685: PUSH
7686: LD_VAR 0 1
7690: PUSH
7691: LD_VAR 0 4
7695: ARRAY
7696: EQUAL
7697: IFFALSE 7713
// begin result := i ;
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_VAR 0 4
7708: ST_TO_ADDR
// exit ;
7709: POP
7710: POP
7711: GO 7717
// end ;
7713: GO 7678
7715: POP
7716: POP
// end ;
7717: LD_VAR 0 3
7721: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7722: LD_INT 0
7724: PPUSH
// vc_chassis := chassis ;
7725: LD_ADDR_OWVAR 37
7729: PUSH
7730: LD_VAR 0 1
7734: ST_TO_ADDR
// vc_engine := engine ;
7735: LD_ADDR_OWVAR 39
7739: PUSH
7740: LD_VAR 0 2
7744: ST_TO_ADDR
// vc_control := control ;
7745: LD_ADDR_OWVAR 38
7749: PUSH
7750: LD_VAR 0 3
7754: ST_TO_ADDR
// vc_weapon := weapon ;
7755: LD_ADDR_OWVAR 40
7759: PUSH
7760: LD_VAR 0 4
7764: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7765: LD_ADDR_OWVAR 41
7769: PUSH
7770: LD_VAR 0 5
7774: ST_TO_ADDR
// end ;
7775: LD_VAR 0 6
7779: RET
// export function WantPlant ( unit ) ; var task ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
// result := false ;
7784: LD_ADDR_VAR 0 2
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 437
7806: ST_TO_ADDR
// if task then
7807: LD_VAR 0 3
7811: IFFALSE 7839
// if task [ 1 ] [ 1 ] = p then
7813: LD_VAR 0 3
7817: PUSH
7818: LD_INT 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PUSH
7826: LD_STRING p
7828: EQUAL
7829: IFFALSE 7839
// result := true ;
7831: LD_ADDR_VAR 0 2
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ;
7839: LD_VAR 0 2
7843: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
// if pos < 1 then
7850: LD_VAR 0 2
7854: PUSH
7855: LD_INT 1
7857: LESS
7858: IFFALSE 7862
// exit ;
7860: GO 8165
// if pos = 1 then
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 1
7869: EQUAL
7870: IFFALSE 7903
// result := Replace ( arr , pos [ 1 ] , value ) else
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_VAR 0 2
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: LD_VAR 0 3
7895: PPUSH
7896: CALL_OW 1
7900: ST_TO_ADDR
7901: GO 8165
// begin tmp := arr ;
7903: LD_ADDR_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: ST_TO_ADDR
// s_arr := [ tmp ] ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_VAR 0 6
7922: PUSH
7923: EMPTY
7924: LIST
7925: ST_TO_ADDR
// for i = 1 to pos - 1 do
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: DOUBLE
7932: LD_INT 1
7934: DEC
7935: ST_TO_ADDR
7936: LD_VAR 0 2
7940: PUSH
7941: LD_INT 1
7943: MINUS
7944: PUSH
7945: FOR_TO
7946: IFFALSE 7991
// begin tmp := tmp [ pos [ i ] ] ;
7948: LD_ADDR_VAR 0 6
7952: PUSH
7953: LD_VAR 0 6
7957: PUSH
7958: LD_VAR 0 2
7962: PUSH
7963: LD_VAR 0 5
7967: ARRAY
7968: ARRAY
7969: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7970: LD_ADDR_VAR 0 7
7974: PUSH
7975: LD_VAR 0 7
7979: PUSH
7980: LD_VAR 0 6
7984: PUSH
7985: EMPTY
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// end ;
7989: GO 7945
7991: POP
7992: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 6
8002: PPUSH
8003: LD_VAR 0 2
8007: PUSH
8008: LD_VAR 0 2
8012: ARRAY
8013: PPUSH
8014: LD_VAR 0 3
8018: PPUSH
8019: CALL_OW 1
8023: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8024: LD_ADDR_VAR 0 7
8028: PUSH
8029: LD_VAR 0 7
8033: PPUSH
8034: LD_VAR 0 7
8038: PPUSH
8039: LD_VAR 0 6
8043: PPUSH
8044: CALL_OW 1
8048: ST_TO_ADDR
// for i = s_arr downto 2 do
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: DOUBLE
8055: LD_VAR 0 7
8059: INC
8060: ST_TO_ADDR
8061: LD_INT 2
8063: PUSH
8064: FOR_DOWNTO
8065: IFFALSE 8149
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_VAR 0 5
8081: PUSH
8082: LD_INT 1
8084: MINUS
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_VAR 0 5
8096: PUSH
8097: LD_INT 1
8099: MINUS
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 7
8106: PUSH
8107: LD_VAR 0 5
8111: ARRAY
8112: PPUSH
8113: CALL_OW 1
8117: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_VAR 0 7
8127: PPUSH
8128: LD_VAR 0 5
8132: PUSH
8133: LD_INT 1
8135: MINUS
8136: PPUSH
8137: LD_VAR 0 6
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
// end ;
8147: GO 8064
8149: POP
8150: POP
// result := s_arr [ 1 ] ;
8151: LD_ADDR_VAR 0 4
8155: PUSH
8156: LD_VAR 0 7
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: ST_TO_ADDR
// end ; end ;
8165: LD_VAR 0 4
8169: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// if not list then
8174: LD_VAR 0 1
8178: NOT
8179: IFFALSE 8183
// exit ;
8181: GO 8274
// i := list [ pos1 ] ;
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: LD_VAR 0 1
8192: PUSH
8193: LD_VAR 0 2
8197: ARRAY
8198: ST_TO_ADDR
// if not i then
8199: LD_VAR 0 5
8203: NOT
8204: IFFALSE 8208
// exit ;
8206: GO 8274
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_VAR 0 3
8232: ARRAY
8233: PPUSH
8234: CALL_OW 1
8238: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_VAR 0 1
8248: PPUSH
8249: LD_VAR 0 3
8253: PPUSH
8254: LD_VAR 0 5
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// result := list ;
8264: LD_ADDR_VAR 0 4
8268: PUSH
8269: LD_VAR 0 1
8273: ST_TO_ADDR
// end ;
8274: LD_VAR 0 4
8278: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8279: LD_INT 0
8281: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_VAR 0 1
8291: PPUSH
8292: CALL_OW 250
8296: PPUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 251
8306: PPUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 4
8321: PPUSH
8322: CALL 8700 0 5
8326: ST_TO_ADDR
// end ;
8327: LD_VAR 0 5
8331: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
// if not list or not unit then
8338: LD_VAR 0 2
8342: NOT
8343: PUSH
8344: LD_VAR 0 1
8348: NOT
8349: OR
8350: IFFALSE 8354
// exit ;
8352: GO 8695
// result := [ ] ;
8354: LD_ADDR_VAR 0 5
8358: PUSH
8359: EMPTY
8360: ST_TO_ADDR
// for i in list do
8361: LD_ADDR_VAR 0 6
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8590
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8374: LD_ADDR_VAR 0 8
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 6
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PPUSH
8393: LD_VAR 0 6
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if not Count ( result ) then
8407: LD_VAR 0 5
8411: PPUSH
8412: CALL 4984 0 1
8416: NOT
8417: IFFALSE 8450
// begin result := Join ( result , [ i , tmp ] ) ;
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: LD_VAR 0 5
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_VAR 0 8
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PPUSH
8443: CALL 40573 0 2
8447: ST_TO_ADDR
// continue ;
8448: GO 8371
// end ; if result [ result ] [ 2 ] <= tmp then
8450: LD_VAR 0 5
8454: PUSH
8455: LD_VAR 0 5
8459: ARRAY
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PUSH
8465: LD_VAR 0 8
8469: LESSEQUAL
8470: IFFALSE 8503
// result := Join ( result , [ i , tmp ] ) else
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_VAR 0 6
8486: PUSH
8487: LD_VAR 0 8
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL 40573 0 2
8500: ST_TO_ADDR
8501: GO 8588
// begin for j := 1 to Count ( result ) do
8503: LD_ADDR_VAR 0 7
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_VAR 0 5
8517: PPUSH
8518: CALL 4984 0 1
8522: PUSH
8523: FOR_TO
8524: IFFALSE 8586
// begin if tmp < result [ j ] [ 2 ] then
8526: LD_VAR 0 8
8530: PUSH
8531: LD_VAR 0 5
8535: PUSH
8536: LD_VAR 0 7
8540: ARRAY
8541: PUSH
8542: LD_INT 2
8544: ARRAY
8545: LESS
8546: IFFALSE 8584
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8548: LD_ADDR_VAR 0 5
8552: PUSH
8553: LD_VAR 0 5
8557: PPUSH
8558: LD_VAR 0 7
8562: PPUSH
8563: LD_VAR 0 6
8567: PUSH
8568: LD_VAR 0 8
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PPUSH
8577: CALL_OW 2
8581: ST_TO_ADDR
// break ;
8582: GO 8586
// end ; end ;
8584: GO 8523
8586: POP
8587: POP
// end ; end ;
8588: GO 8371
8590: POP
8591: POP
// if result and not asc then
8592: LD_VAR 0 5
8596: PUSH
8597: LD_VAR 0 3
8601: NOT
8602: AND
8603: IFFALSE 8620
// result := ReverseArray ( result ) ;
8605: LD_ADDR_VAR 0 5
8609: PUSH
8610: LD_VAR 0 5
8614: PPUSH
8615: CALL 35860 0 1
8619: ST_TO_ADDR
// tmp := [ ] ;
8620: LD_ADDR_VAR 0 8
8624: PUSH
8625: EMPTY
8626: ST_TO_ADDR
// if mode then
8627: LD_VAR 0 4
8631: IFFALSE 8695
// begin for i := 1 to result do
8633: LD_ADDR_VAR 0 6
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_VAR 0 5
8647: PUSH
8648: FOR_TO
8649: IFFALSE 8683
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8651: LD_ADDR_VAR 0 8
8655: PUSH
8656: LD_VAR 0 8
8660: PPUSH
8661: LD_VAR 0 5
8665: PUSH
8666: LD_VAR 0 6
8670: ARRAY
8671: PUSH
8672: LD_INT 1
8674: ARRAY
8675: PPUSH
8676: CALL 40573 0 2
8680: ST_TO_ADDR
8681: GO 8648
8683: POP
8684: POP
// result := tmp ;
8685: LD_ADDR_VAR 0 5
8689: PUSH
8690: LD_VAR 0 8
8694: ST_TO_ADDR
// end ; end ;
8695: LD_VAR 0 5
8699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8700: LD_INT 0
8702: PPUSH
8703: PPUSH
8704: PPUSH
8705: PPUSH
// if not list then
8706: LD_VAR 0 3
8710: NOT
8711: IFFALSE 8715
// exit ;
8713: GO 9103
// result := [ ] ;
8715: LD_ADDR_VAR 0 6
8719: PUSH
8720: EMPTY
8721: ST_TO_ADDR
// for i in list do
8722: LD_ADDR_VAR 0 7
8726: PUSH
8727: LD_VAR 0 3
8731: PUSH
8732: FOR_IN
8733: IFFALSE 8935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_VAR 0 7
8744: PPUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_VAR 0 2
8754: PPUSH
8755: CALL_OW 297
8759: ST_TO_ADDR
// if not result then
8760: LD_VAR 0 6
8764: NOT
8765: IFFALSE 8791
// result := [ [ i , tmp ] ] else
8767: LD_ADDR_VAR 0 6
8771: PUSH
8772: LD_VAR 0 7
8776: PUSH
8777: LD_VAR 0 9
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: ST_TO_ADDR
8789: GO 8933
// begin if result [ result ] [ 2 ] < tmp then
8791: LD_VAR 0 6
8795: PUSH
8796: LD_VAR 0 6
8800: ARRAY
8801: PUSH
8802: LD_INT 2
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 9
8810: LESS
8811: IFFALSE 8853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8813: LD_ADDR_VAR 0 6
8817: PUSH
8818: LD_VAR 0 6
8822: PPUSH
8823: LD_VAR 0 6
8827: PUSH
8828: LD_INT 1
8830: PLUS
8831: PPUSH
8832: LD_VAR 0 7
8836: PUSH
8837: LD_VAR 0 9
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 2
8850: ST_TO_ADDR
8851: GO 8933
// for j = 1 to result do
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_VAR 0 6
8867: PUSH
8868: FOR_TO
8869: IFFALSE 8931
// begin if tmp < result [ j ] [ 2 ] then
8871: LD_VAR 0 9
8875: PUSH
8876: LD_VAR 0 6
8880: PUSH
8881: LD_VAR 0 8
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: LESS
8891: IFFALSE 8929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: LD_VAR 0 6
8902: PPUSH
8903: LD_VAR 0 8
8907: PPUSH
8908: LD_VAR 0 7
8912: PUSH
8913: LD_VAR 0 9
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 2
8926: ST_TO_ADDR
// break ;
8927: GO 8931
// end ; end ;
8929: GO 8868
8931: POP
8932: POP
// end ; end ;
8933: GO 8732
8935: POP
8936: POP
// if result and not asc then
8937: LD_VAR 0 6
8941: PUSH
8942: LD_VAR 0 4
8946: NOT
8947: AND
8948: IFFALSE 9023
// begin tmp := result ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_VAR 0 6
8959: ST_TO_ADDR
// for i = tmp downto 1 do
8960: LD_ADDR_VAR 0 7
8964: PUSH
8965: DOUBLE
8966: LD_VAR 0 9
8970: INC
8971: ST_TO_ADDR
8972: LD_INT 1
8974: PUSH
8975: FOR_DOWNTO
8976: IFFALSE 9021
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8978: LD_ADDR_VAR 0 6
8982: PUSH
8983: LD_VAR 0 6
8987: PPUSH
8988: LD_VAR 0 9
8992: PUSH
8993: LD_VAR 0 7
8997: MINUS
8998: PUSH
8999: LD_INT 1
9001: PLUS
9002: PPUSH
9003: LD_VAR 0 9
9007: PUSH
9008: LD_VAR 0 7
9012: ARRAY
9013: PPUSH
9014: CALL_OW 1
9018: ST_TO_ADDR
9019: GO 8975
9021: POP
9022: POP
// end ; tmp := [ ] ;
9023: LD_ADDR_VAR 0 9
9027: PUSH
9028: EMPTY
9029: ST_TO_ADDR
// if mode then
9030: LD_VAR 0 5
9034: IFFALSE 9103
// begin for i = 1 to result do
9036: LD_ADDR_VAR 0 7
9040: PUSH
9041: DOUBLE
9042: LD_INT 1
9044: DEC
9045: ST_TO_ADDR
9046: LD_VAR 0 6
9050: PUSH
9051: FOR_TO
9052: IFFALSE 9091
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9054: LD_ADDR_VAR 0 9
9058: PUSH
9059: LD_VAR 0 9
9063: PPUSH
9064: LD_VAR 0 7
9068: PPUSH
9069: LD_VAR 0 6
9073: PUSH
9074: LD_VAR 0 7
9078: ARRAY
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
9089: GO 9051
9091: POP
9092: POP
// result := tmp ;
9093: LD_ADDR_VAR 0 6
9097: PUSH
9098: LD_VAR 0 9
9102: ST_TO_ADDR
// end ; end ;
9103: LD_VAR 0 6
9107: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9108: LD_INT 0
9110: PPUSH
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9116: LD_ADDR_VAR 0 5
9120: PUSH
9121: LD_INT 0
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: EMPTY
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: ST_TO_ADDR
// if not x or not y then
9138: LD_VAR 0 2
9142: NOT
9143: PUSH
9144: LD_VAR 0 3
9148: NOT
9149: OR
9150: IFFALSE 9154
// exit ;
9152: GO 10804
// if not range then
9154: LD_VAR 0 4
9158: NOT
9159: IFFALSE 9169
// range := 10 ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_INT 10
9168: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9169: LD_ADDR_VAR 0 8
9173: PUSH
9174: LD_INT 81
9176: PUSH
9177: LD_VAR 0 1
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 92
9188: PUSH
9189: LD_VAR 0 2
9193: PUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_VAR 0 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: LD_INT 21
9215: PUSH
9216: LD_INT 3
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: PPUSH
9232: CALL_OW 69
9236: ST_TO_ADDR
// if not tmp then
9237: LD_VAR 0 8
9241: NOT
9242: IFFALSE 9246
// exit ;
9244: GO 10804
// for i in tmp do
9246: LD_ADDR_VAR 0 6
9250: PUSH
9251: LD_VAR 0 8
9255: PUSH
9256: FOR_IN
9257: IFFALSE 10779
// begin points := [ 0 , 0 , 0 ] ;
9259: LD_ADDR_VAR 0 9
9263: PUSH
9264: LD_INT 0
9266: PUSH
9267: LD_INT 0
9269: PUSH
9270: LD_INT 0
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: ST_TO_ADDR
// bpoints := 1 ;
9278: LD_ADDR_VAR 0 10
9282: PUSH
9283: LD_INT 1
9285: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9286: LD_VAR 0 6
9290: PPUSH
9291: CALL_OW 247
9295: PUSH
9296: LD_INT 1
9298: DOUBLE
9299: EQUAL
9300: IFTRUE 9304
9302: GO 9882
9304: POP
// begin if GetClass ( i ) = 1 then
9305: LD_VAR 0 6
9309: PPUSH
9310: CALL_OW 257
9314: PUSH
9315: LD_INT 1
9317: EQUAL
9318: IFFALSE 9339
// points := [ 10 , 5 , 3 ] ;
9320: LD_ADDR_VAR 0 9
9324: PUSH
9325: LD_INT 10
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 3
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9339: LD_VAR 0 6
9343: PPUSH
9344: CALL_OW 257
9348: PUSH
9349: LD_INT 2
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: LD_INT 4
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: IN
9363: IFFALSE 9384
// points := [ 3 , 2 , 1 ] ;
9365: LD_ADDR_VAR 0 9
9369: PUSH
9370: LD_INT 3
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9384: LD_VAR 0 6
9388: PPUSH
9389: CALL_OW 257
9393: PUSH
9394: LD_INT 5
9396: EQUAL
9397: IFFALSE 9418
// points := [ 130 , 5 , 2 ] ;
9399: LD_ADDR_VAR 0 9
9403: PUSH
9404: LD_INT 130
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: LD_INT 2
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 257
9427: PUSH
9428: LD_INT 8
9430: EQUAL
9431: IFFALSE 9452
// points := [ 35 , 35 , 30 ] ;
9433: LD_ADDR_VAR 0 9
9437: PUSH
9438: LD_INT 35
9440: PUSH
9441: LD_INT 35
9443: PUSH
9444: LD_INT 30
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9452: LD_VAR 0 6
9456: PPUSH
9457: CALL_OW 257
9461: PUSH
9462: LD_INT 9
9464: EQUAL
9465: IFFALSE 9486
// points := [ 20 , 55 , 40 ] ;
9467: LD_ADDR_VAR 0 9
9471: PUSH
9472: LD_INT 20
9474: PUSH
9475: LD_INT 55
9477: PUSH
9478: LD_INT 40
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9486: LD_VAR 0 6
9490: PPUSH
9491: CALL_OW 257
9495: PUSH
9496: LD_INT 12
9498: PUSH
9499: LD_INT 16
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: IN
9506: IFFALSE 9527
// points := [ 5 , 3 , 2 ] ;
9508: LD_ADDR_VAR 0 9
9512: PUSH
9513: LD_INT 5
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9527: LD_VAR 0 6
9531: PPUSH
9532: CALL_OW 257
9536: PUSH
9537: LD_INT 17
9539: EQUAL
9540: IFFALSE 9561
// points := [ 100 , 50 , 75 ] ;
9542: LD_ADDR_VAR 0 9
9546: PUSH
9547: LD_INT 100
9549: PUSH
9550: LD_INT 50
9552: PUSH
9553: LD_INT 75
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9561: LD_VAR 0 6
9565: PPUSH
9566: CALL_OW 257
9570: PUSH
9571: LD_INT 15
9573: EQUAL
9574: IFFALSE 9595
// points := [ 10 , 5 , 3 ] ;
9576: LD_ADDR_VAR 0 9
9580: PUSH
9581: LD_INT 10
9583: PUSH
9584: LD_INT 5
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9595: LD_VAR 0 6
9599: PPUSH
9600: CALL_OW 257
9604: PUSH
9605: LD_INT 14
9607: EQUAL
9608: IFFALSE 9629
// points := [ 10 , 0 , 0 ] ;
9610: LD_ADDR_VAR 0 9
9614: PUSH
9615: LD_INT 10
9617: PUSH
9618: LD_INT 0
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9629: LD_VAR 0 6
9633: PPUSH
9634: CALL_OW 257
9638: PUSH
9639: LD_INT 11
9641: EQUAL
9642: IFFALSE 9663
// points := [ 30 , 10 , 5 ] ;
9644: LD_ADDR_VAR 0 9
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 10
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9663: LD_VAR 0 1
9667: PPUSH
9668: LD_INT 5
9670: PPUSH
9671: CALL_OW 321
9675: PUSH
9676: LD_INT 2
9678: EQUAL
9679: IFFALSE 9696
// bpoints := bpoints * 1.8 ;
9681: LD_ADDR_VAR 0 10
9685: PUSH
9686: LD_VAR 0 10
9690: PUSH
9691: LD_REAL  1.80000000000000E+0000
9694: MUL
9695: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9696: LD_VAR 0 6
9700: PPUSH
9701: CALL_OW 257
9705: PUSH
9706: LD_INT 1
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: LD_INT 4
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: IN
9724: PUSH
9725: LD_VAR 0 1
9729: PPUSH
9730: LD_INT 51
9732: PPUSH
9733: CALL_OW 321
9737: PUSH
9738: LD_INT 2
9740: EQUAL
9741: AND
9742: IFFALSE 9759
// bpoints := bpoints * 1.2 ;
9744: LD_ADDR_VAR 0 10
9748: PUSH
9749: LD_VAR 0 10
9753: PUSH
9754: LD_REAL  1.20000000000000E+0000
9757: MUL
9758: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 257
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: LD_INT 7
9774: PUSH
9775: LD_INT 9
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: IN
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 52
9791: PPUSH
9792: CALL_OW 321
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: IFFALSE 9818
// bpoints := bpoints * 1.5 ;
9803: LD_ADDR_VAR 0 10
9807: PUSH
9808: LD_VAR 0 10
9812: PUSH
9813: LD_REAL  1.50000000000000E+0000
9816: MUL
9817: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9818: LD_VAR 0 1
9822: PPUSH
9823: LD_INT 66
9825: PPUSH
9826: CALL_OW 321
9830: PUSH
9831: LD_INT 2
9833: EQUAL
9834: IFFALSE 9851
// bpoints := bpoints * 1.1 ;
9836: LD_ADDR_VAR 0 10
9840: PUSH
9841: LD_VAR 0 10
9845: PUSH
9846: LD_REAL  1.10000000000000E+0000
9849: MUL
9850: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9851: LD_ADDR_VAR 0 10
9855: PUSH
9856: LD_VAR 0 10
9860: PUSH
9861: LD_VAR 0 6
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 259
9873: PUSH
9874: LD_REAL  1.15000000000000E+0000
9877: MUL
9878: MUL
9879: ST_TO_ADDR
// end ; unit_vehicle :
9880: GO 10708
9882: LD_INT 2
9884: DOUBLE
9885: EQUAL
9886: IFTRUE 9890
9888: GO 10696
9890: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 264
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 42
9906: PUSH
9907: LD_INT 24
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: IN
9915: IFFALSE 9936
// points := [ 25 , 5 , 3 ] ;
9917: LD_ADDR_VAR 0 9
9921: PUSH
9922: LD_INT 25
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9936: LD_VAR 0 6
9940: PPUSH
9941: CALL_OW 264
9945: PUSH
9946: LD_INT 4
9948: PUSH
9949: LD_INT 43
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: IN
9960: IFFALSE 9981
// points := [ 40 , 15 , 5 ] ;
9962: LD_ADDR_VAR 0 9
9966: PUSH
9967: LD_INT 40
9969: PUSH
9970: LD_INT 15
9972: PUSH
9973: LD_INT 5
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9981: LD_VAR 0 6
9985: PPUSH
9986: CALL_OW 264
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: LD_INT 23
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: IN
10001: IFFALSE 10022
// points := [ 7 , 25 , 8 ] ;
10003: LD_ADDR_VAR 0 9
10007: PUSH
10008: LD_INT 7
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 8
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 264
10031: PUSH
10032: LD_INT 5
10034: PUSH
10035: LD_INT 27
10037: PUSH
10038: LD_INT 44
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: IN
10046: IFFALSE 10067
// points := [ 14 , 50 , 16 ] ;
10048: LD_ADDR_VAR 0 9
10052: PUSH
10053: LD_INT 14
10055: PUSH
10056: LD_INT 50
10058: PUSH
10059: LD_INT 16
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10067: LD_VAR 0 6
10071: PPUSH
10072: CALL_OW 264
10076: PUSH
10077: LD_INT 6
10079: PUSH
10080: LD_INT 46
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: IN
10087: IFFALSE 10108
// points := [ 32 , 120 , 70 ] ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 32
10096: PUSH
10097: LD_INT 120
10099: PUSH
10100: LD_INT 70
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10108: LD_VAR 0 6
10112: PPUSH
10113: CALL_OW 264
10117: PUSH
10118: LD_INT 7
10120: PUSH
10121: LD_INT 28
10123: PUSH
10124: LD_INT 45
10126: PUSH
10127: LD_INT 92
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: IN
10136: IFFALSE 10157
// points := [ 35 , 20 , 45 ] ;
10138: LD_ADDR_VAR 0 9
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 20
10148: PUSH
10149: LD_INT 45
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 264
10166: PUSH
10167: LD_INT 47
10169: PUSH
10170: EMPTY
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 67 , 45 , 75 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 67
10182: PUSH
10183: LD_INT 45
10185: PUSH
10186: LD_INT 75
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 26
10206: PUSH
10207: EMPTY
10208: LIST
10209: IN
10210: IFFALSE 10231
// points := [ 120 , 30 , 80 ] ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 120
10219: PUSH
10220: LD_INT 30
10222: PUSH
10223: LD_INT 80
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10231: LD_VAR 0 6
10235: PPUSH
10236: CALL_OW 264
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: EMPTY
10245: LIST
10246: IN
10247: IFFALSE 10268
// points := [ 40 , 1 , 1 ] ;
10249: LD_ADDR_VAR 0 9
10253: PUSH
10254: LD_INT 40
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10268: LD_VAR 0 6
10272: PPUSH
10273: CALL_OW 264
10277: PUSH
10278: LD_INT 29
10280: PUSH
10281: EMPTY
10282: LIST
10283: IN
10284: IFFALSE 10305
// points := [ 70 , 200 , 400 ] ;
10286: LD_ADDR_VAR 0 9
10290: PUSH
10291: LD_INT 70
10293: PUSH
10294: LD_INT 200
10296: PUSH
10297: LD_INT 400
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: LIST
10304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10305: LD_VAR 0 6
10309: PPUSH
10310: CALL_OW 264
10314: PUSH
10315: LD_INT 14
10317: PUSH
10318: LD_INT 53
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: IN
10325: IFFALSE 10346
// points := [ 40 , 10 , 20 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 40
10334: PUSH
10335: LD_INT 10
10337: PUSH
10338: LD_INT 20
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 264
10355: PUSH
10356: LD_INT 9
10358: PUSH
10359: EMPTY
10360: LIST
10361: IN
10362: IFFALSE 10383
// points := [ 5 , 70 , 20 ] ;
10364: LD_ADDR_VAR 0 9
10368: PUSH
10369: LD_INT 5
10371: PUSH
10372: LD_INT 70
10374: PUSH
10375: LD_INT 20
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10383: LD_VAR 0 6
10387: PPUSH
10388: CALL_OW 264
10392: PUSH
10393: LD_INT 10
10395: PUSH
10396: EMPTY
10397: LIST
10398: IN
10399: IFFALSE 10420
// points := [ 35 , 110 , 70 ] ;
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_INT 35
10408: PUSH
10409: LD_INT 110
10411: PUSH
10412: LD_INT 70
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10420: LD_VAR 0 6
10424: PPUSH
10425: CALL_OW 265
10429: PUSH
10430: LD_INT 25
10432: EQUAL
10433: IFFALSE 10454
// points := [ 80 , 65 , 100 ] ;
10435: LD_ADDR_VAR 0 9
10439: PUSH
10440: LD_INT 80
10442: PUSH
10443: LD_INT 65
10445: PUSH
10446: LD_INT 100
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10454: LD_VAR 0 6
10458: PPUSH
10459: CALL_OW 263
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10469: LD_ADDR_VAR 0 10
10473: PUSH
10474: LD_VAR 0 10
10478: PUSH
10479: LD_VAR 0 6
10483: PPUSH
10484: CALL_OW 311
10488: PPUSH
10489: LD_INT 3
10491: PPUSH
10492: CALL_OW 259
10496: PUSH
10497: LD_INT 4
10499: MUL
10500: MUL
10501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10502: LD_VAR 0 6
10506: PPUSH
10507: CALL_OW 263
10511: PUSH
10512: LD_INT 2
10514: EQUAL
10515: IFFALSE 10566
// begin j := IsControledBy ( i ) ;
10517: LD_ADDR_VAR 0 7
10521: PUSH
10522: LD_VAR 0 6
10526: PPUSH
10527: CALL_OW 312
10531: ST_TO_ADDR
// if j then
10532: LD_VAR 0 7
10536: IFFALSE 10566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10538: LD_ADDR_VAR 0 10
10542: PUSH
10543: LD_VAR 0 10
10547: PUSH
10548: LD_VAR 0 7
10552: PPUSH
10553: LD_INT 3
10555: PPUSH
10556: CALL_OW 259
10560: PUSH
10561: LD_INT 3
10563: MUL
10564: MUL
10565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10566: LD_VAR 0 6
10570: PPUSH
10571: CALL_OW 264
10575: PUSH
10576: LD_INT 5
10578: PUSH
10579: LD_INT 6
10581: PUSH
10582: LD_INT 46
10584: PUSH
10585: LD_INT 44
10587: PUSH
10588: LD_INT 47
10590: PUSH
10591: LD_INT 45
10593: PUSH
10594: LD_INT 28
10596: PUSH
10597: LD_INT 7
10599: PUSH
10600: LD_INT 27
10602: PUSH
10603: LD_INT 29
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: IN
10618: PUSH
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 52
10626: PPUSH
10627: CALL_OW 321
10631: PUSH
10632: LD_INT 2
10634: EQUAL
10635: AND
10636: IFFALSE 10653
// bpoints := bpoints * 1.2 ;
10638: LD_ADDR_VAR 0 10
10642: PUSH
10643: LD_VAR 0 10
10647: PUSH
10648: LD_REAL  1.20000000000000E+0000
10651: MUL
10652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10653: LD_VAR 0 6
10657: PPUSH
10658: CALL_OW 264
10662: PUSH
10663: LD_INT 6
10665: PUSH
10666: LD_INT 46
10668: PUSH
10669: LD_INT 47
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: IN
10677: IFFALSE 10694
// bpoints := bpoints * 1.2 ;
10679: LD_ADDR_VAR 0 10
10683: PUSH
10684: LD_VAR 0 10
10688: PUSH
10689: LD_REAL  1.20000000000000E+0000
10692: MUL
10693: ST_TO_ADDR
// end ; unit_building :
10694: GO 10708
10696: LD_INT 3
10698: DOUBLE
10699: EQUAL
10700: IFTRUE 10704
10702: GO 10707
10704: POP
// ; end ;
10705: GO 10708
10707: POP
// for j = 1 to 3 do
10708: LD_ADDR_VAR 0 7
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_INT 3
10720: PUSH
10721: FOR_TO
10722: IFFALSE 10775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_VAR 0 5
10733: PPUSH
10734: LD_VAR 0 7
10738: PPUSH
10739: LD_VAR 0 5
10743: PUSH
10744: LD_VAR 0 7
10748: ARRAY
10749: PUSH
10750: LD_VAR 0 9
10754: PUSH
10755: LD_VAR 0 7
10759: ARRAY
10760: PUSH
10761: LD_VAR 0 10
10765: MUL
10766: PLUS
10767: PPUSH
10768: CALL_OW 1
10772: ST_TO_ADDR
10773: GO 10721
10775: POP
10776: POP
// end ;
10777: GO 9256
10779: POP
10780: POP
// result := Replace ( result , 4 , tmp ) ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_VAR 0 5
10790: PPUSH
10791: LD_INT 4
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: CALL_OW 1
10803: ST_TO_ADDR
// end ;
10804: LD_VAR 0 5
10808: RET
// export function DangerAtRange ( unit , range ) ; begin
10809: LD_INT 0
10811: PPUSH
// if not unit then
10812: LD_VAR 0 1
10816: NOT
10817: IFFALSE 10821
// exit ;
10819: GO 10866
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 255
10835: PPUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL_OW 250
10845: PPUSH
10846: LD_VAR 0 1
10850: PPUSH
10851: CALL_OW 251
10855: PPUSH
10856: LD_VAR 0 2
10860: PPUSH
10861: CALL 9108 0 4
10865: ST_TO_ADDR
// end ;
10866: LD_VAR 0 3
10870: RET
// export function DangerInArea ( side , area ) ; begin
10871: LD_INT 0
10873: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10874: LD_ADDR_VAR 0 3
10878: PUSH
10879: LD_VAR 0 2
10883: PPUSH
10884: LD_INT 81
10886: PUSH
10887: LD_VAR 0 1
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 70
10900: ST_TO_ADDR
// end ;
10901: LD_VAR 0 3
10905: RET
// export function IsExtension ( b ) ; begin
10906: LD_INT 0
10908: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 1
10918: PUSH
10919: LD_INT 23
10921: PUSH
10922: LD_INT 20
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 17
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 19
10939: PUSH
10940: LD_INT 16
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 18
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: IN
10961: ST_TO_ADDR
// end ;
10962: LD_VAR 0 2
10966: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
10971: PPUSH
// result := [ ] ;
10972: LD_ADDR_VAR 0 4
10976: PUSH
10977: EMPTY
10978: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10979: LD_ADDR_VAR 0 5
10983: PUSH
10984: LD_VAR 0 2
10988: PPUSH
10989: LD_INT 21
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 70
11003: ST_TO_ADDR
// if not tmp then
11004: LD_VAR 0 5
11008: NOT
11009: IFFALSE 11013
// exit ;
11011: GO 11077
// if checkLink then
11013: LD_VAR 0 3
11017: IFFALSE 11067
// begin for i in tmp do
11019: LD_ADDR_VAR 0 6
11023: PUSH
11024: LD_VAR 0 5
11028: PUSH
11029: FOR_IN
11030: IFFALSE 11065
// if GetBase ( i ) <> base then
11032: LD_VAR 0 6
11036: PPUSH
11037: CALL_OW 274
11041: PUSH
11042: LD_VAR 0 1
11046: NONEQUAL
11047: IFFALSE 11063
// ComLinkToBase ( base , i ) ;
11049: LD_VAR 0 1
11053: PPUSH
11054: LD_VAR 0 6
11058: PPUSH
11059: CALL_OW 169
11063: GO 11029
11065: POP
11066: POP
// end ; result := tmp ;
11067: LD_ADDR_VAR 0 4
11071: PUSH
11072: LD_VAR 0 5
11076: ST_TO_ADDR
// end ;
11077: LD_VAR 0 4
11081: RET
// export function ComComplete ( units , b ) ; var i ; begin
11082: LD_INT 0
11084: PPUSH
11085: PPUSH
// if not units then
11086: LD_VAR 0 1
11090: NOT
11091: IFFALSE 11095
// exit ;
11093: GO 11185
// for i in units do
11095: LD_ADDR_VAR 0 4
11099: PUSH
11100: LD_VAR 0 1
11104: PUSH
11105: FOR_IN
11106: IFFALSE 11183
// if BuildingStatus ( b ) = bs_build then
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 461
11117: PUSH
11118: LD_INT 1
11120: EQUAL
11121: IFFALSE 11181
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11123: LD_VAR 0 4
11127: PPUSH
11128: LD_STRING h
11130: PUSH
11131: LD_VAR 0 2
11135: PPUSH
11136: CALL_OW 250
11140: PUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: CALL_OW 251
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_INT 0
11158: PUSH
11159: LD_INT 0
11161: PUSH
11162: LD_INT 0
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PPUSH
11177: CALL_OW 446
11181: GO 11105
11183: POP
11184: POP
// end ;
11185: LD_VAR 0 3
11189: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
11194: PPUSH
11195: PPUSH
11196: PPUSH
11197: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11198: LD_VAR 0 1
11202: NOT
11203: PUSH
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 263
11213: PUSH
11214: LD_INT 2
11216: NONEQUAL
11217: OR
11218: IFFALSE 11222
// exit ;
11220: GO 11538
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11222: LD_ADDR_VAR 0 6
11226: PUSH
11227: LD_INT 22
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 255
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 30
11249: PUSH
11250: LD_INT 36
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 34
11259: PUSH
11260: LD_INT 31
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// if not tmp then
11281: LD_VAR 0 6
11285: NOT
11286: IFFALSE 11290
// exit ;
11288: GO 11538
// result := [ ] ;
11290: LD_ADDR_VAR 0 2
11294: PUSH
11295: EMPTY
11296: ST_TO_ADDR
// for i in tmp do
11297: LD_ADDR_VAR 0 3
11301: PUSH
11302: LD_VAR 0 6
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11379
// begin t := UnitsInside ( i ) ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: CALL_OW 313
11324: ST_TO_ADDR
// if t then
11325: LD_VAR 0 4
11329: IFFALSE 11377
// for j in t do
11331: LD_ADDR_VAR 0 7
11335: PUSH
11336: LD_VAR 0 4
11340: PUSH
11341: FOR_IN
11342: IFFALSE 11375
// result := Replace ( result , result + 1 , j ) ;
11344: LD_ADDR_VAR 0 2
11348: PUSH
11349: LD_VAR 0 2
11353: PPUSH
11354: LD_VAR 0 2
11358: PUSH
11359: LD_INT 1
11361: PLUS
11362: PPUSH
11363: LD_VAR 0 7
11367: PPUSH
11368: CALL_OW 1
11372: ST_TO_ADDR
11373: GO 11341
11375: POP
11376: POP
// end ;
11377: GO 11307
11379: POP
11380: POP
// if not result then
11381: LD_VAR 0 2
11385: NOT
11386: IFFALSE 11390
// exit ;
11388: GO 11538
// mech := result [ 1 ] ;
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: LD_VAR 0 2
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: ST_TO_ADDR
// if result > 1 then
11404: LD_VAR 0 2
11408: PUSH
11409: LD_INT 1
11411: GREATER
11412: IFFALSE 11524
// begin for i = 2 to result do
11414: LD_ADDR_VAR 0 3
11418: PUSH
11419: DOUBLE
11420: LD_INT 2
11422: DEC
11423: ST_TO_ADDR
11424: LD_VAR 0 2
11428: PUSH
11429: FOR_TO
11430: IFFALSE 11522
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11432: LD_ADDR_VAR 0 4
11436: PUSH
11437: LD_VAR 0 2
11441: PUSH
11442: LD_VAR 0 3
11446: ARRAY
11447: PPUSH
11448: LD_INT 3
11450: PPUSH
11451: CALL_OW 259
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_VAR 0 3
11465: ARRAY
11466: PPUSH
11467: CALL_OW 432
11471: MINUS
11472: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11473: LD_VAR 0 4
11477: PUSH
11478: LD_VAR 0 5
11482: PPUSH
11483: LD_INT 3
11485: PPUSH
11486: CALL_OW 259
11490: PUSH
11491: LD_VAR 0 5
11495: PPUSH
11496: CALL_OW 432
11500: MINUS
11501: GREATEREQUAL
11502: IFFALSE 11520
// mech := result [ i ] ;
11504: LD_ADDR_VAR 0 5
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 3
11518: ARRAY
11519: ST_TO_ADDR
// end ;
11520: GO 11429
11522: POP
11523: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_VAR 0 5
11533: PPUSH
11534: CALL_OW 135
// end ;
11538: LD_VAR 0 2
11542: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11543: LD_INT 0
11545: PPUSH
11546: PPUSH
11547: PPUSH
11548: PPUSH
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
11556: PPUSH
11557: PPUSH
// result := [ ] ;
11558: LD_ADDR_VAR 0 7
11562: PUSH
11563: EMPTY
11564: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 266
11574: PUSH
11575: LD_INT 0
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: IN
11585: NOT
11586: IFFALSE 11590
// exit ;
11588: GO 13224
// if name then
11590: LD_VAR 0 3
11594: IFFALSE 11610
// SetBName ( base_dep , name ) ;
11596: LD_VAR 0 1
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: CALL_OW 500
// base := GetBase ( base_dep ) ;
11610: LD_ADDR_VAR 0 15
11614: PUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: CALL_OW 274
11624: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11625: LD_ADDR_VAR 0 16
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 255
11639: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11640: LD_ADDR_VAR 0 17
11644: PUSH
11645: LD_VAR 0 1
11649: PPUSH
11650: CALL_OW 248
11654: ST_TO_ADDR
// if sources then
11655: LD_VAR 0 5
11659: IFFALSE 11706
// for i = 1 to 3 do
11661: LD_ADDR_VAR 0 8
11665: PUSH
11666: DOUBLE
11667: LD_INT 1
11669: DEC
11670: ST_TO_ADDR
11671: LD_INT 3
11673: PUSH
11674: FOR_TO
11675: IFFALSE 11704
// AddResourceType ( base , i , sources [ i ] ) ;
11677: LD_VAR 0 15
11681: PPUSH
11682: LD_VAR 0 8
11686: PPUSH
11687: LD_VAR 0 5
11691: PUSH
11692: LD_VAR 0 8
11696: ARRAY
11697: PPUSH
11698: CALL_OW 276
11702: GO 11674
11704: POP
11705: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11706: LD_ADDR_VAR 0 18
11710: PUSH
11711: LD_VAR 0 15
11715: PPUSH
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL 10967 0 3
11728: ST_TO_ADDR
// InitHc ;
11729: CALL_OW 19
// InitUc ;
11733: CALL_OW 18
// uc_side := side ;
11737: LD_ADDR_OWVAR 20
11741: PUSH
11742: LD_VAR 0 16
11746: ST_TO_ADDR
// uc_nation := nation ;
11747: LD_ADDR_OWVAR 21
11751: PUSH
11752: LD_VAR 0 17
11756: ST_TO_ADDR
// if buildings then
11757: LD_VAR 0 18
11761: IFFALSE 13083
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11763: LD_ADDR_VAR 0 19
11767: PUSH
11768: LD_VAR 0 18
11772: PPUSH
11773: LD_INT 2
11775: PUSH
11776: LD_INT 30
11778: PUSH
11779: LD_INT 29
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 30
11788: PUSH
11789: LD_INT 30
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 72
11805: ST_TO_ADDR
// if tmp then
11806: LD_VAR 0 19
11810: IFFALSE 11858
// for i in tmp do
11812: LD_ADDR_VAR 0 8
11816: PUSH
11817: LD_VAR 0 19
11821: PUSH
11822: FOR_IN
11823: IFFALSE 11856
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11825: LD_VAR 0 8
11829: PPUSH
11830: CALL_OW 250
11834: PPUSH
11835: LD_VAR 0 8
11839: PPUSH
11840: CALL_OW 251
11844: PPUSH
11845: LD_VAR 0 16
11849: PPUSH
11850: CALL_OW 441
11854: GO 11822
11856: POP
11857: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11858: LD_VAR 0 18
11862: PPUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 32
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: LD_INT 33
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 72
11895: IFFALSE 11983
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11897: LD_ADDR_VAR 0 8
11901: PUSH
11902: LD_VAR 0 18
11906: PPUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 33
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 72
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11981
// begin if not GetBWeapon ( i ) then
11943: LD_VAR 0 8
11947: PPUSH
11948: CALL_OW 269
11952: NOT
11953: IFFALSE 11979
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11955: LD_VAR 0 8
11959: PPUSH
11960: LD_VAR 0 8
11964: PPUSH
11965: LD_VAR 0 2
11969: PPUSH
11970: CALL 13229 0 2
11974: PPUSH
11975: CALL_OW 431
// end ;
11979: GO 11940
11981: POP
11982: POP
// end ; for i = 1 to personel do
11983: LD_ADDR_VAR 0 8
11987: PUSH
11988: DOUBLE
11989: LD_INT 1
11991: DEC
11992: ST_TO_ADDR
11993: LD_VAR 0 6
11997: PUSH
11998: FOR_TO
11999: IFFALSE 13063
// begin if i > 4 then
12001: LD_VAR 0 8
12005: PUSH
12006: LD_INT 4
12008: GREATER
12009: IFFALSE 12013
// break ;
12011: GO 13063
// case i of 1 :
12013: LD_VAR 0 8
12017: PUSH
12018: LD_INT 1
12020: DOUBLE
12021: EQUAL
12022: IFTRUE 12026
12024: GO 12106
12026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12027: LD_ADDR_VAR 0 12
12031: PUSH
12032: LD_VAR 0 18
12036: PPUSH
12037: LD_INT 22
12039: PUSH
12040: LD_VAR 0 16
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 58
12051: PUSH
12052: EMPTY
12053: LIST
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 32
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 4
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 30
12080: PUSH
12081: LD_INT 5
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 72
12103: ST_TO_ADDR
12104: GO 12328
12106: LD_INT 2
12108: DOUBLE
12109: EQUAL
12110: IFTRUE 12114
12112: GO 12176
12114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12115: LD_ADDR_VAR 0 12
12119: PUSH
12120: LD_VAR 0 18
12124: PPUSH
12125: LD_INT 22
12127: PUSH
12128: LD_VAR 0 16
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 0
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 72
12173: ST_TO_ADDR
12174: GO 12328
12176: LD_INT 3
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12246
12184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12185: LD_ADDR_VAR 0 12
12189: PUSH
12190: LD_VAR 0 18
12194: PPUSH
12195: LD_INT 22
12197: PUSH
12198: LD_VAR 0 16
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 3
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: ST_TO_ADDR
12244: GO 12328
12246: LD_INT 4
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12327
12254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12255: LD_ADDR_VAR 0 12
12259: PUSH
12260: LD_VAR 0 18
12264: PPUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 16
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 6
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: LD_INT 7
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: LD_INT 8
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 72
12324: ST_TO_ADDR
12325: GO 12328
12327: POP
// if i = 1 then
12328: LD_VAR 0 8
12332: PUSH
12333: LD_INT 1
12335: EQUAL
12336: IFFALSE 12447
// begin tmp := [ ] ;
12338: LD_ADDR_VAR 0 19
12342: PUSH
12343: EMPTY
12344: ST_TO_ADDR
// for j in f do
12345: LD_ADDR_VAR 0 9
12349: PUSH
12350: LD_VAR 0 12
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12429
// if GetBType ( j ) = b_bunker then
12358: LD_VAR 0 9
12362: PPUSH
12363: CALL_OW 266
12367: PUSH
12368: LD_INT 32
12370: EQUAL
12371: IFFALSE 12398
// tmp := Insert ( tmp , 1 , j ) else
12373: LD_ADDR_VAR 0 19
12377: PUSH
12378: LD_VAR 0 19
12382: PPUSH
12383: LD_INT 1
12385: PPUSH
12386: LD_VAR 0 9
12390: PPUSH
12391: CALL_OW 2
12395: ST_TO_ADDR
12396: GO 12427
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12398: LD_ADDR_VAR 0 19
12402: PUSH
12403: LD_VAR 0 19
12407: PPUSH
12408: LD_VAR 0 19
12412: PUSH
12413: LD_INT 1
12415: PLUS
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 2
12426: ST_TO_ADDR
12427: GO 12355
12429: POP
12430: POP
// if tmp then
12431: LD_VAR 0 19
12435: IFFALSE 12447
// f := tmp ;
12437: LD_ADDR_VAR 0 12
12441: PUSH
12442: LD_VAR 0 19
12446: ST_TO_ADDR
// end ; x := personel [ i ] ;
12447: LD_ADDR_VAR 0 13
12451: PUSH
12452: LD_VAR 0 6
12456: PUSH
12457: LD_VAR 0 8
12461: ARRAY
12462: ST_TO_ADDR
// if x = - 1 then
12463: LD_VAR 0 13
12467: PUSH
12468: LD_INT 1
12470: NEG
12471: EQUAL
12472: IFFALSE 12681
// begin for j in f do
12474: LD_ADDR_VAR 0 9
12478: PUSH
12479: LD_VAR 0 12
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12677
// repeat InitHc ;
12487: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12491: LD_VAR 0 9
12495: PPUSH
12496: CALL_OW 266
12500: PUSH
12501: LD_INT 5
12503: EQUAL
12504: IFFALSE 12574
// begin if UnitsInside ( j ) < 3 then
12506: LD_VAR 0 9
12510: PPUSH
12511: CALL_OW 313
12515: PUSH
12516: LD_INT 3
12518: LESS
12519: IFFALSE 12555
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12521: LD_INT 0
12523: PPUSH
12524: LD_INT 5
12526: PUSH
12527: LD_INT 8
12529: PUSH
12530: LD_INT 9
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_VAR 0 17
12542: ARRAY
12543: PPUSH
12544: LD_VAR 0 4
12548: PPUSH
12549: CALL_OW 380
12553: GO 12572
// PrepareHuman ( false , i , skill ) ;
12555: LD_INT 0
12557: PPUSH
12558: LD_VAR 0 8
12562: PPUSH
12563: LD_VAR 0 4
12567: PPUSH
12568: CALL_OW 380
// end else
12572: GO 12591
// PrepareHuman ( false , i , skill ) ;
12574: LD_INT 0
12576: PPUSH
12577: LD_VAR 0 8
12581: PPUSH
12582: LD_VAR 0 4
12586: PPUSH
12587: CALL_OW 380
// un := CreateHuman ;
12591: LD_ADDR_VAR 0 14
12595: PUSH
12596: CALL_OW 44
12600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12601: LD_ADDR_VAR 0 7
12605: PUSH
12606: LD_VAR 0 7
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: LD_VAR 0 14
12618: PPUSH
12619: CALL_OW 2
12623: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12624: LD_VAR 0 14
12628: PPUSH
12629: LD_VAR 0 9
12633: PPUSH
12634: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12638: LD_VAR 0 9
12642: PPUSH
12643: CALL_OW 313
12647: PUSH
12648: LD_INT 6
12650: EQUAL
12651: PUSH
12652: LD_VAR 0 9
12656: PPUSH
12657: CALL_OW 266
12661: PUSH
12662: LD_INT 32
12664: PUSH
12665: LD_INT 31
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: IN
12672: OR
12673: IFFALSE 12487
12675: GO 12484
12677: POP
12678: POP
// end else
12679: GO 13061
// for j = 1 to x do
12681: LD_ADDR_VAR 0 9
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_VAR 0 13
12695: PUSH
12696: FOR_TO
12697: IFFALSE 13059
// begin InitHc ;
12699: CALL_OW 19
// if not f then
12703: LD_VAR 0 12
12707: NOT
12708: IFFALSE 12797
// begin PrepareHuman ( false , i , skill ) ;
12710: LD_INT 0
12712: PPUSH
12713: LD_VAR 0 8
12717: PPUSH
12718: LD_VAR 0 4
12722: PPUSH
12723: CALL_OW 380
// un := CreateHuman ;
12727: LD_ADDR_VAR 0 14
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12737: LD_ADDR_VAR 0 7
12741: PUSH
12742: LD_VAR 0 7
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: LD_VAR 0 14
12754: PPUSH
12755: CALL_OW 2
12759: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12760: LD_VAR 0 14
12764: PPUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 250
12774: PPUSH
12775: LD_VAR 0 1
12779: PPUSH
12780: CALL_OW 251
12784: PPUSH
12785: LD_INT 10
12787: PPUSH
12788: LD_INT 0
12790: PPUSH
12791: CALL_OW 50
// continue ;
12795: GO 12696
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12797: LD_VAR 0 12
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: PPUSH
12806: CALL_OW 313
12810: PUSH
12811: LD_VAR 0 12
12815: PUSH
12816: LD_INT 1
12818: ARRAY
12819: PPUSH
12820: CALL_OW 266
12824: PUSH
12825: LD_INT 32
12827: PUSH
12828: LD_INT 31
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: IN
12835: AND
12836: PUSH
12837: LD_VAR 0 12
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PPUSH
12846: CALL_OW 313
12850: PUSH
12851: LD_INT 6
12853: EQUAL
12854: OR
12855: IFFALSE 12875
// f := Delete ( f , 1 ) ;
12857: LD_ADDR_VAR 0 12
12861: PUSH
12862: LD_VAR 0 12
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 3
12874: ST_TO_ADDR
// if not f then
12875: LD_VAR 0 12
12879: NOT
12880: IFFALSE 12898
// begin x := x + 2 ;
12882: LD_ADDR_VAR 0 13
12886: PUSH
12887: LD_VAR 0 13
12891: PUSH
12892: LD_INT 2
12894: PLUS
12895: ST_TO_ADDR
// continue ;
12896: GO 12696
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12898: LD_VAR 0 12
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PPUSH
12907: CALL_OW 266
12911: PUSH
12912: LD_INT 5
12914: EQUAL
12915: IFFALSE 12989
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12917: LD_VAR 0 12
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 313
12930: PUSH
12931: LD_INT 3
12933: LESS
12934: IFFALSE 12970
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 5
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: LD_INT 9
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: LD_VAR 0 17
12957: ARRAY
12958: PPUSH
12959: LD_VAR 0 4
12963: PPUSH
12964: CALL_OW 380
12968: GO 12987
// PrepareHuman ( false , i , skill ) ;
12970: LD_INT 0
12972: PPUSH
12973: LD_VAR 0 8
12977: PPUSH
12978: LD_VAR 0 4
12982: PPUSH
12983: CALL_OW 380
// end else
12987: GO 13006
// PrepareHuman ( false , i , skill ) ;
12989: LD_INT 0
12991: PPUSH
12992: LD_VAR 0 8
12996: PPUSH
12997: LD_VAR 0 4
13001: PPUSH
13002: CALL_OW 380
// un := CreateHuman ;
13006: LD_ADDR_VAR 0 14
13010: PUSH
13011: CALL_OW 44
13015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13016: LD_ADDR_VAR 0 7
13020: PUSH
13021: LD_VAR 0 7
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_VAR 0 14
13033: PPUSH
13034: CALL_OW 2
13038: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13039: LD_VAR 0 14
13043: PPUSH
13044: LD_VAR 0 12
13048: PUSH
13049: LD_INT 1
13051: ARRAY
13052: PPUSH
13053: CALL_OW 52
// end ;
13057: GO 12696
13059: POP
13060: POP
// end ;
13061: GO 11998
13063: POP
13064: POP
// result := result ^ buildings ;
13065: LD_ADDR_VAR 0 7
13069: PUSH
13070: LD_VAR 0 7
13074: PUSH
13075: LD_VAR 0 18
13079: ADD
13080: ST_TO_ADDR
// end else
13081: GO 13224
// begin for i = 1 to personel do
13083: LD_ADDR_VAR 0 8
13087: PUSH
13088: DOUBLE
13089: LD_INT 1
13091: DEC
13092: ST_TO_ADDR
13093: LD_VAR 0 6
13097: PUSH
13098: FOR_TO
13099: IFFALSE 13222
// begin if i > 4 then
13101: LD_VAR 0 8
13105: PUSH
13106: LD_INT 4
13108: GREATER
13109: IFFALSE 13113
// break ;
13111: GO 13222
// x := personel [ i ] ;
13113: LD_ADDR_VAR 0 13
13117: PUSH
13118: LD_VAR 0 6
13122: PUSH
13123: LD_VAR 0 8
13127: ARRAY
13128: ST_TO_ADDR
// if x = - 1 then
13129: LD_VAR 0 13
13133: PUSH
13134: LD_INT 1
13136: NEG
13137: EQUAL
13138: IFFALSE 13142
// continue ;
13140: GO 13098
// PrepareHuman ( false , i , skill ) ;
13142: LD_INT 0
13144: PPUSH
13145: LD_VAR 0 8
13149: PPUSH
13150: LD_VAR 0 4
13154: PPUSH
13155: CALL_OW 380
// un := CreateHuman ;
13159: LD_ADDR_VAR 0 14
13163: PUSH
13164: CALL_OW 44
13168: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13169: LD_VAR 0 14
13173: PPUSH
13174: LD_VAR 0 1
13178: PPUSH
13179: CALL_OW 250
13183: PPUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: CALL_OW 251
13193: PPUSH
13194: LD_INT 10
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 50
// result := result ^ un ;
13204: LD_ADDR_VAR 0 7
13208: PUSH
13209: LD_VAR 0 7
13213: PUSH
13214: LD_VAR 0 14
13218: ADD
13219: ST_TO_ADDR
// end ;
13220: GO 13098
13222: POP
13223: POP
// end ; end ;
13224: LD_VAR 0 7
13228: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
13236: PPUSH
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
// result := false ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13255: LD_VAR 0 1
13259: NOT
13260: PUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 266
13270: PUSH
13271: LD_INT 32
13273: PUSH
13274: LD_INT 33
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: IN
13281: NOT
13282: OR
13283: IFFALSE 13287
// exit ;
13285: GO 14396
// nat := GetNation ( tower ) ;
13287: LD_ADDR_VAR 0 12
13291: PUSH
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL_OW 248
13301: ST_TO_ADDR
// side := GetSide ( tower ) ;
13302: LD_ADDR_VAR 0 16
13306: PUSH
13307: LD_VAR 0 1
13311: PPUSH
13312: CALL_OW 255
13316: ST_TO_ADDR
// x := GetX ( tower ) ;
13317: LD_ADDR_VAR 0 10
13321: PUSH
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 250
13331: ST_TO_ADDR
// y := GetY ( tower ) ;
13332: LD_ADDR_VAR 0 11
13336: PUSH
13337: LD_VAR 0 1
13341: PPUSH
13342: CALL_OW 251
13346: ST_TO_ADDR
// if not x or not y then
13347: LD_VAR 0 10
13351: NOT
13352: PUSH
13353: LD_VAR 0 11
13357: NOT
13358: OR
13359: IFFALSE 13363
// exit ;
13361: GO 14396
// weapon := 0 ;
13363: LD_ADDR_VAR 0 18
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// fac_list := [ ] ;
13371: LD_ADDR_VAR 0 17
13375: PUSH
13376: EMPTY
13377: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13378: LD_ADDR_VAR 0 6
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 274
13392: PPUSH
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_INT 0
13400: PPUSH
13401: CALL 10967 0 3
13405: PPUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 3
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PPUSH
13416: CALL_OW 72
13420: ST_TO_ADDR
// if not factories then
13421: LD_VAR 0 6
13425: NOT
13426: IFFALSE 13430
// exit ;
13428: GO 14396
// for i in factories do
13430: LD_ADDR_VAR 0 8
13434: PUSH
13435: LD_VAR 0 6
13439: PUSH
13440: FOR_IN
13441: IFFALSE 13466
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13443: LD_ADDR_VAR 0 17
13447: PUSH
13448: LD_VAR 0 17
13452: PUSH
13453: LD_VAR 0 8
13457: PPUSH
13458: CALL_OW 478
13462: UNION
13463: ST_TO_ADDR
13464: GO 13440
13466: POP
13467: POP
// if not fac_list then
13468: LD_VAR 0 17
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 14396
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13477: LD_ADDR_VAR 0 5
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: LD_INT 5
13487: PUSH
13488: LD_INT 9
13490: PUSH
13491: LD_INT 10
13493: PUSH
13494: LD_INT 6
13496: PUSH
13497: LD_INT 7
13499: PUSH
13500: LD_INT 11
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 27
13514: PUSH
13515: LD_INT 28
13517: PUSH
13518: LD_INT 26
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 43
13532: PUSH
13533: LD_INT 44
13535: PUSH
13536: LD_INT 46
13538: PUSH
13539: LD_INT 45
13541: PUSH
13542: LD_INT 47
13544: PUSH
13545: LD_INT 49
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: LD_VAR 0 12
13565: ARRAY
13566: ST_TO_ADDR
// list := list isect fac_list ;
13567: LD_ADDR_VAR 0 5
13571: PUSH
13572: LD_VAR 0 5
13576: PUSH
13577: LD_VAR 0 17
13581: ISECT
13582: ST_TO_ADDR
// if not list then
13583: LD_VAR 0 5
13587: NOT
13588: IFFALSE 13592
// exit ;
13590: GO 14396
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13592: LD_VAR 0 12
13596: PUSH
13597: LD_INT 3
13599: EQUAL
13600: PUSH
13601: LD_INT 49
13603: PUSH
13604: LD_VAR 0 5
13608: IN
13609: AND
13610: PUSH
13611: LD_INT 31
13613: PPUSH
13614: LD_VAR 0 16
13618: PPUSH
13619: CALL_OW 321
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: AND
13628: IFFALSE 13688
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13630: LD_INT 22
13632: PUSH
13633: LD_VAR 0 16
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 35
13644: PUSH
13645: LD_INT 49
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 91
13654: PUSH
13655: LD_VAR 0 1
13659: PUSH
13660: LD_INT 10
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: CALL_OW 69
13677: NOT
13678: IFFALSE 13688
// weapon := ru_time_lapser ;
13680: LD_ADDR_VAR 0 18
13684: PUSH
13685: LD_INT 49
13687: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13688: LD_VAR 0 12
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: LD_INT 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: IN
13703: PUSH
13704: LD_INT 11
13706: PUSH
13707: LD_VAR 0 5
13711: IN
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_VAR 0 5
13720: IN
13721: OR
13722: AND
13723: PUSH
13724: LD_INT 6
13726: PPUSH
13727: LD_VAR 0 16
13731: PPUSH
13732: CALL_OW 321
13736: PUSH
13737: LD_INT 2
13739: EQUAL
13740: AND
13741: IFFALSE 13906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13743: LD_INT 22
13745: PUSH
13746: LD_VAR 0 16
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 35
13760: PUSH
13761: LD_INT 11
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 35
13770: PUSH
13771: LD_INT 30
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 91
13785: PUSH
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 18
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: NOT
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_VAR 0 16
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_INT 32
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: LD_INT 33
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 91
13852: PUSH
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 12
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: PUSH
13879: LD_INT 2
13881: GREATER
13882: AND
13883: IFFALSE 13906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13885: LD_ADDR_VAR 0 18
13889: PUSH
13890: LD_INT 11
13892: PUSH
13893: LD_INT 30
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_VAR 0 12
13904: ARRAY
13905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13906: LD_VAR 0 18
13910: NOT
13911: PUSH
13912: LD_INT 40
13914: PPUSH
13915: LD_VAR 0 16
13919: PPUSH
13920: CALL_OW 321
13924: PUSH
13925: LD_INT 2
13927: EQUAL
13928: AND
13929: PUSH
13930: LD_INT 7
13932: PUSH
13933: LD_VAR 0 5
13937: IN
13938: PUSH
13939: LD_INT 28
13941: PUSH
13942: LD_VAR 0 5
13946: IN
13947: OR
13948: PUSH
13949: LD_INT 45
13951: PUSH
13952: LD_VAR 0 5
13956: IN
13957: OR
13958: AND
13959: IFFALSE 14213
// begin hex := GetHexInfo ( x , y ) ;
13961: LD_ADDR_VAR 0 4
13965: PUSH
13966: LD_VAR 0 10
13970: PPUSH
13971: LD_VAR 0 11
13975: PPUSH
13976: CALL_OW 546
13980: ST_TO_ADDR
// if hex [ 1 ] then
13981: LD_VAR 0 4
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: IFFALSE 13993
// exit ;
13991: GO 14396
// height := hex [ 2 ] ;
13993: LD_ADDR_VAR 0 15
13997: PUSH
13998: LD_VAR 0 4
14002: PUSH
14003: LD_INT 2
14005: ARRAY
14006: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14007: LD_ADDR_VAR 0 14
14011: PUSH
14012: LD_INT 0
14014: PUSH
14015: LD_INT 2
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 5
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: ST_TO_ADDR
// for i in tmp do
14030: LD_ADDR_VAR 0 8
14034: PUSH
14035: LD_VAR 0 14
14039: PUSH
14040: FOR_IN
14041: IFFALSE 14211
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14043: LD_ADDR_VAR 0 9
14047: PUSH
14048: LD_VAR 0 10
14052: PPUSH
14053: LD_VAR 0 8
14057: PPUSH
14058: LD_INT 5
14060: PPUSH
14061: CALL_OW 272
14065: PUSH
14066: LD_VAR 0 11
14070: PPUSH
14071: LD_VAR 0 8
14075: PPUSH
14076: LD_INT 5
14078: PPUSH
14079: CALL_OW 273
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14088: LD_VAR 0 9
14092: PUSH
14093: LD_INT 1
14095: ARRAY
14096: PPUSH
14097: LD_VAR 0 9
14101: PUSH
14102: LD_INT 2
14104: ARRAY
14105: PPUSH
14106: CALL_OW 488
14110: IFFALSE 14209
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14112: LD_ADDR_VAR 0 4
14116: PUSH
14117: LD_VAR 0 9
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 9
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 546
14139: ST_TO_ADDR
// if hex [ 1 ] then
14140: LD_VAR 0 4
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: IFFALSE 14152
// continue ;
14150: GO 14040
// h := hex [ 2 ] ;
14152: LD_ADDR_VAR 0 13
14156: PUSH
14157: LD_VAR 0 4
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: ST_TO_ADDR
// if h + 7 < height then
14166: LD_VAR 0 13
14170: PUSH
14171: LD_INT 7
14173: PLUS
14174: PUSH
14175: LD_VAR 0 15
14179: LESS
14180: IFFALSE 14209
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14182: LD_ADDR_VAR 0 18
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 28
14192: PUSH
14193: LD_INT 45
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PUSH
14201: LD_VAR 0 12
14205: ARRAY
14206: ST_TO_ADDR
// break ;
14207: GO 14211
// end ; end ; end ;
14209: GO 14040
14211: POP
14212: POP
// end ; if not weapon then
14213: LD_VAR 0 18
14217: NOT
14218: IFFALSE 14278
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14220: LD_ADDR_VAR 0 5
14224: PUSH
14225: LD_VAR 0 5
14229: PUSH
14230: LD_INT 11
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 49
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: DIFF
14244: ST_TO_ADDR
// if not list then
14245: LD_VAR 0 5
14249: NOT
14250: IFFALSE 14254
// exit ;
14252: GO 14396
// weapon := list [ rand ( 1 , list ) ] ;
14254: LD_ADDR_VAR 0 18
14258: PUSH
14259: LD_VAR 0 5
14263: PUSH
14264: LD_INT 1
14266: PPUSH
14267: LD_VAR 0 5
14271: PPUSH
14272: CALL_OW 12
14276: ARRAY
14277: ST_TO_ADDR
// end ; if weapon then
14278: LD_VAR 0 18
14282: IFFALSE 14396
// begin tmp := CostOfWeapon ( weapon ) ;
14284: LD_ADDR_VAR 0 14
14288: PUSH
14289: LD_VAR 0 18
14293: PPUSH
14294: CALL_OW 451
14298: ST_TO_ADDR
// j := GetBase ( tower ) ;
14299: LD_ADDR_VAR 0 9
14303: PUSH
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 274
14313: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14314: LD_VAR 0 9
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 275
14326: PUSH
14327: LD_VAR 0 14
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: GREATEREQUAL
14336: PUSH
14337: LD_VAR 0 9
14341: PPUSH
14342: LD_INT 2
14344: PPUSH
14345: CALL_OW 275
14349: PUSH
14350: LD_VAR 0 14
14354: PUSH
14355: LD_INT 2
14357: ARRAY
14358: GREATEREQUAL
14359: AND
14360: PUSH
14361: LD_VAR 0 9
14365: PPUSH
14366: LD_INT 3
14368: PPUSH
14369: CALL_OW 275
14373: PUSH
14374: LD_VAR 0 14
14378: PUSH
14379: LD_INT 3
14381: ARRAY
14382: GREATEREQUAL
14383: AND
14384: IFFALSE 14396
// result := weapon ;
14386: LD_ADDR_VAR 0 3
14390: PUSH
14391: LD_VAR 0 18
14395: ST_TO_ADDR
// end ; end ;
14396: LD_VAR 0 3
14400: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14401: LD_INT 0
14403: PPUSH
14404: PPUSH
// result := true ;
14405: LD_ADDR_VAR 0 3
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// if array1 = array2 then
14413: LD_VAR 0 1
14417: PUSH
14418: LD_VAR 0 2
14422: EQUAL
14423: IFFALSE 14483
// begin for i = 1 to array1 do
14425: LD_ADDR_VAR 0 4
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 1
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14479
// if array1 [ i ] <> array2 [ i ] then
14443: LD_VAR 0 1
14447: PUSH
14448: LD_VAR 0 4
14452: ARRAY
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: LD_VAR 0 4
14463: ARRAY
14464: NONEQUAL
14465: IFFALSE 14477
// begin result := false ;
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// break ;
14475: GO 14479
// end ;
14477: GO 14440
14479: POP
14480: POP
// end else
14481: GO 14491
// result := false ;
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// end ;
14491: LD_VAR 0 3
14495: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// if not array1 or not array2 then
14500: LD_VAR 0 1
14504: NOT
14505: PUSH
14506: LD_VAR 0 2
14510: NOT
14511: OR
14512: IFFALSE 14516
// exit ;
14514: GO 14580
// result := true ;
14516: LD_ADDR_VAR 0 3
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// for i = 1 to array1 do
14524: LD_ADDR_VAR 0 4
14528: PUSH
14529: DOUBLE
14530: LD_INT 1
14532: DEC
14533: ST_TO_ADDR
14534: LD_VAR 0 1
14538: PUSH
14539: FOR_TO
14540: IFFALSE 14578
// if array1 [ i ] <> array2 [ i ] then
14542: LD_VAR 0 1
14546: PUSH
14547: LD_VAR 0 4
14551: ARRAY
14552: PUSH
14553: LD_VAR 0 2
14557: PUSH
14558: LD_VAR 0 4
14562: ARRAY
14563: NONEQUAL
14564: IFFALSE 14576
// begin result := false ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// break ;
14574: GO 14578
// end ;
14576: GO 14539
14578: POP
14579: POP
// end ;
14580: LD_VAR 0 3
14584: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
14589: PPUSH
// pom := GetBase ( fac ) ;
14590: LD_ADDR_VAR 0 5
14594: PUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 274
14604: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: LD_VAR 0 2
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 2
14623: PUSH
14624: LD_INT 2
14626: ARRAY
14627: PPUSH
14628: LD_VAR 0 2
14632: PUSH
14633: LD_INT 3
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 2
14641: PUSH
14642: LD_INT 4
14644: ARRAY
14645: PPUSH
14646: CALL_OW 449
14650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14651: LD_ADDR_VAR 0 3
14655: PUSH
14656: LD_VAR 0 5
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 275
14668: PUSH
14669: LD_VAR 0 4
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: GREATEREQUAL
14678: PUSH
14679: LD_VAR 0 5
14683: PPUSH
14684: LD_INT 2
14686: PPUSH
14687: CALL_OW 275
14691: PUSH
14692: LD_VAR 0 4
14696: PUSH
14697: LD_INT 2
14699: ARRAY
14700: GREATEREQUAL
14701: AND
14702: PUSH
14703: LD_VAR 0 5
14707: PPUSH
14708: LD_INT 3
14710: PPUSH
14711: CALL_OW 275
14715: PUSH
14716: LD_VAR 0 4
14720: PUSH
14721: LD_INT 3
14723: ARRAY
14724: GREATEREQUAL
14725: AND
14726: ST_TO_ADDR
// end ;
14727: LD_VAR 0 3
14731: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14732: LD_INT 0
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
// pom := GetBase ( building ) ;
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 274
14752: ST_TO_ADDR
// if not pom then
14753: LD_VAR 0 3
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 14932
// btype := GetBType ( building ) ;
14762: LD_ADDR_VAR 0 5
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 266
14776: ST_TO_ADDR
// if btype = b_armoury then
14777: LD_VAR 0 5
14781: PUSH
14782: LD_INT 4
14784: EQUAL
14785: IFFALSE 14795
// btype := b_barracks ;
14787: LD_ADDR_VAR 0 5
14791: PUSH
14792: LD_INT 5
14794: ST_TO_ADDR
// if btype = b_depot then
14795: LD_VAR 0 5
14799: PUSH
14800: LD_INT 0
14802: EQUAL
14803: IFFALSE 14813
// btype := b_warehouse ;
14805: LD_ADDR_VAR 0 5
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if btype = b_workshop then
14813: LD_VAR 0 5
14817: PUSH
14818: LD_INT 2
14820: EQUAL
14821: IFFALSE 14831
// btype := b_factory ;
14823: LD_ADDR_VAR 0 5
14827: PUSH
14828: LD_INT 3
14830: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14831: LD_ADDR_VAR 0 4
14835: PUSH
14836: LD_VAR 0 5
14840: PPUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL_OW 248
14850: PPUSH
14851: CALL_OW 450
14855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_VAR 0 3
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 275
14873: PUSH
14874: LD_VAR 0 4
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: GREATEREQUAL
14883: PUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 2
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 4
14901: PUSH
14902: LD_INT 2
14904: ARRAY
14905: GREATEREQUAL
14906: AND
14907: PUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 3
14915: PPUSH
14916: CALL_OW 275
14920: PUSH
14921: LD_VAR 0 4
14925: PUSH
14926: LD_INT 3
14928: ARRAY
14929: GREATEREQUAL
14930: AND
14931: ST_TO_ADDR
// end ;
14932: LD_VAR 0 2
14936: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
// pom := GetBase ( building ) ;
14942: LD_ADDR_VAR 0 4
14946: PUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL_OW 274
14956: ST_TO_ADDR
// if not pom then
14957: LD_VAR 0 4
14961: NOT
14962: IFFALSE 14966
// exit ;
14964: GO 15067
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14966: LD_ADDR_VAR 0 5
14970: PUSH
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 248
14985: PPUSH
14986: CALL_OW 450
14990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: CALL_OW 275
15008: PUSH
15009: LD_VAR 0 5
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: GREATEREQUAL
15018: PUSH
15019: LD_VAR 0 4
15023: PPUSH
15024: LD_INT 2
15026: PPUSH
15027: CALL_OW 275
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: GREATEREQUAL
15041: AND
15042: PUSH
15043: LD_VAR 0 4
15047: PPUSH
15048: LD_INT 3
15050: PPUSH
15051: CALL_OW 275
15055: PUSH
15056: LD_VAR 0 5
15060: PUSH
15061: LD_INT 3
15063: ARRAY
15064: GREATEREQUAL
15065: AND
15066: ST_TO_ADDR
// end ;
15067: LD_VAR 0 3
15071: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
// result := false ;
15085: LD_ADDR_VAR 0 8
15089: PUSH
15090: LD_INT 0
15092: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15093: LD_VAR 0 5
15097: NOT
15098: PUSH
15099: LD_VAR 0 1
15103: NOT
15104: OR
15105: PUSH
15106: LD_VAR 0 2
15110: NOT
15111: OR
15112: PUSH
15113: LD_VAR 0 3
15117: NOT
15118: OR
15119: IFFALSE 15123
// exit ;
15121: GO 15937
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15123: LD_ADDR_VAR 0 14
15127: PUSH
15128: LD_VAR 0 1
15132: PPUSH
15133: LD_VAR 0 2
15137: PPUSH
15138: LD_VAR 0 3
15142: PPUSH
15143: LD_VAR 0 4
15147: PPUSH
15148: LD_VAR 0 5
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: CALL_OW 248
15161: PPUSH
15162: LD_INT 0
15164: PPUSH
15165: CALL 17190 0 6
15169: ST_TO_ADDR
// if not hexes then
15170: LD_VAR 0 14
15174: NOT
15175: IFFALSE 15179
// exit ;
15177: GO 15937
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15179: LD_ADDR_VAR 0 17
15183: PUSH
15184: LD_VAR 0 5
15188: PPUSH
15189: LD_INT 22
15191: PUSH
15192: LD_VAR 0 13
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 72
15242: ST_TO_ADDR
// for i = 1 to hexes do
15243: LD_ADDR_VAR 0 9
15247: PUSH
15248: DOUBLE
15249: LD_INT 1
15251: DEC
15252: ST_TO_ADDR
15253: LD_VAR 0 14
15257: PUSH
15258: FOR_TO
15259: IFFALSE 15935
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15261: LD_ADDR_VAR 0 13
15265: PUSH
15266: LD_VAR 0 14
15270: PUSH
15271: LD_VAR 0 9
15275: ARRAY
15276: PUSH
15277: LD_INT 1
15279: ARRAY
15280: PPUSH
15281: LD_VAR 0 14
15285: PUSH
15286: LD_VAR 0 9
15290: ARRAY
15291: PUSH
15292: LD_INT 2
15294: ARRAY
15295: PPUSH
15296: CALL_OW 428
15300: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15301: LD_VAR 0 14
15305: PUSH
15306: LD_VAR 0 9
15310: ARRAY
15311: PUSH
15312: LD_INT 1
15314: ARRAY
15315: PPUSH
15316: LD_VAR 0 14
15320: PUSH
15321: LD_VAR 0 9
15325: ARRAY
15326: PUSH
15327: LD_INT 2
15329: ARRAY
15330: PPUSH
15331: CALL_OW 351
15335: PUSH
15336: LD_VAR 0 14
15340: PUSH
15341: LD_VAR 0 9
15345: ARRAY
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 14
15355: PUSH
15356: LD_VAR 0 9
15360: ARRAY
15361: PUSH
15362: LD_INT 2
15364: ARRAY
15365: PPUSH
15366: CALL_OW 488
15370: NOT
15371: OR
15372: PUSH
15373: LD_VAR 0 13
15377: PPUSH
15378: CALL_OW 247
15382: PUSH
15383: LD_INT 3
15385: EQUAL
15386: OR
15387: IFFALSE 15393
// exit ;
15389: POP
15390: POP
15391: GO 15937
// if not tmp then
15393: LD_VAR 0 13
15397: NOT
15398: IFFALSE 15402
// continue ;
15400: GO 15258
// result := true ;
15402: LD_ADDR_VAR 0 8
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15410: LD_VAR 0 6
15414: PUSH
15415: LD_VAR 0 13
15419: PPUSH
15420: CALL_OW 247
15424: PUSH
15425: LD_INT 2
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_VAR 0 13
15434: PPUSH
15435: CALL_OW 263
15439: PUSH
15440: LD_INT 1
15442: EQUAL
15443: AND
15444: IFFALSE 15608
// begin if IsDrivenBy ( tmp ) then
15446: LD_VAR 0 13
15450: PPUSH
15451: CALL_OW 311
15455: IFFALSE 15459
// continue ;
15457: GO 15258
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15459: LD_VAR 0 6
15463: PPUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 60
15469: PUSH
15470: EMPTY
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: LD_INT 55
15482: PUSH
15483: EMPTY
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 72
15498: IFFALSE 15606
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15500: LD_ADDR_VAR 0 18
15504: PUSH
15505: LD_VAR 0 6
15509: PPUSH
15510: LD_INT 3
15512: PUSH
15513: LD_INT 60
15515: PUSH
15516: EMPTY
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 55
15528: PUSH
15529: EMPTY
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 72
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: ST_TO_ADDR
// if IsInUnit ( driver ) then
15549: LD_VAR 0 18
15553: PPUSH
15554: CALL_OW 310
15558: IFFALSE 15569
// ComExit ( driver ) ;
15560: LD_VAR 0 18
15564: PPUSH
15565: CALL 40971 0 1
// AddComEnterUnit ( driver , tmp ) ;
15569: LD_VAR 0 18
15573: PPUSH
15574: LD_VAR 0 13
15578: PPUSH
15579: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15583: LD_VAR 0 18
15587: PPUSH
15588: LD_VAR 0 7
15592: PPUSH
15593: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15597: LD_VAR 0 18
15601: PPUSH
15602: CALL_OW 181
// end ; continue ;
15606: GO 15258
// end ; if not cleaners or not tmp in cleaners then
15608: LD_VAR 0 6
15612: NOT
15613: PUSH
15614: LD_VAR 0 13
15618: PUSH
15619: LD_VAR 0 6
15623: IN
15624: NOT
15625: OR
15626: IFFALSE 15933
// begin if dep then
15628: LD_VAR 0 17
15632: IFFALSE 15768
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15634: LD_ADDR_VAR 0 16
15638: PUSH
15639: LD_VAR 0 17
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: CALL_OW 250
15652: PPUSH
15653: LD_VAR 0 17
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: CALL_OW 254
15666: PPUSH
15667: LD_INT 5
15669: PPUSH
15670: CALL_OW 272
15674: PUSH
15675: LD_VAR 0 17
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: PPUSH
15684: CALL_OW 251
15688: PPUSH
15689: LD_VAR 0 17
15693: PUSH
15694: LD_INT 1
15696: ARRAY
15697: PPUSH
15698: CALL_OW 254
15702: PPUSH
15703: LD_INT 5
15705: PPUSH
15706: CALL_OW 273
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15715: LD_VAR 0 16
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_VAR 0 16
15728: PUSH
15729: LD_INT 2
15731: ARRAY
15732: PPUSH
15733: CALL_OW 488
15737: IFFALSE 15768
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15739: LD_VAR 0 13
15743: PPUSH
15744: LD_VAR 0 16
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: LD_VAR 0 16
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 111
// continue ;
15766: GO 15258
// end ; end ; r := GetDir ( tmp ) ;
15768: LD_ADDR_VAR 0 15
15772: PUSH
15773: LD_VAR 0 13
15777: PPUSH
15778: CALL_OW 254
15782: ST_TO_ADDR
// if r = 5 then
15783: LD_VAR 0 15
15787: PUSH
15788: LD_INT 5
15790: EQUAL
15791: IFFALSE 15801
// r := 0 ;
15793: LD_ADDR_VAR 0 15
15797: PUSH
15798: LD_INT 0
15800: ST_TO_ADDR
// for j = r to 5 do
15801: LD_ADDR_VAR 0 10
15805: PUSH
15806: DOUBLE
15807: LD_VAR 0 15
15811: DEC
15812: ST_TO_ADDR
15813: LD_INT 5
15815: PUSH
15816: FOR_TO
15817: IFFALSE 15931
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15819: LD_ADDR_VAR 0 11
15823: PUSH
15824: LD_VAR 0 13
15828: PPUSH
15829: CALL_OW 250
15833: PPUSH
15834: LD_VAR 0 10
15838: PPUSH
15839: LD_INT 2
15841: PPUSH
15842: CALL_OW 272
15846: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15847: LD_ADDR_VAR 0 12
15851: PUSH
15852: LD_VAR 0 13
15856: PPUSH
15857: CALL_OW 251
15861: PPUSH
15862: LD_VAR 0 10
15866: PPUSH
15867: LD_INT 2
15869: PPUSH
15870: CALL_OW 273
15874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15875: LD_VAR 0 11
15879: PPUSH
15880: LD_VAR 0 12
15884: PPUSH
15885: CALL_OW 488
15889: PUSH
15890: LD_VAR 0 11
15894: PPUSH
15895: LD_VAR 0 12
15899: PPUSH
15900: CALL_OW 428
15904: NOT
15905: AND
15906: IFFALSE 15929
// begin ComMoveXY ( tmp , _x , _y ) ;
15908: LD_VAR 0 13
15912: PPUSH
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 12
15922: PPUSH
15923: CALL_OW 111
// break ;
15927: GO 15931
// end ; end ;
15929: GO 15816
15931: POP
15932: POP
// end ; end ;
15933: GO 15258
15935: POP
15936: POP
// end ;
15937: LD_VAR 0 8
15941: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15942: LD_INT 0
15944: PPUSH
// result := true ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15953: LD_VAR 0 2
15957: PUSH
15958: LD_INT 24
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15972
15964: LD_INT 33
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15997
15972: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_INT 32
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 321
15990: PUSH
15991: LD_INT 2
15993: EQUAL
15994: ST_TO_ADDR
15995: GO 16313
15997: LD_INT 20
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16030
16005: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_INT 6
16013: PPUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 321
16023: PUSH
16024: LD_INT 2
16026: EQUAL
16027: ST_TO_ADDR
16028: GO 16313
16030: LD_INT 22
16032: DOUBLE
16033: EQUAL
16034: IFTRUE 16044
16036: LD_INT 36
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16069
16044: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: LD_INT 15
16052: PPUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 321
16062: PUSH
16063: LD_INT 2
16065: EQUAL
16066: ST_TO_ADDR
16067: GO 16313
16069: LD_INT 30
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16102
16077: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 20
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 321
16095: PUSH
16096: LD_INT 2
16098: EQUAL
16099: ST_TO_ADDR
16100: GO 16313
16102: LD_INT 28
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16116
16108: LD_INT 21
16110: DOUBLE
16111: EQUAL
16112: IFTRUE 16116
16114: GO 16141
16116: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: LD_INT 21
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 321
16134: PUSH
16135: LD_INT 2
16137: EQUAL
16138: ST_TO_ADDR
16139: GO 16313
16141: LD_INT 16
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16174
16149: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 84
16157: PPUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 321
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: ST_TO_ADDR
16172: GO 16313
16174: LD_INT 19
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16188
16180: LD_INT 23
16182: DOUBLE
16183: EQUAL
16184: IFTRUE 16188
16186: GO 16213
16188: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16189: LD_ADDR_VAR 0 3
16193: PUSH
16194: LD_INT 83
16196: PPUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 321
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: ST_TO_ADDR
16211: GO 16313
16213: LD_INT 17
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16246
16221: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_INT 39
16229: PPUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 321
16239: PUSH
16240: LD_INT 2
16242: EQUAL
16243: ST_TO_ADDR
16244: GO 16313
16246: LD_INT 18
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16279
16254: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: LD_INT 40
16262: PPUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 321
16272: PUSH
16273: LD_INT 2
16275: EQUAL
16276: ST_TO_ADDR
16277: GO 16313
16279: LD_INT 27
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16312
16287: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_INT 35
16295: PPUSH
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 321
16305: PUSH
16306: LD_INT 2
16308: EQUAL
16309: ST_TO_ADDR
16310: GO 16313
16312: POP
// end ;
16313: LD_VAR 0 3
16317: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
// result := false ;
16331: LD_ADDR_VAR 0 6
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// if btype = b_depot then
16339: LD_VAR 0 2
16343: PUSH
16344: LD_INT 0
16346: EQUAL
16347: IFFALSE 16359
// begin result := true ;
16349: LD_ADDR_VAR 0 6
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// exit ;
16357: GO 17185
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16359: LD_VAR 0 1
16363: NOT
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 266
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: IN
16385: NOT
16386: OR
16387: PUSH
16388: LD_VAR 0 2
16392: NOT
16393: OR
16394: PUSH
16395: LD_VAR 0 5
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: LD_INT 4
16414: PUSH
16415: LD_INT 5
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: IN
16426: NOT
16427: OR
16428: PUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_VAR 0 4
16438: PPUSH
16439: CALL_OW 488
16443: NOT
16444: OR
16445: IFFALSE 16449
// exit ;
16447: GO 17185
// side := GetSide ( depot ) ;
16449: LD_ADDR_VAR 0 9
16453: PUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 255
16463: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16464: LD_VAR 0 9
16468: PPUSH
16469: LD_VAR 0 2
16473: PPUSH
16474: CALL 15942 0 2
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 17185
// pom := GetBase ( depot ) ;
16483: LD_ADDR_VAR 0 10
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 274
16497: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16498: LD_ADDR_VAR 0 11
16502: PUSH
16503: LD_VAR 0 2
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 248
16517: PPUSH
16518: CALL_OW 450
16522: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16523: LD_VAR 0 10
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 275
16535: PUSH
16536: LD_VAR 0 11
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: GREATEREQUAL
16545: PUSH
16546: LD_VAR 0 10
16550: PPUSH
16551: LD_INT 2
16553: PPUSH
16554: CALL_OW 275
16558: PUSH
16559: LD_VAR 0 11
16563: PUSH
16564: LD_INT 2
16566: ARRAY
16567: GREATEREQUAL
16568: AND
16569: PUSH
16570: LD_VAR 0 10
16574: PPUSH
16575: LD_INT 3
16577: PPUSH
16578: CALL_OW 275
16582: PUSH
16583: LD_VAR 0 11
16587: PUSH
16588: LD_INT 3
16590: ARRAY
16591: GREATEREQUAL
16592: AND
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 17185
// if GetBType ( depot ) = b_depot then
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 266
16607: PUSH
16608: LD_INT 0
16610: EQUAL
16611: IFFALSE 16623
// dist := 28 else
16613: LD_ADDR_VAR 0 14
16617: PUSH
16618: LD_INT 28
16620: ST_TO_ADDR
16621: GO 16631
// dist := 36 ;
16623: LD_ADDR_VAR 0 14
16627: PUSH
16628: LD_INT 36
16630: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16631: LD_VAR 0 1
16635: PPUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_VAR 0 4
16645: PPUSH
16646: CALL_OW 297
16650: PUSH
16651: LD_VAR 0 14
16655: GREATER
16656: IFFALSE 16660
// exit ;
16658: GO 17185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16660: LD_ADDR_VAR 0 12
16664: PUSH
16665: LD_VAR 0 2
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 248
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL 17190 0 6
16702: ST_TO_ADDR
// if not hexes then
16703: LD_VAR 0 12
16707: NOT
16708: IFFALSE 16712
// exit ;
16710: GO 17185
// hex := GetHexInfo ( x , y ) ;
16712: LD_ADDR_VAR 0 15
16716: PUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_VAR 0 4
16726: PPUSH
16727: CALL_OW 546
16731: ST_TO_ADDR
// if hex [ 1 ] then
16732: LD_VAR 0 15
16736: PUSH
16737: LD_INT 1
16739: ARRAY
16740: IFFALSE 16744
// exit ;
16742: GO 17185
// height := hex [ 2 ] ;
16744: LD_ADDR_VAR 0 13
16748: PUSH
16749: LD_VAR 0 15
16753: PUSH
16754: LD_INT 2
16756: ARRAY
16757: ST_TO_ADDR
// for i = 1 to hexes do
16758: LD_ADDR_VAR 0 7
16762: PUSH
16763: DOUBLE
16764: LD_INT 1
16766: DEC
16767: ST_TO_ADDR
16768: LD_VAR 0 12
16772: PUSH
16773: FOR_TO
16774: IFFALSE 17104
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16776: LD_VAR 0 12
16780: PUSH
16781: LD_VAR 0 7
16785: ARRAY
16786: PUSH
16787: LD_INT 1
16789: ARRAY
16790: PPUSH
16791: LD_VAR 0 12
16795: PUSH
16796: LD_VAR 0 7
16800: ARRAY
16801: PUSH
16802: LD_INT 2
16804: ARRAY
16805: PPUSH
16806: CALL_OW 488
16810: NOT
16811: PUSH
16812: LD_VAR 0 12
16816: PUSH
16817: LD_VAR 0 7
16821: ARRAY
16822: PUSH
16823: LD_INT 1
16825: ARRAY
16826: PPUSH
16827: LD_VAR 0 12
16831: PUSH
16832: LD_VAR 0 7
16836: ARRAY
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 428
16846: PUSH
16847: LD_INT 0
16849: GREATER
16850: OR
16851: PUSH
16852: LD_VAR 0 12
16856: PUSH
16857: LD_VAR 0 7
16861: ARRAY
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_VAR 0 12
16871: PUSH
16872: LD_VAR 0 7
16876: ARRAY
16877: PUSH
16878: LD_INT 2
16880: ARRAY
16881: PPUSH
16882: CALL_OW 351
16886: OR
16887: IFFALSE 16893
// exit ;
16889: POP
16890: POP
16891: GO 17185
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16893: LD_ADDR_VAR 0 8
16897: PUSH
16898: LD_VAR 0 12
16902: PUSH
16903: LD_VAR 0 7
16907: ARRAY
16908: PUSH
16909: LD_INT 1
16911: ARRAY
16912: PPUSH
16913: LD_VAR 0 12
16917: PUSH
16918: LD_VAR 0 7
16922: ARRAY
16923: PUSH
16924: LD_INT 2
16926: ARRAY
16927: PPUSH
16928: CALL_OW 546
16932: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16933: LD_VAR 0 8
16937: PUSH
16938: LD_INT 1
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 8
16946: PUSH
16947: LD_INT 2
16949: ARRAY
16950: PUSH
16951: LD_VAR 0 13
16955: PUSH
16956: LD_INT 2
16958: PLUS
16959: GREATER
16960: OR
16961: PUSH
16962: LD_VAR 0 8
16966: PUSH
16967: LD_INT 2
16969: ARRAY
16970: PUSH
16971: LD_VAR 0 13
16975: PUSH
16976: LD_INT 2
16978: MINUS
16979: LESS
16980: OR
16981: PUSH
16982: LD_VAR 0 8
16986: PUSH
16987: LD_INT 3
16989: ARRAY
16990: PUSH
16991: LD_INT 0
16993: PUSH
16994: LD_INT 8
16996: PUSH
16997: LD_INT 9
16999: PUSH
17000: LD_INT 10
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: LD_INT 13
17011: PUSH
17012: LD_INT 16
17014: PUSH
17015: LD_INT 17
17017: PUSH
17018: LD_INT 18
17020: PUSH
17021: LD_INT 19
17023: PUSH
17024: LD_INT 20
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: IN
17045: NOT
17046: OR
17047: PUSH
17048: LD_VAR 0 8
17052: PUSH
17053: LD_INT 5
17055: ARRAY
17056: NOT
17057: OR
17058: PUSH
17059: LD_VAR 0 8
17063: PUSH
17064: LD_INT 6
17066: ARRAY
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 7
17076: PUSH
17077: LD_INT 9
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 11
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: IN
17094: NOT
17095: OR
17096: IFFALSE 17102
// exit ;
17098: POP
17099: POP
17100: GO 17185
// end ;
17102: GO 16773
17104: POP
17105: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17106: LD_VAR 0 9
17110: PPUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: LD_VAR 0 4
17120: PPUSH
17121: LD_INT 20
17123: PPUSH
17124: CALL 9108 0 4
17128: PUSH
17129: LD_INT 4
17131: ARRAY
17132: IFFALSE 17136
// exit ;
17134: GO 17185
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17136: LD_VAR 0 2
17140: PUSH
17141: LD_INT 29
17143: PUSH
17144: LD_INT 30
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: IN
17151: PUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_VAR 0 4
17161: PPUSH
17162: LD_VAR 0 9
17166: PPUSH
17167: CALL_OW 440
17171: NOT
17172: AND
17173: IFFALSE 17177
// exit ;
17175: GO 17185
// result := true ;
17177: LD_ADDR_VAR 0 6
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// end ;
17185: LD_VAR 0 6
17189: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
// result = [ ] ;
17250: LD_ADDR_VAR 0 7
17254: PUSH
17255: EMPTY
17256: ST_TO_ADDR
// temp_list = [ ] ;
17257: LD_ADDR_VAR 0 9
17261: PUSH
17262: EMPTY
17263: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17264: LD_VAR 0 4
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: LD_INT 3
17280: PUSH
17281: LD_INT 4
17283: PUSH
17284: LD_INT 5
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: IN
17295: NOT
17296: PUSH
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: IN
17312: PUSH
17313: LD_VAR 0 5
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: AND
17334: OR
17335: IFFALSE 17339
// exit ;
17337: GO 35730
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 6
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: LD_INT 8
17352: PUSH
17353: LD_INT 13
17355: PUSH
17356: LD_INT 12
17358: PUSH
17359: LD_INT 15
17361: PUSH
17362: LD_INT 11
17364: PUSH
17365: LD_INT 14
17367: PUSH
17368: LD_INT 10
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: IN
17382: IFFALSE 17392
// btype = b_lab ;
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_INT 6
17391: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17392: LD_VAR 0 6
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: IN
17411: NOT
17412: PUSH
17413: LD_VAR 0 1
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 6
17432: PUSH
17433: LD_INT 36
17435: PUSH
17436: LD_INT 4
17438: PUSH
17439: LD_INT 5
17441: PUSH
17442: LD_INT 31
17444: PUSH
17445: LD_INT 32
17447: PUSH
17448: LD_INT 33
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: IN
17464: NOT
17465: PUSH
17466: LD_VAR 0 6
17470: PUSH
17471: LD_INT 1
17473: EQUAL
17474: AND
17475: OR
17476: PUSH
17477: LD_VAR 0 1
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: IN
17492: NOT
17493: PUSH
17494: LD_VAR 0 6
17498: PUSH
17499: LD_INT 2
17501: EQUAL
17502: AND
17503: OR
17504: IFFALSE 17514
// mode = 0 ;
17506: LD_ADDR_VAR 0 6
17510: PUSH
17511: LD_INT 0
17513: ST_TO_ADDR
// case mode of 0 :
17514: LD_VAR 0 6
17518: PUSH
17519: LD_INT 0
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 28980
17527: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17528: LD_ADDR_VAR 0 11
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: LD_INT 1
17601: NEG
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: LD_INT 2
17613: NEG
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: LD_INT 2
17624: NEG
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17721: LD_ADDR_VAR 0 12
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: NEG
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 2
17844: NEG
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: NEG
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 3
17878: NEG
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 3
17889: NEG
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17917: LD_ADDR_VAR 0 13
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 2
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: NEG
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: LD_INT 2
18056: NEG
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: NEG
18065: PUSH
18066: LD_INT 3
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 3
18076: NEG
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 3
18088: NEG
18089: PUSH
18090: LD_INT 3
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18116: LD_ADDR_VAR 0 14
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: LD_INT 2
18201: NEG
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 3
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: LD_INT 3
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18312: LD_ADDR_VAR 0 15
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: NEG
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18505: LD_ADDR_VAR 0 16
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18698: LD_ADDR_VAR 0 17
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: LD_INT 2
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18928: LD_ADDR_VAR 0 18
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: NEG
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19158: LD_ADDR_VAR 0 19
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 2
19334: NEG
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 2
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19388: LD_ADDR_VAR 0 20
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19618: LD_ADDR_VAR 0 21
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19848: LD_ADDR_VAR 0 22
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: NEG
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20078: LD_ADDR_VAR 0 23
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 0
20171: PUSH
20172: LD_INT 2
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: LD_INT 0
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 2
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 3
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: LD_INT 3
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 2
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20358: LD_ADDR_VAR 0 24
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: NEG
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 0
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 2
20534: NEG
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 2
20545: NEG
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: NEG
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 3
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20634: LD_ADDR_VAR 0 25
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 2
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20908: LD_ADDR_VAR 0 26
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 2
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: NEG
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 3
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: NEG
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21184: LD_ADDR_VAR 0 27
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 3
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 3
21429: NEG
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21464: LD_ADDR_VAR 0 28
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: LD_INT 3
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: LD_INT 3
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 3
21699: NEG
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 3
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21746: LD_ADDR_VAR 0 29
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: LD_INT 2
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 2
21912: NEG
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 2
21924: NEG
21925: PUSH
21926: LD_INT 2
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 2
21936: NEG
21937: PUSH
21938: LD_INT 3
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 3
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 3
21990: NEG
21991: PUSH
21992: LD_INT 2
21994: NEG
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22025: LD_ADDR_VAR 0 30
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 1
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22303: LD_ADDR_VAR 0 31
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 2
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 2
22468: NEG
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 2
22480: NEG
22481: PUSH
22482: LD_INT 2
22484: NEG
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 3
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 3
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 3
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 3
22546: NEG
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22581: LD_ADDR_VAR 0 32
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: NEG
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 2
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 3
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: LD_INT 2
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: NEG
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 3
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22859: LD_ADDR_VAR 0 33
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 2
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: LD_INT 3
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 3
23103: NEG
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23138: LD_ADDR_VAR 0 34
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 3
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: LD_INT 3
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: NEG
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 3
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23418: LD_ADDR_VAR 0 35
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23530: LD_ADDR_VAR 0 36
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23642: LD_ADDR_VAR 0 37
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23754: LD_ADDR_VAR 0 38
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23866: LD_ADDR_VAR 0 39
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23978: LD_ADDR_VAR 0 40
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24090: LD_ADDR_VAR 0 41
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: NEG
24281: PUSH
24282: LD_INT 3
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 3
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 3
24364: NEG
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: NEG
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24440: LD_ADDR_VAR 0 42
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: NEG
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: LD_INT 3
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: LD_INT 3
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 3
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: NEG
24750: PUSH
24751: LD_INT 3
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24790: LD_ADDR_VAR 0 43
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: NEG
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 3
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 3
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 2
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 3
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25138: LD_ADDR_VAR 0 44
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 3
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 3
25412: NEG
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25488: LD_ADDR_VAR 0 45
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: LD_INT 3
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: LD_INT 3
25694: NEG
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 3
25785: NEG
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 3
25797: NEG
25798: PUSH
25799: LD_INT 3
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25838: LD_ADDR_VAR 0 46
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 3
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 3
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: NEG
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26186: LD_ADDR_VAR 0 47
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26337: LD_ADDR_VAR 0 48
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26484: LD_ADDR_VAR 0 49
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26628: LD_ADDR_VAR 0 50
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26772: LD_ADDR_VAR 0 51
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26919: LD_ADDR_VAR 0 52
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 2
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27070: LD_ADDR_VAR 0 53
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27300: LD_ADDR_VAR 0 54
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27530: LD_ADDR_VAR 0 55
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: NEG
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27760: LD_ADDR_VAR 0 56
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 2
27936: NEG
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27990: LD_ADDR_VAR 0 57
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 2
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28220: LD_ADDR_VAR 0 58
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28450: LD_ADDR_VAR 0 59
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28538: LD_ADDR_VAR 0 60
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28626: LD_ADDR_VAR 0 61
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28714: LD_ADDR_VAR 0 62
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28802: LD_ADDR_VAR 0 63
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28890: LD_ADDR_VAR 0 64
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
// end ; 1 :
28978: GO 34875
28980: LD_INT 1
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 31611
28988: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28989: LD_ADDR_VAR 0 11
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 3
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 3
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29033: LD_ADDR_VAR 0 12
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29074: LD_ADDR_VAR 0 13
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29114: LD_ADDR_VAR 0 14
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29155: LD_ADDR_VAR 0 15
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: NEG
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29199: LD_ADDR_VAR 0 16
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 3
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: NEG
29231: PUSH
29232: LD_INT 3
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29245: LD_ADDR_VAR 0 17
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 3
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29289: LD_ADDR_VAR 0 18
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 3
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29330: LD_ADDR_VAR 0 19
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29370: LD_ADDR_VAR 0 20
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29411: LD_ADDR_VAR 0 21
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29455: LD_ADDR_VAR 0 22
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 3
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29501: LD_ADDR_VAR 0 23
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 4
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29545: LD_ADDR_VAR 0 24
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29586: LD_ADDR_VAR 0 25
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29626: LD_ADDR_VAR 0 26
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 4
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29667: LD_ADDR_VAR 0 27
29671: PUSH
29672: LD_INT 3
29674: NEG
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 4
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29711: LD_ADDR_VAR 0 28
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: LD_INT 3
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: LD_INT 4
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 4
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29757: LD_ADDR_VAR 0 29
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 4
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: LD_INT 5
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 5
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 4
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 6
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 6
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 5
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29912: LD_ADDR_VAR 0 30
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 4
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 4
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 5
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 5
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 6
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 6
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30055: LD_ADDR_VAR 0 31
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 4
30102: PUSH
30103: LD_INT 4
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 5
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 5
30132: PUSH
30133: LD_INT 5
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 6
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 6
30162: PUSH
30163: LD_INT 6
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30194: LD_ADDR_VAR 0 32
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 5
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 6
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 6
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 5
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30337: LD_ADDR_VAR 0 33
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: NEG
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 5
30423: NEG
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: NEG
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 5
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 6
30457: NEG
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 6
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30492: LD_ADDR_VAR 0 34
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 3
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 3
30511: NEG
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 3
30523: NEG
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: LD_INT 4
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 4
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: LD_INT 4
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: NEG
30572: PUSH
30573: LD_INT 5
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 5
30583: NEG
30584: PUSH
30585: LD_INT 4
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 5
30595: NEG
30596: PUSH
30597: LD_INT 5
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 5
30607: NEG
30608: PUSH
30609: LD_INT 6
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 6
30619: NEG
30620: PUSH
30621: LD_INT 5
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 6
30631: NEG
30632: PUSH
30633: LD_INT 6
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30655: LD_ADDR_VAR 0 41
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30699: LD_ADDR_VAR 0 42
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30740: LD_ADDR_VAR 0 43
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30780: LD_ADDR_VAR 0 44
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30821: LD_ADDR_VAR 0 45
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30865: LD_ADDR_VAR 0 46
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30911: LD_ADDR_VAR 0 47
30915: PUSH
30916: LD_INT 2
30918: NEG
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30944: LD_ADDR_VAR 0 48
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30975: LD_ADDR_VAR 0 49
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31004: LD_ADDR_VAR 0 50
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31033: LD_ADDR_VAR 0 51
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31064: LD_ADDR_VAR 0 52
31068: PUSH
31069: LD_INT 3
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 3
31083: NEG
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31097: LD_ADDR_VAR 0 53
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31141: LD_ADDR_VAR 0 54
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31182: LD_ADDR_VAR 0 55
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 3
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31222: LD_ADDR_VAR 0 56
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31263: LD_ADDR_VAR 0 57
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31307: LD_ADDR_VAR 0 58
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: LD_INT 3
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 3
31326: NEG
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31353: LD_ADDR_VAR 0 59
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31397: LD_ADDR_VAR 0 60
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31438: LD_ADDR_VAR 0 61
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31478: LD_ADDR_VAR 0 62
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31519: LD_ADDR_VAR 0 63
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31563: LD_ADDR_VAR 0 64
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: NEG
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// end ; 2 :
31609: GO 34875
31611: LD_INT 2
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 34874
31619: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31620: LD_ADDR_VAR 0 29
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 4
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 4
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 4
31959: NEG
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 4
31970: NEG
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 4
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 4
32005: NEG
32006: PUSH
32007: LD_INT 4
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: NEG
32018: PUSH
32019: LD_INT 5
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 3
32029: NEG
32030: PUSH
32031: LD_INT 4
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 3
32041: NEG
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 4
32053: NEG
32054: PUSH
32055: LD_INT 3
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 5
32065: NEG
32066: PUSH
32067: LD_INT 4
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 5
32077: NEG
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: LD_INT 5
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: NEG
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32158: LD_ADDR_VAR 0 30
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 5
32185: PUSH
32186: LD_INT 4
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: LD_INT 5
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 5
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 4
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 4
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 4
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 5
32404: NEG
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: NEG
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 5
32427: NEG
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: NEG
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 4
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 4
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 5
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 3
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 4
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 5
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 3
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 5
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32705: LD_ADDR_VAR 0 31
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: LD_INT 4
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 5
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 4
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 5
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 3
32816: NEG
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 4
32872: NEG
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: NEG
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: LD_INT 5
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: LD_INT 4
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: LD_INT 3
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: LD_INT 4
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 5
32979: NEG
32980: PUSH
32981: LD_INT 5
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 5
33003: NEG
33004: PUSH
33005: LD_INT 3
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 3
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: LD_INT 4
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 4
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 5
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33255: LD_ADDR_VAR 0 32
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 4
33273: NEG
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: NEG
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 5
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: LD_INT 4
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 3
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: LD_INT 4
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 4
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 4
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 5
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 4
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 4
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 5
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 5
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 4
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 4
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 5
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 4
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 5
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33802: LD_ADDR_VAR 0 33
33806: PUSH
33807: LD_INT 4
33809: NEG
33810: PUSH
33811: LD_INT 4
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: LD_INT 5
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 4
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: LD_INT 3
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 5
33869: NEG
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 5
33881: NEG
33882: PUSH
33883: LD_INT 5
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 5
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 5
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 4
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 4
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 5
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 5
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 4
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 4
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 4
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 5
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 4
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 5
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34340: LD_ADDR_VAR 0 34
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 4
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 5
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 4
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 5
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 3
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 4
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: LD_INT 4
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 5
34562: PUSH
34563: LD_INT 4
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: LD_INT 5
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 5
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: LD_INT 5
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 3
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: LD_INT 4
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 4
34725: NEG
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 4
34736: NEG
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 3
34748: NEG
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 4
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 5
34781: NEG
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 5
34792: NEG
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 5
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
// end ; end ;
34872: GO 34875
34874: POP
// case btype of b_depot , b_warehouse :
34875: LD_VAR 0 1
34879: PUSH
34880: LD_INT 0
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34894
34886: LD_INT 1
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 35095
34894: POP
// case nation of nation_american :
34895: LD_VAR 0 5
34899: PUSH
34900: LD_INT 1
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34964
34908: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34909: LD_ADDR_VAR 0 9
34913: PUSH
34914: LD_VAR 0 11
34918: PUSH
34919: LD_VAR 0 12
34923: PUSH
34924: LD_VAR 0 13
34928: PUSH
34929: LD_VAR 0 14
34933: PUSH
34934: LD_VAR 0 15
34938: PUSH
34939: LD_VAR 0 16
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: PUSH
34952: LD_VAR 0 4
34956: PUSH
34957: LD_INT 1
34959: PLUS
34960: ARRAY
34961: ST_TO_ADDR
34962: GO 35093
34964: LD_INT 2
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 35028
34972: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34973: LD_ADDR_VAR 0 9
34977: PUSH
34978: LD_VAR 0 17
34982: PUSH
34983: LD_VAR 0 18
34987: PUSH
34988: LD_VAR 0 19
34992: PUSH
34993: LD_VAR 0 20
34997: PUSH
34998: LD_VAR 0 21
35002: PUSH
35003: LD_VAR 0 22
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: PUSH
35016: LD_VAR 0 4
35020: PUSH
35021: LD_INT 1
35023: PLUS
35024: ARRAY
35025: ST_TO_ADDR
35026: GO 35093
35028: LD_INT 3
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35092
35036: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_VAR 0 23
35046: PUSH
35047: LD_VAR 0 24
35051: PUSH
35052: LD_VAR 0 25
35056: PUSH
35057: LD_VAR 0 26
35061: PUSH
35062: LD_VAR 0 27
35066: PUSH
35067: LD_VAR 0 28
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: PUSH
35080: LD_VAR 0 4
35084: PUSH
35085: LD_INT 1
35087: PLUS
35088: ARRAY
35089: ST_TO_ADDR
35090: GO 35093
35092: POP
35093: GO 35648
35095: LD_INT 2
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35109
35101: LD_INT 3
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35165
35109: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_VAR 0 29
35119: PUSH
35120: LD_VAR 0 30
35124: PUSH
35125: LD_VAR 0 31
35129: PUSH
35130: LD_VAR 0 32
35134: PUSH
35135: LD_VAR 0 33
35139: PUSH
35140: LD_VAR 0 34
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: PUSH
35153: LD_VAR 0 4
35157: PUSH
35158: LD_INT 1
35160: PLUS
35161: ARRAY
35162: ST_TO_ADDR
35163: GO 35648
35165: LD_INT 16
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35227
35171: LD_INT 17
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35227
35177: LD_INT 18
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35227
35183: LD_INT 19
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35227
35189: LD_INT 22
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35227
35195: LD_INT 20
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35227
35201: LD_INT 21
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35227
35207: LD_INT 23
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35227
35213: LD_INT 24
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35227
35219: LD_INT 25
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35283
35227: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 35
35237: PUSH
35238: LD_VAR 0 36
35242: PUSH
35243: LD_VAR 0 37
35247: PUSH
35248: LD_VAR 0 38
35252: PUSH
35253: LD_VAR 0 39
35257: PUSH
35258: LD_VAR 0 40
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: ARRAY
35280: ST_TO_ADDR
35281: GO 35648
35283: LD_INT 6
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35339
35289: LD_INT 7
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35339
35295: LD_INT 8
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35339
35301: LD_INT 13
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35339
35307: LD_INT 12
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35339
35313: LD_INT 15
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35339
35319: LD_INT 11
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35339
35325: LD_INT 14
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35339
35331: LD_INT 10
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35395
35339: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: LD_VAR 0 41
35349: PUSH
35350: LD_VAR 0 42
35354: PUSH
35355: LD_VAR 0 43
35359: PUSH
35360: LD_VAR 0 44
35364: PUSH
35365: LD_VAR 0 45
35369: PUSH
35370: LD_VAR 0 46
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: LD_VAR 0 4
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: ARRAY
35392: ST_TO_ADDR
35393: GO 35648
35395: LD_INT 36
35397: DOUBLE
35398: EQUAL
35399: IFTRUE 35403
35401: GO 35459
35403: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_VAR 0 47
35413: PUSH
35414: LD_VAR 0 48
35418: PUSH
35419: LD_VAR 0 49
35423: PUSH
35424: LD_VAR 0 50
35428: PUSH
35429: LD_VAR 0 51
35433: PUSH
35434: LD_VAR 0 52
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: PUSH
35447: LD_VAR 0 4
35451: PUSH
35452: LD_INT 1
35454: PLUS
35455: ARRAY
35456: ST_TO_ADDR
35457: GO 35648
35459: LD_INT 4
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35485
35465: LD_INT 5
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35485
35471: LD_INT 34
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35485
35477: LD_INT 37
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35485
35483: GO 35541
35485: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_VAR 0 53
35495: PUSH
35496: LD_VAR 0 54
35500: PUSH
35501: LD_VAR 0 55
35505: PUSH
35506: LD_VAR 0 56
35510: PUSH
35511: LD_VAR 0 57
35515: PUSH
35516: LD_VAR 0 58
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: PUSH
35529: LD_VAR 0 4
35533: PUSH
35534: LD_INT 1
35536: PLUS
35537: ARRAY
35538: ST_TO_ADDR
35539: GO 35648
35541: LD_INT 31
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35591
35547: LD_INT 32
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35591
35553: LD_INT 33
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35591
35559: LD_INT 27
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35591
35565: LD_INT 26
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35591
35571: LD_INT 28
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35591
35577: LD_INT 29
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35591
35583: LD_INT 30
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35647
35591: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35592: LD_ADDR_VAR 0 9
35596: PUSH
35597: LD_VAR 0 59
35601: PUSH
35602: LD_VAR 0 60
35606: PUSH
35607: LD_VAR 0 61
35611: PUSH
35612: LD_VAR 0 62
35616: PUSH
35617: LD_VAR 0 63
35621: PUSH
35622: LD_VAR 0 64
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: LD_VAR 0 4
35639: PUSH
35640: LD_INT 1
35642: PLUS
35643: ARRAY
35644: ST_TO_ADDR
35645: GO 35648
35647: POP
// temp_list2 = [ ] ;
35648: LD_ADDR_VAR 0 10
35652: PUSH
35653: EMPTY
35654: ST_TO_ADDR
// for i in temp_list do
35655: LD_ADDR_VAR 0 8
35659: PUSH
35660: LD_VAR 0 9
35664: PUSH
35665: FOR_IN
35666: IFFALSE 35718
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35668: LD_ADDR_VAR 0 10
35672: PUSH
35673: LD_VAR 0 10
35677: PUSH
35678: LD_VAR 0 8
35682: PUSH
35683: LD_INT 1
35685: ARRAY
35686: PUSH
35687: LD_VAR 0 2
35691: PLUS
35692: PUSH
35693: LD_VAR 0 8
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PUSH
35702: LD_VAR 0 3
35706: PLUS
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: ADD
35715: ST_TO_ADDR
35716: GO 35665
35718: POP
35719: POP
// result = temp_list2 ;
35720: LD_ADDR_VAR 0 7
35724: PUSH
35725: LD_VAR 0 10
35729: ST_TO_ADDR
// end ;
35730: LD_VAR 0 7
35734: RET
// export function EnemyInRange ( unit , dist ) ; begin
35735: LD_INT 0
35737: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35738: LD_ADDR_VAR 0 3
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 255
35752: PPUSH
35753: LD_VAR 0 1
35757: PPUSH
35758: CALL_OW 250
35762: PPUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: CALL_OW 251
35772: PPUSH
35773: LD_VAR 0 2
35777: PPUSH
35778: CALL 9108 0 4
35782: PUSH
35783: LD_INT 4
35785: ARRAY
35786: ST_TO_ADDR
// end ;
35787: LD_VAR 0 3
35791: RET
// export function PlayerSeeMe ( unit ) ; begin
35792: LD_INT 0
35794: PPUSH
// result := See ( your_side , unit ) ;
35795: LD_ADDR_VAR 0 2
35799: PUSH
35800: LD_OWVAR 2
35804: PPUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 292
35814: ST_TO_ADDR
// end ;
35815: LD_VAR 0 2
35819: RET
// export function ReverseDir ( unit ) ; begin
35820: LD_INT 0
35822: PPUSH
// if not unit then
35823: LD_VAR 0 1
35827: NOT
35828: IFFALSE 35832
// exit ;
35830: GO 35855
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35832: LD_ADDR_VAR 0 2
35836: PUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 254
35846: PUSH
35847: LD_INT 3
35849: PLUS
35850: PUSH
35851: LD_INT 6
35853: MOD
35854: ST_TO_ADDR
// end ;
35855: LD_VAR 0 2
35859: RET
// export function ReverseArray ( array ) ; var i ; begin
35860: LD_INT 0
35862: PPUSH
35863: PPUSH
// if not array then
35864: LD_VAR 0 1
35868: NOT
35869: IFFALSE 35873
// exit ;
35871: GO 35928
// result := [ ] ;
35873: LD_ADDR_VAR 0 2
35877: PUSH
35878: EMPTY
35879: ST_TO_ADDR
// for i := array downto 1 do
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: DOUBLE
35886: LD_VAR 0 1
35890: INC
35891: ST_TO_ADDR
35892: LD_INT 1
35894: PUSH
35895: FOR_DOWNTO
35896: IFFALSE 35926
// result := Join ( result , array [ i ] ) ;
35898: LD_ADDR_VAR 0 2
35902: PUSH
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 1
35912: PUSH
35913: LD_VAR 0 3
35917: ARRAY
35918: PPUSH
35919: CALL 40573 0 2
35923: ST_TO_ADDR
35924: GO 35895
35926: POP
35927: POP
// end ;
35928: LD_VAR 0 2
35932: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35933: LD_INT 0
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
// if not unit or not hexes then
35941: LD_VAR 0 1
35945: NOT
35946: PUSH
35947: LD_VAR 0 2
35951: NOT
35952: OR
35953: IFFALSE 35957
// exit ;
35955: GO 36080
// dist := 9999 ;
35957: LD_ADDR_VAR 0 5
35961: PUSH
35962: LD_INT 9999
35964: ST_TO_ADDR
// for i = 1 to hexes do
35965: LD_ADDR_VAR 0 4
35969: PUSH
35970: DOUBLE
35971: LD_INT 1
35973: DEC
35974: ST_TO_ADDR
35975: LD_VAR 0 2
35979: PUSH
35980: FOR_TO
35981: IFFALSE 36068
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35983: LD_ADDR_VAR 0 6
35987: PUSH
35988: LD_VAR 0 1
35992: PPUSH
35993: LD_VAR 0 2
35997: PUSH
35998: LD_VAR 0 4
36002: ARRAY
36003: PUSH
36004: LD_INT 1
36006: ARRAY
36007: PPUSH
36008: LD_VAR 0 2
36012: PUSH
36013: LD_VAR 0 4
36017: ARRAY
36018: PUSH
36019: LD_INT 2
36021: ARRAY
36022: PPUSH
36023: CALL_OW 297
36027: ST_TO_ADDR
// if tdist < dist then
36028: LD_VAR 0 6
36032: PUSH
36033: LD_VAR 0 5
36037: LESS
36038: IFFALSE 36066
// begin hex := hexes [ i ] ;
36040: LD_ADDR_VAR 0 8
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_VAR 0 4
36054: ARRAY
36055: ST_TO_ADDR
// dist := tdist ;
36056: LD_ADDR_VAR 0 5
36060: PUSH
36061: LD_VAR 0 6
36065: ST_TO_ADDR
// end ; end ;
36066: GO 35980
36068: POP
36069: POP
// result := hex ;
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_VAR 0 8
36079: ST_TO_ADDR
// end ;
36080: LD_VAR 0 3
36084: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36085: LD_INT 0
36087: PPUSH
36088: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36089: LD_VAR 0 1
36093: NOT
36094: PUSH
36095: LD_VAR 0 1
36099: PUSH
36100: LD_INT 21
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 23
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PPUSH
36124: CALL_OW 69
36128: IN
36129: NOT
36130: OR
36131: IFFALSE 36135
// exit ;
36133: GO 36182
// for i = 1 to 3 do
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: DOUBLE
36141: LD_INT 1
36143: DEC
36144: ST_TO_ADDR
36145: LD_INT 3
36147: PUSH
36148: FOR_TO
36149: IFFALSE 36180
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 250
36160: PPUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 251
36170: PPUSH
36171: LD_INT 1
36173: PPUSH
36174: CALL_OW 453
36178: GO 36148
36180: POP
36181: POP
// end ;
36182: LD_VAR 0 2
36186: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
// if not unit or not enemy_unit then
36195: LD_VAR 0 1
36199: NOT
36200: PUSH
36201: LD_VAR 0 2
36205: NOT
36206: OR
36207: IFFALSE 36211
// exit ;
36209: GO 36678
// if GetLives ( i ) < 250 then
36211: LD_VAR 0 4
36215: PPUSH
36216: CALL_OW 256
36220: PUSH
36221: LD_INT 250
36223: LESS
36224: IFFALSE 36237
// begin ComAutodestruct ( i ) ;
36226: LD_VAR 0 4
36230: PPUSH
36231: CALL 36085 0 1
// exit ;
36235: GO 36678
// end ; x := GetX ( enemy_unit ) ;
36237: LD_ADDR_VAR 0 7
36241: PUSH
36242: LD_VAR 0 2
36246: PPUSH
36247: CALL_OW 250
36251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36252: LD_ADDR_VAR 0 8
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: CALL_OW 251
36266: ST_TO_ADDR
// if not x or not y then
36267: LD_VAR 0 7
36271: NOT
36272: PUSH
36273: LD_VAR 0 8
36277: NOT
36278: OR
36279: IFFALSE 36283
// exit ;
36281: GO 36678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36283: LD_ADDR_VAR 0 6
36287: PUSH
36288: LD_VAR 0 7
36292: PPUSH
36293: LD_INT 0
36295: PPUSH
36296: LD_INT 4
36298: PPUSH
36299: CALL_OW 272
36303: PUSH
36304: LD_VAR 0 8
36308: PPUSH
36309: LD_INT 0
36311: PPUSH
36312: LD_INT 4
36314: PPUSH
36315: CALL_OW 273
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_VAR 0 7
36328: PPUSH
36329: LD_INT 1
36331: PPUSH
36332: LD_INT 4
36334: PPUSH
36335: CALL_OW 272
36339: PUSH
36340: LD_VAR 0 8
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: LD_INT 4
36350: PPUSH
36351: CALL_OW 273
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 7
36364: PPUSH
36365: LD_INT 2
36367: PPUSH
36368: LD_INT 4
36370: PPUSH
36371: CALL_OW 272
36375: PUSH
36376: LD_VAR 0 8
36380: PPUSH
36381: LD_INT 2
36383: PPUSH
36384: LD_INT 4
36386: PPUSH
36387: CALL_OW 273
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 7
36400: PPUSH
36401: LD_INT 3
36403: PPUSH
36404: LD_INT 4
36406: PPUSH
36407: CALL_OW 272
36411: PUSH
36412: LD_VAR 0 8
36416: PPUSH
36417: LD_INT 3
36419: PPUSH
36420: LD_INT 4
36422: PPUSH
36423: CALL_OW 273
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_VAR 0 7
36436: PPUSH
36437: LD_INT 4
36439: PPUSH
36440: LD_INT 4
36442: PPUSH
36443: CALL_OW 272
36447: PUSH
36448: LD_VAR 0 8
36452: PPUSH
36453: LD_INT 4
36455: PPUSH
36456: LD_INT 4
36458: PPUSH
36459: CALL_OW 273
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_INT 5
36475: PPUSH
36476: LD_INT 4
36478: PPUSH
36479: CALL_OW 272
36483: PUSH
36484: LD_VAR 0 8
36488: PPUSH
36489: LD_INT 5
36491: PPUSH
36492: LD_INT 4
36494: PPUSH
36495: CALL_OW 273
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// for i = tmp downto 1 do
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: DOUBLE
36518: LD_VAR 0 6
36522: INC
36523: ST_TO_ADDR
36524: LD_INT 1
36526: PUSH
36527: FOR_DOWNTO
36528: IFFALSE 36629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36530: LD_VAR 0 6
36534: PUSH
36535: LD_VAR 0 4
36539: ARRAY
36540: PUSH
36541: LD_INT 1
36543: ARRAY
36544: PPUSH
36545: LD_VAR 0 6
36549: PUSH
36550: LD_VAR 0 4
36554: ARRAY
36555: PUSH
36556: LD_INT 2
36558: ARRAY
36559: PPUSH
36560: CALL_OW 488
36564: NOT
36565: PUSH
36566: LD_VAR 0 6
36570: PUSH
36571: LD_VAR 0 4
36575: ARRAY
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: PPUSH
36581: LD_VAR 0 6
36585: PUSH
36586: LD_VAR 0 4
36590: ARRAY
36591: PUSH
36592: LD_INT 2
36594: ARRAY
36595: PPUSH
36596: CALL_OW 428
36600: PUSH
36601: LD_INT 0
36603: NONEQUAL
36604: OR
36605: IFFALSE 36627
// tmp := Delete ( tmp , i ) ;
36607: LD_ADDR_VAR 0 6
36611: PUSH
36612: LD_VAR 0 6
36616: PPUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: CALL_OW 3
36626: ST_TO_ADDR
36627: GO 36527
36629: POP
36630: POP
// j := GetClosestHex ( unit , tmp ) ;
36631: LD_ADDR_VAR 0 5
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: LD_VAR 0 6
36645: PPUSH
36646: CALL 35933 0 2
36650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_VAR 0 5
36660: PUSH
36661: LD_INT 1
36663: ARRAY
36664: PPUSH
36665: LD_VAR 0 5
36669: PUSH
36670: LD_INT 2
36672: ARRAY
36673: PPUSH
36674: CALL_OW 111
// end ;
36678: LD_VAR 0 3
36682: RET
// export function PrepareApemanSoldier ( ) ; begin
36683: LD_INT 0
36685: PPUSH
// uc_nation := 0 ;
36686: LD_ADDR_OWVAR 21
36690: PUSH
36691: LD_INT 0
36693: ST_TO_ADDR
// hc_sex := sex_male ;
36694: LD_ADDR_OWVAR 27
36698: PUSH
36699: LD_INT 1
36701: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36702: LD_ADDR_OWVAR 28
36706: PUSH
36707: LD_INT 15
36709: ST_TO_ADDR
// hc_gallery :=  ;
36710: LD_ADDR_OWVAR 33
36714: PUSH
36715: LD_STRING 
36717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36718: LD_ADDR_OWVAR 31
36722: PUSH
36723: LD_INT 0
36725: PPUSH
36726: LD_INT 3
36728: PPUSH
36729: CALL_OW 12
36733: PUSH
36734: LD_INT 0
36736: PPUSH
36737: LD_INT 3
36739: PPUSH
36740: CALL_OW 12
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// end ;
36757: LD_VAR 0 1
36761: RET
// export function PrepareApemanEngineer ( ) ; begin
36762: LD_INT 0
36764: PPUSH
// uc_nation := 0 ;
36765: LD_ADDR_OWVAR 21
36769: PUSH
36770: LD_INT 0
36772: ST_TO_ADDR
// hc_sex := sex_male ;
36773: LD_ADDR_OWVAR 27
36777: PUSH
36778: LD_INT 1
36780: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36781: LD_ADDR_OWVAR 28
36785: PUSH
36786: LD_INT 16
36788: ST_TO_ADDR
// hc_gallery :=  ;
36789: LD_ADDR_OWVAR 33
36793: PUSH
36794: LD_STRING 
36796: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36797: LD_ADDR_OWVAR 31
36801: PUSH
36802: LD_INT 0
36804: PPUSH
36805: LD_INT 3
36807: PPUSH
36808: CALL_OW 12
36812: PUSH
36813: LD_INT 0
36815: PPUSH
36816: LD_INT 3
36818: PPUSH
36819: CALL_OW 12
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: ST_TO_ADDR
// end ;
36836: LD_VAR 0 1
36840: RET
// export function PrepareApeman ( agressivity ) ; begin
36841: LD_INT 0
36843: PPUSH
// uc_side := 0 ;
36844: LD_ADDR_OWVAR 20
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// uc_nation := 0 ;
36852: LD_ADDR_OWVAR 21
36856: PUSH
36857: LD_INT 0
36859: ST_TO_ADDR
// hc_sex := sex_male ;
36860: LD_ADDR_OWVAR 27
36864: PUSH
36865: LD_INT 1
36867: ST_TO_ADDR
// hc_class := class_apeman ;
36868: LD_ADDR_OWVAR 28
36872: PUSH
36873: LD_INT 12
36875: ST_TO_ADDR
// hc_gallery :=  ;
36876: LD_ADDR_OWVAR 33
36880: PUSH
36881: LD_STRING 
36883: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36884: LD_ADDR_OWVAR 35
36888: PUSH
36889: LD_VAR 0 1
36893: NEG
36894: PPUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 12
36904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36905: LD_ADDR_OWVAR 31
36909: PUSH
36910: LD_INT 0
36912: PPUSH
36913: LD_INT 3
36915: PPUSH
36916: CALL_OW 12
36920: PUSH
36921: LD_INT 0
36923: PPUSH
36924: LD_INT 3
36926: PPUSH
36927: CALL_OW 12
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// end ;
36944: LD_VAR 0 2
36948: RET
// export function PrepareTiger ( agressivity ) ; begin
36949: LD_INT 0
36951: PPUSH
// uc_side := 0 ;
36952: LD_ADDR_OWVAR 20
36956: PUSH
36957: LD_INT 0
36959: ST_TO_ADDR
// uc_nation := 0 ;
36960: LD_ADDR_OWVAR 21
36964: PUSH
36965: LD_INT 0
36967: ST_TO_ADDR
// hc_class := class_tiger ;
36968: LD_ADDR_OWVAR 28
36972: PUSH
36973: LD_INT 14
36975: ST_TO_ADDR
// hc_gallery :=  ;
36976: LD_ADDR_OWVAR 33
36980: PUSH
36981: LD_STRING 
36983: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36984: LD_ADDR_OWVAR 35
36988: PUSH
36989: LD_VAR 0 1
36993: NEG
36994: PPUSH
36995: LD_VAR 0 1
36999: PPUSH
37000: CALL_OW 12
37004: ST_TO_ADDR
// end ;
37005: LD_VAR 0 2
37009: RET
// export function PrepareEnchidna ( ) ; begin
37010: LD_INT 0
37012: PPUSH
// uc_side := 0 ;
37013: LD_ADDR_OWVAR 20
37017: PUSH
37018: LD_INT 0
37020: ST_TO_ADDR
// uc_nation := 0 ;
37021: LD_ADDR_OWVAR 21
37025: PUSH
37026: LD_INT 0
37028: ST_TO_ADDR
// hc_class := class_baggie ;
37029: LD_ADDR_OWVAR 28
37033: PUSH
37034: LD_INT 13
37036: ST_TO_ADDR
// hc_gallery :=  ;
37037: LD_ADDR_OWVAR 33
37041: PUSH
37042: LD_STRING 
37044: ST_TO_ADDR
// end ;
37045: LD_VAR 0 1
37049: RET
// export function PrepareFrog ( ) ; begin
37050: LD_INT 0
37052: PPUSH
// uc_side := 0 ;
37053: LD_ADDR_OWVAR 20
37057: PUSH
37058: LD_INT 0
37060: ST_TO_ADDR
// uc_nation := 0 ;
37061: LD_ADDR_OWVAR 21
37065: PUSH
37066: LD_INT 0
37068: ST_TO_ADDR
// hc_class := class_frog ;
37069: LD_ADDR_OWVAR 28
37073: PUSH
37074: LD_INT 19
37076: ST_TO_ADDR
// hc_gallery :=  ;
37077: LD_ADDR_OWVAR 33
37081: PUSH
37082: LD_STRING 
37084: ST_TO_ADDR
// end ;
37085: LD_VAR 0 1
37089: RET
// export function PrepareFish ( ) ; begin
37090: LD_INT 0
37092: PPUSH
// uc_side := 0 ;
37093: LD_ADDR_OWVAR 20
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// uc_nation := 0 ;
37101: LD_ADDR_OWVAR 21
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// hc_class := class_fish ;
37109: LD_ADDR_OWVAR 28
37113: PUSH
37114: LD_INT 20
37116: ST_TO_ADDR
// hc_gallery :=  ;
37117: LD_ADDR_OWVAR 33
37121: PUSH
37122: LD_STRING 
37124: ST_TO_ADDR
// end ;
37125: LD_VAR 0 1
37129: RET
// export function PrepareBird ( ) ; begin
37130: LD_INT 0
37132: PPUSH
// uc_side := 0 ;
37133: LD_ADDR_OWVAR 20
37137: PUSH
37138: LD_INT 0
37140: ST_TO_ADDR
// uc_nation := 0 ;
37141: LD_ADDR_OWVAR 21
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// hc_class := class_phororhacos ;
37149: LD_ADDR_OWVAR 28
37153: PUSH
37154: LD_INT 18
37156: ST_TO_ADDR
// hc_gallery :=  ;
37157: LD_ADDR_OWVAR 33
37161: PUSH
37162: LD_STRING 
37164: ST_TO_ADDR
// end ;
37165: LD_VAR 0 1
37169: RET
// export function PrepareHorse ( ) ; begin
37170: LD_INT 0
37172: PPUSH
// uc_side := 0 ;
37173: LD_ADDR_OWVAR 20
37177: PUSH
37178: LD_INT 0
37180: ST_TO_ADDR
// uc_nation := 0 ;
37181: LD_ADDR_OWVAR 21
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// hc_class := class_horse ;
37189: LD_ADDR_OWVAR 28
37193: PUSH
37194: LD_INT 21
37196: ST_TO_ADDR
// hc_gallery :=  ;
37197: LD_ADDR_OWVAR 33
37201: PUSH
37202: LD_STRING 
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 1
37209: RET
// export function PrepareMastodont ( ) ; begin
37210: LD_INT 0
37212: PPUSH
// uc_side := 0 ;
37213: LD_ADDR_OWVAR 20
37217: PUSH
37218: LD_INT 0
37220: ST_TO_ADDR
// uc_nation := 0 ;
37221: LD_ADDR_OWVAR 21
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37229: LD_ADDR_OWVAR 37
37233: PUSH
37234: LD_INT 31
37236: ST_TO_ADDR
// vc_control := control_rider ;
37237: LD_ADDR_OWVAR 38
37241: PUSH
37242: LD_INT 4
37244: ST_TO_ADDR
// end ;
37245: LD_VAR 0 1
37249: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37250: LD_INT 0
37252: PPUSH
37253: PPUSH
37254: PPUSH
// uc_side = 0 ;
37255: LD_ADDR_OWVAR 20
37259: PUSH
37260: LD_INT 0
37262: ST_TO_ADDR
// uc_nation = 0 ;
37263: LD_ADDR_OWVAR 21
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
// InitHc_All ( ) ;
37271: CALL_OW 584
// InitVc ;
37275: CALL_OW 20
// if mastodonts then
37279: LD_VAR 0 6
37283: IFFALSE 37350
// for i = 1 to mastodonts do
37285: LD_ADDR_VAR 0 11
37289: PUSH
37290: DOUBLE
37291: LD_INT 1
37293: DEC
37294: ST_TO_ADDR
37295: LD_VAR 0 6
37299: PUSH
37300: FOR_TO
37301: IFFALSE 37348
// begin vc_chassis := 31 ;
37303: LD_ADDR_OWVAR 37
37307: PUSH
37308: LD_INT 31
37310: ST_TO_ADDR
// vc_control := control_rider ;
37311: LD_ADDR_OWVAR 38
37315: PUSH
37316: LD_INT 4
37318: ST_TO_ADDR
// animal := CreateVehicle ;
37319: LD_ADDR_VAR 0 12
37323: PUSH
37324: CALL_OW 45
37328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37329: LD_VAR 0 12
37333: PPUSH
37334: LD_VAR 0 8
37338: PPUSH
37339: LD_INT 0
37341: PPUSH
37342: CALL 39478 0 3
// end ;
37346: GO 37300
37348: POP
37349: POP
// if horses then
37350: LD_VAR 0 5
37354: IFFALSE 37421
// for i = 1 to horses do
37356: LD_ADDR_VAR 0 11
37360: PUSH
37361: DOUBLE
37362: LD_INT 1
37364: DEC
37365: ST_TO_ADDR
37366: LD_VAR 0 5
37370: PUSH
37371: FOR_TO
37372: IFFALSE 37419
// begin hc_class := 21 ;
37374: LD_ADDR_OWVAR 28
37378: PUSH
37379: LD_INT 21
37381: ST_TO_ADDR
// hc_gallery :=  ;
37382: LD_ADDR_OWVAR 33
37386: PUSH
37387: LD_STRING 
37389: ST_TO_ADDR
// animal := CreateHuman ;
37390: LD_ADDR_VAR 0 12
37394: PUSH
37395: CALL_OW 44
37399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37400: LD_VAR 0 12
37404: PPUSH
37405: LD_VAR 0 8
37409: PPUSH
37410: LD_INT 0
37412: PPUSH
37413: CALL 39478 0 3
// end ;
37417: GO 37371
37419: POP
37420: POP
// if birds then
37421: LD_VAR 0 1
37425: IFFALSE 37492
// for i = 1 to birds do
37427: LD_ADDR_VAR 0 11
37431: PUSH
37432: DOUBLE
37433: LD_INT 1
37435: DEC
37436: ST_TO_ADDR
37437: LD_VAR 0 1
37441: PUSH
37442: FOR_TO
37443: IFFALSE 37490
// begin hc_class := 18 ;
37445: LD_ADDR_OWVAR 28
37449: PUSH
37450: LD_INT 18
37452: ST_TO_ADDR
// hc_gallery =  ;
37453: LD_ADDR_OWVAR 33
37457: PUSH
37458: LD_STRING 
37460: ST_TO_ADDR
// animal := CreateHuman ;
37461: LD_ADDR_VAR 0 12
37465: PUSH
37466: CALL_OW 44
37470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37471: LD_VAR 0 12
37475: PPUSH
37476: LD_VAR 0 8
37480: PPUSH
37481: LD_INT 0
37483: PPUSH
37484: CALL 39478 0 3
// end ;
37488: GO 37442
37490: POP
37491: POP
// if tigers then
37492: LD_VAR 0 2
37496: IFFALSE 37580
// for i = 1 to tigers do
37498: LD_ADDR_VAR 0 11
37502: PUSH
37503: DOUBLE
37504: LD_INT 1
37506: DEC
37507: ST_TO_ADDR
37508: LD_VAR 0 2
37512: PUSH
37513: FOR_TO
37514: IFFALSE 37578
// begin hc_class = class_tiger ;
37516: LD_ADDR_OWVAR 28
37520: PUSH
37521: LD_INT 14
37523: ST_TO_ADDR
// hc_gallery =  ;
37524: LD_ADDR_OWVAR 33
37528: PUSH
37529: LD_STRING 
37531: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37532: LD_ADDR_OWVAR 35
37536: PUSH
37537: LD_INT 7
37539: NEG
37540: PPUSH
37541: LD_INT 7
37543: PPUSH
37544: CALL_OW 12
37548: ST_TO_ADDR
// animal := CreateHuman ;
37549: LD_ADDR_VAR 0 12
37553: PUSH
37554: CALL_OW 44
37558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37559: LD_VAR 0 12
37563: PPUSH
37564: LD_VAR 0 8
37568: PPUSH
37569: LD_INT 0
37571: PPUSH
37572: CALL 39478 0 3
// end ;
37576: GO 37513
37578: POP
37579: POP
// if apemans then
37580: LD_VAR 0 3
37584: IFFALSE 37707
// for i = 1 to apemans do
37586: LD_ADDR_VAR 0 11
37590: PUSH
37591: DOUBLE
37592: LD_INT 1
37594: DEC
37595: ST_TO_ADDR
37596: LD_VAR 0 3
37600: PUSH
37601: FOR_TO
37602: IFFALSE 37705
// begin hc_class = class_apeman ;
37604: LD_ADDR_OWVAR 28
37608: PUSH
37609: LD_INT 12
37611: ST_TO_ADDR
// hc_gallery =  ;
37612: LD_ADDR_OWVAR 33
37616: PUSH
37617: LD_STRING 
37619: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37620: LD_ADDR_OWVAR 35
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PPUSH
37629: LD_INT 2
37631: PPUSH
37632: CALL_OW 12
37636: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37637: LD_ADDR_OWVAR 31
37641: PUSH
37642: LD_INT 1
37644: PPUSH
37645: LD_INT 3
37647: PPUSH
37648: CALL_OW 12
37652: PUSH
37653: LD_INT 1
37655: PPUSH
37656: LD_INT 3
37658: PPUSH
37659: CALL_OW 12
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// animal := CreateHuman ;
37676: LD_ADDR_VAR 0 12
37680: PUSH
37681: CALL_OW 44
37685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37686: LD_VAR 0 12
37690: PPUSH
37691: LD_VAR 0 8
37695: PPUSH
37696: LD_INT 0
37698: PPUSH
37699: CALL 39478 0 3
// end ;
37703: GO 37601
37705: POP
37706: POP
// if enchidnas then
37707: LD_VAR 0 4
37711: IFFALSE 37778
// for i = 1 to enchidnas do
37713: LD_ADDR_VAR 0 11
37717: PUSH
37718: DOUBLE
37719: LD_INT 1
37721: DEC
37722: ST_TO_ADDR
37723: LD_VAR 0 4
37727: PUSH
37728: FOR_TO
37729: IFFALSE 37776
// begin hc_class = 13 ;
37731: LD_ADDR_OWVAR 28
37735: PUSH
37736: LD_INT 13
37738: ST_TO_ADDR
// hc_gallery =  ;
37739: LD_ADDR_OWVAR 33
37743: PUSH
37744: LD_STRING 
37746: ST_TO_ADDR
// animal := CreateHuman ;
37747: LD_ADDR_VAR 0 12
37751: PUSH
37752: CALL_OW 44
37756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37757: LD_VAR 0 12
37761: PPUSH
37762: LD_VAR 0 8
37766: PPUSH
37767: LD_INT 0
37769: PPUSH
37770: CALL 39478 0 3
// end ;
37774: GO 37728
37776: POP
37777: POP
// if fishes then
37778: LD_VAR 0 7
37782: IFFALSE 37849
// for i = 1 to fishes do
37784: LD_ADDR_VAR 0 11
37788: PUSH
37789: DOUBLE
37790: LD_INT 1
37792: DEC
37793: ST_TO_ADDR
37794: LD_VAR 0 7
37798: PUSH
37799: FOR_TO
37800: IFFALSE 37847
// begin hc_class = 20 ;
37802: LD_ADDR_OWVAR 28
37806: PUSH
37807: LD_INT 20
37809: ST_TO_ADDR
// hc_gallery =  ;
37810: LD_ADDR_OWVAR 33
37814: PUSH
37815: LD_STRING 
37817: ST_TO_ADDR
// animal := CreateHuman ;
37818: LD_ADDR_VAR 0 12
37822: PUSH
37823: CALL_OW 44
37827: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37828: LD_VAR 0 12
37832: PPUSH
37833: LD_VAR 0 9
37837: PPUSH
37838: LD_INT 0
37840: PPUSH
37841: CALL 39478 0 3
// end ;
37845: GO 37799
37847: POP
37848: POP
// end ;
37849: LD_VAR 0 10
37853: RET
// export function WantHeal ( sci , unit ) ; begin
37854: LD_INT 0
37856: PPUSH
// if GetTaskList ( sci ) > 0 then
37857: LD_VAR 0 1
37861: PPUSH
37862: CALL_OW 437
37866: PUSH
37867: LD_INT 0
37869: GREATER
37870: IFFALSE 37940
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 437
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PUSH
37890: LD_STRING l
37892: EQUAL
37893: PUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: CALL_OW 437
37903: PUSH
37904: LD_INT 1
37906: ARRAY
37907: PUSH
37908: LD_INT 4
37910: ARRAY
37911: PUSH
37912: LD_VAR 0 2
37916: EQUAL
37917: AND
37918: IFFALSE 37930
// result := true else
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_INT 1
37927: ST_TO_ADDR
37928: GO 37938
// result := false ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_INT 0
37937: ST_TO_ADDR
// end else
37938: GO 37948
// result := false ;
37940: LD_ADDR_VAR 0 3
37944: PUSH
37945: LD_INT 0
37947: ST_TO_ADDR
// end ;
37948: LD_VAR 0 3
37952: RET
// export function HealTarget ( sci ) ; begin
37953: LD_INT 0
37955: PPUSH
// if not sci then
37956: LD_VAR 0 1
37960: NOT
37961: IFFALSE 37965
// exit ;
37963: GO 38030
// result := 0 ;
37965: LD_ADDR_VAR 0 2
37969: PUSH
37970: LD_INT 0
37972: ST_TO_ADDR
// if GetTaskList ( sci ) then
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 437
37982: IFFALSE 38030
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37984: LD_VAR 0 1
37988: PPUSH
37989: CALL_OW 437
37993: PUSH
37994: LD_INT 1
37996: ARRAY
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: PUSH
38002: LD_STRING l
38004: EQUAL
38005: IFFALSE 38030
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38007: LD_ADDR_VAR 0 2
38011: PUSH
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 437
38021: PUSH
38022: LD_INT 1
38024: ARRAY
38025: PUSH
38026: LD_INT 4
38028: ARRAY
38029: ST_TO_ADDR
// end ;
38030: LD_VAR 0 2
38034: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38035: LD_INT 0
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
// if not base_units then
38041: LD_VAR 0 1
38045: NOT
38046: IFFALSE 38050
// exit ;
38048: GO 38137
// result := false ;
38050: LD_ADDR_VAR 0 2
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38058: LD_ADDR_VAR 0 5
38062: PUSH
38063: LD_VAR 0 1
38067: PPUSH
38068: LD_INT 21
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PPUSH
38078: CALL_OW 72
38082: ST_TO_ADDR
// if not tmp then
38083: LD_VAR 0 5
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38137
// for i in tmp do
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_VAR 0 5
38101: PUSH
38102: FOR_IN
38103: IFFALSE 38135
// begin result := EnemyInRange ( i , 22 ) ;
38105: LD_ADDR_VAR 0 2
38109: PUSH
38110: LD_VAR 0 3
38114: PPUSH
38115: LD_INT 22
38117: PPUSH
38118: CALL 35735 0 2
38122: ST_TO_ADDR
// if result then
38123: LD_VAR 0 2
38127: IFFALSE 38133
// exit ;
38129: POP
38130: POP
38131: GO 38137
// end ;
38133: GO 38102
38135: POP
38136: POP
// end ;
38137: LD_VAR 0 2
38141: RET
// export function FilterByTag ( units , tag ) ; begin
38142: LD_INT 0
38144: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38145: LD_ADDR_VAR 0 3
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_INT 120
38157: PUSH
38158: LD_VAR 0 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PPUSH
38167: CALL_OW 72
38171: ST_TO_ADDR
// end ;
38172: LD_VAR 0 3
38176: RET
// export function IsDriver ( un ) ; begin
38177: LD_INT 0
38179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38180: LD_ADDR_VAR 0 2
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: LD_INT 55
38192: PUSH
38193: EMPTY
38194: LIST
38195: PPUSH
38196: CALL_OW 69
38200: IN
38201: ST_TO_ADDR
// end ;
38202: LD_VAR 0 2
38206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38207: LD_INT 0
38209: PPUSH
38210: PPUSH
// list := [ ] ;
38211: LD_ADDR_VAR 0 5
38215: PUSH
38216: EMPTY
38217: ST_TO_ADDR
// case d of 0 :
38218: LD_VAR 0 3
38222: PUSH
38223: LD_INT 0
38225: DOUBLE
38226: EQUAL
38227: IFTRUE 38231
38229: GO 38364
38231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38232: LD_ADDR_VAR 0 5
38236: PUSH
38237: LD_VAR 0 1
38241: PUSH
38242: LD_INT 4
38244: MINUS
38245: PUSH
38246: LD_VAR 0 2
38250: PUSH
38251: LD_INT 4
38253: MINUS
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_VAR 0 1
38267: PUSH
38268: LD_INT 3
38270: MINUS
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: PUSH
38285: LD_VAR 0 1
38289: PUSH
38290: LD_INT 4
38292: PLUS
38293: PUSH
38294: LD_VAR 0 2
38298: PUSH
38299: LD_INT 4
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_INT 3
38314: PLUS
38315: PUSH
38316: LD_VAR 0 2
38320: PUSH
38321: LD_INT 3
38323: PLUS
38324: PUSH
38325: LD_INT 5
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_VAR 0 2
38342: PUSH
38343: LD_INT 4
38345: PLUS
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// end ; 1 :
38362: GO 39062
38364: LD_INT 1
38366: DOUBLE
38367: EQUAL
38368: IFTRUE 38372
38370: GO 38505
38372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 1
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_INT 4
38390: MINUS
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: PUSH
38400: LD_VAR 0 1
38404: PUSH
38405: LD_INT 3
38407: MINUS
38408: PUSH
38409: LD_VAR 0 2
38413: PUSH
38414: LD_INT 3
38416: MINUS
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: PUSH
38426: LD_VAR 0 1
38430: PUSH
38431: LD_INT 4
38433: MINUS
38434: PUSH
38435: LD_VAR 0 2
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: PUSH
38448: LD_VAR 0 1
38452: PUSH
38453: LD_VAR 0 2
38457: PUSH
38458: LD_INT 3
38460: PLUS
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: PUSH
38470: LD_VAR 0 1
38474: PUSH
38475: LD_INT 4
38477: PLUS
38478: PUSH
38479: LD_VAR 0 2
38483: PUSH
38484: LD_INT 4
38486: PLUS
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// end ; 2 :
38503: GO 39062
38505: LD_INT 2
38507: DOUBLE
38508: EQUAL
38509: IFTRUE 38513
38511: GO 38642
38513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38514: LD_ADDR_VAR 0 5
38518: PUSH
38519: LD_VAR 0 1
38523: PUSH
38524: LD_VAR 0 2
38528: PUSH
38529: LD_INT 3
38531: MINUS
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: LD_VAR 0 1
38545: PUSH
38546: LD_INT 4
38548: PLUS
38549: PUSH
38550: LD_VAR 0 2
38554: PUSH
38555: LD_INT 4
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_VAR 0 1
38567: PUSH
38568: LD_VAR 0 2
38572: PUSH
38573: LD_INT 4
38575: PLUS
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: LD_VAR 0 1
38589: PUSH
38590: LD_INT 3
38592: MINUS
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: PUSH
38607: LD_VAR 0 1
38611: PUSH
38612: LD_INT 4
38614: MINUS
38615: PUSH
38616: LD_VAR 0 2
38620: PUSH
38621: LD_INT 4
38623: MINUS
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// end ; 3 :
38640: GO 39062
38642: LD_INT 3
38644: DOUBLE
38645: EQUAL
38646: IFTRUE 38650
38648: GO 38783
38650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38651: LD_ADDR_VAR 0 5
38655: PUSH
38656: LD_VAR 0 1
38660: PUSH
38661: LD_INT 3
38663: PLUS
38664: PUSH
38665: LD_VAR 0 2
38669: PUSH
38670: LD_INT 4
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: LD_VAR 0 1
38682: PUSH
38683: LD_INT 4
38685: PLUS
38686: PUSH
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 4
38694: PLUS
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: PUSH
38704: LD_VAR 0 1
38708: PUSH
38709: LD_INT 4
38711: MINUS
38712: PUSH
38713: LD_VAR 0 2
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: LD_VAR 0 1
38730: PUSH
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 4
38738: MINUS
38739: PUSH
38740: LD_INT 3
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: LD_VAR 0 1
38752: PUSH
38753: LD_INT 3
38755: MINUS
38756: PUSH
38757: LD_VAR 0 2
38761: PUSH
38762: LD_INT 3
38764: MINUS
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// end ; 4 :
38781: GO 39062
38783: LD_INT 4
38785: DOUBLE
38786: EQUAL
38787: IFTRUE 38791
38789: GO 38924
38791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38792: LD_ADDR_VAR 0 5
38796: PUSH
38797: LD_VAR 0 1
38801: PUSH
38802: LD_VAR 0 2
38806: PUSH
38807: LD_INT 4
38809: PLUS
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 3
38826: PLUS
38827: PUSH
38828: LD_VAR 0 2
38832: PUSH
38833: LD_INT 3
38835: PLUS
38836: PUSH
38837: LD_INT 5
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: LD_VAR 0 1
38849: PUSH
38850: LD_INT 4
38852: PLUS
38853: PUSH
38854: LD_VAR 0 2
38858: PUSH
38859: LD_INT 4
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: LD_VAR 0 1
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 3
38879: MINUS
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_VAR 0 1
38893: PUSH
38894: LD_INT 4
38896: MINUS
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_INT 4
38905: MINUS
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: ST_TO_ADDR
// end ; 5 :
38922: GO 39062
38924: LD_INT 5
38926: DOUBLE
38927: EQUAL
38928: IFTRUE 38932
38930: GO 39061
38932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38933: LD_ADDR_VAR 0 5
38937: PUSH
38938: LD_VAR 0 1
38942: PUSH
38943: LD_INT 4
38945: MINUS
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: LD_VAR 0 2
38969: PUSH
38970: LD_INT 4
38972: MINUS
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_INT 4
38989: PLUS
38990: PUSH
38991: LD_VAR 0 2
38995: PUSH
38996: LD_INT 4
38998: PLUS
38999: PUSH
39000: LD_INT 5
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: PUSH
39008: LD_VAR 0 1
39012: PUSH
39013: LD_INT 3
39015: PLUS
39016: PUSH
39017: LD_VAR 0 2
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PUSH
39030: LD_VAR 0 1
39034: PUSH
39035: LD_VAR 0 2
39039: PUSH
39040: LD_INT 3
39042: PLUS
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: ST_TO_ADDR
// end ; end ;
39059: GO 39062
39061: POP
// result := list ;
39062: LD_ADDR_VAR 0 4
39066: PUSH
39067: LD_VAR 0 5
39071: ST_TO_ADDR
// end ;
39072: LD_VAR 0 4
39076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39077: LD_INT 0
39079: PPUSH
39080: PPUSH
39081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39082: LD_VAR 0 1
39086: NOT
39087: PUSH
39088: LD_VAR 0 2
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 3
39101: PUSH
39102: LD_INT 4
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: IN
39111: NOT
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39200
// tmp := [ ] ;
39117: LD_ADDR_VAR 0 5
39121: PUSH
39122: EMPTY
39123: ST_TO_ADDR
// for i in units do
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: LD_VAR 0 1
39133: PUSH
39134: FOR_IN
39135: IFFALSE 39169
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39137: LD_ADDR_VAR 0 5
39141: PUSH
39142: LD_VAR 0 5
39146: PPUSH
39147: LD_VAR 0 4
39151: PPUSH
39152: LD_VAR 0 2
39156: PPUSH
39157: CALL_OW 259
39161: PPUSH
39162: CALL 40573 0 2
39166: ST_TO_ADDR
39167: GO 39134
39169: POP
39170: POP
// if not tmp then
39171: LD_VAR 0 5
39175: NOT
39176: IFFALSE 39180
// exit ;
39178: GO 39200
// result := SortListByListDesc ( units , tmp ) ;
39180: LD_ADDR_VAR 0 3
39184: PUSH
39185: LD_VAR 0 1
39189: PPUSH
39190: LD_VAR 0 5
39194: PPUSH
39195: CALL_OW 77
39199: ST_TO_ADDR
// end ;
39200: LD_VAR 0 3
39204: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39205: LD_INT 0
39207: PPUSH
39208: PPUSH
39209: PPUSH
// result := false ;
39210: LD_ADDR_VAR 0 3
39214: PUSH
39215: LD_INT 0
39217: ST_TO_ADDR
// if not building then
39218: LD_VAR 0 2
39222: NOT
39223: IFFALSE 39227
// exit ;
39225: GO 39365
// x := GetX ( building ) ;
39227: LD_ADDR_VAR 0 4
39231: PUSH
39232: LD_VAR 0 2
39236: PPUSH
39237: CALL_OW 250
39241: ST_TO_ADDR
// y := GetY ( building ) ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 2
39251: PPUSH
39252: CALL_OW 251
39256: ST_TO_ADDR
// if not x or not y then
39257: LD_VAR 0 4
39261: NOT
39262: PUSH
39263: LD_VAR 0 5
39267: NOT
39268: OR
39269: IFFALSE 39273
// exit ;
39271: GO 39365
// if GetTaskList ( unit ) then
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 437
39282: IFFALSE 39365
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39284: LD_STRING e
39286: PUSH
39287: LD_VAR 0 1
39291: PPUSH
39292: CALL_OW 437
39296: PUSH
39297: LD_INT 1
39299: ARRAY
39300: PUSH
39301: LD_INT 1
39303: ARRAY
39304: EQUAL
39305: PUSH
39306: LD_VAR 0 4
39310: PUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 437
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: PUSH
39325: LD_INT 2
39327: ARRAY
39328: EQUAL
39329: AND
39330: PUSH
39331: LD_VAR 0 5
39335: PUSH
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 437
39345: PUSH
39346: LD_INT 1
39348: ARRAY
39349: PUSH
39350: LD_INT 3
39352: ARRAY
39353: EQUAL
39354: AND
39355: IFFALSE 39365
// result := true end ;
39357: LD_ADDR_VAR 0 3
39361: PUSH
39362: LD_INT 1
39364: ST_TO_ADDR
// end ;
39365: LD_VAR 0 3
39369: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39370: LD_INT 0
39372: PPUSH
// result := false ;
39373: LD_ADDR_VAR 0 4
39377: PUSH
39378: LD_INT 0
39380: ST_TO_ADDR
// if GetTaskList ( unit ) then
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL_OW 437
39390: IFFALSE 39473
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39392: LD_STRING M
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 437
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: PUSH
39409: LD_INT 1
39411: ARRAY
39412: EQUAL
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_VAR 0 1
39423: PPUSH
39424: CALL_OW 437
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: PUSH
39433: LD_INT 2
39435: ARRAY
39436: EQUAL
39437: AND
39438: PUSH
39439: LD_VAR 0 3
39443: PUSH
39444: LD_VAR 0 1
39448: PPUSH
39449: CALL_OW 437
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PUSH
39458: LD_INT 3
39460: ARRAY
39461: EQUAL
39462: AND
39463: IFFALSE 39473
// result := true ;
39465: LD_ADDR_VAR 0 4
39469: PUSH
39470: LD_INT 1
39472: ST_TO_ADDR
// end ; end ;
39473: LD_VAR 0 4
39477: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
// if not unit or not area then
39484: LD_VAR 0 1
39488: NOT
39489: PUSH
39490: LD_VAR 0 2
39494: NOT
39495: OR
39496: IFFALSE 39500
// exit ;
39498: GO 39676
// tmp := AreaToList ( area , i ) ;
39500: LD_ADDR_VAR 0 6
39504: PUSH
39505: LD_VAR 0 2
39509: PPUSH
39510: LD_VAR 0 5
39514: PPUSH
39515: CALL_OW 517
39519: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39520: LD_ADDR_VAR 0 5
39524: PUSH
39525: DOUBLE
39526: LD_INT 1
39528: DEC
39529: ST_TO_ADDR
39530: LD_VAR 0 6
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: PUSH
39539: FOR_TO
39540: IFFALSE 39674
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39542: LD_ADDR_VAR 0 7
39546: PUSH
39547: LD_VAR 0 6
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PUSH
39556: LD_VAR 0 5
39560: ARRAY
39561: PUSH
39562: LD_VAR 0 6
39566: PUSH
39567: LD_INT 2
39569: ARRAY
39570: PUSH
39571: LD_VAR 0 5
39575: ARRAY
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39581: LD_INT 92
39583: PUSH
39584: LD_VAR 0 7
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PUSH
39593: LD_VAR 0 7
39597: PUSH
39598: LD_INT 2
39600: ARRAY
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: PPUSH
39611: CALL_OW 69
39615: PUSH
39616: LD_INT 0
39618: EQUAL
39619: IFFALSE 39672
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39621: LD_VAR 0 1
39625: PPUSH
39626: LD_VAR 0 7
39630: PUSH
39631: LD_INT 1
39633: ARRAY
39634: PPUSH
39635: LD_VAR 0 7
39639: PUSH
39640: LD_INT 2
39642: ARRAY
39643: PPUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: CALL_OW 48
// result := IsPlaced ( unit ) ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 305
39667: ST_TO_ADDR
// exit ;
39668: POP
39669: POP
39670: GO 39676
// end ; end ;
39672: GO 39539
39674: POP
39675: POP
// end ;
39676: LD_VAR 0 4
39680: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
// if not side or side > 8 then
39686: LD_VAR 0 1
39690: NOT
39691: PUSH
39692: LD_VAR 0 1
39696: PUSH
39697: LD_INT 8
39699: GREATER
39700: OR
39701: IFFALSE 39705
// exit ;
39703: GO 39892
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39705: LD_ADDR_VAR 0 4
39709: PUSH
39710: LD_INT 22
39712: PUSH
39713: LD_VAR 0 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 21
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PPUSH
39736: CALL_OW 69
39740: ST_TO_ADDR
// if not tmp then
39741: LD_VAR 0 4
39745: NOT
39746: IFFALSE 39750
// exit ;
39748: GO 39892
// enable_addtolog := true ;
39750: LD_ADDR_OWVAR 81
39754: PUSH
39755: LD_INT 1
39757: ST_TO_ADDR
// AddToLog ( [ ) ;
39758: LD_STRING [
39760: PPUSH
39761: CALL_OW 561
// for i in tmp do
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_VAR 0 4
39774: PUSH
39775: FOR_IN
39776: IFFALSE 39883
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39778: LD_STRING [
39780: PUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 266
39790: STR
39791: PUSH
39792: LD_STRING , 
39794: STR
39795: PUSH
39796: LD_VAR 0 3
39800: PPUSH
39801: CALL_OW 250
39805: STR
39806: PUSH
39807: LD_STRING , 
39809: STR
39810: PUSH
39811: LD_VAR 0 3
39815: PPUSH
39816: CALL_OW 251
39820: STR
39821: PUSH
39822: LD_STRING , 
39824: STR
39825: PUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: CALL_OW 254
39835: STR
39836: PUSH
39837: LD_STRING , 
39839: STR
39840: PUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: LD_INT 1
39848: PPUSH
39849: CALL_OW 268
39853: STR
39854: PUSH
39855: LD_STRING , 
39857: STR
39858: PUSH
39859: LD_VAR 0 3
39863: PPUSH
39864: LD_INT 2
39866: PPUSH
39867: CALL_OW 268
39871: STR
39872: PUSH
39873: LD_STRING ],
39875: STR
39876: PPUSH
39877: CALL_OW 561
// end ;
39881: GO 39775
39883: POP
39884: POP
// AddToLog ( ]; ) ;
39885: LD_STRING ];
39887: PPUSH
39888: CALL_OW 561
// end ;
39892: LD_VAR 0 2
39896: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39897: LD_INT 0
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
// if not area or not rate or not max then
39904: LD_VAR 0 1
39908: NOT
39909: PUSH
39910: LD_VAR 0 2
39914: NOT
39915: OR
39916: PUSH
39917: LD_VAR 0 4
39921: NOT
39922: OR
39923: IFFALSE 39927
// exit ;
39925: GO 40116
// while 1 do
39927: LD_INT 1
39929: IFFALSE 40116
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39931: LD_ADDR_VAR 0 9
39935: PUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: LD_INT 1
39943: PPUSH
39944: CALL_OW 287
39948: PUSH
39949: LD_INT 10
39951: MUL
39952: ST_TO_ADDR
// r := rate / 10 ;
39953: LD_ADDR_VAR 0 7
39957: PUSH
39958: LD_VAR 0 2
39962: PUSH
39963: LD_INT 10
39965: DIVREAL
39966: ST_TO_ADDR
// time := 1 1$00 ;
39967: LD_ADDR_VAR 0 8
39971: PUSH
39972: LD_INT 2100
39974: ST_TO_ADDR
// if amount < min then
39975: LD_VAR 0 9
39979: PUSH
39980: LD_VAR 0 3
39984: LESS
39985: IFFALSE 40003
// r := r * 2 else
39987: LD_ADDR_VAR 0 7
39991: PUSH
39992: LD_VAR 0 7
39996: PUSH
39997: LD_INT 2
39999: MUL
40000: ST_TO_ADDR
40001: GO 40029
// if amount > max then
40003: LD_VAR 0 9
40007: PUSH
40008: LD_VAR 0 4
40012: GREATER
40013: IFFALSE 40029
// r := r / 2 ;
40015: LD_ADDR_VAR 0 7
40019: PUSH
40020: LD_VAR 0 7
40024: PUSH
40025: LD_INT 2
40027: DIVREAL
40028: ST_TO_ADDR
// time := time / r ;
40029: LD_ADDR_VAR 0 8
40033: PUSH
40034: LD_VAR 0 8
40038: PUSH
40039: LD_VAR 0 7
40043: DIVREAL
40044: ST_TO_ADDR
// if time < 0 then
40045: LD_VAR 0 8
40049: PUSH
40050: LD_INT 0
40052: LESS
40053: IFFALSE 40070
// time := time * - 1 ;
40055: LD_ADDR_VAR 0 8
40059: PUSH
40060: LD_VAR 0 8
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: MUL
40069: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40070: LD_VAR 0 8
40074: PUSH
40075: LD_INT 35
40077: PPUSH
40078: LD_INT 875
40080: PPUSH
40081: CALL_OW 12
40085: PLUS
40086: PPUSH
40087: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40091: LD_INT 1
40093: PPUSH
40094: LD_INT 5
40096: PPUSH
40097: CALL_OW 12
40101: PPUSH
40102: LD_VAR 0 1
40106: PPUSH
40107: LD_INT 1
40109: PPUSH
40110: CALL_OW 55
// end ;
40114: GO 39927
// end ;
40116: LD_VAR 0 5
40120: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40121: LD_INT 0
40123: PPUSH
40124: PPUSH
40125: PPUSH
40126: PPUSH
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
// if not turrets or not factories then
40131: LD_VAR 0 1
40135: NOT
40136: PUSH
40137: LD_VAR 0 2
40141: NOT
40142: OR
40143: IFFALSE 40147
// exit ;
40145: GO 40454
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40147: LD_ADDR_VAR 0 10
40151: PUSH
40152: LD_INT 5
40154: PUSH
40155: LD_INT 6
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 4
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: LD_INT 5
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 24
40189: PUSH
40190: LD_INT 25
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 23
40199: PUSH
40200: LD_INT 27
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 42
40213: PUSH
40214: LD_INT 43
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 44
40223: PUSH
40224: LD_INT 46
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 45
40233: PUSH
40234: LD_INT 47
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// result := [ ] ;
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: EMPTY
40257: ST_TO_ADDR
// for i in turrets do
40258: LD_ADDR_VAR 0 4
40262: PUSH
40263: LD_VAR 0 1
40267: PUSH
40268: FOR_IN
40269: IFFALSE 40452
// begin nat := GetNation ( i ) ;
40271: LD_ADDR_VAR 0 7
40275: PUSH
40276: LD_VAR 0 4
40280: PPUSH
40281: CALL_OW 248
40285: ST_TO_ADDR
// weapon := 0 ;
40286: LD_ADDR_VAR 0 8
40290: PUSH
40291: LD_INT 0
40293: ST_TO_ADDR
// if not nat then
40294: LD_VAR 0 7
40298: NOT
40299: IFFALSE 40303
// continue ;
40301: GO 40268
// for j in list [ nat ] do
40303: LD_ADDR_VAR 0 5
40307: PUSH
40308: LD_VAR 0 10
40312: PUSH
40313: LD_VAR 0 7
40317: ARRAY
40318: PUSH
40319: FOR_IN
40320: IFFALSE 40361
// if GetBWeapon ( i ) = j [ 1 ] then
40322: LD_VAR 0 4
40326: PPUSH
40327: CALL_OW 269
40331: PUSH
40332: LD_VAR 0 5
40336: PUSH
40337: LD_INT 1
40339: ARRAY
40340: EQUAL
40341: IFFALSE 40359
// begin weapon := j [ 2 ] ;
40343: LD_ADDR_VAR 0 8
40347: PUSH
40348: LD_VAR 0 5
40352: PUSH
40353: LD_INT 2
40355: ARRAY
40356: ST_TO_ADDR
// break ;
40357: GO 40361
// end ;
40359: GO 40319
40361: POP
40362: POP
// if not weapon then
40363: LD_VAR 0 8
40367: NOT
40368: IFFALSE 40372
// continue ;
40370: GO 40268
// for k in factories do
40372: LD_ADDR_VAR 0 6
40376: PUSH
40377: LD_VAR 0 2
40381: PUSH
40382: FOR_IN
40383: IFFALSE 40448
// begin weapons := AvailableWeaponList ( k ) ;
40385: LD_ADDR_VAR 0 9
40389: PUSH
40390: LD_VAR 0 6
40394: PPUSH
40395: CALL_OW 478
40399: ST_TO_ADDR
// if not weapons then
40400: LD_VAR 0 9
40404: NOT
40405: IFFALSE 40409
// continue ;
40407: GO 40382
// if weapon in weapons then
40409: LD_VAR 0 8
40413: PUSH
40414: LD_VAR 0 9
40418: IN
40419: IFFALSE 40446
// begin result := [ i , weapon ] ;
40421: LD_ADDR_VAR 0 3
40425: PUSH
40426: LD_VAR 0 4
40430: PUSH
40431: LD_VAR 0 8
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// exit ;
40440: POP
40441: POP
40442: POP
40443: POP
40444: GO 40454
// end ; end ;
40446: GO 40382
40448: POP
40449: POP
// end ;
40450: GO 40268
40452: POP
40453: POP
// end ;
40454: LD_VAR 0 3
40458: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40459: LD_INT 0
40461: PPUSH
// if not side or side > 8 then
40462: LD_VAR 0 3
40466: NOT
40467: PUSH
40468: LD_VAR 0 3
40472: PUSH
40473: LD_INT 8
40475: GREATER
40476: OR
40477: IFFALSE 40481
// exit ;
40479: GO 40540
// if not range then
40481: LD_VAR 0 4
40485: NOT
40486: IFFALSE 40497
// range := - 12 ;
40488: LD_ADDR_VAR 0 4
40492: PUSH
40493: LD_INT 12
40495: NEG
40496: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40497: LD_VAR 0 1
40501: PPUSH
40502: LD_VAR 0 2
40506: PPUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: LD_VAR 0 4
40516: PPUSH
40517: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40521: LD_VAR 0 1
40525: PPUSH
40526: LD_VAR 0 2
40530: PPUSH
40531: LD_VAR 0 3
40535: PPUSH
40536: CALL_OW 331
// end ;
40540: LD_VAR 0 5
40544: RET
// export function Video ( mode ) ; begin
40545: LD_INT 0
40547: PPUSH
// ingame_video = mode ;
40548: LD_ADDR_OWVAR 52
40552: PUSH
40553: LD_VAR 0 1
40557: ST_TO_ADDR
// interface_hidden = mode ;
40558: LD_ADDR_OWVAR 54
40562: PUSH
40563: LD_VAR 0 1
40567: ST_TO_ADDR
// end ;
40568: LD_VAR 0 2
40572: RET
// export function Join ( array , element ) ; begin
40573: LD_INT 0
40575: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40576: LD_ADDR_VAR 0 3
40580: PUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: LD_VAR 0 1
40590: PUSH
40591: LD_INT 1
40593: PLUS
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: CALL_OW 1
40604: ST_TO_ADDR
// end ;
40605: LD_VAR 0 3
40609: RET
// export function JoinUnion ( array , element ) ; begin
40610: LD_INT 0
40612: PPUSH
// result := array union element ;
40613: LD_ADDR_VAR 0 3
40617: PUSH
40618: LD_VAR 0 1
40622: PUSH
40623: LD_VAR 0 2
40627: UNION
40628: ST_TO_ADDR
// end ;
40629: LD_VAR 0 3
40633: RET
// export function GetBehemoths ( side ) ; begin
40634: LD_INT 0
40636: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: LD_INT 22
40644: PUSH
40645: LD_VAR 0 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 31
40656: PUSH
40657: LD_INT 25
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PPUSH
40668: CALL_OW 69
40672: ST_TO_ADDR
// end ;
40673: LD_VAR 0 2
40677: RET
// export function Shuffle ( array ) ; var i , index ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
40682: PPUSH
// result := [ ] ;
40683: LD_ADDR_VAR 0 2
40687: PUSH
40688: EMPTY
40689: ST_TO_ADDR
// if not array then
40690: LD_VAR 0 1
40694: NOT
40695: IFFALSE 40699
// exit ;
40697: GO 40798
// Randomize ;
40699: CALL_OW 10
// for i = array downto 1 do
40703: LD_ADDR_VAR 0 3
40707: PUSH
40708: DOUBLE
40709: LD_VAR 0 1
40713: INC
40714: ST_TO_ADDR
40715: LD_INT 1
40717: PUSH
40718: FOR_DOWNTO
40719: IFFALSE 40796
// begin index := rand ( 1 , array ) ;
40721: LD_ADDR_VAR 0 4
40725: PUSH
40726: LD_INT 1
40728: PPUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 12
40738: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40739: LD_ADDR_VAR 0 2
40743: PUSH
40744: LD_VAR 0 2
40748: PPUSH
40749: LD_VAR 0 2
40753: PUSH
40754: LD_INT 1
40756: PLUS
40757: PPUSH
40758: LD_VAR 0 1
40762: PUSH
40763: LD_VAR 0 4
40767: ARRAY
40768: PPUSH
40769: CALL_OW 2
40773: ST_TO_ADDR
// array := Delete ( array , index ) ;
40774: LD_ADDR_VAR 0 1
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: LD_VAR 0 4
40788: PPUSH
40789: CALL_OW 3
40793: ST_TO_ADDR
// end ;
40794: GO 40718
40796: POP
40797: POP
// end ;
40798: LD_VAR 0 2
40802: RET
// export function GetBaseMaterials ( base ) ; begin
40803: LD_INT 0
40805: PPUSH
// result := [ 0 , 0 , 0 ] ;
40806: LD_ADDR_VAR 0 2
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
// if not base then
40825: LD_VAR 0 1
40829: NOT
40830: IFFALSE 40834
// exit ;
40832: GO 40883
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40834: LD_ADDR_VAR 0 2
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: LD_INT 1
40846: PPUSH
40847: CALL_OW 275
40851: PUSH
40852: LD_VAR 0 1
40856: PPUSH
40857: LD_INT 2
40859: PPUSH
40860: CALL_OW 275
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: LD_INT 3
40872: PPUSH
40873: CALL_OW 275
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
// end ;
40883: LD_VAR 0 2
40887: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40888: LD_INT 0
40890: PPUSH
40891: PPUSH
// result := array ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_VAR 0 1
40901: ST_TO_ADDR
// if size >= result then
40902: LD_VAR 0 2
40906: PUSH
40907: LD_VAR 0 3
40911: GREATEREQUAL
40912: IFFALSE 40916
// exit ;
40914: GO 40966
// if size then
40916: LD_VAR 0 2
40920: IFFALSE 40966
// for i := array downto size do
40922: LD_ADDR_VAR 0 4
40926: PUSH
40927: DOUBLE
40928: LD_VAR 0 1
40932: INC
40933: ST_TO_ADDR
40934: LD_VAR 0 2
40938: PUSH
40939: FOR_DOWNTO
40940: IFFALSE 40964
// result := Delete ( result , result ) ;
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_VAR 0 3
40951: PPUSH
40952: LD_VAR 0 3
40956: PPUSH
40957: CALL_OW 3
40961: ST_TO_ADDR
40962: GO 40939
40964: POP
40965: POP
// end ;
40966: LD_VAR 0 3
40970: RET
// export function ComExit ( unit ) ; var tmp ; begin
40971: LD_INT 0
40973: PPUSH
40974: PPUSH
// if not IsInUnit ( unit ) then
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 310
40984: NOT
40985: IFFALSE 40989
// exit ;
40987: GO 41049
// tmp := IsInUnit ( unit ) ;
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 310
41003: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41004: LD_VAR 0 3
41008: PPUSH
41009: CALL_OW 247
41013: PUSH
41014: LD_INT 2
41016: EQUAL
41017: IFFALSE 41030
// ComExitVehicle ( unit ) else
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 121
41028: GO 41039
// ComExitBuilding ( unit ) ;
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 122
// result := tmp ;
41039: LD_ADDR_VAR 0 2
41043: PUSH
41044: LD_VAR 0 3
41048: ST_TO_ADDR
// end ;
41049: LD_VAR 0 2
41053: RET
// export function ComExitAll ( units ) ; var i ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
// if not units then
41058: LD_VAR 0 1
41062: NOT
41063: IFFALSE 41067
// exit ;
41065: GO 41093
// for i in units do
41067: LD_ADDR_VAR 0 3
41071: PUSH
41072: LD_VAR 0 1
41076: PUSH
41077: FOR_IN
41078: IFFALSE 41091
// ComExit ( i ) ;
41080: LD_VAR 0 3
41084: PPUSH
41085: CALL 40971 0 1
41089: GO 41077
41091: POP
41092: POP
// end ;
41093: LD_VAR 0 2
41097: RET
// export function ResetHc ; begin
41098: LD_INT 0
41100: PPUSH
// InitHc ;
41101: CALL_OW 19
// hc_importance := 0 ;
41105: LD_ADDR_OWVAR 32
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// end ;
41113: LD_VAR 0 1
41117: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41118: LD_INT 0
41120: PPUSH
41121: PPUSH
41122: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41123: LD_ADDR_VAR 0 6
41127: PUSH
41128: LD_VAR 0 1
41132: PUSH
41133: LD_VAR 0 3
41137: PLUS
41138: PUSH
41139: LD_INT 2
41141: DIV
41142: ST_TO_ADDR
// if _x < 0 then
41143: LD_VAR 0 6
41147: PUSH
41148: LD_INT 0
41150: LESS
41151: IFFALSE 41168
// _x := _x * - 1 ;
41153: LD_ADDR_VAR 0 6
41157: PUSH
41158: LD_VAR 0 6
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: MUL
41167: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41168: LD_ADDR_VAR 0 7
41172: PUSH
41173: LD_VAR 0 2
41177: PUSH
41178: LD_VAR 0 4
41182: PLUS
41183: PUSH
41184: LD_INT 2
41186: DIV
41187: ST_TO_ADDR
// if _y < 0 then
41188: LD_VAR 0 7
41192: PUSH
41193: LD_INT 0
41195: LESS
41196: IFFALSE 41213
// _y := _y * - 1 ;
41198: LD_ADDR_VAR 0 7
41202: PUSH
41203: LD_VAR 0 7
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: MUL
41212: ST_TO_ADDR
// result := [ _x , _y ] ;
41213: LD_ADDR_VAR 0 5
41217: PUSH
41218: LD_VAR 0 6
41222: PUSH
41223: LD_VAR 0 7
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: ST_TO_ADDR
// end ;
41232: LD_VAR 0 5
41236: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41237: LD_INT 0
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
// task := GetTaskList ( unit ) ;
41243: LD_ADDR_VAR 0 7
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 437
41257: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41258: LD_VAR 0 7
41262: NOT
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_VAR 0 2
41273: PPUSH
41274: CALL_OW 308
41278: NOT
41279: AND
41280: IFFALSE 41284
// exit ;
41282: GO 41402
// if IsInArea ( unit , area ) then
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 2
41293: PPUSH
41294: CALL_OW 308
41298: IFFALSE 41316
// begin ComMoveToArea ( unit , goAway ) ;
41300: LD_VAR 0 1
41304: PPUSH
41305: LD_VAR 0 3
41309: PPUSH
41310: CALL_OW 113
// exit ;
41314: GO 41402
// end ; if task [ 1 ] [ 1 ] <> M then
41316: LD_VAR 0 7
41320: PUSH
41321: LD_INT 1
41323: ARRAY
41324: PUSH
41325: LD_INT 1
41327: ARRAY
41328: PUSH
41329: LD_STRING M
41331: NONEQUAL
41332: IFFALSE 41336
// exit ;
41334: GO 41402
// x := task [ 1 ] [ 2 ] ;
41336: LD_ADDR_VAR 0 5
41340: PUSH
41341: LD_VAR 0 7
41345: PUSH
41346: LD_INT 1
41348: ARRAY
41349: PUSH
41350: LD_INT 2
41352: ARRAY
41353: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41354: LD_ADDR_VAR 0 6
41358: PUSH
41359: LD_VAR 0 7
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PUSH
41368: LD_INT 3
41370: ARRAY
41371: ST_TO_ADDR
// if InArea ( x , y , area ) then
41372: LD_VAR 0 5
41376: PPUSH
41377: LD_VAR 0 6
41381: PPUSH
41382: LD_VAR 0 2
41386: PPUSH
41387: CALL_OW 309
41391: IFFALSE 41402
// ComStop ( unit ) ;
41393: LD_VAR 0 1
41397: PPUSH
41398: CALL_OW 141
// end ;
41402: LD_VAR 0 4
41406: RET
// export function Abs ( value ) ; begin
41407: LD_INT 0
41409: PPUSH
// result := value ;
41410: LD_ADDR_VAR 0 2
41414: PUSH
41415: LD_VAR 0 1
41419: ST_TO_ADDR
// if value < 0 then
41420: LD_VAR 0 1
41424: PUSH
41425: LD_INT 0
41427: LESS
41428: IFFALSE 41445
// result := value * - 1 ;
41430: LD_ADDR_VAR 0 2
41434: PUSH
41435: LD_VAR 0 1
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: MUL
41444: ST_TO_ADDR
// end ;
41445: LD_VAR 0 2
41449: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41450: LD_INT 0
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
// if not unit or not building then
41460: LD_VAR 0 1
41464: NOT
41465: PUSH
41466: LD_VAR 0 2
41470: NOT
41471: OR
41472: IFFALSE 41476
// exit ;
41474: GO 41702
// x := GetX ( building ) ;
41476: LD_ADDR_VAR 0 4
41480: PUSH
41481: LD_VAR 0 2
41485: PPUSH
41486: CALL_OW 250
41490: ST_TO_ADDR
// y := GetY ( building ) ;
41491: LD_ADDR_VAR 0 6
41495: PUSH
41496: LD_VAR 0 2
41500: PPUSH
41501: CALL_OW 251
41505: ST_TO_ADDR
// d := GetDir ( building ) ;
41506: LD_ADDR_VAR 0 8
41510: PUSH
41511: LD_VAR 0 2
41515: PPUSH
41516: CALL_OW 254
41520: ST_TO_ADDR
// r := 4 ;
41521: LD_ADDR_VAR 0 9
41525: PUSH
41526: LD_INT 4
41528: ST_TO_ADDR
// for i := 1 to 5 do
41529: LD_ADDR_VAR 0 10
41533: PUSH
41534: DOUBLE
41535: LD_INT 1
41537: DEC
41538: ST_TO_ADDR
41539: LD_INT 5
41541: PUSH
41542: FOR_TO
41543: IFFALSE 41700
// begin _x := ShiftX ( x , d , r + i ) ;
41545: LD_ADDR_VAR 0 5
41549: PUSH
41550: LD_VAR 0 4
41554: PPUSH
41555: LD_VAR 0 8
41559: PPUSH
41560: LD_VAR 0 9
41564: PUSH
41565: LD_VAR 0 10
41569: PLUS
41570: PPUSH
41571: CALL_OW 272
41575: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41576: LD_ADDR_VAR 0 7
41580: PUSH
41581: LD_VAR 0 6
41585: PPUSH
41586: LD_VAR 0 8
41590: PPUSH
41591: LD_VAR 0 9
41595: PUSH
41596: LD_VAR 0 10
41600: PLUS
41601: PPUSH
41602: CALL_OW 273
41606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41607: LD_VAR 0 5
41611: PPUSH
41612: LD_VAR 0 7
41616: PPUSH
41617: CALL_OW 488
41621: PUSH
41622: LD_VAR 0 5
41626: PPUSH
41627: LD_VAR 0 7
41631: PPUSH
41632: CALL_OW 428
41636: PPUSH
41637: CALL_OW 247
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: IN
41652: NOT
41653: AND
41654: IFFALSE 41698
// begin ComMoveXY ( unit , _x , _y ) ;
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: LD_VAR 0 7
41670: PPUSH
41671: CALL_OW 111
// result := [ _x , _y ] ;
41675: LD_ADDR_VAR 0 3
41679: PUSH
41680: LD_VAR 0 5
41684: PUSH
41685: LD_VAR 0 7
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// exit ;
41694: POP
41695: POP
41696: GO 41702
// end ; end ;
41698: GO 41542
41700: POP
41701: POP
// end ;
41702: LD_VAR 0 3
41706: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
41711: PPUSH
// result := 0 ;
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 0
41719: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41720: LD_VAR 0 1
41724: PUSH
41725: LD_INT 0
41727: LESS
41728: PUSH
41729: LD_VAR 0 1
41733: PUSH
41734: LD_INT 8
41736: GREATER
41737: OR
41738: PUSH
41739: LD_VAR 0 2
41743: PUSH
41744: LD_INT 0
41746: LESS
41747: OR
41748: PUSH
41749: LD_VAR 0 2
41753: PUSH
41754: LD_INT 8
41756: GREATER
41757: OR
41758: IFFALSE 41762
// exit ;
41760: GO 41837
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_INT 22
41769: PUSH
41770: LD_VAR 0 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PPUSH
41779: CALL_OW 69
41783: PUSH
41784: FOR_IN
41785: IFFALSE 41835
// begin un := UnitShoot ( i ) ;
41787: LD_ADDR_VAR 0 5
41791: PUSH
41792: LD_VAR 0 4
41796: PPUSH
41797: CALL_OW 504
41801: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41802: LD_VAR 0 5
41806: PPUSH
41807: CALL_OW 255
41811: PUSH
41812: LD_VAR 0 1
41816: EQUAL
41817: IFFALSE 41833
// begin result := un ;
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_VAR 0 5
41828: ST_TO_ADDR
// exit ;
41829: POP
41830: POP
41831: GO 41837
// end ; end ;
41833: GO 41784
41835: POP
41836: POP
// end ;
41837: LD_VAR 0 3
41841: RET
// export function GetCargoBay ( units ) ; begin
41842: LD_INT 0
41844: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41845: LD_ADDR_VAR 0 2
41849: PUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 34
41860: PUSH
41861: LD_INT 12
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 34
41870: PUSH
41871: LD_INT 51
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 34
41880: PUSH
41881: LD_INT 32
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 34
41890: PUSH
41891: LD_INT 89
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: PPUSH
41905: CALL_OW 72
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 2
41914: RET
// export function Negate ( value ) ; begin
41915: LD_INT 0
41917: PPUSH
// result := not value ;
41918: LD_ADDR_VAR 0 2
41922: PUSH
41923: LD_VAR 0 1
41927: NOT
41928: ST_TO_ADDR
// end ;
41929: LD_VAR 0 2
41933: RET
// export function Inc ( value ) ; begin
41934: LD_INT 0
41936: PPUSH
// result := value + 1 ;
41937: LD_ADDR_VAR 0 2
41941: PUSH
41942: LD_VAR 0 1
41946: PUSH
41947: LD_INT 1
41949: PLUS
41950: ST_TO_ADDR
// end ;
41951: LD_VAR 0 2
41955: RET
// export function Dec ( value ) ; begin
41956: LD_INT 0
41958: PPUSH
// result := value - 1 ;
41959: LD_ADDR_VAR 0 2
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: LD_INT 1
41971: MINUS
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 2
41977: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41978: LD_INT 0
41980: PPUSH
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41988: LD_VAR 0 1
41992: PPUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: CALL_OW 488
42002: NOT
42003: PUSH
42004: LD_VAR 0 3
42008: PPUSH
42009: LD_VAR 0 4
42013: PPUSH
42014: CALL_OW 488
42018: NOT
42019: OR
42020: IFFALSE 42033
// begin result := - 1 ;
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: ST_TO_ADDR
// exit ;
42031: GO 42268
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42033: LD_ADDR_VAR 0 12
42037: PUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: LD_VAR 0 2
42047: PPUSH
42048: LD_VAR 0 3
42052: PPUSH
42053: LD_VAR 0 4
42057: PPUSH
42058: CALL 41118 0 4
42062: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42063: LD_ADDR_VAR 0 11
42067: PUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: LD_VAR 0 2
42077: PPUSH
42078: LD_VAR 0 12
42082: PUSH
42083: LD_INT 1
42085: ARRAY
42086: PPUSH
42087: LD_VAR 0 12
42091: PUSH
42092: LD_INT 2
42094: ARRAY
42095: PPUSH
42096: CALL_OW 298
42100: ST_TO_ADDR
// distance := 9999 ;
42101: LD_ADDR_VAR 0 10
42105: PUSH
42106: LD_INT 9999
42108: ST_TO_ADDR
// for i := 0 to 5 do
42109: LD_ADDR_VAR 0 6
42113: PUSH
42114: DOUBLE
42115: LD_INT 0
42117: DEC
42118: ST_TO_ADDR
42119: LD_INT 5
42121: PUSH
42122: FOR_TO
42123: IFFALSE 42266
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42125: LD_ADDR_VAR 0 7
42129: PUSH
42130: LD_VAR 0 1
42134: PPUSH
42135: LD_VAR 0 6
42139: PPUSH
42140: LD_VAR 0 11
42144: PPUSH
42145: CALL_OW 272
42149: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42150: LD_ADDR_VAR 0 8
42154: PUSH
42155: LD_VAR 0 2
42159: PPUSH
42160: LD_VAR 0 6
42164: PPUSH
42165: LD_VAR 0 11
42169: PPUSH
42170: CALL_OW 273
42174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42175: LD_VAR 0 7
42179: PPUSH
42180: LD_VAR 0 8
42184: PPUSH
42185: CALL_OW 488
42189: NOT
42190: IFFALSE 42194
// continue ;
42192: GO 42122
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42194: LD_ADDR_VAR 0 9
42198: PUSH
42199: LD_VAR 0 12
42203: PUSH
42204: LD_INT 1
42206: ARRAY
42207: PPUSH
42208: LD_VAR 0 12
42212: PUSH
42213: LD_INT 2
42215: ARRAY
42216: PPUSH
42217: LD_VAR 0 7
42221: PPUSH
42222: LD_VAR 0 8
42226: PPUSH
42227: CALL_OW 298
42231: ST_TO_ADDR
// if tmp < distance then
42232: LD_VAR 0 9
42236: PUSH
42237: LD_VAR 0 10
42241: LESS
42242: IFFALSE 42264
// begin result := i ;
42244: LD_ADDR_VAR 0 5
42248: PUSH
42249: LD_VAR 0 6
42253: ST_TO_ADDR
// distance := tmp ;
42254: LD_ADDR_VAR 0 10
42258: PUSH
42259: LD_VAR 0 9
42263: ST_TO_ADDR
// end ; end ;
42264: GO 42122
42266: POP
42267: POP
// end ;
42268: LD_VAR 0 5
42272: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42273: LD_INT 0
42275: PPUSH
42276: PPUSH
// if not driver or not IsInUnit ( driver ) then
42277: LD_VAR 0 1
42281: NOT
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: CALL_OW 310
42292: NOT
42293: OR
42294: IFFALSE 42298
// exit ;
42296: GO 42388
// vehicle := IsInUnit ( driver ) ;
42298: LD_ADDR_VAR 0 3
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: CALL_OW 310
42312: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42313: LD_VAR 0 1
42317: PPUSH
42318: LD_STRING \
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: PUSH
42348: LD_STRING E
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_VAR 0 3
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PPUSH
42384: CALL_OW 446
// end ;
42388: LD_VAR 0 2
42392: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
// if not driver or not IsInUnit ( driver ) then
42397: LD_VAR 0 1
42401: NOT
42402: PUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL_OW 310
42412: NOT
42413: OR
42414: IFFALSE 42418
// exit ;
42416: GO 42508
// vehicle := IsInUnit ( driver ) ;
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 310
42432: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42433: LD_VAR 0 1
42437: PPUSH
42438: LD_STRING \
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: PUSH
42468: LD_STRING E
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_VAR 0 3
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PPUSH
42504: CALL_OW 447
// end ;
42508: LD_VAR 0 2
42512: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42513: LD_INT 0
42515: PPUSH
42516: PPUSH
42517: PPUSH
// tmp := [ ] ;
42518: LD_ADDR_VAR 0 5
42522: PUSH
42523: EMPTY
42524: ST_TO_ADDR
// for i in units do
42525: LD_ADDR_VAR 0 4
42529: PUSH
42530: LD_VAR 0 1
42534: PUSH
42535: FOR_IN
42536: IFFALSE 42574
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42538: LD_ADDR_VAR 0 5
42542: PUSH
42543: LD_VAR 0 5
42547: PPUSH
42548: LD_VAR 0 5
42552: PUSH
42553: LD_INT 1
42555: PLUS
42556: PPUSH
42557: LD_VAR 0 4
42561: PPUSH
42562: CALL_OW 256
42566: PPUSH
42567: CALL_OW 2
42571: ST_TO_ADDR
42572: GO 42535
42574: POP
42575: POP
// if not tmp then
42576: LD_VAR 0 5
42580: NOT
42581: IFFALSE 42585
// exit ;
42583: GO 42633
// if asc then
42585: LD_VAR 0 2
42589: IFFALSE 42613
// result := SortListByListAsc ( units , tmp ) else
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: LD_VAR 0 5
42605: PPUSH
42606: CALL_OW 76
42610: ST_TO_ADDR
42611: GO 42633
// result := SortListByListDesc ( units , tmp ) ;
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: LD_VAR 0 5
42627: PPUSH
42628: CALL_OW 77
42632: ST_TO_ADDR
// end ;
42633: LD_VAR 0 3
42637: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42638: LD_INT 0
42640: PPUSH
42641: PPUSH
// task := GetTaskList ( mech ) ;
42642: LD_ADDR_VAR 0 4
42646: PUSH
42647: LD_VAR 0 1
42651: PPUSH
42652: CALL_OW 437
42656: ST_TO_ADDR
// if not task then
42657: LD_VAR 0 4
42661: NOT
42662: IFFALSE 42666
// exit ;
42664: GO 42708
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_VAR 0 4
42675: PUSH
42676: LD_INT 1
42678: ARRAY
42679: PUSH
42680: LD_INT 1
42682: ARRAY
42683: PUSH
42684: LD_STRING r
42686: EQUAL
42687: PUSH
42688: LD_VAR 0 4
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: PUSH
42697: LD_INT 4
42699: ARRAY
42700: PUSH
42701: LD_VAR 0 2
42705: EQUAL
42706: AND
42707: ST_TO_ADDR
// end ;
42708: LD_VAR 0 3
42712: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42713: LD_INT 0
42715: PPUSH
// SetDir ( unit , d ) ;
42716: LD_VAR 0 1
42720: PPUSH
42721: LD_VAR 0 4
42725: PPUSH
42726: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42730: LD_VAR 0 1
42734: PPUSH
42735: LD_VAR 0 2
42739: PPUSH
42740: LD_VAR 0 3
42744: PPUSH
42745: LD_VAR 0 5
42749: PPUSH
42750: CALL_OW 48
// end ;
42754: LD_VAR 0 6
42758: RET
// export function ToNaturalNumber ( number ) ; begin
42759: LD_INT 0
42761: PPUSH
// result := number div 1 ;
42762: LD_ADDR_VAR 0 2
42766: PUSH
42767: LD_VAR 0 1
42771: PUSH
42772: LD_INT 1
42774: DIV
42775: ST_TO_ADDR
// if number < 0 then
42776: LD_VAR 0 1
42780: PUSH
42781: LD_INT 0
42783: LESS
42784: IFFALSE 42794
// result := 0 ;
42786: LD_ADDR_VAR 0 2
42790: PUSH
42791: LD_INT 0
42793: ST_TO_ADDR
// end ;
42794: LD_VAR 0 2
42798: RET
// export function SortByClass ( units , class ) ; var un ; begin
42799: LD_INT 0
42801: PPUSH
42802: PPUSH
// if not units or not class then
42803: LD_VAR 0 1
42807: NOT
42808: PUSH
42809: LD_VAR 0 2
42813: NOT
42814: OR
42815: IFFALSE 42819
// exit ;
42817: GO 42914
// result := [ ] ;
42819: LD_ADDR_VAR 0 3
42823: PUSH
42824: EMPTY
42825: ST_TO_ADDR
// for un in units do
42826: LD_ADDR_VAR 0 4
42830: PUSH
42831: LD_VAR 0 1
42835: PUSH
42836: FOR_IN
42837: IFFALSE 42912
// if GetClass ( un ) = class then
42839: LD_VAR 0 4
42843: PPUSH
42844: CALL_OW 257
42848: PUSH
42849: LD_VAR 0 2
42853: EQUAL
42854: IFFALSE 42881
// result := Insert ( result , 1 , un ) else
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_VAR 0 3
42865: PPUSH
42866: LD_INT 1
42868: PPUSH
42869: LD_VAR 0 4
42873: PPUSH
42874: CALL_OW 2
42878: ST_TO_ADDR
42879: GO 42910
// result := Replace ( result , result + 1 , un ) ;
42881: LD_ADDR_VAR 0 3
42885: PUSH
42886: LD_VAR 0 3
42890: PPUSH
42891: LD_VAR 0 3
42895: PUSH
42896: LD_INT 1
42898: PLUS
42899: PPUSH
42900: LD_VAR 0 4
42904: PPUSH
42905: CALL_OW 1
42909: ST_TO_ADDR
42910: GO 42836
42912: POP
42913: POP
// end ;
42914: LD_VAR 0 3
42918: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42919: LD_INT 0
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
// result := [ ] ;
42928: LD_ADDR_VAR 0 4
42932: PUSH
42933: EMPTY
42934: ST_TO_ADDR
// if x - r < 0 then
42935: LD_VAR 0 1
42939: PUSH
42940: LD_VAR 0 3
42944: MINUS
42945: PUSH
42946: LD_INT 0
42948: LESS
42949: IFFALSE 42961
// min_x := 0 else
42951: LD_ADDR_VAR 0 8
42955: PUSH
42956: LD_INT 0
42958: ST_TO_ADDR
42959: GO 42977
// min_x := x - r ;
42961: LD_ADDR_VAR 0 8
42965: PUSH
42966: LD_VAR 0 1
42970: PUSH
42971: LD_VAR 0 3
42975: MINUS
42976: ST_TO_ADDR
// if y - r < 0 then
42977: LD_VAR 0 2
42981: PUSH
42982: LD_VAR 0 3
42986: MINUS
42987: PUSH
42988: LD_INT 0
42990: LESS
42991: IFFALSE 43003
// min_y := 0 else
42993: LD_ADDR_VAR 0 7
42997: PUSH
42998: LD_INT 0
43000: ST_TO_ADDR
43001: GO 43019
// min_y := y - r ;
43003: LD_ADDR_VAR 0 7
43007: PUSH
43008: LD_VAR 0 2
43012: PUSH
43013: LD_VAR 0 3
43017: MINUS
43018: ST_TO_ADDR
// max_x := x + r ;
43019: LD_ADDR_VAR 0 9
43023: PUSH
43024: LD_VAR 0 1
43028: PUSH
43029: LD_VAR 0 3
43033: PLUS
43034: ST_TO_ADDR
// max_y := y + r ;
43035: LD_ADDR_VAR 0 10
43039: PUSH
43040: LD_VAR 0 2
43044: PUSH
43045: LD_VAR 0 3
43049: PLUS
43050: ST_TO_ADDR
// for _x = min_x to max_x do
43051: LD_ADDR_VAR 0 5
43055: PUSH
43056: DOUBLE
43057: LD_VAR 0 8
43061: DEC
43062: ST_TO_ADDR
43063: LD_VAR 0 9
43067: PUSH
43068: FOR_TO
43069: IFFALSE 43170
// for _y = min_y to max_y do
43071: LD_ADDR_VAR 0 6
43075: PUSH
43076: DOUBLE
43077: LD_VAR 0 7
43081: DEC
43082: ST_TO_ADDR
43083: LD_VAR 0 10
43087: PUSH
43088: FOR_TO
43089: IFFALSE 43166
// begin if not ValidHex ( _x , _y ) then
43091: LD_VAR 0 5
43095: PPUSH
43096: LD_VAR 0 6
43100: PPUSH
43101: CALL_OW 488
43105: NOT
43106: IFFALSE 43110
// continue ;
43108: GO 43088
// if GetResourceTypeXY ( _x , _y ) then
43110: LD_VAR 0 5
43114: PPUSH
43115: LD_VAR 0 6
43119: PPUSH
43120: CALL_OW 283
43124: IFFALSE 43164
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43126: LD_ADDR_VAR 0 4
43130: PUSH
43131: LD_VAR 0 4
43135: PPUSH
43136: LD_VAR 0 4
43140: PUSH
43141: LD_INT 1
43143: PLUS
43144: PPUSH
43145: LD_VAR 0 5
43149: PUSH
43150: LD_VAR 0 6
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PPUSH
43159: CALL_OW 1
43163: ST_TO_ADDR
// end ;
43164: GO 43088
43166: POP
43167: POP
43168: GO 43068
43170: POP
43171: POP
// end ;
43172: LD_VAR 0 4
43176: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
// if not units then
43187: LD_VAR 0 1
43191: NOT
43192: IFFALSE 43196
// exit ;
43194: GO 43724
// result := UnitFilter ( units , [ f_ok ] ) ;
43196: LD_ADDR_VAR 0 3
43200: PUSH
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_INT 50
43208: PUSH
43209: EMPTY
43210: LIST
43211: PPUSH
43212: CALL_OW 72
43216: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43217: LD_ADDR_VAR 0 8
43221: PUSH
43222: LD_VAR 0 1
43226: PUSH
43227: LD_INT 1
43229: ARRAY
43230: PPUSH
43231: CALL_OW 255
43235: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43236: LD_ADDR_VAR 0 10
43240: PUSH
43241: LD_INT 29
43243: PUSH
43244: LD_INT 91
43246: PUSH
43247: LD_INT 49
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// if not result then
43255: LD_VAR 0 3
43259: NOT
43260: IFFALSE 43264
// exit ;
43262: GO 43724
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43264: LD_ADDR_VAR 0 5
43268: PUSH
43269: LD_INT 81
43271: PUSH
43272: LD_VAR 0 8
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PPUSH
43281: CALL_OW 69
43285: ST_TO_ADDR
// for i in result do
43286: LD_ADDR_VAR 0 4
43290: PUSH
43291: LD_VAR 0 3
43295: PUSH
43296: FOR_IN
43297: IFFALSE 43722
// begin tag := GetTag ( i ) + 1 ;
43299: LD_ADDR_VAR 0 9
43303: PUSH
43304: LD_VAR 0 4
43308: PPUSH
43309: CALL_OW 110
43313: PUSH
43314: LD_INT 1
43316: PLUS
43317: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43318: LD_ADDR_VAR 0 7
43322: PUSH
43323: LD_VAR 0 4
43327: PPUSH
43328: CALL_OW 250
43332: PPUSH
43333: LD_VAR 0 4
43337: PPUSH
43338: CALL_OW 251
43342: PPUSH
43343: LD_INT 4
43345: PPUSH
43346: CALL 42919 0 3
43350: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43351: LD_VAR 0 4
43355: PPUSH
43356: CALL_OW 247
43360: PUSH
43361: LD_INT 2
43363: EQUAL
43364: PUSH
43365: LD_VAR 0 7
43369: PUSH
43370: LD_INT 2
43372: GREATER
43373: AND
43374: PUSH
43375: LD_VAR 0 4
43379: PPUSH
43380: CALL_OW 264
43384: PUSH
43385: LD_VAR 0 10
43389: IN
43390: NOT
43391: AND
43392: IFFALSE 43431
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43394: LD_VAR 0 4
43398: PPUSH
43399: LD_VAR 0 7
43403: PUSH
43404: LD_INT 1
43406: ARRAY
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PPUSH
43412: LD_VAR 0 7
43416: PUSH
43417: LD_INT 1
43419: ARRAY
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: PPUSH
43425: CALL_OW 116
43429: GO 43720
// if path > tag then
43431: LD_VAR 0 2
43435: PUSH
43436: LD_VAR 0 9
43440: GREATER
43441: IFFALSE 43649
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43443: LD_ADDR_VAR 0 6
43447: PUSH
43448: LD_VAR 0 5
43452: PPUSH
43453: LD_INT 91
43455: PUSH
43456: LD_VAR 0 4
43460: PUSH
43461: LD_INT 8
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: PPUSH
43469: CALL_OW 72
43473: ST_TO_ADDR
// if nearEnemy then
43474: LD_VAR 0 6
43478: IFFALSE 43547
// begin if GetWeapon ( i ) = ru_time_lapser then
43480: LD_VAR 0 4
43484: PPUSH
43485: CALL_OW 264
43489: PUSH
43490: LD_INT 49
43492: EQUAL
43493: IFFALSE 43521
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43495: LD_VAR 0 4
43499: PPUSH
43500: LD_VAR 0 6
43504: PPUSH
43505: LD_VAR 0 4
43509: PPUSH
43510: CALL_OW 74
43514: PPUSH
43515: CALL_OW 112
43519: GO 43545
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43521: LD_VAR 0 4
43525: PPUSH
43526: LD_VAR 0 6
43530: PPUSH
43531: LD_VAR 0 4
43535: PPUSH
43536: CALL_OW 74
43540: PPUSH
43541: CALL 44795 0 2
// end else
43545: GO 43647
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43547: LD_VAR 0 4
43551: PPUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_VAR 0 9
43561: ARRAY
43562: PUSH
43563: LD_INT 1
43565: ARRAY
43566: PPUSH
43567: LD_VAR 0 2
43571: PUSH
43572: LD_VAR 0 9
43576: ARRAY
43577: PUSH
43578: LD_INT 2
43580: ARRAY
43581: PPUSH
43582: CALL_OW 297
43586: PUSH
43587: LD_INT 6
43589: GREATER
43590: IFFALSE 43633
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43592: LD_VAR 0 4
43596: PPUSH
43597: LD_VAR 0 2
43601: PUSH
43602: LD_VAR 0 9
43606: ARRAY
43607: PUSH
43608: LD_INT 1
43610: ARRAY
43611: PPUSH
43612: LD_VAR 0 2
43616: PUSH
43617: LD_VAR 0 9
43621: ARRAY
43622: PUSH
43623: LD_INT 2
43625: ARRAY
43626: PPUSH
43627: CALL_OW 114
43631: GO 43647
// SetTag ( i , tag ) ;
43633: LD_VAR 0 4
43637: PPUSH
43638: LD_VAR 0 9
43642: PPUSH
43643: CALL_OW 109
// end else
43647: GO 43720
// if enemy then
43649: LD_VAR 0 5
43653: IFFALSE 43720
// begin if GetWeapon ( i ) = ru_time_lapser then
43655: LD_VAR 0 4
43659: PPUSH
43660: CALL_OW 264
43664: PUSH
43665: LD_INT 49
43667: EQUAL
43668: IFFALSE 43696
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43670: LD_VAR 0 4
43674: PPUSH
43675: LD_VAR 0 5
43679: PPUSH
43680: LD_VAR 0 4
43684: PPUSH
43685: CALL_OW 74
43689: PPUSH
43690: CALL_OW 112
43694: GO 43720
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43696: LD_VAR 0 4
43700: PPUSH
43701: LD_VAR 0 5
43705: PPUSH
43706: LD_VAR 0 4
43710: PPUSH
43711: CALL_OW 74
43715: PPUSH
43716: CALL 44795 0 2
// end ; end ;
43720: GO 43296
43722: POP
43723: POP
// end ;
43724: LD_VAR 0 3
43728: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43729: LD_INT 0
43731: PPUSH
43732: PPUSH
43733: PPUSH
// if not unit or IsInUnit ( unit ) then
43734: LD_VAR 0 1
43738: NOT
43739: PUSH
43740: LD_VAR 0 1
43744: PPUSH
43745: CALL_OW 310
43749: OR
43750: IFFALSE 43754
// exit ;
43752: GO 43845
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43754: LD_ADDR_VAR 0 4
43758: PUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 250
43768: PPUSH
43769: LD_VAR 0 2
43773: PPUSH
43774: LD_INT 1
43776: PPUSH
43777: CALL_OW 272
43781: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43782: LD_ADDR_VAR 0 5
43786: PUSH
43787: LD_VAR 0 1
43791: PPUSH
43792: CALL_OW 251
43796: PPUSH
43797: LD_VAR 0 2
43801: PPUSH
43802: LD_INT 1
43804: PPUSH
43805: CALL_OW 273
43809: ST_TO_ADDR
// if ValidHex ( x , y ) then
43810: LD_VAR 0 4
43814: PPUSH
43815: LD_VAR 0 5
43819: PPUSH
43820: CALL_OW 488
43824: IFFALSE 43845
// ComTurnXY ( unit , x , y ) ;
43826: LD_VAR 0 1
43830: PPUSH
43831: LD_VAR 0 4
43835: PPUSH
43836: LD_VAR 0 5
43840: PPUSH
43841: CALL_OW 118
// end ;
43845: LD_VAR 0 3
43849: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43850: LD_INT 0
43852: PPUSH
43853: PPUSH
// result := false ;
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 0
43861: ST_TO_ADDR
// if not units then
43862: LD_VAR 0 2
43866: NOT
43867: IFFALSE 43871
// exit ;
43869: GO 43916
// for i in units do
43871: LD_ADDR_VAR 0 4
43875: PUSH
43876: LD_VAR 0 2
43880: PUSH
43881: FOR_IN
43882: IFFALSE 43914
// if See ( side , i ) then
43884: LD_VAR 0 1
43888: PPUSH
43889: LD_VAR 0 4
43893: PPUSH
43894: CALL_OW 292
43898: IFFALSE 43912
// begin result := true ;
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_INT 1
43907: ST_TO_ADDR
// exit ;
43908: POP
43909: POP
43910: GO 43916
// end ;
43912: GO 43881
43914: POP
43915: POP
// end ;
43916: LD_VAR 0 3
43920: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43921: LD_INT 0
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
// if not unit or not points then
43927: LD_VAR 0 1
43931: NOT
43932: PUSH
43933: LD_VAR 0 2
43937: NOT
43938: OR
43939: IFFALSE 43943
// exit ;
43941: GO 44033
// dist := 99999 ;
43943: LD_ADDR_VAR 0 5
43947: PUSH
43948: LD_INT 99999
43950: ST_TO_ADDR
// for i in points do
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_VAR 0 2
43960: PUSH
43961: FOR_IN
43962: IFFALSE 44031
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43964: LD_ADDR_VAR 0 6
43968: PUSH
43969: LD_VAR 0 1
43973: PPUSH
43974: LD_VAR 0 4
43978: PUSH
43979: LD_INT 1
43981: ARRAY
43982: PPUSH
43983: LD_VAR 0 4
43987: PUSH
43988: LD_INT 2
43990: ARRAY
43991: PPUSH
43992: CALL_OW 297
43996: ST_TO_ADDR
// if tmpDist < dist then
43997: LD_VAR 0 6
44001: PUSH
44002: LD_VAR 0 5
44006: LESS
44007: IFFALSE 44029
// begin result := i ;
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_VAR 0 4
44018: ST_TO_ADDR
// dist := tmpDist ;
44019: LD_ADDR_VAR 0 5
44023: PUSH
44024: LD_VAR 0 6
44028: ST_TO_ADDR
// end ; end ;
44029: GO 43961
44031: POP
44032: POP
// end ;
44033: LD_VAR 0 3
44037: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44038: LD_INT 0
44040: PPUSH
// uc_side := side ;
44041: LD_ADDR_OWVAR 20
44045: PUSH
44046: LD_VAR 0 1
44050: ST_TO_ADDR
// uc_nation := 3 ;
44051: LD_ADDR_OWVAR 21
44055: PUSH
44056: LD_INT 3
44058: ST_TO_ADDR
// vc_chassis := 25 ;
44059: LD_ADDR_OWVAR 37
44063: PUSH
44064: LD_INT 25
44066: ST_TO_ADDR
// vc_engine := engine_siberite ;
44067: LD_ADDR_OWVAR 39
44071: PUSH
44072: LD_INT 3
44074: ST_TO_ADDR
// vc_control := control_computer ;
44075: LD_ADDR_OWVAR 38
44079: PUSH
44080: LD_INT 3
44082: ST_TO_ADDR
// vc_weapon := 59 ;
44083: LD_ADDR_OWVAR 40
44087: PUSH
44088: LD_INT 59
44090: ST_TO_ADDR
// result := CreateVehicle ;
44091: LD_ADDR_VAR 0 5
44095: PUSH
44096: CALL_OW 45
44100: ST_TO_ADDR
// SetDir ( result , d ) ;
44101: LD_VAR 0 5
44105: PPUSH
44106: LD_VAR 0 4
44110: PPUSH
44111: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44115: LD_VAR 0 5
44119: PPUSH
44120: LD_VAR 0 2
44124: PPUSH
44125: LD_VAR 0 3
44129: PPUSH
44130: LD_INT 0
44132: PPUSH
44133: CALL_OW 48
// end ;
44137: LD_VAR 0 5
44141: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44142: LD_INT 0
44144: PPUSH
44145: PPUSH
44146: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44147: LD_ADDR_VAR 0 2
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44170: LD_VAR 0 1
44174: NOT
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 264
44185: PUSH
44186: LD_INT 12
44188: PUSH
44189: LD_INT 51
44191: PUSH
44192: LD_INT 32
44194: PUSH
44195: LD_INT 89
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: IN
44204: NOT
44205: OR
44206: IFFALSE 44210
// exit ;
44208: GO 44308
// for i := 1 to 3 do
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: DOUBLE
44216: LD_INT 1
44218: DEC
44219: ST_TO_ADDR
44220: LD_INT 3
44222: PUSH
44223: FOR_TO
44224: IFFALSE 44306
// begin tmp := GetCargo ( cargo , i ) ;
44226: LD_ADDR_VAR 0 4
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: LD_VAR 0 3
44240: PPUSH
44241: CALL_OW 289
44245: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44246: LD_ADDR_VAR 0 2
44250: PUSH
44251: LD_VAR 0 2
44255: PPUSH
44256: LD_VAR 0 3
44260: PPUSH
44261: LD_VAR 0 4
44265: PPUSH
44266: CALL_OW 1
44270: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44271: LD_ADDR_VAR 0 2
44275: PUSH
44276: LD_VAR 0 2
44280: PPUSH
44281: LD_INT 4
44283: PPUSH
44284: LD_VAR 0 2
44288: PUSH
44289: LD_INT 4
44291: ARRAY
44292: PUSH
44293: LD_VAR 0 4
44297: PLUS
44298: PPUSH
44299: CALL_OW 1
44303: ST_TO_ADDR
// end ;
44304: GO 44223
44306: POP
44307: POP
// end ;
44308: LD_VAR 0 2
44312: RET
// export function Length ( array ) ; begin
44313: LD_INT 0
44315: PPUSH
// result := array + 0 ;
44316: LD_ADDR_VAR 0 2
44320: PUSH
44321: LD_VAR 0 1
44325: PUSH
44326: LD_INT 0
44328: PLUS
44329: ST_TO_ADDR
// end ;
44330: LD_VAR 0 2
44334: RET
// export function PrepareArray ( array ) ; begin
44335: LD_INT 0
44337: PPUSH
// result := array diff 0 ;
44338: LD_ADDR_VAR 0 2
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 0
44350: DIFF
44351: ST_TO_ADDR
// if not result [ 1 ] then
44352: LD_VAR 0 2
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: NOT
44361: IFFALSE 44381
// result := Delete ( result , 1 ) ;
44363: LD_ADDR_VAR 0 2
44367: PUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: LD_INT 1
44375: PPUSH
44376: CALL_OW 3
44380: ST_TO_ADDR
// end ;
44381: LD_VAR 0 2
44385: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44386: LD_INT 0
44388: PPUSH
44389: PPUSH
44390: PPUSH
44391: PPUSH
// sibRocketRange := 25 ;
44392: LD_ADDR_VAR 0 6
44396: PUSH
44397: LD_INT 25
44399: ST_TO_ADDR
// result := false ;
44400: LD_ADDR_VAR 0 4
44404: PUSH
44405: LD_INT 0
44407: ST_TO_ADDR
// for i := 0 to 5 do
44408: LD_ADDR_VAR 0 5
44412: PUSH
44413: DOUBLE
44414: LD_INT 0
44416: DEC
44417: ST_TO_ADDR
44418: LD_INT 5
44420: PUSH
44421: FOR_TO
44422: IFFALSE 44489
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44424: LD_VAR 0 1
44428: PPUSH
44429: LD_VAR 0 5
44433: PPUSH
44434: LD_VAR 0 6
44438: PPUSH
44439: CALL_OW 272
44443: PPUSH
44444: LD_VAR 0 2
44448: PPUSH
44449: LD_VAR 0 5
44453: PPUSH
44454: LD_VAR 0 6
44458: PPUSH
44459: CALL_OW 273
44463: PPUSH
44464: LD_VAR 0 3
44468: PPUSH
44469: CALL_OW 309
44473: IFFALSE 44487
// begin result := true ;
44475: LD_ADDR_VAR 0 4
44479: PUSH
44480: LD_INT 1
44482: ST_TO_ADDR
// exit ;
44483: POP
44484: POP
44485: GO 44491
// end ;
44487: GO 44421
44489: POP
44490: POP
// end ;
44491: LD_VAR 0 4
44495: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
44500: PPUSH
// if btype = b_depot then
44501: LD_VAR 0 2
44505: PUSH
44506: LD_INT 0
44508: EQUAL
44509: IFFALSE 44521
// begin result := true ;
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: LD_INT 1
44518: ST_TO_ADDR
// exit ;
44519: GO 44637
// end ; pom := GetBase ( depot ) ;
44521: LD_ADDR_VAR 0 4
44525: PUSH
44526: LD_VAR 0 1
44530: PPUSH
44531: CALL_OW 274
44535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44536: LD_ADDR_VAR 0 5
44540: PUSH
44541: LD_VAR 0 2
44545: PPUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 248
44555: PPUSH
44556: CALL_OW 450
44560: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44561: LD_ADDR_VAR 0 3
44565: PUSH
44566: LD_VAR 0 4
44570: PPUSH
44571: LD_INT 1
44573: PPUSH
44574: CALL_OW 275
44578: PUSH
44579: LD_VAR 0 5
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: GREATEREQUAL
44588: PUSH
44589: LD_VAR 0 4
44593: PPUSH
44594: LD_INT 2
44596: PPUSH
44597: CALL_OW 275
44601: PUSH
44602: LD_VAR 0 5
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: GREATEREQUAL
44611: AND
44612: PUSH
44613: LD_VAR 0 4
44617: PPUSH
44618: LD_INT 3
44620: PPUSH
44621: CALL_OW 275
44625: PUSH
44626: LD_VAR 0 5
44630: PUSH
44631: LD_INT 3
44633: ARRAY
44634: GREATEREQUAL
44635: AND
44636: ST_TO_ADDR
// end ;
44637: LD_VAR 0 3
44641: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44642: LD_INT 0
44644: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44645: LD_VAR 0 1
44649: PPUSH
44650: LD_VAR 0 2
44654: PPUSH
44655: LD_INT 0
44657: PPUSH
44658: LD_INT 0
44660: PPUSH
44661: LD_INT 1
44663: PPUSH
44664: LD_INT 0
44666: PPUSH
44667: CALL_OW 587
// end ;
44671: LD_VAR 0 3
44675: RET
// export function CenterOnNow ( unit ) ; begin
44676: LD_INT 0
44678: PPUSH
// result := IsInUnit ( unit ) ;
44679: LD_ADDR_VAR 0 2
44683: PUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: CALL_OW 310
44693: ST_TO_ADDR
// if not result then
44694: LD_VAR 0 2
44698: NOT
44699: IFFALSE 44711
// result := unit ;
44701: LD_ADDR_VAR 0 2
44705: PUSH
44706: LD_VAR 0 1
44710: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 87
// end ;
44720: LD_VAR 0 2
44724: RET
// export function ComMoveHex ( unit , hex ) ; begin
44725: LD_INT 0
44727: PPUSH
// if not hex then
44728: LD_VAR 0 2
44732: NOT
44733: IFFALSE 44737
// exit ;
44735: GO 44790
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 1
44744: ARRAY
44745: PPUSH
44746: LD_VAR 0 2
44750: PUSH
44751: LD_INT 2
44753: ARRAY
44754: PPUSH
44755: CALL_OW 428
44759: IFFALSE 44763
// exit ;
44761: GO 44790
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44763: LD_VAR 0 1
44767: PPUSH
44768: LD_VAR 0 2
44772: PUSH
44773: LD_INT 1
44775: ARRAY
44776: PPUSH
44777: LD_VAR 0 2
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: PPUSH
44786: CALL_OW 111
// end ;
44790: LD_VAR 0 3
44794: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44795: LD_INT 0
44797: PPUSH
44798: PPUSH
44799: PPUSH
// if not unit or not enemy then
44800: LD_VAR 0 1
44804: NOT
44805: PUSH
44806: LD_VAR 0 2
44810: NOT
44811: OR
44812: IFFALSE 44816
// exit ;
44814: GO 44940
// x := GetX ( enemy ) ;
44816: LD_ADDR_VAR 0 4
44820: PUSH
44821: LD_VAR 0 2
44825: PPUSH
44826: CALL_OW 250
44830: ST_TO_ADDR
// y := GetY ( enemy ) ;
44831: LD_ADDR_VAR 0 5
44835: PUSH
44836: LD_VAR 0 2
44840: PPUSH
44841: CALL_OW 251
44845: ST_TO_ADDR
// if ValidHex ( x , y ) then
44846: LD_VAR 0 4
44850: PPUSH
44851: LD_VAR 0 5
44855: PPUSH
44856: CALL_OW 488
44860: IFFALSE 44940
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44862: LD_VAR 0 2
44866: PPUSH
44867: CALL_OW 247
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: IN
44882: PUSH
44883: LD_VAR 0 1
44887: PPUSH
44888: CALL_OW 255
44892: PPUSH
44893: LD_VAR 0 2
44897: PPUSH
44898: CALL_OW 292
44902: OR
44903: IFFALSE 44921
// ComAttackUnit ( unit , enemy ) else
44905: LD_VAR 0 1
44909: PPUSH
44910: LD_VAR 0 2
44914: PPUSH
44915: CALL_OW 115
44919: GO 44940
// ComAgressiveMove ( unit , x , y ) ;
44921: LD_VAR 0 1
44925: PPUSH
44926: LD_VAR 0 4
44930: PPUSH
44931: LD_VAR 0 5
44935: PPUSH
44936: CALL_OW 114
// end ;
44940: LD_VAR 0 3
44944: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44945: LD_INT 0
44947: PPUSH
44948: PPUSH
44949: PPUSH
// list := AreaToList ( area , 0 ) ;
44950: LD_ADDR_VAR 0 5
44954: PUSH
44955: LD_VAR 0 1
44959: PPUSH
44960: LD_INT 0
44962: PPUSH
44963: CALL_OW 517
44967: ST_TO_ADDR
// if not list then
44968: LD_VAR 0 5
44972: NOT
44973: IFFALSE 44977
// exit ;
44975: GO 45107
// if all then
44977: LD_VAR 0 2
44981: IFFALSE 45069
// begin for i := 1 to list [ 1 ] do
44983: LD_ADDR_VAR 0 4
44987: PUSH
44988: DOUBLE
44989: LD_INT 1
44991: DEC
44992: ST_TO_ADDR
44993: LD_VAR 0 5
44997: PUSH
44998: LD_INT 1
45000: ARRAY
45001: PUSH
45002: FOR_TO
45003: IFFALSE 45065
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_VAR 0 3
45014: PPUSH
45015: LD_VAR 0 3
45019: PUSH
45020: LD_INT 1
45022: PLUS
45023: PPUSH
45024: LD_VAR 0 5
45028: PUSH
45029: LD_INT 1
45031: ARRAY
45032: PUSH
45033: LD_VAR 0 4
45037: ARRAY
45038: PUSH
45039: LD_VAR 0 5
45043: PUSH
45044: LD_INT 2
45046: ARRAY
45047: PUSH
45048: LD_VAR 0 4
45052: ARRAY
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PPUSH
45058: CALL_OW 1
45062: ST_TO_ADDR
45063: GO 45002
45065: POP
45066: POP
// exit ;
45067: GO 45107
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_VAR 0 5
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PUSH
45087: LD_VAR 0 5
45091: PUSH
45092: LD_INT 2
45094: ARRAY
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: ST_TO_ADDR
// end ;
45107: LD_VAR 0 3
45111: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45112: LD_INT 0
45114: PPUSH
45115: PPUSH
// list := AreaToList ( area , 0 ) ;
45116: LD_ADDR_VAR 0 4
45120: PUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: LD_INT 0
45128: PPUSH
45129: CALL_OW 517
45133: ST_TO_ADDR
// if not list then
45134: LD_VAR 0 4
45138: NOT
45139: IFFALSE 45143
// exit ;
45141: GO 45184
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_VAR 0 4
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: PUSH
45157: LD_INT 1
45159: ARRAY
45160: PUSH
45161: LD_VAR 0 4
45165: PUSH
45166: LD_INT 2
45168: ARRAY
45169: PUSH
45170: LD_INT 1
45172: ARRAY
45173: PUSH
45174: LD_VAR 0 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// end ;
45184: LD_VAR 0 3
45188: RET
// export function First ( array ) ; begin
45189: LD_INT 0
45191: PPUSH
// if not array then
45192: LD_VAR 0 1
45196: NOT
45197: IFFALSE 45201
// exit ;
45199: GO 45215
// result := array [ 1 ] ;
45201: LD_ADDR_VAR 0 2
45205: PUSH
45206: LD_VAR 0 1
45210: PUSH
45211: LD_INT 1
45213: ARRAY
45214: ST_TO_ADDR
// end ;
45215: LD_VAR 0 2
45219: RET
// export function Last ( array ) ; begin
45220: LD_INT 0
45222: PPUSH
// if not array then
45223: LD_VAR 0 1
45227: NOT
45228: IFFALSE 45232
// exit ;
45230: GO 45248
// result := array [ array ] ;
45232: LD_ADDR_VAR 0 2
45236: PUSH
45237: LD_VAR 0 1
45241: PUSH
45242: LD_VAR 0 1
45246: ARRAY
45247: ST_TO_ADDR
// end ;
45248: LD_VAR 0 2
45252: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45253: LD_INT 0
45255: PPUSH
45256: PPUSH
// result := [ ] ;
45257: LD_ADDR_VAR 0 5
45261: PUSH
45262: EMPTY
45263: ST_TO_ADDR
// if not array then
45264: LD_VAR 0 1
45268: NOT
45269: IFFALSE 45273
// exit ;
45271: GO 45385
// for i := 1 to array do
45273: LD_ADDR_VAR 0 6
45277: PUSH
45278: DOUBLE
45279: LD_INT 1
45281: DEC
45282: ST_TO_ADDR
45283: LD_VAR 0 1
45287: PUSH
45288: FOR_TO
45289: IFFALSE 45383
// if array [ i ] [ index ] = value then
45291: LD_VAR 0 1
45295: PUSH
45296: LD_VAR 0 6
45300: ARRAY
45301: PUSH
45302: LD_VAR 0 2
45306: ARRAY
45307: PUSH
45308: LD_VAR 0 3
45312: EQUAL
45313: IFFALSE 45381
// begin if indexColumn then
45315: LD_VAR 0 4
45319: IFFALSE 45355
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45321: LD_ADDR_VAR 0 5
45325: PUSH
45326: LD_VAR 0 5
45330: PPUSH
45331: LD_VAR 0 1
45335: PUSH
45336: LD_VAR 0 6
45340: ARRAY
45341: PUSH
45342: LD_VAR 0 4
45346: ARRAY
45347: PPUSH
45348: CALL 40573 0 2
45352: ST_TO_ADDR
45353: GO 45381
// result := Join ( result , array [ i ] ) ;
45355: LD_ADDR_VAR 0 5
45359: PUSH
45360: LD_VAR 0 5
45364: PPUSH
45365: LD_VAR 0 1
45369: PUSH
45370: LD_VAR 0 6
45374: ARRAY
45375: PPUSH
45376: CALL 40573 0 2
45380: ST_TO_ADDR
// end ;
45381: GO 45288
45383: POP
45384: POP
// end ;
45385: LD_VAR 0 5
45389: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45390: LD_INT 0
45392: PPUSH
// if not vehicles or not parkingPoint then
45393: LD_VAR 0 1
45397: NOT
45398: PUSH
45399: LD_VAR 0 2
45403: NOT
45404: OR
45405: IFFALSE 45409
// exit ;
45407: GO 45507
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45409: LD_ADDR_VAR 0 1
45413: PUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: LD_INT 50
45421: PUSH
45422: EMPTY
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: LD_INT 92
45430: PUSH
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PUSH
45440: LD_VAR 0 2
45444: PUSH
45445: LD_INT 2
45447: ARRAY
45448: PUSH
45449: LD_INT 8
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 72
45470: ST_TO_ADDR
// if not vehicles then
45471: LD_VAR 0 1
45475: NOT
45476: IFFALSE 45480
// exit ;
45478: GO 45507
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45480: LD_VAR 0 1
45484: PPUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_INT 1
45492: ARRAY
45493: PPUSH
45494: LD_VAR 0 2
45498: PUSH
45499: LD_INT 2
45501: ARRAY
45502: PPUSH
45503: CALL_OW 111
// end ;
45507: LD_VAR 0 3
45511: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
// if not side or not area then
45517: LD_VAR 0 1
45521: NOT
45522: PUSH
45523: LD_VAR 0 2
45527: NOT
45528: OR
45529: IFFALSE 45533
// exit ;
45531: GO 45652
// tmp := AreaToList ( area , 0 ) ;
45533: LD_ADDR_VAR 0 5
45537: PUSH
45538: LD_VAR 0 2
45542: PPUSH
45543: LD_INT 0
45545: PPUSH
45546: CALL_OW 517
45550: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45551: LD_ADDR_VAR 0 4
45555: PUSH
45556: DOUBLE
45557: LD_INT 1
45559: DEC
45560: ST_TO_ADDR
45561: LD_VAR 0 5
45565: PUSH
45566: LD_INT 1
45568: ARRAY
45569: PUSH
45570: FOR_TO
45571: IFFALSE 45650
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45573: LD_VAR 0 5
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PUSH
45582: LD_VAR 0 4
45586: ARRAY
45587: PPUSH
45588: LD_VAR 0 5
45592: PUSH
45593: LD_INT 2
45595: ARRAY
45596: PUSH
45597: LD_VAR 0 4
45601: ARRAY
45602: PPUSH
45603: CALL_OW 351
45607: IFFALSE 45648
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45609: LD_VAR 0 5
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PUSH
45618: LD_VAR 0 4
45622: ARRAY
45623: PPUSH
45624: LD_VAR 0 5
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PUSH
45633: LD_VAR 0 4
45637: ARRAY
45638: PPUSH
45639: LD_VAR 0 1
45643: PPUSH
45644: CALL_OW 244
// end ;
45648: GO 45570
45650: POP
45651: POP
// end ; end_of_file
45652: LD_VAR 0 3
45656: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45657: LD_INT 0
45659: PPUSH
45660: PPUSH
// disable ( mpActive ) ;
45661: LD_INT 100
45663: DISABLE_MARKED
// disable ( mpWin ) ;
45664: LD_INT 101
45666: DISABLE_MARKED
// disable ( mpLose ) ;
45667: LD_INT 102
45669: DISABLE_MARKED
// mpGameType := 0 ;
45670: LD_ADDR_EXP 1
45674: PUSH
45675: LD_INT 0
45677: ST_TO_ADDR
// mpGameSettings := [ ] ;
45678: LD_ADDR_EXP 4
45682: PUSH
45683: EMPTY
45684: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45685: LD_ADDR_EXP 2
45689: PUSH
45690: EMPTY
45691: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45692: LD_ADDR_EXP 3
45696: PUSH
45697: EMPTY
45698: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45699: LD_ADDR_EXP 27
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45714: LD_ADDR_EXP 10
45718: PUSH
45719: EMPTY
45720: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45721: LD_ADDR_EXP 11
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// mpDepots := [ ] ;
45728: LD_ADDR_EXP 12
45732: PUSH
45733: EMPTY
45734: ST_TO_ADDR
// mpBuildings := [ ] ;
45735: LD_ADDR_EXP 15
45739: PUSH
45740: EMPTY
45741: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45742: LD_ADDR_EXP 16
45746: PUSH
45747: EMPTY
45748: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45749: LD_ADDR_EXP 17
45753: PUSH
45754: EMPTY
45755: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45756: LD_ADDR_EXP 18
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// mpStartingResources := [ ] ;
45763: LD_ADDR_EXP 13
45767: PUSH
45768: EMPTY
45769: ST_TO_ADDR
// mpStartPos := [ ] ;
45770: LD_ADDR_EXP 19
45774: PUSH
45775: EMPTY
45776: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45777: LD_ADDR_EXP 20
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45786: LD_ADDR_EXP 21
45790: PUSH
45791: EMPTY
45792: ST_TO_ADDR
// mpApemans := [ ] ;
45793: LD_ADDR_EXP 28
45797: PUSH
45798: EMPTY
45799: ST_TO_ADDR
// mpApemansArea := [ ] ;
45800: LD_ADDR_EXP 29
45804: PUSH
45805: EMPTY
45806: ST_TO_ADDR
// mpRespawn := [ ] ;
45807: LD_ADDR_EXP 30
45811: PUSH
45812: EMPTY
45813: ST_TO_ADDR
// mpKingArea := 0 ;
45814: LD_ADDR_EXP 31
45818: PUSH
45819: LD_INT 0
45821: ST_TO_ADDR
// mpPoints := [ ] ;
45822: LD_ADDR_EXP 32
45826: PUSH
45827: EMPTY
45828: ST_TO_ADDR
// mpVehicles := 0 ;
45829: LD_ADDR_EXP 33
45833: PUSH
45834: LD_INT 0
45836: ST_TO_ADDR
// mpShipments := 0 ;
45837: LD_ADDR_EXP 25
45841: PUSH
45842: LD_INT 0
45844: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45845: LD_ADDR_EXP 37
45849: PUSH
45850: EMPTY
45851: PUSH
45852: EMPTY
45853: PUSH
45854: EMPTY
45855: PUSH
45856: EMPTY
45857: PUSH
45858: EMPTY
45859: PUSH
45860: EMPTY
45861: PUSH
45862: EMPTY
45863: PUSH
45864: EMPTY
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// mpEmissions := 0 ;
45876: LD_ADDR_EXP 34
45880: PUSH
45881: LD_INT 0
45883: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45884: LD_ADDR_EXP 23
45888: PUSH
45889: LD_INT 3
45891: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45892: LD_ADDR_EXP 22
45896: PUSH
45897: LD_INT 15
45899: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45900: LD_ADDR_EXP 35
45904: PUSH
45905: LD_INT 0
45907: ST_TO_ADDR
// mpGameActive := false ;
45908: LD_ADDR_EXP 36
45912: PUSH
45913: LD_INT 0
45915: ST_TO_ADDR
// mpBlockRespThread := false ;
45916: LD_ADDR_EXP 38
45920: PUSH
45921: LD_INT 0
45923: ST_TO_ADDR
// for i := 1 to 32 do
45924: LD_ADDR_VAR 0 2
45928: PUSH
45929: DOUBLE
45930: LD_INT 1
45932: DEC
45933: ST_TO_ADDR
45934: LD_INT 32
45936: PUSH
45937: FOR_TO
45938: IFFALSE 45965
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45940: LD_ADDR_EXP 4
45944: PUSH
45945: LD_EXP 4
45949: PPUSH
45950: LD_VAR 0 2
45954: PPUSH
45955: LD_INT 0
45957: PPUSH
45958: CALL_OW 1
45962: ST_TO_ADDR
45963: GO 45937
45965: POP
45966: POP
// end ;
45967: LD_VAR 0 1
45971: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45972: LD_INT 0
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45988: LD_ADDR_VAR 0 14
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// for i in gameTypes do
46007: LD_ADDR_VAR 0 2
46011: PUSH
46012: LD_VAR 0 14
46016: PUSH
46017: FOR_IN
46018: IFFALSE 46027
// disable ( i ) ;
46020: LD_VAR 0 2
46024: DISABLE_MARKED
46025: GO 46017
46027: POP
46028: POP
// if Multiplayer then
46029: LD_OWVAR 4
46033: IFFALSE 46217
// begin mpGameType := mp_game_type ;
46035: LD_ADDR_EXP 1
46039: PUSH
46040: LD_OWVAR 6
46044: ST_TO_ADDR
// your_side := mp_player_side ;
46045: LD_ADDR_OWVAR 2
46049: PUSH
46050: LD_OWVAR 7
46054: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46055: LD_ADDR_EXP 5
46059: PUSH
46060: LD_OWVAR 17
46064: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46065: LD_ADDR_EXP 6
46069: PUSH
46070: LD_OWVAR 15
46074: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46075: LD_ADDR_EXP 7
46079: PUSH
46080: LD_OWVAR 16
46084: ST_TO_ADDR
// mpTeams := mp_teams ;
46085: LD_ADDR_EXP 8
46089: PUSH
46090: LD_OWVAR 12
46094: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46095: LD_ADDR_VAR 0 2
46099: PUSH
46100: DOUBLE
46101: LD_INT 1
46103: DEC
46104: ST_TO_ADDR
46105: LD_EXP 2
46109: PPUSH
46110: CALL 4984 0 1
46114: PUSH
46115: FOR_TO
46116: IFFALSE 46192
// begin setting := mpGameSettingsKeys [ i ] ;
46118: LD_ADDR_VAR 0 12
46122: PUSH
46123: LD_EXP 2
46127: PUSH
46128: LD_VAR 0 2
46132: ARRAY
46133: ST_TO_ADDR
// if setting then
46134: LD_VAR 0 12
46138: IFFALSE 46190
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46140: LD_ADDR_EXP 4
46144: PUSH
46145: LD_EXP 4
46149: PPUSH
46150: LD_VAR 0 2
46154: PPUSH
46155: LD_EXP 3
46159: PUSH
46160: LD_VAR 0 2
46164: ARRAY
46165: PUSH
46166: LD_VAR 0 2
46170: PUSH
46171: LD_INT 1
46173: MINUS
46174: PPUSH
46175: CALL_OW 426
46179: PUSH
46180: LD_INT 1
46182: PLUS
46183: ARRAY
46184: PPUSH
46185: CALL_OW 1
46189: ST_TO_ADDR
// end ;
46190: GO 46115
46192: POP
46193: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46194: LD_ADDR_EXP 9
46198: PUSH
46199: LD_EXP 6
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: DIFF
46210: PUSH
46211: LD_INT 1
46213: GREATER
46214: ST_TO_ADDR
// end else
46215: GO 46217
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46217: LD_EXP 1
46221: PPUSH
46222: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
46226: LD_EXP 16
46230: PPUSH
46231: CALL 4984 0 1
46235: IFFALSE 46266
// begin for i in mpMarkedAreas do
46237: LD_ADDR_VAR 0 2
46241: PUSH
46242: LD_EXP 16
46246: PUSH
46247: FOR_IN
46248: IFFALSE 46264
// SetAreaMapShow ( i , 0 ) ;
46250: LD_VAR 0 2
46254: PPUSH
46255: LD_INT 0
46257: PPUSH
46258: CALL_OW 424
46262: GO 46247
46264: POP
46265: POP
// end ; for i := 1 to 8 do
46266: LD_ADDR_VAR 0 2
46270: PUSH
46271: DOUBLE
46272: LD_INT 1
46274: DEC
46275: ST_TO_ADDR
46276: LD_INT 8
46278: PUSH
46279: FOR_TO
46280: IFFALSE 47496
// begin if not mpSidePositions [ i ] then
46282: LD_EXP 5
46286: PUSH
46287: LD_VAR 0 2
46291: ARRAY
46292: NOT
46293: IFFALSE 46297
// continue ;
46295: GO 46279
// side := i ;
46297: LD_ADDR_VAR 0 7
46301: PUSH
46302: LD_VAR 0 2
46306: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46307: LD_ADDR_VAR 0 9
46311: PUSH
46312: LD_EXP 7
46316: PUSH
46317: LD_VAR 0 2
46321: ARRAY
46322: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46323: LD_ADDR_VAR 0 8
46327: PUSH
46328: LD_EXP 5
46332: PUSH
46333: LD_VAR 0 2
46337: ARRAY
46338: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46339: LD_EXP 10
46343: PPUSH
46344: CALL 4984 0 1
46348: IFFALSE 46425
// begin for j in mpOilDeposits [ pos ] do
46350: LD_ADDR_VAR 0 3
46354: PUSH
46355: LD_EXP 10
46359: PUSH
46360: LD_VAR 0 8
46364: ARRAY
46365: PUSH
46366: FOR_IN
46367: IFFALSE 46423
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46369: LD_VAR 0 3
46373: PUSH
46374: LD_INT 1
46376: ARRAY
46377: PPUSH
46378: LD_VAR 0 3
46382: PUSH
46383: LD_INT 2
46385: ARRAY
46386: PPUSH
46387: LD_INT 2
46389: PPUSH
46390: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46394: LD_VAR 0 3
46398: PUSH
46399: LD_INT 1
46401: ARRAY
46402: PPUSH
46403: LD_VAR 0 3
46407: PUSH
46408: LD_INT 2
46410: ARRAY
46411: PPUSH
46412: LD_VAR 0 7
46416: PPUSH
46417: CALL_OW 441
// end ;
46421: GO 46366
46423: POP
46424: POP
// end ; if Count ( mpSibDeposits ) then
46425: LD_EXP 11
46429: PPUSH
46430: CALL 4984 0 1
46434: IFFALSE 46511
// begin for j in mpSibDeposits [ pos ] do
46436: LD_ADDR_VAR 0 3
46440: PUSH
46441: LD_EXP 11
46445: PUSH
46446: LD_VAR 0 8
46450: ARRAY
46451: PUSH
46452: FOR_IN
46453: IFFALSE 46509
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46455: LD_VAR 0 3
46459: PUSH
46460: LD_INT 1
46462: ARRAY
46463: PPUSH
46464: LD_VAR 0 3
46468: PUSH
46469: LD_INT 2
46471: ARRAY
46472: PPUSH
46473: LD_INT 3
46475: PPUSH
46476: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46480: LD_VAR 0 3
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: LD_VAR 0 3
46493: PUSH
46494: LD_INT 2
46496: ARRAY
46497: PPUSH
46498: LD_VAR 0 7
46502: PPUSH
46503: CALL_OW 441
// end ;
46507: GO 46452
46509: POP
46510: POP
// end ; InitBc ;
46511: CALL_OW 21
// InitUc ;
46515: CALL_OW 18
// uc_side := side ;
46519: LD_ADDR_OWVAR 20
46523: PUSH
46524: LD_VAR 0 7
46528: ST_TO_ADDR
// uc_nation := nation ;
46529: LD_ADDR_OWVAR 21
46533: PUSH
46534: LD_VAR 0 9
46538: ST_TO_ADDR
// if Count ( mpDepots ) then
46539: LD_EXP 12
46543: PPUSH
46544: CALL 4984 0 1
46548: IFFALSE 46718
// begin bc_level := 0 ;
46550: LD_ADDR_OWVAR 43
46554: PUSH
46555: LD_INT 0
46557: ST_TO_ADDR
// bc_type := b_depot ;
46558: LD_ADDR_OWVAR 42
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46566: LD_ADDR_VAR 0 4
46570: PUSH
46571: LD_EXP 12
46575: PUSH
46576: LD_VAR 0 8
46580: ARRAY
46581: PUSH
46582: LD_INT 1
46584: ARRAY
46585: PPUSH
46586: LD_EXP 12
46590: PUSH
46591: LD_VAR 0 8
46595: ARRAY
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PPUSH
46601: LD_EXP 12
46605: PUSH
46606: LD_VAR 0 8
46610: ARRAY
46611: PUSH
46612: LD_INT 3
46614: ARRAY
46615: PPUSH
46616: CALL_OW 47
46620: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46621: LD_VAR 0 4
46625: PPUSH
46626: LD_STRING @
46628: PUSH
46629: LD_VAR 0 7
46633: STR
46634: PPUSH
46635: CALL_OW 500
// SetTag ( b , side ) ;
46639: LD_VAR 0 4
46643: PPUSH
46644: LD_VAR 0 7
46648: PPUSH
46649: CALL_OW 109
// if Count ( mpStartingResources ) then
46653: LD_EXP 13
46657: PPUSH
46658: CALL 4984 0 1
46662: IFFALSE 46716
// begin for j := 1 to mpStartingResources do
46664: LD_ADDR_VAR 0 3
46668: PUSH
46669: DOUBLE
46670: LD_INT 1
46672: DEC
46673: ST_TO_ADDR
46674: LD_EXP 13
46678: PUSH
46679: FOR_TO
46680: IFFALSE 46714
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46682: LD_VAR 0 4
46686: PPUSH
46687: CALL_OW 274
46691: PPUSH
46692: LD_VAR 0 3
46696: PPUSH
46697: LD_EXP 13
46701: PUSH
46702: LD_VAR 0 3
46706: ARRAY
46707: PPUSH
46708: CALL_OW 277
46712: GO 46679
46714: POP
46715: POP
// end ; end else
46716: GO 46865
// if Count ( mpStartingResources ) then
46718: LD_EXP 13
46722: PPUSH
46723: CALL 4984 0 1
46727: IFFALSE 46865
// begin for j := 1 to mpStartingResources do
46729: LD_ADDR_VAR 0 3
46733: PUSH
46734: DOUBLE
46735: LD_INT 1
46737: DEC
46738: ST_TO_ADDR
46739: LD_EXP 13
46743: PUSH
46744: FOR_TO
46745: IFFALSE 46863
// begin resources := mpStartingResources [ j ] ;
46747: LD_ADDR_VAR 0 13
46751: PUSH
46752: LD_EXP 13
46756: PUSH
46757: LD_VAR 0 3
46761: ARRAY
46762: ST_TO_ADDR
// repeat if resources >= 50 then
46763: LD_VAR 0 13
46767: PUSH
46768: LD_INT 50
46770: GREATEREQUAL
46771: IFFALSE 46817
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46773: LD_VAR 0 3
46777: PPUSH
46778: LD_INT 5
46780: PPUSH
46781: LD_VAR 0 5
46785: PPUSH
46786: LD_VAR 0 6
46790: PPUSH
46791: LD_INT 4
46793: PPUSH
46794: LD_INT 0
46796: PPUSH
46797: CALL_OW 60
// resources := resources - 50 ;
46801: LD_ADDR_VAR 0 13
46805: PUSH
46806: LD_VAR 0 13
46810: PUSH
46811: LD_INT 50
46813: MINUS
46814: ST_TO_ADDR
// end else
46815: GO 46851
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46817: LD_VAR 0 3
46821: PPUSH
46822: LD_VAR 0 13
46826: PUSH
46827: LD_INT 10
46829: DIV
46830: PPUSH
46831: LD_VAR 0 5
46835: PPUSH
46836: LD_VAR 0 6
46840: PPUSH
46841: LD_INT 4
46843: PPUSH
46844: LD_INT 0
46846: PPUSH
46847: CALL_OW 60
// until resources <= 0 ;
46851: LD_VAR 0 13
46855: PUSH
46856: LD_INT 0
46858: LESSEQUAL
46859: IFFALSE 46763
// end ;
46861: GO 46744
46863: POP
46864: POP
// end ; if Count ( mpBuildings ) then
46865: LD_EXP 15
46869: PPUSH
46870: CALL 4984 0 1
46874: IFFALSE 46952
// begin for j in mpBuildings [ pos ] do
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_EXP 15
46885: PUSH
46886: LD_VAR 0 8
46890: ARRAY
46891: PUSH
46892: FOR_IN
46893: IFFALSE 46950
// begin bc_level := 0 ;
46895: LD_ADDR_OWVAR 43
46899: PUSH
46900: LD_INT 0
46902: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46903: LD_ADDR_OWVAR 42
46907: PUSH
46908: LD_VAR 0 3
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46917: LD_VAR 0 3
46921: PUSH
46922: LD_INT 2
46924: ARRAY
46925: PPUSH
46926: LD_VAR 0 3
46930: PUSH
46931: LD_INT 3
46933: ARRAY
46934: PPUSH
46935: LD_VAR 0 3
46939: PUSH
46940: LD_INT 4
46942: ARRAY
46943: PPUSH
46944: CALL_OW 47
// end ;
46948: GO 46892
46950: POP
46951: POP
// end ; if mpBattleFlag > - 1 then
46952: LD_EXP 20
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: GREATER
46961: IFFALSE 47120
// begin x := mpStartPos [ pos ] [ 1 ] ;
46963: LD_ADDR_VAR 0 5
46967: PUSH
46968: LD_EXP 19
46972: PUSH
46973: LD_VAR 0 8
46977: ARRAY
46978: PUSH
46979: LD_INT 1
46981: ARRAY
46982: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46983: LD_ADDR_VAR 0 6
46987: PUSH
46988: LD_EXP 19
46992: PUSH
46993: LD_VAR 0 8
46997: ARRAY
46998: PUSH
46999: LD_INT 2
47001: ARRAY
47002: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47003: LD_VAR 0 5
47007: PPUSH
47008: LD_VAR 0 6
47012: PPUSH
47013: LD_INT 12
47015: PPUSH
47016: LD_INT 2
47018: PPUSH
47019: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47023: LD_ADDR_EXP 21
47027: PUSH
47028: LD_EXP 21
47032: PPUSH
47033: LD_VAR 0 7
47037: PPUSH
47038: LD_VAR 0 7
47042: PPUSH
47043: LD_VAR 0 5
47047: PPUSH
47048: LD_VAR 0 6
47052: PPUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 100
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 70
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: LD_INT 40
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 10
47085: PUSH
47086: LD_INT 25
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 20
47095: PUSH
47096: LD_INT 100
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: PPUSH
47110: CALL_OW 418
47114: PPUSH
47115: CALL_OW 1
47119: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47120: LD_EXP 24
47124: PUSH
47125: LD_INT 20
47127: PPUSH
47128: LD_VAR 0 7
47132: PPUSH
47133: CALL_OW 321
47137: PUSH
47138: LD_INT 1
47140: EQUAL
47141: AND
47142: IFFALSE 47159
// SetTech ( tech_SibDet , side , state_researched ) ;
47144: LD_INT 20
47146: PPUSH
47147: LD_VAR 0 7
47151: PPUSH
47152: LD_INT 2
47154: PPUSH
47155: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47159: LD_INT 24
47161: PPUSH
47162: LD_VAR 0 7
47166: PPUSH
47167: LD_INT 0
47169: PPUSH
47170: CALL_OW 322
// if mpSibBomb = 1 then
47174: LD_EXP 26
47178: PUSH
47179: LD_INT 1
47181: EQUAL
47182: IFFALSE 47201
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47184: LD_INT 25
47186: PPUSH
47187: LD_VAR 0 7
47191: PPUSH
47192: LD_INT 1
47194: PPUSH
47195: CALL_OW 322
// end else
47199: GO 47216
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47201: LD_INT 25
47203: PPUSH
47204: LD_VAR 0 7
47208: PPUSH
47209: LD_INT 0
47211: PPUSH
47212: CALL_OW 322
// end ; if mpVehicles then
47216: LD_EXP 33
47220: IFFALSE 47319
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47222: LD_ADDR_VAR 0 3
47226: PUSH
47227: LD_VAR 0 7
47231: PPUSH
47232: LD_VAR 0 9
47236: PPUSH
47237: LD_EXP 33
47241: PPUSH
47242: CALL 48178 0 3
47246: PUSH
47247: FOR_IN
47248: IFFALSE 47317
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47250: LD_VAR 0 3
47254: PPUSH
47255: LD_INT 0
47257: PPUSH
47258: LD_INT 5
47260: PPUSH
47261: CALL_OW 12
47265: PPUSH
47266: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47270: LD_VAR 0 3
47274: PPUSH
47275: LD_EXP 19
47279: PUSH
47280: LD_VAR 0 8
47284: ARRAY
47285: PUSH
47286: LD_INT 1
47288: ARRAY
47289: PPUSH
47290: LD_EXP 19
47294: PUSH
47295: LD_VAR 0 8
47299: ARRAY
47300: PUSH
47301: LD_INT 2
47303: ARRAY
47304: PPUSH
47305: LD_INT 12
47307: PPUSH
47308: LD_INT 0
47310: PPUSH
47311: CALL_OW 50
// end ;
47315: GO 47247
47317: POP
47318: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47319: LD_ADDR_VAR 0 11
47323: PUSH
47324: LD_VAR 0 7
47328: PPUSH
47329: LD_VAR 0 9
47333: PPUSH
47334: LD_EXP 22
47338: PPUSH
47339: LD_EXP 23
47343: PPUSH
47344: CALL 47908 0 4
47348: ST_TO_ADDR
// for j in team do
47349: LD_ADDR_VAR 0 3
47353: PUSH
47354: LD_VAR 0 11
47358: PUSH
47359: FOR_IN
47360: IFFALSE 47409
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47362: LD_VAR 0 3
47366: PPUSH
47367: LD_EXP 19
47371: PUSH
47372: LD_VAR 0 8
47376: ARRAY
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PPUSH
47382: LD_EXP 19
47386: PUSH
47387: LD_VAR 0 8
47391: ARRAY
47392: PUSH
47393: LD_INT 2
47395: ARRAY
47396: PPUSH
47397: LD_INT 12
47399: PPUSH
47400: LD_INT 0
47402: PPUSH
47403: CALL_OW 50
47407: GO 47359
47409: POP
47410: POP
// if mpApemans then
47411: LD_EXP 28
47415: IFFALSE 47494
// begin for j := 1 to mpApemans do
47417: LD_ADDR_VAR 0 3
47421: PUSH
47422: DOUBLE
47423: LD_INT 1
47425: DEC
47426: ST_TO_ADDR
47427: LD_EXP 28
47431: PUSH
47432: FOR_TO
47433: IFFALSE 47492
// begin PrepareApeman ( - 5 ) ;
47435: LD_INT 5
47437: NEG
47438: PPUSH
47439: CALL 36841 0 1
// ape := CreateHuman ;
47443: LD_ADDR_VAR 0 10
47447: PUSH
47448: CALL_OW 44
47452: ST_TO_ADDR
// SetTag ( ape , side ) ;
47453: LD_VAR 0 10
47457: PPUSH
47458: LD_VAR 0 7
47462: PPUSH
47463: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47467: LD_VAR 0 10
47471: PPUSH
47472: LD_EXP 29
47476: PUSH
47477: LD_VAR 0 8
47481: ARRAY
47482: PPUSH
47483: LD_INT 0
47485: PPUSH
47486: CALL_OW 49
// end ;
47490: GO 47432
47492: POP
47493: POP
// end ; end ;
47494: GO 46279
47496: POP
47497: POP
// if not mpTeamGame then
47498: LD_EXP 9
47502: NOT
47503: IFFALSE 47601
// begin for i := 1 to 8 do
47505: LD_ADDR_VAR 0 2
47509: PUSH
47510: DOUBLE
47511: LD_INT 1
47513: DEC
47514: ST_TO_ADDR
47515: LD_INT 8
47517: PUSH
47518: FOR_TO
47519: IFFALSE 47597
// for j := 1 to 8 do
47521: LD_ADDR_VAR 0 3
47525: PUSH
47526: DOUBLE
47527: LD_INT 1
47529: DEC
47530: ST_TO_ADDR
47531: LD_INT 8
47533: PUSH
47534: FOR_TO
47535: IFFALSE 47593
// if i <> j then
47537: LD_VAR 0 2
47541: PUSH
47542: LD_VAR 0 3
47546: NONEQUAL
47547: IFFALSE 47571
// SetAttitude ( i , j , att_neutral , true ) else
47549: LD_VAR 0 2
47553: PPUSH
47554: LD_VAR 0 3
47558: PPUSH
47559: LD_INT 0
47561: PPUSH
47562: LD_INT 1
47564: PPUSH
47565: CALL_OW 80
47569: GO 47591
// SetAttitude ( i , j , att_friend , true ) ;
47571: LD_VAR 0 2
47575: PPUSH
47576: LD_VAR 0 3
47580: PPUSH
47581: LD_INT 1
47583: PPUSH
47584: LD_INT 1
47586: PPUSH
47587: CALL_OW 80
47591: GO 47534
47593: POP
47594: POP
47595: GO 47518
47597: POP
47598: POP
// end else
47599: GO 47776
// begin if mpSharedVision then
47601: LD_EXP 14
47605: IFFALSE 47670
// begin for i in mpTeams do
47607: LD_ADDR_VAR 0 2
47611: PUSH
47612: LD_EXP 8
47616: PUSH
47617: FOR_IN
47618: IFFALSE 47668
// for j := 2 to i do
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: DOUBLE
47626: LD_INT 2
47628: DEC
47629: ST_TO_ADDR
47630: LD_VAR 0 2
47634: PUSH
47635: FOR_TO
47636: IFFALSE 47664
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47638: LD_VAR 0 2
47642: PUSH
47643: LD_VAR 0 3
47647: ARRAY
47648: PPUSH
47649: LD_VAR 0 2
47653: PUSH
47654: LD_INT 1
47656: ARRAY
47657: PPUSH
47658: CALL_OW 343
47662: GO 47635
47664: POP
47665: POP
47666: GO 47617
47668: POP
47669: POP
// end ; for i := 1 to 8 do
47670: LD_ADDR_VAR 0 2
47674: PUSH
47675: DOUBLE
47676: LD_INT 1
47678: DEC
47679: ST_TO_ADDR
47680: LD_INT 8
47682: PUSH
47683: FOR_TO
47684: IFFALSE 47774
// for j := 1 to 8 do
47686: LD_ADDR_VAR 0 3
47690: PUSH
47691: DOUBLE
47692: LD_INT 1
47694: DEC
47695: ST_TO_ADDR
47696: LD_INT 8
47698: PUSH
47699: FOR_TO
47700: IFFALSE 47770
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47702: LD_EXP 6
47706: PUSH
47707: LD_VAR 0 2
47711: ARRAY
47712: PUSH
47713: LD_EXP 6
47717: PUSH
47718: LD_VAR 0 3
47722: ARRAY
47723: EQUAL
47724: IFFALSE 47748
// SetAttitude ( i , j , att_friend , true ) else
47726: LD_VAR 0 2
47730: PPUSH
47731: LD_VAR 0 3
47735: PPUSH
47736: LD_INT 1
47738: PPUSH
47739: LD_INT 1
47741: PPUSH
47742: CALL_OW 80
47746: GO 47768
// SetAttitude ( i , j , att_enemy , true ) ;
47748: LD_VAR 0 2
47752: PPUSH
47753: LD_VAR 0 3
47757: PPUSH
47758: LD_INT 2
47760: PPUSH
47761: LD_INT 1
47763: PPUSH
47764: CALL_OW 80
47768: GO 47699
47770: POP
47771: POP
47772: GO 47683
47774: POP
47775: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47776: LD_ADDR_OWVAR 71
47780: PUSH
47781: LD_EXP 7
47785: PUSH
47786: LD_OWVAR 2
47790: ARRAY
47791: ST_TO_ADDR
// if IAmSpec then
47792: CALL_OW 531
47796: IFFALSE 47837
// begin FogOff ( true ) ;
47798: LD_INT 1
47800: PPUSH
47801: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47805: LD_EXP 27
47809: PUSH
47810: LD_INT 1
47812: ARRAY
47813: PUSH
47814: LD_INT 2
47816: DIV
47817: PPUSH
47818: LD_EXP 27
47822: PUSH
47823: LD_INT 2
47825: ARRAY
47826: PUSH
47827: LD_INT 2
47829: DIV
47830: PPUSH
47831: CALL_OW 86
// end else
47835: GO 47883
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47837: LD_EXP 19
47841: PUSH
47842: LD_EXP 5
47846: PUSH
47847: LD_OWVAR 2
47851: ARRAY
47852: ARRAY
47853: PUSH
47854: LD_INT 1
47856: ARRAY
47857: PPUSH
47858: LD_EXP 19
47862: PUSH
47863: LD_EXP 5
47867: PUSH
47868: LD_OWVAR 2
47872: ARRAY
47873: ARRAY
47874: PUSH
47875: LD_INT 2
47877: ARRAY
47878: PPUSH
47879: CALL_OW 86
// end ; BeginBuildUp ;
47883: CALL 48656 0 0
// enable ( mpActive ) ;
47887: LD_INT 100
47889: ENABLE_MARKED
// enable ( mpGameType ) ;
47890: LD_EXP 1
47894: ENABLE_MARKED
// mpGameActive := true ;
47895: LD_ADDR_EXP 36
47899: PUSH
47900: LD_INT 1
47902: ST_TO_ADDR
// end ;
47903: LD_VAR 0 1
47907: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47908: LD_INT 0
47910: PPUSH
47911: PPUSH
47912: PPUSH
// result := [ ] ;
47913: LD_ADDR_VAR 0 5
47917: PUSH
47918: EMPTY
47919: ST_TO_ADDR
// class := class_soldier ;
47920: LD_ADDR_VAR 0 7
47924: PUSH
47925: LD_INT 1
47927: ST_TO_ADDR
// uc_side := side ;
47928: LD_ADDR_OWVAR 20
47932: PUSH
47933: LD_VAR 0 1
47937: ST_TO_ADDR
// uc_nation := nation ;
47938: LD_ADDR_OWVAR 21
47942: PUSH
47943: LD_VAR 0 2
47947: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47948: LD_ADDR_OWVAR 26
47952: PUSH
47953: LD_OWVAR 19
47957: PUSH
47958: LD_VAR 0 1
47962: ARRAY
47963: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47964: LD_INT 1
47966: PPUSH
47967: LD_INT 2
47969: PPUSH
47970: CALL_OW 12
47974: PPUSH
47975: LD_VAR 0 7
47979: PPUSH
47980: LD_VAR 0 4
47984: PUSH
47985: LD_INT 2
47987: PLUS
47988: PPUSH
47989: CALL_OW 380
// hc_importance := 105 ;
47993: LD_ADDR_OWVAR 32
47997: PUSH
47998: LD_INT 105
48000: ST_TO_ADDR
// if Multiplayer then
48001: LD_OWVAR 4
48005: IFFALSE 48045
// begin hc_gallery := MULTIAVATARS ;
48007: LD_ADDR_OWVAR 33
48011: PUSH
48012: LD_STRING MULTIAVATARS
48014: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48015: LD_ADDR_OWVAR 34
48019: PUSH
48020: LD_VAR 0 1
48024: PPUSH
48025: CALL_OW 525
48029: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48030: LD_ADDR_OWVAR 27
48034: PUSH
48035: LD_VAR 0 1
48039: PPUSH
48040: CALL_OW 526
48044: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48045: LD_ADDR_VAR 0 5
48049: PUSH
48050: LD_VAR 0 5
48054: PPUSH
48055: CALL_OW 44
48059: PPUSH
48060: CALL 40573 0 2
48064: ST_TO_ADDR
// InitHc_All ( ) ;
48065: CALL_OW 584
// class := 2 ;
48069: LD_ADDR_VAR 0 7
48073: PUSH
48074: LD_INT 2
48076: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48077: LD_ADDR_VAR 0 6
48081: PUSH
48082: DOUBLE
48083: LD_INT 1
48085: DEC
48086: ST_TO_ADDR
48087: LD_VAR 0 3
48091: PUSH
48092: LD_INT 1
48094: MINUS
48095: PUSH
48096: FOR_TO
48097: IFFALSE 48171
// begin PrepareHuman ( false , class , skill ) ;
48099: LD_INT 0
48101: PPUSH
48102: LD_VAR 0 7
48106: PPUSH
48107: LD_VAR 0 4
48111: PPUSH
48112: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48116: LD_ADDR_VAR 0 5
48120: PUSH
48121: LD_VAR 0 5
48125: PPUSH
48126: CALL_OW 44
48130: PPUSH
48131: CALL 40573 0 2
48135: ST_TO_ADDR
// class := Inc ( class ) ;
48136: LD_ADDR_VAR 0 7
48140: PUSH
48141: LD_VAR 0 7
48145: PPUSH
48146: CALL 41934 0 1
48150: ST_TO_ADDR
// if class = 5 then
48151: LD_VAR 0 7
48155: PUSH
48156: LD_INT 5
48158: EQUAL
48159: IFFALSE 48169
// class := 1 ;
48161: LD_ADDR_VAR 0 7
48165: PUSH
48166: LD_INT 1
48168: ST_TO_ADDR
// end ;
48169: GO 48096
48171: POP
48172: POP
// end ;
48173: LD_VAR 0 5
48177: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48178: LD_INT 0
48180: PPUSH
48181: PPUSH
// result := [ ] ;
48182: LD_ADDR_VAR 0 4
48186: PUSH
48187: EMPTY
48188: ST_TO_ADDR
// if not vehicles then
48189: LD_VAR 0 3
48193: NOT
48194: IFFALSE 48198
// exit ;
48196: GO 48357
// for i := 1 to vehicles [ nation ] do
48198: LD_ADDR_VAR 0 5
48202: PUSH
48203: DOUBLE
48204: LD_INT 1
48206: DEC
48207: ST_TO_ADDR
48208: LD_VAR 0 3
48212: PUSH
48213: LD_VAR 0 2
48217: ARRAY
48218: PUSH
48219: FOR_TO
48220: IFFALSE 48355
// begin uc_side := side ;
48222: LD_ADDR_OWVAR 20
48226: PUSH
48227: LD_VAR 0 1
48231: ST_TO_ADDR
// uc_nation := nation ;
48232: LD_ADDR_OWVAR 21
48236: PUSH
48237: LD_VAR 0 2
48241: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48242: LD_VAR 0 3
48246: PUSH
48247: LD_VAR 0 2
48251: ARRAY
48252: PUSH
48253: LD_VAR 0 5
48257: ARRAY
48258: PUSH
48259: LD_INT 1
48261: ARRAY
48262: PPUSH
48263: LD_VAR 0 3
48267: PUSH
48268: LD_VAR 0 2
48272: ARRAY
48273: PUSH
48274: LD_VAR 0 5
48278: ARRAY
48279: PUSH
48280: LD_INT 2
48282: ARRAY
48283: PPUSH
48284: LD_VAR 0 3
48288: PUSH
48289: LD_VAR 0 2
48293: ARRAY
48294: PUSH
48295: LD_VAR 0 5
48299: ARRAY
48300: PUSH
48301: LD_INT 3
48303: ARRAY
48304: PPUSH
48305: LD_VAR 0 3
48309: PUSH
48310: LD_VAR 0 2
48314: ARRAY
48315: PUSH
48316: LD_VAR 0 5
48320: ARRAY
48321: PUSH
48322: LD_INT 4
48324: ARRAY
48325: PPUSH
48326: LD_INT 80
48328: PPUSH
48329: CALL 7722 0 5
// result := Join ( result , CreateVehicle ) ;
48333: LD_ADDR_VAR 0 4
48337: PUSH
48338: LD_VAR 0 4
48342: PPUSH
48343: CALL_OW 45
48347: PPUSH
48348: CALL 40573 0 2
48352: ST_TO_ADDR
// end ;
48353: GO 48219
48355: POP
48356: POP
// end ;
48357: LD_VAR 0 4
48361: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48362: LD_INT 0
48364: PPUSH
48365: PPUSH
// for i in mpBattleFlags do
48366: LD_ADDR_VAR 0 3
48370: PUSH
48371: LD_EXP 21
48375: PUSH
48376: FOR_IN
48377: IFFALSE 48454
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48379: LD_VAR 0 3
48383: PPUSH
48384: LD_INT 1
48386: PUSH
48387: LD_VAR 0 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_VAR 0 1
48403: PUSH
48404: LD_REAL  7.00000000000000E-0001
48407: MUL
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_VAR 0 1
48420: PUSH
48421: LD_REAL  4.00000000000000E-0001
48424: MUL
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 20
48432: PUSH
48433: LD_VAR 0 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: PPUSH
48448: CALL_OW 423
48452: GO 48376
48454: POP
48455: POP
// end ;
48456: LD_VAR 0 2
48460: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48461: LD_INT 100
48463: IFFALSE 48558
48465: GO 48467
48467: DISABLE
48468: LD_INT 0
48470: PPUSH
48471: PPUSH
// begin if mpBattleFlag <= 0 then
48472: LD_EXP 20
48476: PUSH
48477: LD_INT 0
48479: LESSEQUAL
48480: IFFALSE 48484
// exit ;
48482: GO 48558
// strength := 100 ;
48484: LD_ADDR_VAR 0 2
48488: PUSH
48489: LD_INT 100
48491: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48492: LD_EXP 20
48496: PPUSH
48497: CALL_OW 67
// strength := Dec ( strength ) ;
48501: LD_ADDR_VAR 0 2
48505: PUSH
48506: LD_VAR 0 2
48510: PPUSH
48511: CALL 41956 0 1
48515: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48516: LD_VAR 0 2
48520: PPUSH
48521: CALL 48362 0 1
// until not strength ;
48525: LD_VAR 0 2
48529: NOT
48530: IFFALSE 48492
// for i in mpBattleFlags do
48532: LD_ADDR_VAR 0 1
48536: PUSH
48537: LD_EXP 21
48541: PUSH
48542: FOR_IN
48543: IFFALSE 48556
// KillBattleFlag ( i ) ;
48545: LD_VAR 0 1
48549: PPUSH
48550: CALL_OW 419
48554: GO 48542
48556: POP
48557: POP
// end ;
48558: PPOPN 2
48560: END
// every 0 0$1 marked mpActive do var side , tmp ;
48561: GO 48563
48563: DISABLE
48564: LD_INT 0
48566: PPUSH
48567: PPUSH
// begin if mpSibBomb <= 1 then
48568: LD_EXP 26
48572: PUSH
48573: LD_INT 1
48575: LESSEQUAL
48576: IFFALSE 48580
// exit ;
48578: GO 48653
// tmp := mpSibBomb ;
48580: LD_ADDR_VAR 0 2
48584: PUSH
48585: LD_EXP 26
48589: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48590: LD_INT 35
48592: PPUSH
48593: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48597: LD_ADDR_VAR 0 2
48601: PUSH
48602: LD_VAR 0 2
48606: PUSH
48607: LD_INT 35
48609: MINUS
48610: ST_TO_ADDR
// until not tmp ;
48611: LD_VAR 0 2
48615: NOT
48616: IFFALSE 48590
// for side := 1 to 8 do
48618: LD_ADDR_VAR 0 1
48622: PUSH
48623: DOUBLE
48624: LD_INT 1
48626: DEC
48627: ST_TO_ADDR
48628: LD_INT 8
48630: PUSH
48631: FOR_TO
48632: IFFALSE 48651
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48634: LD_INT 25
48636: PPUSH
48637: LD_VAR 0 1
48641: PPUSH
48642: LD_INT 1
48644: PPUSH
48645: CALL_OW 322
48649: GO 48631
48651: POP
48652: POP
// end ;
48653: PPOPN 2
48655: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
48660: PPUSH
// mpBuildUpTimeDelay := 0 ;
48661: LD_ADDR_EXP 39
48665: PUSH
48666: LD_INT 0
48668: ST_TO_ADDR
// if not mpBuildUpTime then
48669: LD_EXP 18
48673: NOT
48674: IFFALSE 48678
// exit ;
48676: GO 48861
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48678: LD_ADDR_EXP 39
48682: PUSH
48683: LD_INT 8400
48685: PUSH
48686: LD_INT 2100
48688: PUSH
48689: LD_EXP 18
48693: MUL
48694: PLUS
48695: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48696: LD_ADDR_EXP 40
48700: PUSH
48701: LD_INT 1
48703: ST_TO_ADDR
// for i := 1 to 8 do
48704: LD_ADDR_VAR 0 2
48708: PUSH
48709: DOUBLE
48710: LD_INT 1
48712: DEC
48713: ST_TO_ADDR
48714: LD_INT 8
48716: PUSH
48717: FOR_TO
48718: IFFALSE 48859
// if mpSidePositions [ i ] then
48720: LD_EXP 5
48724: PUSH
48725: LD_VAR 0 2
48729: ARRAY
48730: IFFALSE 48857
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48732: LD_EXP 17
48736: PUSH
48737: LD_EXP 5
48741: PUSH
48742: LD_VAR 0 2
48746: ARRAY
48747: ARRAY
48748: PPUSH
48749: LD_INT 5
48751: PPUSH
48752: CALL_OW 424
// for j := 1 to 8 do
48756: LD_ADDR_VAR 0 3
48760: PUSH
48761: DOUBLE
48762: LD_INT 1
48764: DEC
48765: ST_TO_ADDR
48766: LD_INT 8
48768: PUSH
48769: FOR_TO
48770: IFFALSE 48855
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48772: LD_EXP 5
48776: PUSH
48777: LD_VAR 0 3
48781: ARRAY
48782: PUSH
48783: LD_EXP 6
48787: PUSH
48788: LD_VAR 0 2
48792: ARRAY
48793: PUSH
48794: LD_EXP 6
48798: PUSH
48799: LD_VAR 0 3
48803: ARRAY
48804: NONEQUAL
48805: PUSH
48806: LD_EXP 9
48810: NOT
48811: PUSH
48812: LD_VAR 0 2
48816: PUSH
48817: LD_VAR 0 3
48821: NONEQUAL
48822: AND
48823: OR
48824: AND
48825: IFFALSE 48853
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48827: LD_VAR 0 3
48831: PPUSH
48832: LD_EXP 17
48836: PUSH
48837: LD_EXP 5
48841: PUSH
48842: LD_VAR 0 2
48846: ARRAY
48847: ARRAY
48848: PPUSH
48849: CALL_OW 333
48853: GO 48769
48855: POP
48856: POP
// end ;
48857: GO 48717
48859: POP
48860: POP
// end ;
48861: LD_VAR 0 1
48865: RET
// function EndBuildUp ; var i , j ; begin
48866: LD_INT 0
48868: PPUSH
48869: PPUSH
48870: PPUSH
// mpBuildUpTimeActive := false ;
48871: LD_ADDR_EXP 40
48875: PUSH
48876: LD_INT 0
48878: ST_TO_ADDR
// for i := 1 to 8 do
48879: LD_ADDR_VAR 0 2
48883: PUSH
48884: DOUBLE
48885: LD_INT 1
48887: DEC
48888: ST_TO_ADDR
48889: LD_INT 8
48891: PUSH
48892: FOR_TO
48893: IFFALSE 49034
// if mpSidePositions [ i ] then
48895: LD_EXP 5
48899: PUSH
48900: LD_VAR 0 2
48904: ARRAY
48905: IFFALSE 49032
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48907: LD_EXP 17
48911: PUSH
48912: LD_EXP 5
48916: PUSH
48917: LD_VAR 0 2
48921: ARRAY
48922: ARRAY
48923: PPUSH
48924: LD_INT 0
48926: PPUSH
48927: CALL_OW 424
// for j := 1 to 8 do
48931: LD_ADDR_VAR 0 3
48935: PUSH
48936: DOUBLE
48937: LD_INT 1
48939: DEC
48940: ST_TO_ADDR
48941: LD_INT 8
48943: PUSH
48944: FOR_TO
48945: IFFALSE 49030
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48947: LD_EXP 5
48951: PUSH
48952: LD_VAR 0 3
48956: ARRAY
48957: PUSH
48958: LD_EXP 6
48962: PUSH
48963: LD_VAR 0 2
48967: ARRAY
48968: PUSH
48969: LD_EXP 6
48973: PUSH
48974: LD_VAR 0 3
48978: ARRAY
48979: NONEQUAL
48980: PUSH
48981: LD_EXP 9
48985: NOT
48986: PUSH
48987: LD_VAR 0 2
48991: PUSH
48992: LD_VAR 0 3
48996: NONEQUAL
48997: AND
48998: OR
48999: AND
49000: IFFALSE 49028
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49002: LD_VAR 0 3
49006: PPUSH
49007: LD_EXP 17
49011: PUSH
49012: LD_EXP 5
49016: PUSH
49017: LD_VAR 0 2
49021: ARRAY
49022: ARRAY
49023: PPUSH
49024: CALL_OW 334
49028: GO 48944
49030: POP
49031: POP
// end ;
49032: GO 48892
49034: POP
49035: POP
// end ;
49036: LD_VAR 0 1
49040: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49041: LD_EXP 40
49045: IFFALSE 49220
49047: GO 49049
49049: DISABLE
49050: LD_INT 0
49052: PPUSH
49053: PPUSH
// begin for i := 1 to 8 do
49054: LD_ADDR_VAR 0 1
49058: PUSH
49059: DOUBLE
49060: LD_INT 1
49062: DEC
49063: ST_TO_ADDR
49064: LD_INT 8
49066: PUSH
49067: FOR_TO
49068: IFFALSE 49217
// if mpSidePositions [ i ] then
49070: LD_EXP 5
49074: PUSH
49075: LD_VAR 0 1
49079: ARRAY
49080: IFFALSE 49215
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49082: LD_ADDR_VAR 0 2
49086: PUSH
49087: LD_EXP 17
49091: PUSH
49092: LD_EXP 5
49096: PUSH
49097: LD_VAR 0 1
49101: ARRAY
49102: ARRAY
49103: PPUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 21
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 21
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 22
49134: PUSH
49135: LD_OWVAR 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PPUSH
49148: CALL_OW 70
49152: PUSH
49153: FOR_IN
49154: IFFALSE 49213
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49156: LD_EXP 6
49160: PUSH
49161: LD_VAR 0 1
49165: ARRAY
49166: PUSH
49167: LD_EXP 6
49171: PUSH
49172: LD_OWVAR 2
49176: ARRAY
49177: NONEQUAL
49178: PUSH
49179: LD_EXP 9
49183: NOT
49184: PUSH
49185: LD_VAR 0 1
49189: PUSH
49190: LD_OWVAR 2
49194: NONEQUAL
49195: AND
49196: OR
49197: IFFALSE 49211
// ComMoveToArea ( un , BuildUpEscape ) ;
49199: LD_VAR 0 2
49203: PPUSH
49204: LD_INT 17
49206: PPUSH
49207: CALL_OW 113
49211: GO 49153
49213: POP
49214: POP
49215: GO 49067
49217: POP
49218: POP
// enable ;
49219: ENABLE
// end ;
49220: PPOPN 2
49222: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49223: LD_EXP 18
49227: IFFALSE 49277
49229: GO 49231
49231: DISABLE
49232: LD_INT 0
49234: PPUSH
// begin tmp := mpBuildUpTime ;
49235: LD_ADDR_VAR 0 1
49239: PUSH
49240: LD_EXP 18
49244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49245: LD_INT 35
49247: PPUSH
49248: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49252: LD_ADDR_VAR 0 1
49256: PUSH
49257: LD_VAR 0 1
49261: PUSH
49262: LD_INT 35
49264: MINUS
49265: ST_TO_ADDR
// until not tmp ;
49266: LD_VAR 0 1
49270: NOT
49271: IFFALSE 49245
// EndBuildUp ;
49273: CALL 48866 0 0
// end ;
49277: PPOPN 1
49279: END
// every 0 0$1 trigger mpActive marked mpWin do
49280: LD_INT 100
49282: IFFALSE 49316
49284: GO 49286
49286: DISABLE
// begin if IAmServer then
49287: CALL_OW 518
49291: IFFALSE 49300
// wait ( 0 0$3 ) ;
49293: LD_INT 105
49295: PPUSH
49296: CALL_OW 67
// if Multiplayer then
49300: LD_OWVAR 4
49304: IFFALSE 49312
// YouWinInMultiplayer else
49306: CALL_OW 106
49310: GO 49316
// YouWin ;
49312: CALL_OW 103
// end ;
49316: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49317: LD_INT 0
49319: PPUSH
// result := false ;
49320: LD_ADDR_VAR 0 3
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// case gameType of GameTypeNormal :
49328: LD_VAR 0 1
49332: PUSH
49333: LD_INT 1
49335: DOUBLE
49336: EQUAL
49337: IFTRUE 49341
49339: GO 49414
49341: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49342: LD_ADDR_VAR 0 3
49346: PUSH
49347: LD_INT 22
49349: PUSH
49350: LD_VAR 0 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 21
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 33
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 33
49384: PUSH
49385: LD_INT 5
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PPUSH
49402: CALL_OW 69
49406: PPUSH
49407: CALL 4984 0 1
49411: ST_TO_ADDR
// end ; GameTypeSurvival :
49412: GO 49649
49414: LD_INT 2
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49422
49420: GO 49550
49422: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49423: LD_ADDR_VAR 0 3
49427: PUSH
49428: LD_INT 22
49430: PUSH
49431: LD_VAR 0 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 30
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 30
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PPUSH
49472: CALL_OW 69
49476: PPUSH
49477: CALL 4984 0 1
49481: PUSH
49482: LD_INT 22
49484: PUSH
49485: LD_VAR 0 2
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 21
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 33
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 33
49519: PUSH
49520: LD_INT 5
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PPUSH
49537: CALL_OW 69
49541: PPUSH
49542: CALL 4984 0 1
49546: AND
49547: ST_TO_ADDR
// end ; GameTypeKing :
49548: GO 49649
49550: LD_INT 3
49552: DOUBLE
49553: EQUAL
49554: IFTRUE 49558
49556: GO 49648
49558: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
49559: LD_ADDR_VAR 0 3
49563: PUSH
49564: LD_INT 22
49566: PUSH
49567: LD_VAR 0 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 21
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 33
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 33
49601: PUSH
49602: LD_INT 5
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PPUSH
49619: CALL_OW 69
49623: PPUSH
49624: CALL 4984 0 1
49628: PUSH
49629: LD_VAR 0 2
49633: PPUSH
49634: CALL 52822 0 1
49638: PUSH
49639: LD_EXP 32
49643: GREATEREQUAL
49644: OR
49645: ST_TO_ADDR
// end ; end ;
49646: GO 49649
49648: POP
// end ;
49649: LD_VAR 0 3
49653: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49654: LD_INT 100
49656: IFFALSE 49878
49658: GO 49660
49660: DISABLE
49661: LD_INT 0
49663: PPUSH
49664: PPUSH
// begin if Multiplayer then
49665: LD_OWVAR 4
49669: IFFALSE 49677
// SetPlayerSpectator ( ) else
49671: CALL_OW 572
49675: GO 49686
// FogOff ( your_side ) ;
49677: LD_OWVAR 2
49681: PPUSH
49682: CALL_OW 344
// repeat gameIsOn := false ;
49686: LD_ADDR_VAR 0 1
49690: PUSH
49691: LD_INT 0
49693: ST_TO_ADDR
// for i := 1 to 8 do
49694: LD_ADDR_VAR 0 2
49698: PUSH
49699: DOUBLE
49700: LD_INT 1
49702: DEC
49703: ST_TO_ADDR
49704: LD_INT 8
49706: PUSH
49707: FOR_TO
49708: IFFALSE 49830
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49710: LD_EXP 5
49714: PUSH
49715: LD_VAR 0 2
49719: ARRAY
49720: PUSH
49721: LD_VAR 0 2
49725: PPUSH
49726: CALL_OW 108
49730: AND
49731: PUSH
49732: LD_VAR 0 2
49736: PUSH
49737: LD_OWVAR 2
49741: NONEQUAL
49742: AND
49743: IFFALSE 49828
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49745: LD_EXP 6
49749: PUSH
49750: LD_VAR 0 2
49754: ARRAY
49755: NOT
49756: PUSH
49757: LD_EXP 6
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: PUSH
49768: LD_EXP 6
49772: PUSH
49773: LD_OWVAR 2
49777: ARRAY
49778: NONEQUAL
49779: PUSH
49780: LD_OWVAR 2
49784: PPUSH
49785: LD_VAR 0 2
49789: PPUSH
49790: CALL_OW 81
49794: PUSH
49795: LD_INT 1
49797: NONEQUAL
49798: AND
49799: OR
49800: IFFALSE 49828
// if HasPowerByGameType ( mpGameType , i ) then
49802: LD_EXP 1
49806: PPUSH
49807: LD_VAR 0 2
49811: PPUSH
49812: CALL 49317 0 2
49816: IFFALSE 49828
// begin gameIsOn := true ;
49818: LD_ADDR_VAR 0 1
49822: PUSH
49823: LD_INT 1
49825: ST_TO_ADDR
// break ;
49826: GO 49830
// end ;
49828: GO 49707
49830: POP
49831: POP
// wait ( 100 ) ;
49832: LD_INT 100
49834: PPUSH
49835: CALL_OW 67
// until not gameIsOn ;
49839: LD_VAR 0 1
49843: NOT
49844: IFFALSE 49686
// if IAmServer then
49846: CALL_OW 518
49850: IFFALSE 49859
// wait ( 0 0$3 ) ;
49852: LD_INT 105
49854: PPUSH
49855: CALL_OW 67
// if Multiplayer then
49859: LD_OWVAR 4
49863: IFFALSE 49871
// YouLostInMultiplayer else
49865: CALL_OW 107
49869: GO 49878
// YouLost (  ) ;
49871: LD_STRING 
49873: PPUSH
49874: CALL_OW 104
// end ;
49878: PPOPN 2
49880: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49881: LD_EXP 30
49885: IFFALSE 50232
49887: GO 49889
49889: DISABLE
49890: LD_INT 0
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49897: LD_ADDR_VAR 0 5
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 4
49913: PUSH
49914: LD_INT 5
49916: PUSH
49917: LD_INT 6
49919: PUSH
49920: LD_INT 7
49922: PUSH
49923: LD_INT 8
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
49936: LD_INT 350
49938: PPUSH
49939: CALL_OW 67
// for i := 1 to 8 do
49943: LD_ADDR_VAR 0 1
49947: PUSH
49948: DOUBLE
49949: LD_INT 1
49951: DEC
49952: ST_TO_ADDR
49953: LD_INT 8
49955: PUSH
49956: FOR_TO
49957: IFFALSE 50202
// begin j := sides [ i ] ;
49959: LD_ADDR_VAR 0 2
49963: PUSH
49964: LD_VAR 0 5
49968: PUSH
49969: LD_VAR 0 1
49973: ARRAY
49974: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
49975: LD_EXP 37
49979: PUSH
49980: LD_VAR 0 2
49984: ARRAY
49985: PPUSH
49986: CALL 4984 0 1
49990: PUSH
49991: LD_VAR 0 2
49995: PPUSH
49996: CALL_OW 108
50000: AND
50001: PUSH
50002: LD_EXP 1
50006: PPUSH
50007: LD_VAR 0 2
50011: PPUSH
50012: CALL 49317 0 2
50016: AND
50017: IFFALSE 50200
// begin wait ( mpRespawn div 3 ) ;
50019: LD_EXP 30
50023: PUSH
50024: LD_INT 3
50026: DIV
50027: PPUSH
50028: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50032: LD_ADDR_VAR 0 3
50036: PUSH
50037: LD_INT 22
50039: PUSH
50040: LD_VAR 0 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 50
50051: PUSH
50052: EMPTY
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 30
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: PPUSH
50088: CALL_OW 69
50092: ST_TO_ADDR
// if not tmp then
50093: LD_VAR 0 3
50097: NOT
50098: IFFALSE 50102
// continue ;
50100: GO 49956
// spawn := tmp [ 1 ] ;
50102: LD_ADDR_VAR 0 4
50106: PUSH
50107: LD_VAR 0 3
50111: PUSH
50112: LD_INT 1
50114: ARRAY
50115: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50116: LD_EXP 37
50120: PUSH
50121: LD_VAR 0 2
50125: ARRAY
50126: PUSH
50127: LD_INT 1
50129: ARRAY
50130: PPUSH
50131: LD_VAR 0 4
50135: PPUSH
50136: CALL_OW 250
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: CALL_OW 251
50150: PPUSH
50151: LD_INT 32
50153: PPUSH
50154: LD_INT 1
50156: PPUSH
50157: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50161: LD_ADDR_EXP 37
50165: PUSH
50166: LD_EXP 37
50170: PPUSH
50171: LD_VAR 0 2
50175: PPUSH
50176: LD_EXP 37
50180: PUSH
50181: LD_VAR 0 2
50185: ARRAY
50186: PPUSH
50187: LD_INT 1
50189: PPUSH
50190: CALL_OW 3
50194: PPUSH
50195: CALL_OW 1
50199: ST_TO_ADDR
// end ; end ;
50200: GO 49956
50202: POP
50203: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50204: LD_ADDR_VAR 0 5
50208: PUSH
50209: LD_VAR 0 5
50213: PPUSH
50214: LD_INT 1
50216: PPUSH
50217: LD_INT 8
50219: PPUSH
50220: LD_INT 1
50222: PPUSH
50223: CALL 7262 0 4
50227: ST_TO_ADDR
// until false ;
50228: LD_INT 0
50230: IFFALSE 49936
// end ;
50232: PPOPN 5
50234: END
// every 0 0$1 marked mpActive do
50235: GO 50237
50237: DISABLE
// begin enable ;
50238: ENABLE
// if not mpDisplayStrings then
50239: LD_EXP 35
50243: NOT
50244: IFFALSE 50255
// begin display_strings := [ ] ;
50246: LD_ADDR_OWVAR 47
50250: PUSH
50251: EMPTY
50252: ST_TO_ADDR
// exit ;
50253: GO 50265
// end ; display_strings := mpDisplayStrings ;
50255: LD_ADDR_OWVAR 47
50259: PUSH
50260: LD_EXP 35
50264: ST_TO_ADDR
// end ; end_of_file
50265: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50266: LD_INT 0
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
50272: PPUSH
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
// if GetType ( un ) = unit_vehicle then
50277: LD_VAR 0 1
50281: PPUSH
50282: CALL_OW 247
50286: PUSH
50287: LD_INT 2
50289: EQUAL
50290: IFFALSE 50294
// exit ;
50292: GO 50851
// side := GetSide ( un ) ;
50294: LD_ADDR_VAR 0 9
50298: PUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL_OW 255
50308: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50309: LD_EXP 1
50313: PUSH
50314: LD_INT 2
50316: EQUAL
50317: IFFALSE 50410
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50319: LD_VAR 0 1
50323: PPUSH
50324: CALL_OW 266
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: IN
50339: PUSH
50340: LD_VAR 0 1
50344: PPUSH
50345: CALL_OW 110
50349: PUSH
50350: LD_VAR 0 9
50354: EQUAL
50355: AND
50356: IFFALSE 50410
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50358: LD_ADDR_VAR 0 3
50362: PUSH
50363: LD_INT 22
50365: PUSH
50366: LD_VAR 0 9
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 21
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PPUSH
50389: CALL_OW 69
50393: PUSH
50394: FOR_IN
50395: IFFALSE 50408
// KillUnit ( i ) ;
50397: LD_VAR 0 3
50401: PPUSH
50402: CALL_OW 66
50406: GO 50394
50408: POP
50409: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50410: LD_VAR 0 1
50414: PPUSH
50415: CALL_OW 257
50419: PUSH
50420: LD_INT 12
50422: PUSH
50423: LD_INT 17
50425: PUSH
50426: LD_INT 15
50428: PUSH
50429: LD_INT 16
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: IN
50438: PUSH
50439: LD_VAR 0 1
50443: PPUSH
50444: CALL_OW 263
50448: PUSH
50449: LD_INT 5
50451: EQUAL
50452: OR
50453: IFFALSE 50587
// begin tag := GetTag ( un ) ;
50455: LD_ADDR_VAR 0 5
50459: PUSH
50460: LD_VAR 0 1
50464: PPUSH
50465: CALL_OW 110
50469: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50470: LD_ADDR_VAR 0 7
50474: PUSH
50475: LD_EXP 29
50479: PUSH
50480: LD_EXP 5
50484: PUSH
50485: LD_VAR 0 5
50489: ARRAY
50490: ARRAY
50491: ST_TO_ADDR
// if not area then
50492: LD_VAR 0 7
50496: NOT
50497: IFFALSE 50501
// exit ;
50499: GO 50851
// wait ( 4 4$00 ) ;
50501: LD_INT 8400
50503: PPUSH
50504: CALL_OW 67
// repeat wait ( 10 ) ;
50508: LD_INT 10
50510: PPUSH
50511: CALL_OW 67
// until not mpBlockRespThread ;
50515: LD_EXP 38
50519: NOT
50520: IFFALSE 50508
// mpBlockRespThread := true ;
50522: LD_ADDR_EXP 38
50526: PUSH
50527: LD_INT 1
50529: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
50530: LD_INT 5
50532: NEG
50533: PPUSH
50534: CALL 36841 0 1
// ape := CreateHuman ;
50538: LD_ADDR_VAR 0 4
50542: PUSH
50543: CALL_OW 44
50547: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50548: LD_VAR 0 4
50552: PPUSH
50553: LD_VAR 0 5
50557: PPUSH
50558: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50562: LD_VAR 0 4
50566: PPUSH
50567: LD_VAR 0 7
50571: PPUSH
50572: LD_INT 0
50574: PPUSH
50575: CALL_OW 49
// mpBlockRespThread := false ;
50579: LD_ADDR_EXP 38
50583: PUSH
50584: LD_INT 0
50586: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50587: LD_VAR 0 1
50591: PPUSH
50592: CALL_OW 247
50596: PUSH
50597: LD_INT 1
50599: EQUAL
50600: PUSH
50601: LD_VAR 0 1
50605: PPUSH
50606: CALL_OW 248
50610: PUSH
50611: LD_INT 0
50613: GREATER
50614: AND
50615: IFFALSE 50851
// begin if not mpRespawn then
50617: LD_EXP 30
50621: NOT
50622: IFFALSE 50626
// exit ;
50624: GO 50851
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50626: LD_VAR 0 9
50630: PPUSH
50631: CALL_OW 108
50635: NOT
50636: PUSH
50637: LD_EXP 1
50641: PPUSH
50642: LD_VAR 0 9
50646: PPUSH
50647: CALL 49317 0 2
50651: NOT
50652: AND
50653: IFFALSE 50657
// exit ;
50655: GO 50851
// side := GetSide ( un ) ;
50657: LD_ADDR_VAR 0 9
50661: PUSH
50662: LD_VAR 0 1
50666: PPUSH
50667: CALL_OW 255
50671: ST_TO_ADDR
// nation := GetNation ( un ) ;
50672: LD_ADDR_VAR 0 8
50676: PUSH
50677: LD_VAR 0 1
50681: PPUSH
50682: CALL_OW 248
50686: ST_TO_ADDR
// class := GetClass ( un ) ;
50687: LD_ADDR_VAR 0 6
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: CALL_OW 257
50701: ST_TO_ADDR
// if class > 4 then
50702: LD_VAR 0 6
50706: PUSH
50707: LD_INT 4
50709: GREATER
50710: IFFALSE 50720
// class := 1 ;
50712: LD_ADDR_VAR 0 6
50716: PUSH
50717: LD_INT 1
50719: ST_TO_ADDR
// repeat wait ( 10 ) ;
50720: LD_INT 10
50722: PPUSH
50723: CALL_OW 67
// until not mpBlockRespThread ;
50727: LD_EXP 38
50731: NOT
50732: IFFALSE 50720
// mpBlockRespThread := true ;
50734: LD_ADDR_EXP 38
50738: PUSH
50739: LD_INT 1
50741: ST_TO_ADDR
// uc_side := side ;
50742: LD_ADDR_OWVAR 20
50746: PUSH
50747: LD_VAR 0 9
50751: ST_TO_ADDR
// uc_nation := nation ;
50752: LD_ADDR_OWVAR 21
50756: PUSH
50757: LD_VAR 0 8
50761: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50762: LD_INT 0
50764: PPUSH
50765: LD_VAR 0 6
50769: PPUSH
50770: LD_INT 2
50772: PPUSH
50773: CALL_OW 380
// un := CreateHuman ;
50777: LD_ADDR_VAR 0 1
50781: PUSH
50782: CALL_OW 44
50786: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50787: LD_ADDR_EXP 37
50791: PUSH
50792: LD_EXP 37
50796: PPUSH
50797: LD_VAR 0 9
50801: PPUSH
50802: LD_EXP 37
50806: PUSH
50807: LD_VAR 0 9
50811: ARRAY
50812: PPUSH
50813: LD_EXP 37
50817: PUSH
50818: LD_VAR 0 9
50822: ARRAY
50823: PUSH
50824: LD_INT 1
50826: PLUS
50827: PPUSH
50828: LD_VAR 0 1
50832: PPUSH
50833: CALL_OW 1
50837: PPUSH
50838: CALL_OW 1
50842: ST_TO_ADDR
// mpBlockRespThread := false ;
50843: LD_ADDR_EXP 38
50847: PUSH
50848: LD_INT 0
50850: ST_TO_ADDR
// end ; end ;
50851: LD_VAR 0 2
50855: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
50856: LD_INT 0
50858: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
50859: LD_VAR 0 1
50863: PPUSH
50864: CALL_OW 266
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: IN
50879: IFFALSE 50904
// SetBName ( building , @ & GetSide ( building ) ) ;
50881: LD_VAR 0 1
50885: PPUSH
50886: LD_STRING @
50888: PUSH
50889: LD_VAR 0 1
50893: PPUSH
50894: CALL_OW 255
50898: STR
50899: PPUSH
50900: CALL_OW 500
// end ;
50904: LD_VAR 0 2
50908: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50909: LD_INT 0
50911: PPUSH
50912: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50913: LD_EXP 1
50917: PUSH
50918: LD_INT 2
50920: EQUAL
50921: PUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 266
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: IN
50942: AND
50943: IFFALSE 51008
// begin KillUnit ( building ) ;
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50954: LD_ADDR_VAR 0 5
50958: PUSH
50959: LD_INT 22
50961: PUSH
50962: LD_VAR 0 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 21
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PPUSH
50985: CALL_OW 69
50989: PUSH
50990: FOR_IN
50991: IFFALSE 51004
// KillUnit ( i ) ;
50993: LD_VAR 0 5
50997: PPUSH
50998: CALL_OW 66
51002: GO 50990
51004: POP
51005: POP
// exit ;
51006: GO 51053
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51008: LD_VAR 0 1
51012: PPUSH
51013: CALL_OW 266
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: IN
51028: IFFALSE 51053
// SetBName ( building , @ & GetSide ( building ) ) ;
51030: LD_VAR 0 1
51034: PPUSH
51035: LD_STRING @
51037: PUSH
51038: LD_VAR 0 1
51042: PPUSH
51043: CALL_OW 255
51047: STR
51048: PPUSH
51049: CALL_OW 500
// end ; end_of_file
51053: LD_VAR 0 4
51057: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51058: LD_EXP 36
51062: PUSH
51063: CALL 51268 0 0
51067: AND
51068: PUSH
51069: LD_OWVAR 4
51073: AND
51074: IFFALSE 51265
51076: GO 51078
51078: DISABLE
51079: LD_INT 0
51081: PPUSH
51082: PPUSH
// begin canWin := false ;
51083: LD_ADDR_VAR 0 2
51087: PUSH
51088: LD_INT 0
51090: ST_TO_ADDR
// if not HasPower ( your_side ) then
51091: LD_OWVAR 2
51095: PPUSH
51096: CALL 51308 0 1
51100: NOT
51101: IFFALSE 51112
// begin Multiplayer_Loose_Message ;
51103: CALL_OW 521
// enable ( mpLose ) ;
51107: LD_INT 102
51109: ENABLE_MARKED
// end else
51110: GO 51265
// begin canWin := true ;
51112: LD_ADDR_VAR 0 2
51116: PUSH
51117: LD_INT 1
51119: ST_TO_ADDR
// for i := 1 to 8 do
51120: LD_ADDR_VAR 0 1
51124: PUSH
51125: DOUBLE
51126: LD_INT 1
51128: DEC
51129: ST_TO_ADDR
51130: LD_INT 8
51132: PUSH
51133: FOR_TO
51134: IFFALSE 51251
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51136: LD_EXP 5
51140: PUSH
51141: LD_VAR 0 1
51145: ARRAY
51146: PUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 108
51156: AND
51157: PUSH
51158: LD_VAR 0 1
51162: PUSH
51163: LD_OWVAR 2
51167: NONEQUAL
51168: AND
51169: IFFALSE 51249
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51171: LD_EXP 6
51175: PUSH
51176: LD_VAR 0 1
51180: ARRAY
51181: NOT
51182: PUSH
51183: LD_EXP 6
51187: PUSH
51188: LD_VAR 0 1
51192: ARRAY
51193: PUSH
51194: LD_EXP 6
51198: PUSH
51199: LD_OWVAR 2
51203: ARRAY
51204: NONEQUAL
51205: PUSH
51206: LD_OWVAR 2
51210: PPUSH
51211: LD_VAR 0 1
51215: PPUSH
51216: CALL_OW 81
51220: PUSH
51221: LD_INT 1
51223: NONEQUAL
51224: AND
51225: OR
51226: IFFALSE 51249
// if HasPower ( i ) then
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL 51308 0 1
51237: IFFALSE 51249
// begin canWin := false ;
51239: LD_ADDR_VAR 0 2
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// break ;
51247: GO 51251
// end ;
51249: GO 51133
51251: POP
51252: POP
// if canWin then
51253: LD_VAR 0 2
51257: IFFALSE 51264
// enable ( mpWin ) else
51259: LD_INT 101
51261: ENABLE_MARKED
51262: GO 51265
// enable ;
51264: ENABLE
// end ; end ;
51265: PPOPN 2
51267: END
// function CanWinLoose ; begin
51268: LD_INT 0
51270: PPUSH
// result := true ;
51271: LD_ADDR_VAR 0 1
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51279: CALL_OW 531
51283: PUSH
51284: CALL_OW 519
51288: PUSH
51289: LD_INT 1
51291: GREATER
51292: AND
51293: IFFALSE 51303
// result := false ;
51295: LD_ADDR_VAR 0 1
51299: PUSH
51300: LD_INT 0
51302: ST_TO_ADDR
// end ;
51303: LD_VAR 0 1
51307: RET
// function HasPower ( i ) ; begin
51308: LD_INT 0
51310: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51311: LD_ADDR_VAR 0 2
51315: PUSH
51316: LD_INT 22
51318: PUSH
51319: LD_VAR 0 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 21
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 33
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 33
51353: PUSH
51354: LD_INT 5
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PPUSH
51371: CALL_OW 69
51375: ST_TO_ADDR
// end ; end_of_file
51376: LD_VAR 0 2
51380: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51381: LD_EXP 36
51385: IFFALSE 51428
51387: GO 51389
51389: DISABLE
51390: LD_INT 0
51392: PPUSH
// begin for i := 1 to 8 do
51393: LD_ADDR_VAR 0 1
51397: PUSH
51398: DOUBLE
51399: LD_INT 1
51401: DEC
51402: ST_TO_ADDR
51403: LD_INT 8
51405: PUSH
51406: FOR_TO
51407: IFFALSE 51426
// SetRestrict ( b_depot , i , state_disabled ) ;
51409: LD_INT 0
51411: PPUSH
51412: LD_VAR 0 1
51416: PPUSH
51417: LD_INT 0
51419: PPUSH
51420: CALL_OW 324
51424: GO 51406
51426: POP
51427: POP
// end ;
51428: PPOPN 1
51430: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51431: LD_EXP 36
51435: PUSH
51436: CALL 51641 0 0
51440: AND
51441: PUSH
51442: LD_OWVAR 4
51446: AND
51447: IFFALSE 51638
51449: GO 51451
51451: DISABLE
51452: LD_INT 0
51454: PPUSH
51455: PPUSH
// begin canWin := false ;
51456: LD_ADDR_VAR 0 2
51460: PUSH
51461: LD_INT 0
51463: ST_TO_ADDR
// if not HasPower ( your_side ) then
51464: LD_OWVAR 2
51468: PPUSH
51469: CALL 51681 0 1
51473: NOT
51474: IFFALSE 51485
// begin Multiplayer_Loose_Message ;
51476: CALL_OW 521
// enable ( mpLose ) ;
51480: LD_INT 102
51482: ENABLE_MARKED
// end else
51483: GO 51638
// begin canWin := true ;
51485: LD_ADDR_VAR 0 2
51489: PUSH
51490: LD_INT 1
51492: ST_TO_ADDR
// for i := 1 to 8 do
51493: LD_ADDR_VAR 0 1
51497: PUSH
51498: DOUBLE
51499: LD_INT 1
51501: DEC
51502: ST_TO_ADDR
51503: LD_INT 8
51505: PUSH
51506: FOR_TO
51507: IFFALSE 51624
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51509: LD_EXP 5
51513: PUSH
51514: LD_VAR 0 1
51518: ARRAY
51519: PUSH
51520: LD_VAR 0 1
51524: PPUSH
51525: CALL_OW 108
51529: AND
51530: PUSH
51531: LD_VAR 0 1
51535: PUSH
51536: LD_OWVAR 2
51540: NONEQUAL
51541: AND
51542: IFFALSE 51622
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51544: LD_EXP 6
51548: PUSH
51549: LD_VAR 0 1
51553: ARRAY
51554: NOT
51555: PUSH
51556: LD_EXP 6
51560: PUSH
51561: LD_VAR 0 1
51565: ARRAY
51566: PUSH
51567: LD_EXP 6
51571: PUSH
51572: LD_OWVAR 2
51576: ARRAY
51577: NONEQUAL
51578: PUSH
51579: LD_OWVAR 2
51583: PPUSH
51584: LD_VAR 0 1
51588: PPUSH
51589: CALL_OW 81
51593: PUSH
51594: LD_INT 1
51596: NONEQUAL
51597: AND
51598: OR
51599: IFFALSE 51622
// if HasPower ( i ) then
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL 51681 0 1
51610: IFFALSE 51622
// begin canWin := false ;
51612: LD_ADDR_VAR 0 2
51616: PUSH
51617: LD_INT 0
51619: ST_TO_ADDR
// break ;
51620: GO 51624
// end ;
51622: GO 51506
51624: POP
51625: POP
// if canWin then
51626: LD_VAR 0 2
51630: IFFALSE 51637
// enable ( mpWin ) else
51632: LD_INT 101
51634: ENABLE_MARKED
51635: GO 51638
// enable ;
51637: ENABLE
// end ; end ;
51638: PPOPN 2
51640: END
// function CanWinLoose ; begin
51641: LD_INT 0
51643: PPUSH
// result := true ;
51644: LD_ADDR_VAR 0 1
51648: PUSH
51649: LD_INT 1
51651: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51652: CALL_OW 531
51656: PUSH
51657: CALL_OW 519
51661: PUSH
51662: LD_INT 1
51664: GREATER
51665: AND
51666: IFFALSE 51676
// result := false ;
51668: LD_ADDR_VAR 0 1
51672: PUSH
51673: LD_INT 0
51675: ST_TO_ADDR
// end ;
51676: LD_VAR 0 1
51680: RET
// function HasPower ( i ) ; begin
51681: LD_INT 0
51683: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51684: LD_INT 22
51686: PUSH
51687: LD_VAR 0 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 30
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 30
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PPUSH
51728: CALL_OW 69
51732: NOT
51733: IFFALSE 51737
// exit ;
51735: GO 51802
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51737: LD_ADDR_VAR 0 2
51741: PUSH
51742: LD_INT 22
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 21
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 33
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 33
51779: PUSH
51780: LD_INT 5
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PPUSH
51797: CALL_OW 69
51801: ST_TO_ADDR
// end ; end_of_file
51802: LD_VAR 0 2
51806: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51807: LD_EXP 36
51811: IFFALSE 52150
51813: GO 51815
51815: DISABLE
51816: LD_INT 0
51818: PPUSH
51819: PPUSH
51820: PPUSH
// begin mpKingPoints := [ ] ;
51821: LD_ADDR_EXP 41
51825: PUSH
51826: EMPTY
51827: ST_TO_ADDR
// if mpTeamGame then
51828: LD_EXP 9
51832: IFFALSE 51886
// begin for i := 1 to Count ( mpTeams ) do
51834: LD_ADDR_VAR 0 1
51838: PUSH
51839: DOUBLE
51840: LD_INT 1
51842: DEC
51843: ST_TO_ADDR
51844: LD_EXP 8
51848: PPUSH
51849: CALL 4984 0 1
51853: PUSH
51854: FOR_TO
51855: IFFALSE 51882
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51857: LD_ADDR_EXP 41
51861: PUSH
51862: LD_EXP 41
51866: PPUSH
51867: LD_VAR 0 1
51871: PPUSH
51872: LD_INT 0
51874: PPUSH
51875: CALL_OW 1
51879: ST_TO_ADDR
51880: GO 51854
51882: POP
51883: POP
// end else
51884: GO 51929
// begin for i := 1 to 8 do
51886: LD_ADDR_VAR 0 1
51890: PUSH
51891: DOUBLE
51892: LD_INT 1
51894: DEC
51895: ST_TO_ADDR
51896: LD_INT 8
51898: PUSH
51899: FOR_TO
51900: IFFALSE 51927
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51902: LD_ADDR_EXP 41
51906: PUSH
51907: LD_EXP 41
51911: PPUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: LD_INT 0
51919: PPUSH
51920: CALL_OW 1
51924: ST_TO_ADDR
51925: GO 51899
51927: POP
51928: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51929: LD_ADDR_VAR 0 3
51933: PUSH
51934: LD_INT 73
51936: PPUSH
51937: LD_INT 0
51939: PPUSH
51940: CALL_OW 517
51944: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51945: LD_ADDR_VAR 0 1
51949: PUSH
51950: DOUBLE
51951: LD_INT 1
51953: DEC
51954: ST_TO_ADDR
51955: LD_VAR 0 3
51959: PUSH
51960: LD_INT 1
51962: ARRAY
51963: PUSH
51964: FOR_TO
51965: IFFALSE 52032
// for j := 1 to 8 do
51967: LD_ADDR_VAR 0 2
51971: PUSH
51972: DOUBLE
51973: LD_INT 1
51975: DEC
51976: ST_TO_ADDR
51977: LD_INT 8
51979: PUSH
51980: FOR_TO
51981: IFFALSE 52028
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
51983: LD_VAR 0 3
51987: PUSH
51988: LD_INT 1
51990: ARRAY
51991: PUSH
51992: LD_VAR 0 1
51996: ARRAY
51997: PPUSH
51998: LD_VAR 0 3
52002: PUSH
52003: LD_INT 2
52005: ARRAY
52006: PUSH
52007: LD_VAR 0 1
52011: ARRAY
52012: PPUSH
52013: LD_VAR 0 2
52017: PPUSH
52018: LD_INT 12
52020: NEG
52021: PPUSH
52022: CALL_OW 330
52026: GO 51980
52028: POP
52029: POP
52030: GO 51964
52032: POP
52033: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52034: LD_EXP 31
52038: PPUSH
52039: LD_INT 1
52041: PPUSH
52042: CALL_OW 424
// UpdateCounter ;
52046: CALL 52652 0 0
// repeat wait ( 0 0$1 ) ;
52050: LD_INT 35
52052: PPUSH
52053: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52057: LD_ADDR_VAR 0 3
52061: PUSH
52062: LD_EXP 31
52066: PPUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 57
52072: PUSH
52073: EMPTY
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 50
52082: PUSH
52083: EMPTY
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 30
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 30
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PPUSH
52119: CALL_OW 70
52123: ST_TO_ADDR
// if not tmp then
52124: LD_VAR 0 3
52128: NOT
52129: IFFALSE 52133
// continue ;
52131: GO 52050
// AddPoints ( tmp ) ;
52133: LD_VAR 0 3
52137: PPUSH
52138: CALL 52330 0 1
// UpdateCounter ;
52142: CALL 52652 0 0
// until false ;
52146: LD_INT 0
52148: IFFALSE 52050
// end ;
52150: PPOPN 3
52152: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52153: LD_EXP 36
52157: PUSH
52158: LD_EXP 34
52162: AND
52163: IFFALSE 52327
52165: GO 52167
52167: DISABLE
52168: LD_INT 0
52170: PPUSH
52171: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52172: LD_ADDR_VAR 0 2
52176: PUSH
52177: LD_INT 73
52179: PPUSH
52180: LD_INT 0
52182: PPUSH
52183: CALL_OW 517
52187: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52188: LD_ADDR_VAR 0 1
52192: PUSH
52193: DOUBLE
52194: LD_INT 1
52196: DEC
52197: ST_TO_ADDR
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 1
52205: ARRAY
52206: PUSH
52207: FOR_TO
52208: IFFALSE 52249
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52210: LD_VAR 0 2
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: PUSH
52219: LD_VAR 0 1
52223: ARRAY
52224: PPUSH
52225: LD_VAR 0 2
52229: PUSH
52230: LD_INT 2
52232: ARRAY
52233: PUSH
52234: LD_VAR 0 1
52238: ARRAY
52239: PPUSH
52240: LD_INT 125
52242: PPUSH
52243: CALL_OW 495
52247: GO 52207
52249: POP
52250: POP
// repeat wait ( mpEmissions ) ;
52251: LD_EXP 34
52255: PPUSH
52256: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52260: LD_ADDR_VAR 0 1
52264: PUSH
52265: DOUBLE
52266: LD_INT 1
52268: DEC
52269: ST_TO_ADDR
52270: LD_VAR 0 2
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: PUSH
52279: FOR_TO
52280: IFFALSE 52321
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52282: LD_VAR 0 2
52286: PUSH
52287: LD_INT 1
52289: ARRAY
52290: PUSH
52291: LD_VAR 0 1
52295: ARRAY
52296: PPUSH
52297: LD_VAR 0 2
52301: PUSH
52302: LD_INT 2
52304: ARRAY
52305: PUSH
52306: LD_VAR 0 1
52310: ARRAY
52311: PPUSH
52312: LD_INT 15
52314: PPUSH
52315: CALL_OW 495
52319: GO 52279
52321: POP
52322: POP
// until false ;
52323: LD_INT 0
52325: IFFALSE 52251
// end ;
52327: PPOPN 2
52329: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52330: LD_INT 0
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
52336: PPUSH
// if mpTeamGame then
52337: LD_EXP 9
52341: IFFALSE 52538
// begin first := depots [ 1 ] ;
52343: LD_ADDR_VAR 0 4
52347: PUSH
52348: LD_VAR 0 1
52352: PUSH
52353: LD_INT 1
52355: ARRAY
52356: ST_TO_ADDR
// side := GetSide ( first ) ;
52357: LD_ADDR_VAR 0 6
52361: PUSH
52362: LD_VAR 0 4
52366: PPUSH
52367: CALL_OW 255
52371: ST_TO_ADDR
// for i := 1 to mpTeams do
52372: LD_ADDR_VAR 0 3
52376: PUSH
52377: DOUBLE
52378: LD_INT 1
52380: DEC
52381: ST_TO_ADDR
52382: LD_EXP 8
52386: PUSH
52387: FOR_TO
52388: IFFALSE 52422
// if side in mpTeams [ i ] then
52390: LD_VAR 0 6
52394: PUSH
52395: LD_EXP 8
52399: PUSH
52400: LD_VAR 0 3
52404: ARRAY
52405: IN
52406: IFFALSE 52420
// begin team := i ;
52408: LD_ADDR_VAR 0 5
52412: PUSH
52413: LD_VAR 0 3
52417: ST_TO_ADDR
// break ;
52418: GO 52422
// end ;
52420: GO 52387
52422: POP
52423: POP
// if not team then
52424: LD_VAR 0 5
52428: NOT
52429: IFFALSE 52433
// exit ;
52431: GO 52647
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52433: LD_EXP 31
52437: PPUSH
52438: LD_INT 81
52440: PUSH
52441: LD_VAR 0 6
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PPUSH
52450: CALL_OW 70
52454: IFFALSE 52458
// exit ;
52456: GO 52647
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52458: LD_ADDR_EXP 41
52462: PUSH
52463: LD_EXP 41
52467: PPUSH
52468: LD_VAR 0 5
52472: PPUSH
52473: LD_EXP 41
52477: PUSH
52478: LD_VAR 0 5
52482: ARRAY
52483: PUSH
52484: LD_INT 1
52486: PLUS
52487: PPUSH
52488: CALL_OW 1
52492: ST_TO_ADDR
// for i in mpTeams [ team ] do
52493: LD_ADDR_VAR 0 3
52497: PUSH
52498: LD_EXP 8
52502: PUSH
52503: LD_VAR 0 5
52507: ARRAY
52508: PUSH
52509: FOR_IN
52510: IFFALSE 52534
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52512: LD_VAR 0 3
52516: PPUSH
52517: LD_EXP 41
52521: PUSH
52522: LD_VAR 0 5
52526: ARRAY
52527: PPUSH
52528: CALL_OW 506
52532: GO 52509
52534: POP
52535: POP
// end else
52536: GO 52647
// begin first := depots [ 1 ] ;
52538: LD_ADDR_VAR 0 4
52542: PUSH
52543: LD_VAR 0 1
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: ST_TO_ADDR
// side := GetSide ( first ) ;
52552: LD_ADDR_VAR 0 6
52556: PUSH
52557: LD_VAR 0 4
52561: PPUSH
52562: CALL_OW 255
52566: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52567: LD_EXP 31
52571: PPUSH
52572: LD_INT 81
52574: PUSH
52575: LD_VAR 0 6
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PPUSH
52584: CALL_OW 70
52588: IFFALSE 52592
// exit ;
52590: GO 52647
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52592: LD_ADDR_EXP 41
52596: PUSH
52597: LD_EXP 41
52601: PPUSH
52602: LD_VAR 0 6
52606: PPUSH
52607: LD_EXP 41
52611: PUSH
52612: LD_VAR 0 6
52616: ARRAY
52617: PUSH
52618: LD_INT 1
52620: PLUS
52621: PPUSH
52622: CALL_OW 1
52626: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52627: LD_VAR 0 6
52631: PPUSH
52632: LD_EXP 41
52636: PUSH
52637: LD_VAR 0 6
52641: ARRAY
52642: PPUSH
52643: CALL_OW 506
// end ; end ;
52647: LD_VAR 0 2
52651: RET
// function UpdateCounter ; var i ; begin
52652: LD_INT 0
52654: PPUSH
52655: PPUSH
// result := [ ] ;
52656: LD_ADDR_VAR 0 1
52660: PUSH
52661: EMPTY
52662: ST_TO_ADDR
// if mpTeamGame then
52663: LD_EXP 9
52667: IFFALSE 52734
// begin for i := 1 to mpTeams do
52669: LD_ADDR_VAR 0 2
52673: PUSH
52674: DOUBLE
52675: LD_INT 1
52677: DEC
52678: ST_TO_ADDR
52679: LD_EXP 8
52683: PUSH
52684: FOR_TO
52685: IFFALSE 52730
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52687: LD_ADDR_VAR 0 1
52691: PUSH
52692: LD_VAR 0 1
52696: PUSH
52697: LD_STRING #KingoftheHill-Team
52699: PUSH
52700: LD_VAR 0 2
52704: PUSH
52705: LD_EXP 41
52709: PUSH
52710: LD_VAR 0 2
52714: ARRAY
52715: PUSH
52716: LD_EXP 32
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ADD
52727: ST_TO_ADDR
52728: GO 52684
52730: POP
52731: POP
// end else
52732: GO 52807
// begin for i := 1 to 8 do
52734: LD_ADDR_VAR 0 2
52738: PUSH
52739: DOUBLE
52740: LD_INT 1
52742: DEC
52743: ST_TO_ADDR
52744: LD_INT 8
52746: PUSH
52747: FOR_TO
52748: IFFALSE 52805
// if mpSidePositions [ i ] then
52750: LD_EXP 5
52754: PUSH
52755: LD_VAR 0 2
52759: ARRAY
52760: IFFALSE 52803
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52762: LD_ADDR_VAR 0 1
52766: PUSH
52767: LD_VAR 0 1
52771: PUSH
52772: LD_STRING #KingoftheHill-Player
52774: PUSH
52775: LD_VAR 0 2
52779: PUSH
52780: LD_EXP 41
52784: PUSH
52785: LD_VAR 0 2
52789: ARRAY
52790: PUSH
52791: LD_EXP 32
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: ADD
52802: ST_TO_ADDR
52803: GO 52747
52805: POP
52806: POP
// end ; mpDisplayStrings := result ;
52807: LD_ADDR_EXP 35
52811: PUSH
52812: LD_VAR 0 1
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 1
52821: RET
// export function HowMuchPointsKing ( side ) ; begin
52822: LD_INT 0
52824: PPUSH
// result := HowMuchPoints ( side ) ;
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL 52845 0 1
52839: ST_TO_ADDR
// end ;
52840: LD_VAR 0 2
52844: RET
// function HowMuchPoints ( side ) ; var i ; begin
52845: LD_INT 0
52847: PPUSH
52848: PPUSH
// if mpTeamGame then
52849: LD_EXP 9
52853: IFFALSE 52922
// begin for i := 1 to Count ( mpTeams ) do
52855: LD_ADDR_VAR 0 3
52859: PUSH
52860: DOUBLE
52861: LD_INT 1
52863: DEC
52864: ST_TO_ADDR
52865: LD_EXP 8
52869: PPUSH
52870: CALL 4984 0 1
52874: PUSH
52875: FOR_TO
52876: IFFALSE 52918
// begin if side in mpTeams [ i ] then
52878: LD_VAR 0 1
52882: PUSH
52883: LD_EXP 8
52887: PUSH
52888: LD_VAR 0 3
52892: ARRAY
52893: IN
52894: IFFALSE 52916
// begin result := mpKingPoints [ i ] ;
52896: LD_ADDR_VAR 0 2
52900: PUSH
52901: LD_EXP 41
52905: PUSH
52906: LD_VAR 0 3
52910: ARRAY
52911: ST_TO_ADDR
// exit ;
52912: POP
52913: POP
52914: GO 52938
// end ; end ;
52916: GO 52875
52918: POP
52919: POP
// end else
52920: GO 52938
// result := mpKingPoints [ side ] ;
52922: LD_ADDR_VAR 0 2
52926: PUSH
52927: LD_EXP 41
52931: PUSH
52932: LD_VAR 0 1
52936: ARRAY
52937: ST_TO_ADDR
// end ;
52938: LD_VAR 0 2
52942: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52943: LD_EXP 36
52947: PUSH
52948: CALL 53270 0 0
52952: AND
52953: PUSH
52954: LD_OWVAR 4
52958: AND
52959: IFFALSE 53195
52961: GO 52963
52963: DISABLE
52964: LD_INT 0
52966: PPUSH
52967: PPUSH
// begin canWin := false ;
52968: LD_ADDR_VAR 0 2
52972: PUSH
52973: LD_INT 0
52975: ST_TO_ADDR
// if not HasPower ( your_side ) then
52976: LD_OWVAR 2
52980: PPUSH
52981: CALL 53310 0 1
52985: NOT
52986: IFFALSE 52997
// begin Multiplayer_Loose_Message ;
52988: CALL_OW 521
// enable ( mpLose ) ;
52992: LD_INT 102
52994: ENABLE_MARKED
// end else
52995: GO 53195
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
52997: LD_ADDR_VAR 0 2
53001: PUSH
53002: LD_OWVAR 2
53006: PPUSH
53007: CALL 52845 0 1
53011: PUSH
53012: LD_EXP 32
53016: GREATEREQUAL
53017: PUSH
53018: LD_OWVAR 2
53022: PPUSH
53023: CALL 53310 0 1
53027: AND
53028: PUSH
53029: CALL 53198 0 0
53033: NOT
53034: OR
53035: ST_TO_ADDR
// for i := 1 to 8 do
53036: LD_ADDR_VAR 0 1
53040: PUSH
53041: DOUBLE
53042: LD_INT 1
53044: DEC
53045: ST_TO_ADDR
53046: LD_INT 8
53048: PUSH
53049: FOR_TO
53050: IFFALSE 53181
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53052: LD_EXP 5
53056: PUSH
53057: LD_VAR 0 1
53061: ARRAY
53062: PUSH
53063: LD_VAR 0 1
53067: PPUSH
53068: CALL_OW 108
53072: AND
53073: PUSH
53074: LD_VAR 0 1
53078: PUSH
53079: LD_OWVAR 2
53083: NONEQUAL
53084: AND
53085: IFFALSE 53179
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53087: LD_EXP 6
53091: PUSH
53092: LD_VAR 0 1
53096: ARRAY
53097: NOT
53098: PUSH
53099: LD_EXP 6
53103: PUSH
53104: LD_VAR 0 1
53108: ARRAY
53109: PUSH
53110: LD_EXP 6
53114: PUSH
53115: LD_OWVAR 2
53119: ARRAY
53120: NONEQUAL
53121: PUSH
53122: LD_OWVAR 2
53126: PPUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 81
53136: PUSH
53137: LD_INT 1
53139: NONEQUAL
53140: AND
53141: OR
53142: IFFALSE 53179
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL 52845 0 1
53153: PUSH
53154: LD_EXP 32
53158: GREATEREQUAL
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL 53310 0 1
53169: AND
53170: IFFALSE 53179
// begin enable ( mpLose ) ;
53172: LD_INT 102
53174: ENABLE_MARKED
// exit ;
53175: POP
53176: POP
53177: GO 53195
// end ;
53179: GO 53049
53181: POP
53182: POP
// if canWin then
53183: LD_VAR 0 2
53187: IFFALSE 53194
// enable ( mpWin ) else
53189: LD_INT 101
53191: ENABLE_MARKED
53192: GO 53195
// enable ;
53194: ENABLE
// end ; end ;
53195: PPOPN 2
53197: END
// function EnemiesInGame ; var i ; begin
53198: LD_INT 0
53200: PPUSH
53201: PPUSH
// result := false ;
53202: LD_ADDR_VAR 0 1
53206: PUSH
53207: LD_INT 0
53209: ST_TO_ADDR
// for i := 1 to 8 do
53210: LD_ADDR_VAR 0 2
53214: PUSH
53215: DOUBLE
53216: LD_INT 1
53218: DEC
53219: ST_TO_ADDR
53220: LD_INT 8
53222: PUSH
53223: FOR_TO
53224: IFFALSE 53263
// if i <> your_side and HasPower ( i ) then
53226: LD_VAR 0 2
53230: PUSH
53231: LD_OWVAR 2
53235: NONEQUAL
53236: PUSH
53237: LD_VAR 0 2
53241: PPUSH
53242: CALL 53310 0 1
53246: AND
53247: IFFALSE 53261
// begin result := true ;
53249: LD_ADDR_VAR 0 1
53253: PUSH
53254: LD_INT 1
53256: ST_TO_ADDR
// exit ;
53257: POP
53258: POP
53259: GO 53265
// end ;
53261: GO 53223
53263: POP
53264: POP
// end ;
53265: LD_VAR 0 1
53269: RET
// function CanWinLoose ; begin
53270: LD_INT 0
53272: PPUSH
// result := true ;
53273: LD_ADDR_VAR 0 1
53277: PUSH
53278: LD_INT 1
53280: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53281: CALL_OW 531
53285: PUSH
53286: CALL_OW 519
53290: PUSH
53291: LD_INT 1
53293: GREATER
53294: AND
53295: IFFALSE 53305
// result := false ;
53297: LD_ADDR_VAR 0 1
53301: PUSH
53302: LD_INT 0
53304: ST_TO_ADDR
// end ;
53305: LD_VAR 0 1
53309: RET
// function HasPower ( i ) ; begin
53310: LD_INT 0
53312: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53313: LD_ADDR_VAR 0 2
53317: PUSH
53318: LD_INT 22
53320: PUSH
53321: LD_VAR 0 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 21
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 33
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 33
53355: PUSH
53356: LD_INT 5
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PPUSH
53373: CALL_OW 69
53377: ST_TO_ADDR
// end ; end_of_file end_of_file
53378: LD_VAR 0 2
53382: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53383: LD_VAR 0 1
53387: PPUSH
53388: LD_VAR 0 2
53392: PPUSH
53393: LD_VAR 0 3
53397: PPUSH
53398: LD_VAR 0 4
53402: PPUSH
53403: LD_VAR 0 5
53407: PPUSH
53408: LD_VAR 0 6
53412: PPUSH
53413: CALL 53614 0 6
// end ;
53417: PPOPN 6
53419: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53420: LD_INT 0
53422: PPUSH
// begin if not units then
53423: LD_VAR 0 1
53427: NOT
53428: IFFALSE 53432
// exit ;
53430: GO 53432
// end ;
53432: PPOPN 7
53434: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53435: CALL 53501 0 0
// end ; end_of_file
53439: PPOPN 1
53441: END
// export globalGameSaveCounter ; every 0 0$1 do
53442: GO 53444
53444: DISABLE
// begin enable ;
53445: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53446: LD_STRING updateTimer(
53448: PUSH
53449: LD_OWVAR 1
53453: STR
53454: PUSH
53455: LD_STRING );
53457: STR
53458: PPUSH
53459: CALL_OW 559
// end ;
53463: END
// every 0 0$1 do
53464: GO 53466
53466: DISABLE
// begin globalGameSaveCounter := 0 ;
53467: LD_ADDR_EXP 42
53471: PUSH
53472: LD_INT 0
53474: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53475: LD_STRING setGameSaveCounter(0)
53477: PPUSH
53478: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53482: LD_STRING initStreamRollete();
53484: PPUSH
53485: CALL_OW 559
// InitStreamMode ;
53489: CALL 54832 0 0
// DefineStreamItems ( false ) ;
53493: LD_INT 0
53495: PPUSH
53496: CALL 55296 0 1
// end ;
53500: END
// export function SOS_MapStart ( ) ; begin
53501: LD_INT 0
53503: PPUSH
// if streamModeActive then
53504: LD_EXP 43
53508: IFFALSE 53517
// DefineStreamItems ( true ) ;
53510: LD_INT 1
53512: PPUSH
53513: CALL 55296 0 1
// UpdateLuaVariables ( ) ;
53517: CALL 53534 0 0
// UpdateFactoryWaypoints ( ) ;
53521: CALL 68165 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53525: CALL 68422 0 0
// end ;
53529: LD_VAR 0 1
53533: RET
// function UpdateLuaVariables ( ) ; begin
53534: LD_INT 0
53536: PPUSH
// if globalGameSaveCounter then
53537: LD_EXP 42
53541: IFFALSE 53575
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53543: LD_ADDR_EXP 42
53547: PUSH
53548: LD_EXP 42
53552: PPUSH
53553: CALL 41934 0 1
53557: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53558: LD_STRING setGameSaveCounter(
53560: PUSH
53561: LD_EXP 42
53565: STR
53566: PUSH
53567: LD_STRING )
53569: STR
53570: PPUSH
53571: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53575: LD_STRING setGameDifficulty(
53577: PUSH
53578: LD_OWVAR 67
53582: STR
53583: PUSH
53584: LD_STRING )
53586: STR
53587: PPUSH
53588: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53592: LD_STRING displayDifficulty(
53594: PUSH
53595: LD_OWVAR 67
53599: STR
53600: PUSH
53601: LD_STRING )
53603: STR
53604: PPUSH
53605: CALL_OW 559
// end ;
53609: LD_VAR 0 1
53613: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53614: LD_INT 0
53616: PPUSH
// if p2 = stream_mode then
53617: LD_VAR 0 2
53621: PUSH
53622: LD_INT 100
53624: EQUAL
53625: IFFALSE 54628
// begin if not StreamModeActive then
53627: LD_EXP 43
53631: NOT
53632: IFFALSE 53642
// StreamModeActive := true ;
53634: LD_ADDR_EXP 43
53638: PUSH
53639: LD_INT 1
53641: ST_TO_ADDR
// if p3 = 0 then
53642: LD_VAR 0 3
53646: PUSH
53647: LD_INT 0
53649: EQUAL
53650: IFFALSE 53656
// InitStreamMode ;
53652: CALL 54832 0 0
// if p3 = 1 then
53656: LD_VAR 0 3
53660: PUSH
53661: LD_INT 1
53663: EQUAL
53664: IFFALSE 53674
// sRocket := true ;
53666: LD_ADDR_EXP 48
53670: PUSH
53671: LD_INT 1
53673: ST_TO_ADDR
// if p3 = 2 then
53674: LD_VAR 0 3
53678: PUSH
53679: LD_INT 2
53681: EQUAL
53682: IFFALSE 53692
// sSpeed := true ;
53684: LD_ADDR_EXP 47
53688: PUSH
53689: LD_INT 1
53691: ST_TO_ADDR
// if p3 = 3 then
53692: LD_VAR 0 3
53696: PUSH
53697: LD_INT 3
53699: EQUAL
53700: IFFALSE 53710
// sEngine := true ;
53702: LD_ADDR_EXP 49
53706: PUSH
53707: LD_INT 1
53709: ST_TO_ADDR
// if p3 = 4 then
53710: LD_VAR 0 3
53714: PUSH
53715: LD_INT 4
53717: EQUAL
53718: IFFALSE 53728
// sSpec := true ;
53720: LD_ADDR_EXP 46
53724: PUSH
53725: LD_INT 1
53727: ST_TO_ADDR
// if p3 = 5 then
53728: LD_VAR 0 3
53732: PUSH
53733: LD_INT 5
53735: EQUAL
53736: IFFALSE 53746
// sLevel := true ;
53738: LD_ADDR_EXP 50
53742: PUSH
53743: LD_INT 1
53745: ST_TO_ADDR
// if p3 = 6 then
53746: LD_VAR 0 3
53750: PUSH
53751: LD_INT 6
53753: EQUAL
53754: IFFALSE 53764
// sArmoury := true ;
53756: LD_ADDR_EXP 51
53760: PUSH
53761: LD_INT 1
53763: ST_TO_ADDR
// if p3 = 7 then
53764: LD_VAR 0 3
53768: PUSH
53769: LD_INT 7
53771: EQUAL
53772: IFFALSE 53782
// sRadar := true ;
53774: LD_ADDR_EXP 52
53778: PUSH
53779: LD_INT 1
53781: ST_TO_ADDR
// if p3 = 8 then
53782: LD_VAR 0 3
53786: PUSH
53787: LD_INT 8
53789: EQUAL
53790: IFFALSE 53800
// sBunker := true ;
53792: LD_ADDR_EXP 53
53796: PUSH
53797: LD_INT 1
53799: ST_TO_ADDR
// if p3 = 9 then
53800: LD_VAR 0 3
53804: PUSH
53805: LD_INT 9
53807: EQUAL
53808: IFFALSE 53818
// sHack := true ;
53810: LD_ADDR_EXP 54
53814: PUSH
53815: LD_INT 1
53817: ST_TO_ADDR
// if p3 = 10 then
53818: LD_VAR 0 3
53822: PUSH
53823: LD_INT 10
53825: EQUAL
53826: IFFALSE 53836
// sFire := true ;
53828: LD_ADDR_EXP 55
53832: PUSH
53833: LD_INT 1
53835: ST_TO_ADDR
// if p3 = 11 then
53836: LD_VAR 0 3
53840: PUSH
53841: LD_INT 11
53843: EQUAL
53844: IFFALSE 53854
// sRefresh := true ;
53846: LD_ADDR_EXP 56
53850: PUSH
53851: LD_INT 1
53853: ST_TO_ADDR
// if p3 = 12 then
53854: LD_VAR 0 3
53858: PUSH
53859: LD_INT 12
53861: EQUAL
53862: IFFALSE 53872
// sExp := true ;
53864: LD_ADDR_EXP 57
53868: PUSH
53869: LD_INT 1
53871: ST_TO_ADDR
// if p3 = 13 then
53872: LD_VAR 0 3
53876: PUSH
53877: LD_INT 13
53879: EQUAL
53880: IFFALSE 53890
// sDepot := true ;
53882: LD_ADDR_EXP 58
53886: PUSH
53887: LD_INT 1
53889: ST_TO_ADDR
// if p3 = 14 then
53890: LD_VAR 0 3
53894: PUSH
53895: LD_INT 14
53897: EQUAL
53898: IFFALSE 53908
// sFlag := true ;
53900: LD_ADDR_EXP 59
53904: PUSH
53905: LD_INT 1
53907: ST_TO_ADDR
// if p3 = 15 then
53908: LD_VAR 0 3
53912: PUSH
53913: LD_INT 15
53915: EQUAL
53916: IFFALSE 53926
// sKamikadze := true ;
53918: LD_ADDR_EXP 67
53922: PUSH
53923: LD_INT 1
53925: ST_TO_ADDR
// if p3 = 16 then
53926: LD_VAR 0 3
53930: PUSH
53931: LD_INT 16
53933: EQUAL
53934: IFFALSE 53944
// sTroll := true ;
53936: LD_ADDR_EXP 68
53940: PUSH
53941: LD_INT 1
53943: ST_TO_ADDR
// if p3 = 17 then
53944: LD_VAR 0 3
53948: PUSH
53949: LD_INT 17
53951: EQUAL
53952: IFFALSE 53962
// sSlow := true ;
53954: LD_ADDR_EXP 69
53958: PUSH
53959: LD_INT 1
53961: ST_TO_ADDR
// if p3 = 18 then
53962: LD_VAR 0 3
53966: PUSH
53967: LD_INT 18
53969: EQUAL
53970: IFFALSE 53980
// sLack := true ;
53972: LD_ADDR_EXP 70
53976: PUSH
53977: LD_INT 1
53979: ST_TO_ADDR
// if p3 = 19 then
53980: LD_VAR 0 3
53984: PUSH
53985: LD_INT 19
53987: EQUAL
53988: IFFALSE 53998
// sTank := true ;
53990: LD_ADDR_EXP 72
53994: PUSH
53995: LD_INT 1
53997: ST_TO_ADDR
// if p3 = 20 then
53998: LD_VAR 0 3
54002: PUSH
54003: LD_INT 20
54005: EQUAL
54006: IFFALSE 54016
// sRemote := true ;
54008: LD_ADDR_EXP 73
54012: PUSH
54013: LD_INT 1
54015: ST_TO_ADDR
// if p3 = 21 then
54016: LD_VAR 0 3
54020: PUSH
54021: LD_INT 21
54023: EQUAL
54024: IFFALSE 54034
// sPowell := true ;
54026: LD_ADDR_EXP 74
54030: PUSH
54031: LD_INT 1
54033: ST_TO_ADDR
// if p3 = 22 then
54034: LD_VAR 0 3
54038: PUSH
54039: LD_INT 22
54041: EQUAL
54042: IFFALSE 54052
// sTeleport := true ;
54044: LD_ADDR_EXP 77
54048: PUSH
54049: LD_INT 1
54051: ST_TO_ADDR
// if p3 = 23 then
54052: LD_VAR 0 3
54056: PUSH
54057: LD_INT 23
54059: EQUAL
54060: IFFALSE 54070
// sOilTower := true ;
54062: LD_ADDR_EXP 79
54066: PUSH
54067: LD_INT 1
54069: ST_TO_ADDR
// if p3 = 24 then
54070: LD_VAR 0 3
54074: PUSH
54075: LD_INT 24
54077: EQUAL
54078: IFFALSE 54088
// sShovel := true ;
54080: LD_ADDR_EXP 80
54084: PUSH
54085: LD_INT 1
54087: ST_TO_ADDR
// if p3 = 25 then
54088: LD_VAR 0 3
54092: PUSH
54093: LD_INT 25
54095: EQUAL
54096: IFFALSE 54106
// sSheik := true ;
54098: LD_ADDR_EXP 81
54102: PUSH
54103: LD_INT 1
54105: ST_TO_ADDR
// if p3 = 26 then
54106: LD_VAR 0 3
54110: PUSH
54111: LD_INT 26
54113: EQUAL
54114: IFFALSE 54124
// sEarthquake := true ;
54116: LD_ADDR_EXP 83
54120: PUSH
54121: LD_INT 1
54123: ST_TO_ADDR
// if p3 = 27 then
54124: LD_VAR 0 3
54128: PUSH
54129: LD_INT 27
54131: EQUAL
54132: IFFALSE 54142
// sAI := true ;
54134: LD_ADDR_EXP 84
54138: PUSH
54139: LD_INT 1
54141: ST_TO_ADDR
// if p3 = 28 then
54142: LD_VAR 0 3
54146: PUSH
54147: LD_INT 28
54149: EQUAL
54150: IFFALSE 54160
// sCargo := true ;
54152: LD_ADDR_EXP 87
54156: PUSH
54157: LD_INT 1
54159: ST_TO_ADDR
// if p3 = 29 then
54160: LD_VAR 0 3
54164: PUSH
54165: LD_INT 29
54167: EQUAL
54168: IFFALSE 54178
// sDLaser := true ;
54170: LD_ADDR_EXP 88
54174: PUSH
54175: LD_INT 1
54177: ST_TO_ADDR
// if p3 = 30 then
54178: LD_VAR 0 3
54182: PUSH
54183: LD_INT 30
54185: EQUAL
54186: IFFALSE 54196
// sExchange := true ;
54188: LD_ADDR_EXP 89
54192: PUSH
54193: LD_INT 1
54195: ST_TO_ADDR
// if p3 = 31 then
54196: LD_VAR 0 3
54200: PUSH
54201: LD_INT 31
54203: EQUAL
54204: IFFALSE 54214
// sFac := true ;
54206: LD_ADDR_EXP 90
54210: PUSH
54211: LD_INT 1
54213: ST_TO_ADDR
// if p3 = 32 then
54214: LD_VAR 0 3
54218: PUSH
54219: LD_INT 32
54221: EQUAL
54222: IFFALSE 54232
// sPower := true ;
54224: LD_ADDR_EXP 91
54228: PUSH
54229: LD_INT 1
54231: ST_TO_ADDR
// if p3 = 33 then
54232: LD_VAR 0 3
54236: PUSH
54237: LD_INT 33
54239: EQUAL
54240: IFFALSE 54250
// sRandom := true ;
54242: LD_ADDR_EXP 92
54246: PUSH
54247: LD_INT 1
54249: ST_TO_ADDR
// if p3 = 34 then
54250: LD_VAR 0 3
54254: PUSH
54255: LD_INT 34
54257: EQUAL
54258: IFFALSE 54268
// sShield := true ;
54260: LD_ADDR_EXP 93
54264: PUSH
54265: LD_INT 1
54267: ST_TO_ADDR
// if p3 = 35 then
54268: LD_VAR 0 3
54272: PUSH
54273: LD_INT 35
54275: EQUAL
54276: IFFALSE 54286
// sTime := true ;
54278: LD_ADDR_EXP 94
54282: PUSH
54283: LD_INT 1
54285: ST_TO_ADDR
// if p3 = 36 then
54286: LD_VAR 0 3
54290: PUSH
54291: LD_INT 36
54293: EQUAL
54294: IFFALSE 54304
// sTools := true ;
54296: LD_ADDR_EXP 95
54300: PUSH
54301: LD_INT 1
54303: ST_TO_ADDR
// if p3 = 101 then
54304: LD_VAR 0 3
54308: PUSH
54309: LD_INT 101
54311: EQUAL
54312: IFFALSE 54322
// sSold := true ;
54314: LD_ADDR_EXP 60
54318: PUSH
54319: LD_INT 1
54321: ST_TO_ADDR
// if p3 = 102 then
54322: LD_VAR 0 3
54326: PUSH
54327: LD_INT 102
54329: EQUAL
54330: IFFALSE 54340
// sDiff := true ;
54332: LD_ADDR_EXP 61
54336: PUSH
54337: LD_INT 1
54339: ST_TO_ADDR
// if p3 = 103 then
54340: LD_VAR 0 3
54344: PUSH
54345: LD_INT 103
54347: EQUAL
54348: IFFALSE 54358
// sFog := true ;
54350: LD_ADDR_EXP 64
54354: PUSH
54355: LD_INT 1
54357: ST_TO_ADDR
// if p3 = 104 then
54358: LD_VAR 0 3
54362: PUSH
54363: LD_INT 104
54365: EQUAL
54366: IFFALSE 54376
// sReset := true ;
54368: LD_ADDR_EXP 65
54372: PUSH
54373: LD_INT 1
54375: ST_TO_ADDR
// if p3 = 105 then
54376: LD_VAR 0 3
54380: PUSH
54381: LD_INT 105
54383: EQUAL
54384: IFFALSE 54394
// sSun := true ;
54386: LD_ADDR_EXP 66
54390: PUSH
54391: LD_INT 1
54393: ST_TO_ADDR
// if p3 = 106 then
54394: LD_VAR 0 3
54398: PUSH
54399: LD_INT 106
54401: EQUAL
54402: IFFALSE 54412
// sTiger := true ;
54404: LD_ADDR_EXP 62
54408: PUSH
54409: LD_INT 1
54411: ST_TO_ADDR
// if p3 = 107 then
54412: LD_VAR 0 3
54416: PUSH
54417: LD_INT 107
54419: EQUAL
54420: IFFALSE 54430
// sBomb := true ;
54422: LD_ADDR_EXP 63
54426: PUSH
54427: LD_INT 1
54429: ST_TO_ADDR
// if p3 = 108 then
54430: LD_VAR 0 3
54434: PUSH
54435: LD_INT 108
54437: EQUAL
54438: IFFALSE 54448
// sWound := true ;
54440: LD_ADDR_EXP 71
54444: PUSH
54445: LD_INT 1
54447: ST_TO_ADDR
// if p3 = 109 then
54448: LD_VAR 0 3
54452: PUSH
54453: LD_INT 109
54455: EQUAL
54456: IFFALSE 54466
// sBetray := true ;
54458: LD_ADDR_EXP 75
54462: PUSH
54463: LD_INT 1
54465: ST_TO_ADDR
// if p3 = 110 then
54466: LD_VAR 0 3
54470: PUSH
54471: LD_INT 110
54473: EQUAL
54474: IFFALSE 54484
// sContamin := true ;
54476: LD_ADDR_EXP 76
54480: PUSH
54481: LD_INT 1
54483: ST_TO_ADDR
// if p3 = 111 then
54484: LD_VAR 0 3
54488: PUSH
54489: LD_INT 111
54491: EQUAL
54492: IFFALSE 54502
// sOil := true ;
54494: LD_ADDR_EXP 78
54498: PUSH
54499: LD_INT 1
54501: ST_TO_ADDR
// if p3 = 112 then
54502: LD_VAR 0 3
54506: PUSH
54507: LD_INT 112
54509: EQUAL
54510: IFFALSE 54520
// sStu := true ;
54512: LD_ADDR_EXP 82
54516: PUSH
54517: LD_INT 1
54519: ST_TO_ADDR
// if p3 = 113 then
54520: LD_VAR 0 3
54524: PUSH
54525: LD_INT 113
54527: EQUAL
54528: IFFALSE 54538
// sBazooka := true ;
54530: LD_ADDR_EXP 85
54534: PUSH
54535: LD_INT 1
54537: ST_TO_ADDR
// if p3 = 114 then
54538: LD_VAR 0 3
54542: PUSH
54543: LD_INT 114
54545: EQUAL
54546: IFFALSE 54556
// sMortar := true ;
54548: LD_ADDR_EXP 86
54552: PUSH
54553: LD_INT 1
54555: ST_TO_ADDR
// if p3 = 115 then
54556: LD_VAR 0 3
54560: PUSH
54561: LD_INT 115
54563: EQUAL
54564: IFFALSE 54574
// sRanger := true ;
54566: LD_ADDR_EXP 96
54570: PUSH
54571: LD_INT 1
54573: ST_TO_ADDR
// if p3 = 116 then
54574: LD_VAR 0 3
54578: PUSH
54579: LD_INT 116
54581: EQUAL
54582: IFFALSE 54592
// sComputer := true ;
54584: LD_ADDR_EXP 97
54588: PUSH
54589: LD_INT 1
54591: ST_TO_ADDR
// if p3 = 117 then
54592: LD_VAR 0 3
54596: PUSH
54597: LD_INT 117
54599: EQUAL
54600: IFFALSE 54610
// s30 := true ;
54602: LD_ADDR_EXP 98
54606: PUSH
54607: LD_INT 1
54609: ST_TO_ADDR
// if p3 = 118 then
54610: LD_VAR 0 3
54614: PUSH
54615: LD_INT 118
54617: EQUAL
54618: IFFALSE 54628
// s60 := true ;
54620: LD_ADDR_EXP 99
54624: PUSH
54625: LD_INT 1
54627: ST_TO_ADDR
// end ; if p2 = hack_mode then
54628: LD_VAR 0 2
54632: PUSH
54633: LD_INT 101
54635: EQUAL
54636: IFFALSE 54764
// begin case p3 of 1 :
54638: LD_VAR 0 3
54642: PUSH
54643: LD_INT 1
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54651
54649: GO 54658
54651: POP
// hHackUnlimitedResources ; 2 :
54652: CALL 66911 0 0
54656: GO 54764
54658: LD_INT 2
54660: DOUBLE
54661: EQUAL
54662: IFTRUE 54666
54664: GO 54673
54666: POP
// hHackSetLevel10 ; 3 :
54667: CALL 67044 0 0
54671: GO 54764
54673: LD_INT 3
54675: DOUBLE
54676: EQUAL
54677: IFTRUE 54681
54679: GO 54688
54681: POP
// hHackSetLevel10YourUnits ; 4 :
54682: CALL 67129 0 0
54686: GO 54764
54688: LD_INT 4
54690: DOUBLE
54691: EQUAL
54692: IFTRUE 54696
54694: GO 54703
54696: POP
// hHackInvincible ; 5 :
54697: CALL 67577 0 0
54701: GO 54764
54703: LD_INT 5
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54711
54709: GO 54718
54711: POP
// hHackInvisible ; 6 :
54712: CALL 67688 0 0
54716: GO 54764
54718: LD_INT 6
54720: DOUBLE
54721: EQUAL
54722: IFTRUE 54726
54724: GO 54733
54726: POP
// hHackChangeYourSide ; 7 :
54727: CALL 67745 0 0
54731: GO 54764
54733: LD_INT 7
54735: DOUBLE
54736: EQUAL
54737: IFTRUE 54741
54739: GO 54748
54741: POP
// hHackChangeUnitSide ; 8 :
54742: CALL 67787 0 0
54746: GO 54764
54748: LD_INT 8
54750: DOUBLE
54751: EQUAL
54752: IFTRUE 54756
54754: GO 54763
54756: POP
// hHackFog ; end ;
54757: CALL 67888 0 0
54761: GO 54764
54763: POP
// end ; if p2 = game_save_mode then
54764: LD_VAR 0 2
54768: PUSH
54769: LD_INT 102
54771: EQUAL
54772: IFFALSE 54827
// begin if p3 = 1 then
54774: LD_VAR 0 3
54778: PUSH
54779: LD_INT 1
54781: EQUAL
54782: IFFALSE 54794
// globalGameSaveCounter := p4 ;
54784: LD_ADDR_EXP 42
54788: PUSH
54789: LD_VAR 0 4
54793: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54794: LD_VAR 0 3
54798: PUSH
54799: LD_INT 2
54801: EQUAL
54802: PUSH
54803: LD_EXP 42
54807: AND
54808: IFFALSE 54827
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54810: LD_STRING setGameSaveCounter(
54812: PUSH
54813: LD_EXP 42
54817: STR
54818: PUSH
54819: LD_STRING )
54821: STR
54822: PPUSH
54823: CALL_OW 559
// end ; end ;
54827: LD_VAR 0 7
54831: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54832: LD_INT 0
54834: PPUSH
// streamModeActive := false ;
54835: LD_ADDR_EXP 43
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// normalCounter := 36 ;
54843: LD_ADDR_EXP 44
54847: PUSH
54848: LD_INT 36
54850: ST_TO_ADDR
// hardcoreCounter := 18 ;
54851: LD_ADDR_EXP 45
54855: PUSH
54856: LD_INT 18
54858: ST_TO_ADDR
// sRocket := false ;
54859: LD_ADDR_EXP 48
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// sSpeed := false ;
54867: LD_ADDR_EXP 47
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// sEngine := false ;
54875: LD_ADDR_EXP 49
54879: PUSH
54880: LD_INT 0
54882: ST_TO_ADDR
// sSpec := false ;
54883: LD_ADDR_EXP 46
54887: PUSH
54888: LD_INT 0
54890: ST_TO_ADDR
// sLevel := false ;
54891: LD_ADDR_EXP 50
54895: PUSH
54896: LD_INT 0
54898: ST_TO_ADDR
// sArmoury := false ;
54899: LD_ADDR_EXP 51
54903: PUSH
54904: LD_INT 0
54906: ST_TO_ADDR
// sRadar := false ;
54907: LD_ADDR_EXP 52
54911: PUSH
54912: LD_INT 0
54914: ST_TO_ADDR
// sBunker := false ;
54915: LD_ADDR_EXP 53
54919: PUSH
54920: LD_INT 0
54922: ST_TO_ADDR
// sHack := false ;
54923: LD_ADDR_EXP 54
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// sFire := false ;
54931: LD_ADDR_EXP 55
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// sRefresh := false ;
54939: LD_ADDR_EXP 56
54943: PUSH
54944: LD_INT 0
54946: ST_TO_ADDR
// sExp := false ;
54947: LD_ADDR_EXP 57
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// sDepot := false ;
54955: LD_ADDR_EXP 58
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// sFlag := false ;
54963: LD_ADDR_EXP 59
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// sKamikadze := false ;
54971: LD_ADDR_EXP 67
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// sTroll := false ;
54979: LD_ADDR_EXP 68
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// sSlow := false ;
54987: LD_ADDR_EXP 69
54991: PUSH
54992: LD_INT 0
54994: ST_TO_ADDR
// sLack := false ;
54995: LD_ADDR_EXP 70
54999: PUSH
55000: LD_INT 0
55002: ST_TO_ADDR
// sTank := false ;
55003: LD_ADDR_EXP 72
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
// sRemote := false ;
55011: LD_ADDR_EXP 73
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// sPowell := false ;
55019: LD_ADDR_EXP 74
55023: PUSH
55024: LD_INT 0
55026: ST_TO_ADDR
// sTeleport := false ;
55027: LD_ADDR_EXP 77
55031: PUSH
55032: LD_INT 0
55034: ST_TO_ADDR
// sOilTower := false ;
55035: LD_ADDR_EXP 79
55039: PUSH
55040: LD_INT 0
55042: ST_TO_ADDR
// sShovel := false ;
55043: LD_ADDR_EXP 80
55047: PUSH
55048: LD_INT 0
55050: ST_TO_ADDR
// sSheik := false ;
55051: LD_ADDR_EXP 81
55055: PUSH
55056: LD_INT 0
55058: ST_TO_ADDR
// sEarthquake := false ;
55059: LD_ADDR_EXP 83
55063: PUSH
55064: LD_INT 0
55066: ST_TO_ADDR
// sAI := false ;
55067: LD_ADDR_EXP 84
55071: PUSH
55072: LD_INT 0
55074: ST_TO_ADDR
// sCargo := false ;
55075: LD_ADDR_EXP 87
55079: PUSH
55080: LD_INT 0
55082: ST_TO_ADDR
// sDLaser := false ;
55083: LD_ADDR_EXP 88
55087: PUSH
55088: LD_INT 0
55090: ST_TO_ADDR
// sExchange := false ;
55091: LD_ADDR_EXP 89
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
// sFac := false ;
55099: LD_ADDR_EXP 90
55103: PUSH
55104: LD_INT 0
55106: ST_TO_ADDR
// sPower := false ;
55107: LD_ADDR_EXP 91
55111: PUSH
55112: LD_INT 0
55114: ST_TO_ADDR
// sRandom := false ;
55115: LD_ADDR_EXP 92
55119: PUSH
55120: LD_INT 0
55122: ST_TO_ADDR
// sShield := false ;
55123: LD_ADDR_EXP 93
55127: PUSH
55128: LD_INT 0
55130: ST_TO_ADDR
// sTime := false ;
55131: LD_ADDR_EXP 94
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
// sTools := false ;
55139: LD_ADDR_EXP 95
55143: PUSH
55144: LD_INT 0
55146: ST_TO_ADDR
// sSold := false ;
55147: LD_ADDR_EXP 60
55151: PUSH
55152: LD_INT 0
55154: ST_TO_ADDR
// sDiff := false ;
55155: LD_ADDR_EXP 61
55159: PUSH
55160: LD_INT 0
55162: ST_TO_ADDR
// sFog := false ;
55163: LD_ADDR_EXP 64
55167: PUSH
55168: LD_INT 0
55170: ST_TO_ADDR
// sReset := false ;
55171: LD_ADDR_EXP 65
55175: PUSH
55176: LD_INT 0
55178: ST_TO_ADDR
// sSun := false ;
55179: LD_ADDR_EXP 66
55183: PUSH
55184: LD_INT 0
55186: ST_TO_ADDR
// sTiger := false ;
55187: LD_ADDR_EXP 62
55191: PUSH
55192: LD_INT 0
55194: ST_TO_ADDR
// sBomb := false ;
55195: LD_ADDR_EXP 63
55199: PUSH
55200: LD_INT 0
55202: ST_TO_ADDR
// sWound := false ;
55203: LD_ADDR_EXP 71
55207: PUSH
55208: LD_INT 0
55210: ST_TO_ADDR
// sBetray := false ;
55211: LD_ADDR_EXP 75
55215: PUSH
55216: LD_INT 0
55218: ST_TO_ADDR
// sContamin := false ;
55219: LD_ADDR_EXP 76
55223: PUSH
55224: LD_INT 0
55226: ST_TO_ADDR
// sOil := false ;
55227: LD_ADDR_EXP 78
55231: PUSH
55232: LD_INT 0
55234: ST_TO_ADDR
// sStu := false ;
55235: LD_ADDR_EXP 82
55239: PUSH
55240: LD_INT 0
55242: ST_TO_ADDR
// sBazooka := false ;
55243: LD_ADDR_EXP 85
55247: PUSH
55248: LD_INT 0
55250: ST_TO_ADDR
// sMortar := false ;
55251: LD_ADDR_EXP 86
55255: PUSH
55256: LD_INT 0
55258: ST_TO_ADDR
// sRanger := false ;
55259: LD_ADDR_EXP 96
55263: PUSH
55264: LD_INT 0
55266: ST_TO_ADDR
// sComputer := false ;
55267: LD_ADDR_EXP 97
55271: PUSH
55272: LD_INT 0
55274: ST_TO_ADDR
// s30 := false ;
55275: LD_ADDR_EXP 98
55279: PUSH
55280: LD_INT 0
55282: ST_TO_ADDR
// s60 := false ;
55283: LD_ADDR_EXP 99
55287: PUSH
55288: LD_INT 0
55290: ST_TO_ADDR
// end ;
55291: LD_VAR 0 1
55295: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55296: LD_INT 0
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
// result := [ ] ;
55305: LD_ADDR_VAR 0 2
55309: PUSH
55310: EMPTY
55311: ST_TO_ADDR
// if campaign_id = 1 then
55312: LD_OWVAR 69
55316: PUSH
55317: LD_INT 1
55319: EQUAL
55320: IFFALSE 58486
// begin case mission_number of 1 :
55322: LD_OWVAR 70
55326: PUSH
55327: LD_INT 1
55329: DOUBLE
55330: EQUAL
55331: IFTRUE 55335
55333: GO 55411
55335: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55336: LD_ADDR_VAR 0 2
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: LD_INT 11
55349: PUSH
55350: LD_INT 12
55352: PUSH
55353: LD_INT 15
55355: PUSH
55356: LD_INT 16
55358: PUSH
55359: LD_INT 22
55361: PUSH
55362: LD_INT 23
55364: PUSH
55365: LD_INT 26
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 101
55381: PUSH
55382: LD_INT 102
55384: PUSH
55385: LD_INT 106
55387: PUSH
55388: LD_INT 116
55390: PUSH
55391: LD_INT 117
55393: PUSH
55394: LD_INT 118
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: ST_TO_ADDR
55409: GO 58484
55411: LD_INT 2
55413: DOUBLE
55414: EQUAL
55415: IFTRUE 55419
55417: GO 55503
55419: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55420: LD_ADDR_VAR 0 2
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 11
55433: PUSH
55434: LD_INT 12
55436: PUSH
55437: LD_INT 15
55439: PUSH
55440: LD_INT 16
55442: PUSH
55443: LD_INT 22
55445: PUSH
55446: LD_INT 23
55448: PUSH
55449: LD_INT 26
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 101
55465: PUSH
55466: LD_INT 102
55468: PUSH
55469: LD_INT 105
55471: PUSH
55472: LD_INT 106
55474: PUSH
55475: LD_INT 108
55477: PUSH
55478: LD_INT 116
55480: PUSH
55481: LD_INT 117
55483: PUSH
55484: LD_INT 118
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: ST_TO_ADDR
55501: GO 58484
55503: LD_INT 3
55505: DOUBLE
55506: EQUAL
55507: IFTRUE 55511
55509: GO 55599
55511: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55512: LD_ADDR_VAR 0 2
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: LD_INT 11
55528: PUSH
55529: LD_INT 12
55531: PUSH
55532: LD_INT 15
55534: PUSH
55535: LD_INT 16
55537: PUSH
55538: LD_INT 22
55540: PUSH
55541: LD_INT 26
55543: PUSH
55544: LD_INT 36
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 101
55561: PUSH
55562: LD_INT 102
55564: PUSH
55565: LD_INT 105
55567: PUSH
55568: LD_INT 106
55570: PUSH
55571: LD_INT 108
55573: PUSH
55574: LD_INT 116
55576: PUSH
55577: LD_INT 117
55579: PUSH
55580: LD_INT 118
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: ST_TO_ADDR
55597: GO 58484
55599: LD_INT 4
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55607
55605: GO 55703
55607: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55608: LD_ADDR_VAR 0 2
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 4
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: LD_INT 8
55624: PUSH
55625: LD_INT 11
55627: PUSH
55628: LD_INT 12
55630: PUSH
55631: LD_INT 15
55633: PUSH
55634: LD_INT 16
55636: PUSH
55637: LD_INT 22
55639: PUSH
55640: LD_INT 23
55642: PUSH
55643: LD_INT 26
55645: PUSH
55646: LD_INT 36
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 101
55665: PUSH
55666: LD_INT 102
55668: PUSH
55669: LD_INT 105
55671: PUSH
55672: LD_INT 106
55674: PUSH
55675: LD_INT 108
55677: PUSH
55678: LD_INT 116
55680: PUSH
55681: LD_INT 117
55683: PUSH
55684: LD_INT 118
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: ST_TO_ADDR
55701: GO 58484
55703: LD_INT 5
55705: DOUBLE
55706: EQUAL
55707: IFTRUE 55711
55709: GO 55823
55711: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55712: LD_ADDR_VAR 0 2
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 4
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: LD_INT 6
55728: PUSH
55729: LD_INT 8
55731: PUSH
55732: LD_INT 11
55734: PUSH
55735: LD_INT 12
55737: PUSH
55738: LD_INT 15
55740: PUSH
55741: LD_INT 16
55743: PUSH
55744: LD_INT 22
55746: PUSH
55747: LD_INT 23
55749: PUSH
55750: LD_INT 25
55752: PUSH
55753: LD_INT 26
55755: PUSH
55756: LD_INT 36
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 101
55777: PUSH
55778: LD_INT 102
55780: PUSH
55781: LD_INT 105
55783: PUSH
55784: LD_INT 106
55786: PUSH
55787: LD_INT 108
55789: PUSH
55790: LD_INT 109
55792: PUSH
55793: LD_INT 112
55795: PUSH
55796: LD_INT 116
55798: PUSH
55799: LD_INT 117
55801: PUSH
55802: LD_INT 118
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: ST_TO_ADDR
55821: GO 58484
55823: LD_INT 6
55825: DOUBLE
55826: EQUAL
55827: IFTRUE 55831
55829: GO 55963
55831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55832: LD_ADDR_VAR 0 2
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: LD_INT 5
55845: PUSH
55846: LD_INT 6
55848: PUSH
55849: LD_INT 8
55851: PUSH
55852: LD_INT 11
55854: PUSH
55855: LD_INT 12
55857: PUSH
55858: LD_INT 15
55860: PUSH
55861: LD_INT 16
55863: PUSH
55864: LD_INT 20
55866: PUSH
55867: LD_INT 21
55869: PUSH
55870: LD_INT 22
55872: PUSH
55873: LD_INT 23
55875: PUSH
55876: LD_INT 25
55878: PUSH
55879: LD_INT 26
55881: PUSH
55882: LD_INT 30
55884: PUSH
55885: LD_INT 31
55887: PUSH
55888: LD_INT 32
55890: PUSH
55891: LD_INT 36
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 101
55917: PUSH
55918: LD_INT 102
55920: PUSH
55921: LD_INT 105
55923: PUSH
55924: LD_INT 106
55926: PUSH
55927: LD_INT 108
55929: PUSH
55930: LD_INT 109
55932: PUSH
55933: LD_INT 112
55935: PUSH
55936: LD_INT 116
55938: PUSH
55939: LD_INT 117
55941: PUSH
55942: LD_INT 118
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: ST_TO_ADDR
55961: GO 58484
55963: LD_INT 7
55965: DOUBLE
55966: EQUAL
55967: IFTRUE 55971
55969: GO 56083
55971: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55972: LD_ADDR_VAR 0 2
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 4
55982: PUSH
55983: LD_INT 5
55985: PUSH
55986: LD_INT 7
55988: PUSH
55989: LD_INT 11
55991: PUSH
55992: LD_INT 12
55994: PUSH
55995: LD_INT 15
55997: PUSH
55998: LD_INT 16
56000: PUSH
56001: LD_INT 20
56003: PUSH
56004: LD_INT 21
56006: PUSH
56007: LD_INT 22
56009: PUSH
56010: LD_INT 23
56012: PUSH
56013: LD_INT 25
56015: PUSH
56016: LD_INT 26
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 101
56037: PUSH
56038: LD_INT 102
56040: PUSH
56041: LD_INT 103
56043: PUSH
56044: LD_INT 105
56046: PUSH
56047: LD_INT 106
56049: PUSH
56050: LD_INT 108
56052: PUSH
56053: LD_INT 112
56055: PUSH
56056: LD_INT 116
56058: PUSH
56059: LD_INT 117
56061: PUSH
56062: LD_INT 118
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: ST_TO_ADDR
56081: GO 58484
56083: LD_INT 8
56085: DOUBLE
56086: EQUAL
56087: IFTRUE 56091
56089: GO 56231
56091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56092: LD_ADDR_VAR 0 2
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: LD_INT 5
56105: PUSH
56106: LD_INT 6
56108: PUSH
56109: LD_INT 7
56111: PUSH
56112: LD_INT 8
56114: PUSH
56115: LD_INT 11
56117: PUSH
56118: LD_INT 12
56120: PUSH
56121: LD_INT 15
56123: PUSH
56124: LD_INT 16
56126: PUSH
56127: LD_INT 20
56129: PUSH
56130: LD_INT 21
56132: PUSH
56133: LD_INT 22
56135: PUSH
56136: LD_INT 23
56138: PUSH
56139: LD_INT 25
56141: PUSH
56142: LD_INT 26
56144: PUSH
56145: LD_INT 30
56147: PUSH
56148: LD_INT 31
56150: PUSH
56151: LD_INT 32
56153: PUSH
56154: LD_INT 36
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 101
56181: PUSH
56182: LD_INT 102
56184: PUSH
56185: LD_INT 103
56187: PUSH
56188: LD_INT 105
56190: PUSH
56191: LD_INT 106
56193: PUSH
56194: LD_INT 108
56196: PUSH
56197: LD_INT 109
56199: PUSH
56200: LD_INT 112
56202: PUSH
56203: LD_INT 116
56205: PUSH
56206: LD_INT 117
56208: PUSH
56209: LD_INT 118
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: ST_TO_ADDR
56229: GO 58484
56231: LD_INT 9
56233: DOUBLE
56234: EQUAL
56235: IFTRUE 56239
56237: GO 56387
56239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56240: LD_ADDR_VAR 0 2
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: LD_INT 6
56256: PUSH
56257: LD_INT 7
56259: PUSH
56260: LD_INT 8
56262: PUSH
56263: LD_INT 11
56265: PUSH
56266: LD_INT 12
56268: PUSH
56269: LD_INT 15
56271: PUSH
56272: LD_INT 16
56274: PUSH
56275: LD_INT 20
56277: PUSH
56278: LD_INT 21
56280: PUSH
56281: LD_INT 22
56283: PUSH
56284: LD_INT 23
56286: PUSH
56287: LD_INT 25
56289: PUSH
56290: LD_INT 26
56292: PUSH
56293: LD_INT 28
56295: PUSH
56296: LD_INT 30
56298: PUSH
56299: LD_INT 31
56301: PUSH
56302: LD_INT 32
56304: PUSH
56305: LD_INT 36
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 101
56333: PUSH
56334: LD_INT 102
56336: PUSH
56337: LD_INT 103
56339: PUSH
56340: LD_INT 105
56342: PUSH
56343: LD_INT 106
56345: PUSH
56346: LD_INT 108
56348: PUSH
56349: LD_INT 109
56351: PUSH
56352: LD_INT 112
56354: PUSH
56355: LD_INT 114
56357: PUSH
56358: LD_INT 116
56360: PUSH
56361: LD_INT 117
56363: PUSH
56364: LD_INT 118
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: ST_TO_ADDR
56385: GO 58484
56387: LD_INT 10
56389: DOUBLE
56390: EQUAL
56391: IFTRUE 56395
56393: GO 56591
56395: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56396: LD_ADDR_VAR 0 2
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: LD_INT 6
56412: PUSH
56413: LD_INT 7
56415: PUSH
56416: LD_INT 8
56418: PUSH
56419: LD_INT 9
56421: PUSH
56422: LD_INT 10
56424: PUSH
56425: LD_INT 11
56427: PUSH
56428: LD_INT 12
56430: PUSH
56431: LD_INT 13
56433: PUSH
56434: LD_INT 14
56436: PUSH
56437: LD_INT 15
56439: PUSH
56440: LD_INT 16
56442: PUSH
56443: LD_INT 17
56445: PUSH
56446: LD_INT 18
56448: PUSH
56449: LD_INT 19
56451: PUSH
56452: LD_INT 20
56454: PUSH
56455: LD_INT 21
56457: PUSH
56458: LD_INT 22
56460: PUSH
56461: LD_INT 23
56463: PUSH
56464: LD_INT 24
56466: PUSH
56467: LD_INT 25
56469: PUSH
56470: LD_INT 26
56472: PUSH
56473: LD_INT 28
56475: PUSH
56476: LD_INT 30
56478: PUSH
56479: LD_INT 31
56481: PUSH
56482: LD_INT 32
56484: PUSH
56485: LD_INT 36
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 101
56521: PUSH
56522: LD_INT 102
56524: PUSH
56525: LD_INT 103
56527: PUSH
56528: LD_INT 104
56530: PUSH
56531: LD_INT 105
56533: PUSH
56534: LD_INT 106
56536: PUSH
56537: LD_INT 107
56539: PUSH
56540: LD_INT 108
56542: PUSH
56543: LD_INT 109
56545: PUSH
56546: LD_INT 110
56548: PUSH
56549: LD_INT 111
56551: PUSH
56552: LD_INT 112
56554: PUSH
56555: LD_INT 114
56557: PUSH
56558: LD_INT 116
56560: PUSH
56561: LD_INT 117
56563: PUSH
56564: LD_INT 118
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: ST_TO_ADDR
56589: GO 58484
56591: LD_INT 11
56593: DOUBLE
56594: EQUAL
56595: IFTRUE 56599
56597: GO 56803
56599: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56600: LD_ADDR_VAR 0 2
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: LD_INT 6
56619: PUSH
56620: LD_INT 7
56622: PUSH
56623: LD_INT 8
56625: PUSH
56626: LD_INT 9
56628: PUSH
56629: LD_INT 10
56631: PUSH
56632: LD_INT 11
56634: PUSH
56635: LD_INT 12
56637: PUSH
56638: LD_INT 13
56640: PUSH
56641: LD_INT 14
56643: PUSH
56644: LD_INT 15
56646: PUSH
56647: LD_INT 16
56649: PUSH
56650: LD_INT 17
56652: PUSH
56653: LD_INT 18
56655: PUSH
56656: LD_INT 19
56658: PUSH
56659: LD_INT 20
56661: PUSH
56662: LD_INT 21
56664: PUSH
56665: LD_INT 22
56667: PUSH
56668: LD_INT 23
56670: PUSH
56671: LD_INT 24
56673: PUSH
56674: LD_INT 25
56676: PUSH
56677: LD_INT 26
56679: PUSH
56680: LD_INT 28
56682: PUSH
56683: LD_INT 30
56685: PUSH
56686: LD_INT 31
56688: PUSH
56689: LD_INT 32
56691: PUSH
56692: LD_INT 34
56694: PUSH
56695: LD_INT 36
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 101
56733: PUSH
56734: LD_INT 102
56736: PUSH
56737: LD_INT 103
56739: PUSH
56740: LD_INT 104
56742: PUSH
56743: LD_INT 105
56745: PUSH
56746: LD_INT 106
56748: PUSH
56749: LD_INT 107
56751: PUSH
56752: LD_INT 108
56754: PUSH
56755: LD_INT 109
56757: PUSH
56758: LD_INT 110
56760: PUSH
56761: LD_INT 111
56763: PUSH
56764: LD_INT 112
56766: PUSH
56767: LD_INT 114
56769: PUSH
56770: LD_INT 116
56772: PUSH
56773: LD_INT 117
56775: PUSH
56776: LD_INT 118
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: ST_TO_ADDR
56801: GO 58484
56803: LD_INT 12
56805: DOUBLE
56806: EQUAL
56807: IFTRUE 56811
56809: GO 57031
56811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56812: LD_ADDR_VAR 0 2
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: LD_INT 6
56834: PUSH
56835: LD_INT 7
56837: PUSH
56838: LD_INT 8
56840: PUSH
56841: LD_INT 9
56843: PUSH
56844: LD_INT 10
56846: PUSH
56847: LD_INT 11
56849: PUSH
56850: LD_INT 12
56852: PUSH
56853: LD_INT 13
56855: PUSH
56856: LD_INT 14
56858: PUSH
56859: LD_INT 15
56861: PUSH
56862: LD_INT 16
56864: PUSH
56865: LD_INT 17
56867: PUSH
56868: LD_INT 18
56870: PUSH
56871: LD_INT 19
56873: PUSH
56874: LD_INT 20
56876: PUSH
56877: LD_INT 21
56879: PUSH
56880: LD_INT 22
56882: PUSH
56883: LD_INT 23
56885: PUSH
56886: LD_INT 24
56888: PUSH
56889: LD_INT 25
56891: PUSH
56892: LD_INT 26
56894: PUSH
56895: LD_INT 27
56897: PUSH
56898: LD_INT 28
56900: PUSH
56901: LD_INT 30
56903: PUSH
56904: LD_INT 31
56906: PUSH
56907: LD_INT 32
56909: PUSH
56910: LD_INT 33
56912: PUSH
56913: LD_INT 34
56915: PUSH
56916: LD_INT 36
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 101
56957: PUSH
56958: LD_INT 102
56960: PUSH
56961: LD_INT 103
56963: PUSH
56964: LD_INT 104
56966: PUSH
56967: LD_INT 105
56969: PUSH
56970: LD_INT 106
56972: PUSH
56973: LD_INT 107
56975: PUSH
56976: LD_INT 108
56978: PUSH
56979: LD_INT 109
56981: PUSH
56982: LD_INT 110
56984: PUSH
56985: LD_INT 111
56987: PUSH
56988: LD_INT 112
56990: PUSH
56991: LD_INT 113
56993: PUSH
56994: LD_INT 114
56996: PUSH
56997: LD_INT 116
56999: PUSH
57000: LD_INT 117
57002: PUSH
57003: LD_INT 118
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: ST_TO_ADDR
57029: GO 58484
57031: LD_INT 13
57033: DOUBLE
57034: EQUAL
57035: IFTRUE 57039
57037: GO 57247
57039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57040: LD_ADDR_VAR 0 2
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: LD_INT 5
57059: PUSH
57060: LD_INT 8
57062: PUSH
57063: LD_INT 9
57065: PUSH
57066: LD_INT 10
57068: PUSH
57069: LD_INT 11
57071: PUSH
57072: LD_INT 12
57074: PUSH
57075: LD_INT 14
57077: PUSH
57078: LD_INT 15
57080: PUSH
57081: LD_INT 16
57083: PUSH
57084: LD_INT 17
57086: PUSH
57087: LD_INT 18
57089: PUSH
57090: LD_INT 19
57092: PUSH
57093: LD_INT 20
57095: PUSH
57096: LD_INT 21
57098: PUSH
57099: LD_INT 22
57101: PUSH
57102: LD_INT 23
57104: PUSH
57105: LD_INT 24
57107: PUSH
57108: LD_INT 25
57110: PUSH
57111: LD_INT 26
57113: PUSH
57114: LD_INT 27
57116: PUSH
57117: LD_INT 28
57119: PUSH
57120: LD_INT 30
57122: PUSH
57123: LD_INT 31
57125: PUSH
57126: LD_INT 32
57128: PUSH
57129: LD_INT 33
57131: PUSH
57132: LD_INT 34
57134: PUSH
57135: LD_INT 36
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 101
57173: PUSH
57174: LD_INT 102
57176: PUSH
57177: LD_INT 103
57179: PUSH
57180: LD_INT 104
57182: PUSH
57183: LD_INT 105
57185: PUSH
57186: LD_INT 106
57188: PUSH
57189: LD_INT 107
57191: PUSH
57192: LD_INT 108
57194: PUSH
57195: LD_INT 109
57197: PUSH
57198: LD_INT 110
57200: PUSH
57201: LD_INT 111
57203: PUSH
57204: LD_INT 112
57206: PUSH
57207: LD_INT 113
57209: PUSH
57210: LD_INT 114
57212: PUSH
57213: LD_INT 116
57215: PUSH
57216: LD_INT 117
57218: PUSH
57219: LD_INT 118
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: ST_TO_ADDR
57245: GO 58484
57247: LD_INT 14
57249: DOUBLE
57250: EQUAL
57251: IFTRUE 57255
57253: GO 57479
57255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57256: LD_ADDR_VAR 0 2
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: LD_INT 5
57275: PUSH
57276: LD_INT 6
57278: PUSH
57279: LD_INT 7
57281: PUSH
57282: LD_INT 8
57284: PUSH
57285: LD_INT 9
57287: PUSH
57288: LD_INT 10
57290: PUSH
57291: LD_INT 11
57293: PUSH
57294: LD_INT 12
57296: PUSH
57297: LD_INT 13
57299: PUSH
57300: LD_INT 14
57302: PUSH
57303: LD_INT 15
57305: PUSH
57306: LD_INT 16
57308: PUSH
57309: LD_INT 17
57311: PUSH
57312: LD_INT 18
57314: PUSH
57315: LD_INT 19
57317: PUSH
57318: LD_INT 20
57320: PUSH
57321: LD_INT 21
57323: PUSH
57324: LD_INT 22
57326: PUSH
57327: LD_INT 23
57329: PUSH
57330: LD_INT 24
57332: PUSH
57333: LD_INT 25
57335: PUSH
57336: LD_INT 26
57338: PUSH
57339: LD_INT 27
57341: PUSH
57342: LD_INT 28
57344: PUSH
57345: LD_INT 29
57347: PUSH
57348: LD_INT 30
57350: PUSH
57351: LD_INT 31
57353: PUSH
57354: LD_INT 32
57356: PUSH
57357: LD_INT 33
57359: PUSH
57360: LD_INT 34
57362: PUSH
57363: LD_INT 36
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 101
57405: PUSH
57406: LD_INT 102
57408: PUSH
57409: LD_INT 103
57411: PUSH
57412: LD_INT 104
57414: PUSH
57415: LD_INT 105
57417: PUSH
57418: LD_INT 106
57420: PUSH
57421: LD_INT 107
57423: PUSH
57424: LD_INT 108
57426: PUSH
57427: LD_INT 109
57429: PUSH
57430: LD_INT 110
57432: PUSH
57433: LD_INT 111
57435: PUSH
57436: LD_INT 112
57438: PUSH
57439: LD_INT 113
57441: PUSH
57442: LD_INT 114
57444: PUSH
57445: LD_INT 116
57447: PUSH
57448: LD_INT 117
57450: PUSH
57451: LD_INT 118
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: ST_TO_ADDR
57477: GO 58484
57479: LD_INT 15
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57487
57485: GO 57711
57487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57488: LD_ADDR_VAR 0 2
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 4
57504: PUSH
57505: LD_INT 5
57507: PUSH
57508: LD_INT 6
57510: PUSH
57511: LD_INT 7
57513: PUSH
57514: LD_INT 8
57516: PUSH
57517: LD_INT 9
57519: PUSH
57520: LD_INT 10
57522: PUSH
57523: LD_INT 11
57525: PUSH
57526: LD_INT 12
57528: PUSH
57529: LD_INT 13
57531: PUSH
57532: LD_INT 14
57534: PUSH
57535: LD_INT 15
57537: PUSH
57538: LD_INT 16
57540: PUSH
57541: LD_INT 17
57543: PUSH
57544: LD_INT 18
57546: PUSH
57547: LD_INT 19
57549: PUSH
57550: LD_INT 20
57552: PUSH
57553: LD_INT 21
57555: PUSH
57556: LD_INT 22
57558: PUSH
57559: LD_INT 23
57561: PUSH
57562: LD_INT 24
57564: PUSH
57565: LD_INT 25
57567: PUSH
57568: LD_INT 26
57570: PUSH
57571: LD_INT 27
57573: PUSH
57574: LD_INT 28
57576: PUSH
57577: LD_INT 29
57579: PUSH
57580: LD_INT 30
57582: PUSH
57583: LD_INT 31
57585: PUSH
57586: LD_INT 32
57588: PUSH
57589: LD_INT 33
57591: PUSH
57592: LD_INT 34
57594: PUSH
57595: LD_INT 36
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 101
57637: PUSH
57638: LD_INT 102
57640: PUSH
57641: LD_INT 103
57643: PUSH
57644: LD_INT 104
57646: PUSH
57647: LD_INT 105
57649: PUSH
57650: LD_INT 106
57652: PUSH
57653: LD_INT 107
57655: PUSH
57656: LD_INT 108
57658: PUSH
57659: LD_INT 109
57661: PUSH
57662: LD_INT 110
57664: PUSH
57665: LD_INT 111
57667: PUSH
57668: LD_INT 112
57670: PUSH
57671: LD_INT 113
57673: PUSH
57674: LD_INT 114
57676: PUSH
57677: LD_INT 116
57679: PUSH
57680: LD_INT 117
57682: PUSH
57683: LD_INT 118
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: ST_TO_ADDR
57709: GO 58484
57711: LD_INT 16
57713: DOUBLE
57714: EQUAL
57715: IFTRUE 57719
57717: GO 57855
57719: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57720: LD_ADDR_VAR 0 2
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 4
57730: PUSH
57731: LD_INT 5
57733: PUSH
57734: LD_INT 7
57736: PUSH
57737: LD_INT 11
57739: PUSH
57740: LD_INT 12
57742: PUSH
57743: LD_INT 15
57745: PUSH
57746: LD_INT 16
57748: PUSH
57749: LD_INT 20
57751: PUSH
57752: LD_INT 21
57754: PUSH
57755: LD_INT 22
57757: PUSH
57758: LD_INT 23
57760: PUSH
57761: LD_INT 25
57763: PUSH
57764: LD_INT 26
57766: PUSH
57767: LD_INT 30
57769: PUSH
57770: LD_INT 31
57772: PUSH
57773: LD_INT 32
57775: PUSH
57776: LD_INT 33
57778: PUSH
57779: LD_INT 34
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 101
57805: PUSH
57806: LD_INT 102
57808: PUSH
57809: LD_INT 103
57811: PUSH
57812: LD_INT 106
57814: PUSH
57815: LD_INT 108
57817: PUSH
57818: LD_INT 112
57820: PUSH
57821: LD_INT 113
57823: PUSH
57824: LD_INT 114
57826: PUSH
57827: LD_INT 116
57829: PUSH
57830: LD_INT 117
57832: PUSH
57833: LD_INT 118
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: ST_TO_ADDR
57853: GO 58484
57855: LD_INT 17
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57863
57861: GO 58087
57863: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57864: LD_ADDR_VAR 0 2
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: LD_INT 4
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: LD_INT 6
57886: PUSH
57887: LD_INT 7
57889: PUSH
57890: LD_INT 8
57892: PUSH
57893: LD_INT 9
57895: PUSH
57896: LD_INT 10
57898: PUSH
57899: LD_INT 11
57901: PUSH
57902: LD_INT 12
57904: PUSH
57905: LD_INT 13
57907: PUSH
57908: LD_INT 14
57910: PUSH
57911: LD_INT 15
57913: PUSH
57914: LD_INT 16
57916: PUSH
57917: LD_INT 17
57919: PUSH
57920: LD_INT 18
57922: PUSH
57923: LD_INT 19
57925: PUSH
57926: LD_INT 20
57928: PUSH
57929: LD_INT 21
57931: PUSH
57932: LD_INT 22
57934: PUSH
57935: LD_INT 23
57937: PUSH
57938: LD_INT 24
57940: PUSH
57941: LD_INT 25
57943: PUSH
57944: LD_INT 26
57946: PUSH
57947: LD_INT 27
57949: PUSH
57950: LD_INT 28
57952: PUSH
57953: LD_INT 29
57955: PUSH
57956: LD_INT 30
57958: PUSH
57959: LD_INT 31
57961: PUSH
57962: LD_INT 32
57964: PUSH
57965: LD_INT 33
57967: PUSH
57968: LD_INT 34
57970: PUSH
57971: LD_INT 36
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 101
58013: PUSH
58014: LD_INT 102
58016: PUSH
58017: LD_INT 103
58019: PUSH
58020: LD_INT 104
58022: PUSH
58023: LD_INT 105
58025: PUSH
58026: LD_INT 106
58028: PUSH
58029: LD_INT 107
58031: PUSH
58032: LD_INT 108
58034: PUSH
58035: LD_INT 109
58037: PUSH
58038: LD_INT 110
58040: PUSH
58041: LD_INT 111
58043: PUSH
58044: LD_INT 112
58046: PUSH
58047: LD_INT 113
58049: PUSH
58050: LD_INT 114
58052: PUSH
58053: LD_INT 116
58055: PUSH
58056: LD_INT 117
58058: PUSH
58059: LD_INT 118
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: ST_TO_ADDR
58085: GO 58484
58087: LD_INT 18
58089: DOUBLE
58090: EQUAL
58091: IFTRUE 58095
58093: GO 58243
58095: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58096: LD_ADDR_VAR 0 2
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: LD_INT 7
58112: PUSH
58113: LD_INT 11
58115: PUSH
58116: LD_INT 12
58118: PUSH
58119: LD_INT 15
58121: PUSH
58122: LD_INT 16
58124: PUSH
58125: LD_INT 20
58127: PUSH
58128: LD_INT 21
58130: PUSH
58131: LD_INT 22
58133: PUSH
58134: LD_INT 23
58136: PUSH
58137: LD_INT 25
58139: PUSH
58140: LD_INT 26
58142: PUSH
58143: LD_INT 30
58145: PUSH
58146: LD_INT 31
58148: PUSH
58149: LD_INT 32
58151: PUSH
58152: LD_INT 33
58154: PUSH
58155: LD_INT 34
58157: PUSH
58158: LD_INT 35
58160: PUSH
58161: LD_INT 36
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 101
58189: PUSH
58190: LD_INT 102
58192: PUSH
58193: LD_INT 103
58195: PUSH
58196: LD_INT 106
58198: PUSH
58199: LD_INT 108
58201: PUSH
58202: LD_INT 112
58204: PUSH
58205: LD_INT 113
58207: PUSH
58208: LD_INT 114
58210: PUSH
58211: LD_INT 115
58213: PUSH
58214: LD_INT 116
58216: PUSH
58217: LD_INT 117
58219: PUSH
58220: LD_INT 118
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: ST_TO_ADDR
58241: GO 58484
58243: LD_INT 19
58245: DOUBLE
58246: EQUAL
58247: IFTRUE 58251
58249: GO 58483
58251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58252: LD_ADDR_VAR 0 2
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: LD_INT 6
58274: PUSH
58275: LD_INT 7
58277: PUSH
58278: LD_INT 8
58280: PUSH
58281: LD_INT 9
58283: PUSH
58284: LD_INT 10
58286: PUSH
58287: LD_INT 11
58289: PUSH
58290: LD_INT 12
58292: PUSH
58293: LD_INT 13
58295: PUSH
58296: LD_INT 14
58298: PUSH
58299: LD_INT 15
58301: PUSH
58302: LD_INT 16
58304: PUSH
58305: LD_INT 17
58307: PUSH
58308: LD_INT 18
58310: PUSH
58311: LD_INT 19
58313: PUSH
58314: LD_INT 20
58316: PUSH
58317: LD_INT 21
58319: PUSH
58320: LD_INT 22
58322: PUSH
58323: LD_INT 23
58325: PUSH
58326: LD_INT 24
58328: PUSH
58329: LD_INT 25
58331: PUSH
58332: LD_INT 26
58334: PUSH
58335: LD_INT 27
58337: PUSH
58338: LD_INT 28
58340: PUSH
58341: LD_INT 29
58343: PUSH
58344: LD_INT 30
58346: PUSH
58347: LD_INT 31
58349: PUSH
58350: LD_INT 32
58352: PUSH
58353: LD_INT 33
58355: PUSH
58356: LD_INT 34
58358: PUSH
58359: LD_INT 35
58361: PUSH
58362: LD_INT 36
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 101
58405: PUSH
58406: LD_INT 102
58408: PUSH
58409: LD_INT 103
58411: PUSH
58412: LD_INT 104
58414: PUSH
58415: LD_INT 105
58417: PUSH
58418: LD_INT 106
58420: PUSH
58421: LD_INT 107
58423: PUSH
58424: LD_INT 108
58426: PUSH
58427: LD_INT 109
58429: PUSH
58430: LD_INT 110
58432: PUSH
58433: LD_INT 111
58435: PUSH
58436: LD_INT 112
58438: PUSH
58439: LD_INT 113
58441: PUSH
58442: LD_INT 114
58444: PUSH
58445: LD_INT 115
58447: PUSH
58448: LD_INT 116
58450: PUSH
58451: LD_INT 117
58453: PUSH
58454: LD_INT 118
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: ST_TO_ADDR
58481: GO 58484
58483: POP
// end else
58484: GO 58715
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58486: LD_ADDR_VAR 0 2
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: LD_INT 4
58502: PUSH
58503: LD_INT 5
58505: PUSH
58506: LD_INT 6
58508: PUSH
58509: LD_INT 7
58511: PUSH
58512: LD_INT 8
58514: PUSH
58515: LD_INT 9
58517: PUSH
58518: LD_INT 10
58520: PUSH
58521: LD_INT 11
58523: PUSH
58524: LD_INT 12
58526: PUSH
58527: LD_INT 13
58529: PUSH
58530: LD_INT 14
58532: PUSH
58533: LD_INT 15
58535: PUSH
58536: LD_INT 16
58538: PUSH
58539: LD_INT 17
58541: PUSH
58542: LD_INT 18
58544: PUSH
58545: LD_INT 19
58547: PUSH
58548: LD_INT 20
58550: PUSH
58551: LD_INT 21
58553: PUSH
58554: LD_INT 22
58556: PUSH
58557: LD_INT 23
58559: PUSH
58560: LD_INT 24
58562: PUSH
58563: LD_INT 25
58565: PUSH
58566: LD_INT 26
58568: PUSH
58569: LD_INT 27
58571: PUSH
58572: LD_INT 28
58574: PUSH
58575: LD_INT 29
58577: PUSH
58578: LD_INT 30
58580: PUSH
58581: LD_INT 31
58583: PUSH
58584: LD_INT 32
58586: PUSH
58587: LD_INT 33
58589: PUSH
58590: LD_INT 34
58592: PUSH
58593: LD_INT 35
58595: PUSH
58596: LD_INT 36
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 101
58639: PUSH
58640: LD_INT 102
58642: PUSH
58643: LD_INT 103
58645: PUSH
58646: LD_INT 104
58648: PUSH
58649: LD_INT 105
58651: PUSH
58652: LD_INT 106
58654: PUSH
58655: LD_INT 107
58657: PUSH
58658: LD_INT 108
58660: PUSH
58661: LD_INT 109
58663: PUSH
58664: LD_INT 110
58666: PUSH
58667: LD_INT 111
58669: PUSH
58670: LD_INT 112
58672: PUSH
58673: LD_INT 113
58675: PUSH
58676: LD_INT 114
58678: PUSH
58679: LD_INT 115
58681: PUSH
58682: LD_INT 116
58684: PUSH
58685: LD_INT 117
58687: PUSH
58688: LD_INT 118
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// if result then
58715: LD_VAR 0 2
58719: IFFALSE 59505
// begin normal :=  ;
58721: LD_ADDR_VAR 0 5
58725: PUSH
58726: LD_STRING 
58728: ST_TO_ADDR
// hardcore :=  ;
58729: LD_ADDR_VAR 0 6
58733: PUSH
58734: LD_STRING 
58736: ST_TO_ADDR
// active :=  ;
58737: LD_ADDR_VAR 0 7
58741: PUSH
58742: LD_STRING 
58744: ST_TO_ADDR
// for i = 1 to normalCounter do
58745: LD_ADDR_VAR 0 8
58749: PUSH
58750: DOUBLE
58751: LD_INT 1
58753: DEC
58754: ST_TO_ADDR
58755: LD_EXP 44
58759: PUSH
58760: FOR_TO
58761: IFFALSE 58862
// begin tmp := 0 ;
58763: LD_ADDR_VAR 0 3
58767: PUSH
58768: LD_STRING 0
58770: ST_TO_ADDR
// if result [ 1 ] then
58771: LD_VAR 0 2
58775: PUSH
58776: LD_INT 1
58778: ARRAY
58779: IFFALSE 58844
// if result [ 1 ] [ 1 ] = i then
58781: LD_VAR 0 2
58785: PUSH
58786: LD_INT 1
58788: ARRAY
58789: PUSH
58790: LD_INT 1
58792: ARRAY
58793: PUSH
58794: LD_VAR 0 8
58798: EQUAL
58799: IFFALSE 58844
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58801: LD_ADDR_VAR 0 2
58805: PUSH
58806: LD_VAR 0 2
58810: PPUSH
58811: LD_INT 1
58813: PPUSH
58814: LD_VAR 0 2
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PPUSH
58823: LD_INT 1
58825: PPUSH
58826: CALL_OW 3
58830: PPUSH
58831: CALL_OW 1
58835: ST_TO_ADDR
// tmp := 1 ;
58836: LD_ADDR_VAR 0 3
58840: PUSH
58841: LD_STRING 1
58843: ST_TO_ADDR
// end ; normal := normal & tmp ;
58844: LD_ADDR_VAR 0 5
58848: PUSH
58849: LD_VAR 0 5
58853: PUSH
58854: LD_VAR 0 3
58858: STR
58859: ST_TO_ADDR
// end ;
58860: GO 58760
58862: POP
58863: POP
// for i = 1 to hardcoreCounter do
58864: LD_ADDR_VAR 0 8
58868: PUSH
58869: DOUBLE
58870: LD_INT 1
58872: DEC
58873: ST_TO_ADDR
58874: LD_EXP 45
58878: PUSH
58879: FOR_TO
58880: IFFALSE 58985
// begin tmp := 0 ;
58882: LD_ADDR_VAR 0 3
58886: PUSH
58887: LD_STRING 0
58889: ST_TO_ADDR
// if result [ 2 ] then
58890: LD_VAR 0 2
58894: PUSH
58895: LD_INT 2
58897: ARRAY
58898: IFFALSE 58967
// if result [ 2 ] [ 1 ] = 100 + i then
58900: LD_VAR 0 2
58904: PUSH
58905: LD_INT 2
58907: ARRAY
58908: PUSH
58909: LD_INT 1
58911: ARRAY
58912: PUSH
58913: LD_INT 100
58915: PUSH
58916: LD_VAR 0 8
58920: PLUS
58921: EQUAL
58922: IFFALSE 58967
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58924: LD_ADDR_VAR 0 2
58928: PUSH
58929: LD_VAR 0 2
58933: PPUSH
58934: LD_INT 2
58936: PPUSH
58937: LD_VAR 0 2
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: PPUSH
58946: LD_INT 1
58948: PPUSH
58949: CALL_OW 3
58953: PPUSH
58954: CALL_OW 1
58958: ST_TO_ADDR
// tmp := 1 ;
58959: LD_ADDR_VAR 0 3
58963: PUSH
58964: LD_STRING 1
58966: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58967: LD_ADDR_VAR 0 6
58971: PUSH
58972: LD_VAR 0 6
58976: PUSH
58977: LD_VAR 0 3
58981: STR
58982: ST_TO_ADDR
// end ;
58983: GO 58879
58985: POP
58986: POP
// if isGameLoad then
58987: LD_VAR 0 1
58991: IFFALSE 59466
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58993: LD_ADDR_VAR 0 4
58997: PUSH
58998: LD_EXP 48
59002: PUSH
59003: LD_EXP 47
59007: PUSH
59008: LD_EXP 49
59012: PUSH
59013: LD_EXP 46
59017: PUSH
59018: LD_EXP 50
59022: PUSH
59023: LD_EXP 51
59027: PUSH
59028: LD_EXP 52
59032: PUSH
59033: LD_EXP 53
59037: PUSH
59038: LD_EXP 54
59042: PUSH
59043: LD_EXP 55
59047: PUSH
59048: LD_EXP 56
59052: PUSH
59053: LD_EXP 57
59057: PUSH
59058: LD_EXP 58
59062: PUSH
59063: LD_EXP 59
59067: PUSH
59068: LD_EXP 67
59072: PUSH
59073: LD_EXP 68
59077: PUSH
59078: LD_EXP 69
59082: PUSH
59083: LD_EXP 70
59087: PUSH
59088: LD_EXP 72
59092: PUSH
59093: LD_EXP 73
59097: PUSH
59098: LD_EXP 74
59102: PUSH
59103: LD_EXP 77
59107: PUSH
59108: LD_EXP 79
59112: PUSH
59113: LD_EXP 80
59117: PUSH
59118: LD_EXP 81
59122: PUSH
59123: LD_EXP 83
59127: PUSH
59128: LD_EXP 84
59132: PUSH
59133: LD_EXP 87
59137: PUSH
59138: LD_EXP 88
59142: PUSH
59143: LD_EXP 89
59147: PUSH
59148: LD_EXP 90
59152: PUSH
59153: LD_EXP 91
59157: PUSH
59158: LD_EXP 92
59162: PUSH
59163: LD_EXP 93
59167: PUSH
59168: LD_EXP 94
59172: PUSH
59173: LD_EXP 95
59177: PUSH
59178: LD_EXP 60
59182: PUSH
59183: LD_EXP 61
59187: PUSH
59188: LD_EXP 64
59192: PUSH
59193: LD_EXP 65
59197: PUSH
59198: LD_EXP 66
59202: PUSH
59203: LD_EXP 62
59207: PUSH
59208: LD_EXP 63
59212: PUSH
59213: LD_EXP 71
59217: PUSH
59218: LD_EXP 75
59222: PUSH
59223: LD_EXP 76
59227: PUSH
59228: LD_EXP 78
59232: PUSH
59233: LD_EXP 82
59237: PUSH
59238: LD_EXP 85
59242: PUSH
59243: LD_EXP 86
59247: PUSH
59248: LD_EXP 96
59252: PUSH
59253: LD_EXP 97
59257: PUSH
59258: LD_EXP 98
59262: PUSH
59263: LD_EXP 99
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// tmp :=  ;
59324: LD_ADDR_VAR 0 3
59328: PUSH
59329: LD_STRING 
59331: ST_TO_ADDR
// for i = 1 to normalCounter do
59332: LD_ADDR_VAR 0 8
59336: PUSH
59337: DOUBLE
59338: LD_INT 1
59340: DEC
59341: ST_TO_ADDR
59342: LD_EXP 44
59346: PUSH
59347: FOR_TO
59348: IFFALSE 59384
// begin if flags [ i ] then
59350: LD_VAR 0 4
59354: PUSH
59355: LD_VAR 0 8
59359: ARRAY
59360: IFFALSE 59382
// tmp := tmp & i & ; ;
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: LD_VAR 0 3
59371: PUSH
59372: LD_VAR 0 8
59376: STR
59377: PUSH
59378: LD_STRING ;
59380: STR
59381: ST_TO_ADDR
// end ;
59382: GO 59347
59384: POP
59385: POP
// for i = 1 to hardcoreCounter do
59386: LD_ADDR_VAR 0 8
59390: PUSH
59391: DOUBLE
59392: LD_INT 1
59394: DEC
59395: ST_TO_ADDR
59396: LD_EXP 45
59400: PUSH
59401: FOR_TO
59402: IFFALSE 59448
// begin if flags [ normalCounter + i ] then
59404: LD_VAR 0 4
59408: PUSH
59409: LD_EXP 44
59413: PUSH
59414: LD_VAR 0 8
59418: PLUS
59419: ARRAY
59420: IFFALSE 59446
// tmp := tmp & ( 100 + i ) & ; ;
59422: LD_ADDR_VAR 0 3
59426: PUSH
59427: LD_VAR 0 3
59431: PUSH
59432: LD_INT 100
59434: PUSH
59435: LD_VAR 0 8
59439: PLUS
59440: STR
59441: PUSH
59442: LD_STRING ;
59444: STR
59445: ST_TO_ADDR
// end ;
59446: GO 59401
59448: POP
59449: POP
// if tmp then
59450: LD_VAR 0 3
59454: IFFALSE 59466
// active := tmp ;
59456: LD_ADDR_VAR 0 7
59460: PUSH
59461: LD_VAR 0 3
59465: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59466: LD_STRING getStreamItemsFromMission("
59468: PUSH
59469: LD_VAR 0 5
59473: STR
59474: PUSH
59475: LD_STRING ","
59477: STR
59478: PUSH
59479: LD_VAR 0 6
59483: STR
59484: PUSH
59485: LD_STRING ","
59487: STR
59488: PUSH
59489: LD_VAR 0 7
59493: STR
59494: PUSH
59495: LD_STRING ")
59497: STR
59498: PPUSH
59499: CALL_OW 559
// end else
59503: GO 59512
// ToLua ( getStreamItemsFromMission("","","") ) ;
59505: LD_STRING getStreamItemsFromMission("","","")
59507: PPUSH
59508: CALL_OW 559
// end ;
59512: LD_VAR 0 2
59516: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59517: LD_EXP 43
59521: PUSH
59522: LD_EXP 48
59526: AND
59527: IFFALSE 59651
59529: GO 59531
59531: DISABLE
59532: LD_INT 0
59534: PPUSH
59535: PPUSH
// begin enable ;
59536: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59537: LD_ADDR_VAR 0 2
59541: PUSH
59542: LD_INT 22
59544: PUSH
59545: LD_OWVAR 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 34
59559: PUSH
59560: LD_INT 7
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 34
59569: PUSH
59570: LD_INT 45
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 34
59579: PUSH
59580: LD_INT 28
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 34
59589: PUSH
59590: LD_INT 47
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PPUSH
59608: CALL_OW 69
59612: ST_TO_ADDR
// if not tmp then
59613: LD_VAR 0 2
59617: NOT
59618: IFFALSE 59622
// exit ;
59620: GO 59651
// for i in tmp do
59622: LD_ADDR_VAR 0 1
59626: PUSH
59627: LD_VAR 0 2
59631: PUSH
59632: FOR_IN
59633: IFFALSE 59649
// begin SetLives ( i , 0 ) ;
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_INT 0
59642: PPUSH
59643: CALL_OW 234
// end ;
59647: GO 59632
59649: POP
59650: POP
// end ;
59651: PPOPN 2
59653: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59654: LD_EXP 43
59658: PUSH
59659: LD_EXP 49
59663: AND
59664: IFFALSE 59748
59666: GO 59668
59668: DISABLE
59669: LD_INT 0
59671: PPUSH
59672: PPUSH
// begin enable ;
59673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59674: LD_ADDR_VAR 0 2
59678: PUSH
59679: LD_INT 22
59681: PUSH
59682: LD_OWVAR 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 32
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PPUSH
59705: CALL_OW 69
59709: ST_TO_ADDR
// if not tmp then
59710: LD_VAR 0 2
59714: NOT
59715: IFFALSE 59719
// exit ;
59717: GO 59748
// for i in tmp do
59719: LD_ADDR_VAR 0 1
59723: PUSH
59724: LD_VAR 0 2
59728: PUSH
59729: FOR_IN
59730: IFFALSE 59746
// begin SetLives ( i , 0 ) ;
59732: LD_VAR 0 1
59736: PPUSH
59737: LD_INT 0
59739: PPUSH
59740: CALL_OW 234
// end ;
59744: GO 59729
59746: POP
59747: POP
// end ;
59748: PPOPN 2
59750: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59751: LD_EXP 43
59755: PUSH
59756: LD_EXP 46
59760: AND
59761: IFFALSE 59854
59763: GO 59765
59765: DISABLE
59766: LD_INT 0
59768: PPUSH
// begin enable ;
59769: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59770: LD_ADDR_VAR 0 1
59774: PUSH
59775: LD_INT 22
59777: PUSH
59778: LD_OWVAR 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 25
59792: PUSH
59793: LD_INT 5
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 25
59802: PUSH
59803: LD_INT 9
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 25
59812: PUSH
59813: LD_INT 8
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PPUSH
59830: CALL_OW 69
59834: PUSH
59835: FOR_IN
59836: IFFALSE 59852
// begin SetClass ( i , 1 ) ;
59838: LD_VAR 0 1
59842: PPUSH
59843: LD_INT 1
59845: PPUSH
59846: CALL_OW 336
// end ;
59850: GO 59835
59852: POP
59853: POP
// end ;
59854: PPOPN 1
59856: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59857: LD_EXP 43
59861: PUSH
59862: LD_EXP 47
59866: AND
59867: PUSH
59868: LD_OWVAR 65
59872: PUSH
59873: LD_INT 7
59875: LESS
59876: AND
59877: IFFALSE 59891
59879: GO 59881
59881: DISABLE
// begin enable ;
59882: ENABLE
// game_speed := 7 ;
59883: LD_ADDR_OWVAR 65
59887: PUSH
59888: LD_INT 7
59890: ST_TO_ADDR
// end ;
59891: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59892: LD_EXP 43
59896: PUSH
59897: LD_EXP 50
59901: AND
59902: IFFALSE 60104
59904: GO 59906
59906: DISABLE
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
59911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59912: LD_ADDR_VAR 0 3
59916: PUSH
59917: LD_INT 81
59919: PUSH
59920: LD_OWVAR 2
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 21
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PPUSH
59943: CALL_OW 69
59947: ST_TO_ADDR
// if not tmp then
59948: LD_VAR 0 3
59952: NOT
59953: IFFALSE 59957
// exit ;
59955: GO 60104
// if tmp > 5 then
59957: LD_VAR 0 3
59961: PUSH
59962: LD_INT 5
59964: GREATER
59965: IFFALSE 59977
// k := 5 else
59967: LD_ADDR_VAR 0 2
59971: PUSH
59972: LD_INT 5
59974: ST_TO_ADDR
59975: GO 59987
// k := tmp ;
59977: LD_ADDR_VAR 0 2
59981: PUSH
59982: LD_VAR 0 3
59986: ST_TO_ADDR
// for i := 1 to k do
59987: LD_ADDR_VAR 0 1
59991: PUSH
59992: DOUBLE
59993: LD_INT 1
59995: DEC
59996: ST_TO_ADDR
59997: LD_VAR 0 2
60001: PUSH
60002: FOR_TO
60003: IFFALSE 60102
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60005: LD_VAR 0 3
60009: PUSH
60010: LD_VAR 0 1
60014: ARRAY
60015: PPUSH
60016: LD_VAR 0 1
60020: PUSH
60021: LD_INT 4
60023: MOD
60024: PUSH
60025: LD_INT 1
60027: PLUS
60028: PPUSH
60029: CALL_OW 259
60033: PUSH
60034: LD_INT 10
60036: LESS
60037: IFFALSE 60100
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60039: LD_VAR 0 3
60043: PUSH
60044: LD_VAR 0 1
60048: ARRAY
60049: PPUSH
60050: LD_VAR 0 1
60054: PUSH
60055: LD_INT 4
60057: MOD
60058: PUSH
60059: LD_INT 1
60061: PLUS
60062: PPUSH
60063: LD_VAR 0 3
60067: PUSH
60068: LD_VAR 0 1
60072: ARRAY
60073: PPUSH
60074: LD_VAR 0 1
60078: PUSH
60079: LD_INT 4
60081: MOD
60082: PUSH
60083: LD_INT 1
60085: PLUS
60086: PPUSH
60087: CALL_OW 259
60091: PUSH
60092: LD_INT 1
60094: PLUS
60095: PPUSH
60096: CALL_OW 237
60100: GO 60002
60102: POP
60103: POP
// end ;
60104: PPOPN 3
60106: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60107: LD_EXP 43
60111: PUSH
60112: LD_EXP 51
60116: AND
60117: IFFALSE 60137
60119: GO 60121
60121: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60122: LD_INT 4
60124: PPUSH
60125: LD_OWVAR 2
60129: PPUSH
60130: LD_INT 0
60132: PPUSH
60133: CALL_OW 324
60137: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60138: LD_EXP 43
60142: PUSH
60143: LD_EXP 80
60147: AND
60148: IFFALSE 60168
60150: GO 60152
60152: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60153: LD_INT 19
60155: PPUSH
60156: LD_OWVAR 2
60160: PPUSH
60161: LD_INT 0
60163: PPUSH
60164: CALL_OW 324
60168: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60169: LD_EXP 43
60173: PUSH
60174: LD_EXP 52
60178: AND
60179: IFFALSE 60281
60181: GO 60183
60183: DISABLE
60184: LD_INT 0
60186: PPUSH
60187: PPUSH
// begin enable ;
60188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60189: LD_ADDR_VAR 0 2
60193: PUSH
60194: LD_INT 22
60196: PUSH
60197: LD_OWVAR 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 34
60211: PUSH
60212: LD_INT 11
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 34
60221: PUSH
60222: LD_INT 30
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PPUSH
60238: CALL_OW 69
60242: ST_TO_ADDR
// if not tmp then
60243: LD_VAR 0 2
60247: NOT
60248: IFFALSE 60252
// exit ;
60250: GO 60281
// for i in tmp do
60252: LD_ADDR_VAR 0 1
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: FOR_IN
60263: IFFALSE 60279
// begin SetLives ( i , 0 ) ;
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_INT 0
60272: PPUSH
60273: CALL_OW 234
// end ;
60277: GO 60262
60279: POP
60280: POP
// end ;
60281: PPOPN 2
60283: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60284: LD_EXP 43
60288: PUSH
60289: LD_EXP 53
60293: AND
60294: IFFALSE 60314
60296: GO 60298
60298: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60299: LD_INT 32
60301: PPUSH
60302: LD_OWVAR 2
60306: PPUSH
60307: LD_INT 0
60309: PPUSH
60310: CALL_OW 324
60314: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60315: LD_EXP 43
60319: PUSH
60320: LD_EXP 54
60324: AND
60325: IFFALSE 60506
60327: GO 60329
60329: DISABLE
60330: LD_INT 0
60332: PPUSH
60333: PPUSH
60334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_INT 22
60342: PUSH
60343: LD_OWVAR 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 33
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PPUSH
60366: CALL_OW 69
60370: ST_TO_ADDR
// if not tmp then
60371: LD_VAR 0 2
60375: NOT
60376: IFFALSE 60380
// exit ;
60378: GO 60506
// side := 0 ;
60380: LD_ADDR_VAR 0 3
60384: PUSH
60385: LD_INT 0
60387: ST_TO_ADDR
// for i := 1 to 8 do
60388: LD_ADDR_VAR 0 1
60392: PUSH
60393: DOUBLE
60394: LD_INT 1
60396: DEC
60397: ST_TO_ADDR
60398: LD_INT 8
60400: PUSH
60401: FOR_TO
60402: IFFALSE 60450
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60404: LD_OWVAR 2
60408: PUSH
60409: LD_VAR 0 1
60413: NONEQUAL
60414: PUSH
60415: LD_OWVAR 2
60419: PPUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: CALL_OW 81
60429: PUSH
60430: LD_INT 2
60432: EQUAL
60433: AND
60434: IFFALSE 60448
// begin side := i ;
60436: LD_ADDR_VAR 0 3
60440: PUSH
60441: LD_VAR 0 1
60445: ST_TO_ADDR
// break ;
60446: GO 60450
// end ;
60448: GO 60401
60450: POP
60451: POP
// if not side then
60452: LD_VAR 0 3
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60506
// for i := 1 to tmp do
60461: LD_ADDR_VAR 0 1
60465: PUSH
60466: DOUBLE
60467: LD_INT 1
60469: DEC
60470: ST_TO_ADDR
60471: LD_VAR 0 2
60475: PUSH
60476: FOR_TO
60477: IFFALSE 60504
// if Prob ( 60 ) then
60479: LD_INT 60
60481: PPUSH
60482: CALL_OW 13
60486: IFFALSE 60502
// SetSide ( i , side ) ;
60488: LD_VAR 0 1
60492: PPUSH
60493: LD_VAR 0 3
60497: PPUSH
60498: CALL_OW 235
60502: GO 60476
60504: POP
60505: POP
// end ;
60506: PPOPN 3
60508: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60509: LD_EXP 43
60513: PUSH
60514: LD_EXP 56
60518: AND
60519: IFFALSE 60638
60521: GO 60523
60523: DISABLE
60524: LD_INT 0
60526: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60527: LD_ADDR_VAR 0 1
60531: PUSH
60532: LD_INT 22
60534: PUSH
60535: LD_OWVAR 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 21
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: LD_INT 23
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: PPUSH
60576: CALL_OW 69
60580: PUSH
60581: FOR_IN
60582: IFFALSE 60636
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60584: LD_VAR 0 1
60588: PPUSH
60589: CALL_OW 257
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: LD_INT 4
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: IN
60612: IFFALSE 60634
// SetClass ( un , rand ( 1 , 4 ) ) ;
60614: LD_VAR 0 1
60618: PPUSH
60619: LD_INT 1
60621: PPUSH
60622: LD_INT 4
60624: PPUSH
60625: CALL_OW 12
60629: PPUSH
60630: CALL_OW 336
60634: GO 60581
60636: POP
60637: POP
// end ;
60638: PPOPN 1
60640: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60641: LD_EXP 43
60645: PUSH
60646: LD_EXP 55
60650: AND
60651: IFFALSE 60730
60653: GO 60655
60655: DISABLE
60656: LD_INT 0
60658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60659: LD_ADDR_VAR 0 1
60663: PUSH
60664: LD_INT 22
60666: PUSH
60667: LD_OWVAR 2
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 21
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PPUSH
60690: CALL_OW 69
60694: ST_TO_ADDR
// if not tmp then
60695: LD_VAR 0 1
60699: NOT
60700: IFFALSE 60704
// exit ;
60702: GO 60730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60704: LD_VAR 0 1
60708: PUSH
60709: LD_INT 1
60711: PPUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 12
60721: ARRAY
60722: PPUSH
60723: LD_INT 100
60725: PPUSH
60726: CALL_OW 234
// end ;
60730: PPOPN 1
60732: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60733: LD_EXP 43
60737: PUSH
60738: LD_EXP 57
60742: AND
60743: IFFALSE 60841
60745: GO 60747
60747: DISABLE
60748: LD_INT 0
60750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60751: LD_ADDR_VAR 0 1
60755: PUSH
60756: LD_INT 22
60758: PUSH
60759: LD_OWVAR 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 21
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PPUSH
60782: CALL_OW 69
60786: ST_TO_ADDR
// if not tmp then
60787: LD_VAR 0 1
60791: NOT
60792: IFFALSE 60796
// exit ;
60794: GO 60841
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60796: LD_VAR 0 1
60800: PUSH
60801: LD_INT 1
60803: PPUSH
60804: LD_VAR 0 1
60808: PPUSH
60809: CALL_OW 12
60813: ARRAY
60814: PPUSH
60815: LD_INT 1
60817: PPUSH
60818: LD_INT 4
60820: PPUSH
60821: CALL_OW 12
60825: PPUSH
60826: LD_INT 3000
60828: PPUSH
60829: LD_INT 9000
60831: PPUSH
60832: CALL_OW 12
60836: PPUSH
60837: CALL_OW 492
// end ;
60841: PPOPN 1
60843: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60844: LD_EXP 43
60848: PUSH
60849: LD_EXP 58
60853: AND
60854: IFFALSE 60874
60856: GO 60858
60858: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60859: LD_INT 1
60861: PPUSH
60862: LD_OWVAR 2
60866: PPUSH
60867: LD_INT 0
60869: PPUSH
60870: CALL_OW 324
60874: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60875: LD_EXP 43
60879: PUSH
60880: LD_EXP 59
60884: AND
60885: IFFALSE 60968
60887: GO 60889
60889: DISABLE
60890: LD_INT 0
60892: PPUSH
60893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60894: LD_ADDR_VAR 0 2
60898: PUSH
60899: LD_INT 22
60901: PUSH
60902: LD_OWVAR 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 21
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PPUSH
60925: CALL_OW 69
60929: ST_TO_ADDR
// if not tmp then
60930: LD_VAR 0 2
60934: NOT
60935: IFFALSE 60939
// exit ;
60937: GO 60968
// for i in tmp do
60939: LD_ADDR_VAR 0 1
60943: PUSH
60944: LD_VAR 0 2
60948: PUSH
60949: FOR_IN
60950: IFFALSE 60966
// SetBLevel ( i , 10 ) ;
60952: LD_VAR 0 1
60956: PPUSH
60957: LD_INT 10
60959: PPUSH
60960: CALL_OW 241
60964: GO 60949
60966: POP
60967: POP
// end ;
60968: PPOPN 2
60970: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60971: LD_EXP 43
60975: PUSH
60976: LD_EXP 60
60980: AND
60981: IFFALSE 61092
60983: GO 60985
60985: DISABLE
60986: LD_INT 0
60988: PPUSH
60989: PPUSH
60990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60991: LD_ADDR_VAR 0 3
60995: PUSH
60996: LD_INT 22
60998: PUSH
60999: LD_OWVAR 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 25
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PPUSH
61022: CALL_OW 69
61026: ST_TO_ADDR
// if not tmp then
61027: LD_VAR 0 3
61031: NOT
61032: IFFALSE 61036
// exit ;
61034: GO 61092
// un := tmp [ rand ( 1 , tmp ) ] ;
61036: LD_ADDR_VAR 0 2
61040: PUSH
61041: LD_VAR 0 3
61045: PUSH
61046: LD_INT 1
61048: PPUSH
61049: LD_VAR 0 3
61053: PPUSH
61054: CALL_OW 12
61058: ARRAY
61059: ST_TO_ADDR
// if Crawls ( un ) then
61060: LD_VAR 0 2
61064: PPUSH
61065: CALL_OW 318
61069: IFFALSE 61080
// ComWalk ( un ) ;
61071: LD_VAR 0 2
61075: PPUSH
61076: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61080: LD_VAR 0 2
61084: PPUSH
61085: LD_INT 5
61087: PPUSH
61088: CALL_OW 336
// end ;
61092: PPOPN 3
61094: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61095: LD_EXP 43
61099: PUSH
61100: LD_EXP 61
61104: AND
61105: PUSH
61106: LD_OWVAR 67
61110: PUSH
61111: LD_INT 4
61113: LESS
61114: AND
61115: IFFALSE 61134
61117: GO 61119
61119: DISABLE
// begin Difficulty := Difficulty + 1 ;
61120: LD_ADDR_OWVAR 67
61124: PUSH
61125: LD_OWVAR 67
61129: PUSH
61130: LD_INT 1
61132: PLUS
61133: ST_TO_ADDR
// end ;
61134: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61135: LD_EXP 43
61139: PUSH
61140: LD_EXP 62
61144: AND
61145: IFFALSE 61248
61147: GO 61149
61149: DISABLE
61150: LD_INT 0
61152: PPUSH
// begin for i := 1 to 5 do
61153: LD_ADDR_VAR 0 1
61157: PUSH
61158: DOUBLE
61159: LD_INT 1
61161: DEC
61162: ST_TO_ADDR
61163: LD_INT 5
61165: PUSH
61166: FOR_TO
61167: IFFALSE 61246
// begin uc_nation := nation_nature ;
61169: LD_ADDR_OWVAR 21
61173: PUSH
61174: LD_INT 0
61176: ST_TO_ADDR
// uc_side := 0 ;
61177: LD_ADDR_OWVAR 20
61181: PUSH
61182: LD_INT 0
61184: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61185: LD_ADDR_OWVAR 29
61189: PUSH
61190: LD_INT 12
61192: PUSH
61193: LD_INT 12
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: ST_TO_ADDR
// hc_agressivity := 20 ;
61200: LD_ADDR_OWVAR 35
61204: PUSH
61205: LD_INT 20
61207: ST_TO_ADDR
// hc_class := class_tiger ;
61208: LD_ADDR_OWVAR 28
61212: PUSH
61213: LD_INT 14
61215: ST_TO_ADDR
// hc_gallery :=  ;
61216: LD_ADDR_OWVAR 33
61220: PUSH
61221: LD_STRING 
61223: ST_TO_ADDR
// hc_name :=  ;
61224: LD_ADDR_OWVAR 26
61228: PUSH
61229: LD_STRING 
61231: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61232: CALL_OW 44
61236: PPUSH
61237: LD_INT 0
61239: PPUSH
61240: CALL_OW 51
// end ;
61244: GO 61166
61246: POP
61247: POP
// end ;
61248: PPOPN 1
61250: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61251: LD_EXP 43
61255: PUSH
61256: LD_EXP 63
61260: AND
61261: IFFALSE 61270
61263: GO 61265
61265: DISABLE
// StreamSibBomb ;
61266: CALL 61271 0 0
61270: END
// export function StreamSibBomb ; var i , x , y ; begin
61271: LD_INT 0
61273: PPUSH
61274: PPUSH
61275: PPUSH
61276: PPUSH
// result := false ;
61277: LD_ADDR_VAR 0 1
61281: PUSH
61282: LD_INT 0
61284: ST_TO_ADDR
// for i := 1 to 16 do
61285: LD_ADDR_VAR 0 2
61289: PUSH
61290: DOUBLE
61291: LD_INT 1
61293: DEC
61294: ST_TO_ADDR
61295: LD_INT 16
61297: PUSH
61298: FOR_TO
61299: IFFALSE 61498
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61301: LD_ADDR_VAR 0 3
61305: PUSH
61306: LD_INT 10
61308: PUSH
61309: LD_INT 20
61311: PUSH
61312: LD_INT 30
61314: PUSH
61315: LD_INT 40
61317: PUSH
61318: LD_INT 50
61320: PUSH
61321: LD_INT 60
61323: PUSH
61324: LD_INT 70
61326: PUSH
61327: LD_INT 80
61329: PUSH
61330: LD_INT 90
61332: PUSH
61333: LD_INT 100
61335: PUSH
61336: LD_INT 110
61338: PUSH
61339: LD_INT 120
61341: PUSH
61342: LD_INT 130
61344: PUSH
61345: LD_INT 140
61347: PUSH
61348: LD_INT 150
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PPUSH
61371: LD_INT 15
61373: PPUSH
61374: CALL_OW 12
61378: ARRAY
61379: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61380: LD_ADDR_VAR 0 4
61384: PUSH
61385: LD_INT 10
61387: PUSH
61388: LD_INT 20
61390: PUSH
61391: LD_INT 30
61393: PUSH
61394: LD_INT 40
61396: PUSH
61397: LD_INT 50
61399: PUSH
61400: LD_INT 60
61402: PUSH
61403: LD_INT 70
61405: PUSH
61406: LD_INT 80
61408: PUSH
61409: LD_INT 90
61411: PUSH
61412: LD_INT 100
61414: PUSH
61415: LD_INT 110
61417: PUSH
61418: LD_INT 120
61420: PUSH
61421: LD_INT 130
61423: PUSH
61424: LD_INT 140
61426: PUSH
61427: LD_INT 150
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PPUSH
61450: LD_INT 15
61452: PPUSH
61453: CALL_OW 12
61457: ARRAY
61458: ST_TO_ADDR
// if ValidHex ( x , y ) then
61459: LD_VAR 0 3
61463: PPUSH
61464: LD_VAR 0 4
61468: PPUSH
61469: CALL_OW 488
61473: IFFALSE 61496
// begin result := [ x , y ] ;
61475: LD_ADDR_VAR 0 1
61479: PUSH
61480: LD_VAR 0 3
61484: PUSH
61485: LD_VAR 0 4
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// break ;
61494: GO 61498
// end ; end ;
61496: GO 61298
61498: POP
61499: POP
// if result then
61500: LD_VAR 0 1
61504: IFFALSE 61564
// begin ToLua ( playSibBomb() ) ;
61506: LD_STRING playSibBomb()
61508: PPUSH
61509: CALL_OW 559
// wait ( 0 0$14 ) ;
61513: LD_INT 490
61515: PPUSH
61516: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61520: LD_VAR 0 1
61524: PUSH
61525: LD_INT 1
61527: ARRAY
61528: PPUSH
61529: LD_VAR 0 1
61533: PUSH
61534: LD_INT 2
61536: ARRAY
61537: PPUSH
61538: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61542: LD_VAR 0 1
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PPUSH
61551: LD_VAR 0 1
61555: PUSH
61556: LD_INT 2
61558: ARRAY
61559: PPUSH
61560: CALL_OW 429
// end ; end ;
61564: LD_VAR 0 1
61568: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61569: LD_EXP 43
61573: PUSH
61574: LD_EXP 65
61578: AND
61579: IFFALSE 61591
61581: GO 61583
61583: DISABLE
// YouLost (  ) ;
61584: LD_STRING 
61586: PPUSH
61587: CALL_OW 104
61591: END
// every 0 0$1 trigger StreamModeActive and sFog do
61592: LD_EXP 43
61596: PUSH
61597: LD_EXP 64
61601: AND
61602: IFFALSE 61616
61604: GO 61606
61606: DISABLE
// FogOff ( your_side ) ;
61607: LD_OWVAR 2
61611: PPUSH
61612: CALL_OW 344
61616: END
// every 0 0$1 trigger StreamModeActive and sSun do
61617: LD_EXP 43
61621: PUSH
61622: LD_EXP 66
61626: AND
61627: IFFALSE 61655
61629: GO 61631
61631: DISABLE
// begin solar_recharge_percent := 0 ;
61632: LD_ADDR_OWVAR 79
61636: PUSH
61637: LD_INT 0
61639: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61640: LD_INT 10500
61642: PPUSH
61643: CALL_OW 67
// solar_recharge_percent := 100 ;
61647: LD_ADDR_OWVAR 79
61651: PUSH
61652: LD_INT 100
61654: ST_TO_ADDR
// end ;
61655: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61656: LD_EXP 43
61660: PUSH
61661: LD_EXP 67
61665: AND
61666: IFFALSE 61905
61668: GO 61670
61670: DISABLE
61671: LD_INT 0
61673: PPUSH
61674: PPUSH
61675: PPUSH
// begin tmp := [ ] ;
61676: LD_ADDR_VAR 0 3
61680: PUSH
61681: EMPTY
61682: ST_TO_ADDR
// for i := 1 to 6 do
61683: LD_ADDR_VAR 0 1
61687: PUSH
61688: DOUBLE
61689: LD_INT 1
61691: DEC
61692: ST_TO_ADDR
61693: LD_INT 6
61695: PUSH
61696: FOR_TO
61697: IFFALSE 61802
// begin uc_nation := nation_nature ;
61699: LD_ADDR_OWVAR 21
61703: PUSH
61704: LD_INT 0
61706: ST_TO_ADDR
// uc_side := 0 ;
61707: LD_ADDR_OWVAR 20
61711: PUSH
61712: LD_INT 0
61714: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61715: LD_ADDR_OWVAR 29
61719: PUSH
61720: LD_INT 12
61722: PUSH
61723: LD_INT 12
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// hc_agressivity := 20 ;
61730: LD_ADDR_OWVAR 35
61734: PUSH
61735: LD_INT 20
61737: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61738: LD_ADDR_OWVAR 28
61742: PUSH
61743: LD_INT 17
61745: ST_TO_ADDR
// hc_gallery :=  ;
61746: LD_ADDR_OWVAR 33
61750: PUSH
61751: LD_STRING 
61753: ST_TO_ADDR
// hc_name :=  ;
61754: LD_ADDR_OWVAR 26
61758: PUSH
61759: LD_STRING 
61761: ST_TO_ADDR
// un := CreateHuman ;
61762: LD_ADDR_VAR 0 2
61766: PUSH
61767: CALL_OW 44
61771: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61772: LD_VAR 0 2
61776: PPUSH
61777: LD_INT 1
61779: PPUSH
61780: CALL_OW 51
// tmp := tmp ^ un ;
61784: LD_ADDR_VAR 0 3
61788: PUSH
61789: LD_VAR 0 3
61793: PUSH
61794: LD_VAR 0 2
61798: ADD
61799: ST_TO_ADDR
// end ;
61800: GO 61696
61802: POP
61803: POP
// repeat wait ( 0 0$1 ) ;
61804: LD_INT 35
61806: PPUSH
61807: CALL_OW 67
// for un in tmp do
61811: LD_ADDR_VAR 0 2
61815: PUSH
61816: LD_VAR 0 3
61820: PUSH
61821: FOR_IN
61822: IFFALSE 61896
// begin if IsDead ( un ) then
61824: LD_VAR 0 2
61828: PPUSH
61829: CALL_OW 301
61833: IFFALSE 61853
// begin tmp := tmp diff un ;
61835: LD_ADDR_VAR 0 3
61839: PUSH
61840: LD_VAR 0 3
61844: PUSH
61845: LD_VAR 0 2
61849: DIFF
61850: ST_TO_ADDR
// continue ;
61851: GO 61821
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61853: LD_VAR 0 2
61857: PPUSH
61858: LD_INT 3
61860: PUSH
61861: LD_INT 22
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PPUSH
61875: CALL_OW 69
61879: PPUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: CALL_OW 74
61889: PPUSH
61890: CALL_OW 115
// end ;
61894: GO 61821
61896: POP
61897: POP
// until not tmp ;
61898: LD_VAR 0 3
61902: NOT
61903: IFFALSE 61804
// end ;
61905: PPOPN 3
61907: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61908: LD_EXP 43
61912: PUSH
61913: LD_EXP 68
61917: AND
61918: IFFALSE 61972
61920: GO 61922
61922: DISABLE
// begin ToLua ( displayTroll(); ) ;
61923: LD_STRING displayTroll();
61925: PPUSH
61926: CALL_OW 559
// wait ( 3 3$00 ) ;
61930: LD_INT 6300
61932: PPUSH
61933: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61937: LD_STRING hideTroll();
61939: PPUSH
61940: CALL_OW 559
// wait ( 1 1$00 ) ;
61944: LD_INT 2100
61946: PPUSH
61947: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61951: LD_STRING displayTroll();
61953: PPUSH
61954: CALL_OW 559
// wait ( 1 1$00 ) ;
61958: LD_INT 2100
61960: PPUSH
61961: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61965: LD_STRING hideTroll();
61967: PPUSH
61968: CALL_OW 559
// end ;
61972: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61973: LD_EXP 43
61977: PUSH
61978: LD_EXP 69
61982: AND
61983: IFFALSE 62046
61985: GO 61987
61987: DISABLE
61988: LD_INT 0
61990: PPUSH
// begin p := 0 ;
61991: LD_ADDR_VAR 0 1
61995: PUSH
61996: LD_INT 0
61998: ST_TO_ADDR
// repeat game_speed := 1 ;
61999: LD_ADDR_OWVAR 65
62003: PUSH
62004: LD_INT 1
62006: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62007: LD_INT 35
62009: PPUSH
62010: CALL_OW 67
// p := p + 1 ;
62014: LD_ADDR_VAR 0 1
62018: PUSH
62019: LD_VAR 0 1
62023: PUSH
62024: LD_INT 1
62026: PLUS
62027: ST_TO_ADDR
// until p >= 60 ;
62028: LD_VAR 0 1
62032: PUSH
62033: LD_INT 60
62035: GREATEREQUAL
62036: IFFALSE 61999
// game_speed := 4 ;
62038: LD_ADDR_OWVAR 65
62042: PUSH
62043: LD_INT 4
62045: ST_TO_ADDR
// end ;
62046: PPOPN 1
62048: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62049: LD_EXP 43
62053: PUSH
62054: LD_EXP 70
62058: AND
62059: IFFALSE 62205
62061: GO 62063
62063: DISABLE
62064: LD_INT 0
62066: PPUSH
62067: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62068: LD_ADDR_VAR 0 1
62072: PUSH
62073: LD_INT 22
62075: PUSH
62076: LD_OWVAR 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 30
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 30
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PPUSH
62117: CALL_OW 69
62121: ST_TO_ADDR
// if not depot then
62122: LD_VAR 0 1
62126: NOT
62127: IFFALSE 62131
// exit ;
62129: GO 62205
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: LD_VAR 0 1
62140: PUSH
62141: LD_INT 1
62143: PPUSH
62144: LD_VAR 0 1
62148: PPUSH
62149: CALL_OW 12
62153: ARRAY
62154: PPUSH
62155: CALL_OW 274
62159: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62160: LD_VAR 0 2
62164: PPUSH
62165: LD_INT 1
62167: PPUSH
62168: LD_INT 0
62170: PPUSH
62171: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62175: LD_VAR 0 2
62179: PPUSH
62180: LD_INT 2
62182: PPUSH
62183: LD_INT 0
62185: PPUSH
62186: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62190: LD_VAR 0 2
62194: PPUSH
62195: LD_INT 3
62197: PPUSH
62198: LD_INT 0
62200: PPUSH
62201: CALL_OW 277
// end ;
62205: PPOPN 2
62207: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62208: LD_EXP 43
62212: PUSH
62213: LD_EXP 71
62217: AND
62218: IFFALSE 62315
62220: GO 62222
62222: DISABLE
62223: LD_INT 0
62225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62226: LD_ADDR_VAR 0 1
62230: PUSH
62231: LD_INT 22
62233: PUSH
62234: LD_OWVAR 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 21
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: LD_INT 23
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: PPUSH
62275: CALL_OW 69
62279: ST_TO_ADDR
// if not tmp then
62280: LD_VAR 0 1
62284: NOT
62285: IFFALSE 62289
// exit ;
62287: GO 62315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62289: LD_VAR 0 1
62293: PUSH
62294: LD_INT 1
62296: PPUSH
62297: LD_VAR 0 1
62301: PPUSH
62302: CALL_OW 12
62306: ARRAY
62307: PPUSH
62308: LD_INT 200
62310: PPUSH
62311: CALL_OW 234
// end ;
62315: PPOPN 1
62317: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62318: LD_EXP 43
62322: PUSH
62323: LD_EXP 72
62327: AND
62328: IFFALSE 62407
62330: GO 62332
62332: DISABLE
62333: LD_INT 0
62335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62336: LD_ADDR_VAR 0 1
62340: PUSH
62341: LD_INT 22
62343: PUSH
62344: LD_OWVAR 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 21
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PPUSH
62367: CALL_OW 69
62371: ST_TO_ADDR
// if not tmp then
62372: LD_VAR 0 1
62376: NOT
62377: IFFALSE 62381
// exit ;
62379: GO 62407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62381: LD_VAR 0 1
62385: PUSH
62386: LD_INT 1
62388: PPUSH
62389: LD_VAR 0 1
62393: PPUSH
62394: CALL_OW 12
62398: ARRAY
62399: PPUSH
62400: LD_INT 60
62402: PPUSH
62403: CALL_OW 234
// end ;
62407: PPOPN 1
62409: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62410: LD_EXP 43
62414: PUSH
62415: LD_EXP 73
62419: AND
62420: IFFALSE 62519
62422: GO 62424
62424: DISABLE
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
// begin enable ;
62429: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62430: LD_ADDR_VAR 0 1
62434: PUSH
62435: LD_INT 22
62437: PUSH
62438: LD_OWVAR 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 61
62449: PUSH
62450: EMPTY
62451: LIST
62452: PUSH
62453: LD_INT 33
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PPUSH
62468: CALL_OW 69
62472: ST_TO_ADDR
// if not tmp then
62473: LD_VAR 0 1
62477: NOT
62478: IFFALSE 62482
// exit ;
62480: GO 62519
// for i in tmp do
62482: LD_ADDR_VAR 0 2
62486: PUSH
62487: LD_VAR 0 1
62491: PUSH
62492: FOR_IN
62493: IFFALSE 62517
// if IsControledBy ( i ) then
62495: LD_VAR 0 2
62499: PPUSH
62500: CALL_OW 312
62504: IFFALSE 62515
// ComUnlink ( i ) ;
62506: LD_VAR 0 2
62510: PPUSH
62511: CALL_OW 136
62515: GO 62492
62517: POP
62518: POP
// end ;
62519: PPOPN 2
62521: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62522: LD_EXP 43
62526: PUSH
62527: LD_EXP 74
62531: AND
62532: IFFALSE 62672
62534: GO 62536
62536: DISABLE
62537: LD_INT 0
62539: PPUSH
62540: PPUSH
// begin ToLua ( displayPowell(); ) ;
62541: LD_STRING displayPowell();
62543: PPUSH
62544: CALL_OW 559
// uc_side := 0 ;
62548: LD_ADDR_OWVAR 20
62552: PUSH
62553: LD_INT 0
62555: ST_TO_ADDR
// uc_nation := 2 ;
62556: LD_ADDR_OWVAR 21
62560: PUSH
62561: LD_INT 2
62563: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62564: LD_ADDR_OWVAR 37
62568: PUSH
62569: LD_INT 14
62571: ST_TO_ADDR
// vc_engine := engine_siberite ;
62572: LD_ADDR_OWVAR 39
62576: PUSH
62577: LD_INT 3
62579: ST_TO_ADDR
// vc_control := control_apeman ;
62580: LD_ADDR_OWVAR 38
62584: PUSH
62585: LD_INT 5
62587: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62588: LD_ADDR_OWVAR 40
62592: PUSH
62593: LD_INT 29
62595: ST_TO_ADDR
// un := CreateVehicle ;
62596: LD_ADDR_VAR 0 2
62600: PUSH
62601: CALL_OW 45
62605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62606: LD_VAR 0 2
62610: PPUSH
62611: LD_INT 1
62613: PPUSH
62614: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62618: LD_INT 35
62620: PPUSH
62621: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62625: LD_VAR 0 2
62629: PPUSH
62630: LD_INT 22
62632: PUSH
62633: LD_OWVAR 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PPUSH
62642: CALL_OW 69
62646: PPUSH
62647: LD_VAR 0 2
62651: PPUSH
62652: CALL_OW 74
62656: PPUSH
62657: CALL_OW 115
// until IsDead ( un ) ;
62661: LD_VAR 0 2
62665: PPUSH
62666: CALL_OW 301
62670: IFFALSE 62618
// end ;
62672: PPOPN 2
62674: END
// every 0 0$1 trigger StreamModeActive and sStu do
62675: LD_EXP 43
62679: PUSH
62680: LD_EXP 82
62684: AND
62685: IFFALSE 62701
62687: GO 62689
62689: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62690: LD_STRING displayStucuk();
62692: PPUSH
62693: CALL_OW 559
// ResetFog ;
62697: CALL_OW 335
// end ;
62701: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62702: LD_EXP 43
62706: PUSH
62707: LD_EXP 75
62711: AND
62712: IFFALSE 62853
62714: GO 62716
62716: DISABLE
62717: LD_INT 0
62719: PPUSH
62720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_OWVAR 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 21
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PPUSH
62752: CALL_OW 69
62756: ST_TO_ADDR
// if not tmp then
62757: LD_VAR 0 2
62761: NOT
62762: IFFALSE 62766
// exit ;
62764: GO 62853
// un := tmp [ rand ( 1 , tmp ) ] ;
62766: LD_ADDR_VAR 0 1
62770: PUSH
62771: LD_VAR 0 2
62775: PUSH
62776: LD_INT 1
62778: PPUSH
62779: LD_VAR 0 2
62783: PPUSH
62784: CALL_OW 12
62788: ARRAY
62789: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62790: LD_VAR 0 1
62794: PPUSH
62795: LD_INT 0
62797: PPUSH
62798: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62802: LD_VAR 0 1
62806: PPUSH
62807: LD_OWVAR 3
62811: PUSH
62812: LD_VAR 0 1
62816: DIFF
62817: PPUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 74
62827: PPUSH
62828: CALL_OW 115
// wait ( 0 0$20 ) ;
62832: LD_INT 700
62834: PPUSH
62835: CALL_OW 67
// SetSide ( un , your_side ) ;
62839: LD_VAR 0 1
62843: PPUSH
62844: LD_OWVAR 2
62848: PPUSH
62849: CALL_OW 235
// end ;
62853: PPOPN 2
62855: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62856: LD_EXP 43
62860: PUSH
62861: LD_EXP 76
62865: AND
62866: IFFALSE 62972
62868: GO 62870
62870: DISABLE
62871: LD_INT 0
62873: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62874: LD_ADDR_VAR 0 1
62878: PUSH
62879: LD_INT 22
62881: PUSH
62882: LD_OWVAR 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 30
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 30
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PPUSH
62923: CALL_OW 69
62927: ST_TO_ADDR
// if not depot then
62928: LD_VAR 0 1
62932: NOT
62933: IFFALSE 62937
// exit ;
62935: GO 62972
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62937: LD_VAR 0 1
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: PPUSH
62946: CALL_OW 250
62950: PPUSH
62951: LD_VAR 0 1
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PPUSH
62960: CALL_OW 251
62964: PPUSH
62965: LD_INT 70
62967: PPUSH
62968: CALL_OW 495
// end ;
62972: PPOPN 1
62974: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62975: LD_EXP 43
62979: PUSH
62980: LD_EXP 77
62984: AND
62985: IFFALSE 63196
62987: GO 62989
62989: DISABLE
62990: LD_INT 0
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
62996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62997: LD_ADDR_VAR 0 5
63001: PUSH
63002: LD_INT 22
63004: PUSH
63005: LD_OWVAR 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 21
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PPUSH
63028: CALL_OW 69
63032: ST_TO_ADDR
// if not tmp then
63033: LD_VAR 0 5
63037: NOT
63038: IFFALSE 63042
// exit ;
63040: GO 63196
// for i in tmp do
63042: LD_ADDR_VAR 0 1
63046: PUSH
63047: LD_VAR 0 5
63051: PUSH
63052: FOR_IN
63053: IFFALSE 63194
// begin d := rand ( 0 , 5 ) ;
63055: LD_ADDR_VAR 0 4
63059: PUSH
63060: LD_INT 0
63062: PPUSH
63063: LD_INT 5
63065: PPUSH
63066: CALL_OW 12
63070: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63071: LD_ADDR_VAR 0 2
63075: PUSH
63076: LD_VAR 0 1
63080: PPUSH
63081: CALL_OW 250
63085: PPUSH
63086: LD_VAR 0 4
63090: PPUSH
63091: LD_INT 3
63093: PPUSH
63094: LD_INT 12
63096: PPUSH
63097: CALL_OW 12
63101: PPUSH
63102: CALL_OW 272
63106: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63107: LD_ADDR_VAR 0 3
63111: PUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: CALL_OW 251
63121: PPUSH
63122: LD_VAR 0 4
63126: PPUSH
63127: LD_INT 3
63129: PPUSH
63130: LD_INT 12
63132: PPUSH
63133: CALL_OW 12
63137: PPUSH
63138: CALL_OW 273
63142: ST_TO_ADDR
// if ValidHex ( x , y ) then
63143: LD_VAR 0 2
63147: PPUSH
63148: LD_VAR 0 3
63152: PPUSH
63153: CALL_OW 488
63157: IFFALSE 63192
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63159: LD_VAR 0 1
63163: PPUSH
63164: LD_VAR 0 2
63168: PPUSH
63169: LD_VAR 0 3
63173: PPUSH
63174: LD_INT 3
63176: PPUSH
63177: LD_INT 6
63179: PPUSH
63180: CALL_OW 12
63184: PPUSH
63185: LD_INT 1
63187: PPUSH
63188: CALL_OW 483
// end ;
63192: GO 63052
63194: POP
63195: POP
// end ;
63196: PPOPN 5
63198: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63199: LD_EXP 43
63203: PUSH
63204: LD_EXP 78
63208: AND
63209: IFFALSE 63303
63211: GO 63213
63213: DISABLE
63214: LD_INT 0
63216: PPUSH
63217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63218: LD_ADDR_VAR 0 2
63222: PUSH
63223: LD_INT 22
63225: PUSH
63226: LD_OWVAR 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 32
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 21
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: PPUSH
63260: CALL_OW 69
63264: ST_TO_ADDR
// if not tmp then
63265: LD_VAR 0 2
63269: NOT
63270: IFFALSE 63274
// exit ;
63272: GO 63303
// for i in tmp do
63274: LD_ADDR_VAR 0 1
63278: PUSH
63279: LD_VAR 0 2
63283: PUSH
63284: FOR_IN
63285: IFFALSE 63301
// SetFuel ( i , 0 ) ;
63287: LD_VAR 0 1
63291: PPUSH
63292: LD_INT 0
63294: PPUSH
63295: CALL_OW 240
63299: GO 63284
63301: POP
63302: POP
// end ;
63303: PPOPN 2
63305: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63306: LD_EXP 43
63310: PUSH
63311: LD_EXP 79
63315: AND
63316: IFFALSE 63382
63318: GO 63320
63320: DISABLE
63321: LD_INT 0
63323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63324: LD_ADDR_VAR 0 1
63328: PUSH
63329: LD_INT 22
63331: PUSH
63332: LD_OWVAR 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 30
63343: PUSH
63344: LD_INT 29
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PPUSH
63355: CALL_OW 69
63359: ST_TO_ADDR
// if not tmp then
63360: LD_VAR 0 1
63364: NOT
63365: IFFALSE 63369
// exit ;
63367: GO 63382
// DestroyUnit ( tmp [ 1 ] ) ;
63369: LD_VAR 0 1
63373: PUSH
63374: LD_INT 1
63376: ARRAY
63377: PPUSH
63378: CALL_OW 65
// end ;
63382: PPOPN 1
63384: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63385: LD_EXP 43
63389: PUSH
63390: LD_EXP 81
63394: AND
63395: IFFALSE 63524
63397: GO 63399
63399: DISABLE
63400: LD_INT 0
63402: PPUSH
// begin uc_side := 0 ;
63403: LD_ADDR_OWVAR 20
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// uc_nation := nation_arabian ;
63411: LD_ADDR_OWVAR 21
63415: PUSH
63416: LD_INT 2
63418: ST_TO_ADDR
// hc_gallery :=  ;
63419: LD_ADDR_OWVAR 33
63423: PUSH
63424: LD_STRING 
63426: ST_TO_ADDR
// hc_name :=  ;
63427: LD_ADDR_OWVAR 26
63431: PUSH
63432: LD_STRING 
63434: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63435: LD_INT 1
63437: PPUSH
63438: LD_INT 11
63440: PPUSH
63441: LD_INT 10
63443: PPUSH
63444: CALL_OW 380
// un := CreateHuman ;
63448: LD_ADDR_VAR 0 1
63452: PUSH
63453: CALL_OW 44
63457: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63458: LD_VAR 0 1
63462: PPUSH
63463: LD_INT 1
63465: PPUSH
63466: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63470: LD_INT 35
63472: PPUSH
63473: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63477: LD_VAR 0 1
63481: PPUSH
63482: LD_INT 22
63484: PUSH
63485: LD_OWVAR 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PPUSH
63494: CALL_OW 69
63498: PPUSH
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 74
63508: PPUSH
63509: CALL_OW 115
// until IsDead ( un ) ;
63513: LD_VAR 0 1
63517: PPUSH
63518: CALL_OW 301
63522: IFFALSE 63470
// end ;
63524: PPOPN 1
63526: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63527: LD_EXP 43
63531: PUSH
63532: LD_EXP 83
63536: AND
63537: IFFALSE 63549
63539: GO 63541
63541: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63542: LD_STRING earthquake(getX(game), 0, 32)
63544: PPUSH
63545: CALL_OW 559
63549: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63550: LD_EXP 43
63554: PUSH
63555: LD_EXP 84
63559: AND
63560: IFFALSE 63651
63562: GO 63564
63564: DISABLE
63565: LD_INT 0
63567: PPUSH
// begin enable ;
63568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63569: LD_ADDR_VAR 0 1
63573: PUSH
63574: LD_INT 22
63576: PUSH
63577: LD_OWVAR 2
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 21
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 33
63598: PUSH
63599: LD_INT 3
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: PPUSH
63611: CALL_OW 69
63615: ST_TO_ADDR
// if not tmp then
63616: LD_VAR 0 1
63620: NOT
63621: IFFALSE 63625
// exit ;
63623: GO 63651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63625: LD_VAR 0 1
63629: PUSH
63630: LD_INT 1
63632: PPUSH
63633: LD_VAR 0 1
63637: PPUSH
63638: CALL_OW 12
63642: ARRAY
63643: PPUSH
63644: LD_INT 1
63646: PPUSH
63647: CALL_OW 234
// end ;
63651: PPOPN 1
63653: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63654: LD_EXP 43
63658: PUSH
63659: LD_EXP 85
63663: AND
63664: IFFALSE 63805
63666: GO 63668
63668: DISABLE
63669: LD_INT 0
63671: PPUSH
63672: PPUSH
63673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63674: LD_ADDR_VAR 0 3
63678: PUSH
63679: LD_INT 22
63681: PUSH
63682: LD_OWVAR 2
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 25
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PPUSH
63705: CALL_OW 69
63709: ST_TO_ADDR
// if not tmp then
63710: LD_VAR 0 3
63714: NOT
63715: IFFALSE 63719
// exit ;
63717: GO 63805
// un := tmp [ rand ( 1 , tmp ) ] ;
63719: LD_ADDR_VAR 0 2
63723: PUSH
63724: LD_VAR 0 3
63728: PUSH
63729: LD_INT 1
63731: PPUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: CALL_OW 12
63741: ARRAY
63742: ST_TO_ADDR
// if Crawls ( un ) then
63743: LD_VAR 0 2
63747: PPUSH
63748: CALL_OW 318
63752: IFFALSE 63763
// ComWalk ( un ) ;
63754: LD_VAR 0 2
63758: PPUSH
63759: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63763: LD_VAR 0 2
63767: PPUSH
63768: LD_INT 9
63770: PPUSH
63771: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63775: LD_INT 28
63777: PPUSH
63778: LD_OWVAR 2
63782: PPUSH
63783: LD_INT 2
63785: PPUSH
63786: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63790: LD_INT 29
63792: PPUSH
63793: LD_OWVAR 2
63797: PPUSH
63798: LD_INT 2
63800: PPUSH
63801: CALL_OW 322
// end ;
63805: PPOPN 3
63807: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63808: LD_EXP 43
63812: PUSH
63813: LD_EXP 86
63817: AND
63818: IFFALSE 63929
63820: GO 63822
63822: DISABLE
63823: LD_INT 0
63825: PPUSH
63826: PPUSH
63827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63828: LD_ADDR_VAR 0 3
63832: PUSH
63833: LD_INT 22
63835: PUSH
63836: LD_OWVAR 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 25
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PPUSH
63859: CALL_OW 69
63863: ST_TO_ADDR
// if not tmp then
63864: LD_VAR 0 3
63868: NOT
63869: IFFALSE 63873
// exit ;
63871: GO 63929
// un := tmp [ rand ( 1 , tmp ) ] ;
63873: LD_ADDR_VAR 0 2
63877: PUSH
63878: LD_VAR 0 3
63882: PUSH
63883: LD_INT 1
63885: PPUSH
63886: LD_VAR 0 3
63890: PPUSH
63891: CALL_OW 12
63895: ARRAY
63896: ST_TO_ADDR
// if Crawls ( un ) then
63897: LD_VAR 0 2
63901: PPUSH
63902: CALL_OW 318
63906: IFFALSE 63917
// ComWalk ( un ) ;
63908: LD_VAR 0 2
63912: PPUSH
63913: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63917: LD_VAR 0 2
63921: PPUSH
63922: LD_INT 8
63924: PPUSH
63925: CALL_OW 336
// end ;
63929: PPOPN 3
63931: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63932: LD_EXP 43
63936: PUSH
63937: LD_EXP 87
63941: AND
63942: IFFALSE 64086
63944: GO 63946
63946: DISABLE
63947: LD_INT 0
63949: PPUSH
63950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63951: LD_ADDR_VAR 0 2
63955: PUSH
63956: LD_INT 22
63958: PUSH
63959: LD_OWVAR 2
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 21
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: LD_INT 34
63983: PUSH
63984: LD_INT 12
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 34
63993: PUSH
63994: LD_INT 51
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 34
64003: PUSH
64004: LD_INT 32
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: PPUSH
64022: CALL_OW 69
64026: ST_TO_ADDR
// if not tmp then
64027: LD_VAR 0 2
64031: NOT
64032: IFFALSE 64036
// exit ;
64034: GO 64086
// for i in tmp do
64036: LD_ADDR_VAR 0 1
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: FOR_IN
64047: IFFALSE 64084
// if GetCargo ( i , mat_artifact ) = 0 then
64049: LD_VAR 0 1
64053: PPUSH
64054: LD_INT 4
64056: PPUSH
64057: CALL_OW 289
64061: PUSH
64062: LD_INT 0
64064: EQUAL
64065: IFFALSE 64082
// SetCargo ( i , mat_siberit , 100 ) ;
64067: LD_VAR 0 1
64071: PPUSH
64072: LD_INT 3
64074: PPUSH
64075: LD_INT 100
64077: PPUSH
64078: CALL_OW 290
64082: GO 64046
64084: POP
64085: POP
// end ;
64086: PPOPN 2
64088: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64089: LD_EXP 43
64093: PUSH
64094: LD_EXP 88
64098: AND
64099: IFFALSE 64282
64101: GO 64103
64103: DISABLE
64104: LD_INT 0
64106: PPUSH
64107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64108: LD_ADDR_VAR 0 2
64112: PUSH
64113: LD_INT 22
64115: PUSH
64116: LD_OWVAR 2
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PPUSH
64125: CALL_OW 69
64129: ST_TO_ADDR
// if not tmp then
64130: LD_VAR 0 2
64134: NOT
64135: IFFALSE 64139
// exit ;
64137: GO 64282
// for i := 1 to 2 do
64139: LD_ADDR_VAR 0 1
64143: PUSH
64144: DOUBLE
64145: LD_INT 1
64147: DEC
64148: ST_TO_ADDR
64149: LD_INT 2
64151: PUSH
64152: FOR_TO
64153: IFFALSE 64280
// begin uc_side := your_side ;
64155: LD_ADDR_OWVAR 20
64159: PUSH
64160: LD_OWVAR 2
64164: ST_TO_ADDR
// uc_nation := nation_american ;
64165: LD_ADDR_OWVAR 21
64169: PUSH
64170: LD_INT 1
64172: ST_TO_ADDR
// vc_chassis := us_morphling ;
64173: LD_ADDR_OWVAR 37
64177: PUSH
64178: LD_INT 5
64180: ST_TO_ADDR
// vc_engine := engine_siberite ;
64181: LD_ADDR_OWVAR 39
64185: PUSH
64186: LD_INT 3
64188: ST_TO_ADDR
// vc_control := control_computer ;
64189: LD_ADDR_OWVAR 38
64193: PUSH
64194: LD_INT 3
64196: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64197: LD_ADDR_OWVAR 40
64201: PUSH
64202: LD_INT 10
64204: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64205: LD_VAR 0 2
64209: PUSH
64210: LD_INT 1
64212: ARRAY
64213: PPUSH
64214: CALL_OW 310
64218: NOT
64219: IFFALSE 64266
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64221: CALL_OW 45
64225: PPUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_INT 1
64233: ARRAY
64234: PPUSH
64235: CALL_OW 250
64239: PPUSH
64240: LD_VAR 0 2
64244: PUSH
64245: LD_INT 1
64247: ARRAY
64248: PPUSH
64249: CALL_OW 251
64253: PPUSH
64254: LD_INT 12
64256: PPUSH
64257: LD_INT 1
64259: PPUSH
64260: CALL_OW 50
64264: GO 64278
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64266: CALL_OW 45
64270: PPUSH
64271: LD_INT 1
64273: PPUSH
64274: CALL_OW 51
// end ;
64278: GO 64152
64280: POP
64281: POP
// end ;
64282: PPOPN 2
64284: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64285: LD_EXP 43
64289: PUSH
64290: LD_EXP 89
64294: AND
64295: IFFALSE 64517
64297: GO 64299
64299: DISABLE
64300: LD_INT 0
64302: PPUSH
64303: PPUSH
64304: PPUSH
64305: PPUSH
64306: PPUSH
64307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64308: LD_ADDR_VAR 0 6
64312: PUSH
64313: LD_INT 22
64315: PUSH
64316: LD_OWVAR 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 21
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 3
64337: PUSH
64338: LD_INT 23
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: PPUSH
64357: CALL_OW 69
64361: ST_TO_ADDR
// if not tmp then
64362: LD_VAR 0 6
64366: NOT
64367: IFFALSE 64371
// exit ;
64369: GO 64517
// s1 := rand ( 1 , 4 ) ;
64371: LD_ADDR_VAR 0 2
64375: PUSH
64376: LD_INT 1
64378: PPUSH
64379: LD_INT 4
64381: PPUSH
64382: CALL_OW 12
64386: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64387: LD_ADDR_VAR 0 4
64391: PUSH
64392: LD_VAR 0 6
64396: PUSH
64397: LD_INT 1
64399: ARRAY
64400: PPUSH
64401: LD_VAR 0 2
64405: PPUSH
64406: CALL_OW 259
64410: ST_TO_ADDR
// if s1 = 1 then
64411: LD_VAR 0 2
64415: PUSH
64416: LD_INT 1
64418: EQUAL
64419: IFFALSE 64439
// s2 := rand ( 2 , 4 ) else
64421: LD_ADDR_VAR 0 3
64425: PUSH
64426: LD_INT 2
64428: PPUSH
64429: LD_INT 4
64431: PPUSH
64432: CALL_OW 12
64436: ST_TO_ADDR
64437: GO 64447
// s2 := 1 ;
64439: LD_ADDR_VAR 0 3
64443: PUSH
64444: LD_INT 1
64446: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: LD_VAR 0 6
64456: PUSH
64457: LD_INT 1
64459: ARRAY
64460: PPUSH
64461: LD_VAR 0 3
64465: PPUSH
64466: CALL_OW 259
64470: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64471: LD_VAR 0 6
64475: PUSH
64476: LD_INT 1
64478: ARRAY
64479: PPUSH
64480: LD_VAR 0 2
64484: PPUSH
64485: LD_VAR 0 5
64489: PPUSH
64490: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64494: LD_VAR 0 6
64498: PUSH
64499: LD_INT 1
64501: ARRAY
64502: PPUSH
64503: LD_VAR 0 3
64507: PPUSH
64508: LD_VAR 0 4
64512: PPUSH
64513: CALL_OW 237
// end ;
64517: PPOPN 6
64519: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64520: LD_EXP 43
64524: PUSH
64525: LD_EXP 90
64529: AND
64530: IFFALSE 64609
64532: GO 64534
64534: DISABLE
64535: LD_INT 0
64537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64538: LD_ADDR_VAR 0 1
64542: PUSH
64543: LD_INT 22
64545: PUSH
64546: LD_OWVAR 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 30
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PPUSH
64569: CALL_OW 69
64573: ST_TO_ADDR
// if not tmp then
64574: LD_VAR 0 1
64578: NOT
64579: IFFALSE 64583
// exit ;
64581: GO 64609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64583: LD_VAR 0 1
64587: PUSH
64588: LD_INT 1
64590: PPUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 12
64600: ARRAY
64601: PPUSH
64602: LD_INT 1
64604: PPUSH
64605: CALL_OW 234
// end ;
64609: PPOPN 1
64611: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64612: LD_EXP 43
64616: PUSH
64617: LD_EXP 91
64621: AND
64622: IFFALSE 64734
64624: GO 64626
64626: DISABLE
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64631: LD_ADDR_VAR 0 2
64635: PUSH
64636: LD_INT 22
64638: PUSH
64639: LD_OWVAR 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 30
64653: PUSH
64654: LD_INT 27
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 30
64663: PUSH
64664: LD_INT 26
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 30
64673: PUSH
64674: LD_INT 28
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PPUSH
64691: CALL_OW 69
64695: ST_TO_ADDR
// if not tmp then
64696: LD_VAR 0 2
64700: NOT
64701: IFFALSE 64705
// exit ;
64703: GO 64734
// for i in tmp do
64705: LD_ADDR_VAR 0 1
64709: PUSH
64710: LD_VAR 0 2
64714: PUSH
64715: FOR_IN
64716: IFFALSE 64732
// SetLives ( i , 1 ) ;
64718: LD_VAR 0 1
64722: PPUSH
64723: LD_INT 1
64725: PPUSH
64726: CALL_OW 234
64730: GO 64715
64732: POP
64733: POP
// end ;
64734: PPOPN 2
64736: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64737: LD_EXP 43
64741: PUSH
64742: LD_EXP 92
64746: AND
64747: IFFALSE 65034
64749: GO 64751
64751: DISABLE
64752: LD_INT 0
64754: PPUSH
64755: PPUSH
64756: PPUSH
// begin i := rand ( 1 , 7 ) ;
64757: LD_ADDR_VAR 0 1
64761: PUSH
64762: LD_INT 1
64764: PPUSH
64765: LD_INT 7
64767: PPUSH
64768: CALL_OW 12
64772: ST_TO_ADDR
// case i of 1 :
64773: LD_VAR 0 1
64777: PUSH
64778: LD_INT 1
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64786
64784: GO 64796
64786: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64787: LD_STRING earthquake(getX(game), 0, 32)
64789: PPUSH
64790: CALL_OW 559
64794: GO 65034
64796: LD_INT 2
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64804
64802: GO 64818
64804: POP
// begin ToLua ( displayStucuk(); ) ;
64805: LD_STRING displayStucuk();
64807: PPUSH
64808: CALL_OW 559
// ResetFog ;
64812: CALL_OW 335
// end ; 3 :
64816: GO 65034
64818: LD_INT 3
64820: DOUBLE
64821: EQUAL
64822: IFTRUE 64826
64824: GO 64930
64826: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64827: LD_ADDR_VAR 0 2
64831: PUSH
64832: LD_INT 22
64834: PUSH
64835: LD_OWVAR 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 25
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PPUSH
64858: CALL_OW 69
64862: ST_TO_ADDR
// if not tmp then
64863: LD_VAR 0 2
64867: NOT
64868: IFFALSE 64872
// exit ;
64870: GO 65034
// un := tmp [ rand ( 1 , tmp ) ] ;
64872: LD_ADDR_VAR 0 3
64876: PUSH
64877: LD_VAR 0 2
64881: PUSH
64882: LD_INT 1
64884: PPUSH
64885: LD_VAR 0 2
64889: PPUSH
64890: CALL_OW 12
64894: ARRAY
64895: ST_TO_ADDR
// if Crawls ( un ) then
64896: LD_VAR 0 3
64900: PPUSH
64901: CALL_OW 318
64905: IFFALSE 64916
// ComWalk ( un ) ;
64907: LD_VAR 0 3
64911: PPUSH
64912: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64916: LD_VAR 0 3
64920: PPUSH
64921: LD_INT 8
64923: PPUSH
64924: CALL_OW 336
// end ; 4 :
64928: GO 65034
64930: LD_INT 4
64932: DOUBLE
64933: EQUAL
64934: IFTRUE 64938
64936: GO 65012
64938: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64939: LD_ADDR_VAR 0 2
64943: PUSH
64944: LD_INT 22
64946: PUSH
64947: LD_OWVAR 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 30
64958: PUSH
64959: LD_INT 29
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PPUSH
64970: CALL_OW 69
64974: ST_TO_ADDR
// if not tmp then
64975: LD_VAR 0 2
64979: NOT
64980: IFFALSE 64984
// exit ;
64982: GO 65034
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64984: LD_VAR 0 2
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PPUSH
64993: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64997: LD_VAR 0 2
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PPUSH
65006: CALL_OW 65
// end ; 5 .. 7 :
65010: GO 65034
65012: LD_INT 5
65014: DOUBLE
65015: GREATEREQUAL
65016: IFFALSE 65024
65018: LD_INT 7
65020: DOUBLE
65021: LESSEQUAL
65022: IFTRUE 65026
65024: GO 65033
65026: POP
// StreamSibBomb ; end ;
65027: CALL 61271 0 0
65031: GO 65034
65033: POP
// end ;
65034: PPOPN 3
65036: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65037: LD_EXP 43
65041: PUSH
65042: LD_EXP 93
65046: AND
65047: IFFALSE 65203
65049: GO 65051
65051: DISABLE
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
65056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65057: LD_ADDR_VAR 0 2
65061: PUSH
65062: LD_INT 81
65064: PUSH
65065: LD_OWVAR 2
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: LD_INT 21
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 21
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PPUSH
65106: CALL_OW 69
65110: ST_TO_ADDR
// if not tmp then
65111: LD_VAR 0 2
65115: NOT
65116: IFFALSE 65120
// exit ;
65118: GO 65203
// p := 0 ;
65120: LD_ADDR_VAR 0 3
65124: PUSH
65125: LD_INT 0
65127: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65128: LD_INT 35
65130: PPUSH
65131: CALL_OW 67
// p := p + 1 ;
65135: LD_ADDR_VAR 0 3
65139: PUSH
65140: LD_VAR 0 3
65144: PUSH
65145: LD_INT 1
65147: PLUS
65148: ST_TO_ADDR
// for i in tmp do
65149: LD_ADDR_VAR 0 1
65153: PUSH
65154: LD_VAR 0 2
65158: PUSH
65159: FOR_IN
65160: IFFALSE 65191
// if GetLives ( i ) < 1000 then
65162: LD_VAR 0 1
65166: PPUSH
65167: CALL_OW 256
65171: PUSH
65172: LD_INT 1000
65174: LESS
65175: IFFALSE 65189
// SetLives ( i , 1000 ) ;
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_INT 1000
65184: PPUSH
65185: CALL_OW 234
65189: GO 65159
65191: POP
65192: POP
// until p > 20 ;
65193: LD_VAR 0 3
65197: PUSH
65198: LD_INT 20
65200: GREATER
65201: IFFALSE 65128
// end ;
65203: PPOPN 3
65205: END
// every 0 0$1 trigger StreamModeActive and sTime do
65206: LD_EXP 43
65210: PUSH
65211: LD_EXP 94
65215: AND
65216: IFFALSE 65251
65218: GO 65220
65220: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65221: LD_INT 28
65223: PPUSH
65224: LD_OWVAR 2
65228: PPUSH
65229: LD_INT 2
65231: PPUSH
65232: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65236: LD_INT 30
65238: PPUSH
65239: LD_OWVAR 2
65243: PPUSH
65244: LD_INT 2
65246: PPUSH
65247: CALL_OW 322
// end ;
65251: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65252: LD_EXP 43
65256: PUSH
65257: LD_EXP 95
65261: AND
65262: IFFALSE 65383
65264: GO 65266
65266: DISABLE
65267: LD_INT 0
65269: PPUSH
65270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65271: LD_ADDR_VAR 0 2
65275: PUSH
65276: LD_INT 22
65278: PUSH
65279: LD_OWVAR 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 21
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 23
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PPUSH
65320: CALL_OW 69
65324: ST_TO_ADDR
// if not tmp then
65325: LD_VAR 0 2
65329: NOT
65330: IFFALSE 65334
// exit ;
65332: GO 65383
// for i in tmp do
65334: LD_ADDR_VAR 0 1
65338: PUSH
65339: LD_VAR 0 2
65343: PUSH
65344: FOR_IN
65345: IFFALSE 65381
// begin if Crawls ( i ) then
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 318
65356: IFFALSE 65367
// ComWalk ( i ) ;
65358: LD_VAR 0 1
65362: PPUSH
65363: CALL_OW 138
// SetClass ( i , 2 ) ;
65367: LD_VAR 0 1
65371: PPUSH
65372: LD_INT 2
65374: PPUSH
65375: CALL_OW 336
// end ;
65379: GO 65344
65381: POP
65382: POP
// end ;
65383: PPOPN 2
65385: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65386: LD_EXP 43
65390: PUSH
65391: LD_EXP 96
65395: AND
65396: IFFALSE 65684
65398: GO 65400
65400: DISABLE
65401: LD_INT 0
65403: PPUSH
65404: PPUSH
65405: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65406: LD_OWVAR 2
65410: PPUSH
65411: LD_INT 9
65413: PPUSH
65414: LD_INT 1
65416: PPUSH
65417: LD_INT 1
65419: PPUSH
65420: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65424: LD_INT 9
65426: PPUSH
65427: LD_OWVAR 2
65431: PPUSH
65432: CALL_OW 343
// uc_side := 9 ;
65436: LD_ADDR_OWVAR 20
65440: PUSH
65441: LD_INT 9
65443: ST_TO_ADDR
// uc_nation := 2 ;
65444: LD_ADDR_OWVAR 21
65448: PUSH
65449: LD_INT 2
65451: ST_TO_ADDR
// hc_name := Dark Warrior ;
65452: LD_ADDR_OWVAR 26
65456: PUSH
65457: LD_STRING Dark Warrior
65459: ST_TO_ADDR
// hc_gallery :=  ;
65460: LD_ADDR_OWVAR 33
65464: PUSH
65465: LD_STRING 
65467: ST_TO_ADDR
// hc_noskilllimit := true ;
65468: LD_ADDR_OWVAR 76
65472: PUSH
65473: LD_INT 1
65475: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65476: LD_ADDR_OWVAR 31
65480: PUSH
65481: LD_INT 30
65483: PUSH
65484: LD_INT 30
65486: PUSH
65487: LD_INT 30
65489: PUSH
65490: LD_INT 30
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: ST_TO_ADDR
// un := CreateHuman ;
65499: LD_ADDR_VAR 0 3
65503: PUSH
65504: CALL_OW 44
65508: ST_TO_ADDR
// hc_noskilllimit := false ;
65509: LD_ADDR_OWVAR 76
65513: PUSH
65514: LD_INT 0
65516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65517: LD_VAR 0 3
65521: PPUSH
65522: LD_INT 1
65524: PPUSH
65525: CALL_OW 51
// ToLua ( playRanger() ) ;
65529: LD_STRING playRanger()
65531: PPUSH
65532: CALL_OW 559
// p := 0 ;
65536: LD_ADDR_VAR 0 2
65540: PUSH
65541: LD_INT 0
65543: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65544: LD_INT 35
65546: PPUSH
65547: CALL_OW 67
// p := p + 1 ;
65551: LD_ADDR_VAR 0 2
65555: PUSH
65556: LD_VAR 0 2
65560: PUSH
65561: LD_INT 1
65563: PLUS
65564: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65565: LD_VAR 0 3
65569: PPUSH
65570: CALL_OW 256
65574: PUSH
65575: LD_INT 1000
65577: LESS
65578: IFFALSE 65592
// SetLives ( un , 1000 ) ;
65580: LD_VAR 0 3
65584: PPUSH
65585: LD_INT 1000
65587: PPUSH
65588: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65592: LD_VAR 0 3
65596: PPUSH
65597: LD_INT 81
65599: PUSH
65600: LD_OWVAR 2
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 91
65611: PUSH
65612: LD_VAR 0 3
65616: PUSH
65617: LD_INT 30
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PPUSH
65629: CALL_OW 69
65633: PPUSH
65634: LD_VAR 0 3
65638: PPUSH
65639: CALL_OW 74
65643: PPUSH
65644: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65648: LD_VAR 0 2
65652: PUSH
65653: LD_INT 80
65655: GREATER
65656: PUSH
65657: LD_VAR 0 3
65661: PPUSH
65662: CALL_OW 301
65666: OR
65667: IFFALSE 65544
// if un then
65669: LD_VAR 0 3
65673: IFFALSE 65684
// RemoveUnit ( un ) ;
65675: LD_VAR 0 3
65679: PPUSH
65680: CALL_OW 64
// end ;
65684: PPOPN 3
65686: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65687: LD_EXP 97
65691: IFFALSE 65807
65693: GO 65695
65695: DISABLE
65696: LD_INT 0
65698: PPUSH
65699: PPUSH
65700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65701: LD_ADDR_VAR 0 2
65705: PUSH
65706: LD_INT 81
65708: PUSH
65709: LD_OWVAR 2
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 21
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PPUSH
65732: CALL_OW 69
65736: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65737: LD_STRING playComputer()
65739: PPUSH
65740: CALL_OW 559
// if not tmp then
65744: LD_VAR 0 2
65748: NOT
65749: IFFALSE 65753
// exit ;
65751: GO 65807
// for i in tmp do
65753: LD_ADDR_VAR 0 1
65757: PUSH
65758: LD_VAR 0 2
65762: PUSH
65763: FOR_IN
65764: IFFALSE 65805
// for j := 1 to 4 do
65766: LD_ADDR_VAR 0 3
65770: PUSH
65771: DOUBLE
65772: LD_INT 1
65774: DEC
65775: ST_TO_ADDR
65776: LD_INT 4
65778: PUSH
65779: FOR_TO
65780: IFFALSE 65801
// SetSkill ( i , j , 10 ) ;
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 3
65791: PPUSH
65792: LD_INT 10
65794: PPUSH
65795: CALL_OW 237
65799: GO 65779
65801: POP
65802: POP
65803: GO 65763
65805: POP
65806: POP
// end ;
65807: PPOPN 3
65809: END
// every 0 0$1 trigger s30 do var i , tmp ;
65810: LD_EXP 98
65814: IFFALSE 65883
65816: GO 65818
65818: DISABLE
65819: LD_INT 0
65821: PPUSH
65822: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_INT 22
65830: PUSH
65831: LD_OWVAR 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PPUSH
65840: CALL_OW 69
65844: ST_TO_ADDR
// if not tmp then
65845: LD_VAR 0 2
65849: NOT
65850: IFFALSE 65854
// exit ;
65852: GO 65883
// for i in tmp do
65854: LD_ADDR_VAR 0 1
65858: PUSH
65859: LD_VAR 0 2
65863: PUSH
65864: FOR_IN
65865: IFFALSE 65881
// SetLives ( i , 300 ) ;
65867: LD_VAR 0 1
65871: PPUSH
65872: LD_INT 300
65874: PPUSH
65875: CALL_OW 234
65879: GO 65864
65881: POP
65882: POP
// end ;
65883: PPOPN 2
65885: END
// every 0 0$1 trigger s60 do var i , tmp ;
65886: LD_EXP 99
65890: IFFALSE 65959
65892: GO 65894
65894: DISABLE
65895: LD_INT 0
65897: PPUSH
65898: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65899: LD_ADDR_VAR 0 2
65903: PUSH
65904: LD_INT 22
65906: PUSH
65907: LD_OWVAR 2
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PPUSH
65916: CALL_OW 69
65920: ST_TO_ADDR
// if not tmp then
65921: LD_VAR 0 2
65925: NOT
65926: IFFALSE 65930
// exit ;
65928: GO 65959
// for i in tmp do
65930: LD_ADDR_VAR 0 1
65934: PUSH
65935: LD_VAR 0 2
65939: PUSH
65940: FOR_IN
65941: IFFALSE 65957
// SetLives ( i , 600 ) ;
65943: LD_VAR 0 1
65947: PPUSH
65948: LD_INT 600
65950: PPUSH
65951: CALL_OW 234
65955: GO 65940
65957: POP
65958: POP
// end ;
65959: PPOPN 2
65961: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65962: LD_INT 0
65964: PPUSH
// case cmd of 301 :
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 301
65972: DOUBLE
65973: EQUAL
65974: IFTRUE 65978
65976: GO 66010
65978: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65979: LD_VAR 0 6
65983: PPUSH
65984: LD_VAR 0 7
65988: PPUSH
65989: LD_VAR 0 8
65993: PPUSH
65994: LD_VAR 0 4
65998: PPUSH
65999: LD_VAR 0 5
66003: PPUSH
66004: CALL 67219 0 5
66008: GO 66131
66010: LD_INT 302
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66018
66016: GO 66055
66018: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66019: LD_VAR 0 6
66023: PPUSH
66024: LD_VAR 0 7
66028: PPUSH
66029: LD_VAR 0 8
66033: PPUSH
66034: LD_VAR 0 9
66038: PPUSH
66039: LD_VAR 0 4
66043: PPUSH
66044: LD_VAR 0 5
66048: PPUSH
66049: CALL 67310 0 6
66053: GO 66131
66055: LD_INT 303
66057: DOUBLE
66058: EQUAL
66059: IFTRUE 66063
66061: GO 66100
66063: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66064: LD_VAR 0 6
66068: PPUSH
66069: LD_VAR 0 7
66073: PPUSH
66074: LD_VAR 0 8
66078: PPUSH
66079: LD_VAR 0 9
66083: PPUSH
66084: LD_VAR 0 4
66088: PPUSH
66089: LD_VAR 0 5
66093: PPUSH
66094: CALL 66136 0 6
66098: GO 66131
66100: LD_INT 304
66102: DOUBLE
66103: EQUAL
66104: IFTRUE 66108
66106: GO 66130
66108: POP
// hHackTeleport ( unit , x , y ) ; end ;
66109: LD_VAR 0 2
66113: PPUSH
66114: LD_VAR 0 4
66118: PPUSH
66119: LD_VAR 0 5
66123: PPUSH
66124: CALL 67903 0 3
66128: GO 66131
66130: POP
// end ;
66131: LD_VAR 0 12
66135: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66136: LD_INT 0
66138: PPUSH
66139: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66140: LD_VAR 0 1
66144: PUSH
66145: LD_INT 1
66147: LESS
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 3
66156: GREATER
66157: OR
66158: PUSH
66159: LD_VAR 0 5
66163: PPUSH
66164: LD_VAR 0 6
66168: PPUSH
66169: CALL_OW 428
66173: OR
66174: IFFALSE 66178
// exit ;
66176: GO 66906
// uc_side := your_side ;
66178: LD_ADDR_OWVAR 20
66182: PUSH
66183: LD_OWVAR 2
66187: ST_TO_ADDR
// uc_nation := nation ;
66188: LD_ADDR_OWVAR 21
66192: PUSH
66193: LD_VAR 0 1
66197: ST_TO_ADDR
// bc_level = 1 ;
66198: LD_ADDR_OWVAR 43
66202: PUSH
66203: LD_INT 1
66205: ST_TO_ADDR
// case btype of 1 :
66206: LD_VAR 0 2
66210: PUSH
66211: LD_INT 1
66213: DOUBLE
66214: EQUAL
66215: IFTRUE 66219
66217: GO 66230
66219: POP
// bc_type := b_depot ; 2 :
66220: LD_ADDR_OWVAR 42
66224: PUSH
66225: LD_INT 0
66227: ST_TO_ADDR
66228: GO 66850
66230: LD_INT 2
66232: DOUBLE
66233: EQUAL
66234: IFTRUE 66238
66236: GO 66249
66238: POP
// bc_type := b_warehouse ; 3 :
66239: LD_ADDR_OWVAR 42
66243: PUSH
66244: LD_INT 1
66246: ST_TO_ADDR
66247: GO 66850
66249: LD_INT 3
66251: DOUBLE
66252: EQUAL
66253: IFTRUE 66257
66255: GO 66268
66257: POP
// bc_type := b_lab ; 4 .. 9 :
66258: LD_ADDR_OWVAR 42
66262: PUSH
66263: LD_INT 6
66265: ST_TO_ADDR
66266: GO 66850
66268: LD_INT 4
66270: DOUBLE
66271: GREATEREQUAL
66272: IFFALSE 66280
66274: LD_INT 9
66276: DOUBLE
66277: LESSEQUAL
66278: IFTRUE 66282
66280: GO 66342
66282: POP
// begin bc_type := b_lab_half ;
66283: LD_ADDR_OWVAR 42
66287: PUSH
66288: LD_INT 7
66290: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66291: LD_ADDR_OWVAR 44
66295: PUSH
66296: LD_INT 10
66298: PUSH
66299: LD_INT 11
66301: PUSH
66302: LD_INT 12
66304: PUSH
66305: LD_INT 15
66307: PUSH
66308: LD_INT 14
66310: PUSH
66311: LD_INT 13
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: PUSH
66322: LD_VAR 0 2
66326: PUSH
66327: LD_INT 3
66329: MINUS
66330: ARRAY
66331: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66332: LD_ADDR_OWVAR 45
66336: PUSH
66337: LD_INT 9
66339: ST_TO_ADDR
// end ; 10 .. 13 :
66340: GO 66850
66342: LD_INT 10
66344: DOUBLE
66345: GREATEREQUAL
66346: IFFALSE 66354
66348: LD_INT 13
66350: DOUBLE
66351: LESSEQUAL
66352: IFTRUE 66356
66354: GO 66433
66356: POP
// begin bc_type := b_lab_full ;
66357: LD_ADDR_OWVAR 42
66361: PUSH
66362: LD_INT 8
66364: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66365: LD_ADDR_OWVAR 44
66369: PUSH
66370: LD_INT 10
66372: PUSH
66373: LD_INT 12
66375: PUSH
66376: LD_INT 14
66378: PUSH
66379: LD_INT 13
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: PUSH
66388: LD_VAR 0 2
66392: PUSH
66393: LD_INT 9
66395: MINUS
66396: ARRAY
66397: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66398: LD_ADDR_OWVAR 45
66402: PUSH
66403: LD_INT 11
66405: PUSH
66406: LD_INT 15
66408: PUSH
66409: LD_INT 12
66411: PUSH
66412: LD_INT 15
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 9
66428: MINUS
66429: ARRAY
66430: ST_TO_ADDR
// end ; 14 :
66431: GO 66850
66433: LD_INT 14
66435: DOUBLE
66436: EQUAL
66437: IFTRUE 66441
66439: GO 66452
66441: POP
// bc_type := b_workshop ; 15 :
66442: LD_ADDR_OWVAR 42
66446: PUSH
66447: LD_INT 2
66449: ST_TO_ADDR
66450: GO 66850
66452: LD_INT 15
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66460
66458: GO 66471
66460: POP
// bc_type := b_factory ; 16 :
66461: LD_ADDR_OWVAR 42
66465: PUSH
66466: LD_INT 3
66468: ST_TO_ADDR
66469: GO 66850
66471: LD_INT 16
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66479
66477: GO 66490
66479: POP
// bc_type := b_ext_gun ; 17 :
66480: LD_ADDR_OWVAR 42
66484: PUSH
66485: LD_INT 17
66487: ST_TO_ADDR
66488: GO 66850
66490: LD_INT 17
66492: DOUBLE
66493: EQUAL
66494: IFTRUE 66498
66496: GO 66526
66498: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66499: LD_ADDR_OWVAR 42
66503: PUSH
66504: LD_INT 19
66506: PUSH
66507: LD_INT 23
66509: PUSH
66510: LD_INT 19
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: PUSH
66518: LD_VAR 0 1
66522: ARRAY
66523: ST_TO_ADDR
66524: GO 66850
66526: LD_INT 18
66528: DOUBLE
66529: EQUAL
66530: IFTRUE 66534
66532: GO 66545
66534: POP
// bc_type := b_ext_radar ; 19 :
66535: LD_ADDR_OWVAR 42
66539: PUSH
66540: LD_INT 20
66542: ST_TO_ADDR
66543: GO 66850
66545: LD_INT 19
66547: DOUBLE
66548: EQUAL
66549: IFTRUE 66553
66551: GO 66564
66553: POP
// bc_type := b_ext_radio ; 20 :
66554: LD_ADDR_OWVAR 42
66558: PUSH
66559: LD_INT 22
66561: ST_TO_ADDR
66562: GO 66850
66564: LD_INT 20
66566: DOUBLE
66567: EQUAL
66568: IFTRUE 66572
66570: GO 66583
66572: POP
// bc_type := b_ext_siberium ; 21 :
66573: LD_ADDR_OWVAR 42
66577: PUSH
66578: LD_INT 21
66580: ST_TO_ADDR
66581: GO 66850
66583: LD_INT 21
66585: DOUBLE
66586: EQUAL
66587: IFTRUE 66591
66589: GO 66602
66591: POP
// bc_type := b_ext_computer ; 22 :
66592: LD_ADDR_OWVAR 42
66596: PUSH
66597: LD_INT 24
66599: ST_TO_ADDR
66600: GO 66850
66602: LD_INT 22
66604: DOUBLE
66605: EQUAL
66606: IFTRUE 66610
66608: GO 66621
66610: POP
// bc_type := b_ext_track ; 23 :
66611: LD_ADDR_OWVAR 42
66615: PUSH
66616: LD_INT 16
66618: ST_TO_ADDR
66619: GO 66850
66621: LD_INT 23
66623: DOUBLE
66624: EQUAL
66625: IFTRUE 66629
66627: GO 66640
66629: POP
// bc_type := b_ext_laser ; 24 :
66630: LD_ADDR_OWVAR 42
66634: PUSH
66635: LD_INT 25
66637: ST_TO_ADDR
66638: GO 66850
66640: LD_INT 24
66642: DOUBLE
66643: EQUAL
66644: IFTRUE 66648
66646: GO 66659
66648: POP
// bc_type := b_control_tower ; 25 :
66649: LD_ADDR_OWVAR 42
66653: PUSH
66654: LD_INT 36
66656: ST_TO_ADDR
66657: GO 66850
66659: LD_INT 25
66661: DOUBLE
66662: EQUAL
66663: IFTRUE 66667
66665: GO 66678
66667: POP
// bc_type := b_breastwork ; 26 :
66668: LD_ADDR_OWVAR 42
66672: PUSH
66673: LD_INT 31
66675: ST_TO_ADDR
66676: GO 66850
66678: LD_INT 26
66680: DOUBLE
66681: EQUAL
66682: IFTRUE 66686
66684: GO 66697
66686: POP
// bc_type := b_bunker ; 27 :
66687: LD_ADDR_OWVAR 42
66691: PUSH
66692: LD_INT 32
66694: ST_TO_ADDR
66695: GO 66850
66697: LD_INT 27
66699: DOUBLE
66700: EQUAL
66701: IFTRUE 66705
66703: GO 66716
66705: POP
// bc_type := b_turret ; 28 :
66706: LD_ADDR_OWVAR 42
66710: PUSH
66711: LD_INT 33
66713: ST_TO_ADDR
66714: GO 66850
66716: LD_INT 28
66718: DOUBLE
66719: EQUAL
66720: IFTRUE 66724
66722: GO 66735
66724: POP
// bc_type := b_armoury ; 29 :
66725: LD_ADDR_OWVAR 42
66729: PUSH
66730: LD_INT 4
66732: ST_TO_ADDR
66733: GO 66850
66735: LD_INT 29
66737: DOUBLE
66738: EQUAL
66739: IFTRUE 66743
66741: GO 66754
66743: POP
// bc_type := b_barracks ; 30 :
66744: LD_ADDR_OWVAR 42
66748: PUSH
66749: LD_INT 5
66751: ST_TO_ADDR
66752: GO 66850
66754: LD_INT 30
66756: DOUBLE
66757: EQUAL
66758: IFTRUE 66762
66760: GO 66773
66762: POP
// bc_type := b_solar_power ; 31 :
66763: LD_ADDR_OWVAR 42
66767: PUSH
66768: LD_INT 27
66770: ST_TO_ADDR
66771: GO 66850
66773: LD_INT 31
66775: DOUBLE
66776: EQUAL
66777: IFTRUE 66781
66779: GO 66792
66781: POP
// bc_type := b_oil_power ; 32 :
66782: LD_ADDR_OWVAR 42
66786: PUSH
66787: LD_INT 26
66789: ST_TO_ADDR
66790: GO 66850
66792: LD_INT 32
66794: DOUBLE
66795: EQUAL
66796: IFTRUE 66800
66798: GO 66811
66800: POP
// bc_type := b_siberite_power ; 33 :
66801: LD_ADDR_OWVAR 42
66805: PUSH
66806: LD_INT 28
66808: ST_TO_ADDR
66809: GO 66850
66811: LD_INT 33
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66819
66817: GO 66830
66819: POP
// bc_type := b_oil_mine ; 34 :
66820: LD_ADDR_OWVAR 42
66824: PUSH
66825: LD_INT 29
66827: ST_TO_ADDR
66828: GO 66850
66830: LD_INT 34
66832: DOUBLE
66833: EQUAL
66834: IFTRUE 66838
66836: GO 66849
66838: POP
// bc_type := b_siberite_mine ; end ;
66839: LD_ADDR_OWVAR 42
66843: PUSH
66844: LD_INT 30
66846: ST_TO_ADDR
66847: GO 66850
66849: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66850: LD_ADDR_VAR 0 8
66854: PUSH
66855: LD_VAR 0 5
66859: PPUSH
66860: LD_VAR 0 6
66864: PPUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: CALL_OW 47
66874: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66875: LD_OWVAR 42
66879: PUSH
66880: LD_INT 32
66882: PUSH
66883: LD_INT 33
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: IN
66890: IFFALSE 66906
// PlaceWeaponTurret ( b , weapon ) ;
66892: LD_VAR 0 8
66896: PPUSH
66897: LD_VAR 0 4
66901: PPUSH
66902: CALL_OW 431
// end ;
66906: LD_VAR 0 7
66910: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
66915: PPUSH
66916: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66917: LD_ADDR_VAR 0 4
66921: PUSH
66922: LD_INT 22
66924: PUSH
66925: LD_OWVAR 2
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 30
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 30
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PPUSH
66966: CALL_OW 69
66970: ST_TO_ADDR
// if not tmp then
66971: LD_VAR 0 4
66975: NOT
66976: IFFALSE 66980
// exit ;
66978: GO 67039
// for i in tmp do
66980: LD_ADDR_VAR 0 2
66984: PUSH
66985: LD_VAR 0 4
66989: PUSH
66990: FOR_IN
66991: IFFALSE 67037
// for j = 1 to 3 do
66993: LD_ADDR_VAR 0 3
66997: PUSH
66998: DOUBLE
66999: LD_INT 1
67001: DEC
67002: ST_TO_ADDR
67003: LD_INT 3
67005: PUSH
67006: FOR_TO
67007: IFFALSE 67033
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67009: LD_VAR 0 2
67013: PPUSH
67014: CALL_OW 274
67018: PPUSH
67019: LD_VAR 0 3
67023: PPUSH
67024: LD_INT 99999
67026: PPUSH
67027: CALL_OW 277
67031: GO 67006
67033: POP
67034: POP
67035: GO 66990
67037: POP
67038: POP
// end ;
67039: LD_VAR 0 1
67043: RET
// export function hHackSetLevel10 ; var i , j ; begin
67044: LD_INT 0
67046: PPUSH
67047: PPUSH
67048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67049: LD_ADDR_VAR 0 2
67053: PUSH
67054: LD_INT 21
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PPUSH
67064: CALL_OW 69
67068: PUSH
67069: FOR_IN
67070: IFFALSE 67122
// if IsSelected ( i ) then
67072: LD_VAR 0 2
67076: PPUSH
67077: CALL_OW 306
67081: IFFALSE 67120
// begin for j := 1 to 4 do
67083: LD_ADDR_VAR 0 3
67087: PUSH
67088: DOUBLE
67089: LD_INT 1
67091: DEC
67092: ST_TO_ADDR
67093: LD_INT 4
67095: PUSH
67096: FOR_TO
67097: IFFALSE 67118
// SetSkill ( i , j , 10 ) ;
67099: LD_VAR 0 2
67103: PPUSH
67104: LD_VAR 0 3
67108: PPUSH
67109: LD_INT 10
67111: PPUSH
67112: CALL_OW 237
67116: GO 67096
67118: POP
67119: POP
// end ;
67120: GO 67069
67122: POP
67123: POP
// end ;
67124: LD_VAR 0 1
67128: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67129: LD_INT 0
67131: PPUSH
67132: PPUSH
67133: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67134: LD_ADDR_VAR 0 2
67138: PUSH
67139: LD_INT 22
67141: PUSH
67142: LD_OWVAR 2
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 21
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PPUSH
67165: CALL_OW 69
67169: PUSH
67170: FOR_IN
67171: IFFALSE 67212
// begin for j := 1 to 4 do
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: DOUBLE
67179: LD_INT 1
67181: DEC
67182: ST_TO_ADDR
67183: LD_INT 4
67185: PUSH
67186: FOR_TO
67187: IFFALSE 67208
// SetSkill ( i , j , 10 ) ;
67189: LD_VAR 0 2
67193: PPUSH
67194: LD_VAR 0 3
67198: PPUSH
67199: LD_INT 10
67201: PPUSH
67202: CALL_OW 237
67206: GO 67186
67208: POP
67209: POP
// end ;
67210: GO 67170
67212: POP
67213: POP
// end ;
67214: LD_VAR 0 1
67218: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67219: LD_INT 0
67221: PPUSH
// uc_side := your_side ;
67222: LD_ADDR_OWVAR 20
67226: PUSH
67227: LD_OWVAR 2
67231: ST_TO_ADDR
// uc_nation := nation ;
67232: LD_ADDR_OWVAR 21
67236: PUSH
67237: LD_VAR 0 1
67241: ST_TO_ADDR
// InitHc ;
67242: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67246: LD_INT 0
67248: PPUSH
67249: LD_VAR 0 2
67253: PPUSH
67254: LD_VAR 0 3
67258: PPUSH
67259: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67263: LD_VAR 0 4
67267: PPUSH
67268: LD_VAR 0 5
67272: PPUSH
67273: CALL_OW 428
67277: PUSH
67278: LD_INT 0
67280: EQUAL
67281: IFFALSE 67305
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67283: CALL_OW 44
67287: PPUSH
67288: LD_VAR 0 4
67292: PPUSH
67293: LD_VAR 0 5
67297: PPUSH
67298: LD_INT 1
67300: PPUSH
67301: CALL_OW 48
// end ;
67305: LD_VAR 0 6
67309: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67310: LD_INT 0
67312: PPUSH
67313: PPUSH
// uc_side := your_side ;
67314: LD_ADDR_OWVAR 20
67318: PUSH
67319: LD_OWVAR 2
67323: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67324: LD_VAR 0 1
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: LD_INT 4
67340: PUSH
67341: LD_INT 5
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: IN
67351: IFFALSE 67363
// uc_nation := nation_american else
67353: LD_ADDR_OWVAR 21
67357: PUSH
67358: LD_INT 1
67360: ST_TO_ADDR
67361: GO 67406
// if chassis in [ 11 , 12 , 13 , 14 ] then
67363: LD_VAR 0 1
67367: PUSH
67368: LD_INT 11
67370: PUSH
67371: LD_INT 12
67373: PUSH
67374: LD_INT 13
67376: PUSH
67377: LD_INT 14
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: IN
67386: IFFALSE 67398
// uc_nation := nation_arabian else
67388: LD_ADDR_OWVAR 21
67392: PUSH
67393: LD_INT 2
67395: ST_TO_ADDR
67396: GO 67406
// uc_nation := nation_russian ;
67398: LD_ADDR_OWVAR 21
67402: PUSH
67403: LD_INT 3
67405: ST_TO_ADDR
// vc_chassis := chassis ;
67406: LD_ADDR_OWVAR 37
67410: PUSH
67411: LD_VAR 0 1
67415: ST_TO_ADDR
// vc_engine := engine ;
67416: LD_ADDR_OWVAR 39
67420: PUSH
67421: LD_VAR 0 2
67425: ST_TO_ADDR
// vc_control := control ;
67426: LD_ADDR_OWVAR 38
67430: PUSH
67431: LD_VAR 0 3
67435: ST_TO_ADDR
// vc_weapon := weapon ;
67436: LD_ADDR_OWVAR 40
67440: PUSH
67441: LD_VAR 0 4
67445: ST_TO_ADDR
// un := CreateVehicle ;
67446: LD_ADDR_VAR 0 8
67450: PUSH
67451: CALL_OW 45
67455: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67456: LD_VAR 0 8
67460: PPUSH
67461: LD_INT 0
67463: PPUSH
67464: LD_INT 5
67466: PPUSH
67467: CALL_OW 12
67471: PPUSH
67472: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67476: LD_VAR 0 8
67480: PPUSH
67481: LD_VAR 0 5
67485: PPUSH
67486: LD_VAR 0 6
67490: PPUSH
67491: LD_INT 1
67493: PPUSH
67494: CALL_OW 48
// end ;
67498: LD_VAR 0 7
67502: RET
// export hInvincible ; every 1 do
67503: GO 67505
67505: DISABLE
// hInvincible := [ ] ;
67506: LD_ADDR_EXP 100
67510: PUSH
67511: EMPTY
67512: ST_TO_ADDR
67513: END
// every 10 do var i ;
67514: GO 67516
67516: DISABLE
67517: LD_INT 0
67519: PPUSH
// begin enable ;
67520: ENABLE
// if not hInvincible then
67521: LD_EXP 100
67525: NOT
67526: IFFALSE 67530
// exit ;
67528: GO 67574
// for i in hInvincible do
67530: LD_ADDR_VAR 0 1
67534: PUSH
67535: LD_EXP 100
67539: PUSH
67540: FOR_IN
67541: IFFALSE 67572
// if GetLives ( i ) < 1000 then
67543: LD_VAR 0 1
67547: PPUSH
67548: CALL_OW 256
67552: PUSH
67553: LD_INT 1000
67555: LESS
67556: IFFALSE 67570
// SetLives ( i , 1000 ) ;
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_INT 1000
67565: PPUSH
67566: CALL_OW 234
67570: GO 67540
67572: POP
67573: POP
// end ;
67574: PPOPN 1
67576: END
// export function hHackInvincible ; var i ; begin
67577: LD_INT 0
67579: PPUSH
67580: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67581: LD_ADDR_VAR 0 2
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 21
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 21
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: PPUSH
67614: CALL_OW 69
67618: PUSH
67619: FOR_IN
67620: IFFALSE 67681
// if IsSelected ( i ) then
67622: LD_VAR 0 2
67626: PPUSH
67627: CALL_OW 306
67631: IFFALSE 67679
// begin if i in hInvincible then
67633: LD_VAR 0 2
67637: PUSH
67638: LD_EXP 100
67642: IN
67643: IFFALSE 67663
// hInvincible := hInvincible diff i else
67645: LD_ADDR_EXP 100
67649: PUSH
67650: LD_EXP 100
67654: PUSH
67655: LD_VAR 0 2
67659: DIFF
67660: ST_TO_ADDR
67661: GO 67679
// hInvincible := hInvincible union i ;
67663: LD_ADDR_EXP 100
67667: PUSH
67668: LD_EXP 100
67672: PUSH
67673: LD_VAR 0 2
67677: UNION
67678: ST_TO_ADDR
// end ;
67679: GO 67619
67681: POP
67682: POP
// end ;
67683: LD_VAR 0 1
67687: RET
// export function hHackInvisible ; var i , j ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67693: LD_ADDR_VAR 0 2
67697: PUSH
67698: LD_INT 21
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PPUSH
67708: CALL_OW 69
67712: PUSH
67713: FOR_IN
67714: IFFALSE 67738
// if IsSelected ( i ) then
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 306
67725: IFFALSE 67736
// ComForceInvisible ( i ) ;
67727: LD_VAR 0 2
67731: PPUSH
67732: CALL_OW 496
67736: GO 67713
67738: POP
67739: POP
// end ;
67740: LD_VAR 0 1
67744: RET
// export function hHackChangeYourSide ; begin
67745: LD_INT 0
67747: PPUSH
// if your_side = 8 then
67748: LD_OWVAR 2
67752: PUSH
67753: LD_INT 8
67755: EQUAL
67756: IFFALSE 67768
// your_side := 0 else
67758: LD_ADDR_OWVAR 2
67762: PUSH
67763: LD_INT 0
67765: ST_TO_ADDR
67766: GO 67782
// your_side := your_side + 1 ;
67768: LD_ADDR_OWVAR 2
67772: PUSH
67773: LD_OWVAR 2
67777: PUSH
67778: LD_INT 1
67780: PLUS
67781: ST_TO_ADDR
// end ;
67782: LD_VAR 0 1
67786: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67787: LD_INT 0
67789: PPUSH
67790: PPUSH
67791: PPUSH
// for i in all_units do
67792: LD_ADDR_VAR 0 2
67796: PUSH
67797: LD_OWVAR 3
67801: PUSH
67802: FOR_IN
67803: IFFALSE 67881
// if IsSelected ( i ) then
67805: LD_VAR 0 2
67809: PPUSH
67810: CALL_OW 306
67814: IFFALSE 67879
// begin j := GetSide ( i ) ;
67816: LD_ADDR_VAR 0 3
67820: PUSH
67821: LD_VAR 0 2
67825: PPUSH
67826: CALL_OW 255
67830: ST_TO_ADDR
// if j = 8 then
67831: LD_VAR 0 3
67835: PUSH
67836: LD_INT 8
67838: EQUAL
67839: IFFALSE 67851
// j := 0 else
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_INT 0
67848: ST_TO_ADDR
67849: GO 67865
// j := j + 1 ;
67851: LD_ADDR_VAR 0 3
67855: PUSH
67856: LD_VAR 0 3
67860: PUSH
67861: LD_INT 1
67863: PLUS
67864: ST_TO_ADDR
// SetSide ( i , j ) ;
67865: LD_VAR 0 2
67869: PPUSH
67870: LD_VAR 0 3
67874: PPUSH
67875: CALL_OW 235
// end ;
67879: GO 67802
67881: POP
67882: POP
// end ;
67883: LD_VAR 0 1
67887: RET
// export function hHackFog ; begin
67888: LD_INT 0
67890: PPUSH
// FogOff ( true ) ;
67891: LD_INT 1
67893: PPUSH
67894: CALL_OW 344
// end ;
67898: LD_VAR 0 1
67902: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67903: LD_INT 0
67905: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67906: LD_VAR 0 1
67910: PPUSH
67911: LD_VAR 0 2
67915: PPUSH
67916: LD_VAR 0 3
67920: PPUSH
67921: LD_INT 1
67923: PPUSH
67924: LD_INT 1
67926: PPUSH
67927: CALL_OW 483
// CenterOnXY ( x , y ) ;
67931: LD_VAR 0 2
67935: PPUSH
67936: LD_VAR 0 3
67940: PPUSH
67941: CALL_OW 84
// end ;
67945: LD_VAR 0 4
67949: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67950: LD_INT 0
67952: PPUSH
67953: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67954: LD_VAR 0 1
67958: NOT
67959: PUSH
67960: LD_VAR 0 2
67964: PPUSH
67965: LD_VAR 0 3
67969: PPUSH
67970: CALL_OW 488
67974: NOT
67975: OR
67976: PUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 266
67986: PUSH
67987: LD_INT 3
67989: NONEQUAL
67990: PUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: CALL_OW 247
68000: PUSH
68001: LD_INT 1
68003: EQUAL
68004: NOT
68005: AND
68006: OR
68007: IFFALSE 68011
// exit ;
68009: GO 68160
// if GetType ( factory ) = unit_human then
68011: LD_VAR 0 1
68015: PPUSH
68016: CALL_OW 247
68020: PUSH
68021: LD_INT 1
68023: EQUAL
68024: IFFALSE 68041
// factory := IsInUnit ( factory ) ;
68026: LD_ADDR_VAR 0 1
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 310
68040: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68041: LD_VAR 0 1
68045: PPUSH
68046: CALL_OW 266
68050: PUSH
68051: LD_INT 3
68053: NONEQUAL
68054: IFFALSE 68058
// exit ;
68056: GO 68160
// if HexInfo ( x , y ) = factory then
68058: LD_VAR 0 2
68062: PPUSH
68063: LD_VAR 0 3
68067: PPUSH
68068: CALL_OW 428
68072: PUSH
68073: LD_VAR 0 1
68077: EQUAL
68078: IFFALSE 68105
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68080: LD_ADDR_EXP 101
68084: PUSH
68085: LD_EXP 101
68089: PPUSH
68090: LD_VAR 0 1
68094: PPUSH
68095: LD_INT 0
68097: PPUSH
68098: CALL_OW 1
68102: ST_TO_ADDR
68103: GO 68156
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68105: LD_ADDR_EXP 101
68109: PUSH
68110: LD_EXP 101
68114: PPUSH
68115: LD_VAR 0 1
68119: PPUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: CALL_OW 255
68129: PUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_VAR 0 2
68139: PUSH
68140: LD_VAR 0 3
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: PPUSH
68151: CALL_OW 1
68155: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68156: CALL 68165 0 0
// end ;
68160: LD_VAR 0 4
68164: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
68169: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68170: LD_STRING resetFactoryWaypoint();
68172: PPUSH
68173: CALL_OW 559
// if factoryWaypoints then
68177: LD_EXP 101
68181: IFFALSE 68307
// begin list := PrepareArray ( factoryWaypoints ) ;
68183: LD_ADDR_VAR 0 3
68187: PUSH
68188: LD_EXP 101
68192: PPUSH
68193: CALL 44335 0 1
68197: ST_TO_ADDR
// for i := 1 to list do
68198: LD_ADDR_VAR 0 2
68202: PUSH
68203: DOUBLE
68204: LD_INT 1
68206: DEC
68207: ST_TO_ADDR
68208: LD_VAR 0 3
68212: PUSH
68213: FOR_TO
68214: IFFALSE 68305
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68216: LD_STRING setFactoryWaypointXY(
68218: PUSH
68219: LD_VAR 0 3
68223: PUSH
68224: LD_VAR 0 2
68228: ARRAY
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: STR
68234: PUSH
68235: LD_STRING ,
68237: STR
68238: PUSH
68239: LD_VAR 0 3
68243: PUSH
68244: LD_VAR 0 2
68248: ARRAY
68249: PUSH
68250: LD_INT 2
68252: ARRAY
68253: STR
68254: PUSH
68255: LD_STRING ,
68257: STR
68258: PUSH
68259: LD_VAR 0 3
68263: PUSH
68264: LD_VAR 0 2
68268: ARRAY
68269: PUSH
68270: LD_INT 3
68272: ARRAY
68273: STR
68274: PUSH
68275: LD_STRING ,
68277: STR
68278: PUSH
68279: LD_VAR 0 3
68283: PUSH
68284: LD_VAR 0 2
68288: ARRAY
68289: PUSH
68290: LD_INT 4
68292: ARRAY
68293: STR
68294: PUSH
68295: LD_STRING )
68297: STR
68298: PPUSH
68299: CALL_OW 559
68303: GO 68213
68305: POP
68306: POP
// end ; end ;
68307: LD_VAR 0 1
68311: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68312: LD_INT 0
68314: PPUSH
// if HexInfo ( x , y ) = warehouse then
68315: LD_VAR 0 2
68319: PPUSH
68320: LD_VAR 0 3
68324: PPUSH
68325: CALL_OW 428
68329: PUSH
68330: LD_VAR 0 1
68334: EQUAL
68335: IFFALSE 68362
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68337: LD_ADDR_EXP 102
68341: PUSH
68342: LD_EXP 102
68346: PPUSH
68347: LD_VAR 0 1
68351: PPUSH
68352: LD_INT 0
68354: PPUSH
68355: CALL_OW 1
68359: ST_TO_ADDR
68360: GO 68413
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68362: LD_ADDR_EXP 102
68366: PUSH
68367: LD_EXP 102
68371: PPUSH
68372: LD_VAR 0 1
68376: PPUSH
68377: LD_VAR 0 1
68381: PPUSH
68382: CALL_OW 255
68386: PUSH
68387: LD_VAR 0 1
68391: PUSH
68392: LD_VAR 0 2
68396: PUSH
68397: LD_VAR 0 3
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: PPUSH
68408: CALL_OW 1
68412: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68413: CALL 68422 0 0
// end ;
68417: LD_VAR 0 4
68421: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68422: LD_INT 0
68424: PPUSH
68425: PPUSH
68426: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68427: LD_STRING resetWarehouseGatheringPoints();
68429: PPUSH
68430: CALL_OW 559
// if warehouseGatheringPoints then
68434: LD_EXP 102
68438: IFFALSE 68564
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68440: LD_ADDR_VAR 0 3
68444: PUSH
68445: LD_EXP 102
68449: PPUSH
68450: CALL 44335 0 1
68454: ST_TO_ADDR
// for i := 1 to list do
68455: LD_ADDR_VAR 0 2
68459: PUSH
68460: DOUBLE
68461: LD_INT 1
68463: DEC
68464: ST_TO_ADDR
68465: LD_VAR 0 3
68469: PUSH
68470: FOR_TO
68471: IFFALSE 68562
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68473: LD_STRING setWarehouseGatheringPointXY(
68475: PUSH
68476: LD_VAR 0 3
68480: PUSH
68481: LD_VAR 0 2
68485: ARRAY
68486: PUSH
68487: LD_INT 1
68489: ARRAY
68490: STR
68491: PUSH
68492: LD_STRING ,
68494: STR
68495: PUSH
68496: LD_VAR 0 3
68500: PUSH
68501: LD_VAR 0 2
68505: ARRAY
68506: PUSH
68507: LD_INT 2
68509: ARRAY
68510: STR
68511: PUSH
68512: LD_STRING ,
68514: STR
68515: PUSH
68516: LD_VAR 0 3
68520: PUSH
68521: LD_VAR 0 2
68525: ARRAY
68526: PUSH
68527: LD_INT 3
68529: ARRAY
68530: STR
68531: PUSH
68532: LD_STRING ,
68534: STR
68535: PUSH
68536: LD_VAR 0 3
68540: PUSH
68541: LD_VAR 0 2
68545: ARRAY
68546: PUSH
68547: LD_INT 4
68549: ARRAY
68550: STR
68551: PUSH
68552: LD_STRING )
68554: STR
68555: PPUSH
68556: CALL_OW 559
68560: GO 68470
68562: POP
68563: POP
// end ; end ;
68564: LD_VAR 0 1
68568: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68569: LD_EXP 102
68573: IFFALSE 69258
68575: GO 68577
68577: DISABLE
68578: LD_INT 0
68580: PPUSH
68581: PPUSH
68582: PPUSH
68583: PPUSH
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
// begin enable ;
68589: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68590: LD_ADDR_VAR 0 3
68594: PUSH
68595: LD_EXP 102
68599: PPUSH
68600: CALL 44335 0 1
68604: ST_TO_ADDR
// if not list then
68605: LD_VAR 0 3
68609: NOT
68610: IFFALSE 68614
// exit ;
68612: GO 69258
// for i := 1 to list do
68614: LD_ADDR_VAR 0 1
68618: PUSH
68619: DOUBLE
68620: LD_INT 1
68622: DEC
68623: ST_TO_ADDR
68624: LD_VAR 0 3
68628: PUSH
68629: FOR_TO
68630: IFFALSE 69256
// begin depot := list [ i ] [ 2 ] ;
68632: LD_ADDR_VAR 0 8
68636: PUSH
68637: LD_VAR 0 3
68641: PUSH
68642: LD_VAR 0 1
68646: ARRAY
68647: PUSH
68648: LD_INT 2
68650: ARRAY
68651: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68652: LD_ADDR_VAR 0 5
68656: PUSH
68657: LD_VAR 0 3
68661: PUSH
68662: LD_VAR 0 1
68666: ARRAY
68667: PUSH
68668: LD_INT 1
68670: ARRAY
68671: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68672: LD_VAR 0 8
68676: PPUSH
68677: CALL_OW 301
68681: PUSH
68682: LD_VAR 0 5
68686: PUSH
68687: LD_VAR 0 8
68691: PPUSH
68692: CALL_OW 255
68696: NONEQUAL
68697: OR
68698: IFFALSE 68727
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68700: LD_ADDR_EXP 102
68704: PUSH
68705: LD_EXP 102
68709: PPUSH
68710: LD_VAR 0 8
68714: PPUSH
68715: LD_INT 0
68717: PPUSH
68718: CALL_OW 1
68722: ST_TO_ADDR
// exit ;
68723: POP
68724: POP
68725: GO 69258
// end ; x := list [ i ] [ 3 ] ;
68727: LD_ADDR_VAR 0 6
68731: PUSH
68732: LD_VAR 0 3
68736: PUSH
68737: LD_VAR 0 1
68741: ARRAY
68742: PUSH
68743: LD_INT 3
68745: ARRAY
68746: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68747: LD_ADDR_VAR 0 7
68751: PUSH
68752: LD_VAR 0 3
68756: PUSH
68757: LD_VAR 0 1
68761: ARRAY
68762: PUSH
68763: LD_INT 4
68765: ARRAY
68766: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68767: LD_ADDR_VAR 0 9
68771: PUSH
68772: LD_VAR 0 6
68776: PPUSH
68777: LD_VAR 0 7
68781: PPUSH
68782: LD_INT 16
68784: PPUSH
68785: CALL 42919 0 3
68789: ST_TO_ADDR
// if not cratesNearbyPoint then
68790: LD_VAR 0 9
68794: NOT
68795: IFFALSE 68801
// exit ;
68797: POP
68798: POP
68799: GO 69258
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68801: LD_ADDR_VAR 0 4
68805: PUSH
68806: LD_INT 22
68808: PUSH
68809: LD_VAR 0 5
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 3
68820: PUSH
68821: LD_INT 60
68823: PUSH
68824: EMPTY
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 91
68833: PUSH
68834: LD_VAR 0 8
68838: PUSH
68839: LD_INT 6
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: LD_INT 25
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 25
68862: PUSH
68863: LD_INT 16
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: PPUSH
68881: CALL_OW 69
68885: PUSH
68886: LD_VAR 0 8
68890: PPUSH
68891: CALL_OW 313
68895: PPUSH
68896: LD_INT 3
68898: PUSH
68899: LD_INT 60
68901: PUSH
68902: EMPTY
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: LD_INT 25
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 25
68924: PUSH
68925: LD_INT 16
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PPUSH
68941: CALL_OW 72
68945: UNION
68946: ST_TO_ADDR
// if tmp then
68947: LD_VAR 0 4
68951: IFFALSE 69031
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68953: LD_ADDR_VAR 0 4
68957: PUSH
68958: LD_VAR 0 4
68962: PPUSH
68963: LD_INT 3
68965: PPUSH
68966: CALL 40888 0 2
68970: ST_TO_ADDR
// for j in tmp do
68971: LD_ADDR_VAR 0 2
68975: PUSH
68976: LD_VAR 0 4
68980: PUSH
68981: FOR_IN
68982: IFFALSE 69025
// begin if IsInUnit ( j ) then
68984: LD_VAR 0 2
68988: PPUSH
68989: CALL_OW 310
68993: IFFALSE 69004
// ComExit ( j ) ;
68995: LD_VAR 0 2
68999: PPUSH
69000: CALL 40971 0 1
// AddComCollect ( j , x , y ) ;
69004: LD_VAR 0 2
69008: PPUSH
69009: LD_VAR 0 6
69013: PPUSH
69014: LD_VAR 0 7
69018: PPUSH
69019: CALL_OW 177
// end ;
69023: GO 68981
69025: POP
69026: POP
// exit ;
69027: POP
69028: POP
69029: GO 69258
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69031: LD_ADDR_VAR 0 4
69035: PUSH
69036: LD_INT 22
69038: PUSH
69039: LD_VAR 0 5
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 91
69050: PUSH
69051: LD_VAR 0 8
69055: PUSH
69056: LD_INT 8
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 2
69066: PUSH
69067: LD_INT 34
69069: PUSH
69070: LD_INT 12
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 34
69079: PUSH
69080: LD_INT 51
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 34
69089: PUSH
69090: LD_INT 32
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 34
69099: PUSH
69100: LD_INT 89
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PPUSH
69119: CALL_OW 69
69123: ST_TO_ADDR
// if tmp then
69124: LD_VAR 0 4
69128: IFFALSE 69254
// begin for j in tmp do
69130: LD_ADDR_VAR 0 2
69134: PUSH
69135: LD_VAR 0 4
69139: PUSH
69140: FOR_IN
69141: IFFALSE 69252
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69143: LD_VAR 0 2
69147: PPUSH
69148: CALL_OW 262
69152: PUSH
69153: LD_INT 3
69155: EQUAL
69156: PUSH
69157: LD_VAR 0 2
69161: PPUSH
69162: CALL_OW 261
69166: PUSH
69167: LD_INT 20
69169: GREATER
69170: OR
69171: PUSH
69172: LD_VAR 0 2
69176: PPUSH
69177: CALL_OW 314
69181: NOT
69182: AND
69183: PUSH
69184: LD_VAR 0 2
69188: PPUSH
69189: CALL_OW 263
69193: PUSH
69194: LD_INT 1
69196: NONEQUAL
69197: PUSH
69198: LD_VAR 0 2
69202: PPUSH
69203: CALL_OW 311
69207: OR
69208: AND
69209: IFFALSE 69250
// begin ComCollect ( j , x , y ) ;
69211: LD_VAR 0 2
69215: PPUSH
69216: LD_VAR 0 6
69220: PPUSH
69221: LD_VAR 0 7
69225: PPUSH
69226: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69230: LD_VAR 0 2
69234: PPUSH
69235: LD_VAR 0 8
69239: PPUSH
69240: CALL_OW 172
// exit ;
69244: POP
69245: POP
69246: POP
69247: POP
69248: GO 69258
// end ;
69250: GO 69140
69252: POP
69253: POP
// end ; end ;
69254: GO 68629
69256: POP
69257: POP
// end ; end_of_file
69258: PPOPN 9
69260: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69261: LD_VAR 0 1
69265: PUSH
69266: LD_INT 200
69268: DOUBLE
69269: GREATEREQUAL
69270: IFFALSE 69278
69272: LD_INT 299
69274: DOUBLE
69275: LESSEQUAL
69276: IFTRUE 69280
69278: GO 69312
69280: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69281: LD_VAR 0 1
69285: PPUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: LD_VAR 0 3
69295: PPUSH
69296: LD_VAR 0 4
69300: PPUSH
69301: LD_VAR 0 5
69305: PPUSH
69306: CALL 69966 0 5
69310: GO 69389
69312: LD_INT 300
69314: DOUBLE
69315: GREATEREQUAL
69316: IFFALSE 69324
69318: LD_INT 399
69320: DOUBLE
69321: LESSEQUAL
69322: IFTRUE 69326
69324: GO 69388
69326: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69327: LD_VAR 0 1
69331: PPUSH
69332: LD_VAR 0 2
69336: PPUSH
69337: LD_VAR 0 3
69341: PPUSH
69342: LD_VAR 0 4
69346: PPUSH
69347: LD_VAR 0 5
69351: PPUSH
69352: LD_VAR 0 6
69356: PPUSH
69357: LD_VAR 0 7
69361: PPUSH
69362: LD_VAR 0 8
69366: PPUSH
69367: LD_VAR 0 9
69371: PPUSH
69372: LD_VAR 0 10
69376: PPUSH
69377: LD_VAR 0 11
69381: PPUSH
69382: CALL 65962 0 11
69386: GO 69389
69388: POP
// end ;
69389: PPOPN 11
69391: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69392: LD_VAR 0 1
69396: PPUSH
69397: LD_VAR 0 2
69401: PPUSH
69402: LD_VAR 0 3
69406: PPUSH
69407: LD_VAR 0 4
69411: PPUSH
69412: LD_VAR 0 5
69416: PPUSH
69417: CALL 69474 0 5
// end ; end_of_file
69421: PPOPN 5
69423: END
// export function SOS_UnitDestroyed ( un ) ; begin
69424: LD_INT 0
69426: PPUSH
// ComRadiation ( un ) ;
69427: LD_VAR 0 1
69431: PPUSH
69432: CALL 70370 0 1
// end ;
69436: LD_VAR 0 2
69440: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69441: LD_INT 0
69443: PPUSH
// ComRadiation ( un ) ;
69444: LD_VAR 0 1
69448: PPUSH
69449: CALL 70370 0 1
// end ;
69453: LD_VAR 0 2
69457: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69458: LD_INT 0
69460: PPUSH
// end ;
69461: LD_VAR 0 4
69465: RET
// export function SOS_Command ( cmd ) ; begin
69466: LD_INT 0
69468: PPUSH
// end ;
69469: LD_VAR 0 2
69473: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69474: LD_INT 0
69476: PPUSH
// end ;
69477: LD_VAR 0 6
69481: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69482: LD_INT 0
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
// if not vehicle or not factory then
69488: LD_VAR 0 1
69492: NOT
69493: PUSH
69494: LD_VAR 0 2
69498: NOT
69499: OR
69500: IFFALSE 69504
// exit ;
69502: GO 69961
// if factoryWaypoints >= factory then
69504: LD_EXP 101
69508: PUSH
69509: LD_VAR 0 2
69513: GREATEREQUAL
69514: IFFALSE 69961
// if factoryWaypoints [ factory ] then
69516: LD_EXP 101
69520: PUSH
69521: LD_VAR 0 2
69525: ARRAY
69526: IFFALSE 69961
// begin if GetControl ( vehicle ) = control_manual then
69528: LD_VAR 0 1
69532: PPUSH
69533: CALL_OW 263
69537: PUSH
69538: LD_INT 1
69540: EQUAL
69541: IFFALSE 69848
// begin driver := IsDrivenBy ( vehicle ) ;
69543: LD_ADDR_VAR 0 5
69547: PUSH
69548: LD_VAR 0 1
69552: PPUSH
69553: CALL_OW 311
69557: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69558: LD_ADDR_VAR 0 4
69562: PUSH
69563: LD_VAR 0 5
69567: PPUSH
69568: CALL_OW 110
69572: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69573: LD_VAR 0 4
69577: PUSH
69578: LD_INT 501
69580: EQUAL
69581: PUSH
69582: LD_VAR 0 1
69586: PPUSH
69587: CALL_OW 110
69591: PUSH
69592: LD_INT 501
69594: EQUAL
69595: OR
69596: IFFALSE 69600
// exit ;
69598: GO 69961
// if not HasTask ( driver ) then
69600: LD_VAR 0 5
69604: PPUSH
69605: CALL_OW 314
69609: NOT
69610: IFFALSE 69846
// begin SetTag ( driver , tDriver ) ;
69612: LD_VAR 0 5
69616: PPUSH
69617: LD_INT 501
69619: PPUSH
69620: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69624: LD_VAR 0 1
69628: PPUSH
69629: LD_INT 501
69631: PPUSH
69632: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69636: LD_ADDR_VAR 0 6
69640: PUSH
69641: LD_EXP 101
69645: PUSH
69646: LD_VAR 0 2
69650: ARRAY
69651: PUSH
69652: LD_INT 3
69654: ARRAY
69655: PPUSH
69656: LD_EXP 101
69660: PUSH
69661: LD_VAR 0 2
69665: ARRAY
69666: PUSH
69667: LD_INT 4
69669: ARRAY
69670: PPUSH
69671: CALL_OW 428
69675: ST_TO_ADDR
// if hex then
69676: LD_VAR 0 6
69680: IFFALSE 69698
// ComMoveUnit ( driver , hex ) else
69682: LD_VAR 0 5
69686: PPUSH
69687: LD_VAR 0 6
69691: PPUSH
69692: CALL_OW 112
69696: GO 69737
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69698: LD_VAR 0 5
69702: PPUSH
69703: LD_EXP 101
69707: PUSH
69708: LD_VAR 0 2
69712: ARRAY
69713: PUSH
69714: LD_INT 3
69716: ARRAY
69717: PPUSH
69718: LD_EXP 101
69722: PUSH
69723: LD_VAR 0 2
69727: ARRAY
69728: PUSH
69729: LD_INT 4
69731: ARRAY
69732: PPUSH
69733: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69737: LD_VAR 0 5
69741: PPUSH
69742: CALL_OW 181
// if Multiplayer then
69746: LD_OWVAR 4
69750: IFFALSE 69799
// begin repeat wait ( 10 ) ;
69752: LD_INT 10
69754: PPUSH
69755: CALL_OW 67
// until not IsInUnit ( driver ) ;
69759: LD_VAR 0 5
69763: PPUSH
69764: CALL_OW 310
69768: NOT
69769: IFFALSE 69752
// if not HasTask ( driver ) then
69771: LD_VAR 0 5
69775: PPUSH
69776: CALL_OW 314
69780: NOT
69781: IFFALSE 69797
// ComEnterUnit ( driver , factory ) ;
69783: LD_VAR 0 5
69787: PPUSH
69788: LD_VAR 0 2
69792: PPUSH
69793: CALL_OW 120
// end else
69797: GO 69813
// AddComEnterUnit ( driver , factory ) ;
69799: LD_VAR 0 5
69803: PPUSH
69804: LD_VAR 0 2
69808: PPUSH
69809: CALL_OW 180
// wait ( 0 0$1 ) ;
69813: LD_INT 35
69815: PPUSH
69816: CALL_OW 67
// SetTag ( driver , tag ) ;
69820: LD_VAR 0 5
69824: PPUSH
69825: LD_VAR 0 4
69829: PPUSH
69830: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69834: LD_VAR 0 1
69838: PPUSH
69839: LD_INT 0
69841: PPUSH
69842: CALL_OW 109
// end ; end else
69846: GO 69961
// if GetControl ( vehicle ) = control_remote then
69848: LD_VAR 0 1
69852: PPUSH
69853: CALL_OW 263
69857: PUSH
69858: LD_INT 2
69860: EQUAL
69861: IFFALSE 69922
// begin wait ( 0 0$2 ) ;
69863: LD_INT 70
69865: PPUSH
69866: CALL_OW 67
// if Connect ( vehicle ) then
69870: LD_VAR 0 1
69874: PPUSH
69875: CALL 11190 0 1
69879: IFFALSE 69920
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_EXP 101
69890: PUSH
69891: LD_VAR 0 2
69895: ARRAY
69896: PUSH
69897: LD_INT 3
69899: ARRAY
69900: PPUSH
69901: LD_EXP 101
69905: PUSH
69906: LD_VAR 0 2
69910: ARRAY
69911: PUSH
69912: LD_INT 4
69914: ARRAY
69915: PPUSH
69916: CALL_OW 171
// end else
69920: GO 69961
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69922: LD_VAR 0 1
69926: PPUSH
69927: LD_EXP 101
69931: PUSH
69932: LD_VAR 0 2
69936: ARRAY
69937: PUSH
69938: LD_INT 3
69940: ARRAY
69941: PPUSH
69942: LD_EXP 101
69946: PUSH
69947: LD_VAR 0 2
69951: ARRAY
69952: PUSH
69953: LD_INT 4
69955: ARRAY
69956: PPUSH
69957: CALL_OW 171
// end ; end ;
69961: LD_VAR 0 3
69965: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69966: LD_INT 0
69968: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69969: LD_VAR 0 1
69973: PUSH
69974: LD_INT 250
69976: EQUAL
69977: PUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: CALL_OW 264
69987: PUSH
69988: LD_INT 81
69990: EQUAL
69991: AND
69992: IFFALSE 70013
// MinerPlaceMine ( unit , x , y ) ;
69994: LD_VAR 0 2
69998: PPUSH
69999: LD_VAR 0 4
70003: PPUSH
70004: LD_VAR 0 5
70008: PPUSH
70009: CALL 73105 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70013: LD_VAR 0 1
70017: PUSH
70018: LD_INT 251
70020: EQUAL
70021: PUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: CALL_OW 264
70031: PUSH
70032: LD_INT 81
70034: EQUAL
70035: AND
70036: IFFALSE 70057
// MinerDetonateMine ( unit , x , y ) ;
70038: LD_VAR 0 2
70042: PPUSH
70043: LD_VAR 0 4
70047: PPUSH
70048: LD_VAR 0 5
70052: PPUSH
70053: CALL 73380 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 252
70064: EQUAL
70065: PUSH
70066: LD_VAR 0 2
70070: PPUSH
70071: CALL_OW 264
70075: PUSH
70076: LD_INT 81
70078: EQUAL
70079: AND
70080: IFFALSE 70101
// MinerCreateMinefield ( unit , x , y ) ;
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_VAR 0 4
70091: PPUSH
70092: LD_VAR 0 5
70096: PPUSH
70097: CALL 73797 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70101: LD_VAR 0 1
70105: PUSH
70106: LD_INT 253
70108: EQUAL
70109: PUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: CALL_OW 257
70119: PUSH
70120: LD_INT 5
70122: EQUAL
70123: AND
70124: IFFALSE 70145
// ComBinocular ( unit , x , y ) ;
70126: LD_VAR 0 2
70130: PPUSH
70131: LD_VAR 0 4
70135: PPUSH
70136: LD_VAR 0 5
70140: PPUSH
70141: CALL 74166 0 3
// if selectedUnit then
70145: LD_VAR 0 3
70149: IFFALSE 70205
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70151: LD_VAR 0 1
70155: PUSH
70156: LD_INT 254
70158: EQUAL
70159: PUSH
70160: LD_VAR 0 2
70164: PPUSH
70165: CALL_OW 264
70169: PUSH
70170: LD_INT 99
70172: EQUAL
70173: AND
70174: PUSH
70175: LD_VAR 0 3
70179: PPUSH
70180: CALL_OW 263
70184: PUSH
70185: LD_INT 3
70187: EQUAL
70188: AND
70189: IFFALSE 70205
// HackDestroyVehicle ( unit , selectedUnit ) ;
70191: LD_VAR 0 2
70195: PPUSH
70196: LD_VAR 0 3
70200: PPUSH
70201: CALL 72469 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70205: LD_VAR 0 1
70209: PUSH
70210: LD_INT 255
70212: EQUAL
70213: PUSH
70214: LD_VAR 0 2
70218: PPUSH
70219: CALL_OW 264
70223: PUSH
70224: LD_INT 14
70226: PUSH
70227: LD_INT 53
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: IN
70234: AND
70235: PUSH
70236: LD_VAR 0 4
70240: PPUSH
70241: LD_VAR 0 5
70245: PPUSH
70246: CALL_OW 488
70250: AND
70251: IFFALSE 70275
// CutTreeXYR ( unit , x , y , 12 ) ;
70253: LD_VAR 0 2
70257: PPUSH
70258: LD_VAR 0 4
70262: PPUSH
70263: LD_VAR 0 5
70267: PPUSH
70268: LD_INT 12
70270: PPUSH
70271: CALL 70466 0 4
// if cmd = 256 then
70275: LD_VAR 0 1
70279: PUSH
70280: LD_INT 256
70282: EQUAL
70283: IFFALSE 70304
// SetFactoryWaypoint ( unit , x , y ) ;
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_VAR 0 4
70294: PPUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: CALL 67950 0 3
// if cmd = 257 then
70304: LD_VAR 0 1
70308: PUSH
70309: LD_INT 257
70311: EQUAL
70312: IFFALSE 70333
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70314: LD_VAR 0 2
70318: PPUSH
70319: LD_VAR 0 4
70323: PPUSH
70324: LD_VAR 0 5
70328: PPUSH
70329: CALL 68312 0 3
// if cmd = 258 then
70333: LD_VAR 0 1
70337: PUSH
70338: LD_INT 258
70340: EQUAL
70341: IFFALSE 70365
// BurnTreeXYR ( unit , x , y , 8 ) ;
70343: LD_VAR 0 2
70347: PPUSH
70348: LD_VAR 0 4
70352: PPUSH
70353: LD_VAR 0 5
70357: PPUSH
70358: LD_INT 8
70360: PPUSH
70361: CALL 70860 0 4
// end ;
70365: LD_VAR 0 6
70369: RET
// export function ComRadiation ( un ) ; var eff ; begin
70370: LD_INT 0
70372: PPUSH
70373: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70374: LD_VAR 0 1
70378: PPUSH
70379: CALL_OW 264
70383: PUSH
70384: LD_INT 91
70386: NONEQUAL
70387: IFFALSE 70391
// exit ;
70389: GO 70461
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70391: LD_INT 68
70393: PPUSH
70394: LD_VAR 0 1
70398: PPUSH
70399: CALL_OW 255
70403: PPUSH
70404: CALL_OW 321
70408: PUSH
70409: LD_INT 2
70411: EQUAL
70412: IFFALSE 70424
// eff := 70 else
70414: LD_ADDR_VAR 0 3
70418: PUSH
70419: LD_INT 70
70421: ST_TO_ADDR
70422: GO 70432
// eff := 30 ;
70424: LD_ADDR_VAR 0 3
70428: PUSH
70429: LD_INT 30
70431: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70432: LD_VAR 0 1
70436: PPUSH
70437: CALL_OW 250
70441: PPUSH
70442: LD_VAR 0 1
70446: PPUSH
70447: CALL_OW 251
70451: PPUSH
70452: LD_VAR 0 3
70456: PPUSH
70457: CALL_OW 495
// end ;
70461: LD_VAR 0 2
70465: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70466: LD_INT 0
70468: PPUSH
70469: PPUSH
70470: PPUSH
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
70475: PPUSH
70476: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70477: LD_VAR 0 1
70481: PPUSH
70482: CALL_OW 302
70486: NOT
70487: PUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: LD_VAR 0 3
70497: PPUSH
70498: CALL_OW 488
70502: NOT
70503: OR
70504: PUSH
70505: LD_VAR 0 4
70509: NOT
70510: OR
70511: IFFALSE 70515
// exit ;
70513: GO 70855
// list := [ ] ;
70515: LD_ADDR_VAR 0 13
70519: PUSH
70520: EMPTY
70521: ST_TO_ADDR
// if x - r < 0 then
70522: LD_VAR 0 2
70526: PUSH
70527: LD_VAR 0 4
70531: MINUS
70532: PUSH
70533: LD_INT 0
70535: LESS
70536: IFFALSE 70548
// min_x := 0 else
70538: LD_ADDR_VAR 0 7
70542: PUSH
70543: LD_INT 0
70545: ST_TO_ADDR
70546: GO 70564
// min_x := x - r ;
70548: LD_ADDR_VAR 0 7
70552: PUSH
70553: LD_VAR 0 2
70557: PUSH
70558: LD_VAR 0 4
70562: MINUS
70563: ST_TO_ADDR
// if y - r < 0 then
70564: LD_VAR 0 3
70568: PUSH
70569: LD_VAR 0 4
70573: MINUS
70574: PUSH
70575: LD_INT 0
70577: LESS
70578: IFFALSE 70590
// min_y := 0 else
70580: LD_ADDR_VAR 0 8
70584: PUSH
70585: LD_INT 0
70587: ST_TO_ADDR
70588: GO 70606
// min_y := y - r ;
70590: LD_ADDR_VAR 0 8
70594: PUSH
70595: LD_VAR 0 3
70599: PUSH
70600: LD_VAR 0 4
70604: MINUS
70605: ST_TO_ADDR
// max_x := x + r ;
70606: LD_ADDR_VAR 0 9
70610: PUSH
70611: LD_VAR 0 2
70615: PUSH
70616: LD_VAR 0 4
70620: PLUS
70621: ST_TO_ADDR
// max_y := y + r ;
70622: LD_ADDR_VAR 0 10
70626: PUSH
70627: LD_VAR 0 3
70631: PUSH
70632: LD_VAR 0 4
70636: PLUS
70637: ST_TO_ADDR
// for _x = min_x to max_x do
70638: LD_ADDR_VAR 0 11
70642: PUSH
70643: DOUBLE
70644: LD_VAR 0 7
70648: DEC
70649: ST_TO_ADDR
70650: LD_VAR 0 9
70654: PUSH
70655: FOR_TO
70656: IFFALSE 70773
// for _y = min_y to max_y do
70658: LD_ADDR_VAR 0 12
70662: PUSH
70663: DOUBLE
70664: LD_VAR 0 8
70668: DEC
70669: ST_TO_ADDR
70670: LD_VAR 0 10
70674: PUSH
70675: FOR_TO
70676: IFFALSE 70769
// begin if not ValidHex ( _x , _y ) then
70678: LD_VAR 0 11
70682: PPUSH
70683: LD_VAR 0 12
70687: PPUSH
70688: CALL_OW 488
70692: NOT
70693: IFFALSE 70697
// continue ;
70695: GO 70675
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70697: LD_VAR 0 11
70701: PPUSH
70702: LD_VAR 0 12
70706: PPUSH
70707: CALL_OW 351
70711: PUSH
70712: LD_VAR 0 11
70716: PPUSH
70717: LD_VAR 0 12
70721: PPUSH
70722: CALL_OW 554
70726: AND
70727: IFFALSE 70767
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70729: LD_ADDR_VAR 0 13
70733: PUSH
70734: LD_VAR 0 13
70738: PPUSH
70739: LD_VAR 0 13
70743: PUSH
70744: LD_INT 1
70746: PLUS
70747: PPUSH
70748: LD_VAR 0 11
70752: PUSH
70753: LD_VAR 0 12
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PPUSH
70762: CALL_OW 2
70766: ST_TO_ADDR
// end ;
70767: GO 70675
70769: POP
70770: POP
70771: GO 70655
70773: POP
70774: POP
// if not list then
70775: LD_VAR 0 13
70779: NOT
70780: IFFALSE 70784
// exit ;
70782: GO 70855
// for i in list do
70784: LD_ADDR_VAR 0 6
70788: PUSH
70789: LD_VAR 0 13
70793: PUSH
70794: FOR_IN
70795: IFFALSE 70853
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70797: LD_VAR 0 1
70801: PPUSH
70802: LD_STRING M
70804: PUSH
70805: LD_VAR 0 6
70809: PUSH
70810: LD_INT 1
70812: ARRAY
70813: PUSH
70814: LD_VAR 0 6
70818: PUSH
70819: LD_INT 2
70821: ARRAY
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: PUSH
70844: EMPTY
70845: LIST
70846: PPUSH
70847: CALL_OW 447
70851: GO 70794
70853: POP
70854: POP
// end ;
70855: LD_VAR 0 5
70859: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70860: LD_INT 0
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
70866: PPUSH
70867: PPUSH
70868: PPUSH
70869: PPUSH
70870: PPUSH
70871: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 302
70881: NOT
70882: PUSH
70883: LD_VAR 0 2
70887: PPUSH
70888: LD_VAR 0 3
70892: PPUSH
70893: CALL_OW 488
70897: NOT
70898: OR
70899: PUSH
70900: LD_VAR 0 4
70904: NOT
70905: OR
70906: IFFALSE 70910
// exit ;
70908: GO 71423
// list := [ ] ;
70910: LD_ADDR_VAR 0 13
70914: PUSH
70915: EMPTY
70916: ST_TO_ADDR
// if x - r < 0 then
70917: LD_VAR 0 2
70921: PUSH
70922: LD_VAR 0 4
70926: MINUS
70927: PUSH
70928: LD_INT 0
70930: LESS
70931: IFFALSE 70943
// min_x := 0 else
70933: LD_ADDR_VAR 0 7
70937: PUSH
70938: LD_INT 0
70940: ST_TO_ADDR
70941: GO 70959
// min_x := x - r ;
70943: LD_ADDR_VAR 0 7
70947: PUSH
70948: LD_VAR 0 2
70952: PUSH
70953: LD_VAR 0 4
70957: MINUS
70958: ST_TO_ADDR
// if y - r < 0 then
70959: LD_VAR 0 3
70963: PUSH
70964: LD_VAR 0 4
70968: MINUS
70969: PUSH
70970: LD_INT 0
70972: LESS
70973: IFFALSE 70985
// min_y := 0 else
70975: LD_ADDR_VAR 0 8
70979: PUSH
70980: LD_INT 0
70982: ST_TO_ADDR
70983: GO 71001
// min_y := y - r ;
70985: LD_ADDR_VAR 0 8
70989: PUSH
70990: LD_VAR 0 3
70994: PUSH
70995: LD_VAR 0 4
70999: MINUS
71000: ST_TO_ADDR
// max_x := x + r ;
71001: LD_ADDR_VAR 0 9
71005: PUSH
71006: LD_VAR 0 2
71010: PUSH
71011: LD_VAR 0 4
71015: PLUS
71016: ST_TO_ADDR
// max_y := y + r ;
71017: LD_ADDR_VAR 0 10
71021: PUSH
71022: LD_VAR 0 3
71026: PUSH
71027: LD_VAR 0 4
71031: PLUS
71032: ST_TO_ADDR
// for _x = min_x to max_x do
71033: LD_ADDR_VAR 0 11
71037: PUSH
71038: DOUBLE
71039: LD_VAR 0 7
71043: DEC
71044: ST_TO_ADDR
71045: LD_VAR 0 9
71049: PUSH
71050: FOR_TO
71051: IFFALSE 71168
// for _y = min_y to max_y do
71053: LD_ADDR_VAR 0 12
71057: PUSH
71058: DOUBLE
71059: LD_VAR 0 8
71063: DEC
71064: ST_TO_ADDR
71065: LD_VAR 0 10
71069: PUSH
71070: FOR_TO
71071: IFFALSE 71164
// begin if not ValidHex ( _x , _y ) then
71073: LD_VAR 0 11
71077: PPUSH
71078: LD_VAR 0 12
71082: PPUSH
71083: CALL_OW 488
71087: NOT
71088: IFFALSE 71092
// continue ;
71090: GO 71070
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71092: LD_VAR 0 11
71096: PPUSH
71097: LD_VAR 0 12
71101: PPUSH
71102: CALL_OW 351
71106: PUSH
71107: LD_VAR 0 11
71111: PPUSH
71112: LD_VAR 0 12
71116: PPUSH
71117: CALL_OW 554
71121: AND
71122: IFFALSE 71162
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71124: LD_ADDR_VAR 0 13
71128: PUSH
71129: LD_VAR 0 13
71133: PPUSH
71134: LD_VAR 0 13
71138: PUSH
71139: LD_INT 1
71141: PLUS
71142: PPUSH
71143: LD_VAR 0 11
71147: PUSH
71148: LD_VAR 0 12
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PPUSH
71157: CALL_OW 2
71161: ST_TO_ADDR
// end ;
71162: GO 71070
71164: POP
71165: POP
71166: GO 71050
71168: POP
71169: POP
// if not list then
71170: LD_VAR 0 13
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71423
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71179: LD_ADDR_VAR 0 13
71183: PUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: LD_VAR 0 13
71193: PPUSH
71194: LD_INT 1
71196: PPUSH
71197: LD_INT 1
71199: PPUSH
71200: CALL 8332 0 4
71204: ST_TO_ADDR
// ComStop ( flame ) ;
71205: LD_VAR 0 1
71209: PPUSH
71210: CALL_OW 141
// for i in list do
71214: LD_ADDR_VAR 0 6
71218: PUSH
71219: LD_VAR 0 13
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71256
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71227: LD_VAR 0 1
71231: PPUSH
71232: LD_VAR 0 6
71236: PUSH
71237: LD_INT 1
71239: ARRAY
71240: PPUSH
71241: LD_VAR 0 6
71245: PUSH
71246: LD_INT 2
71248: ARRAY
71249: PPUSH
71250: CALL_OW 176
71254: GO 71224
71256: POP
71257: POP
// repeat wait ( 0 0$1 ) ;
71258: LD_INT 35
71260: PPUSH
71261: CALL_OW 67
// task := GetTaskList ( flame ) ;
71265: LD_ADDR_VAR 0 14
71269: PUSH
71270: LD_VAR 0 1
71274: PPUSH
71275: CALL_OW 437
71279: ST_TO_ADDR
// if not task then
71280: LD_VAR 0 14
71284: NOT
71285: IFFALSE 71289
// exit ;
71287: GO 71423
// if task [ 1 ] [ 1 ] <> | then
71289: LD_VAR 0 14
71293: PUSH
71294: LD_INT 1
71296: ARRAY
71297: PUSH
71298: LD_INT 1
71300: ARRAY
71301: PUSH
71302: LD_STRING |
71304: NONEQUAL
71305: IFFALSE 71309
// exit ;
71307: GO 71423
// _x := task [ 1 ] [ 2 ] ;
71309: LD_ADDR_VAR 0 11
71313: PUSH
71314: LD_VAR 0 14
71318: PUSH
71319: LD_INT 1
71321: ARRAY
71322: PUSH
71323: LD_INT 2
71325: ARRAY
71326: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71327: LD_ADDR_VAR 0 12
71331: PUSH
71332: LD_VAR 0 14
71336: PUSH
71337: LD_INT 1
71339: ARRAY
71340: PUSH
71341: LD_INT 3
71343: ARRAY
71344: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71345: LD_VAR 0 11
71349: PPUSH
71350: LD_VAR 0 12
71354: PPUSH
71355: CALL_OW 351
71359: NOT
71360: PUSH
71361: LD_VAR 0 11
71365: PPUSH
71366: LD_VAR 0 12
71370: PPUSH
71371: CALL_OW 554
71375: NOT
71376: OR
71377: IFFALSE 71411
// begin task := Delete ( task , 1 ) ;
71379: LD_ADDR_VAR 0 14
71383: PUSH
71384: LD_VAR 0 14
71388: PPUSH
71389: LD_INT 1
71391: PPUSH
71392: CALL_OW 3
71396: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71397: LD_VAR 0 1
71401: PPUSH
71402: LD_VAR 0 14
71406: PPUSH
71407: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71411: LD_VAR 0 1
71415: PPUSH
71416: CALL_OW 314
71420: NOT
71421: IFFALSE 71258
// end ;
71423: LD_VAR 0 5
71427: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71428: LD_EXP 104
71432: NOT
71433: IFFALSE 71483
71435: GO 71437
71437: DISABLE
// begin initHack := true ;
71438: LD_ADDR_EXP 104
71442: PUSH
71443: LD_INT 1
71445: ST_TO_ADDR
// hackTanks := [ ] ;
71446: LD_ADDR_EXP 105
71450: PUSH
71451: EMPTY
71452: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71453: LD_ADDR_EXP 106
71457: PUSH
71458: EMPTY
71459: ST_TO_ADDR
// hackLimit := 3 ;
71460: LD_ADDR_EXP 107
71464: PUSH
71465: LD_INT 3
71467: ST_TO_ADDR
// hackDist := 12 ;
71468: LD_ADDR_EXP 108
71472: PUSH
71473: LD_INT 12
71475: ST_TO_ADDR
// hackCounter := [ ] ;
71476: LD_ADDR_EXP 109
71480: PUSH
71481: EMPTY
71482: ST_TO_ADDR
// end ;
71483: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71484: LD_EXP 104
71488: PUSH
71489: LD_INT 34
71491: PUSH
71492: LD_INT 99
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PPUSH
71499: CALL_OW 69
71503: AND
71504: IFFALSE 71757
71506: GO 71508
71508: DISABLE
71509: LD_INT 0
71511: PPUSH
71512: PPUSH
// begin enable ;
71513: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71514: LD_ADDR_VAR 0 1
71518: PUSH
71519: LD_INT 34
71521: PUSH
71522: LD_INT 99
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PPUSH
71529: CALL_OW 69
71533: PUSH
71534: FOR_IN
71535: IFFALSE 71755
// begin if not i in hackTanks then
71537: LD_VAR 0 1
71541: PUSH
71542: LD_EXP 105
71546: IN
71547: NOT
71548: IFFALSE 71631
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71550: LD_ADDR_EXP 105
71554: PUSH
71555: LD_EXP 105
71559: PPUSH
71560: LD_EXP 105
71564: PUSH
71565: LD_INT 1
71567: PLUS
71568: PPUSH
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL_OW 1
71578: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71579: LD_ADDR_EXP 106
71583: PUSH
71584: LD_EXP 106
71588: PPUSH
71589: LD_EXP 106
71593: PUSH
71594: LD_INT 1
71596: PLUS
71597: PPUSH
71598: EMPTY
71599: PPUSH
71600: CALL_OW 1
71604: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71605: LD_ADDR_EXP 109
71609: PUSH
71610: LD_EXP 109
71614: PPUSH
71615: LD_EXP 109
71619: PUSH
71620: LD_INT 1
71622: PLUS
71623: PPUSH
71624: EMPTY
71625: PPUSH
71626: CALL_OW 1
71630: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71631: LD_VAR 0 1
71635: PPUSH
71636: CALL_OW 302
71640: NOT
71641: IFFALSE 71654
// begin HackUnlinkAll ( i ) ;
71643: LD_VAR 0 1
71647: PPUSH
71648: CALL 71760 0 1
// continue ;
71652: GO 71534
// end ; HackCheckCapturedStatus ( i ) ;
71654: LD_VAR 0 1
71658: PPUSH
71659: CALL 72203 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71663: LD_ADDR_VAR 0 2
71667: PUSH
71668: LD_INT 81
71670: PUSH
71671: LD_VAR 0 1
71675: PPUSH
71676: CALL_OW 255
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 33
71687: PUSH
71688: LD_INT 3
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 91
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_EXP 108
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 50
71715: PUSH
71716: EMPTY
71717: LIST
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: PPUSH
71725: CALL_OW 69
71729: ST_TO_ADDR
// if not tmp then
71730: LD_VAR 0 2
71734: NOT
71735: IFFALSE 71739
// continue ;
71737: GO 71534
// HackLink ( i , tmp ) ;
71739: LD_VAR 0 1
71743: PPUSH
71744: LD_VAR 0 2
71748: PPUSH
71749: CALL 71896 0 2
// end ;
71753: GO 71534
71755: POP
71756: POP
// end ;
71757: PPOPN 2
71759: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71760: LD_INT 0
71762: PPUSH
71763: PPUSH
71764: PPUSH
// if not hack in hackTanks then
71765: LD_VAR 0 1
71769: PUSH
71770: LD_EXP 105
71774: IN
71775: NOT
71776: IFFALSE 71780
// exit ;
71778: GO 71891
// index := GetElementIndex ( hackTanks , hack ) ;
71780: LD_ADDR_VAR 0 4
71784: PUSH
71785: LD_EXP 105
71789: PPUSH
71790: LD_VAR 0 1
71794: PPUSH
71795: CALL 7629 0 2
71799: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71800: LD_EXP 106
71804: PUSH
71805: LD_VAR 0 4
71809: ARRAY
71810: IFFALSE 71891
// begin for i in hackTanksCaptured [ index ] do
71812: LD_ADDR_VAR 0 3
71816: PUSH
71817: LD_EXP 106
71821: PUSH
71822: LD_VAR 0 4
71826: ARRAY
71827: PUSH
71828: FOR_IN
71829: IFFALSE 71855
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71831: LD_VAR 0 3
71835: PUSH
71836: LD_INT 1
71838: ARRAY
71839: PPUSH
71840: LD_VAR 0 3
71844: PUSH
71845: LD_INT 2
71847: ARRAY
71848: PPUSH
71849: CALL_OW 235
71853: GO 71828
71855: POP
71856: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71857: LD_ADDR_EXP 106
71861: PUSH
71862: LD_EXP 106
71866: PPUSH
71867: LD_VAR 0 4
71871: PPUSH
71872: EMPTY
71873: PPUSH
71874: CALL_OW 1
71878: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71879: LD_VAR 0 1
71883: PPUSH
71884: LD_INT 0
71886: PPUSH
71887: CALL_OW 505
// end ; end ;
71891: LD_VAR 0 2
71895: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71896: LD_INT 0
71898: PPUSH
71899: PPUSH
71900: PPUSH
// if not hack in hackTanks or not vehicles then
71901: LD_VAR 0 1
71905: PUSH
71906: LD_EXP 105
71910: IN
71911: NOT
71912: PUSH
71913: LD_VAR 0 2
71917: NOT
71918: OR
71919: IFFALSE 71923
// exit ;
71921: GO 72198
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71923: LD_ADDR_VAR 0 2
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: LD_VAR 0 2
71937: PPUSH
71938: LD_INT 1
71940: PPUSH
71941: LD_INT 1
71943: PPUSH
71944: CALL 8279 0 4
71948: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71949: LD_ADDR_VAR 0 5
71953: PUSH
71954: LD_EXP 105
71958: PPUSH
71959: LD_VAR 0 1
71963: PPUSH
71964: CALL 7629 0 2
71968: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71969: LD_EXP 106
71973: PUSH
71974: LD_VAR 0 5
71978: ARRAY
71979: PUSH
71980: LD_EXP 107
71984: LESS
71985: IFFALSE 72174
// begin for i := 1 to vehicles do
71987: LD_ADDR_VAR 0 4
71991: PUSH
71992: DOUBLE
71993: LD_INT 1
71995: DEC
71996: ST_TO_ADDR
71997: LD_VAR 0 2
72001: PUSH
72002: FOR_TO
72003: IFFALSE 72172
// begin if hackTanksCaptured [ index ] = hackLimit then
72005: LD_EXP 106
72009: PUSH
72010: LD_VAR 0 5
72014: ARRAY
72015: PUSH
72016: LD_EXP 107
72020: EQUAL
72021: IFFALSE 72025
// break ;
72023: GO 72172
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
72025: LD_ADDR_EXP 109
72029: PUSH
72030: LD_EXP 109
72034: PPUSH
72035: LD_VAR 0 5
72039: PPUSH
72040: LD_EXP 109
72044: PUSH
72045: LD_VAR 0 5
72049: ARRAY
72050: PUSH
72051: LD_INT 1
72053: PLUS
72054: PPUSH
72055: CALL_OW 1
72059: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
72060: LD_ADDR_EXP 106
72064: PUSH
72065: LD_EXP 106
72069: PPUSH
72070: LD_VAR 0 5
72074: PUSH
72075: LD_EXP 106
72079: PUSH
72080: LD_VAR 0 5
72084: ARRAY
72085: PUSH
72086: LD_INT 1
72088: PLUS
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PPUSH
72094: LD_VAR 0 2
72098: PUSH
72099: LD_VAR 0 4
72103: ARRAY
72104: PUSH
72105: LD_VAR 0 2
72109: PUSH
72110: LD_VAR 0 4
72114: ARRAY
72115: PPUSH
72116: CALL_OW 255
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PPUSH
72125: CALL 7844 0 3
72129: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72130: LD_VAR 0 2
72134: PUSH
72135: LD_VAR 0 4
72139: ARRAY
72140: PPUSH
72141: LD_VAR 0 1
72145: PPUSH
72146: CALL_OW 255
72150: PPUSH
72151: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72155: LD_VAR 0 2
72159: PUSH
72160: LD_VAR 0 4
72164: ARRAY
72165: PPUSH
72166: CALL_OW 141
// end ;
72170: GO 72002
72172: POP
72173: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72174: LD_VAR 0 1
72178: PPUSH
72179: LD_EXP 106
72183: PUSH
72184: LD_VAR 0 5
72188: ARRAY
72189: PUSH
72190: LD_INT 0
72192: PLUS
72193: PPUSH
72194: CALL_OW 505
// end ;
72198: LD_VAR 0 3
72202: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72203: LD_INT 0
72205: PPUSH
72206: PPUSH
72207: PPUSH
72208: PPUSH
// if not hack in hackTanks then
72209: LD_VAR 0 1
72213: PUSH
72214: LD_EXP 105
72218: IN
72219: NOT
72220: IFFALSE 72224
// exit ;
72222: GO 72464
// index := GetElementIndex ( hackTanks , hack ) ;
72224: LD_ADDR_VAR 0 4
72228: PUSH
72229: LD_EXP 105
72233: PPUSH
72234: LD_VAR 0 1
72238: PPUSH
72239: CALL 7629 0 2
72243: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72244: LD_ADDR_VAR 0 3
72248: PUSH
72249: DOUBLE
72250: LD_EXP 106
72254: PUSH
72255: LD_VAR 0 4
72259: ARRAY
72260: INC
72261: ST_TO_ADDR
72262: LD_INT 1
72264: PUSH
72265: FOR_DOWNTO
72266: IFFALSE 72438
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72268: LD_ADDR_VAR 0 5
72272: PUSH
72273: LD_EXP 106
72277: PUSH
72278: LD_VAR 0 4
72282: ARRAY
72283: PUSH
72284: LD_VAR 0 3
72288: ARRAY
72289: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72290: LD_VAR 0 5
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: PPUSH
72299: CALL_OW 302
72303: NOT
72304: PUSH
72305: LD_VAR 0 5
72309: PUSH
72310: LD_INT 1
72312: ARRAY
72313: PPUSH
72314: CALL_OW 255
72318: PUSH
72319: LD_VAR 0 1
72323: PPUSH
72324: CALL_OW 255
72328: NONEQUAL
72329: OR
72330: IFFALSE 72436
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72332: LD_VAR 0 5
72336: PUSH
72337: LD_INT 1
72339: ARRAY
72340: PPUSH
72341: CALL_OW 305
72345: PUSH
72346: LD_VAR 0 5
72350: PUSH
72351: LD_INT 1
72353: ARRAY
72354: PPUSH
72355: CALL_OW 255
72359: PUSH
72360: LD_VAR 0 1
72364: PPUSH
72365: CALL_OW 255
72369: EQUAL
72370: AND
72371: IFFALSE 72395
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72373: LD_VAR 0 5
72377: PUSH
72378: LD_INT 1
72380: ARRAY
72381: PPUSH
72382: LD_VAR 0 5
72386: PUSH
72387: LD_INT 2
72389: ARRAY
72390: PPUSH
72391: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72395: LD_ADDR_EXP 106
72399: PUSH
72400: LD_EXP 106
72404: PPUSH
72405: LD_VAR 0 4
72409: PPUSH
72410: LD_EXP 106
72414: PUSH
72415: LD_VAR 0 4
72419: ARRAY
72420: PPUSH
72421: LD_VAR 0 3
72425: PPUSH
72426: CALL_OW 3
72430: PPUSH
72431: CALL_OW 1
72435: ST_TO_ADDR
// end ; end ;
72436: GO 72265
72438: POP
72439: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72440: LD_VAR 0 1
72444: PPUSH
72445: LD_EXP 106
72449: PUSH
72450: LD_VAR 0 4
72454: ARRAY
72455: PUSH
72456: LD_INT 0
72458: PLUS
72459: PPUSH
72460: CALL_OW 505
// end ;
72464: LD_VAR 0 2
72468: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72469: LD_INT 0
72471: PPUSH
72472: PPUSH
72473: PPUSH
72474: PPUSH
// if not hack in hackTanks then
72475: LD_VAR 0 1
72479: PUSH
72480: LD_EXP 105
72484: IN
72485: NOT
72486: IFFALSE 72490
// exit ;
72488: GO 72575
// index := GetElementIndex ( hackTanks , hack ) ;
72490: LD_ADDR_VAR 0 5
72494: PUSH
72495: LD_EXP 105
72499: PPUSH
72500: LD_VAR 0 1
72504: PPUSH
72505: CALL 7629 0 2
72509: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72510: LD_ADDR_VAR 0 4
72514: PUSH
72515: DOUBLE
72516: LD_INT 1
72518: DEC
72519: ST_TO_ADDR
72520: LD_EXP 106
72524: PUSH
72525: LD_VAR 0 5
72529: ARRAY
72530: PUSH
72531: FOR_TO
72532: IFFALSE 72573
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72534: LD_EXP 106
72538: PUSH
72539: LD_VAR 0 5
72543: ARRAY
72544: PUSH
72545: LD_VAR 0 4
72549: ARRAY
72550: PUSH
72551: LD_INT 1
72553: ARRAY
72554: PUSH
72555: LD_VAR 0 2
72559: EQUAL
72560: IFFALSE 72571
// KillUnit ( vehicle ) ;
72562: LD_VAR 0 2
72566: PPUSH
72567: CALL_OW 66
72571: GO 72531
72573: POP
72574: POP
// end ;
72575: LD_VAR 0 3
72579: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72580: LD_EXP 110
72584: NOT
72585: IFFALSE 72620
72587: GO 72589
72589: DISABLE
// begin initMiner := true ;
72590: LD_ADDR_EXP 110
72594: PUSH
72595: LD_INT 1
72597: ST_TO_ADDR
// minersList := [ ] ;
72598: LD_ADDR_EXP 111
72602: PUSH
72603: EMPTY
72604: ST_TO_ADDR
// minerMinesList := [ ] ;
72605: LD_ADDR_EXP 112
72609: PUSH
72610: EMPTY
72611: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72612: LD_ADDR_EXP 113
72616: PUSH
72617: LD_INT 5
72619: ST_TO_ADDR
// end ;
72620: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72621: LD_EXP 110
72625: PUSH
72626: LD_INT 34
72628: PUSH
72629: LD_INT 81
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PPUSH
72636: CALL_OW 69
72640: AND
72641: IFFALSE 73102
72643: GO 72645
72645: DISABLE
72646: LD_INT 0
72648: PPUSH
72649: PPUSH
72650: PPUSH
72651: PPUSH
// begin enable ;
72652: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72653: LD_ADDR_VAR 0 1
72657: PUSH
72658: LD_INT 34
72660: PUSH
72661: LD_INT 81
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PPUSH
72668: CALL_OW 69
72672: PUSH
72673: FOR_IN
72674: IFFALSE 72746
// begin if not i in minersList then
72676: LD_VAR 0 1
72680: PUSH
72681: LD_EXP 111
72685: IN
72686: NOT
72687: IFFALSE 72744
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72689: LD_ADDR_EXP 111
72693: PUSH
72694: LD_EXP 111
72698: PPUSH
72699: LD_EXP 111
72703: PUSH
72704: LD_INT 1
72706: PLUS
72707: PPUSH
72708: LD_VAR 0 1
72712: PPUSH
72713: CALL_OW 1
72717: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72718: LD_ADDR_EXP 112
72722: PUSH
72723: LD_EXP 112
72727: PPUSH
72728: LD_EXP 112
72732: PUSH
72733: LD_INT 1
72735: PLUS
72736: PPUSH
72737: EMPTY
72738: PPUSH
72739: CALL_OW 1
72743: ST_TO_ADDR
// end end ;
72744: GO 72673
72746: POP
72747: POP
// for i := minerMinesList downto 1 do
72748: LD_ADDR_VAR 0 1
72752: PUSH
72753: DOUBLE
72754: LD_EXP 112
72758: INC
72759: ST_TO_ADDR
72760: LD_INT 1
72762: PUSH
72763: FOR_DOWNTO
72764: IFFALSE 73100
// begin if IsLive ( minersList [ i ] ) then
72766: LD_EXP 111
72770: PUSH
72771: LD_VAR 0 1
72775: ARRAY
72776: PPUSH
72777: CALL_OW 300
72781: IFFALSE 72809
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72783: LD_EXP 111
72787: PUSH
72788: LD_VAR 0 1
72792: ARRAY
72793: PPUSH
72794: LD_EXP 112
72798: PUSH
72799: LD_VAR 0 1
72803: ARRAY
72804: PPUSH
72805: CALL_OW 505
// if not minerMinesList [ i ] then
72809: LD_EXP 112
72813: PUSH
72814: LD_VAR 0 1
72818: ARRAY
72819: NOT
72820: IFFALSE 72824
// continue ;
72822: GO 72763
// for j := minerMinesList [ i ] downto 1 do
72824: LD_ADDR_VAR 0 2
72828: PUSH
72829: DOUBLE
72830: LD_EXP 112
72834: PUSH
72835: LD_VAR 0 1
72839: ARRAY
72840: INC
72841: ST_TO_ADDR
72842: LD_INT 1
72844: PUSH
72845: FOR_DOWNTO
72846: IFFALSE 73096
// begin side := GetSide ( minersList [ i ] ) ;
72848: LD_ADDR_VAR 0 3
72852: PUSH
72853: LD_EXP 111
72857: PUSH
72858: LD_VAR 0 1
72862: ARRAY
72863: PPUSH
72864: CALL_OW 255
72868: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72869: LD_ADDR_VAR 0 4
72873: PUSH
72874: LD_EXP 112
72878: PUSH
72879: LD_VAR 0 1
72883: ARRAY
72884: PUSH
72885: LD_VAR 0 2
72889: ARRAY
72890: PUSH
72891: LD_INT 1
72893: ARRAY
72894: PPUSH
72895: LD_EXP 112
72899: PUSH
72900: LD_VAR 0 1
72904: ARRAY
72905: PUSH
72906: LD_VAR 0 2
72910: ARRAY
72911: PUSH
72912: LD_INT 2
72914: ARRAY
72915: PPUSH
72916: CALL_OW 428
72920: ST_TO_ADDR
// if not tmp then
72921: LD_VAR 0 4
72925: NOT
72926: IFFALSE 72930
// continue ;
72928: GO 72845
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72930: LD_VAR 0 4
72934: PUSH
72935: LD_INT 81
72937: PUSH
72938: LD_VAR 0 3
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PPUSH
72947: CALL_OW 69
72951: IN
72952: PUSH
72953: LD_EXP 112
72957: PUSH
72958: LD_VAR 0 1
72962: ARRAY
72963: PUSH
72964: LD_VAR 0 2
72968: ARRAY
72969: PUSH
72970: LD_INT 1
72972: ARRAY
72973: PPUSH
72974: LD_EXP 112
72978: PUSH
72979: LD_VAR 0 1
72983: ARRAY
72984: PUSH
72985: LD_VAR 0 2
72989: ARRAY
72990: PUSH
72991: LD_INT 2
72993: ARRAY
72994: PPUSH
72995: CALL_OW 458
72999: AND
73000: IFFALSE 73094
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
73002: LD_EXP 112
73006: PUSH
73007: LD_VAR 0 1
73011: ARRAY
73012: PUSH
73013: LD_VAR 0 2
73017: ARRAY
73018: PUSH
73019: LD_INT 1
73021: ARRAY
73022: PPUSH
73023: LD_EXP 112
73027: PUSH
73028: LD_VAR 0 1
73032: ARRAY
73033: PUSH
73034: LD_VAR 0 2
73038: ARRAY
73039: PUSH
73040: LD_INT 2
73042: ARRAY
73043: PPUSH
73044: LD_VAR 0 3
73048: PPUSH
73049: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
73053: LD_ADDR_EXP 112
73057: PUSH
73058: LD_EXP 112
73062: PPUSH
73063: LD_VAR 0 1
73067: PPUSH
73068: LD_EXP 112
73072: PUSH
73073: LD_VAR 0 1
73077: ARRAY
73078: PPUSH
73079: LD_VAR 0 2
73083: PPUSH
73084: CALL_OW 3
73088: PPUSH
73089: CALL_OW 1
73093: ST_TO_ADDR
// end ; end ;
73094: GO 72845
73096: POP
73097: POP
// end ;
73098: GO 72763
73100: POP
73101: POP
// end ;
73102: PPOPN 4
73104: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73105: LD_INT 0
73107: PPUSH
73108: PPUSH
// result := false ;
73109: LD_ADDR_VAR 0 4
73113: PUSH
73114: LD_INT 0
73116: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73117: LD_VAR 0 1
73121: PPUSH
73122: CALL_OW 264
73126: PUSH
73127: LD_INT 81
73129: EQUAL
73130: NOT
73131: IFFALSE 73135
// exit ;
73133: GO 73375
// index := GetElementIndex ( minersList , unit ) ;
73135: LD_ADDR_VAR 0 5
73139: PUSH
73140: LD_EXP 111
73144: PPUSH
73145: LD_VAR 0 1
73149: PPUSH
73150: CALL 7629 0 2
73154: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73155: LD_EXP 112
73159: PUSH
73160: LD_VAR 0 5
73164: ARRAY
73165: PUSH
73166: LD_EXP 113
73170: GREATEREQUAL
73171: IFFALSE 73175
// exit ;
73173: GO 73375
// ComMoveXY ( unit , x , y ) ;
73175: LD_VAR 0 1
73179: PPUSH
73180: LD_VAR 0 2
73184: PPUSH
73185: LD_VAR 0 3
73189: PPUSH
73190: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73194: LD_INT 35
73196: PPUSH
73197: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73201: LD_VAR 0 1
73205: PPUSH
73206: LD_VAR 0 2
73210: PPUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: CALL 39370 0 3
73220: NOT
73221: PUSH
73222: LD_VAR 0 1
73226: PPUSH
73227: CALL_OW 314
73231: AND
73232: IFFALSE 73236
// exit ;
73234: GO 73375
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73236: LD_VAR 0 2
73240: PPUSH
73241: LD_VAR 0 3
73245: PPUSH
73246: CALL_OW 428
73250: PUSH
73251: LD_VAR 0 1
73255: EQUAL
73256: PUSH
73257: LD_VAR 0 1
73261: PPUSH
73262: CALL_OW 314
73266: NOT
73267: AND
73268: IFFALSE 73194
// PlaySoundXY ( x , y , PlantMine ) ;
73270: LD_VAR 0 2
73274: PPUSH
73275: LD_VAR 0 3
73279: PPUSH
73280: LD_STRING PlantMine
73282: PPUSH
73283: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73287: LD_VAR 0 2
73291: PPUSH
73292: LD_VAR 0 3
73296: PPUSH
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 255
73306: PPUSH
73307: LD_INT 0
73309: PPUSH
73310: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73314: LD_ADDR_EXP 112
73318: PUSH
73319: LD_EXP 112
73323: PPUSH
73324: LD_VAR 0 5
73328: PUSH
73329: LD_EXP 112
73333: PUSH
73334: LD_VAR 0 5
73338: ARRAY
73339: PUSH
73340: LD_INT 1
73342: PLUS
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PPUSH
73348: LD_VAR 0 2
73352: PUSH
73353: LD_VAR 0 3
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PPUSH
73362: CALL 7844 0 3
73366: ST_TO_ADDR
// result := true ;
73367: LD_ADDR_VAR 0 4
73371: PUSH
73372: LD_INT 1
73374: ST_TO_ADDR
// end ;
73375: LD_VAR 0 4
73379: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73380: LD_INT 0
73382: PPUSH
73383: PPUSH
73384: PPUSH
// if not unit in minersList then
73385: LD_VAR 0 1
73389: PUSH
73390: LD_EXP 111
73394: IN
73395: NOT
73396: IFFALSE 73400
// exit ;
73398: GO 73792
// index := GetElementIndex ( minersList , unit ) ;
73400: LD_ADDR_VAR 0 6
73404: PUSH
73405: LD_EXP 111
73409: PPUSH
73410: LD_VAR 0 1
73414: PPUSH
73415: CALL 7629 0 2
73419: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73420: LD_ADDR_VAR 0 5
73424: PUSH
73425: DOUBLE
73426: LD_EXP 112
73430: PUSH
73431: LD_VAR 0 6
73435: ARRAY
73436: INC
73437: ST_TO_ADDR
73438: LD_INT 1
73440: PUSH
73441: FOR_DOWNTO
73442: IFFALSE 73603
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73444: LD_EXP 112
73448: PUSH
73449: LD_VAR 0 6
73453: ARRAY
73454: PUSH
73455: LD_VAR 0 5
73459: ARRAY
73460: PUSH
73461: LD_INT 1
73463: ARRAY
73464: PUSH
73465: LD_VAR 0 2
73469: EQUAL
73470: PUSH
73471: LD_EXP 112
73475: PUSH
73476: LD_VAR 0 6
73480: ARRAY
73481: PUSH
73482: LD_VAR 0 5
73486: ARRAY
73487: PUSH
73488: LD_INT 2
73490: ARRAY
73491: PUSH
73492: LD_VAR 0 3
73496: EQUAL
73497: AND
73498: IFFALSE 73601
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73500: LD_EXP 112
73504: PUSH
73505: LD_VAR 0 6
73509: ARRAY
73510: PUSH
73511: LD_VAR 0 5
73515: ARRAY
73516: PUSH
73517: LD_INT 1
73519: ARRAY
73520: PPUSH
73521: LD_EXP 112
73525: PUSH
73526: LD_VAR 0 6
73530: ARRAY
73531: PUSH
73532: LD_VAR 0 5
73536: ARRAY
73537: PUSH
73538: LD_INT 2
73540: ARRAY
73541: PPUSH
73542: LD_VAR 0 1
73546: PPUSH
73547: CALL_OW 255
73551: PPUSH
73552: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73556: LD_ADDR_EXP 112
73560: PUSH
73561: LD_EXP 112
73565: PPUSH
73566: LD_VAR 0 6
73570: PPUSH
73571: LD_EXP 112
73575: PUSH
73576: LD_VAR 0 6
73580: ARRAY
73581: PPUSH
73582: LD_VAR 0 5
73586: PPUSH
73587: CALL_OW 3
73591: PPUSH
73592: CALL_OW 1
73596: ST_TO_ADDR
// exit ;
73597: POP
73598: POP
73599: GO 73792
// end ; end ;
73601: GO 73441
73603: POP
73604: POP
// for i := minerMinesList [ index ] downto 1 do
73605: LD_ADDR_VAR 0 5
73609: PUSH
73610: DOUBLE
73611: LD_EXP 112
73615: PUSH
73616: LD_VAR 0 6
73620: ARRAY
73621: INC
73622: ST_TO_ADDR
73623: LD_INT 1
73625: PUSH
73626: FOR_DOWNTO
73627: IFFALSE 73790
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73629: LD_EXP 112
73633: PUSH
73634: LD_VAR 0 6
73638: ARRAY
73639: PUSH
73640: LD_VAR 0 5
73644: ARRAY
73645: PUSH
73646: LD_INT 1
73648: ARRAY
73649: PPUSH
73650: LD_EXP 112
73654: PUSH
73655: LD_VAR 0 6
73659: ARRAY
73660: PUSH
73661: LD_VAR 0 5
73665: ARRAY
73666: PUSH
73667: LD_INT 2
73669: ARRAY
73670: PPUSH
73671: LD_VAR 0 2
73675: PPUSH
73676: LD_VAR 0 3
73680: PPUSH
73681: CALL_OW 298
73685: PUSH
73686: LD_INT 6
73688: LESS
73689: IFFALSE 73788
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73691: LD_EXP 112
73695: PUSH
73696: LD_VAR 0 6
73700: ARRAY
73701: PUSH
73702: LD_VAR 0 5
73706: ARRAY
73707: PUSH
73708: LD_INT 1
73710: ARRAY
73711: PPUSH
73712: LD_EXP 112
73716: PUSH
73717: LD_VAR 0 6
73721: ARRAY
73722: PUSH
73723: LD_VAR 0 5
73727: ARRAY
73728: PUSH
73729: LD_INT 2
73731: ARRAY
73732: PPUSH
73733: LD_VAR 0 1
73737: PPUSH
73738: CALL_OW 255
73742: PPUSH
73743: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73747: LD_ADDR_EXP 112
73751: PUSH
73752: LD_EXP 112
73756: PPUSH
73757: LD_VAR 0 6
73761: PPUSH
73762: LD_EXP 112
73766: PUSH
73767: LD_VAR 0 6
73771: ARRAY
73772: PPUSH
73773: LD_VAR 0 5
73777: PPUSH
73778: CALL_OW 3
73782: PPUSH
73783: CALL_OW 1
73787: ST_TO_ADDR
// end ; end ;
73788: GO 73626
73790: POP
73791: POP
// end ;
73792: LD_VAR 0 4
73796: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73797: LD_INT 0
73799: PPUSH
73800: PPUSH
73801: PPUSH
73802: PPUSH
73803: PPUSH
73804: PPUSH
73805: PPUSH
73806: PPUSH
73807: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73808: LD_VAR 0 1
73812: PPUSH
73813: CALL_OW 264
73817: PUSH
73818: LD_INT 81
73820: EQUAL
73821: NOT
73822: PUSH
73823: LD_VAR 0 1
73827: PUSH
73828: LD_EXP 111
73832: IN
73833: NOT
73834: OR
73835: IFFALSE 73839
// exit ;
73837: GO 74161
// index := GetElementIndex ( minersList , unit ) ;
73839: LD_ADDR_VAR 0 6
73843: PUSH
73844: LD_EXP 111
73848: PPUSH
73849: LD_VAR 0 1
73853: PPUSH
73854: CALL 7629 0 2
73858: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73859: LD_ADDR_VAR 0 8
73863: PUSH
73864: LD_EXP 113
73868: PUSH
73869: LD_EXP 112
73873: PUSH
73874: LD_VAR 0 6
73878: ARRAY
73879: MINUS
73880: ST_TO_ADDR
// if not minesFreeAmount then
73881: LD_VAR 0 8
73885: NOT
73886: IFFALSE 73890
// exit ;
73888: GO 74161
// tmp := [ ] ;
73890: LD_ADDR_VAR 0 7
73894: PUSH
73895: EMPTY
73896: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73897: LD_ADDR_VAR 0 5
73901: PUSH
73902: DOUBLE
73903: LD_INT 1
73905: DEC
73906: ST_TO_ADDR
73907: LD_VAR 0 8
73911: PUSH
73912: FOR_TO
73913: IFFALSE 74108
// begin _d := rand ( 0 , 5 ) ;
73915: LD_ADDR_VAR 0 11
73919: PUSH
73920: LD_INT 0
73922: PPUSH
73923: LD_INT 5
73925: PPUSH
73926: CALL_OW 12
73930: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73931: LD_ADDR_VAR 0 12
73935: PUSH
73936: LD_INT 2
73938: PPUSH
73939: LD_INT 6
73941: PPUSH
73942: CALL_OW 12
73946: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73947: LD_ADDR_VAR 0 9
73951: PUSH
73952: LD_VAR 0 2
73956: PPUSH
73957: LD_VAR 0 11
73961: PPUSH
73962: LD_VAR 0 12
73966: PPUSH
73967: CALL_OW 272
73971: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73972: LD_ADDR_VAR 0 10
73976: PUSH
73977: LD_VAR 0 3
73981: PPUSH
73982: LD_VAR 0 11
73986: PPUSH
73987: LD_VAR 0 12
73991: PPUSH
73992: CALL_OW 273
73996: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73997: LD_VAR 0 9
74001: PPUSH
74002: LD_VAR 0 10
74006: PPUSH
74007: CALL_OW 488
74011: PUSH
74012: LD_VAR 0 9
74016: PUSH
74017: LD_VAR 0 10
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_VAR 0 7
74030: IN
74031: NOT
74032: AND
74033: PUSH
74034: LD_VAR 0 9
74038: PPUSH
74039: LD_VAR 0 10
74043: PPUSH
74044: CALL_OW 458
74048: NOT
74049: AND
74050: IFFALSE 74092
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
74052: LD_ADDR_VAR 0 7
74056: PUSH
74057: LD_VAR 0 7
74061: PPUSH
74062: LD_VAR 0 7
74066: PUSH
74067: LD_INT 1
74069: PLUS
74070: PPUSH
74071: LD_VAR 0 9
74075: PUSH
74076: LD_VAR 0 10
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PPUSH
74085: CALL_OW 1
74089: ST_TO_ADDR
74090: GO 74106
// i := i - 1 ;
74092: LD_ADDR_VAR 0 5
74096: PUSH
74097: LD_VAR 0 5
74101: PUSH
74102: LD_INT 1
74104: MINUS
74105: ST_TO_ADDR
// end ;
74106: GO 73912
74108: POP
74109: POP
// for i in tmp do
74110: LD_ADDR_VAR 0 5
74114: PUSH
74115: LD_VAR 0 7
74119: PUSH
74120: FOR_IN
74121: IFFALSE 74159
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74123: LD_VAR 0 1
74127: PPUSH
74128: LD_VAR 0 5
74132: PUSH
74133: LD_INT 1
74135: ARRAY
74136: PPUSH
74137: LD_VAR 0 5
74141: PUSH
74142: LD_INT 2
74144: ARRAY
74145: PPUSH
74146: CALL 73105 0 3
74150: NOT
74151: IFFALSE 74157
// exit ;
74153: POP
74154: POP
74155: GO 74161
74157: GO 74120
74159: POP
74160: POP
// end ;
74161: LD_VAR 0 4
74165: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74166: LD_INT 0
74168: PPUSH
74169: PPUSH
74170: PPUSH
74171: PPUSH
74172: PPUSH
74173: PPUSH
74174: PPUSH
74175: PPUSH
74176: PPUSH
// if GetClass ( unit ) <> class_sniper then
74177: LD_VAR 0 1
74181: PPUSH
74182: CALL_OW 257
74186: PUSH
74187: LD_INT 5
74189: NONEQUAL
74190: IFFALSE 74194
// exit ;
74192: GO 74660
// dist := 8 ;
74194: LD_ADDR_VAR 0 5
74198: PUSH
74199: LD_INT 8
74201: ST_TO_ADDR
// viewRange := 12 ;
74202: LD_ADDR_VAR 0 8
74206: PUSH
74207: LD_INT 12
74209: ST_TO_ADDR
// side := GetSide ( unit ) ;
74210: LD_ADDR_VAR 0 6
74214: PUSH
74215: LD_VAR 0 1
74219: PPUSH
74220: CALL_OW 255
74224: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74225: LD_INT 61
74227: PPUSH
74228: LD_VAR 0 6
74232: PPUSH
74233: CALL_OW 321
74237: PUSH
74238: LD_INT 2
74240: EQUAL
74241: IFFALSE 74251
// viewRange := 16 ;
74243: LD_ADDR_VAR 0 8
74247: PUSH
74248: LD_INT 16
74250: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74251: LD_VAR 0 1
74255: PPUSH
74256: LD_VAR 0 2
74260: PPUSH
74261: LD_VAR 0 3
74265: PPUSH
74266: CALL_OW 297
74270: PUSH
74271: LD_VAR 0 5
74275: GREATER
74276: IFFALSE 74355
// begin ComMoveXY ( unit , x , y ) ;
74278: LD_VAR 0 1
74282: PPUSH
74283: LD_VAR 0 2
74287: PPUSH
74288: LD_VAR 0 3
74292: PPUSH
74293: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74297: LD_INT 35
74299: PPUSH
74300: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: LD_VAR 0 3
74318: PPUSH
74319: CALL 39370 0 3
74323: NOT
74324: IFFALSE 74328
// exit ;
74326: GO 74660
// until GetDistUnitXY ( unit , x , y ) < dist ;
74328: LD_VAR 0 1
74332: PPUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: LD_VAR 0 3
74342: PPUSH
74343: CALL_OW 297
74347: PUSH
74348: LD_VAR 0 5
74352: LESS
74353: IFFALSE 74297
// end ; ComTurnXY ( unit , x , y ) ;
74355: LD_VAR 0 1
74359: PPUSH
74360: LD_VAR 0 2
74364: PPUSH
74365: LD_VAR 0 3
74369: PPUSH
74370: CALL_OW 118
// repeat if Multiplayer then
74374: LD_OWVAR 4
74378: IFFALSE 74389
// wait ( 35 ) else
74380: LD_INT 35
74382: PPUSH
74383: CALL_OW 67
74387: GO 74396
// wait ( 5 ) ;
74389: LD_INT 5
74391: PPUSH
74392: CALL_OW 67
// _d := GetDir ( unit ) ;
74396: LD_ADDR_VAR 0 11
74400: PUSH
74401: LD_VAR 0 1
74405: PPUSH
74406: CALL_OW 254
74410: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74411: LD_ADDR_VAR 0 7
74415: PUSH
74416: LD_VAR 0 1
74420: PPUSH
74421: CALL_OW 250
74425: PPUSH
74426: LD_VAR 0 1
74430: PPUSH
74431: CALL_OW 251
74435: PPUSH
74436: LD_VAR 0 2
74440: PPUSH
74441: LD_VAR 0 3
74445: PPUSH
74446: CALL 41978 0 4
74450: ST_TO_ADDR
// until dir = _d ;
74451: LD_VAR 0 7
74455: PUSH
74456: LD_VAR 0 11
74460: EQUAL
74461: IFFALSE 74374
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74463: LD_ADDR_VAR 0 9
74467: PUSH
74468: LD_VAR 0 1
74472: PPUSH
74473: CALL_OW 250
74477: PPUSH
74478: LD_VAR 0 7
74482: PPUSH
74483: LD_VAR 0 5
74487: PPUSH
74488: CALL_OW 272
74492: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74493: LD_ADDR_VAR 0 10
74497: PUSH
74498: LD_VAR 0 1
74502: PPUSH
74503: CALL_OW 251
74507: PPUSH
74508: LD_VAR 0 7
74512: PPUSH
74513: LD_VAR 0 5
74517: PPUSH
74518: CALL_OW 273
74522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74523: LD_VAR 0 9
74527: PPUSH
74528: LD_VAR 0 10
74532: PPUSH
74533: CALL_OW 488
74537: NOT
74538: IFFALSE 74542
// exit ;
74540: GO 74660
// ComAnimCustom ( unit , 1 ) ;
74542: LD_VAR 0 1
74546: PPUSH
74547: LD_INT 1
74549: PPUSH
74550: CALL_OW 592
// p := 0 ;
74554: LD_ADDR_VAR 0 12
74558: PUSH
74559: LD_INT 0
74561: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74562: LD_VAR 0 9
74566: PPUSH
74567: LD_VAR 0 10
74571: PPUSH
74572: LD_VAR 0 6
74576: PPUSH
74577: LD_VAR 0 8
74581: PPUSH
74582: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74586: LD_INT 35
74588: PPUSH
74589: CALL_OW 67
// p := Inc ( p ) ;
74593: LD_ADDR_VAR 0 12
74597: PUSH
74598: LD_VAR 0 12
74602: PPUSH
74603: CALL 41934 0 1
74607: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74608: LD_VAR 0 12
74612: PUSH
74613: LD_INT 3
74615: EQUAL
74616: PUSH
74617: LD_VAR 0 1
74621: PPUSH
74622: CALL_OW 302
74626: NOT
74627: OR
74628: PUSH
74629: LD_VAR 0 1
74633: PPUSH
74634: CALL_OW 301
74638: OR
74639: IFFALSE 74586
// RemoveSeeing ( _x , _y , side ) ;
74641: LD_VAR 0 9
74645: PPUSH
74646: LD_VAR 0 10
74650: PPUSH
74651: LD_VAR 0 6
74655: PPUSH
74656: CALL_OW 331
// end ;
74660: LD_VAR 0 4
74664: RET
