// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46368 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46744 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: EMPTY
 763: ST_TO_ADDR
// mpTeamGame := false ;
 764: LD_ADDR_EXP 9
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 772: LD_ADDR_EXP 27
 776: PUSH
 777: LD_INT 160
 779: PUSH
 780: LD_INT 200
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 1
 791: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 801: LD_ADDR_EXP 17
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: LD_INT 10
 811: PUSH
 812: LD_INT 11
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 13
 820: PUSH
 821: LD_INT 14
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: LD_INT 16
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 18
 847: PUSH
 848: LD_INT 19
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 22
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 17
 875: UNION
 876: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 877: LD_VAR 0 1
 881: PUSH
 882: LD_INT 2
 884: EQUAL
 885: IFFALSE 897
// baseLevel := 1 else
 887: LD_ADDR_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
 895: GO 911
// baseLevel := mpGameSettings [ 1 ] ;
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_EXP 4
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 911: LD_ADDR_EXP 22
 915: PUSH
 916: LD_EXP 4
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_EXP 4
 934: PUSH
 935: LD_INT 3
 937: ARRAY
 938: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 939: LD_ADDR_EXP 13
 943: PUSH
 944: LD_EXP 4
 948: PUSH
 949: LD_INT 4
 951: ARRAY
 952: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 953: LD_ADDR_EXP 25
 957: PUSH
 958: LD_EXP 4
 962: PUSH
 963: LD_INT 5
 965: ARRAY
 966: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: LD_EXP 4
 976: PUSH
 977: LD_INT 6
 979: ARRAY
 980: PUSH
 981: LD_INT 0
 983: GREATER
 984: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 7
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// if gameType = GameTypeKing then
1003: LD_VAR 0 1
1007: PUSH
1008: LD_INT 3
1010: EQUAL
1011: IFFALSE 1051
// begin mpKingArea := kingArea ;
1013: LD_ADDR_EXP 32
1017: PUSH
1018: LD_INT 64
1020: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_EXP 4
1030: PUSH
1031: LD_INT 8
1033: ARRAY
1034: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1035: LD_ADDR_EXP 35
1039: PUSH
1040: LD_EXP 4
1044: PUSH
1045: LD_INT 10
1047: ARRAY
1048: ST_TO_ADDR
// end else
1049: GO 1075
// begin mpKingArea := 0 ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// mpPoints := 0 ;
1059: LD_ADDR_EXP 33
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// mpEmissions := 0 ;
1067: LD_ADDR_EXP 35
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 9
1082: ARRAY
1083: IFFALSE 1215
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1085: LD_ADDR_EXP 34
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 3
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 12
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 24
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 12
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 23
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: LD_INT 42
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 21
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 42
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1215: LD_ADDR_EXP 14
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 11
1227: ARRAY
1228: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1229: LD_ADDR_EXP 20
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 12
1241: ARRAY
1242: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1243: LD_ADDR_EXP 24
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 13
1255: ARRAY
1256: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1257: LD_ADDR_EXP 31
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 14
1269: ARRAY
1270: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 4
1280: PUSH
1281: LD_INT 15
1283: ARRAY
1284: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1285: LD_ADDR_EXP 26
1289: PUSH
1290: LD_EXP 4
1294: PUSH
1295: LD_INT 18
1297: ARRAY
1298: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1299: LD_ADDR_EXP 18
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_INT 21
1311: ARRAY
1312: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1313: LD_ADDR_EXP 29
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1352: LD_ADDR_VAR 0 8
1356: PUSH
1357: LD_INT 40
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL 45733 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 5
1373: PPUSH
1374: CALL 45733 0 2
1378: PUSH
1379: LD_INT 42
1381: PPUSH
1382: LD_INT 3
1384: PPUSH
1385: CALL 45733 0 2
1389: PUSH
1390: LD_INT 43
1392: PPUSH
1393: LD_INT 4
1395: PPUSH
1396: CALL 45733 0 2
1400: PUSH
1401: LD_INT 44
1403: PPUSH
1404: LD_INT 5
1406: PPUSH
1407: CALL 45733 0 2
1411: PUSH
1412: LD_INT 45
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45733 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45733 0 2
1433: PUSH
1434: LD_INT 47
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 45733 0 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 8
1469: PPUSH
1470: CALL 5082 0 1
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1580
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1478: LD_ADDR_EXP 19
1482: PUSH
1483: LD_EXP 19
1487: PPUSH
1488: LD_VAR 0 3
1492: PPUSH
1493: LD_VAR 0 8
1497: PUSH
1498: LD_VAR 0 3
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_INT 3
1521: ARRAY
1522: PPUSH
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 272
1530: PUSH
1531: LD_VAR 0 8
1535: PUSH
1536: LD_VAR 0 3
1540: ARRAY
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PPUSH
1546: LD_VAR 0 8
1550: PUSH
1551: LD_VAR 0 3
1555: ARRAY
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 10
1563: PPUSH
1564: CALL_OW 273
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 1
1577: ST_TO_ADDR
1578: GO 1475
1580: POP
1581: POP
// if hasOil then
1582: LD_VAR 0 5
1586: IFFALSE 1725
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1588: LD_ADDR_VAR 0 4
1592: PUSH
1593: LD_EXP 4
1597: PUSH
1598: LD_INT 6
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: EQUAL
1605: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1606: LD_ADDR_EXP 10
1610: PUSH
1611: LD_INT 24
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45566 0 2
1623: PUSH
1624: LD_INT 25
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45566 0 2
1636: PUSH
1637: LD_INT 26
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45566 0 2
1649: PUSH
1650: LD_INT 27
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45566 0 2
1662: PUSH
1663: LD_INT 28
1665: PPUSH
1666: LD_VAR 0 4
1670: PPUSH
1671: CALL 45566 0 2
1675: PUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_VAR 0 4
1683: PPUSH
1684: CALL 45566 0 2
1688: PUSH
1689: LD_INT 30
1691: PPUSH
1692: LD_VAR 0 4
1696: PPUSH
1697: CALL 45566 0 2
1701: PUSH
1702: LD_INT 31
1704: PPUSH
1705: LD_VAR 0 4
1709: PPUSH
1710: CALL 45566 0 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// end ; if hasSib then
1725: LD_VAR 0 6
1729: IFFALSE 1868
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_EXP 4
1740: PUSH
1741: LD_INT 7
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: EQUAL
1748: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1749: LD_ADDR_EXP 11
1753: PUSH
1754: LD_INT 32
1756: PPUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: CALL 45566 0 2
1766: PUSH
1767: LD_INT 33
1769: PPUSH
1770: LD_VAR 0 4
1774: PPUSH
1775: CALL 45566 0 2
1779: PUSH
1780: LD_INT 34
1782: PPUSH
1783: LD_VAR 0 4
1787: PPUSH
1788: CALL 45566 0 2
1792: PUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_VAR 0 4
1800: PPUSH
1801: CALL 45566 0 2
1805: PUSH
1806: LD_INT 36
1808: PPUSH
1809: LD_VAR 0 4
1813: PPUSH
1814: CALL 45566 0 2
1818: PUSH
1819: LD_INT 37
1821: PPUSH
1822: LD_VAR 0 4
1826: PPUSH
1827: CALL 45566 0 2
1831: PUSH
1832: LD_INT 38
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL 45566 0 2
1844: PUSH
1845: LD_INT 39
1847: PPUSH
1848: LD_VAR 0 4
1852: PPUSH
1853: CALL 45566 0 2
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1868: LD_VAR 0 7
1872: PUSH
1873: LD_INT 1
1875: GREATEREQUAL
1876: IFFALSE 1888
// mpDepots := startPos ;
1878: LD_ADDR_EXP 12
1882: PUSH
1883: LD_VAR 0 8
1887: ST_TO_ADDR
// if baseLevel >= 2 then
1888: LD_VAR 0 7
1892: PUSH
1893: LD_INT 2
1895: GREATEREQUAL
1896: IFFALSE 2313
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1898: LD_ADDR_EXP 15
1902: PUSH
1903: LD_INT 31
1905: PUSH
1906: LD_INT 48
1908: PPUSH
1909: LD_INT 5
1911: PPUSH
1912: CALL 45733 0 2
1916: ADD
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 49
1923: PPUSH
1924: LD_INT 4
1926: PPUSH
1927: CALL 45733 0 2
1931: ADD
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: LD_INT 65
1938: PPUSH
1939: LD_INT 5
1941: PPUSH
1942: CALL 45733 0 2
1946: ADD
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 31
1955: PUSH
1956: LD_INT 50
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL 45733 0 2
1966: ADD
1967: PUSH
1968: LD_INT 31
1970: PUSH
1971: LD_INT 51
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: CALL 45733 0 2
1981: ADD
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 66
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL 45733 0 2
1996: ADD
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 31
2005: PUSH
2006: LD_INT 52
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45733 0 2
2016: ADD
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 53
2023: PPUSH
2024: LD_INT 5
2026: PPUSH
2027: CALL 45733 0 2
2031: ADD
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 67
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL 45733 0 2
2046: ADD
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 31
2055: PUSH
2056: LD_INT 54
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: CALL 45733 0 2
2066: ADD
2067: PUSH
2068: LD_INT 31
2070: PUSH
2071: LD_INT 55
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: CALL 45733 0 2
2081: ADD
2082: PUSH
2083: LD_INT 4
2085: PUSH
2086: LD_INT 68
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: CALL 45733 0 2
2096: ADD
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 31
2105: PUSH
2106: LD_INT 56
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL 45733 0 2
2116: ADD
2117: PUSH
2118: LD_INT 31
2120: PUSH
2121: LD_INT 57
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL 45733 0 2
2131: ADD
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 69
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL 45733 0 2
2146: ADD
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 31
2155: PUSH
2156: LD_INT 58
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 45733 0 2
2166: ADD
2167: PUSH
2168: LD_INT 31
2170: PUSH
2171: LD_INT 59
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL 45733 0 2
2181: ADD
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: LD_INT 70
2188: PPUSH
2189: LD_INT 5
2191: PPUSH
2192: CALL 45733 0 2
2196: ADD
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 31
2205: PUSH
2206: LD_INT 60
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL 45733 0 2
2216: ADD
2217: PUSH
2218: LD_INT 31
2220: PUSH
2221: LD_INT 61
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL 45733 0 2
2231: ADD
2232: PUSH
2233: LD_INT 4
2235: PUSH
2236: LD_INT 71
2238: PPUSH
2239: LD_INT 3
2241: PPUSH
2242: CALL 45733 0 2
2246: ADD
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 31
2255: PUSH
2256: LD_INT 62
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL 45733 0 2
2266: ADD
2267: PUSH
2268: LD_INT 31
2270: PUSH
2271: LD_INT 63
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: CALL 45733 0 2
2281: ADD
2282: PUSH
2283: LD_INT 4
2285: PUSH
2286: LD_INT 72
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: CALL 45733 0 2
2296: ADD
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// end ; end ;
2313: LD_VAR 0 2
2317: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2318: GO 2320
2320: DISABLE
2321: LD_INT 0
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin if not mpShipments then
2331: LD_EXP 25
2335: NOT
2336: IFFALSE 2340
// exit ;
2338: GO 2795
// case mpShipments of 1 :
2340: LD_EXP 25
2344: PUSH
2345: LD_INT 1
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2388
2353: POP
// begin time := 0 0$30 ;
2354: LD_ADDR_VAR 0 5
2358: PUSH
2359: LD_INT 1050
2361: ST_TO_ADDR
// normalTime := 0 0$30 ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_INT 1050
2369: ST_TO_ADDR
// maxTime := 1 1$20 ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_INT 2800
2377: ST_TO_ADDR
// delayTime := 0 0$5 ;
2378: LD_ADDR_VAR 0 7
2382: PUSH
2383: LD_INT 175
2385: ST_TO_ADDR
// end ; 2 :
2386: GO 2518
2388: LD_INT 2
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2396
2394: GO 2431
2396: POP
// begin time := 0 0$25 ;
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_INT 875
2404: ST_TO_ADDR
// normalTime := 0 0$25 ;
2405: LD_ADDR_VAR 0 6
2409: PUSH
2410: LD_INT 875
2412: ST_TO_ADDR
// maxTime := 1 1$10 ;
2413: LD_ADDR_VAR 0 8
2417: PUSH
2418: LD_INT 2450
2420: ST_TO_ADDR
// delayTime := 0 0$4 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 140
2428: ST_TO_ADDR
// end ; 3 :
2429: GO 2518
2431: LD_INT 3
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2474
2439: POP
// begin time := 0 0$20 ;
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_INT 700
2447: ST_TO_ADDR
// normalTime := 0 0$20 ;
2448: LD_ADDR_VAR 0 6
2452: PUSH
2453: LD_INT 700
2455: ST_TO_ADDR
// maxTime := 1 1$00 ;
2456: LD_ADDR_VAR 0 8
2460: PUSH
2461: LD_INT 2100
2463: ST_TO_ADDR
// delayTime := 0 0$3 ;
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_INT 105
2471: ST_TO_ADDR
// end ; 4 :
2472: GO 2518
2474: LD_INT 4
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2517
2482: POP
// begin time := 0 0$15 ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_INT 525
2490: ST_TO_ADDR
// normalTime := 0 0$15 ;
2491: LD_ADDR_VAR 0 6
2495: PUSH
2496: LD_INT 525
2498: ST_TO_ADDR
// maxTime := 0 0$55 ;
2499: LD_ADDR_VAR 0 8
2503: PUSH
2504: LD_INT 1925
2506: ST_TO_ADDR
// delayTime := 0 0$2 ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 70
2514: ST_TO_ADDR
// end ; end ;
2515: GO 2518
2517: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 18
2525: PUSH
2526: LD_INT 19
2528: PUSH
2529: LD_INT 20
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 22
2537: PUSH
2538: LD_INT 23
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_INT 9
2556: PUSH
2557: LD_INT 10
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 12
2565: PUSH
2566: LD_INT 13
2568: PUSH
2569: LD_INT 14
2571: PUSH
2572: LD_INT 15
2574: PUSH
2575: LD_INT 16
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// for i := 1 to 8 do
2588: LD_ADDR_VAR 0 1
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 8
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2649
// begin if not mpSidePositions [ i ] then
2604: LD_EXP 5
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: NOT
2615: IFFALSE 2619
// continue ;
2617: GO 2601
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_EXP 5
2638: PUSH
2639: LD_VAR 0 1
2643: ARRAY
2644: ARRAY
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2601
2649: POP
2650: POP
// x := 1 ;
2651: LD_ADDR_VAR 0 2
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// repeat wait ( time ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: CALL_OW 67
// x := Inc ( x ) ;
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 42387 0 1
2682: ST_TO_ADDR
// if x > 5 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 5
2690: GREATER
2691: IFFALSE 2701
// x := 1 ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// for i in areas do
2701: LD_ADDR_VAR 0 1
2705: PUSH
2706: LD_VAR 0 4
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2751
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 287
2726: PUSH
2727: LD_INT 20
2729: LESS
2730: IFFALSE 2749
// begin CreateCratesArea ( x , i , true ) ;
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 1
2744: PPUSH
2745: CALL_OW 55
// end ; end ;
2749: GO 2711
2751: POP
2752: POP
// time := time + delayTime ;
2753: LD_ADDR_VAR 0 5
2757: PUSH
2758: LD_VAR 0 5
2762: PUSH
2763: LD_VAR 0 7
2767: PLUS
2768: ST_TO_ADDR
// if time > maxTime then
2769: LD_VAR 0 5
2773: PUSH
2774: LD_VAR 0 8
2778: GREATER
2779: IFFALSE 2791
// time := normalTime ;
2781: LD_ADDR_VAR 0 5
2785: PUSH
2786: LD_VAR 0 6
2790: ST_TO_ADDR
// until false ;
2791: LD_INT 0
2793: IFFALSE 2659
// end ; end_of_file
2795: PPOPN 8
2797: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 55530 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL 51516 0 1
// end ;
2816: PPOPN 1
2818: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL 55547 0 1
// end ;
2828: PPOPN 1
2830: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL 52223 0 1
2840: PPOPN 1
2842: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2843: LD_VAR 0 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL 55588 0 2
2857: PPOPN 2
2859: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_VAR 0 3
2874: PPUSH
2875: CALL 52276 0 3
2879: PPOPN 3
2881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// if exist_mode then
2886: LD_VAR 0 2
2890: IFFALSE 2936
// begin unit := CreateCharacter ( prefix & ident ) ;
2892: LD_ADDR_VAR 0 5
2896: PUSH
2897: LD_VAR 0 3
2901: PUSH
2902: LD_VAR 0 1
2906: STR
2907: PPUSH
2908: CALL_OW 34
2912: ST_TO_ADDR
// if unit then
2913: LD_VAR 0 5
2917: IFFALSE 2934
// DeleteCharacters ( prefix & ident ) ;
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: STR
2929: PPUSH
2930: CALL_OW 40
// end else
2934: GO 2951
// unit := NewCharacter ( ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// result := unit ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_VAR 0 5
2960: ST_TO_ADDR
// end ;
2961: LD_VAR 0 4
2965: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2966: LD_INT 0
2968: PPUSH
2969: PPUSH
// if exist_mode then
2970: LD_VAR 0 2
2974: IFFALSE 2999
// unit := CreateCharacter ( prefix & ident ) else
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: LD_VAR 0 3
2985: PUSH
2986: LD_VAR 0 1
2990: STR
2991: PPUSH
2992: CALL_OW 34
2996: ST_TO_ADDR
2997: GO 3014
// unit := NewCharacter ( ident ) ;
2999: LD_ADDR_VAR 0 5
3003: PUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 25
3013: ST_TO_ADDR
// result := unit ;
3014: LD_ADDR_VAR 0 4
3018: PUSH
3019: LD_VAR 0 5
3023: ST_TO_ADDR
// end ;
3024: LD_VAR 0 4
3028: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
// if not side or not nation then
3033: LD_VAR 0 1
3037: NOT
3038: IFTRUE 3047
3040: PUSH
3041: LD_VAR 0 2
3045: NOT
3046: OR
3047: IFFALSE 3051
// exit ;
3049: GO 3821
// case nation of nation_american :
3051: LD_VAR 0 2
3055: PUSH
3056: LD_INT 1
3058: DOUBLE
3059: EQUAL
3060: IFTRUE 3064
3062: GO 3278
3064: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 35
3072: PUSH
3073: LD_INT 45
3075: PUSH
3076: LD_INT 46
3078: PUSH
3079: LD_INT 47
3081: PUSH
3082: LD_INT 82
3084: PUSH
3085: LD_INT 83
3087: PUSH
3088: LD_INT 84
3090: PUSH
3091: LD_INT 85
3093: PUSH
3094: LD_INT 86
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: LD_INT 2
3102: PUSH
3103: LD_INT 6
3105: PUSH
3106: LD_INT 15
3108: PUSH
3109: LD_INT 16
3111: PUSH
3112: LD_INT 7
3114: PUSH
3115: LD_INT 12
3117: PUSH
3118: LD_INT 13
3120: PUSH
3121: LD_INT 10
3123: PUSH
3124: LD_INT 14
3126: PUSH
3127: LD_INT 20
3129: PUSH
3130: LD_INT 21
3132: PUSH
3133: LD_INT 22
3135: PUSH
3136: LD_INT 25
3138: PUSH
3139: LD_INT 32
3141: PUSH
3142: LD_INT 27
3144: PUSH
3145: LD_INT 36
3147: PUSH
3148: LD_INT 69
3150: PUSH
3151: LD_INT 39
3153: PUSH
3154: LD_INT 34
3156: PUSH
3157: LD_INT 40
3159: PUSH
3160: LD_INT 48
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: LD_INT 50
3168: PUSH
3169: LD_INT 51
3171: PUSH
3172: LD_INT 52
3174: PUSH
3175: LD_INT 53
3177: PUSH
3178: LD_INT 54
3180: PUSH
3181: LD_INT 55
3183: PUSH
3184: LD_INT 56
3186: PUSH
3187: LD_INT 57
3189: PUSH
3190: LD_INT 58
3192: PUSH
3193: LD_INT 59
3195: PUSH
3196: LD_INT 60
3198: PUSH
3199: LD_INT 61
3201: PUSH
3202: LD_INT 62
3204: PUSH
3205: LD_INT 80
3207: PUSH
3208: LD_INT 82
3210: PUSH
3211: LD_INT 83
3213: PUSH
3214: LD_INT 84
3216: PUSH
3217: LD_INT 85
3219: PUSH
3220: LD_INT 86
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
3276: GO 3743
3278: LD_INT 2
3280: DOUBLE
3281: EQUAL
3282: IFTRUE 3286
3284: GO 3512
3286: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3287: LD_ADDR_VAR 0 4
3291: PUSH
3292: LD_INT 35
3294: PUSH
3295: LD_INT 45
3297: PUSH
3298: LD_INT 46
3300: PUSH
3301: LD_INT 47
3303: PUSH
3304: LD_INT 82
3306: PUSH
3307: LD_INT 83
3309: PUSH
3310: LD_INT 84
3312: PUSH
3313: LD_INT 85
3315: PUSH
3316: LD_INT 87
3318: PUSH
3319: LD_INT 70
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: LD_INT 11
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: LD_INT 4
3333: PUSH
3334: LD_INT 5
3336: PUSH
3337: LD_INT 6
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 18
3345: PUSH
3346: LD_INT 7
3348: PUSH
3349: LD_INT 17
3351: PUSH
3352: LD_INT 8
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 72
3366: PUSH
3367: LD_INT 26
3369: PUSH
3370: LD_INT 69
3372: PUSH
3373: LD_INT 39
3375: PUSH
3376: LD_INT 40
3378: PUSH
3379: LD_INT 41
3381: PUSH
3382: LD_INT 42
3384: PUSH
3385: LD_INT 43
3387: PUSH
3388: LD_INT 48
3390: PUSH
3391: LD_INT 49
3393: PUSH
3394: LD_INT 50
3396: PUSH
3397: LD_INT 51
3399: PUSH
3400: LD_INT 52
3402: PUSH
3403: LD_INT 53
3405: PUSH
3406: LD_INT 54
3408: PUSH
3409: LD_INT 55
3411: PUSH
3412: LD_INT 56
3414: PUSH
3415: LD_INT 60
3417: PUSH
3418: LD_INT 61
3420: PUSH
3421: LD_INT 62
3423: PUSH
3424: LD_INT 66
3426: PUSH
3427: LD_INT 67
3429: PUSH
3430: LD_INT 68
3432: PUSH
3433: LD_INT 81
3435: PUSH
3436: LD_INT 82
3438: PUSH
3439: LD_INT 83
3441: PUSH
3442: LD_INT 84
3444: PUSH
3445: LD_INT 85
3447: PUSH
3448: LD_INT 87
3450: PUSH
3451: LD_INT 88
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: ST_TO_ADDR
3510: GO 3743
3512: LD_INT 3
3514: DOUBLE
3515: EQUAL
3516: IFTRUE 3520
3518: GO 3742
3520: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_INT 46
3528: PUSH
3529: LD_INT 47
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 82
3540: PUSH
3541: LD_INT 83
3543: PUSH
3544: LD_INT 84
3546: PUSH
3547: LD_INT 85
3549: PUSH
3550: LD_INT 86
3552: PUSH
3553: LD_INT 11
3555: PUSH
3556: LD_INT 9
3558: PUSH
3559: LD_INT 20
3561: PUSH
3562: LD_INT 19
3564: PUSH
3565: LD_INT 21
3567: PUSH
3568: LD_INT 24
3570: PUSH
3571: LD_INT 22
3573: PUSH
3574: LD_INT 25
3576: PUSH
3577: LD_INT 28
3579: PUSH
3580: LD_INT 29
3582: PUSH
3583: LD_INT 30
3585: PUSH
3586: LD_INT 31
3588: PUSH
3589: LD_INT 37
3591: PUSH
3592: LD_INT 38
3594: PUSH
3595: LD_INT 32
3597: PUSH
3598: LD_INT 27
3600: PUSH
3601: LD_INT 33
3603: PUSH
3604: LD_INT 69
3606: PUSH
3607: LD_INT 39
3609: PUSH
3610: LD_INT 34
3612: PUSH
3613: LD_INT 40
3615: PUSH
3616: LD_INT 71
3618: PUSH
3619: LD_INT 23
3621: PUSH
3622: LD_INT 44
3624: PUSH
3625: LD_INT 48
3627: PUSH
3628: LD_INT 49
3630: PUSH
3631: LD_INT 50
3633: PUSH
3634: LD_INT 51
3636: PUSH
3637: LD_INT 52
3639: PUSH
3640: LD_INT 53
3642: PUSH
3643: LD_INT 54
3645: PUSH
3646: LD_INT 55
3648: PUSH
3649: LD_INT 56
3651: PUSH
3652: LD_INT 57
3654: PUSH
3655: LD_INT 58
3657: PUSH
3658: LD_INT 59
3660: PUSH
3661: LD_INT 63
3663: PUSH
3664: LD_INT 64
3666: PUSH
3667: LD_INT 65
3669: PUSH
3670: LD_INT 82
3672: PUSH
3673: LD_INT 83
3675: PUSH
3676: LD_INT 84
3678: PUSH
3679: LD_INT 85
3681: PUSH
3682: LD_INT 86
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: ST_TO_ADDR
3740: GO 3743
3742: POP
// if state > - 1 and state < 3 then
3743: LD_VAR 0 3
3747: PUSH
3748: LD_INT 1
3750: NEG
3751: GREATER
3752: IFFALSE 3764
3754: PUSH
3755: LD_VAR 0 3
3759: PUSH
3760: LD_INT 3
3762: LESS
3763: AND
3764: IFFALSE 3821
// for i in result do
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_VAR 0 4
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3819
// if GetTech ( i , side ) <> state then
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 321
3793: PUSH
3794: LD_VAR 0 3
3798: NONEQUAL
3799: IFFALSE 3817
// result := result diff i ;
3801: LD_ADDR_VAR 0 4
3805: PUSH
3806: LD_VAR 0 4
3810: PUSH
3811: LD_VAR 0 5
3815: DIFF
3816: ST_TO_ADDR
3817: GO 3776
3819: POP
3820: POP
// end ;
3821: LD_VAR 0 4
3825: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3826: LD_INT 0
3828: PPUSH
3829: PPUSH
3830: PPUSH
// result := true ;
3831: LD_ADDR_VAR 0 3
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3839: LD_ADDR_VAR 0 5
3843: PUSH
3844: LD_VAR 0 2
3848: PPUSH
3849: CALL_OW 480
3853: ST_TO_ADDR
// if not tmp then
3854: LD_VAR 0 5
3858: NOT
3859: IFFALSE 3863
// exit ;
3861: GO 3912
// for i in tmp do
3863: LD_ADDR_VAR 0 4
3867: PUSH
3868: LD_VAR 0 5
3872: PUSH
3873: FOR_IN
3874: IFFALSE 3910
// if GetTech ( i , side ) <> state_researched then
3876: LD_VAR 0 4
3880: PPUSH
3881: LD_VAR 0 1
3885: PPUSH
3886: CALL_OW 321
3890: PUSH
3891: LD_INT 2
3893: NONEQUAL
3894: IFFALSE 3908
// begin result := false ;
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// exit ;
3904: POP
3905: POP
3906: GO 3912
// end ;
3908: GO 3873
3910: POP
3911: POP
// end ;
3912: LD_VAR 0 3
3916: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3917: LD_INT 0
3919: PPUSH
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3932: LD_VAR 0 1
3936: NOT
3937: IFTRUE 3954
3939: PUSH
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 257
3949: PUSH
3950: LD_INT 9
3952: NONEQUAL
3953: OR
3954: IFFALSE 3958
// exit ;
3956: GO 4537
// side := GetSide ( unit ) ;
3958: LD_ADDR_VAR 0 9
3962: PUSH
3963: LD_VAR 0 1
3967: PPUSH
3968: CALL_OW 255
3972: ST_TO_ADDR
// tech_space := tech_spacanom ;
3973: LD_ADDR_VAR 0 12
3977: PUSH
3978: LD_INT 29
3980: ST_TO_ADDR
// tech_time := tech_taurad ;
3981: LD_ADDR_VAR 0 13
3985: PUSH
3986: LD_INT 28
3988: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3989: LD_ADDR_VAR 0 11
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 310
4003: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 247
4013: PUSH
4014: LD_INT 2
4016: EQUAL
4017: IFFALSE 4021
// exit ;
4019: GO 4537
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4021: LD_ADDR_VAR 0 8
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_VAR 0 9
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: ST_TO_ADDR
// if not tmp then
4064: LD_VAR 0 8
4068: NOT
4069: IFFALSE 4073
// exit ;
4071: GO 4537
// if in_unit then
4073: LD_VAR 0 11
4077: IFFALSE 4101
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4079: LD_ADDR_VAR 0 10
4083: PUSH
4084: LD_VAR 0 8
4088: PPUSH
4089: LD_VAR 0 11
4093: PPUSH
4094: CALL_OW 74
4098: ST_TO_ADDR
4099: GO 4121
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4101: LD_ADDR_VAR 0 10
4105: PUSH
4106: LD_VAR 0 8
4110: PPUSH
4111: LD_VAR 0 1
4115: PPUSH
4116: CALL_OW 74
4120: ST_TO_ADDR
// if not enemy then
4121: LD_VAR 0 10
4125: NOT
4126: IFFALSE 4130
// exit ;
4128: GO 4537
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4130: LD_VAR 0 11
4134: IFFALSE 4156
4136: PUSH
4137: LD_VAR 0 11
4141: PPUSH
4142: LD_VAR 0 10
4146: PPUSH
4147: CALL_OW 296
4151: PUSH
4152: LD_INT 13
4154: GREATER
4155: AND
4156: IFTRUE 4178
4158: PUSH
4159: LD_VAR 0 1
4163: PPUSH
4164: LD_VAR 0 10
4168: PPUSH
4169: CALL_OW 296
4173: PUSH
4174: LD_INT 12
4176: GREATER
4177: OR
4178: IFFALSE 4182
// exit ;
4180: GO 4537
// missile := [ 1 ] ;
4182: LD_ADDR_VAR 0 14
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4193: LD_VAR 0 9
4197: PPUSH
4198: LD_VAR 0 12
4202: PPUSH
4203: CALL_OW 325
4207: IFFALSE 4236
// missile := Replace ( missile , missile + 1 , 2 ) ;
4209: LD_ADDR_VAR 0 14
4213: PUSH
4214: LD_VAR 0 14
4218: PPUSH
4219: LD_VAR 0 14
4223: PUSH
4224: LD_INT 1
4226: PLUS
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 1
4235: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4236: LD_VAR 0 9
4240: PPUSH
4241: LD_VAR 0 13
4245: PPUSH
4246: CALL_OW 325
4250: IFFALSE 4274
4252: PUSH
4253: LD_VAR 0 10
4257: PPUSH
4258: CALL_OW 255
4262: PPUSH
4263: LD_VAR 0 13
4267: PPUSH
4268: CALL_OW 325
4272: NOT
4273: AND
4274: IFFALSE 4303
// missile := Replace ( missile , missile + 1 , 3 ) ;
4276: LD_ADDR_VAR 0 14
4280: PUSH
4281: LD_VAR 0 14
4285: PPUSH
4286: LD_VAR 0 14
4290: PUSH
4291: LD_INT 1
4293: PLUS
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: CALL_OW 1
4302: ST_TO_ADDR
// if missile < 2 then
4303: LD_VAR 0 14
4307: PUSH
4308: LD_INT 2
4310: LESS
4311: IFFALSE 4315
// exit ;
4313: GO 4537
// x := GetX ( enemy ) ;
4315: LD_ADDR_VAR 0 4
4319: PUSH
4320: LD_VAR 0 10
4324: PPUSH
4325: CALL_OW 250
4329: ST_TO_ADDR
// y := GetY ( enemy ) ;
4330: LD_ADDR_VAR 0 5
4334: PUSH
4335: LD_VAR 0 10
4339: PPUSH
4340: CALL_OW 251
4344: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4345: LD_ADDR_VAR 0 6
4349: PUSH
4350: LD_VAR 0 4
4354: PUSH
4355: LD_INT 1
4357: NEG
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: CALL_OW 12
4366: PLUS
4367: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4368: LD_ADDR_VAR 0 7
4372: PUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_INT 1
4380: NEG
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 12
4389: PLUS
4390: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4391: LD_VAR 0 6
4395: PPUSH
4396: LD_VAR 0 7
4400: PPUSH
4401: CALL_OW 488
4405: NOT
4406: IFFALSE 4428
// begin _x := x ;
4408: LD_ADDR_VAR 0 6
4412: PUSH
4413: LD_VAR 0 4
4417: ST_TO_ADDR
// _y := y ;
4418: LD_ADDR_VAR 0 7
4422: PUSH
4423: LD_VAR 0 5
4427: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: LD_INT 1
4435: PPUSH
4436: LD_VAR 0 14
4440: PPUSH
4441: CALL_OW 12
4445: ST_TO_ADDR
// case i of 1 :
4446: LD_VAR 0 3
4450: PUSH
4451: LD_INT 1
4453: DOUBLE
4454: EQUAL
4455: IFTRUE 4459
4457: GO 4476
4459: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4460: LD_VAR 0 1
4464: PPUSH
4465: LD_VAR 0 10
4469: PPUSH
4470: CALL_OW 115
4474: GO 4537
4476: LD_INT 2
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4506
4484: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_VAR 0 6
4494: PPUSH
4495: LD_VAR 0 7
4499: PPUSH
4500: CALL_OW 153
4504: GO 4537
4506: LD_INT 3
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4536
4514: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4515: LD_VAR 0 1
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: LD_VAR 0 7
4529: PPUSH
4530: CALL_OW 154
4534: GO 4537
4536: POP
// end ;
4537: LD_VAR 0 2
4541: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
// if not unit or not building then
4550: LD_VAR 0 1
4554: NOT
4555: IFTRUE 4564
4557: PUSH
4558: LD_VAR 0 2
4562: NOT
4563: OR
4564: IFFALSE 4568
// exit ;
4566: GO 4726
// x := GetX ( building ) ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_VAR 0 2
4577: PPUSH
4578: CALL_OW 250
4582: ST_TO_ADDR
// y := GetY ( building ) ;
4583: LD_ADDR_VAR 0 6
4587: PUSH
4588: LD_VAR 0 2
4592: PPUSH
4593: CALL_OW 251
4597: ST_TO_ADDR
// for i := 0 to 5 do
4598: LD_ADDR_VAR 0 4
4602: PUSH
4603: DOUBLE
4604: LD_INT 0
4606: DEC
4607: ST_TO_ADDR
4608: LD_INT 5
4610: PUSH
4611: FOR_TO
4612: IFFALSE 4724
// begin _x := ShiftX ( x , i , 3 ) ;
4614: LD_ADDR_VAR 0 7
4618: PUSH
4619: LD_VAR 0 5
4623: PPUSH
4624: LD_VAR 0 4
4628: PPUSH
4629: LD_INT 3
4631: PPUSH
4632: CALL_OW 272
4636: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4637: LD_ADDR_VAR 0 8
4641: PUSH
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 4
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 273
4659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4660: LD_VAR 0 7
4664: PPUSH
4665: LD_VAR 0 8
4669: PPUSH
4670: CALL_OW 488
4674: NOT
4675: IFFALSE 4679
// continue ;
4677: GO 4611
// if HexInfo ( _x , _y ) = 0 then
4679: LD_VAR 0 7
4683: PPUSH
4684: LD_VAR 0 8
4688: PPUSH
4689: CALL_OW 428
4693: PUSH
4694: LD_INT 0
4696: EQUAL
4697: IFFALSE 4722
// begin ComMoveXY ( unit , _x , _y ) ;
4699: LD_VAR 0 1
4703: PPUSH
4704: LD_VAR 0 7
4708: PPUSH
4709: LD_VAR 0 8
4713: PPUSH
4714: CALL_OW 111
// exit ;
4718: POP
4719: POP
4720: GO 4726
// end ; end ;
4722: GO 4611
4724: POP
4725: POP
// end ;
4726: LD_VAR 0 3
4730: RET
// export function ScanBase ( side , base_area ) ; begin
4731: LD_INT 0
4733: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4734: LD_ADDR_VAR 0 3
4738: PUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 81
4746: PUSH
4747: LD_VAR 0 1
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PPUSH
4756: CALL_OW 70
4760: ST_TO_ADDR
// end ;
4761: LD_VAR 0 3
4765: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4766: LD_INT 0
4768: PPUSH
4769: PPUSH
4770: PPUSH
4771: PPUSH
// result := false ;
4772: LD_ADDR_VAR 0 2
4776: PUSH
4777: LD_INT 0
4779: ST_TO_ADDR
// side := GetSide ( unit ) ;
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 255
4794: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4795: LD_ADDR_VAR 0 4
4799: PUSH
4800: LD_VAR 0 1
4804: PPUSH
4805: CALL_OW 248
4809: ST_TO_ADDR
// case nat of 1 :
4810: LD_VAR 0 4
4814: PUSH
4815: LD_INT 1
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4834
4823: POP
// tech := tech_lassight ; 2 :
4824: LD_ADDR_VAR 0 5
4828: PUSH
4829: LD_INT 12
4831: ST_TO_ADDR
4832: GO 4873
4834: LD_INT 2
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// tech := tech_mortar ; 3 :
4843: LD_ADDR_VAR 0 5
4847: PUSH
4848: LD_INT 41
4850: ST_TO_ADDR
4851: GO 4873
4853: LD_INT 3
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4872
4861: POP
// tech := tech_bazooka ; end ;
4862: LD_ADDR_VAR 0 5
4866: PUSH
4867: LD_INT 44
4869: ST_TO_ADDR
4870: GO 4873
4872: POP
// if Researched ( side , tech ) then
4873: LD_VAR 0 3
4877: PPUSH
4878: LD_VAR 0 5
4882: PPUSH
4883: CALL_OW 325
4887: IFFALSE 4914
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: LD_INT 5
4896: PUSH
4897: LD_INT 8
4899: PUSH
4900: LD_INT 9
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_VAR 0 4
4912: ARRAY
4913: ST_TO_ADDR
// end ;
4914: LD_VAR 0 2
4918: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4919: LD_INT 0
4921: PPUSH
4922: PPUSH
4923: PPUSH
// if not mines then
4924: LD_VAR 0 2
4928: NOT
4929: IFFALSE 4933
// exit ;
4931: GO 5077
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4933: LD_ADDR_VAR 0 5
4937: PUSH
4938: LD_INT 81
4940: PUSH
4941: LD_VAR 0 1
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 3
4952: PUSH
4953: LD_INT 21
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 69
4975: ST_TO_ADDR
// for i in mines do
4976: LD_ADDR_VAR 0 4
4980: PUSH
4981: LD_VAR 0 2
4985: PUSH
4986: FOR_IN
4987: IFFALSE 5075
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4989: LD_VAR 0 4
4993: PUSH
4994: LD_INT 1
4996: ARRAY
4997: PPUSH
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 2
5005: ARRAY
5006: PPUSH
5007: CALL_OW 458
5011: NOT
5012: IFFALSE 5016
// continue ;
5014: GO 4986
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5016: LD_VAR 0 4
5020: PUSH
5021: LD_INT 1
5023: ARRAY
5024: PPUSH
5025: LD_VAR 0 4
5029: PUSH
5030: LD_INT 2
5032: ARRAY
5033: PPUSH
5034: CALL_OW 428
5038: PUSH
5039: LD_VAR 0 5
5043: IN
5044: IFFALSE 5073
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5046: LD_VAR 0 4
5050: PUSH
5051: LD_INT 1
5053: ARRAY
5054: PPUSH
5055: LD_VAR 0 4
5059: PUSH
5060: LD_INT 2
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 456
// end ;
5073: GO 4986
5075: POP
5076: POP
// end ;
5077: LD_VAR 0 3
5081: RET
// export function Count ( array ) ; begin
5082: LD_INT 0
5084: PPUSH
// result := array + 0 ;
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_VAR 0 1
5094: PUSH
5095: LD_INT 0
5097: PLUS
5098: ST_TO_ADDR
// end ;
5099: LD_VAR 0 2
5103: RET
// export function IsEmpty ( building ) ; begin
5104: LD_INT 0
5106: PPUSH
// if not building then
5107: LD_VAR 0 1
5111: NOT
5112: IFFALSE 5116
// exit ;
5114: GO 5159
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5116: LD_ADDR_VAR 0 2
5120: PUSH
5121: LD_VAR 0 1
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 1
5133: PPUSH
5134: CALL_OW 255
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 58
5145: PUSH
5146: EMPTY
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 69
5157: IN
5158: ST_TO_ADDR
// end ;
5159: LD_VAR 0 2
5163: RET
// export function IsNotFull ( building ) ; var places ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
// if not building then
5168: LD_VAR 0 1
5172: NOT
5173: IFFALSE 5177
// exit ;
5175: GO 5205
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5177: LD_ADDR_VAR 0 2
5181: PUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 62
5192: PUSH
5193: EMPTY
5194: LIST
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PPUSH
5200: CALL_OW 72
5204: ST_TO_ADDR
// end ;
5205: LD_VAR 0 2
5209: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5210: LD_INT 0
5212: PPUSH
5213: PPUSH
5214: PPUSH
5215: PPUSH
// tmp := [ ] ;
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// list := [ ] ;
5223: LD_ADDR_VAR 0 5
5227: PUSH
5228: EMPTY
5229: ST_TO_ADDR
// for i = 16 to 25 do
5230: LD_ADDR_VAR 0 4
5234: PUSH
5235: DOUBLE
5236: LD_INT 16
5238: DEC
5239: ST_TO_ADDR
5240: LD_INT 25
5242: PUSH
5243: FOR_TO
5244: IFFALSE 5317
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_VAR 0 3
5255: PUSH
5256: LD_INT 22
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: CALL_OW 255
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: PUSH
5273: LD_INT 91
5275: PUSH
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 6
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 30
5291: PUSH
5292: LD_VAR 0 4
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: EMPTY
5307: LIST
5308: PPUSH
5309: CALL_OW 69
5313: ADD
5314: ST_TO_ADDR
5315: GO 5243
5317: POP
5318: POP
// for i = 1 to tmp do
5319: LD_ADDR_VAR 0 4
5323: PUSH
5324: DOUBLE
5325: LD_INT 1
5327: DEC
5328: ST_TO_ADDR
5329: LD_VAR 0 3
5333: PUSH
5334: FOR_TO
5335: IFFALSE 5423
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5337: LD_ADDR_VAR 0 5
5341: PUSH
5342: LD_VAR 0 5
5346: PUSH
5347: LD_VAR 0 3
5351: PUSH
5352: LD_VAR 0 4
5356: ARRAY
5357: PPUSH
5358: CALL_OW 266
5362: PUSH
5363: LD_VAR 0 3
5367: PUSH
5368: LD_VAR 0 4
5372: ARRAY
5373: PPUSH
5374: CALL_OW 250
5378: PUSH
5379: LD_VAR 0 3
5383: PUSH
5384: LD_VAR 0 4
5388: ARRAY
5389: PPUSH
5390: CALL_OW 251
5394: PUSH
5395: LD_VAR 0 3
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: PPUSH
5406: CALL_OW 254
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: ADD
5420: ST_TO_ADDR
5421: GO 5334
5423: POP
5424: POP
// result := list ;
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: LD_VAR 0 5
5434: ST_TO_ADDR
// end ;
5435: LD_VAR 0 2
5439: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5440: LD_INT 0
5442: PPUSH
5443: PPUSH
5444: PPUSH
5445: PPUSH
5446: PPUSH
5447: PPUSH
5448: PPUSH
// if not factory then
5449: LD_VAR 0 1
5453: NOT
5454: IFFALSE 5458
// exit ;
5456: GO 6061
// if control = control_apeman then
5458: LD_VAR 0 4
5462: PUSH
5463: LD_INT 5
5465: EQUAL
5466: IFFALSE 5575
// begin tmp := UnitsInside ( factory ) ;
5468: LD_ADDR_VAR 0 8
5472: PUSH
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 313
5482: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5483: LD_VAR 0 8
5487: PPUSH
5488: LD_INT 25
5490: PUSH
5491: LD_INT 12
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: NOT
5503: IFFALSE 5513
// control := control_manual ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 1
5512: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5513: LD_ADDR_VAR 0 8
5517: PUSH
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL 5210 0 1
5527: ST_TO_ADDR
// if tmp then
5528: LD_VAR 0 8
5532: IFFALSE 5575
// begin for i in tmp do
5534: LD_ADDR_VAR 0 7
5538: PUSH
5539: LD_VAR 0 8
5543: PUSH
5544: FOR_IN
5545: IFFALSE 5573
// if i [ 1 ] = b_ext_radio then
5547: LD_VAR 0 7
5551: PUSH
5552: LD_INT 1
5554: ARRAY
5555: PUSH
5556: LD_INT 22
5558: EQUAL
5559: IFFALSE 5571
// begin control := control_remote ;
5561: LD_ADDR_VAR 0 4
5565: PUSH
5566: LD_INT 2
5568: ST_TO_ADDR
// break ;
5569: GO 5573
// end ;
5571: GO 5544
5573: POP
5574: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_VAR 0 2
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_VAR 0 4
5594: PPUSH
5595: LD_VAR 0 5
5599: PPUSH
5600: CALL_OW 448
5604: IFFALSE 5639
// begin result := [ chassis , engine , control , weapon ] ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 2
5615: PUSH
5616: LD_VAR 0 3
5620: PUSH
5621: LD_VAR 0 4
5625: PUSH
5626: LD_VAR 0 5
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: ST_TO_ADDR
// exit ;
5637: GO 6061
// end ; _chassis := AvailableChassisList ( factory ) ;
5639: LD_ADDR_VAR 0 9
5643: PUSH
5644: LD_VAR 0 1
5648: PPUSH
5649: CALL_OW 475
5653: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5654: LD_ADDR_VAR 0 11
5658: PUSH
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 476
5668: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5669: LD_ADDR_VAR 0 12
5673: PUSH
5674: LD_VAR 0 1
5678: PPUSH
5679: CALL_OW 477
5683: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5684: LD_ADDR_VAR 0 10
5688: PUSH
5689: LD_VAR 0 1
5693: PPUSH
5694: CALL_OW 478
5698: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5699: LD_VAR 0 9
5703: NOT
5704: IFTRUE 5713
5706: PUSH
5707: LD_VAR 0 11
5711: NOT
5712: OR
5713: IFTRUE 5722
5715: PUSH
5716: LD_VAR 0 12
5720: NOT
5721: OR
5722: IFTRUE 5731
5724: PUSH
5725: LD_VAR 0 10
5729: NOT
5730: OR
5731: IFFALSE 5766
// begin result := [ chassis , engine , control , weapon ] ;
5733: LD_ADDR_VAR 0 6
5737: PUSH
5738: LD_VAR 0 2
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: LD_VAR 0 4
5752: PUSH
5753: LD_VAR 0 5
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: ST_TO_ADDR
// exit ;
5764: GO 6061
// end ; if not chassis in _chassis then
5766: LD_VAR 0 2
5770: PUSH
5771: LD_VAR 0 9
5775: IN
5776: NOT
5777: IFFALSE 5803
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_VAR 0 9
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_VAR 0 9
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5803: LD_VAR 0 2
5807: PPUSH
5808: LD_VAR 0 3
5812: PPUSH
5813: CALL 6066 0 2
5817: NOT
5818: IFFALSE 5879
// repeat engine := _engine [ 1 ] ;
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_VAR 0 11
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5834: LD_ADDR_VAR 0 11
5838: PUSH
5839: LD_VAR 0 11
5843: PPUSH
5844: LD_INT 1
5846: PPUSH
5847: CALL_OW 3
5851: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL 6066 0 2
5866: IFTRUE 5877
5868: PUSH
5869: LD_VAR 0 11
5873: PUSH
5874: EMPTY
5875: EQUAL
5876: OR
5877: IFFALSE 5820
// if not control in _control then
5879: LD_VAR 0 4
5883: PUSH
5884: LD_VAR 0 12
5888: IN
5889: NOT
5890: IFFALSE 5916
// control := _control [ rand ( 1 , _control ) ] ;
5892: LD_ADDR_VAR 0 4
5896: PUSH
5897: LD_VAR 0 12
5901: PUSH
5902: LD_INT 1
5904: PPUSH
5905: LD_VAR 0 12
5909: PPUSH
5910: CALL_OW 12
5914: ARRAY
5915: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_VAR 0 5
5925: PPUSH
5926: CALL 6288 0 2
5930: NOT
5931: IFFALSE 5992
// repeat weapon := _weapon [ 1 ] ;
5933: LD_ADDR_VAR 0 5
5937: PUSH
5938: LD_VAR 0 10
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5947: LD_ADDR_VAR 0 10
5951: PUSH
5952: LD_VAR 0 10
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 3
5964: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5965: LD_VAR 0 2
5969: PPUSH
5970: LD_VAR 0 5
5974: PPUSH
5975: CALL 6288 0 2
5979: IFTRUE 5990
5981: PUSH
5982: LD_VAR 0 10
5986: PUSH
5987: EMPTY
5988: EQUAL
5989: OR
5990: IFFALSE 5933
// result := [ ] ;
5992: LD_ADDR_VAR 0 6
5996: PUSH
5997: EMPTY
5998: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: LD_VAR 0 3
6013: PPUSH
6014: LD_VAR 0 4
6018: PPUSH
6019: LD_VAR 0 5
6023: PPUSH
6024: CALL_OW 448
6028: IFFALSE 6061
// result := [ chassis , engine , control , weapon ] ;
6030: LD_ADDR_VAR 0 6
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: LD_VAR 0 3
6044: PUSH
6045: LD_VAR 0 4
6049: PUSH
6050: LD_VAR 0 5
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: ST_TO_ADDR
// end ;
6061: LD_VAR 0 6
6065: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6066: LD_INT 0
6068: PPUSH
// if not chassis or not engine then
6069: LD_VAR 0 1
6073: NOT
6074: IFTRUE 6083
6076: PUSH
6077: LD_VAR 0 2
6081: NOT
6082: OR
6083: IFFALSE 6087
// exit ;
6085: GO 6283
// case engine of engine_solar :
6087: LD_VAR 0 2
6091: PUSH
6092: LD_INT 2
6094: DOUBLE
6095: EQUAL
6096: IFTRUE 6100
6098: GO 6138
6100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6101: LD_ADDR_VAR 0 3
6105: PUSH
6106: LD_INT 11
6108: PUSH
6109: LD_INT 12
6111: PUSH
6112: LD_INT 13
6114: PUSH
6115: LD_INT 14
6117: PUSH
6118: LD_INT 1
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: ST_TO_ADDR
6136: GO 6267
6138: LD_INT 1
6140: DOUBLE
6141: EQUAL
6142: IFTRUE 6146
6144: GO 6208
6146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6147: LD_ADDR_VAR 0 3
6151: PUSH
6152: LD_INT 11
6154: PUSH
6155: LD_INT 12
6157: PUSH
6158: LD_INT 13
6160: PUSH
6161: LD_INT 14
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: LD_INT 2
6169: PUSH
6170: LD_INT 3
6172: PUSH
6173: LD_INT 4
6175: PUSH
6176: LD_INT 5
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 23
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
6206: GO 6267
6208: LD_INT 3
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6266
6216: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 13
6224: PUSH
6225: LD_INT 14
6227: PUSH
6228: LD_INT 2
6230: PUSH
6231: LD_INT 3
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: LD_INT 5
6239: PUSH
6240: LD_INT 21
6242: PUSH
6243: LD_INT 22
6245: PUSH
6246: LD_INT 23
6248: PUSH
6249: LD_INT 24
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: ST_TO_ADDR
6264: GO 6267
6266: POP
// result := ( chassis in result ) ;
6267: LD_ADDR_VAR 0 3
6271: PUSH
6272: LD_VAR 0 1
6276: PUSH
6277: LD_VAR 0 3
6281: IN
6282: ST_TO_ADDR
// end ;
6283: LD_VAR 0 3
6287: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6288: LD_INT 0
6290: PPUSH
// if not chassis or not weapon then
6291: LD_VAR 0 1
6295: NOT
6296: IFTRUE 6305
6298: PUSH
6299: LD_VAR 0 2
6303: NOT
6304: OR
6305: IFFALSE 6309
// exit ;
6307: GO 7369
// case weapon of us_machine_gun :
6309: LD_VAR 0 2
6313: PUSH
6314: LD_INT 2
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6352
6322: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_INT 1
6330: PUSH
6331: LD_INT 2
6333: PUSH
6334: LD_INT 3
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 5
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
6350: GO 7353
6352: LD_INT 3
6354: DOUBLE
6355: EQUAL
6356: IFTRUE 6360
6358: GO 6390
6360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_INT 1
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: LD_INT 3
6374: PUSH
6375: LD_INT 4
6377: PUSH
6378: LD_INT 5
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: ST_TO_ADDR
6388: GO 7353
6390: LD_INT 11
6392: DOUBLE
6393: EQUAL
6394: IFTRUE 6398
6396: GO 6428
6398: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6399: LD_ADDR_VAR 0 3
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: LD_INT 2
6409: PUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: LD_INT 5
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 7353
6428: LD_INT 4
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6462
6436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6437: LD_ADDR_VAR 0 3
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 7353
6462: LD_INT 5
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6496
6470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6471: LD_ADDR_VAR 0 3
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7353
6496: LD_INT 9
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6530
6504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 7353
6530: LD_INT 7
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6564
6538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
6562: GO 7353
6564: LD_INT 12
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6598
6572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: LD_INT 4
6586: PUSH
6587: LD_INT 5
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: ST_TO_ADDR
6596: GO 7353
6598: LD_INT 13
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6632
6606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 4
6620: PUSH
6621: LD_INT 5
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7353
6632: LD_INT 14
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6658
6640: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: LD_INT 5
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 7353
6658: LD_INT 6
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6684
6666: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: LD_INT 4
6674: PUSH
6675: LD_INT 5
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: ST_TO_ADDR
6682: GO 7353
6684: LD_INT 10
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6692
6690: GO 6710
6692: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6693: LD_ADDR_VAR 0 3
6697: PUSH
6698: LD_INT 4
6700: PUSH
6701: LD_INT 5
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: ST_TO_ADDR
6708: GO 7353
6710: LD_INT 22
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6744
6718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 13
6732: PUSH
6733: LD_INT 14
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 7353
6744: LD_INT 23
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6778
6752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6753: LD_ADDR_VAR 0 3
6757: PUSH
6758: LD_INT 11
6760: PUSH
6761: LD_INT 12
6763: PUSH
6764: LD_INT 13
6766: PUSH
6767: LD_INT 14
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
6776: GO 7353
6778: LD_INT 24
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 6812
6786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_INT 11
6794: PUSH
6795: LD_INT 12
6797: PUSH
6798: LD_INT 13
6800: PUSH
6801: LD_INT 14
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7353
6812: LD_INT 30
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 11
6828: PUSH
6829: LD_INT 12
6831: PUSH
6832: LD_INT 13
6834: PUSH
6835: LD_INT 14
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7353
6846: LD_INT 25
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6872
6854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 13
6862: PUSH
6863: LD_INT 14
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7353
6872: LD_INT 27
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6898
6880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 13
6888: PUSH
6889: LD_INT 14
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7353
6898: LD_INT 92
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6932
6906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 11
6914: PUSH
6915: LD_INT 12
6917: PUSH
6918: LD_INT 13
6920: PUSH
6921: LD_INT 14
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7353
6932: LD_INT 28
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 6958
6940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7353
6958: LD_INT 29
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6984
6966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 13
6974: PUSH
6975: LD_INT 14
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 7353
6984: LD_INT 31
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 7010
6992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_INT 13
7000: PUSH
7001: LD_INT 14
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: ST_TO_ADDR
7008: GO 7353
7010: LD_INT 26
7012: DOUBLE
7013: EQUAL
7014: IFTRUE 7018
7016: GO 7036
7018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_INT 13
7026: PUSH
7027: LD_INT 14
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 7353
7036: LD_INT 42
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7070
7044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 22
7055: PUSH
7056: LD_INT 23
7058: PUSH
7059: LD_INT 24
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
7068: GO 7353
7070: LD_INT 43
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7104
7078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 22
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 7353
7104: LD_INT 44
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7138
7112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 24
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7353
7138: LD_INT 45
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 24
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7353
7172: LD_INT 49
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7206
7180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 24
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
7204: GO 7353
7206: LD_INT 51
7208: DOUBLE
7209: EQUAL
7210: IFTRUE 7214
7212: GO 7240
7214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7215: LD_ADDR_VAR 0 3
7219: PUSH
7220: LD_INT 21
7222: PUSH
7223: LD_INT 22
7225: PUSH
7226: LD_INT 23
7228: PUSH
7229: LD_INT 24
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 7353
7240: LD_INT 52
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7274
7248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_INT 21
7256: PUSH
7257: LD_INT 22
7259: PUSH
7260: LD_INT 23
7262: PUSH
7263: LD_INT 24
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: ST_TO_ADDR
7272: GO 7353
7274: LD_INT 53
7276: DOUBLE
7277: EQUAL
7278: IFTRUE 7282
7280: GO 7300
7282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 23
7290: PUSH
7291: LD_INT 24
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 7353
7300: LD_INT 46
7302: DOUBLE
7303: EQUAL
7304: IFTRUE 7308
7306: GO 7326
7308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 23
7316: PUSH
7317: LD_INT 24
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: ST_TO_ADDR
7324: GO 7353
7326: LD_INT 47
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7352
7334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7335: LD_ADDR_VAR 0 3
7339: PUSH
7340: LD_INT 23
7342: PUSH
7343: LD_INT 24
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: ST_TO_ADDR
7350: GO 7353
7352: POP
// result := ( chassis in result ) ;
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_VAR 0 3
7367: IN
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 3
7373: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
// result := array ;
7383: LD_ADDR_VAR 0 5
7387: PUSH
7388: LD_VAR 0 1
7392: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7393: LD_VAR 0 1
7397: NOT
7398: IFTRUE 7407
7400: PUSH
7401: LD_VAR 0 2
7405: NOT
7406: OR
7407: IFTRUE 7416
7409: PUSH
7410: LD_VAR 0 3
7414: NOT
7415: OR
7416: IFTRUE 7430
7418: PUSH
7419: LD_VAR 0 2
7423: PUSH
7424: LD_VAR 0 1
7428: GREATER
7429: OR
7430: IFTRUE 7444
7432: PUSH
7433: LD_VAR 0 3
7437: PUSH
7438: LD_VAR 0 1
7442: GREATER
7443: OR
7444: IFFALSE 7448
// exit ;
7446: GO 7744
// if direction then
7448: LD_VAR 0 4
7452: IFFALSE 7516
// begin d := 1 ;
7454: LD_ADDR_VAR 0 9
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// if i_from > i_to then
7462: LD_VAR 0 2
7466: PUSH
7467: LD_VAR 0 3
7471: GREATER
7472: IFFALSE 7498
// length := ( array - i_from ) + i_to else
7474: LD_ADDR_VAR 0 11
7478: PUSH
7479: LD_VAR 0 1
7483: PUSH
7484: LD_VAR 0 2
7488: MINUS
7489: PUSH
7490: LD_VAR 0 3
7494: PLUS
7495: ST_TO_ADDR
7496: GO 7514
// length := i_to - i_from ;
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 3
7507: PUSH
7508: LD_VAR 0 2
7512: MINUS
7513: ST_TO_ADDR
// end else
7514: GO 7577
// begin d := - 1 ;
7516: LD_ADDR_VAR 0 9
7520: PUSH
7521: LD_INT 1
7523: NEG
7524: ST_TO_ADDR
// if i_from > i_to then
7525: LD_VAR 0 2
7529: PUSH
7530: LD_VAR 0 3
7534: GREATER
7535: IFFALSE 7555
// length := i_from - i_to else
7537: LD_ADDR_VAR 0 11
7541: PUSH
7542: LD_VAR 0 2
7546: PUSH
7547: LD_VAR 0 3
7551: MINUS
7552: ST_TO_ADDR
7553: GO 7577
// length := ( array - i_to ) + i_from ;
7555: LD_ADDR_VAR 0 11
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: LD_VAR 0 3
7569: MINUS
7570: PUSH
7571: LD_VAR 0 2
7575: PLUS
7576: ST_TO_ADDR
// end ; if not length then
7577: LD_VAR 0 11
7581: NOT
7582: IFFALSE 7586
// exit ;
7584: GO 7744
// tmp := array ;
7586: LD_ADDR_VAR 0 10
7590: PUSH
7591: LD_VAR 0 1
7595: ST_TO_ADDR
// for i = 1 to length do
7596: LD_ADDR_VAR 0 6
7600: PUSH
7601: DOUBLE
7602: LD_INT 1
7604: DEC
7605: ST_TO_ADDR
7606: LD_VAR 0 11
7610: PUSH
7611: FOR_TO
7612: IFFALSE 7732
// begin for j = 1 to array do
7614: LD_ADDR_VAR 0 7
7618: PUSH
7619: DOUBLE
7620: LD_INT 1
7622: DEC
7623: ST_TO_ADDR
7624: LD_VAR 0 1
7628: PUSH
7629: FOR_TO
7630: IFFALSE 7718
// begin k := j + d ;
7632: LD_ADDR_VAR 0 8
7636: PUSH
7637: LD_VAR 0 7
7641: PUSH
7642: LD_VAR 0 9
7646: PLUS
7647: ST_TO_ADDR
// if k > array then
7648: LD_VAR 0 8
7652: PUSH
7653: LD_VAR 0 1
7657: GREATER
7658: IFFALSE 7668
// k := 1 ;
7660: LD_ADDR_VAR 0 8
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// if not k then
7668: LD_VAR 0 8
7672: NOT
7673: IFFALSE 7685
// k := array ;
7675: LD_ADDR_VAR 0 8
7679: PUSH
7680: LD_VAR 0 1
7684: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7685: LD_ADDR_VAR 0 10
7689: PUSH
7690: LD_VAR 0 10
7694: PPUSH
7695: LD_VAR 0 8
7699: PPUSH
7700: LD_VAR 0 1
7704: PUSH
7705: LD_VAR 0 7
7709: ARRAY
7710: PPUSH
7711: CALL_OW 1
7715: ST_TO_ADDR
// end ;
7716: GO 7629
7718: POP
7719: POP
// array := tmp ;
7720: LD_ADDR_VAR 0 1
7724: PUSH
7725: LD_VAR 0 10
7729: ST_TO_ADDR
// end ;
7730: GO 7611
7732: POP
7733: POP
// result := array ;
7734: LD_ADDR_VAR 0 5
7738: PUSH
7739: LD_VAR 0 1
7743: ST_TO_ADDR
// end ;
7744: LD_VAR 0 5
7748: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7749: LD_INT 0
7751: PPUSH
7752: PPUSH
// result := 0 ;
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_INT 0
7760: ST_TO_ADDR
// if not array or not value in array then
7761: LD_VAR 0 1
7765: NOT
7766: IFTRUE 7781
7768: PUSH
7769: LD_VAR 0 2
7773: PUSH
7774: LD_VAR 0 1
7778: IN
7779: NOT
7780: OR
7781: IFFALSE 7785
// exit ;
7783: GO 7839
// for i = 1 to array do
7785: LD_ADDR_VAR 0 4
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_VAR 0 1
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7837
// if value = array [ i ] then
7803: LD_VAR 0 2
7807: PUSH
7808: LD_VAR 0 1
7812: PUSH
7813: LD_VAR 0 4
7817: ARRAY
7818: EQUAL
7819: IFFALSE 7835
// begin result := i ;
7821: LD_ADDR_VAR 0 3
7825: PUSH
7826: LD_VAR 0 4
7830: ST_TO_ADDR
// exit ;
7831: POP
7832: POP
7833: GO 7839
// end ;
7835: GO 7800
7837: POP
7838: POP
// end ;
7839: LD_VAR 0 3
7843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7844: LD_INT 0
7846: PPUSH
// vc_chassis := chassis ;
7847: LD_ADDR_OWVAR 37
7851: PUSH
7852: LD_VAR 0 1
7856: ST_TO_ADDR
// vc_engine := engine ;
7857: LD_ADDR_OWVAR 39
7861: PUSH
7862: LD_VAR 0 2
7866: ST_TO_ADDR
// vc_control := control ;
7867: LD_ADDR_OWVAR 38
7871: PUSH
7872: LD_VAR 0 3
7876: ST_TO_ADDR
// vc_weapon := weapon ;
7877: LD_ADDR_OWVAR 40
7881: PUSH
7882: LD_VAR 0 4
7886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7887: LD_ADDR_OWVAR 41
7891: PUSH
7892: LD_VAR 0 5
7896: ST_TO_ADDR
// end ;
7897: LD_VAR 0 6
7901: RET
// export function WantPlant ( unit ) ; var task ; begin
7902: LD_INT 0
7904: PPUSH
7905: PPUSH
// result := false ;
7906: LD_ADDR_VAR 0 2
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 437
7928: ST_TO_ADDR
// if task then
7929: LD_VAR 0 3
7933: IFFALSE 7961
// if task [ 1 ] [ 1 ] = p then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PUSH
7948: LD_STRING p
7950: EQUAL
7951: IFFALSE 7961
// result := true ;
7953: LD_ADDR_VAR 0 2
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// end ;
7961: LD_VAR 0 2
7965: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7966: LD_INT 0
7968: PPUSH
7969: PPUSH
7970: PPUSH
7971: PPUSH
// if pos < 1 then
7972: LD_VAR 0 2
7976: PUSH
7977: LD_INT 1
7979: LESS
7980: IFFALSE 7984
// exit ;
7982: GO 8287
// if pos = 1 then
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: EQUAL
7992: IFFALSE 8025
// result := Replace ( arr , pos [ 1 ] , value ) else
7994: LD_ADDR_VAR 0 4
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: LD_VAR 0 2
8008: PUSH
8009: LD_INT 1
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 3
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
8023: GO 8287
// begin tmp := arr ;
8025: LD_ADDR_VAR 0 6
8029: PUSH
8030: LD_VAR 0 1
8034: ST_TO_ADDR
// s_arr := [ tmp ] ;
8035: LD_ADDR_VAR 0 7
8039: PUSH
8040: LD_VAR 0 6
8044: PUSH
8045: EMPTY
8046: LIST
8047: ST_TO_ADDR
// for i = 1 to pos - 1 do
8048: LD_ADDR_VAR 0 5
8052: PUSH
8053: DOUBLE
8054: LD_INT 1
8056: DEC
8057: ST_TO_ADDR
8058: LD_VAR 0 2
8062: PUSH
8063: LD_INT 1
8065: MINUS
8066: PUSH
8067: FOR_TO
8068: IFFALSE 8113
// begin tmp := tmp [ pos [ i ] ] ;
8070: LD_ADDR_VAR 0 6
8074: PUSH
8075: LD_VAR 0 6
8079: PUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_VAR 0 5
8089: ARRAY
8090: ARRAY
8091: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8092: LD_ADDR_VAR 0 7
8096: PUSH
8097: LD_VAR 0 7
8101: PUSH
8102: LD_VAR 0 6
8106: PUSH
8107: EMPTY
8108: LIST
8109: ADD
8110: ST_TO_ADDR
// end ;
8111: GO 8067
8113: POP
8114: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8115: LD_ADDR_VAR 0 6
8119: PUSH
8120: LD_VAR 0 6
8124: PPUSH
8125: LD_VAR 0 2
8129: PUSH
8130: LD_VAR 0 2
8134: ARRAY
8135: PPUSH
8136: LD_VAR 0 3
8140: PPUSH
8141: CALL_OW 1
8145: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8146: LD_ADDR_VAR 0 7
8150: PUSH
8151: LD_VAR 0 7
8155: PPUSH
8156: LD_VAR 0 7
8160: PPUSH
8161: LD_VAR 0 6
8165: PPUSH
8166: CALL_OW 1
8170: ST_TO_ADDR
// for i = s_arr downto 2 do
8171: LD_ADDR_VAR 0 5
8175: PUSH
8176: DOUBLE
8177: LD_VAR 0 7
8181: INC
8182: ST_TO_ADDR
8183: LD_INT 2
8185: PUSH
8186: FOR_DOWNTO
8187: IFFALSE 8271
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8189: LD_ADDR_VAR 0 6
8193: PUSH
8194: LD_VAR 0 7
8198: PUSH
8199: LD_VAR 0 5
8203: PUSH
8204: LD_INT 1
8206: MINUS
8207: ARRAY
8208: PPUSH
8209: LD_VAR 0 2
8213: PUSH
8214: LD_VAR 0 5
8218: PUSH
8219: LD_INT 1
8221: MINUS
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 7
8228: PUSH
8229: LD_VAR 0 5
8233: ARRAY
8234: PPUSH
8235: CALL_OW 1
8239: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8240: LD_ADDR_VAR 0 7
8244: PUSH
8245: LD_VAR 0 7
8249: PPUSH
8250: LD_VAR 0 5
8254: PUSH
8255: LD_INT 1
8257: MINUS
8258: PPUSH
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 1
8268: ST_TO_ADDR
// end ;
8269: GO 8186
8271: POP
8272: POP
// result := s_arr [ 1 ] ;
8273: LD_ADDR_VAR 0 4
8277: PUSH
8278: LD_VAR 0 7
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: ST_TO_ADDR
// end ; end ;
8287: LD_VAR 0 4
8291: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8292: LD_INT 0
8294: PPUSH
8295: PPUSH
// if not list then
8296: LD_VAR 0 1
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8396
// i := list [ pos1 ] ;
8305: LD_ADDR_VAR 0 5
8309: PUSH
8310: LD_VAR 0 1
8314: PUSH
8315: LD_VAR 0 2
8319: ARRAY
8320: ST_TO_ADDR
// if not i then
8321: LD_VAR 0 5
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8396
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8330: LD_ADDR_VAR 0 1
8334: PUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_VAR 0 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PUSH
8350: LD_VAR 0 3
8354: ARRAY
8355: PPUSH
8356: CALL_OW 1
8360: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8361: LD_ADDR_VAR 0 1
8365: PUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: LD_VAR 0 3
8375: PPUSH
8376: LD_VAR 0 5
8380: PPUSH
8381: CALL_OW 1
8385: ST_TO_ADDR
// result := list ;
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_VAR 0 1
8395: ST_TO_ADDR
// end ;
8396: LD_VAR 0 4
8400: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8401: LD_INT 0
8403: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8404: LD_ADDR_VAR 0 5
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 250
8418: PPUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 251
8428: PPUSH
8429: LD_VAR 0 2
8433: PPUSH
8434: LD_VAR 0 3
8438: PPUSH
8439: LD_VAR 0 4
8443: PPUSH
8444: CALL 8826 0 5
8448: ST_TO_ADDR
// end ;
8449: LD_VAR 0 5
8453: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8454: LD_INT 0
8456: PPUSH
8457: PPUSH
8458: PPUSH
8459: PPUSH
// if not list or not unit then
8460: LD_VAR 0 2
8464: NOT
8465: IFTRUE 8474
8467: PUSH
8468: LD_VAR 0 1
8472: NOT
8473: OR
8474: IFFALSE 8478
// exit ;
8476: GO 8821
// result := [ ] ;
8478: LD_ADDR_VAR 0 5
8482: PUSH
8483: EMPTY
8484: ST_TO_ADDR
// for i in list do
8485: LD_ADDR_VAR 0 6
8489: PUSH
8490: LD_VAR 0 2
8494: PUSH
8495: FOR_IN
8496: IFFALSE 8714
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8498: LD_ADDR_VAR 0 8
8502: PUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: LD_VAR 0 6
8512: PUSH
8513: LD_INT 1
8515: ARRAY
8516: PPUSH
8517: LD_VAR 0 6
8521: PUSH
8522: LD_INT 2
8524: ARRAY
8525: PPUSH
8526: CALL_OW 297
8530: ST_TO_ADDR
// if not Count ( result ) then
8531: LD_VAR 0 5
8535: PPUSH
8536: CALL 5082 0 1
8540: NOT
8541: IFFALSE 8574
// begin result := Join ( result , [ i , tmp ] ) ;
8543: LD_ADDR_VAR 0 5
8547: PUSH
8548: LD_VAR 0 5
8552: PPUSH
8553: LD_VAR 0 6
8557: PUSH
8558: LD_VAR 0 8
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL 41014 0 2
8571: ST_TO_ADDR
// continue ;
8572: GO 8495
// end ; if result [ result ] [ 2 ] <= tmp then
8574: LD_VAR 0 5
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: PUSH
8585: LD_INT 2
8587: ARRAY
8588: PUSH
8589: LD_VAR 0 8
8593: LESSEQUAL
8594: IFFALSE 8627
// result := Join ( result , [ i , tmp ] ) else
8596: LD_ADDR_VAR 0 5
8600: PUSH
8601: LD_VAR 0 5
8605: PPUSH
8606: LD_VAR 0 6
8610: PUSH
8611: LD_VAR 0 8
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL 41014 0 2
8624: ST_TO_ADDR
8625: GO 8712
// begin for j := 1 to Count ( result ) do
8627: LD_ADDR_VAR 0 7
8631: PUSH
8632: DOUBLE
8633: LD_INT 1
8635: DEC
8636: ST_TO_ADDR
8637: LD_VAR 0 5
8641: PPUSH
8642: CALL 5082 0 1
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8710
// begin if tmp < result [ j ] [ 2 ] then
8650: LD_VAR 0 8
8654: PUSH
8655: LD_VAR 0 5
8659: PUSH
8660: LD_VAR 0 7
8664: ARRAY
8665: PUSH
8666: LD_INT 2
8668: ARRAY
8669: LESS
8670: IFFALSE 8708
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8672: LD_ADDR_VAR 0 5
8676: PUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: LD_VAR 0 7
8686: PPUSH
8687: LD_VAR 0 6
8691: PUSH
8692: LD_VAR 0 8
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 2
8705: ST_TO_ADDR
// break ;
8706: GO 8710
// end ; end ;
8708: GO 8647
8710: POP
8711: POP
// end ; end ;
8712: GO 8495
8714: POP
8715: POP
// if result and not asc then
8716: LD_VAR 0 5
8720: IFFALSE 8729
8722: PUSH
8723: LD_VAR 0 3
8727: NOT
8728: AND
8729: IFFALSE 8746
// result := ReverseArray ( result ) ;
8731: LD_ADDR_VAR 0 5
8735: PUSH
8736: LD_VAR 0 5
8740: PPUSH
8741: CALL 36104 0 1
8745: ST_TO_ADDR
// tmp := [ ] ;
8746: LD_ADDR_VAR 0 8
8750: PUSH
8751: EMPTY
8752: ST_TO_ADDR
// if mode then
8753: LD_VAR 0 4
8757: IFFALSE 8821
// begin for i := 1 to result do
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: DOUBLE
8765: LD_INT 1
8767: DEC
8768: ST_TO_ADDR
8769: LD_VAR 0 5
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8809
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8777: LD_ADDR_VAR 0 8
8781: PUSH
8782: LD_VAR 0 8
8786: PPUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_VAR 0 6
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: CALL 41014 0 2
8806: ST_TO_ADDR
8807: GO 8774
8809: POP
8810: POP
// result := tmp ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_VAR 0 8
8820: ST_TO_ADDR
// end ; end ;
8821: LD_VAR 0 5
8825: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8826: LD_INT 0
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
// if not list then
8832: LD_VAR 0 3
8836: NOT
8837: IFFALSE 8841
// exit ;
8839: GO 9231
// result := [ ] ;
8841: LD_ADDR_VAR 0 6
8845: PUSH
8846: EMPTY
8847: ST_TO_ADDR
// for i in list do
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_VAR 0 3
8857: PUSH
8858: FOR_IN
8859: IFFALSE 9061
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8861: LD_ADDR_VAR 0 9
8865: PUSH
8866: LD_VAR 0 7
8870: PPUSH
8871: LD_VAR 0 1
8875: PPUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 297
8885: ST_TO_ADDR
// if not result then
8886: LD_VAR 0 6
8890: NOT
8891: IFFALSE 8917
// result := [ [ i , tmp ] ] else
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: LD_VAR 0 7
8902: PUSH
8903: LD_VAR 0 9
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: ST_TO_ADDR
8915: GO 9059
// begin if result [ result ] [ 2 ] <= tmp then
8917: LD_VAR 0 6
8921: PUSH
8922: LD_VAR 0 6
8926: ARRAY
8927: PUSH
8928: LD_INT 2
8930: ARRAY
8931: PUSH
8932: LD_VAR 0 9
8936: LESSEQUAL
8937: IFFALSE 8979
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8939: LD_ADDR_VAR 0 6
8943: PUSH
8944: LD_VAR 0 6
8948: PPUSH
8949: LD_VAR 0 6
8953: PUSH
8954: LD_INT 1
8956: PLUS
8957: PPUSH
8958: LD_VAR 0 7
8962: PUSH
8963: LD_VAR 0 9
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 2
8976: ST_TO_ADDR
8977: GO 9059
// for j := 1 to result do
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: DOUBLE
8985: LD_INT 1
8987: DEC
8988: ST_TO_ADDR
8989: LD_VAR 0 6
8993: PUSH
8994: FOR_TO
8995: IFFALSE 9057
// begin if tmp < result [ j ] [ 2 ] then
8997: LD_VAR 0 9
9001: PUSH
9002: LD_VAR 0 6
9006: PUSH
9007: LD_VAR 0 8
9011: ARRAY
9012: PUSH
9013: LD_INT 2
9015: ARRAY
9016: LESS
9017: IFFALSE 9055
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_VAR 0 6
9028: PPUSH
9029: LD_VAR 0 8
9033: PPUSH
9034: LD_VAR 0 7
9038: PUSH
9039: LD_VAR 0 9
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 2
9052: ST_TO_ADDR
// break ;
9053: GO 9057
// end ; end ;
9055: GO 8994
9057: POP
9058: POP
// end ; end ;
9059: GO 8858
9061: POP
9062: POP
// if result and not asc then
9063: LD_VAR 0 6
9067: IFFALSE 9076
9069: PUSH
9070: LD_VAR 0 4
9074: NOT
9075: AND
9076: IFFALSE 9151
// begin tmp := result ;
9078: LD_ADDR_VAR 0 9
9082: PUSH
9083: LD_VAR 0 6
9087: ST_TO_ADDR
// for i = tmp downto 1 do
9088: LD_ADDR_VAR 0 7
9092: PUSH
9093: DOUBLE
9094: LD_VAR 0 9
9098: INC
9099: ST_TO_ADDR
9100: LD_INT 1
9102: PUSH
9103: FOR_DOWNTO
9104: IFFALSE 9149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9106: LD_ADDR_VAR 0 6
9110: PUSH
9111: LD_VAR 0 6
9115: PPUSH
9116: LD_VAR 0 9
9120: PUSH
9121: LD_VAR 0 7
9125: MINUS
9126: PUSH
9127: LD_INT 1
9129: PLUS
9130: PPUSH
9131: LD_VAR 0 9
9135: PUSH
9136: LD_VAR 0 7
9140: ARRAY
9141: PPUSH
9142: CALL_OW 1
9146: ST_TO_ADDR
9147: GO 9103
9149: POP
9150: POP
// end ; tmp := [ ] ;
9151: LD_ADDR_VAR 0 9
9155: PUSH
9156: EMPTY
9157: ST_TO_ADDR
// if mode then
9158: LD_VAR 0 5
9162: IFFALSE 9231
// begin for i = 1 to result do
9164: LD_ADDR_VAR 0 7
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_VAR 0 6
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9182: LD_ADDR_VAR 0 9
9186: PUSH
9187: LD_VAR 0 9
9191: PPUSH
9192: LD_VAR 0 7
9196: PPUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 7
9206: ARRAY
9207: PUSH
9208: LD_INT 1
9210: ARRAY
9211: PPUSH
9212: CALL_OW 1
9216: ST_TO_ADDR
9217: GO 9179
9219: POP
9220: POP
// result := tmp ;
9221: LD_ADDR_VAR 0 6
9225: PUSH
9226: LD_VAR 0 9
9230: ST_TO_ADDR
// end ; end ;
9231: LD_VAR 0 6
9235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: LD_INT 0
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: LD_INT 0
9257: PUSH
9258: EMPTY
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: ST_TO_ADDR
// if not x or not y then
9266: LD_VAR 0 2
9270: NOT
9271: IFTRUE 9280
9273: PUSH
9274: LD_VAR 0 3
9278: NOT
9279: OR
9280: IFFALSE 9284
// exit ;
9282: GO 10940
// if not range then
9284: LD_VAR 0 4
9288: NOT
9289: IFFALSE 9299
// range := 10 ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 10
9298: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9299: LD_ADDR_VAR 0 8
9303: PUSH
9304: LD_INT 81
9306: PUSH
9307: LD_VAR 0 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 92
9318: PUSH
9319: LD_VAR 0 2
9323: PUSH
9324: LD_VAR 0 3
9328: PUSH
9329: LD_VAR 0 4
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: LD_INT 21
9345: PUSH
9346: LD_INT 3
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: ST_TO_ADDR
// if not tmp then
9367: LD_VAR 0 8
9371: NOT
9372: IFFALSE 9376
// exit ;
9374: GO 10940
// for i in tmp do
9376: LD_ADDR_VAR 0 6
9380: PUSH
9381: LD_VAR 0 8
9385: PUSH
9386: FOR_IN
9387: IFFALSE 10915
// begin points := [ 0 , 0 , 0 ] ;
9389: LD_ADDR_VAR 0 9
9393: PUSH
9394: LD_INT 0
9396: PUSH
9397: LD_INT 0
9399: PUSH
9400: LD_INT 0
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: ST_TO_ADDR
// bpoints := 1 ;
9408: LD_ADDR_VAR 0 10
9412: PUSH
9413: LD_INT 1
9415: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9416: LD_VAR 0 6
9420: PPUSH
9421: CALL_OW 247
9425: PUSH
9426: LD_INT 1
9428: DOUBLE
9429: EQUAL
9430: IFTRUE 9434
9432: GO 10016
9434: POP
// begin if GetClass ( i ) = 1 then
9435: LD_VAR 0 6
9439: PPUSH
9440: CALL_OW 257
9444: PUSH
9445: LD_INT 1
9447: EQUAL
9448: IFFALSE 9469
// points := [ 10 , 5 , 3 ] ;
9450: LD_ADDR_VAR 0 9
9454: PUSH
9455: LD_INT 10
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 3
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9469: LD_VAR 0 6
9473: PPUSH
9474: CALL_OW 257
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: LD_INT 3
9484: PUSH
9485: LD_INT 4
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: IN
9493: IFFALSE 9514
// points := [ 3 , 2 , 1 ] ;
9495: LD_ADDR_VAR 0 9
9499: PUSH
9500: LD_INT 3
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: LD_INT 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9514: LD_VAR 0 6
9518: PPUSH
9519: CALL_OW 257
9523: PUSH
9524: LD_INT 5
9526: EQUAL
9527: IFFALSE 9548
// points := [ 130 , 5 , 2 ] ;
9529: LD_ADDR_VAR 0 9
9533: PUSH
9534: LD_INT 130
9536: PUSH
9537: LD_INT 5
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9548: LD_VAR 0 6
9552: PPUSH
9553: CALL_OW 257
9557: PUSH
9558: LD_INT 8
9560: EQUAL
9561: IFFALSE 9582
// points := [ 35 , 35 , 30 ] ;
9563: LD_ADDR_VAR 0 9
9567: PUSH
9568: LD_INT 35
9570: PUSH
9571: LD_INT 35
9573: PUSH
9574: LD_INT 30
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9582: LD_VAR 0 6
9586: PPUSH
9587: CALL_OW 257
9591: PUSH
9592: LD_INT 9
9594: EQUAL
9595: IFFALSE 9616
// points := [ 20 , 55 , 40 ] ;
9597: LD_ADDR_VAR 0 9
9601: PUSH
9602: LD_INT 20
9604: PUSH
9605: LD_INT 55
9607: PUSH
9608: LD_INT 40
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9616: LD_VAR 0 6
9620: PPUSH
9621: CALL_OW 257
9625: PUSH
9626: LD_INT 12
9628: PUSH
9629: LD_INT 16
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: IN
9636: IFFALSE 9657
// points := [ 5 , 3 , 2 ] ;
9638: LD_ADDR_VAR 0 9
9642: PUSH
9643: LD_INT 5
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: LD_INT 2
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9657: LD_VAR 0 6
9661: PPUSH
9662: CALL_OW 257
9666: PUSH
9667: LD_INT 17
9669: EQUAL
9670: IFFALSE 9691
// points := [ 100 , 50 , 75 ] ;
9672: LD_ADDR_VAR 0 9
9676: PUSH
9677: LD_INT 100
9679: PUSH
9680: LD_INT 50
9682: PUSH
9683: LD_INT 75
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9691: LD_VAR 0 6
9695: PPUSH
9696: CALL_OW 257
9700: PUSH
9701: LD_INT 15
9703: EQUAL
9704: IFFALSE 9725
// points := [ 10 , 5 , 3 ] ;
9706: LD_ADDR_VAR 0 9
9710: PUSH
9711: LD_INT 10
9713: PUSH
9714: LD_INT 5
9716: PUSH
9717: LD_INT 3
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 257
9734: PUSH
9735: LD_INT 14
9737: EQUAL
9738: IFFALSE 9759
// points := [ 10 , 0 , 0 ] ;
9740: LD_ADDR_VAR 0 9
9744: PUSH
9745: LD_INT 10
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 0
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 257
9768: PUSH
9769: LD_INT 11
9771: EQUAL
9772: IFFALSE 9793
// points := [ 30 , 10 , 5 ] ;
9774: LD_ADDR_VAR 0 9
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 10
9784: PUSH
9785: LD_INT 5
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_INT 5
9800: PPUSH
9801: CALL_OW 321
9805: PUSH
9806: LD_INT 2
9808: EQUAL
9809: IFFALSE 9826
// bpoints := bpoints * 1.8 ;
9811: LD_ADDR_VAR 0 10
9815: PUSH
9816: LD_VAR 0 10
9820: PUSH
9821: LD_REAL  1.80000000000000E+0000
9824: MUL
9825: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9826: LD_VAR 0 6
9830: PPUSH
9831: CALL_OW 257
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: LD_INT 3
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: IN
9854: IFFALSE 9874
9856: PUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: LD_INT 51
9864: PPUSH
9865: CALL_OW 321
9869: PUSH
9870: LD_INT 2
9872: EQUAL
9873: AND
9874: IFFALSE 9891
// bpoints := bpoints * 1.2 ;
9876: LD_ADDR_VAR 0 10
9880: PUSH
9881: LD_VAR 0 10
9885: PUSH
9886: LD_REAL  1.20000000000000E+0000
9889: MUL
9890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 257
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: LD_INT 7
9906: PUSH
9907: LD_INT 9
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: IN
9915: IFFALSE 9935
9917: PUSH
9918: LD_VAR 0 1
9922: PPUSH
9923: LD_INT 52
9925: PPUSH
9926: CALL_OW 321
9930: PUSH
9931: LD_INT 2
9933: EQUAL
9934: AND
9935: IFFALSE 9952
// bpoints := bpoints * 1.5 ;
9937: LD_ADDR_VAR 0 10
9941: PUSH
9942: LD_VAR 0 10
9946: PUSH
9947: LD_REAL  1.50000000000000E+0000
9950: MUL
9951: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9952: LD_VAR 0 1
9956: PPUSH
9957: LD_INT 66
9959: PPUSH
9960: CALL_OW 321
9964: PUSH
9965: LD_INT 2
9967: EQUAL
9968: IFFALSE 9985
// bpoints := bpoints * 1.1 ;
9970: LD_ADDR_VAR 0 10
9974: PUSH
9975: LD_VAR 0 10
9979: PUSH
9980: LD_REAL  1.10000000000000E+0000
9983: MUL
9984: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9985: LD_ADDR_VAR 0 10
9989: PUSH
9990: LD_VAR 0 10
9994: PUSH
9995: LD_VAR 0 6
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 259
10007: PUSH
10008: LD_REAL  1.15000000000000E+0000
10011: MUL
10012: MUL
10013: ST_TO_ADDR
// end ; unit_vehicle :
10014: GO 10844
10016: LD_INT 2
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10832
10024: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10025: LD_VAR 0 6
10029: PPUSH
10030: CALL_OW 264
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 42
10040: PUSH
10041: LD_INT 24
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: IN
10049: IFFALSE 10070
// points := [ 25 , 5 , 3 ] ;
10051: LD_ADDR_VAR 0 9
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: LD_INT 3
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10070: LD_VAR 0 6
10074: PPUSH
10075: CALL_OW 264
10079: PUSH
10080: LD_INT 4
10082: PUSH
10083: LD_INT 43
10085: PUSH
10086: LD_INT 25
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: LIST
10093: IN
10094: IFFALSE 10115
// points := [ 40 , 15 , 5 ] ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_INT 40
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 5
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 264
10124: PUSH
10125: LD_INT 3
10127: PUSH
10128: LD_INT 23
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: IN
10135: IFFALSE 10156
// points := [ 7 , 25 , 8 ] ;
10137: LD_ADDR_VAR 0 9
10141: PUSH
10142: LD_INT 7
10144: PUSH
10145: LD_INT 25
10147: PUSH
10148: LD_INT 8
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10156: LD_VAR 0 6
10160: PPUSH
10161: CALL_OW 264
10165: PUSH
10166: LD_INT 5
10168: PUSH
10169: LD_INT 27
10171: PUSH
10172: LD_INT 44
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: IN
10180: IFFALSE 10201
// points := [ 14 , 50 , 16 ] ;
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_INT 14
10189: PUSH
10190: LD_INT 50
10192: PUSH
10193: LD_INT 16
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10201: LD_VAR 0 6
10205: PPUSH
10206: CALL_OW 264
10210: PUSH
10211: LD_INT 6
10213: PUSH
10214: LD_INT 46
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: IN
10221: IFFALSE 10242
// points := [ 32 , 120 , 70 ] ;
10223: LD_ADDR_VAR 0 9
10227: PUSH
10228: LD_INT 32
10230: PUSH
10231: LD_INT 120
10233: PUSH
10234: LD_INT 70
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10242: LD_VAR 0 6
10246: PPUSH
10247: CALL_OW 264
10251: PUSH
10252: LD_INT 7
10254: PUSH
10255: LD_INT 28
10257: PUSH
10258: LD_INT 45
10260: PUSH
10261: LD_INT 92
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: IN
10270: IFFALSE 10291
// points := [ 35 , 20 , 45 ] ;
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 20
10282: PUSH
10283: LD_INT 45
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 47
10303: PUSH
10304: EMPTY
10305: LIST
10306: IN
10307: IFFALSE 10328
// points := [ 67 , 45 , 75 ] ;
10309: LD_ADDR_VAR 0 9
10313: PUSH
10314: LD_INT 67
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: LD_INT 75
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10328: LD_VAR 0 6
10332: PPUSH
10333: CALL_OW 264
10337: PUSH
10338: LD_INT 26
10340: PUSH
10341: EMPTY
10342: LIST
10343: IN
10344: IFFALSE 10365
// points := [ 120 , 30 , 80 ] ;
10346: LD_ADDR_VAR 0 9
10350: PUSH
10351: LD_INT 120
10353: PUSH
10354: LD_INT 30
10356: PUSH
10357: LD_INT 80
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10365: LD_VAR 0 6
10369: PPUSH
10370: CALL_OW 264
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: EMPTY
10379: LIST
10380: IN
10381: IFFALSE 10402
// points := [ 40 , 1 , 1 ] ;
10383: LD_ADDR_VAR 0 9
10387: PUSH
10388: LD_INT 40
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: LD_INT 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10402: LD_VAR 0 6
10406: PPUSH
10407: CALL_OW 264
10411: PUSH
10412: LD_INT 29
10414: PUSH
10415: EMPTY
10416: LIST
10417: IN
10418: IFFALSE 10439
// points := [ 70 , 200 , 400 ] ;
10420: LD_ADDR_VAR 0 9
10424: PUSH
10425: LD_INT 70
10427: PUSH
10428: LD_INT 200
10430: PUSH
10431: LD_INT 400
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10439: LD_VAR 0 6
10443: PPUSH
10444: CALL_OW 264
10448: PUSH
10449: LD_INT 14
10451: PUSH
10452: LD_INT 53
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: IN
10459: IFFALSE 10480
// points := [ 40 , 10 , 20 ] ;
10461: LD_ADDR_VAR 0 9
10465: PUSH
10466: LD_INT 40
10468: PUSH
10469: LD_INT 10
10471: PUSH
10472: LD_INT 20
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10480: LD_VAR 0 6
10484: PPUSH
10485: CALL_OW 264
10489: PUSH
10490: LD_INT 9
10492: PUSH
10493: EMPTY
10494: LIST
10495: IN
10496: IFFALSE 10517
// points := [ 5 , 70 , 20 ] ;
10498: LD_ADDR_VAR 0 9
10502: PUSH
10503: LD_INT 5
10505: PUSH
10506: LD_INT 70
10508: PUSH
10509: LD_INT 20
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10517: LD_VAR 0 6
10521: PPUSH
10522: CALL_OW 264
10526: PUSH
10527: LD_INT 10
10529: PUSH
10530: EMPTY
10531: LIST
10532: IN
10533: IFFALSE 10554
// points := [ 35 , 110 , 70 ] ;
10535: LD_ADDR_VAR 0 9
10539: PUSH
10540: LD_INT 35
10542: PUSH
10543: LD_INT 110
10545: PUSH
10546: LD_INT 70
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10554: LD_VAR 0 6
10558: PPUSH
10559: CALL_OW 265
10563: PUSH
10564: LD_INT 25
10566: EQUAL
10567: IFFALSE 10588
// points := [ 80 , 65 , 100 ] ;
10569: LD_ADDR_VAR 0 9
10573: PUSH
10574: LD_INT 80
10576: PUSH
10577: LD_INT 65
10579: PUSH
10580: LD_INT 100
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10588: LD_VAR 0 6
10592: PPUSH
10593: CALL_OW 263
10597: PUSH
10598: LD_INT 1
10600: EQUAL
10601: IFFALSE 10636
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10603: LD_ADDR_VAR 0 10
10607: PUSH
10608: LD_VAR 0 10
10612: PUSH
10613: LD_VAR 0 6
10617: PPUSH
10618: CALL_OW 311
10622: PPUSH
10623: LD_INT 3
10625: PPUSH
10626: CALL_OW 259
10630: PUSH
10631: LD_INT 4
10633: MUL
10634: MUL
10635: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10636: LD_VAR 0 6
10640: PPUSH
10641: CALL_OW 263
10645: PUSH
10646: LD_INT 2
10648: EQUAL
10649: IFFALSE 10700
// begin j := IsControledBy ( i ) ;
10651: LD_ADDR_VAR 0 7
10655: PUSH
10656: LD_VAR 0 6
10660: PPUSH
10661: CALL_OW 312
10665: ST_TO_ADDR
// if j then
10666: LD_VAR 0 7
10670: IFFALSE 10700
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10672: LD_ADDR_VAR 0 10
10676: PUSH
10677: LD_VAR 0 10
10681: PUSH
10682: LD_VAR 0 7
10686: PPUSH
10687: LD_INT 3
10689: PPUSH
10690: CALL_OW 259
10694: PUSH
10695: LD_INT 3
10697: MUL
10698: MUL
10699: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10700: LD_VAR 0 6
10704: PPUSH
10705: CALL_OW 264
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: LD_INT 46
10718: PUSH
10719: LD_INT 44
10721: PUSH
10722: LD_INT 47
10724: PUSH
10725: LD_INT 45
10727: PUSH
10728: LD_INT 28
10730: PUSH
10731: LD_INT 7
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 29
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: IN
10752: IFFALSE 10772
10754: PUSH
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_INT 52
10762: PPUSH
10763: CALL_OW 321
10767: PUSH
10768: LD_INT 2
10770: EQUAL
10771: AND
10772: IFFALSE 10789
// bpoints := bpoints * 1.2 ;
10774: LD_ADDR_VAR 0 10
10778: PUSH
10779: LD_VAR 0 10
10783: PUSH
10784: LD_REAL  1.20000000000000E+0000
10787: MUL
10788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10789: LD_VAR 0 6
10793: PPUSH
10794: CALL_OW 264
10798: PUSH
10799: LD_INT 6
10801: PUSH
10802: LD_INT 46
10804: PUSH
10805: LD_INT 47
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: IN
10813: IFFALSE 10830
// bpoints := bpoints * 1.2 ;
10815: LD_ADDR_VAR 0 10
10819: PUSH
10820: LD_VAR 0 10
10824: PUSH
10825: LD_REAL  1.20000000000000E+0000
10828: MUL
10829: ST_TO_ADDR
// end ; unit_building :
10830: GO 10844
10832: LD_INT 3
10834: DOUBLE
10835: EQUAL
10836: IFTRUE 10840
10838: GO 10843
10840: POP
// ; end ;
10841: GO 10844
10843: POP
// for j = 1 to 3 do
10844: LD_ADDR_VAR 0 7
10848: PUSH
10849: DOUBLE
10850: LD_INT 1
10852: DEC
10853: ST_TO_ADDR
10854: LD_INT 3
10856: PUSH
10857: FOR_TO
10858: IFFALSE 10911
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10860: LD_ADDR_VAR 0 5
10864: PUSH
10865: LD_VAR 0 5
10869: PPUSH
10870: LD_VAR 0 7
10874: PPUSH
10875: LD_VAR 0 5
10879: PUSH
10880: LD_VAR 0 7
10884: ARRAY
10885: PUSH
10886: LD_VAR 0 9
10890: PUSH
10891: LD_VAR 0 7
10895: ARRAY
10896: PUSH
10897: LD_VAR 0 10
10901: MUL
10902: PLUS
10903: PPUSH
10904: CALL_OW 1
10908: ST_TO_ADDR
10909: GO 10857
10911: POP
10912: POP
// end ;
10913: GO 9386
10915: POP
10916: POP
// result := Replace ( result , 4 , tmp ) ;
10917: LD_ADDR_VAR 0 5
10921: PUSH
10922: LD_VAR 0 5
10926: PPUSH
10927: LD_INT 4
10929: PPUSH
10930: LD_VAR 0 8
10934: PPUSH
10935: CALL_OW 1
10939: ST_TO_ADDR
// end ;
10940: LD_VAR 0 5
10944: RET
// export function DangerAtRange ( unit , range ) ; begin
10945: LD_INT 0
10947: PPUSH
// if not unit then
10948: LD_VAR 0 1
10952: NOT
10953: IFFALSE 10957
// exit ;
10955: GO 11002
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10957: LD_ADDR_VAR 0 3
10961: PUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 255
10971: PPUSH
10972: LD_VAR 0 1
10976: PPUSH
10977: CALL_OW 250
10981: PPUSH
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 251
10991: PPUSH
10992: LD_VAR 0 2
10996: PPUSH
10997: CALL 9236 0 4
11001: ST_TO_ADDR
// end ;
11002: LD_VAR 0 3
11006: RET
// export function DangerInArea ( side , area ) ; begin
11007: LD_INT 0
11009: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11010: LD_ADDR_VAR 0 3
11014: PUSH
11015: LD_VAR 0 2
11019: PPUSH
11020: LD_INT 81
11022: PUSH
11023: LD_VAR 0 1
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 70
11036: ST_TO_ADDR
// end ;
11037: LD_VAR 0 3
11041: RET
// export function IsExtension ( b ) ; begin
11042: LD_INT 0
11044: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11045: LD_ADDR_VAR 0 2
11049: PUSH
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 23
11057: PUSH
11058: LD_INT 20
11060: PUSH
11061: LD_INT 22
11063: PUSH
11064: LD_INT 17
11066: PUSH
11067: LD_INT 24
11069: PUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 19
11075: PUSH
11076: LD_INT 16
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 18
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: IN
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 2
11102: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11103: LD_INT 0
11105: PPUSH
11106: PPUSH
11107: PPUSH
// result := [ ] ;
11108: LD_ADDR_VAR 0 4
11112: PUSH
11113: EMPTY
11114: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_VAR 0 2
11124: PPUSH
11125: LD_INT 21
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: ST_TO_ADDR
// if not tmp then
11140: LD_VAR 0 5
11144: NOT
11145: IFFALSE 11149
// exit ;
11147: GO 11213
// if checkLink then
11149: LD_VAR 0 3
11153: IFFALSE 11203
// begin for i in tmp do
11155: LD_ADDR_VAR 0 6
11159: PUSH
11160: LD_VAR 0 5
11164: PUSH
11165: FOR_IN
11166: IFFALSE 11201
// if GetBase ( i ) <> base then
11168: LD_VAR 0 6
11172: PPUSH
11173: CALL_OW 274
11177: PUSH
11178: LD_VAR 0 1
11182: NONEQUAL
11183: IFFALSE 11199
// ComLinkToBase ( base , i ) ;
11185: LD_VAR 0 1
11189: PPUSH
11190: LD_VAR 0 6
11194: PPUSH
11195: CALL_OW 169
11199: GO 11165
11201: POP
11202: POP
// end ; result := tmp ;
11203: LD_ADDR_VAR 0 4
11207: PUSH
11208: LD_VAR 0 5
11212: ST_TO_ADDR
// end ;
11213: LD_VAR 0 4
11217: RET
// export function ComComplete ( units , b ) ; var i ; begin
11218: LD_INT 0
11220: PPUSH
11221: PPUSH
// if not units then
11222: LD_VAR 0 1
11226: NOT
11227: IFFALSE 11231
// exit ;
11229: GO 11321
// for i in units do
11231: LD_ADDR_VAR 0 4
11235: PUSH
11236: LD_VAR 0 1
11240: PUSH
11241: FOR_IN
11242: IFFALSE 11319
// if BuildingStatus ( b ) = bs_build then
11244: LD_VAR 0 2
11248: PPUSH
11249: CALL_OW 461
11253: PUSH
11254: LD_INT 1
11256: EQUAL
11257: IFFALSE 11317
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11259: LD_VAR 0 4
11263: PPUSH
11264: LD_STRING h
11266: PUSH
11267: LD_VAR 0 2
11271: PPUSH
11272: CALL_OW 250
11276: PUSH
11277: LD_VAR 0 2
11281: PPUSH
11282: CALL_OW 251
11286: PUSH
11287: LD_VAR 0 2
11291: PUSH
11292: LD_INT 0
11294: PUSH
11295: LD_INT 0
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: PPUSH
11313: CALL_OW 446
11317: GO 11241
11319: POP
11320: POP
// end ;
11321: LD_VAR 0 3
11325: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11326: LD_INT 0
11328: PPUSH
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11334: LD_VAR 0 1
11338: NOT
11339: IFTRUE 11356
11341: PUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 263
11351: PUSH
11352: LD_INT 2
11354: NONEQUAL
11355: OR
11356: IFFALSE 11360
// exit ;
11358: GO 11676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11360: LD_ADDR_VAR 0 6
11364: PUSH
11365: LD_INT 22
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 255
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: LD_INT 36
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 34
11397: PUSH
11398: LD_INT 31
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PPUSH
11414: CALL_OW 69
11418: ST_TO_ADDR
// if not tmp then
11419: LD_VAR 0 6
11423: NOT
11424: IFFALSE 11428
// exit ;
11426: GO 11676
// result := [ ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: EMPTY
11434: ST_TO_ADDR
// for i in tmp do
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_VAR 0 6
11444: PUSH
11445: FOR_IN
11446: IFFALSE 11517
// begin t := UnitsInside ( i ) ;
11448: LD_ADDR_VAR 0 4
11452: PUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: CALL_OW 313
11462: ST_TO_ADDR
// if t then
11463: LD_VAR 0 4
11467: IFFALSE 11515
// for j in t do
11469: LD_ADDR_VAR 0 7
11473: PUSH
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11513
// result := Replace ( result , result + 1 , j ) ;
11482: LD_ADDR_VAR 0 2
11486: PUSH
11487: LD_VAR 0 2
11491: PPUSH
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: PLUS
11500: PPUSH
11501: LD_VAR 0 7
11505: PPUSH
11506: CALL_OW 1
11510: ST_TO_ADDR
11511: GO 11479
11513: POP
11514: POP
// end ;
11515: GO 11445
11517: POP
11518: POP
// if not result then
11519: LD_VAR 0 2
11523: NOT
11524: IFFALSE 11528
// exit ;
11526: GO 11676
// mech := result [ 1 ] ;
11528: LD_ADDR_VAR 0 5
11532: PUSH
11533: LD_VAR 0 2
11537: PUSH
11538: LD_INT 1
11540: ARRAY
11541: ST_TO_ADDR
// if result > 1 then
11542: LD_VAR 0 2
11546: PUSH
11547: LD_INT 1
11549: GREATER
11550: IFFALSE 11662
// begin for i = 2 to result do
11552: LD_ADDR_VAR 0 3
11556: PUSH
11557: DOUBLE
11558: LD_INT 2
11560: DEC
11561: ST_TO_ADDR
11562: LD_VAR 0 2
11566: PUSH
11567: FOR_TO
11568: IFFALSE 11660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11570: LD_ADDR_VAR 0 4
11574: PUSH
11575: LD_VAR 0 2
11579: PUSH
11580: LD_VAR 0 3
11584: ARRAY
11585: PPUSH
11586: LD_INT 3
11588: PPUSH
11589: CALL_OW 259
11593: PUSH
11594: LD_VAR 0 2
11598: PUSH
11599: LD_VAR 0 3
11603: ARRAY
11604: PPUSH
11605: CALL_OW 432
11609: MINUS
11610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11611: LD_VAR 0 4
11615: PUSH
11616: LD_VAR 0 5
11620: PPUSH
11621: LD_INT 3
11623: PPUSH
11624: CALL_OW 259
11628: PUSH
11629: LD_VAR 0 5
11633: PPUSH
11634: CALL_OW 432
11638: MINUS
11639: GREATEREQUAL
11640: IFFALSE 11658
// mech := result [ i ] ;
11642: LD_ADDR_VAR 0 5
11646: PUSH
11647: LD_VAR 0 2
11651: PUSH
11652: LD_VAR 0 3
11656: ARRAY
11657: ST_TO_ADDR
// end ;
11658: GO 11567
11660: POP
11661: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11662: LD_VAR 0 1
11666: PPUSH
11667: LD_VAR 0 5
11671: PPUSH
11672: CALL_OW 135
// end ;
11676: LD_VAR 0 2
11680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11681: LD_INT 0
11683: PPUSH
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
11688: PPUSH
11689: PPUSH
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
// result := [ ] ;
11696: LD_ADDR_VAR 0 7
11700: PUSH
11701: EMPTY
11702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11703: LD_VAR 0 1
11707: PPUSH
11708: CALL_OW 266
11712: PUSH
11713: LD_INT 0
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: IN
11723: NOT
11724: IFFALSE 11728
// exit ;
11726: GO 13368
// if name then
11728: LD_VAR 0 3
11732: IFFALSE 11748
// SetBName ( base_dep , name ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: CALL_OW 500
// base := GetBase ( base_dep ) ;
11748: LD_ADDR_VAR 0 15
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 274
11762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11763: LD_ADDR_VAR 0 16
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 255
11777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11778: LD_ADDR_VAR 0 17
11782: PUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 248
11792: ST_TO_ADDR
// if sources then
11793: LD_VAR 0 5
11797: IFFALSE 11844
// for i = 1 to 3 do
11799: LD_ADDR_VAR 0 8
11803: PUSH
11804: DOUBLE
11805: LD_INT 1
11807: DEC
11808: ST_TO_ADDR
11809: LD_INT 3
11811: PUSH
11812: FOR_TO
11813: IFFALSE 11842
// AddResourceType ( base , i , sources [ i ] ) ;
11815: LD_VAR 0 15
11819: PPUSH
11820: LD_VAR 0 8
11824: PPUSH
11825: LD_VAR 0 5
11829: PUSH
11830: LD_VAR 0 8
11834: ARRAY
11835: PPUSH
11836: CALL_OW 276
11840: GO 11812
11842: POP
11843: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11844: LD_ADDR_VAR 0 18
11848: PUSH
11849: LD_VAR 0 15
11853: PPUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL 11103 0 3
11866: ST_TO_ADDR
// InitHc ;
11867: CALL_OW 19
// InitUc ;
11871: CALL_OW 18
// uc_side := side ;
11875: LD_ADDR_OWVAR 20
11879: PUSH
11880: LD_VAR 0 16
11884: ST_TO_ADDR
// uc_nation := nation ;
11885: LD_ADDR_OWVAR 21
11889: PUSH
11890: LD_VAR 0 17
11894: ST_TO_ADDR
// if buildings then
11895: LD_VAR 0 18
11899: IFFALSE 13227
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11901: LD_ADDR_VAR 0 19
11905: PUSH
11906: LD_VAR 0 18
11910: PPUSH
11911: LD_INT 2
11913: PUSH
11914: LD_INT 30
11916: PUSH
11917: LD_INT 29
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 30
11926: PUSH
11927: LD_INT 30
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 72
11943: ST_TO_ADDR
// if tmp then
11944: LD_VAR 0 19
11948: IFFALSE 11996
// for i in tmp do
11950: LD_ADDR_VAR 0 8
11954: PUSH
11955: LD_VAR 0 19
11959: PUSH
11960: FOR_IN
11961: IFFALSE 11994
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11963: LD_VAR 0 8
11967: PPUSH
11968: CALL_OW 250
11972: PPUSH
11973: LD_VAR 0 8
11977: PPUSH
11978: CALL_OW 251
11982: PPUSH
11983: LD_VAR 0 16
11987: PPUSH
11988: CALL_OW 441
11992: GO 11960
11994: POP
11995: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11996: LD_VAR 0 18
12000: PPUSH
12001: LD_INT 2
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 30
12016: PUSH
12017: LD_INT 33
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 72
12033: IFFALSE 12121
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12035: LD_ADDR_VAR 0 8
12039: PUSH
12040: LD_VAR 0 18
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 32
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 33
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12119
// begin if not GetBWeapon ( i ) then
12081: LD_VAR 0 8
12085: PPUSH
12086: CALL_OW 269
12090: NOT
12091: IFFALSE 12117
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12093: LD_VAR 0 8
12097: PPUSH
12098: LD_VAR 0 8
12102: PPUSH
12103: LD_VAR 0 2
12107: PPUSH
12108: CALL 13373 0 2
12112: PPUSH
12113: CALL_OW 431
// end ;
12117: GO 12078
12119: POP
12120: POP
// end ; for i = 1 to personel do
12121: LD_ADDR_VAR 0 8
12125: PUSH
12126: DOUBLE
12127: LD_INT 1
12129: DEC
12130: ST_TO_ADDR
12131: LD_VAR 0 6
12135: PUSH
12136: FOR_TO
12137: IFFALSE 13207
// begin if i > 4 then
12139: LD_VAR 0 8
12143: PUSH
12144: LD_INT 4
12146: GREATER
12147: IFFALSE 12151
// break ;
12149: GO 13207
// case i of 1 :
12151: LD_VAR 0 8
12155: PUSH
12156: LD_INT 1
12158: DOUBLE
12159: EQUAL
12160: IFTRUE 12164
12162: GO 12244
12164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12165: LD_ADDR_VAR 0 12
12169: PUSH
12170: LD_VAR 0 18
12174: PPUSH
12175: LD_INT 22
12177: PUSH
12178: LD_VAR 0 16
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 58
12189: PUSH
12190: EMPTY
12191: LIST
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: LD_INT 32
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 5
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 72
12241: ST_TO_ADDR
12242: GO 12466
12244: LD_INT 2
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12314
12252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12253: LD_ADDR_VAR 0 12
12257: PUSH
12258: LD_VAR 0 18
12262: PPUSH
12263: LD_INT 22
12265: PUSH
12266: LD_VAR 0 16
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 0
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 30
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: ST_TO_ADDR
12312: GO 12466
12314: LD_INT 3
12316: DOUBLE
12317: EQUAL
12318: IFTRUE 12322
12320: GO 12384
12322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12323: LD_ADDR_VAR 0 12
12327: PUSH
12328: LD_VAR 0 18
12332: PPUSH
12333: LD_INT 22
12335: PUSH
12336: LD_VAR 0 16
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 2
12347: PUSH
12348: LD_INT 30
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 30
12360: PUSH
12361: LD_INT 3
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: ST_TO_ADDR
12382: GO 12466
12384: LD_INT 4
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12465
12392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12393: LD_ADDR_VAR 0 12
12397: PUSH
12398: LD_VAR 0 18
12402: PPUSH
12403: LD_INT 22
12405: PUSH
12406: LD_VAR 0 16
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 6
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 7
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 30
12440: PUSH
12441: LD_INT 8
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 72
12462: ST_TO_ADDR
12463: GO 12466
12465: POP
// if i = 1 then
12466: LD_VAR 0 8
12470: PUSH
12471: LD_INT 1
12473: EQUAL
12474: IFFALSE 12585
// begin tmp := [ ] ;
12476: LD_ADDR_VAR 0 19
12480: PUSH
12481: EMPTY
12482: ST_TO_ADDR
// for j in f do
12483: LD_ADDR_VAR 0 9
12487: PUSH
12488: LD_VAR 0 12
12492: PUSH
12493: FOR_IN
12494: IFFALSE 12567
// if GetBType ( j ) = b_bunker then
12496: LD_VAR 0 9
12500: PPUSH
12501: CALL_OW 266
12505: PUSH
12506: LD_INT 32
12508: EQUAL
12509: IFFALSE 12536
// tmp := Insert ( tmp , 1 , j ) else
12511: LD_ADDR_VAR 0 19
12515: PUSH
12516: LD_VAR 0 19
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: LD_VAR 0 9
12528: PPUSH
12529: CALL_OW 2
12533: ST_TO_ADDR
12534: GO 12565
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12536: LD_ADDR_VAR 0 19
12540: PUSH
12541: LD_VAR 0 19
12545: PPUSH
12546: LD_VAR 0 19
12550: PUSH
12551: LD_INT 1
12553: PLUS
12554: PPUSH
12555: LD_VAR 0 9
12559: PPUSH
12560: CALL_OW 2
12564: ST_TO_ADDR
12565: GO 12493
12567: POP
12568: POP
// if tmp then
12569: LD_VAR 0 19
12573: IFFALSE 12585
// f := tmp ;
12575: LD_ADDR_VAR 0 12
12579: PUSH
12580: LD_VAR 0 19
12584: ST_TO_ADDR
// end ; x := personel [ i ] ;
12585: LD_ADDR_VAR 0 13
12589: PUSH
12590: LD_VAR 0 6
12594: PUSH
12595: LD_VAR 0 8
12599: ARRAY
12600: ST_TO_ADDR
// if x = - 1 then
12601: LD_VAR 0 13
12605: PUSH
12606: LD_INT 1
12608: NEG
12609: EQUAL
12610: IFFALSE 12821
// begin for j in f do
12612: LD_ADDR_VAR 0 9
12616: PUSH
12617: LD_VAR 0 12
12621: PUSH
12622: FOR_IN
12623: IFFALSE 12817
// repeat InitHc ;
12625: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12629: LD_VAR 0 9
12633: PPUSH
12634: CALL_OW 266
12638: PUSH
12639: LD_INT 5
12641: EQUAL
12642: IFFALSE 12712
// begin if UnitsInside ( j ) < 3 then
12644: LD_VAR 0 9
12648: PPUSH
12649: CALL_OW 313
12653: PUSH
12654: LD_INT 3
12656: LESS
12657: IFFALSE 12693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12659: LD_INT 0
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 8
12667: PUSH
12668: LD_INT 9
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_VAR 0 17
12680: ARRAY
12681: PPUSH
12682: LD_VAR 0 4
12686: PPUSH
12687: CALL_OW 380
12691: GO 12710
// PrepareHuman ( false , i , skill ) ;
12693: LD_INT 0
12695: PPUSH
12696: LD_VAR 0 8
12700: PPUSH
12701: LD_VAR 0 4
12705: PPUSH
12706: CALL_OW 380
// end else
12710: GO 12729
// PrepareHuman ( false , i , skill ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_VAR 0 8
12719: PPUSH
12720: LD_VAR 0 4
12724: PPUSH
12725: CALL_OW 380
// un := CreateHuman ;
12729: LD_ADDR_VAR 0 14
12733: PUSH
12734: CALL_OW 44
12738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12739: LD_ADDR_VAR 0 7
12743: PUSH
12744: LD_VAR 0 7
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_VAR 0 14
12756: PPUSH
12757: CALL_OW 2
12761: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12762: LD_VAR 0 14
12766: PPUSH
12767: LD_VAR 0 9
12771: PPUSH
12772: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12776: LD_VAR 0 9
12780: PPUSH
12781: CALL_OW 313
12785: PUSH
12786: LD_INT 6
12788: EQUAL
12789: IFTRUE 12813
12791: PUSH
12792: LD_VAR 0 9
12796: PPUSH
12797: CALL_OW 266
12801: PUSH
12802: LD_INT 32
12804: PUSH
12805: LD_INT 31
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: IN
12812: OR
12813: IFFALSE 12625
12815: GO 12622
12817: POP
12818: POP
// end else
12819: GO 13205
// for j = 1 to x do
12821: LD_ADDR_VAR 0 9
12825: PUSH
12826: DOUBLE
12827: LD_INT 1
12829: DEC
12830: ST_TO_ADDR
12831: LD_VAR 0 13
12835: PUSH
12836: FOR_TO
12837: IFFALSE 13203
// begin InitHc ;
12839: CALL_OW 19
// if not f then
12843: LD_VAR 0 12
12847: NOT
12848: IFFALSE 12937
// begin PrepareHuman ( false , i , skill ) ;
12850: LD_INT 0
12852: PPUSH
12853: LD_VAR 0 8
12857: PPUSH
12858: LD_VAR 0 4
12862: PPUSH
12863: CALL_OW 380
// un := CreateHuman ;
12867: LD_ADDR_VAR 0 14
12871: PUSH
12872: CALL_OW 44
12876: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12877: LD_ADDR_VAR 0 7
12881: PUSH
12882: LD_VAR 0 7
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: LD_VAR 0 14
12894: PPUSH
12895: CALL_OW 2
12899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12900: LD_VAR 0 14
12904: PPUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 250
12914: PPUSH
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 251
12924: PPUSH
12925: LD_INT 10
12927: PPUSH
12928: LD_INT 0
12930: PPUSH
12931: CALL_OW 50
// continue ;
12935: GO 12836
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12937: LD_VAR 0 12
12941: PUSH
12942: LD_INT 1
12944: ARRAY
12945: PPUSH
12946: CALL_OW 313
12950: IFFALSE 12978
12952: PUSH
12953: LD_VAR 0 12
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 266
12966: PUSH
12967: LD_INT 32
12969: PUSH
12970: LD_INT 31
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: IN
12977: AND
12978: IFTRUE 12999
12980: PUSH
12981: LD_VAR 0 12
12985: PUSH
12986: LD_INT 1
12988: ARRAY
12989: PPUSH
12990: CALL_OW 313
12994: PUSH
12995: LD_INT 6
12997: EQUAL
12998: OR
12999: IFFALSE 13019
// f := Delete ( f , 1 ) ;
13001: LD_ADDR_VAR 0 12
13005: PUSH
13006: LD_VAR 0 12
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 3
13018: ST_TO_ADDR
// if not f then
13019: LD_VAR 0 12
13023: NOT
13024: IFFALSE 13042
// begin x := x + 2 ;
13026: LD_ADDR_VAR 0 13
13030: PUSH
13031: LD_VAR 0 13
13035: PUSH
13036: LD_INT 2
13038: PLUS
13039: ST_TO_ADDR
// continue ;
13040: GO 12836
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13042: LD_VAR 0 12
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: PPUSH
13051: CALL_OW 266
13055: PUSH
13056: LD_INT 5
13058: EQUAL
13059: IFFALSE 13133
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13061: LD_VAR 0 12
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: CALL_OW 313
13074: PUSH
13075: LD_INT 3
13077: LESS
13078: IFFALSE 13114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13080: LD_INT 0
13082: PPUSH
13083: LD_INT 5
13085: PUSH
13086: LD_INT 8
13088: PUSH
13089: LD_INT 9
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: LD_VAR 0 17
13101: ARRAY
13102: PPUSH
13103: LD_VAR 0 4
13107: PPUSH
13108: CALL_OW 380
13112: GO 13131
// PrepareHuman ( false , i , skill ) ;
13114: LD_INT 0
13116: PPUSH
13117: LD_VAR 0 8
13121: PPUSH
13122: LD_VAR 0 4
13126: PPUSH
13127: CALL_OW 380
// end else
13131: GO 13150
// PrepareHuman ( false , i , skill ) ;
13133: LD_INT 0
13135: PPUSH
13136: LD_VAR 0 8
13140: PPUSH
13141: LD_VAR 0 4
13145: PPUSH
13146: CALL_OW 380
// un := CreateHuman ;
13150: LD_ADDR_VAR 0 14
13154: PUSH
13155: CALL_OW 44
13159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13160: LD_ADDR_VAR 0 7
13164: PUSH
13165: LD_VAR 0 7
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: LD_VAR 0 14
13177: PPUSH
13178: CALL_OW 2
13182: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13183: LD_VAR 0 14
13187: PPUSH
13188: LD_VAR 0 12
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 52
// end ;
13201: GO 12836
13203: POP
13204: POP
// end ;
13205: GO 12136
13207: POP
13208: POP
// result := result ^ buildings ;
13209: LD_ADDR_VAR 0 7
13213: PUSH
13214: LD_VAR 0 7
13218: PUSH
13219: LD_VAR 0 18
13223: ADD
13224: ST_TO_ADDR
// end else
13225: GO 13368
// begin for i = 1 to personel do
13227: LD_ADDR_VAR 0 8
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_VAR 0 6
13241: PUSH
13242: FOR_TO
13243: IFFALSE 13366
// begin if i > 4 then
13245: LD_VAR 0 8
13249: PUSH
13250: LD_INT 4
13252: GREATER
13253: IFFALSE 13257
// break ;
13255: GO 13366
// x := personel [ i ] ;
13257: LD_ADDR_VAR 0 13
13261: PUSH
13262: LD_VAR 0 6
13266: PUSH
13267: LD_VAR 0 8
13271: ARRAY
13272: ST_TO_ADDR
// if x = - 1 then
13273: LD_VAR 0 13
13277: PUSH
13278: LD_INT 1
13280: NEG
13281: EQUAL
13282: IFFALSE 13286
// continue ;
13284: GO 13242
// PrepareHuman ( false , i , skill ) ;
13286: LD_INT 0
13288: PPUSH
13289: LD_VAR 0 8
13293: PPUSH
13294: LD_VAR 0 4
13298: PPUSH
13299: CALL_OW 380
// un := CreateHuman ;
13303: LD_ADDR_VAR 0 14
13307: PUSH
13308: CALL_OW 44
13312: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13313: LD_VAR 0 14
13317: PPUSH
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 250
13327: PPUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 251
13337: PPUSH
13338: LD_INT 10
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 50
// result := result ^ un ;
13348: LD_ADDR_VAR 0 7
13352: PUSH
13353: LD_VAR 0 7
13357: PUSH
13358: LD_VAR 0 14
13362: ADD
13363: ST_TO_ADDR
// end ;
13364: GO 13242
13366: POP
13367: POP
// end ; end ;
13368: LD_VAR 0 7
13372: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
13386: PPUSH
13387: PPUSH
13388: PPUSH
13389: PPUSH
13390: PPUSH
// result := false ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_INT 0
13398: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13399: LD_VAR 0 1
13403: NOT
13404: IFTRUE 13429
13406: PUSH
13407: LD_VAR 0 1
13411: PPUSH
13412: CALL_OW 266
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 33
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: IN
13427: NOT
13428: OR
13429: IFFALSE 13433
// exit ;
13431: GO 14568
// nat := GetNation ( tower ) ;
13433: LD_ADDR_VAR 0 12
13437: PUSH
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 248
13447: ST_TO_ADDR
// side := GetSide ( tower ) ;
13448: LD_ADDR_VAR 0 16
13452: PUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 255
13462: ST_TO_ADDR
// x := GetX ( tower ) ;
13463: LD_ADDR_VAR 0 10
13467: PUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: CALL_OW 250
13477: ST_TO_ADDR
// y := GetY ( tower ) ;
13478: LD_ADDR_VAR 0 11
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 251
13492: ST_TO_ADDR
// if not x or not y then
13493: LD_VAR 0 10
13497: NOT
13498: IFTRUE 13507
13500: PUSH
13501: LD_VAR 0 11
13505: NOT
13506: OR
13507: IFFALSE 13511
// exit ;
13509: GO 14568
// weapon := 0 ;
13511: LD_ADDR_VAR 0 18
13515: PUSH
13516: LD_INT 0
13518: ST_TO_ADDR
// fac_list := [ ] ;
13519: LD_ADDR_VAR 0 17
13523: PUSH
13524: EMPTY
13525: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13526: LD_ADDR_VAR 0 6
13530: PUSH
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 274
13540: PPUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL 11103 0 3
13553: PPUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 3
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 72
13568: ST_TO_ADDR
// if not factories then
13569: LD_VAR 0 6
13573: NOT
13574: IFFALSE 13578
// exit ;
13576: GO 14568
// for i in factories do
13578: LD_ADDR_VAR 0 8
13582: PUSH
13583: LD_VAR 0 6
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13614
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13591: LD_ADDR_VAR 0 17
13595: PUSH
13596: LD_VAR 0 17
13600: PUSH
13601: LD_VAR 0 8
13605: PPUSH
13606: CALL_OW 478
13610: UNION
13611: ST_TO_ADDR
13612: GO 13588
13614: POP
13615: POP
// if not fac_list then
13616: LD_VAR 0 17
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 14568
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13625: LD_ADDR_VAR 0 5
13629: PUSH
13630: LD_INT 4
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: LD_INT 9
13638: PUSH
13639: LD_INT 10
13641: PUSH
13642: LD_INT 6
13644: PUSH
13645: LD_INT 7
13647: PUSH
13648: LD_INT 11
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 27
13662: PUSH
13663: LD_INT 28
13665: PUSH
13666: LD_INT 26
13668: PUSH
13669: LD_INT 30
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 43
13680: PUSH
13681: LD_INT 44
13683: PUSH
13684: LD_INT 46
13686: PUSH
13687: LD_INT 45
13689: PUSH
13690: LD_INT 47
13692: PUSH
13693: LD_INT 49
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_VAR 0 12
13713: ARRAY
13714: ST_TO_ADDR
// list := list isect fac_list ;
13715: LD_ADDR_VAR 0 5
13719: PUSH
13720: LD_VAR 0 5
13724: PUSH
13725: LD_VAR 0 17
13729: ISECT
13730: ST_TO_ADDR
// if not list then
13731: LD_VAR 0 5
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 14568
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13740: LD_VAR 0 12
13744: PUSH
13745: LD_INT 3
13747: EQUAL
13748: IFFALSE 13760
13750: PUSH
13751: LD_INT 49
13753: PUSH
13754: LD_VAR 0 5
13758: IN
13759: AND
13760: IFFALSE 13780
13762: PUSH
13763: LD_INT 31
13765: PPUSH
13766: LD_VAR 0 16
13770: PPUSH
13771: CALL_OW 321
13775: PUSH
13776: LD_INT 2
13778: EQUAL
13779: AND
13780: IFFALSE 13840
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13782: LD_INT 22
13784: PUSH
13785: LD_VAR 0 16
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 35
13796: PUSH
13797: LD_INT 49
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 91
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: LD_INT 10
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 69
13829: NOT
13830: IFFALSE 13840
// weapon := ru_time_lapser ;
13832: LD_ADDR_VAR 0 18
13836: PUSH
13837: LD_INT 49
13839: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13840: LD_VAR 0 12
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: IN
13855: IFFALSE 13879
13857: PUSH
13858: LD_INT 11
13860: PUSH
13861: LD_VAR 0 5
13865: IN
13866: IFTRUE 13878
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_VAR 0 5
13876: IN
13877: OR
13878: AND
13879: IFFALSE 13899
13881: PUSH
13882: LD_INT 6
13884: PPUSH
13885: LD_VAR 0 16
13889: PPUSH
13890: CALL_OW 321
13894: PUSH
13895: LD_INT 2
13897: EQUAL
13898: AND
13899: IFFALSE 14066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13901: LD_INT 22
13903: PUSH
13904: LD_VAR 0 16
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 35
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 35
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 91
13943: PUSH
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 18
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: NOT
13967: IFFALSE 14043
13969: PUSH
13970: LD_INT 22
13972: PUSH
13973: LD_VAR 0 16
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: LD_INT 30
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 33
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 91
14012: PUSH
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 12
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: LD_INT 2
14041: GREATER
14042: AND
14043: IFFALSE 14066
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14045: LD_ADDR_VAR 0 18
14049: PUSH
14050: LD_INT 11
14052: PUSH
14053: LD_INT 30
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_VAR 0 12
14064: ARRAY
14065: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14066: LD_VAR 0 18
14070: NOT
14071: IFFALSE 14091
14073: PUSH
14074: LD_INT 40
14076: PPUSH
14077: LD_VAR 0 16
14081: PPUSH
14082: CALL_OW 321
14086: PUSH
14087: LD_INT 2
14089: EQUAL
14090: AND
14091: IFFALSE 14127
14093: PUSH
14094: LD_INT 7
14096: PUSH
14097: LD_VAR 0 5
14101: IN
14102: IFTRUE 14114
14104: PUSH
14105: LD_INT 28
14107: PUSH
14108: LD_VAR 0 5
14112: IN
14113: OR
14114: IFTRUE 14126
14116: PUSH
14117: LD_INT 45
14119: PUSH
14120: LD_VAR 0 5
14124: IN
14125: OR
14126: AND
14127: IFFALSE 14381
// begin hex := GetHexInfo ( x , y ) ;
14129: LD_ADDR_VAR 0 4
14133: PUSH
14134: LD_VAR 0 10
14138: PPUSH
14139: LD_VAR 0 11
14143: PPUSH
14144: CALL_OW 546
14148: ST_TO_ADDR
// if hex [ 1 ] then
14149: LD_VAR 0 4
14153: PUSH
14154: LD_INT 1
14156: ARRAY
14157: IFFALSE 14161
// exit ;
14159: GO 14568
// height := hex [ 2 ] ;
14161: LD_ADDR_VAR 0 15
14165: PUSH
14166: LD_VAR 0 4
14170: PUSH
14171: LD_INT 2
14173: ARRAY
14174: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14175: LD_ADDR_VAR 0 14
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: LD_INT 2
14185: PUSH
14186: LD_INT 3
14188: PUSH
14189: LD_INT 5
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: ST_TO_ADDR
// for i in tmp do
14198: LD_ADDR_VAR 0 8
14202: PUSH
14203: LD_VAR 0 14
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14379
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14211: LD_ADDR_VAR 0 9
14215: PUSH
14216: LD_VAR 0 10
14220: PPUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 5
14228: PPUSH
14229: CALL_OW 272
14233: PUSH
14234: LD_VAR 0 11
14238: PPUSH
14239: LD_VAR 0 8
14243: PPUSH
14244: LD_INT 5
14246: PPUSH
14247: CALL_OW 273
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14256: LD_VAR 0 9
14260: PUSH
14261: LD_INT 1
14263: ARRAY
14264: PPUSH
14265: LD_VAR 0 9
14269: PUSH
14270: LD_INT 2
14272: ARRAY
14273: PPUSH
14274: CALL_OW 488
14278: IFFALSE 14377
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14280: LD_ADDR_VAR 0 4
14284: PUSH
14285: LD_VAR 0 9
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: LD_VAR 0 9
14298: PUSH
14299: LD_INT 2
14301: ARRAY
14302: PPUSH
14303: CALL_OW 546
14307: ST_TO_ADDR
// if hex [ 1 ] then
14308: LD_VAR 0 4
14312: PUSH
14313: LD_INT 1
14315: ARRAY
14316: IFFALSE 14320
// continue ;
14318: GO 14208
// h := hex [ 2 ] ;
14320: LD_ADDR_VAR 0 13
14324: PUSH
14325: LD_VAR 0 4
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: ST_TO_ADDR
// if h + 7 < height then
14334: LD_VAR 0 13
14338: PUSH
14339: LD_INT 7
14341: PLUS
14342: PUSH
14343: LD_VAR 0 15
14347: LESS
14348: IFFALSE 14377
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14350: LD_ADDR_VAR 0 18
14354: PUSH
14355: LD_INT 7
14357: PUSH
14358: LD_INT 28
14360: PUSH
14361: LD_INT 45
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PUSH
14369: LD_VAR 0 12
14373: ARRAY
14374: ST_TO_ADDR
// break ;
14375: GO 14379
// end ; end ; end ;
14377: GO 14208
14379: POP
14380: POP
// end ; if not weapon then
14381: LD_VAR 0 18
14385: NOT
14386: IFFALSE 14446
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14388: LD_ADDR_VAR 0 5
14392: PUSH
14393: LD_VAR 0 5
14397: PUSH
14398: LD_INT 11
14400: PUSH
14401: LD_INT 30
14403: PUSH
14404: LD_INT 49
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: DIFF
14412: ST_TO_ADDR
// if not list then
14413: LD_VAR 0 5
14417: NOT
14418: IFFALSE 14422
// exit ;
14420: GO 14568
// weapon := list [ rand ( 1 , list ) ] ;
14422: LD_ADDR_VAR 0 18
14426: PUSH
14427: LD_VAR 0 5
14431: PUSH
14432: LD_INT 1
14434: PPUSH
14435: LD_VAR 0 5
14439: PPUSH
14440: CALL_OW 12
14444: ARRAY
14445: ST_TO_ADDR
// end ; if weapon then
14446: LD_VAR 0 18
14450: IFFALSE 14568
// begin tmp := CostOfWeapon ( weapon ) ;
14452: LD_ADDR_VAR 0 14
14456: PUSH
14457: LD_VAR 0 18
14461: PPUSH
14462: CALL_OW 451
14466: ST_TO_ADDR
// j := GetBase ( tower ) ;
14467: LD_ADDR_VAR 0 9
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 274
14481: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14482: LD_VAR 0 9
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: CALL_OW 275
14494: PUSH
14495: LD_VAR 0 14
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: GREATEREQUAL
14504: IFFALSE 14530
14506: PUSH
14507: LD_VAR 0 9
14511: PPUSH
14512: LD_INT 2
14514: PPUSH
14515: CALL_OW 275
14519: PUSH
14520: LD_VAR 0 14
14524: PUSH
14525: LD_INT 2
14527: ARRAY
14528: GREATEREQUAL
14529: AND
14530: IFFALSE 14556
14532: PUSH
14533: LD_VAR 0 9
14537: PPUSH
14538: LD_INT 3
14540: PPUSH
14541: CALL_OW 275
14545: PUSH
14546: LD_VAR 0 14
14550: PUSH
14551: LD_INT 3
14553: ARRAY
14554: GREATEREQUAL
14555: AND
14556: IFFALSE 14568
// result := weapon ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_VAR 0 18
14567: ST_TO_ADDR
// end ; end ;
14568: LD_VAR 0 3
14572: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14573: LD_INT 0
14575: PPUSH
14576: PPUSH
// result := true ;
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_INT 1
14584: ST_TO_ADDR
// if array1 = array2 then
14585: LD_VAR 0 1
14589: PUSH
14590: LD_VAR 0 2
14594: EQUAL
14595: IFFALSE 14655
// begin for i = 1 to array1 do
14597: LD_ADDR_VAR 0 4
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_VAR 0 1
14611: PUSH
14612: FOR_TO
14613: IFFALSE 14651
// if array1 [ i ] <> array2 [ i ] then
14615: LD_VAR 0 1
14619: PUSH
14620: LD_VAR 0 4
14624: ARRAY
14625: PUSH
14626: LD_VAR 0 2
14630: PUSH
14631: LD_VAR 0 4
14635: ARRAY
14636: NONEQUAL
14637: IFFALSE 14649
// begin result := false ;
14639: LD_ADDR_VAR 0 3
14643: PUSH
14644: LD_INT 0
14646: ST_TO_ADDR
// break ;
14647: GO 14651
// end ;
14649: GO 14612
14651: POP
14652: POP
// end else
14653: GO 14663
// result := false ;
14655: LD_ADDR_VAR 0 3
14659: PUSH
14660: LD_INT 0
14662: ST_TO_ADDR
// end ;
14663: LD_VAR 0 3
14667: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14668: LD_INT 0
14670: PPUSH
14671: PPUSH
// if not array1 or not array2 then
14672: LD_VAR 0 1
14676: NOT
14677: IFTRUE 14686
14679: PUSH
14680: LD_VAR 0 2
14684: NOT
14685: OR
14686: IFFALSE 14690
// exit ;
14688: GO 14754
// result := true ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// for i = 1 to array1 do
14698: LD_ADDR_VAR 0 4
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 1
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14752
// if array1 [ i ] <> array2 [ i ] then
14716: LD_VAR 0 1
14720: PUSH
14721: LD_VAR 0 4
14725: ARRAY
14726: PUSH
14727: LD_VAR 0 2
14731: PUSH
14732: LD_VAR 0 4
14736: ARRAY
14737: NONEQUAL
14738: IFFALSE 14750
// begin result := false ;
14740: LD_ADDR_VAR 0 3
14744: PUSH
14745: LD_INT 0
14747: ST_TO_ADDR
// break ;
14748: GO 14752
// end ;
14750: GO 14713
14752: POP
14753: POP
// end ;
14754: LD_VAR 0 3
14758: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14759: LD_INT 0
14761: PPUSH
14762: PPUSH
14763: PPUSH
// pom := GetBase ( fac ) ;
14764: LD_ADDR_VAR 0 5
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 274
14778: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14779: LD_ADDR_VAR 0 4
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: LD_VAR 0 2
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PPUSH
14802: LD_VAR 0 2
14806: PUSH
14807: LD_INT 3
14809: ARRAY
14810: PPUSH
14811: LD_VAR 0 2
14815: PUSH
14816: LD_INT 4
14818: ARRAY
14819: PPUSH
14820: CALL_OW 449
14824: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_VAR 0 5
14834: PPUSH
14835: LD_INT 1
14837: PPUSH
14838: CALL_OW 275
14842: PUSH
14843: LD_VAR 0 4
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: GREATEREQUAL
14852: IFFALSE 14878
14854: PUSH
14855: LD_VAR 0 5
14859: PPUSH
14860: LD_INT 2
14862: PPUSH
14863: CALL_OW 275
14867: PUSH
14868: LD_VAR 0 4
14872: PUSH
14873: LD_INT 2
14875: ARRAY
14876: GREATEREQUAL
14877: AND
14878: IFFALSE 14904
14880: PUSH
14881: LD_VAR 0 5
14885: PPUSH
14886: LD_INT 3
14888: PPUSH
14889: CALL_OW 275
14893: PUSH
14894: LD_VAR 0 4
14898: PUSH
14899: LD_INT 3
14901: ARRAY
14902: GREATEREQUAL
14903: AND
14904: ST_TO_ADDR
// end ;
14905: LD_VAR 0 3
14909: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14910: LD_INT 0
14912: PPUSH
14913: PPUSH
14914: PPUSH
14915: PPUSH
// pom := GetBase ( building ) ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 274
14930: ST_TO_ADDR
// if not pom then
14931: LD_VAR 0 3
14935: NOT
14936: IFFALSE 14940
// exit ;
14938: GO 15114
// btype := GetBType ( building ) ;
14940: LD_ADDR_VAR 0 5
14944: PUSH
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 266
14954: ST_TO_ADDR
// if btype = b_armoury then
14955: LD_VAR 0 5
14959: PUSH
14960: LD_INT 4
14962: EQUAL
14963: IFFALSE 14973
// btype := b_barracks ;
14965: LD_ADDR_VAR 0 5
14969: PUSH
14970: LD_INT 5
14972: ST_TO_ADDR
// if btype = b_depot then
14973: LD_VAR 0 5
14977: PUSH
14978: LD_INT 0
14980: EQUAL
14981: IFFALSE 14991
// btype := b_warehouse ;
14983: LD_ADDR_VAR 0 5
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if btype = b_workshop then
14991: LD_VAR 0 5
14995: PUSH
14996: LD_INT 2
14998: EQUAL
14999: IFFALSE 15009
// btype := b_factory ;
15001: LD_ADDR_VAR 0 5
15005: PUSH
15006: LD_INT 3
15008: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15009: LD_ADDR_VAR 0 4
15013: PUSH
15014: LD_VAR 0 5
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 248
15028: PPUSH
15029: CALL_OW 450
15033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15034: LD_ADDR_VAR 0 2
15038: PUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 275
15051: PUSH
15052: LD_VAR 0 4
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: GREATEREQUAL
15061: IFFALSE 15087
15063: PUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: LD_INT 2
15071: PPUSH
15072: CALL_OW 275
15076: PUSH
15077: LD_VAR 0 4
15081: PUSH
15082: LD_INT 2
15084: ARRAY
15085: GREATEREQUAL
15086: AND
15087: IFFALSE 15113
15089: PUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: LD_INT 3
15097: PPUSH
15098: CALL_OW 275
15102: PUSH
15103: LD_VAR 0 4
15107: PUSH
15108: LD_INT 3
15110: ARRAY
15111: GREATEREQUAL
15112: AND
15113: ST_TO_ADDR
// end ;
15114: LD_VAR 0 2
15118: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// pom := GetBase ( building ) ;
15124: LD_ADDR_VAR 0 4
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 274
15138: ST_TO_ADDR
// if not pom then
15139: LD_VAR 0 4
15143: NOT
15144: IFFALSE 15148
// exit ;
15146: GO 15253
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15148: LD_ADDR_VAR 0 5
15152: PUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 248
15167: PPUSH
15168: CALL_OW 450
15172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_VAR 0 4
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 275
15190: PUSH
15191: LD_VAR 0 5
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: GREATEREQUAL
15200: IFFALSE 15226
15202: PUSH
15203: LD_VAR 0 4
15207: PPUSH
15208: LD_INT 2
15210: PPUSH
15211: CALL_OW 275
15215: PUSH
15216: LD_VAR 0 5
15220: PUSH
15221: LD_INT 2
15223: ARRAY
15224: GREATEREQUAL
15225: AND
15226: IFFALSE 15252
15228: PUSH
15229: LD_VAR 0 4
15233: PPUSH
15234: LD_INT 3
15236: PPUSH
15237: CALL_OW 275
15241: PUSH
15242: LD_VAR 0 5
15246: PUSH
15247: LD_INT 3
15249: ARRAY
15250: GREATEREQUAL
15251: AND
15252: ST_TO_ADDR
// end ;
15253: LD_VAR 0 3
15257: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
// result := false ;
15271: LD_ADDR_VAR 0 8
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15279: LD_VAR 0 5
15283: NOT
15284: IFTRUE 15293
15286: PUSH
15287: LD_VAR 0 1
15291: NOT
15292: OR
15293: IFTRUE 15302
15295: PUSH
15296: LD_VAR 0 2
15300: NOT
15301: OR
15302: IFTRUE 15311
15304: PUSH
15305: LD_VAR 0 3
15309: NOT
15310: OR
15311: IFFALSE 15315
// exit ;
15313: GO 16141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15315: LD_ADDR_VAR 0 14
15319: PUSH
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_VAR 0 2
15329: PPUSH
15330: LD_VAR 0 3
15334: PPUSH
15335: LD_VAR 0 4
15339: PPUSH
15340: LD_VAR 0 5
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PPUSH
15349: CALL_OW 248
15353: PPUSH
15354: LD_INT 0
15356: PPUSH
15357: CALL 17422 0 6
15361: ST_TO_ADDR
// if not hexes then
15362: LD_VAR 0 14
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 16141
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15371: LD_ADDR_VAR 0 17
15375: PUSH
15376: LD_VAR 0 5
15380: PPUSH
15381: LD_INT 22
15383: PUSH
15384: LD_VAR 0 13
15388: PPUSH
15389: CALL_OW 255
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: LD_INT 30
15403: PUSH
15404: LD_INT 0
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 30
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 72
15434: ST_TO_ADDR
// for i = 1 to hexes do
15435: LD_ADDR_VAR 0 9
15439: PUSH
15440: DOUBLE
15441: LD_INT 1
15443: DEC
15444: ST_TO_ADDR
15445: LD_VAR 0 14
15449: PUSH
15450: FOR_TO
15451: IFFALSE 16139
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15453: LD_ADDR_VAR 0 13
15457: PUSH
15458: LD_VAR 0 14
15462: PUSH
15463: LD_VAR 0 9
15467: ARRAY
15468: PUSH
15469: LD_INT 1
15471: ARRAY
15472: PPUSH
15473: LD_VAR 0 14
15477: PUSH
15478: LD_VAR 0 9
15482: ARRAY
15483: PUSH
15484: LD_INT 2
15486: ARRAY
15487: PPUSH
15488: CALL_OW 428
15492: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15493: LD_VAR 0 14
15497: PUSH
15498: LD_VAR 0 9
15502: ARRAY
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_VAR 0 14
15512: PUSH
15513: LD_VAR 0 9
15517: ARRAY
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 351
15527: IFTRUE 15566
15529: PUSH
15530: LD_VAR 0 14
15534: PUSH
15535: LD_VAR 0 9
15539: ARRAY
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: PPUSH
15545: LD_VAR 0 14
15549: PUSH
15550: LD_VAR 0 9
15554: ARRAY
15555: PUSH
15556: LD_INT 2
15558: ARRAY
15559: PPUSH
15560: CALL_OW 488
15564: NOT
15565: OR
15566: IFTRUE 15583
15568: PUSH
15569: LD_VAR 0 13
15573: PPUSH
15574: CALL_OW 247
15578: PUSH
15579: LD_INT 3
15581: EQUAL
15582: OR
15583: IFFALSE 15589
// exit ;
15585: POP
15586: POP
15587: GO 16141
// if not tmp then
15589: LD_VAR 0 13
15593: NOT
15594: IFFALSE 15598
// continue ;
15596: GO 15450
// result := true ;
15598: LD_ADDR_VAR 0 8
15602: PUSH
15603: LD_INT 1
15605: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15606: LD_VAR 0 6
15610: IFFALSE 15627
15612: PUSH
15613: LD_VAR 0 13
15617: PPUSH
15618: CALL_OW 247
15622: PUSH
15623: LD_INT 2
15625: EQUAL
15626: AND
15627: IFFALSE 15644
15629: PUSH
15630: LD_VAR 0 13
15634: PPUSH
15635: CALL_OW 263
15639: PUSH
15640: LD_INT 1
15642: EQUAL
15643: AND
15644: IFFALSE 15808
// begin if IsDrivenBy ( tmp ) then
15646: LD_VAR 0 13
15650: PPUSH
15651: CALL_OW 311
15655: IFFALSE 15659
// continue ;
15657: GO 15450
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15659: LD_VAR 0 6
15663: PPUSH
15664: LD_INT 3
15666: PUSH
15667: LD_INT 60
15669: PUSH
15670: EMPTY
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: LD_INT 55
15682: PUSH
15683: EMPTY
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 72
15698: IFFALSE 15806
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15700: LD_ADDR_VAR 0 18
15704: PUSH
15705: LD_VAR 0 6
15709: PPUSH
15710: LD_INT 3
15712: PUSH
15713: LD_INT 60
15715: PUSH
15716: EMPTY
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: LD_INT 55
15728: PUSH
15729: EMPTY
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 72
15744: PUSH
15745: LD_INT 1
15747: ARRAY
15748: ST_TO_ADDR
// if IsInUnit ( driver ) then
15749: LD_VAR 0 18
15753: PPUSH
15754: CALL_OW 310
15758: IFFALSE 15769
// ComExit ( driver ) ;
15760: LD_VAR 0 18
15764: PPUSH
15765: CALL 41412 0 1
// AddComEnterUnit ( driver , tmp ) ;
15769: LD_VAR 0 18
15773: PPUSH
15774: LD_VAR 0 13
15778: PPUSH
15779: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15783: LD_VAR 0 18
15787: PPUSH
15788: LD_VAR 0 7
15792: PPUSH
15793: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15797: LD_VAR 0 18
15801: PPUSH
15802: CALL_OW 181
// end ; continue ;
15806: GO 15450
// end ; if not cleaners or not tmp in cleaners then
15808: LD_VAR 0 6
15812: NOT
15813: IFTRUE 15828
15815: PUSH
15816: LD_VAR 0 13
15820: PUSH
15821: LD_VAR 0 6
15825: IN
15826: NOT
15827: OR
15828: IFFALSE 16137
// begin if dep then
15830: LD_VAR 0 17
15834: IFFALSE 15970
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15836: LD_ADDR_VAR 0 16
15840: PUSH
15841: LD_VAR 0 17
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: CALL_OW 250
15854: PPUSH
15855: LD_VAR 0 17
15859: PUSH
15860: LD_INT 1
15862: ARRAY
15863: PPUSH
15864: CALL_OW 254
15868: PPUSH
15869: LD_INT 5
15871: PPUSH
15872: CALL_OW 272
15876: PUSH
15877: LD_VAR 0 17
15881: PUSH
15882: LD_INT 1
15884: ARRAY
15885: PPUSH
15886: CALL_OW 251
15890: PPUSH
15891: LD_VAR 0 17
15895: PUSH
15896: LD_INT 1
15898: ARRAY
15899: PPUSH
15900: CALL_OW 254
15904: PPUSH
15905: LD_INT 5
15907: PPUSH
15908: CALL_OW 273
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15917: LD_VAR 0 16
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: PPUSH
15926: LD_VAR 0 16
15930: PUSH
15931: LD_INT 2
15933: ARRAY
15934: PPUSH
15935: CALL_OW 488
15939: IFFALSE 15970
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15941: LD_VAR 0 13
15945: PPUSH
15946: LD_VAR 0 16
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: LD_VAR 0 16
15959: PUSH
15960: LD_INT 2
15962: ARRAY
15963: PPUSH
15964: CALL_OW 111
// continue ;
15968: GO 15450
// end ; end ; r := GetDir ( tmp ) ;
15970: LD_ADDR_VAR 0 15
15974: PUSH
15975: LD_VAR 0 13
15979: PPUSH
15980: CALL_OW 254
15984: ST_TO_ADDR
// if r = 5 then
15985: LD_VAR 0 15
15989: PUSH
15990: LD_INT 5
15992: EQUAL
15993: IFFALSE 16003
// r := 0 ;
15995: LD_ADDR_VAR 0 15
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// for j = r to 5 do
16003: LD_ADDR_VAR 0 10
16007: PUSH
16008: DOUBLE
16009: LD_VAR 0 15
16013: DEC
16014: ST_TO_ADDR
16015: LD_INT 5
16017: PUSH
16018: FOR_TO
16019: IFFALSE 16135
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16021: LD_ADDR_VAR 0 11
16025: PUSH
16026: LD_VAR 0 13
16030: PPUSH
16031: CALL_OW 250
16035: PPUSH
16036: LD_VAR 0 10
16040: PPUSH
16041: LD_INT 2
16043: PPUSH
16044: CALL_OW 272
16048: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16049: LD_ADDR_VAR 0 12
16053: PUSH
16054: LD_VAR 0 13
16058: PPUSH
16059: CALL_OW 251
16063: PPUSH
16064: LD_VAR 0 10
16068: PPUSH
16069: LD_INT 2
16071: PPUSH
16072: CALL_OW 273
16076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16077: LD_VAR 0 11
16081: PPUSH
16082: LD_VAR 0 12
16086: PPUSH
16087: CALL_OW 488
16091: IFFALSE 16110
16093: PUSH
16094: LD_VAR 0 11
16098: PPUSH
16099: LD_VAR 0 12
16103: PPUSH
16104: CALL_OW 428
16108: NOT
16109: AND
16110: IFFALSE 16133
// begin ComMoveXY ( tmp , _x , _y ) ;
16112: LD_VAR 0 13
16116: PPUSH
16117: LD_VAR 0 11
16121: PPUSH
16122: LD_VAR 0 12
16126: PPUSH
16127: CALL_OW 111
// break ;
16131: GO 16135
// end ; end ;
16133: GO 16018
16135: POP
16136: POP
// end ; end ;
16137: GO 15450
16139: POP
16140: POP
// end ;
16141: LD_VAR 0 8
16145: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16146: LD_INT 0
16148: PPUSH
// result := true ;
16149: LD_ADDR_VAR 0 3
16153: PUSH
16154: LD_INT 1
16156: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16157: LD_VAR 0 2
16161: PUSH
16162: LD_INT 24
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16176
16168: LD_INT 33
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16201
16176: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 32
16184: PPUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 321
16194: PUSH
16195: LD_INT 2
16197: EQUAL
16198: ST_TO_ADDR
16199: GO 16517
16201: LD_INT 20
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16234
16209: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 6
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 321
16227: PUSH
16228: LD_INT 2
16230: EQUAL
16231: ST_TO_ADDR
16232: GO 16517
16234: LD_INT 22
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16248
16240: LD_INT 36
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16273
16248: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16249: LD_ADDR_VAR 0 3
16253: PUSH
16254: LD_INT 15
16256: PPUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 321
16266: PUSH
16267: LD_INT 2
16269: EQUAL
16270: ST_TO_ADDR
16271: GO 16517
16273: LD_INT 30
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16306
16281: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: LD_INT 20
16289: PPUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 321
16299: PUSH
16300: LD_INT 2
16302: EQUAL
16303: ST_TO_ADDR
16304: GO 16517
16306: LD_INT 28
16308: DOUBLE
16309: EQUAL
16310: IFTRUE 16320
16312: LD_INT 21
16314: DOUBLE
16315: EQUAL
16316: IFTRUE 16320
16318: GO 16345
16320: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16321: LD_ADDR_VAR 0 3
16325: PUSH
16326: LD_INT 21
16328: PPUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 321
16338: PUSH
16339: LD_INT 2
16341: EQUAL
16342: ST_TO_ADDR
16343: GO 16517
16345: LD_INT 16
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16378
16353: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_INT 84
16361: PPUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 321
16371: PUSH
16372: LD_INT 2
16374: EQUAL
16375: ST_TO_ADDR
16376: GO 16517
16378: LD_INT 19
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16392
16384: LD_INT 23
16386: DOUBLE
16387: EQUAL
16388: IFTRUE 16392
16390: GO 16417
16392: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_INT 83
16400: PPUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 321
16410: PUSH
16411: LD_INT 2
16413: EQUAL
16414: ST_TO_ADDR
16415: GO 16517
16417: LD_INT 17
16419: DOUBLE
16420: EQUAL
16421: IFTRUE 16425
16423: GO 16450
16425: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16426: LD_ADDR_VAR 0 3
16430: PUSH
16431: LD_INT 39
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 321
16443: PUSH
16444: LD_INT 2
16446: EQUAL
16447: ST_TO_ADDR
16448: GO 16517
16450: LD_INT 18
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16483
16458: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16459: LD_ADDR_VAR 0 3
16463: PUSH
16464: LD_INT 40
16466: PPUSH
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 321
16476: PUSH
16477: LD_INT 2
16479: EQUAL
16480: ST_TO_ADDR
16481: GO 16517
16483: LD_INT 27
16485: DOUBLE
16486: EQUAL
16487: IFTRUE 16491
16489: GO 16516
16491: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16492: LD_ADDR_VAR 0 3
16496: PUSH
16497: LD_INT 35
16499: PPUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL_OW 321
16509: PUSH
16510: LD_INT 2
16512: EQUAL
16513: ST_TO_ADDR
16514: GO 16517
16516: POP
// end ;
16517: LD_VAR 0 3
16521: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
// result := false ;
16535: LD_ADDR_VAR 0 6
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// if btype = b_depot then
16543: LD_VAR 0 2
16547: PUSH
16548: LD_INT 0
16550: EQUAL
16551: IFFALSE 16563
// begin result := true ;
16553: LD_ADDR_VAR 0 6
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// exit ;
16561: GO 17417
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16563: LD_VAR 0 1
16567: NOT
16568: IFTRUE 16593
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 266
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: IN
16591: NOT
16592: OR
16593: IFTRUE 16602
16595: PUSH
16596: LD_VAR 0 2
16600: NOT
16601: OR
16602: IFTRUE 16638
16604: PUSH
16605: LD_VAR 0 5
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: LD_INT 3
16621: PUSH
16622: LD_INT 4
16624: PUSH
16625: LD_INT 5
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: IN
16636: NOT
16637: OR
16638: IFTRUE 16657
16640: PUSH
16641: LD_VAR 0 3
16645: PPUSH
16646: LD_VAR 0 4
16650: PPUSH
16651: CALL_OW 488
16655: NOT
16656: OR
16657: IFFALSE 16661
// exit ;
16659: GO 17417
// side := GetSide ( depot ) ;
16661: LD_ADDR_VAR 0 9
16665: PUSH
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 255
16675: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16676: LD_VAR 0 9
16680: PPUSH
16681: LD_VAR 0 2
16685: PPUSH
16686: CALL 16146 0 2
16690: NOT
16691: IFFALSE 16695
// exit ;
16693: GO 17417
// pom := GetBase ( depot ) ;
16695: LD_ADDR_VAR 0 10
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 274
16709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16710: LD_ADDR_VAR 0 11
16714: PUSH
16715: LD_VAR 0 2
16719: PPUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 248
16729: PPUSH
16730: CALL_OW 450
16734: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16735: LD_VAR 0 10
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: CALL_OW 275
16747: PUSH
16748: LD_VAR 0 11
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: GREATEREQUAL
16757: IFFALSE 16783
16759: PUSH
16760: LD_VAR 0 10
16764: PPUSH
16765: LD_INT 2
16767: PPUSH
16768: CALL_OW 275
16772: PUSH
16773: LD_VAR 0 11
16777: PUSH
16778: LD_INT 2
16780: ARRAY
16781: GREATEREQUAL
16782: AND
16783: IFFALSE 16809
16785: PUSH
16786: LD_VAR 0 10
16790: PPUSH
16791: LD_INT 3
16793: PPUSH
16794: CALL_OW 275
16798: PUSH
16799: LD_VAR 0 11
16803: PUSH
16804: LD_INT 3
16806: ARRAY
16807: GREATEREQUAL
16808: AND
16809: NOT
16810: IFFALSE 16814
// exit ;
16812: GO 17417
// if GetBType ( depot ) = b_depot then
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 266
16823: PUSH
16824: LD_INT 0
16826: EQUAL
16827: IFFALSE 16839
// dist := 28 else
16829: LD_ADDR_VAR 0 14
16833: PUSH
16834: LD_INT 28
16836: ST_TO_ADDR
16837: GO 16847
// dist := 36 ;
16839: LD_ADDR_VAR 0 14
16843: PUSH
16844: LD_INT 36
16846: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_VAR 0 4
16861: PPUSH
16862: CALL_OW 297
16866: PUSH
16867: LD_VAR 0 14
16871: GREATER
16872: IFFALSE 16876
// exit ;
16874: GO 17417
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16876: LD_ADDR_VAR 0 12
16880: PUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_VAR 0 4
16895: PPUSH
16896: LD_VAR 0 5
16900: PPUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 248
16910: PPUSH
16911: LD_INT 0
16913: PPUSH
16914: CALL 17422 0 6
16918: ST_TO_ADDR
// if not hexes then
16919: LD_VAR 0 12
16923: NOT
16924: IFFALSE 16928
// exit ;
16926: GO 17417
// hex := GetHexInfo ( x , y ) ;
16928: LD_ADDR_VAR 0 15
16932: PUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: LD_VAR 0 4
16942: PPUSH
16943: CALL_OW 546
16947: ST_TO_ADDR
// if hex [ 1 ] then
16948: LD_VAR 0 15
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: IFFALSE 16960
// exit ;
16958: GO 17417
// height := hex [ 2 ] ;
16960: LD_ADDR_VAR 0 13
16964: PUSH
16965: LD_VAR 0 15
16969: PUSH
16970: LD_INT 2
16972: ARRAY
16973: ST_TO_ADDR
// for i = 1 to hexes do
16974: LD_ADDR_VAR 0 7
16978: PUSH
16979: DOUBLE
16980: LD_INT 1
16982: DEC
16983: ST_TO_ADDR
16984: LD_VAR 0 12
16988: PUSH
16989: FOR_TO
16990: IFFALSE 17334
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16992: LD_VAR 0 12
16996: PUSH
16997: LD_VAR 0 7
17001: ARRAY
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_VAR 0 12
17011: PUSH
17012: LD_VAR 0 7
17016: ARRAY
17017: PUSH
17018: LD_INT 2
17020: ARRAY
17021: PPUSH
17022: CALL_OW 488
17026: NOT
17027: IFTRUE 17069
17029: PUSH
17030: LD_VAR 0 12
17034: PUSH
17035: LD_VAR 0 7
17039: ARRAY
17040: PUSH
17041: LD_INT 1
17043: ARRAY
17044: PPUSH
17045: LD_VAR 0 12
17049: PUSH
17050: LD_VAR 0 7
17054: ARRAY
17055: PUSH
17056: LD_INT 2
17058: ARRAY
17059: PPUSH
17060: CALL_OW 428
17064: PUSH
17065: LD_INT 0
17067: GREATER
17068: OR
17069: IFTRUE 17107
17071: PUSH
17072: LD_VAR 0 12
17076: PUSH
17077: LD_VAR 0 7
17081: ARRAY
17082: PUSH
17083: LD_INT 1
17085: ARRAY
17086: PPUSH
17087: LD_VAR 0 12
17091: PUSH
17092: LD_VAR 0 7
17096: ARRAY
17097: PUSH
17098: LD_INT 2
17100: ARRAY
17101: PPUSH
17102: CALL_OW 351
17106: OR
17107: IFFALSE 17113
// exit ;
17109: POP
17110: POP
17111: GO 17417
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17113: LD_ADDR_VAR 0 8
17117: PUSH
17118: LD_VAR 0 12
17122: PUSH
17123: LD_VAR 0 7
17127: ARRAY
17128: PUSH
17129: LD_INT 1
17131: ARRAY
17132: PPUSH
17133: LD_VAR 0 12
17137: PUSH
17138: LD_VAR 0 7
17142: ARRAY
17143: PUSH
17144: LD_INT 2
17146: ARRAY
17147: PPUSH
17148: CALL_OW 546
17152: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17153: LD_VAR 0 8
17157: PUSH
17158: LD_INT 1
17160: ARRAY
17161: IFTRUE 17183
17163: PUSH
17164: LD_VAR 0 8
17168: PUSH
17169: LD_INT 2
17171: ARRAY
17172: PUSH
17173: LD_VAR 0 13
17177: PUSH
17178: LD_INT 2
17180: PLUS
17181: GREATER
17182: OR
17183: IFTRUE 17205
17185: PUSH
17186: LD_VAR 0 8
17190: PUSH
17191: LD_INT 2
17193: ARRAY
17194: PUSH
17195: LD_VAR 0 13
17199: PUSH
17200: LD_INT 2
17202: MINUS
17203: LESS
17204: OR
17205: IFTRUE 17273
17207: PUSH
17208: LD_VAR 0 8
17212: PUSH
17213: LD_INT 3
17215: ARRAY
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: LD_INT 8
17222: PUSH
17223: LD_INT 9
17225: PUSH
17226: LD_INT 10
17228: PUSH
17229: LD_INT 11
17231: PUSH
17232: LD_INT 12
17234: PUSH
17235: LD_INT 13
17237: PUSH
17238: LD_INT 16
17240: PUSH
17241: LD_INT 17
17243: PUSH
17244: LD_INT 18
17246: PUSH
17247: LD_INT 19
17249: PUSH
17250: LD_INT 20
17252: PUSH
17253: LD_INT 21
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: IN
17271: NOT
17272: OR
17273: IFTRUE 17286
17275: PUSH
17276: LD_VAR 0 8
17280: PUSH
17281: LD_INT 5
17283: ARRAY
17284: NOT
17285: OR
17286: IFTRUE 17326
17288: PUSH
17289: LD_VAR 0 8
17293: PUSH
17294: LD_INT 6
17296: ARRAY
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 7
17306: PUSH
17307: LD_INT 9
17309: PUSH
17310: LD_INT 10
17312: PUSH
17313: LD_INT 11
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: IN
17324: NOT
17325: OR
17326: IFFALSE 17332
// exit ;
17328: POP
17329: POP
17330: GO 17417
// end ;
17332: GO 16989
17334: POP
17335: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17336: LD_VAR 0 9
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: LD_INT 20
17353: PPUSH
17354: CALL 9236 0 4
17358: PUSH
17359: LD_INT 4
17361: ARRAY
17362: IFFALSE 17366
// exit ;
17364: GO 17417
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17366: LD_VAR 0 2
17370: PUSH
17371: LD_INT 29
17373: PUSH
17374: LD_INT 30
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: IN
17381: IFFALSE 17405
17383: PUSH
17384: LD_VAR 0 3
17388: PPUSH
17389: LD_VAR 0 4
17393: PPUSH
17394: LD_VAR 0 9
17398: PPUSH
17399: CALL_OW 440
17403: NOT
17404: AND
17405: IFFALSE 17409
// exit ;
17407: GO 17417
// result := true ;
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// end ;
17417: LD_VAR 0 6
17421: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17422: LD_INT 0
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
17435: PPUSH
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
// result = [ ] ;
17482: LD_ADDR_VAR 0 7
17486: PUSH
17487: EMPTY
17488: ST_TO_ADDR
// temp_list = [ ] ;
17489: LD_ADDR_VAR 0 9
17493: PUSH
17494: EMPTY
17495: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17496: LD_VAR 0 4
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 4
17515: PUSH
17516: LD_INT 5
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: IN
17527: NOT
17528: IFTRUE 17571
17530: PUSH
17531: LD_VAR 0 1
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: IN
17546: IFFALSE 17570
17548: PUSH
17549: LD_VAR 0 5
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 3
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: IN
17568: NOT
17569: AND
17570: OR
17571: IFFALSE 17575
// exit ;
17573: GO 35974
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17575: LD_VAR 0 1
17579: PUSH
17580: LD_INT 6
17582: PUSH
17583: LD_INT 7
17585: PUSH
17586: LD_INT 8
17588: PUSH
17589: LD_INT 13
17591: PUSH
17592: LD_INT 12
17594: PUSH
17595: LD_INT 15
17597: PUSH
17598: LD_INT 11
17600: PUSH
17601: LD_INT 14
17603: PUSH
17604: LD_INT 10
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: IN
17618: IFFALSE 17628
// btype = b_lab ;
17620: LD_ADDR_VAR 0 1
17624: PUSH
17625: LD_INT 6
17627: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17628: LD_VAR 0 6
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: IN
17647: NOT
17648: IFTRUE 17716
17650: PUSH
17651: LD_VAR 0 1
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 6
17670: PUSH
17671: LD_INT 36
17673: PUSH
17674: LD_INT 4
17676: PUSH
17677: LD_INT 5
17679: PUSH
17680: LD_INT 31
17682: PUSH
17683: LD_INT 32
17685: PUSH
17686: LD_INT 33
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: IN
17702: NOT
17703: IFFALSE 17715
17705: PUSH
17706: LD_VAR 0 6
17710: PUSH
17711: LD_INT 1
17713: EQUAL
17714: AND
17715: OR
17716: IFTRUE 17748
17718: PUSH
17719: LD_VAR 0 1
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: LD_INT 3
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: IN
17734: NOT
17735: IFFALSE 17747
17737: PUSH
17738: LD_VAR 0 6
17742: PUSH
17743: LD_INT 2
17745: EQUAL
17746: AND
17747: OR
17748: IFFALSE 17758
// mode = 0 ;
17750: LD_ADDR_VAR 0 6
17754: PUSH
17755: LD_INT 0
17757: ST_TO_ADDR
// case mode of 0 :
17758: LD_VAR 0 6
17762: PUSH
17763: LD_INT 0
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 29224
17771: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17772: LD_ADDR_VAR 0 11
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: LD_INT 1
17792: NEG
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 1
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 1
17841: NEG
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: LD_INT 2
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 1
17938: NEG
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17965: LD_ADDR_VAR 0 12
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 0
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: NEG
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: NEG
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 2
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 2
18088: NEG
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 2
18099: NEG
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 3
18122: NEG
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 3
18133: NEG
18134: PUSH
18135: LD_INT 1
18137: NEG
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18161: LD_ADDR_VAR 0 13
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: LD_INT 0
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 2
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 3
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: NEG
18321: PUSH
18322: LD_INT 2
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 3
18332: NEG
18333: PUSH
18334: LD_INT 3
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18360: LD_ADDR_VAR 0 14
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 2
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: LD_INT 3
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: LD_INT 3
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18556: LD_ADDR_VAR 0 15
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: LD_INT 1
18576: NEG
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: LD_INT 1
18629: NEG
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 0
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 3
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18749: LD_ADDR_VAR 0 16
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: LD_INT 2
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 2
18872: NEG
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18942: LD_ADDR_VAR 0 17
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: LD_INT 0
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 1
18962: NEG
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: NEG
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 2
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: NEG
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: NEG
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: LD_INT 2
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19172: LD_ADDR_VAR 0 18
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 1
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 1
19337: NEG
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: NEG
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19402: LD_ADDR_VAR 0 19
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 1
19471: NEG
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: LD_INT 2
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: NEG
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: NEG
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19632: LD_ADDR_VAR 0 20
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 2
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 2
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 2
19819: NEG
19820: PUSH
19821: LD_INT 1
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19862: LD_ADDR_VAR 0 21
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: LD_INT 1
19969: NEG
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: LD_INT 0
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: LD_INT 2
20065: NEG
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20092: LD_ADDR_VAR 0 22
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 1
20199: NEG
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20322: LD_ADDR_VAR 0 23
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: NEG
20534: PUSH
20535: LD_INT 3
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 3
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: LD_INT 2
20560: NEG
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20602: LD_ADDR_VAR 0 24
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20878: LD_ADDR_VAR 0 25
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: LD_INT 1
20985: NEG
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: NEG
21066: PUSH
21067: LD_INT 1
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 3
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 3
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: LD_INT 3
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21152: LD_ADDR_VAR 0 26
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 1
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: NEG
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 2
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: LD_INT 2
21355: NEG
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: LD_INT 3
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21428: LD_ADDR_VAR 0 27
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: LD_INT 2
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 2
21615: NEG
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: NEG
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: NEG
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 3
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 3
21673: NEG
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21708: LD_ADDR_VAR 0 28
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: LD_INT 0
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: LD_INT 3
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: NEG
21932: PUSH
21933: LD_INT 3
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: NEG
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 3
21955: NEG
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21990: LD_ADDR_VAR 0 29
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: LD_INT 2
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: LD_INT 3
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: NEG
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22269: LD_ADDR_VAR 0 30
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: LD_INT 2
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 0
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: LD_INT 3
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: LD_INT 2
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 3
22512: NEG
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22547: LD_ADDR_VAR 0 31
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 3
22790: NEG
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22825: LD_ADDR_VAR 0 32
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: NEG
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: LD_INT 3
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: LD_INT 2
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: LD_INT 3
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 2
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 3
23068: NEG
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23103: LD_ADDR_VAR 0 33
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: NEG
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: NEG
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 3
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: NEG
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23382: LD_ADDR_VAR 0 34
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: NEG
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: NEG
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 3
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 2
23616: NEG
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23662: LD_ADDR_VAR 0 35
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23774: LD_ADDR_VAR 0 36
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23886: LD_ADDR_VAR 0 37
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23998: LD_ADDR_VAR 0 38
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 0
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24110: LD_ADDR_VAR 0 39
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24222: LD_ADDR_VAR 0 40
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24334: LD_ADDR_VAR 0 41
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: NEG
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 2
24500: NEG
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 3
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 3
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: LD_INT 3
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 3
24608: NEG
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 3
24619: NEG
24620: PUSH
24621: LD_INT 1
24623: NEG
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 3
24631: NEG
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: LD_INT 3
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24684: LD_ADDR_VAR 0 42
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 2
24780: NEG
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 2
24850: NEG
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: LD_INT 3
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: LD_INT 3
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 3
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 2
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 3
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: NEG
24982: PUSH
24983: LD_INT 2
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: LD_INT 3
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25034: LD_ADDR_VAR 0 43
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 2
25200: NEG
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 3
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 3
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 3
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 3
25330: NEG
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 3
25341: NEG
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25382: LD_ADDR_VAR 0 44
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: NEG
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 2
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 3
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 3
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 3
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 3
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: LD_INT 3
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: LD_INT 3
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 3
25656: NEG
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 3
25667: NEG
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: NEG
25692: PUSH
25693: LD_INT 3
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25732: LD_ADDR_VAR 0 45
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 2
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: LD_INT 3
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: LD_INT 3
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 3
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 3
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 3
26029: NEG
26030: PUSH
26031: LD_INT 2
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 3
26041: NEG
26042: PUSH
26043: LD_INT 3
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26082: LD_ADDR_VAR 0 46
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: LD_INT 3
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 3
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 3
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 3
26378: NEG
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 3
26389: NEG
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26430: LD_ADDR_VAR 0 47
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26581: LD_ADDR_VAR 0 48
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 2
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26728: LD_ADDR_VAR 0 49
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26872: LD_ADDR_VAR 0 50
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27016: LD_ADDR_VAR 0 51
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27163: LD_ADDR_VAR 0 52
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 2
27267: NEG
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27314: LD_ADDR_VAR 0 53
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27544: LD_ADDR_VAR 0 54
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: LD_INT 2
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: NEG
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 2
27743: NEG
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27774: LD_ADDR_VAR 0 55
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: NEG
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: NEG
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: LD_INT 2
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28004: LD_ADDR_VAR 0 56
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28234: LD_ADDR_VAR 0 57
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28464: LD_ADDR_VAR 0 58
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: NEG
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28694: LD_ADDR_VAR 0 59
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28782: LD_ADDR_VAR 0 60
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28870: LD_ADDR_VAR 0 61
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28958: LD_ADDR_VAR 0 62
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29046: LD_ADDR_VAR 0 63
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29134: LD_ADDR_VAR 0 64
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: ST_TO_ADDR
// end ; 1 :
29222: GO 35119
29224: LD_INT 1
29226: DOUBLE
29227: EQUAL
29228: IFTRUE 29232
29230: GO 31855
29232: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29233: LD_ADDR_VAR 0 11
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29277: LD_ADDR_VAR 0 12
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29318: LD_ADDR_VAR 0 13
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29358: LD_ADDR_VAR 0 14
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29399: LD_ADDR_VAR 0 15
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 3
29417: NEG
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 3
29428: NEG
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29443: LD_ADDR_VAR 0 16
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: LD_INT 3
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 3
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29489: LD_ADDR_VAR 0 17
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29533: LD_ADDR_VAR 0 18
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29574: LD_ADDR_VAR 0 19
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29614: LD_ADDR_VAR 0 20
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29655: LD_ADDR_VAR 0 21
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29699: LD_ADDR_VAR 0 22
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: LD_INT 3
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29745: LD_ADDR_VAR 0 23
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 3
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 4
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29789: LD_ADDR_VAR 0 24
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 4
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29830: LD_ADDR_VAR 0 25
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 4
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29870: LD_ADDR_VAR 0 26
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 4
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29911: LD_ADDR_VAR 0 27
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 4
29940: NEG
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29955: LD_ADDR_VAR 0 28
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 3
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: LD_INT 4
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 4
29986: NEG
29987: PUSH
29988: LD_INT 3
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30001: LD_ADDR_VAR 0 29
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 3
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 4
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 3
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 5
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 5
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 4
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 6
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 6
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: LD_INT 5
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30156: LD_ADDR_VAR 0 30
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 3
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 4
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 4
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 5
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 5
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 5
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 6
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 6
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30299: LD_ADDR_VAR 0 31
30303: PUSH
30304: LD_INT 3
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 4
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 4
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: LD_INT 4
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 5
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 4
30386: PUSH
30387: LD_INT 5
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 6
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 6
30406: PUSH
30407: LD_INT 6
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 5
30416: PUSH
30417: LD_INT 6
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30438: LD_ADDR_VAR 0 32
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: LD_INT 4
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: LD_INT 4
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: LD_INT 5
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 5
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 6
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: LD_INT 6
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30581: LD_ADDR_VAR 0 33
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: NEG
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 4
30633: NEG
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 4
30644: NEG
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 4
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 5
30678: NEG
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 5
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 6
30701: NEG
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 6
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30736: LD_ADDR_VAR 0 34
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: LD_INT 2
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 4
30791: NEG
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 4
30803: NEG
30804: PUSH
30805: LD_INT 4
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 4
30815: NEG
30816: PUSH
30817: LD_INT 5
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 5
30827: NEG
30828: PUSH
30829: LD_INT 4
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 5
30839: NEG
30840: PUSH
30841: LD_INT 5
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 5
30851: NEG
30852: PUSH
30853: LD_INT 6
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 6
30863: NEG
30864: PUSH
30865: LD_INT 5
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 6
30875: NEG
30876: PUSH
30877: LD_INT 6
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30899: LD_ADDR_VAR 0 41
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 3
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30943: LD_ADDR_VAR 0 42
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30984: LD_ADDR_VAR 0 43
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31024: LD_ADDR_VAR 0 44
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31065: LD_ADDR_VAR 0 45
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: NEG
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 3
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31109: LD_ADDR_VAR 0 46
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 3
31140: NEG
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31155: LD_ADDR_VAR 0 47
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: LD_INT 3
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31188: LD_ADDR_VAR 0 48
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 2
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31219: LD_ADDR_VAR 0 49
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31248: LD_ADDR_VAR 0 50
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31277: LD_ADDR_VAR 0 51
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31308: LD_ADDR_VAR 0 52
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31341: LD_ADDR_VAR 0 53
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31385: LD_ADDR_VAR 0 54
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31426: LD_ADDR_VAR 0 55
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31466: LD_ADDR_VAR 0 56
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31507: LD_ADDR_VAR 0 57
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: NEG
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31551: LD_ADDR_VAR 0 58
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 3
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: NEG
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31597: LD_ADDR_VAR 0 59
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31641: LD_ADDR_VAR 0 60
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31682: LD_ADDR_VAR 0 61
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31722: LD_ADDR_VAR 0 62
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31763: LD_ADDR_VAR 0 63
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31807: LD_ADDR_VAR 0 64
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// end ; 2 :
31853: GO 35119
31855: LD_INT 2
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31863
31861: GO 35118
31863: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31864: LD_ADDR_VAR 0 29
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 5
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 5
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 4
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 4
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 4
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 4
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 5
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: LD_INT 4
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 5
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: NEG
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: NEG
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 4
32214: NEG
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 4
32226: NEG
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: LD_INT 4
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: LD_INT 5
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: LD_INT 4
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 4
32297: NEG
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 5
32309: NEG
32310: PUSH
32311: LD_INT 4
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 5
32321: NEG
32322: PUSH
32323: LD_INT 5
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 5
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 5
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32402: LD_ADDR_VAR 0 30
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: LD_INT 4
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 5
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: LD_INT 5
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: LD_INT 5
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 5
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 4
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 4
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 4
32592: NEG
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 4
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 4
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 5
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 5
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: LD_INT 4
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: LD_INT 3
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: LD_INT 3
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 4
32766: NEG
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 4
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 4
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: LD_INT 5
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 4
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: LD_INT 3
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: LD_INT 5
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 5
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32949: LD_ADDR_VAR 0 31
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: LD_INT 4
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: LD_INT 4
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 5
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 5
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 4
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 5
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 3
33049: NEG
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: NEG
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 4
33116: NEG
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 4
33128: NEG
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: LD_INT 4
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: LD_INT 5
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: LD_INT 4
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 4
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: LD_INT 4
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 5
33223: NEG
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 3
33235: NEG
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 5
33247: NEG
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 3
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 4
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 3
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 4
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: LD_INT 4
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 4
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 4
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 5
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 4
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 5
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33499: LD_ADDR_VAR 0 32
33503: PUSH
33504: LD_INT 4
33506: NEG
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 4
33517: NEG
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 4
33551: NEG
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 5
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 5
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 5
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 3
33620: NEG
33621: PUSH
33622: LD_INT 4
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 3
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 4
33668: NEG
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 4
33680: NEG
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 4
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 4
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 5
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: LD_INT 4
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 3
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 4
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 5
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 3
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: LD_INT 5
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 3
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 4
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 4
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 4
33911: PUSH
33912: LD_INT 4
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 4
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 5
33931: PUSH
33932: LD_INT 4
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 5
33941: PUSH
33942: LD_INT 5
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 4
33951: PUSH
33952: LD_INT 5
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 3
33961: PUSH
33962: LD_INT 4
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: LD_INT 3
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 5
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34046: LD_ADDR_VAR 0 33
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: LD_INT 4
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 4
34065: NEG
34066: PUSH
34067: LD_INT 5
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: LD_INT 4
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 4
34101: NEG
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: LD_INT 4
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: NEG
34126: PUSH
34127: LD_INT 5
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 5
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 5
34149: NEG
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 3
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 4
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 3
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: LD_INT 4
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: LD_INT 4
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 4
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 4
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 5
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 4
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 2
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 5
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 3
34356: PUSH
34357: LD_INT 3
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 4
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 4
34386: PUSH
34387: LD_INT 4
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 4
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 4
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 5
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 5
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: NEG
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34584: LD_ADDR_VAR 0 34
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 4
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 5
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 4
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 3
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: LD_INT 4
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 5
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: LD_INT 3
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: LD_INT 5
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 3
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 4
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 4
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 4
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 4
34786: PUSH
34787: LD_INT 4
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 4
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: LD_INT 4
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 5
34816: PUSH
34817: LD_INT 5
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 4
34826: PUSH
34827: LD_INT 5
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 5
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 3
34866: PUSH
34867: LD_INT 5
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 3
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 4
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 4
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: NEG
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 4
34969: NEG
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 4
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 3
34992: NEG
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 4
35014: NEG
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 5
35025: NEG
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 5
35036: NEG
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 5
35048: NEG
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// end ; end ;
35116: GO 35119
35118: POP
// case btype of b_depot , b_warehouse :
35119: LD_VAR 0 1
35123: PUSH
35124: LD_INT 0
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35138
35130: LD_INT 1
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35339
35138: POP
// case nation of nation_american :
35139: LD_VAR 0 5
35143: PUSH
35144: LD_INT 1
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35152
35150: GO 35208
35152: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_VAR 0 11
35162: PUSH
35163: LD_VAR 0 12
35167: PUSH
35168: LD_VAR 0 13
35172: PUSH
35173: LD_VAR 0 14
35177: PUSH
35178: LD_VAR 0 15
35182: PUSH
35183: LD_VAR 0 16
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: PUSH
35196: LD_VAR 0 4
35200: PUSH
35201: LD_INT 1
35203: PLUS
35204: ARRAY
35205: ST_TO_ADDR
35206: GO 35337
35208: LD_INT 2
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35272
35216: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_VAR 0 17
35226: PUSH
35227: LD_VAR 0 18
35231: PUSH
35232: LD_VAR 0 19
35236: PUSH
35237: LD_VAR 0 20
35241: PUSH
35242: LD_VAR 0 21
35246: PUSH
35247: LD_VAR 0 22
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: PUSH
35260: LD_VAR 0 4
35264: PUSH
35265: LD_INT 1
35267: PLUS
35268: ARRAY
35269: ST_TO_ADDR
35270: GO 35337
35272: LD_INT 3
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35336
35280: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_VAR 0 23
35290: PUSH
35291: LD_VAR 0 24
35295: PUSH
35296: LD_VAR 0 25
35300: PUSH
35301: LD_VAR 0 26
35305: PUSH
35306: LD_VAR 0 27
35310: PUSH
35311: LD_VAR 0 28
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: PUSH
35324: LD_VAR 0 4
35328: PUSH
35329: LD_INT 1
35331: PLUS
35332: ARRAY
35333: ST_TO_ADDR
35334: GO 35337
35336: POP
35337: GO 35892
35339: LD_INT 2
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35353
35345: LD_INT 3
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35409
35353: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35354: LD_ADDR_VAR 0 9
35358: PUSH
35359: LD_VAR 0 29
35363: PUSH
35364: LD_VAR 0 30
35368: PUSH
35369: LD_VAR 0 31
35373: PUSH
35374: LD_VAR 0 32
35378: PUSH
35379: LD_VAR 0 33
35383: PUSH
35384: LD_VAR 0 34
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: PUSH
35397: LD_VAR 0 4
35401: PUSH
35402: LD_INT 1
35404: PLUS
35405: ARRAY
35406: ST_TO_ADDR
35407: GO 35892
35409: LD_INT 16
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35471
35415: LD_INT 17
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35471
35421: LD_INT 18
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35471
35427: LD_INT 19
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35471
35433: LD_INT 22
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35471
35439: LD_INT 20
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35471
35445: LD_INT 21
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35471
35451: LD_INT 23
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35471
35457: LD_INT 24
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35471
35463: LD_INT 25
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35471
35469: GO 35527
35471: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35472: LD_ADDR_VAR 0 9
35476: PUSH
35477: LD_VAR 0 35
35481: PUSH
35482: LD_VAR 0 36
35486: PUSH
35487: LD_VAR 0 37
35491: PUSH
35492: LD_VAR 0 38
35496: PUSH
35497: LD_VAR 0 39
35501: PUSH
35502: LD_VAR 0 40
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: PUSH
35515: LD_VAR 0 4
35519: PUSH
35520: LD_INT 1
35522: PLUS
35523: ARRAY
35524: ST_TO_ADDR
35525: GO 35892
35527: LD_INT 6
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35583
35533: LD_INT 7
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35583
35539: LD_INT 8
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35583
35545: LD_INT 13
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35583
35551: LD_INT 12
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35583
35557: LD_INT 15
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35583
35563: LD_INT 11
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35583
35569: LD_INT 14
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35583
35575: LD_INT 10
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35639
35583: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_VAR 0 41
35593: PUSH
35594: LD_VAR 0 42
35598: PUSH
35599: LD_VAR 0 43
35603: PUSH
35604: LD_VAR 0 44
35608: PUSH
35609: LD_VAR 0 45
35613: PUSH
35614: LD_VAR 0 46
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: PUSH
35627: LD_VAR 0 4
35631: PUSH
35632: LD_INT 1
35634: PLUS
35635: ARRAY
35636: ST_TO_ADDR
35637: GO 35892
35639: LD_INT 36
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35647
35645: GO 35703
35647: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_VAR 0 47
35657: PUSH
35658: LD_VAR 0 48
35662: PUSH
35663: LD_VAR 0 49
35667: PUSH
35668: LD_VAR 0 50
35672: PUSH
35673: LD_VAR 0 51
35677: PUSH
35678: LD_VAR 0 52
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: PUSH
35691: LD_VAR 0 4
35695: PUSH
35696: LD_INT 1
35698: PLUS
35699: ARRAY
35700: ST_TO_ADDR
35701: GO 35892
35703: LD_INT 4
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35729
35709: LD_INT 5
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35729
35715: LD_INT 34
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35729
35721: LD_INT 37
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35785
35729: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35730: LD_ADDR_VAR 0 9
35734: PUSH
35735: LD_VAR 0 53
35739: PUSH
35740: LD_VAR 0 54
35744: PUSH
35745: LD_VAR 0 55
35749: PUSH
35750: LD_VAR 0 56
35754: PUSH
35755: LD_VAR 0 57
35759: PUSH
35760: LD_VAR 0 58
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: LD_VAR 0 4
35777: PUSH
35778: LD_INT 1
35780: PLUS
35781: ARRAY
35782: ST_TO_ADDR
35783: GO 35892
35785: LD_INT 31
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35835
35791: LD_INT 32
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35835
35797: LD_INT 33
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35835
35803: LD_INT 27
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35835
35809: LD_INT 26
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35835
35815: LD_INT 28
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35835
35821: LD_INT 29
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35835
35827: LD_INT 30
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35835
35833: GO 35891
35835: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35836: LD_ADDR_VAR 0 9
35840: PUSH
35841: LD_VAR 0 59
35845: PUSH
35846: LD_VAR 0 60
35850: PUSH
35851: LD_VAR 0 61
35855: PUSH
35856: LD_VAR 0 62
35860: PUSH
35861: LD_VAR 0 63
35865: PUSH
35866: LD_VAR 0 64
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: PUSH
35879: LD_VAR 0 4
35883: PUSH
35884: LD_INT 1
35886: PLUS
35887: ARRAY
35888: ST_TO_ADDR
35889: GO 35892
35891: POP
// temp_list2 = [ ] ;
35892: LD_ADDR_VAR 0 10
35896: PUSH
35897: EMPTY
35898: ST_TO_ADDR
// for i in temp_list do
35899: LD_ADDR_VAR 0 8
35903: PUSH
35904: LD_VAR 0 9
35908: PUSH
35909: FOR_IN
35910: IFFALSE 35962
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35912: LD_ADDR_VAR 0 10
35916: PUSH
35917: LD_VAR 0 10
35921: PUSH
35922: LD_VAR 0 8
35926: PUSH
35927: LD_INT 1
35929: ARRAY
35930: PUSH
35931: LD_VAR 0 2
35935: PLUS
35936: PUSH
35937: LD_VAR 0 8
35941: PUSH
35942: LD_INT 2
35944: ARRAY
35945: PUSH
35946: LD_VAR 0 3
35950: PLUS
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: ADD
35959: ST_TO_ADDR
35960: GO 35909
35962: POP
35963: POP
// result = temp_list2 ;
35964: LD_ADDR_VAR 0 7
35968: PUSH
35969: LD_VAR 0 10
35973: ST_TO_ADDR
// end ;
35974: LD_VAR 0 7
35978: RET
// export function EnemyInRange ( unit , dist ) ; begin
35979: LD_INT 0
35981: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 255
35996: PPUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 250
36006: PPUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 251
36016: PPUSH
36017: LD_VAR 0 2
36021: PPUSH
36022: CALL 9236 0 4
36026: PUSH
36027: LD_INT 4
36029: ARRAY
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 3
36035: RET
// export function PlayerSeeMe ( unit ) ; begin
36036: LD_INT 0
36038: PPUSH
// result := See ( your_side , unit ) ;
36039: LD_ADDR_VAR 0 2
36043: PUSH
36044: LD_OWVAR 2
36048: PPUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 292
36058: ST_TO_ADDR
// end ;
36059: LD_VAR 0 2
36063: RET
// export function ReverseDir ( unit ) ; begin
36064: LD_INT 0
36066: PPUSH
// if not unit then
36067: LD_VAR 0 1
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36099
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36076: LD_ADDR_VAR 0 2
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 254
36090: PUSH
36091: LD_INT 3
36093: PLUS
36094: PUSH
36095: LD_INT 6
36097: MOD
36098: ST_TO_ADDR
// end ;
36099: LD_VAR 0 2
36103: RET
// export function ReverseArray ( array ) ; var i ; begin
36104: LD_INT 0
36106: PPUSH
36107: PPUSH
// if not array then
36108: LD_VAR 0 1
36112: NOT
36113: IFFALSE 36117
// exit ;
36115: GO 36172
// result := [ ] ;
36117: LD_ADDR_VAR 0 2
36121: PUSH
36122: EMPTY
36123: ST_TO_ADDR
// for i := array downto 1 do
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: DOUBLE
36130: LD_VAR 0 1
36134: INC
36135: ST_TO_ADDR
36136: LD_INT 1
36138: PUSH
36139: FOR_DOWNTO
36140: IFFALSE 36170
// result := Join ( result , array [ i ] ) ;
36142: LD_ADDR_VAR 0 2
36146: PUSH
36147: LD_VAR 0 2
36151: PPUSH
36152: LD_VAR 0 1
36156: PUSH
36157: LD_VAR 0 3
36161: ARRAY
36162: PPUSH
36163: CALL 41014 0 2
36167: ST_TO_ADDR
36168: GO 36139
36170: POP
36171: POP
// end ;
36172: LD_VAR 0 2
36176: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36177: LD_INT 0
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
// if not unit or not hexes then
36185: LD_VAR 0 1
36189: NOT
36190: IFTRUE 36199
36192: PUSH
36193: LD_VAR 0 2
36197: NOT
36198: OR
36199: IFFALSE 36203
// exit ;
36201: GO 36326
// dist := 9999 ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_INT 9999
36210: ST_TO_ADDR
// for i = 1 to hexes do
36211: LD_ADDR_VAR 0 4
36215: PUSH
36216: DOUBLE
36217: LD_INT 1
36219: DEC
36220: ST_TO_ADDR
36221: LD_VAR 0 2
36225: PUSH
36226: FOR_TO
36227: IFFALSE 36314
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36229: LD_ADDR_VAR 0 6
36233: PUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: LD_VAR 0 2
36243: PUSH
36244: LD_VAR 0 4
36248: ARRAY
36249: PUSH
36250: LD_INT 1
36252: ARRAY
36253: PPUSH
36254: LD_VAR 0 2
36258: PUSH
36259: LD_VAR 0 4
36263: ARRAY
36264: PUSH
36265: LD_INT 2
36267: ARRAY
36268: PPUSH
36269: CALL_OW 297
36273: ST_TO_ADDR
// if tdist < dist then
36274: LD_VAR 0 6
36278: PUSH
36279: LD_VAR 0 5
36283: LESS
36284: IFFALSE 36312
// begin hex := hexes [ i ] ;
36286: LD_ADDR_VAR 0 8
36290: PUSH
36291: LD_VAR 0 2
36295: PUSH
36296: LD_VAR 0 4
36300: ARRAY
36301: ST_TO_ADDR
// dist := tdist ;
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_VAR 0 6
36311: ST_TO_ADDR
// end ; end ;
36312: GO 36226
36314: POP
36315: POP
// result := hex ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 8
36325: ST_TO_ADDR
// end ;
36326: LD_VAR 0 3
36330: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36335: LD_VAR 0 1
36339: NOT
36340: IFTRUE 36379
36342: PUSH
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 21
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 23
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PPUSH
36372: CALL_OW 69
36376: IN
36377: NOT
36378: OR
36379: IFFALSE 36383
// exit ;
36381: GO 36430
// for i = 1 to 3 do
36383: LD_ADDR_VAR 0 3
36387: PUSH
36388: DOUBLE
36389: LD_INT 1
36391: DEC
36392: ST_TO_ADDR
36393: LD_INT 3
36395: PUSH
36396: FOR_TO
36397: IFFALSE 36428
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 250
36408: PPUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: CALL_OW 251
36418: PPUSH
36419: LD_INT 1
36421: PPUSH
36422: CALL_OW 453
36426: GO 36396
36428: POP
36429: POP
// end ;
36430: LD_VAR 0 2
36434: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36435: LD_INT 0
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
// if not unit or not enemy_unit then
36443: LD_VAR 0 1
36447: NOT
36448: IFTRUE 36457
36450: PUSH
36451: LD_VAR 0 2
36455: NOT
36456: OR
36457: IFFALSE 36461
// exit ;
36459: GO 36932
// if GetLives ( i ) < 250 then
36461: LD_VAR 0 4
36465: PPUSH
36466: CALL_OW 256
36470: PUSH
36471: LD_INT 250
36473: LESS
36474: IFFALSE 36487
// begin ComAutodestruct ( i ) ;
36476: LD_VAR 0 4
36480: PPUSH
36481: CALL 36331 0 1
// exit ;
36485: GO 36932
// end ; x := GetX ( enemy_unit ) ;
36487: LD_ADDR_VAR 0 7
36491: PUSH
36492: LD_VAR 0 2
36496: PPUSH
36497: CALL_OW 250
36501: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36502: LD_ADDR_VAR 0 8
36506: PUSH
36507: LD_VAR 0 2
36511: PPUSH
36512: CALL_OW 251
36516: ST_TO_ADDR
// if not x or not y then
36517: LD_VAR 0 7
36521: NOT
36522: IFTRUE 36531
36524: PUSH
36525: LD_VAR 0 8
36529: NOT
36530: OR
36531: IFFALSE 36535
// exit ;
36533: GO 36932
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36535: LD_ADDR_VAR 0 6
36539: PUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: LD_INT 0
36547: PPUSH
36548: LD_INT 4
36550: PPUSH
36551: CALL_OW 272
36555: PUSH
36556: LD_VAR 0 8
36560: PPUSH
36561: LD_INT 0
36563: PPUSH
36564: LD_INT 4
36566: PPUSH
36567: CALL_OW 273
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_VAR 0 7
36580: PPUSH
36581: LD_INT 1
36583: PPUSH
36584: LD_INT 4
36586: PPUSH
36587: CALL_OW 272
36591: PUSH
36592: LD_VAR 0 8
36596: PPUSH
36597: LD_INT 1
36599: PPUSH
36600: LD_INT 4
36602: PPUSH
36603: CALL_OW 273
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 7
36616: PPUSH
36617: LD_INT 2
36619: PPUSH
36620: LD_INT 4
36622: PPUSH
36623: CALL_OW 272
36627: PUSH
36628: LD_VAR 0 8
36632: PPUSH
36633: LD_INT 2
36635: PPUSH
36636: LD_INT 4
36638: PPUSH
36639: CALL_OW 273
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_VAR 0 7
36652: PPUSH
36653: LD_INT 3
36655: PPUSH
36656: LD_INT 4
36658: PPUSH
36659: CALL_OW 272
36663: PUSH
36664: LD_VAR 0 8
36668: PPUSH
36669: LD_INT 3
36671: PPUSH
36672: LD_INT 4
36674: PPUSH
36675: CALL_OW 273
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 7
36688: PPUSH
36689: LD_INT 4
36691: PPUSH
36692: LD_INT 4
36694: PPUSH
36695: CALL_OW 272
36699: PUSH
36700: LD_VAR 0 8
36704: PPUSH
36705: LD_INT 4
36707: PPUSH
36708: LD_INT 4
36710: PPUSH
36711: CALL_OW 273
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_VAR 0 7
36724: PPUSH
36725: LD_INT 5
36727: PPUSH
36728: LD_INT 4
36730: PPUSH
36731: CALL_OW 272
36735: PUSH
36736: LD_VAR 0 8
36740: PPUSH
36741: LD_INT 5
36743: PPUSH
36744: LD_INT 4
36746: PPUSH
36747: CALL_OW 273
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// for i = tmp downto 1 do
36764: LD_ADDR_VAR 0 4
36768: PUSH
36769: DOUBLE
36770: LD_VAR 0 6
36774: INC
36775: ST_TO_ADDR
36776: LD_INT 1
36778: PUSH
36779: FOR_DOWNTO
36780: IFFALSE 36883
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36782: LD_VAR 0 6
36786: PUSH
36787: LD_VAR 0 4
36791: ARRAY
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 6
36801: PUSH
36802: LD_VAR 0 4
36806: ARRAY
36807: PUSH
36808: LD_INT 2
36810: ARRAY
36811: PPUSH
36812: CALL_OW 488
36816: NOT
36817: IFTRUE 36859
36819: PUSH
36820: LD_VAR 0 6
36824: PUSH
36825: LD_VAR 0 4
36829: ARRAY
36830: PUSH
36831: LD_INT 1
36833: ARRAY
36834: PPUSH
36835: LD_VAR 0 6
36839: PUSH
36840: LD_VAR 0 4
36844: ARRAY
36845: PUSH
36846: LD_INT 2
36848: ARRAY
36849: PPUSH
36850: CALL_OW 428
36854: PUSH
36855: LD_INT 0
36857: NONEQUAL
36858: OR
36859: IFFALSE 36881
// tmp := Delete ( tmp , i ) ;
36861: LD_ADDR_VAR 0 6
36865: PUSH
36866: LD_VAR 0 6
36870: PPUSH
36871: LD_VAR 0 4
36875: PPUSH
36876: CALL_OW 3
36880: ST_TO_ADDR
36881: GO 36779
36883: POP
36884: POP
// j := GetClosestHex ( unit , tmp ) ;
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: LD_VAR 0 6
36899: PPUSH
36900: CALL 36177 0 2
36904: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36905: LD_VAR 0 1
36909: PPUSH
36910: LD_VAR 0 5
36914: PUSH
36915: LD_INT 1
36917: ARRAY
36918: PPUSH
36919: LD_VAR 0 5
36923: PUSH
36924: LD_INT 2
36926: ARRAY
36927: PPUSH
36928: CALL_OW 111
// end ;
36932: LD_VAR 0 3
36936: RET
// export function PrepareApemanSoldier ( ) ; begin
36937: LD_INT 0
36939: PPUSH
// uc_nation := 0 ;
36940: LD_ADDR_OWVAR 21
36944: PUSH
36945: LD_INT 0
36947: ST_TO_ADDR
// hc_sex := sex_male ;
36948: LD_ADDR_OWVAR 27
36952: PUSH
36953: LD_INT 1
36955: ST_TO_ADDR
// hc_name :=  ;
36956: LD_ADDR_OWVAR 26
36960: PUSH
36961: LD_STRING 
36963: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36964: LD_ADDR_OWVAR 28
36968: PUSH
36969: LD_INT 15
36971: ST_TO_ADDR
// hc_gallery :=  ;
36972: LD_ADDR_OWVAR 33
36976: PUSH
36977: LD_STRING 
36979: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36980: LD_ADDR_OWVAR 31
36984: PUSH
36985: LD_INT 0
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 12
36995: PUSH
36996: LD_INT 0
36998: PPUSH
36999: LD_INT 3
37001: PPUSH
37002: CALL_OW 12
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37019: LD_ADDR_OWVAR 29
37023: PUSH
37024: LD_INT 12
37026: PUSH
37027: LD_INT 12
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// end ;
37034: LD_VAR 0 1
37038: RET
// export function PrepareApemanEngineer ( ) ; begin
37039: LD_INT 0
37041: PPUSH
// uc_nation := 0 ;
37042: LD_ADDR_OWVAR 21
37046: PUSH
37047: LD_INT 0
37049: ST_TO_ADDR
// hc_sex := sex_male ;
37050: LD_ADDR_OWVAR 27
37054: PUSH
37055: LD_INT 1
37057: ST_TO_ADDR
// hc_name :=  ;
37058: LD_ADDR_OWVAR 26
37062: PUSH
37063: LD_STRING 
37065: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37066: LD_ADDR_OWVAR 28
37070: PUSH
37071: LD_INT 16
37073: ST_TO_ADDR
// hc_gallery :=  ;
37074: LD_ADDR_OWVAR 33
37078: PUSH
37079: LD_STRING 
37081: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37082: LD_ADDR_OWVAR 31
37086: PUSH
37087: LD_INT 0
37089: PPUSH
37090: LD_INT 3
37092: PPUSH
37093: CALL_OW 12
37097: PUSH
37098: LD_INT 0
37100: PPUSH
37101: LD_INT 3
37103: PPUSH
37104: CALL_OW 12
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37121: LD_ADDR_OWVAR 29
37125: PUSH
37126: LD_INT 12
37128: PUSH
37129: LD_INT 12
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 1
37140: RET
// export function PrepareApeman ( agressivity ) ; begin
37141: LD_INT 0
37143: PPUSH
// uc_side := 0 ;
37144: LD_ADDR_OWVAR 20
37148: PUSH
37149: LD_INT 0
37151: ST_TO_ADDR
// uc_nation := 0 ;
37152: LD_ADDR_OWVAR 21
37156: PUSH
37157: LD_INT 0
37159: ST_TO_ADDR
// hc_sex := sex_male ;
37160: LD_ADDR_OWVAR 27
37164: PUSH
37165: LD_INT 1
37167: ST_TO_ADDR
// hc_class := class_apeman ;
37168: LD_ADDR_OWVAR 28
37172: PUSH
37173: LD_INT 12
37175: ST_TO_ADDR
// hc_gallery :=  ;
37176: LD_ADDR_OWVAR 33
37180: PUSH
37181: LD_STRING 
37183: ST_TO_ADDR
// hc_name :=  ;
37184: LD_ADDR_OWVAR 26
37188: PUSH
37189: LD_STRING 
37191: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37192: LD_ADDR_OWVAR 29
37196: PUSH
37197: LD_INT 12
37199: PUSH
37200: LD_INT 12
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// if agressivity = 0 then
37207: LD_VAR 0 1
37211: PUSH
37212: LD_INT 0
37214: EQUAL
37215: IFFALSE 37227
// hc_agressivity := 0 else
37217: LD_ADDR_OWVAR 35
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
37225: GO 37248
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37227: LD_ADDR_OWVAR 35
37231: PUSH
37232: LD_VAR 0 1
37236: NEG
37237: PPUSH
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL_OW 12
37247: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37248: LD_ADDR_OWVAR 31
37252: PUSH
37253: LD_INT 0
37255: PPUSH
37256: LD_INT 3
37258: PPUSH
37259: CALL_OW 12
37263: PUSH
37264: LD_INT 0
37266: PPUSH
37267: LD_INT 3
37269: PPUSH
37270: CALL_OW 12
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// end ;
37287: LD_VAR 0 2
37291: RET
// export function PrepareTiger ( agressivity ) ; begin
37292: LD_INT 0
37294: PPUSH
// uc_side := 0 ;
37295: LD_ADDR_OWVAR 20
37299: PUSH
37300: LD_INT 0
37302: ST_TO_ADDR
// uc_nation := 0 ;
37303: LD_ADDR_OWVAR 21
37307: PUSH
37308: LD_INT 0
37310: ST_TO_ADDR
// InitHc ;
37311: CALL_OW 19
// hc_class := class_tiger ;
37315: LD_ADDR_OWVAR 28
37319: PUSH
37320: LD_INT 14
37322: ST_TO_ADDR
// hc_gallery :=  ;
37323: LD_ADDR_OWVAR 33
37327: PUSH
37328: LD_STRING 
37330: ST_TO_ADDR
// hc_name :=  ;
37331: LD_ADDR_OWVAR 26
37335: PUSH
37336: LD_STRING 
37338: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37339: LD_ADDR_OWVAR 35
37343: PUSH
37344: LD_VAR 0 1
37348: NEG
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 12
37359: ST_TO_ADDR
// end ;
37360: LD_VAR 0 2
37364: RET
// export function PrepareEnchidna ( ) ; begin
37365: LD_INT 0
37367: PPUSH
// uc_side := 0 ;
37368: LD_ADDR_OWVAR 20
37372: PUSH
37373: LD_INT 0
37375: ST_TO_ADDR
// uc_nation := 0 ;
37376: LD_ADDR_OWVAR 21
37380: PUSH
37381: LD_INT 0
37383: ST_TO_ADDR
// InitHc ;
37384: CALL_OW 19
// hc_class := class_baggie ;
37388: LD_ADDR_OWVAR 28
37392: PUSH
37393: LD_INT 13
37395: ST_TO_ADDR
// hc_gallery :=  ;
37396: LD_ADDR_OWVAR 33
37400: PUSH
37401: LD_STRING 
37403: ST_TO_ADDR
// hc_name :=  ;
37404: LD_ADDR_OWVAR 26
37408: PUSH
37409: LD_STRING 
37411: ST_TO_ADDR
// end ;
37412: LD_VAR 0 1
37416: RET
// export function PrepareFrog ( ) ; begin
37417: LD_INT 0
37419: PPUSH
// uc_side := 0 ;
37420: LD_ADDR_OWVAR 20
37424: PUSH
37425: LD_INT 0
37427: ST_TO_ADDR
// uc_nation := 0 ;
37428: LD_ADDR_OWVAR 21
37432: PUSH
37433: LD_INT 0
37435: ST_TO_ADDR
// InitHc ;
37436: CALL_OW 19
// hc_class := class_frog ;
37440: LD_ADDR_OWVAR 28
37444: PUSH
37445: LD_INT 19
37447: ST_TO_ADDR
// hc_gallery :=  ;
37448: LD_ADDR_OWVAR 33
37452: PUSH
37453: LD_STRING 
37455: ST_TO_ADDR
// hc_name :=  ;
37456: LD_ADDR_OWVAR 26
37460: PUSH
37461: LD_STRING 
37463: ST_TO_ADDR
// end ;
37464: LD_VAR 0 1
37468: RET
// export function PrepareFish ( ) ; begin
37469: LD_INT 0
37471: PPUSH
// uc_side := 0 ;
37472: LD_ADDR_OWVAR 20
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// uc_nation := 0 ;
37480: LD_ADDR_OWVAR 21
37484: PUSH
37485: LD_INT 0
37487: ST_TO_ADDR
// InitHc ;
37488: CALL_OW 19
// hc_class := class_fish ;
37492: LD_ADDR_OWVAR 28
37496: PUSH
37497: LD_INT 20
37499: ST_TO_ADDR
// hc_gallery :=  ;
37500: LD_ADDR_OWVAR 33
37504: PUSH
37505: LD_STRING 
37507: ST_TO_ADDR
// hc_name :=  ;
37508: LD_ADDR_OWVAR 26
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 1
37520: RET
// export function PrepareBird ( ) ; begin
37521: LD_INT 0
37523: PPUSH
// uc_side := 0 ;
37524: LD_ADDR_OWVAR 20
37528: PUSH
37529: LD_INT 0
37531: ST_TO_ADDR
// uc_nation := 0 ;
37532: LD_ADDR_OWVAR 21
37536: PUSH
37537: LD_INT 0
37539: ST_TO_ADDR
// InitHc ;
37540: CALL_OW 19
// hc_class := class_phororhacos ;
37544: LD_ADDR_OWVAR 28
37548: PUSH
37549: LD_INT 18
37551: ST_TO_ADDR
// hc_gallery :=  ;
37552: LD_ADDR_OWVAR 33
37556: PUSH
37557: LD_STRING 
37559: ST_TO_ADDR
// hc_name :=  ;
37560: LD_ADDR_OWVAR 26
37564: PUSH
37565: LD_STRING 
37567: ST_TO_ADDR
// end ;
37568: LD_VAR 0 1
37572: RET
// export function PrepareHorse ( ) ; begin
37573: LD_INT 0
37575: PPUSH
// uc_side := 0 ;
37576: LD_ADDR_OWVAR 20
37580: PUSH
37581: LD_INT 0
37583: ST_TO_ADDR
// uc_nation := 0 ;
37584: LD_ADDR_OWVAR 21
37588: PUSH
37589: LD_INT 0
37591: ST_TO_ADDR
// InitHc ;
37592: CALL_OW 19
// hc_class := class_horse ;
37596: LD_ADDR_OWVAR 28
37600: PUSH
37601: LD_INT 21
37603: ST_TO_ADDR
// hc_gallery :=  ;
37604: LD_ADDR_OWVAR 33
37608: PUSH
37609: LD_STRING 
37611: ST_TO_ADDR
// hc_name :=  ;
37612: LD_ADDR_OWVAR 26
37616: PUSH
37617: LD_STRING 
37619: ST_TO_ADDR
// end ;
37620: LD_VAR 0 1
37624: RET
// export function PrepareMastodont ( ) ; begin
37625: LD_INT 0
37627: PPUSH
// uc_side := 0 ;
37628: LD_ADDR_OWVAR 20
37632: PUSH
37633: LD_INT 0
37635: ST_TO_ADDR
// uc_nation := 0 ;
37636: LD_ADDR_OWVAR 21
37640: PUSH
37641: LD_INT 0
37643: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37644: LD_ADDR_OWVAR 37
37648: PUSH
37649: LD_INT 31
37651: ST_TO_ADDR
// vc_control := control_rider ;
37652: LD_ADDR_OWVAR 38
37656: PUSH
37657: LD_INT 4
37659: ST_TO_ADDR
// end ;
37660: LD_VAR 0 1
37664: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37665: LD_INT 0
37667: PPUSH
37668: PPUSH
37669: PPUSH
// uc_side = 0 ;
37670: LD_ADDR_OWVAR 20
37674: PUSH
37675: LD_INT 0
37677: ST_TO_ADDR
// uc_nation = 0 ;
37678: LD_ADDR_OWVAR 21
37682: PUSH
37683: LD_INT 0
37685: ST_TO_ADDR
// InitHc_All ( ) ;
37686: CALL_OW 584
// InitVc ;
37690: CALL_OW 20
// if mastodonts then
37694: LD_VAR 0 6
37698: IFFALSE 37765
// for i = 1 to mastodonts do
37700: LD_ADDR_VAR 0 11
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_VAR 0 6
37714: PUSH
37715: FOR_TO
37716: IFFALSE 37763
// begin vc_chassis := 31 ;
37718: LD_ADDR_OWVAR 37
37722: PUSH
37723: LD_INT 31
37725: ST_TO_ADDR
// vc_control := control_rider ;
37726: LD_ADDR_OWVAR 38
37730: PUSH
37731: LD_INT 4
37733: ST_TO_ADDR
// animal := CreateVehicle ;
37734: LD_ADDR_VAR 0 12
37738: PUSH
37739: CALL_OW 45
37743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37744: LD_VAR 0 12
37748: PPUSH
37749: LD_VAR 0 8
37753: PPUSH
37754: LD_INT 0
37756: PPUSH
37757: CALL 39907 0 3
// end ;
37761: GO 37715
37763: POP
37764: POP
// if horses then
37765: LD_VAR 0 5
37769: IFFALSE 37836
// for i = 1 to horses do
37771: LD_ADDR_VAR 0 11
37775: PUSH
37776: DOUBLE
37777: LD_INT 1
37779: DEC
37780: ST_TO_ADDR
37781: LD_VAR 0 5
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37834
// begin hc_class := 21 ;
37789: LD_ADDR_OWVAR 28
37793: PUSH
37794: LD_INT 21
37796: ST_TO_ADDR
// hc_gallery :=  ;
37797: LD_ADDR_OWVAR 33
37801: PUSH
37802: LD_STRING 
37804: ST_TO_ADDR
// animal := CreateHuman ;
37805: LD_ADDR_VAR 0 12
37809: PUSH
37810: CALL_OW 44
37814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37815: LD_VAR 0 12
37819: PPUSH
37820: LD_VAR 0 8
37824: PPUSH
37825: LD_INT 0
37827: PPUSH
37828: CALL 39907 0 3
// end ;
37832: GO 37786
37834: POP
37835: POP
// if birds then
37836: LD_VAR 0 1
37840: IFFALSE 37907
// for i = 1 to birds do
37842: LD_ADDR_VAR 0 11
37846: PUSH
37847: DOUBLE
37848: LD_INT 1
37850: DEC
37851: ST_TO_ADDR
37852: LD_VAR 0 1
37856: PUSH
37857: FOR_TO
37858: IFFALSE 37905
// begin hc_class := 18 ;
37860: LD_ADDR_OWVAR 28
37864: PUSH
37865: LD_INT 18
37867: ST_TO_ADDR
// hc_gallery =  ;
37868: LD_ADDR_OWVAR 33
37872: PUSH
37873: LD_STRING 
37875: ST_TO_ADDR
// animal := CreateHuman ;
37876: LD_ADDR_VAR 0 12
37880: PUSH
37881: CALL_OW 44
37885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37886: LD_VAR 0 12
37890: PPUSH
37891: LD_VAR 0 8
37895: PPUSH
37896: LD_INT 0
37898: PPUSH
37899: CALL 39907 0 3
// end ;
37903: GO 37857
37905: POP
37906: POP
// if tigers then
37907: LD_VAR 0 2
37911: IFFALSE 37995
// for i = 1 to tigers do
37913: LD_ADDR_VAR 0 11
37917: PUSH
37918: DOUBLE
37919: LD_INT 1
37921: DEC
37922: ST_TO_ADDR
37923: LD_VAR 0 2
37927: PUSH
37928: FOR_TO
37929: IFFALSE 37993
// begin hc_class = class_tiger ;
37931: LD_ADDR_OWVAR 28
37935: PUSH
37936: LD_INT 14
37938: ST_TO_ADDR
// hc_gallery =  ;
37939: LD_ADDR_OWVAR 33
37943: PUSH
37944: LD_STRING 
37946: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37947: LD_ADDR_OWVAR 35
37951: PUSH
37952: LD_INT 7
37954: NEG
37955: PPUSH
37956: LD_INT 7
37958: PPUSH
37959: CALL_OW 12
37963: ST_TO_ADDR
// animal := CreateHuman ;
37964: LD_ADDR_VAR 0 12
37968: PUSH
37969: CALL_OW 44
37973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37974: LD_VAR 0 12
37978: PPUSH
37979: LD_VAR 0 8
37983: PPUSH
37984: LD_INT 0
37986: PPUSH
37987: CALL 39907 0 3
// end ;
37991: GO 37928
37993: POP
37994: POP
// if apemans then
37995: LD_VAR 0 3
37999: IFFALSE 38122
// for i = 1 to apemans do
38001: LD_ADDR_VAR 0 11
38005: PUSH
38006: DOUBLE
38007: LD_INT 1
38009: DEC
38010: ST_TO_ADDR
38011: LD_VAR 0 3
38015: PUSH
38016: FOR_TO
38017: IFFALSE 38120
// begin hc_class = class_apeman ;
38019: LD_ADDR_OWVAR 28
38023: PUSH
38024: LD_INT 12
38026: ST_TO_ADDR
// hc_gallery =  ;
38027: LD_ADDR_OWVAR 33
38031: PUSH
38032: LD_STRING 
38034: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38035: LD_ADDR_OWVAR 35
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PPUSH
38044: LD_INT 2
38046: PPUSH
38047: CALL_OW 12
38051: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38052: LD_ADDR_OWVAR 31
38056: PUSH
38057: LD_INT 1
38059: PPUSH
38060: LD_INT 3
38062: PPUSH
38063: CALL_OW 12
38067: PUSH
38068: LD_INT 1
38070: PPUSH
38071: LD_INT 3
38073: PPUSH
38074: CALL_OW 12
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// animal := CreateHuman ;
38091: LD_ADDR_VAR 0 12
38095: PUSH
38096: CALL_OW 44
38100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38101: LD_VAR 0 12
38105: PPUSH
38106: LD_VAR 0 8
38110: PPUSH
38111: LD_INT 0
38113: PPUSH
38114: CALL 39907 0 3
// end ;
38118: GO 38016
38120: POP
38121: POP
// if enchidnas then
38122: LD_VAR 0 4
38126: IFFALSE 38193
// for i = 1 to enchidnas do
38128: LD_ADDR_VAR 0 11
38132: PUSH
38133: DOUBLE
38134: LD_INT 1
38136: DEC
38137: ST_TO_ADDR
38138: LD_VAR 0 4
38142: PUSH
38143: FOR_TO
38144: IFFALSE 38191
// begin hc_class = 13 ;
38146: LD_ADDR_OWVAR 28
38150: PUSH
38151: LD_INT 13
38153: ST_TO_ADDR
// hc_gallery =  ;
38154: LD_ADDR_OWVAR 33
38158: PUSH
38159: LD_STRING 
38161: ST_TO_ADDR
// animal := CreateHuman ;
38162: LD_ADDR_VAR 0 12
38166: PUSH
38167: CALL_OW 44
38171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38172: LD_VAR 0 12
38176: PPUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: LD_INT 0
38184: PPUSH
38185: CALL 39907 0 3
// end ;
38189: GO 38143
38191: POP
38192: POP
// if fishes then
38193: LD_VAR 0 7
38197: IFFALSE 38264
// for i = 1 to fishes do
38199: LD_ADDR_VAR 0 11
38203: PUSH
38204: DOUBLE
38205: LD_INT 1
38207: DEC
38208: ST_TO_ADDR
38209: LD_VAR 0 7
38213: PUSH
38214: FOR_TO
38215: IFFALSE 38262
// begin hc_class = 20 ;
38217: LD_ADDR_OWVAR 28
38221: PUSH
38222: LD_INT 20
38224: ST_TO_ADDR
// hc_gallery =  ;
38225: LD_ADDR_OWVAR 33
38229: PUSH
38230: LD_STRING 
38232: ST_TO_ADDR
// animal := CreateHuman ;
38233: LD_ADDR_VAR 0 12
38237: PUSH
38238: CALL_OW 44
38242: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38243: LD_VAR 0 12
38247: PPUSH
38248: LD_VAR 0 9
38252: PPUSH
38253: LD_INT 0
38255: PPUSH
38256: CALL 39907 0 3
// end ;
38260: GO 38214
38262: POP
38263: POP
// end ;
38264: LD_VAR 0 10
38268: RET
// export function WantHeal ( sci , unit ) ; begin
38269: LD_INT 0
38271: PPUSH
// if GetTaskList ( sci ) > 0 then
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 437
38281: PUSH
38282: LD_INT 0
38284: GREATER
38285: IFFALSE 38357
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38287: LD_VAR 0 1
38291: PPUSH
38292: CALL_OW 437
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PUSH
38301: LD_INT 1
38303: ARRAY
38304: PUSH
38305: LD_STRING l
38307: EQUAL
38308: IFFALSE 38335
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 437
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PUSH
38325: LD_INT 4
38327: ARRAY
38328: PUSH
38329: LD_VAR 0 2
38333: EQUAL
38334: AND
38335: IFFALSE 38347
// result := true else
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: LD_INT 1
38344: ST_TO_ADDR
38345: GO 38355
// result := false ;
38347: LD_ADDR_VAR 0 3
38351: PUSH
38352: LD_INT 0
38354: ST_TO_ADDR
// end else
38355: GO 38365
// result := false ;
38357: LD_ADDR_VAR 0 3
38361: PUSH
38362: LD_INT 0
38364: ST_TO_ADDR
// end ;
38365: LD_VAR 0 3
38369: RET
// export function HealTarget ( sci ) ; begin
38370: LD_INT 0
38372: PPUSH
// if not sci then
38373: LD_VAR 0 1
38377: NOT
38378: IFFALSE 38382
// exit ;
38380: GO 38447
// result := 0 ;
38382: LD_ADDR_VAR 0 2
38386: PUSH
38387: LD_INT 0
38389: ST_TO_ADDR
// if GetTaskList ( sci ) then
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 437
38399: IFFALSE 38447
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 437
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PUSH
38419: LD_STRING l
38421: EQUAL
38422: IFFALSE 38447
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38424: LD_ADDR_VAR 0 2
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 437
38438: PUSH
38439: LD_INT 1
38441: ARRAY
38442: PUSH
38443: LD_INT 4
38445: ARRAY
38446: ST_TO_ADDR
// end ;
38447: LD_VAR 0 2
38451: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38452: LD_INT 0
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
// if not base_units then
38458: LD_VAR 0 1
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 38554
// result := false ;
38467: LD_ADDR_VAR 0 2
38471: PUSH
38472: LD_INT 0
38474: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38475: LD_ADDR_VAR 0 5
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_INT 21
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PPUSH
38495: CALL_OW 72
38499: ST_TO_ADDR
// if not tmp then
38500: LD_VAR 0 5
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 38554
// for i in tmp do
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_VAR 0 5
38518: PUSH
38519: FOR_IN
38520: IFFALSE 38552
// begin result := EnemyInRange ( i , 22 ) ;
38522: LD_ADDR_VAR 0 2
38526: PUSH
38527: LD_VAR 0 3
38531: PPUSH
38532: LD_INT 22
38534: PPUSH
38535: CALL 35979 0 2
38539: ST_TO_ADDR
// if result then
38540: LD_VAR 0 2
38544: IFFALSE 38550
// exit ;
38546: POP
38547: POP
38548: GO 38554
// end ;
38550: GO 38519
38552: POP
38553: POP
// end ;
38554: LD_VAR 0 2
38558: RET
// export function FilterByTag ( units , tag ) ; begin
38559: LD_INT 0
38561: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: LD_INT 120
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PPUSH
38584: CALL_OW 72
38588: ST_TO_ADDR
// end ;
38589: LD_VAR 0 3
38593: RET
// export function IsDriver ( un ) ; begin
38594: LD_INT 0
38596: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38597: LD_ADDR_VAR 0 2
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: LD_INT 55
38609: PUSH
38610: EMPTY
38611: LIST
38612: PPUSH
38613: CALL_OW 69
38617: IN
38618: ST_TO_ADDR
// end ;
38619: LD_VAR 0 2
38623: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38624: LD_INT 0
38626: PPUSH
38627: PPUSH
// list := [ ] ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: EMPTY
38634: ST_TO_ADDR
// case d of 0 :
38635: LD_VAR 0 3
38639: PUSH
38640: LD_INT 0
38642: DOUBLE
38643: EQUAL
38644: IFTRUE 38648
38646: GO 38781
38648: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_VAR 0 1
38658: PUSH
38659: LD_INT 4
38661: MINUS
38662: PUSH
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 4
38670: MINUS
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 3
38687: MINUS
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: LD_VAR 0 1
38706: PUSH
38707: LD_INT 4
38709: PLUS
38710: PUSH
38711: LD_VAR 0 2
38715: PUSH
38716: LD_INT 4
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 3
38731: PLUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 3
38740: PLUS
38741: PUSH
38742: LD_INT 5
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: LD_VAR 0 1
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_INT 4
38762: PLUS
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// end ; 1 :
38779: GO 39479
38781: LD_INT 1
38783: DOUBLE
38784: EQUAL
38785: IFTRUE 38789
38787: GO 38922
38789: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: LD_VAR 0 1
38799: PUSH
38800: LD_VAR 0 2
38804: PUSH
38805: LD_INT 4
38807: MINUS
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_INT 3
38824: MINUS
38825: PUSH
38826: LD_VAR 0 2
38830: PUSH
38831: LD_INT 3
38833: MINUS
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: PUSH
38843: LD_VAR 0 1
38847: PUSH
38848: LD_INT 4
38850: MINUS
38851: PUSH
38852: LD_VAR 0 2
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 3
38877: PLUS
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 4
38894: PLUS
38895: PUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_INT 4
38903: PLUS
38904: PUSH
38905: LD_INT 5
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: ST_TO_ADDR
// end ; 2 :
38920: GO 39479
38922: LD_INT 2
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38930
38928: GO 39059
38930: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38931: LD_ADDR_VAR 0 5
38935: PUSH
38936: LD_VAR 0 1
38940: PUSH
38941: LD_VAR 0 2
38945: PUSH
38946: LD_INT 3
38948: MINUS
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: PUSH
38958: LD_VAR 0 1
38962: PUSH
38963: LD_INT 4
38965: PLUS
38966: PUSH
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 4
38992: PLUS
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 3
39009: MINUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_INT 4
39031: MINUS
39032: PUSH
39033: LD_VAR 0 2
39037: PUSH
39038: LD_INT 4
39040: MINUS
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: ST_TO_ADDR
// end ; 3 :
39057: GO 39479
39059: LD_INT 3
39061: DOUBLE
39062: EQUAL
39063: IFTRUE 39067
39065: GO 39200
39067: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 1
39077: PUSH
39078: LD_INT 3
39080: PLUS
39081: PUSH
39082: LD_VAR 0 2
39086: PUSH
39087: LD_INT 4
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 4
39102: PLUS
39103: PUSH
39104: LD_VAR 0 2
39108: PUSH
39109: LD_INT 4
39111: PLUS
39112: PUSH
39113: LD_INT 5
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: PUSH
39121: LD_VAR 0 1
39125: PUSH
39126: LD_INT 4
39128: MINUS
39129: PUSH
39130: LD_VAR 0 2
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 4
39155: MINUS
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 3
39172: MINUS
39173: PUSH
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 3
39181: MINUS
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// end ; 4 :
39198: GO 39479
39200: LD_INT 4
39202: DOUBLE
39203: EQUAL
39204: IFTRUE 39208
39206: GO 39341
39208: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39209: LD_ADDR_VAR 0 5
39213: PUSH
39214: LD_VAR 0 1
39218: PUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_INT 4
39226: PLUS
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 3
39243: PLUS
39244: PUSH
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 3
39252: PLUS
39253: PUSH
39254: LD_INT 5
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: PUSH
39262: LD_VAR 0 1
39266: PUSH
39267: LD_INT 4
39269: PLUS
39270: PUSH
39271: LD_VAR 0 2
39275: PUSH
39276: LD_INT 4
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: PUSH
39284: LD_VAR 0 1
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 3
39296: MINUS
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 4
39313: MINUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 4
39322: MINUS
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: ST_TO_ADDR
// end ; 5 :
39339: GO 39479
39341: LD_INT 5
39343: DOUBLE
39344: EQUAL
39345: IFTRUE 39349
39347: GO 39478
39349: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39350: LD_ADDR_VAR 0 5
39354: PUSH
39355: LD_VAR 0 1
39359: PUSH
39360: LD_INT 4
39362: MINUS
39363: PUSH
39364: LD_VAR 0 2
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: PUSH
39377: LD_VAR 0 1
39381: PUSH
39382: LD_VAR 0 2
39386: PUSH
39387: LD_INT 4
39389: MINUS
39390: PUSH
39391: LD_INT 3
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_INT 4
39406: PLUS
39407: PUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 4
39415: PLUS
39416: PUSH
39417: LD_INT 5
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: PUSH
39425: LD_VAR 0 1
39429: PUSH
39430: LD_INT 3
39432: PLUS
39433: PUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_INT 4
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_INT 3
39459: PLUS
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// end ; end ;
39476: GO 39479
39478: POP
// result := list ;
39479: LD_ADDR_VAR 0 4
39483: PUSH
39484: LD_VAR 0 5
39488: ST_TO_ADDR
// end ;
39489: LD_VAR 0 4
39493: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39494: LD_INT 0
39496: PPUSH
39497: PPUSH
39498: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39499: LD_VAR 0 1
39503: NOT
39504: IFTRUE 39532
39506: PUSH
39507: LD_VAR 0 2
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: LD_INT 4
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: IN
39530: NOT
39531: OR
39532: IFFALSE 39536
// exit ;
39534: GO 39619
// tmp := [ ] ;
39536: LD_ADDR_VAR 0 5
39540: PUSH
39541: EMPTY
39542: ST_TO_ADDR
// for i in units do
39543: LD_ADDR_VAR 0 4
39547: PUSH
39548: LD_VAR 0 1
39552: PUSH
39553: FOR_IN
39554: IFFALSE 39588
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39556: LD_ADDR_VAR 0 5
39560: PUSH
39561: LD_VAR 0 5
39565: PPUSH
39566: LD_VAR 0 4
39570: PPUSH
39571: LD_VAR 0 2
39575: PPUSH
39576: CALL_OW 259
39580: PPUSH
39581: CALL 41014 0 2
39585: ST_TO_ADDR
39586: GO 39553
39588: POP
39589: POP
// if not tmp then
39590: LD_VAR 0 5
39594: NOT
39595: IFFALSE 39599
// exit ;
39597: GO 39619
// result := SortListByListDesc ( units , tmp ) ;
39599: LD_ADDR_VAR 0 3
39603: PUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: LD_VAR 0 5
39613: PPUSH
39614: CALL_OW 77
39618: ST_TO_ADDR
// end ;
39619: LD_VAR 0 3
39623: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39624: LD_INT 0
39626: PPUSH
39627: PPUSH
39628: PPUSH
// result := false ;
39629: LD_ADDR_VAR 0 3
39633: PUSH
39634: LD_INT 0
39636: ST_TO_ADDR
// if not building then
39637: LD_VAR 0 2
39641: NOT
39642: IFFALSE 39646
// exit ;
39644: GO 39790
// x := GetX ( building ) ;
39646: LD_ADDR_VAR 0 4
39650: PUSH
39651: LD_VAR 0 2
39655: PPUSH
39656: CALL_OW 250
39660: ST_TO_ADDR
// y := GetY ( building ) ;
39661: LD_ADDR_VAR 0 5
39665: PUSH
39666: LD_VAR 0 2
39670: PPUSH
39671: CALL_OW 251
39675: ST_TO_ADDR
// if not x or not y then
39676: LD_VAR 0 4
39680: NOT
39681: IFTRUE 39690
39683: PUSH
39684: LD_VAR 0 5
39688: NOT
39689: OR
39690: IFFALSE 39694
// exit ;
39692: GO 39790
// if GetTaskList ( unit ) then
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 437
39703: IFFALSE 39790
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39705: LD_STRING e
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 437
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: EQUAL
39726: IFFALSE 39753
39728: PUSH
39729: LD_VAR 0 4
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 437
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PUSH
39748: LD_INT 2
39750: ARRAY
39751: EQUAL
39752: AND
39753: IFFALSE 39780
39755: PUSH
39756: LD_VAR 0 5
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 437
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PUSH
39775: LD_INT 3
39777: ARRAY
39778: EQUAL
39779: AND
39780: IFFALSE 39790
// result := true end ;
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_INT 1
39789: ST_TO_ADDR
// end ;
39790: LD_VAR 0 3
39794: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39795: LD_INT 0
39797: PPUSH
// result := false ;
39798: LD_ADDR_VAR 0 4
39802: PUSH
39803: LD_INT 0
39805: ST_TO_ADDR
// if GetTaskList ( unit ) then
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 437
39815: IFFALSE 39902
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39817: LD_STRING M
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 437
39829: PUSH
39830: LD_INT 1
39832: ARRAY
39833: PUSH
39834: LD_INT 1
39836: ARRAY
39837: EQUAL
39838: IFFALSE 39865
39840: PUSH
39841: LD_VAR 0 2
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 437
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PUSH
39860: LD_INT 2
39862: ARRAY
39863: EQUAL
39864: AND
39865: IFFALSE 39892
39867: PUSH
39868: LD_VAR 0 3
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 437
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: PUSH
39887: LD_INT 3
39889: ARRAY
39890: EQUAL
39891: AND
39892: IFFALSE 39902
// result := true ;
39894: LD_ADDR_VAR 0 4
39898: PUSH
39899: LD_INT 1
39901: ST_TO_ADDR
// end ; end ;
39902: LD_VAR 0 4
39906: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39907: LD_INT 0
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
// if not unit or not area then
39913: LD_VAR 0 1
39917: NOT
39918: IFTRUE 39927
39920: PUSH
39921: LD_VAR 0 2
39925: NOT
39926: OR
39927: IFFALSE 39931
// exit ;
39929: GO 40107
// tmp := AreaToList ( area , i ) ;
39931: LD_ADDR_VAR 0 6
39935: PUSH
39936: LD_VAR 0 2
39940: PPUSH
39941: LD_VAR 0 5
39945: PPUSH
39946: CALL_OW 517
39950: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39951: LD_ADDR_VAR 0 5
39955: PUSH
39956: DOUBLE
39957: LD_INT 1
39959: DEC
39960: ST_TO_ADDR
39961: LD_VAR 0 6
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PUSH
39970: FOR_TO
39971: IFFALSE 40105
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39973: LD_ADDR_VAR 0 7
39977: PUSH
39978: LD_VAR 0 6
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: PUSH
39987: LD_VAR 0 5
39991: ARRAY
39992: PUSH
39993: LD_VAR 0 6
39997: PUSH
39998: LD_INT 2
40000: ARRAY
40001: PUSH
40002: LD_VAR 0 5
40006: ARRAY
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40012: LD_INT 92
40014: PUSH
40015: LD_VAR 0 7
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PUSH
40024: LD_VAR 0 7
40028: PUSH
40029: LD_INT 2
40031: ARRAY
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: PPUSH
40042: CALL_OW 69
40046: PUSH
40047: LD_INT 0
40049: EQUAL
40050: IFFALSE 40103
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40052: LD_VAR 0 1
40056: PPUSH
40057: LD_VAR 0 7
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PPUSH
40066: LD_VAR 0 7
40070: PUSH
40071: LD_INT 2
40073: ARRAY
40074: PPUSH
40075: LD_VAR 0 3
40079: PPUSH
40080: CALL_OW 48
// result := IsPlaced ( unit ) ;
40084: LD_ADDR_VAR 0 4
40088: PUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 305
40098: ST_TO_ADDR
// exit ;
40099: POP
40100: POP
40101: GO 40107
// end ; end ;
40103: GO 39970
40105: POP
40106: POP
// end ;
40107: LD_VAR 0 4
40111: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40112: LD_INT 0
40114: PPUSH
40115: PPUSH
40116: PPUSH
// if not side or side > 8 then
40117: LD_VAR 0 1
40121: NOT
40122: IFTRUE 40134
40124: PUSH
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 8
40132: GREATER
40133: OR
40134: IFFALSE 40138
// exit ;
40136: GO 40325
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40138: LD_ADDR_VAR 0 4
40142: PUSH
40143: LD_INT 22
40145: PUSH
40146: LD_VAR 0 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 21
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PPUSH
40169: CALL_OW 69
40173: ST_TO_ADDR
// if not tmp then
40174: LD_VAR 0 4
40178: NOT
40179: IFFALSE 40183
// exit ;
40181: GO 40325
// enable_addtolog := true ;
40183: LD_ADDR_OWVAR 81
40187: PUSH
40188: LD_INT 1
40190: ST_TO_ADDR
// AddToLog ( [ ) ;
40191: LD_STRING [
40193: PPUSH
40194: CALL_OW 561
// for i in tmp do
40198: LD_ADDR_VAR 0 3
40202: PUSH
40203: LD_VAR 0 4
40207: PUSH
40208: FOR_IN
40209: IFFALSE 40316
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40211: LD_STRING [
40213: PUSH
40214: LD_VAR 0 3
40218: PPUSH
40219: CALL_OW 266
40223: STR
40224: PUSH
40225: LD_STRING , 
40227: STR
40228: PUSH
40229: LD_VAR 0 3
40233: PPUSH
40234: CALL_OW 250
40238: STR
40239: PUSH
40240: LD_STRING , 
40242: STR
40243: PUSH
40244: LD_VAR 0 3
40248: PPUSH
40249: CALL_OW 251
40253: STR
40254: PUSH
40255: LD_STRING , 
40257: STR
40258: PUSH
40259: LD_VAR 0 3
40263: PPUSH
40264: CALL_OW 254
40268: STR
40269: PUSH
40270: LD_STRING , 
40272: STR
40273: PUSH
40274: LD_VAR 0 3
40278: PPUSH
40279: LD_INT 1
40281: PPUSH
40282: CALL_OW 268
40286: STR
40287: PUSH
40288: LD_STRING , 
40290: STR
40291: PUSH
40292: LD_VAR 0 3
40296: PPUSH
40297: LD_INT 2
40299: PPUSH
40300: CALL_OW 268
40304: STR
40305: PUSH
40306: LD_STRING ],
40308: STR
40309: PPUSH
40310: CALL_OW 561
// end ;
40314: GO 40208
40316: POP
40317: POP
// AddToLog ( ]; ) ;
40318: LD_STRING ];
40320: PPUSH
40321: CALL_OW 561
// end ;
40325: LD_VAR 0 2
40329: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40330: LD_INT 0
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
// if not area or not rate or not max then
40337: LD_VAR 0 1
40341: NOT
40342: IFTRUE 40351
40344: PUSH
40345: LD_VAR 0 2
40349: NOT
40350: OR
40351: IFTRUE 40360
40353: PUSH
40354: LD_VAR 0 4
40358: NOT
40359: OR
40360: IFFALSE 40364
// exit ;
40362: GO 40553
// while 1 do
40364: LD_INT 1
40366: IFFALSE 40553
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: LD_INT 1
40380: PPUSH
40381: CALL_OW 287
40385: PUSH
40386: LD_INT 10
40388: MUL
40389: ST_TO_ADDR
// r := rate / 10 ;
40390: LD_ADDR_VAR 0 7
40394: PUSH
40395: LD_VAR 0 2
40399: PUSH
40400: LD_INT 10
40402: DIVREAL
40403: ST_TO_ADDR
// time := 1 1$00 ;
40404: LD_ADDR_VAR 0 8
40408: PUSH
40409: LD_INT 2100
40411: ST_TO_ADDR
// if amount < min then
40412: LD_VAR 0 9
40416: PUSH
40417: LD_VAR 0 3
40421: LESS
40422: IFFALSE 40440
// r := r * 2 else
40424: LD_ADDR_VAR 0 7
40428: PUSH
40429: LD_VAR 0 7
40433: PUSH
40434: LD_INT 2
40436: MUL
40437: ST_TO_ADDR
40438: GO 40466
// if amount > max then
40440: LD_VAR 0 9
40444: PUSH
40445: LD_VAR 0 4
40449: GREATER
40450: IFFALSE 40466
// r := r / 2 ;
40452: LD_ADDR_VAR 0 7
40456: PUSH
40457: LD_VAR 0 7
40461: PUSH
40462: LD_INT 2
40464: DIVREAL
40465: ST_TO_ADDR
// time := time / r ;
40466: LD_ADDR_VAR 0 8
40470: PUSH
40471: LD_VAR 0 8
40475: PUSH
40476: LD_VAR 0 7
40480: DIVREAL
40481: ST_TO_ADDR
// if time < 0 then
40482: LD_VAR 0 8
40486: PUSH
40487: LD_INT 0
40489: LESS
40490: IFFALSE 40507
// time := time * - 1 ;
40492: LD_ADDR_VAR 0 8
40496: PUSH
40497: LD_VAR 0 8
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: MUL
40506: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40507: LD_VAR 0 8
40511: PUSH
40512: LD_INT 35
40514: PPUSH
40515: LD_INT 875
40517: PPUSH
40518: CALL_OW 12
40522: PLUS
40523: PPUSH
40524: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40528: LD_INT 1
40530: PPUSH
40531: LD_INT 5
40533: PPUSH
40534: CALL_OW 12
40538: PPUSH
40539: LD_VAR 0 1
40543: PPUSH
40544: LD_INT 1
40546: PPUSH
40547: CALL_OW 55
// end ;
40551: GO 40364
// end ;
40553: LD_VAR 0 5
40557: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40558: LD_INT 0
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
// if not turrets or not factories then
40568: LD_VAR 0 1
40572: NOT
40573: IFTRUE 40582
40575: PUSH
40576: LD_VAR 0 2
40580: NOT
40581: OR
40582: IFFALSE 40586
// exit ;
40584: GO 40893
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40586: LD_ADDR_VAR 0 10
40590: PUSH
40591: LD_INT 5
40593: PUSH
40594: LD_INT 6
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 4
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: LD_INT 5
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 24
40628: PUSH
40629: LD_INT 25
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 23
40638: PUSH
40639: LD_INT 27
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 42
40652: PUSH
40653: LD_INT 43
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 44
40662: PUSH
40663: LD_INT 46
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 45
40672: PUSH
40673: LD_INT 47
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
// result := [ ] ;
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: EMPTY
40696: ST_TO_ADDR
// for i in turrets do
40697: LD_ADDR_VAR 0 4
40701: PUSH
40702: LD_VAR 0 1
40706: PUSH
40707: FOR_IN
40708: IFFALSE 40891
// begin nat := GetNation ( i ) ;
40710: LD_ADDR_VAR 0 7
40714: PUSH
40715: LD_VAR 0 4
40719: PPUSH
40720: CALL_OW 248
40724: ST_TO_ADDR
// weapon := 0 ;
40725: LD_ADDR_VAR 0 8
40729: PUSH
40730: LD_INT 0
40732: ST_TO_ADDR
// if not nat then
40733: LD_VAR 0 7
40737: NOT
40738: IFFALSE 40742
// continue ;
40740: GO 40707
// for j in list [ nat ] do
40742: LD_ADDR_VAR 0 5
40746: PUSH
40747: LD_VAR 0 10
40751: PUSH
40752: LD_VAR 0 7
40756: ARRAY
40757: PUSH
40758: FOR_IN
40759: IFFALSE 40800
// if GetBWeapon ( i ) = j [ 1 ] then
40761: LD_VAR 0 4
40765: PPUSH
40766: CALL_OW 269
40770: PUSH
40771: LD_VAR 0 5
40775: PUSH
40776: LD_INT 1
40778: ARRAY
40779: EQUAL
40780: IFFALSE 40798
// begin weapon := j [ 2 ] ;
40782: LD_ADDR_VAR 0 8
40786: PUSH
40787: LD_VAR 0 5
40791: PUSH
40792: LD_INT 2
40794: ARRAY
40795: ST_TO_ADDR
// break ;
40796: GO 40800
// end ;
40798: GO 40758
40800: POP
40801: POP
// if not weapon then
40802: LD_VAR 0 8
40806: NOT
40807: IFFALSE 40811
// continue ;
40809: GO 40707
// for k in factories do
40811: LD_ADDR_VAR 0 6
40815: PUSH
40816: LD_VAR 0 2
40820: PUSH
40821: FOR_IN
40822: IFFALSE 40887
// begin weapons := AvailableWeaponList ( k ) ;
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: LD_VAR 0 6
40833: PPUSH
40834: CALL_OW 478
40838: ST_TO_ADDR
// if not weapons then
40839: LD_VAR 0 9
40843: NOT
40844: IFFALSE 40848
// continue ;
40846: GO 40821
// if weapon in weapons then
40848: LD_VAR 0 8
40852: PUSH
40853: LD_VAR 0 9
40857: IN
40858: IFFALSE 40885
// begin result := [ i , weapon ] ;
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_VAR 0 4
40869: PUSH
40870: LD_VAR 0 8
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// exit ;
40879: POP
40880: POP
40881: POP
40882: POP
40883: GO 40893
// end ; end ;
40885: GO 40821
40887: POP
40888: POP
// end ;
40889: GO 40707
40891: POP
40892: POP
// end ;
40893: LD_VAR 0 3
40897: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40898: LD_INT 0
40900: PPUSH
// if not side or side > 8 then
40901: LD_VAR 0 3
40905: NOT
40906: IFTRUE 40918
40908: PUSH
40909: LD_VAR 0 3
40913: PUSH
40914: LD_INT 8
40916: GREATER
40917: OR
40918: IFFALSE 40922
// exit ;
40920: GO 40981
// if not range then
40922: LD_VAR 0 4
40926: NOT
40927: IFFALSE 40938
// range := - 12 ;
40929: LD_ADDR_VAR 0 4
40933: PUSH
40934: LD_INT 12
40936: NEG
40937: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40938: LD_VAR 0 1
40942: PPUSH
40943: LD_VAR 0 2
40947: PPUSH
40948: LD_VAR 0 3
40952: PPUSH
40953: LD_VAR 0 4
40957: PPUSH
40958: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40962: LD_VAR 0 1
40966: PPUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: LD_VAR 0 3
40976: PPUSH
40977: CALL_OW 331
// end ;
40981: LD_VAR 0 5
40985: RET
// export function Video ( mode ) ; begin
40986: LD_INT 0
40988: PPUSH
// ingame_video = mode ;
40989: LD_ADDR_OWVAR 52
40993: PUSH
40994: LD_VAR 0 1
40998: ST_TO_ADDR
// interface_hidden = mode ;
40999: LD_ADDR_OWVAR 54
41003: PUSH
41004: LD_VAR 0 1
41008: ST_TO_ADDR
// end ;
41009: LD_VAR 0 2
41013: RET
// export function Join ( array , element ) ; begin
41014: LD_INT 0
41016: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41017: LD_ADDR_VAR 0 3
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: LD_VAR 0 1
41031: PUSH
41032: LD_INT 1
41034: PLUS
41035: PPUSH
41036: LD_VAR 0 2
41040: PPUSH
41041: CALL_OW 1
41045: ST_TO_ADDR
// end ;
41046: LD_VAR 0 3
41050: RET
// export function JoinUnion ( array , element ) ; begin
41051: LD_INT 0
41053: PPUSH
// result := array union element ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_VAR 0 1
41063: PUSH
41064: LD_VAR 0 2
41068: UNION
41069: ST_TO_ADDR
// end ;
41070: LD_VAR 0 3
41074: RET
// export function GetBehemoths ( side ) ; begin
41075: LD_INT 0
41077: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41078: LD_ADDR_VAR 0 2
41082: PUSH
41083: LD_INT 22
41085: PUSH
41086: LD_VAR 0 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 31
41097: PUSH
41098: LD_INT 25
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PPUSH
41109: CALL_OW 69
41113: ST_TO_ADDR
// end ;
41114: LD_VAR 0 2
41118: RET
// export function Shuffle ( array ) ; var i , index ; begin
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
41123: PPUSH
// result := [ ] ;
41124: LD_ADDR_VAR 0 2
41128: PUSH
41129: EMPTY
41130: ST_TO_ADDR
// if not array then
41131: LD_VAR 0 1
41135: NOT
41136: IFFALSE 41140
// exit ;
41138: GO 41239
// Randomize ;
41140: CALL_OW 10
// for i = array downto 1 do
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: DOUBLE
41150: LD_VAR 0 1
41154: INC
41155: ST_TO_ADDR
41156: LD_INT 1
41158: PUSH
41159: FOR_DOWNTO
41160: IFFALSE 41237
// begin index := rand ( 1 , array ) ;
41162: LD_ADDR_VAR 0 4
41166: PUSH
41167: LD_INT 1
41169: PPUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: CALL_OW 12
41179: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41180: LD_ADDR_VAR 0 2
41184: PUSH
41185: LD_VAR 0 2
41189: PPUSH
41190: LD_VAR 0 2
41194: PUSH
41195: LD_INT 1
41197: PLUS
41198: PPUSH
41199: LD_VAR 0 1
41203: PUSH
41204: LD_VAR 0 4
41208: ARRAY
41209: PPUSH
41210: CALL_OW 2
41214: ST_TO_ADDR
// array := Delete ( array , index ) ;
41215: LD_ADDR_VAR 0 1
41219: PUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: LD_VAR 0 4
41229: PPUSH
41230: CALL_OW 3
41234: ST_TO_ADDR
// end ;
41235: GO 41159
41237: POP
41238: POP
// end ;
41239: LD_VAR 0 2
41243: RET
// export function GetBaseMaterials ( base ) ; begin
41244: LD_INT 0
41246: PPUSH
// result := [ 0 , 0 , 0 ] ;
41247: LD_ADDR_VAR 0 2
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
// if not base then
41266: LD_VAR 0 1
41270: NOT
41271: IFFALSE 41275
// exit ;
41273: GO 41324
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41275: LD_ADDR_VAR 0 2
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_INT 1
41287: PPUSH
41288: CALL_OW 275
41292: PUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: LD_INT 2
41300: PPUSH
41301: CALL_OW 275
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_INT 3
41313: PPUSH
41314: CALL_OW 275
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// end ;
41324: LD_VAR 0 2
41328: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41329: LD_INT 0
41331: PPUSH
41332: PPUSH
// result := array ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_VAR 0 1
41342: ST_TO_ADDR
// if size >= result then
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 3
41352: GREATEREQUAL
41353: IFFALSE 41357
// exit ;
41355: GO 41407
// if size then
41357: LD_VAR 0 2
41361: IFFALSE 41407
// for i := array downto size do
41363: LD_ADDR_VAR 0 4
41367: PUSH
41368: DOUBLE
41369: LD_VAR 0 1
41373: INC
41374: ST_TO_ADDR
41375: LD_VAR 0 2
41379: PUSH
41380: FOR_DOWNTO
41381: IFFALSE 41405
// result := Delete ( result , result ) ;
41383: LD_ADDR_VAR 0 3
41387: PUSH
41388: LD_VAR 0 3
41392: PPUSH
41393: LD_VAR 0 3
41397: PPUSH
41398: CALL_OW 3
41402: ST_TO_ADDR
41403: GO 41380
41405: POP
41406: POP
// end ;
41407: LD_VAR 0 3
41411: RET
// export function ComExit ( unit ) ; var tmp ; begin
41412: LD_INT 0
41414: PPUSH
41415: PPUSH
// if not IsInUnit ( unit ) then
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL_OW 310
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 41490
// tmp := IsInUnit ( unit ) ;
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 310
41444: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41445: LD_VAR 0 3
41449: PPUSH
41450: CALL_OW 247
41454: PUSH
41455: LD_INT 2
41457: EQUAL
41458: IFFALSE 41471
// ComExitVehicle ( unit ) else
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 121
41469: GO 41480
// ComExitBuilding ( unit ) ;
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 122
// result := tmp ;
41480: LD_ADDR_VAR 0 2
41484: PUSH
41485: LD_VAR 0 3
41489: ST_TO_ADDR
// end ;
41490: LD_VAR 0 2
41494: RET
// export function ComExitAll ( units ) ; var i ; begin
41495: LD_INT 0
41497: PPUSH
41498: PPUSH
// if not units then
41499: LD_VAR 0 1
41503: NOT
41504: IFFALSE 41508
// exit ;
41506: GO 41534
// for i in units do
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_VAR 0 1
41517: PUSH
41518: FOR_IN
41519: IFFALSE 41532
// ComExit ( i ) ;
41521: LD_VAR 0 3
41525: PPUSH
41526: CALL 41412 0 1
41530: GO 41518
41532: POP
41533: POP
// end ;
41534: LD_VAR 0 2
41538: RET
// export function ResetHc ; begin
41539: LD_INT 0
41541: PPUSH
// InitHc ;
41542: CALL_OW 19
// hc_importance := 0 ;
41546: LD_ADDR_OWVAR 32
41550: PUSH
41551: LD_INT 0
41553: ST_TO_ADDR
// end ;
41554: LD_VAR 0 1
41558: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41559: LD_INT 0
41561: PPUSH
41562: PPUSH
41563: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41564: LD_ADDR_VAR 0 6
41568: PUSH
41569: LD_VAR 0 1
41573: PUSH
41574: LD_VAR 0 3
41578: PLUS
41579: PUSH
41580: LD_INT 2
41582: DIV
41583: ST_TO_ADDR
// if _x < 0 then
41584: LD_VAR 0 6
41588: PUSH
41589: LD_INT 0
41591: LESS
41592: IFFALSE 41609
// _x := _x * - 1 ;
41594: LD_ADDR_VAR 0 6
41598: PUSH
41599: LD_VAR 0 6
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: MUL
41608: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41609: LD_ADDR_VAR 0 7
41613: PUSH
41614: LD_VAR 0 2
41618: PUSH
41619: LD_VAR 0 4
41623: PLUS
41624: PUSH
41625: LD_INT 2
41627: DIV
41628: ST_TO_ADDR
// if _y < 0 then
41629: LD_VAR 0 7
41633: PUSH
41634: LD_INT 0
41636: LESS
41637: IFFALSE 41654
// _y := _y * - 1 ;
41639: LD_ADDR_VAR 0 7
41643: PUSH
41644: LD_VAR 0 7
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: MUL
41653: ST_TO_ADDR
// result := [ _x , _y ] ;
41654: LD_ADDR_VAR 0 5
41658: PUSH
41659: LD_VAR 0 6
41663: PUSH
41664: LD_VAR 0 7
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: ST_TO_ADDR
// end ;
41673: LD_VAR 0 5
41677: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41678: LD_INT 0
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
// task := GetTaskList ( unit ) ;
41684: LD_ADDR_VAR 0 7
41688: PUSH
41689: LD_VAR 0 1
41693: PPUSH
41694: CALL_OW 437
41698: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41699: LD_VAR 0 7
41703: NOT
41704: IFFALSE 41723
41706: PUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_VAR 0 2
41716: PPUSH
41717: CALL_OW 308
41721: NOT
41722: AND
41723: IFFALSE 41727
// exit ;
41725: GO 41845
// if IsInArea ( unit , area ) then
41727: LD_VAR 0 1
41731: PPUSH
41732: LD_VAR 0 2
41736: PPUSH
41737: CALL_OW 308
41741: IFFALSE 41759
// begin ComMoveToArea ( unit , goAway ) ;
41743: LD_VAR 0 1
41747: PPUSH
41748: LD_VAR 0 3
41752: PPUSH
41753: CALL_OW 113
// exit ;
41757: GO 41845
// end ; if task [ 1 ] [ 1 ] <> M then
41759: LD_VAR 0 7
41763: PUSH
41764: LD_INT 1
41766: ARRAY
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: PUSH
41772: LD_STRING M
41774: NONEQUAL
41775: IFFALSE 41779
// exit ;
41777: GO 41845
// x := task [ 1 ] [ 2 ] ;
41779: LD_ADDR_VAR 0 5
41783: PUSH
41784: LD_VAR 0 7
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PUSH
41793: LD_INT 2
41795: ARRAY
41796: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41797: LD_ADDR_VAR 0 6
41801: PUSH
41802: LD_VAR 0 7
41806: PUSH
41807: LD_INT 1
41809: ARRAY
41810: PUSH
41811: LD_INT 3
41813: ARRAY
41814: ST_TO_ADDR
// if InArea ( x , y , area ) then
41815: LD_VAR 0 5
41819: PPUSH
41820: LD_VAR 0 6
41824: PPUSH
41825: LD_VAR 0 2
41829: PPUSH
41830: CALL_OW 309
41834: IFFALSE 41845
// ComStop ( unit ) ;
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 141
// end ;
41845: LD_VAR 0 4
41849: RET
// export function Abs ( value ) ; begin
41850: LD_INT 0
41852: PPUSH
// result := value ;
41853: LD_ADDR_VAR 0 2
41857: PUSH
41858: LD_VAR 0 1
41862: ST_TO_ADDR
// if value < 0 then
41863: LD_VAR 0 1
41867: PUSH
41868: LD_INT 0
41870: LESS
41871: IFFALSE 41888
// result := value * - 1 ;
41873: LD_ADDR_VAR 0 2
41877: PUSH
41878: LD_VAR 0 1
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: MUL
41887: ST_TO_ADDR
// end ;
41888: LD_VAR 0 2
41892: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41893: LD_INT 0
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
// if not unit or not building then
41903: LD_VAR 0 1
41907: NOT
41908: IFTRUE 41917
41910: PUSH
41911: LD_VAR 0 2
41915: NOT
41916: OR
41917: IFFALSE 41921
// exit ;
41919: GO 42149
// x := GetX ( building ) ;
41921: LD_ADDR_VAR 0 4
41925: PUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: CALL_OW 250
41935: ST_TO_ADDR
// y := GetY ( building ) ;
41936: LD_ADDR_VAR 0 6
41940: PUSH
41941: LD_VAR 0 2
41945: PPUSH
41946: CALL_OW 251
41950: ST_TO_ADDR
// d := GetDir ( building ) ;
41951: LD_ADDR_VAR 0 8
41955: PUSH
41956: LD_VAR 0 2
41960: PPUSH
41961: CALL_OW 254
41965: ST_TO_ADDR
// r := 4 ;
41966: LD_ADDR_VAR 0 9
41970: PUSH
41971: LD_INT 4
41973: ST_TO_ADDR
// for i := 1 to 5 do
41974: LD_ADDR_VAR 0 10
41978: PUSH
41979: DOUBLE
41980: LD_INT 1
41982: DEC
41983: ST_TO_ADDR
41984: LD_INT 5
41986: PUSH
41987: FOR_TO
41988: IFFALSE 42147
// begin _x := ShiftX ( x , d , r + i ) ;
41990: LD_ADDR_VAR 0 5
41994: PUSH
41995: LD_VAR 0 4
41999: PPUSH
42000: LD_VAR 0 8
42004: PPUSH
42005: LD_VAR 0 9
42009: PUSH
42010: LD_VAR 0 10
42014: PLUS
42015: PPUSH
42016: CALL_OW 272
42020: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42021: LD_ADDR_VAR 0 7
42025: PUSH
42026: LD_VAR 0 6
42030: PPUSH
42031: LD_VAR 0 8
42035: PPUSH
42036: LD_VAR 0 9
42040: PUSH
42041: LD_VAR 0 10
42045: PLUS
42046: PPUSH
42047: CALL_OW 273
42051: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42052: LD_VAR 0 5
42056: PPUSH
42057: LD_VAR 0 7
42061: PPUSH
42062: CALL_OW 488
42066: IFFALSE 42101
42068: PUSH
42069: LD_VAR 0 5
42073: PPUSH
42074: LD_VAR 0 7
42078: PPUSH
42079: CALL_OW 428
42083: PPUSH
42084: CALL_OW 247
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: IN
42099: NOT
42100: AND
42101: IFFALSE 42145
// begin ComMoveXY ( unit , _x , _y ) ;
42103: LD_VAR 0 1
42107: PPUSH
42108: LD_VAR 0 5
42112: PPUSH
42113: LD_VAR 0 7
42117: PPUSH
42118: CALL_OW 111
// result := [ _x , _y ] ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_VAR 0 5
42131: PUSH
42132: LD_VAR 0 7
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// exit ;
42141: POP
42142: POP
42143: GO 42149
// end ; end ;
42145: GO 41987
42147: POP
42148: POP
// end ;
42149: LD_VAR 0 3
42153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42154: LD_INT 0
42156: PPUSH
42157: PPUSH
42158: PPUSH
// result := 0 ;
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42167: LD_VAR 0 1
42171: PUSH
42172: LD_INT 0
42174: LESS
42175: IFTRUE 42187
42177: PUSH
42178: LD_VAR 0 1
42182: PUSH
42183: LD_INT 8
42185: GREATER
42186: OR
42187: IFTRUE 42199
42189: PUSH
42190: LD_VAR 0 2
42194: PUSH
42195: LD_INT 0
42197: LESS
42198: OR
42199: IFTRUE 42211
42201: PUSH
42202: LD_VAR 0 2
42206: PUSH
42207: LD_INT 8
42209: GREATER
42210: OR
42211: IFFALSE 42215
// exit ;
42213: GO 42290
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42215: LD_ADDR_VAR 0 4
42219: PUSH
42220: LD_INT 22
42222: PUSH
42223: LD_VAR 0 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PPUSH
42232: CALL_OW 69
42236: PUSH
42237: FOR_IN
42238: IFFALSE 42288
// begin un := UnitShoot ( i ) ;
42240: LD_ADDR_VAR 0 5
42244: PUSH
42245: LD_VAR 0 4
42249: PPUSH
42250: CALL_OW 504
42254: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42255: LD_VAR 0 5
42259: PPUSH
42260: CALL_OW 255
42264: PUSH
42265: LD_VAR 0 1
42269: EQUAL
42270: IFFALSE 42286
// begin result := un ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_VAR 0 5
42281: ST_TO_ADDR
// exit ;
42282: POP
42283: POP
42284: GO 42290
// end ; end ;
42286: GO 42237
42288: POP
42289: POP
// end ;
42290: LD_VAR 0 3
42294: RET
// export function GetCargoBay ( units ) ; begin
42295: LD_INT 0
42297: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42298: LD_ADDR_VAR 0 2
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_INT 2
42310: PUSH
42311: LD_INT 34
42313: PUSH
42314: LD_INT 12
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 34
42323: PUSH
42324: LD_INT 51
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 34
42333: PUSH
42334: LD_INT 32
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 34
42343: PUSH
42344: LD_INT 89
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: PPUSH
42358: CALL_OW 72
42362: ST_TO_ADDR
// end ;
42363: LD_VAR 0 2
42367: RET
// export function Negate ( value ) ; begin
42368: LD_INT 0
42370: PPUSH
// result := not value ;
42371: LD_ADDR_VAR 0 2
42375: PUSH
42376: LD_VAR 0 1
42380: NOT
42381: ST_TO_ADDR
// end ;
42382: LD_VAR 0 2
42386: RET
// export function Inc ( value ) ; begin
42387: LD_INT 0
42389: PPUSH
// result := value + 1 ;
42390: LD_ADDR_VAR 0 2
42394: PUSH
42395: LD_VAR 0 1
42399: PUSH
42400: LD_INT 1
42402: PLUS
42403: ST_TO_ADDR
// end ;
42404: LD_VAR 0 2
42408: RET
// export function Dec ( value ) ; begin
42409: LD_INT 0
42411: PPUSH
// result := value - 1 ;
42412: LD_ADDR_VAR 0 2
42416: PUSH
42417: LD_VAR 0 1
42421: PUSH
42422: LD_INT 1
42424: MINUS
42425: ST_TO_ADDR
// end ;
42426: LD_VAR 0 2
42430: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42431: LD_INT 0
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_VAR 0 2
42450: PPUSH
42451: CALL_OW 488
42455: NOT
42456: IFTRUE 42475
42458: PUSH
42459: LD_VAR 0 3
42463: PPUSH
42464: LD_VAR 0 4
42468: PPUSH
42469: CALL_OW 488
42473: NOT
42474: OR
42475: IFFALSE 42488
// begin result := - 1 ;
42477: LD_ADDR_VAR 0 5
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: ST_TO_ADDR
// exit ;
42486: GO 42723
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42488: LD_ADDR_VAR 0 12
42492: PUSH
42493: LD_VAR 0 1
42497: PPUSH
42498: LD_VAR 0 2
42502: PPUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: CALL 41559 0 4
42517: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42518: LD_ADDR_VAR 0 11
42522: PUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: LD_VAR 0 2
42532: PPUSH
42533: LD_VAR 0 12
42537: PUSH
42538: LD_INT 1
42540: ARRAY
42541: PPUSH
42542: LD_VAR 0 12
42546: PUSH
42547: LD_INT 2
42549: ARRAY
42550: PPUSH
42551: CALL_OW 298
42555: ST_TO_ADDR
// distance := 9999 ;
42556: LD_ADDR_VAR 0 10
42560: PUSH
42561: LD_INT 9999
42563: ST_TO_ADDR
// for i := 0 to 5 do
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: DOUBLE
42570: LD_INT 0
42572: DEC
42573: ST_TO_ADDR
42574: LD_INT 5
42576: PUSH
42577: FOR_TO
42578: IFFALSE 42721
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42580: LD_ADDR_VAR 0 7
42584: PUSH
42585: LD_VAR 0 1
42589: PPUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 11
42599: PPUSH
42600: CALL_OW 272
42604: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42605: LD_ADDR_VAR 0 8
42609: PUSH
42610: LD_VAR 0 2
42614: PPUSH
42615: LD_VAR 0 6
42619: PPUSH
42620: LD_VAR 0 11
42624: PPUSH
42625: CALL_OW 273
42629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42630: LD_VAR 0 7
42634: PPUSH
42635: LD_VAR 0 8
42639: PPUSH
42640: CALL_OW 488
42644: NOT
42645: IFFALSE 42649
// continue ;
42647: GO 42577
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42649: LD_ADDR_VAR 0 9
42653: PUSH
42654: LD_VAR 0 12
42658: PUSH
42659: LD_INT 1
42661: ARRAY
42662: PPUSH
42663: LD_VAR 0 12
42667: PUSH
42668: LD_INT 2
42670: ARRAY
42671: PPUSH
42672: LD_VAR 0 7
42676: PPUSH
42677: LD_VAR 0 8
42681: PPUSH
42682: CALL_OW 298
42686: ST_TO_ADDR
// if tmp < distance then
42687: LD_VAR 0 9
42691: PUSH
42692: LD_VAR 0 10
42696: LESS
42697: IFFALSE 42719
// begin result := i ;
42699: LD_ADDR_VAR 0 5
42703: PUSH
42704: LD_VAR 0 6
42708: ST_TO_ADDR
// distance := tmp ;
42709: LD_ADDR_VAR 0 10
42713: PUSH
42714: LD_VAR 0 9
42718: ST_TO_ADDR
// end ; end ;
42719: GO 42577
42721: POP
42722: POP
// end ;
42723: LD_VAR 0 5
42727: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42728: LD_INT 0
42730: PPUSH
42731: PPUSH
// if not driver or not IsInUnit ( driver ) then
42732: LD_VAR 0 1
42736: NOT
42737: IFTRUE 42751
42739: PUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: CALL_OW 310
42749: NOT
42750: OR
42751: IFFALSE 42755
// exit ;
42753: GO 42845
// vehicle := IsInUnit ( driver ) ;
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 310
42769: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42770: LD_VAR 0 1
42774: PPUSH
42775: LD_STRING \
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: PUSH
42805: LD_STRING E
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_VAR 0 3
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 446
// end ;
42845: LD_VAR 0 2
42849: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
// if not driver or not IsInUnit ( driver ) then
42854: LD_VAR 0 1
42858: NOT
42859: IFTRUE 42873
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 310
42871: NOT
42872: OR
42873: IFFALSE 42877
// exit ;
42875: GO 42967
// vehicle := IsInUnit ( driver ) ;
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 310
42891: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42892: LD_VAR 0 1
42896: PPUSH
42897: LD_STRING \
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: PUSH
42927: LD_STRING E
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_VAR 0 3
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PPUSH
42963: CALL_OW 447
// end ;
42967: LD_VAR 0 2
42971: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42972: LD_INT 0
42974: PPUSH
42975: PPUSH
42976: PPUSH
// tmp := [ ] ;
42977: LD_ADDR_VAR 0 5
42981: PUSH
42982: EMPTY
42983: ST_TO_ADDR
// for i in units do
42984: LD_ADDR_VAR 0 4
42988: PUSH
42989: LD_VAR 0 1
42993: PUSH
42994: FOR_IN
42995: IFFALSE 43033
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42997: LD_ADDR_VAR 0 5
43001: PUSH
43002: LD_VAR 0 5
43006: PPUSH
43007: LD_VAR 0 5
43011: PUSH
43012: LD_INT 1
43014: PLUS
43015: PPUSH
43016: LD_VAR 0 4
43020: PPUSH
43021: CALL_OW 256
43025: PPUSH
43026: CALL_OW 2
43030: ST_TO_ADDR
43031: GO 42994
43033: POP
43034: POP
// if not tmp then
43035: LD_VAR 0 5
43039: NOT
43040: IFFALSE 43044
// exit ;
43042: GO 43092
// if asc then
43044: LD_VAR 0 2
43048: IFFALSE 43072
// result := SortListByListAsc ( units , tmp ) else
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_VAR 0 1
43059: PPUSH
43060: LD_VAR 0 5
43064: PPUSH
43065: CALL_OW 76
43069: ST_TO_ADDR
43070: GO 43092
// result := SortListByListDesc ( units , tmp ) ;
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: LD_VAR 0 5
43086: PPUSH
43087: CALL_OW 77
43091: ST_TO_ADDR
// end ;
43092: LD_VAR 0 3
43096: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43097: LD_INT 0
43099: PPUSH
43100: PPUSH
// task := GetTaskList ( mech ) ;
43101: LD_ADDR_VAR 0 4
43105: PUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 437
43115: ST_TO_ADDR
// if not task then
43116: LD_VAR 0 4
43120: NOT
43121: IFFALSE 43125
// exit ;
43123: GO 43169
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_VAR 0 4
43134: PUSH
43135: LD_INT 1
43137: ARRAY
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: PUSH
43143: LD_STRING r
43145: EQUAL
43146: IFFALSE 43168
43148: PUSH
43149: LD_VAR 0 4
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: PUSH
43158: LD_INT 4
43160: ARRAY
43161: PUSH
43162: LD_VAR 0 2
43166: EQUAL
43167: AND
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 3
43173: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43174: LD_INT 0
43176: PPUSH
// SetDir ( unit , d ) ;
43177: LD_VAR 0 1
43181: PPUSH
43182: LD_VAR 0 4
43186: PPUSH
43187: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43191: LD_ADDR_VAR 0 6
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: LD_VAR 0 2
43205: PPUSH
43206: LD_VAR 0 3
43210: PPUSH
43211: LD_VAR 0 5
43215: PPUSH
43216: CALL_OW 48
43220: ST_TO_ADDR
// end ;
43221: LD_VAR 0 6
43225: RET
// export function ToNaturalNumber ( number ) ; begin
43226: LD_INT 0
43228: PPUSH
// result := number div 1 ;
43229: LD_ADDR_VAR 0 2
43233: PUSH
43234: LD_VAR 0 1
43238: PUSH
43239: LD_INT 1
43241: DIV
43242: ST_TO_ADDR
// if number < 0 then
43243: LD_VAR 0 1
43247: PUSH
43248: LD_INT 0
43250: LESS
43251: IFFALSE 43261
// result := 0 ;
43253: LD_ADDR_VAR 0 2
43257: PUSH
43258: LD_INT 0
43260: ST_TO_ADDR
// end ;
43261: LD_VAR 0 2
43265: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43266: LD_INT 0
43268: PPUSH
43269: PPUSH
43270: PPUSH
// if not buildings then
43271: LD_VAR 0 1
43275: NOT
43276: IFFALSE 43280
// exit ;
43278: GO 43395
// tmp := [ ] ;
43280: LD_ADDR_VAR 0 5
43284: PUSH
43285: EMPTY
43286: ST_TO_ADDR
// for b in buildings do
43287: LD_ADDR_VAR 0 4
43291: PUSH
43292: LD_VAR 0 1
43296: PUSH
43297: FOR_IN
43298: IFFALSE 43336
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43300: LD_ADDR_VAR 0 5
43304: PUSH
43305: LD_VAR 0 5
43309: PPUSH
43310: LD_VAR 0 5
43314: PUSH
43315: LD_INT 1
43317: PLUS
43318: PPUSH
43319: LD_VAR 0 4
43323: PPUSH
43324: CALL_OW 266
43328: PPUSH
43329: CALL_OW 1
43333: ST_TO_ADDR
43334: GO 43297
43336: POP
43337: POP
// if not tmp then
43338: LD_VAR 0 5
43342: NOT
43343: IFFALSE 43347
// exit ;
43345: GO 43395
// if asc then
43347: LD_VAR 0 2
43351: IFFALSE 43375
// result := SortListByListAsc ( buildings , tmp ) else
43353: LD_ADDR_VAR 0 3
43357: PUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: LD_VAR 0 5
43367: PPUSH
43368: CALL_OW 76
43372: ST_TO_ADDR
43373: GO 43395
// result := SortListByListDesc ( buildings , tmp ) ;
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: LD_VAR 0 5
43389: PPUSH
43390: CALL_OW 77
43394: ST_TO_ADDR
// end ;
43395: LD_VAR 0 3
43399: RET
// export function SortByClass ( units , class ) ; var un ; begin
43400: LD_INT 0
43402: PPUSH
43403: PPUSH
// if not units or not class then
43404: LD_VAR 0 1
43408: NOT
43409: IFTRUE 43418
43411: PUSH
43412: LD_VAR 0 2
43416: NOT
43417: OR
43418: IFFALSE 43422
// exit ;
43420: GO 43517
// result := [ ] ;
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: EMPTY
43428: ST_TO_ADDR
// for un in units do
43429: LD_ADDR_VAR 0 4
43433: PUSH
43434: LD_VAR 0 1
43438: PUSH
43439: FOR_IN
43440: IFFALSE 43515
// if GetClass ( un ) = class then
43442: LD_VAR 0 4
43446: PPUSH
43447: CALL_OW 257
43451: PUSH
43452: LD_VAR 0 2
43456: EQUAL
43457: IFFALSE 43484
// result := Insert ( result , 1 , un ) else
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_VAR 0 3
43468: PPUSH
43469: LD_INT 1
43471: PPUSH
43472: LD_VAR 0 4
43476: PPUSH
43477: CALL_OW 2
43481: ST_TO_ADDR
43482: GO 43513
// result := Replace ( result , result + 1 , un ) ;
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_VAR 0 3
43493: PPUSH
43494: LD_VAR 0 3
43498: PUSH
43499: LD_INT 1
43501: PLUS
43502: PPUSH
43503: LD_VAR 0 4
43507: PPUSH
43508: CALL_OW 1
43512: ST_TO_ADDR
43513: GO 43439
43515: POP
43516: POP
// end ;
43517: LD_VAR 0 3
43521: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43522: LD_INT 0
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
// result := [ ] ;
43531: LD_ADDR_VAR 0 4
43535: PUSH
43536: EMPTY
43537: ST_TO_ADDR
// if x - r < 0 then
43538: LD_VAR 0 1
43542: PUSH
43543: LD_VAR 0 3
43547: MINUS
43548: PUSH
43549: LD_INT 0
43551: LESS
43552: IFFALSE 43564
// min_x := 0 else
43554: LD_ADDR_VAR 0 8
43558: PUSH
43559: LD_INT 0
43561: ST_TO_ADDR
43562: GO 43580
// min_x := x - r ;
43564: LD_ADDR_VAR 0 8
43568: PUSH
43569: LD_VAR 0 1
43573: PUSH
43574: LD_VAR 0 3
43578: MINUS
43579: ST_TO_ADDR
// if y - r < 0 then
43580: LD_VAR 0 2
43584: PUSH
43585: LD_VAR 0 3
43589: MINUS
43590: PUSH
43591: LD_INT 0
43593: LESS
43594: IFFALSE 43606
// min_y := 0 else
43596: LD_ADDR_VAR 0 7
43600: PUSH
43601: LD_INT 0
43603: ST_TO_ADDR
43604: GO 43622
// min_y := y - r ;
43606: LD_ADDR_VAR 0 7
43610: PUSH
43611: LD_VAR 0 2
43615: PUSH
43616: LD_VAR 0 3
43620: MINUS
43621: ST_TO_ADDR
// max_x := x + r ;
43622: LD_ADDR_VAR 0 9
43626: PUSH
43627: LD_VAR 0 1
43631: PUSH
43632: LD_VAR 0 3
43636: PLUS
43637: ST_TO_ADDR
// max_y := y + r ;
43638: LD_ADDR_VAR 0 10
43642: PUSH
43643: LD_VAR 0 2
43647: PUSH
43648: LD_VAR 0 3
43652: PLUS
43653: ST_TO_ADDR
// for _x = min_x to max_x do
43654: LD_ADDR_VAR 0 5
43658: PUSH
43659: DOUBLE
43660: LD_VAR 0 8
43664: DEC
43665: ST_TO_ADDR
43666: LD_VAR 0 9
43670: PUSH
43671: FOR_TO
43672: IFFALSE 43773
// for _y = min_y to max_y do
43674: LD_ADDR_VAR 0 6
43678: PUSH
43679: DOUBLE
43680: LD_VAR 0 7
43684: DEC
43685: ST_TO_ADDR
43686: LD_VAR 0 10
43690: PUSH
43691: FOR_TO
43692: IFFALSE 43769
// begin if not ValidHex ( _x , _y ) then
43694: LD_VAR 0 5
43698: PPUSH
43699: LD_VAR 0 6
43703: PPUSH
43704: CALL_OW 488
43708: NOT
43709: IFFALSE 43713
// continue ;
43711: GO 43691
// if GetResourceTypeXY ( _x , _y ) then
43713: LD_VAR 0 5
43717: PPUSH
43718: LD_VAR 0 6
43722: PPUSH
43723: CALL_OW 283
43727: IFFALSE 43767
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43729: LD_ADDR_VAR 0 4
43733: PUSH
43734: LD_VAR 0 4
43738: PPUSH
43739: LD_VAR 0 4
43743: PUSH
43744: LD_INT 1
43746: PLUS
43747: PPUSH
43748: LD_VAR 0 5
43752: PUSH
43753: LD_VAR 0 6
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PPUSH
43762: CALL_OW 1
43766: ST_TO_ADDR
// end ;
43767: GO 43691
43769: POP
43770: POP
43771: GO 43671
43773: POP
43774: POP
// end ;
43775: LD_VAR 0 4
43779: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
// if not units then
43790: LD_VAR 0 1
43794: NOT
43795: IFFALSE 43799
// exit ;
43797: GO 44331
// result := UnitFilter ( units , [ f_ok ] ) ;
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_VAR 0 1
43808: PPUSH
43809: LD_INT 50
43811: PUSH
43812: EMPTY
43813: LIST
43814: PPUSH
43815: CALL_OW 72
43819: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43820: LD_ADDR_VAR 0 8
43824: PUSH
43825: LD_VAR 0 1
43829: PUSH
43830: LD_INT 1
43832: ARRAY
43833: PPUSH
43834: CALL_OW 255
43838: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43839: LD_ADDR_VAR 0 10
43843: PUSH
43844: LD_INT 29
43846: PUSH
43847: LD_INT 91
43849: PUSH
43850: LD_INT 49
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// if not result then
43858: LD_VAR 0 3
43862: NOT
43863: IFFALSE 43867
// exit ;
43865: GO 44331
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43867: LD_ADDR_VAR 0 5
43871: PUSH
43872: LD_INT 81
43874: PUSH
43875: LD_VAR 0 8
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PPUSH
43884: CALL_OW 69
43888: ST_TO_ADDR
// for i in result do
43889: LD_ADDR_VAR 0 4
43893: PUSH
43894: LD_VAR 0 3
43898: PUSH
43899: FOR_IN
43900: IFFALSE 44329
// begin tag := GetTag ( i ) + 1 ;
43902: LD_ADDR_VAR 0 9
43906: PUSH
43907: LD_VAR 0 4
43911: PPUSH
43912: CALL_OW 110
43916: PUSH
43917: LD_INT 1
43919: PLUS
43920: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43921: LD_ADDR_VAR 0 7
43925: PUSH
43926: LD_VAR 0 4
43930: PPUSH
43931: CALL_OW 250
43935: PPUSH
43936: LD_VAR 0 4
43940: PPUSH
43941: CALL_OW 251
43945: PPUSH
43946: LD_INT 4
43948: PPUSH
43949: CALL 43522 0 3
43953: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43954: LD_VAR 0 4
43958: PPUSH
43959: CALL_OW 247
43963: PUSH
43964: LD_INT 2
43966: EQUAL
43967: IFFALSE 43979
43969: PUSH
43970: LD_VAR 0 7
43974: PUSH
43975: LD_INT 2
43977: GREATER
43978: AND
43979: IFFALSE 43999
43981: PUSH
43982: LD_VAR 0 4
43986: PPUSH
43987: CALL_OW 264
43991: PUSH
43992: LD_VAR 0 10
43996: IN
43997: NOT
43998: AND
43999: IFFALSE 44038
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44001: LD_VAR 0 4
44005: PPUSH
44006: LD_VAR 0 7
44010: PUSH
44011: LD_INT 1
44013: ARRAY
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: PPUSH
44019: LD_VAR 0 7
44023: PUSH
44024: LD_INT 1
44026: ARRAY
44027: PUSH
44028: LD_INT 2
44030: ARRAY
44031: PPUSH
44032: CALL_OW 116
44036: GO 44327
// if path > tag then
44038: LD_VAR 0 2
44042: PUSH
44043: LD_VAR 0 9
44047: GREATER
44048: IFFALSE 44256
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44050: LD_ADDR_VAR 0 6
44054: PUSH
44055: LD_VAR 0 5
44059: PPUSH
44060: LD_INT 91
44062: PUSH
44063: LD_VAR 0 4
44067: PUSH
44068: LD_INT 8
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: PPUSH
44076: CALL_OW 72
44080: ST_TO_ADDR
// if nearEnemy then
44081: LD_VAR 0 6
44085: IFFALSE 44154
// begin if GetWeapon ( i ) = ru_time_lapser then
44087: LD_VAR 0 4
44091: PPUSH
44092: CALL_OW 264
44096: PUSH
44097: LD_INT 49
44099: EQUAL
44100: IFFALSE 44128
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44102: LD_VAR 0 4
44106: PPUSH
44107: LD_VAR 0 6
44111: PPUSH
44112: LD_VAR 0 4
44116: PPUSH
44117: CALL_OW 74
44121: PPUSH
44122: CALL_OW 112
44126: GO 44152
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44128: LD_VAR 0 4
44132: PPUSH
44133: LD_VAR 0 6
44137: PPUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: CALL_OW 74
44147: PPUSH
44148: CALL 45412 0 2
// end else
44152: GO 44254
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_VAR 0 2
44163: PUSH
44164: LD_VAR 0 9
44168: ARRAY
44169: PUSH
44170: LD_INT 1
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 2
44178: PUSH
44179: LD_VAR 0 9
44183: ARRAY
44184: PUSH
44185: LD_INT 2
44187: ARRAY
44188: PPUSH
44189: CALL_OW 297
44193: PUSH
44194: LD_INT 6
44196: GREATER
44197: IFFALSE 44240
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44199: LD_VAR 0 4
44203: PPUSH
44204: LD_VAR 0 2
44208: PUSH
44209: LD_VAR 0 9
44213: ARRAY
44214: PUSH
44215: LD_INT 1
44217: ARRAY
44218: PPUSH
44219: LD_VAR 0 2
44223: PUSH
44224: LD_VAR 0 9
44228: ARRAY
44229: PUSH
44230: LD_INT 2
44232: ARRAY
44233: PPUSH
44234: CALL_OW 114
44238: GO 44254
// SetTag ( i , tag ) ;
44240: LD_VAR 0 4
44244: PPUSH
44245: LD_VAR 0 9
44249: PPUSH
44250: CALL_OW 109
// end else
44254: GO 44327
// if enemy then
44256: LD_VAR 0 5
44260: IFFALSE 44327
// begin if GetWeapon ( i ) = ru_time_lapser then
44262: LD_VAR 0 4
44266: PPUSH
44267: CALL_OW 264
44271: PUSH
44272: LD_INT 49
44274: EQUAL
44275: IFFALSE 44303
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44277: LD_VAR 0 4
44281: PPUSH
44282: LD_VAR 0 5
44286: PPUSH
44287: LD_VAR 0 4
44291: PPUSH
44292: CALL_OW 74
44296: PPUSH
44297: CALL_OW 112
44301: GO 44327
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44303: LD_VAR 0 4
44307: PPUSH
44308: LD_VAR 0 5
44312: PPUSH
44313: LD_VAR 0 4
44317: PPUSH
44318: CALL_OW 74
44322: PPUSH
44323: CALL 45412 0 2
// end ; end ;
44327: GO 43899
44329: POP
44330: POP
// end ;
44331: LD_VAR 0 3
44335: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44336: LD_INT 0
44338: PPUSH
44339: PPUSH
44340: PPUSH
// if not unit or IsInUnit ( unit ) then
44341: LD_VAR 0 1
44345: NOT
44346: IFTRUE 44359
44348: PUSH
44349: LD_VAR 0 1
44353: PPUSH
44354: CALL_OW 310
44358: OR
44359: IFFALSE 44363
// exit ;
44361: GO 44454
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44363: LD_ADDR_VAR 0 4
44367: PUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 250
44377: PPUSH
44378: LD_VAR 0 2
44382: PPUSH
44383: LD_INT 1
44385: PPUSH
44386: CALL_OW 272
44390: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44391: LD_ADDR_VAR 0 5
44395: PUSH
44396: LD_VAR 0 1
44400: PPUSH
44401: CALL_OW 251
44405: PPUSH
44406: LD_VAR 0 2
44410: PPUSH
44411: LD_INT 1
44413: PPUSH
44414: CALL_OW 273
44418: ST_TO_ADDR
// if ValidHex ( x , y ) then
44419: LD_VAR 0 4
44423: PPUSH
44424: LD_VAR 0 5
44428: PPUSH
44429: CALL_OW 488
44433: IFFALSE 44454
// ComTurnXY ( unit , x , y ) ;
44435: LD_VAR 0 1
44439: PPUSH
44440: LD_VAR 0 4
44444: PPUSH
44445: LD_VAR 0 5
44449: PPUSH
44450: CALL_OW 118
// end ;
44454: LD_VAR 0 3
44458: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44459: LD_INT 0
44461: PPUSH
44462: PPUSH
// result := false ;
44463: LD_ADDR_VAR 0 3
44467: PUSH
44468: LD_INT 0
44470: ST_TO_ADDR
// if not units then
44471: LD_VAR 0 2
44475: NOT
44476: IFFALSE 44480
// exit ;
44478: GO 44525
// for i in units do
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: LD_VAR 0 2
44489: PUSH
44490: FOR_IN
44491: IFFALSE 44523
// if See ( side , i ) then
44493: LD_VAR 0 1
44497: PPUSH
44498: LD_VAR 0 4
44502: PPUSH
44503: CALL_OW 292
44507: IFFALSE 44521
// begin result := true ;
44509: LD_ADDR_VAR 0 3
44513: PUSH
44514: LD_INT 1
44516: ST_TO_ADDR
// exit ;
44517: POP
44518: POP
44519: GO 44525
// end ;
44521: GO 44490
44523: POP
44524: POP
// end ;
44525: LD_VAR 0 3
44529: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44530: LD_INT 0
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
// if not unit or not points then
44536: LD_VAR 0 1
44540: NOT
44541: IFTRUE 44550
44543: PUSH
44544: LD_VAR 0 2
44548: NOT
44549: OR
44550: IFFALSE 44554
// exit ;
44552: GO 44644
// dist := 99999 ;
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_INT 99999
44561: ST_TO_ADDR
// for i in points do
44562: LD_ADDR_VAR 0 4
44566: PUSH
44567: LD_VAR 0 2
44571: PUSH
44572: FOR_IN
44573: IFFALSE 44642
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44575: LD_ADDR_VAR 0 6
44579: PUSH
44580: LD_VAR 0 1
44584: PPUSH
44585: LD_VAR 0 4
44589: PUSH
44590: LD_INT 1
44592: ARRAY
44593: PPUSH
44594: LD_VAR 0 4
44598: PUSH
44599: LD_INT 2
44601: ARRAY
44602: PPUSH
44603: CALL_OW 297
44607: ST_TO_ADDR
// if tmpDist < dist then
44608: LD_VAR 0 6
44612: PUSH
44613: LD_VAR 0 5
44617: LESS
44618: IFFALSE 44640
// begin result := i ;
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_VAR 0 4
44629: ST_TO_ADDR
// dist := tmpDist ;
44630: LD_ADDR_VAR 0 5
44634: PUSH
44635: LD_VAR 0 6
44639: ST_TO_ADDR
// end ; end ;
44640: GO 44572
44642: POP
44643: POP
// end ;
44644: LD_VAR 0 3
44648: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44649: LD_INT 0
44651: PPUSH
// uc_side := side ;
44652: LD_ADDR_OWVAR 20
44656: PUSH
44657: LD_VAR 0 1
44661: ST_TO_ADDR
// uc_nation := 3 ;
44662: LD_ADDR_OWVAR 21
44666: PUSH
44667: LD_INT 3
44669: ST_TO_ADDR
// vc_chassis := 25 ;
44670: LD_ADDR_OWVAR 37
44674: PUSH
44675: LD_INT 25
44677: ST_TO_ADDR
// vc_engine := engine_siberite ;
44678: LD_ADDR_OWVAR 39
44682: PUSH
44683: LD_INT 3
44685: ST_TO_ADDR
// vc_control := control_computer ;
44686: LD_ADDR_OWVAR 38
44690: PUSH
44691: LD_INT 3
44693: ST_TO_ADDR
// vc_weapon := 59 ;
44694: LD_ADDR_OWVAR 40
44698: PUSH
44699: LD_INT 59
44701: ST_TO_ADDR
// result := CreateVehicle ;
44702: LD_ADDR_VAR 0 5
44706: PUSH
44707: CALL_OW 45
44711: ST_TO_ADDR
// SetDir ( result , d ) ;
44712: LD_VAR 0 5
44716: PPUSH
44717: LD_VAR 0 4
44721: PPUSH
44722: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44726: LD_VAR 0 5
44730: PPUSH
44731: LD_VAR 0 2
44735: PPUSH
44736: LD_VAR 0 3
44740: PPUSH
44741: LD_INT 0
44743: PPUSH
44744: CALL_OW 48
// end ;
44748: LD_VAR 0 5
44752: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44753: LD_INT 0
44755: PPUSH
44756: PPUSH
44757: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44758: LD_ADDR_VAR 0 2
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44781: LD_VAR 0 1
44785: NOT
44786: IFTRUE 44819
44788: PUSH
44789: LD_VAR 0 1
44793: PPUSH
44794: CALL_OW 264
44798: PUSH
44799: LD_INT 12
44801: PUSH
44802: LD_INT 51
44804: PUSH
44805: LD_INT 32
44807: PUSH
44808: LD_INT 89
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: IN
44817: NOT
44818: OR
44819: IFFALSE 44823
// exit ;
44821: GO 44921
// for i := 1 to 3 do
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: DOUBLE
44829: LD_INT 1
44831: DEC
44832: ST_TO_ADDR
44833: LD_INT 3
44835: PUSH
44836: FOR_TO
44837: IFFALSE 44919
// begin tmp := GetCargo ( cargo , i ) ;
44839: LD_ADDR_VAR 0 4
44843: PUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: LD_VAR 0 3
44853: PPUSH
44854: CALL_OW 289
44858: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44859: LD_ADDR_VAR 0 2
44863: PUSH
44864: LD_VAR 0 2
44868: PPUSH
44869: LD_VAR 0 3
44873: PPUSH
44874: LD_VAR 0 4
44878: PPUSH
44879: CALL_OW 1
44883: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44884: LD_ADDR_VAR 0 2
44888: PUSH
44889: LD_VAR 0 2
44893: PPUSH
44894: LD_INT 4
44896: PPUSH
44897: LD_VAR 0 2
44901: PUSH
44902: LD_INT 4
44904: ARRAY
44905: PUSH
44906: LD_VAR 0 4
44910: PLUS
44911: PPUSH
44912: CALL_OW 1
44916: ST_TO_ADDR
// end ;
44917: GO 44836
44919: POP
44920: POP
// end ;
44921: LD_VAR 0 2
44925: RET
// export function Length ( array ) ; begin
44926: LD_INT 0
44928: PPUSH
// result := array + 0 ;
44929: LD_ADDR_VAR 0 2
44933: PUSH
44934: LD_VAR 0 1
44938: PUSH
44939: LD_INT 0
44941: PLUS
44942: ST_TO_ADDR
// end ;
44943: LD_VAR 0 2
44947: RET
// export function PrepareArray ( array ) ; begin
44948: LD_INT 0
44950: PPUSH
// result := array diff 0 ;
44951: LD_ADDR_VAR 0 2
44955: PUSH
44956: LD_VAR 0 1
44960: PUSH
44961: LD_INT 0
44963: DIFF
44964: ST_TO_ADDR
// if not result [ 1 ] then
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: NOT
44974: IFFALSE 44994
// result := Delete ( result , 1 ) ;
44976: LD_ADDR_VAR 0 2
44980: PUSH
44981: LD_VAR 0 2
44985: PPUSH
44986: LD_INT 1
44988: PPUSH
44989: CALL_OW 3
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 2
44998: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
// sibRocketRange := 25 ;
45005: LD_ADDR_VAR 0 6
45009: PUSH
45010: LD_INT 25
45012: ST_TO_ADDR
// result := false ;
45013: LD_ADDR_VAR 0 4
45017: PUSH
45018: LD_INT 0
45020: ST_TO_ADDR
// for i := 0 to 5 do
45021: LD_ADDR_VAR 0 5
45025: PUSH
45026: DOUBLE
45027: LD_INT 0
45029: DEC
45030: ST_TO_ADDR
45031: LD_INT 5
45033: PUSH
45034: FOR_TO
45035: IFFALSE 45102
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45037: LD_VAR 0 1
45041: PPUSH
45042: LD_VAR 0 5
45046: PPUSH
45047: LD_VAR 0 6
45051: PPUSH
45052: CALL_OW 272
45056: PPUSH
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_VAR 0 5
45066: PPUSH
45067: LD_VAR 0 6
45071: PPUSH
45072: CALL_OW 273
45076: PPUSH
45077: LD_VAR 0 3
45081: PPUSH
45082: CALL_OW 309
45086: IFFALSE 45100
// begin result := true ;
45088: LD_ADDR_VAR 0 4
45092: PUSH
45093: LD_INT 1
45095: ST_TO_ADDR
// exit ;
45096: POP
45097: POP
45098: GO 45104
// end ;
45100: GO 45034
45102: POP
45103: POP
// end ;
45104: LD_VAR 0 4
45108: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45109: LD_INT 0
45111: PPUSH
45112: PPUSH
45113: PPUSH
// if btype = b_depot then
45114: LD_VAR 0 2
45118: PUSH
45119: LD_INT 0
45121: EQUAL
45122: IFFALSE 45134
// begin result := true ;
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_INT 1
45131: ST_TO_ADDR
// exit ;
45132: GO 45254
// end ; pom := GetBase ( depot ) ;
45134: LD_ADDR_VAR 0 4
45138: PUSH
45139: LD_VAR 0 1
45143: PPUSH
45144: CALL_OW 274
45148: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45149: LD_ADDR_VAR 0 5
45153: PUSH
45154: LD_VAR 0 2
45158: PPUSH
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 248
45168: PPUSH
45169: CALL_OW 450
45173: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45174: LD_ADDR_VAR 0 3
45178: PUSH
45179: LD_VAR 0 4
45183: PPUSH
45184: LD_INT 1
45186: PPUSH
45187: CALL_OW 275
45191: PUSH
45192: LD_VAR 0 5
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: GREATEREQUAL
45201: IFFALSE 45227
45203: PUSH
45204: LD_VAR 0 4
45208: PPUSH
45209: LD_INT 2
45211: PPUSH
45212: CALL_OW 275
45216: PUSH
45217: LD_VAR 0 5
45221: PUSH
45222: LD_INT 2
45224: ARRAY
45225: GREATEREQUAL
45226: AND
45227: IFFALSE 45253
45229: PUSH
45230: LD_VAR 0 4
45234: PPUSH
45235: LD_INT 3
45237: PPUSH
45238: CALL_OW 275
45242: PUSH
45243: LD_VAR 0 5
45247: PUSH
45248: LD_INT 3
45250: ARRAY
45251: GREATEREQUAL
45252: AND
45253: ST_TO_ADDR
// end ;
45254: LD_VAR 0 3
45258: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45259: LD_INT 0
45261: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45262: LD_VAR 0 1
45266: PPUSH
45267: LD_VAR 0 2
45271: PPUSH
45272: LD_INT 0
45274: PPUSH
45275: LD_INT 0
45277: PPUSH
45278: LD_INT 1
45280: PPUSH
45281: LD_INT 0
45283: PPUSH
45284: CALL_OW 587
// end ;
45288: LD_VAR 0 3
45292: RET
// export function CenterOnNow ( unit ) ; begin
45293: LD_INT 0
45295: PPUSH
// result := IsInUnit ( unit ) ;
45296: LD_ADDR_VAR 0 2
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: CALL_OW 310
45310: ST_TO_ADDR
// if not result then
45311: LD_VAR 0 2
45315: NOT
45316: IFFALSE 45328
// result := unit ;
45318: LD_ADDR_VAR 0 2
45322: PUSH
45323: LD_VAR 0 1
45327: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 87
// end ;
45337: LD_VAR 0 2
45341: RET
// export function ComMoveHex ( unit , hex ) ; begin
45342: LD_INT 0
45344: PPUSH
// if not hex then
45345: LD_VAR 0 2
45349: NOT
45350: IFFALSE 45354
// exit ;
45352: GO 45407
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45354: LD_VAR 0 2
45358: PUSH
45359: LD_INT 1
45361: ARRAY
45362: PPUSH
45363: LD_VAR 0 2
45367: PUSH
45368: LD_INT 2
45370: ARRAY
45371: PPUSH
45372: CALL_OW 428
45376: IFFALSE 45380
// exit ;
45378: GO 45407
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45380: LD_VAR 0 1
45384: PPUSH
45385: LD_VAR 0 2
45389: PUSH
45390: LD_INT 1
45392: ARRAY
45393: PPUSH
45394: LD_VAR 0 2
45398: PUSH
45399: LD_INT 2
45401: ARRAY
45402: PPUSH
45403: CALL_OW 111
// end ;
45407: LD_VAR 0 3
45411: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45412: LD_INT 0
45414: PPUSH
45415: PPUSH
45416: PPUSH
// if not unit or not enemy then
45417: LD_VAR 0 1
45421: NOT
45422: IFTRUE 45431
45424: PUSH
45425: LD_VAR 0 2
45429: NOT
45430: OR
45431: IFFALSE 45435
// exit ;
45433: GO 45561
// x := GetX ( enemy ) ;
45435: LD_ADDR_VAR 0 4
45439: PUSH
45440: LD_VAR 0 2
45444: PPUSH
45445: CALL_OW 250
45449: ST_TO_ADDR
// y := GetY ( enemy ) ;
45450: LD_ADDR_VAR 0 5
45454: PUSH
45455: LD_VAR 0 2
45459: PPUSH
45460: CALL_OW 251
45464: ST_TO_ADDR
// if ValidHex ( x , y ) then
45465: LD_VAR 0 4
45469: PPUSH
45470: LD_VAR 0 5
45474: PPUSH
45475: CALL_OW 488
45479: IFFALSE 45561
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45481: LD_VAR 0 2
45485: PPUSH
45486: CALL_OW 247
45490: PUSH
45491: LD_INT 3
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: IN
45501: IFTRUE 45524
45503: PUSH
45504: LD_VAR 0 1
45508: PPUSH
45509: CALL_OW 255
45513: PPUSH
45514: LD_VAR 0 2
45518: PPUSH
45519: CALL_OW 292
45523: OR
45524: IFFALSE 45542
// ComAttackUnit ( unit , enemy ) else
45526: LD_VAR 0 1
45530: PPUSH
45531: LD_VAR 0 2
45535: PPUSH
45536: CALL_OW 115
45540: GO 45561
// ComAgressiveMove ( unit , x , y ) ;
45542: LD_VAR 0 1
45546: PPUSH
45547: LD_VAR 0 4
45551: PPUSH
45552: LD_VAR 0 5
45556: PPUSH
45557: CALL_OW 114
// end ;
45561: LD_VAR 0 3
45565: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45566: LD_INT 0
45568: PPUSH
45569: PPUSH
45570: PPUSH
// list := AreaToList ( area , 0 ) ;
45571: LD_ADDR_VAR 0 5
45575: PUSH
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 0
45583: PPUSH
45584: CALL_OW 517
45588: ST_TO_ADDR
// if not list then
45589: LD_VAR 0 5
45593: NOT
45594: IFFALSE 45598
// exit ;
45596: GO 45728
// if all then
45598: LD_VAR 0 2
45602: IFFALSE 45690
// begin for i := 1 to list [ 1 ] do
45604: LD_ADDR_VAR 0 4
45608: PUSH
45609: DOUBLE
45610: LD_INT 1
45612: DEC
45613: ST_TO_ADDR
45614: LD_VAR 0 5
45618: PUSH
45619: LD_INT 1
45621: ARRAY
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45686
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45626: LD_ADDR_VAR 0 3
45630: PUSH
45631: LD_VAR 0 3
45635: PPUSH
45636: LD_VAR 0 3
45640: PUSH
45641: LD_INT 1
45643: PLUS
45644: PPUSH
45645: LD_VAR 0 5
45649: PUSH
45650: LD_INT 1
45652: ARRAY
45653: PUSH
45654: LD_VAR 0 4
45658: ARRAY
45659: PUSH
45660: LD_VAR 0 5
45664: PUSH
45665: LD_INT 2
45667: ARRAY
45668: PUSH
45669: LD_VAR 0 4
45673: ARRAY
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PPUSH
45679: CALL_OW 1
45683: ST_TO_ADDR
45684: GO 45623
45686: POP
45687: POP
// exit ;
45688: GO 45728
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_VAR 0 5
45699: PUSH
45700: LD_INT 1
45702: ARRAY
45703: PUSH
45704: LD_INT 1
45706: ARRAY
45707: PUSH
45708: LD_VAR 0 5
45712: PUSH
45713: LD_INT 2
45715: ARRAY
45716: PUSH
45717: LD_INT 1
45719: ARRAY
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: ST_TO_ADDR
// end ;
45728: LD_VAR 0 3
45732: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45733: LD_INT 0
45735: PPUSH
45736: PPUSH
// list := AreaToList ( area , 0 ) ;
45737: LD_ADDR_VAR 0 4
45741: PUSH
45742: LD_VAR 0 1
45746: PPUSH
45747: LD_INT 0
45749: PPUSH
45750: CALL_OW 517
45754: ST_TO_ADDR
// if not list then
45755: LD_VAR 0 4
45759: NOT
45760: IFFALSE 45764
// exit ;
45762: GO 45805
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45764: LD_ADDR_VAR 0 3
45768: PUSH
45769: LD_VAR 0 4
45773: PUSH
45774: LD_INT 1
45776: ARRAY
45777: PUSH
45778: LD_INT 1
45780: ARRAY
45781: PUSH
45782: LD_VAR 0 4
45786: PUSH
45787: LD_INT 2
45789: ARRAY
45790: PUSH
45791: LD_INT 1
45793: ARRAY
45794: PUSH
45795: LD_VAR 0 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// end ;
45805: LD_VAR 0 3
45809: RET
// export function First ( array ) ; begin
45810: LD_INT 0
45812: PPUSH
// if not array then
45813: LD_VAR 0 1
45817: NOT
45818: IFFALSE 45822
// exit ;
45820: GO 45836
// result := array [ 1 ] ;
45822: LD_ADDR_VAR 0 2
45826: PUSH
45827: LD_VAR 0 1
45831: PUSH
45832: LD_INT 1
45834: ARRAY
45835: ST_TO_ADDR
// end ;
45836: LD_VAR 0 2
45840: RET
// export function Last ( array ) ; begin
45841: LD_INT 0
45843: PPUSH
// if not array then
45844: LD_VAR 0 1
45848: NOT
45849: IFFALSE 45853
// exit ;
45851: GO 45869
// result := array [ array ] ;
45853: LD_ADDR_VAR 0 2
45857: PUSH
45858: LD_VAR 0 1
45862: PUSH
45863: LD_VAR 0 1
45867: ARRAY
45868: ST_TO_ADDR
// end ;
45869: LD_VAR 0 2
45873: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45874: LD_INT 0
45876: PPUSH
45877: PPUSH
// result := [ ] ;
45878: LD_ADDR_VAR 0 5
45882: PUSH
45883: EMPTY
45884: ST_TO_ADDR
// if not array then
45885: LD_VAR 0 1
45889: NOT
45890: IFFALSE 45894
// exit ;
45892: GO 46006
// for i := 1 to array do
45894: LD_ADDR_VAR 0 6
45898: PUSH
45899: DOUBLE
45900: LD_INT 1
45902: DEC
45903: ST_TO_ADDR
45904: LD_VAR 0 1
45908: PUSH
45909: FOR_TO
45910: IFFALSE 46004
// if array [ i ] [ index ] = value then
45912: LD_VAR 0 1
45916: PUSH
45917: LD_VAR 0 6
45921: ARRAY
45922: PUSH
45923: LD_VAR 0 2
45927: ARRAY
45928: PUSH
45929: LD_VAR 0 3
45933: EQUAL
45934: IFFALSE 46002
// begin if indexColumn then
45936: LD_VAR 0 4
45940: IFFALSE 45976
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45942: LD_ADDR_VAR 0 5
45946: PUSH
45947: LD_VAR 0 5
45951: PPUSH
45952: LD_VAR 0 1
45956: PUSH
45957: LD_VAR 0 6
45961: ARRAY
45962: PUSH
45963: LD_VAR 0 4
45967: ARRAY
45968: PPUSH
45969: CALL 41014 0 2
45973: ST_TO_ADDR
45974: GO 46002
// result := Join ( result , array [ i ] ) ;
45976: LD_ADDR_VAR 0 5
45980: PUSH
45981: LD_VAR 0 5
45985: PPUSH
45986: LD_VAR 0 1
45990: PUSH
45991: LD_VAR 0 6
45995: ARRAY
45996: PPUSH
45997: CALL 41014 0 2
46001: ST_TO_ADDR
// end ;
46002: GO 45909
46004: POP
46005: POP
// end ;
46006: LD_VAR 0 5
46010: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46011: LD_INT 0
46013: PPUSH
// if not vehicles or not parkingPoint then
46014: LD_VAR 0 1
46018: NOT
46019: IFTRUE 46028
46021: PUSH
46022: LD_VAR 0 2
46026: NOT
46027: OR
46028: IFFALSE 46032
// exit ;
46030: GO 46130
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46032: LD_ADDR_VAR 0 1
46036: PUSH
46037: LD_VAR 0 1
46041: PPUSH
46042: LD_INT 50
46044: PUSH
46045: EMPTY
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 92
46053: PUSH
46054: LD_VAR 0 2
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PUSH
46063: LD_VAR 0 2
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PUSH
46072: LD_INT 8
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 72
46093: ST_TO_ADDR
// if not vehicles then
46094: LD_VAR 0 1
46098: NOT
46099: IFFALSE 46103
// exit ;
46101: GO 46130
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46103: LD_VAR 0 1
46107: PPUSH
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: LD_VAR 0 2
46121: PUSH
46122: LD_INT 2
46124: ARRAY
46125: PPUSH
46126: CALL_OW 111
// end ;
46130: LD_VAR 0 3
46134: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46135: LD_INT 0
46137: PPUSH
46138: PPUSH
46139: PPUSH
// if not side or not area then
46140: LD_VAR 0 1
46144: NOT
46145: IFTRUE 46154
46147: PUSH
46148: LD_VAR 0 2
46152: NOT
46153: OR
46154: IFFALSE 46158
// exit ;
46156: GO 46277
// tmp := AreaToList ( area , 0 ) ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_VAR 0 2
46167: PPUSH
46168: LD_INT 0
46170: PPUSH
46171: CALL_OW 517
46175: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46176: LD_ADDR_VAR 0 4
46180: PUSH
46181: DOUBLE
46182: LD_INT 1
46184: DEC
46185: ST_TO_ADDR
46186: LD_VAR 0 5
46190: PUSH
46191: LD_INT 1
46193: ARRAY
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46275
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46198: LD_VAR 0 5
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: PUSH
46207: LD_VAR 0 4
46211: ARRAY
46212: PPUSH
46213: LD_VAR 0 5
46217: PUSH
46218: LD_INT 2
46220: ARRAY
46221: PUSH
46222: LD_VAR 0 4
46226: ARRAY
46227: PPUSH
46228: CALL_OW 351
46232: IFFALSE 46273
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46234: LD_VAR 0 5
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: PUSH
46243: LD_VAR 0 4
46247: ARRAY
46248: PPUSH
46249: LD_VAR 0 5
46253: PUSH
46254: LD_INT 2
46256: ARRAY
46257: PUSH
46258: LD_VAR 0 4
46262: ARRAY
46263: PPUSH
46264: LD_VAR 0 1
46268: PPUSH
46269: CALL_OW 244
// end ;
46273: GO 46195
46275: POP
46276: POP
// end ;
46277: LD_VAR 0 3
46281: RET
// export function UniqueArray ( array ) ; var i ; begin
46282: LD_INT 0
46284: PPUSH
46285: PPUSH
// result := [ ] ;
46286: LD_ADDR_VAR 0 2
46290: PUSH
46291: EMPTY
46292: ST_TO_ADDR
// if not array then
46293: LD_VAR 0 1
46297: NOT
46298: IFFALSE 46302
// exit ;
46300: GO 46363
// for i := 1 to array do
46302: LD_ADDR_VAR 0 3
46306: PUSH
46307: DOUBLE
46308: LD_INT 1
46310: DEC
46311: ST_TO_ADDR
46312: LD_VAR 0 1
46316: PUSH
46317: FOR_TO
46318: IFFALSE 46361
// if not array [ i ] in result then
46320: LD_VAR 0 1
46324: PUSH
46325: LD_VAR 0 3
46329: ARRAY
46330: PUSH
46331: LD_VAR 0 2
46335: IN
46336: NOT
46337: IFFALSE 46359
// result := Join ( result , i ) ;
46339: LD_ADDR_VAR 0 2
46343: PUSH
46344: LD_VAR 0 2
46348: PPUSH
46349: LD_VAR 0 3
46353: PPUSH
46354: CALL 41014 0 2
46358: ST_TO_ADDR
46359: GO 46317
46361: POP
46362: POP
// end ; end_of_file
46363: LD_VAR 0 2
46367: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46368: LD_INT 0
46370: PPUSH
46371: PPUSH
// disable ( mpActive ) ;
46372: LD_INT 100
46374: DISABLE_MARKED
// disable ( mpWin ) ;
46375: LD_INT 101
46377: DISABLE_MARKED
// disable ( mpLose ) ;
46378: LD_INT 102
46380: DISABLE_MARKED
// mpGameType := 0 ;
46381: LD_ADDR_EXP 1
46385: PUSH
46386: LD_INT 0
46388: ST_TO_ADDR
// mpGameSettings := [ ] ;
46389: LD_ADDR_EXP 4
46393: PUSH
46394: EMPTY
46395: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46396: LD_ADDR_EXP 2
46400: PUSH
46401: EMPTY
46402: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46403: LD_ADDR_EXP 3
46407: PUSH
46408: EMPTY
46409: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46410: LD_ADDR_EXP 27
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46425: LD_ADDR_EXP 10
46429: PUSH
46430: EMPTY
46431: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46432: LD_ADDR_EXP 11
46436: PUSH
46437: EMPTY
46438: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46439: LD_ADDR_EXP 39
46443: PUSH
46444: EMPTY
46445: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46446: LD_ADDR_EXP 40
46450: PUSH
46451: EMPTY
46452: ST_TO_ADDR
// mpDepots := [ ] ;
46453: LD_ADDR_EXP 12
46457: PUSH
46458: EMPTY
46459: ST_TO_ADDR
// mpBuildings := [ ] ;
46460: LD_ADDR_EXP 15
46464: PUSH
46465: EMPTY
46466: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46467: LD_ADDR_EXP 16
46471: PUSH
46472: EMPTY
46473: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46474: LD_ADDR_EXP 17
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46481: LD_ADDR_EXP 18
46485: PUSH
46486: EMPTY
46487: ST_TO_ADDR
// mpStartingResources := [ ] ;
46488: LD_ADDR_EXP 13
46492: PUSH
46493: EMPTY
46494: ST_TO_ADDR
// mpStartPos := [ ] ;
46495: LD_ADDR_EXP 19
46499: PUSH
46500: EMPTY
46501: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46502: LD_ADDR_EXP 20
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46511: LD_ADDR_EXP 21
46515: PUSH
46516: EMPTY
46517: ST_TO_ADDR
// mpApemans := [ ] ;
46518: LD_ADDR_EXP 28
46522: PUSH
46523: EMPTY
46524: ST_TO_ADDR
// mpApemansArea := [ ] ;
46525: LD_ADDR_EXP 29
46529: PUSH
46530: EMPTY
46531: ST_TO_ADDR
// mpRespawn := [ ] ;
46532: LD_ADDR_EXP 31
46536: PUSH
46537: EMPTY
46538: ST_TO_ADDR
// mpKingArea := 0 ;
46539: LD_ADDR_EXP 32
46543: PUSH
46544: LD_INT 0
46546: ST_TO_ADDR
// mpPoints := [ ] ;
46547: LD_ADDR_EXP 33
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// mpVehicles := 0 ;
46554: LD_ADDR_EXP 34
46558: PUSH
46559: LD_INT 0
46561: ST_TO_ADDR
// mpShipments := 0 ;
46562: LD_ADDR_EXP 25
46566: PUSH
46567: LD_INT 0
46569: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46570: LD_ADDR_EXP 38
46574: PUSH
46575: EMPTY
46576: PUSH
46577: EMPTY
46578: PUSH
46579: EMPTY
46580: PUSH
46581: EMPTY
46582: PUSH
46583: EMPTY
46584: PUSH
46585: EMPTY
46586: PUSH
46587: EMPTY
46588: PUSH
46589: EMPTY
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46601: LD_ADDR_EXP 30
46605: PUSH
46606: EMPTY
46607: PUSH
46608: EMPTY
46609: PUSH
46610: EMPTY
46611: PUSH
46612: EMPTY
46613: PUSH
46614: EMPTY
46615: PUSH
46616: EMPTY
46617: PUSH
46618: EMPTY
46619: PUSH
46620: EMPTY
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// mpEmissions := 0 ;
46632: LD_ADDR_EXP 35
46636: PUSH
46637: LD_INT 0
46639: ST_TO_ADDR
// mpTeleports := 0 ;
46640: LD_ADDR_EXP 41
46644: PUSH
46645: LD_INT 0
46647: ST_TO_ADDR
// mpArtifacts := 0 ;
46648: LD_ADDR_EXP 42
46652: PUSH
46653: LD_INT 0
46655: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46656: LD_ADDR_EXP 23
46660: PUSH
46661: LD_INT 3
46663: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46664: LD_ADDR_EXP 22
46668: PUSH
46669: LD_INT 15
46671: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46672: LD_ADDR_EXP 36
46676: PUSH
46677: LD_INT 0
46679: ST_TO_ADDR
// mpGameActive := false ;
46680: LD_ADDR_EXP 37
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
// mpBlockRespThread := false ;
46688: LD_ADDR_EXP 43
46692: PUSH
46693: LD_INT 0
46695: ST_TO_ADDR
// for i := 1 to 32 do
46696: LD_ADDR_VAR 0 2
46700: PUSH
46701: DOUBLE
46702: LD_INT 1
46704: DEC
46705: ST_TO_ADDR
46706: LD_INT 32
46708: PUSH
46709: FOR_TO
46710: IFFALSE 46737
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46712: LD_ADDR_EXP 4
46716: PUSH
46717: LD_EXP 4
46721: PPUSH
46722: LD_VAR 0 2
46726: PPUSH
46727: LD_INT 0
46729: PPUSH
46730: CALL_OW 1
46734: ST_TO_ADDR
46735: GO 46709
46737: POP
46738: POP
// end ;
46739: LD_VAR 0 1
46743: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46744: LD_INT 0
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46760: LD_ADDR_VAR 0 14
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: LD_INT 5
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: ST_TO_ADDR
// for i in gameTypes do
46783: LD_ADDR_VAR 0 2
46787: PUSH
46788: LD_VAR 0 14
46792: PUSH
46793: FOR_IN
46794: IFFALSE 46803
// disable ( i ) ;
46796: LD_VAR 0 2
46800: DISABLE_MARKED
46801: GO 46793
46803: POP
46804: POP
// if Multiplayer then
46805: LD_OWVAR 4
46809: IFFALSE 46993
// begin mpGameType := mp_game_type ;
46811: LD_ADDR_EXP 1
46815: PUSH
46816: LD_OWVAR 6
46820: ST_TO_ADDR
// your_side := mp_player_side ;
46821: LD_ADDR_OWVAR 2
46825: PUSH
46826: LD_OWVAR 7
46830: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46831: LD_ADDR_EXP 5
46835: PUSH
46836: LD_OWVAR 17
46840: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46841: LD_ADDR_EXP 6
46845: PUSH
46846: LD_OWVAR 15
46850: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46851: LD_ADDR_EXP 7
46855: PUSH
46856: LD_OWVAR 16
46860: ST_TO_ADDR
// mpTeams := mp_teams ;
46861: LD_ADDR_EXP 8
46865: PUSH
46866: LD_OWVAR 12
46870: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46871: LD_ADDR_VAR 0 2
46875: PUSH
46876: DOUBLE
46877: LD_INT 1
46879: DEC
46880: ST_TO_ADDR
46881: LD_EXP 2
46885: PPUSH
46886: CALL 5082 0 1
46890: PUSH
46891: FOR_TO
46892: IFFALSE 46968
// begin setting := mpGameSettingsKeys [ i ] ;
46894: LD_ADDR_VAR 0 12
46898: PUSH
46899: LD_EXP 2
46903: PUSH
46904: LD_VAR 0 2
46908: ARRAY
46909: ST_TO_ADDR
// if setting then
46910: LD_VAR 0 12
46914: IFFALSE 46966
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46916: LD_ADDR_EXP 4
46920: PUSH
46921: LD_EXP 4
46925: PPUSH
46926: LD_VAR 0 2
46930: PPUSH
46931: LD_EXP 3
46935: PUSH
46936: LD_VAR 0 2
46940: ARRAY
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: LD_INT 1
46949: MINUS
46950: PPUSH
46951: CALL_OW 426
46955: PUSH
46956: LD_INT 1
46958: PLUS
46959: ARRAY
46960: PPUSH
46961: CALL_OW 1
46965: ST_TO_ADDR
// end ;
46966: GO 46891
46968: POP
46969: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46970: LD_ADDR_EXP 9
46974: PUSH
46975: LD_EXP 6
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: DIFF
46986: PUSH
46987: LD_INT 1
46989: GREATER
46990: ST_TO_ADDR
// end else
46991: GO 46993
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46993: LD_EXP 1
46997: PPUSH
46998: CALL 792 0 1
// if Count ( mpMarkedAreas ) then
47002: LD_EXP 16
47006: PPUSH
47007: CALL 5082 0 1
47011: IFFALSE 47042
// begin for i in mpMarkedAreas do
47013: LD_ADDR_VAR 0 2
47017: PUSH
47018: LD_EXP 16
47022: PUSH
47023: FOR_IN
47024: IFFALSE 47040
// SetAreaMapShow ( i , 0 ) ;
47026: LD_VAR 0 2
47030: PPUSH
47031: LD_INT 0
47033: PPUSH
47034: CALL_OW 424
47038: GO 47023
47040: POP
47041: POP
// end ; for i := 1 to 8 do
47042: LD_ADDR_VAR 0 2
47046: PUSH
47047: DOUBLE
47048: LD_INT 1
47050: DEC
47051: ST_TO_ADDR
47052: LD_INT 8
47054: PUSH
47055: FOR_TO
47056: IFFALSE 48392
// begin if not mpSidePositions [ i ] then
47058: LD_EXP 5
47062: PUSH
47063: LD_VAR 0 2
47067: ARRAY
47068: NOT
47069: IFFALSE 47073
// continue ;
47071: GO 47055
// side := i ;
47073: LD_ADDR_VAR 0 7
47077: PUSH
47078: LD_VAR 0 2
47082: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_EXP 7
47092: PUSH
47093: LD_VAR 0 2
47097: ARRAY
47098: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47099: LD_ADDR_VAR 0 8
47103: PUSH
47104: LD_EXP 5
47108: PUSH
47109: LD_VAR 0 2
47113: ARRAY
47114: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47115: LD_EXP 10
47119: PPUSH
47120: CALL 5082 0 1
47124: IFFALSE 47201
// begin for j in mpOilDeposits [ pos ] do
47126: LD_ADDR_VAR 0 3
47130: PUSH
47131: LD_EXP 10
47135: PUSH
47136: LD_VAR 0 8
47140: ARRAY
47141: PUSH
47142: FOR_IN
47143: IFFALSE 47199
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47145: LD_VAR 0 3
47149: PUSH
47150: LD_INT 1
47152: ARRAY
47153: PPUSH
47154: LD_VAR 0 3
47158: PUSH
47159: LD_INT 2
47161: ARRAY
47162: PPUSH
47163: LD_INT 2
47165: PPUSH
47166: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47170: LD_VAR 0 3
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: PPUSH
47179: LD_VAR 0 3
47183: PUSH
47184: LD_INT 2
47186: ARRAY
47187: PPUSH
47188: LD_VAR 0 7
47192: PPUSH
47193: CALL_OW 441
// end ;
47197: GO 47142
47199: POP
47200: POP
// end ; if Count ( mpSibDeposits ) then
47201: LD_EXP 11
47205: PPUSH
47206: CALL 5082 0 1
47210: IFFALSE 47287
// begin for j in mpSibDeposits [ pos ] do
47212: LD_ADDR_VAR 0 3
47216: PUSH
47217: LD_EXP 11
47221: PUSH
47222: LD_VAR 0 8
47226: ARRAY
47227: PUSH
47228: FOR_IN
47229: IFFALSE 47285
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47231: LD_VAR 0 3
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PPUSH
47240: LD_VAR 0 3
47244: PUSH
47245: LD_INT 2
47247: ARRAY
47248: PPUSH
47249: LD_INT 3
47251: PPUSH
47252: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47256: LD_VAR 0 3
47260: PUSH
47261: LD_INT 1
47263: ARRAY
47264: PPUSH
47265: LD_VAR 0 3
47269: PUSH
47270: LD_INT 2
47272: ARRAY
47273: PPUSH
47274: LD_VAR 0 7
47278: PPUSH
47279: CALL_OW 441
// end ;
47283: GO 47228
47285: POP
47286: POP
// end ; InitBc ;
47287: CALL_OW 21
// InitUc ;
47291: CALL_OW 18
// uc_side := side ;
47295: LD_ADDR_OWVAR 20
47299: PUSH
47300: LD_VAR 0 7
47304: ST_TO_ADDR
// uc_nation := nation ;
47305: LD_ADDR_OWVAR 21
47309: PUSH
47310: LD_VAR 0 9
47314: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47315: LD_EXP 20
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: GREATER
47324: IFFALSE 47483
// begin x := mpStartPos [ pos ] [ 1 ] ;
47326: LD_ADDR_VAR 0 5
47330: PUSH
47331: LD_EXP 19
47335: PUSH
47336: LD_VAR 0 8
47340: ARRAY
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47346: LD_ADDR_VAR 0 6
47350: PUSH
47351: LD_EXP 19
47355: PUSH
47356: LD_VAR 0 8
47360: ARRAY
47361: PUSH
47362: LD_INT 2
47364: ARRAY
47365: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47366: LD_VAR 0 5
47370: PPUSH
47371: LD_VAR 0 6
47375: PPUSH
47376: LD_INT 12
47378: PPUSH
47379: LD_INT 2
47381: PPUSH
47382: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47386: LD_ADDR_EXP 21
47390: PUSH
47391: LD_EXP 21
47395: PPUSH
47396: LD_VAR 0 7
47400: PPUSH
47401: LD_VAR 0 7
47405: PPUSH
47406: LD_VAR 0 5
47410: PPUSH
47411: LD_VAR 0 6
47415: PPUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 100
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 70
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 40
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 10
47448: PUSH
47449: LD_INT 25
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 20
47458: PUSH
47459: LD_INT 100
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: PPUSH
47473: CALL_OW 418
47477: PPUSH
47478: CALL_OW 1
47482: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47483: LD_EXP 12
47487: PPUSH
47488: CALL 5082 0 1
47492: IFFALSE 47676
// begin if mpGameType = GameTypeSurvival then
47494: LD_EXP 1
47498: PUSH
47499: LD_INT 2
47501: EQUAL
47502: IFFALSE 47522
// begin bc_level := 10 ;
47504: LD_ADDR_OWVAR 43
47508: PUSH
47509: LD_INT 10
47511: ST_TO_ADDR
// bc_type := b_warehouse ;
47512: LD_ADDR_OWVAR 42
47516: PUSH
47517: LD_INT 1
47519: ST_TO_ADDR
// end else
47520: GO 47538
// begin bc_level := 0 ;
47522: LD_ADDR_OWVAR 43
47526: PUSH
47527: LD_INT 0
47529: ST_TO_ADDR
// bc_type := b_depot ;
47530: LD_ADDR_OWVAR 42
47534: PUSH
47535: LD_INT 0
47537: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47538: LD_ADDR_VAR 0 4
47542: PUSH
47543: LD_EXP 12
47547: PUSH
47548: LD_VAR 0 8
47552: ARRAY
47553: PUSH
47554: LD_INT 1
47556: ARRAY
47557: PPUSH
47558: LD_EXP 12
47562: PUSH
47563: LD_VAR 0 8
47567: ARRAY
47568: PUSH
47569: LD_INT 2
47571: ARRAY
47572: PPUSH
47573: LD_EXP 12
47577: PUSH
47578: LD_VAR 0 8
47582: ARRAY
47583: PUSH
47584: LD_INT 3
47586: ARRAY
47587: PPUSH
47588: CALL_OW 47
47592: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47593: LD_VAR 0 4
47597: PPUSH
47598: LD_STRING @
47600: PUSH
47601: LD_VAR 0 7
47605: STR
47606: PPUSH
47607: CALL_OW 500
// if Count ( mpStartingResources ) then
47611: LD_EXP 13
47615: PPUSH
47616: CALL 5082 0 1
47620: IFFALSE 47674
// begin for j := 1 to mpStartingResources do
47622: LD_ADDR_VAR 0 3
47626: PUSH
47627: DOUBLE
47628: LD_INT 1
47630: DEC
47631: ST_TO_ADDR
47632: LD_EXP 13
47636: PUSH
47637: FOR_TO
47638: IFFALSE 47672
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47640: LD_VAR 0 4
47644: PPUSH
47645: CALL_OW 274
47649: PPUSH
47650: LD_VAR 0 3
47654: PPUSH
47655: LD_EXP 13
47659: PUSH
47660: LD_VAR 0 3
47664: ARRAY
47665: PPUSH
47666: CALL_OW 277
47670: GO 47637
47672: POP
47673: POP
// end ; end else
47674: GO 47883
// if Count ( mpStartingResources ) then
47676: LD_EXP 13
47680: PPUSH
47681: CALL 5082 0 1
47685: IFFALSE 47883
// begin x := mpStartPos [ pos ] [ 1 ] ;
47687: LD_ADDR_VAR 0 5
47691: PUSH
47692: LD_EXP 19
47696: PUSH
47697: LD_VAR 0 8
47701: ARRAY
47702: PUSH
47703: LD_INT 1
47705: ARRAY
47706: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47707: LD_ADDR_VAR 0 6
47711: PUSH
47712: LD_EXP 19
47716: PUSH
47717: LD_VAR 0 8
47721: ARRAY
47722: PUSH
47723: LD_INT 2
47725: ARRAY
47726: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47727: LD_ADDR_VAR 0 3
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_EXP 13
47741: PUSH
47742: FOR_TO
47743: IFFALSE 47881
// begin resources := mpStartingResources [ j ] ;
47745: LD_ADDR_VAR 0 13
47749: PUSH
47750: LD_EXP 13
47754: PUSH
47755: LD_VAR 0 3
47759: ARRAY
47760: ST_TO_ADDR
// if resources = 0 then
47761: LD_VAR 0 13
47765: PUSH
47766: LD_INT 0
47768: EQUAL
47769: IFFALSE 47773
// continue ;
47771: GO 47742
// repeat if resources >= 50 then
47773: LD_VAR 0 13
47777: PUSH
47778: LD_INT 50
47780: GREATEREQUAL
47781: IFFALSE 47827
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47783: LD_VAR 0 3
47787: PPUSH
47788: LD_INT 5
47790: PPUSH
47791: LD_VAR 0 5
47795: PPUSH
47796: LD_VAR 0 6
47800: PPUSH
47801: LD_INT 6
47803: PPUSH
47804: LD_INT 0
47806: PPUSH
47807: CALL_OW 60
// resources := resources - 50 ;
47811: LD_ADDR_VAR 0 13
47815: PUSH
47816: LD_VAR 0 13
47820: PUSH
47821: LD_INT 50
47823: MINUS
47824: ST_TO_ADDR
// end else
47825: GO 47869
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47827: LD_VAR 0 3
47831: PPUSH
47832: LD_VAR 0 13
47836: PUSH
47837: LD_INT 10
47839: DIV
47840: PPUSH
47841: LD_VAR 0 5
47845: PPUSH
47846: LD_VAR 0 6
47850: PPUSH
47851: LD_INT 6
47853: PPUSH
47854: LD_INT 0
47856: PPUSH
47857: CALL_OW 60
// resources := 0 ;
47861: LD_ADDR_VAR 0 13
47865: PUSH
47866: LD_INT 0
47868: ST_TO_ADDR
// end ; until resources <= 0 ;
47869: LD_VAR 0 13
47873: PUSH
47874: LD_INT 0
47876: LESSEQUAL
47877: IFFALSE 47773
// end ;
47879: GO 47742
47881: POP
47882: POP
// end ; if Count ( mpBuildings ) then
47883: LD_EXP 15
47887: PPUSH
47888: CALL 5082 0 1
47892: IFFALSE 47970
// begin for j in mpBuildings [ pos ] do
47894: LD_ADDR_VAR 0 3
47898: PUSH
47899: LD_EXP 15
47903: PUSH
47904: LD_VAR 0 8
47908: ARRAY
47909: PUSH
47910: FOR_IN
47911: IFFALSE 47968
// begin bc_level := 0 ;
47913: LD_ADDR_OWVAR 43
47917: PUSH
47918: LD_INT 0
47920: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47921: LD_ADDR_OWVAR 42
47925: PUSH
47926: LD_VAR 0 3
47930: PUSH
47931: LD_INT 1
47933: ARRAY
47934: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47935: LD_VAR 0 3
47939: PUSH
47940: LD_INT 2
47942: ARRAY
47943: PPUSH
47944: LD_VAR 0 3
47948: PUSH
47949: LD_INT 3
47951: ARRAY
47952: PPUSH
47953: LD_VAR 0 3
47957: PUSH
47958: LD_INT 4
47960: ARRAY
47961: PPUSH
47962: CALL_OW 47
// end ;
47966: GO 47910
47968: POP
47969: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47970: LD_EXP 24
47974: IFFALSE 47994
47976: PUSH
47977: LD_INT 20
47979: PPUSH
47980: LD_VAR 0 7
47984: PPUSH
47985: CALL_OW 321
47989: PUSH
47990: LD_INT 1
47992: EQUAL
47993: AND
47994: IFFALSE 48011
// SetTech ( tech_SibDet , side , state_researched ) ;
47996: LD_INT 20
47998: PPUSH
47999: LD_VAR 0 7
48003: PPUSH
48004: LD_INT 2
48006: PPUSH
48007: CALL_OW 322
// if not mpArtifacts then
48011: LD_EXP 42
48015: NOT
48016: IFFALSE 48033
// SetTech ( tech_artifact , side , state_disabled ) ;
48018: LD_INT 24
48020: PPUSH
48021: LD_VAR 0 7
48025: PPUSH
48026: LD_INT 0
48028: PPUSH
48029: CALL_OW 322
// if mpSibBomb = 1 then
48033: LD_EXP 26
48037: PUSH
48038: LD_INT 1
48040: EQUAL
48041: IFFALSE 48060
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48043: LD_INT 25
48045: PPUSH
48046: LD_VAR 0 7
48050: PPUSH
48051: LD_INT 1
48053: PPUSH
48054: CALL_OW 322
// end else
48058: GO 48075
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48060: LD_INT 25
48062: PPUSH
48063: LD_VAR 0 7
48067: PPUSH
48068: LD_INT 0
48070: PPUSH
48071: CALL_OW 322
// end ; if mpVehicles then
48075: LD_EXP 34
48079: IFFALSE 48178
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48081: LD_ADDR_VAR 0 3
48085: PUSH
48086: LD_VAR 0 7
48090: PPUSH
48091: LD_VAR 0 9
48095: PPUSH
48096: LD_EXP 34
48100: PPUSH
48101: CALL 49302 0 3
48105: PUSH
48106: FOR_IN
48107: IFFALSE 48176
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48109: LD_VAR 0 3
48113: PPUSH
48114: LD_INT 0
48116: PPUSH
48117: LD_INT 5
48119: PPUSH
48120: CALL_OW 12
48124: PPUSH
48125: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48129: LD_VAR 0 3
48133: PPUSH
48134: LD_EXP 19
48138: PUSH
48139: LD_VAR 0 8
48143: ARRAY
48144: PUSH
48145: LD_INT 1
48147: ARRAY
48148: PPUSH
48149: LD_EXP 19
48153: PUSH
48154: LD_VAR 0 8
48158: ARRAY
48159: PUSH
48160: LD_INT 2
48162: ARRAY
48163: PPUSH
48164: LD_INT 12
48166: PPUSH
48167: LD_INT 0
48169: PPUSH
48170: CALL_OW 50
// end ;
48174: GO 48106
48176: POP
48177: POP
// end ; uc_nation := nation ;
48178: LD_ADDR_OWVAR 21
48182: PUSH
48183: LD_VAR 0 9
48187: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48188: LD_ADDR_VAR 0 11
48192: PUSH
48193: LD_VAR 0 7
48197: PPUSH
48198: LD_VAR 0 9
48202: PPUSH
48203: LD_EXP 22
48207: PPUSH
48208: LD_EXP 23
48212: PPUSH
48213: CALL 48804 0 4
48217: ST_TO_ADDR
// for j in team do
48218: LD_ADDR_VAR 0 3
48222: PUSH
48223: LD_VAR 0 11
48227: PUSH
48228: FOR_IN
48229: IFFALSE 48278
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48231: LD_VAR 0 3
48235: PPUSH
48236: LD_EXP 19
48240: PUSH
48241: LD_VAR 0 8
48245: ARRAY
48246: PUSH
48247: LD_INT 1
48249: ARRAY
48250: PPUSH
48251: LD_EXP 19
48255: PUSH
48256: LD_VAR 0 8
48260: ARRAY
48261: PUSH
48262: LD_INT 2
48264: ARRAY
48265: PPUSH
48266: LD_INT 12
48268: PPUSH
48269: LD_INT 0
48271: PPUSH
48272: CALL_OW 50
48276: GO 48228
48278: POP
48279: POP
// if mpApemans then
48280: LD_EXP 28
48284: IFFALSE 48390
// begin for j := 1 to mpApemans do
48286: LD_ADDR_VAR 0 3
48290: PUSH
48291: DOUBLE
48292: LD_INT 1
48294: DEC
48295: ST_TO_ADDR
48296: LD_EXP 28
48300: PUSH
48301: FOR_TO
48302: IFFALSE 48388
// begin PrepareApeman ( - 5 ) ;
48304: LD_INT 5
48306: NEG
48307: PPUSH
48308: CALL 37141 0 1
// ape := CreateHuman ;
48312: LD_ADDR_VAR 0 10
48316: PUSH
48317: CALL_OW 44
48321: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48322: LD_ADDR_EXP 30
48326: PUSH
48327: LD_EXP 30
48331: PPUSH
48332: LD_VAR 0 8
48336: PPUSH
48337: LD_EXP 30
48341: PUSH
48342: LD_VAR 0 8
48346: ARRAY
48347: PPUSH
48348: LD_VAR 0 10
48352: PPUSH
48353: CALL 41014 0 2
48357: PPUSH
48358: CALL_OW 1
48362: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48363: LD_VAR 0 10
48367: PPUSH
48368: LD_EXP 29
48372: PUSH
48373: LD_VAR 0 8
48377: ARRAY
48378: PPUSH
48379: LD_INT 0
48381: PPUSH
48382: CALL_OW 49
// end ;
48386: GO 48301
48388: POP
48389: POP
// end ; end ;
48390: GO 47055
48392: POP
48393: POP
// if not mpTeamGame then
48394: LD_EXP 9
48398: NOT
48399: IFFALSE 48497
// begin for i := 1 to 8 do
48401: LD_ADDR_VAR 0 2
48405: PUSH
48406: DOUBLE
48407: LD_INT 1
48409: DEC
48410: ST_TO_ADDR
48411: LD_INT 8
48413: PUSH
48414: FOR_TO
48415: IFFALSE 48493
// for j := 1 to 8 do
48417: LD_ADDR_VAR 0 3
48421: PUSH
48422: DOUBLE
48423: LD_INT 1
48425: DEC
48426: ST_TO_ADDR
48427: LD_INT 8
48429: PUSH
48430: FOR_TO
48431: IFFALSE 48489
// if i <> j then
48433: LD_VAR 0 2
48437: PUSH
48438: LD_VAR 0 3
48442: NONEQUAL
48443: IFFALSE 48467
// SetAttitude ( i , j , att_neutral , true ) else
48445: LD_VAR 0 2
48449: PPUSH
48450: LD_VAR 0 3
48454: PPUSH
48455: LD_INT 0
48457: PPUSH
48458: LD_INT 1
48460: PPUSH
48461: CALL_OW 80
48465: GO 48487
// SetAttitude ( i , j , att_friend , true ) ;
48467: LD_VAR 0 2
48471: PPUSH
48472: LD_VAR 0 3
48476: PPUSH
48477: LD_INT 1
48479: PPUSH
48480: LD_INT 1
48482: PPUSH
48483: CALL_OW 80
48487: GO 48430
48489: POP
48490: POP
48491: GO 48414
48493: POP
48494: POP
// end else
48495: GO 48672
// begin if mpSharedVision then
48497: LD_EXP 14
48501: IFFALSE 48566
// begin for i in mpTeams do
48503: LD_ADDR_VAR 0 2
48507: PUSH
48508: LD_EXP 8
48512: PUSH
48513: FOR_IN
48514: IFFALSE 48564
// for j := 2 to i do
48516: LD_ADDR_VAR 0 3
48520: PUSH
48521: DOUBLE
48522: LD_INT 2
48524: DEC
48525: ST_TO_ADDR
48526: LD_VAR 0 2
48530: PUSH
48531: FOR_TO
48532: IFFALSE 48560
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48534: LD_VAR 0 2
48538: PUSH
48539: LD_VAR 0 3
48543: ARRAY
48544: PPUSH
48545: LD_VAR 0 2
48549: PUSH
48550: LD_INT 1
48552: ARRAY
48553: PPUSH
48554: CALL_OW 343
48558: GO 48531
48560: POP
48561: POP
48562: GO 48513
48564: POP
48565: POP
// end ; for i := 1 to 8 do
48566: LD_ADDR_VAR 0 2
48570: PUSH
48571: DOUBLE
48572: LD_INT 1
48574: DEC
48575: ST_TO_ADDR
48576: LD_INT 8
48578: PUSH
48579: FOR_TO
48580: IFFALSE 48670
// for j := 1 to 8 do
48582: LD_ADDR_VAR 0 3
48586: PUSH
48587: DOUBLE
48588: LD_INT 1
48590: DEC
48591: ST_TO_ADDR
48592: LD_INT 8
48594: PUSH
48595: FOR_TO
48596: IFFALSE 48666
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48598: LD_EXP 6
48602: PUSH
48603: LD_VAR 0 2
48607: ARRAY
48608: PUSH
48609: LD_EXP 6
48613: PUSH
48614: LD_VAR 0 3
48618: ARRAY
48619: EQUAL
48620: IFFALSE 48644
// SetAttitude ( i , j , att_friend , true ) else
48622: LD_VAR 0 2
48626: PPUSH
48627: LD_VAR 0 3
48631: PPUSH
48632: LD_INT 1
48634: PPUSH
48635: LD_INT 1
48637: PPUSH
48638: CALL_OW 80
48642: GO 48664
// SetAttitude ( i , j , att_enemy , true ) ;
48644: LD_VAR 0 2
48648: PPUSH
48649: LD_VAR 0 3
48653: PPUSH
48654: LD_INT 2
48656: PPUSH
48657: LD_INT 1
48659: PPUSH
48660: CALL_OW 80
48664: GO 48595
48666: POP
48667: POP
48668: GO 48579
48670: POP
48671: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48672: LD_ADDR_OWVAR 71
48676: PUSH
48677: LD_EXP 7
48681: PUSH
48682: LD_OWVAR 2
48686: ARRAY
48687: ST_TO_ADDR
// if IAmSpec then
48688: CALL_OW 531
48692: IFFALSE 48733
// begin FogOff ( true ) ;
48694: LD_INT 1
48696: PPUSH
48697: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48701: LD_EXP 27
48705: PUSH
48706: LD_INT 1
48708: ARRAY
48709: PUSH
48710: LD_INT 2
48712: DIV
48713: PPUSH
48714: LD_EXP 27
48718: PUSH
48719: LD_INT 2
48721: ARRAY
48722: PUSH
48723: LD_INT 2
48725: DIV
48726: PPUSH
48727: CALL_OW 86
// end else
48731: GO 48779
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48733: LD_EXP 19
48737: PUSH
48738: LD_EXP 5
48742: PUSH
48743: LD_OWVAR 2
48747: ARRAY
48748: ARRAY
48749: PUSH
48750: LD_INT 1
48752: ARRAY
48753: PPUSH
48754: LD_EXP 19
48758: PUSH
48759: LD_EXP 5
48763: PUSH
48764: LD_OWVAR 2
48768: ARRAY
48769: ARRAY
48770: PUSH
48771: LD_INT 2
48773: ARRAY
48774: PPUSH
48775: CALL_OW 86
// end ; BeginBuildUp ;
48779: CALL 49835 0 0
// enable ( mpActive ) ;
48783: LD_INT 100
48785: ENABLE_MARKED
// enable ( mpGameType ) ;
48786: LD_EXP 1
48790: ENABLE_MARKED
// mpGameActive := true ;
48791: LD_ADDR_EXP 37
48795: PUSH
48796: LD_INT 1
48798: ST_TO_ADDR
// end ;
48799: LD_VAR 0 1
48803: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48804: LD_INT 0
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
// result := [ ] ;
48810: LD_ADDR_VAR 0 5
48814: PUSH
48815: EMPTY
48816: ST_TO_ADDR
// class := class_soldier ;
48817: LD_ADDR_VAR 0 8
48821: PUSH
48822: LD_INT 1
48824: ST_TO_ADDR
// uc_side := side ;
48825: LD_ADDR_OWVAR 20
48829: PUSH
48830: LD_VAR 0 1
48834: ST_TO_ADDR
// uc_nation := nation ;
48835: LD_ADDR_OWVAR 21
48839: PUSH
48840: LD_VAR 0 2
48844: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48845: LD_ADDR_OWVAR 26
48849: PUSH
48850: LD_OWVAR 19
48854: PUSH
48855: LD_VAR 0 1
48859: ARRAY
48860: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48861: LD_INT 1
48863: PPUSH
48864: LD_INT 2
48866: PPUSH
48867: CALL_OW 12
48871: PPUSH
48872: LD_VAR 0 8
48876: PPUSH
48877: LD_VAR 0 4
48881: PUSH
48882: LD_INT 2
48884: PLUS
48885: PPUSH
48886: CALL_OW 380
// hc_importance := 105 ;
48890: LD_ADDR_OWVAR 32
48894: PUSH
48895: LD_INT 105
48897: ST_TO_ADDR
// if Multiplayer then
48898: LD_OWVAR 4
48902: IFFALSE 48942
// begin hc_gallery := MULTIAVATARS ;
48904: LD_ADDR_OWVAR 33
48908: PUSH
48909: LD_STRING MULTIAVATARS
48911: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48912: LD_ADDR_OWVAR 34
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: CALL_OW 525
48926: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48927: LD_ADDR_OWVAR 27
48931: PUSH
48932: LD_VAR 0 1
48936: PPUSH
48937: CALL_OW 526
48941: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48942: LD_ADDR_VAR 0 5
48946: PUSH
48947: LD_VAR 0 5
48951: PPUSH
48952: CALL_OW 44
48956: PPUSH
48957: CALL 41014 0 2
48961: ST_TO_ADDR
// if mpTeamPreset then
48962: LD_LOC 1
48966: IFFALSE 49062
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48968: LD_LOC 1
48972: PUSH
48973: LD_INT 1
48975: ARRAY
48976: PPUSH
48977: LD_VAR 0 5
48981: PUSH
48982: LD_VAR 0 5
48986: ARRAY
48987: PPUSH
48988: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48992: LD_VAR 0 5
48996: PUSH
48997: LD_VAR 0 5
49001: ARRAY
49002: PPUSH
49003: LD_INT 1
49005: PPUSH
49006: LD_LOC 1
49010: PUSH
49011: LD_INT 1
49013: ARRAY
49014: PPUSH
49015: LD_INT 1
49017: PPUSH
49018: CALL_OW 260
49022: PPUSH
49023: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49027: LD_VAR 0 5
49031: PUSH
49032: LD_VAR 0 5
49036: ARRAY
49037: PPUSH
49038: LD_INT 2
49040: PPUSH
49041: LD_LOC 1
49045: PUSH
49046: LD_INT 1
49048: ARRAY
49049: PPUSH
49050: LD_INT 2
49052: PPUSH
49053: CALL_OW 260
49057: PPUSH
49058: CALL_OW 239
// end ; InitHc_All ( ) ;
49062: CALL_OW 584
// class := 2 ;
49066: LD_ADDR_VAR 0 8
49070: PUSH
49071: LD_INT 2
49073: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49074: LD_ADDR_VAR 0 6
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_VAR 0 3
49088: PUSH
49089: LD_INT 1
49091: MINUS
49092: PUSH
49093: FOR_TO
49094: IFFALSE 49278
// begin PrepareHuman ( false , class , skill ) ;
49096: LD_INT 0
49098: PPUSH
49099: LD_VAR 0 8
49103: PPUSH
49104: LD_VAR 0 4
49108: PPUSH
49109: CALL_OW 380
// un := CreateHuman ;
49113: LD_ADDR_VAR 0 7
49117: PUSH
49118: CALL_OW 44
49122: ST_TO_ADDR
// result := Join ( result , un ) ;
49123: LD_ADDR_VAR 0 5
49127: PUSH
49128: LD_VAR 0 5
49132: PPUSH
49133: LD_VAR 0 7
49137: PPUSH
49138: CALL 41014 0 2
49142: ST_TO_ADDR
// if mpTeamPreset then
49143: LD_LOC 1
49147: IFFALSE 49243
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49149: LD_LOC 1
49153: PUSH
49154: LD_VAR 0 6
49158: PUSH
49159: LD_INT 1
49161: PLUS
49162: ARRAY
49163: PPUSH
49164: LD_VAR 0 7
49168: PPUSH
49169: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49173: LD_VAR 0 7
49177: PPUSH
49178: LD_INT 1
49180: PPUSH
49181: LD_LOC 1
49185: PUSH
49186: LD_VAR 0 6
49190: PUSH
49191: LD_INT 1
49193: PLUS
49194: ARRAY
49195: PPUSH
49196: LD_INT 1
49198: PPUSH
49199: CALL_OW 260
49203: PPUSH
49204: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49208: LD_VAR 0 7
49212: PPUSH
49213: LD_INT 2
49215: PPUSH
49216: LD_LOC 1
49220: PUSH
49221: LD_VAR 0 6
49225: PUSH
49226: LD_INT 1
49228: PLUS
49229: ARRAY
49230: PPUSH
49231: LD_INT 2
49233: PPUSH
49234: CALL_OW 260
49238: PPUSH
49239: CALL_OW 239
// end ; class := Inc ( class ) ;
49243: LD_ADDR_VAR 0 8
49247: PUSH
49248: LD_VAR 0 8
49252: PPUSH
49253: CALL 42387 0 1
49257: ST_TO_ADDR
// if class = 5 then
49258: LD_VAR 0 8
49262: PUSH
49263: LD_INT 5
49265: EQUAL
49266: IFFALSE 49276
// class := 1 ;
49268: LD_ADDR_VAR 0 8
49272: PUSH
49273: LD_INT 1
49275: ST_TO_ADDR
// end ;
49276: GO 49093
49278: POP
49279: POP
// if not mpTeamPreset then
49280: LD_LOC 1
49284: NOT
49285: IFFALSE 49297
// mpTeamPreset := result ;
49287: LD_ADDR_LOC 1
49291: PUSH
49292: LD_VAR 0 5
49296: ST_TO_ADDR
// end ;
49297: LD_VAR 0 5
49301: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49302: LD_INT 0
49304: PPUSH
49305: PPUSH
// result := [ ] ;
49306: LD_ADDR_VAR 0 4
49310: PUSH
49311: EMPTY
49312: ST_TO_ADDR
// if not vehicles then
49313: LD_VAR 0 3
49317: NOT
49318: IFFALSE 49322
// exit ;
49320: GO 49536
// for i := 1 to vehicles [ nation ] do
49322: LD_ADDR_VAR 0 5
49326: PUSH
49327: DOUBLE
49328: LD_INT 1
49330: DEC
49331: ST_TO_ADDR
49332: LD_VAR 0 3
49336: PUSH
49337: LD_VAR 0 2
49341: ARRAY
49342: PUSH
49343: FOR_TO
49344: IFFALSE 49534
// begin uc_side := side ;
49346: LD_ADDR_OWVAR 20
49350: PUSH
49351: LD_VAR 0 1
49355: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49356: LD_VAR 0 3
49360: PUSH
49361: LD_VAR 0 2
49365: ARRAY
49366: PUSH
49367: LD_VAR 0 5
49371: ARRAY
49372: PPUSH
49373: CALL 5082 0 1
49377: PUSH
49378: LD_INT 4
49380: GREATER
49381: IFFALSE 49411
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49383: LD_ADDR_OWVAR 21
49387: PUSH
49388: LD_VAR 0 3
49392: PUSH
49393: LD_VAR 0 2
49397: ARRAY
49398: PUSH
49399: LD_VAR 0 5
49403: ARRAY
49404: PUSH
49405: LD_INT 5
49407: ARRAY
49408: ST_TO_ADDR
49409: GO 49421
// uc_nation := nation ;
49411: LD_ADDR_OWVAR 21
49415: PUSH
49416: LD_VAR 0 2
49420: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49421: LD_VAR 0 3
49425: PUSH
49426: LD_VAR 0 2
49430: ARRAY
49431: PUSH
49432: LD_VAR 0 5
49436: ARRAY
49437: PUSH
49438: LD_INT 1
49440: ARRAY
49441: PPUSH
49442: LD_VAR 0 3
49446: PUSH
49447: LD_VAR 0 2
49451: ARRAY
49452: PUSH
49453: LD_VAR 0 5
49457: ARRAY
49458: PUSH
49459: LD_INT 2
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 3
49467: PUSH
49468: LD_VAR 0 2
49472: ARRAY
49473: PUSH
49474: LD_VAR 0 5
49478: ARRAY
49479: PUSH
49480: LD_INT 3
49482: ARRAY
49483: PPUSH
49484: LD_VAR 0 3
49488: PUSH
49489: LD_VAR 0 2
49493: ARRAY
49494: PUSH
49495: LD_VAR 0 5
49499: ARRAY
49500: PUSH
49501: LD_INT 4
49503: ARRAY
49504: PPUSH
49505: LD_INT 80
49507: PPUSH
49508: CALL 7844 0 5
// result := Join ( result , CreateVehicle ) ;
49512: LD_ADDR_VAR 0 4
49516: PUSH
49517: LD_VAR 0 4
49521: PPUSH
49522: CALL_OW 45
49526: PPUSH
49527: CALL 41014 0 2
49531: ST_TO_ADDR
// end ;
49532: GO 49343
49534: POP
49535: POP
// end ;
49536: LD_VAR 0 4
49540: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49541: LD_INT 0
49543: PPUSH
49544: PPUSH
// for i in mpBattleFlags do
49545: LD_ADDR_VAR 0 3
49549: PUSH
49550: LD_EXP 21
49554: PUSH
49555: FOR_IN
49556: IFFALSE 49633
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49558: LD_VAR 0 3
49562: PPUSH
49563: LD_INT 1
49565: PUSH
49566: LD_VAR 0 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_VAR 0 1
49582: PUSH
49583: LD_REAL  7.00000000000000E-0001
49586: MUL
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: LD_VAR 0 1
49599: PUSH
49600: LD_REAL  4.00000000000000E-0001
49603: MUL
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 20
49611: PUSH
49612: LD_VAR 0 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: PPUSH
49627: CALL_OW 423
49631: GO 49555
49633: POP
49634: POP
// end ;
49635: LD_VAR 0 2
49639: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49640: LD_INT 100
49642: IFFALSE 49737
49644: GO 49646
49646: DISABLE
49647: LD_INT 0
49649: PPUSH
49650: PPUSH
// begin if mpBattleFlag <= 0 then
49651: LD_EXP 20
49655: PUSH
49656: LD_INT 0
49658: LESSEQUAL
49659: IFFALSE 49663
// exit ;
49661: GO 49737
// strength := 100 ;
49663: LD_ADDR_VAR 0 2
49667: PUSH
49668: LD_INT 100
49670: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49671: LD_EXP 20
49675: PPUSH
49676: CALL_OW 67
// strength := Dec ( strength ) ;
49680: LD_ADDR_VAR 0 2
49684: PUSH
49685: LD_VAR 0 2
49689: PPUSH
49690: CALL 42409 0 1
49694: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49695: LD_VAR 0 2
49699: PPUSH
49700: CALL 49541 0 1
// until not strength ;
49704: LD_VAR 0 2
49708: NOT
49709: IFFALSE 49671
// for i in mpBattleFlags do
49711: LD_ADDR_VAR 0 1
49715: PUSH
49716: LD_EXP 21
49720: PUSH
49721: FOR_IN
49722: IFFALSE 49735
// KillBattleFlag ( i ) ;
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 419
49733: GO 49721
49735: POP
49736: POP
// end ;
49737: PPOPN 2
49739: END
// every 0 0$1 marked mpActive do var side , tmp ;
49740: GO 49742
49742: DISABLE
49743: LD_INT 0
49745: PPUSH
49746: PPUSH
// begin if mpSibBomb <= 1 then
49747: LD_EXP 26
49751: PUSH
49752: LD_INT 1
49754: LESSEQUAL
49755: IFFALSE 49759
// exit ;
49757: GO 49832
// tmp := mpSibBomb ;
49759: LD_ADDR_VAR 0 2
49763: PUSH
49764: LD_EXP 26
49768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49769: LD_INT 35
49771: PPUSH
49772: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49776: LD_ADDR_VAR 0 2
49780: PUSH
49781: LD_VAR 0 2
49785: PUSH
49786: LD_INT 35
49788: MINUS
49789: ST_TO_ADDR
// until not tmp ;
49790: LD_VAR 0 2
49794: NOT
49795: IFFALSE 49769
// for side := 1 to 8 do
49797: LD_ADDR_VAR 0 1
49801: PUSH
49802: DOUBLE
49803: LD_INT 1
49805: DEC
49806: ST_TO_ADDR
49807: LD_INT 8
49809: PUSH
49810: FOR_TO
49811: IFFALSE 49830
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49813: LD_INT 25
49815: PPUSH
49816: LD_VAR 0 1
49820: PPUSH
49821: LD_INT 1
49823: PPUSH
49824: CALL_OW 322
49828: GO 49810
49830: POP
49831: POP
// end ;
49832: PPOPN 2
49834: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49835: LD_INT 0
49837: PPUSH
49838: PPUSH
49839: PPUSH
// mpBuildUpTimeDelay := 0 ;
49840: LD_ADDR_EXP 44
49844: PUSH
49845: LD_INT 0
49847: ST_TO_ADDR
// if not mpBuildUpTime then
49848: LD_EXP 18
49852: NOT
49853: IFFALSE 49857
// exit ;
49855: GO 50046
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49857: LD_ADDR_EXP 44
49861: PUSH
49862: LD_INT 8400
49864: PUSH
49865: LD_INT 2100
49867: PUSH
49868: LD_EXP 18
49872: MUL
49873: PLUS
49874: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49875: LD_ADDR_EXP 45
49879: PUSH
49880: LD_INT 1
49882: ST_TO_ADDR
// for i := 1 to 8 do
49883: LD_ADDR_VAR 0 2
49887: PUSH
49888: DOUBLE
49889: LD_INT 1
49891: DEC
49892: ST_TO_ADDR
49893: LD_INT 8
49895: PUSH
49896: FOR_TO
49897: IFFALSE 50044
// if mpSidePositions [ i ] then
49899: LD_EXP 5
49903: PUSH
49904: LD_VAR 0 2
49908: ARRAY
49909: IFFALSE 50042
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49911: LD_EXP 17
49915: PUSH
49916: LD_EXP 5
49920: PUSH
49921: LD_VAR 0 2
49925: ARRAY
49926: ARRAY
49927: PPUSH
49928: LD_INT 5
49930: PPUSH
49931: CALL_OW 424
// for j := 1 to 8 do
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: DOUBLE
49941: LD_INT 1
49943: DEC
49944: ST_TO_ADDR
49945: LD_INT 8
49947: PUSH
49948: FOR_TO
49949: IFFALSE 50040
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49951: LD_EXP 5
49955: PUSH
49956: LD_VAR 0 3
49960: ARRAY
49961: IFFALSE 50010
49963: PUSH
49964: LD_EXP 6
49968: PUSH
49969: LD_VAR 0 2
49973: ARRAY
49974: PUSH
49975: LD_EXP 6
49979: PUSH
49980: LD_VAR 0 3
49984: ARRAY
49985: NONEQUAL
49986: IFTRUE 50009
49988: PUSH
49989: LD_EXP 9
49993: NOT
49994: IFFALSE 50008
49996: PUSH
49997: LD_VAR 0 2
50001: PUSH
50002: LD_VAR 0 3
50006: NONEQUAL
50007: AND
50008: OR
50009: AND
50010: IFFALSE 50038
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50012: LD_VAR 0 3
50016: PPUSH
50017: LD_EXP 17
50021: PUSH
50022: LD_EXP 5
50026: PUSH
50027: LD_VAR 0 2
50031: ARRAY
50032: ARRAY
50033: PPUSH
50034: CALL_OW 333
50038: GO 49948
50040: POP
50041: POP
// end ;
50042: GO 49896
50044: POP
50045: POP
// end ;
50046: LD_VAR 0 1
50050: RET
// function EndBuildUp ; var i , j ; begin
50051: LD_INT 0
50053: PPUSH
50054: PPUSH
50055: PPUSH
// mpBuildUpTimeActive := false ;
50056: LD_ADDR_EXP 45
50060: PUSH
50061: LD_INT 0
50063: ST_TO_ADDR
// for i := 1 to 8 do
50064: LD_ADDR_VAR 0 2
50068: PUSH
50069: DOUBLE
50070: LD_INT 1
50072: DEC
50073: ST_TO_ADDR
50074: LD_INT 8
50076: PUSH
50077: FOR_TO
50078: IFFALSE 50225
// if mpSidePositions [ i ] then
50080: LD_EXP 5
50084: PUSH
50085: LD_VAR 0 2
50089: ARRAY
50090: IFFALSE 50223
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50092: LD_EXP 17
50096: PUSH
50097: LD_EXP 5
50101: PUSH
50102: LD_VAR 0 2
50106: ARRAY
50107: ARRAY
50108: PPUSH
50109: LD_INT 0
50111: PPUSH
50112: CALL_OW 424
// for j := 1 to 8 do
50116: LD_ADDR_VAR 0 3
50120: PUSH
50121: DOUBLE
50122: LD_INT 1
50124: DEC
50125: ST_TO_ADDR
50126: LD_INT 8
50128: PUSH
50129: FOR_TO
50130: IFFALSE 50221
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50132: LD_EXP 5
50136: PUSH
50137: LD_VAR 0 3
50141: ARRAY
50142: IFFALSE 50191
50144: PUSH
50145: LD_EXP 6
50149: PUSH
50150: LD_VAR 0 2
50154: ARRAY
50155: PUSH
50156: LD_EXP 6
50160: PUSH
50161: LD_VAR 0 3
50165: ARRAY
50166: NONEQUAL
50167: IFTRUE 50190
50169: PUSH
50170: LD_EXP 9
50174: NOT
50175: IFFALSE 50189
50177: PUSH
50178: LD_VAR 0 2
50182: PUSH
50183: LD_VAR 0 3
50187: NONEQUAL
50188: AND
50189: OR
50190: AND
50191: IFFALSE 50219
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50193: LD_VAR 0 3
50197: PPUSH
50198: LD_EXP 17
50202: PUSH
50203: LD_EXP 5
50207: PUSH
50208: LD_VAR 0 2
50212: ARRAY
50213: ARRAY
50214: PPUSH
50215: CALL_OW 334
50219: GO 50129
50221: POP
50222: POP
// end ;
50223: GO 50077
50225: POP
50226: POP
// end ;
50227: LD_VAR 0 1
50231: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50232: LD_EXP 45
50236: IFFALSE 50415
50238: GO 50240
50240: DISABLE
50241: LD_INT 0
50243: PPUSH
50244: PPUSH
// begin for i := 1 to 8 do
50245: LD_ADDR_VAR 0 1
50249: PUSH
50250: DOUBLE
50251: LD_INT 1
50253: DEC
50254: ST_TO_ADDR
50255: LD_INT 8
50257: PUSH
50258: FOR_TO
50259: IFFALSE 50412
// if mpSidePositions [ i ] then
50261: LD_EXP 5
50265: PUSH
50266: LD_VAR 0 1
50270: ARRAY
50271: IFFALSE 50410
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50273: LD_ADDR_VAR 0 2
50277: PUSH
50278: LD_EXP 17
50282: PUSH
50283: LD_EXP 5
50287: PUSH
50288: LD_VAR 0 1
50292: ARRAY
50293: ARRAY
50294: PPUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 21
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 21
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 22
50325: PUSH
50326: LD_OWVAR 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PPUSH
50339: CALL_OW 70
50343: PUSH
50344: FOR_IN
50345: IFFALSE 50408
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50347: LD_EXP 6
50351: PUSH
50352: LD_VAR 0 1
50356: ARRAY
50357: PUSH
50358: LD_EXP 6
50362: PUSH
50363: LD_OWVAR 2
50367: ARRAY
50368: NONEQUAL
50369: IFTRUE 50392
50371: PUSH
50372: LD_EXP 9
50376: NOT
50377: IFFALSE 50391
50379: PUSH
50380: LD_VAR 0 1
50384: PUSH
50385: LD_OWVAR 2
50389: NONEQUAL
50390: AND
50391: OR
50392: IFFALSE 50406
// ComMoveToArea ( un , BuildUpEscape ) ;
50394: LD_VAR 0 2
50398: PPUSH
50399: LD_INT 17
50401: PPUSH
50402: CALL_OW 113
50406: GO 50344
50408: POP
50409: POP
50410: GO 50258
50412: POP
50413: POP
// enable ;
50414: ENABLE
// end ;
50415: PPOPN 2
50417: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50418: LD_EXP 18
50422: IFFALSE 50472
50424: GO 50426
50426: DISABLE
50427: LD_INT 0
50429: PPUSH
// begin tmp := mpBuildUpTime ;
50430: LD_ADDR_VAR 0 1
50434: PUSH
50435: LD_EXP 18
50439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50440: LD_INT 35
50442: PPUSH
50443: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50447: LD_ADDR_VAR 0 1
50451: PUSH
50452: LD_VAR 0 1
50456: PUSH
50457: LD_INT 35
50459: MINUS
50460: ST_TO_ADDR
// until not tmp ;
50461: LD_VAR 0 1
50465: NOT
50466: IFFALSE 50440
// EndBuildUp ;
50468: CALL 50051 0 0
// end ;
50472: PPOPN 1
50474: END
// every 0 0$1 trigger mpActive marked mpWin do
50475: LD_INT 100
50477: IFFALSE 50511
50479: GO 50481
50481: DISABLE
// begin if IAmServer then
50482: CALL_OW 518
50486: IFFALSE 50495
// wait ( 0 0$3 ) ;
50488: LD_INT 105
50490: PPUSH
50491: CALL_OW 67
// if Multiplayer then
50495: LD_OWVAR 4
50499: IFFALSE 50507
// YouWinInMultiplayer else
50501: CALL_OW 106
50505: GO 50511
// YouWin ;
50507: CALL_OW 103
// end ;
50511: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50512: LD_INT 0
50514: PPUSH
// result := false ;
50515: LD_ADDR_VAR 0 3
50519: PUSH
50520: LD_INT 0
50522: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50523: LD_VAR 0 1
50527: PUSH
50528: LD_INT 1
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50542
50534: LD_INT 5
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50542
50540: GO 50615
50542: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50543: LD_ADDR_VAR 0 3
50547: PUSH
50548: LD_INT 22
50550: PUSH
50551: LD_VAR 0 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 21
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 33
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 33
50585: PUSH
50586: LD_INT 5
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PPUSH
50603: CALL_OW 69
50607: PPUSH
50608: CALL 5082 0 1
50612: ST_TO_ADDR
// end ; GameTypeSurvival :
50613: GO 50854
50615: LD_INT 2
50617: DOUBLE
50618: EQUAL
50619: IFTRUE 50623
50621: GO 50753
50623: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50624: LD_ADDR_VAR 0 3
50628: PUSH
50629: LD_INT 22
50631: PUSH
50632: LD_VAR 0 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 30
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 30
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PPUSH
50673: CALL_OW 69
50677: PPUSH
50678: CALL 5082 0 1
50682: IFFALSE 50750
50684: PUSH
50685: LD_INT 22
50687: PUSH
50688: LD_VAR 0 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 21
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 33
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 33
50722: PUSH
50723: LD_INT 5
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PPUSH
50740: CALL_OW 69
50744: PPUSH
50745: CALL 5082 0 1
50749: AND
50750: ST_TO_ADDR
// end ; GameTypeKing :
50751: GO 50854
50753: LD_INT 3
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50853
50761: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50762: LD_ADDR_VAR 0 3
50766: PUSH
50767: LD_INT 22
50769: PUSH
50770: LD_VAR 0 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 21
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 33
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 33
50804: PUSH
50805: LD_INT 5
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PPUSH
50822: CALL_OW 69
50826: PPUSH
50827: CALL 5082 0 1
50831: IFFALSE 50850
50833: PUSH
50834: LD_VAR 0 2
50838: PPUSH
50839: CALL 54707 0 1
50843: PUSH
50844: LD_EXP 33
50848: LESS
50849: AND
50850: ST_TO_ADDR
// end ; end ;
50851: GO 50854
50853: POP
// end ;
50854: LD_VAR 0 3
50858: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50859: LD_INT 100
50861: IFFALSE 51091
50863: GO 50865
50865: DISABLE
50866: LD_INT 0
50868: PPUSH
50869: PPUSH
// begin if Multiplayer then
50870: LD_OWVAR 4
50874: IFFALSE 50882
// SetPlayerSpectator ( ) else
50876: CALL_OW 572
50880: GO 50891
// FogOff ( your_side ) ;
50882: LD_OWVAR 2
50886: PPUSH
50887: CALL_OW 344
// repeat gameIsOn := false ;
50891: LD_ADDR_VAR 0 1
50895: PUSH
50896: LD_INT 0
50898: ST_TO_ADDR
// for i := 1 to 8 do
50899: LD_ADDR_VAR 0 2
50903: PUSH
50904: DOUBLE
50905: LD_INT 1
50907: DEC
50908: ST_TO_ADDR
50909: LD_INT 8
50911: PUSH
50912: FOR_TO
50913: IFFALSE 51043
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50915: LD_EXP 5
50919: PUSH
50920: LD_VAR 0 2
50924: ARRAY
50925: IFFALSE 50938
50927: PUSH
50928: LD_VAR 0 2
50932: PPUSH
50933: CALL_OW 108
50937: AND
50938: IFFALSE 50952
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_OWVAR 2
50950: NONEQUAL
50951: AND
50952: IFFALSE 51041
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50954: LD_EXP 6
50958: PUSH
50959: LD_VAR 0 2
50963: ARRAY
50964: NOT
50965: IFTRUE 51013
50967: PUSH
50968: LD_EXP 6
50972: PUSH
50973: LD_VAR 0 2
50977: ARRAY
50978: PUSH
50979: LD_EXP 6
50983: PUSH
50984: LD_OWVAR 2
50988: ARRAY
50989: NONEQUAL
50990: IFFALSE 51012
50992: PUSH
50993: LD_OWVAR 2
50997: PPUSH
50998: LD_VAR 0 2
51002: PPUSH
51003: CALL_OW 81
51007: PUSH
51008: LD_INT 1
51010: NONEQUAL
51011: AND
51012: OR
51013: IFFALSE 51041
// if HasPowerByGameType ( mpGameType , i ) then
51015: LD_EXP 1
51019: PPUSH
51020: LD_VAR 0 2
51024: PPUSH
51025: CALL 50512 0 2
51029: IFFALSE 51041
// begin gameIsOn := true ;
51031: LD_ADDR_VAR 0 1
51035: PUSH
51036: LD_INT 1
51038: ST_TO_ADDR
// break ;
51039: GO 51043
// end ;
51041: GO 50912
51043: POP
51044: POP
// wait ( 100 ) ;
51045: LD_INT 100
51047: PPUSH
51048: CALL_OW 67
// until not gameIsOn ;
51052: LD_VAR 0 1
51056: NOT
51057: IFFALSE 50891
// if IAmServer then
51059: CALL_OW 518
51063: IFFALSE 51072
// wait ( 0 0$3 ) ;
51065: LD_INT 105
51067: PPUSH
51068: CALL_OW 67
// if Multiplayer then
51072: LD_OWVAR 4
51076: IFFALSE 51084
// YouLostInMultiplayer else
51078: CALL_OW 107
51082: GO 51091
// YouLost (  ) ;
51084: LD_STRING 
51086: PPUSH
51087: CALL_OW 104
// end ;
51091: PPOPN 2
51093: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51094: LD_EXP 31
51098: IFFALSE 51482
51100: GO 51102
51102: DISABLE
51103: LD_INT 0
51105: PPUSH
51106: PPUSH
51107: PPUSH
51108: PPUSH
51109: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51110: LD_ADDR_VAR 0 5
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: LD_INT 5
51129: PUSH
51130: LD_INT 6
51132: PUSH
51133: LD_INT 7
51135: PUSH
51136: LD_INT 8
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51149: LD_INT 350
51151: PPUSH
51152: CALL_OW 67
// for i := 1 to 8 do
51156: LD_ADDR_VAR 0 1
51160: PUSH
51161: DOUBLE
51162: LD_INT 1
51164: DEC
51165: ST_TO_ADDR
51166: LD_INT 8
51168: PUSH
51169: FOR_TO
51170: IFFALSE 51452
// begin j := sides [ i ] ;
51172: LD_ADDR_VAR 0 2
51176: PUSH
51177: LD_VAR 0 5
51181: PUSH
51182: LD_VAR 0 1
51186: ARRAY
51187: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51188: LD_EXP 38
51192: PUSH
51193: LD_VAR 0 2
51197: ARRAY
51198: PPUSH
51199: CALL 5082 0 1
51203: IFFALSE 51216
51205: PUSH
51206: LD_VAR 0 2
51210: PPUSH
51211: CALL_OW 108
51215: AND
51216: IFFALSE 51234
51218: PUSH
51219: LD_EXP 1
51223: PPUSH
51224: LD_VAR 0 2
51228: PPUSH
51229: CALL 50512 0 2
51233: AND
51234: IFFALSE 51450
// begin wait ( mpRespawn div 2 ) ;
51236: LD_EXP 31
51240: PUSH
51241: LD_INT 2
51243: DIV
51244: PPUSH
51245: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51249: LD_ADDR_VAR 0 3
51253: PUSH
51254: LD_INT 22
51256: PUSH
51257: LD_VAR 0 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 50
51268: PUSH
51269: EMPTY
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 30
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 30
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: PPUSH
51305: CALL_OW 69
51309: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51310: LD_VAR 0 3
51314: NOT
51315: IFTRUE 51329
51317: PUSH
51318: LD_VAR 0 2
51322: PPUSH
51323: CALL_OW 108
51327: NOT
51328: OR
51329: IFTRUE 51348
51331: PUSH
51332: LD_EXP 1
51336: PPUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: CALL 50512 0 2
51346: NOT
51347: OR
51348: IFFALSE 51352
// continue ;
51350: GO 51169
// spawn := tmp [ 1 ] ;
51352: LD_ADDR_VAR 0 4
51356: PUSH
51357: LD_VAR 0 3
51361: PUSH
51362: LD_INT 1
51364: ARRAY
51365: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51366: LD_EXP 38
51370: PUSH
51371: LD_VAR 0 2
51375: ARRAY
51376: PUSH
51377: LD_INT 1
51379: ARRAY
51380: PPUSH
51381: LD_VAR 0 4
51385: PPUSH
51386: CALL_OW 250
51390: PPUSH
51391: LD_VAR 0 4
51395: PPUSH
51396: CALL_OW 251
51400: PPUSH
51401: LD_INT 32
51403: PPUSH
51404: LD_INT 1
51406: PPUSH
51407: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51411: LD_ADDR_EXP 38
51415: PUSH
51416: LD_EXP 38
51420: PPUSH
51421: LD_VAR 0 2
51425: PPUSH
51426: LD_EXP 38
51430: PUSH
51431: LD_VAR 0 2
51435: ARRAY
51436: PPUSH
51437: LD_INT 1
51439: PPUSH
51440: CALL_OW 3
51444: PPUSH
51445: CALL_OW 1
51449: ST_TO_ADDR
// end ; end ;
51450: GO 51169
51452: POP
51453: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51454: LD_ADDR_VAR 0 5
51458: PUSH
51459: LD_VAR 0 5
51463: PPUSH
51464: LD_INT 1
51466: PPUSH
51467: LD_INT 8
51469: PPUSH
51470: LD_INT 1
51472: PPUSH
51473: CALL 7374 0 4
51477: ST_TO_ADDR
// until false ;
51478: LD_INT 0
51480: IFFALSE 51149
// end ;
51482: PPOPN 5
51484: END
// every 0 0$1 marked mpActive do
51485: GO 51487
51487: DISABLE
// begin enable ;
51488: ENABLE
// if not mpDisplayStrings then
51489: LD_EXP 36
51493: NOT
51494: IFFALSE 51505
// begin display_strings := [ ] ;
51496: LD_ADDR_OWVAR 47
51500: PUSH
51501: EMPTY
51502: ST_TO_ADDR
// exit ;
51503: GO 51515
// end ; display_strings := mpDisplayStrings ;
51505: LD_ADDR_OWVAR 47
51509: PUSH
51510: LD_EXP 36
51514: ST_TO_ADDR
// end ; end_of_file
51515: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51516: LD_INT 0
51518: PPUSH
51519: PPUSH
51520: PPUSH
51521: PPUSH
51522: PPUSH
51523: PPUSH
51524: PPUSH
51525: PPUSH
51526: PPUSH
// if GetType ( un ) = unit_vehicle then
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL_OW 247
51536: PUSH
51537: LD_INT 2
51539: EQUAL
51540: IFFALSE 51544
// exit ;
51542: GO 52218
// side := GetSide ( un ) ;
51544: LD_ADDR_VAR 0 9
51548: PUSH
51549: LD_VAR 0 1
51553: PPUSH
51554: CALL_OW 255
51558: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51559: LD_EXP 1
51563: PUSH
51564: LD_INT 2
51566: EQUAL
51567: IFFALSE 51661
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51569: LD_VAR 0 1
51573: PPUSH
51574: CALL_OW 266
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: IN
51589: IFFALSE 51661
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51591: LD_ADDR_VAR 0 3
51595: PUSH
51596: LD_INT 22
51598: PUSH
51599: LD_VAR 0 9
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 21
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 33
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PPUSH
51640: CALL_OW 69
51644: PUSH
51645: FOR_IN
51646: IFFALSE 51659
// KillUnit ( i ) ;
51648: LD_VAR 0 3
51652: PPUSH
51653: CALL_OW 66
51657: GO 51645
51659: POP
51660: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 257
51670: PUSH
51671: LD_INT 12
51673: PUSH
51674: LD_INT 17
51676: PUSH
51677: LD_INT 15
51679: PUSH
51680: LD_INT 16
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: IN
51689: IFTRUE 51706
51691: PUSH
51692: LD_VAR 0 1
51696: PPUSH
51697: CALL_OW 263
51701: PUSH
51702: LD_INT 5
51704: EQUAL
51705: OR
51706: IFFALSE 51943
// begin tag := 0 ;
51708: LD_ADDR_VAR 0 5
51712: PUSH
51713: LD_INT 0
51715: ST_TO_ADDR
// for i := 1 to 8 do
51716: LD_ADDR_VAR 0 3
51720: PUSH
51721: DOUBLE
51722: LD_INT 1
51724: DEC
51725: ST_TO_ADDR
51726: LD_INT 8
51728: PUSH
51729: FOR_TO
51730: IFFALSE 51764
// if un in mpApePosIndex [ i ] then
51732: LD_VAR 0 1
51736: PUSH
51737: LD_EXP 30
51741: PUSH
51742: LD_VAR 0 3
51746: ARRAY
51747: IN
51748: IFFALSE 51762
// begin tag := i ;
51750: LD_ADDR_VAR 0 5
51754: PUSH
51755: LD_VAR 0 3
51759: ST_TO_ADDR
// break ;
51760: GO 51764
// end ;
51762: GO 51729
51764: POP
51765: POP
// if not tag then
51766: LD_VAR 0 5
51770: NOT
51771: IFFALSE 51775
// exit ;
51773: GO 52218
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51775: LD_ADDR_VAR 0 7
51779: PUSH
51780: LD_EXP 29
51784: PUSH
51785: LD_EXP 5
51789: PUSH
51790: LD_VAR 0 5
51794: ARRAY
51795: ARRAY
51796: ST_TO_ADDR
// if not area then
51797: LD_VAR 0 7
51801: NOT
51802: IFFALSE 51806
// exit ;
51804: GO 52218
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51806: LD_INT 14700
51808: PUSH
51809: LD_VAR 0 1
51813: PUSH
51814: LD_INT 5
51816: MOD
51817: PUSH
51818: LD_INT 1
51820: PLUS
51821: PUSH
51822: LD_INT 700
51824: MUL
51825: PLUS
51826: PPUSH
51827: CALL_OW 67
// repeat wait ( 10 ) ;
51831: LD_INT 10
51833: PPUSH
51834: CALL_OW 67
// until not mpBlockRespThread ;
51838: LD_EXP 43
51842: NOT
51843: IFFALSE 51831
// mpBlockRespThread := true ;
51845: LD_ADDR_EXP 43
51849: PUSH
51850: LD_INT 1
51852: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51853: LD_INT 0
51855: PPUSH
51856: CALL 37141 0 1
// ape := CreateHuman ;
51860: LD_ADDR_VAR 0 4
51864: PUSH
51865: CALL_OW 44
51869: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51870: LD_ADDR_EXP 30
51874: PUSH
51875: LD_EXP 30
51879: PPUSH
51880: LD_VAR 0 5
51884: PPUSH
51885: LD_EXP 30
51889: PUSH
51890: LD_VAR 0 5
51894: ARRAY
51895: PPUSH
51896: LD_VAR 0 4
51900: PPUSH
51901: CALL 41014 0 2
51905: PPUSH
51906: CALL_OW 1
51910: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51911: LD_VAR 0 4
51915: PPUSH
51916: LD_VAR 0 7
51920: PPUSH
51921: LD_INT 0
51923: PPUSH
51924: CALL_OW 49
// wait ( 10 ) ;
51928: LD_INT 10
51930: PPUSH
51931: CALL_OW 67
// mpBlockRespThread := false ;
51935: LD_ADDR_EXP 43
51939: PUSH
51940: LD_INT 0
51942: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51943: LD_VAR 0 1
51947: PPUSH
51948: CALL_OW 247
51952: PUSH
51953: LD_INT 1
51955: EQUAL
51956: IFFALSE 51973
51958: PUSH
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 248
51968: PUSH
51969: LD_INT 0
51971: GREATER
51972: AND
51973: IFFALSE 52218
// begin if not mpRespawn then
51975: LD_EXP 31
51979: NOT
51980: IFFALSE 51984
// exit ;
51982: GO 52218
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51984: LD_VAR 0 9
51988: PPUSH
51989: CALL_OW 108
51993: NOT
51994: IFFALSE 52013
51996: PUSH
51997: LD_EXP 1
52001: PPUSH
52002: LD_VAR 0 9
52006: PPUSH
52007: CALL 50512 0 2
52011: NOT
52012: AND
52013: IFFALSE 52017
// exit ;
52015: GO 52218
// side := GetSide ( un ) ;
52017: LD_ADDR_VAR 0 9
52021: PUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 255
52031: ST_TO_ADDR
// nation := GetNation ( un ) ;
52032: LD_ADDR_VAR 0 8
52036: PUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 248
52046: ST_TO_ADDR
// class := GetClass ( un ) ;
52047: LD_ADDR_VAR 0 6
52051: PUSH
52052: LD_VAR 0 1
52056: PPUSH
52057: CALL_OW 257
52061: ST_TO_ADDR
// if class > 4 then
52062: LD_VAR 0 6
52066: PUSH
52067: LD_INT 4
52069: GREATER
52070: IFFALSE 52080
// class := 1 ;
52072: LD_ADDR_VAR 0 6
52076: PUSH
52077: LD_INT 1
52079: ST_TO_ADDR
// repeat wait ( 10 ) ;
52080: LD_INT 10
52082: PPUSH
52083: CALL_OW 67
// until not mpBlockRespThread ;
52087: LD_EXP 43
52091: NOT
52092: IFFALSE 52080
// mpBlockRespThread := true ;
52094: LD_ADDR_EXP 43
52098: PUSH
52099: LD_INT 1
52101: ST_TO_ADDR
// uc_side := side ;
52102: LD_ADDR_OWVAR 20
52106: PUSH
52107: LD_VAR 0 9
52111: ST_TO_ADDR
// uc_nation := nation ;
52112: LD_ADDR_OWVAR 21
52116: PUSH
52117: LD_VAR 0 8
52121: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52122: LD_INT 0
52124: PPUSH
52125: LD_VAR 0 6
52129: PPUSH
52130: LD_INT 2
52132: PPUSH
52133: CALL_OW 380
// un := CreateHuman ;
52137: LD_ADDR_VAR 0 1
52141: PUSH
52142: CALL_OW 44
52146: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52147: LD_ADDR_EXP 38
52151: PUSH
52152: LD_EXP 38
52156: PPUSH
52157: LD_VAR 0 9
52161: PPUSH
52162: LD_EXP 38
52166: PUSH
52167: LD_VAR 0 9
52171: ARRAY
52172: PPUSH
52173: LD_EXP 38
52177: PUSH
52178: LD_VAR 0 9
52182: ARRAY
52183: PUSH
52184: LD_INT 1
52186: PLUS
52187: PPUSH
52188: LD_VAR 0 1
52192: PPUSH
52193: CALL_OW 1
52197: PPUSH
52198: CALL_OW 1
52202: ST_TO_ADDR
// wait ( 10 ) ;
52203: LD_INT 10
52205: PPUSH
52206: CALL_OW 67
// mpBlockRespThread := false ;
52210: LD_ADDR_EXP 43
52214: PUSH
52215: LD_INT 0
52217: ST_TO_ADDR
// end ; end ;
52218: LD_VAR 0 2
52222: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52223: LD_INT 0
52225: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52226: LD_VAR 0 1
52230: PPUSH
52231: CALL_OW 266
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: IN
52246: IFFALSE 52271
// SetBName ( building , @ & GetSide ( building ) ) ;
52248: LD_VAR 0 1
52252: PPUSH
52253: LD_STRING @
52255: PUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 255
52265: STR
52266: PPUSH
52267: CALL_OW 500
// end ;
52271: LD_VAR 0 2
52275: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52276: LD_INT 0
52278: PPUSH
52279: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52280: LD_EXP 1
52284: PUSH
52285: LD_INT 2
52287: EQUAL
52288: IFFALSE 52312
52290: PUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 266
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: IN
52311: AND
52312: IFFALSE 52391
// begin SetSide ( building , oldSide ) ;
52314: LD_VAR 0 1
52318: PPUSH
52319: LD_VAR 0 2
52323: PPUSH
52324: CALL_OW 235
// KillUnit ( building ) ;
52328: LD_VAR 0 1
52332: PPUSH
52333: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52337: LD_ADDR_VAR 0 5
52341: PUSH
52342: LD_INT 22
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 21
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PPUSH
52368: CALL_OW 69
52372: PUSH
52373: FOR_IN
52374: IFFALSE 52387
// KillUnit ( i ) ;
52376: LD_VAR 0 5
52380: PPUSH
52381: CALL_OW 66
52385: GO 52373
52387: POP
52388: POP
// exit ;
52389: GO 52436
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52391: LD_VAR 0 1
52395: PPUSH
52396: CALL_OW 266
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: IN
52411: IFFALSE 52436
// SetBName ( building , @ & GetSide ( building ) ) ;
52413: LD_VAR 0 1
52417: PPUSH
52418: LD_STRING @
52420: PUSH
52421: LD_VAR 0 1
52425: PPUSH
52426: CALL_OW 255
52430: STR
52431: PPUSH
52432: CALL_OW 500
// end ;
52436: LD_VAR 0 4
52440: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52441: LD_INT 0
52443: PPUSH
52444: PPUSH
52445: PPUSH
// if mpGameType <> GameTypeFamine then
52446: LD_EXP 1
52450: PUSH
52451: LD_INT 5
52453: NONEQUAL
52454: IFFALSE 52458
// exit ;
52456: GO 52672
// for i := 1 to mpGlobalOilDeposits do
52458: LD_ADDR_VAR 0 6
52462: PUSH
52463: DOUBLE
52464: LD_INT 1
52466: DEC
52467: ST_TO_ADDR
52468: LD_EXP 39
52472: PUSH
52473: FOR_TO
52474: IFFALSE 52670
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52476: LD_EXP 39
52480: PUSH
52481: LD_VAR 0 6
52485: ARRAY
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: PPUSH
52491: LD_EXP 39
52495: PUSH
52496: LD_VAR 0 6
52500: ARRAY
52501: PUSH
52502: LD_INT 2
52504: ARRAY
52505: PPUSH
52506: CALL_OW 428
52510: PUSH
52511: LD_VAR 0 1
52515: EQUAL
52516: IFFALSE 52668
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52518: LD_ADDR_VAR 0 7
52522: PUSH
52523: LD_EXP 39
52527: PUSH
52528: LD_VAR 0 6
52532: ARRAY
52533: PUSH
52534: LD_INT 3
52536: ARRAY
52537: ST_TO_ADDR
// value := Dec ( value ) ;
52538: LD_ADDR_VAR 0 7
52542: PUSH
52543: LD_VAR 0 7
52547: PPUSH
52548: CALL 42409 0 1
52552: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52553: LD_ADDR_EXP 39
52557: PUSH
52558: LD_EXP 39
52562: PPUSH
52563: LD_VAR 0 6
52567: PPUSH
52568: LD_EXP 39
52572: PUSH
52573: LD_VAR 0 6
52577: ARRAY
52578: PPUSH
52579: LD_INT 3
52581: PPUSH
52582: LD_VAR 0 7
52586: PPUSH
52587: CALL_OW 1
52591: PPUSH
52592: CALL_OW 1
52596: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52597: LD_VAR 0 1
52601: PPUSH
52602: LD_VAR 0 7
52606: PPUSH
52607: CALL_OW 505
// if value = 0 then
52611: LD_VAR 0 7
52615: PUSH
52616: LD_INT 0
52618: EQUAL
52619: IFFALSE 52668
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52621: LD_EXP 39
52625: PUSH
52626: LD_VAR 0 6
52630: ARRAY
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PPUSH
52636: LD_EXP 39
52640: PUSH
52641: LD_VAR 0 6
52645: ARRAY
52646: PUSH
52647: LD_INT 2
52649: ARRAY
52650: PPUSH
52651: CALL_OW 63
// KillUnit ( building ) ;
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 66
// exit ;
52664: POP
52665: POP
52666: GO 52672
// end ; end ; end ;
52668: GO 52473
52670: POP
52671: POP
// end ;
52672: LD_VAR 0 5
52676: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52677: LD_INT 0
52679: PPUSH
52680: PPUSH
52681: PPUSH
// if mpGameType <> GameTypeFamine then
52682: LD_EXP 1
52686: PUSH
52687: LD_INT 5
52689: NONEQUAL
52690: IFFALSE 52694
// exit ;
52692: GO 52908
// for i := 1 to mpGlobalSibDeposits do
52694: LD_ADDR_VAR 0 6
52698: PUSH
52699: DOUBLE
52700: LD_INT 1
52702: DEC
52703: ST_TO_ADDR
52704: LD_EXP 40
52708: PUSH
52709: FOR_TO
52710: IFFALSE 52906
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52712: LD_EXP 40
52716: PUSH
52717: LD_VAR 0 6
52721: ARRAY
52722: PUSH
52723: LD_INT 1
52725: ARRAY
52726: PPUSH
52727: LD_EXP 40
52731: PUSH
52732: LD_VAR 0 6
52736: ARRAY
52737: PUSH
52738: LD_INT 2
52740: ARRAY
52741: PPUSH
52742: CALL_OW 428
52746: PUSH
52747: LD_VAR 0 1
52751: EQUAL
52752: IFFALSE 52904
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52754: LD_ADDR_VAR 0 7
52758: PUSH
52759: LD_EXP 40
52763: PUSH
52764: LD_VAR 0 6
52768: ARRAY
52769: PUSH
52770: LD_INT 3
52772: ARRAY
52773: ST_TO_ADDR
// value := Dec ( value ) ;
52774: LD_ADDR_VAR 0 7
52778: PUSH
52779: LD_VAR 0 7
52783: PPUSH
52784: CALL 42409 0 1
52788: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52789: LD_ADDR_EXP 40
52793: PUSH
52794: LD_EXP 40
52798: PPUSH
52799: LD_VAR 0 6
52803: PPUSH
52804: LD_EXP 40
52808: PUSH
52809: LD_VAR 0 6
52813: ARRAY
52814: PPUSH
52815: LD_INT 3
52817: PPUSH
52818: LD_VAR 0 7
52822: PPUSH
52823: CALL_OW 1
52827: PPUSH
52828: CALL_OW 1
52832: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52833: LD_VAR 0 1
52837: PPUSH
52838: LD_VAR 0 7
52842: PPUSH
52843: CALL_OW 505
// if value = 0 then
52847: LD_VAR 0 7
52851: PUSH
52852: LD_INT 0
52854: EQUAL
52855: IFFALSE 52904
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52857: LD_EXP 40
52861: PUSH
52862: LD_VAR 0 6
52866: ARRAY
52867: PUSH
52868: LD_INT 1
52870: ARRAY
52871: PPUSH
52872: LD_EXP 40
52876: PUSH
52877: LD_VAR 0 6
52881: ARRAY
52882: PUSH
52883: LD_INT 2
52885: ARRAY
52886: PPUSH
52887: CALL_OW 63
// KillUnit ( building ) ;
52891: LD_VAR 0 1
52895: PPUSH
52896: CALL_OW 66
// exit ;
52900: POP
52901: POP
52902: GO 52908
// end ; end ; end ;
52904: GO 52709
52906: POP
52907: POP
// end ; end_of_file
52908: LD_VAR 0 5
52912: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52913: LD_EXP 37
52917: IFFALSE 52925
52919: PUSH
52920: CALL 53135 0 0
52924: AND
52925: IFFALSE 52933
52927: PUSH
52928: LD_OWVAR 4
52932: AND
52933: IFFALSE 53132
52935: GO 52937
52937: DISABLE
52938: LD_INT 0
52940: PPUSH
52941: PPUSH
// begin canWin := false ;
52942: LD_ADDR_VAR 0 2
52946: PUSH
52947: LD_INT 0
52949: ST_TO_ADDR
// if not HasPower ( your_side ) then
52950: LD_OWVAR 2
52954: PPUSH
52955: CALL 53177 0 1
52959: NOT
52960: IFFALSE 52971
// begin Multiplayer_Loose_Message ;
52962: CALL_OW 521
// enable ( mpLose ) ;
52966: LD_INT 102
52968: ENABLE_MARKED
// end else
52969: GO 53132
// begin canWin := true ;
52971: LD_ADDR_VAR 0 2
52975: PUSH
52976: LD_INT 1
52978: ST_TO_ADDR
// for i := 1 to 8 do
52979: LD_ADDR_VAR 0 1
52983: PUSH
52984: DOUBLE
52985: LD_INT 1
52987: DEC
52988: ST_TO_ADDR
52989: LD_INT 8
52991: PUSH
52992: FOR_TO
52993: IFFALSE 53118
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52995: LD_EXP 5
52999: PUSH
53000: LD_VAR 0 1
53004: ARRAY
53005: IFFALSE 53018
53007: PUSH
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL_OW 108
53017: AND
53018: IFFALSE 53032
53020: PUSH
53021: LD_VAR 0 1
53025: PUSH
53026: LD_OWVAR 2
53030: NONEQUAL
53031: AND
53032: IFFALSE 53116
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53034: LD_EXP 6
53038: PUSH
53039: LD_VAR 0 1
53043: ARRAY
53044: NOT
53045: IFTRUE 53093
53047: PUSH
53048: LD_EXP 6
53052: PUSH
53053: LD_VAR 0 1
53057: ARRAY
53058: PUSH
53059: LD_EXP 6
53063: PUSH
53064: LD_OWVAR 2
53068: ARRAY
53069: NONEQUAL
53070: IFFALSE 53092
53072: PUSH
53073: LD_OWVAR 2
53077: PPUSH
53078: LD_VAR 0 1
53082: PPUSH
53083: CALL_OW 81
53087: PUSH
53088: LD_INT 1
53090: NONEQUAL
53091: AND
53092: OR
53093: IFFALSE 53116
// if HasPower ( i ) then
53095: LD_VAR 0 1
53099: PPUSH
53100: CALL 53177 0 1
53104: IFFALSE 53116
// begin canWin := false ;
53106: LD_ADDR_VAR 0 2
53110: PUSH
53111: LD_INT 0
53113: ST_TO_ADDR
// break ;
53114: GO 53118
// end ;
53116: GO 52992
53118: POP
53119: POP
// if canWin then
53120: LD_VAR 0 2
53124: IFFALSE 53131
// enable ( mpWin ) else
53126: LD_INT 101
53128: ENABLE_MARKED
53129: GO 53132
// enable ;
53131: ENABLE
// end ; end ;
53132: PPOPN 2
53134: END
// function CanWinLoose ; begin
53135: LD_INT 0
53137: PPUSH
// result := true ;
53138: LD_ADDR_VAR 0 1
53142: PUSH
53143: LD_INT 1
53145: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53146: CALL_OW 531
53150: IFFALSE 53162
53152: PUSH
53153: CALL_OW 519
53157: PUSH
53158: LD_INT 1
53160: GREATER
53161: AND
53162: IFFALSE 53172
// result := false ;
53164: LD_ADDR_VAR 0 1
53168: PUSH
53169: LD_INT 0
53171: ST_TO_ADDR
// end ;
53172: LD_VAR 0 1
53176: RET
// function HasPower ( i ) ; begin
53177: LD_INT 0
53179: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_INT 22
53187: PUSH
53188: LD_VAR 0 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 21
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 33
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 33
53222: PUSH
53223: LD_INT 5
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PPUSH
53240: CALL_OW 69
53244: ST_TO_ADDR
// end ; end_of_file
53245: LD_VAR 0 2
53249: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53250: LD_EXP 37
53254: IFFALSE 53297
53256: GO 53258
53258: DISABLE
53259: LD_INT 0
53261: PPUSH
// begin for i := 1 to 8 do
53262: LD_ADDR_VAR 0 1
53266: PUSH
53267: DOUBLE
53268: LD_INT 1
53270: DEC
53271: ST_TO_ADDR
53272: LD_INT 8
53274: PUSH
53275: FOR_TO
53276: IFFALSE 53295
// SetRestrict ( b_depot , i , state_disabled ) ;
53278: LD_INT 0
53280: PPUSH
53281: LD_VAR 0 1
53285: PPUSH
53286: LD_INT 0
53288: PPUSH
53289: CALL_OW 324
53293: GO 53275
53295: POP
53296: POP
// end ;
53297: PPOPN 1
53299: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53300: LD_EXP 37
53304: IFFALSE 53312
53306: PUSH
53307: CALL 53522 0 0
53311: AND
53312: IFFALSE 53320
53314: PUSH
53315: LD_OWVAR 4
53319: AND
53320: IFFALSE 53519
53322: GO 53324
53324: DISABLE
53325: LD_INT 0
53327: PPUSH
53328: PPUSH
// begin canWin := false ;
53329: LD_ADDR_VAR 0 2
53333: PUSH
53334: LD_INT 0
53336: ST_TO_ADDR
// if not HasPower ( your_side ) then
53337: LD_OWVAR 2
53341: PPUSH
53342: CALL 53564 0 1
53346: NOT
53347: IFFALSE 53358
// begin Multiplayer_Loose_Message ;
53349: CALL_OW 521
// enable ( mpLose ) ;
53353: LD_INT 102
53355: ENABLE_MARKED
// end else
53356: GO 53519
// begin canWin := true ;
53358: LD_ADDR_VAR 0 2
53362: PUSH
53363: LD_INT 1
53365: ST_TO_ADDR
// for i := 1 to 8 do
53366: LD_ADDR_VAR 0 1
53370: PUSH
53371: DOUBLE
53372: LD_INT 1
53374: DEC
53375: ST_TO_ADDR
53376: LD_INT 8
53378: PUSH
53379: FOR_TO
53380: IFFALSE 53505
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53382: LD_EXP 5
53386: PUSH
53387: LD_VAR 0 1
53391: ARRAY
53392: IFFALSE 53405
53394: PUSH
53395: LD_VAR 0 1
53399: PPUSH
53400: CALL_OW 108
53404: AND
53405: IFFALSE 53419
53407: PUSH
53408: LD_VAR 0 1
53412: PUSH
53413: LD_OWVAR 2
53417: NONEQUAL
53418: AND
53419: IFFALSE 53503
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53421: LD_EXP 6
53425: PUSH
53426: LD_VAR 0 1
53430: ARRAY
53431: NOT
53432: IFTRUE 53480
53434: PUSH
53435: LD_EXP 6
53439: PUSH
53440: LD_VAR 0 1
53444: ARRAY
53445: PUSH
53446: LD_EXP 6
53450: PUSH
53451: LD_OWVAR 2
53455: ARRAY
53456: NONEQUAL
53457: IFFALSE 53479
53459: PUSH
53460: LD_OWVAR 2
53464: PPUSH
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL_OW 81
53474: PUSH
53475: LD_INT 1
53477: NONEQUAL
53478: AND
53479: OR
53480: IFFALSE 53503
// if HasPower ( i ) then
53482: LD_VAR 0 1
53486: PPUSH
53487: CALL 53564 0 1
53491: IFFALSE 53503
// begin canWin := false ;
53493: LD_ADDR_VAR 0 2
53497: PUSH
53498: LD_INT 0
53500: ST_TO_ADDR
// break ;
53501: GO 53505
// end ;
53503: GO 53379
53505: POP
53506: POP
// if canWin then
53507: LD_VAR 0 2
53511: IFFALSE 53518
// enable ( mpWin ) else
53513: LD_INT 101
53515: ENABLE_MARKED
53516: GO 53519
// enable ;
53518: ENABLE
// end ; end ;
53519: PPOPN 2
53521: END
// function CanWinLoose ; begin
53522: LD_INT 0
53524: PPUSH
// result := true ;
53525: LD_ADDR_VAR 0 1
53529: PUSH
53530: LD_INT 1
53532: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53533: CALL_OW 531
53537: IFFALSE 53549
53539: PUSH
53540: CALL_OW 519
53544: PUSH
53545: LD_INT 1
53547: GREATER
53548: AND
53549: IFFALSE 53559
// result := false ;
53551: LD_ADDR_VAR 0 1
53555: PUSH
53556: LD_INT 0
53558: ST_TO_ADDR
// end ;
53559: LD_VAR 0 1
53563: RET
// function HasPower ( i ) ; begin
53564: LD_INT 0
53566: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53567: LD_INT 22
53569: PUSH
53570: LD_VAR 0 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 30
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 30
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PPUSH
53611: CALL_OW 69
53615: NOT
53616: IFFALSE 53620
// exit ;
53618: GO 53685
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53620: LD_ADDR_VAR 0 2
53624: PUSH
53625: LD_INT 22
53627: PUSH
53628: LD_VAR 0 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 21
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 33
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 33
53662: PUSH
53663: LD_INT 5
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PPUSH
53680: CALL_OW 69
53684: ST_TO_ADDR
// end ; end_of_file
53685: LD_VAR 0 2
53689: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53690: LD_EXP 37
53694: IFFALSE 54033
53696: GO 53698
53698: DISABLE
53699: LD_INT 0
53701: PPUSH
53702: PPUSH
53703: PPUSH
// begin mpKingPoints := [ ] ;
53704: LD_ADDR_EXP 46
53708: PUSH
53709: EMPTY
53710: ST_TO_ADDR
// if mpTeamGame then
53711: LD_EXP 9
53715: IFFALSE 53769
// begin for i := 1 to Count ( mpTeams ) do
53717: LD_ADDR_VAR 0 1
53721: PUSH
53722: DOUBLE
53723: LD_INT 1
53725: DEC
53726: ST_TO_ADDR
53727: LD_EXP 8
53731: PPUSH
53732: CALL 5082 0 1
53736: PUSH
53737: FOR_TO
53738: IFFALSE 53765
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53740: LD_ADDR_EXP 46
53744: PUSH
53745: LD_EXP 46
53749: PPUSH
53750: LD_VAR 0 1
53754: PPUSH
53755: LD_INT 0
53757: PPUSH
53758: CALL_OW 1
53762: ST_TO_ADDR
53763: GO 53737
53765: POP
53766: POP
// end else
53767: GO 53812
// begin for i := 1 to 8 do
53769: LD_ADDR_VAR 0 1
53773: PUSH
53774: DOUBLE
53775: LD_INT 1
53777: DEC
53778: ST_TO_ADDR
53779: LD_INT 8
53781: PUSH
53782: FOR_TO
53783: IFFALSE 53810
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53785: LD_ADDR_EXP 46
53789: PUSH
53790: LD_EXP 46
53794: PPUSH
53795: LD_VAR 0 1
53799: PPUSH
53800: LD_INT 0
53802: PPUSH
53803: CALL_OW 1
53807: ST_TO_ADDR
53808: GO 53782
53810: POP
53811: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53812: LD_ADDR_VAR 0 3
53816: PUSH
53817: LD_INT 73
53819: PPUSH
53820: LD_INT 0
53822: PPUSH
53823: CALL_OW 517
53827: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53828: LD_ADDR_VAR 0 1
53832: PUSH
53833: DOUBLE
53834: LD_INT 1
53836: DEC
53837: ST_TO_ADDR
53838: LD_VAR 0 3
53842: PUSH
53843: LD_INT 1
53845: ARRAY
53846: PUSH
53847: FOR_TO
53848: IFFALSE 53915
// for j := 1 to 8 do
53850: LD_ADDR_VAR 0 2
53854: PUSH
53855: DOUBLE
53856: LD_INT 1
53858: DEC
53859: ST_TO_ADDR
53860: LD_INT 8
53862: PUSH
53863: FOR_TO
53864: IFFALSE 53911
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53866: LD_VAR 0 3
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PUSH
53875: LD_VAR 0 1
53879: ARRAY
53880: PPUSH
53881: LD_VAR 0 3
53885: PUSH
53886: LD_INT 2
53888: ARRAY
53889: PUSH
53890: LD_VAR 0 1
53894: ARRAY
53895: PPUSH
53896: LD_VAR 0 2
53900: PPUSH
53901: LD_INT 12
53903: NEG
53904: PPUSH
53905: CALL_OW 330
53909: GO 53863
53911: POP
53912: POP
53913: GO 53847
53915: POP
53916: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53917: LD_EXP 32
53921: PPUSH
53922: LD_INT 1
53924: PPUSH
53925: CALL_OW 424
// UpdateCounter ;
53929: CALL 54537 0 0
// repeat wait ( 0 0$1 ) ;
53933: LD_INT 35
53935: PPUSH
53936: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53940: LD_ADDR_VAR 0 3
53944: PUSH
53945: LD_EXP 32
53949: PPUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 57
53955: PUSH
53956: EMPTY
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 50
53965: PUSH
53966: EMPTY
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 30
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 30
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: PPUSH
54002: CALL_OW 70
54006: ST_TO_ADDR
// if not tmp then
54007: LD_VAR 0 3
54011: NOT
54012: IFFALSE 54016
// continue ;
54014: GO 53933
// AddPoints ( tmp ) ;
54016: LD_VAR 0 3
54020: PPUSH
54021: CALL 54215 0 1
// UpdateCounter ;
54025: CALL 54537 0 0
// until false ;
54029: LD_INT 0
54031: IFFALSE 53933
// end ;
54033: PPOPN 3
54035: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54036: LD_EXP 37
54040: IFFALSE 54048
54042: PUSH
54043: LD_EXP 35
54047: AND
54048: IFFALSE 54212
54050: GO 54052
54052: DISABLE
54053: LD_INT 0
54055: PPUSH
54056: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54057: LD_ADDR_VAR 0 2
54061: PUSH
54062: LD_INT 73
54064: PPUSH
54065: LD_INT 0
54067: PPUSH
54068: CALL_OW 517
54072: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54073: LD_ADDR_VAR 0 1
54077: PUSH
54078: DOUBLE
54079: LD_INT 1
54081: DEC
54082: ST_TO_ADDR
54083: LD_VAR 0 2
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PUSH
54092: FOR_TO
54093: IFFALSE 54134
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54095: LD_VAR 0 2
54099: PUSH
54100: LD_INT 1
54102: ARRAY
54103: PUSH
54104: LD_VAR 0 1
54108: ARRAY
54109: PPUSH
54110: LD_VAR 0 2
54114: PUSH
54115: LD_INT 2
54117: ARRAY
54118: PUSH
54119: LD_VAR 0 1
54123: ARRAY
54124: PPUSH
54125: LD_INT 125
54127: PPUSH
54128: CALL_OW 495
54132: GO 54092
54134: POP
54135: POP
// repeat wait ( mpEmissions ) ;
54136: LD_EXP 35
54140: PPUSH
54141: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54145: LD_ADDR_VAR 0 1
54149: PUSH
54150: DOUBLE
54151: LD_INT 1
54153: DEC
54154: ST_TO_ADDR
54155: LD_VAR 0 2
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PUSH
54164: FOR_TO
54165: IFFALSE 54206
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54167: LD_VAR 0 2
54171: PUSH
54172: LD_INT 1
54174: ARRAY
54175: PUSH
54176: LD_VAR 0 1
54180: ARRAY
54181: PPUSH
54182: LD_VAR 0 2
54186: PUSH
54187: LD_INT 2
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 1
54195: ARRAY
54196: PPUSH
54197: LD_INT 15
54199: PPUSH
54200: CALL_OW 495
54204: GO 54164
54206: POP
54207: POP
// until false ;
54208: LD_INT 0
54210: IFFALSE 54136
// end ;
54212: PPOPN 2
54214: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54215: LD_INT 0
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
// if mpTeamGame then
54222: LD_EXP 9
54226: IFFALSE 54423
// begin first := depots [ 1 ] ;
54228: LD_ADDR_VAR 0 4
54232: PUSH
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 1
54240: ARRAY
54241: ST_TO_ADDR
// side := GetSide ( first ) ;
54242: LD_ADDR_VAR 0 6
54246: PUSH
54247: LD_VAR 0 4
54251: PPUSH
54252: CALL_OW 255
54256: ST_TO_ADDR
// for i := 1 to mpTeams do
54257: LD_ADDR_VAR 0 3
54261: PUSH
54262: DOUBLE
54263: LD_INT 1
54265: DEC
54266: ST_TO_ADDR
54267: LD_EXP 8
54271: PUSH
54272: FOR_TO
54273: IFFALSE 54307
// if side in mpTeams [ i ] then
54275: LD_VAR 0 6
54279: PUSH
54280: LD_EXP 8
54284: PUSH
54285: LD_VAR 0 3
54289: ARRAY
54290: IN
54291: IFFALSE 54305
// begin team := i ;
54293: LD_ADDR_VAR 0 5
54297: PUSH
54298: LD_VAR 0 3
54302: ST_TO_ADDR
// break ;
54303: GO 54307
// end ;
54305: GO 54272
54307: POP
54308: POP
// if not team then
54309: LD_VAR 0 5
54313: NOT
54314: IFFALSE 54318
// exit ;
54316: GO 54532
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54318: LD_EXP 32
54322: PPUSH
54323: LD_INT 81
54325: PUSH
54326: LD_VAR 0 6
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PPUSH
54335: CALL_OW 70
54339: IFFALSE 54343
// exit ;
54341: GO 54532
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54343: LD_ADDR_EXP 46
54347: PUSH
54348: LD_EXP 46
54352: PPUSH
54353: LD_VAR 0 5
54357: PPUSH
54358: LD_EXP 46
54362: PUSH
54363: LD_VAR 0 5
54367: ARRAY
54368: PUSH
54369: LD_INT 1
54371: PLUS
54372: PPUSH
54373: CALL_OW 1
54377: ST_TO_ADDR
// for i in mpTeams [ team ] do
54378: LD_ADDR_VAR 0 3
54382: PUSH
54383: LD_EXP 8
54387: PUSH
54388: LD_VAR 0 5
54392: ARRAY
54393: PUSH
54394: FOR_IN
54395: IFFALSE 54419
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54397: LD_VAR 0 3
54401: PPUSH
54402: LD_EXP 46
54406: PUSH
54407: LD_VAR 0 5
54411: ARRAY
54412: PPUSH
54413: CALL_OW 506
54417: GO 54394
54419: POP
54420: POP
// end else
54421: GO 54532
// begin first := depots [ 1 ] ;
54423: LD_ADDR_VAR 0 4
54427: PUSH
54428: LD_VAR 0 1
54432: PUSH
54433: LD_INT 1
54435: ARRAY
54436: ST_TO_ADDR
// side := GetSide ( first ) ;
54437: LD_ADDR_VAR 0 6
54441: PUSH
54442: LD_VAR 0 4
54446: PPUSH
54447: CALL_OW 255
54451: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54452: LD_EXP 32
54456: PPUSH
54457: LD_INT 81
54459: PUSH
54460: LD_VAR 0 6
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PPUSH
54469: CALL_OW 70
54473: IFFALSE 54477
// exit ;
54475: GO 54532
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54477: LD_ADDR_EXP 46
54481: PUSH
54482: LD_EXP 46
54486: PPUSH
54487: LD_VAR 0 6
54491: PPUSH
54492: LD_EXP 46
54496: PUSH
54497: LD_VAR 0 6
54501: ARRAY
54502: PUSH
54503: LD_INT 1
54505: PLUS
54506: PPUSH
54507: CALL_OW 1
54511: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54512: LD_VAR 0 6
54516: PPUSH
54517: LD_EXP 46
54521: PUSH
54522: LD_VAR 0 6
54526: ARRAY
54527: PPUSH
54528: CALL_OW 506
// end ; end ;
54532: LD_VAR 0 2
54536: RET
// function UpdateCounter ; var i ; begin
54537: LD_INT 0
54539: PPUSH
54540: PPUSH
// result := [ ] ;
54541: LD_ADDR_VAR 0 1
54545: PUSH
54546: EMPTY
54547: ST_TO_ADDR
// if mpTeamGame then
54548: LD_EXP 9
54552: IFFALSE 54619
// begin for i := 1 to mpTeams do
54554: LD_ADDR_VAR 0 2
54558: PUSH
54559: DOUBLE
54560: LD_INT 1
54562: DEC
54563: ST_TO_ADDR
54564: LD_EXP 8
54568: PUSH
54569: FOR_TO
54570: IFFALSE 54615
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54572: LD_ADDR_VAR 0 1
54576: PUSH
54577: LD_VAR 0 1
54581: PUSH
54582: LD_STRING #KingoftheHill-Team
54584: PUSH
54585: LD_VAR 0 2
54589: PUSH
54590: LD_EXP 46
54594: PUSH
54595: LD_VAR 0 2
54599: ARRAY
54600: PUSH
54601: LD_EXP 33
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: ADD
54612: ST_TO_ADDR
54613: GO 54569
54615: POP
54616: POP
// end else
54617: GO 54692
// begin for i := 1 to 8 do
54619: LD_ADDR_VAR 0 2
54623: PUSH
54624: DOUBLE
54625: LD_INT 1
54627: DEC
54628: ST_TO_ADDR
54629: LD_INT 8
54631: PUSH
54632: FOR_TO
54633: IFFALSE 54690
// if mpSidePositions [ i ] then
54635: LD_EXP 5
54639: PUSH
54640: LD_VAR 0 2
54644: ARRAY
54645: IFFALSE 54688
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54647: LD_ADDR_VAR 0 1
54651: PUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_STRING #KingoftheHill-Player
54659: PUSH
54660: LD_VAR 0 2
54664: PUSH
54665: LD_EXP 46
54669: PUSH
54670: LD_VAR 0 2
54674: ARRAY
54675: PUSH
54676: LD_EXP 33
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ADD
54687: ST_TO_ADDR
54688: GO 54632
54690: POP
54691: POP
// end ; mpDisplayStrings := result ;
54692: LD_ADDR_EXP 36
54696: PUSH
54697: LD_VAR 0 1
54701: ST_TO_ADDR
// end ;
54702: LD_VAR 0 1
54706: RET
// export function HowMuchPointsKing ( side ) ; begin
54707: LD_INT 0
54709: PPUSH
// result := HowMuchPoints ( side ) ;
54710: LD_ADDR_VAR 0 2
54714: PUSH
54715: LD_VAR 0 1
54719: PPUSH
54720: CALL 54730 0 1
54724: ST_TO_ADDR
// end ;
54725: LD_VAR 0 2
54729: RET
// function HowMuchPoints ( side ) ; var i ; begin
54730: LD_INT 0
54732: PPUSH
54733: PPUSH
// if mpTeamGame then
54734: LD_EXP 9
54738: IFFALSE 54807
// begin for i := 1 to Count ( mpTeams ) do
54740: LD_ADDR_VAR 0 3
54744: PUSH
54745: DOUBLE
54746: LD_INT 1
54748: DEC
54749: ST_TO_ADDR
54750: LD_EXP 8
54754: PPUSH
54755: CALL 5082 0 1
54759: PUSH
54760: FOR_TO
54761: IFFALSE 54803
// begin if side in mpTeams [ i ] then
54763: LD_VAR 0 1
54767: PUSH
54768: LD_EXP 8
54772: PUSH
54773: LD_VAR 0 3
54777: ARRAY
54778: IN
54779: IFFALSE 54801
// begin result := mpKingPoints [ i ] ;
54781: LD_ADDR_VAR 0 2
54785: PUSH
54786: LD_EXP 46
54790: PUSH
54791: LD_VAR 0 3
54795: ARRAY
54796: ST_TO_ADDR
// exit ;
54797: POP
54798: POP
54799: GO 54823
// end ; end ;
54801: GO 54760
54803: POP
54804: POP
// end else
54805: GO 54823
// result := mpKingPoints [ side ] ;
54807: LD_ADDR_VAR 0 2
54811: PUSH
54812: LD_EXP 46
54816: PUSH
54817: LD_VAR 0 1
54821: ARRAY
54822: ST_TO_ADDR
// end ;
54823: LD_VAR 0 2
54827: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54828: LD_EXP 37
54832: IFFALSE 54840
54834: PUSH
54835: CALL 55252 0 0
54839: AND
54840: IFFALSE 54848
54842: PUSH
54843: LD_OWVAR 4
54847: AND
54848: IFFALSE 55101
54850: GO 54852
54852: DISABLE
54853: LD_INT 0
54855: PPUSH
54856: PPUSH
// begin canWin := false ;
54857: LD_ADDR_VAR 0 2
54861: PUSH
54862: LD_INT 0
54864: ST_TO_ADDR
// if not HasPower ( your_side ) then
54865: LD_OWVAR 2
54869: PPUSH
54870: CALL 55294 0 1
54874: NOT
54875: IFFALSE 54886
// begin Multiplayer_Loose_Message ;
54877: CALL_OW 521
// enable ( mpLose ) ;
54881: LD_INT 102
54883: ENABLE_MARKED
// end else
54884: GO 55101
// begin if not EnemiesInGame then
54886: CALL 55104 0 0
54890: NOT
54891: IFFALSE 54898
// begin enable ( mpWin ) ;
54893: LD_INT 101
54895: ENABLE_MARKED
// exit ;
54896: GO 55101
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
54898: LD_ADDR_VAR 0 2
54902: PUSH
54903: LD_OWVAR 2
54907: PPUSH
54908: CALL 54730 0 1
54912: PUSH
54913: LD_EXP 33
54917: GREATEREQUAL
54918: IFFALSE 54931
54920: PUSH
54921: LD_OWVAR 2
54925: PPUSH
54926: CALL 55294 0 1
54930: AND
54931: ST_TO_ADDR
// for i := 1 to 8 do
54932: LD_ADDR_VAR 0 1
54936: PUSH
54937: DOUBLE
54938: LD_INT 1
54940: DEC
54941: ST_TO_ADDR
54942: LD_INT 8
54944: PUSH
54945: FOR_TO
54946: IFFALSE 55087
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54948: LD_EXP 5
54952: PUSH
54953: LD_VAR 0 1
54957: ARRAY
54958: IFFALSE 54971
54960: PUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 108
54970: AND
54971: IFFALSE 54985
54973: PUSH
54974: LD_VAR 0 1
54978: PUSH
54979: LD_OWVAR 2
54983: NONEQUAL
54984: AND
54985: IFFALSE 55085
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54987: LD_EXP 6
54991: PUSH
54992: LD_VAR 0 1
54996: ARRAY
54997: NOT
54998: IFTRUE 55046
55000: PUSH
55001: LD_EXP 6
55005: PUSH
55006: LD_VAR 0 1
55010: ARRAY
55011: PUSH
55012: LD_EXP 6
55016: PUSH
55017: LD_OWVAR 2
55021: ARRAY
55022: NONEQUAL
55023: IFFALSE 55045
55025: PUSH
55026: LD_OWVAR 2
55030: PPUSH
55031: LD_VAR 0 1
55035: PPUSH
55036: CALL_OW 81
55040: PUSH
55041: LD_INT 1
55043: NONEQUAL
55044: AND
55045: OR
55046: IFFALSE 55085
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55048: LD_VAR 0 1
55052: PPUSH
55053: CALL 54730 0 1
55057: PUSH
55058: LD_EXP 33
55062: GREATEREQUAL
55063: IFFALSE 55076
55065: PUSH
55066: LD_VAR 0 1
55070: PPUSH
55071: CALL 55294 0 1
55075: AND
55076: IFFALSE 55085
// begin enable ( mpLose ) ;
55078: LD_INT 102
55080: ENABLE_MARKED
// exit ;
55081: POP
55082: POP
55083: GO 55101
// end ;
55085: GO 54945
55087: POP
55088: POP
// if canWin then
55089: LD_VAR 0 2
55093: IFFALSE 55100
// enable ( mpWin ) else
55095: LD_INT 101
55097: ENABLE_MARKED
55098: GO 55101
// enable ;
55100: ENABLE
// end ; end ;
55101: PPOPN 2
55103: END
// function EnemiesInGame ; var i ; begin
55104: LD_INT 0
55106: PPUSH
55107: PPUSH
// result := false ;
55108: LD_ADDR_VAR 0 1
55112: PUSH
55113: LD_INT 0
55115: ST_TO_ADDR
// for i := 1 to 8 do
55116: LD_ADDR_VAR 0 2
55120: PUSH
55121: DOUBLE
55122: LD_INT 1
55124: DEC
55125: ST_TO_ADDR
55126: LD_INT 8
55128: PUSH
55129: FOR_TO
55130: IFFALSE 55245
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55132: LD_VAR 0 2
55136: PUSH
55137: LD_OWVAR 2
55141: NONEQUAL
55142: IFFALSE 55155
55144: PUSH
55145: LD_VAR 0 2
55149: PPUSH
55150: CALL 55294 0 1
55154: AND
55155: IFFALSE 55168
55157: PUSH
55158: LD_VAR 0 2
55162: PPUSH
55163: CALL_OW 108
55167: AND
55168: IFFALSE 55243
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55170: LD_EXP 6
55174: PUSH
55175: LD_VAR 0 2
55179: ARRAY
55180: NOT
55181: IFTRUE 55229
55183: PUSH
55184: LD_EXP 6
55188: PUSH
55189: LD_VAR 0 2
55193: ARRAY
55194: PUSH
55195: LD_EXP 6
55199: PUSH
55200: LD_OWVAR 2
55204: ARRAY
55205: NONEQUAL
55206: IFFALSE 55228
55208: PUSH
55209: LD_OWVAR 2
55213: PPUSH
55214: LD_VAR 0 2
55218: PPUSH
55219: CALL_OW 81
55223: PUSH
55224: LD_INT 1
55226: NONEQUAL
55227: AND
55228: OR
55229: IFFALSE 55243
// begin result := true ;
55231: LD_ADDR_VAR 0 1
55235: PUSH
55236: LD_INT 1
55238: ST_TO_ADDR
// exit ;
55239: POP
55240: POP
55241: GO 55247
// end ;
55243: GO 55129
55245: POP
55246: POP
// end ;
55247: LD_VAR 0 1
55251: RET
// function CanWinLoose ; begin
55252: LD_INT 0
55254: PPUSH
// result := true ;
55255: LD_ADDR_VAR 0 1
55259: PUSH
55260: LD_INT 1
55262: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55263: CALL_OW 531
55267: IFFALSE 55279
55269: PUSH
55270: CALL_OW 519
55274: PUSH
55275: LD_INT 1
55277: GREATER
55278: AND
55279: IFFALSE 55289
// result := false ;
55281: LD_ADDR_VAR 0 1
55285: PUSH
55286: LD_INT 0
55288: ST_TO_ADDR
// end ;
55289: LD_VAR 0 1
55293: RET
// function HasPower ( i ) ; begin
55294: LD_INT 0
55296: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55297: LD_ADDR_VAR 0 2
55301: PUSH
55302: LD_INT 22
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 21
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 33
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 33
55339: PUSH
55340: LD_INT 5
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PPUSH
55357: CALL_OW 69
55361: ST_TO_ADDR
// end ; end_of_file end_of_file
55362: LD_VAR 0 2
55366: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55367: LD_VAR 0 1
55371: PUSH
55372: LD_INT 200
55374: DOUBLE
55375: GREATEREQUAL
55376: IFFALSE 55384
55378: LD_INT 299
55380: DOUBLE
55381: LESSEQUAL
55382: IFTRUE 55386
55384: GO 55418
55386: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55387: LD_VAR 0 1
55391: PPUSH
55392: LD_VAR 0 2
55396: PPUSH
55397: LD_VAR 0 3
55401: PPUSH
55402: LD_VAR 0 4
55406: PPUSH
55407: LD_VAR 0 5
55411: PPUSH
55412: CALL 56199 0 5
55416: GO 55495
55418: LD_INT 300
55420: DOUBLE
55421: GREATEREQUAL
55422: IFFALSE 55430
55424: LD_INT 399
55426: DOUBLE
55427: LESSEQUAL
55428: IFTRUE 55432
55430: GO 55494
55432: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55433: LD_VAR 0 1
55437: PPUSH
55438: LD_VAR 0 2
55442: PPUSH
55443: LD_VAR 0 3
55447: PPUSH
55448: LD_VAR 0 4
55452: PPUSH
55453: LD_VAR 0 5
55457: PPUSH
55458: LD_VAR 0 6
55462: PPUSH
55463: LD_VAR 0 7
55467: PPUSH
55468: LD_VAR 0 8
55472: PPUSH
55473: LD_VAR 0 9
55477: PPUSH
55478: LD_VAR 0 10
55482: PPUSH
55483: LD_VAR 0 11
55487: PPUSH
55488: CALL 61604 0 11
55492: GO 55495
55494: POP
// end ;
55495: PPOPN 11
55497: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55498: LD_VAR 0 1
55502: PPUSH
55503: LD_VAR 0 2
55507: PPUSH
55508: LD_VAR 0 3
55512: PPUSH
55513: LD_VAR 0 4
55517: PPUSH
55518: LD_VAR 0 5
55522: PPUSH
55523: CALL 55580 0 5
// end ; end_of_file
55527: PPOPN 5
55529: END
// export function SOS_UnitDestroyed ( un ) ; begin
55530: LD_INT 0
55532: PPUSH
// ComRadiation ( un ) ;
55533: LD_VAR 0 1
55537: PPUSH
55538: CALL 56619 0 1
// end ;
55542: LD_VAR 0 2
55546: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55547: LD_INT 0
55549: PPUSH
// ComRadiation ( un ) ;
55550: LD_VAR 0 1
55554: PPUSH
55555: CALL 56619 0 1
// end ;
55559: LD_VAR 0 2
55563: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55564: LD_INT 0
55566: PPUSH
// end ;
55567: LD_VAR 0 4
55571: RET
// export function SOS_Command ( cmd ) ; begin
55572: LD_INT 0
55574: PPUSH
// end ;
55575: LD_VAR 0 2
55579: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55580: LD_INT 0
55582: PPUSH
// end ;
55583: LD_VAR 0 6
55587: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55588: LD_INT 0
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
// if not vehicle or not factory then
55594: LD_VAR 0 1
55598: NOT
55599: IFTRUE 55608
55601: PUSH
55602: LD_VAR 0 2
55606: NOT
55607: OR
55608: IFFALSE 55612
// exit ;
55610: GO 56194
// if not factoryWaypoints then
55612: LD_EXP 57
55616: NOT
55617: IFFALSE 55621
// exit ;
55619: GO 56194
// for i := 1 to Count ( factoryWaypoints ) do
55621: LD_ADDR_VAR 0 4
55625: PUSH
55626: DOUBLE
55627: LD_INT 1
55629: DEC
55630: ST_TO_ADDR
55631: LD_EXP 57
55635: PPUSH
55636: CALL 5082 0 1
55640: PUSH
55641: FOR_TO
55642: IFFALSE 56192
// if factoryWaypoints [ i ] [ 2 ] = factory then
55644: LD_EXP 57
55648: PUSH
55649: LD_VAR 0 4
55653: ARRAY
55654: PUSH
55655: LD_INT 2
55657: ARRAY
55658: PUSH
55659: LD_VAR 0 2
55663: EQUAL
55664: IFFALSE 56190
// begin if GetControl ( vehicle ) = control_manual then
55666: LD_VAR 0 1
55670: PPUSH
55671: CALL_OW 263
55675: PUSH
55676: LD_INT 1
55678: EQUAL
55679: IFFALSE 56043
// begin driver := IsDrivenBy ( vehicle ) ;
55681: LD_ADDR_VAR 0 5
55685: PUSH
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 311
55695: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55696: LD_VAR 0 5
55700: PUSH
55701: LD_EXP 58
55705: IN
55706: IFTRUE 55720
55708: PUSH
55709: LD_VAR 0 1
55713: PUSH
55714: LD_EXP 58
55718: IN
55719: OR
55720: IFFALSE 55726
// exit ;
55722: POP
55723: POP
55724: GO 56194
// if not HasTask ( driver ) then
55726: LD_VAR 0 5
55730: PPUSH
55731: CALL_OW 314
55735: NOT
55736: IFFALSE 56041
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55738: LD_ADDR_EXP 58
55742: PUSH
55743: LD_EXP 58
55747: PPUSH
55748: LD_VAR 0 5
55752: PPUSH
55753: CALL 41014 0 2
55757: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55758: LD_ADDR_EXP 58
55762: PUSH
55763: LD_EXP 58
55767: PPUSH
55768: LD_VAR 0 1
55772: PPUSH
55773: CALL 41014 0 2
55777: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55778: LD_ADDR_VAR 0 6
55782: PUSH
55783: LD_EXP 57
55787: PUSH
55788: LD_VAR 0 4
55792: ARRAY
55793: PUSH
55794: LD_INT 3
55796: ARRAY
55797: PPUSH
55798: LD_EXP 57
55802: PUSH
55803: LD_VAR 0 4
55807: ARRAY
55808: PUSH
55809: LD_INT 4
55811: ARRAY
55812: PPUSH
55813: CALL_OW 428
55817: ST_TO_ADDR
// if hex then
55818: LD_VAR 0 6
55822: IFFALSE 55840
// ComMoveUnit ( driver , hex ) else
55824: LD_VAR 0 5
55828: PPUSH
55829: LD_VAR 0 6
55833: PPUSH
55834: CALL_OW 112
55838: GO 55924
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55840: LD_VAR 0 1
55844: PPUSH
55845: LD_EXP 57
55849: PUSH
55850: LD_VAR 0 4
55854: ARRAY
55855: PUSH
55856: LD_INT 3
55858: ARRAY
55859: PPUSH
55860: LD_EXP 57
55864: PUSH
55865: LD_VAR 0 4
55869: ARRAY
55870: PUSH
55871: LD_INT 4
55873: ARRAY
55874: PPUSH
55875: CALL_OW 297
55879: PUSH
55880: LD_INT 0
55882: GREATER
55883: IFFALSE 55924
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55885: LD_VAR 0 5
55889: PPUSH
55890: LD_EXP 57
55894: PUSH
55895: LD_VAR 0 4
55899: ARRAY
55900: PUSH
55901: LD_INT 3
55903: ARRAY
55904: PPUSH
55905: LD_EXP 57
55909: PUSH
55910: LD_VAR 0 4
55914: ARRAY
55915: PUSH
55916: LD_INT 4
55918: ARRAY
55919: PPUSH
55920: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55924: LD_VAR 0 5
55928: PPUSH
55929: CALL_OW 181
// if Multiplayer then
55933: LD_OWVAR 4
55937: IFFALSE 55986
// begin repeat wait ( 10 ) ;
55939: LD_INT 10
55941: PPUSH
55942: CALL_OW 67
// until not IsInUnit ( driver ) ;
55946: LD_VAR 0 5
55950: PPUSH
55951: CALL_OW 310
55955: NOT
55956: IFFALSE 55939
// if not HasTask ( driver ) then
55958: LD_VAR 0 5
55962: PPUSH
55963: CALL_OW 314
55967: NOT
55968: IFFALSE 55984
// ComEnterUnit ( driver , factory ) ;
55970: LD_VAR 0 5
55974: PPUSH
55975: LD_VAR 0 2
55979: PPUSH
55980: CALL_OW 120
// end else
55984: GO 56000
// AddComEnterUnit ( driver , factory ) ;
55986: LD_VAR 0 5
55990: PPUSH
55991: LD_VAR 0 2
55995: PPUSH
55996: CALL_OW 180
// wait ( 0 0$1 ) ;
56000: LD_INT 35
56002: PPUSH
56003: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56007: LD_ADDR_EXP 58
56011: PUSH
56012: LD_EXP 58
56016: PUSH
56017: LD_VAR 0 5
56021: DIFF
56022: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56023: LD_ADDR_EXP 58
56027: PUSH
56028: LD_EXP 58
56032: PUSH
56033: LD_VAR 0 1
56037: DIFF
56038: ST_TO_ADDR
// break ;
56039: GO 56192
// end ; end else
56041: GO 56190
// if GetControl ( vehicle ) = control_remote then
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 263
56052: PUSH
56053: LD_INT 2
56055: EQUAL
56056: IFFALSE 56142
// begin wait ( 0 0$2 ) ;
56058: LD_INT 70
56060: PPUSH
56061: CALL_OW 67
// repeat wait ( 10 ) ;
56065: LD_INT 10
56067: PPUSH
56068: CALL_OW 67
// Connect ( vehicle ) ;
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL 11326 0 1
// until IsControledBy ( vehicle ) ;
56081: LD_VAR 0 1
56085: PPUSH
56086: CALL_OW 312
56090: IFFALSE 56065
// wait ( 10 ) ;
56092: LD_INT 10
56094: PPUSH
56095: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_EXP 57
56108: PUSH
56109: LD_VAR 0 4
56113: ARRAY
56114: PUSH
56115: LD_INT 3
56117: ARRAY
56118: PPUSH
56119: LD_EXP 57
56123: PUSH
56124: LD_VAR 0 4
56128: ARRAY
56129: PUSH
56130: LD_INT 4
56132: ARRAY
56133: PPUSH
56134: CALL_OW 111
// break ;
56138: GO 56192
// end else
56140: GO 56190
// begin wait ( 0 0$3 ) ;
56142: LD_INT 105
56144: PPUSH
56145: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56149: LD_VAR 0 1
56153: PPUSH
56154: LD_EXP 57
56158: PUSH
56159: LD_VAR 0 4
56163: ARRAY
56164: PUSH
56165: LD_INT 3
56167: ARRAY
56168: PPUSH
56169: LD_EXP 57
56173: PUSH
56174: LD_VAR 0 4
56178: ARRAY
56179: PUSH
56180: LD_INT 4
56182: ARRAY
56183: PPUSH
56184: CALL_OW 111
// break ;
56188: GO 56192
// end ; end ;
56190: GO 55641
56192: POP
56193: POP
// end ;
56194: LD_VAR 0 3
56198: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56199: LD_INT 0
56201: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56202: LD_VAR 0 1
56206: PUSH
56207: LD_INT 250
56209: EQUAL
56210: IFFALSE 56227
56212: PUSH
56213: LD_VAR 0 2
56217: PPUSH
56218: CALL_OW 264
56222: PUSH
56223: LD_INT 81
56225: EQUAL
56226: AND
56227: IFFALSE 56248
// MinerPlaceMine ( unit , x , y ) ;
56229: LD_VAR 0 2
56233: PPUSH
56234: LD_VAR 0 4
56238: PPUSH
56239: LD_VAR 0 5
56243: PPUSH
56244: CALL 59380 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56248: LD_VAR 0 1
56252: PUSH
56253: LD_INT 251
56255: EQUAL
56256: IFFALSE 56273
56258: PUSH
56259: LD_VAR 0 2
56263: PPUSH
56264: CALL_OW 264
56268: PUSH
56269: LD_INT 81
56271: EQUAL
56272: AND
56273: IFFALSE 56294
// MinerDetonateMine ( unit , x , y ) ;
56275: LD_VAR 0 2
56279: PPUSH
56280: LD_VAR 0 4
56284: PPUSH
56285: LD_VAR 0 5
56289: PPUSH
56290: CALL 59659 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56294: LD_VAR 0 1
56298: PUSH
56299: LD_INT 252
56301: EQUAL
56302: IFFALSE 56319
56304: PUSH
56305: LD_VAR 0 2
56309: PPUSH
56310: CALL_OW 264
56314: PUSH
56315: LD_INT 81
56317: EQUAL
56318: AND
56319: IFFALSE 56340
// MinerCreateMinefield ( unit , x , y ) ;
56321: LD_VAR 0 2
56325: PPUSH
56326: LD_VAR 0 4
56330: PPUSH
56331: LD_VAR 0 5
56335: PPUSH
56336: CALL 60078 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56340: LD_VAR 0 1
56344: PUSH
56345: LD_INT 253
56347: EQUAL
56348: IFFALSE 56365
56350: PUSH
56351: LD_VAR 0 2
56355: PPUSH
56356: CALL_OW 257
56360: PUSH
56361: LD_INT 5
56363: EQUAL
56364: AND
56365: IFFALSE 56386
// ComBinocular ( unit , x , y ) ;
56367: LD_VAR 0 2
56371: PPUSH
56372: LD_VAR 0 4
56376: PPUSH
56377: LD_VAR 0 5
56381: PPUSH
56382: CALL 60453 0 3
// if selectedUnit then
56386: LD_VAR 0 3
56390: IFFALSE 56450
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 254
56399: EQUAL
56400: IFFALSE 56417
56402: PUSH
56403: LD_VAR 0 2
56407: PPUSH
56408: CALL_OW 264
56412: PUSH
56413: LD_INT 99
56415: EQUAL
56416: AND
56417: IFFALSE 56434
56419: PUSH
56420: LD_VAR 0 3
56424: PPUSH
56425: CALL_OW 263
56429: PUSH
56430: LD_INT 3
56432: EQUAL
56433: AND
56434: IFFALSE 56450
// HackDestroyVehicle ( unit , selectedUnit ) ;
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: CALL 58740 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56450: LD_VAR 0 1
56454: PUSH
56455: LD_INT 255
56457: EQUAL
56458: IFFALSE 56482
56460: PUSH
56461: LD_VAR 0 2
56465: PPUSH
56466: CALL_OW 264
56470: PUSH
56471: LD_INT 14
56473: PUSH
56474: LD_INT 53
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: IN
56481: AND
56482: IFFALSE 56500
56484: PUSH
56485: LD_VAR 0 4
56489: PPUSH
56490: LD_VAR 0 5
56494: PPUSH
56495: CALL_OW 488
56499: AND
56500: IFFALSE 56524
// CutTreeXYR ( unit , x , y , 12 ) ;
56502: LD_VAR 0 2
56506: PPUSH
56507: LD_VAR 0 4
56511: PPUSH
56512: LD_VAR 0 5
56516: PPUSH
56517: LD_INT 12
56519: PPUSH
56520: CALL 56715 0 4
// if cmd = 256 then
56524: LD_VAR 0 1
56528: PUSH
56529: LD_INT 256
56531: EQUAL
56532: IFFALSE 56553
// SetFactoryWaypoint ( unit , x , y ) ;
56534: LD_VAR 0 2
56538: PPUSH
56539: LD_VAR 0 4
56543: PPUSH
56544: LD_VAR 0 5
56548: PPUSH
56549: CALL 61612 0 3
// if cmd = 257 then
56553: LD_VAR 0 1
56557: PUSH
56558: LD_INT 257
56560: EQUAL
56561: IFFALSE 56582
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56563: LD_VAR 0 2
56567: PPUSH
56568: LD_VAR 0 4
56572: PPUSH
56573: LD_VAR 0 5
56577: PPUSH
56578: CALL 62108 0 3
// if cmd = 258 then
56582: LD_VAR 0 1
56586: PUSH
56587: LD_INT 258
56589: EQUAL
56590: IFFALSE 56614
// BurnTreeXYR ( unit , x , y , 8 ) ;
56592: LD_VAR 0 2
56596: PPUSH
56597: LD_VAR 0 4
56601: PPUSH
56602: LD_VAR 0 5
56606: PPUSH
56607: LD_INT 8
56609: PPUSH
56610: CALL 57115 0 4
// end ;
56614: LD_VAR 0 6
56618: RET
// export function ComRadiation ( un ) ; var eff ; begin
56619: LD_INT 0
56621: PPUSH
56622: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56623: LD_VAR 0 1
56627: PPUSH
56628: CALL_OW 264
56632: PUSH
56633: LD_INT 91
56635: NONEQUAL
56636: IFFALSE 56640
// exit ;
56638: GO 56710
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56640: LD_INT 68
56642: PPUSH
56643: LD_VAR 0 1
56647: PPUSH
56648: CALL_OW 255
56652: PPUSH
56653: CALL_OW 321
56657: PUSH
56658: LD_INT 2
56660: EQUAL
56661: IFFALSE 56673
// eff := 50 else
56663: LD_ADDR_VAR 0 3
56667: PUSH
56668: LD_INT 50
56670: ST_TO_ADDR
56671: GO 56681
// eff := 25 ;
56673: LD_ADDR_VAR 0 3
56677: PUSH
56678: LD_INT 25
56680: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56681: LD_VAR 0 1
56685: PPUSH
56686: CALL_OW 250
56690: PPUSH
56691: LD_VAR 0 1
56695: PPUSH
56696: CALL_OW 251
56700: PPUSH
56701: LD_VAR 0 3
56705: PPUSH
56706: CALL_OW 495
// end ;
56710: LD_VAR 0 2
56714: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56715: LD_INT 0
56717: PPUSH
56718: PPUSH
56719: PPUSH
56720: PPUSH
56721: PPUSH
56722: PPUSH
56723: PPUSH
56724: PPUSH
56725: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56726: LD_VAR 0 1
56730: PPUSH
56731: CALL_OW 302
56735: NOT
56736: IFTRUE 56755
56738: PUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: LD_VAR 0 3
56748: PPUSH
56749: CALL_OW 488
56753: NOT
56754: OR
56755: IFTRUE 56764
56757: PUSH
56758: LD_VAR 0 4
56762: NOT
56763: OR
56764: IFFALSE 56768
// exit ;
56766: GO 57110
// list := [ ] ;
56768: LD_ADDR_VAR 0 13
56772: PUSH
56773: EMPTY
56774: ST_TO_ADDR
// if x - r < 0 then
56775: LD_VAR 0 2
56779: PUSH
56780: LD_VAR 0 4
56784: MINUS
56785: PUSH
56786: LD_INT 0
56788: LESS
56789: IFFALSE 56801
// min_x := 0 else
56791: LD_ADDR_VAR 0 7
56795: PUSH
56796: LD_INT 0
56798: ST_TO_ADDR
56799: GO 56817
// min_x := x - r ;
56801: LD_ADDR_VAR 0 7
56805: PUSH
56806: LD_VAR 0 2
56810: PUSH
56811: LD_VAR 0 4
56815: MINUS
56816: ST_TO_ADDR
// if y - r < 0 then
56817: LD_VAR 0 3
56821: PUSH
56822: LD_VAR 0 4
56826: MINUS
56827: PUSH
56828: LD_INT 0
56830: LESS
56831: IFFALSE 56843
// min_y := 0 else
56833: LD_ADDR_VAR 0 8
56837: PUSH
56838: LD_INT 0
56840: ST_TO_ADDR
56841: GO 56859
// min_y := y - r ;
56843: LD_ADDR_VAR 0 8
56847: PUSH
56848: LD_VAR 0 3
56852: PUSH
56853: LD_VAR 0 4
56857: MINUS
56858: ST_TO_ADDR
// max_x := x + r ;
56859: LD_ADDR_VAR 0 9
56863: PUSH
56864: LD_VAR 0 2
56868: PUSH
56869: LD_VAR 0 4
56873: PLUS
56874: ST_TO_ADDR
// max_y := y + r ;
56875: LD_ADDR_VAR 0 10
56879: PUSH
56880: LD_VAR 0 3
56884: PUSH
56885: LD_VAR 0 4
56889: PLUS
56890: ST_TO_ADDR
// for _x = min_x to max_x do
56891: LD_ADDR_VAR 0 11
56895: PUSH
56896: DOUBLE
56897: LD_VAR 0 7
56901: DEC
56902: ST_TO_ADDR
56903: LD_VAR 0 9
56907: PUSH
56908: FOR_TO
56909: IFFALSE 57028
// for _y = min_y to max_y do
56911: LD_ADDR_VAR 0 12
56915: PUSH
56916: DOUBLE
56917: LD_VAR 0 8
56921: DEC
56922: ST_TO_ADDR
56923: LD_VAR 0 10
56927: PUSH
56928: FOR_TO
56929: IFFALSE 57024
// begin if not ValidHex ( _x , _y ) then
56931: LD_VAR 0 11
56935: PPUSH
56936: LD_VAR 0 12
56940: PPUSH
56941: CALL_OW 488
56945: NOT
56946: IFFALSE 56950
// continue ;
56948: GO 56928
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56950: LD_VAR 0 11
56954: PPUSH
56955: LD_VAR 0 12
56959: PPUSH
56960: CALL_OW 351
56964: IFFALSE 56982
56966: PUSH
56967: LD_VAR 0 11
56971: PPUSH
56972: LD_VAR 0 12
56976: PPUSH
56977: CALL_OW 554
56981: AND
56982: IFFALSE 57022
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56984: LD_ADDR_VAR 0 13
56988: PUSH
56989: LD_VAR 0 13
56993: PPUSH
56994: LD_VAR 0 13
56998: PUSH
56999: LD_INT 1
57001: PLUS
57002: PPUSH
57003: LD_VAR 0 11
57007: PUSH
57008: LD_VAR 0 12
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PPUSH
57017: CALL_OW 2
57021: ST_TO_ADDR
// end ;
57022: GO 56928
57024: POP
57025: POP
57026: GO 56908
57028: POP
57029: POP
// if not list then
57030: LD_VAR 0 13
57034: NOT
57035: IFFALSE 57039
// exit ;
57037: GO 57110
// for i in list do
57039: LD_ADDR_VAR 0 6
57043: PUSH
57044: LD_VAR 0 13
57048: PUSH
57049: FOR_IN
57050: IFFALSE 57108
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57052: LD_VAR 0 1
57056: PPUSH
57057: LD_STRING M
57059: PUSH
57060: LD_VAR 0 6
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PUSH
57069: LD_VAR 0 6
57073: PUSH
57074: LD_INT 2
57076: ARRAY
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: PPUSH
57102: CALL_OW 447
57106: GO 57049
57108: POP
57109: POP
// end ;
57110: LD_VAR 0 5
57114: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57115: LD_INT 0
57117: PPUSH
57118: PPUSH
57119: PPUSH
57120: PPUSH
57121: PPUSH
57122: PPUSH
57123: PPUSH
57124: PPUSH
57125: PPUSH
57126: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57127: LD_VAR 0 1
57131: PPUSH
57132: CALL_OW 302
57136: NOT
57137: IFTRUE 57156
57139: PUSH
57140: LD_VAR 0 2
57144: PPUSH
57145: LD_VAR 0 3
57149: PPUSH
57150: CALL_OW 488
57154: NOT
57155: OR
57156: IFTRUE 57165
57158: PUSH
57159: LD_VAR 0 4
57163: NOT
57164: OR
57165: IFFALSE 57169
// exit ;
57167: GO 57686
// list := [ ] ;
57169: LD_ADDR_VAR 0 13
57173: PUSH
57174: EMPTY
57175: ST_TO_ADDR
// if x - r < 0 then
57176: LD_VAR 0 2
57180: PUSH
57181: LD_VAR 0 4
57185: MINUS
57186: PUSH
57187: LD_INT 0
57189: LESS
57190: IFFALSE 57202
// min_x := 0 else
57192: LD_ADDR_VAR 0 7
57196: PUSH
57197: LD_INT 0
57199: ST_TO_ADDR
57200: GO 57218
// min_x := x - r ;
57202: LD_ADDR_VAR 0 7
57206: PUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_VAR 0 4
57216: MINUS
57217: ST_TO_ADDR
// if y - r < 0 then
57218: LD_VAR 0 3
57222: PUSH
57223: LD_VAR 0 4
57227: MINUS
57228: PUSH
57229: LD_INT 0
57231: LESS
57232: IFFALSE 57244
// min_y := 0 else
57234: LD_ADDR_VAR 0 8
57238: PUSH
57239: LD_INT 0
57241: ST_TO_ADDR
57242: GO 57260
// min_y := y - r ;
57244: LD_ADDR_VAR 0 8
57248: PUSH
57249: LD_VAR 0 3
57253: PUSH
57254: LD_VAR 0 4
57258: MINUS
57259: ST_TO_ADDR
// max_x := x + r ;
57260: LD_ADDR_VAR 0 9
57264: PUSH
57265: LD_VAR 0 2
57269: PUSH
57270: LD_VAR 0 4
57274: PLUS
57275: ST_TO_ADDR
// max_y := y + r ;
57276: LD_ADDR_VAR 0 10
57280: PUSH
57281: LD_VAR 0 3
57285: PUSH
57286: LD_VAR 0 4
57290: PLUS
57291: ST_TO_ADDR
// for _x = min_x to max_x do
57292: LD_ADDR_VAR 0 11
57296: PUSH
57297: DOUBLE
57298: LD_VAR 0 7
57302: DEC
57303: ST_TO_ADDR
57304: LD_VAR 0 9
57308: PUSH
57309: FOR_TO
57310: IFFALSE 57429
// for _y = min_y to max_y do
57312: LD_ADDR_VAR 0 12
57316: PUSH
57317: DOUBLE
57318: LD_VAR 0 8
57322: DEC
57323: ST_TO_ADDR
57324: LD_VAR 0 10
57328: PUSH
57329: FOR_TO
57330: IFFALSE 57425
// begin if not ValidHex ( _x , _y ) then
57332: LD_VAR 0 11
57336: PPUSH
57337: LD_VAR 0 12
57341: PPUSH
57342: CALL_OW 488
57346: NOT
57347: IFFALSE 57351
// continue ;
57349: GO 57329
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57351: LD_VAR 0 11
57355: PPUSH
57356: LD_VAR 0 12
57360: PPUSH
57361: CALL_OW 351
57365: IFFALSE 57383
57367: PUSH
57368: LD_VAR 0 11
57372: PPUSH
57373: LD_VAR 0 12
57377: PPUSH
57378: CALL_OW 554
57382: AND
57383: IFFALSE 57423
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57385: LD_ADDR_VAR 0 13
57389: PUSH
57390: LD_VAR 0 13
57394: PPUSH
57395: LD_VAR 0 13
57399: PUSH
57400: LD_INT 1
57402: PLUS
57403: PPUSH
57404: LD_VAR 0 11
57408: PUSH
57409: LD_VAR 0 12
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PPUSH
57418: CALL_OW 2
57422: ST_TO_ADDR
// end ;
57423: GO 57329
57425: POP
57426: POP
57427: GO 57309
57429: POP
57430: POP
// if not list then
57431: LD_VAR 0 13
57435: NOT
57436: IFFALSE 57440
// exit ;
57438: GO 57686
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57440: LD_ADDR_VAR 0 13
57444: PUSH
57445: LD_VAR 0 1
57449: PPUSH
57450: LD_VAR 0 13
57454: PPUSH
57455: LD_INT 1
57457: PPUSH
57458: LD_INT 1
57460: PPUSH
57461: CALL 8454 0 4
57465: ST_TO_ADDR
// ComStop ( flame ) ;
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 141
// for i in list do
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: LD_VAR 0 13
57484: PUSH
57485: FOR_IN
57486: IFFALSE 57517
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57488: LD_VAR 0 1
57492: PPUSH
57493: LD_VAR 0 6
57497: PUSH
57498: LD_INT 1
57500: ARRAY
57501: PPUSH
57502: LD_VAR 0 6
57506: PUSH
57507: LD_INT 2
57509: ARRAY
57510: PPUSH
57511: CALL_OW 176
57515: GO 57485
57517: POP
57518: POP
// repeat wait ( 0 0$1 ) ;
57519: LD_INT 35
57521: PPUSH
57522: CALL_OW 67
// task := GetTaskList ( flame ) ;
57526: LD_ADDR_VAR 0 14
57530: PUSH
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 437
57540: ST_TO_ADDR
// if not task then
57541: LD_VAR 0 14
57545: NOT
57546: IFFALSE 57550
// exit ;
57548: GO 57686
// if task [ 1 ] [ 1 ] <> | then
57550: LD_VAR 0 14
57554: PUSH
57555: LD_INT 1
57557: ARRAY
57558: PUSH
57559: LD_INT 1
57561: ARRAY
57562: PUSH
57563: LD_STRING |
57565: NONEQUAL
57566: IFFALSE 57570
// exit ;
57568: GO 57686
// _x := task [ 1 ] [ 2 ] ;
57570: LD_ADDR_VAR 0 11
57574: PUSH
57575: LD_VAR 0 14
57579: PUSH
57580: LD_INT 1
57582: ARRAY
57583: PUSH
57584: LD_INT 2
57586: ARRAY
57587: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57588: LD_ADDR_VAR 0 12
57592: PUSH
57593: LD_VAR 0 14
57597: PUSH
57598: LD_INT 1
57600: ARRAY
57601: PUSH
57602: LD_INT 3
57604: ARRAY
57605: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57606: LD_VAR 0 11
57610: PPUSH
57611: LD_VAR 0 12
57615: PPUSH
57616: CALL_OW 351
57620: NOT
57621: IFTRUE 57640
57623: PUSH
57624: LD_VAR 0 11
57628: PPUSH
57629: LD_VAR 0 12
57633: PPUSH
57634: CALL_OW 554
57638: NOT
57639: OR
57640: IFFALSE 57674
// begin task := Delete ( task , 1 ) ;
57642: LD_ADDR_VAR 0 14
57646: PUSH
57647: LD_VAR 0 14
57651: PPUSH
57652: LD_INT 1
57654: PPUSH
57655: CALL_OW 3
57659: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57660: LD_VAR 0 1
57664: PPUSH
57665: LD_VAR 0 14
57669: PPUSH
57670: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57674: LD_VAR 0 1
57678: PPUSH
57679: CALL_OW 314
57683: NOT
57684: IFFALSE 57519
// end ;
57686: LD_VAR 0 5
57690: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57691: LD_EXP 47
57695: NOT
57696: IFFALSE 57746
57698: GO 57700
57700: DISABLE
// begin initHack := true ;
57701: LD_ADDR_EXP 47
57705: PUSH
57706: LD_INT 1
57708: ST_TO_ADDR
// hackTanks := [ ] ;
57709: LD_ADDR_EXP 48
57713: PUSH
57714: EMPTY
57715: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57716: LD_ADDR_EXP 49
57720: PUSH
57721: EMPTY
57722: ST_TO_ADDR
// hackLimit := 3 ;
57723: LD_ADDR_EXP 50
57727: PUSH
57728: LD_INT 3
57730: ST_TO_ADDR
// hackDist := 12 ;
57731: LD_ADDR_EXP 51
57735: PUSH
57736: LD_INT 12
57738: ST_TO_ADDR
// hackCounter := [ ] ;
57739: LD_ADDR_EXP 52
57743: PUSH
57744: EMPTY
57745: ST_TO_ADDR
// end ;
57746: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57747: LD_EXP 47
57751: IFFALSE 57769
57753: PUSH
57754: LD_INT 34
57756: PUSH
57757: LD_INT 99
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PPUSH
57764: CALL_OW 69
57768: AND
57769: IFFALSE 58022
57771: GO 57773
57773: DISABLE
57774: LD_INT 0
57776: PPUSH
57777: PPUSH
// begin enable ;
57778: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57779: LD_ADDR_VAR 0 1
57783: PUSH
57784: LD_INT 34
57786: PUSH
57787: LD_INT 99
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 69
57798: PUSH
57799: FOR_IN
57800: IFFALSE 58020
// begin if not i in hackTanks then
57802: LD_VAR 0 1
57806: PUSH
57807: LD_EXP 48
57811: IN
57812: NOT
57813: IFFALSE 57896
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57815: LD_ADDR_EXP 48
57819: PUSH
57820: LD_EXP 48
57824: PPUSH
57825: LD_EXP 48
57829: PUSH
57830: LD_INT 1
57832: PLUS
57833: PPUSH
57834: LD_VAR 0 1
57838: PPUSH
57839: CALL_OW 1
57843: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57844: LD_ADDR_EXP 49
57848: PUSH
57849: LD_EXP 49
57853: PPUSH
57854: LD_EXP 49
57858: PUSH
57859: LD_INT 1
57861: PLUS
57862: PPUSH
57863: EMPTY
57864: PPUSH
57865: CALL_OW 1
57869: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57870: LD_ADDR_EXP 52
57874: PUSH
57875: LD_EXP 52
57879: PPUSH
57880: LD_EXP 52
57884: PUSH
57885: LD_INT 1
57887: PLUS
57888: PPUSH
57889: EMPTY
57890: PPUSH
57891: CALL_OW 1
57895: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57896: LD_VAR 0 1
57900: PPUSH
57901: CALL_OW 302
57905: NOT
57906: IFFALSE 57919
// begin HackUnlinkAll ( i ) ;
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL 58025 0 1
// continue ;
57917: GO 57799
// end ; HackCheckCapturedStatus ( i ) ;
57919: LD_VAR 0 1
57923: PPUSH
57924: CALL 58470 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57928: LD_ADDR_VAR 0 2
57932: PUSH
57933: LD_INT 81
57935: PUSH
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 255
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 33
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 91
57962: PUSH
57963: LD_VAR 0 1
57967: PUSH
57968: LD_EXP 51
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 50
57980: PUSH
57981: EMPTY
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: PPUSH
57990: CALL_OW 69
57994: ST_TO_ADDR
// if not tmp then
57995: LD_VAR 0 2
57999: NOT
58000: IFFALSE 58004
// continue ;
58002: GO 57799
// HackLink ( i , tmp ) ;
58004: LD_VAR 0 1
58008: PPUSH
58009: LD_VAR 0 2
58013: PPUSH
58014: CALL 58161 0 2
// end ;
58018: GO 57799
58020: POP
58021: POP
// end ;
58022: PPOPN 2
58024: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58025: LD_INT 0
58027: PPUSH
58028: PPUSH
58029: PPUSH
// if not hack in hackTanks then
58030: LD_VAR 0 1
58034: PUSH
58035: LD_EXP 48
58039: IN
58040: NOT
58041: IFFALSE 58045
// exit ;
58043: GO 58156
// index := GetElementIndex ( hackTanks , hack ) ;
58045: LD_ADDR_VAR 0 4
58049: PUSH
58050: LD_EXP 48
58054: PPUSH
58055: LD_VAR 0 1
58059: PPUSH
58060: CALL 7749 0 2
58064: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58065: LD_EXP 49
58069: PUSH
58070: LD_VAR 0 4
58074: ARRAY
58075: IFFALSE 58156
// begin for i in hackTanksCaptured [ index ] do
58077: LD_ADDR_VAR 0 3
58081: PUSH
58082: LD_EXP 49
58086: PUSH
58087: LD_VAR 0 4
58091: ARRAY
58092: PUSH
58093: FOR_IN
58094: IFFALSE 58120
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58096: LD_VAR 0 3
58100: PUSH
58101: LD_INT 1
58103: ARRAY
58104: PPUSH
58105: LD_VAR 0 3
58109: PUSH
58110: LD_INT 2
58112: ARRAY
58113: PPUSH
58114: CALL_OW 235
58118: GO 58093
58120: POP
58121: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58122: LD_ADDR_EXP 49
58126: PUSH
58127: LD_EXP 49
58131: PPUSH
58132: LD_VAR 0 4
58136: PPUSH
58137: EMPTY
58138: PPUSH
58139: CALL_OW 1
58143: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58144: LD_VAR 0 1
58148: PPUSH
58149: LD_INT 0
58151: PPUSH
58152: CALL_OW 505
// end ; end ;
58156: LD_VAR 0 2
58160: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58161: LD_INT 0
58163: PPUSH
58164: PPUSH
58165: PPUSH
// if not hack in hackTanks or not vehicles then
58166: LD_VAR 0 1
58170: PUSH
58171: LD_EXP 48
58175: IN
58176: NOT
58177: IFTRUE 58186
58179: PUSH
58180: LD_VAR 0 2
58184: NOT
58185: OR
58186: IFFALSE 58190
// exit ;
58188: GO 58465
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58190: LD_ADDR_VAR 0 2
58194: PUSH
58195: LD_VAR 0 1
58199: PPUSH
58200: LD_VAR 0 2
58204: PPUSH
58205: LD_INT 1
58207: PPUSH
58208: LD_INT 1
58210: PPUSH
58211: CALL 8401 0 4
58215: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58216: LD_ADDR_VAR 0 5
58220: PUSH
58221: LD_EXP 48
58225: PPUSH
58226: LD_VAR 0 1
58230: PPUSH
58231: CALL 7749 0 2
58235: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58236: LD_EXP 49
58240: PUSH
58241: LD_VAR 0 5
58245: ARRAY
58246: PUSH
58247: LD_EXP 50
58251: LESS
58252: IFFALSE 58441
// begin for i := 1 to vehicles do
58254: LD_ADDR_VAR 0 4
58258: PUSH
58259: DOUBLE
58260: LD_INT 1
58262: DEC
58263: ST_TO_ADDR
58264: LD_VAR 0 2
58268: PUSH
58269: FOR_TO
58270: IFFALSE 58439
// begin if hackTanksCaptured [ index ] = hackLimit then
58272: LD_EXP 49
58276: PUSH
58277: LD_VAR 0 5
58281: ARRAY
58282: PUSH
58283: LD_EXP 50
58287: EQUAL
58288: IFFALSE 58292
// break ;
58290: GO 58439
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58292: LD_ADDR_EXP 52
58296: PUSH
58297: LD_EXP 52
58301: PPUSH
58302: LD_VAR 0 5
58306: PPUSH
58307: LD_EXP 52
58311: PUSH
58312: LD_VAR 0 5
58316: ARRAY
58317: PUSH
58318: LD_INT 1
58320: PLUS
58321: PPUSH
58322: CALL_OW 1
58326: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58327: LD_ADDR_EXP 49
58331: PUSH
58332: LD_EXP 49
58336: PPUSH
58337: LD_VAR 0 5
58341: PUSH
58342: LD_EXP 49
58346: PUSH
58347: LD_VAR 0 5
58351: ARRAY
58352: PUSH
58353: LD_INT 1
58355: PLUS
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PPUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_VAR 0 4
58370: ARRAY
58371: PUSH
58372: LD_VAR 0 2
58376: PUSH
58377: LD_VAR 0 4
58381: ARRAY
58382: PPUSH
58383: CALL_OW 255
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PPUSH
58392: CALL 7966 0 3
58396: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58397: LD_VAR 0 2
58401: PUSH
58402: LD_VAR 0 4
58406: ARRAY
58407: PPUSH
58408: LD_VAR 0 1
58412: PPUSH
58413: CALL_OW 255
58417: PPUSH
58418: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58422: LD_VAR 0 2
58426: PUSH
58427: LD_VAR 0 4
58431: ARRAY
58432: PPUSH
58433: CALL_OW 141
// end ;
58437: GO 58269
58439: POP
58440: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58441: LD_VAR 0 1
58445: PPUSH
58446: LD_EXP 49
58450: PUSH
58451: LD_VAR 0 5
58455: ARRAY
58456: PUSH
58457: LD_INT 0
58459: PLUS
58460: PPUSH
58461: CALL_OW 505
// end ;
58465: LD_VAR 0 3
58469: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58470: LD_INT 0
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
// if not hack in hackTanks then
58476: LD_VAR 0 1
58480: PUSH
58481: LD_EXP 48
58485: IN
58486: NOT
58487: IFFALSE 58491
// exit ;
58489: GO 58735
// index := GetElementIndex ( hackTanks , hack ) ;
58491: LD_ADDR_VAR 0 4
58495: PUSH
58496: LD_EXP 48
58500: PPUSH
58501: LD_VAR 0 1
58505: PPUSH
58506: CALL 7749 0 2
58510: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58511: LD_ADDR_VAR 0 3
58515: PUSH
58516: DOUBLE
58517: LD_EXP 49
58521: PUSH
58522: LD_VAR 0 4
58526: ARRAY
58527: INC
58528: ST_TO_ADDR
58529: LD_INT 1
58531: PUSH
58532: FOR_DOWNTO
58533: IFFALSE 58709
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58535: LD_ADDR_VAR 0 5
58539: PUSH
58540: LD_EXP 49
58544: PUSH
58545: LD_VAR 0 4
58549: ARRAY
58550: PUSH
58551: LD_VAR 0 3
58555: ARRAY
58556: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58557: LD_VAR 0 5
58561: PUSH
58562: LD_INT 1
58564: ARRAY
58565: PPUSH
58566: CALL_OW 302
58570: NOT
58571: IFTRUE 58599
58573: PUSH
58574: LD_VAR 0 5
58578: PUSH
58579: LD_INT 1
58581: ARRAY
58582: PPUSH
58583: CALL_OW 255
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: CALL_OW 255
58597: NONEQUAL
58598: OR
58599: IFFALSE 58707
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58601: LD_VAR 0 5
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PPUSH
58610: CALL_OW 305
58614: IFFALSE 58642
58616: PUSH
58617: LD_VAR 0 5
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: PPUSH
58626: CALL_OW 255
58630: PUSH
58631: LD_VAR 0 1
58635: PPUSH
58636: CALL_OW 255
58640: EQUAL
58641: AND
58642: IFFALSE 58666
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58644: LD_VAR 0 5
58648: PUSH
58649: LD_INT 1
58651: ARRAY
58652: PPUSH
58653: LD_VAR 0 5
58657: PUSH
58658: LD_INT 2
58660: ARRAY
58661: PPUSH
58662: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58666: LD_ADDR_EXP 49
58670: PUSH
58671: LD_EXP 49
58675: PPUSH
58676: LD_VAR 0 4
58680: PPUSH
58681: LD_EXP 49
58685: PUSH
58686: LD_VAR 0 4
58690: ARRAY
58691: PPUSH
58692: LD_VAR 0 3
58696: PPUSH
58697: CALL_OW 3
58701: PPUSH
58702: CALL_OW 1
58706: ST_TO_ADDR
// end ; end ;
58707: GO 58532
58709: POP
58710: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58711: LD_VAR 0 1
58715: PPUSH
58716: LD_EXP 49
58720: PUSH
58721: LD_VAR 0 4
58725: ARRAY
58726: PUSH
58727: LD_INT 0
58729: PLUS
58730: PPUSH
58731: CALL_OW 505
// end ;
58735: LD_VAR 0 2
58739: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58740: LD_INT 0
58742: PPUSH
58743: PPUSH
58744: PPUSH
58745: PPUSH
// if not hack in hackTanks then
58746: LD_VAR 0 1
58750: PUSH
58751: LD_EXP 48
58755: IN
58756: NOT
58757: IFFALSE 58761
// exit ;
58759: GO 58846
// index := GetElementIndex ( hackTanks , hack ) ;
58761: LD_ADDR_VAR 0 5
58765: PUSH
58766: LD_EXP 48
58770: PPUSH
58771: LD_VAR 0 1
58775: PPUSH
58776: CALL 7749 0 2
58780: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58781: LD_ADDR_VAR 0 4
58785: PUSH
58786: DOUBLE
58787: LD_INT 1
58789: DEC
58790: ST_TO_ADDR
58791: LD_EXP 49
58795: PUSH
58796: LD_VAR 0 5
58800: ARRAY
58801: PUSH
58802: FOR_TO
58803: IFFALSE 58844
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58805: LD_EXP 49
58809: PUSH
58810: LD_VAR 0 5
58814: ARRAY
58815: PUSH
58816: LD_VAR 0 4
58820: ARRAY
58821: PUSH
58822: LD_INT 1
58824: ARRAY
58825: PUSH
58826: LD_VAR 0 2
58830: EQUAL
58831: IFFALSE 58842
// KillUnit ( vehicle ) ;
58833: LD_VAR 0 2
58837: PPUSH
58838: CALL_OW 66
58842: GO 58802
58844: POP
58845: POP
// end ;
58846: LD_VAR 0 3
58850: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58851: LD_EXP 53
58855: NOT
58856: IFFALSE 58891
58858: GO 58860
58860: DISABLE
// begin initMiner := true ;
58861: LD_ADDR_EXP 53
58865: PUSH
58866: LD_INT 1
58868: ST_TO_ADDR
// minersList := [ ] ;
58869: LD_ADDR_EXP 54
58873: PUSH
58874: EMPTY
58875: ST_TO_ADDR
// minerMinesList := [ ] ;
58876: LD_ADDR_EXP 55
58880: PUSH
58881: EMPTY
58882: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58883: LD_ADDR_EXP 56
58887: PUSH
58888: LD_INT 5
58890: ST_TO_ADDR
// end ;
58891: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58892: LD_EXP 53
58896: IFFALSE 58914
58898: PUSH
58899: LD_INT 34
58901: PUSH
58902: LD_INT 81
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PPUSH
58909: CALL_OW 69
58913: AND
58914: IFFALSE 59377
58916: GO 58918
58918: DISABLE
58919: LD_INT 0
58921: PPUSH
58922: PPUSH
58923: PPUSH
58924: PPUSH
// begin enable ;
58925: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58926: LD_ADDR_VAR 0 1
58930: PUSH
58931: LD_INT 34
58933: PUSH
58934: LD_INT 81
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PPUSH
58941: CALL_OW 69
58945: PUSH
58946: FOR_IN
58947: IFFALSE 59019
// begin if not i in minersList then
58949: LD_VAR 0 1
58953: PUSH
58954: LD_EXP 54
58958: IN
58959: NOT
58960: IFFALSE 59017
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58962: LD_ADDR_EXP 54
58966: PUSH
58967: LD_EXP 54
58971: PPUSH
58972: LD_EXP 54
58976: PUSH
58977: LD_INT 1
58979: PLUS
58980: PPUSH
58981: LD_VAR 0 1
58985: PPUSH
58986: CALL_OW 1
58990: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58991: LD_ADDR_EXP 55
58995: PUSH
58996: LD_EXP 55
59000: PPUSH
59001: LD_EXP 55
59005: PUSH
59006: LD_INT 1
59008: PLUS
59009: PPUSH
59010: EMPTY
59011: PPUSH
59012: CALL_OW 1
59016: ST_TO_ADDR
// end end ;
59017: GO 58946
59019: POP
59020: POP
// for i := minerMinesList downto 1 do
59021: LD_ADDR_VAR 0 1
59025: PUSH
59026: DOUBLE
59027: LD_EXP 55
59031: INC
59032: ST_TO_ADDR
59033: LD_INT 1
59035: PUSH
59036: FOR_DOWNTO
59037: IFFALSE 59375
// begin if IsLive ( minersList [ i ] ) then
59039: LD_EXP 54
59043: PUSH
59044: LD_VAR 0 1
59048: ARRAY
59049: PPUSH
59050: CALL_OW 300
59054: IFFALSE 59082
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59056: LD_EXP 54
59060: PUSH
59061: LD_VAR 0 1
59065: ARRAY
59066: PPUSH
59067: LD_EXP 55
59071: PUSH
59072: LD_VAR 0 1
59076: ARRAY
59077: PPUSH
59078: CALL_OW 505
// if not minerMinesList [ i ] then
59082: LD_EXP 55
59086: PUSH
59087: LD_VAR 0 1
59091: ARRAY
59092: NOT
59093: IFFALSE 59097
// continue ;
59095: GO 59036
// for j := minerMinesList [ i ] downto 1 do
59097: LD_ADDR_VAR 0 2
59101: PUSH
59102: DOUBLE
59103: LD_EXP 55
59107: PUSH
59108: LD_VAR 0 1
59112: ARRAY
59113: INC
59114: ST_TO_ADDR
59115: LD_INT 1
59117: PUSH
59118: FOR_DOWNTO
59119: IFFALSE 59371
// begin side := GetSide ( minersList [ i ] ) ;
59121: LD_ADDR_VAR 0 3
59125: PUSH
59126: LD_EXP 54
59130: PUSH
59131: LD_VAR 0 1
59135: ARRAY
59136: PPUSH
59137: CALL_OW 255
59141: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59142: LD_ADDR_VAR 0 4
59146: PUSH
59147: LD_EXP 55
59151: PUSH
59152: LD_VAR 0 1
59156: ARRAY
59157: PUSH
59158: LD_VAR 0 2
59162: ARRAY
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PPUSH
59168: LD_EXP 55
59172: PUSH
59173: LD_VAR 0 1
59177: ARRAY
59178: PUSH
59179: LD_VAR 0 2
59183: ARRAY
59184: PUSH
59185: LD_INT 2
59187: ARRAY
59188: PPUSH
59189: CALL_OW 428
59193: ST_TO_ADDR
// if not tmp then
59194: LD_VAR 0 4
59198: NOT
59199: IFFALSE 59203
// continue ;
59201: GO 59118
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59203: LD_VAR 0 4
59207: PUSH
59208: LD_INT 81
59210: PUSH
59211: LD_VAR 0 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PPUSH
59220: CALL_OW 69
59224: IN
59225: IFFALSE 59275
59227: PUSH
59228: LD_EXP 55
59232: PUSH
59233: LD_VAR 0 1
59237: ARRAY
59238: PUSH
59239: LD_VAR 0 2
59243: ARRAY
59244: PUSH
59245: LD_INT 1
59247: ARRAY
59248: PPUSH
59249: LD_EXP 55
59253: PUSH
59254: LD_VAR 0 1
59258: ARRAY
59259: PUSH
59260: LD_VAR 0 2
59264: ARRAY
59265: PUSH
59266: LD_INT 2
59268: ARRAY
59269: PPUSH
59270: CALL_OW 458
59274: AND
59275: IFFALSE 59369
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59277: LD_EXP 55
59281: PUSH
59282: LD_VAR 0 1
59286: ARRAY
59287: PUSH
59288: LD_VAR 0 2
59292: ARRAY
59293: PUSH
59294: LD_INT 1
59296: ARRAY
59297: PPUSH
59298: LD_EXP 55
59302: PUSH
59303: LD_VAR 0 1
59307: ARRAY
59308: PUSH
59309: LD_VAR 0 2
59313: ARRAY
59314: PUSH
59315: LD_INT 2
59317: ARRAY
59318: PPUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59328: LD_ADDR_EXP 55
59332: PUSH
59333: LD_EXP 55
59337: PPUSH
59338: LD_VAR 0 1
59342: PPUSH
59343: LD_EXP 55
59347: PUSH
59348: LD_VAR 0 1
59352: ARRAY
59353: PPUSH
59354: LD_VAR 0 2
59358: PPUSH
59359: CALL_OW 3
59363: PPUSH
59364: CALL_OW 1
59368: ST_TO_ADDR
// end ; end ;
59369: GO 59118
59371: POP
59372: POP
// end ;
59373: GO 59036
59375: POP
59376: POP
// end ;
59377: PPOPN 4
59379: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59380: LD_INT 0
59382: PPUSH
59383: PPUSH
// result := false ;
59384: LD_ADDR_VAR 0 4
59388: PUSH
59389: LD_INT 0
59391: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 264
59401: PUSH
59402: LD_INT 81
59404: EQUAL
59405: NOT
59406: IFFALSE 59410
// exit ;
59408: GO 59654
// index := GetElementIndex ( minersList , unit ) ;
59410: LD_ADDR_VAR 0 5
59414: PUSH
59415: LD_EXP 54
59419: PPUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL 7749 0 2
59429: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59430: LD_EXP 55
59434: PUSH
59435: LD_VAR 0 5
59439: ARRAY
59440: PUSH
59441: LD_EXP 56
59445: GREATEREQUAL
59446: IFFALSE 59450
// exit ;
59448: GO 59654
// ComMoveXY ( unit , x , y ) ;
59450: LD_VAR 0 1
59454: PPUSH
59455: LD_VAR 0 2
59459: PPUSH
59460: LD_VAR 0 3
59464: PPUSH
59465: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59469: LD_INT 35
59471: PPUSH
59472: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59476: LD_VAR 0 1
59480: PPUSH
59481: LD_VAR 0 2
59485: PPUSH
59486: LD_VAR 0 3
59490: PPUSH
59491: CALL 39795 0 3
59495: NOT
59496: IFFALSE 59509
59498: PUSH
59499: LD_VAR 0 1
59503: PPUSH
59504: CALL_OW 314
59508: AND
59509: IFFALSE 59513
// exit ;
59511: GO 59654
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59513: LD_VAR 0 2
59517: PPUSH
59518: LD_VAR 0 3
59522: PPUSH
59523: CALL_OW 428
59527: PUSH
59528: LD_VAR 0 1
59532: EQUAL
59533: IFFALSE 59547
59535: PUSH
59536: LD_VAR 0 1
59540: PPUSH
59541: CALL_OW 314
59545: NOT
59546: AND
59547: IFFALSE 59469
// PlaySoundXY ( x , y , PlantMine ) ;
59549: LD_VAR 0 2
59553: PPUSH
59554: LD_VAR 0 3
59558: PPUSH
59559: LD_STRING PlantMine
59561: PPUSH
59562: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59566: LD_VAR 0 2
59570: PPUSH
59571: LD_VAR 0 3
59575: PPUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: CALL_OW 255
59585: PPUSH
59586: LD_INT 0
59588: PPUSH
59589: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59593: LD_ADDR_EXP 55
59597: PUSH
59598: LD_EXP 55
59602: PPUSH
59603: LD_VAR 0 5
59607: PUSH
59608: LD_EXP 55
59612: PUSH
59613: LD_VAR 0 5
59617: ARRAY
59618: PUSH
59619: LD_INT 1
59621: PLUS
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PPUSH
59627: LD_VAR 0 2
59631: PUSH
59632: LD_VAR 0 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PPUSH
59641: CALL 7966 0 3
59645: ST_TO_ADDR
// result := true ;
59646: LD_ADDR_VAR 0 4
59650: PUSH
59651: LD_INT 1
59653: ST_TO_ADDR
// end ;
59654: LD_VAR 0 4
59658: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59659: LD_INT 0
59661: PPUSH
59662: PPUSH
59663: PPUSH
// if not unit in minersList then
59664: LD_VAR 0 1
59668: PUSH
59669: LD_EXP 54
59673: IN
59674: NOT
59675: IFFALSE 59679
// exit ;
59677: GO 60073
// index := GetElementIndex ( minersList , unit ) ;
59679: LD_ADDR_VAR 0 6
59683: PUSH
59684: LD_EXP 54
59688: PPUSH
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL 7749 0 2
59698: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59699: LD_ADDR_VAR 0 5
59703: PUSH
59704: DOUBLE
59705: LD_EXP 55
59709: PUSH
59710: LD_VAR 0 6
59714: ARRAY
59715: INC
59716: ST_TO_ADDR
59717: LD_INT 1
59719: PUSH
59720: FOR_DOWNTO
59721: IFFALSE 59884
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59723: LD_EXP 55
59727: PUSH
59728: LD_VAR 0 6
59732: ARRAY
59733: PUSH
59734: LD_VAR 0 5
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_VAR 0 2
59748: EQUAL
59749: IFFALSE 59779
59751: PUSH
59752: LD_EXP 55
59756: PUSH
59757: LD_VAR 0 6
59761: ARRAY
59762: PUSH
59763: LD_VAR 0 5
59767: ARRAY
59768: PUSH
59769: LD_INT 2
59771: ARRAY
59772: PUSH
59773: LD_VAR 0 3
59777: EQUAL
59778: AND
59779: IFFALSE 59882
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59781: LD_EXP 55
59785: PUSH
59786: LD_VAR 0 6
59790: ARRAY
59791: PUSH
59792: LD_VAR 0 5
59796: ARRAY
59797: PUSH
59798: LD_INT 1
59800: ARRAY
59801: PPUSH
59802: LD_EXP 55
59806: PUSH
59807: LD_VAR 0 6
59811: ARRAY
59812: PUSH
59813: LD_VAR 0 5
59817: ARRAY
59818: PUSH
59819: LD_INT 2
59821: ARRAY
59822: PPUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: CALL_OW 255
59832: PPUSH
59833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59837: LD_ADDR_EXP 55
59841: PUSH
59842: LD_EXP 55
59846: PPUSH
59847: LD_VAR 0 6
59851: PPUSH
59852: LD_EXP 55
59856: PUSH
59857: LD_VAR 0 6
59861: ARRAY
59862: PPUSH
59863: LD_VAR 0 5
59867: PPUSH
59868: CALL_OW 3
59872: PPUSH
59873: CALL_OW 1
59877: ST_TO_ADDR
// exit ;
59878: POP
59879: POP
59880: GO 60073
// end ; end ;
59882: GO 59720
59884: POP
59885: POP
// for i := minerMinesList [ index ] downto 1 do
59886: LD_ADDR_VAR 0 5
59890: PUSH
59891: DOUBLE
59892: LD_EXP 55
59896: PUSH
59897: LD_VAR 0 6
59901: ARRAY
59902: INC
59903: ST_TO_ADDR
59904: LD_INT 1
59906: PUSH
59907: FOR_DOWNTO
59908: IFFALSE 60071
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59910: LD_EXP 55
59914: PUSH
59915: LD_VAR 0 6
59919: ARRAY
59920: PUSH
59921: LD_VAR 0 5
59925: ARRAY
59926: PUSH
59927: LD_INT 1
59929: ARRAY
59930: PPUSH
59931: LD_EXP 55
59935: PUSH
59936: LD_VAR 0 6
59940: ARRAY
59941: PUSH
59942: LD_VAR 0 5
59946: ARRAY
59947: PUSH
59948: LD_INT 2
59950: ARRAY
59951: PPUSH
59952: LD_VAR 0 2
59956: PPUSH
59957: LD_VAR 0 3
59961: PPUSH
59962: CALL_OW 298
59966: PUSH
59967: LD_INT 6
59969: LESS
59970: IFFALSE 60069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59972: LD_EXP 55
59976: PUSH
59977: LD_VAR 0 6
59981: ARRAY
59982: PUSH
59983: LD_VAR 0 5
59987: ARRAY
59988: PUSH
59989: LD_INT 1
59991: ARRAY
59992: PPUSH
59993: LD_EXP 55
59997: PUSH
59998: LD_VAR 0 6
60002: ARRAY
60003: PUSH
60004: LD_VAR 0 5
60008: ARRAY
60009: PUSH
60010: LD_INT 2
60012: ARRAY
60013: PPUSH
60014: LD_VAR 0 1
60018: PPUSH
60019: CALL_OW 255
60023: PPUSH
60024: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60028: LD_ADDR_EXP 55
60032: PUSH
60033: LD_EXP 55
60037: PPUSH
60038: LD_VAR 0 6
60042: PPUSH
60043: LD_EXP 55
60047: PUSH
60048: LD_VAR 0 6
60052: ARRAY
60053: PPUSH
60054: LD_VAR 0 5
60058: PPUSH
60059: CALL_OW 3
60063: PPUSH
60064: CALL_OW 1
60068: ST_TO_ADDR
// end ; end ;
60069: GO 59907
60071: POP
60072: POP
// end ;
60073: LD_VAR 0 4
60077: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60078: LD_INT 0
60080: PPUSH
60081: PPUSH
60082: PPUSH
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60089: LD_VAR 0 1
60093: PPUSH
60094: CALL_OW 264
60098: PUSH
60099: LD_INT 81
60101: EQUAL
60102: NOT
60103: IFTRUE 60118
60105: PUSH
60106: LD_VAR 0 1
60110: PUSH
60111: LD_EXP 54
60115: IN
60116: NOT
60117: OR
60118: IFFALSE 60122
// exit ;
60120: GO 60448
// index := GetElementIndex ( minersList , unit ) ;
60122: LD_ADDR_VAR 0 6
60126: PUSH
60127: LD_EXP 54
60131: PPUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL 7749 0 2
60141: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60142: LD_ADDR_VAR 0 8
60146: PUSH
60147: LD_EXP 56
60151: PUSH
60152: LD_EXP 55
60156: PUSH
60157: LD_VAR 0 6
60161: ARRAY
60162: MINUS
60163: ST_TO_ADDR
// if not minesFreeAmount then
60164: LD_VAR 0 8
60168: NOT
60169: IFFALSE 60173
// exit ;
60171: GO 60448
// tmp := [ ] ;
60173: LD_ADDR_VAR 0 7
60177: PUSH
60178: EMPTY
60179: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60180: LD_ADDR_VAR 0 5
60184: PUSH
60185: DOUBLE
60186: LD_INT 1
60188: DEC
60189: ST_TO_ADDR
60190: LD_VAR 0 8
60194: PUSH
60195: FOR_TO
60196: IFFALSE 60395
// begin _d := rand ( 0 , 5 ) ;
60198: LD_ADDR_VAR 0 11
60202: PUSH
60203: LD_INT 0
60205: PPUSH
60206: LD_INT 5
60208: PPUSH
60209: CALL_OW 12
60213: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60214: LD_ADDR_VAR 0 12
60218: PUSH
60219: LD_INT 2
60221: PPUSH
60222: LD_INT 6
60224: PPUSH
60225: CALL_OW 12
60229: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60230: LD_ADDR_VAR 0 9
60234: PUSH
60235: LD_VAR 0 2
60239: PPUSH
60240: LD_VAR 0 11
60244: PPUSH
60245: LD_VAR 0 12
60249: PPUSH
60250: CALL_OW 272
60254: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60255: LD_ADDR_VAR 0 10
60259: PUSH
60260: LD_VAR 0 3
60264: PPUSH
60265: LD_VAR 0 11
60269: PPUSH
60270: LD_VAR 0 12
60274: PPUSH
60275: CALL_OW 273
60279: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60280: LD_VAR 0 9
60284: PPUSH
60285: LD_VAR 0 10
60289: PPUSH
60290: CALL_OW 488
60294: IFFALSE 60318
60296: PUSH
60297: LD_VAR 0 9
60301: PUSH
60302: LD_VAR 0 10
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_VAR 0 7
60315: IN
60316: NOT
60317: AND
60318: IFFALSE 60337
60320: PUSH
60321: LD_VAR 0 9
60325: PPUSH
60326: LD_VAR 0 10
60330: PPUSH
60331: CALL_OW 458
60335: NOT
60336: AND
60337: IFFALSE 60379
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60339: LD_ADDR_VAR 0 7
60343: PUSH
60344: LD_VAR 0 7
60348: PPUSH
60349: LD_VAR 0 7
60353: PUSH
60354: LD_INT 1
60356: PLUS
60357: PPUSH
60358: LD_VAR 0 9
60362: PUSH
60363: LD_VAR 0 10
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PPUSH
60372: CALL_OW 1
60376: ST_TO_ADDR
60377: GO 60393
// i := i - 1 ;
60379: LD_ADDR_VAR 0 5
60383: PUSH
60384: LD_VAR 0 5
60388: PUSH
60389: LD_INT 1
60391: MINUS
60392: ST_TO_ADDR
// end ;
60393: GO 60195
60395: POP
60396: POP
// for i in tmp do
60397: LD_ADDR_VAR 0 5
60401: PUSH
60402: LD_VAR 0 7
60406: PUSH
60407: FOR_IN
60408: IFFALSE 60446
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60410: LD_VAR 0 1
60414: PPUSH
60415: LD_VAR 0 5
60419: PUSH
60420: LD_INT 1
60422: ARRAY
60423: PPUSH
60424: LD_VAR 0 5
60428: PUSH
60429: LD_INT 2
60431: ARRAY
60432: PPUSH
60433: CALL 59380 0 3
60437: NOT
60438: IFFALSE 60444
// exit ;
60440: POP
60441: POP
60442: GO 60448
60444: GO 60407
60446: POP
60447: POP
// end ;
60448: LD_VAR 0 4
60452: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60453: LD_INT 0
60455: PPUSH
60456: PPUSH
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
// if GetClass ( unit ) <> class_sniper then
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 257
60473: PUSH
60474: LD_INT 5
60476: NONEQUAL
60477: IFFALSE 60481
// exit ;
60479: GO 60951
// dist := 8 ;
60481: LD_ADDR_VAR 0 5
60485: PUSH
60486: LD_INT 8
60488: ST_TO_ADDR
// viewRange := 12 ;
60489: LD_ADDR_VAR 0 8
60493: PUSH
60494: LD_INT 12
60496: ST_TO_ADDR
// side := GetSide ( unit ) ;
60497: LD_ADDR_VAR 0 6
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 255
60511: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60512: LD_INT 61
60514: PPUSH
60515: LD_VAR 0 6
60519: PPUSH
60520: CALL_OW 321
60524: PUSH
60525: LD_INT 2
60527: EQUAL
60528: IFFALSE 60538
// viewRange := 16 ;
60530: LD_ADDR_VAR 0 8
60534: PUSH
60535: LD_INT 16
60537: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_VAR 0 2
60547: PPUSH
60548: LD_VAR 0 3
60552: PPUSH
60553: CALL_OW 297
60557: PUSH
60558: LD_VAR 0 5
60562: GREATER
60563: IFFALSE 60642
// begin ComMoveXY ( unit , x , y ) ;
60565: LD_VAR 0 1
60569: PPUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60584: LD_INT 35
60586: PPUSH
60587: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60591: LD_VAR 0 1
60595: PPUSH
60596: LD_VAR 0 2
60600: PPUSH
60601: LD_VAR 0 3
60605: PPUSH
60606: CALL 39795 0 3
60610: NOT
60611: IFFALSE 60615
// exit ;
60613: GO 60951
// until GetDistUnitXY ( unit , x , y ) < dist ;
60615: LD_VAR 0 1
60619: PPUSH
60620: LD_VAR 0 2
60624: PPUSH
60625: LD_VAR 0 3
60629: PPUSH
60630: CALL_OW 297
60634: PUSH
60635: LD_VAR 0 5
60639: LESS
60640: IFFALSE 60584
// end ; ComTurnXY ( unit , x , y ) ;
60642: LD_VAR 0 1
60646: PPUSH
60647: LD_VAR 0 2
60651: PPUSH
60652: LD_VAR 0 3
60656: PPUSH
60657: CALL_OW 118
// repeat if Multiplayer then
60661: LD_OWVAR 4
60665: IFFALSE 60676
// wait ( 35 ) else
60667: LD_INT 35
60669: PPUSH
60670: CALL_OW 67
60674: GO 60683
// wait ( 5 ) ;
60676: LD_INT 5
60678: PPUSH
60679: CALL_OW 67
// _d := GetDir ( unit ) ;
60683: LD_ADDR_VAR 0 11
60687: PUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: CALL_OW 254
60697: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60698: LD_ADDR_VAR 0 7
60702: PUSH
60703: LD_VAR 0 1
60707: PPUSH
60708: CALL_OW 250
60712: PPUSH
60713: LD_VAR 0 1
60717: PPUSH
60718: CALL_OW 251
60722: PPUSH
60723: LD_VAR 0 2
60727: PPUSH
60728: LD_VAR 0 3
60732: PPUSH
60733: CALL 42431 0 4
60737: ST_TO_ADDR
// until dir = _d ;
60738: LD_VAR 0 7
60742: PUSH
60743: LD_VAR 0 11
60747: EQUAL
60748: IFFALSE 60661
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60750: LD_ADDR_VAR 0 9
60754: PUSH
60755: LD_VAR 0 1
60759: PPUSH
60760: CALL_OW 250
60764: PPUSH
60765: LD_VAR 0 7
60769: PPUSH
60770: LD_VAR 0 5
60774: PPUSH
60775: CALL_OW 272
60779: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60780: LD_ADDR_VAR 0 10
60784: PUSH
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 251
60794: PPUSH
60795: LD_VAR 0 7
60799: PPUSH
60800: LD_VAR 0 5
60804: PPUSH
60805: CALL_OW 273
60809: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60810: LD_VAR 0 9
60814: PPUSH
60815: LD_VAR 0 10
60819: PPUSH
60820: CALL_OW 488
60824: NOT
60825: IFFALSE 60829
// exit ;
60827: GO 60951
// ComAnimCustom ( unit , 1 ) ;
60829: LD_VAR 0 1
60833: PPUSH
60834: LD_INT 1
60836: PPUSH
60837: CALL_OW 592
// p := 0 ;
60841: LD_ADDR_VAR 0 12
60845: PUSH
60846: LD_INT 0
60848: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60849: LD_VAR 0 9
60853: PPUSH
60854: LD_VAR 0 10
60858: PPUSH
60859: LD_VAR 0 6
60863: PPUSH
60864: LD_VAR 0 8
60868: PPUSH
60869: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60873: LD_INT 35
60875: PPUSH
60876: CALL_OW 67
// p := Inc ( p ) ;
60880: LD_ADDR_VAR 0 12
60884: PUSH
60885: LD_VAR 0 12
60889: PPUSH
60890: CALL 42387 0 1
60894: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60895: LD_VAR 0 12
60899: PUSH
60900: LD_INT 3
60902: EQUAL
60903: IFTRUE 60917
60905: PUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 302
60915: NOT
60916: OR
60917: IFTRUE 60930
60919: PUSH
60920: LD_VAR 0 1
60924: PPUSH
60925: CALL_OW 301
60929: OR
60930: IFFALSE 60873
// RemoveSeeing ( _x , _y , side ) ;
60932: LD_VAR 0 9
60936: PPUSH
60937: LD_VAR 0 10
60941: PPUSH
60942: LD_VAR 0 6
60946: PPUSH
60947: CALL_OW 331
// end ; end_of_file
60951: LD_VAR 0 4
60955: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60956: PPOPN 6
60958: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60959: LD_EXP 1
60963: PUSH
60964: LD_INT 4
60966: EQUAL
60967: IFFALSE 61003
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60969: LD_STRING setGameDifficulty(
60971: PUSH
60972: LD_OWVAR 67
60976: STR
60977: PUSH
60978: LD_STRING )
60980: STR
60981: PPUSH
60982: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60986: LD_STRING displayDifficulty(
60988: PUSH
60989: LD_OWVAR 67
60993: STR
60994: PUSH
60995: LD_STRING )
60997: STR
60998: PPUSH
60999: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61003: CALL 61032 0 0
// end ; end_of_file
61007: PPOPN 1
61009: END
// every 0 0$1 do
61010: GO 61012
61012: DISABLE
// begin enable ;
61013: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61014: LD_STRING updateTimer(
61016: PUSH
61017: LD_OWVAR 1
61021: STR
61022: PUSH
61023: LD_STRING );
61025: STR
61026: PPUSH
61027: CALL_OW 559
// end ;
61031: END
// export function SOS_MapStart ( ) ; begin
61032: LD_INT 0
61034: PPUSH
// UpdateFactoryWaypoints ( ) ;
61035: CALL 61966 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61039: CALL 62218 0 0
// ParseMultiDataToLua ( ) ;
61043: CALL 62365 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61047: LD_STRING setSpecLogoNumber(
61049: PUSH
61050: LD_INT 2
61052: STR
61053: PUSH
61054: LD_STRING ,
61056: STR
61057: PUSH
61058: LD_INT 1
61060: STR
61061: PUSH
61062: LD_STRING )
61064: STR
61065: PPUSH
61066: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61070: LD_STRING setSpecLogoNumber(
61072: PUSH
61073: LD_INT 3
61075: STR
61076: PUSH
61077: LD_STRING ,
61079: STR
61080: PUSH
61081: LD_INT 2
61083: STR
61084: PUSH
61085: LD_STRING )
61087: STR
61088: PPUSH
61089: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61093: LD_STRING setSpecLogoNumber(
61095: PUSH
61096: LD_INT 4
61098: STR
61099: PUSH
61100: LD_STRING ,
61102: STR
61103: PUSH
61104: LD_INT 3
61106: STR
61107: PUSH
61108: LD_STRING )
61110: STR
61111: PPUSH
61112: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61116: LD_STRING setSpecLogoNumber(
61118: PUSH
61119: LD_INT 5
61121: STR
61122: PUSH
61123: LD_STRING ,
61125: STR
61126: PUSH
61127: LD_INT 4
61129: STR
61130: PUSH
61131: LD_STRING )
61133: STR
61134: PPUSH
61135: CALL_OW 559
// end ;
61139: LD_VAR 0 1
61143: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61144: LD_INT 0
61146: PPUSH
61147: PPUSH
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
// for i := 1 to 8 do
61155: LD_ADDR_VAR 0 2
61159: PUSH
61160: DOUBLE
61161: LD_INT 1
61163: DEC
61164: ST_TO_ADDR
61165: LD_INT 8
61167: PUSH
61168: FOR_TO
61169: IFFALSE 61554
// begin if mpSidePositions [ i ] then
61171: LD_EXP 5
61175: PUSH
61176: LD_VAR 0 2
61180: ARRAY
61181: IFFALSE 61552
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61183: LD_ADDR_VAR 0 7
61187: PUSH
61188: LD_INT 22
61190: PUSH
61191: LD_VAR 0 2
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 21
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PPUSH
61214: CALL_OW 69
61218: PPUSH
61219: CALL 5082 0 1
61223: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61224: LD_ADDR_VAR 0 9
61228: PUSH
61229: LD_INT 22
61231: PUSH
61232: LD_VAR 0 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 30
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 30
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PPUSH
61273: CALL_OW 69
61277: ST_TO_ADDR
// crates := 0 ;
61278: LD_ADDR_VAR 0 4
61282: PUSH
61283: LD_INT 0
61285: ST_TO_ADDR
// oil := 0 ;
61286: LD_ADDR_VAR 0 5
61290: PUSH
61291: LD_INT 0
61293: ST_TO_ADDR
// sib := 0 ;
61294: LD_ADDR_VAR 0 6
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// if bases then
61302: LD_VAR 0 9
61306: IFFALSE 61412
// begin for j in bases do
61308: LD_ADDR_VAR 0 3
61312: PUSH
61313: LD_VAR 0 9
61317: PUSH
61318: FOR_IN
61319: IFFALSE 61410
// begin base := GetBase ( j ) ;
61321: LD_ADDR_VAR 0 8
61325: PUSH
61326: LD_VAR 0 3
61330: PPUSH
61331: CALL_OW 274
61335: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61336: LD_ADDR_VAR 0 4
61340: PUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_VAR 0 8
61350: PPUSH
61351: LD_INT 1
61353: PPUSH
61354: CALL_OW 275
61358: PLUS
61359: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61360: LD_ADDR_VAR 0 5
61364: PUSH
61365: LD_VAR 0 5
61369: PUSH
61370: LD_VAR 0 8
61374: PPUSH
61375: LD_INT 2
61377: PPUSH
61378: CALL_OW 275
61382: PLUS
61383: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61384: LD_ADDR_VAR 0 6
61388: PUSH
61389: LD_VAR 0 6
61393: PUSH
61394: LD_VAR 0 8
61398: PPUSH
61399: LD_INT 3
61401: PPUSH
61402: CALL_OW 275
61406: PLUS
61407: ST_TO_ADDR
// end ;
61408: GO 61318
61410: POP
61411: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61412: LD_STRING setSpecText(
61414: PUSH
61415: LD_VAR 0 2
61419: STR
61420: PUSH
61421: LD_STRING ,
61423: STR
61424: PUSH
61425: LD_INT 2
61427: STR
61428: PUSH
61429: LD_STRING ,
61431: STR
61432: PUSH
61433: LD_VAR 0 4
61437: STR
61438: PUSH
61439: LD_STRING )
61441: STR
61442: PPUSH
61443: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61447: LD_STRING setSpecText(
61449: PUSH
61450: LD_VAR 0 2
61454: STR
61455: PUSH
61456: LD_STRING ,
61458: STR
61459: PUSH
61460: LD_INT 3
61462: STR
61463: PUSH
61464: LD_STRING ,
61466: STR
61467: PUSH
61468: LD_VAR 0 5
61472: STR
61473: PUSH
61474: LD_STRING )
61476: STR
61477: PPUSH
61478: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61482: LD_STRING setSpecText(
61484: PUSH
61485: LD_VAR 0 2
61489: STR
61490: PUSH
61491: LD_STRING ,
61493: STR
61494: PUSH
61495: LD_INT 4
61497: STR
61498: PUSH
61499: LD_STRING ,
61501: STR
61502: PUSH
61503: LD_VAR 0 6
61507: STR
61508: PUSH
61509: LD_STRING )
61511: STR
61512: PPUSH
61513: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61517: LD_STRING setSpecText(
61519: PUSH
61520: LD_VAR 0 2
61524: STR
61525: PUSH
61526: LD_STRING ,
61528: STR
61529: PUSH
61530: LD_INT 5
61532: STR
61533: PUSH
61534: LD_STRING ,
61536: STR
61537: PUSH
61538: LD_VAR 0 7
61542: STR
61543: PUSH
61544: LD_STRING )
61546: STR
61547: PPUSH
61548: CALL_OW 559
// end ; end ;
61552: GO 61168
61554: POP
61555: POP
// end ;
61556: LD_VAR 0 1
61560: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61561: LD_INT 2
61563: PUSH
61564: LD_INT 30
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 30
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: PPUSH
61589: CALL_OW 69
61593: IFFALSE 61603
61595: GO 61597
61597: DISABLE
// begin enable ;
61598: ENABLE
// UpdateSpectatorBar ;
61599: CALL 61144 0 0
// end ;
61603: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61604: LD_INT 0
61606: PPUSH
// end ;
61607: LD_VAR 0 12
61611: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61612: LD_INT 0
61614: PPUSH
61615: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61616: LD_VAR 0 1
61620: NOT
61621: IFTRUE 61640
61623: PUSH
61624: LD_VAR 0 2
61628: PPUSH
61629: LD_VAR 0 3
61633: PPUSH
61634: CALL_OW 488
61638: NOT
61639: OR
61640: IFTRUE 61675
61642: PUSH
61643: LD_VAR 0 1
61647: PPUSH
61648: CALL_OW 266
61652: PUSH
61653: LD_INT 3
61655: NONEQUAL
61656: IFFALSE 61674
61658: PUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 247
61668: PUSH
61669: LD_INT 1
61671: EQUAL
61672: NOT
61673: AND
61674: OR
61675: IFFALSE 61679
// exit ;
61677: GO 61961
// if GetType ( factory ) = unit_human then
61679: LD_VAR 0 1
61683: PPUSH
61684: CALL_OW 247
61688: PUSH
61689: LD_INT 1
61691: EQUAL
61692: IFFALSE 61709
// factory := IsInUnit ( factory ) ;
61694: LD_ADDR_VAR 0 1
61698: PUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 310
61708: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 266
61718: PUSH
61719: LD_INT 3
61721: NONEQUAL
61722: IFFALSE 61726
// exit ;
61724: GO 61961
// for i := 1 to Count ( factoryWaypoints ) do
61726: LD_ADDR_VAR 0 5
61730: PUSH
61731: DOUBLE
61732: LD_INT 1
61734: DEC
61735: ST_TO_ADDR
61736: LD_EXP 57
61740: PPUSH
61741: CALL 5082 0 1
61745: PUSH
61746: FOR_TO
61747: IFFALSE 61909
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61749: LD_VAR 0 2
61753: PPUSH
61754: LD_VAR 0 3
61758: PPUSH
61759: CALL_OW 428
61763: PUSH
61764: LD_EXP 57
61768: PUSH
61769: LD_VAR 0 5
61773: ARRAY
61774: PUSH
61775: LD_INT 2
61777: ARRAY
61778: EQUAL
61779: IFFALSE 61811
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61781: LD_ADDR_EXP 57
61785: PUSH
61786: LD_EXP 57
61790: PPUSH
61791: LD_VAR 0 5
61795: PPUSH
61796: CALL_OW 3
61800: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61801: CALL 61966 0 0
// exit ;
61805: POP
61806: POP
61807: GO 61961
// end else
61809: GO 61907
// if factory = factoryWaypoints [ i ] [ 2 ] then
61811: LD_VAR 0 1
61815: PUSH
61816: LD_EXP 57
61820: PUSH
61821: LD_VAR 0 5
61825: ARRAY
61826: PUSH
61827: LD_INT 2
61829: ARRAY
61830: EQUAL
61831: IFFALSE 61907
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61833: LD_ADDR_EXP 57
61837: PUSH
61838: LD_EXP 57
61842: PPUSH
61843: LD_VAR 0 5
61847: PPUSH
61848: CALL_OW 3
61852: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61853: LD_ADDR_EXP 57
61857: PUSH
61858: LD_EXP 57
61862: PPUSH
61863: LD_VAR 0 1
61867: PPUSH
61868: CALL_OW 255
61872: PUSH
61873: LD_VAR 0 1
61877: PUSH
61878: LD_VAR 0 2
61882: PUSH
61883: LD_VAR 0 3
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL 41014 0 2
61898: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61899: CALL 61966 0 0
// exit ;
61903: POP
61904: POP
61905: GO 61961
// end ; end ;
61907: GO 61746
61909: POP
61910: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61911: LD_ADDR_EXP 57
61915: PUSH
61916: LD_EXP 57
61920: PPUSH
61921: LD_VAR 0 1
61925: PPUSH
61926: CALL_OW 255
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_VAR 0 2
61940: PUSH
61941: LD_VAR 0 3
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: PPUSH
61952: CALL 41014 0 2
61956: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61957: CALL 61966 0 0
// end ;
61961: LD_VAR 0 4
61965: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61966: LD_INT 0
61968: PPUSH
61969: PPUSH
61970: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61971: LD_STRING resetFactoryWaypoint();
61973: PPUSH
61974: CALL_OW 559
// if factoryWaypoints then
61978: LD_EXP 57
61982: IFFALSE 62103
// begin list := factoryWaypoints ;
61984: LD_ADDR_VAR 0 3
61988: PUSH
61989: LD_EXP 57
61993: ST_TO_ADDR
// for i := 1 to list do
61994: LD_ADDR_VAR 0 2
61998: PUSH
61999: DOUBLE
62000: LD_INT 1
62002: DEC
62003: ST_TO_ADDR
62004: LD_VAR 0 3
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62101
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62012: LD_STRING setFactoryWaypointXY(
62014: PUSH
62015: LD_VAR 0 3
62019: PUSH
62020: LD_VAR 0 2
62024: ARRAY
62025: PUSH
62026: LD_INT 1
62028: ARRAY
62029: STR
62030: PUSH
62031: LD_STRING ,
62033: STR
62034: PUSH
62035: LD_VAR 0 3
62039: PUSH
62040: LD_VAR 0 2
62044: ARRAY
62045: PUSH
62046: LD_INT 2
62048: ARRAY
62049: STR
62050: PUSH
62051: LD_STRING ,
62053: STR
62054: PUSH
62055: LD_VAR 0 3
62059: PUSH
62060: LD_VAR 0 2
62064: ARRAY
62065: PUSH
62066: LD_INT 3
62068: ARRAY
62069: STR
62070: PUSH
62071: LD_STRING ,
62073: STR
62074: PUSH
62075: LD_VAR 0 3
62079: PUSH
62080: LD_VAR 0 2
62084: ARRAY
62085: PUSH
62086: LD_INT 4
62088: ARRAY
62089: STR
62090: PUSH
62091: LD_STRING )
62093: STR
62094: PPUSH
62095: CALL_OW 559
62099: GO 62009
62101: POP
62102: POP
// end ; end ;
62103: LD_VAR 0 1
62107: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62108: LD_INT 0
62110: PPUSH
// if HexInfo ( x , y ) = warehouse then
62111: LD_VAR 0 2
62115: PPUSH
62116: LD_VAR 0 3
62120: PPUSH
62121: CALL_OW 428
62125: PUSH
62126: LD_VAR 0 1
62130: EQUAL
62131: IFFALSE 62158
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62133: LD_ADDR_EXP 59
62137: PUSH
62138: LD_EXP 59
62142: PPUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: LD_INT 0
62150: PPUSH
62151: CALL_OW 1
62155: ST_TO_ADDR
62156: GO 62209
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62158: LD_ADDR_EXP 59
62162: PUSH
62163: LD_EXP 59
62167: PPUSH
62168: LD_VAR 0 1
62172: PPUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: CALL_OW 255
62182: PUSH
62183: LD_VAR 0 1
62187: PUSH
62188: LD_VAR 0 2
62192: PUSH
62193: LD_VAR 0 3
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: PPUSH
62204: CALL_OW 1
62208: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62209: CALL 62218 0 0
// end ;
62213: LD_VAR 0 4
62217: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62218: LD_INT 0
62220: PPUSH
62221: PPUSH
62222: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62223: LD_STRING resetWarehouseGatheringPoints();
62225: PPUSH
62226: CALL_OW 559
// if warehouseGatheringPoints then
62230: LD_EXP 59
62234: IFFALSE 62360
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62236: LD_ADDR_VAR 0 3
62240: PUSH
62241: LD_EXP 59
62245: PPUSH
62246: CALL 44948 0 1
62250: ST_TO_ADDR
// for i := 1 to list do
62251: LD_ADDR_VAR 0 2
62255: PUSH
62256: DOUBLE
62257: LD_INT 1
62259: DEC
62260: ST_TO_ADDR
62261: LD_VAR 0 3
62265: PUSH
62266: FOR_TO
62267: IFFALSE 62358
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62269: LD_STRING setWarehouseGatheringPointXY(
62271: PUSH
62272: LD_VAR 0 3
62276: PUSH
62277: LD_VAR 0 2
62281: ARRAY
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: STR
62287: PUSH
62288: LD_STRING ,
62290: STR
62291: PUSH
62292: LD_VAR 0 3
62296: PUSH
62297: LD_VAR 0 2
62301: ARRAY
62302: PUSH
62303: LD_INT 2
62305: ARRAY
62306: STR
62307: PUSH
62308: LD_STRING ,
62310: STR
62311: PUSH
62312: LD_VAR 0 3
62316: PUSH
62317: LD_VAR 0 2
62321: ARRAY
62322: PUSH
62323: LD_INT 3
62325: ARRAY
62326: STR
62327: PUSH
62328: LD_STRING ,
62330: STR
62331: PUSH
62332: LD_VAR 0 3
62336: PUSH
62337: LD_VAR 0 2
62341: ARRAY
62342: PUSH
62343: LD_INT 4
62345: ARRAY
62346: STR
62347: PUSH
62348: LD_STRING )
62350: STR
62351: PPUSH
62352: CALL_OW 559
62356: GO 62266
62358: POP
62359: POP
// end ; end ;
62360: LD_VAR 0 1
62364: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62365: LD_INT 0
62367: PPUSH
62368: PPUSH
// if not mpSidePositions then
62369: LD_EXP 5
62373: NOT
62374: IFFALSE 62378
// exit ;
62376: GO 62449
// result :=  ;
62378: LD_ADDR_VAR 0 1
62382: PUSH
62383: LD_STRING 
62385: ST_TO_ADDR
// for i := 1 to 8 do
62386: LD_ADDR_VAR 0 2
62390: PUSH
62391: DOUBLE
62392: LD_INT 1
62394: DEC
62395: ST_TO_ADDR
62396: LD_INT 8
62398: PUSH
62399: FOR_TO
62400: IFFALSE 62430
// begin result := result & mpSidePositions [ i ] & ; ;
62402: LD_ADDR_VAR 0 1
62406: PUSH
62407: LD_VAR 0 1
62411: PUSH
62412: LD_EXP 5
62416: PUSH
62417: LD_VAR 0 2
62421: ARRAY
62422: STR
62423: PUSH
62424: LD_STRING ;
62426: STR
62427: ST_TO_ADDR
// end ;
62428: GO 62399
62430: POP
62431: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62432: LD_STRING setMultiplayerRealPosition("
62434: PUSH
62435: LD_VAR 0 1
62439: STR
62440: PUSH
62441: LD_STRING ");
62443: STR
62444: PPUSH
62445: CALL_OW 559
// end ;
62449: LD_VAR 0 1
62453: RET
