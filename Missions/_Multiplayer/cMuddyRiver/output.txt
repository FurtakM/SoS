// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 325 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1705 0 1
  44: PPUSH
  45: CALL 5320 0 1
// Multiplayer_Start ;
  49: CALL 3610 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3726 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: IFFALSE 218
 211: PUSH
 212: LD_OWVAR 48
 216: NOT
 217: AND
 218: IFFALSE 234
 220: GO 222
 222: DISABLE
// begin enable ;
 223: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 224: LD_ADDR_OWVAR 47
 228: PUSH
 229: CALL 4238 0 0
 233: ST_TO_ADDR
// end ;
 234: END
// function Debuger ; var i ; begin
 235: LD_INT 0
 237: PPUSH
 238: PPUSH
// if not debug then
 239: LD_EXP 1
 243: NOT
 244: IFFALSE 248
// exit ;
 246: GO 320
// game_speed := 5 ;
 248: LD_ADDR_OWVAR 65
 252: PUSH
 253: LD_INT 5
 255: ST_TO_ADDR
// uc_side := 1 ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_INT 1
 263: ST_TO_ADDR
// uc_nation := 1 ;
 264: LD_ADDR_OWVAR 21
 268: PUSH
 269: LD_INT 1
 271: ST_TO_ADDR
// for i = 1 to 10 do
 272: LD_ADDR_VAR 0 2
 276: PUSH
 277: DOUBLE
 278: LD_INT 1
 280: DEC
 281: ST_TO_ADDR
 282: LD_INT 10
 284: PUSH
 285: FOR_TO
 286: IFFALSE 318
// begin PrepareHuman ( false , 1 , 10 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 10
 296: PPUSH
 297: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 301: CALL_OW 44
 305: PPUSH
 306: LD_INT 9
 308: PPUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 49
// end ;
 316: GO 285
 318: POP
 319: POP
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
// mpGameType := GameTypeCoop ;
 332: LD_ADDR_EXP 30
 336: PUSH
 337: LD_INT 4
 339: ST_TO_ADDR
// multi_settings_counter := 6 ;
 340: LD_ADDR_EXP 18
 344: PUSH
 345: LD_INT 6
 347: ST_TO_ADDR
// if Multiplayer then
 348: LD_OWVAR 4
 352: IFFALSE 532
// begin your_side := mp_player_side ;
 354: LD_ADDR_OWVAR 2
 358: PUSH
 359: LD_OWVAR 7
 363: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 364: LD_ADDR_EXP 6
 368: PUSH
 369: LD_OWVAR 6
 373: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 374: LD_ADDR_EXP 7
 378: PUSH
 379: LD_OWVAR 17
 383: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 384: LD_ADDR_EXP 8
 388: PUSH
 389: LD_OWVAR 15
 393: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 394: LD_ADDR_EXP 9
 398: PUSH
 399: LD_OWVAR 16
 403: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 404: LD_ADDR_EXP 10
 408: PUSH
 409: EMPTY
 410: PUSH
 411: EMPTY
 412: LIST
 413: ST_TO_ADDR
// for i in mp_teams do
 414: LD_ADDR_VAR 0 2
 418: PUSH
 419: LD_OWVAR 12
 423: PUSH
 424: FOR_IN
 425: IFFALSE 468
// if i then
 427: LD_VAR 0 2
 431: IFFALSE 466
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 433: LD_ADDR_EXP 10
 437: PUSH
 438: LD_EXP 10
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_EXP 10
 450: PUSH
 451: LD_INT 1
 453: ARRAY
 454: PUSH
 455: LD_VAR 0 2
 459: UNION
 460: PPUSH
 461: CALL_OW 1
 465: ST_TO_ADDR
 466: GO 424
 468: POP
 469: POP
// for i := 1 to multi_settings_counter do
 470: LD_ADDR_VAR 0 2
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_EXP 18
 484: PUSH
 485: FOR_TO
 486: IFFALSE 528
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 488: LD_ADDR_EXP 17
 492: PUSH
 493: LD_EXP 17
 497: PPUSH
 498: LD_EXP 17
 502: PUSH
 503: LD_INT 1
 505: PLUS
 506: PPUSH
 507: LD_VAR 0 2
 511: PPUSH
 512: CALL_OW 426
 516: PUSH
 517: LD_INT 1
 519: PLUS
 520: PPUSH
 521: CALL_OW 1
 525: ST_TO_ADDR
 526: GO 485
 528: POP
 529: POP
// end else
 530: GO 714
// begin your_side := 1 ;
 532: LD_ADDR_OWVAR 2
 536: PUSH
 537: LD_INT 1
 539: ST_TO_ADDR
// multi_gametype := 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 0
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: LD_INT 0
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: LD_INT 0
 570: PUSH
 571: LD_INT 0
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 587: LD_ADDR_EXP 8
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 0
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 0
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 626: LD_ADDR_EXP 9
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 0
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: LD_INT 0
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 665: LD_ADDR_EXP 10
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 683: LD_ADDR_EXP 17
 687: PUSH
 688: LD_INT 2
 690: PUSH
 691: LD_INT 2
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 714: LD_ADDR_EXP 31
 718: PUSH
 719: LD_EXP 7
 723: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 724: LD_ADDR_EXP 11
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 763: LD_ADDR_EXP 14
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 0
 773: PUSH
 774: LD_INT 0
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 802: LD_ADDR_EXP 25
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: LD_INT 0
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: ST_TO_ADDR
// multi_teamgame := true ;
 841: LD_ADDR_EXP 15
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 849: LD_ADDR_EXP 13
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: EMPTY
 858: LIST
 859: ST_TO_ADDR
// multi_custom_commanders := true ;
 860: LD_ADDR_EXP 16
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// multi_commanders := [ ] ;
 868: LD_ADDR_EXP 24
 872: PUSH
 873: EMPTY
 874: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 875: LD_ADDR_EXP 27
 879: PUSH
 880: EMPTY
 881: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 882: LD_ADDR_EXP 28
 886: PUSH
 887: LD_INT 0
 889: ST_TO_ADDR
// multi_players_amount := 0 ;
 890: LD_ADDR_EXP 26
 894: PUSH
 895: LD_INT 0
 897: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 898: LD_ADDR_EXP 12
 902: PUSH
 903: LD_INT 9
 905: PUSH
 906: LD_INT 8
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 26
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 29
 925: PUSH
 926: LD_INT 28
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: ST_TO_ADDR
// for i := 1 to 8 do
 938: LD_ADDR_VAR 0 2
 942: PUSH
 943: DOUBLE
 944: LD_INT 1
 946: DEC
 947: ST_TO_ADDR
 948: LD_INT 8
 950: PUSH
 951: FOR_TO
 952: IFFALSE 1287
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 954: LD_VAR 0 2
 958: PPUSH
 959: CALL_OW 530
 963: IFFALSE 1121
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 965: LD_ADDR_EXP 11
 969: PUSH
 970: LD_EXP 11
 974: PPUSH
 975: LD_VAR 0 2
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: CALL_OW 1
 987: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 988: LD_ADDR_EXP 9
 992: PUSH
 993: LD_EXP 9
 997: PPUSH
 998: LD_VAR 0 2
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 1
1010: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1011: LD_ADDR_EXP 7
1015: PUSH
1016: LD_EXP 7
1020: PPUSH
1021: LD_VAR 0 2
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 1
1033: ST_TO_ADDR
// for j = 1 to multi_teams do
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 10
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1119
// begin if i in multi_teams [ j ] then
1052: LD_VAR 0 2
1056: PUSH
1057: LD_EXP 10
1061: PUSH
1062: LD_VAR 0 3
1066: ARRAY
1067: IN
1068: IFFALSE 1117
// begin tmp := multi_teams [ j ] diff i ;
1070: LD_ADDR_VAR 0 5
1074: PUSH
1075: LD_EXP 10
1079: PUSH
1080: LD_VAR 0 3
1084: ARRAY
1085: PUSH
1086: LD_VAR 0 2
1090: DIFF
1091: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1092: LD_ADDR_EXP 10
1096: PUSH
1097: LD_EXP 10
1101: PPUSH
1102: LD_VAR 0 3
1106: PPUSH
1107: LD_VAR 0 5
1111: PPUSH
1112: CALL_OW 1
1116: ST_TO_ADDR
// end ; end ;
1117: GO 1049
1119: POP
1120: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1121: LD_EXP 9
1125: PUSH
1126: LD_VAR 0 2
1130: ARRAY
1131: IFFALSE 1152
1133: PUSH
1134: LD_EXP 9
1138: PUSH
1139: LD_VAR 0 2
1143: ARRAY
1144: PUSH
1145: LD_EXP 13
1149: IN
1150: NOT
1151: AND
1152: IFFALSE 1193
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1154: LD_ADDR_EXP 9
1158: PUSH
1159: LD_EXP 9
1163: PPUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_EXP 13
1173: PUSH
1174: LD_INT 1
1176: PPUSH
1177: LD_EXP 13
1181: PPUSH
1182: CALL_OW 12
1186: ARRAY
1187: PPUSH
1188: CALL_OW 1
1192: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1193: LD_EXP 9
1197: PUSH
1198: LD_VAR 0 2
1202: ARRAY
1203: NOT
1204: IFFALSE 1219
1206: PUSH
1207: LD_EXP 7
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: NOT
1218: AND
1219: IFFALSE 1234
1221: PUSH
1222: LD_EXP 11
1226: PUSH
1227: LD_VAR 0 2
1231: ARRAY
1232: NOT
1233: AND
1234: IFFALSE 1259
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1236: LD_ADDR_EXP 14
1240: PUSH
1241: LD_EXP 14
1245: PPUSH
1246: LD_VAR 0 2
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// if multi_sides [ i ] then
1259: LD_EXP 7
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: IFFALSE 1285
// multi_players_amount := multi_players_amount + 1 ;
1271: LD_ADDR_EXP 26
1275: PUSH
1276: LD_EXP 26
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ST_TO_ADDR
// end ;
1285: GO 951
1287: POP
1288: POP
// for i in multi_teams do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: LD_EXP 10
1298: PUSH
1299: FOR_IN
1300: IFFALSE 1408
// begin for j = 2 to i do
1302: LD_ADDR_VAR 0 3
1306: PUSH
1307: DOUBLE
1308: LD_INT 2
1310: DEC
1311: ST_TO_ADDR
1312: LD_VAR 0 2
1316: PUSH
1317: FOR_TO
1318: IFFALSE 1404
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1320: LD_VAR 0 2
1324: PUSH
1325: LD_VAR 0 3
1329: ARRAY
1330: PPUSH
1331: LD_VAR 0 2
1335: PUSH
1336: LD_INT 1
1338: ARRAY
1339: PPUSH
1340: CALL_OW 343
// for x = 1 to j - 1 do
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: DOUBLE
1350: LD_INT 1
1352: DEC
1353: ST_TO_ADDR
1354: LD_VAR 0 3
1358: PUSH
1359: LD_INT 1
1361: MINUS
1362: PUSH
1363: FOR_TO
1364: IFFALSE 1400
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1366: LD_VAR 0 2
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PPUSH
1377: LD_VAR 0 2
1381: PUSH
1382: LD_VAR 0 4
1386: ARRAY
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: CALL_OW 80
1398: GO 1363
1400: POP
1401: POP
// end ;
1402: GO 1317
1404: POP
1405: POP
// end ;
1406: GO 1299
1408: POP
1409: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1410: LD_ADDR_OWVAR 67
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 2
1420: PUSH
1421: LD_INT 3
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: LIST
1428: PUSH
1429: LD_EXP 17
1433: PUSH
1434: LD_INT 1
1436: ARRAY
1437: ARRAY
1438: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_INT 9
1446: PUSH
1447: LD_INT 12
1449: PUSH
1450: LD_INT 15
1452: PUSH
1453: LD_INT 18
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: PUSH
1462: LD_EXP 17
1466: PUSH
1467: LD_INT 2
1469: ARRAY
1470: ARRAY
1471: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1472: LD_ADDR_EXP 20
1476: PUSH
1477: LD_INT 5
1479: PUSH
1480: LD_INT 6
1482: PUSH
1483: LD_INT 8
1485: PUSH
1486: LD_INT 10
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: PUSH
1495: LD_EXP 17
1499: PUSH
1500: LD_INT 3
1502: ARRAY
1503: ARRAY
1504: ST_TO_ADDR
// multi_crates_spawn := [ [ 12000 , 0 0$32 ] , [ 15000 , 0 0$22 ] , [ 20000 , 0 0$14 ] , [ 24000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1505: LD_ADDR_EXP 21
1509: PUSH
1510: LD_INT 12000
1512: PUSH
1513: LD_INT 1120
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 15000
1522: PUSH
1523: LD_INT 770
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 20000
1532: PUSH
1533: LD_INT 490
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 24000
1542: PUSH
1543: LD_INT 420
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 17
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: ARRAY
1565: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1566: LD_ADDR_EXP 22
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: LD_INT 10
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_EXP 17
1589: PUSH
1590: LD_INT 5
1592: ARRAY
1593: ARRAY
1594: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1595: LD_ADDR_EXP 23
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_EXP 17
1618: PUSH
1619: LD_INT 6
1621: ARRAY
1622: ARRAY
1623: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1624: LD_ADDR_EXP 29
1628: PUSH
1629: LD_INT 31500
1631: PUSH
1632: LD_INT 37800
1634: PUSH
1635: LD_INT 44100
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: ST_TO_ADDR
// if multi_ape_amount then
1649: LD_EXP 22
1653: IFFALSE 1700
// begin for i := 1 to multi_ape_amount do
1655: LD_ADDR_VAR 0 2
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_EXP 22
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1698
// begin PrepareApeman ( - 5 ) ;
1673: LD_INT 5
1675: NEG
1676: PPUSH
1677: CALL 51314 0 1
// PlaceUnitArea ( CreateHuman , ape_area , false ) ;
1681: CALL_OW 44
1685: PPUSH
1686: LD_INT 50
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// end ;
1696: GO 1670
1698: POP
1699: POP
// end ; end ;
1700: LD_VAR 0 1
1704: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
// if not multi_sides [ 2 ] then
1709: LD_EXP 7
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: NOT
1718: IFFALSE 1732
// begin result := preferSide ;
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 1
1729: ST_TO_ADDR
// exit ;
1730: GO 1779
// end ; for i := 1 to 8 do
1732: LD_ADDR_VAR 0 3
1736: PUSH
1737: DOUBLE
1738: LD_INT 1
1740: DEC
1741: ST_TO_ADDR
1742: LD_INT 8
1744: PUSH
1745: FOR_TO
1746: IFFALSE 1777
// if not multi_sides [ i ] then
1748: LD_EXP 7
1752: PUSH
1753: LD_VAR 0 3
1757: ARRAY
1758: NOT
1759: IFFALSE 1775
// begin result := i ;
1761: LD_ADDR_VAR 0 2
1765: PUSH
1766: LD_VAR 0 3
1770: ST_TO_ADDR
// exit ;
1771: POP
1772: POP
1773: GO 1779
// end ;
1775: GO 1745
1777: POP
1778: POP
// end ;
1779: LD_VAR 0 2
1783: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1784: LD_INT 0
1786: PPUSH
// uc_side := side ;
1787: LD_ADDR_OWVAR 20
1791: PUSH
1792: LD_VAR 0 1
1796: ST_TO_ADDR
// uc_nation := 1 ;
1797: LD_ADDR_OWVAR 21
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// hc_importance := 100 ;
1805: LD_ADDR_OWVAR 32
1809: PUSH
1810: LD_INT 100
1812: ST_TO_ADDR
// hc_class := 1 ;
1813: LD_ADDR_OWVAR 28
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if num = 1 then
1821: LD_VAR 0 2
1825: PUSH
1826: LD_INT 1
1828: EQUAL
1829: IFFALSE 1911
// begin hc_gallery := us ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING us
1838: ST_TO_ADDR
// hc_face_number := 5 ;
1839: LD_ADDR_OWVAR 34
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// hc_name := John Macmilan ;
1847: LD_ADDR_OWVAR 26
1851: PUSH
1852: LD_STRING John Macmilan
1854: ST_TO_ADDR
// hc_sex := sex_male ;
1855: LD_ADDR_OWVAR 27
1859: PUSH
1860: LD_INT 1
1862: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1863: LD_ADDR_OWVAR 31
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: LD_INT 2
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 4
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1886: LD_ADDR_OWVAR 29
1890: PUSH
1891: LD_INT 11
1893: PUSH
1894: LD_INT 10
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: ST_TO_ADDR
// result := CreateHuman ;
1901: LD_ADDR_VAR 0 3
1905: PUSH
1906: CALL_OW 44
1910: ST_TO_ADDR
// end ; if num = 2 then
1911: LD_VAR 0 2
1915: PUSH
1916: LD_INT 2
1918: EQUAL
1919: IFFALSE 2001
// begin hc_gallery := us ;
1921: LD_ADDR_OWVAR 33
1925: PUSH
1926: LD_STRING us
1928: ST_TO_ADDR
// hc_face_number := 2 ;
1929: LD_ADDR_OWVAR 34
1933: PUSH
1934: LD_INT 2
1936: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1937: LD_ADDR_OWVAR 26
1941: PUSH
1942: LD_STRING Lucy Donaldson
1944: ST_TO_ADDR
// hc_sex := sex_female ;
1945: LD_ADDR_OWVAR 27
1949: PUSH
1950: LD_INT 2
1952: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1953: LD_ADDR_OWVAR 31
1957: PUSH
1958: LD_INT 6
1960: PUSH
1961: LD_INT 3
1963: PUSH
1964: LD_INT 4
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1976: LD_ADDR_OWVAR 29
1980: PUSH
1981: LD_INT 9
1983: PUSH
1984: LD_INT 12
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// result := CreateHuman ;
1991: LD_ADDR_VAR 0 3
1995: PUSH
1996: CALL_OW 44
2000: ST_TO_ADDR
// end ; if num = 3 then
2001: LD_VAR 0 2
2005: PUSH
2006: LD_INT 3
2008: EQUAL
2009: IFFALSE 2091
// begin hc_gallery := us ;
2011: LD_ADDR_OWVAR 33
2015: PUSH
2016: LD_STRING us
2018: ST_TO_ADDR
// hc_face_number := 3 ;
2019: LD_ADDR_OWVAR 34
2023: PUSH
2024: LD_INT 3
2026: ST_TO_ADDR
// hc_name := Lisa Lawson ;
2027: LD_ADDR_OWVAR 26
2031: PUSH
2032: LD_STRING Lisa Lawson
2034: ST_TO_ADDR
// hc_sex := sex_female ;
2035: LD_ADDR_OWVAR 27
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// hc_skills := [ 8 , 4 , 3 , 3 ] ;
2043: LD_ADDR_OWVAR 31
2047: PUSH
2048: LD_INT 8
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 3
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2066: LD_ADDR_OWVAR 29
2070: PUSH
2071: LD_INT 10
2073: PUSH
2074: LD_INT 11
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// result := CreateHuman ;
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: CALL_OW 44
2090: ST_TO_ADDR
// end ; end ;
2091: LD_VAR 0 3
2095: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2096: LD_INT 0
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
// for i := 1 to 8 do
2107: LD_ADDR_VAR 0 2
2111: PUSH
2112: DOUBLE
2113: LD_INT 1
2115: DEC
2116: ST_TO_ADDR
2117: LD_INT 8
2119: PUSH
2120: FOR_TO
2121: IFFALSE 3011
// begin if not multi_sides [ i ] then
2123: LD_EXP 7
2127: PUSH
2128: LD_VAR 0 2
2132: ARRAY
2133: NOT
2134: IFFALSE 2138
// continue ;
2136: GO 2120
// if multi_custom_commanders then
2138: LD_EXP 16
2142: IFFALSE 2234
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2144: LD_ADDR_VAR 0 5
2148: PUSH
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_EXP 7
2158: PUSH
2159: LD_VAR 0 2
2163: ARRAY
2164: PPUSH
2165: CALL 1784 0 2
2169: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2170: LD_ADDR_EXP 24
2174: PUSH
2175: LD_EXP 24
2179: PPUSH
2180: LD_EXP 24
2184: PUSH
2185: LD_INT 1
2187: PLUS
2188: PPUSH
2189: LD_VAR 0 5
2193: PPUSH
2194: CALL_OW 2
2198: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2199: LD_VAR 0 5
2203: PPUSH
2204: LD_EXP 12
2208: PUSH
2209: LD_EXP 7
2213: PUSH
2214: LD_VAR 0 2
2218: ARRAY
2219: ARRAY
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL_OW 49
// end else
2232: GO 2445
// begin uc_side := i ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_VAR 0 2
2243: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2244: LD_ADDR_OWVAR 21
2248: PUSH
2249: LD_EXP 9
2253: PUSH
2254: LD_VAR 0 2
2258: ARRAY
2259: ST_TO_ADDR
// hc_importance := 100 ;
2260: LD_ADDR_OWVAR 32
2264: PUSH
2265: LD_INT 100
2267: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2268: LD_INT 0
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_EXP 20
2278: PPUSH
2279: CALL_OW 380
// if multiplayer then
2283: LD_OWVAR 4
2287: IFFALSE 2345
// begin hc_name := mp_sides_players_names [ i ] ;
2289: LD_ADDR_OWVAR 26
2293: PUSH
2294: LD_OWVAR 19
2298: PUSH
2299: LD_VAR 0 2
2303: ARRAY
2304: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2305: LD_ADDR_OWVAR 33
2309: PUSH
2310: LD_STRING MULTIAVATARS
2312: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2313: LD_ADDR_OWVAR 34
2317: PUSH
2318: LD_VAR 0 2
2322: PPUSH
2323: CALL_OW 525
2327: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_VAR 0 2
2337: PPUSH
2338: CALL_OW 526
2342: ST_TO_ADDR
// end else
2343: GO 2377
// begin hc_gallery :=  ;
2345: LD_ADDR_OWVAR 33
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// hc_name :=  ;
2353: LD_ADDR_OWVAR 26
2357: PUSH
2358: LD_STRING 
2360: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2361: LD_ADDR_OWVAR 27
2365: PUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 2
2371: PPUSH
2372: CALL_OW 12
2376: ST_TO_ADDR
// end ; un := CreateHuman ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: CALL_OW 44
2386: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_EXP 12
2396: PUSH
2397: LD_EXP 7
2401: PUSH
2402: LD_VAR 0 2
2406: ARRAY
2407: ARRAY
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2420: LD_ADDR_EXP 24
2424: PUSH
2425: LD_EXP 24
2429: PPUSH
2430: LD_VAR 0 2
2434: PPUSH
2435: LD_VAR 0 5
2439: PPUSH
2440: CALL_OW 1
2444: ST_TO_ADDR
// end ; InitHc ;
2445: CALL_OW 19
// InitUc ;
2449: CALL_OW 18
// uc_side := i ;
2453: LD_ADDR_OWVAR 20
2457: PUSH
2458: LD_VAR 0 2
2462: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2463: LD_ADDR_OWVAR 21
2467: PUSH
2468: LD_EXP 9
2472: PUSH
2473: LD_VAR 0 2
2477: ARRAY
2478: ST_TO_ADDR
// hc_gallery :=  ;
2479: LD_ADDR_OWVAR 33
2483: PUSH
2484: LD_STRING 
2486: ST_TO_ADDR
// hc_name :=  ;
2487: LD_ADDR_OWVAR 26
2491: PUSH
2492: LD_STRING 
2494: ST_TO_ADDR
// hc_importance := 0 ;
2495: LD_ADDR_OWVAR 32
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// cl := 1 ;
2503: LD_ADDR_VAR 0 4
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2511: LD_ADDR_VAR 0 3
2515: PUSH
2516: DOUBLE
2517: LD_INT 2
2519: DEC
2520: ST_TO_ADDR
2521: LD_EXP 19
2525: PUSH
2526: FOR_TO
2527: IFFALSE 2899
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 1
2536: MINUS
2537: PUSH
2538: LD_EXP 19
2542: PUSH
2543: LD_INT 1
2545: MINUS
2546: PUSH
2547: LD_INT 4
2549: DIVREAL
2550: MOD
2551: PUSH
2552: LD_INT 0
2554: EQUAL
2555: IFFALSE 2571
// cl := cl + 1 ;
2557: LD_ADDR_VAR 0 4
2561: PUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: PLUS
2570: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2571: LD_INT 0
2573: PPUSH
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_EXP 20
2583: PPUSH
2584: CALL_OW 380
// un := CreateHuman ;
2588: LD_ADDR_VAR 0 5
2592: PUSH
2593: CALL_OW 44
2597: ST_TO_ADDR
// if j > copy then
2598: LD_VAR 0 3
2602: PUSH
2603: LD_VAR 0 8
2607: GREATER
2608: IFFALSE 2637
// copy := Replace ( copy , j , un ) else
2610: LD_ADDR_VAR 0 8
2614: PUSH
2615: LD_VAR 0 8
2619: PPUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_VAR 0 5
2629: PPUSH
2630: CALL_OW 1
2634: ST_TO_ADDR
2635: GO 2719
// begin CopySkills ( copy [ j ] , un ) ;
2637: LD_VAR 0 8
2641: PUSH
2642: LD_VAR 0 3
2646: ARRAY
2647: PPUSH
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2657: LD_VAR 0 5
2661: PPUSH
2662: LD_INT 2
2664: PPUSH
2665: LD_VAR 0 8
2669: PUSH
2670: LD_VAR 0 3
2674: ARRAY
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 260
2683: PPUSH
2684: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2688: LD_VAR 0 5
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_VAR 0 8
2700: PUSH
2701: LD_VAR 0 3
2705: ARRAY
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: CALL_OW 260
2714: PPUSH
2715: CALL_OW 239
// end ; if multi_pos_area then
2719: LD_EXP 12
2723: IFFALSE 2897
// begin if GetClass ( un ) = 3 then
2725: LD_VAR 0 5
2729: PPUSH
2730: CALL_OW 257
2734: PUSH
2735: LD_INT 3
2737: EQUAL
2738: IFFALSE 2864
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2740: LD_INT 3
2742: PUSH
2743: LD_INT 2
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_VAR 0 3
2754: PUSH
2755: LD_INT 2
2757: MOD
2758: PUSH
2759: LD_INT 1
2761: PLUS
2762: ARRAY
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 5
2772: PUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: PUSH
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 3
2791: MOD
2792: PUSH
2793: LD_INT 1
2795: PLUS
2796: ARRAY
2797: PPUSH
2798: LD_INT 100
2800: PPUSH
2801: CALL 22017 0 5
// veh := CreateVehicle ;
2805: LD_ADDR_VAR 0 6
2809: PUSH
2810: CALL_OW 45
2814: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2815: LD_VAR 0 6
2819: PPUSH
2820: LD_EXP 12
2824: PUSH
2825: LD_EXP 7
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ARRAY
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_INT 0
2843: PPUSH
2844: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2848: LD_VAR 0 5
2852: PPUSH
2853: LD_VAR 0 6
2857: PPUSH
2858: CALL_OW 52
// continue ;
2862: GO 2526
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2864: LD_VAR 0 5
2868: PPUSH
2869: LD_EXP 12
2873: PUSH
2874: LD_EXP 7
2878: PUSH
2879: LD_VAR 0 2
2883: ARRAY
2884: ARRAY
2885: PUSH
2886: LD_INT 1
2888: ARRAY
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 49
// end ; end ;
2897: GO 2526
2899: POP
2900: POP
// for j = 1 to 3 do
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_INT 3
2913: PUSH
2914: FOR_TO
2915: IFFALSE 3007
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2917: LD_INT 2
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 1
2929: PPUSH
2930: LD_INT 2
2932: PPUSH
2933: CALL_OW 12
2937: ARRAY
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 3
2944: PPUSH
2945: LD_INT 11
2947: PUSH
2948: LD_INT 7
2950: PUSH
2951: LD_INT 4
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_VAR 0 3
2963: ARRAY
2964: PPUSH
2965: LD_INT 100
2967: PPUSH
2968: CALL 22017 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2972: CALL_OW 45
2976: PPUSH
2977: LD_EXP 12
2981: PUSH
2982: LD_EXP 7
2986: PUSH
2987: LD_VAR 0 2
2991: ARRAY
2992: ARRAY
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_INT 0
3000: PPUSH
3001: CALL_OW 49
// end ;
3005: GO 2914
3007: POP
3008: POP
// end ;
3009: GO 2120
3011: POP
3012: POP
// end ;
3013: LD_VAR 0 1
3017: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3018: LD_INT 0
3020: PPUSH
3021: PPUSH
3022: PPUSH
3023: PPUSH
3024: PPUSH
// if not multi_support then
3025: LD_EXP 23
3029: NOT
3030: IFFALSE 3034
// exit ;
3032: GO 3605
// result := [ ] ;
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// for i := 1 to 8 do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: DOUBLE
3047: LD_INT 1
3049: DEC
3050: ST_TO_ADDR
3051: LD_INT 8
3053: PUSH
3054: FOR_TO
3055: IFFALSE 3603
// begin result := Replace ( result , i , [ ] ) ;
3057: LD_ADDR_VAR 0 1
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: LD_VAR 0 2
3071: PPUSH
3072: EMPTY
3073: PPUSH
3074: CALL_OW 1
3078: ST_TO_ADDR
// if multi_sides [ i ] then
3079: LD_EXP 7
3083: PUSH
3084: LD_VAR 0 2
3088: ARRAY
3089: IFFALSE 3601
// begin tmp := [ ] ;
3091: LD_ADDR_VAR 0 5
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// if multi_support = 1 then
3098: LD_EXP 23
3102: PUSH
3103: LD_INT 1
3105: EQUAL
3106: IFFALSE 3274
// begin uc_side := i ;
3108: LD_ADDR_OWVAR 20
3112: PUSH
3113: LD_VAR 0 2
3117: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3118: LD_ADDR_OWVAR 21
3122: PUSH
3123: LD_EXP 9
3127: PUSH
3128: LD_VAR 0 2
3132: ARRAY
3133: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 11
3145: PPUSH
3146: LD_INT 40
3148: PPUSH
3149: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3153: LD_ADDR_VAR 0 5
3157: PUSH
3158: LD_VAR 0 5
3162: PUSH
3163: CALL_OW 45
3167: ADD
3168: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3169: LD_INT 2
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: LD_INT 3
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: LD_INT 40
3183: PPUSH
3184: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_VAR 0 5
3197: PUSH
3198: CALL_OW 45
3202: ADD
3203: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3204: LD_INT 2
3206: PPUSH
3207: LD_INT 3
3209: PPUSH
3210: LD_INT 3
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 40
3218: PPUSH
3219: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3223: LD_ADDR_VAR 0 5
3227: PUSH
3228: LD_VAR 0 5
3232: PUSH
3233: CALL_OW 45
3237: ADD
3238: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 2
3244: PPUSH
3245: LD_INT 3
3247: PPUSH
3248: LD_INT 9
3250: PPUSH
3251: LD_INT 40
3253: PPUSH
3254: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3258: LD_ADDR_VAR 0 5
3262: PUSH
3263: LD_VAR 0 5
3267: PUSH
3268: CALL_OW 45
3272: ADD
3273: ST_TO_ADDR
// end ; if multi_support = 2 then
3274: LD_EXP 23
3278: PUSH
3279: LD_INT 2
3281: EQUAL
3282: IFFALSE 3576
// begin uc_side := i ;
3284: LD_ADDR_OWVAR 20
3288: PUSH
3289: LD_VAR 0 2
3293: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3294: LD_ADDR_OWVAR 21
3298: PUSH
3299: LD_EXP 9
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_INT 3
3318: PPUSH
3319: LD_INT 11
3321: PPUSH
3322: LD_INT 40
3324: PPUSH
3325: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3329: LD_ADDR_VAR 0 5
3333: PUSH
3334: LD_VAR 0 5
3338: PUSH
3339: CALL_OW 45
3343: ADD
3344: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3345: LD_INT 3
3347: PPUSH
3348: LD_INT 3
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_INT 12
3356: PPUSH
3357: LD_INT 40
3359: PPUSH
3360: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_VAR 0 5
3373: PUSH
3374: CALL_OW 45
3378: ADD
3379: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3380: LD_VAR 0 5
3384: PUSH
3385: LD_VAR 0 5
3389: ARRAY
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: LD_INT 100
3396: PPUSH
3397: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3401: LD_INT 2
3403: PPUSH
3404: LD_INT 3
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_INT 40
3415: PPUSH
3416: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: CALL_OW 45
3434: ADD
3435: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3436: LD_INT 4
3438: PPUSH
3439: LD_INT 1
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 6
3447: PPUSH
3448: LD_INT 40
3450: PPUSH
3451: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3455: LD_ADDR_VAR 0 5
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: CALL_OW 45
3469: ADD
3470: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3471: LD_INT 2
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_INT 9
3482: PPUSH
3483: LD_INT 40
3485: PPUSH
3486: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3490: LD_ADDR_VAR 0 5
3494: PUSH
3495: LD_VAR 0 5
3499: PUSH
3500: CALL_OW 45
3504: ADD
3505: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3506: LD_INT 2
3508: PPUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 9
3517: PPUSH
3518: LD_INT 40
3520: PPUSH
3521: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3525: LD_ADDR_VAR 0 5
3529: PUSH
3530: LD_VAR 0 5
3534: PUSH
3535: CALL_OW 45
3539: ADD
3540: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3541: LD_INT 4
3543: PPUSH
3544: LD_INT 1
3546: PPUSH
3547: LD_INT 3
3549: PPUSH
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 40
3555: PPUSH
3556: CALL 22017 0 5
// tmp := tmp ^ CreateVehicle ;
3560: LD_ADDR_VAR 0 5
3564: PUSH
3565: LD_VAR 0 5
3569: PUSH
3570: CALL_OW 45
3574: ADD
3575: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: LD_VAR 0 5
3595: PPUSH
3596: CALL_OW 1
3600: ST_TO_ADDR
// end ; end ;
3601: GO 3054
3603: POP
3604: POP
// end ;
3605: LD_VAR 0 1
3609: RET
// export function Multiplayer_Start ( ) ; begin
3610: LD_INT 0
3612: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3613: CALL 2096 0 0
// Multiplayer_InitPointSystem ( ) ;
3617: CALL 4327 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3621: LD_INT 20
3623: PPUSH
3624: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3628: LD_INT 150
3630: PPUSH
3631: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3635: LD_INT 5
3637: PPUSH
3638: CALL 4511 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3642: LD_INT 40
3644: NEG
3645: PPUSH
3646: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3650: LD_INT 200
3652: PPUSH
3653: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3657: LD_INT 2
3659: PPUSH
3660: CALL 4511 0 1
// Multiplayer_SpawnArtifact ;
3664: CALL 4953 0 0
// if multi_support then
3668: LD_EXP 23
3672: IFFALSE 3684
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3674: LD_ADDR_EXP 27
3678: PUSH
3679: CALL 3018 0 0
3683: ST_TO_ADDR
// if multi_sides [ your_side ] then
3684: LD_EXP 7
3688: PUSH
3689: LD_OWVAR 2
3693: ARRAY
3694: IFFALSE 3721
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3696: LD_INT 22
3698: PUSH
3699: LD_OWVAR 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 87
// end ;
3721: LD_VAR 0 1
3725: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3726: LD_INT 0
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
3732: PPUSH
// reinforcements_arrive := 0 ;
3733: LD_ADDR_VAR 0 5
3737: PUSH
3738: LD_INT 0
3740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3741: LD_INT 35
3743: PPUSH
3744: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3748: LD_OWVAR 1
3752: PUSH
3753: LD_EXP 29
3757: GREATER
3758: IFFALSE 3767
3760: PUSH
3761: LD_EXP 28
3765: NOT
3766: AND
3767: IFFALSE 3775
3769: PUSH
3770: LD_EXP 23
3774: AND
3775: IFFALSE 3944
// begin multi_reinforcements_spawned := true ;
3777: LD_ADDR_EXP 28
3781: PUSH
3782: LD_INT 1
3784: ST_TO_ADDR
// for i := 1 to 8 do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: DOUBLE
3791: LD_INT 1
3793: DEC
3794: ST_TO_ADDR
3795: LD_INT 8
3797: PUSH
3798: FOR_TO
3799: IFFALSE 3932
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3801: LD_EXP 7
3805: PUSH
3806: LD_VAR 0 2
3810: ARRAY
3811: IFFALSE 3826
3813: PUSH
3814: LD_EXP 25
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: NOT
3825: AND
3826: IFFALSE 3840
3828: PUSH
3829: LD_EXP 27
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: AND
3840: IFFALSE 3930
// begin tmp := multi_reinforcements [ i ] ;
3842: LD_ADDR_VAR 0 4
3846: PUSH
3847: LD_EXP 27
3851: PUSH
3852: LD_VAR 0 2
3856: ARRAY
3857: ST_TO_ADDR
// for j in tmp do
3858: LD_ADDR_VAR 0 3
3862: PUSH
3863: LD_VAR 0 4
3867: PUSH
3868: FOR_IN
3869: IFFALSE 3906
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3871: LD_VAR 0 3
3875: PPUSH
3876: LD_EXP 12
3880: PUSH
3881: LD_EXP 7
3885: PUSH
3886: LD_VAR 0 2
3890: ARRAY
3891: ARRAY
3892: PUSH
3893: LD_INT 2
3895: ARRAY
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 49
3904: GO 3868
3906: POP
3907: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3908: LD_ADDR_EXP 27
3912: PUSH
3913: LD_EXP 27
3917: PPUSH
3918: LD_VAR 0 2
3922: PPUSH
3923: EMPTY
3924: PPUSH
3925: CALL_OW 1
3929: ST_TO_ADDR
// end ; end ;
3930: GO 3798
3932: POP
3933: POP
// reinforcements_arrive := tick ;
3934: LD_ADDR_VAR 0 5
3938: PUSH
3939: LD_OWVAR 1
3943: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3944: LD_EXP 16
3948: NOT
3949: IFFALSE 4064
// begin for i = 1 to 8 do
3951: LD_ADDR_VAR 0 2
3955: PUSH
3956: DOUBLE
3957: LD_INT 1
3959: DEC
3960: ST_TO_ADDR
3961: LD_INT 8
3963: PUSH
3964: FOR_TO
3965: IFFALSE 4038
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3967: LD_INT 22
3969: PUSH
3970: LD_VAR 0 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PUSH
3984: LD_INT 0
3986: EQUAL
3987: IFFALSE 4002
3989: PUSH
3990: LD_EXP 25
3994: PUSH
3995: LD_VAR 0 2
3999: ARRAY
4000: NOT
4001: AND
4002: IFFALSE 4036
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4004: LD_ADDR_EXP 25
4008: PUSH
4009: LD_EXP 25
4013: PPUSH
4014: LD_VAR 0 2
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: CALL_OW 1
4026: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4027: LD_VAR 0 2
4031: PPUSH
4032: CALL 4581 0 1
// end ; end ;
4036: GO 3964
4038: POP
4039: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4040: LD_EXP 25
4044: PPUSH
4045: CALL 19255 0 1
4049: PUSH
4050: LD_EXP 7
4054: PPUSH
4055: CALL 19255 0 1
4059: EQUAL
4060: IFFALSE 4064
// break ;
4062: GO 4124
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
4064: LD_INT 22
4066: PUSH
4067: LD_EXP 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 50
4088: PUSH
4089: EMPTY
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: LD_INT 0
4104: EQUAL
4105: IFFALSE 4113
4107: PUSH
4108: LD_EXP 2
4112: AND
4113: IFTRUE 4122
4115: PUSH
4116: LD_EXP 24
4120: NOT
4121: OR
4122: IFFALSE 3741
// game := false ;
4124: LD_ADDR_EXP 2
4128: PUSH
4129: LD_INT 0
4131: ST_TO_ADDR
// for i := 1 to 8 do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_INT 8
4144: PUSH
4145: FOR_TO
4146: IFFALSE 4182
// begin if multi_sides [ i ] then
4148: LD_EXP 7
4152: PUSH
4153: LD_VAR 0 2
4157: ARRAY
4158: IFFALSE 4180
// SetMultiScore ( i , multi_points [ i ] ) ;
4160: LD_VAR 0 2
4164: PPUSH
4165: LD_EXP 32
4169: PUSH
4170: LD_VAR 0 2
4174: ARRAY
4175: PPUSH
4176: CALL_OW 506
// end ;
4180: GO 4145
4182: POP
4183: POP
// if multi_loosers [ your_side ] then
4184: LD_EXP 25
4188: PUSH
4189: LD_OWVAR 2
4193: ARRAY
4194: IFFALSE 4217
// begin if Multiplayer then
4196: LD_OWVAR 4
4200: IFFALSE 4208
// YouLostInMultiplayer else
4202: CALL_OW 107
4206: GO 4215
// YouLost (  ) ;
4208: LD_STRING 
4210: PPUSH
4211: CALL_OW 104
// end else
4215: GO 4233
// begin if Multiplayer then
4217: LD_OWVAR 4
4221: IFFALSE 4229
// YouWinInMultiplayer else
4223: CALL_OW 106
4227: GO 4233
// YouWin ;
4229: CALL_OW 103
// end ; end ;
4233: LD_VAR 0 1
4237: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4238: LD_INT 0
4240: PPUSH
4241: PPUSH
// result := [ ] ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: EMPTY
4248: ST_TO_ADDR
// for i := 1 to 8 do
4249: LD_ADDR_VAR 0 2
4253: PUSH
4254: DOUBLE
4255: LD_INT 1
4257: DEC
4258: ST_TO_ADDR
4259: LD_INT 8
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4320
// begin if multi_sides [ i ] then
4265: LD_EXP 7
4269: PUSH
4270: LD_VAR 0 2
4274: ARRAY
4275: IFFALSE 4318
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_VAR 0 1
4286: PUSH
4287: LD_STRING #coop-points
4289: PUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_EXP 32
4304: PUSH
4305: LD_VAR 0 2
4309: ARRAY
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: ADD
4317: ST_TO_ADDR
// end ; end ;
4318: GO 4262
4320: POP
4321: POP
// end ;
4322: LD_VAR 0 1
4326: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4327: LD_INT 0
4329: PPUSH
4330: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4331: LD_ADDR_EXP 32
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: LD_INT 0
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: LD_INT 0
4350: PUSH
4351: LD_INT 0
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4370: LD_ADDR_EXP 33
4374: PUSH
4375: EMPTY
4376: ST_TO_ADDR
// end ;
4377: LD_VAR 0 1
4381: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4382: LD_INT 0
4384: PPUSH
// if not multi_points or not side or side > 8 then
4385: LD_EXP 32
4389: NOT
4390: IFTRUE 4399
4392: PUSH
4393: LD_VAR 0 1
4397: NOT
4398: OR
4399: IFTRUE 4411
4401: PUSH
4402: LD_VAR 0 1
4406: PUSH
4407: LD_INT 8
4409: GREATER
4410: OR
4411: IFFALSE 4415
// exit ;
4413: GO 4452
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4415: LD_ADDR_EXP 32
4419: PUSH
4420: LD_EXP 32
4424: PPUSH
4425: LD_VAR 0 1
4429: PPUSH
4430: LD_EXP 32
4434: PUSH
4435: LD_VAR 0 1
4439: ARRAY
4440: PUSH
4441: LD_VAR 0 2
4445: PLUS
4446: PPUSH
4447: CALL_OW 1
4451: ST_TO_ADDR
// end ;
4452: LD_VAR 0 3
4456: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4457: LD_INT 0
4459: PPUSH
// if not multi_points or not side or side > 8 then
4460: LD_EXP 32
4464: NOT
4465: IFTRUE 4474
4467: PUSH
4468: LD_VAR 0 1
4472: NOT
4473: OR
4474: IFTRUE 4486
4476: PUSH
4477: LD_VAR 0 1
4481: PUSH
4482: LD_INT 8
4484: GREATER
4485: OR
4486: IFFALSE 4490
// exit ;
4488: GO 4506
// result := multi_points [ side ] ;
4490: LD_ADDR_VAR 0 2
4494: PUSH
4495: LD_EXP 32
4499: PUSH
4500: LD_VAR 0 1
4504: ARRAY
4505: ST_TO_ADDR
// end ;
4506: LD_VAR 0 2
4510: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4511: LD_INT 0
4513: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4514: LD_ADDR_EXP 33
4518: PUSH
4519: LD_EXP 33
4523: PPUSH
4524: LD_EXP 33
4528: PUSH
4529: LD_INT 1
4531: PLUS
4532: PPUSH
4533: LD_VAR 0 1
4537: PPUSH
4538: CALL_OW 1
4542: ST_TO_ADDR
// end ;
4543: LD_VAR 0 2
4547: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4548: LD_INT 0
4550: PPUSH
// if not id then
4551: LD_VAR 0 1
4555: NOT
4556: IFFALSE 4560
// exit ;
4558: GO 4576
// result := multi_points_conditions [ id ] ;
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_EXP 33
4569: PUSH
4570: LD_VAR 0 1
4574: ARRAY
4575: ST_TO_ADDR
// end ;
4576: LD_VAR 0 2
4580: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
// players := [ ] ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: EMPTY
4594: ST_TO_ADDR
// for i = 1 to 8 do
4595: LD_ADDR_VAR 0 4
4599: PUSH
4600: DOUBLE
4601: LD_INT 1
4603: DEC
4604: ST_TO_ADDR
4605: LD_INT 8
4607: PUSH
4608: FOR_TO
4609: IFFALSE 4670
// begin if i = side then
4611: LD_VAR 0 4
4615: PUSH
4616: LD_VAR 0 1
4620: EQUAL
4621: IFFALSE 4625
// continue ;
4623: GO 4608
// if multi_sides [ i ] and not multi_loosers [ i ] then
4625: LD_EXP 7
4629: PUSH
4630: LD_VAR 0 4
4634: ARRAY
4635: IFFALSE 4650
4637: PUSH
4638: LD_EXP 25
4642: PUSH
4643: LD_VAR 0 4
4647: ARRAY
4648: NOT
4649: AND
4650: IFFALSE 4668
// players := players ^ i ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: LD_VAR 0 3
4661: PUSH
4662: LD_VAR 0 4
4666: ADD
4667: ST_TO_ADDR
// end ;
4668: GO 4608
4670: POP
4671: POP
// if not players then
4672: LD_VAR 0 3
4676: NOT
4677: IFFALSE 4681
// exit ;
4679: GO 4948
// if players = 1 then
4681: LD_VAR 0 3
4685: PUSH
4686: LD_INT 1
4688: EQUAL
4689: IFFALSE 4750
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4691: LD_ADDR_VAR 0 4
4695: PUSH
4696: LD_INT 22
4698: PUSH
4699: LD_VAR 0 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 51
4710: PUSH
4711: EMPTY
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4746
// SetSide ( i , players [ 1 ] ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_VAR 0 3
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
4744: GO 4723
4746: POP
4747: POP
// end else
4748: GO 4948
// begin j := 1 ;
4750: LD_ADDR_VAR 0 5
4754: PUSH
4755: LD_INT 1
4757: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: LD_INT 22
4765: PUSH
4766: LD_VAR 0 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 2
4777: PUSH
4778: LD_INT 21
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 51
4790: PUSH
4791: EMPTY
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 21
4800: PUSH
4801: LD_INT 2
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PPUSH
4817: CALL_OW 69
4821: PUSH
4822: FOR_IN
4823: IFFALSE 4946
// begin SetSide ( i , players [ j ] ) ;
4825: LD_VAR 0 4
4829: PPUSH
4830: LD_VAR 0 3
4834: PUSH
4835: LD_VAR 0 5
4839: ARRAY
4840: PPUSH
4841: CALL_OW 235
// if IsDrivenBy ( i ) then
4845: LD_VAR 0 4
4849: PPUSH
4850: CALL_OW 311
4854: IFFALSE 4881
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4856: LD_VAR 0 4
4860: PPUSH
4861: CALL_OW 311
4865: PPUSH
4866: LD_VAR 0 3
4870: PUSH
4871: LD_VAR 0 5
4875: ARRAY
4876: PPUSH
4877: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4881: LD_VAR 0 4
4885: PPUSH
4886: CALL_OW 310
4890: PPUSH
4891: CALL_OW 247
4895: PUSH
4896: LD_INT 3
4898: EQUAL
4899: IFFALSE 4910
// ComExitBuilding ( i ) ;
4901: LD_VAR 0 4
4905: PPUSH
4906: CALL_OW 122
// j := j + 1 ;
4910: LD_ADDR_VAR 0 5
4914: PUSH
4915: LD_VAR 0 5
4919: PUSH
4920: LD_INT 1
4922: PLUS
4923: ST_TO_ADDR
// if j > players then
4924: LD_VAR 0 5
4928: PUSH
4929: LD_VAR 0 3
4933: GREATER
4934: IFFALSE 4944
// j := 1 ;
4936: LD_ADDR_VAR 0 5
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// end ;
4944: GO 4822
4946: POP
4947: POP
// end ; end ;
4948: LD_VAR 0 2
4952: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
4957: PPUSH
// i := 3 ;
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_INT 3
4965: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4966: LD_ADDR_VAR 0 3
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 120
4983: PUSH
4984: LD_INT 2
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 101
4993: PUSH
4994: LD_INT 8
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 27
5003: PUSH
5004: LD_INT 4
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5017: LD_INT 4
5019: PPUSH
5020: LD_INT 5
5022: PPUSH
5023: LD_VAR 0 3
5027: PUSH
5028: LD_VAR 0 2
5032: ARRAY
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PPUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 2
5047: ARRAY
5048: PUSH
5049: LD_INT 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 0
5055: PPUSH
5056: CALL_OW 58
// end ;
5060: LD_VAR 0 1
5064: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5065: LD_INT 0
5067: PPUSH
// if not side or side > 8 then
5068: LD_VAR 0 1
5072: NOT
5073: IFTRUE 5085
5075: PUSH
5076: LD_VAR 0 1
5080: PUSH
5081: LD_INT 8
5083: GREATER
5084: OR
5085: IFFALSE 5089
// exit ;
5087: GO 5106
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5089: LD_VAR 0 1
5093: PPUSH
5094: LD_INT 6
5096: PPUSH
5097: CALL 4548 0 1
5101: PPUSH
5102: CALL 4382 0 2
// end ;
5106: LD_VAR 0 2
5110: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5111: LD_INT 0
5113: PPUSH
// if not side or side > 8 then
5114: LD_VAR 0 1
5118: NOT
5119: IFTRUE 5131
5121: PUSH
5122: LD_VAR 0 1
5126: PUSH
5127: LD_INT 8
5129: GREATER
5130: OR
5131: IFFALSE 5135
// exit ;
5133: GO 5152
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_INT 4
5142: PPUSH
5143: CALL 4548 0 1
5147: PPUSH
5148: CALL 4382 0 2
// end ;
5152: LD_VAR 0 2
5156: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5157: LD_INT 0
5159: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5160: LD_VAR 0 1
5164: NOT
5165: IFTRUE 5177
5167: PUSH
5168: LD_VAR 0 1
5172: PUSH
5173: LD_INT 8
5175: GREATER
5176: OR
5177: IFTRUE 5205
5179: PUSH
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 36
5193: PUSH
5194: LD_INT 0
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: IN
5203: NOT
5204: OR
5205: IFFALSE 5209
// exit ;
5207: GO 5226
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5209: LD_VAR 0 1
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL 4548 0 1
5221: PPUSH
5222: CALL 4382 0 2
// end ;
5226: LD_VAR 0 3
5230: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5231: LD_INT 0
5233: PPUSH
5234: PPUSH
// if not un then
5235: LD_VAR 0 1
5239: NOT
5240: IFFALSE 5244
// exit ;
5242: GO 5290
// if not points then
5244: LD_VAR 0 3
5248: NOT
5249: IFFALSE 5266
// gained_points := Multiplayer_GetCondition ( 1 ) else
5251: LD_ADDR_VAR 0 5
5255: PUSH
5256: LD_INT 1
5258: PPUSH
5259: CALL 4548 0 1
5263: ST_TO_ADDR
5264: GO 5276
// gained_points := points ;
5266: LD_ADDR_VAR 0 5
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5276: LD_VAR 0 2
5280: PPUSH
5281: LD_VAR 0 5
5285: PPUSH
5286: CALL 4382 0 2
5290: LD_VAR 0 4
5294: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5295: LD_INT 0
5297: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5298: LD_VAR 0 1
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: CALL 4548 0 1
5310: PPUSH
5311: CALL 4382 0 2
// end ; end_of_file
5315: LD_VAR 0 2
5319: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5320: LD_INT 0
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// side_bot := side ;
5332: LD_ADDR_EXP 3
5336: PUSH
5337: LD_VAR 0 1
5341: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5342: LD_ADDR_VAR 0 10
5346: PUSH
5347: LD_INT 11
5349: PUSH
5350: LD_INT 4
5352: PUSH
5353: LD_INT 3
5355: PUSH
5356: LD_INT 5
5358: PUSH
5359: LD_INT 66
5361: PUSH
5362: LD_INT 67
5364: PUSH
5365: LD_INT 53
5367: PUSH
5368: LD_INT 18
5370: PUSH
5371: LD_INT 40
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 72
5379: PUSH
5380: LD_INT 55
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: ST_TO_ADDR
// for i in techs do
5397: LD_ADDR_VAR 0 3
5401: PUSH
5402: LD_VAR 0 10
5406: PUSH
5407: FOR_IN
5408: IFFALSE 5429
// SetTech ( i , side , state_researched ) ;
5410: LD_VAR 0 3
5414: PPUSH
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_INT 2
5422: PPUSH
5423: CALL_OW 322
5427: GO 5407
5429: POP
5430: POP
// InitScriptBases ;
5431: CALL 7372 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5435: LD_ADDR_VAR 0 8
5439: PUSH
5440: LD_INT 5
5442: PUSH
5443: LD_INT 7
5445: PUSH
5446: LD_INT 10
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: ST_TO_ADDR
// uc_side := side ;
5460: LD_ADDR_OWVAR 20
5464: PUSH
5465: LD_VAR 0 1
5469: ST_TO_ADDR
// uc_nation := 2 ;
5470: LD_ADDR_OWVAR 21
5474: PUSH
5475: LD_INT 2
5477: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5478: LD_ADDR_EXP 36
5482: PUSH
5483: LD_INT 94
5485: PPUSH
5486: LD_INT 35
5488: PPUSH
5489: LD_STRING dammam
5491: PPUSH
5492: LD_VAR 0 8
5496: PPUSH
5497: LD_INT 10000
5499: PUSH
5500: LD_INT 1000
5502: PUSH
5503: LD_INT 900
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: PPUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 4
5516: PUSH
5517: LD_INT 1
5519: NEG
5520: PUSH
5521: LD_INT 4
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 25854 0 6
5534: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5535: LD_ADDR_EXP 37
5539: PUSH
5540: LD_INT 122
5542: PPUSH
5543: LD_INT 38
5545: PPUSH
5546: LD_STRING 
5548: PPUSH
5549: LD_VAR 0 8
5553: PPUSH
5554: LD_INT 500
5556: PUSH
5557: LD_INT 130
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: PPUSH
5568: LD_INT 16
5570: PUSH
5571: LD_INT 4
5573: PUSH
5574: LD_INT 3
5576: PUSH
5577: LD_INT 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL 25854 0 6
5590: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5591: LD_ADDR_EXP 34
5595: PUSH
5596: LD_INT 45
5598: PPUSH
5599: LD_INT 34
5601: PPUSH
5602: LD_STRING jeddah
5604: PPUSH
5605: LD_VAR 0 8
5609: PPUSH
5610: LD_INT 2100
5612: PUSH
5613: LD_INT 300
5615: PUSH
5616: LD_INT 10
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: PPUSH
5624: LD_INT 12
5626: PUSH
5627: LD_INT 4
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL 25854 0 6
5646: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5647: LD_ADDR_EXP 35
5651: PUSH
5652: LD_INT 7
5654: PPUSH
5655: LD_INT 33
5657: PPUSH
5658: LD_STRING riyadh
5660: PPUSH
5661: LD_VAR 0 8
5665: PPUSH
5666: LD_INT 500
5668: PUSH
5669: LD_INT 60
5671: PUSH
5672: LD_INT 0
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_INT 8
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL 25854 0 6
5702: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5703: LD_ADDR_EXP 38
5707: PUSH
5708: LD_INT 69
5710: PPUSH
5711: LD_INT 36
5713: PPUSH
5714: LD_STRING 
5716: PPUSH
5717: LD_VAR 0 8
5721: PPUSH
5722: LD_INT 500
5724: PUSH
5725: LD_INT 50
5727: PUSH
5728: LD_INT 0
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_INT 11
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 4
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL 25854 0 6
5758: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5759: LD_ADDR_OWVAR 37
5763: PUSH
5764: LD_INT 14
5766: ST_TO_ADDR
// vc_engine := engine_siberite ;
5767: LD_ADDR_OWVAR 39
5771: PUSH
5772: LD_INT 3
5774: ST_TO_ADDR
// vc_control := control_manual ;
5775: LD_ADDR_OWVAR 38
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5783: LD_ADDR_OWVAR 40
5787: PUSH
5788: LD_INT 31
5790: ST_TO_ADDR
// for i = 1 to 4 do
5791: LD_ADDR_VAR 0 3
5795: PUSH
5796: DOUBLE
5797: LD_INT 1
5799: DEC
5800: ST_TO_ADDR
5801: LD_INT 4
5803: PUSH
5804: FOR_TO
5805: IFFALSE 5954
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5807: LD_ADDR_VAR 0 5
5811: PUSH
5812: LD_INT 156
5814: PUSH
5815: LD_INT 15
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 12
5824: PUSH
5825: LD_INT 7
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 2
5843: MOD
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: ARRAY
5849: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5850: LD_INT 0
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_VAR 0 8
5860: PPUSH
5861: CALL_OW 380
// un := CreateVehicle ;
5865: LD_ADDR_VAR 0 6
5869: PUSH
5870: CALL_OW 45
5874: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5875: LD_VAR 0 6
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: LD_INT 5
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5895: LD_VAR 0 6
5899: PPUSH
5900: LD_VAR 0 5
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: LD_VAR 0 5
5913: PUSH
5914: LD_INT 2
5916: ARRAY
5917: PPUSH
5918: LD_INT 6
5920: PPUSH
5921: LD_INT 0
5923: PPUSH
5924: CALL_OW 50
// un2 := CreateHuman ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: CALL_OW 44
5937: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5938: LD_VAR 0 7
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL_OW 52
// end ;
5952: GO 5804
5954: POP
5955: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: LD_INT 22
5963: PUSH
5964: LD_EXP 3
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 30
5975: PUSH
5976: LD_INT 31
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 58
5985: PUSH
5986: EMPTY
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 69
5998: PUSH
5999: FOR_IN
6000: IFFALSE 6112
// begin d := GetDir ( i ) ;
6002: LD_ADDR_VAR 0 4
6006: PUSH
6007: LD_VAR 0 3
6011: PPUSH
6012: CALL_OW 254
6016: ST_TO_ADDR
// if d < 3 then
6017: LD_VAR 0 4
6021: PUSH
6022: LD_INT 3
6024: LESS
6025: IFFALSE 6043
// d := d + 3 else
6027: LD_ADDR_VAR 0 4
6031: PUSH
6032: LD_VAR 0 4
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
6041: GO 6057
// d := d - 3 ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 4
6052: PUSH
6053: LD_INT 3
6055: MINUS
6056: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6057: LD_INT 0
6059: PPUSH
6060: LD_INT 8
6062: PPUSH
6063: LD_VAR 0 8
6067: PPUSH
6068: CALL_OW 380
// un := CreateHuman ;
6072: LD_ADDR_VAR 0 6
6076: PUSH
6077: CALL_OW 44
6081: ST_TO_ADDR
// SetDir ( un , d ) ;
6082: LD_VAR 0 6
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6096: LD_VAR 0 6
6100: PPUSH
6101: LD_VAR 0 3
6105: PPUSH
6106: CALL_OW 52
// end ;
6110: GO 5999
6112: POP
6113: POP
// ar_force_tmp := [ ] ;
6114: LD_ADDR_EXP 39
6118: PUSH
6119: EMPTY
6120: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6121: LD_INT 1
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6136: LD_ADDR_OWVAR 33
6140: PUSH
6141: LD_STRING SecondCharsGal
6143: ST_TO_ADDR
// hc_face_number := 4 ;
6144: LD_ADDR_OWVAR 34
6148: PUSH
6149: LD_INT 4
6151: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6152: LD_ADDR_EXP 39
6156: PUSH
6157: LD_EXP 39
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: CALL_OW 44
6169: PPUSH
6170: CALL_OW 1
6174: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6175: LD_INT 2
6177: PPUSH
6178: LD_INT 4
6180: PPUSH
6181: LD_VAR 0 8
6185: PPUSH
6186: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6190: LD_ADDR_OWVAR 33
6194: PUSH
6195: LD_STRING SecondCharsGal
6197: ST_TO_ADDR
// hc_face_number := 15 ;
6198: LD_ADDR_OWVAR 34
6202: PUSH
6203: LD_INT 15
6205: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6206: LD_ADDR_EXP 39
6210: PUSH
6211: LD_EXP 39
6215: PPUSH
6216: LD_INT 2
6218: PPUSH
6219: CALL_OW 44
6223: PPUSH
6224: CALL_OW 1
6228: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6229: LD_INT 2
6231: PPUSH
6232: LD_INT 4
6234: PPUSH
6235: LD_VAR 0 8
6239: PPUSH
6240: CALL_OW 380
// hc_gallery :=  ;
6244: LD_ADDR_OWVAR 33
6248: PUSH
6249: LD_STRING 
6251: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6252: LD_ADDR_EXP 39
6256: PUSH
6257: LD_EXP 39
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: CALL_OW 44
6269: PPUSH
6270: CALL_OW 1
6274: ST_TO_ADDR
// hc_sex := sex_male ;
6275: LD_ADDR_OWVAR 27
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// hc_class = 11 ;
6283: LD_ADDR_OWVAR 28
6287: PUSH
6288: LD_INT 11
6290: ST_TO_ADDR
// hc_gallery = sandar ;
6291: LD_ADDR_OWVAR 33
6295: PUSH
6296: LD_STRING sandar
6298: ST_TO_ADDR
// hc_face_number = 33 ;
6299: LD_ADDR_OWVAR 34
6303: PUSH
6304: LD_INT 33
6306: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6307: LD_ADDR_OWVAR 26
6311: PUSH
6312: LD_STRING Thabit Muhair Saliba
6314: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6315: LD_ADDR_OWVAR 31
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: LD_INT 5
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
// Saliba := CreateHuman ;
6338: LD_ADDR_EXP 41
6342: PUSH
6343: CALL_OW 44
6347: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6348: LD_EXP 41
6352: PPUSH
6353: LD_INT 7
6355: PPUSH
6356: CALL_OW 52
// hc_name := Dietrich Gensher ;
6360: LD_ADDR_OWVAR 26
6364: PUSH
6365: LD_STRING Dietrich Gensher
6367: ST_TO_ADDR
// hc_class := 1 ;
6368: LD_ADDR_OWVAR 28
6372: PUSH
6373: LD_INT 1
6375: ST_TO_ADDR
// hc_gallery := sandar ;
6376: LD_ADDR_OWVAR 33
6380: PUSH
6381: LD_STRING sandar
6383: ST_TO_ADDR
// hc_face_number := 4 ;
6384: LD_ADDR_OWVAR 34
6388: PUSH
6389: LD_INT 4
6391: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6392: LD_ADDR_OWVAR 31
6396: PUSH
6397: LD_INT 10
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: LD_INT 4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// Gensher := CreateHuman ;
6415: LD_ADDR_EXP 42
6419: PUSH
6420: CALL_OW 44
6424: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6425: LD_EXP 42
6429: PPUSH
6430: LD_INT 45
6432: PPUSH
6433: CALL_OW 52
// hc_name := Abdul Shariff ;
6437: LD_ADDR_OWVAR 26
6441: PUSH
6442: LD_STRING Abdul Shariff
6444: ST_TO_ADDR
// hc_class := 11 ;
6445: LD_ADDR_OWVAR 28
6449: PUSH
6450: LD_INT 11
6452: ST_TO_ADDR
// hc_gallery := sandar ;
6453: LD_ADDR_OWVAR 33
6457: PUSH
6458: LD_STRING sandar
6460: ST_TO_ADDR
// hc_face_number := 5 ;
6461: LD_ADDR_OWVAR 34
6465: PUSH
6466: LD_INT 5
6468: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6469: LD_ADDR_OWVAR 31
6473: PUSH
6474: LD_INT 6
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: LD_INT 3
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: ST_TO_ADDR
// Shariff := CreateHuman ;
6492: LD_ADDR_EXP 43
6496: PUSH
6497: CALL_OW 44
6501: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6502: LD_EXP 43
6506: PPUSH
6507: LD_INT 94
6509: PPUSH
6510: CALL_OW 52
// InitHc ;
6514: CALL_OW 19
// for d := 1 to 5 do
6518: LD_ADDR_VAR 0 4
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 5
6530: PUSH
6531: FOR_TO
6532: IFFALSE 7016
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6534: LD_ADDR_VAR 0 11
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 4
6548: ARRAY
6549: PPUSH
6550: LD_INT 30
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PPUSH
6560: CALL_OW 70
6564: ST_TO_ADDR
// if fac then
6565: LD_VAR 0 11
6569: IFFALSE 6602
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6571: LD_ADDR_EXP 50
6575: PUSH
6576: LD_EXP 50
6580: PPUSH
6581: LD_VAR 0 4
6585: PPUSH
6586: LD_VAR 0 11
6590: PUSH
6591: LD_INT 1
6593: ARRAY
6594: PPUSH
6595: CALL_OW 1
6599: ST_TO_ADDR
6600: GO 6625
// arFactories := Replace ( arFactories , d , 0 ) ;
6602: LD_ADDR_EXP 50
6606: PUSH
6607: LD_EXP 50
6611: PPUSH
6612: LD_VAR 0 4
6616: PPUSH
6617: LD_INT 0
6619: PPUSH
6620: CALL_OW 1
6624: ST_TO_ADDR
// for i := 1 to 2 do
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: DOUBLE
6631: LD_INT 1
6633: DEC
6634: ST_TO_ADDR
6635: LD_INT 2
6637: PUSH
6638: FOR_TO
6639: IFFALSE 6782
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6641: LD_INT 14
6643: PPUSH
6644: LD_INT 3
6646: PPUSH
6647: LD_INT 2
6649: PPUSH
6650: LD_INT 88
6652: PPUSH
6653: LD_INT 100
6655: PPUSH
6656: CALL 22017 0 5
// un := CreateVehicle ;
6660: LD_ADDR_VAR 0 6
6664: PUSH
6665: CALL_OW 45
6669: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6670: LD_ADDR_EXP 47
6674: PUSH
6675: LD_EXP 47
6679: PPUSH
6680: LD_EXP 47
6684: PUSH
6685: LD_INT 1
6687: PLUS
6688: PPUSH
6689: LD_VAR 0 4
6693: PUSH
6694: LD_VAR 0 6
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 1
6707: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6708: LD_VAR 0 6
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6720: LD_VAR 0 6
6724: PPUSH
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 5
6730: PPUSH
6731: CALL_OW 12
6735: PPUSH
6736: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6740: LD_VAR 0 6
6744: PPUSH
6745: LD_INT 24
6747: PUSH
6748: LD_INT 20
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 46
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: LD_VAR 0 4
6771: ARRAY
6772: PPUSH
6773: LD_INT 0
6775: PPUSH
6776: CALL_OW 49
// end ;
6780: GO 6638
6782: POP
6783: POP
// for i := 1 to 4 do
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_INT 4
6796: PUSH
6797: FOR_TO
6798: IFFALSE 7012
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6800: LD_INT 14
6802: PPUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 1
6819: PPUSH
6820: LD_INT 3
6822: PPUSH
6823: CALL_OW 12
6827: ARRAY
6828: PPUSH
6829: LD_INT 1
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 1
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: CALL_OW 12
6849: ARRAY
6850: PPUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 27
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 28
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: LD_VAR 0 3
6873: PUSH
6874: LD_INT 4
6876: MOD
6877: PUSH
6878: LD_INT 1
6880: PLUS
6881: ARRAY
6882: PPUSH
6883: LD_INT 100
6885: PPUSH
6886: CALL 22017 0 5
// un := CreateVehicle ;
6890: LD_ADDR_VAR 0 6
6894: PUSH
6895: CALL_OW 45
6899: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6900: LD_ADDR_EXP 47
6904: PUSH
6905: LD_EXP 47
6909: PPUSH
6910: LD_EXP 47
6914: PUSH
6915: LD_INT 1
6917: PLUS
6918: PPUSH
6919: LD_VAR 0 4
6923: PUSH
6924: LD_VAR 0 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 1
6937: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6938: LD_VAR 0 6
6942: PPUSH
6943: LD_INT 0
6945: PPUSH
6946: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6950: LD_VAR 0 6
6954: PPUSH
6955: LD_INT 0
6957: PPUSH
6958: LD_INT 5
6960: PPUSH
6961: CALL_OW 12
6965: PPUSH
6966: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6970: LD_VAR 0 6
6974: PPUSH
6975: LD_INT 24
6977: PUSH
6978: LD_INT 20
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 46
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_VAR 0 4
7001: ARRAY
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6797
7012: POP
7013: POP
// end ;
7014: GO 6531
7016: POP
7017: POP
// InitHc ;
7018: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
7022: LD_ADDR_VAR 0 9
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 2
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: ST_TO_ADDR
// if tmp and side <> 2 then
7042: LD_VAR 0 9
7046: IFFALSE 7058
7048: PUSH
7049: LD_VAR 0 1
7053: PUSH
7054: LD_INT 2
7056: NONEQUAL
7057: AND
7058: IFFALSE 7091
// begin for i in tmp do
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7089
// SetSide ( i , side ) ;
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_VAR 0 1
7082: PPUSH
7083: CALL_OW 235
7087: GO 7070
7089: POP
7090: POP
// end ; end ;
7091: LD_VAR 0 2
7095: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
7096: LD_INT 0
7098: PPUSH
7099: PPUSH
7100: PPUSH
7101: PPUSH
// tmp := AreaToList ( area , 0 ) ;
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: LD_VAR 0 1
7111: PPUSH
7112: LD_INT 0
7114: PPUSH
7115: CALL_OW 517
7119: ST_TO_ADDR
// if not tmp then
7120: LD_VAR 0 5
7124: NOT
7125: IFFALSE 7129
// exit ;
7127: GO 7367
// for i := 1 to n do
7129: LD_ADDR_VAR 0 4
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_VAR 0 2
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7365
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7147: LD_ADDR_VAR 0 6
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 5
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: CALL_OW 12
7168: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7169: LD_VAR 0 5
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PUSH
7178: LD_VAR 0 6
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 5
7188: PUSH
7189: LD_INT 2
7191: ARRAY
7192: PUSH
7193: LD_VAR 0 6
7197: ARRAY
7198: PPUSH
7199: LD_EXP 3
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7211: LD_ADDR_EXP 53
7215: PUSH
7216: LD_EXP 53
7220: PPUSH
7221: LD_EXP 53
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: PPUSH
7230: LD_VAR 0 5
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PUSH
7239: LD_VAR 0 6
7243: ARRAY
7244: PPUSH
7245: CALL_OW 2
7249: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7250: LD_ADDR_EXP 53
7254: PUSH
7255: LD_EXP 53
7259: PPUSH
7260: LD_EXP 53
7264: PUSH
7265: LD_INT 1
7267: PLUS
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 2
7276: ARRAY
7277: PUSH
7278: LD_VAR 0 6
7282: ARRAY
7283: PPUSH
7284: CALL_OW 2
7288: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7289: LD_ADDR_VAR 0 5
7293: PUSH
7294: LD_VAR 0 5
7298: PPUSH
7299: LD_INT 1
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 1
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 6
7315: PPUSH
7316: CALL_OW 3
7320: PPUSH
7321: CALL_OW 1
7325: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: LD_VAR 0 5
7335: PPUSH
7336: LD_INT 2
7338: PPUSH
7339: LD_VAR 0 5
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: LD_VAR 0 6
7352: PPUSH
7353: CALL_OW 3
7357: PPUSH
7358: CALL_OW 1
7362: ST_TO_ADDR
// end ;
7363: GO 7144
7365: POP
7366: POP
// end ;
7367: LD_VAR 0 3
7371: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7372: LD_INT 0
7374: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7375: LD_ADDR_EXP 44
7379: PUSH
7380: LD_EXP 3
7384: PPUSH
7385: LD_INT 2
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: CALL 17202 0 3
7395: ST_TO_ADDR
// arConstructList := [ ] ;
7396: LD_ADDR_EXP 45
7400: PUSH
7401: EMPTY
7402: ST_TO_ADDR
// arBuildings := [ ] ;
7403: LD_ADDR_EXP 46
7407: PUSH
7408: EMPTY
7409: ST_TO_ADDR
// arVehicles := [ ] ;
7410: LD_ADDR_EXP 47
7414: PUSH
7415: EMPTY
7416: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7417: LD_ADDR_EXP 48
7421: PUSH
7422: EMPTY
7423: ST_TO_ADDR
// arDrivers := [ ] ;
7424: LD_ADDR_EXP 49
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// arFactories := [ ] ;
7431: LD_ADDR_EXP 50
7435: PUSH
7436: EMPTY
7437: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7438: LD_ADDR_EXP 51
7442: PUSH
7443: LD_INT 33
7445: PUSH
7446: LD_INT 35
7448: PUSH
7449: LD_INT 34
7451: PUSH
7452: LD_INT 36
7454: PUSH
7455: LD_INT 38
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7465: LD_ADDR_EXP 52
7469: PUSH
7470: LD_INT 6
7472: PUSH
7473: LD_INT 6
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: LD_INT 6
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: ST_TO_ADDR
// arMinesList := [ ] ;
7492: LD_ADDR_EXP 53
7496: PUSH
7497: EMPTY
7498: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 7
7504: PUSH
7505: LD_INT 9
7507: PUSH
7508: LD_INT 11
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: LD_OWVAR 67
7520: ARRAY
7521: PPUSH
7522: CALL 7096 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7526: LD_INT 3
7528: PPUSH
7529: LD_INT 7
7531: PUSH
7532: LD_INT 9
7534: PUSH
7535: LD_INT 9
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_OWVAR 67
7547: ARRAY
7548: PPUSH
7549: CALL 7096 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7553: LD_INT 2
7555: PPUSH
7556: LD_INT 6
7558: PUSH
7559: LD_INT 8
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_OWVAR 67
7574: ARRAY
7575: PPUSH
7576: CALL 7096 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7580: LD_INT 39
7582: PPUSH
7583: LD_INT 5
7585: PUSH
7586: LD_INT 7
7588: PUSH
7589: LD_INT 9
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_OWVAR 67
7601: ARRAY
7602: PPUSH
7603: CALL 7096 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7607: LD_INT 25
7609: PPUSH
7610: LD_INT 4
7612: PUSH
7613: LD_INT 6
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: LD_OWVAR 67
7628: ARRAY
7629: PPUSH
7630: CALL 7096 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7634: LD_INT 41
7636: PPUSH
7637: LD_INT 12
7639: PUSH
7640: LD_INT 14
7642: PUSH
7643: LD_INT 16
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: LD_OWVAR 67
7655: ARRAY
7656: PPUSH
7657: CALL 7096 0 2
// end ;
7661: LD_VAR 0 1
7665: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7666: LD_INT 0
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
// enable ;
7695: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7696: LD_ADDR_VAR 0 10
7700: PUSH
7701: LD_INT 81
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: ST_TO_ADDR
// if tmp then
7718: LD_VAR 0 10
7722: IFFALSE 7743
// enemySide := GetSide ( tmp [ 1 ] ) ;
7724: LD_ADDR_VAR 0 34
7728: PUSH
7729: LD_VAR 0 10
7733: PUSH
7734: LD_INT 1
7736: ARRAY
7737: PPUSH
7738: CALL_OW 255
7742: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7743: LD_ADDR_VAR 0 22
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 81
7755: PUSH
7756: LD_VAR 0 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 70
7769: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7770: LD_ADDR_VAR 0 23
7774: PUSH
7775: LD_VAR 0 4
7779: PPUSH
7780: LD_INT 81
7782: PUSH
7783: LD_VAR 0 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7797: LD_ADDR_VAR 0 26
7801: PUSH
7802: LD_EXP 47
7806: PPUSH
7807: LD_INT 1
7809: PPUSH
7810: LD_VAR 0 2
7814: PPUSH
7815: LD_INT 2
7817: PPUSH
7818: CALL 60047 0 4
7822: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7823: LD_ADDR_VAR 0 32
7827: PUSH
7828: LD_VAR 0 3
7832: PPUSH
7833: LD_INT 22
7835: PUSH
7836: LD_VAR 0 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 2
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 0
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 30
7860: PUSH
7861: LD_INT 1
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 70
7881: ST_TO_ADDR
// if depot then
7882: LD_VAR 0 32
7886: IFFALSE 7902
// depot := depot [ 1 ] ;
7888: LD_ADDR_VAR 0 32
7892: PUSH
7893: LD_VAR 0 32
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: ST_TO_ADDR
// if arTech then
7902: LD_EXP 44
7906: IFFALSE 8065
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7908: LD_ADDR_VAR 0 12
7912: PUSH
7913: LD_VAR 0 3
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_VAR 0 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 50
7932: PUSH
7933: EMPTY
7934: LIST
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 6
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 30
7951: PUSH
7952: LD_INT 7
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 30
7961: PUSH
7962: LD_INT 8
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 70
7984: ST_TO_ADDR
// if lab then
7985: LD_VAR 0 12
7989: IFFALSE 8065
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7991: LD_VAR 0 12
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PPUSH
8000: CALL_OW 461
8004: PUSH
8005: LD_INT 2
8007: EQUAL
8008: IFFALSE 8065
// begin for i in arTech do
8010: LD_ADDR_VAR 0 9
8014: PUSH
8015: LD_EXP 44
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8063
// if CanBeResearched ( lab [ 1 ] , i ) then
8023: LD_VAR 0 12
8027: PUSH
8028: LD_INT 1
8030: ARRAY
8031: PPUSH
8032: LD_VAR 0 9
8036: PPUSH
8037: CALL_OW 430
8041: IFFALSE 8061
// begin AddComResearch ( lab [ 1 ] , i ) ;
8043: LD_VAR 0 12
8047: PUSH
8048: LD_INT 1
8050: ARRAY
8051: PPUSH
8052: LD_VAR 0 9
8056: PPUSH
8057: CALL_OW 184
// end ;
8061: GO 8020
8063: POP
8064: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
8065: LD_ADDR_VAR 0 29
8069: PUSH
8070: LD_VAR 0 3
8074: PPUSH
8075: LD_INT 22
8077: PUSH
8078: LD_VAR 0 1
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 50
8099: PUSH
8100: EMPTY
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 70
8112: ST_TO_ADDR
// if fac then
8113: LD_VAR 0 29
8117: IFFALSE 8506
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8119: LD_VAR 0 29
8123: PUSH
8124: LD_INT 1
8126: ARRAY
8127: PPUSH
8128: CALL_OW 461
8132: PUSH
8133: LD_INT 2
8135: EQUAL
8136: IFFALSE 8506
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8138: LD_ADDR_VAR 0 30
8142: PUSH
8143: LD_VAR 0 3
8147: PPUSH
8148: LD_INT 2
8150: PUSH
8151: LD_INT 30
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 30
8163: PUSH
8164: LD_INT 33
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 35
8178: PUSH
8179: LD_INT 0
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 70
8194: ST_TO_ADDR
// if emptyTowers then
8195: LD_VAR 0 30
8199: IFFALSE 8249
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8201: LD_ADDR_VAR 0 31
8205: PUSH
8206: LD_VAR 0 30
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL 27546 0 2
8224: ST_TO_ADDR
// if weapon then
8225: LD_VAR 0 31
8229: IFFALSE 8249
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8231: LD_VAR 0 30
8235: PUSH
8236: LD_INT 1
8238: ARRAY
8239: PPUSH
8240: LD_VAR 0 31
8244: PPUSH
8245: CALL_OW 148
// end ; if arConstructList then
8249: LD_EXP 45
8253: IFFALSE 8506
// for i := 1 to Count ( arConstructList ) do
8255: LD_ADDR_VAR 0 9
8259: PUSH
8260: DOUBLE
8261: LD_INT 1
8263: DEC
8264: ST_TO_ADDR
8265: LD_EXP 45
8269: PPUSH
8270: CALL 19255 0 1
8274: PUSH
8275: FOR_TO
8276: IFFALSE 8504
// begin if arConstructList [ i ] [ 1 ] = base then
8278: LD_EXP 45
8282: PUSH
8283: LD_VAR 0 9
8287: ARRAY
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PUSH
8293: LD_VAR 0 2
8297: EQUAL
8298: IFFALSE 8502
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8300: LD_VAR 0 29
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_EXP 45
8313: PUSH
8314: LD_VAR 0 9
8318: ARRAY
8319: PUSH
8320: LD_INT 2
8322: ARRAY
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: LD_EXP 45
8332: PUSH
8333: LD_VAR 0 9
8337: ARRAY
8338: PUSH
8339: LD_INT 2
8341: ARRAY
8342: PUSH
8343: LD_INT 2
8345: ARRAY
8346: PPUSH
8347: LD_EXP 45
8351: PUSH
8352: LD_VAR 0 9
8356: ARRAY
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PUSH
8362: LD_INT 3
8364: ARRAY
8365: PPUSH
8366: LD_EXP 45
8370: PUSH
8371: LD_VAR 0 9
8375: ARRAY
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PUSH
8381: LD_INT 4
8383: ARRAY
8384: PPUSH
8385: CALL_OW 448
8389: IFFALSE 8502
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8391: LD_VAR 0 29
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_EXP 45
8404: PUSH
8405: LD_VAR 0 9
8409: ARRAY
8410: PUSH
8411: LD_INT 2
8413: ARRAY
8414: PUSH
8415: LD_INT 1
8417: ARRAY
8418: PPUSH
8419: LD_EXP 45
8423: PUSH
8424: LD_VAR 0 9
8428: ARRAY
8429: PUSH
8430: LD_INT 2
8432: ARRAY
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PPUSH
8438: LD_EXP 45
8442: PUSH
8443: LD_VAR 0 9
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PPUSH
8457: LD_EXP 45
8461: PUSH
8462: LD_VAR 0 9
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: PUSH
8472: LD_INT 4
8474: ARRAY
8475: PPUSH
8476: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8480: LD_ADDR_EXP 45
8484: PUSH
8485: LD_EXP 45
8489: PPUSH
8490: LD_VAR 0 9
8494: PPUSH
8495: CALL_OW 3
8499: ST_TO_ADDR
// break ;
8500: GO 8504
// end ; end ;
8502: GO 8275
8504: POP
8505: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8506: LD_ADDR_VAR 0 10
8510: PUSH
8511: LD_VAR 0 3
8515: PPUSH
8516: LD_INT 21
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 57
8531: PUSH
8532: EMPTY
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 1000
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 70
8565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8566: LD_ADDR_VAR 0 17
8570: PUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: CALL_OW 435
8580: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8581: LD_ADDR_VAR 0 14
8585: PUSH
8586: LD_VAR 0 5
8590: PPUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 50
8603: PUSH
8604: EMPTY
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 72
8615: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8616: LD_VAR 0 14
8620: PPUSH
8621: LD_INT 3
8623: PUSH
8624: LD_INT 120
8626: PUSH
8627: LD_INT 7
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 3
8640: PUSH
8641: LD_INT 54
8643: PUSH
8644: EMPTY
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: IFFALSE 8678
8661: PUSH
8662: LD_EXP 50
8666: PUSH
8667: LD_VAR 0 2
8671: ARRAY
8672: PPUSH
8673: CALL_OW 302
8677: AND
8678: IFFALSE 8739
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8680: LD_VAR 0 14
8684: PPUSH
8685: LD_INT 3
8687: PUSH
8688: LD_INT 120
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 54
8707: PUSH
8708: EMPTY
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 72
8723: PPUSH
8724: LD_EXP 50
8728: PUSH
8729: LD_VAR 0 2
8733: ARRAY
8734: PPUSH
8735: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8739: LD_ADDR_VAR 0 18
8743: PUSH
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 4
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 50
8761: PUSH
8762: EMPTY
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 72
8773: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8774: LD_ADDR_VAR 0 12
8778: PUSH
8779: LD_VAR 0 3
8783: PPUSH
8784: LD_INT 2
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 6
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 30
8799: PUSH
8800: LD_INT 7
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 8
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 70
8827: ST_TO_ADDR
// if sci then
8828: LD_VAR 0 18
8832: IFFALSE 8993
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8834: LD_ADDR_VAR 0 20
8838: PUSH
8839: LD_VAR 0 5
8843: PPUSH
8844: LD_INT 95
8846: PUSH
8847: LD_VAR 0 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 120
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 72
8874: ST_TO_ADDR
// if hurtUnits then
8875: LD_VAR 0 20
8879: IFFALSE 8940
// begin for i in sci do
8881: LD_ADDR_VAR 0 9
8885: PUSH
8886: LD_VAR 0 18
8890: PUSH
8891: FOR_IN
8892: IFFALSE 8936
// if IsInUnit ( i ) then
8894: LD_VAR 0 9
8898: PPUSH
8899: CALL_OW 310
8903: IFFALSE 8916
// ComExitBuilding ( i ) else
8905: LD_VAR 0 9
8909: PPUSH
8910: CALL_OW 122
8914: GO 8934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8916: LD_VAR 0 9
8920: PPUSH
8921: LD_VAR 0 20
8925: PUSH
8926: LD_INT 1
8928: ARRAY
8929: PPUSH
8930: CALL_OW 128
8934: GO 8891
8936: POP
8937: POP
// end else
8938: GO 8993
// if lab then
8940: LD_VAR 0 12
8944: IFFALSE 8993
// begin for i in sci do
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_VAR 0 18
8955: PUSH
8956: FOR_IN
8957: IFFALSE 8991
// if not IsInUnit ( i ) then
8959: LD_VAR 0 9
8963: PPUSH
8964: CALL_OW 310
8968: NOT
8969: IFFALSE 8989
// ComEnterUnit ( i , lab [ 1 ] ) ;
8971: LD_VAR 0 9
8975: PPUSH
8976: LD_VAR 0 12
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: PPUSH
8985: CALL_OW 120
8989: GO 8956
8991: POP
8992: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8993: LD_ADDR_VAR 0 13
8997: PUSH
8998: LD_VAR 0 5
9002: PPUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 2
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 72
9017: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
9018: LD_ADDR_VAR 0 33
9022: PUSH
9023: LD_EXP 46
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 2
9038: PPUSH
9039: CALL 60047 0 4
9043: ST_TO_ADDR
// if eng then
9044: LD_VAR 0 13
9048: IFFALSE 9896
// begin for i in eng do
9050: LD_ADDR_VAR 0 9
9054: PUSH
9055: LD_VAR 0 13
9059: PUSH
9060: FOR_IN
9061: IFFALSE 9894
// begin tag := GetTag ( i ) ;
9063: LD_ADDR_VAR 0 15
9067: PUSH
9068: LD_VAR 0 9
9072: PPUSH
9073: CALL_OW 110
9077: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
9078: LD_VAR 0 9
9082: PPUSH
9083: LD_VAR 0 4
9087: PPUSH
9088: CALL_OW 308
9092: IFFALSE 9123
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9094: LD_VAR 0 9
9098: PPUSH
9099: LD_VAR 0 7
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PPUSH
9108: LD_VAR 0 7
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PPUSH
9117: CALL_OW 111
// continue ;
9121: GO 9060
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9123: LD_VAR 0 9
9127: PPUSH
9128: CALL_OW 256
9132: PUSH
9133: LD_INT 800
9135: LESS
9136: IFFALSE 9148
9138: PUSH
9139: LD_VAR 0 15
9143: PUSH
9144: LD_INT 1
9146: NONEQUAL
9147: AND
9148: IFFALSE 9198
// begin SetTag ( i , tHeal ) ;
9150: LD_VAR 0 9
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9162: LD_VAR 0 9
9166: PPUSH
9167: LD_VAR 0 6
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: PPUSH
9176: LD_VAR 0 6
9180: PUSH
9181: LD_INT 2
9183: ARRAY
9184: PPUSH
9185: CALL_OW 111
// AddComHold ( i ) ;
9189: LD_VAR 0 9
9193: PPUSH
9194: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9198: LD_VAR 0 15
9202: PUSH
9203: LD_INT 1
9205: EQUAL
9206: IFFALSE 9223
9208: PUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 256
9218: PUSH
9219: LD_INT 1000
9221: EQUAL
9222: AND
9223: IFFALSE 9237
// SetTag ( i , 0 ) ;
9225: LD_VAR 0 9
9229: PPUSH
9230: LD_INT 0
9232: PPUSH
9233: CALL_OW 109
// if not tag then
9237: LD_VAR 0 15
9241: NOT
9242: IFFALSE 9413
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9244: LD_ADDR_VAR 0 11
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 57
9256: PUSH
9257: EMPTY
9258: LIST
9259: PPUSH
9260: CALL_OW 70
9264: ST_TO_ADDR
// if undone then
9265: LD_VAR 0 11
9269: IFFALSE 9291
// begin ComComplete ( i , undone [ 1 ] ) ;
9271: LD_VAR 0 9
9275: PPUSH
9276: LD_VAR 0 11
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: PPUSH
9285: CALL 25391 0 2
// continue ;
9289: GO 9060
// end ; if cr or tmp or buildingsToBuild then
9291: LD_VAR 0 17
9295: IFTRUE 9303
9297: PUSH
9298: LD_VAR 0 10
9302: OR
9303: IFTRUE 9311
9305: PUSH
9306: LD_VAR 0 33
9310: OR
9311: IFFALSE 9387
// begin if IsInUnit ( i ) then
9313: LD_VAR 0 9
9317: PPUSH
9318: CALL_OW 310
9322: IFFALSE 9333
// ComExitBuilding ( i ) ;
9324: LD_VAR 0 9
9328: PPUSH
9329: CALL_OW 122
// if tmp then
9333: LD_VAR 0 10
9337: IFFALSE 9353
// SetTag ( i , tRepair ) else
9339: LD_VAR 0 9
9343: PPUSH
9344: LD_INT 3
9346: PPUSH
9347: CALL_OW 109
9351: GO 9385
// if cr then
9353: LD_VAR 0 17
9357: IFFALSE 9373
// SetTag ( i , tCrates ) else
9359: LD_VAR 0 9
9363: PPUSH
9364: LD_INT 2
9366: PPUSH
9367: CALL_OW 109
9371: GO 9385
// SetTag ( i , tBuild ) ;
9373: LD_VAR 0 9
9377: PPUSH
9378: LD_INT 5
9380: PPUSH
9381: CALL_OW 109
// end else
9385: GO 9413
// if not IsInUnit ( i ) then
9387: LD_VAR 0 9
9391: PPUSH
9392: CALL_OW 310
9396: NOT
9397: IFFALSE 9413
// ComEnterUnit ( i , depot ) ;
9399: LD_VAR 0 9
9403: PPUSH
9404: LD_VAR 0 32
9408: PPUSH
9409: CALL_OW 120
// end ; if tag = tRepair then
9413: LD_VAR 0 15
9417: PUSH
9418: LD_INT 3
9420: EQUAL
9421: IFFALSE 9527
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 9
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9445
// begin ComExitBuilding ( i ) ;
9434: LD_VAR 0 9
9438: PPUSH
9439: CALL_OW 122
// continue ;
9443: GO 9060
// end ; if not tmp then
9445: LD_VAR 0 10
9449: NOT
9450: IFFALSE 9466
// begin SetTag ( i , 0 ) ;
9452: LD_VAR 0 9
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 109
// continue ;
9464: GO 9060
// end ; if not HasTask ( i ) then
9466: LD_VAR 0 9
9470: PPUSH
9471: CALL_OW 314
9475: NOT
9476: IFFALSE 9496
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9478: LD_VAR 0 9
9482: PPUSH
9483: LD_VAR 0 10
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: CALL_OW 130
// if not IsInArea ( i , area ) then
9496: LD_VAR 0 9
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: CALL_OW 308
9510: NOT
9511: IFFALSE 9527
// ComMoveToArea ( i , area ) ;
9513: LD_VAR 0 9
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: CALL_OW 113
// end ; if tag = tBuild then
9527: LD_VAR 0 15
9531: PUSH
9532: LD_INT 5
9534: EQUAL
9535: IFFALSE 9745
// begin if IsInUnit ( i ) then
9537: LD_VAR 0 9
9541: PPUSH
9542: CALL_OW 310
9546: IFFALSE 9559
// begin ComExitBuilding ( i ) ;
9548: LD_VAR 0 9
9552: PPUSH
9553: CALL_OW 122
// continue ;
9557: GO 9060
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9559: LD_VAR 0 33
9563: NOT
9564: IFTRUE 9572
9566: PUSH
9567: LD_VAR 0 22
9571: OR
9572: IFTRUE 9580
9574: PUSH
9575: LD_VAR 0 23
9579: OR
9580: IFFALSE 9598
// begin SetTag ( i , 0 ) ;
9582: LD_VAR 0 9
9586: PPUSH
9587: LD_INT 0
9589: PPUSH
9590: CALL_OW 109
// continue ;
9594: GO 9060
// end else
9596: GO 9637
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9598: LD_VAR 0 32
9602: PPUSH
9603: LD_VAR 0 33
9607: PUSH
9608: LD_INT 1
9610: ARRAY
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: CALL 59282 0 2
9620: NOT
9621: IFFALSE 9637
// begin SetTag ( i , 0 ) ;
9623: LD_VAR 0 9
9627: PPUSH
9628: LD_INT 0
9630: PPUSH
9631: CALL_OW 109
// continue ;
9635: GO 9060
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9637: LD_ADDR_VAR 0 11
9641: PUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 57
9649: PUSH
9650: EMPTY
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: ST_TO_ADDR
// if undone then
9658: LD_VAR 0 11
9662: IFFALSE 9684
// begin ComComplete ( i , undone [ 1 ] ) ;
9664: LD_VAR 0 9
9668: PPUSH
9669: LD_VAR 0 11
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: PPUSH
9678: CALL 25391 0 2
// continue ;
9682: GO 9060
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9684: LD_VAR 0 9
9688: PPUSH
9689: LD_VAR 0 33
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PUSH
9698: LD_INT 1
9700: ARRAY
9701: PPUSH
9702: LD_VAR 0 33
9706: PUSH
9707: LD_INT 1
9709: ARRAY
9710: PUSH
9711: LD_INT 2
9713: ARRAY
9714: PPUSH
9715: LD_VAR 0 33
9719: PUSH
9720: LD_INT 1
9722: ARRAY
9723: PUSH
9724: LD_INT 3
9726: ARRAY
9727: PPUSH
9728: LD_VAR 0 33
9732: PUSH
9733: LD_INT 1
9735: ARRAY
9736: PUSH
9737: LD_INT 4
9739: ARRAY
9740: PPUSH
9741: CALL_OW 145
// end ; if tag = tCrates then
9745: LD_VAR 0 15
9749: PUSH
9750: LD_INT 2
9752: EQUAL
9753: IFFALSE 9892
// begin if IsInUnit ( i ) then
9755: LD_VAR 0 9
9759: PPUSH
9760: CALL_OW 310
9764: IFFALSE 9777
// begin ComExitBuilding ( i ) ;
9766: LD_VAR 0 9
9770: PPUSH
9771: CALL_OW 122
// continue ;
9775: GO 9060
// end ; if not cr then
9777: LD_VAR 0 17
9781: NOT
9782: IFFALSE 9798
// begin SetTag ( i , 0 ) ;
9784: LD_VAR 0 9
9788: PPUSH
9789: LD_INT 0
9791: PPUSH
9792: CALL_OW 109
// continue ;
9796: GO 9060
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9798: LD_VAR 0 9
9802: PPUSH
9803: CALL_OW 314
9807: NOT
9808: IFFALSE 9863
9810: PUSH
9811: LD_INT 81
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 92
9825: PUSH
9826: LD_VAR 0 17
9830: PUSH
9831: LD_INT 1
9833: ARRAY
9834: PUSH
9835: LD_VAR 0 17
9839: PUSH
9840: LD_INT 2
9842: ARRAY
9843: PUSH
9844: LD_INT 12
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: NOT
9862: AND
9863: IFFALSE 9892
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9865: LD_VAR 0 9
9869: PPUSH
9870: LD_VAR 0 17
9874: PUSH
9875: LD_INT 1
9877: ARRAY
9878: PPUSH
9879: LD_VAR 0 17
9883: PUSH
9884: LD_INT 2
9886: ARRAY
9887: PPUSH
9888: CALL_OW 117
// end ; end ;
9892: GO 9060
9894: POP
9895: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9896: LD_ADDR_VAR 0 25
9900: PUSH
9901: LD_VAR 0 26
9905: PPUSH
9906: LD_INT 34
9908: PUSH
9909: LD_INT 88
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 50
9918: PUSH
9919: EMPTY
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PPUSH
9926: CALL_OW 72
9930: ST_TO_ADDR
// if cranes then
9931: LD_VAR 0 25
9935: IFFALSE 10000
// begin if tmp then
9937: LD_VAR 0 10
9941: IFFALSE 9986
// begin for i in cranes do
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_VAR 0 25
9952: PUSH
9953: FOR_IN
9954: IFFALSE 9982
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9956: LD_VAR 0 9
9960: PPUSH
9961: LD_VAR 0 10
9965: PPUSH
9966: LD_VAR 0 9
9970: PPUSH
9971: CALL_OW 74
9975: PPUSH
9976: CALL_OW 130
9980: GO 9953
9982: POP
9983: POP
// end else
9984: GO 10000
// ComBackOnParking ( cranes , parkingPoint ) ;
9986: LD_VAR 0 25
9990: PPUSH
9991: LD_VAR 0 7
9995: PPUSH
9996: CALL 60184 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
10000: LD_ADDR_VAR 0 27
10004: PUSH
10005: LD_EXP 48
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_INT 2
10020: PPUSH
10021: CALL 60047 0 4
10025: ST_TO_ADDR
// if vehicles2 then
10026: LD_VAR 0 27
10030: IFFALSE 10097
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10032: LD_ADDR_VAR 0 9
10036: PUSH
10037: LD_VAR 0 27
10041: PPUSH
10042: LD_INT 33
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 50
10054: PUSH
10055: EMPTY
10056: LIST
10057: PUSH
10058: LD_INT 3
10060: PUSH
10061: LD_INT 61
10063: PUSH
10064: EMPTY
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: PUSH
10081: FOR_IN
10082: IFFALSE 10095
// Connect ( i ) ;
10084: LD_VAR 0 9
10088: PPUSH
10089: CALL 25499 0 1
10093: GO 10081
10095: POP
10096: POP
// if vehicles then
10097: LD_VAR 0 26
10101: IFFALSE 11019
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10103: LD_ADDR_VAR 0 9
10107: PUSH
10108: LD_VAR 0 26
10112: PPUSH
10113: LD_INT 33
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 50
10125: PUSH
10126: EMPTY
10127: LIST
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 61
10134: PUSH
10135: EMPTY
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: PUSH
10152: FOR_IN
10153: IFFALSE 10166
// Connect ( i ) ;
10155: LD_VAR 0 9
10159: PPUSH
10160: CALL 25499 0 1
10164: GO 10152
10166: POP
10167: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10168: LD_ADDR_VAR 0 26
10172: PUSH
10173: LD_VAR 0 26
10177: PPUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: LD_INT 34
10186: PUSH
10187: LD_INT 88
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 34
10196: PUSH
10197: LD_INT 32
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 50
10215: PUSH
10216: EMPTY
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PPUSH
10223: CALL_OW 72
10227: ST_TO_ADDR
// if vehicles then
10228: LD_VAR 0 26
10232: IFFALSE 11019
// begin for i in vehicles do
10234: LD_ADDR_VAR 0 9
10238: PUSH
10239: LD_VAR 0 26
10243: PUSH
10244: FOR_IN
10245: IFFALSE 11017
// begin tag := GetTag ( i ) ;
10247: LD_ADDR_VAR 0 15
10251: PUSH
10252: LD_VAR 0 9
10256: PPUSH
10257: CALL_OW 110
10261: ST_TO_ADDR
// if not tag then
10262: LD_VAR 0 15
10266: NOT
10267: IFFALSE 10438
// begin if GetControl ( i ) = control_manual then
10269: LD_VAR 0 9
10273: PPUSH
10274: CALL_OW 263
10278: PUSH
10279: LD_INT 1
10281: EQUAL
10282: IFFALSE 10424
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10284: LD_ADDR_VAR 0 24
10288: PUSH
10289: LD_EXP 49
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 9
10301: PPUSH
10302: LD_INT 2
10304: PPUSH
10305: CALL 60047 0 4
10309: ST_TO_ADDR
// if not drivers then
10310: LD_VAR 0 24
10314: NOT
10315: IFFALSE 10404
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10317: LD_ADDR_VAR 0 24
10321: PUSH
10322: LD_VAR 0 14
10326: PPUSH
10327: LD_INT 3
10329: PUSH
10330: LD_INT 120
10332: PUSH
10333: LD_INT 7
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PPUSH
10344: CALL_OW 72
10348: ST_TO_ADDR
// if drivers then
10349: LD_VAR 0 24
10353: IFFALSE 10404
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10355: LD_VAR 0 24
10359: PUSH
10360: LD_INT 1
10362: ARRAY
10363: PPUSH
10364: LD_INT 7
10366: PPUSH
10367: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10371: LD_ADDR_EXP 49
10375: PUSH
10376: LD_EXP 49
10380: PPUSH
10381: LD_VAR 0 9
10385: PUSH
10386: LD_VAR 0 24
10390: PUSH
10391: LD_INT 1
10393: ARRAY
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL 55187 0 2
10403: ST_TO_ADDR
// end ; end ; if drivers then
10404: LD_VAR 0 24
10408: IFFALSE 10422
// SetTag ( i , tBusy ) ;
10410: LD_VAR 0 9
10414: PPUSH
10415: LD_INT 8
10417: PPUSH
10418: CALL_OW 109
// continue ;
10422: GO 10244
// end ; SetTag ( i , tBusy ) ;
10424: LD_VAR 0 9
10428: PPUSH
10429: LD_INT 8
10431: PPUSH
10432: CALL_OW 109
// end else
10436: GO 11015
// if tag = tBusy then
10438: LD_VAR 0 15
10442: PUSH
10443: LD_INT 8
10445: EQUAL
10446: IFFALSE 10682
// begin if GetLives ( i ) = 1000 then
10448: LD_VAR 0 9
10452: PPUSH
10453: CALL_OW 256
10457: PUSH
10458: LD_INT 1000
10460: EQUAL
10461: IFFALSE 10680
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10463: LD_VAR 0 9
10467: PPUSH
10468: CALL_OW 263
10472: PUSH
10473: LD_INT 1
10475: EQUAL
10476: IFFALSE 10490
10478: PUSH
10479: LD_VAR 0 9
10483: PPUSH
10484: CALL_OW 311
10488: NOT
10489: AND
10490: IFFALSE 10668
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10492: LD_ADDR_VAR 0 24
10496: PUSH
10497: LD_EXP 49
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_VAR 0 9
10509: PPUSH
10510: LD_INT 2
10512: PPUSH
10513: CALL 60047 0 4
10517: ST_TO_ADDR
// if not drivers then
10518: LD_VAR 0 24
10522: NOT
10523: IFFALSE 10539
// begin SetTag ( i , 0 ) ;
10525: LD_VAR 0 9
10529: PPUSH
10530: LD_INT 0
10532: PPUSH
10533: CALL_OW 109
// continue ;
10537: GO 10244
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10539: LD_VAR 0 24
10543: PUSH
10544: LD_INT 1
10546: ARRAY
10547: PPUSH
10548: CALL_OW 310
10552: IFFALSE 10570
10554: PUSH
10555: LD_VAR 0 24
10559: PUSH
10560: LD_INT 1
10562: ARRAY
10563: PPUSH
10564: CALL 52767 0 1
10568: NOT
10569: AND
10570: IFFALSE 10585
// ComExitBuilding ( drivers [ 1 ] ) ;
10572: LD_VAR 0 24
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10585: LD_VAR 0 26
10589: PPUSH
10590: LD_INT 120
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 72
10604: IFFALSE 10622
10606: PUSH
10607: LD_VAR 0 24
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: CALL_OW 314
10620: NOT
10621: AND
10622: IFTRUE 10646
10624: PUSH
10625: LD_VAR 0 26
10629: PPUSH
10630: LD_INT 120
10632: PUSH
10633: LD_INT 3
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 72
10644: NOT
10645: OR
10646: IFFALSE 10666
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10648: LD_VAR 0 24
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: LD_VAR 0 9
10661: PPUSH
10662: CALL_OW 120
// continue ;
10666: GO 10244
// end ; SetTag ( i , tAttack ) ;
10668: LD_VAR 0 9
10672: PPUSH
10673: LD_INT 13
10675: PPUSH
10676: CALL_OW 109
// end ; end else
10680: GO 11015
// if tag = tAttack then
10682: LD_VAR 0 15
10686: PUSH
10687: LD_INT 13
10689: EQUAL
10690: IFFALSE 10872
// begin enemy := enemyInBase ;
10692: LD_ADDR_VAR 0 21
10696: PUSH
10697: LD_VAR 0 22
10701: ST_TO_ADDR
// if not enemy then
10702: LD_VAR 0 21
10706: NOT
10707: IFFALSE 10719
// enemy := enemyOuterBase ;
10709: LD_ADDR_VAR 0 21
10713: PUSH
10714: LD_VAR 0 23
10718: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10719: LD_VAR 0 21
10723: NOT
10724: IFFALSE 10759
10726: PUSH
10727: LD_VAR 0 9
10731: PPUSH
10732: LD_VAR 0 7
10736: PUSH
10737: LD_INT 1
10739: ARRAY
10740: PPUSH
10741: LD_VAR 0 7
10745: PUSH
10746: LD_INT 2
10748: ARRAY
10749: PPUSH
10750: CALL_OW 297
10754: PUSH
10755: LD_INT 10
10757: GREATER
10758: AND
10759: IFFALSE 10790
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10761: LD_VAR 0 9
10765: PPUSH
10766: LD_VAR 0 7
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PPUSH
10775: LD_VAR 0 7
10779: PUSH
10780: LD_INT 2
10782: ARRAY
10783: PPUSH
10784: CALL_OW 111
// continue ;
10788: GO 10244
// end ; if GetLives ( i ) < 650 then
10790: LD_VAR 0 9
10794: PPUSH
10795: CALL_OW 256
10799: PUSH
10800: LD_INT 650
10802: LESS
10803: IFFALSE 10846
// begin SetTag ( i , tVehRepair ) ;
10805: LD_VAR 0 9
10809: PPUSH
10810: LD_INT 9
10812: PPUSH
10813: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10817: LD_VAR 0 9
10821: PPUSH
10822: LD_VAR 0 7
10826: PUSH
10827: LD_INT 1
10829: ARRAY
10830: PPUSH
10831: LD_VAR 0 7
10835: PUSH
10836: LD_INT 2
10838: ARRAY
10839: PPUSH
10840: CALL_OW 111
// continue ;
10844: GO 10244
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10846: LD_VAR 0 9
10850: PPUSH
10851: LD_VAR 0 21
10855: PPUSH
10856: LD_VAR 0 9
10860: PPUSH
10861: CALL_OW 74
10865: PPUSH
10866: CALL_OW 115
// end else
10870: GO 11015
// if tag = tVehRepair then
10872: LD_VAR 0 15
10876: PUSH
10877: LD_INT 9
10879: EQUAL
10880: IFFALSE 11015
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10882: LD_VAR 0 9
10886: PPUSH
10887: LD_VAR 0 7
10891: PUSH
10892: LD_INT 1
10894: ARRAY
10895: PPUSH
10896: LD_VAR 0 7
10900: PUSH
10901: LD_INT 2
10903: ARRAY
10904: PPUSH
10905: CALL_OW 297
10909: PUSH
10910: LD_INT 10
10912: GREATER
10913: IFFALSE 10944
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10915: LD_VAR 0 9
10919: PPUSH
10920: LD_VAR 0 7
10924: PUSH
10925: LD_INT 1
10927: ARRAY
10928: PPUSH
10929: LD_VAR 0 7
10933: PUSH
10934: LD_INT 2
10936: ARRAY
10937: PPUSH
10938: CALL_OW 111
// continue ;
10942: GO 10244
// end ; if GetLives ( i ) = 1000 then
10944: LD_VAR 0 9
10948: PPUSH
10949: CALL_OW 256
10953: PUSH
10954: LD_INT 1000
10956: EQUAL
10957: IFFALSE 10973
// begin SetTag ( i , tBusy ) ;
10959: LD_VAR 0 9
10963: PPUSH
10964: LD_INT 8
10966: PPUSH
10967: CALL_OW 109
// continue ;
10971: GO 10244
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10973: LD_VAR 0 9
10977: PPUSH
10978: CALL_OW 263
10982: PUSH
10983: LD_INT 1
10985: EQUAL
10986: IFFALSE 10999
10988: PUSH
10989: LD_VAR 0 9
10993: PPUSH
10994: CALL_OW 311
10998: AND
10999: IFFALSE 11015
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
11001: LD_VAR 0 9
11005: PPUSH
11006: CALL_OW 311
11010: PPUSH
11011: CALL 56901 0 1
// end ; end ;
11015: GO 10244
11017: POP
11018: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
11019: LD_ADDR_VAR 0 19
11023: PUSH
11024: LD_VAR 0 5
11028: PPUSH
11029: LD_INT 2
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 8
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 25
11054: PUSH
11055: LD_INT 5
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 25
11064: PUSH
11065: LD_INT 9
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 50
11081: PUSH
11082: EMPTY
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 72
11093: ST_TO_ADDR
// if sol then
11094: LD_VAR 0 19
11098: IFFALSE 11656
// begin if enemyInBase then
11100: LD_VAR 0 22
11104: IFFALSE 11283
// begin for i in sol do
11106: LD_ADDR_VAR 0 9
11110: PUSH
11111: LD_VAR 0 19
11115: PUSH
11116: FOR_IN
11117: IFFALSE 11279
// begin tw := IsInUnit ( i ) ;
11119: LD_ADDR_VAR 0 16
11123: PUSH
11124: LD_VAR 0 9
11128: PPUSH
11129: CALL_OW 310
11133: ST_TO_ADDR
// if tw then
11134: LD_VAR 0 16
11138: IFFALSE 11221
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11140: LD_VAR 0 16
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 101
11159: PUSH
11160: LD_VAR 0 34
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 30
11174: PUSH
11175: LD_INT 32
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 31
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: IN
11207: NOT
11208: IFFALSE 11219
// ComExitBuilding ( i ) ;
11210: LD_VAR 0 9
11214: PPUSH
11215: CALL_OW 122
// end else
11219: GO 11277
// if IsInArea ( i , area ) then
11221: LD_VAR 0 9
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: CALL_OW 308
11235: IFFALSE 11263
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11237: LD_VAR 0 9
11241: PPUSH
11242: LD_VAR 0 22
11246: PPUSH
11247: LD_VAR 0 9
11251: PPUSH
11252: CALL_OW 74
11256: PPUSH
11257: CALL_OW 115
11261: GO 11277
// ComMoveToArea ( i , area ) ;
11263: LD_VAR 0 9
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: CALL_OW 113
// end ;
11277: GO 11116
11279: POP
11280: POP
// end else
11281: GO 11656
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11283: LD_ADDR_VAR 0 28
11287: PUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 62
11298: PUSH
11299: EMPTY
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: LD_INT 32
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: LD_INT 4
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 31
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 70
11364: ST_TO_ADDR
// if empty then
11365: LD_VAR 0 28
11369: IFFALSE 11386
// empty := ReverseArray ( empty ) ;
11371: LD_ADDR_VAR 0 28
11375: PUSH
11376: LD_VAR 0 28
11380: PPUSH
11381: CALL 50277 0 1
11385: ST_TO_ADDR
// for i in sol do
11386: LD_ADDR_VAR 0 9
11390: PUSH
11391: LD_VAR 0 19
11395: PUSH
11396: FOR_IN
11397: IFFALSE 11654
// begin tag := GetTag ( i ) ;
11399: LD_ADDR_VAR 0 15
11403: PUSH
11404: LD_VAR 0 9
11408: PPUSH
11409: CALL_OW 110
11413: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11414: LD_VAR 0 9
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: IFFALSE 11439
11429: PUSH
11430: LD_VAR 0 15
11434: PUSH
11435: LD_INT 1
11437: NONEQUAL
11438: AND
11439: IFFALSE 11491
// begin SetTag ( i , tHeal ) ;
11441: LD_VAR 0 9
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11453: LD_VAR 0 9
11457: PPUSH
11458: LD_VAR 0 6
11462: PUSH
11463: LD_INT 1
11465: ARRAY
11466: PPUSH
11467: LD_VAR 0 6
11471: PUSH
11472: LD_INT 2
11474: ARRAY
11475: PPUSH
11476: CALL_OW 111
// AddComHold ( i ) ;
11480: LD_VAR 0 9
11484: PPUSH
11485: CALL_OW 200
// continue ;
11489: GO 11396
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11491: LD_VAR 0 9
11495: PPUSH
11496: CALL_OW 256
11500: PUSH
11501: LD_INT 1000
11503: EQUAL
11504: IFFALSE 11516
11506: PUSH
11507: LD_VAR 0 15
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: AND
11516: IFFALSE 11532
// begin SetTag ( i , 0 ) ;
11518: LD_VAR 0 9
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 109
// continue ;
11530: GO 11396
// end ; if HasTask ( i ) then
11532: LD_VAR 0 9
11536: PPUSH
11537: CALL_OW 314
11541: IFFALSE 11545
// continue ;
11543: GO 11396
// if not IsInUnit ( i ) and not tag and empty then
11545: LD_VAR 0 9
11549: PPUSH
11550: CALL_OW 310
11554: NOT
11555: IFFALSE 11564
11557: PUSH
11558: LD_VAR 0 15
11562: NOT
11563: AND
11564: IFFALSE 11572
11566: PUSH
11567: LD_VAR 0 28
11571: AND
11572: IFFALSE 11652
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11574: LD_VAR 0 9
11578: PPUSH
11579: LD_VAR 0 28
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: PPUSH
11588: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11592: LD_VAR 0 28
11596: PUSH
11597: LD_INT 1
11599: ARRAY
11600: PPUSH
11601: CALL_OW 266
11605: PUSH
11606: LD_INT 5
11608: EQUAL
11609: IFFALSE 11620
11611: PUSH
11612: LD_INT 50
11614: PPUSH
11615: CALL_OW 13
11619: AND
11620: IFFALSE 11634
// AddComChangeProfession ( i , class_mortar ) ;
11622: LD_VAR 0 9
11626: PPUSH
11627: LD_INT 8
11629: PPUSH
11630: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11634: LD_ADDR_VAR 0 28
11638: PUSH
11639: LD_VAR 0 28
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 3
11651: ST_TO_ADDR
// end ; end ;
11652: GO 11396
11654: POP
11655: POP
// end ; end ; end ;
11656: LD_VAR 0 8
11660: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11661: LD_EXP 35
11665: PPUSH
11666: LD_INT 50
11668: PUSH
11669: EMPTY
11670: LIST
11671: PPUSH
11672: CALL_OW 72
11676: IFFALSE 11725
11678: GO 11680
11680: DISABLE
// begin enable ;
11681: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11682: LD_EXP 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: LD_INT 33
11692: PPUSH
11693: LD_INT 40
11695: PPUSH
11696: LD_EXP 35
11700: PPUSH
11701: LD_INT 120
11703: PUSH
11704: LD_INT 129
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PPUSH
11711: LD_INT 126
11713: PUSH
11714: LD_INT 136
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL 7666 0 7
// end ;
11725: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11726: LD_EXP 36
11730: PPUSH
11731: LD_INT 50
11733: PUSH
11734: EMPTY
11735: LIST
11736: PPUSH
11737: CALL_OW 72
11741: IFFALSE 11790
11743: GO 11745
11745: DISABLE
// begin enable ;
11746: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11747: LD_EXP 3
11751: PPUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_INT 35
11757: PPUSH
11758: LD_INT 43
11760: PPUSH
11761: LD_EXP 36
11765: PPUSH
11766: LD_INT 116
11768: PUSH
11769: LD_INT 9
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PPUSH
11776: LD_INT 123
11778: PUSH
11779: LD_INT 12
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL 7666 0 7
// end ;
11790: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11791: LD_EXP 34
11795: PPUSH
11796: LD_INT 50
11798: PUSH
11799: EMPTY
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: IFFALSE 11855
11808: GO 11810
11810: DISABLE
// begin enable ;
11811: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11812: LD_EXP 3
11816: PPUSH
11817: LD_INT 3
11819: PPUSH
11820: LD_INT 34
11822: PPUSH
11823: LD_INT 42
11825: PPUSH
11826: LD_EXP 34
11830: PPUSH
11831: LD_INT 28
11833: PUSH
11834: LD_INT 10
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 17
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL 7666 0 7
// end ;
11855: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11856: LD_EXP 38
11860: PPUSH
11861: LD_INT 50
11863: PUSH
11864: EMPTY
11865: LIST
11866: PPUSH
11867: CALL_OW 72
11871: IFFALSE 11920
11873: GO 11875
11875: DISABLE
// begin enable ;
11876: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11877: LD_EXP 3
11881: PPUSH
11882: LD_INT 4
11884: PPUSH
11885: LD_INT 36
11887: PPUSH
11888: LD_INT 44
11890: PPUSH
11891: LD_EXP 38
11895: PPUSH
11896: LD_INT 173
11898: PUSH
11899: LD_INT 72
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: LD_INT 167
11908: PUSH
11909: LD_INT 83
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL 7666 0 7
// end ;
11920: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11921: LD_EXP 37
11925: PPUSH
11926: LD_INT 50
11928: PUSH
11929: EMPTY
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: IFFALSE 11985
11938: GO 11940
11940: DISABLE
// begin enable ;
11941: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11942: LD_EXP 3
11946: PPUSH
11947: LD_INT 5
11949: PPUSH
11950: LD_INT 38
11952: PPUSH
11953: LD_INT 45
11955: PPUSH
11956: LD_EXP 37
11960: PPUSH
11961: LD_INT 147
11963: PUSH
11964: LD_INT 50
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PPUSH
11971: LD_INT 159
11973: PUSH
11974: LD_INT 40
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL 7666 0 7
// end ;
11985: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11986: LD_EXP 53
11990: IFFALSE 12210
11992: GO 11994
11994: DISABLE
11995: LD_INT 0
11997: PPUSH
11998: PPUSH
11999: PPUSH
// begin enable ;
12000: ENABLE
// p := 1 ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: DOUBLE
12015: LD_INT 1
12017: DEC
12018: ST_TO_ADDR
12019: LD_EXP 53
12023: PPUSH
12024: CALL 19255 0 1
12028: PUSH
12029: LD_INT 2
12031: DIV
12032: PUSH
12033: FOR_TO
12034: IFFALSE 12208
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: LD_EXP 53
12045: PUSH
12046: LD_VAR 0 2
12050: ARRAY
12051: PPUSH
12052: LD_EXP 53
12056: PUSH
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ARRAY
12066: PPUSH
12067: CALL_OW 428
12071: ST_TO_ADDR
// if tmp then
12072: LD_VAR 0 3
12076: IFFALSE 12192
// if not GetSide ( tmp ) in [ 0 , side_bot ] then
12078: LD_VAR 0 3
12082: PPUSH
12083: CALL_OW 255
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: LD_EXP 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: IN
12100: NOT
12101: IFFALSE 12192
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
12103: LD_EXP 53
12107: PUSH
12108: LD_VAR 0 2
12112: ARRAY
12113: PPUSH
12114: LD_EXP 53
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 1
12126: PLUS
12127: ARRAY
12128: PPUSH
12129: LD_EXP 3
12133: PPUSH
12134: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
12138: LD_ADDR_EXP 53
12142: PUSH
12143: LD_EXP 53
12147: PPUSH
12148: LD_VAR 0 2
12152: PPUSH
12153: CALL_OW 3
12157: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12158: LD_ADDR_EXP 53
12162: PUSH
12163: LD_EXP 53
12167: PPUSH
12168: LD_VAR 0 2
12172: PPUSH
12173: CALL_OW 3
12177: ST_TO_ADDR
// p := p - 2 ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 2
12190: MINUS
12191: ST_TO_ADDR
// end ; p := p + 2 ;
12192: LD_ADDR_VAR 0 2
12196: PUSH
12197: LD_VAR 0 2
12201: PUSH
12202: LD_INT 2
12204: PLUS
12205: ST_TO_ADDR
// end ;
12206: GO 12033
12208: POP
12209: POP
// end ; end_of_file
12210: PPOPN 3
12212: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
// begin if artifact_get then
12217: LD_EXP 4
12221: IFFALSE 12225
// exit ;
12223: GO 12247
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 255
12234: PPUSH
12235: CALL 5295 0 1
// artifact_get := true ;
12239: LD_ADDR_EXP 4
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// end ;
12247: PPOPN 4
12249: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL_OW 255
12259: PUSH
12260: LD_EXP 3
12264: NONEQUAL
12265: IFFALSE 12269
// exit ;
12267: GO 12338
// if not un in [ Saliba , Gensher , Shariff ] then
12269: LD_VAR 0 1
12273: PUSH
12274: LD_EXP 41
12278: PUSH
12279: LD_EXP 42
12283: PUSH
12284: LD_EXP 43
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: IN
12294: NOT
12295: IFFALSE 12316
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_VAR 0 2
12306: PPUSH
12307: LD_INT 0
12309: PPUSH
12310: CALL 5231 0 3
12314: GO 12338
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12316: LD_VAR 0 1
12320: PPUSH
12321: LD_VAR 0 2
12325: PPUSH
12326: LD_INT 5
12328: PPUSH
12329: CALL 4548 0 1
12333: PPUSH
12334: CALL 5231 0 3
// end ;
12338: PPOPN 3
12340: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12341: LD_INT 0
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL 60541 0 1
// side := GetSide ( un ) ;
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 255
12376: ST_TO_ADDR
// if multi_sides [ side ] then
12377: LD_EXP 7
12381: PUSH
12382: LD_VAR 0 3
12386: ARRAY
12387: IFFALSE 12413
// if GetType ( un ) = unit_human then
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 247
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12413
// MultiplayerEvent_HumanLost ( side ) ;
12404: LD_VAR 0 3
12408: PPUSH
12409: CALL 5111 0 1
// if side = side_bot then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_EXP 3
12422: EQUAL
12423: IFFALSE 12869
// begin if GetType ( un ) = unit_building then
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 247
12434: PUSH
12435: LD_INT 3
12437: EQUAL
12438: IFFALSE 12668
// begin base := 0 ;
12440: LD_ADDR_VAR 0 4
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: DOUBLE
12454: LD_INT 1
12456: DEC
12457: ST_TO_ADDR
12458: LD_EXP 51
12462: PPUSH
12463: CALL 19255 0 1
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12507
// if IsInArea ( un , arAreas [ i ] ) then
12471: LD_VAR 0 1
12475: PPUSH
12476: LD_EXP 51
12480: PUSH
12481: LD_VAR 0 2
12485: ARRAY
12486: PPUSH
12487: CALL_OW 308
12491: IFFALSE 12505
// begin base := i ;
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: LD_VAR 0 2
12502: ST_TO_ADDR
// break ;
12503: GO 12507
// end ;
12505: GO 12468
12507: POP
12508: POP
// if not base then
12509: LD_VAR 0 4
12513: NOT
12514: IFFALSE 12518
// exit ;
12516: GO 12974
// btype := GetBType ( un ) ;
12518: LD_ADDR_VAR 0 11
12522: PUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 266
12532: ST_TO_ADDR
// if btype = b_barracks then
12533: LD_VAR 0 11
12537: PUSH
12538: LD_INT 5
12540: EQUAL
12541: IFFALSE 12551
// btype := b_armoury ;
12543: LD_ADDR_VAR 0 11
12547: PUSH
12548: LD_INT 4
12550: ST_TO_ADDR
// if btype = b_factory then
12551: LD_VAR 0 11
12555: PUSH
12556: LD_INT 3
12558: EQUAL
12559: IFFALSE 12569
// btype := b_workshop ;
12561: LD_ADDR_VAR 0 11
12565: PUSH
12566: LD_INT 2
12568: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12569: LD_VAR 0 11
12573: PUSH
12574: LD_INT 8
12576: PUSH
12577: LD_INT 7
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: IN
12584: IFFALSE 12594
// btype := b_lab ;
12586: LD_ADDR_VAR 0 11
12590: PUSH
12591: LD_INT 6
12593: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12594: LD_ADDR_EXP 46
12598: PUSH
12599: LD_EXP 46
12603: PPUSH
12604: LD_EXP 46
12608: PUSH
12609: LD_INT 1
12611: PLUS
12612: PPUSH
12613: LD_VAR 0 4
12617: PUSH
12618: LD_VAR 0 11
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 250
12632: PUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 251
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 254
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 1
12667: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 247
12677: PUSH
12678: LD_INT 2
12680: EQUAL
12681: IFFALSE 12869
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_EXP 47
12692: PPUSH
12693: LD_INT 2
12695: PPUSH
12696: LD_VAR 0 1
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL 60047 0 4
12708: ST_TO_ADDR
// if not base then
12709: LD_VAR 0 4
12713: NOT
12714: IFFALSE 12718
// exit ;
12716: GO 12974
// factory := arFactories [ base ] ;
12718: LD_ADDR_VAR 0 10
12722: PUSH
12723: LD_EXP 50
12727: PUSH
12728: LD_VAR 0 4
12732: ARRAY
12733: ST_TO_ADDR
// if not factory then
12734: LD_VAR 0 10
12738: NOT
12739: IFFALSE 12743
// exit ;
12741: GO 12974
// chassis := GetChassis ( un ) ;
12743: LD_ADDR_VAR 0 5
12747: PUSH
12748: LD_VAR 0 1
12752: PPUSH
12753: CALL_OW 265
12757: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12758: LD_ADDR_VAR 0 6
12762: PUSH
12763: LD_VAR 0 1
12767: PPUSH
12768: CALL_OW 262
12772: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12773: LD_ADDR_VAR 0 8
12777: PUSH
12778: LD_VAR 0 1
12782: PPUSH
12783: CALL_OW 264
12787: ST_TO_ADDR
// control := control_remote ;
12788: LD_ADDR_VAR 0 7
12792: PUSH
12793: LD_INT 2
12795: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12796: LD_ADDR_VAR 0 9
12800: PUSH
12801: LD_VAR 0 10
12805: PPUSH
12806: LD_VAR 0 5
12810: PPUSH
12811: LD_VAR 0 6
12815: PPUSH
12816: LD_VAR 0 7
12820: PPUSH
12821: LD_VAR 0 8
12825: PPUSH
12826: CALL 19613 0 5
12830: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12831: LD_ADDR_EXP 45
12835: PUSH
12836: LD_EXP 45
12840: PPUSH
12841: LD_EXP 45
12845: PUSH
12846: LD_INT 1
12848: PLUS
12849: PPUSH
12850: LD_VAR 0 4
12854: PUSH
12855: LD_VAR 0 9
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
12869: LD_EXP 24
12873: IFFALSE 12881
12875: PUSH
12876: LD_EXP 16
12880: AND
12881: IFFALSE 12896
12883: PUSH
12884: LD_EXP 25
12888: PUSH
12889: LD_VAR 0 3
12893: ARRAY
12894: NOT
12895: AND
12896: IFFALSE 12974
// if un in multi_commanders then
12898: LD_VAR 0 1
12902: PUSH
12903: LD_EXP 24
12907: IN
12908: IFFALSE 12974
// begin if side = your_side then
12910: LD_VAR 0 3
12914: PUSH
12915: LD_OWVAR 2
12919: EQUAL
12920: IFFALSE 12926
// Multiplayer_Loose_Message ;
12922: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12926: LD_ADDR_EXP 25
12930: PUSH
12931: LD_EXP 25
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 1
12948: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12949: LD_ADDR_EXP 24
12953: PUSH
12954: LD_EXP 24
12958: PUSH
12959: LD_VAR 0 1
12963: DIFF
12964: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12965: LD_VAR 0 3
12969: PPUSH
12970: CALL 4581 0 1
// end ; end ;
12974: PPOPN 11
12976: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
// begin side := GetSide ( building ) ;
12984: LD_ADDR_VAR 0 4
12988: PUSH
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 255
12998: ST_TO_ADDR
// if multi_sides [ side ] then
12999: LD_EXP 7
13003: PUSH
13004: LD_VAR 0 4
13008: ARRAY
13009: IFFALSE 13030
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
13011: LD_VAR 0 4
13015: PPUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 266
13025: PPUSH
13026: CALL 5157 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 266
13039: PUSH
13040: LD_INT 0
13042: EQUAL
13043: IFFALSE 13058
13045: PUSH
13046: LD_EXP 7
13050: PUSH
13051: LD_VAR 0 4
13055: ARRAY
13056: NOT
13057: AND
13058: IFFALSE 13066
13060: PUSH
13061: LD_EXP 5
13065: AND
13066: IFFALSE 13104
// begin SetBName ( building , base_names [ 1 ] ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_EXP 5
13077: PUSH
13078: LD_INT 1
13080: ARRAY
13081: PPUSH
13082: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
13086: LD_ADDR_EXP 5
13090: PUSH
13091: LD_EXP 5
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 3
13103: ST_TO_ADDR
// end ; if side = side_bot then
13104: LD_VAR 0 4
13108: PUSH
13109: LD_EXP 3
13113: EQUAL
13114: IFFALSE 13365
// begin base := 0 ;
13116: LD_ADDR_VAR 0 5
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: DOUBLE
13130: LD_INT 1
13132: DEC
13133: ST_TO_ADDR
13134: LD_EXP 51
13138: PPUSH
13139: CALL 19255 0 1
13143: PUSH
13144: FOR_TO
13145: IFFALSE 13183
// if IsInArea ( building , arAreas [ i ] ) then
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_EXP 51
13156: PUSH
13157: LD_VAR 0 2
13161: ARRAY
13162: PPUSH
13163: CALL_OW 308
13167: IFFALSE 13181
// begin base := i ;
13169: LD_ADDR_VAR 0 5
13173: PUSH
13174: LD_VAR 0 2
13178: ST_TO_ADDR
// break ;
13179: GO 13183
// end ;
13181: GO 13144
13183: POP
13184: POP
// if not base then
13185: LD_VAR 0 5
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13365
// for i := 1 to Count ( arBuildings ) do
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_EXP 46
13208: PPUSH
13209: CALL 19255 0 1
13213: PUSH
13214: FOR_TO
13215: IFFALSE 13267
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13217: LD_EXP 46
13221: PUSH
13222: LD_VAR 0 2
13226: ARRAY
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PUSH
13236: LD_VAR 0 5
13240: EQUAL
13241: IFFALSE 13265
// begin arBuildings := Delete ( arBuildings , i ) ;
13243: LD_ADDR_EXP 46
13247: PUSH
13248: LD_EXP 46
13252: PPUSH
13253: LD_VAR 0 2
13257: PPUSH
13258: CALL_OW 3
13262: ST_TO_ADDR
// break ;
13263: GO 13267
// end ;
13265: GO 13214
13267: POP
13268: POP
// btype := GetBType ( building ) ;
13269: LD_ADDR_VAR 0 6
13273: PUSH
13274: LD_VAR 0 1
13278: PPUSH
13279: CALL_OW 266
13283: ST_TO_ADDR
// case btype of b_armoury :
13284: LD_VAR 0 6
13288: PUSH
13289: LD_INT 4
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13309
13297: POP
// ComUpgrade ( building ) ; b_workshop :
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 146
13307: GO 13365
13309: LD_INT 2
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13329
13317: POP
// ComUpgrade ( building ) ; b_lab :
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 146
13327: GO 13365
13329: LD_INT 6
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13364
13337: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 10
13345: PPUSH
13346: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: LD_INT 15
13357: PPUSH
13358: CALL_OW 207
// end ; end ;
13362: GO 13365
13364: POP
// end ; end ;
13365: PPOPN 6
13367: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13375: LD_VAR 0 1
13379: PPUSH
13380: LD_VAR 0 2
13384: PPUSH
13385: CALL 60599 0 2
// side := GetSide ( vehicle ) ;
13389: LD_ADDR_VAR 0 4
13393: PUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 255
13403: ST_TO_ADDR
// if multi_sides [ side ] then
13404: LD_EXP 7
13408: PUSH
13409: LD_VAR 0 4
13413: ARRAY
13414: IFFALSE 13425
// MultiplayerEvent_Produced ( side ) ;
13416: LD_VAR 0 4
13420: PPUSH
13421: CALL 5065 0 1
// if side_bot = side then
13425: LD_EXP 3
13429: PUSH
13430: LD_VAR 0 4
13434: EQUAL
13435: IFFALSE 13629
// begin base := 0 ;
13437: LD_ADDR_VAR 0 6
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13445: LD_ADDR_VAR 0 3
13449: PUSH
13450: DOUBLE
13451: LD_INT 1
13453: DEC
13454: ST_TO_ADDR
13455: LD_EXP 50
13459: PPUSH
13460: CALL 19255 0 1
13464: PUSH
13465: FOR_TO
13466: IFFALSE 13500
// if arFactories [ i ] = factory then
13468: LD_EXP 50
13472: PUSH
13473: LD_VAR 0 3
13477: ARRAY
13478: PUSH
13479: LD_VAR 0 2
13483: EQUAL
13484: IFFALSE 13498
// begin base := i ;
13486: LD_ADDR_VAR 0 6
13490: PUSH
13491: LD_VAR 0 3
13495: ST_TO_ADDR
// break ;
13496: GO 13500
// end ;
13498: GO 13465
13500: POP
13501: POP
// if not base then
13502: LD_VAR 0 6
13506: NOT
13507: IFFALSE 13511
// exit ;
13509: GO 13629
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13511: LD_EXP 52
13515: PUSH
13516: LD_VAR 0 6
13520: ARRAY
13521: PUSH
13522: LD_EXP 47
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_VAR 0 6
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL 60047 0 4
13542: GREATER
13543: IFTRUE 13567
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 266
13555: PUSH
13556: LD_INT 32
13558: PUSH
13559: LD_INT 88
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: IN
13566: OR
13567: IFFALSE 13600
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13569: LD_ADDR_EXP 47
13573: PUSH
13574: LD_EXP 47
13578: PPUSH
13579: LD_VAR 0 6
13583: PUSH
13584: LD_VAR 0 1
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL 55187 0 2
13597: ST_TO_ADDR
13598: GO 13629
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13600: LD_ADDR_EXP 48
13604: PUSH
13605: LD_EXP 48
13609: PPUSH
13610: LD_VAR 0 6
13614: PUSH
13615: LD_VAR 0 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL 55187 0 2
13628: ST_TO_ADDR
// end ; end ;
13629: PPOPN 7
13631: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 110
13641: PUSH
13642: LD_INT 7
13644: EQUAL
13645: IFFALSE 13659
// SetTag ( driver , 0 ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 109
// end ;
13659: PPOPN 4
13661: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 255
13671: PUSH
13672: LD_EXP 3
13676: EQUAL
13677: IFFALSE 13707
// if tech in arTech then
13679: LD_VAR 0 1
13683: PUSH
13684: LD_EXP 44
13688: IN
13689: IFFALSE 13707
// arTech := arTech diff tech ;
13691: LD_ADDR_EXP 44
13695: PUSH
13696: LD_EXP 44
13700: PUSH
13701: LD_VAR 0 1
13705: DIFF
13706: ST_TO_ADDR
// end ;
13707: PPOPN 2
13709: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL 60558 0 1
// end ; end_of_file
13719: PPOPN 1
13721: END
// every 0 0$20 trigger game do
13722: LD_EXP 2
13726: IFFALSE 13771
13728: GO 13730
13730: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13731: LD_INT 7
13733: PUSH
13734: LD_INT 6
13736: PUSH
13737: LD_INT 4
13739: PUSH
13740: LD_INT 6
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: PPUSH
13749: LD_EXP 21
13753: PUSH
13754: LD_INT 2
13756: ARRAY
13757: PPUSH
13758: LD_EXP 21
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: CALL 13772 0 3
13771: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13772: LD_INT 0
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
// if not areas then
13778: LD_VAR 0 1
13782: NOT
13783: IFFALSE 13787
// exit ;
13785: GO 14159
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13787: LD_ADDR_VAR 0 7
13791: PUSH
13792: LD_INT 31
13794: PUSH
13795: LD_INT 32
13797: PUSH
13798: LD_INT 30
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: ST_TO_ADDR
// x := 5 ;
13806: LD_ADDR_VAR 0 6
13810: PUSH
13811: LD_INT 5
13813: ST_TO_ADDR
// repeat wait ( time ) ;
13814: LD_VAR 0 2
13818: PPUSH
13819: CALL_OW 67
// if tick < [ 55 55$00 , 43 43$00 , 31 31$00 ] [ Difficulty ] then
13823: LD_OWVAR 1
13827: PUSH
13828: LD_INT 115500
13830: PUSH
13831: LD_INT 90300
13833: PUSH
13834: LD_INT 65100
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: LD_OWVAR 67
13846: ARRAY
13847: LESS
13848: IFFALSE 13987
// begin for i := 1 to multi_sides do
13850: LD_ADDR_VAR 0 5
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_EXP 7
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13978
// if multi_sides [ i ] then
13868: LD_EXP 7
13872: PUSH
13873: LD_VAR 0 5
13877: ARRAY
13878: IFFALSE 13976
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13880: LD_VAR 0 7
13884: PUSH
13885: LD_EXP 7
13889: PUSH
13890: LD_VAR 0 5
13894: ARRAY
13895: ARRAY
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 287
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 22
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_OWVAR 67
13923: ARRAY
13924: LESS
13925: IFFALSE 13976
// begin amount := amount - ( x * 10 ) ;
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_VAR 0 3
13936: PUSH
13937: LD_VAR 0 6
13941: PUSH
13942: LD_INT 10
13944: MUL
13945: MINUS
13946: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13947: LD_VAR 0 6
13951: PPUSH
13952: LD_VAR 0 7
13956: PUSH
13957: LD_EXP 7
13961: PUSH
13962: LD_VAR 0 5
13966: ARRAY
13967: ARRAY
13968: PPUSH
13969: LD_INT 1
13971: PPUSH
13972: CALL_OW 55
// end ; end ;
13976: GO 13865
13978: POP
13979: POP
// wait ( 0 0$10 ) ;
13980: LD_INT 350
13982: PPUSH
13983: CALL_OW 67
// end ; for i in areas do
13987: LD_ADDR_VAR 0 5
13991: PUSH
13992: LD_VAR 0 1
13996: PUSH
13997: FOR_IN
13998: IFFALSE 14074
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14000: LD_VAR 0 5
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 287
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 22
14018: PUSH
14019: LD_INT 20
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: LD_OWVAR 67
14031: ARRAY
14032: LESS
14033: IFFALSE 14072
// begin amount := amount - ( x * 10 ) ;
14035: LD_ADDR_VAR 0 3
14039: PUSH
14040: LD_VAR 0 3
14044: PUSH
14045: LD_VAR 0 6
14049: PUSH
14050: LD_INT 10
14052: MUL
14053: MINUS
14054: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
14055: LD_VAR 0 6
14059: PPUSH
14060: LD_VAR 0 5
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 55
// end ; end ;
14072: GO 13997
14074: POP
14075: POP
// time := time + 0 0$2 ;
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 2
14085: PUSH
14086: LD_INT 70
14088: PLUS
14089: ST_TO_ADDR
// x := x - 1 ;
14090: LD_ADDR_VAR 0 6
14094: PUSH
14095: LD_VAR 0 6
14099: PUSH
14100: LD_INT 1
14102: MINUS
14103: ST_TO_ADDR
// if x = 0 then
14104: LD_VAR 0 6
14108: PUSH
14109: LD_INT 0
14111: EQUAL
14112: IFFALSE 14122
// x := 5 ;
14114: LD_ADDR_VAR 0 6
14118: PUSH
14119: LD_INT 5
14121: ST_TO_ADDR
// if time > 0 0$50 then
14122: LD_VAR 0 2
14126: PUSH
14127: LD_INT 1750
14129: GREATER
14130: IFFALSE 14140
// time := 0 0$25 ;
14132: LD_ADDR_VAR 0 2
14136: PUSH
14137: LD_INT 875
14139: ST_TO_ADDR
// until not game or amount <= 0 ;
14140: LD_EXP 2
14144: NOT
14145: IFTRUE 14157
14147: PUSH
14148: LD_VAR 0 3
14152: PUSH
14153: LD_INT 0
14155: LESSEQUAL
14156: OR
14157: IFFALSE 13814
// end ; end_of_file
14159: LD_VAR 0 4
14163: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
14164: GO 14166
14166: DISABLE
14167: LD_INT 0
14169: PPUSH
// begin NorthBase := 2 ;
14170: LD_ADDR_LOC 1
14174: PUSH
14175: LD_INT 2
14177: ST_TO_ADDR
// WestBase := 3 ;
14178: LD_ADDR_LOC 2
14182: PUSH
14183: LD_INT 3
14185: ST_TO_ADDR
// end ;
14186: PPOPN 1
14188: END
// every 10 10$00 do var i ;
14189: GO 14191
14191: DISABLE
14192: LD_INT 0
14194: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: DOUBLE
14201: LD_INT 1
14203: DEC
14204: ST_TO_ADDR
14205: LD_INT 3
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: LD_INT 5
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: LD_OWVAR 67
14223: ARRAY
14224: PUSH
14225: FOR_TO
14226: IFFALSE 14327
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14228: LD_ADDR_EXP 45
14232: PUSH
14233: LD_EXP 45
14237: PPUSH
14238: LD_EXP 45
14242: PUSH
14243: LD_INT 1
14245: PLUS
14246: PPUSH
14247: LD_LOC 1
14251: PUSH
14252: LD_INT 14
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 1
14267: PPUSH
14268: LD_INT 2
14270: PPUSH
14271: CALL_OW 12
14275: ARRAY
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 27
14282: PUSH
14283: LD_INT 25
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 29
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 1
14300: PPUSH
14301: LD_INT 4
14303: PPUSH
14304: CALL_OW 12
14308: ARRAY
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 1
14324: ST_TO_ADDR
// end ;
14325: GO 14225
14327: POP
14328: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14329: LD_ADDR_VAR 0 1
14333: PUSH
14334: DOUBLE
14335: LD_INT 1
14337: DEC
14338: ST_TO_ADDR
14339: LD_INT 3
14341: PUSH
14342: LD_INT 4
14344: PUSH
14345: LD_INT 5
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: PUSH
14353: LD_OWVAR 67
14357: ARRAY
14358: PUSH
14359: FOR_TO
14360: IFFALSE 14442
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14362: LD_ADDR_EXP 45
14366: PUSH
14367: LD_EXP 45
14371: PPUSH
14372: LD_EXP 45
14376: PUSH
14377: LD_INT 1
14379: PLUS
14380: PPUSH
14381: LD_LOC 2
14385: PUSH
14386: LD_INT 14
14388: PUSH
14389: LD_INT 1
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: LD_INT 27
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 28
14403: PUSH
14404: LD_INT 26
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 1
14415: PPUSH
14416: LD_INT 4
14418: PPUSH
14419: CALL_OW 12
14423: ARRAY
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 1
14439: ST_TO_ADDR
// end ;
14440: GO 14359
14442: POP
14443: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14444: LD_INT 16800
14446: PUSH
14447: LD_INT 2100
14449: PUSH
14450: LD_OWVAR 67
14454: MUL
14455: MINUS
14456: PPUSH
14457: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14461: LD_ADDR_VAR 0 1
14465: PUSH
14466: DOUBLE
14467: LD_INT 1
14469: DEC
14470: ST_TO_ADDR
14471: LD_INT 5
14473: PUSH
14474: LD_INT 5
14476: PUSH
14477: LD_INT 6
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: LD_OWVAR 67
14489: ARRAY
14490: PUSH
14491: FOR_TO
14492: IFFALSE 14593
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14494: LD_ADDR_EXP 45
14498: PUSH
14499: LD_EXP 45
14503: PPUSH
14504: LD_EXP 45
14508: PUSH
14509: LD_INT 1
14511: PLUS
14512: PPUSH
14513: LD_LOC 1
14517: PUSH
14518: LD_INT 14
14520: PUSH
14521: LD_INT 3
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 2
14536: PPUSH
14537: CALL_OW 12
14541: ARRAY
14542: PUSH
14543: LD_INT 2
14545: PUSH
14546: LD_INT 27
14548: PUSH
14549: LD_INT 25
14551: PUSH
14552: LD_INT 28
14554: PUSH
14555: LD_INT 29
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_INT 4
14569: PPUSH
14570: CALL_OW 12
14574: ARRAY
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// end ;
14591: GO 14491
14593: POP
14594: POP
// if tick > 30 30$0 then
14595: LD_OWVAR 1
14599: PUSH
14600: LD_INT 63000
14602: GREATER
14603: IFFALSE 14679
// begin for i := 1 to tick div 30 30$0 do
14605: LD_ADDR_VAR 0 1
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_OWVAR 1
14619: PUSH
14620: LD_INT 63000
14622: DIV
14623: PUSH
14624: FOR_TO
14625: IFFALSE 14677
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14627: LD_ADDR_EXP 45
14631: PUSH
14632: LD_EXP 45
14636: PPUSH
14637: LD_EXP 45
14641: PUSH
14642: LD_INT 1
14644: PLUS
14645: PPUSH
14646: LD_LOC 1
14650: PUSH
14651: LD_INT 14
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: LD_INT 29
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 1
14674: ST_TO_ADDR
14675: GO 14624
14677: POP
14678: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: DOUBLE
14685: LD_INT 1
14687: DEC
14688: ST_TO_ADDR
14689: LD_INT 5
14691: PUSH
14692: LD_INT 6
14694: PUSH
14695: LD_INT 6
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_OWVAR 67
14707: ARRAY
14708: PUSH
14709: FOR_TO
14710: IFFALSE 14792
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14712: LD_ADDR_EXP 45
14716: PUSH
14717: LD_EXP 45
14721: PPUSH
14722: LD_EXP 45
14726: PUSH
14727: LD_INT 1
14729: PLUS
14730: PPUSH
14731: LD_LOC 2
14735: PUSH
14736: LD_INT 14
14738: PUSH
14739: LD_INT 1
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 27
14747: PUSH
14748: LD_INT 25
14750: PUSH
14751: LD_INT 28
14753: PUSH
14754: LD_INT 26
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 1
14765: PPUSH
14766: LD_INT 4
14768: PPUSH
14769: CALL_OW 12
14773: ARRAY
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 1
14789: ST_TO_ADDR
// end ;
14790: GO 14709
14792: POP
14793: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14794: LD_INT 21000
14796: PUSH
14797: LD_INT 18900
14799: PUSH
14800: LD_INT 16800
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: PUSH
14808: LD_OWVAR 67
14812: ARRAY
14813: PPUSH
14814: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14818: LD_ADDR_VAR 0 1
14822: PUSH
14823: DOUBLE
14824: LD_INT 1
14826: DEC
14827: ST_TO_ADDR
14828: LD_INT 5
14830: PUSH
14831: LD_INT 6
14833: PUSH
14834: LD_INT 7
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: LD_OWVAR 67
14846: ARRAY
14847: PUSH
14848: FOR_TO
14849: IFFALSE 14950
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14851: LD_ADDR_EXP 45
14855: PUSH
14856: LD_EXP 45
14860: PPUSH
14861: LD_EXP 45
14865: PUSH
14866: LD_INT 1
14868: PLUS
14869: PPUSH
14870: LD_LOC 1
14874: PUSH
14875: LD_INT 14
14877: PUSH
14878: LD_INT 3
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: LD_INT 27
14905: PUSH
14906: LD_INT 25
14908: PUSH
14909: LD_INT 28
14911: PUSH
14912: LD_INT 29
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 1
14923: PPUSH
14924: LD_INT 4
14926: PPUSH
14927: CALL_OW 12
14931: ARRAY
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 1
14947: ST_TO_ADDR
// end ;
14948: GO 14848
14950: POP
14951: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: DOUBLE
14958: LD_INT 1
14960: DEC
14961: ST_TO_ADDR
14962: LD_INT 4
14964: PUSH
14965: LD_INT 5
14967: PUSH
14968: LD_INT 6
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: PUSH
14976: LD_OWVAR 67
14980: ARRAY
14981: PUSH
14982: FOR_TO
14983: IFFALSE 15065
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14985: LD_ADDR_EXP 45
14989: PUSH
14990: LD_EXP 45
14994: PPUSH
14995: LD_EXP 45
14999: PUSH
15000: LD_INT 1
15002: PLUS
15003: PPUSH
15004: LD_LOC 2
15008: PUSH
15009: LD_INT 14
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: LD_INT 2
15017: PUSH
15018: LD_INT 27
15020: PUSH
15021: LD_INT 25
15023: PUSH
15024: LD_INT 28
15026: PUSH
15027: LD_INT 26
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 1
15038: PPUSH
15039: LD_INT 4
15041: PPUSH
15042: CALL_OW 12
15046: ARRAY
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 1
15062: ST_TO_ADDR
// end ;
15063: GO 14982
15065: POP
15066: POP
// until false ;
15067: LD_INT 0
15069: IFFALSE 14794
// end ;
15071: PPOPN 1
15073: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
15074: LD_EXP 48
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_LOC 1
15086: PPUSH
15087: LD_INT 2
15089: PPUSH
15090: CALL 60047 0 4
15094: IFFALSE 15263
15096: GO 15098
15098: DISABLE
15099: LD_INT 0
15101: PPUSH
15102: PPUSH
// begin enable ;
15103: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: LD_EXP 48
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: LD_LOC 1
15121: PPUSH
15122: LD_INT 2
15124: PPUSH
15125: CALL 60047 0 4
15129: ST_TO_ADDR
// if not tmp then
15130: LD_VAR 0 2
15134: NOT
15135: IFFALSE 15139
// exit ;
15137: GO 15263
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15139: LD_ADDR_VAR 0 1
15143: PUSH
15144: DOUBLE
15145: LD_EXP 48
15149: PPUSH
15150: CALL 19255 0 1
15154: INC
15155: ST_TO_ADDR
15156: LD_INT 1
15158: PUSH
15159: FOR_DOWNTO
15160: IFFALSE 15206
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15162: LD_EXP 48
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PUSH
15173: LD_INT 2
15175: ARRAY
15176: PUSH
15177: LD_VAR 0 2
15181: IN
15182: IFFALSE 15204
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15184: LD_ADDR_EXP 48
15188: PUSH
15189: LD_EXP 48
15193: PPUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 3
15203: ST_TO_ADDR
15204: GO 15159
15206: POP
15207: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15208: LD_VAR 0 2
15212: PPUSH
15213: LD_INT 164
15215: PUSH
15216: LD_INT 40
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 174
15225: PUSH
15226: LD_INT 72
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: LD_INT 174
15235: PUSH
15236: LD_INT 93
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 196
15245: PUSH
15246: LD_INT 110
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL 15458 0 2
// end ;
15263: PPOPN 2
15265: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15266: LD_EXP 48
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: LD_LOC 2
15278: PPUSH
15279: LD_INT 2
15281: PPUSH
15282: CALL 60047 0 4
15286: IFFALSE 15455
15288: GO 15290
15290: DISABLE
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
// begin enable ;
15295: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: LD_EXP 48
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: LD_LOC 2
15313: PPUSH
15314: LD_INT 2
15316: PPUSH
15317: CALL 60047 0 4
15321: ST_TO_ADDR
// if not tmp then
15322: LD_VAR 0 2
15326: NOT
15327: IFFALSE 15331
// exit ;
15329: GO 15455
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: DOUBLE
15337: LD_EXP 48
15341: PPUSH
15342: CALL 19255 0 1
15346: INC
15347: ST_TO_ADDR
15348: LD_INT 1
15350: PUSH
15351: FOR_DOWNTO
15352: IFFALSE 15398
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15354: LD_EXP 48
15358: PUSH
15359: LD_VAR 0 1
15363: ARRAY
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: PUSH
15369: LD_VAR 0 2
15373: IN
15374: IFFALSE 15396
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15376: LD_ADDR_EXP 48
15380: PUSH
15381: LD_EXP 48
15385: PPUSH
15386: LD_VAR 0 1
15390: PPUSH
15391: CALL_OW 3
15395: ST_TO_ADDR
15396: GO 15351
15398: POP
15399: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15400: LD_VAR 0 2
15404: PPUSH
15405: LD_INT 49
15407: PUSH
15408: LD_INT 37
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 54
15417: PUSH
15418: LD_INT 68
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 77
15427: PUSH
15428: LD_INT 91
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 95
15437: PUSH
15438: LD_INT 104
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL 15458 0 2
// end ;
15455: PPOPN 2
15457: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// repeat wait ( 0 0$1 ) ;
15462: LD_INT 35
15464: PPUSH
15465: CALL_OW 67
// for i in attackers do
15469: LD_ADDR_VAR 0 4
15473: PUSH
15474: LD_VAR 0 1
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15562
// begin if not IsOk ( i ) then
15482: LD_VAR 0 4
15486: PPUSH
15487: CALL_OW 302
15491: NOT
15492: IFFALSE 15523
// begin ComUnlink ( i ) ;
15494: LD_VAR 0 4
15498: PPUSH
15499: CALL_OW 136
// attackers := attackers diff i ;
15503: LD_ADDR_VAR 0 1
15507: PUSH
15508: LD_VAR 0 1
15512: PUSH
15513: LD_VAR 0 4
15517: DIFF
15518: ST_TO_ADDR
// continue ;
15519: GO 15479
// end else
15521: GO 15560
// if not IsControledBy ( i ) then
15523: LD_VAR 0 4
15527: PPUSH
15528: CALL_OW 312
15532: NOT
15533: IFFALSE 15546
// Connect ( i ) else
15535: LD_VAR 0 4
15539: PPUSH
15540: CALL 25499 0 1
15544: GO 15560
// AgressiveMove ( i , path ) ;
15546: LD_VAR 0 4
15550: PPUSH
15551: LD_VAR 0 2
15555: PPUSH
15556: CALL 57953 0 2
// end ;
15560: GO 15479
15562: POP
15563: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 50
15571: PUSH
15572: EMPTY
15573: LIST
15574: PPUSH
15575: CALL_OW 72
15579: NOT
15580: IFFALSE 15462
// end ;
15582: LD_VAR 0 3
15586: RET
// every 0 0$10 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and FilterAllUnits ( [ [ f_side , side_bot ] , [ f_ok ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) do var i , un , tmp , enemy ;
15587: LD_INT 7
15589: PPUSH
15590: CALL_OW 302
15594: NOT
15595: IFTRUE 15612
15597: PUSH
15598: LD_INT 7
15600: PPUSH
15601: CALL_OW 255
15605: PUSH
15606: LD_EXP 3
15610: NONEQUAL
15611: OR
15612: IFFALSE 15667
15614: PUSH
15615: LD_INT 22
15617: PUSH
15618: LD_EXP 3
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 50
15629: PUSH
15630: EMPTY
15631: LIST
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: LD_INT 58
15638: PUSH
15639: EMPTY
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 34
15648: PUSH
15649: LD_INT 31
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PPUSH
15662: CALL_OW 69
15666: AND
15667: IFFALSE 16061
15669: GO 15671
15671: DISABLE
15672: LD_INT 0
15674: PPUSH
15675: PPUSH
15676: PPUSH
15677: PPUSH
// begin for i := 1 to 3 do
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_INT 3
15690: PUSH
15691: FOR_TO
15692: IFFALSE 15853
// begin uc_side := 2 ;
15694: LD_ADDR_OWVAR 20
15698: PUSH
15699: LD_INT 2
15701: ST_TO_ADDR
// uc_nation := nation_arabian ;
15702: LD_ADDR_OWVAR 21
15706: PUSH
15707: LD_INT 2
15709: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15710: LD_INT 11
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 2
15718: PPUSH
15719: LD_INT 24
15721: PUSH
15722: LD_INT 23
15724: PUSH
15725: LD_INT 92
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 1
15735: PPUSH
15736: LD_INT 3
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: PPUSH
15745: LD_INT 100
15747: PPUSH
15748: CALL 22017 0 5
// un := CreateVehicle ;
15752: LD_ADDR_VAR 0 2
15756: PUSH
15757: CALL_OW 45
15761: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15762: LD_VAR 0 2
15766: PPUSH
15767: LD_INT 2
15769: PPUSH
15770: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15774: LD_VAR 0 2
15778: PPUSH
15779: LD_INT 47
15781: PPUSH
15782: LD_INT 0
15784: PPUSH
15785: CALL_OW 49
// repeat Connect ( un ) ;
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL 25499 0 1
// wait ( 0 0$0.3 ) ;
15798: LD_INT 10
15800: PPUSH
15801: CALL_OW 67
// until IsControledBy ( un ) ;
15805: LD_VAR 0 2
15809: PPUSH
15810: CALL_OW 312
15814: IFFALSE 15789
// ComMoveXY ( un , 73 , 17 ) ;
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_INT 73
15823: PPUSH
15824: LD_INT 17
15826: PPUSH
15827: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15831: LD_ADDR_VAR 0 3
15835: PUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: CALL 55187 0 2
15850: ST_TO_ADDR
// end ;
15851: GO 15691
15853: POP
15854: POP
// repeat wait ( 0 0$1 ) ;
15855: LD_INT 35
15857: PPUSH
15858: CALL_OW 67
// for i in tmp do
15862: LD_ADDR_VAR 0 1
15866: PUSH
15867: LD_VAR 0 3
15871: PUSH
15872: FOR_IN
15873: IFFALSE 16034
// begin if not IsOk ( i ) then
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 302
15884: NOT
15885: IFFALSE 15914
// begin ComAutodestruct ( i ) ;
15887: LD_VAR 0 1
15891: PPUSH
15892: CALL 50504 0 1
// tmp := tmp diff i ;
15896: LD_ADDR_VAR 0 3
15900: PUSH
15901: LD_VAR 0 3
15905: PUSH
15906: LD_VAR 0 1
15910: DIFF
15911: ST_TO_ADDR
// continue ;
15912: GO 15872
// end ; if GetLives ( i ) < 750 then
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 256
15923: PUSH
15924: LD_INT 750
15926: LESS
15927: IFFALSE 15988
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15929: LD_ADDR_VAR 0 4
15933: PUSH
15934: LD_INT 81
15936: PUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: PPUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 74
15965: ST_TO_ADDR
// if enemy then
15966: LD_VAR 0 4
15970: IFFALSE 15986
// ComMoveUnit ( i , enemy ) ;
15972: LD_VAR 0 1
15976: PPUSH
15977: LD_VAR 0 4
15981: PPUSH
15982: CALL_OW 112
// end else
15986: GO 16032
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_INT 76
15995: PUSH
15996: LD_INT 31
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 93
16005: PUSH
16006: LD_INT 67
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 108
16015: PUSH
16016: LD_INT 97
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: PPUSH
16028: CALL 57953 0 2
// end ;
16032: GO 15872
16034: POP
16035: POP
// until not tmp ;
16036: LD_VAR 0 3
16040: NOT
16041: IFFALSE 15855
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
16043: LD_INT 16800
16045: PUSH
16046: LD_INT 2100
16048: PUSH
16049: LD_OWVAR 67
16053: MUL
16054: MINUS
16055: PPUSH
16056: CALL_OW 67
// enable ;
16060: ENABLE
// end ;
16061: PPOPN 4
16063: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
16064: LD_INT 7
16066: PPUSH
16067: CALL_OW 302
16071: NOT
16072: IFTRUE 16089
16074: PUSH
16075: LD_INT 7
16077: PPUSH
16078: CALL_OW 255
16082: PUSH
16083: LD_EXP 3
16087: NONEQUAL
16088: OR
16089: IFFALSE 16117
16091: PUSH
16092: LD_INT 45
16094: PPUSH
16095: CALL_OW 302
16099: IFFALSE 16116
16101: PUSH
16102: LD_INT 45
16104: PPUSH
16105: CALL_OW 255
16109: PUSH
16110: LD_EXP 3
16114: EQUAL
16115: AND
16116: AND
16117: IFFALSE 16474
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
// begin enable ;
16128: ENABLE
// for i := 1 to 3 do
16129: LD_ADDR_VAR 0 1
16133: PUSH
16134: DOUBLE
16135: LD_INT 1
16137: DEC
16138: ST_TO_ADDR
16139: LD_INT 3
16141: PUSH
16142: FOR_TO
16143: IFFALSE 16284
// begin uc_side := 2 ;
16145: LD_ADDR_OWVAR 20
16149: PUSH
16150: LD_INT 2
16152: ST_TO_ADDR
// uc_nation := nation_arabian ;
16153: LD_ADDR_OWVAR 21
16157: PUSH
16158: LD_INT 2
16160: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
16161: LD_INT 11
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 5
16169: PPUSH
16170: LD_INT 24
16172: PUSH
16173: LD_INT 23
16175: PUSH
16176: LD_INT 92
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_INT 3
16189: PPUSH
16190: CALL_OW 12
16194: ARRAY
16195: PPUSH
16196: LD_INT 100
16198: PPUSH
16199: CALL 22017 0 5
// un := CreateVehicle ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: CALL_OW 45
16212: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16213: LD_VAR 0 2
16217: PPUSH
16218: LD_INT 2
16220: PPUSH
16221: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 47
16232: PPUSH
16233: LD_INT 0
16235: PPUSH
16236: CALL_OW 49
// wait ( 0 0$0.3 ) ;
16240: LD_INT 10
16242: PPUSH
16243: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
16247: LD_VAR 0 2
16251: PPUSH
16252: LD_INT 73
16254: PPUSH
16255: LD_INT 17
16257: PPUSH
16258: CALL_OW 111
// tmp := Join ( tmp , un ) ;
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: LD_VAR 0 2
16276: PPUSH
16277: CALL 55187 0 2
16281: ST_TO_ADDR
// end ;
16282: GO 16142
16284: POP
16285: POP
// repeat wait ( 0 0$1 ) ;
16286: LD_INT 35
16288: PPUSH
16289: CALL_OW 67
// for i in tmp do
16293: LD_ADDR_VAR 0 1
16297: PUSH
16298: LD_VAR 0 3
16302: PUSH
16303: FOR_IN
16304: IFFALSE 16465
// begin if not IsOk ( i ) then
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 302
16315: NOT
16316: IFFALSE 16345
// begin ComAutodestruct ( i ) ;
16318: LD_VAR 0 1
16322: PPUSH
16323: CALL 50504 0 1
// tmp := tmp diff i ;
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_VAR 0 3
16336: PUSH
16337: LD_VAR 0 1
16341: DIFF
16342: ST_TO_ADDR
// continue ;
16343: GO 16303
// end ; if GetLives ( i ) < 750 then
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 256
16354: PUSH
16355: LD_INT 750
16357: LESS
16358: IFFALSE 16419
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16360: LD_ADDR_VAR 0 4
16364: PUSH
16365: LD_INT 81
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 255
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PPUSH
16382: CALL_OW 69
16386: PPUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 74
16396: ST_TO_ADDR
// if enemy then
16397: LD_VAR 0 4
16401: IFFALSE 16417
// ComMoveUnit ( i , enemy ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_VAR 0 4
16412: PPUSH
16413: CALL_OW 112
// end else
16417: GO 16463
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: LD_INT 76
16426: PUSH
16427: LD_INT 31
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 93
16436: PUSH
16437: LD_INT 67
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 108
16446: PUSH
16447: LD_INT 97
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL 57953 0 2
// end ;
16463: GO 16303
16465: POP
16466: POP
// until not tmp ;
16467: LD_VAR 0 3
16471: NOT
16472: IFFALSE 16286
// end ;
16474: PPOPN 4
16476: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16477: LD_INT 69
16479: PPUSH
16480: CALL_OW 302
16484: NOT
16485: IFTRUE 16502
16487: PUSH
16488: LD_INT 69
16490: PPUSH
16491: CALL_OW 255
16495: PUSH
16496: LD_EXP 3
16500: NONEQUAL
16501: OR
16502: IFFALSE 16763
16504: GO 16506
16506: DISABLE
16507: LD_INT 0
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: DOUBLE
16519: LD_INT 1
16521: DEC
16522: ST_TO_ADDR
16523: LD_INT 2
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 4
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: PUSH
16537: LD_OWVAR 67
16541: ARRAY
16542: PUSH
16543: FOR_TO
16544: IFFALSE 16635
// begin uc_side := side_bot ;
16546: LD_ADDR_OWVAR 20
16550: PUSH
16551: LD_EXP 3
16555: ST_TO_ADDR
// uc_nation := nation_nature ;
16556: LD_ADDR_OWVAR 21
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16564: CALL 51110 0 0
// hc_class := class_apeman_kamikaze ;
16568: LD_ADDR_OWVAR 28
16572: PUSH
16573: LD_INT 17
16575: ST_TO_ADDR
// un := CreateHuman ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: CALL_OW 44
16585: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 4
16593: PPUSH
16594: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16598: LD_VAR 0 2
16602: PPUSH
16603: LD_INT 48
16605: PPUSH
16606: LD_INT 0
16608: PPUSH
16609: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: LD_VAR 0 2
16627: PPUSH
16628: CALL 55187 0 2
16632: ST_TO_ADDR
// end ;
16633: GO 16543
16635: POP
16636: POP
// repeat wait ( 0 0$1 ) ;
16637: LD_INT 35
16639: PPUSH
16640: CALL_OW 67
// for i in tmp do
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_VAR 0 3
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16746
// begin if not IsOk ( i ) then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 302
16666: NOT
16667: IFFALSE 16687
// begin tmp := tmp diff i ;
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_VAR 0 3
16678: PUSH
16679: LD_VAR 0 1
16683: DIFF
16684: ST_TO_ADDR
// continue ;
16685: GO 16654
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16687: LD_ADDR_VAR 0 4
16691: PUSH
16692: LD_INT 81
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 255
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: PPUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 74
16723: ST_TO_ADDR
// if enemy then
16724: LD_VAR 0 4
16728: IFFALSE 16744
// ComAttackUnit ( i , enemy ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: CALL_OW 115
// end ;
16744: GO 16654
16746: POP
16747: POP
// until not tmp ;
16748: LD_VAR 0 3
16752: NOT
16753: IFFALSE 16637
// wait ( 10 10$00 ) ;
16755: LD_INT 21000
16757: PPUSH
16758: CALL_OW 67
// enable ;
16762: ENABLE
// end ;
16763: PPOPN 4
16765: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16766: LD_INT 45
16768: PPUSH
16769: CALL_OW 302
16773: NOT
16774: IFTRUE 16791
16776: PUSH
16777: LD_INT 45
16779: PPUSH
16780: CALL_OW 255
16784: PUSH
16785: LD_EXP 3
16789: NONEQUAL
16790: OR
16791: IFFALSE 17052
16793: GO 16795
16795: DISABLE
16796: LD_INT 0
16798: PPUSH
16799: PPUSH
16800: PPUSH
16801: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_INT 2
16814: PUSH
16815: LD_INT 3
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: PUSH
16826: LD_OWVAR 67
16830: ARRAY
16831: PUSH
16832: FOR_TO
16833: IFFALSE 16924
// begin uc_side := side_bot ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_EXP 3
16844: ST_TO_ADDR
// uc_nation := nation_nature ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_INT 0
16852: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16853: CALL 51110 0 0
// hc_class := class_apeman_kamikaze ;
16857: LD_ADDR_OWVAR 28
16861: PUSH
16862: LD_INT 17
16864: ST_TO_ADDR
// un := CreateHuman ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: CALL_OW 44
16874: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_INT 2
16882: PPUSH
16883: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16887: LD_VAR 0 2
16891: PPUSH
16892: LD_INT 49
16894: PPUSH
16895: LD_INT 0
16897: PPUSH
16898: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16902: LD_ADDR_VAR 0 3
16906: PUSH
16907: LD_VAR 0 3
16911: PPUSH
16912: LD_VAR 0 2
16916: PPUSH
16917: CALL 55187 0 2
16921: ST_TO_ADDR
// end ;
16922: GO 16832
16924: POP
16925: POP
// repeat wait ( 0 0$1 ) ;
16926: LD_INT 35
16928: PPUSH
16929: CALL_OW 67
// for i in tmp do
16933: LD_ADDR_VAR 0 1
16937: PUSH
16938: LD_VAR 0 3
16942: PUSH
16943: FOR_IN
16944: IFFALSE 17035
// begin if not IsOk ( i ) then
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 302
16955: NOT
16956: IFFALSE 16976
// begin tmp := tmp diff i ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 1
16972: DIFF
16973: ST_TO_ADDR
// continue ;
16974: GO 16943
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16976: LD_ADDR_VAR 0 4
16980: PUSH
16981: LD_INT 81
16983: PUSH
16984: LD_VAR 0 1
16988: PPUSH
16989: CALL_OW 255
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PPUSH
16998: CALL_OW 69
17002: PPUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 74
17012: ST_TO_ADDR
// if enemy then
17013: LD_VAR 0 4
17017: IFFALSE 17033
// ComAttackUnit ( i , enemy ) ;
17019: LD_VAR 0 1
17023: PPUSH
17024: LD_VAR 0 4
17028: PPUSH
17029: CALL_OW 115
// end ;
17033: GO 16943
17035: POP
17036: POP
// until not tmp ;
17037: LD_VAR 0 3
17041: NOT
17042: IFFALSE 16926
// wait ( 10 10$00 ) ;
17044: LD_INT 21000
17046: PPUSH
17047: CALL_OW 67
// enable ;
17051: ENABLE
// end ; end_of_file
17052: PPOPN 4
17054: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17055: LD_INT 0
17057: PPUSH
17058: PPUSH
// if exist_mode then
17059: LD_VAR 0 2
17063: IFFALSE 17109
// begin unit := CreateCharacter ( prefix & ident ) ;
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: STR
17080: PPUSH
17081: CALL_OW 34
17085: ST_TO_ADDR
// if unit then
17086: LD_VAR 0 5
17090: IFFALSE 17107
// DeleteCharacters ( prefix & ident ) ;
17092: LD_VAR 0 3
17096: PUSH
17097: LD_VAR 0 1
17101: STR
17102: PPUSH
17103: CALL_OW 40
// end else
17107: GO 17124
// unit := NewCharacter ( ident ) ;
17109: LD_ADDR_VAR 0 5
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 25
17123: ST_TO_ADDR
// result := unit ;
17124: LD_ADDR_VAR 0 4
17128: PUSH
17129: LD_VAR 0 5
17133: ST_TO_ADDR
// end ;
17134: LD_VAR 0 4
17138: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17139: LD_INT 0
17141: PPUSH
17142: PPUSH
// if exist_mode then
17143: LD_VAR 0 2
17147: IFFALSE 17172
// unit := CreateCharacter ( prefix & ident ) else
17149: LD_ADDR_VAR 0 5
17153: PUSH
17154: LD_VAR 0 3
17158: PUSH
17159: LD_VAR 0 1
17163: STR
17164: PPUSH
17165: CALL_OW 34
17169: ST_TO_ADDR
17170: GO 17187
// unit := NewCharacter ( ident ) ;
17172: LD_ADDR_VAR 0 5
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 25
17186: ST_TO_ADDR
// result := unit ;
17187: LD_ADDR_VAR 0 4
17191: PUSH
17192: LD_VAR 0 5
17196: ST_TO_ADDR
// end ;
17197: LD_VAR 0 4
17201: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// if not side or not nation then
17206: LD_VAR 0 1
17210: NOT
17211: IFTRUE 17220
17213: PUSH
17214: LD_VAR 0 2
17218: NOT
17219: OR
17220: IFFALSE 17224
// exit ;
17222: GO 17994
// case nation of nation_american :
17224: LD_VAR 0 2
17228: PUSH
17229: LD_INT 1
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17451
17237: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17238: LD_ADDR_VAR 0 4
17242: PUSH
17243: LD_INT 35
17245: PUSH
17246: LD_INT 45
17248: PUSH
17249: LD_INT 46
17251: PUSH
17252: LD_INT 47
17254: PUSH
17255: LD_INT 82
17257: PUSH
17258: LD_INT 83
17260: PUSH
17261: LD_INT 84
17263: PUSH
17264: LD_INT 85
17266: PUSH
17267: LD_INT 86
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: LD_INT 6
17278: PUSH
17279: LD_INT 15
17281: PUSH
17282: LD_INT 16
17284: PUSH
17285: LD_INT 7
17287: PUSH
17288: LD_INT 12
17290: PUSH
17291: LD_INT 13
17293: PUSH
17294: LD_INT 10
17296: PUSH
17297: LD_INT 14
17299: PUSH
17300: LD_INT 20
17302: PUSH
17303: LD_INT 21
17305: PUSH
17306: LD_INT 22
17308: PUSH
17309: LD_INT 25
17311: PUSH
17312: LD_INT 32
17314: PUSH
17315: LD_INT 27
17317: PUSH
17318: LD_INT 36
17320: PUSH
17321: LD_INT 69
17323: PUSH
17324: LD_INT 39
17326: PUSH
17327: LD_INT 34
17329: PUSH
17330: LD_INT 40
17332: PUSH
17333: LD_INT 48
17335: PUSH
17336: LD_INT 49
17338: PUSH
17339: LD_INT 50
17341: PUSH
17342: LD_INT 51
17344: PUSH
17345: LD_INT 52
17347: PUSH
17348: LD_INT 53
17350: PUSH
17351: LD_INT 54
17353: PUSH
17354: LD_INT 55
17356: PUSH
17357: LD_INT 56
17359: PUSH
17360: LD_INT 57
17362: PUSH
17363: LD_INT 58
17365: PUSH
17366: LD_INT 59
17368: PUSH
17369: LD_INT 60
17371: PUSH
17372: LD_INT 61
17374: PUSH
17375: LD_INT 62
17377: PUSH
17378: LD_INT 80
17380: PUSH
17381: LD_INT 82
17383: PUSH
17384: LD_INT 83
17386: PUSH
17387: LD_INT 84
17389: PUSH
17390: LD_INT 85
17392: PUSH
17393: LD_INT 86
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
17449: GO 17916
17451: LD_INT 2
17453: DOUBLE
17454: EQUAL
17455: IFTRUE 17459
17457: GO 17685
17459: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17460: LD_ADDR_VAR 0 4
17464: PUSH
17465: LD_INT 35
17467: PUSH
17468: LD_INT 45
17470: PUSH
17471: LD_INT 46
17473: PUSH
17474: LD_INT 47
17476: PUSH
17477: LD_INT 82
17479: PUSH
17480: LD_INT 83
17482: PUSH
17483: LD_INT 84
17485: PUSH
17486: LD_INT 85
17488: PUSH
17489: LD_INT 87
17491: PUSH
17492: LD_INT 70
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: LD_INT 11
17500: PUSH
17501: LD_INT 3
17503: PUSH
17504: LD_INT 4
17506: PUSH
17507: LD_INT 5
17509: PUSH
17510: LD_INT 6
17512: PUSH
17513: LD_INT 15
17515: PUSH
17516: LD_INT 18
17518: PUSH
17519: LD_INT 7
17521: PUSH
17522: LD_INT 17
17524: PUSH
17525: LD_INT 8
17527: PUSH
17528: LD_INT 20
17530: PUSH
17531: LD_INT 21
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_INT 72
17539: PUSH
17540: LD_INT 26
17542: PUSH
17543: LD_INT 69
17545: PUSH
17546: LD_INT 39
17548: PUSH
17549: LD_INT 40
17551: PUSH
17552: LD_INT 41
17554: PUSH
17555: LD_INT 42
17557: PUSH
17558: LD_INT 43
17560: PUSH
17561: LD_INT 48
17563: PUSH
17564: LD_INT 49
17566: PUSH
17567: LD_INT 50
17569: PUSH
17570: LD_INT 51
17572: PUSH
17573: LD_INT 52
17575: PUSH
17576: LD_INT 53
17578: PUSH
17579: LD_INT 54
17581: PUSH
17582: LD_INT 55
17584: PUSH
17585: LD_INT 56
17587: PUSH
17588: LD_INT 60
17590: PUSH
17591: LD_INT 61
17593: PUSH
17594: LD_INT 62
17596: PUSH
17597: LD_INT 66
17599: PUSH
17600: LD_INT 67
17602: PUSH
17603: LD_INT 68
17605: PUSH
17606: LD_INT 81
17608: PUSH
17609: LD_INT 82
17611: PUSH
17612: LD_INT 83
17614: PUSH
17615: LD_INT 84
17617: PUSH
17618: LD_INT 85
17620: PUSH
17621: LD_INT 87
17623: PUSH
17624: LD_INT 88
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: ST_TO_ADDR
17683: GO 17916
17685: LD_INT 3
17687: DOUBLE
17688: EQUAL
17689: IFTRUE 17693
17691: GO 17915
17693: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17694: LD_ADDR_VAR 0 4
17698: PUSH
17699: LD_INT 46
17701: PUSH
17702: LD_INT 47
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: LD_INT 82
17713: PUSH
17714: LD_INT 83
17716: PUSH
17717: LD_INT 84
17719: PUSH
17720: LD_INT 85
17722: PUSH
17723: LD_INT 86
17725: PUSH
17726: LD_INT 11
17728: PUSH
17729: LD_INT 9
17731: PUSH
17732: LD_INT 20
17734: PUSH
17735: LD_INT 19
17737: PUSH
17738: LD_INT 21
17740: PUSH
17741: LD_INT 24
17743: PUSH
17744: LD_INT 22
17746: PUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 28
17752: PUSH
17753: LD_INT 29
17755: PUSH
17756: LD_INT 30
17758: PUSH
17759: LD_INT 31
17761: PUSH
17762: LD_INT 37
17764: PUSH
17765: LD_INT 38
17767: PUSH
17768: LD_INT 32
17770: PUSH
17771: LD_INT 27
17773: PUSH
17774: LD_INT 33
17776: PUSH
17777: LD_INT 69
17779: PUSH
17780: LD_INT 39
17782: PUSH
17783: LD_INT 34
17785: PUSH
17786: LD_INT 40
17788: PUSH
17789: LD_INT 71
17791: PUSH
17792: LD_INT 23
17794: PUSH
17795: LD_INT 44
17797: PUSH
17798: LD_INT 48
17800: PUSH
17801: LD_INT 49
17803: PUSH
17804: LD_INT 50
17806: PUSH
17807: LD_INT 51
17809: PUSH
17810: LD_INT 52
17812: PUSH
17813: LD_INT 53
17815: PUSH
17816: LD_INT 54
17818: PUSH
17819: LD_INT 55
17821: PUSH
17822: LD_INT 56
17824: PUSH
17825: LD_INT 57
17827: PUSH
17828: LD_INT 58
17830: PUSH
17831: LD_INT 59
17833: PUSH
17834: LD_INT 63
17836: PUSH
17837: LD_INT 64
17839: PUSH
17840: LD_INT 65
17842: PUSH
17843: LD_INT 82
17845: PUSH
17846: LD_INT 83
17848: PUSH
17849: LD_INT 84
17851: PUSH
17852: LD_INT 85
17854: PUSH
17855: LD_INT 86
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
17913: GO 17916
17915: POP
// if state > - 1 and state < 3 then
17916: LD_VAR 0 3
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: GREATER
17925: IFFALSE 17937
17927: PUSH
17928: LD_VAR 0 3
17932: PUSH
17933: LD_INT 3
17935: LESS
17936: AND
17937: IFFALSE 17994
// for i in result do
17939: LD_ADDR_VAR 0 5
17943: PUSH
17944: LD_VAR 0 4
17948: PUSH
17949: FOR_IN
17950: IFFALSE 17992
// if GetTech ( i , side ) <> state then
17952: LD_VAR 0 5
17956: PPUSH
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 321
17966: PUSH
17967: LD_VAR 0 3
17971: NONEQUAL
17972: IFFALSE 17990
// result := result diff i ;
17974: LD_ADDR_VAR 0 4
17978: PUSH
17979: LD_VAR 0 4
17983: PUSH
17984: LD_VAR 0 5
17988: DIFF
17989: ST_TO_ADDR
17990: GO 17949
17992: POP
17993: POP
// end ;
17994: LD_VAR 0 4
17998: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
18003: PPUSH
// result := true ;
18004: LD_ADDR_VAR 0 3
18008: PUSH
18009: LD_INT 1
18011: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18012: LD_ADDR_VAR 0 5
18016: PUSH
18017: LD_VAR 0 2
18021: PPUSH
18022: CALL_OW 480
18026: ST_TO_ADDR
// if not tmp then
18027: LD_VAR 0 5
18031: NOT
18032: IFFALSE 18036
// exit ;
18034: GO 18085
// for i in tmp do
18036: LD_ADDR_VAR 0 4
18040: PUSH
18041: LD_VAR 0 5
18045: PUSH
18046: FOR_IN
18047: IFFALSE 18083
// if GetTech ( i , side ) <> state_researched then
18049: LD_VAR 0 4
18053: PPUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 321
18063: PUSH
18064: LD_INT 2
18066: NONEQUAL
18067: IFFALSE 18081
// begin result := false ;
18069: LD_ADDR_VAR 0 3
18073: PUSH
18074: LD_INT 0
18076: ST_TO_ADDR
// exit ;
18077: POP
18078: POP
18079: GO 18085
// end ;
18081: GO 18046
18083: POP
18084: POP
// end ;
18085: LD_VAR 0 3
18089: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18105: LD_VAR 0 1
18109: NOT
18110: IFTRUE 18127
18112: PUSH
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL_OW 257
18122: PUSH
18123: LD_INT 9
18125: NONEQUAL
18126: OR
18127: IFFALSE 18131
// exit ;
18129: GO 18710
// side := GetSide ( unit ) ;
18131: LD_ADDR_VAR 0 9
18135: PUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 255
18145: ST_TO_ADDR
// tech_space := tech_spacanom ;
18146: LD_ADDR_VAR 0 12
18150: PUSH
18151: LD_INT 29
18153: ST_TO_ADDR
// tech_time := tech_taurad ;
18154: LD_ADDR_VAR 0 13
18158: PUSH
18159: LD_INT 28
18161: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18162: LD_ADDR_VAR 0 11
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 310
18176: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18177: LD_VAR 0 11
18181: PPUSH
18182: CALL_OW 247
18186: PUSH
18187: LD_INT 2
18189: EQUAL
18190: IFFALSE 18194
// exit ;
18192: GO 18710
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18194: LD_ADDR_VAR 0 8
18198: PUSH
18199: LD_INT 81
18201: PUSH
18202: LD_VAR 0 9
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 3
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 3
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 8
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18710
// if in_unit then
18246: LD_VAR 0 11
18250: IFFALSE 18274
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18252: LD_ADDR_VAR 0 10
18256: PUSH
18257: LD_VAR 0 8
18261: PPUSH
18262: LD_VAR 0 11
18266: PPUSH
18267: CALL_OW 74
18271: ST_TO_ADDR
18272: GO 18294
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18274: LD_ADDR_VAR 0 10
18278: PUSH
18279: LD_VAR 0 8
18283: PPUSH
18284: LD_VAR 0 1
18288: PPUSH
18289: CALL_OW 74
18293: ST_TO_ADDR
// if not enemy then
18294: LD_VAR 0 10
18298: NOT
18299: IFFALSE 18303
// exit ;
18301: GO 18710
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18303: LD_VAR 0 11
18307: IFFALSE 18329
18309: PUSH
18310: LD_VAR 0 11
18314: PPUSH
18315: LD_VAR 0 10
18319: PPUSH
18320: CALL_OW 296
18324: PUSH
18325: LD_INT 13
18327: GREATER
18328: AND
18329: IFTRUE 18351
18331: PUSH
18332: LD_VAR 0 1
18336: PPUSH
18337: LD_VAR 0 10
18341: PPUSH
18342: CALL_OW 296
18346: PUSH
18347: LD_INT 12
18349: GREATER
18350: OR
18351: IFFALSE 18355
// exit ;
18353: GO 18710
// missile := [ 1 ] ;
18355: LD_ADDR_VAR 0 14
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18366: LD_VAR 0 9
18370: PPUSH
18371: LD_VAR 0 12
18375: PPUSH
18376: CALL_OW 325
18380: IFFALSE 18409
// missile := Replace ( missile , missile + 1 , 2 ) ;
18382: LD_ADDR_VAR 0 14
18386: PUSH
18387: LD_VAR 0 14
18391: PPUSH
18392: LD_VAR 0 14
18396: PUSH
18397: LD_INT 1
18399: PLUS
18400: PPUSH
18401: LD_INT 2
18403: PPUSH
18404: CALL_OW 1
18408: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18409: LD_VAR 0 9
18413: PPUSH
18414: LD_VAR 0 13
18418: PPUSH
18419: CALL_OW 325
18423: IFFALSE 18447
18425: PUSH
18426: LD_VAR 0 10
18430: PPUSH
18431: CALL_OW 255
18435: PPUSH
18436: LD_VAR 0 13
18440: PPUSH
18441: CALL_OW 325
18445: NOT
18446: AND
18447: IFFALSE 18476
// missile := Replace ( missile , missile + 1 , 3 ) ;
18449: LD_ADDR_VAR 0 14
18453: PUSH
18454: LD_VAR 0 14
18458: PPUSH
18459: LD_VAR 0 14
18463: PUSH
18464: LD_INT 1
18466: PLUS
18467: PPUSH
18468: LD_INT 3
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// if missile < 2 then
18476: LD_VAR 0 14
18480: PUSH
18481: LD_INT 2
18483: LESS
18484: IFFALSE 18488
// exit ;
18486: GO 18710
// x := GetX ( enemy ) ;
18488: LD_ADDR_VAR 0 4
18492: PUSH
18493: LD_VAR 0 10
18497: PPUSH
18498: CALL_OW 250
18502: ST_TO_ADDR
// y := GetY ( enemy ) ;
18503: LD_ADDR_VAR 0 5
18507: PUSH
18508: LD_VAR 0 10
18512: PPUSH
18513: CALL_OW 251
18517: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18518: LD_ADDR_VAR 0 6
18522: PUSH
18523: LD_VAR 0 4
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 12
18539: PLUS
18540: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18541: LD_ADDR_VAR 0 7
18545: PUSH
18546: LD_VAR 0 5
18550: PUSH
18551: LD_INT 1
18553: NEG
18554: PPUSH
18555: LD_INT 1
18557: PPUSH
18558: CALL_OW 12
18562: PLUS
18563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18564: LD_VAR 0 6
18568: PPUSH
18569: LD_VAR 0 7
18573: PPUSH
18574: CALL_OW 488
18578: NOT
18579: IFFALSE 18601
// begin _x := x ;
18581: LD_ADDR_VAR 0 6
18585: PUSH
18586: LD_VAR 0 4
18590: ST_TO_ADDR
// _y := y ;
18591: LD_ADDR_VAR 0 7
18595: PUSH
18596: LD_VAR 0 5
18600: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_VAR 0 14
18613: PPUSH
18614: CALL_OW 12
18618: ST_TO_ADDR
// case i of 1 :
18619: LD_VAR 0 3
18623: PUSH
18624: LD_INT 1
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18649
18632: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18633: LD_VAR 0 1
18637: PPUSH
18638: LD_VAR 0 10
18642: PPUSH
18643: CALL_OW 115
18647: GO 18710
18649: LD_INT 2
18651: DOUBLE
18652: EQUAL
18653: IFTRUE 18657
18655: GO 18679
18657: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18658: LD_VAR 0 1
18662: PPUSH
18663: LD_VAR 0 6
18667: PPUSH
18668: LD_VAR 0 7
18672: PPUSH
18673: CALL_OW 153
18677: GO 18710
18679: LD_INT 3
18681: DOUBLE
18682: EQUAL
18683: IFTRUE 18687
18685: GO 18709
18687: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18688: LD_VAR 0 1
18692: PPUSH
18693: LD_VAR 0 6
18697: PPUSH
18698: LD_VAR 0 7
18702: PPUSH
18703: CALL_OW 154
18707: GO 18710
18709: POP
// end ;
18710: LD_VAR 0 2
18714: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
// if not unit or not building then
18723: LD_VAR 0 1
18727: NOT
18728: IFTRUE 18737
18730: PUSH
18731: LD_VAR 0 2
18735: NOT
18736: OR
18737: IFFALSE 18741
// exit ;
18739: GO 18899
// x := GetX ( building ) ;
18741: LD_ADDR_VAR 0 5
18745: PUSH
18746: LD_VAR 0 2
18750: PPUSH
18751: CALL_OW 250
18755: ST_TO_ADDR
// y := GetY ( building ) ;
18756: LD_ADDR_VAR 0 6
18760: PUSH
18761: LD_VAR 0 2
18765: PPUSH
18766: CALL_OW 251
18770: ST_TO_ADDR
// for i := 0 to 5 do
18771: LD_ADDR_VAR 0 4
18775: PUSH
18776: DOUBLE
18777: LD_INT 0
18779: DEC
18780: ST_TO_ADDR
18781: LD_INT 5
18783: PUSH
18784: FOR_TO
18785: IFFALSE 18897
// begin _x := ShiftX ( x , i , 3 ) ;
18787: LD_ADDR_VAR 0 7
18791: PUSH
18792: LD_VAR 0 5
18796: PPUSH
18797: LD_VAR 0 4
18801: PPUSH
18802: LD_INT 3
18804: PPUSH
18805: CALL_OW 272
18809: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18810: LD_ADDR_VAR 0 8
18814: PUSH
18815: LD_VAR 0 6
18819: PPUSH
18820: LD_VAR 0 4
18824: PPUSH
18825: LD_INT 3
18827: PPUSH
18828: CALL_OW 273
18832: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18833: LD_VAR 0 7
18837: PPUSH
18838: LD_VAR 0 8
18842: PPUSH
18843: CALL_OW 488
18847: NOT
18848: IFFALSE 18852
// continue ;
18850: GO 18784
// if HexInfo ( _x , _y ) = 0 then
18852: LD_VAR 0 7
18856: PPUSH
18857: LD_VAR 0 8
18861: PPUSH
18862: CALL_OW 428
18866: PUSH
18867: LD_INT 0
18869: EQUAL
18870: IFFALSE 18895
// begin ComMoveXY ( unit , _x , _y ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_VAR 0 7
18881: PPUSH
18882: LD_VAR 0 8
18886: PPUSH
18887: CALL_OW 111
// exit ;
18891: POP
18892: POP
18893: GO 18899
// end ; end ;
18895: GO 18784
18897: POP
18898: POP
// end ;
18899: LD_VAR 0 3
18903: RET
// export function ScanBase ( side , base_area ) ; begin
18904: LD_INT 0
18906: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_INT 81
18919: PUSH
18920: LD_VAR 0 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PPUSH
18929: CALL_OW 70
18933: ST_TO_ADDR
// end ;
18934: LD_VAR 0 3
18938: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18939: LD_INT 0
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
// result := false ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_INT 0
18952: ST_TO_ADDR
// side := GetSide ( unit ) ;
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: LD_VAR 0 1
18962: PPUSH
18963: CALL_OW 255
18967: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18968: LD_ADDR_VAR 0 4
18972: PUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 248
18982: ST_TO_ADDR
// case nat of 1 :
18983: LD_VAR 0 4
18987: PUSH
18988: LD_INT 1
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19007
18996: POP
// tech := tech_lassight ; 2 :
18997: LD_ADDR_VAR 0 5
19001: PUSH
19002: LD_INT 12
19004: ST_TO_ADDR
19005: GO 19046
19007: LD_INT 2
19009: DOUBLE
19010: EQUAL
19011: IFTRUE 19015
19013: GO 19026
19015: POP
// tech := tech_mortar ; 3 :
19016: LD_ADDR_VAR 0 5
19020: PUSH
19021: LD_INT 41
19023: ST_TO_ADDR
19024: GO 19046
19026: LD_INT 3
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19045
19034: POP
// tech := tech_bazooka ; end ;
19035: LD_ADDR_VAR 0 5
19039: PUSH
19040: LD_INT 44
19042: ST_TO_ADDR
19043: GO 19046
19045: POP
// if Researched ( side , tech ) then
19046: LD_VAR 0 3
19050: PPUSH
19051: LD_VAR 0 5
19055: PPUSH
19056: CALL_OW 325
19060: IFFALSE 19087
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19062: LD_ADDR_VAR 0 2
19066: PUSH
19067: LD_INT 5
19069: PUSH
19070: LD_INT 8
19072: PUSH
19073: LD_INT 9
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: PUSH
19081: LD_VAR 0 4
19085: ARRAY
19086: ST_TO_ADDR
// end ;
19087: LD_VAR 0 2
19091: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19092: LD_INT 0
19094: PPUSH
19095: PPUSH
19096: PPUSH
// if not mines then
19097: LD_VAR 0 2
19101: NOT
19102: IFFALSE 19106
// exit ;
19104: GO 19250
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19106: LD_ADDR_VAR 0 5
19110: PUSH
19111: LD_INT 81
19113: PUSH
19114: LD_VAR 0 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 3
19125: PUSH
19126: LD_INT 21
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PPUSH
19144: CALL_OW 69
19148: ST_TO_ADDR
// for i in mines do
19149: LD_ADDR_VAR 0 4
19153: PUSH
19154: LD_VAR 0 2
19158: PUSH
19159: FOR_IN
19160: IFFALSE 19248
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19162: LD_VAR 0 4
19166: PUSH
19167: LD_INT 1
19169: ARRAY
19170: PPUSH
19171: LD_VAR 0 4
19175: PUSH
19176: LD_INT 2
19178: ARRAY
19179: PPUSH
19180: CALL_OW 458
19184: NOT
19185: IFFALSE 19189
// continue ;
19187: GO 19159
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19189: LD_VAR 0 4
19193: PUSH
19194: LD_INT 1
19196: ARRAY
19197: PPUSH
19198: LD_VAR 0 4
19202: PUSH
19203: LD_INT 2
19205: ARRAY
19206: PPUSH
19207: CALL_OW 428
19211: PUSH
19212: LD_VAR 0 5
19216: IN
19217: IFFALSE 19246
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19219: LD_VAR 0 4
19223: PUSH
19224: LD_INT 1
19226: ARRAY
19227: PPUSH
19228: LD_VAR 0 4
19232: PUSH
19233: LD_INT 2
19235: ARRAY
19236: PPUSH
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 456
// end ;
19246: GO 19159
19248: POP
19249: POP
// end ;
19250: LD_VAR 0 3
19254: RET
// export function Count ( array ) ; begin
19255: LD_INT 0
19257: PPUSH
// result := array + 0 ;
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: LD_VAR 0 1
19267: PUSH
19268: LD_INT 0
19270: PLUS
19271: ST_TO_ADDR
// end ;
19272: LD_VAR 0 2
19276: RET
// export function IsEmpty ( building ) ; begin
19277: LD_INT 0
19279: PPUSH
// if not building then
19280: LD_VAR 0 1
19284: NOT
19285: IFFALSE 19289
// exit ;
19287: GO 19332
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19289: LD_ADDR_VAR 0 2
19293: PUSH
19294: LD_VAR 0 1
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL_OW 255
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 58
19318: PUSH
19319: EMPTY
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 69
19330: IN
19331: ST_TO_ADDR
// end ;
19332: LD_VAR 0 2
19336: RET
// export function IsNotFull ( building ) ; var places ; begin
19337: LD_INT 0
19339: PPUSH
19340: PPUSH
// if not building then
19341: LD_VAR 0 1
19345: NOT
19346: IFFALSE 19350
// exit ;
19348: GO 19378
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_VAR 0 1
19359: PPUSH
19360: LD_INT 3
19362: PUSH
19363: LD_INT 62
19365: PUSH
19366: EMPTY
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PPUSH
19373: CALL_OW 72
19377: ST_TO_ADDR
// end ;
19378: LD_VAR 0 2
19382: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19383: LD_INT 0
19385: PPUSH
19386: PPUSH
19387: PPUSH
19388: PPUSH
// tmp := [ ] ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: EMPTY
19395: ST_TO_ADDR
// list := [ ] ;
19396: LD_ADDR_VAR 0 5
19400: PUSH
19401: EMPTY
19402: ST_TO_ADDR
// for i = 16 to 25 do
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: DOUBLE
19409: LD_INT 16
19411: DEC
19412: ST_TO_ADDR
19413: LD_INT 25
19415: PUSH
19416: FOR_TO
19417: IFFALSE 19490
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 22
19431: PUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 255
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 91
19448: PUSH
19449: LD_VAR 0 1
19453: PUSH
19454: LD_INT 6
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 30
19464: PUSH
19465: LD_VAR 0 4
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: PPUSH
19482: CALL_OW 69
19486: ADD
19487: ST_TO_ADDR
19488: GO 19416
19490: POP
19491: POP
// for i = 1 to tmp do
19492: LD_ADDR_VAR 0 4
19496: PUSH
19497: DOUBLE
19498: LD_INT 1
19500: DEC
19501: ST_TO_ADDR
19502: LD_VAR 0 3
19506: PUSH
19507: FOR_TO
19508: IFFALSE 19596
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19510: LD_ADDR_VAR 0 5
19514: PUSH
19515: LD_VAR 0 5
19519: PUSH
19520: LD_VAR 0 3
19524: PUSH
19525: LD_VAR 0 4
19529: ARRAY
19530: PPUSH
19531: CALL_OW 266
19535: PUSH
19536: LD_VAR 0 3
19540: PUSH
19541: LD_VAR 0 4
19545: ARRAY
19546: PPUSH
19547: CALL_OW 250
19551: PUSH
19552: LD_VAR 0 3
19556: PUSH
19557: LD_VAR 0 4
19561: ARRAY
19562: PPUSH
19563: CALL_OW 251
19567: PUSH
19568: LD_VAR 0 3
19572: PUSH
19573: LD_VAR 0 4
19577: ARRAY
19578: PPUSH
19579: CALL_OW 254
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: ADD
19593: ST_TO_ADDR
19594: GO 19507
19596: POP
19597: POP
// result := list ;
19598: LD_ADDR_VAR 0 2
19602: PUSH
19603: LD_VAR 0 5
19607: ST_TO_ADDR
// end ;
19608: LD_VAR 0 2
19612: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19613: LD_INT 0
19615: PPUSH
19616: PPUSH
19617: PPUSH
19618: PPUSH
19619: PPUSH
19620: PPUSH
19621: PPUSH
// if not factory then
19622: LD_VAR 0 1
19626: NOT
19627: IFFALSE 19631
// exit ;
19629: GO 20234
// if control = control_apeman then
19631: LD_VAR 0 4
19635: PUSH
19636: LD_INT 5
19638: EQUAL
19639: IFFALSE 19748
// begin tmp := UnitsInside ( factory ) ;
19641: LD_ADDR_VAR 0 8
19645: PUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 313
19655: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19656: LD_VAR 0 8
19660: PPUSH
19661: LD_INT 25
19663: PUSH
19664: LD_INT 12
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 72
19675: NOT
19676: IFFALSE 19686
// control := control_manual ;
19678: LD_ADDR_VAR 0 4
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19686: LD_ADDR_VAR 0 8
19690: PUSH
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL 19383 0 1
19700: ST_TO_ADDR
// if tmp then
19701: LD_VAR 0 8
19705: IFFALSE 19748
// begin for i in tmp do
19707: LD_ADDR_VAR 0 7
19711: PUSH
19712: LD_VAR 0 8
19716: PUSH
19717: FOR_IN
19718: IFFALSE 19746
// if i [ 1 ] = b_ext_radio then
19720: LD_VAR 0 7
19724: PUSH
19725: LD_INT 1
19727: ARRAY
19728: PUSH
19729: LD_INT 22
19731: EQUAL
19732: IFFALSE 19744
// begin control := control_remote ;
19734: LD_ADDR_VAR 0 4
19738: PUSH
19739: LD_INT 2
19741: ST_TO_ADDR
// break ;
19742: GO 19746
// end ;
19744: GO 19717
19746: POP
19747: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19748: LD_VAR 0 1
19752: PPUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_VAR 0 4
19767: PPUSH
19768: LD_VAR 0 5
19772: PPUSH
19773: CALL_OW 448
19777: IFFALSE 19812
// begin result := [ chassis , engine , control , weapon ] ;
19779: LD_ADDR_VAR 0 6
19783: PUSH
19784: LD_VAR 0 2
19788: PUSH
19789: LD_VAR 0 3
19793: PUSH
19794: LD_VAR 0 4
19798: PUSH
19799: LD_VAR 0 5
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
// exit ;
19810: GO 20234
// end ; _chassis := AvailableChassisList ( factory ) ;
19812: LD_ADDR_VAR 0 9
19816: PUSH
19817: LD_VAR 0 1
19821: PPUSH
19822: CALL_OW 475
19826: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19827: LD_ADDR_VAR 0 11
19831: PUSH
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 476
19841: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19842: LD_ADDR_VAR 0 12
19846: PUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 477
19856: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19857: LD_ADDR_VAR 0 10
19861: PUSH
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 478
19871: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19872: LD_VAR 0 9
19876: NOT
19877: IFTRUE 19886
19879: PUSH
19880: LD_VAR 0 11
19884: NOT
19885: OR
19886: IFTRUE 19895
19888: PUSH
19889: LD_VAR 0 12
19893: NOT
19894: OR
19895: IFTRUE 19904
19897: PUSH
19898: LD_VAR 0 10
19902: NOT
19903: OR
19904: IFFALSE 19939
// begin result := [ chassis , engine , control , weapon ] ;
19906: LD_ADDR_VAR 0 6
19910: PUSH
19911: LD_VAR 0 2
19915: PUSH
19916: LD_VAR 0 3
19920: PUSH
19921: LD_VAR 0 4
19925: PUSH
19926: LD_VAR 0 5
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: ST_TO_ADDR
// exit ;
19937: GO 20234
// end ; if not chassis in _chassis then
19939: LD_VAR 0 2
19943: PUSH
19944: LD_VAR 0 9
19948: IN
19949: NOT
19950: IFFALSE 19976
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19952: LD_ADDR_VAR 0 2
19956: PUSH
19957: LD_VAR 0 9
19961: PUSH
19962: LD_INT 1
19964: PPUSH
19965: LD_VAR 0 9
19969: PPUSH
19970: CALL_OW 12
19974: ARRAY
19975: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: CALL 20239 0 2
19990: NOT
19991: IFFALSE 20052
// repeat engine := _engine [ 1 ] ;
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_VAR 0 11
20002: PUSH
20003: LD_INT 1
20005: ARRAY
20006: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20007: LD_ADDR_VAR 0 11
20011: PUSH
20012: LD_VAR 0 11
20016: PPUSH
20017: LD_INT 1
20019: PPUSH
20020: CALL_OW 3
20024: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20025: LD_VAR 0 2
20029: PPUSH
20030: LD_VAR 0 3
20034: PPUSH
20035: CALL 20239 0 2
20039: IFTRUE 20050
20041: PUSH
20042: LD_VAR 0 11
20046: PUSH
20047: EMPTY
20048: EQUAL
20049: OR
20050: IFFALSE 19993
// if not control in _control then
20052: LD_VAR 0 4
20056: PUSH
20057: LD_VAR 0 12
20061: IN
20062: NOT
20063: IFFALSE 20089
// control := _control [ rand ( 1 , _control ) ] ;
20065: LD_ADDR_VAR 0 4
20069: PUSH
20070: LD_VAR 0 12
20074: PUSH
20075: LD_INT 1
20077: PPUSH
20078: LD_VAR 0 12
20082: PPUSH
20083: CALL_OW 12
20087: ARRAY
20088: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20089: LD_VAR 0 2
20093: PPUSH
20094: LD_VAR 0 5
20098: PPUSH
20099: CALL 20461 0 2
20103: NOT
20104: IFFALSE 20165
// repeat weapon := _weapon [ 1 ] ;
20106: LD_ADDR_VAR 0 5
20110: PUSH
20111: LD_VAR 0 10
20115: PUSH
20116: LD_INT 1
20118: ARRAY
20119: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20120: LD_ADDR_VAR 0 10
20124: PUSH
20125: LD_VAR 0 10
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: CALL_OW 3
20137: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20138: LD_VAR 0 2
20142: PPUSH
20143: LD_VAR 0 5
20147: PPUSH
20148: CALL 20461 0 2
20152: IFTRUE 20163
20154: PUSH
20155: LD_VAR 0 10
20159: PUSH
20160: EMPTY
20161: EQUAL
20162: OR
20163: IFFALSE 20106
// result := [ ] ;
20165: LD_ADDR_VAR 0 6
20169: PUSH
20170: EMPTY
20171: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20172: LD_VAR 0 1
20176: PPUSH
20177: LD_VAR 0 2
20181: PPUSH
20182: LD_VAR 0 3
20186: PPUSH
20187: LD_VAR 0 4
20191: PPUSH
20192: LD_VAR 0 5
20196: PPUSH
20197: CALL_OW 448
20201: IFFALSE 20234
// result := [ chassis , engine , control , weapon ] ;
20203: LD_ADDR_VAR 0 6
20207: PUSH
20208: LD_VAR 0 2
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_VAR 0 4
20222: PUSH
20223: LD_VAR 0 5
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: ST_TO_ADDR
// end ;
20234: LD_VAR 0 6
20238: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20239: LD_INT 0
20241: PPUSH
// if not chassis or not engine then
20242: LD_VAR 0 1
20246: NOT
20247: IFTRUE 20256
20249: PUSH
20250: LD_VAR 0 2
20254: NOT
20255: OR
20256: IFFALSE 20260
// exit ;
20258: GO 20456
// case engine of engine_solar :
20260: LD_VAR 0 2
20264: PUSH
20265: LD_INT 2
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20311
20273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20274: LD_ADDR_VAR 0 3
20278: PUSH
20279: LD_INT 11
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: LD_INT 13
20287: PUSH
20288: LD_INT 14
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: LD_INT 2
20296: PUSH
20297: LD_INT 3
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: ST_TO_ADDR
20309: GO 20440
20311: LD_INT 1
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20381
20319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20320: LD_ADDR_VAR 0 3
20324: PUSH
20325: LD_INT 11
20327: PUSH
20328: LD_INT 12
20330: PUSH
20331: LD_INT 13
20333: PUSH
20334: LD_INT 14
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 5
20351: PUSH
20352: LD_INT 21
20354: PUSH
20355: LD_INT 23
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_INT 24
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: ST_TO_ADDR
20379: GO 20440
20381: LD_INT 3
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20439
20389: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_INT 13
20397: PUSH
20398: LD_INT 14
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: LD_INT 4
20409: PUSH
20410: LD_INT 5
20412: PUSH
20413: LD_INT 21
20415: PUSH
20416: LD_INT 22
20418: PUSH
20419: LD_INT 23
20421: PUSH
20422: LD_INT 24
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 20440
20439: POP
// result := ( chassis in result ) ;
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_VAR 0 1
20449: PUSH
20450: LD_VAR 0 3
20454: IN
20455: ST_TO_ADDR
// end ;
20456: LD_VAR 0 3
20460: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20461: LD_INT 0
20463: PPUSH
// if not chassis or not weapon then
20464: LD_VAR 0 1
20468: NOT
20469: IFTRUE 20478
20471: PUSH
20472: LD_VAR 0 2
20476: NOT
20477: OR
20478: IFFALSE 20482
// exit ;
20480: GO 21542
// case weapon of us_machine_gun :
20482: LD_VAR 0 2
20486: PUSH
20487: LD_INT 2
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20525
20495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20496: LD_ADDR_VAR 0 3
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: LD_INT 4
20512: PUSH
20513: LD_INT 5
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: ST_TO_ADDR
20523: GO 21526
20525: LD_INT 3
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20563
20533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: LD_INT 3
20547: PUSH
20548: LD_INT 4
20550: PUSH
20551: LD_INT 5
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
20561: GO 21526
20563: LD_INT 11
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20601
20571: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: LD_INT 3
20585: PUSH
20586: LD_INT 4
20588: PUSH
20589: LD_INT 5
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: ST_TO_ADDR
20599: GO 21526
20601: LD_INT 4
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20635
20609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20610: LD_ADDR_VAR 0 3
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 3
20620: PUSH
20621: LD_INT 4
20623: PUSH
20624: LD_INT 5
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: ST_TO_ADDR
20633: GO 21526
20635: LD_INT 5
20637: DOUBLE
20638: EQUAL
20639: IFTRUE 20643
20641: GO 20669
20643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 3
20654: PUSH
20655: LD_INT 4
20657: PUSH
20658: LD_INT 5
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: ST_TO_ADDR
20667: GO 21526
20669: LD_INT 9
20671: DOUBLE
20672: EQUAL
20673: IFTRUE 20677
20675: GO 20703
20677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20678: LD_ADDR_VAR 0 3
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: LD_INT 4
20691: PUSH
20692: LD_INT 5
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: ST_TO_ADDR
20701: GO 21526
20703: LD_INT 7
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 20737
20711: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: LD_INT 3
20722: PUSH
20723: LD_INT 4
20725: PUSH
20726: LD_INT 5
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: ST_TO_ADDR
20735: GO 21526
20737: LD_INT 12
20739: DOUBLE
20740: EQUAL
20741: IFTRUE 20745
20743: GO 20771
20745: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20746: LD_ADDR_VAR 0 3
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 3
20756: PUSH
20757: LD_INT 4
20759: PUSH
20760: LD_INT 5
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: ST_TO_ADDR
20769: GO 21526
20771: LD_INT 13
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20805
20779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 3
20790: PUSH
20791: LD_INT 4
20793: PUSH
20794: LD_INT 5
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: ST_TO_ADDR
20803: GO 21526
20805: LD_INT 14
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20831
20813: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20814: LD_ADDR_VAR 0 3
20818: PUSH
20819: LD_INT 4
20821: PUSH
20822: LD_INT 5
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: ST_TO_ADDR
20829: GO 21526
20831: LD_INT 6
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20857
20839: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20840: LD_ADDR_VAR 0 3
20844: PUSH
20845: LD_INT 4
20847: PUSH
20848: LD_INT 5
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: ST_TO_ADDR
20855: GO 21526
20857: LD_INT 10
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20883
20865: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_INT 4
20873: PUSH
20874: LD_INT 5
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: ST_TO_ADDR
20881: GO 21526
20883: LD_INT 22
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20917
20891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_INT 11
20899: PUSH
20900: LD_INT 12
20902: PUSH
20903: LD_INT 13
20905: PUSH
20906: LD_INT 14
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
20915: GO 21526
20917: LD_INT 23
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20951
20925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_INT 11
20933: PUSH
20934: LD_INT 12
20936: PUSH
20937: LD_INT 13
20939: PUSH
20940: LD_INT 14
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: ST_TO_ADDR
20949: GO 21526
20951: LD_INT 24
20953: DOUBLE
20954: EQUAL
20955: IFTRUE 20959
20957: GO 20985
20959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20960: LD_ADDR_VAR 0 3
20964: PUSH
20965: LD_INT 11
20967: PUSH
20968: LD_INT 12
20970: PUSH
20971: LD_INT 13
20973: PUSH
20974: LD_INT 14
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: ST_TO_ADDR
20983: GO 21526
20985: LD_INT 30
20987: DOUBLE
20988: EQUAL
20989: IFTRUE 20993
20991: GO 21019
20993: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: LD_INT 11
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: LD_INT 13
21007: PUSH
21008: LD_INT 14
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: ST_TO_ADDR
21017: GO 21526
21019: LD_INT 25
21021: DOUBLE
21022: EQUAL
21023: IFTRUE 21027
21025: GO 21045
21027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_INT 13
21035: PUSH
21036: LD_INT 14
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: ST_TO_ADDR
21043: GO 21526
21045: LD_INT 27
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21071
21053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_INT 13
21061: PUSH
21062: LD_INT 14
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: ST_TO_ADDR
21069: GO 21526
21071: LD_INT 92
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21105
21079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_INT 11
21087: PUSH
21088: LD_INT 12
21090: PUSH
21091: LD_INT 13
21093: PUSH
21094: LD_INT 14
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: ST_TO_ADDR
21103: GO 21526
21105: LD_INT 28
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21131
21113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21114: LD_ADDR_VAR 0 3
21118: PUSH
21119: LD_INT 13
21121: PUSH
21122: LD_INT 14
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: ST_TO_ADDR
21129: GO 21526
21131: LD_INT 29
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21157
21139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_INT 13
21147: PUSH
21148: LD_INT 14
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: ST_TO_ADDR
21155: GO 21526
21157: LD_INT 31
21159: DOUBLE
21160: EQUAL
21161: IFTRUE 21165
21163: GO 21183
21165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21166: LD_ADDR_VAR 0 3
21170: PUSH
21171: LD_INT 13
21173: PUSH
21174: LD_INT 14
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: ST_TO_ADDR
21181: GO 21526
21183: LD_INT 26
21185: DOUBLE
21186: EQUAL
21187: IFTRUE 21191
21189: GO 21209
21191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21192: LD_ADDR_VAR 0 3
21196: PUSH
21197: LD_INT 13
21199: PUSH
21200: LD_INT 14
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: ST_TO_ADDR
21207: GO 21526
21209: LD_INT 42
21211: DOUBLE
21212: EQUAL
21213: IFTRUE 21217
21215: GO 21243
21217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21218: LD_ADDR_VAR 0 3
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_INT 23
21231: PUSH
21232: LD_INT 24
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: ST_TO_ADDR
21241: GO 21526
21243: LD_INT 43
21245: DOUBLE
21246: EQUAL
21247: IFTRUE 21251
21249: GO 21277
21251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21252: LD_ADDR_VAR 0 3
21256: PUSH
21257: LD_INT 21
21259: PUSH
21260: LD_INT 22
21262: PUSH
21263: LD_INT 23
21265: PUSH
21266: LD_INT 24
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: ST_TO_ADDR
21275: GO 21526
21277: LD_INT 44
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21311
21285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21286: LD_ADDR_VAR 0 3
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_INT 23
21299: PUSH
21300: LD_INT 24
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: ST_TO_ADDR
21309: GO 21526
21311: LD_INT 45
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21345
21319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21320: LD_ADDR_VAR 0 3
21324: PUSH
21325: LD_INT 21
21327: PUSH
21328: LD_INT 22
21330: PUSH
21331: LD_INT 23
21333: PUSH
21334: LD_INT 24
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: ST_TO_ADDR
21343: GO 21526
21345: LD_INT 49
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21379
21353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21354: LD_ADDR_VAR 0 3
21358: PUSH
21359: LD_INT 21
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 23
21367: PUSH
21368: LD_INT 24
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: ST_TO_ADDR
21377: GO 21526
21379: LD_INT 51
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21413
21387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21388: LD_ADDR_VAR 0 3
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_INT 23
21401: PUSH
21402: LD_INT 24
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: ST_TO_ADDR
21411: GO 21526
21413: LD_INT 52
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21447
21421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21422: LD_ADDR_VAR 0 3
21426: PUSH
21427: LD_INT 21
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_INT 23
21435: PUSH
21436: LD_INT 24
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: ST_TO_ADDR
21445: GO 21526
21447: LD_INT 53
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21473
21455: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: LD_INT 23
21463: PUSH
21464: LD_INT 24
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: ST_TO_ADDR
21471: GO 21526
21473: LD_INT 46
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21499
21481: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21482: LD_ADDR_VAR 0 3
21486: PUSH
21487: LD_INT 23
21489: PUSH
21490: LD_INT 24
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: ST_TO_ADDR
21497: GO 21526
21499: LD_INT 47
21501: DOUBLE
21502: EQUAL
21503: IFTRUE 21507
21505: GO 21525
21507: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21508: LD_ADDR_VAR 0 3
21512: PUSH
21513: LD_INT 23
21515: PUSH
21516: LD_INT 24
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: ST_TO_ADDR
21523: GO 21526
21525: POP
// result := ( chassis in result ) ;
21526: LD_ADDR_VAR 0 3
21530: PUSH
21531: LD_VAR 0 1
21535: PUSH
21536: LD_VAR 0 3
21540: IN
21541: ST_TO_ADDR
// end ;
21542: LD_VAR 0 3
21546: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
// result := array ;
21556: LD_ADDR_VAR 0 5
21560: PUSH
21561: LD_VAR 0 1
21565: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21566: LD_VAR 0 1
21570: NOT
21571: IFTRUE 21580
21573: PUSH
21574: LD_VAR 0 2
21578: NOT
21579: OR
21580: IFTRUE 21589
21582: PUSH
21583: LD_VAR 0 3
21587: NOT
21588: OR
21589: IFTRUE 21603
21591: PUSH
21592: LD_VAR 0 2
21596: PUSH
21597: LD_VAR 0 1
21601: GREATER
21602: OR
21603: IFTRUE 21617
21605: PUSH
21606: LD_VAR 0 3
21610: PUSH
21611: LD_VAR 0 1
21615: GREATER
21616: OR
21617: IFFALSE 21621
// exit ;
21619: GO 21917
// if direction then
21621: LD_VAR 0 4
21625: IFFALSE 21689
// begin d := 1 ;
21627: LD_ADDR_VAR 0 9
21631: PUSH
21632: LD_INT 1
21634: ST_TO_ADDR
// if i_from > i_to then
21635: LD_VAR 0 2
21639: PUSH
21640: LD_VAR 0 3
21644: GREATER
21645: IFFALSE 21671
// length := ( array - i_from ) + i_to else
21647: LD_ADDR_VAR 0 11
21651: PUSH
21652: LD_VAR 0 1
21656: PUSH
21657: LD_VAR 0 2
21661: MINUS
21662: PUSH
21663: LD_VAR 0 3
21667: PLUS
21668: ST_TO_ADDR
21669: GO 21687
// length := i_to - i_from ;
21671: LD_ADDR_VAR 0 11
21675: PUSH
21676: LD_VAR 0 3
21680: PUSH
21681: LD_VAR 0 2
21685: MINUS
21686: ST_TO_ADDR
// end else
21687: GO 21750
// begin d := - 1 ;
21689: LD_ADDR_VAR 0 9
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: ST_TO_ADDR
// if i_from > i_to then
21698: LD_VAR 0 2
21702: PUSH
21703: LD_VAR 0 3
21707: GREATER
21708: IFFALSE 21728
// length := i_from - i_to else
21710: LD_ADDR_VAR 0 11
21714: PUSH
21715: LD_VAR 0 2
21719: PUSH
21720: LD_VAR 0 3
21724: MINUS
21725: ST_TO_ADDR
21726: GO 21750
// length := ( array - i_to ) + i_from ;
21728: LD_ADDR_VAR 0 11
21732: PUSH
21733: LD_VAR 0 1
21737: PUSH
21738: LD_VAR 0 3
21742: MINUS
21743: PUSH
21744: LD_VAR 0 2
21748: PLUS
21749: ST_TO_ADDR
// end ; if not length then
21750: LD_VAR 0 11
21754: NOT
21755: IFFALSE 21759
// exit ;
21757: GO 21917
// tmp := array ;
21759: LD_ADDR_VAR 0 10
21763: PUSH
21764: LD_VAR 0 1
21768: ST_TO_ADDR
// for i = 1 to length do
21769: LD_ADDR_VAR 0 6
21773: PUSH
21774: DOUBLE
21775: LD_INT 1
21777: DEC
21778: ST_TO_ADDR
21779: LD_VAR 0 11
21783: PUSH
21784: FOR_TO
21785: IFFALSE 21905
// begin for j = 1 to array do
21787: LD_ADDR_VAR 0 7
21791: PUSH
21792: DOUBLE
21793: LD_INT 1
21795: DEC
21796: ST_TO_ADDR
21797: LD_VAR 0 1
21801: PUSH
21802: FOR_TO
21803: IFFALSE 21891
// begin k := j + d ;
21805: LD_ADDR_VAR 0 8
21809: PUSH
21810: LD_VAR 0 7
21814: PUSH
21815: LD_VAR 0 9
21819: PLUS
21820: ST_TO_ADDR
// if k > array then
21821: LD_VAR 0 8
21825: PUSH
21826: LD_VAR 0 1
21830: GREATER
21831: IFFALSE 21841
// k := 1 ;
21833: LD_ADDR_VAR 0 8
21837: PUSH
21838: LD_INT 1
21840: ST_TO_ADDR
// if not k then
21841: LD_VAR 0 8
21845: NOT
21846: IFFALSE 21858
// k := array ;
21848: LD_ADDR_VAR 0 8
21852: PUSH
21853: LD_VAR 0 1
21857: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21858: LD_ADDR_VAR 0 10
21862: PUSH
21863: LD_VAR 0 10
21867: PPUSH
21868: LD_VAR 0 8
21872: PPUSH
21873: LD_VAR 0 1
21877: PUSH
21878: LD_VAR 0 7
21882: ARRAY
21883: PPUSH
21884: CALL_OW 1
21888: ST_TO_ADDR
// end ;
21889: GO 21802
21891: POP
21892: POP
// array := tmp ;
21893: LD_ADDR_VAR 0 1
21897: PUSH
21898: LD_VAR 0 10
21902: ST_TO_ADDR
// end ;
21903: GO 21784
21905: POP
21906: POP
// result := array ;
21907: LD_ADDR_VAR 0 5
21911: PUSH
21912: LD_VAR 0 1
21916: ST_TO_ADDR
// end ;
21917: LD_VAR 0 5
21921: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21922: LD_INT 0
21924: PPUSH
21925: PPUSH
// result := 0 ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_INT 0
21933: ST_TO_ADDR
// if not array or not value in array then
21934: LD_VAR 0 1
21938: NOT
21939: IFTRUE 21954
21941: PUSH
21942: LD_VAR 0 2
21946: PUSH
21947: LD_VAR 0 1
21951: IN
21952: NOT
21953: OR
21954: IFFALSE 21958
// exit ;
21956: GO 22012
// for i = 1 to array do
21958: LD_ADDR_VAR 0 4
21962: PUSH
21963: DOUBLE
21964: LD_INT 1
21966: DEC
21967: ST_TO_ADDR
21968: LD_VAR 0 1
21972: PUSH
21973: FOR_TO
21974: IFFALSE 22010
// if value = array [ i ] then
21976: LD_VAR 0 2
21980: PUSH
21981: LD_VAR 0 1
21985: PUSH
21986: LD_VAR 0 4
21990: ARRAY
21991: EQUAL
21992: IFFALSE 22008
// begin result := i ;
21994: LD_ADDR_VAR 0 3
21998: PUSH
21999: LD_VAR 0 4
22003: ST_TO_ADDR
// exit ;
22004: POP
22005: POP
22006: GO 22012
// end ;
22008: GO 21973
22010: POP
22011: POP
// end ;
22012: LD_VAR 0 3
22016: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22017: LD_INT 0
22019: PPUSH
// vc_chassis := chassis ;
22020: LD_ADDR_OWVAR 37
22024: PUSH
22025: LD_VAR 0 1
22029: ST_TO_ADDR
// vc_engine := engine ;
22030: LD_ADDR_OWVAR 39
22034: PUSH
22035: LD_VAR 0 2
22039: ST_TO_ADDR
// vc_control := control ;
22040: LD_ADDR_OWVAR 38
22044: PUSH
22045: LD_VAR 0 3
22049: ST_TO_ADDR
// vc_weapon := weapon ;
22050: LD_ADDR_OWVAR 40
22054: PUSH
22055: LD_VAR 0 4
22059: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22060: LD_ADDR_OWVAR 41
22064: PUSH
22065: LD_VAR 0 5
22069: ST_TO_ADDR
// end ;
22070: LD_VAR 0 6
22074: RET
// export function WantPlant ( unit ) ; var task ; begin
22075: LD_INT 0
22077: PPUSH
22078: PPUSH
// result := false ;
22079: LD_ADDR_VAR 0 2
22083: PUSH
22084: LD_INT 0
22086: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22087: LD_ADDR_VAR 0 3
22091: PUSH
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 437
22101: ST_TO_ADDR
// if task then
22102: LD_VAR 0 3
22106: IFFALSE 22134
// if task [ 1 ] [ 1 ] = p then
22108: LD_VAR 0 3
22112: PUSH
22113: LD_INT 1
22115: ARRAY
22116: PUSH
22117: LD_INT 1
22119: ARRAY
22120: PUSH
22121: LD_STRING p
22123: EQUAL
22124: IFFALSE 22134
// result := true ;
22126: LD_ADDR_VAR 0 2
22130: PUSH
22131: LD_INT 1
22133: ST_TO_ADDR
// end ;
22134: LD_VAR 0 2
22138: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22139: LD_INT 0
22141: PPUSH
22142: PPUSH
22143: PPUSH
22144: PPUSH
// if pos < 1 then
22145: LD_VAR 0 2
22149: PUSH
22150: LD_INT 1
22152: LESS
22153: IFFALSE 22157
// exit ;
22155: GO 22460
// if pos = 1 then
22157: LD_VAR 0 2
22161: PUSH
22162: LD_INT 1
22164: EQUAL
22165: IFFALSE 22198
// result := Replace ( arr , pos [ 1 ] , value ) else
22167: LD_ADDR_VAR 0 4
22171: PUSH
22172: LD_VAR 0 1
22176: PPUSH
22177: LD_VAR 0 2
22181: PUSH
22182: LD_INT 1
22184: ARRAY
22185: PPUSH
22186: LD_VAR 0 3
22190: PPUSH
22191: CALL_OW 1
22195: ST_TO_ADDR
22196: GO 22460
// begin tmp := arr ;
22198: LD_ADDR_VAR 0 6
22202: PUSH
22203: LD_VAR 0 1
22207: ST_TO_ADDR
// s_arr := [ tmp ] ;
22208: LD_ADDR_VAR 0 7
22212: PUSH
22213: LD_VAR 0 6
22217: PUSH
22218: EMPTY
22219: LIST
22220: ST_TO_ADDR
// for i = 1 to pos - 1 do
22221: LD_ADDR_VAR 0 5
22225: PUSH
22226: DOUBLE
22227: LD_INT 1
22229: DEC
22230: ST_TO_ADDR
22231: LD_VAR 0 2
22235: PUSH
22236: LD_INT 1
22238: MINUS
22239: PUSH
22240: FOR_TO
22241: IFFALSE 22286
// begin tmp := tmp [ pos [ i ] ] ;
22243: LD_ADDR_VAR 0 6
22247: PUSH
22248: LD_VAR 0 6
22252: PUSH
22253: LD_VAR 0 2
22257: PUSH
22258: LD_VAR 0 5
22262: ARRAY
22263: ARRAY
22264: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22265: LD_ADDR_VAR 0 7
22269: PUSH
22270: LD_VAR 0 7
22274: PUSH
22275: LD_VAR 0 6
22279: PUSH
22280: EMPTY
22281: LIST
22282: ADD
22283: ST_TO_ADDR
// end ;
22284: GO 22240
22286: POP
22287: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22288: LD_ADDR_VAR 0 6
22292: PUSH
22293: LD_VAR 0 6
22297: PPUSH
22298: LD_VAR 0 2
22302: PUSH
22303: LD_VAR 0 2
22307: ARRAY
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: CALL_OW 1
22318: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22319: LD_ADDR_VAR 0 7
22323: PUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: LD_VAR 0 7
22333: PPUSH
22334: LD_VAR 0 6
22338: PPUSH
22339: CALL_OW 1
22343: ST_TO_ADDR
// for i = s_arr downto 2 do
22344: LD_ADDR_VAR 0 5
22348: PUSH
22349: DOUBLE
22350: LD_VAR 0 7
22354: INC
22355: ST_TO_ADDR
22356: LD_INT 2
22358: PUSH
22359: FOR_DOWNTO
22360: IFFALSE 22444
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22362: LD_ADDR_VAR 0 6
22366: PUSH
22367: LD_VAR 0 7
22371: PUSH
22372: LD_VAR 0 5
22376: PUSH
22377: LD_INT 1
22379: MINUS
22380: ARRAY
22381: PPUSH
22382: LD_VAR 0 2
22386: PUSH
22387: LD_VAR 0 5
22391: PUSH
22392: LD_INT 1
22394: MINUS
22395: ARRAY
22396: PPUSH
22397: LD_VAR 0 7
22401: PUSH
22402: LD_VAR 0 5
22406: ARRAY
22407: PPUSH
22408: CALL_OW 1
22412: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22413: LD_ADDR_VAR 0 7
22417: PUSH
22418: LD_VAR 0 7
22422: PPUSH
22423: LD_VAR 0 5
22427: PUSH
22428: LD_INT 1
22430: MINUS
22431: PPUSH
22432: LD_VAR 0 6
22436: PPUSH
22437: CALL_OW 1
22441: ST_TO_ADDR
// end ;
22442: GO 22359
22444: POP
22445: POP
// result := s_arr [ 1 ] ;
22446: LD_ADDR_VAR 0 4
22450: PUSH
22451: LD_VAR 0 7
22455: PUSH
22456: LD_INT 1
22458: ARRAY
22459: ST_TO_ADDR
// end ; end ;
22460: LD_VAR 0 4
22464: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
// if not list then
22469: LD_VAR 0 1
22473: NOT
22474: IFFALSE 22478
// exit ;
22476: GO 22569
// i := list [ pos1 ] ;
22478: LD_ADDR_VAR 0 5
22482: PUSH
22483: LD_VAR 0 1
22487: PUSH
22488: LD_VAR 0 2
22492: ARRAY
22493: ST_TO_ADDR
// if not i then
22494: LD_VAR 0 5
22498: NOT
22499: IFFALSE 22503
// exit ;
22501: GO 22569
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22503: LD_ADDR_VAR 0 1
22507: PUSH
22508: LD_VAR 0 1
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: LD_VAR 0 1
22522: PUSH
22523: LD_VAR 0 3
22527: ARRAY
22528: PPUSH
22529: CALL_OW 1
22533: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22534: LD_ADDR_VAR 0 1
22538: PUSH
22539: LD_VAR 0 1
22543: PPUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: LD_VAR 0 5
22553: PPUSH
22554: CALL_OW 1
22558: ST_TO_ADDR
// result := list ;
22559: LD_ADDR_VAR 0 4
22563: PUSH
22564: LD_VAR 0 1
22568: ST_TO_ADDR
// end ;
22569: LD_VAR 0 4
22573: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22574: LD_INT 0
22576: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22577: LD_ADDR_VAR 0 5
22581: PUSH
22582: LD_VAR 0 1
22586: PPUSH
22587: CALL_OW 250
22591: PPUSH
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL_OW 251
22601: PPUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_VAR 0 3
22611: PPUSH
22612: LD_VAR 0 4
22616: PPUSH
22617: CALL 22999 0 5
22621: ST_TO_ADDR
// end ;
22622: LD_VAR 0 5
22626: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
22632: PPUSH
// if not list or not unit then
22633: LD_VAR 0 2
22637: NOT
22638: IFTRUE 22647
22640: PUSH
22641: LD_VAR 0 1
22645: NOT
22646: OR
22647: IFFALSE 22651
// exit ;
22649: GO 22994
// result := [ ] ;
22651: LD_ADDR_VAR 0 5
22655: PUSH
22656: EMPTY
22657: ST_TO_ADDR
// for i in list do
22658: LD_ADDR_VAR 0 6
22662: PUSH
22663: LD_VAR 0 2
22667: PUSH
22668: FOR_IN
22669: IFFALSE 22887
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22671: LD_ADDR_VAR 0 8
22675: PUSH
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_VAR 0 6
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: PPUSH
22690: LD_VAR 0 6
22694: PUSH
22695: LD_INT 2
22697: ARRAY
22698: PPUSH
22699: CALL_OW 297
22703: ST_TO_ADDR
// if not Count ( result ) then
22704: LD_VAR 0 5
22708: PPUSH
22709: CALL 19255 0 1
22713: NOT
22714: IFFALSE 22747
// begin result := Join ( result , [ i , tmp ] ) ;
22716: LD_ADDR_VAR 0 5
22720: PUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: LD_VAR 0 6
22730: PUSH
22731: LD_VAR 0 8
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PPUSH
22740: CALL 55187 0 2
22744: ST_TO_ADDR
// continue ;
22745: GO 22668
// end ; if result [ result ] [ 2 ] <= tmp then
22747: LD_VAR 0 5
22751: PUSH
22752: LD_VAR 0 5
22756: ARRAY
22757: PUSH
22758: LD_INT 2
22760: ARRAY
22761: PUSH
22762: LD_VAR 0 8
22766: LESSEQUAL
22767: IFFALSE 22800
// result := Join ( result , [ i , tmp ] ) else
22769: LD_ADDR_VAR 0 5
22773: PUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: LD_VAR 0 6
22783: PUSH
22784: LD_VAR 0 8
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PPUSH
22793: CALL 55187 0 2
22797: ST_TO_ADDR
22798: GO 22885
// begin for j := 1 to Count ( result ) do
22800: LD_ADDR_VAR 0 7
22804: PUSH
22805: DOUBLE
22806: LD_INT 1
22808: DEC
22809: ST_TO_ADDR
22810: LD_VAR 0 5
22814: PPUSH
22815: CALL 19255 0 1
22819: PUSH
22820: FOR_TO
22821: IFFALSE 22883
// begin if tmp < result [ j ] [ 2 ] then
22823: LD_VAR 0 8
22827: PUSH
22828: LD_VAR 0 5
22832: PUSH
22833: LD_VAR 0 7
22837: ARRAY
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: LESS
22843: IFFALSE 22881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: LD_VAR 0 5
22854: PPUSH
22855: LD_VAR 0 7
22859: PPUSH
22860: LD_VAR 0 6
22864: PUSH
22865: LD_VAR 0 8
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 2
22878: ST_TO_ADDR
// break ;
22879: GO 22883
// end ; end ;
22881: GO 22820
22883: POP
22884: POP
// end ; end ;
22885: GO 22668
22887: POP
22888: POP
// if result and not asc then
22889: LD_VAR 0 5
22893: IFFALSE 22902
22895: PUSH
22896: LD_VAR 0 3
22900: NOT
22901: AND
22902: IFFALSE 22919
// result := ReverseArray ( result ) ;
22904: LD_ADDR_VAR 0 5
22908: PUSH
22909: LD_VAR 0 5
22913: PPUSH
22914: CALL 50277 0 1
22918: ST_TO_ADDR
// tmp := [ ] ;
22919: LD_ADDR_VAR 0 8
22923: PUSH
22924: EMPTY
22925: ST_TO_ADDR
// if mode then
22926: LD_VAR 0 4
22930: IFFALSE 22994
// begin for i := 1 to result do
22932: LD_ADDR_VAR 0 6
22936: PUSH
22937: DOUBLE
22938: LD_INT 1
22940: DEC
22941: ST_TO_ADDR
22942: LD_VAR 0 5
22946: PUSH
22947: FOR_TO
22948: IFFALSE 22982
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22950: LD_ADDR_VAR 0 8
22954: PUSH
22955: LD_VAR 0 8
22959: PPUSH
22960: LD_VAR 0 5
22964: PUSH
22965: LD_VAR 0 6
22969: ARRAY
22970: PUSH
22971: LD_INT 1
22973: ARRAY
22974: PPUSH
22975: CALL 55187 0 2
22979: ST_TO_ADDR
22980: GO 22947
22982: POP
22983: POP
// result := tmp ;
22984: LD_ADDR_VAR 0 5
22988: PUSH
22989: LD_VAR 0 8
22993: ST_TO_ADDR
// end ; end ;
22994: LD_VAR 0 5
22998: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22999: LD_INT 0
23001: PPUSH
23002: PPUSH
23003: PPUSH
23004: PPUSH
// if not list then
23005: LD_VAR 0 3
23009: NOT
23010: IFFALSE 23014
// exit ;
23012: GO 23404
// result := [ ] ;
23014: LD_ADDR_VAR 0 6
23018: PUSH
23019: EMPTY
23020: ST_TO_ADDR
// for i in list do
23021: LD_ADDR_VAR 0 7
23025: PUSH
23026: LD_VAR 0 3
23030: PUSH
23031: FOR_IN
23032: IFFALSE 23234
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23034: LD_ADDR_VAR 0 9
23038: PUSH
23039: LD_VAR 0 7
23043: PPUSH
23044: LD_VAR 0 1
23048: PPUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 297
23058: ST_TO_ADDR
// if not result then
23059: LD_VAR 0 6
23063: NOT
23064: IFFALSE 23090
// result := [ [ i , tmp ] ] else
23066: LD_ADDR_VAR 0 6
23070: PUSH
23071: LD_VAR 0 7
23075: PUSH
23076: LD_VAR 0 9
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: ST_TO_ADDR
23088: GO 23232
// begin if result [ result ] [ 2 ] <= tmp then
23090: LD_VAR 0 6
23094: PUSH
23095: LD_VAR 0 6
23099: ARRAY
23100: PUSH
23101: LD_INT 2
23103: ARRAY
23104: PUSH
23105: LD_VAR 0 9
23109: LESSEQUAL
23110: IFFALSE 23152
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23112: LD_ADDR_VAR 0 6
23116: PUSH
23117: LD_VAR 0 6
23121: PPUSH
23122: LD_VAR 0 6
23126: PUSH
23127: LD_INT 1
23129: PLUS
23130: PPUSH
23131: LD_VAR 0 7
23135: PUSH
23136: LD_VAR 0 9
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PPUSH
23145: CALL_OW 2
23149: ST_TO_ADDR
23150: GO 23232
// for j := 1 to result do
23152: LD_ADDR_VAR 0 8
23156: PUSH
23157: DOUBLE
23158: LD_INT 1
23160: DEC
23161: ST_TO_ADDR
23162: LD_VAR 0 6
23166: PUSH
23167: FOR_TO
23168: IFFALSE 23230
// begin if tmp < result [ j ] [ 2 ] then
23170: LD_VAR 0 9
23174: PUSH
23175: LD_VAR 0 6
23179: PUSH
23180: LD_VAR 0 8
23184: ARRAY
23185: PUSH
23186: LD_INT 2
23188: ARRAY
23189: LESS
23190: IFFALSE 23228
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23192: LD_ADDR_VAR 0 6
23196: PUSH
23197: LD_VAR 0 6
23201: PPUSH
23202: LD_VAR 0 8
23206: PPUSH
23207: LD_VAR 0 7
23211: PUSH
23212: LD_VAR 0 9
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 2
23225: ST_TO_ADDR
// break ;
23226: GO 23230
// end ; end ;
23228: GO 23167
23230: POP
23231: POP
// end ; end ;
23232: GO 23031
23234: POP
23235: POP
// if result and not asc then
23236: LD_VAR 0 6
23240: IFFALSE 23249
23242: PUSH
23243: LD_VAR 0 4
23247: NOT
23248: AND
23249: IFFALSE 23324
// begin tmp := result ;
23251: LD_ADDR_VAR 0 9
23255: PUSH
23256: LD_VAR 0 6
23260: ST_TO_ADDR
// for i = tmp downto 1 do
23261: LD_ADDR_VAR 0 7
23265: PUSH
23266: DOUBLE
23267: LD_VAR 0 9
23271: INC
23272: ST_TO_ADDR
23273: LD_INT 1
23275: PUSH
23276: FOR_DOWNTO
23277: IFFALSE 23322
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23279: LD_ADDR_VAR 0 6
23283: PUSH
23284: LD_VAR 0 6
23288: PPUSH
23289: LD_VAR 0 9
23293: PUSH
23294: LD_VAR 0 7
23298: MINUS
23299: PUSH
23300: LD_INT 1
23302: PLUS
23303: PPUSH
23304: LD_VAR 0 9
23308: PUSH
23309: LD_VAR 0 7
23313: ARRAY
23314: PPUSH
23315: CALL_OW 1
23319: ST_TO_ADDR
23320: GO 23276
23322: POP
23323: POP
// end ; tmp := [ ] ;
23324: LD_ADDR_VAR 0 9
23328: PUSH
23329: EMPTY
23330: ST_TO_ADDR
// if mode then
23331: LD_VAR 0 5
23335: IFFALSE 23404
// begin for i = 1 to result do
23337: LD_ADDR_VAR 0 7
23341: PUSH
23342: DOUBLE
23343: LD_INT 1
23345: DEC
23346: ST_TO_ADDR
23347: LD_VAR 0 6
23351: PUSH
23352: FOR_TO
23353: IFFALSE 23392
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23355: LD_ADDR_VAR 0 9
23359: PUSH
23360: LD_VAR 0 9
23364: PPUSH
23365: LD_VAR 0 7
23369: PPUSH
23370: LD_VAR 0 6
23374: PUSH
23375: LD_VAR 0 7
23379: ARRAY
23380: PUSH
23381: LD_INT 1
23383: ARRAY
23384: PPUSH
23385: CALL_OW 1
23389: ST_TO_ADDR
23390: GO 23352
23392: POP
23393: POP
// result := tmp ;
23394: LD_ADDR_VAR 0 6
23398: PUSH
23399: LD_VAR 0 9
23403: ST_TO_ADDR
// end ; end ;
23404: LD_VAR 0 6
23408: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23417: LD_ADDR_VAR 0 5
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: ST_TO_ADDR
// if not x or not y then
23439: LD_VAR 0 2
23443: NOT
23444: IFTRUE 23453
23446: PUSH
23447: LD_VAR 0 3
23451: NOT
23452: OR
23453: IFFALSE 23457
// exit ;
23455: GO 25113
// if not range then
23457: LD_VAR 0 4
23461: NOT
23462: IFFALSE 23472
// range := 10 ;
23464: LD_ADDR_VAR 0 4
23468: PUSH
23469: LD_INT 10
23471: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23472: LD_ADDR_VAR 0 8
23476: PUSH
23477: LD_INT 81
23479: PUSH
23480: LD_VAR 0 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 92
23491: PUSH
23492: LD_VAR 0 2
23496: PUSH
23497: LD_VAR 0 3
23501: PUSH
23502: LD_VAR 0 4
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 21
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: ST_TO_ADDR
// if not tmp then
23540: LD_VAR 0 8
23544: NOT
23545: IFFALSE 23549
// exit ;
23547: GO 25113
// for i in tmp do
23549: LD_ADDR_VAR 0 6
23553: PUSH
23554: LD_VAR 0 8
23558: PUSH
23559: FOR_IN
23560: IFFALSE 25088
// begin points := [ 0 , 0 , 0 ] ;
23562: LD_ADDR_VAR 0 9
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
// bpoints := 1 ;
23581: LD_ADDR_VAR 0 10
23585: PUSH
23586: LD_INT 1
23588: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23589: LD_VAR 0 6
23593: PPUSH
23594: CALL_OW 247
23598: PUSH
23599: LD_INT 1
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 24189
23607: POP
// begin if GetClass ( i ) = 1 then
23608: LD_VAR 0 6
23612: PPUSH
23613: CALL_OW 257
23617: PUSH
23618: LD_INT 1
23620: EQUAL
23621: IFFALSE 23642
// points := [ 10 , 5 , 3 ] ;
23623: LD_ADDR_VAR 0 9
23627: PUSH
23628: LD_INT 10
23630: PUSH
23631: LD_INT 5
23633: PUSH
23634: LD_INT 3
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23642: LD_VAR 0 6
23646: PPUSH
23647: CALL_OW 257
23651: PUSH
23652: LD_INT 2
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: LD_INT 4
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: IN
23666: IFFALSE 23687
// points := [ 3 , 2 , 1 ] ;
23668: LD_ADDR_VAR 0 9
23672: PUSH
23673: LD_INT 3
23675: PUSH
23676: LD_INT 2
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23687: LD_VAR 0 6
23691: PPUSH
23692: CALL_OW 257
23696: PUSH
23697: LD_INT 5
23699: EQUAL
23700: IFFALSE 23721
// points := [ 130 , 5 , 2 ] ;
23702: LD_ADDR_VAR 0 9
23706: PUSH
23707: LD_INT 130
23709: PUSH
23710: LD_INT 5
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23721: LD_VAR 0 6
23725: PPUSH
23726: CALL_OW 257
23730: PUSH
23731: LD_INT 8
23733: EQUAL
23734: IFFALSE 23755
// points := [ 35 , 35 , 30 ] ;
23736: LD_ADDR_VAR 0 9
23740: PUSH
23741: LD_INT 35
23743: PUSH
23744: LD_INT 35
23746: PUSH
23747: LD_INT 30
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23755: LD_VAR 0 6
23759: PPUSH
23760: CALL_OW 257
23764: PUSH
23765: LD_INT 9
23767: EQUAL
23768: IFFALSE 23789
// points := [ 20 , 55 , 40 ] ;
23770: LD_ADDR_VAR 0 9
23774: PUSH
23775: LD_INT 20
23777: PUSH
23778: LD_INT 55
23780: PUSH
23781: LD_INT 40
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23789: LD_VAR 0 6
23793: PPUSH
23794: CALL_OW 257
23798: PUSH
23799: LD_INT 12
23801: PUSH
23802: LD_INT 16
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: IN
23809: IFFALSE 23830
// points := [ 5 , 3 , 2 ] ;
23811: LD_ADDR_VAR 0 9
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23830: LD_VAR 0 6
23834: PPUSH
23835: CALL_OW 257
23839: PUSH
23840: LD_INT 17
23842: EQUAL
23843: IFFALSE 23864
// points := [ 100 , 50 , 75 ] ;
23845: LD_ADDR_VAR 0 9
23849: PUSH
23850: LD_INT 100
23852: PUSH
23853: LD_INT 50
23855: PUSH
23856: LD_INT 75
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23864: LD_VAR 0 6
23868: PPUSH
23869: CALL_OW 257
23873: PUSH
23874: LD_INT 15
23876: EQUAL
23877: IFFALSE 23898
// points := [ 10 , 5 , 3 ] ;
23879: LD_ADDR_VAR 0 9
23883: PUSH
23884: LD_INT 10
23886: PUSH
23887: LD_INT 5
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23898: LD_VAR 0 6
23902: PPUSH
23903: CALL_OW 257
23907: PUSH
23908: LD_INT 14
23910: EQUAL
23911: IFFALSE 23932
// points := [ 10 , 0 , 0 ] ;
23913: LD_ADDR_VAR 0 9
23917: PUSH
23918: LD_INT 10
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23932: LD_VAR 0 6
23936: PPUSH
23937: CALL_OW 257
23941: PUSH
23942: LD_INT 11
23944: EQUAL
23945: IFFALSE 23966
// points := [ 30 , 10 , 5 ] ;
23947: LD_ADDR_VAR 0 9
23951: PUSH
23952: LD_INT 30
23954: PUSH
23955: LD_INT 10
23957: PUSH
23958: LD_INT 5
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23966: LD_VAR 0 1
23970: PPUSH
23971: LD_INT 5
23973: PPUSH
23974: CALL_OW 321
23978: PUSH
23979: LD_INT 2
23981: EQUAL
23982: IFFALSE 23999
// bpoints := bpoints * 1.8 ;
23984: LD_ADDR_VAR 0 10
23988: PUSH
23989: LD_VAR 0 10
23993: PUSH
23994: LD_REAL  1.80000000000000E+0000
23997: MUL
23998: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23999: LD_VAR 0 6
24003: PPUSH
24004: CALL_OW 257
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 4
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: IN
24027: IFFALSE 24047
24029: PUSH
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_INT 51
24037: PPUSH
24038: CALL_OW 321
24042: PUSH
24043: LD_INT 2
24045: EQUAL
24046: AND
24047: IFFALSE 24064
// bpoints := bpoints * 1.2 ;
24049: LD_ADDR_VAR 0 10
24053: PUSH
24054: LD_VAR 0 10
24058: PUSH
24059: LD_REAL  1.20000000000000E+0000
24062: MUL
24063: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 257
24073: PUSH
24074: LD_INT 5
24076: PUSH
24077: LD_INT 7
24079: PUSH
24080: LD_INT 9
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: LIST
24087: IN
24088: IFFALSE 24108
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: LD_INT 52
24098: PPUSH
24099: CALL_OW 321
24103: PUSH
24104: LD_INT 2
24106: EQUAL
24107: AND
24108: IFFALSE 24125
// bpoints := bpoints * 1.5 ;
24110: LD_ADDR_VAR 0 10
24114: PUSH
24115: LD_VAR 0 10
24119: PUSH
24120: LD_REAL  1.50000000000000E+0000
24123: MUL
24124: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_INT 66
24132: PPUSH
24133: CALL_OW 321
24137: PUSH
24138: LD_INT 2
24140: EQUAL
24141: IFFALSE 24158
// bpoints := bpoints * 1.1 ;
24143: LD_ADDR_VAR 0 10
24147: PUSH
24148: LD_VAR 0 10
24152: PUSH
24153: LD_REAL  1.10000000000000E+0000
24156: MUL
24157: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24158: LD_ADDR_VAR 0 10
24162: PUSH
24163: LD_VAR 0 10
24167: PUSH
24168: LD_VAR 0 6
24172: PPUSH
24173: LD_INT 1
24175: PPUSH
24176: CALL_OW 259
24180: PUSH
24181: LD_REAL  1.15000000000000E+0000
24184: MUL
24185: MUL
24186: ST_TO_ADDR
// end ; unit_vehicle :
24187: GO 25017
24189: LD_INT 2
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 25005
24197: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24198: LD_VAR 0 6
24202: PPUSH
24203: CALL_OW 264
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 42
24213: PUSH
24214: LD_INT 24
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: IN
24222: IFFALSE 24243
// points := [ 25 , 5 , 3 ] ;
24224: LD_ADDR_VAR 0 9
24228: PUSH
24229: LD_INT 25
24231: PUSH
24232: LD_INT 5
24234: PUSH
24235: LD_INT 3
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24243: LD_VAR 0 6
24247: PPUSH
24248: CALL_OW 264
24252: PUSH
24253: LD_INT 4
24255: PUSH
24256: LD_INT 43
24258: PUSH
24259: LD_INT 25
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: IN
24267: IFFALSE 24288
// points := [ 40 , 15 , 5 ] ;
24269: LD_ADDR_VAR 0 9
24273: PUSH
24274: LD_INT 40
24276: PUSH
24277: LD_INT 15
24279: PUSH
24280: LD_INT 5
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24288: LD_VAR 0 6
24292: PPUSH
24293: CALL_OW 264
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: LD_INT 23
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: IN
24308: IFFALSE 24329
// points := [ 7 , 25 , 8 ] ;
24310: LD_ADDR_VAR 0 9
24314: PUSH
24315: LD_INT 7
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 8
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24329: LD_VAR 0 6
24333: PPUSH
24334: CALL_OW 264
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: LD_INT 27
24344: PUSH
24345: LD_INT 44
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: IN
24353: IFFALSE 24374
// points := [ 14 , 50 , 16 ] ;
24355: LD_ADDR_VAR 0 9
24359: PUSH
24360: LD_INT 14
24362: PUSH
24363: LD_INT 50
24365: PUSH
24366: LD_INT 16
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24374: LD_VAR 0 6
24378: PPUSH
24379: CALL_OW 264
24383: PUSH
24384: LD_INT 6
24386: PUSH
24387: LD_INT 46
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: IN
24394: IFFALSE 24415
// points := [ 32 , 120 , 70 ] ;
24396: LD_ADDR_VAR 0 9
24400: PUSH
24401: LD_INT 32
24403: PUSH
24404: LD_INT 120
24406: PUSH
24407: LD_INT 70
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24415: LD_VAR 0 6
24419: PPUSH
24420: CALL_OW 264
24424: PUSH
24425: LD_INT 7
24427: PUSH
24428: LD_INT 28
24430: PUSH
24431: LD_INT 45
24433: PUSH
24434: LD_INT 92
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: IN
24443: IFFALSE 24464
// points := [ 35 , 20 , 45 ] ;
24445: LD_ADDR_VAR 0 9
24449: PUSH
24450: LD_INT 35
24452: PUSH
24453: LD_INT 20
24455: PUSH
24456: LD_INT 45
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24464: LD_VAR 0 6
24468: PPUSH
24469: CALL_OW 264
24473: PUSH
24474: LD_INT 47
24476: PUSH
24477: EMPTY
24478: LIST
24479: IN
24480: IFFALSE 24501
// points := [ 67 , 45 , 75 ] ;
24482: LD_ADDR_VAR 0 9
24486: PUSH
24487: LD_INT 67
24489: PUSH
24490: LD_INT 45
24492: PUSH
24493: LD_INT 75
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24501: LD_VAR 0 6
24505: PPUSH
24506: CALL_OW 264
24510: PUSH
24511: LD_INT 26
24513: PUSH
24514: EMPTY
24515: LIST
24516: IN
24517: IFFALSE 24538
// points := [ 120 , 30 , 80 ] ;
24519: LD_ADDR_VAR 0 9
24523: PUSH
24524: LD_INT 120
24526: PUSH
24527: LD_INT 30
24529: PUSH
24530: LD_INT 80
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: LIST
24537: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24538: LD_VAR 0 6
24542: PPUSH
24543: CALL_OW 264
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: EMPTY
24552: LIST
24553: IN
24554: IFFALSE 24575
// points := [ 40 , 1 , 1 ] ;
24556: LD_ADDR_VAR 0 9
24560: PUSH
24561: LD_INT 40
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24575: LD_VAR 0 6
24579: PPUSH
24580: CALL_OW 264
24584: PUSH
24585: LD_INT 29
24587: PUSH
24588: EMPTY
24589: LIST
24590: IN
24591: IFFALSE 24612
// points := [ 70 , 200 , 400 ] ;
24593: LD_ADDR_VAR 0 9
24597: PUSH
24598: LD_INT 70
24600: PUSH
24601: LD_INT 200
24603: PUSH
24604: LD_INT 400
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24612: LD_VAR 0 6
24616: PPUSH
24617: CALL_OW 264
24621: PUSH
24622: LD_INT 14
24624: PUSH
24625: LD_INT 53
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: IN
24632: IFFALSE 24653
// points := [ 40 , 10 , 20 ] ;
24634: LD_ADDR_VAR 0 9
24638: PUSH
24639: LD_INT 40
24641: PUSH
24642: LD_INT 10
24644: PUSH
24645: LD_INT 20
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24653: LD_VAR 0 6
24657: PPUSH
24658: CALL_OW 264
24662: PUSH
24663: LD_INT 9
24665: PUSH
24666: EMPTY
24667: LIST
24668: IN
24669: IFFALSE 24690
// points := [ 5 , 70 , 20 ] ;
24671: LD_ADDR_VAR 0 9
24675: PUSH
24676: LD_INT 5
24678: PUSH
24679: LD_INT 70
24681: PUSH
24682: LD_INT 20
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24690: LD_VAR 0 6
24694: PPUSH
24695: CALL_OW 264
24699: PUSH
24700: LD_INT 10
24702: PUSH
24703: EMPTY
24704: LIST
24705: IN
24706: IFFALSE 24727
// points := [ 35 , 110 , 70 ] ;
24708: LD_ADDR_VAR 0 9
24712: PUSH
24713: LD_INT 35
24715: PUSH
24716: LD_INT 110
24718: PUSH
24719: LD_INT 70
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24727: LD_VAR 0 6
24731: PPUSH
24732: CALL_OW 265
24736: PUSH
24737: LD_INT 25
24739: EQUAL
24740: IFFALSE 24761
// points := [ 80 , 65 , 100 ] ;
24742: LD_ADDR_VAR 0 9
24746: PUSH
24747: LD_INT 80
24749: PUSH
24750: LD_INT 65
24752: PUSH
24753: LD_INT 100
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24761: LD_VAR 0 6
24765: PPUSH
24766: CALL_OW 263
24770: PUSH
24771: LD_INT 1
24773: EQUAL
24774: IFFALSE 24809
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24776: LD_ADDR_VAR 0 10
24780: PUSH
24781: LD_VAR 0 10
24785: PUSH
24786: LD_VAR 0 6
24790: PPUSH
24791: CALL_OW 311
24795: PPUSH
24796: LD_INT 3
24798: PPUSH
24799: CALL_OW 259
24803: PUSH
24804: LD_INT 4
24806: MUL
24807: MUL
24808: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24809: LD_VAR 0 6
24813: PPUSH
24814: CALL_OW 263
24818: PUSH
24819: LD_INT 2
24821: EQUAL
24822: IFFALSE 24873
// begin j := IsControledBy ( i ) ;
24824: LD_ADDR_VAR 0 7
24828: PUSH
24829: LD_VAR 0 6
24833: PPUSH
24834: CALL_OW 312
24838: ST_TO_ADDR
// if j then
24839: LD_VAR 0 7
24843: IFFALSE 24873
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24845: LD_ADDR_VAR 0 10
24849: PUSH
24850: LD_VAR 0 10
24854: PUSH
24855: LD_VAR 0 7
24859: PPUSH
24860: LD_INT 3
24862: PPUSH
24863: CALL_OW 259
24867: PUSH
24868: LD_INT 3
24870: MUL
24871: MUL
24872: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24873: LD_VAR 0 6
24877: PPUSH
24878: CALL_OW 264
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: LD_INT 6
24888: PUSH
24889: LD_INT 46
24891: PUSH
24892: LD_INT 44
24894: PUSH
24895: LD_INT 47
24897: PUSH
24898: LD_INT 45
24900: PUSH
24901: LD_INT 28
24903: PUSH
24904: LD_INT 7
24906: PUSH
24907: LD_INT 27
24909: PUSH
24910: LD_INT 29
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: IN
24925: IFFALSE 24945
24927: PUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: LD_INT 52
24935: PPUSH
24936: CALL_OW 321
24940: PUSH
24941: LD_INT 2
24943: EQUAL
24944: AND
24945: IFFALSE 24962
// bpoints := bpoints * 1.2 ;
24947: LD_ADDR_VAR 0 10
24951: PUSH
24952: LD_VAR 0 10
24956: PUSH
24957: LD_REAL  1.20000000000000E+0000
24960: MUL
24961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24962: LD_VAR 0 6
24966: PPUSH
24967: CALL_OW 264
24971: PUSH
24972: LD_INT 6
24974: PUSH
24975: LD_INT 46
24977: PUSH
24978: LD_INT 47
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: IN
24986: IFFALSE 25003
// bpoints := bpoints * 1.2 ;
24988: LD_ADDR_VAR 0 10
24992: PUSH
24993: LD_VAR 0 10
24997: PUSH
24998: LD_REAL  1.20000000000000E+0000
25001: MUL
25002: ST_TO_ADDR
// end ; unit_building :
25003: GO 25017
25005: LD_INT 3
25007: DOUBLE
25008: EQUAL
25009: IFTRUE 25013
25011: GO 25016
25013: POP
// ; end ;
25014: GO 25017
25016: POP
// for j = 1 to 3 do
25017: LD_ADDR_VAR 0 7
25021: PUSH
25022: DOUBLE
25023: LD_INT 1
25025: DEC
25026: ST_TO_ADDR
25027: LD_INT 3
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25084
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25033: LD_ADDR_VAR 0 5
25037: PUSH
25038: LD_VAR 0 5
25042: PPUSH
25043: LD_VAR 0 7
25047: PPUSH
25048: LD_VAR 0 5
25052: PUSH
25053: LD_VAR 0 7
25057: ARRAY
25058: PUSH
25059: LD_VAR 0 9
25063: PUSH
25064: LD_VAR 0 7
25068: ARRAY
25069: PUSH
25070: LD_VAR 0 10
25074: MUL
25075: PLUS
25076: PPUSH
25077: CALL_OW 1
25081: ST_TO_ADDR
25082: GO 25030
25084: POP
25085: POP
// end ;
25086: GO 23559
25088: POP
25089: POP
// result := Replace ( result , 4 , tmp ) ;
25090: LD_ADDR_VAR 0 5
25094: PUSH
25095: LD_VAR 0 5
25099: PPUSH
25100: LD_INT 4
25102: PPUSH
25103: LD_VAR 0 8
25107: PPUSH
25108: CALL_OW 1
25112: ST_TO_ADDR
// end ;
25113: LD_VAR 0 5
25117: RET
// export function DangerAtRange ( unit , range ) ; begin
25118: LD_INT 0
25120: PPUSH
// if not unit then
25121: LD_VAR 0 1
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25175
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25130: LD_ADDR_VAR 0 3
25134: PUSH
25135: LD_VAR 0 1
25139: PPUSH
25140: CALL_OW 255
25144: PPUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 250
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 251
25164: PPUSH
25165: LD_VAR 0 2
25169: PPUSH
25170: CALL 23409 0 4
25174: ST_TO_ADDR
// end ;
25175: LD_VAR 0 3
25179: RET
// export function DangerInArea ( side , area ) ; begin
25180: LD_INT 0
25182: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25183: LD_ADDR_VAR 0 3
25187: PUSH
25188: LD_VAR 0 2
25192: PPUSH
25193: LD_INT 81
25195: PUSH
25196: LD_VAR 0 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PPUSH
25205: CALL_OW 70
25209: ST_TO_ADDR
// end ;
25210: LD_VAR 0 3
25214: RET
// export function IsExtension ( b ) ; begin
25215: LD_INT 0
25217: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25218: LD_ADDR_VAR 0 2
25222: PUSH
25223: LD_VAR 0 1
25227: PUSH
25228: LD_INT 23
25230: PUSH
25231: LD_INT 20
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_INT 17
25239: PUSH
25240: LD_INT 24
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 19
25248: PUSH
25249: LD_INT 16
25251: PUSH
25252: LD_INT 25
25254: PUSH
25255: LD_INT 18
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: IN
25270: ST_TO_ADDR
// end ;
25271: LD_VAR 0 2
25275: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25276: LD_INT 0
25278: PPUSH
25279: PPUSH
25280: PPUSH
// result := [ ] ;
25281: LD_ADDR_VAR 0 4
25285: PUSH
25286: EMPTY
25287: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25288: LD_ADDR_VAR 0 5
25292: PUSH
25293: LD_VAR 0 2
25297: PPUSH
25298: LD_INT 21
25300: PUSH
25301: LD_INT 3
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PPUSH
25308: CALL_OW 70
25312: ST_TO_ADDR
// if not tmp then
25313: LD_VAR 0 5
25317: NOT
25318: IFFALSE 25322
// exit ;
25320: GO 25386
// if checkLink then
25322: LD_VAR 0 3
25326: IFFALSE 25376
// begin for i in tmp do
25328: LD_ADDR_VAR 0 6
25332: PUSH
25333: LD_VAR 0 5
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25374
// if GetBase ( i ) <> base then
25341: LD_VAR 0 6
25345: PPUSH
25346: CALL_OW 274
25350: PUSH
25351: LD_VAR 0 1
25355: NONEQUAL
25356: IFFALSE 25372
// ComLinkToBase ( base , i ) ;
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_VAR 0 6
25367: PPUSH
25368: CALL_OW 169
25372: GO 25338
25374: POP
25375: POP
// end ; result := tmp ;
25376: LD_ADDR_VAR 0 4
25380: PUSH
25381: LD_VAR 0 5
25385: ST_TO_ADDR
// end ;
25386: LD_VAR 0 4
25390: RET
// export function ComComplete ( units , b ) ; var i ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
// if not units then
25395: LD_VAR 0 1
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25494
// for i in units do
25404: LD_ADDR_VAR 0 4
25408: PUSH
25409: LD_VAR 0 1
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25492
// if BuildingStatus ( b ) = bs_build then
25417: LD_VAR 0 2
25421: PPUSH
25422: CALL_OW 461
25426: PUSH
25427: LD_INT 1
25429: EQUAL
25430: IFFALSE 25490
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25432: LD_VAR 0 4
25436: PPUSH
25437: LD_STRING h
25439: PUSH
25440: LD_VAR 0 2
25444: PPUSH
25445: CALL_OW 250
25449: PUSH
25450: LD_VAR 0 2
25454: PPUSH
25455: CALL_OW 251
25459: PUSH
25460: LD_VAR 0 2
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: PPUSH
25486: CALL_OW 446
25490: GO 25414
25492: POP
25493: POP
// end ;
25494: LD_VAR 0 3
25498: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25507: LD_VAR 0 1
25511: NOT
25512: IFTRUE 25529
25514: PUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 263
25524: PUSH
25525: LD_INT 2
25527: NONEQUAL
25528: OR
25529: IFFALSE 25533
// exit ;
25531: GO 25849
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25533: LD_ADDR_VAR 0 6
25537: PUSH
25538: LD_INT 22
25540: PUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 255
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 30
25560: PUSH
25561: LD_INT 36
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 34
25570: PUSH
25571: LD_INT 31
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PPUSH
25587: CALL_OW 69
25591: ST_TO_ADDR
// if not tmp then
25592: LD_VAR 0 6
25596: NOT
25597: IFFALSE 25601
// exit ;
25599: GO 25849
// result := [ ] ;
25601: LD_ADDR_VAR 0 2
25605: PUSH
25606: EMPTY
25607: ST_TO_ADDR
// for i in tmp do
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_VAR 0 6
25617: PUSH
25618: FOR_IN
25619: IFFALSE 25690
// begin t := UnitsInside ( i ) ;
25621: LD_ADDR_VAR 0 4
25625: PUSH
25626: LD_VAR 0 3
25630: PPUSH
25631: CALL_OW 313
25635: ST_TO_ADDR
// if t then
25636: LD_VAR 0 4
25640: IFFALSE 25688
// for j in t do
25642: LD_ADDR_VAR 0 7
25646: PUSH
25647: LD_VAR 0 4
25651: PUSH
25652: FOR_IN
25653: IFFALSE 25686
// result := Replace ( result , result + 1 , j ) ;
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 2
25664: PPUSH
25665: LD_VAR 0 2
25669: PUSH
25670: LD_INT 1
25672: PLUS
25673: PPUSH
25674: LD_VAR 0 7
25678: PPUSH
25679: CALL_OW 1
25683: ST_TO_ADDR
25684: GO 25652
25686: POP
25687: POP
// end ;
25688: GO 25618
25690: POP
25691: POP
// if not result then
25692: LD_VAR 0 2
25696: NOT
25697: IFFALSE 25701
// exit ;
25699: GO 25849
// mech := result [ 1 ] ;
25701: LD_ADDR_VAR 0 5
25705: PUSH
25706: LD_VAR 0 2
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: ST_TO_ADDR
// if result > 1 then
25715: LD_VAR 0 2
25719: PUSH
25720: LD_INT 1
25722: GREATER
25723: IFFALSE 25835
// begin for i = 2 to result do
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: DOUBLE
25731: LD_INT 2
25733: DEC
25734: ST_TO_ADDR
25735: LD_VAR 0 2
25739: PUSH
25740: FOR_TO
25741: IFFALSE 25833
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25743: LD_ADDR_VAR 0 4
25747: PUSH
25748: LD_VAR 0 2
25752: PUSH
25753: LD_VAR 0 3
25757: ARRAY
25758: PPUSH
25759: LD_INT 3
25761: PPUSH
25762: CALL_OW 259
25766: PUSH
25767: LD_VAR 0 2
25771: PUSH
25772: LD_VAR 0 3
25776: ARRAY
25777: PPUSH
25778: CALL_OW 432
25782: MINUS
25783: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25784: LD_VAR 0 4
25788: PUSH
25789: LD_VAR 0 5
25793: PPUSH
25794: LD_INT 3
25796: PPUSH
25797: CALL_OW 259
25801: PUSH
25802: LD_VAR 0 5
25806: PPUSH
25807: CALL_OW 432
25811: MINUS
25812: GREATEREQUAL
25813: IFFALSE 25831
// mech := result [ i ] ;
25815: LD_ADDR_VAR 0 5
25819: PUSH
25820: LD_VAR 0 2
25824: PUSH
25825: LD_VAR 0 3
25829: ARRAY
25830: ST_TO_ADDR
// end ;
25831: GO 25740
25833: POP
25834: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25835: LD_VAR 0 1
25839: PPUSH
25840: LD_VAR 0 5
25844: PPUSH
25845: CALL_OW 135
// end ;
25849: LD_VAR 0 2
25853: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
// result := [ ] ;
25869: LD_ADDR_VAR 0 7
25873: PUSH
25874: EMPTY
25875: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25876: LD_VAR 0 1
25880: PPUSH
25881: CALL_OW 266
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: IN
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 27541
// if name then
25901: LD_VAR 0 3
25905: IFFALSE 25921
// SetBName ( base_dep , name ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_VAR 0 3
25916: PPUSH
25917: CALL_OW 500
// base := GetBase ( base_dep ) ;
25921: LD_ADDR_VAR 0 15
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 274
25935: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25936: LD_ADDR_VAR 0 16
25940: PUSH
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 255
25950: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25951: LD_ADDR_VAR 0 17
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 248
25965: ST_TO_ADDR
// if sources then
25966: LD_VAR 0 5
25970: IFFALSE 26017
// for i = 1 to 3 do
25972: LD_ADDR_VAR 0 8
25976: PUSH
25977: DOUBLE
25978: LD_INT 1
25980: DEC
25981: ST_TO_ADDR
25982: LD_INT 3
25984: PUSH
25985: FOR_TO
25986: IFFALSE 26015
// AddResourceType ( base , i , sources [ i ] ) ;
25988: LD_VAR 0 15
25992: PPUSH
25993: LD_VAR 0 8
25997: PPUSH
25998: LD_VAR 0 5
26002: PUSH
26003: LD_VAR 0 8
26007: ARRAY
26008: PPUSH
26009: CALL_OW 276
26013: GO 25985
26015: POP
26016: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26017: LD_ADDR_VAR 0 18
26021: PUSH
26022: LD_VAR 0 15
26026: PPUSH
26027: LD_VAR 0 2
26031: PPUSH
26032: LD_INT 1
26034: PPUSH
26035: CALL 25276 0 3
26039: ST_TO_ADDR
// InitHc ;
26040: CALL_OW 19
// InitUc ;
26044: CALL_OW 18
// uc_side := side ;
26048: LD_ADDR_OWVAR 20
26052: PUSH
26053: LD_VAR 0 16
26057: ST_TO_ADDR
// uc_nation := nation ;
26058: LD_ADDR_OWVAR 21
26062: PUSH
26063: LD_VAR 0 17
26067: ST_TO_ADDR
// if buildings then
26068: LD_VAR 0 18
26072: IFFALSE 27400
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26074: LD_ADDR_VAR 0 19
26078: PUSH
26079: LD_VAR 0 18
26083: PPUSH
26084: LD_INT 2
26086: PUSH
26087: LD_INT 30
26089: PUSH
26090: LD_INT 29
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 30
26099: PUSH
26100: LD_INT 30
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 72
26116: ST_TO_ADDR
// if tmp then
26117: LD_VAR 0 19
26121: IFFALSE 26169
// for i in tmp do
26123: LD_ADDR_VAR 0 8
26127: PUSH
26128: LD_VAR 0 19
26132: PUSH
26133: FOR_IN
26134: IFFALSE 26167
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26136: LD_VAR 0 8
26140: PPUSH
26141: CALL_OW 250
26145: PPUSH
26146: LD_VAR 0 8
26150: PPUSH
26151: CALL_OW 251
26155: PPUSH
26156: LD_VAR 0 16
26160: PPUSH
26161: CALL_OW 441
26165: GO 26133
26167: POP
26168: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26169: LD_VAR 0 18
26173: PPUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 30
26179: PUSH
26180: LD_INT 32
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 30
26189: PUSH
26190: LD_INT 33
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: PPUSH
26202: CALL_OW 72
26206: IFFALSE 26294
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26208: LD_ADDR_VAR 0 8
26212: PUSH
26213: LD_VAR 0 18
26217: PPUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 30
26223: PUSH
26224: LD_INT 32
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 30
26233: PUSH
26234: LD_INT 33
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: PPUSH
26246: CALL_OW 72
26250: PUSH
26251: FOR_IN
26252: IFFALSE 26292
// begin if not GetBWeapon ( i ) then
26254: LD_VAR 0 8
26258: PPUSH
26259: CALL_OW 269
26263: NOT
26264: IFFALSE 26290
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26266: LD_VAR 0 8
26270: PPUSH
26271: LD_VAR 0 8
26275: PPUSH
26276: LD_VAR 0 2
26280: PPUSH
26281: CALL 27546 0 2
26285: PPUSH
26286: CALL_OW 431
// end ;
26290: GO 26251
26292: POP
26293: POP
// end ; for i = 1 to personel do
26294: LD_ADDR_VAR 0 8
26298: PUSH
26299: DOUBLE
26300: LD_INT 1
26302: DEC
26303: ST_TO_ADDR
26304: LD_VAR 0 6
26308: PUSH
26309: FOR_TO
26310: IFFALSE 27380
// begin if i > 4 then
26312: LD_VAR 0 8
26316: PUSH
26317: LD_INT 4
26319: GREATER
26320: IFFALSE 26324
// break ;
26322: GO 27380
// case i of 1 :
26324: LD_VAR 0 8
26328: PUSH
26329: LD_INT 1
26331: DOUBLE
26332: EQUAL
26333: IFTRUE 26337
26335: GO 26417
26337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26338: LD_ADDR_VAR 0 12
26342: PUSH
26343: LD_VAR 0 18
26347: PPUSH
26348: LD_INT 22
26350: PUSH
26351: LD_VAR 0 16
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 58
26362: PUSH
26363: EMPTY
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 30
26371: PUSH
26372: LD_INT 32
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 30
26381: PUSH
26382: LD_INT 4
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 30
26391: PUSH
26392: LD_INT 5
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 72
26414: ST_TO_ADDR
26415: GO 26639
26417: LD_INT 2
26419: DOUBLE
26420: EQUAL
26421: IFTRUE 26425
26423: GO 26487
26425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26426: LD_ADDR_VAR 0 12
26430: PUSH
26431: LD_VAR 0 18
26435: PPUSH
26436: LD_INT 22
26438: PUSH
26439: LD_VAR 0 16
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 72
26484: ST_TO_ADDR
26485: GO 26639
26487: LD_INT 3
26489: DOUBLE
26490: EQUAL
26491: IFTRUE 26495
26493: GO 26557
26495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26496: LD_ADDR_VAR 0 12
26500: PUSH
26501: LD_VAR 0 18
26505: PPUSH
26506: LD_INT 22
26508: PUSH
26509: LD_VAR 0 16
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: LD_INT 30
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 30
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PPUSH
26550: CALL_OW 72
26554: ST_TO_ADDR
26555: GO 26639
26557: LD_INT 4
26559: DOUBLE
26560: EQUAL
26561: IFTRUE 26565
26563: GO 26638
26565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26566: LD_ADDR_VAR 0 12
26570: PUSH
26571: LD_VAR 0 18
26575: PPUSH
26576: LD_INT 22
26578: PUSH
26579: LD_VAR 0 16
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 30
26593: PUSH
26594: LD_INT 6
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 30
26603: PUSH
26604: LD_INT 7
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 30
26613: PUSH
26614: LD_INT 8
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 72
26635: ST_TO_ADDR
26636: GO 26639
26638: POP
// if i = 1 then
26639: LD_VAR 0 8
26643: PUSH
26644: LD_INT 1
26646: EQUAL
26647: IFFALSE 26758
// begin tmp := [ ] ;
26649: LD_ADDR_VAR 0 19
26653: PUSH
26654: EMPTY
26655: ST_TO_ADDR
// for j in f do
26656: LD_ADDR_VAR 0 9
26660: PUSH
26661: LD_VAR 0 12
26665: PUSH
26666: FOR_IN
26667: IFFALSE 26740
// if GetBType ( j ) = b_bunker then
26669: LD_VAR 0 9
26673: PPUSH
26674: CALL_OW 266
26678: PUSH
26679: LD_INT 32
26681: EQUAL
26682: IFFALSE 26709
// tmp := Insert ( tmp , 1 , j ) else
26684: LD_ADDR_VAR 0 19
26688: PUSH
26689: LD_VAR 0 19
26693: PPUSH
26694: LD_INT 1
26696: PPUSH
26697: LD_VAR 0 9
26701: PPUSH
26702: CALL_OW 2
26706: ST_TO_ADDR
26707: GO 26738
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26709: LD_ADDR_VAR 0 19
26713: PUSH
26714: LD_VAR 0 19
26718: PPUSH
26719: LD_VAR 0 19
26723: PUSH
26724: LD_INT 1
26726: PLUS
26727: PPUSH
26728: LD_VAR 0 9
26732: PPUSH
26733: CALL_OW 2
26737: ST_TO_ADDR
26738: GO 26666
26740: POP
26741: POP
// if tmp then
26742: LD_VAR 0 19
26746: IFFALSE 26758
// f := tmp ;
26748: LD_ADDR_VAR 0 12
26752: PUSH
26753: LD_VAR 0 19
26757: ST_TO_ADDR
// end ; x := personel [ i ] ;
26758: LD_ADDR_VAR 0 13
26762: PUSH
26763: LD_VAR 0 6
26767: PUSH
26768: LD_VAR 0 8
26772: ARRAY
26773: ST_TO_ADDR
// if x = - 1 then
26774: LD_VAR 0 13
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: EQUAL
26783: IFFALSE 26994
// begin for j in f do
26785: LD_ADDR_VAR 0 9
26789: PUSH
26790: LD_VAR 0 12
26794: PUSH
26795: FOR_IN
26796: IFFALSE 26990
// repeat InitHc ;
26798: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26802: LD_VAR 0 9
26806: PPUSH
26807: CALL_OW 266
26811: PUSH
26812: LD_INT 5
26814: EQUAL
26815: IFFALSE 26885
// begin if UnitsInside ( j ) < 3 then
26817: LD_VAR 0 9
26821: PPUSH
26822: CALL_OW 313
26826: PUSH
26827: LD_INT 3
26829: LESS
26830: IFFALSE 26866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26832: LD_INT 0
26834: PPUSH
26835: LD_INT 5
26837: PUSH
26838: LD_INT 8
26840: PUSH
26841: LD_INT 9
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: PUSH
26849: LD_VAR 0 17
26853: ARRAY
26854: PPUSH
26855: LD_VAR 0 4
26859: PPUSH
26860: CALL_OW 380
26864: GO 26883
// PrepareHuman ( false , i , skill ) ;
26866: LD_INT 0
26868: PPUSH
26869: LD_VAR 0 8
26873: PPUSH
26874: LD_VAR 0 4
26878: PPUSH
26879: CALL_OW 380
// end else
26883: GO 26902
// PrepareHuman ( false , i , skill ) ;
26885: LD_INT 0
26887: PPUSH
26888: LD_VAR 0 8
26892: PPUSH
26893: LD_VAR 0 4
26897: PPUSH
26898: CALL_OW 380
// un := CreateHuman ;
26902: LD_ADDR_VAR 0 14
26906: PUSH
26907: CALL_OW 44
26911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26912: LD_ADDR_VAR 0 7
26916: PUSH
26917: LD_VAR 0 7
26921: PPUSH
26922: LD_INT 1
26924: PPUSH
26925: LD_VAR 0 14
26929: PPUSH
26930: CALL_OW 2
26934: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26935: LD_VAR 0 14
26939: PPUSH
26940: LD_VAR 0 9
26944: PPUSH
26945: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26949: LD_VAR 0 9
26953: PPUSH
26954: CALL_OW 313
26958: PUSH
26959: LD_INT 6
26961: EQUAL
26962: IFTRUE 26986
26964: PUSH
26965: LD_VAR 0 9
26969: PPUSH
26970: CALL_OW 266
26974: PUSH
26975: LD_INT 32
26977: PUSH
26978: LD_INT 31
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: IN
26985: OR
26986: IFFALSE 26798
26988: GO 26795
26990: POP
26991: POP
// end else
26992: GO 27378
// for j = 1 to x do
26994: LD_ADDR_VAR 0 9
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_VAR 0 13
27008: PUSH
27009: FOR_TO
27010: IFFALSE 27376
// begin InitHc ;
27012: CALL_OW 19
// if not f then
27016: LD_VAR 0 12
27020: NOT
27021: IFFALSE 27110
// begin PrepareHuman ( false , i , skill ) ;
27023: LD_INT 0
27025: PPUSH
27026: LD_VAR 0 8
27030: PPUSH
27031: LD_VAR 0 4
27035: PPUSH
27036: CALL_OW 380
// un := CreateHuman ;
27040: LD_ADDR_VAR 0 14
27044: PUSH
27045: CALL_OW 44
27049: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27050: LD_ADDR_VAR 0 7
27054: PUSH
27055: LD_VAR 0 7
27059: PPUSH
27060: LD_INT 1
27062: PPUSH
27063: LD_VAR 0 14
27067: PPUSH
27068: CALL_OW 2
27072: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27073: LD_VAR 0 14
27077: PPUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 250
27087: PPUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 251
27097: PPUSH
27098: LD_INT 10
27100: PPUSH
27101: LD_INT 0
27103: PPUSH
27104: CALL_OW 50
// continue ;
27108: GO 27009
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27110: LD_VAR 0 12
27114: PUSH
27115: LD_INT 1
27117: ARRAY
27118: PPUSH
27119: CALL_OW 313
27123: IFFALSE 27151
27125: PUSH
27126: LD_VAR 0 12
27130: PUSH
27131: LD_INT 1
27133: ARRAY
27134: PPUSH
27135: CALL_OW 266
27139: PUSH
27140: LD_INT 32
27142: PUSH
27143: LD_INT 31
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: IN
27150: AND
27151: IFTRUE 27172
27153: PUSH
27154: LD_VAR 0 12
27158: PUSH
27159: LD_INT 1
27161: ARRAY
27162: PPUSH
27163: CALL_OW 313
27167: PUSH
27168: LD_INT 6
27170: EQUAL
27171: OR
27172: IFFALSE 27192
// f := Delete ( f , 1 ) ;
27174: LD_ADDR_VAR 0 12
27178: PUSH
27179: LD_VAR 0 12
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: CALL_OW 3
27191: ST_TO_ADDR
// if not f then
27192: LD_VAR 0 12
27196: NOT
27197: IFFALSE 27215
// begin x := x + 2 ;
27199: LD_ADDR_VAR 0 13
27203: PUSH
27204: LD_VAR 0 13
27208: PUSH
27209: LD_INT 2
27211: PLUS
27212: ST_TO_ADDR
// continue ;
27213: GO 27009
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27215: LD_VAR 0 12
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PPUSH
27224: CALL_OW 266
27228: PUSH
27229: LD_INT 5
27231: EQUAL
27232: IFFALSE 27306
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27234: LD_VAR 0 12
27238: PUSH
27239: LD_INT 1
27241: ARRAY
27242: PPUSH
27243: CALL_OW 313
27247: PUSH
27248: LD_INT 3
27250: LESS
27251: IFFALSE 27287
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27253: LD_INT 0
27255: PPUSH
27256: LD_INT 5
27258: PUSH
27259: LD_INT 8
27261: PUSH
27262: LD_INT 9
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: PUSH
27270: LD_VAR 0 17
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 4
27280: PPUSH
27281: CALL_OW 380
27285: GO 27304
// PrepareHuman ( false , i , skill ) ;
27287: LD_INT 0
27289: PPUSH
27290: LD_VAR 0 8
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: CALL_OW 380
// end else
27304: GO 27323
// PrepareHuman ( false , i , skill ) ;
27306: LD_INT 0
27308: PPUSH
27309: LD_VAR 0 8
27313: PPUSH
27314: LD_VAR 0 4
27318: PPUSH
27319: CALL_OW 380
// un := CreateHuman ;
27323: LD_ADDR_VAR 0 14
27327: PUSH
27328: CALL_OW 44
27332: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27333: LD_ADDR_VAR 0 7
27337: PUSH
27338: LD_VAR 0 7
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: LD_VAR 0 14
27350: PPUSH
27351: CALL_OW 2
27355: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27356: LD_VAR 0 14
27360: PPUSH
27361: LD_VAR 0 12
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PPUSH
27370: CALL_OW 52
// end ;
27374: GO 27009
27376: POP
27377: POP
// end ;
27378: GO 26309
27380: POP
27381: POP
// result := result ^ buildings ;
27382: LD_ADDR_VAR 0 7
27386: PUSH
27387: LD_VAR 0 7
27391: PUSH
27392: LD_VAR 0 18
27396: ADD
27397: ST_TO_ADDR
// end else
27398: GO 27541
// begin for i = 1 to personel do
27400: LD_ADDR_VAR 0 8
27404: PUSH
27405: DOUBLE
27406: LD_INT 1
27408: DEC
27409: ST_TO_ADDR
27410: LD_VAR 0 6
27414: PUSH
27415: FOR_TO
27416: IFFALSE 27539
// begin if i > 4 then
27418: LD_VAR 0 8
27422: PUSH
27423: LD_INT 4
27425: GREATER
27426: IFFALSE 27430
// break ;
27428: GO 27539
// x := personel [ i ] ;
27430: LD_ADDR_VAR 0 13
27434: PUSH
27435: LD_VAR 0 6
27439: PUSH
27440: LD_VAR 0 8
27444: ARRAY
27445: ST_TO_ADDR
// if x = - 1 then
27446: LD_VAR 0 13
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: EQUAL
27455: IFFALSE 27459
// continue ;
27457: GO 27415
// PrepareHuman ( false , i , skill ) ;
27459: LD_INT 0
27461: PPUSH
27462: LD_VAR 0 8
27466: PPUSH
27467: LD_VAR 0 4
27471: PPUSH
27472: CALL_OW 380
// un := CreateHuman ;
27476: LD_ADDR_VAR 0 14
27480: PUSH
27481: CALL_OW 44
27485: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27486: LD_VAR 0 14
27490: PPUSH
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL_OW 250
27500: PPUSH
27501: LD_VAR 0 1
27505: PPUSH
27506: CALL_OW 251
27510: PPUSH
27511: LD_INT 10
27513: PPUSH
27514: LD_INT 0
27516: PPUSH
27517: CALL_OW 50
// result := result ^ un ;
27521: LD_ADDR_VAR 0 7
27525: PUSH
27526: LD_VAR 0 7
27530: PUSH
27531: LD_VAR 0 14
27535: ADD
27536: ST_TO_ADDR
// end ;
27537: GO 27415
27539: POP
27540: POP
// end ; end ;
27541: LD_VAR 0 7
27545: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
// result := false ;
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27572: LD_VAR 0 1
27576: NOT
27577: IFTRUE 27602
27579: PUSH
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 266
27589: PUSH
27590: LD_INT 32
27592: PUSH
27593: LD_INT 33
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: IN
27600: NOT
27601: OR
27602: IFFALSE 27606
// exit ;
27604: GO 28741
// nat := GetNation ( tower ) ;
27606: LD_ADDR_VAR 0 12
27610: PUSH
27611: LD_VAR 0 1
27615: PPUSH
27616: CALL_OW 248
27620: ST_TO_ADDR
// side := GetSide ( tower ) ;
27621: LD_ADDR_VAR 0 16
27625: PUSH
27626: LD_VAR 0 1
27630: PPUSH
27631: CALL_OW 255
27635: ST_TO_ADDR
// x := GetX ( tower ) ;
27636: LD_ADDR_VAR 0 10
27640: PUSH
27641: LD_VAR 0 1
27645: PPUSH
27646: CALL_OW 250
27650: ST_TO_ADDR
// y := GetY ( tower ) ;
27651: LD_ADDR_VAR 0 11
27655: PUSH
27656: LD_VAR 0 1
27660: PPUSH
27661: CALL_OW 251
27665: ST_TO_ADDR
// if not x or not y then
27666: LD_VAR 0 10
27670: NOT
27671: IFTRUE 27680
27673: PUSH
27674: LD_VAR 0 11
27678: NOT
27679: OR
27680: IFFALSE 27684
// exit ;
27682: GO 28741
// weapon := 0 ;
27684: LD_ADDR_VAR 0 18
27688: PUSH
27689: LD_INT 0
27691: ST_TO_ADDR
// fac_list := [ ] ;
27692: LD_ADDR_VAR 0 17
27696: PUSH
27697: EMPTY
27698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27699: LD_ADDR_VAR 0 6
27703: PUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 274
27713: PPUSH
27714: LD_VAR 0 2
27718: PPUSH
27719: LD_INT 0
27721: PPUSH
27722: CALL 25276 0 3
27726: PPUSH
27727: LD_INT 30
27729: PUSH
27730: LD_INT 3
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PPUSH
27737: CALL_OW 72
27741: ST_TO_ADDR
// if not factories then
27742: LD_VAR 0 6
27746: NOT
27747: IFFALSE 27751
// exit ;
27749: GO 28741
// for i in factories do
27751: LD_ADDR_VAR 0 8
27755: PUSH
27756: LD_VAR 0 6
27760: PUSH
27761: FOR_IN
27762: IFFALSE 27787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27764: LD_ADDR_VAR 0 17
27768: PUSH
27769: LD_VAR 0 17
27773: PUSH
27774: LD_VAR 0 8
27778: PPUSH
27779: CALL_OW 478
27783: UNION
27784: ST_TO_ADDR
27785: GO 27761
27787: POP
27788: POP
// if not fac_list then
27789: LD_VAR 0 17
27793: NOT
27794: IFFALSE 27798
// exit ;
27796: GO 28741
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27798: LD_ADDR_VAR 0 5
27802: PUSH
27803: LD_INT 4
27805: PUSH
27806: LD_INT 5
27808: PUSH
27809: LD_INT 9
27811: PUSH
27812: LD_INT 10
27814: PUSH
27815: LD_INT 6
27817: PUSH
27818: LD_INT 7
27820: PUSH
27821: LD_INT 11
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 27
27835: PUSH
27836: LD_INT 28
27838: PUSH
27839: LD_INT 26
27841: PUSH
27842: LD_INT 30
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 43
27853: PUSH
27854: LD_INT 44
27856: PUSH
27857: LD_INT 46
27859: PUSH
27860: LD_INT 45
27862: PUSH
27863: LD_INT 47
27865: PUSH
27866: LD_INT 49
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: PUSH
27882: LD_VAR 0 12
27886: ARRAY
27887: ST_TO_ADDR
// list := list isect fac_list ;
27888: LD_ADDR_VAR 0 5
27892: PUSH
27893: LD_VAR 0 5
27897: PUSH
27898: LD_VAR 0 17
27902: ISECT
27903: ST_TO_ADDR
// if not list then
27904: LD_VAR 0 5
27908: NOT
27909: IFFALSE 27913
// exit ;
27911: GO 28741
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27913: LD_VAR 0 12
27917: PUSH
27918: LD_INT 3
27920: EQUAL
27921: IFFALSE 27933
27923: PUSH
27924: LD_INT 49
27926: PUSH
27927: LD_VAR 0 5
27931: IN
27932: AND
27933: IFFALSE 27953
27935: PUSH
27936: LD_INT 31
27938: PPUSH
27939: LD_VAR 0 16
27943: PPUSH
27944: CALL_OW 321
27948: PUSH
27949: LD_INT 2
27951: EQUAL
27952: AND
27953: IFFALSE 28013
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27955: LD_INT 22
27957: PUSH
27958: LD_VAR 0 16
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 35
27969: PUSH
27970: LD_INT 49
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 91
27979: PUSH
27980: LD_VAR 0 1
27984: PUSH
27985: LD_INT 10
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 69
28002: NOT
28003: IFFALSE 28013
// weapon := ru_time_lapser ;
28005: LD_ADDR_VAR 0 18
28009: PUSH
28010: LD_INT 49
28012: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28013: LD_VAR 0 12
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: IN
28028: IFFALSE 28052
28030: PUSH
28031: LD_INT 11
28033: PUSH
28034: LD_VAR 0 5
28038: IN
28039: IFTRUE 28051
28041: PUSH
28042: LD_INT 30
28044: PUSH
28045: LD_VAR 0 5
28049: IN
28050: OR
28051: AND
28052: IFFALSE 28072
28054: PUSH
28055: LD_INT 6
28057: PPUSH
28058: LD_VAR 0 16
28062: PPUSH
28063: CALL_OW 321
28067: PUSH
28068: LD_INT 2
28070: EQUAL
28071: AND
28072: IFFALSE 28239
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28074: LD_INT 22
28076: PUSH
28077: LD_VAR 0 16
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 35
28091: PUSH
28092: LD_INT 11
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 35
28101: PUSH
28102: LD_INT 30
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 91
28116: PUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_INT 18
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL_OW 69
28139: NOT
28140: IFFALSE 28216
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_VAR 0 16
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: LD_INT 30
28160: PUSH
28161: LD_INT 32
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 30
28170: PUSH
28171: LD_INT 33
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 91
28185: PUSH
28186: LD_VAR 0 1
28190: PUSH
28191: LD_INT 12
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: PUSH
28212: LD_INT 2
28214: GREATER
28215: AND
28216: IFFALSE 28239
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28218: LD_ADDR_VAR 0 18
28222: PUSH
28223: LD_INT 11
28225: PUSH
28226: LD_INT 30
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_VAR 0 12
28237: ARRAY
28238: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28239: LD_VAR 0 18
28243: NOT
28244: IFFALSE 28264
28246: PUSH
28247: LD_INT 40
28249: PPUSH
28250: LD_VAR 0 16
28254: PPUSH
28255: CALL_OW 321
28259: PUSH
28260: LD_INT 2
28262: EQUAL
28263: AND
28264: IFFALSE 28300
28266: PUSH
28267: LD_INT 7
28269: PUSH
28270: LD_VAR 0 5
28274: IN
28275: IFTRUE 28287
28277: PUSH
28278: LD_INT 28
28280: PUSH
28281: LD_VAR 0 5
28285: IN
28286: OR
28287: IFTRUE 28299
28289: PUSH
28290: LD_INT 45
28292: PUSH
28293: LD_VAR 0 5
28297: IN
28298: OR
28299: AND
28300: IFFALSE 28554
// begin hex := GetHexInfo ( x , y ) ;
28302: LD_ADDR_VAR 0 4
28306: PUSH
28307: LD_VAR 0 10
28311: PPUSH
28312: LD_VAR 0 11
28316: PPUSH
28317: CALL_OW 546
28321: ST_TO_ADDR
// if hex [ 1 ] then
28322: LD_VAR 0 4
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: IFFALSE 28334
// exit ;
28332: GO 28741
// height := hex [ 2 ] ;
28334: LD_ADDR_VAR 0 15
28338: PUSH
28339: LD_VAR 0 4
28343: PUSH
28344: LD_INT 2
28346: ARRAY
28347: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28348: LD_ADDR_VAR 0 14
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 5
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: ST_TO_ADDR
// for i in tmp do
28371: LD_ADDR_VAR 0 8
28375: PUSH
28376: LD_VAR 0 14
28380: PUSH
28381: FOR_IN
28382: IFFALSE 28552
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28384: LD_ADDR_VAR 0 9
28388: PUSH
28389: LD_VAR 0 10
28393: PPUSH
28394: LD_VAR 0 8
28398: PPUSH
28399: LD_INT 5
28401: PPUSH
28402: CALL_OW 272
28406: PUSH
28407: LD_VAR 0 11
28411: PPUSH
28412: LD_VAR 0 8
28416: PPUSH
28417: LD_INT 5
28419: PPUSH
28420: CALL_OW 273
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28429: LD_VAR 0 9
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: LD_VAR 0 9
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: CALL_OW 488
28451: IFFALSE 28550
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28453: LD_ADDR_VAR 0 4
28457: PUSH
28458: LD_VAR 0 9
28462: PUSH
28463: LD_INT 1
28465: ARRAY
28466: PPUSH
28467: LD_VAR 0 9
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: PPUSH
28476: CALL_OW 546
28480: ST_TO_ADDR
// if hex [ 1 ] then
28481: LD_VAR 0 4
28485: PUSH
28486: LD_INT 1
28488: ARRAY
28489: IFFALSE 28493
// continue ;
28491: GO 28381
// h := hex [ 2 ] ;
28493: LD_ADDR_VAR 0 13
28497: PUSH
28498: LD_VAR 0 4
28502: PUSH
28503: LD_INT 2
28505: ARRAY
28506: ST_TO_ADDR
// if h + 7 < height then
28507: LD_VAR 0 13
28511: PUSH
28512: LD_INT 7
28514: PLUS
28515: PUSH
28516: LD_VAR 0 15
28520: LESS
28521: IFFALSE 28550
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28523: LD_ADDR_VAR 0 18
28527: PUSH
28528: LD_INT 7
28530: PUSH
28531: LD_INT 28
28533: PUSH
28534: LD_INT 45
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: PUSH
28542: LD_VAR 0 12
28546: ARRAY
28547: ST_TO_ADDR
// break ;
28548: GO 28552
// end ; end ; end ;
28550: GO 28381
28552: POP
28553: POP
// end ; if not weapon then
28554: LD_VAR 0 18
28558: NOT
28559: IFFALSE 28619
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28561: LD_ADDR_VAR 0 5
28565: PUSH
28566: LD_VAR 0 5
28570: PUSH
28571: LD_INT 11
28573: PUSH
28574: LD_INT 30
28576: PUSH
28577: LD_INT 49
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: DIFF
28585: ST_TO_ADDR
// if not list then
28586: LD_VAR 0 5
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 28741
// weapon := list [ rand ( 1 , list ) ] ;
28595: LD_ADDR_VAR 0 18
28599: PUSH
28600: LD_VAR 0 5
28604: PUSH
28605: LD_INT 1
28607: PPUSH
28608: LD_VAR 0 5
28612: PPUSH
28613: CALL_OW 12
28617: ARRAY
28618: ST_TO_ADDR
// end ; if weapon then
28619: LD_VAR 0 18
28623: IFFALSE 28741
// begin tmp := CostOfWeapon ( weapon ) ;
28625: LD_ADDR_VAR 0 14
28629: PUSH
28630: LD_VAR 0 18
28634: PPUSH
28635: CALL_OW 451
28639: ST_TO_ADDR
// j := GetBase ( tower ) ;
28640: LD_ADDR_VAR 0 9
28644: PUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 274
28654: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28655: LD_VAR 0 9
28659: PPUSH
28660: LD_INT 1
28662: PPUSH
28663: CALL_OW 275
28667: PUSH
28668: LD_VAR 0 14
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: GREATEREQUAL
28677: IFFALSE 28703
28679: PUSH
28680: LD_VAR 0 9
28684: PPUSH
28685: LD_INT 2
28687: PPUSH
28688: CALL_OW 275
28692: PUSH
28693: LD_VAR 0 14
28697: PUSH
28698: LD_INT 2
28700: ARRAY
28701: GREATEREQUAL
28702: AND
28703: IFFALSE 28729
28705: PUSH
28706: LD_VAR 0 9
28710: PPUSH
28711: LD_INT 3
28713: PPUSH
28714: CALL_OW 275
28718: PUSH
28719: LD_VAR 0 14
28723: PUSH
28724: LD_INT 3
28726: ARRAY
28727: GREATEREQUAL
28728: AND
28729: IFFALSE 28741
// result := weapon ;
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_VAR 0 18
28740: ST_TO_ADDR
// end ; end ;
28741: LD_VAR 0 3
28745: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28746: LD_INT 0
28748: PPUSH
28749: PPUSH
// result := true ;
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 1
28757: ST_TO_ADDR
// if array1 = array2 then
28758: LD_VAR 0 1
28762: PUSH
28763: LD_VAR 0 2
28767: EQUAL
28768: IFFALSE 28828
// begin for i = 1 to array1 do
28770: LD_ADDR_VAR 0 4
28774: PUSH
28775: DOUBLE
28776: LD_INT 1
28778: DEC
28779: ST_TO_ADDR
28780: LD_VAR 0 1
28784: PUSH
28785: FOR_TO
28786: IFFALSE 28824
// if array1 [ i ] <> array2 [ i ] then
28788: LD_VAR 0 1
28792: PUSH
28793: LD_VAR 0 4
28797: ARRAY
28798: PUSH
28799: LD_VAR 0 2
28803: PUSH
28804: LD_VAR 0 4
28808: ARRAY
28809: NONEQUAL
28810: IFFALSE 28822
// begin result := false ;
28812: LD_ADDR_VAR 0 3
28816: PUSH
28817: LD_INT 0
28819: ST_TO_ADDR
// break ;
28820: GO 28824
// end ;
28822: GO 28785
28824: POP
28825: POP
// end else
28826: GO 28836
// result := false ;
28828: LD_ADDR_VAR 0 3
28832: PUSH
28833: LD_INT 0
28835: ST_TO_ADDR
// end ;
28836: LD_VAR 0 3
28840: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
// if not array1 or not array2 then
28845: LD_VAR 0 1
28849: NOT
28850: IFTRUE 28859
28852: PUSH
28853: LD_VAR 0 2
28857: NOT
28858: OR
28859: IFFALSE 28863
// exit ;
28861: GO 28927
// result := true ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 1
28870: ST_TO_ADDR
// for i = 1 to array1 do
28871: LD_ADDR_VAR 0 4
28875: PUSH
28876: DOUBLE
28877: LD_INT 1
28879: DEC
28880: ST_TO_ADDR
28881: LD_VAR 0 1
28885: PUSH
28886: FOR_TO
28887: IFFALSE 28925
// if array1 [ i ] <> array2 [ i ] then
28889: LD_VAR 0 1
28893: PUSH
28894: LD_VAR 0 4
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 2
28904: PUSH
28905: LD_VAR 0 4
28909: ARRAY
28910: NONEQUAL
28911: IFFALSE 28923
// begin result := false ;
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_INT 0
28920: ST_TO_ADDR
// break ;
28921: GO 28925
// end ;
28923: GO 28886
28925: POP
28926: POP
// end ;
28927: LD_VAR 0 3
28931: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28932: LD_INT 0
28934: PPUSH
28935: PPUSH
28936: PPUSH
// pom := GetBase ( fac ) ;
28937: LD_ADDR_VAR 0 5
28941: PUSH
28942: LD_VAR 0 1
28946: PPUSH
28947: CALL_OW 274
28951: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: PPUSH
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 2
28973: ARRAY
28974: PPUSH
28975: LD_VAR 0 2
28979: PUSH
28980: LD_INT 3
28982: ARRAY
28983: PPUSH
28984: LD_VAR 0 2
28988: PUSH
28989: LD_INT 4
28991: ARRAY
28992: PPUSH
28993: CALL_OW 449
28997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_VAR 0 5
29007: PPUSH
29008: LD_INT 1
29010: PPUSH
29011: CALL_OW 275
29015: PUSH
29016: LD_VAR 0 4
29020: PUSH
29021: LD_INT 1
29023: ARRAY
29024: GREATEREQUAL
29025: IFFALSE 29051
29027: PUSH
29028: LD_VAR 0 5
29032: PPUSH
29033: LD_INT 2
29035: PPUSH
29036: CALL_OW 275
29040: PUSH
29041: LD_VAR 0 4
29045: PUSH
29046: LD_INT 2
29048: ARRAY
29049: GREATEREQUAL
29050: AND
29051: IFFALSE 29077
29053: PUSH
29054: LD_VAR 0 5
29058: PPUSH
29059: LD_INT 3
29061: PPUSH
29062: CALL_OW 275
29066: PUSH
29067: LD_VAR 0 4
29071: PUSH
29072: LD_INT 3
29074: ARRAY
29075: GREATEREQUAL
29076: AND
29077: ST_TO_ADDR
// end ;
29078: LD_VAR 0 3
29082: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29083: LD_INT 0
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
// pom := GetBase ( building ) ;
29089: LD_ADDR_VAR 0 3
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 274
29103: ST_TO_ADDR
// if not pom then
29104: LD_VAR 0 3
29108: NOT
29109: IFFALSE 29113
// exit ;
29111: GO 29287
// btype := GetBType ( building ) ;
29113: LD_ADDR_VAR 0 5
29117: PUSH
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 266
29127: ST_TO_ADDR
// if btype = b_armoury then
29128: LD_VAR 0 5
29132: PUSH
29133: LD_INT 4
29135: EQUAL
29136: IFFALSE 29146
// btype := b_barracks ;
29138: LD_ADDR_VAR 0 5
29142: PUSH
29143: LD_INT 5
29145: ST_TO_ADDR
// if btype = b_depot then
29146: LD_VAR 0 5
29150: PUSH
29151: LD_INT 0
29153: EQUAL
29154: IFFALSE 29164
// btype := b_warehouse ;
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_INT 1
29163: ST_TO_ADDR
// if btype = b_workshop then
29164: LD_VAR 0 5
29168: PUSH
29169: LD_INT 2
29171: EQUAL
29172: IFFALSE 29182
// btype := b_factory ;
29174: LD_ADDR_VAR 0 5
29178: PUSH
29179: LD_INT 3
29181: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29182: LD_ADDR_VAR 0 4
29186: PUSH
29187: LD_VAR 0 5
29191: PPUSH
29192: LD_VAR 0 1
29196: PPUSH
29197: CALL_OW 248
29201: PPUSH
29202: CALL_OW 450
29206: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29207: LD_ADDR_VAR 0 2
29211: PUSH
29212: LD_VAR 0 3
29216: PPUSH
29217: LD_INT 1
29219: PPUSH
29220: CALL_OW 275
29224: PUSH
29225: LD_VAR 0 4
29229: PUSH
29230: LD_INT 1
29232: ARRAY
29233: GREATEREQUAL
29234: IFFALSE 29260
29236: PUSH
29237: LD_VAR 0 3
29241: PPUSH
29242: LD_INT 2
29244: PPUSH
29245: CALL_OW 275
29249: PUSH
29250: LD_VAR 0 4
29254: PUSH
29255: LD_INT 2
29257: ARRAY
29258: GREATEREQUAL
29259: AND
29260: IFFALSE 29286
29262: PUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 3
29270: PPUSH
29271: CALL_OW 275
29275: PUSH
29276: LD_VAR 0 4
29280: PUSH
29281: LD_INT 3
29283: ARRAY
29284: GREATEREQUAL
29285: AND
29286: ST_TO_ADDR
// end ;
29287: LD_VAR 0 2
29291: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
29296: PPUSH
// pom := GetBase ( building ) ;
29297: LD_ADDR_VAR 0 4
29301: PUSH
29302: LD_VAR 0 1
29306: PPUSH
29307: CALL_OW 274
29311: ST_TO_ADDR
// if not pom then
29312: LD_VAR 0 4
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29426
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29321: LD_ADDR_VAR 0 5
29325: PUSH
29326: LD_VAR 0 2
29330: PPUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 248
29340: PPUSH
29341: CALL_OW 450
29345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_VAR 0 4
29355: PPUSH
29356: LD_INT 1
29358: PPUSH
29359: CALL_OW 275
29363: PUSH
29364: LD_VAR 0 5
29368: PUSH
29369: LD_INT 1
29371: ARRAY
29372: GREATEREQUAL
29373: IFFALSE 29399
29375: PUSH
29376: LD_VAR 0 4
29380: PPUSH
29381: LD_INT 2
29383: PPUSH
29384: CALL_OW 275
29388: PUSH
29389: LD_VAR 0 5
29393: PUSH
29394: LD_INT 2
29396: ARRAY
29397: GREATEREQUAL
29398: AND
29399: IFFALSE 29425
29401: PUSH
29402: LD_VAR 0 4
29406: PPUSH
29407: LD_INT 3
29409: PPUSH
29410: CALL_OW 275
29414: PUSH
29415: LD_VAR 0 5
29419: PUSH
29420: LD_INT 3
29422: ARRAY
29423: GREATEREQUAL
29424: AND
29425: ST_TO_ADDR
// end ;
29426: LD_VAR 0 3
29430: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29431: LD_INT 0
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
// result := false ;
29444: LD_ADDR_VAR 0 8
29448: PUSH
29449: LD_INT 0
29451: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29452: LD_VAR 0 5
29456: NOT
29457: IFTRUE 29466
29459: PUSH
29460: LD_VAR 0 1
29464: NOT
29465: OR
29466: IFTRUE 29475
29468: PUSH
29469: LD_VAR 0 2
29473: NOT
29474: OR
29475: IFTRUE 29484
29477: PUSH
29478: LD_VAR 0 3
29482: NOT
29483: OR
29484: IFFALSE 29488
// exit ;
29486: GO 30314
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29488: LD_ADDR_VAR 0 14
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: LD_VAR 0 2
29502: PPUSH
29503: LD_VAR 0 3
29507: PPUSH
29508: LD_VAR 0 4
29512: PPUSH
29513: LD_VAR 0 5
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PPUSH
29522: CALL_OW 248
29526: PPUSH
29527: LD_INT 0
29529: PPUSH
29530: CALL 31595 0 6
29534: ST_TO_ADDR
// if not hexes then
29535: LD_VAR 0 14
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 30314
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29544: LD_ADDR_VAR 0 17
29548: PUSH
29549: LD_VAR 0 5
29553: PPUSH
29554: LD_INT 22
29556: PUSH
29557: LD_VAR 0 13
29561: PPUSH
29562: CALL_OW 255
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 30
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 72
29607: ST_TO_ADDR
// for i = 1 to hexes do
29608: LD_ADDR_VAR 0 9
29612: PUSH
29613: DOUBLE
29614: LD_INT 1
29616: DEC
29617: ST_TO_ADDR
29618: LD_VAR 0 14
29622: PUSH
29623: FOR_TO
29624: IFFALSE 30312
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29626: LD_ADDR_VAR 0 13
29630: PUSH
29631: LD_VAR 0 14
29635: PUSH
29636: LD_VAR 0 9
29640: ARRAY
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: PPUSH
29646: LD_VAR 0 14
29650: PUSH
29651: LD_VAR 0 9
29655: ARRAY
29656: PUSH
29657: LD_INT 2
29659: ARRAY
29660: PPUSH
29661: CALL_OW 428
29665: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29666: LD_VAR 0 14
29670: PUSH
29671: LD_VAR 0 9
29675: ARRAY
29676: PUSH
29677: LD_INT 1
29679: ARRAY
29680: PPUSH
29681: LD_VAR 0 14
29685: PUSH
29686: LD_VAR 0 9
29690: ARRAY
29691: PUSH
29692: LD_INT 2
29694: ARRAY
29695: PPUSH
29696: CALL_OW 351
29700: IFTRUE 29739
29702: PUSH
29703: LD_VAR 0 14
29707: PUSH
29708: LD_VAR 0 9
29712: ARRAY
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PPUSH
29718: LD_VAR 0 14
29722: PUSH
29723: LD_VAR 0 9
29727: ARRAY
29728: PUSH
29729: LD_INT 2
29731: ARRAY
29732: PPUSH
29733: CALL_OW 488
29737: NOT
29738: OR
29739: IFTRUE 29756
29741: PUSH
29742: LD_VAR 0 13
29746: PPUSH
29747: CALL_OW 247
29751: PUSH
29752: LD_INT 3
29754: EQUAL
29755: OR
29756: IFFALSE 29762
// exit ;
29758: POP
29759: POP
29760: GO 30314
// if not tmp then
29762: LD_VAR 0 13
29766: NOT
29767: IFFALSE 29771
// continue ;
29769: GO 29623
// result := true ;
29771: LD_ADDR_VAR 0 8
29775: PUSH
29776: LD_INT 1
29778: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29779: LD_VAR 0 6
29783: IFFALSE 29800
29785: PUSH
29786: LD_VAR 0 13
29790: PPUSH
29791: CALL_OW 247
29795: PUSH
29796: LD_INT 2
29798: EQUAL
29799: AND
29800: IFFALSE 29817
29802: PUSH
29803: LD_VAR 0 13
29807: PPUSH
29808: CALL_OW 263
29812: PUSH
29813: LD_INT 1
29815: EQUAL
29816: AND
29817: IFFALSE 29981
// begin if IsDrivenBy ( tmp ) then
29819: LD_VAR 0 13
29823: PPUSH
29824: CALL_OW 311
29828: IFFALSE 29832
// continue ;
29830: GO 29623
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29832: LD_VAR 0 6
29836: PPUSH
29837: LD_INT 3
29839: PUSH
29840: LD_INT 60
29842: PUSH
29843: EMPTY
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: LD_INT 55
29855: PUSH
29856: EMPTY
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PPUSH
29867: CALL_OW 72
29871: IFFALSE 29979
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29873: LD_ADDR_VAR 0 18
29877: PUSH
29878: LD_VAR 0 6
29882: PPUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 60
29888: PUSH
29889: EMPTY
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: LD_INT 55
29901: PUSH
29902: EMPTY
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PPUSH
29913: CALL_OW 72
29917: PUSH
29918: LD_INT 1
29920: ARRAY
29921: ST_TO_ADDR
// if IsInUnit ( driver ) then
29922: LD_VAR 0 18
29926: PPUSH
29927: CALL_OW 310
29931: IFFALSE 29942
// ComExit ( driver ) ;
29933: LD_VAR 0 18
29937: PPUSH
29938: CALL 55585 0 1
// AddComEnterUnit ( driver , tmp ) ;
29942: LD_VAR 0 18
29946: PPUSH
29947: LD_VAR 0 13
29951: PPUSH
29952: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29956: LD_VAR 0 18
29960: PPUSH
29961: LD_VAR 0 7
29965: PPUSH
29966: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29970: LD_VAR 0 18
29974: PPUSH
29975: CALL_OW 181
// end ; continue ;
29979: GO 29623
// end ; if not cleaners or not tmp in cleaners then
29981: LD_VAR 0 6
29985: NOT
29986: IFTRUE 30001
29988: PUSH
29989: LD_VAR 0 13
29993: PUSH
29994: LD_VAR 0 6
29998: IN
29999: NOT
30000: OR
30001: IFFALSE 30310
// begin if dep then
30003: LD_VAR 0 17
30007: IFFALSE 30143
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30009: LD_ADDR_VAR 0 16
30013: PUSH
30014: LD_VAR 0 17
30018: PUSH
30019: LD_INT 1
30021: ARRAY
30022: PPUSH
30023: CALL_OW 250
30027: PPUSH
30028: LD_VAR 0 17
30032: PUSH
30033: LD_INT 1
30035: ARRAY
30036: PPUSH
30037: CALL_OW 254
30041: PPUSH
30042: LD_INT 5
30044: PPUSH
30045: CALL_OW 272
30049: PUSH
30050: LD_VAR 0 17
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: CALL_OW 251
30063: PPUSH
30064: LD_VAR 0 17
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: CALL_OW 254
30077: PPUSH
30078: LD_INT 5
30080: PPUSH
30081: CALL_OW 273
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30090: LD_VAR 0 16
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: LD_VAR 0 16
30103: PUSH
30104: LD_INT 2
30106: ARRAY
30107: PPUSH
30108: CALL_OW 488
30112: IFFALSE 30143
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30114: LD_VAR 0 13
30118: PPUSH
30119: LD_VAR 0 16
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: LD_VAR 0 16
30132: PUSH
30133: LD_INT 2
30135: ARRAY
30136: PPUSH
30137: CALL_OW 111
// continue ;
30141: GO 29623
// end ; end ; r := GetDir ( tmp ) ;
30143: LD_ADDR_VAR 0 15
30147: PUSH
30148: LD_VAR 0 13
30152: PPUSH
30153: CALL_OW 254
30157: ST_TO_ADDR
// if r = 5 then
30158: LD_VAR 0 15
30162: PUSH
30163: LD_INT 5
30165: EQUAL
30166: IFFALSE 30176
// r := 0 ;
30168: LD_ADDR_VAR 0 15
30172: PUSH
30173: LD_INT 0
30175: ST_TO_ADDR
// for j = r to 5 do
30176: LD_ADDR_VAR 0 10
30180: PUSH
30181: DOUBLE
30182: LD_VAR 0 15
30186: DEC
30187: ST_TO_ADDR
30188: LD_INT 5
30190: PUSH
30191: FOR_TO
30192: IFFALSE 30308
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30194: LD_ADDR_VAR 0 11
30198: PUSH
30199: LD_VAR 0 13
30203: PPUSH
30204: CALL_OW 250
30208: PPUSH
30209: LD_VAR 0 10
30213: PPUSH
30214: LD_INT 2
30216: PPUSH
30217: CALL_OW 272
30221: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30222: LD_ADDR_VAR 0 12
30226: PUSH
30227: LD_VAR 0 13
30231: PPUSH
30232: CALL_OW 251
30236: PPUSH
30237: LD_VAR 0 10
30241: PPUSH
30242: LD_INT 2
30244: PPUSH
30245: CALL_OW 273
30249: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30250: LD_VAR 0 11
30254: PPUSH
30255: LD_VAR 0 12
30259: PPUSH
30260: CALL_OW 488
30264: IFFALSE 30283
30266: PUSH
30267: LD_VAR 0 11
30271: PPUSH
30272: LD_VAR 0 12
30276: PPUSH
30277: CALL_OW 428
30281: NOT
30282: AND
30283: IFFALSE 30306
// begin ComMoveXY ( tmp , _x , _y ) ;
30285: LD_VAR 0 13
30289: PPUSH
30290: LD_VAR 0 11
30294: PPUSH
30295: LD_VAR 0 12
30299: PPUSH
30300: CALL_OW 111
// break ;
30304: GO 30308
// end ; end ;
30306: GO 30191
30308: POP
30309: POP
// end ; end ;
30310: GO 29623
30312: POP
30313: POP
// end ;
30314: LD_VAR 0 8
30318: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30319: LD_INT 0
30321: PPUSH
// result := true ;
30322: LD_ADDR_VAR 0 3
30326: PUSH
30327: LD_INT 1
30329: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30330: LD_VAR 0 2
30334: PUSH
30335: LD_INT 24
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30349
30341: LD_INT 33
30343: DOUBLE
30344: EQUAL
30345: IFTRUE 30349
30347: GO 30374
30349: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: LD_INT 32
30357: PPUSH
30358: LD_VAR 0 1
30362: PPUSH
30363: CALL_OW 321
30367: PUSH
30368: LD_INT 2
30370: EQUAL
30371: ST_TO_ADDR
30372: GO 30690
30374: LD_INT 20
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30407
30382: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30383: LD_ADDR_VAR 0 3
30387: PUSH
30388: LD_INT 6
30390: PPUSH
30391: LD_VAR 0 1
30395: PPUSH
30396: CALL_OW 321
30400: PUSH
30401: LD_INT 2
30403: EQUAL
30404: ST_TO_ADDR
30405: GO 30690
30407: LD_INT 22
30409: DOUBLE
30410: EQUAL
30411: IFTRUE 30421
30413: LD_INT 36
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30446
30421: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_INT 15
30429: PPUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 321
30439: PUSH
30440: LD_INT 2
30442: EQUAL
30443: ST_TO_ADDR
30444: GO 30690
30446: LD_INT 30
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30479
30454: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 20
30462: PPUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 321
30472: PUSH
30473: LD_INT 2
30475: EQUAL
30476: ST_TO_ADDR
30477: GO 30690
30479: LD_INT 28
30481: DOUBLE
30482: EQUAL
30483: IFTRUE 30493
30485: LD_INT 21
30487: DOUBLE
30488: EQUAL
30489: IFTRUE 30493
30491: GO 30518
30493: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30494: LD_ADDR_VAR 0 3
30498: PUSH
30499: LD_INT 21
30501: PPUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL_OW 321
30511: PUSH
30512: LD_INT 2
30514: EQUAL
30515: ST_TO_ADDR
30516: GO 30690
30518: LD_INT 16
30520: DOUBLE
30521: EQUAL
30522: IFTRUE 30526
30524: GO 30551
30526: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_INT 84
30534: PPUSH
30535: LD_VAR 0 1
30539: PPUSH
30540: CALL_OW 321
30544: PUSH
30545: LD_INT 2
30547: EQUAL
30548: ST_TO_ADDR
30549: GO 30690
30551: LD_INT 19
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30565
30557: LD_INT 23
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30590
30565: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 83
30573: PPUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 321
30583: PUSH
30584: LD_INT 2
30586: EQUAL
30587: ST_TO_ADDR
30588: GO 30690
30590: LD_INT 17
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30623
30598: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 39
30606: PPUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 321
30616: PUSH
30617: LD_INT 2
30619: EQUAL
30620: ST_TO_ADDR
30621: GO 30690
30623: LD_INT 18
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30656
30631: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_INT 40
30639: PPUSH
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL_OW 321
30649: PUSH
30650: LD_INT 2
30652: EQUAL
30653: ST_TO_ADDR
30654: GO 30690
30656: LD_INT 27
30658: DOUBLE
30659: EQUAL
30660: IFTRUE 30664
30662: GO 30689
30664: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 35
30672: PPUSH
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL_OW 321
30682: PUSH
30683: LD_INT 2
30685: EQUAL
30686: ST_TO_ADDR
30687: GO 30690
30689: POP
// end ;
30690: LD_VAR 0 3
30694: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30695: LD_INT 0
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
// result := false ;
30708: LD_ADDR_VAR 0 6
30712: PUSH
30713: LD_INT 0
30715: ST_TO_ADDR
// if btype = b_depot then
30716: LD_VAR 0 2
30720: PUSH
30721: LD_INT 0
30723: EQUAL
30724: IFFALSE 30736
// begin result := true ;
30726: LD_ADDR_VAR 0 6
30730: PUSH
30731: LD_INT 1
30733: ST_TO_ADDR
// exit ;
30734: GO 31590
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30736: LD_VAR 0 1
30740: NOT
30741: IFTRUE 30766
30743: PUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 266
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: IN
30764: NOT
30765: OR
30766: IFTRUE 30775
30768: PUSH
30769: LD_VAR 0 2
30773: NOT
30774: OR
30775: IFTRUE 30811
30777: PUSH
30778: LD_VAR 0 5
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: LD_INT 4
30797: PUSH
30798: LD_INT 5
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: IN
30809: NOT
30810: OR
30811: IFTRUE 30830
30813: PUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_VAR 0 4
30823: PPUSH
30824: CALL_OW 488
30828: NOT
30829: OR
30830: IFFALSE 30834
// exit ;
30832: GO 31590
// side := GetSide ( depot ) ;
30834: LD_ADDR_VAR 0 9
30838: PUSH
30839: LD_VAR 0 1
30843: PPUSH
30844: CALL_OW 255
30848: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30849: LD_VAR 0 9
30853: PPUSH
30854: LD_VAR 0 2
30858: PPUSH
30859: CALL 30319 0 2
30863: NOT
30864: IFFALSE 30868
// exit ;
30866: GO 31590
// pom := GetBase ( depot ) ;
30868: LD_ADDR_VAR 0 10
30872: PUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 274
30882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30883: LD_ADDR_VAR 0 11
30887: PUSH
30888: LD_VAR 0 2
30892: PPUSH
30893: LD_VAR 0 1
30897: PPUSH
30898: CALL_OW 248
30902: PPUSH
30903: CALL_OW 450
30907: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30908: LD_VAR 0 10
30912: PPUSH
30913: LD_INT 1
30915: PPUSH
30916: CALL_OW 275
30920: PUSH
30921: LD_VAR 0 11
30925: PUSH
30926: LD_INT 1
30928: ARRAY
30929: GREATEREQUAL
30930: IFFALSE 30956
30932: PUSH
30933: LD_VAR 0 10
30937: PPUSH
30938: LD_INT 2
30940: PPUSH
30941: CALL_OW 275
30945: PUSH
30946: LD_VAR 0 11
30950: PUSH
30951: LD_INT 2
30953: ARRAY
30954: GREATEREQUAL
30955: AND
30956: IFFALSE 30982
30958: PUSH
30959: LD_VAR 0 10
30963: PPUSH
30964: LD_INT 3
30966: PPUSH
30967: CALL_OW 275
30971: PUSH
30972: LD_VAR 0 11
30976: PUSH
30977: LD_INT 3
30979: ARRAY
30980: GREATEREQUAL
30981: AND
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31590
// if GetBType ( depot ) = b_depot then
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 266
30996: PUSH
30997: LD_INT 0
30999: EQUAL
31000: IFFALSE 31012
// dist := 28 else
31002: LD_ADDR_VAR 0 14
31006: PUSH
31007: LD_INT 28
31009: ST_TO_ADDR
31010: GO 31020
// dist := 36 ;
31012: LD_ADDR_VAR 0 14
31016: PUSH
31017: LD_INT 36
31019: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31020: LD_VAR 0 1
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: LD_VAR 0 4
31034: PPUSH
31035: CALL_OW 297
31039: PUSH
31040: LD_VAR 0 14
31044: GREATER
31045: IFFALSE 31049
// exit ;
31047: GO 31590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31049: LD_ADDR_VAR 0 12
31053: PUSH
31054: LD_VAR 0 2
31058: PPUSH
31059: LD_VAR 0 3
31063: PPUSH
31064: LD_VAR 0 4
31068: PPUSH
31069: LD_VAR 0 5
31073: PPUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 248
31083: PPUSH
31084: LD_INT 0
31086: PPUSH
31087: CALL 31595 0 6
31091: ST_TO_ADDR
// if not hexes then
31092: LD_VAR 0 12
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31590
// hex := GetHexInfo ( x , y ) ;
31101: LD_ADDR_VAR 0 15
31105: PUSH
31106: LD_VAR 0 3
31110: PPUSH
31111: LD_VAR 0 4
31115: PPUSH
31116: CALL_OW 546
31120: ST_TO_ADDR
// if hex [ 1 ] then
31121: LD_VAR 0 15
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: IFFALSE 31133
// exit ;
31131: GO 31590
// height := hex [ 2 ] ;
31133: LD_ADDR_VAR 0 13
31137: PUSH
31138: LD_VAR 0 15
31142: PUSH
31143: LD_INT 2
31145: ARRAY
31146: ST_TO_ADDR
// for i = 1 to hexes do
31147: LD_ADDR_VAR 0 7
31151: PUSH
31152: DOUBLE
31153: LD_INT 1
31155: DEC
31156: ST_TO_ADDR
31157: LD_VAR 0 12
31161: PUSH
31162: FOR_TO
31163: IFFALSE 31507
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31165: LD_VAR 0 12
31169: PUSH
31170: LD_VAR 0 7
31174: ARRAY
31175: PUSH
31176: LD_INT 1
31178: ARRAY
31179: PPUSH
31180: LD_VAR 0 12
31184: PUSH
31185: LD_VAR 0 7
31189: ARRAY
31190: PUSH
31191: LD_INT 2
31193: ARRAY
31194: PPUSH
31195: CALL_OW 488
31199: NOT
31200: IFTRUE 31242
31202: PUSH
31203: LD_VAR 0 12
31207: PUSH
31208: LD_VAR 0 7
31212: ARRAY
31213: PUSH
31214: LD_INT 1
31216: ARRAY
31217: PPUSH
31218: LD_VAR 0 12
31222: PUSH
31223: LD_VAR 0 7
31227: ARRAY
31228: PUSH
31229: LD_INT 2
31231: ARRAY
31232: PPUSH
31233: CALL_OW 428
31237: PUSH
31238: LD_INT 0
31240: GREATER
31241: OR
31242: IFTRUE 31280
31244: PUSH
31245: LD_VAR 0 12
31249: PUSH
31250: LD_VAR 0 7
31254: ARRAY
31255: PUSH
31256: LD_INT 1
31258: ARRAY
31259: PPUSH
31260: LD_VAR 0 12
31264: PUSH
31265: LD_VAR 0 7
31269: ARRAY
31270: PUSH
31271: LD_INT 2
31273: ARRAY
31274: PPUSH
31275: CALL_OW 351
31279: OR
31280: IFFALSE 31286
// exit ;
31282: POP
31283: POP
31284: GO 31590
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31286: LD_ADDR_VAR 0 8
31290: PUSH
31291: LD_VAR 0 12
31295: PUSH
31296: LD_VAR 0 7
31300: ARRAY
31301: PUSH
31302: LD_INT 1
31304: ARRAY
31305: PPUSH
31306: LD_VAR 0 12
31310: PUSH
31311: LD_VAR 0 7
31315: ARRAY
31316: PUSH
31317: LD_INT 2
31319: ARRAY
31320: PPUSH
31321: CALL_OW 546
31325: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31326: LD_VAR 0 8
31330: PUSH
31331: LD_INT 1
31333: ARRAY
31334: IFTRUE 31356
31336: PUSH
31337: LD_VAR 0 8
31341: PUSH
31342: LD_INT 2
31344: ARRAY
31345: PUSH
31346: LD_VAR 0 13
31350: PUSH
31351: LD_INT 2
31353: PLUS
31354: GREATER
31355: OR
31356: IFTRUE 31378
31358: PUSH
31359: LD_VAR 0 8
31363: PUSH
31364: LD_INT 2
31366: ARRAY
31367: PUSH
31368: LD_VAR 0 13
31372: PUSH
31373: LD_INT 2
31375: MINUS
31376: LESS
31377: OR
31378: IFTRUE 31446
31380: PUSH
31381: LD_VAR 0 8
31385: PUSH
31386: LD_INT 3
31388: ARRAY
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 8
31395: PUSH
31396: LD_INT 9
31398: PUSH
31399: LD_INT 10
31401: PUSH
31402: LD_INT 11
31404: PUSH
31405: LD_INT 12
31407: PUSH
31408: LD_INT 13
31410: PUSH
31411: LD_INT 16
31413: PUSH
31414: LD_INT 17
31416: PUSH
31417: LD_INT 18
31419: PUSH
31420: LD_INT 19
31422: PUSH
31423: LD_INT 20
31425: PUSH
31426: LD_INT 21
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: IN
31444: NOT
31445: OR
31446: IFTRUE 31459
31448: PUSH
31449: LD_VAR 0 8
31453: PUSH
31454: LD_INT 5
31456: ARRAY
31457: NOT
31458: OR
31459: IFTRUE 31499
31461: PUSH
31462: LD_VAR 0 8
31466: PUSH
31467: LD_INT 6
31469: ARRAY
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 7
31479: PUSH
31480: LD_INT 9
31482: PUSH
31483: LD_INT 10
31485: PUSH
31486: LD_INT 11
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: IN
31497: NOT
31498: OR
31499: IFFALSE 31505
// exit ;
31501: POP
31502: POP
31503: GO 31590
// end ;
31505: GO 31162
31507: POP
31508: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31509: LD_VAR 0 9
31513: PPUSH
31514: LD_VAR 0 3
31518: PPUSH
31519: LD_VAR 0 4
31523: PPUSH
31524: LD_INT 20
31526: PPUSH
31527: CALL 23409 0 4
31531: PUSH
31532: LD_INT 4
31534: ARRAY
31535: IFFALSE 31539
// exit ;
31537: GO 31590
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31539: LD_VAR 0 2
31543: PUSH
31544: LD_INT 29
31546: PUSH
31547: LD_INT 30
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: IN
31554: IFFALSE 31578
31556: PUSH
31557: LD_VAR 0 3
31561: PPUSH
31562: LD_VAR 0 4
31566: PPUSH
31567: LD_VAR 0 9
31571: PPUSH
31572: CALL_OW 440
31576: NOT
31577: AND
31578: IFFALSE 31582
// exit ;
31580: GO 31590
// result := true ;
31582: LD_ADDR_VAR 0 6
31586: PUSH
31587: LD_INT 1
31589: ST_TO_ADDR
// end ;
31590: LD_VAR 0 6
31594: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31595: LD_INT 0
31597: PPUSH
31598: PPUSH
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
31640: PPUSH
31641: PPUSH
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
31646: PPUSH
31647: PPUSH
31648: PPUSH
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
// result = [ ] ;
31655: LD_ADDR_VAR 0 7
31659: PUSH
31660: EMPTY
31661: ST_TO_ADDR
// temp_list = [ ] ;
31662: LD_ADDR_VAR 0 9
31666: PUSH
31667: EMPTY
31668: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31669: LD_VAR 0 4
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: LD_INT 5
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: IN
31700: NOT
31701: IFTRUE 31744
31703: PUSH
31704: LD_VAR 0 1
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: IN
31719: IFFALSE 31743
31721: PUSH
31722: LD_VAR 0 5
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: IN
31741: NOT
31742: AND
31743: OR
31744: IFFALSE 31748
// exit ;
31746: GO 50147
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31748: LD_VAR 0 1
31752: PUSH
31753: LD_INT 6
31755: PUSH
31756: LD_INT 7
31758: PUSH
31759: LD_INT 8
31761: PUSH
31762: LD_INT 13
31764: PUSH
31765: LD_INT 12
31767: PUSH
31768: LD_INT 15
31770: PUSH
31771: LD_INT 11
31773: PUSH
31774: LD_INT 14
31776: PUSH
31777: LD_INT 10
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: IN
31791: IFFALSE 31801
// btype = b_lab ;
31793: LD_ADDR_VAR 0 1
31797: PUSH
31798: LD_INT 6
31800: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31801: LD_VAR 0 6
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: IN
31820: NOT
31821: IFTRUE 31889
31823: PUSH
31824: LD_VAR 0 1
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: LD_INT 6
31843: PUSH
31844: LD_INT 36
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: LD_INT 31
31855: PUSH
31856: LD_INT 32
31858: PUSH
31859: LD_INT 33
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: IN
31875: NOT
31876: IFFALSE 31888
31878: PUSH
31879: LD_VAR 0 6
31883: PUSH
31884: LD_INT 1
31886: EQUAL
31887: AND
31888: OR
31889: IFTRUE 31921
31891: PUSH
31892: LD_VAR 0 1
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 3
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: IN
31907: NOT
31908: IFFALSE 31920
31910: PUSH
31911: LD_VAR 0 6
31915: PUSH
31916: LD_INT 2
31918: EQUAL
31919: AND
31920: OR
31921: IFFALSE 31931
// mode = 0 ;
31923: LD_ADDR_VAR 0 6
31927: PUSH
31928: LD_INT 0
31930: ST_TO_ADDR
// case mode of 0 :
31931: LD_VAR 0 6
31935: PUSH
31936: LD_INT 0
31938: DOUBLE
31939: EQUAL
31940: IFTRUE 31944
31942: GO 43397
31944: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31945: LD_ADDR_VAR 0 11
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32138: LD_ADDR_VAR 0 12
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: NEG
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32334: LD_ADDR_VAR 0 13
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32533: LD_ADDR_VAR 0 14
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32729: LD_ADDR_VAR 0 15
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 3
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32922: LD_ADDR_VAR 0 16
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: LD_INT 3
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33115: LD_ADDR_VAR 0 17
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33345: LD_ADDR_VAR 0 18
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33575: LD_ADDR_VAR 0 19
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 2
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33805: LD_ADDR_VAR 0 20
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34035: LD_ADDR_VAR 0 21
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 2
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34265: LD_ADDR_VAR 0 22
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34495: LD_ADDR_VAR 0 23
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 2
34682: NEG
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: NEG
34707: PUSH
34708: LD_INT 3
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 3
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34775: LD_ADDR_VAR 0 24
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: NEG
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35051: LD_ADDR_VAR 0 25
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 3
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35325: LD_ADDR_VAR 0 26
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35601: LD_ADDR_VAR 0 27
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 3
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35881: LD_ADDR_VAR 0 28
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: NEG
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: LD_INT 3
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: LD_INT 3
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 3
36116: NEG
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: NEG
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36163: LD_ADDR_VAR 0 29
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: NEG
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36442: LD_ADDR_VAR 0 30
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 2
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 3
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 3
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36720: LD_ADDR_VAR 0 31
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: LD_INT 3
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 3
36963: NEG
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36998: LD_ADDR_VAR 0 32
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 3
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37276: LD_ADDR_VAR 0 33
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: LD_INT 2
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37555: LD_ADDR_VAR 0 34
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 3
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37835: LD_ADDR_VAR 0 35
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37947: LD_ADDR_VAR 0 36
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38059: LD_ADDR_VAR 0 37
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38171: LD_ADDR_VAR 0 38
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38283: LD_ADDR_VAR 0 39
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38395: LD_ADDR_VAR 0 40
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38507: LD_ADDR_VAR 0 41
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: LD_INT 3
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 3
38781: NEG
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 3
38792: NEG
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 3
38804: NEG
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 3
38816: NEG
38817: PUSH
38818: LD_INT 3
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38857: LD_ADDR_VAR 0 42
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 3
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 3
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 3
39166: NEG
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39207: LD_ADDR_VAR 0 43
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 3
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 3
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 3
39503: NEG
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 3
39514: NEG
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39555: LD_ADDR_VAR 0 44
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 3
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 3
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 3
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39905: LD_ADDR_VAR 0 45
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: LD_INT 3
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 3
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 3
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: NEG
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40255: LD_ADDR_VAR 0 46
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 3
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40603: LD_ADDR_VAR 0 47
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40754: LD_ADDR_VAR 0 48
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40901: LD_ADDR_VAR 0 49
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41045: LD_ADDR_VAR 0 50
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41189: LD_ADDR_VAR 0 51
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41336: LD_ADDR_VAR 0 52
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41487: LD_ADDR_VAR 0 53
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41717: LD_ADDR_VAR 0 54
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41947: LD_ADDR_VAR 0 55
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42177: LD_ADDR_VAR 0 56
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42407: LD_ADDR_VAR 0 57
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42637: LD_ADDR_VAR 0 58
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42867: LD_ADDR_VAR 0 59
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42955: LD_ADDR_VAR 0 60
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43043: LD_ADDR_VAR 0 61
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43131: LD_ADDR_VAR 0 62
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43219: LD_ADDR_VAR 0 63
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43307: LD_ADDR_VAR 0 64
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// end ; 1 :
43395: GO 49292
43397: LD_INT 1
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 46028
43405: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43406: LD_ADDR_VAR 0 11
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43450: LD_ADDR_VAR 0 12
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43491: LD_ADDR_VAR 0 13
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43531: LD_ADDR_VAR 0 14
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43572: LD_ADDR_VAR 0 15
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 3
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43616: LD_ADDR_VAR 0 16
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 3
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43662: LD_ADDR_VAR 0 17
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 3
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43706: LD_ADDR_VAR 0 18
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43747: LD_ADDR_VAR 0 19
43751: PUSH
43752: LD_INT 3
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43787: LD_ADDR_VAR 0 20
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43828: LD_ADDR_VAR 0 21
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43872: LD_ADDR_VAR 0 22
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 3
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43918: LD_ADDR_VAR 0 23
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 3
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 4
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43962: LD_ADDR_VAR 0 24
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 3
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 4
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44003: LD_ADDR_VAR 0 25
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 4
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44043: LD_ADDR_VAR 0 26
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 4
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44084: LD_ADDR_VAR 0 27
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: NEG
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 4
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44128: LD_ADDR_VAR 0 28
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: LD_INT 3
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 3
44147: NEG
44148: PUSH
44149: LD_INT 4
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 4
44159: NEG
44160: PUSH
44161: LD_INT 3
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44174: LD_ADDR_VAR 0 29
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 3
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 4
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 4
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 5
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 5
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 4
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 6
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 6
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 5
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44329: LD_ADDR_VAR 0 30
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 3
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 4
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 4
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 5
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 5
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 6
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 6
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44472: LD_ADDR_VAR 0 31
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 4
44509: PUSH
44510: LD_INT 3
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 4
44519: PUSH
44520: LD_INT 4
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 3
44529: PUSH
44530: LD_INT 4
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 5
44539: PUSH
44540: LD_INT 4
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 5
44549: PUSH
44550: LD_INT 5
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 4
44559: PUSH
44560: LD_INT 5
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 6
44569: PUSH
44570: LD_INT 5
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 6
44579: PUSH
44580: LD_INT 6
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 5
44589: PUSH
44590: LD_INT 6
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44611: LD_ADDR_VAR 0 32
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 4
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 5
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 5
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 4
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 6
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 6
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 5
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44754: LD_ADDR_VAR 0 33
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 3
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: NEG
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 4
44806: NEG
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 4
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 4
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 5
44840: NEG
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 5
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 5
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 6
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 6
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44909: LD_ADDR_VAR 0 34
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 3
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: LD_INT 3
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: LD_INT 4
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 4
44964: NEG
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 4
44976: NEG
44977: PUSH
44978: LD_INT 4
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 4
44988: NEG
44989: PUSH
44990: LD_INT 5
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 5
45000: NEG
45001: PUSH
45002: LD_INT 4
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 5
45012: NEG
45013: PUSH
45014: LD_INT 5
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 5
45024: NEG
45025: PUSH
45026: LD_INT 6
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 6
45036: NEG
45037: PUSH
45038: LD_INT 5
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 6
45048: NEG
45049: PUSH
45050: LD_INT 6
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45072: LD_ADDR_VAR 0 41
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45116: LD_ADDR_VAR 0 42
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45157: LD_ADDR_VAR 0 43
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45197: LD_ADDR_VAR 0 44
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45238: LD_ADDR_VAR 0 45
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45282: LD_ADDR_VAR 0 46
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45328: LD_ADDR_VAR 0 47
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 3
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45361: LD_ADDR_VAR 0 48
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45392: LD_ADDR_VAR 0 49
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45421: LD_ADDR_VAR 0 50
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45450: LD_ADDR_VAR 0 51
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45481: LD_ADDR_VAR 0 52
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45514: LD_ADDR_VAR 0 53
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45558: LD_ADDR_VAR 0 54
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45599: LD_ADDR_VAR 0 55
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45639: LD_ADDR_VAR 0 56
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45680: LD_ADDR_VAR 0 57
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45724: LD_ADDR_VAR 0 58
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: LD_INT 3
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45770: LD_ADDR_VAR 0 59
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45814: LD_ADDR_VAR 0 60
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45855: LD_ADDR_VAR 0 61
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45895: LD_ADDR_VAR 0 62
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45936: LD_ADDR_VAR 0 63
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45980: LD_ADDR_VAR 0 64
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// end ; 2 :
46026: GO 49292
46028: LD_INT 2
46030: DOUBLE
46031: EQUAL
46032: IFTRUE 46036
46034: GO 49291
46036: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46037: LD_ADDR_VAR 0 29
46041: PUSH
46042: LD_INT 4
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 4
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 5
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 5
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 4
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 5
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: LD_INT 3
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 4
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 4
46167: PUSH
46168: LD_INT 4
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: LD_INT 4
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 4
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 4
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 5
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 5
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 4
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 5
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 3
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 4
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 4
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 4
46399: NEG
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 4
46422: NEG
46423: PUSH
46424: LD_INT 4
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 4
46434: NEG
46435: PUSH
46436: LD_INT 5
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: NEG
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: LD_INT 3
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 4
46470: NEG
46471: PUSH
46472: LD_INT 3
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 5
46482: NEG
46483: PUSH
46484: LD_INT 4
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 5
46494: NEG
46495: PUSH
46496: LD_INT 5
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: LD_INT 5
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 5
46518: NEG
46519: PUSH
46520: LD_INT 3
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46575: LD_ADDR_VAR 0 30
46579: PUSH
46580: LD_INT 4
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 4
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: LD_INT 4
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 5
46612: PUSH
46613: LD_INT 5
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 4
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 5
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 5
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 3
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 4
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 4
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 4
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 5
46821: NEG
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 5
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 5
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 4
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: LD_INT 4
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 4
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 5
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 4
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 4
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 5
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 3
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47122: LD_ADDR_VAR 0 31
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 5
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 5
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 4
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 3
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 4
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 4
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 4
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 4
47324: NEG
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 4
47336: NEG
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: LD_INT 4
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: NEG
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 5
47384: NEG
47385: PUSH
47386: LD_INT 4
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 5
47396: NEG
47397: PUSH
47398: LD_INT 5
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 5
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 5
47420: NEG
47421: PUSH
47422: LD_INT 3
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 4
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 3
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 4
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 4
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 5
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 5
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 4
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 5
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47672: LD_ADDR_VAR 0 32
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 4
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 5
47735: NEG
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 5
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 5
47758: NEG
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 3
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: LD_INT 4
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 4
47841: NEG
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 4
47853: NEG
47854: PUSH
47855: LD_INT 4
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 4
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 4
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 4
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 5
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 5
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 4
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 4
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 5
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: LD_INT 5
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: LD_INT 4
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 5
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48219: LD_ADDR_VAR 0 33
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: LD_INT 4
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 4
48238: NEG
48239: PUSH
48240: LD_INT 5
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: LD_INT 4
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 4
48274: NEG
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 5
48286: NEG
48287: PUSH
48288: LD_INT 4
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 5
48298: NEG
48299: PUSH
48300: LD_INT 5
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: LD_INT 5
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 5
48322: NEG
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 3
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 4
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 4
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 4
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 4
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 5
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 5
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 4
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 5
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 4
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 4
48559: PUSH
48560: LD_INT 4
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 4
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 4
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 5
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 5
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48757: LD_ADDR_VAR 0 34
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 4
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 3
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 4
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 5
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 5
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 4
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 4
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 4
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 4
48959: PUSH
48960: LD_INT 4
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 4
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 5
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 5
48989: PUSH
48990: LD_INT 5
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 4
48999: PUSH
49000: LD_INT 5
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: PUSH
49010: LD_INT 4
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 5
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: LD_INT 5
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 4
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 4
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 4
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 4
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 4
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 3
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 4
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 5
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 5
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// end ; end ;
49289: GO 49292
49291: POP
// case btype of b_depot , b_warehouse :
49292: LD_VAR 0 1
49296: PUSH
49297: LD_INT 0
49299: DOUBLE
49300: EQUAL
49301: IFTRUE 49311
49303: LD_INT 1
49305: DOUBLE
49306: EQUAL
49307: IFTRUE 49311
49309: GO 49512
49311: POP
// case nation of nation_american :
49312: LD_VAR 0 5
49316: PUSH
49317: LD_INT 1
49319: DOUBLE
49320: EQUAL
49321: IFTRUE 49325
49323: GO 49381
49325: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49326: LD_ADDR_VAR 0 9
49330: PUSH
49331: LD_VAR 0 11
49335: PUSH
49336: LD_VAR 0 12
49340: PUSH
49341: LD_VAR 0 13
49345: PUSH
49346: LD_VAR 0 14
49350: PUSH
49351: LD_VAR 0 15
49355: PUSH
49356: LD_VAR 0 16
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: PUSH
49369: LD_VAR 0 4
49373: PUSH
49374: LD_INT 1
49376: PLUS
49377: ARRAY
49378: ST_TO_ADDR
49379: GO 49510
49381: LD_INT 2
49383: DOUBLE
49384: EQUAL
49385: IFTRUE 49389
49387: GO 49445
49389: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49390: LD_ADDR_VAR 0 9
49394: PUSH
49395: LD_VAR 0 17
49399: PUSH
49400: LD_VAR 0 18
49404: PUSH
49405: LD_VAR 0 19
49409: PUSH
49410: LD_VAR 0 20
49414: PUSH
49415: LD_VAR 0 21
49419: PUSH
49420: LD_VAR 0 22
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: PUSH
49433: LD_VAR 0 4
49437: PUSH
49438: LD_INT 1
49440: PLUS
49441: ARRAY
49442: ST_TO_ADDR
49443: GO 49510
49445: LD_INT 3
49447: DOUBLE
49448: EQUAL
49449: IFTRUE 49453
49451: GO 49509
49453: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49454: LD_ADDR_VAR 0 9
49458: PUSH
49459: LD_VAR 0 23
49463: PUSH
49464: LD_VAR 0 24
49468: PUSH
49469: LD_VAR 0 25
49473: PUSH
49474: LD_VAR 0 26
49478: PUSH
49479: LD_VAR 0 27
49483: PUSH
49484: LD_VAR 0 28
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: LD_VAR 0 4
49501: PUSH
49502: LD_INT 1
49504: PLUS
49505: ARRAY
49506: ST_TO_ADDR
49507: GO 49510
49509: POP
49510: GO 50065
49512: LD_INT 2
49514: DOUBLE
49515: EQUAL
49516: IFTRUE 49526
49518: LD_INT 3
49520: DOUBLE
49521: EQUAL
49522: IFTRUE 49526
49524: GO 49582
49526: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49527: LD_ADDR_VAR 0 9
49531: PUSH
49532: LD_VAR 0 29
49536: PUSH
49537: LD_VAR 0 30
49541: PUSH
49542: LD_VAR 0 31
49546: PUSH
49547: LD_VAR 0 32
49551: PUSH
49552: LD_VAR 0 33
49556: PUSH
49557: LD_VAR 0 34
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: LD_VAR 0 4
49574: PUSH
49575: LD_INT 1
49577: PLUS
49578: ARRAY
49579: ST_TO_ADDR
49580: GO 50065
49582: LD_INT 16
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49644
49588: LD_INT 17
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49644
49594: LD_INT 18
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49644
49600: LD_INT 19
49602: DOUBLE
49603: EQUAL
49604: IFTRUE 49644
49606: LD_INT 22
49608: DOUBLE
49609: EQUAL
49610: IFTRUE 49644
49612: LD_INT 20
49614: DOUBLE
49615: EQUAL
49616: IFTRUE 49644
49618: LD_INT 21
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49644
49624: LD_INT 23
49626: DOUBLE
49627: EQUAL
49628: IFTRUE 49644
49630: LD_INT 24
49632: DOUBLE
49633: EQUAL
49634: IFTRUE 49644
49636: LD_INT 25
49638: DOUBLE
49639: EQUAL
49640: IFTRUE 49644
49642: GO 49700
49644: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49645: LD_ADDR_VAR 0 9
49649: PUSH
49650: LD_VAR 0 35
49654: PUSH
49655: LD_VAR 0 36
49659: PUSH
49660: LD_VAR 0 37
49664: PUSH
49665: LD_VAR 0 38
49669: PUSH
49670: LD_VAR 0 39
49674: PUSH
49675: LD_VAR 0 40
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: PUSH
49688: LD_VAR 0 4
49692: PUSH
49693: LD_INT 1
49695: PLUS
49696: ARRAY
49697: ST_TO_ADDR
49698: GO 50065
49700: LD_INT 6
49702: DOUBLE
49703: EQUAL
49704: IFTRUE 49756
49706: LD_INT 7
49708: DOUBLE
49709: EQUAL
49710: IFTRUE 49756
49712: LD_INT 8
49714: DOUBLE
49715: EQUAL
49716: IFTRUE 49756
49718: LD_INT 13
49720: DOUBLE
49721: EQUAL
49722: IFTRUE 49756
49724: LD_INT 12
49726: DOUBLE
49727: EQUAL
49728: IFTRUE 49756
49730: LD_INT 15
49732: DOUBLE
49733: EQUAL
49734: IFTRUE 49756
49736: LD_INT 11
49738: DOUBLE
49739: EQUAL
49740: IFTRUE 49756
49742: LD_INT 14
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49756
49748: LD_INT 10
49750: DOUBLE
49751: EQUAL
49752: IFTRUE 49756
49754: GO 49812
49756: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49757: LD_ADDR_VAR 0 9
49761: PUSH
49762: LD_VAR 0 41
49766: PUSH
49767: LD_VAR 0 42
49771: PUSH
49772: LD_VAR 0 43
49776: PUSH
49777: LD_VAR 0 44
49781: PUSH
49782: LD_VAR 0 45
49786: PUSH
49787: LD_VAR 0 46
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: PUSH
49800: LD_VAR 0 4
49804: PUSH
49805: LD_INT 1
49807: PLUS
49808: ARRAY
49809: ST_TO_ADDR
49810: GO 50065
49812: LD_INT 36
49814: DOUBLE
49815: EQUAL
49816: IFTRUE 49820
49818: GO 49876
49820: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49821: LD_ADDR_VAR 0 9
49825: PUSH
49826: LD_VAR 0 47
49830: PUSH
49831: LD_VAR 0 48
49835: PUSH
49836: LD_VAR 0 49
49840: PUSH
49841: LD_VAR 0 50
49845: PUSH
49846: LD_VAR 0 51
49850: PUSH
49851: LD_VAR 0 52
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: PUSH
49864: LD_VAR 0 4
49868: PUSH
49869: LD_INT 1
49871: PLUS
49872: ARRAY
49873: ST_TO_ADDR
49874: GO 50065
49876: LD_INT 4
49878: DOUBLE
49879: EQUAL
49880: IFTRUE 49902
49882: LD_INT 5
49884: DOUBLE
49885: EQUAL
49886: IFTRUE 49902
49888: LD_INT 34
49890: DOUBLE
49891: EQUAL
49892: IFTRUE 49902
49894: LD_INT 37
49896: DOUBLE
49897: EQUAL
49898: IFTRUE 49902
49900: GO 49958
49902: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49903: LD_ADDR_VAR 0 9
49907: PUSH
49908: LD_VAR 0 53
49912: PUSH
49913: LD_VAR 0 54
49917: PUSH
49918: LD_VAR 0 55
49922: PUSH
49923: LD_VAR 0 56
49927: PUSH
49928: LD_VAR 0 57
49932: PUSH
49933: LD_VAR 0 58
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: PUSH
49946: LD_VAR 0 4
49950: PUSH
49951: LD_INT 1
49953: PLUS
49954: ARRAY
49955: ST_TO_ADDR
49956: GO 50065
49958: LD_INT 31
49960: DOUBLE
49961: EQUAL
49962: IFTRUE 50008
49964: LD_INT 32
49966: DOUBLE
49967: EQUAL
49968: IFTRUE 50008
49970: LD_INT 33
49972: DOUBLE
49973: EQUAL
49974: IFTRUE 50008
49976: LD_INT 27
49978: DOUBLE
49979: EQUAL
49980: IFTRUE 50008
49982: LD_INT 26
49984: DOUBLE
49985: EQUAL
49986: IFTRUE 50008
49988: LD_INT 28
49990: DOUBLE
49991: EQUAL
49992: IFTRUE 50008
49994: LD_INT 29
49996: DOUBLE
49997: EQUAL
49998: IFTRUE 50008
50000: LD_INT 30
50002: DOUBLE
50003: EQUAL
50004: IFTRUE 50008
50006: GO 50064
50008: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50009: LD_ADDR_VAR 0 9
50013: PUSH
50014: LD_VAR 0 59
50018: PUSH
50019: LD_VAR 0 60
50023: PUSH
50024: LD_VAR 0 61
50028: PUSH
50029: LD_VAR 0 62
50033: PUSH
50034: LD_VAR 0 63
50038: PUSH
50039: LD_VAR 0 64
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: PUSH
50052: LD_VAR 0 4
50056: PUSH
50057: LD_INT 1
50059: PLUS
50060: ARRAY
50061: ST_TO_ADDR
50062: GO 50065
50064: POP
// temp_list2 = [ ] ;
50065: LD_ADDR_VAR 0 10
50069: PUSH
50070: EMPTY
50071: ST_TO_ADDR
// for i in temp_list do
50072: LD_ADDR_VAR 0 8
50076: PUSH
50077: LD_VAR 0 9
50081: PUSH
50082: FOR_IN
50083: IFFALSE 50135
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50085: LD_ADDR_VAR 0 10
50089: PUSH
50090: LD_VAR 0 10
50094: PUSH
50095: LD_VAR 0 8
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: PUSH
50104: LD_VAR 0 2
50108: PLUS
50109: PUSH
50110: LD_VAR 0 8
50114: PUSH
50115: LD_INT 2
50117: ARRAY
50118: PUSH
50119: LD_VAR 0 3
50123: PLUS
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: ADD
50132: ST_TO_ADDR
50133: GO 50082
50135: POP
50136: POP
// result = temp_list2 ;
50137: LD_ADDR_VAR 0 7
50141: PUSH
50142: LD_VAR 0 10
50146: ST_TO_ADDR
// end ;
50147: LD_VAR 0 7
50151: RET
// export function EnemyInRange ( unit , dist ) ; begin
50152: LD_INT 0
50154: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50155: LD_ADDR_VAR 0 3
50159: PUSH
50160: LD_VAR 0 1
50164: PPUSH
50165: CALL_OW 255
50169: PPUSH
50170: LD_VAR 0 1
50174: PPUSH
50175: CALL_OW 250
50179: PPUSH
50180: LD_VAR 0 1
50184: PPUSH
50185: CALL_OW 251
50189: PPUSH
50190: LD_VAR 0 2
50194: PPUSH
50195: CALL 23409 0 4
50199: PUSH
50200: LD_INT 4
50202: ARRAY
50203: ST_TO_ADDR
// end ;
50204: LD_VAR 0 3
50208: RET
// export function PlayerSeeMe ( unit ) ; begin
50209: LD_INT 0
50211: PPUSH
// result := See ( your_side , unit ) ;
50212: LD_ADDR_VAR 0 2
50216: PUSH
50217: LD_OWVAR 2
50221: PPUSH
50222: LD_VAR 0 1
50226: PPUSH
50227: CALL_OW 292
50231: ST_TO_ADDR
// end ;
50232: LD_VAR 0 2
50236: RET
// export function ReverseDir ( unit ) ; begin
50237: LD_INT 0
50239: PPUSH
// if not unit then
50240: LD_VAR 0 1
50244: NOT
50245: IFFALSE 50249
// exit ;
50247: GO 50272
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50249: LD_ADDR_VAR 0 2
50253: PUSH
50254: LD_VAR 0 1
50258: PPUSH
50259: CALL_OW 254
50263: PUSH
50264: LD_INT 3
50266: PLUS
50267: PUSH
50268: LD_INT 6
50270: MOD
50271: ST_TO_ADDR
// end ;
50272: LD_VAR 0 2
50276: RET
// export function ReverseArray ( array ) ; var i ; begin
50277: LD_INT 0
50279: PPUSH
50280: PPUSH
// if not array then
50281: LD_VAR 0 1
50285: NOT
50286: IFFALSE 50290
// exit ;
50288: GO 50345
// result := [ ] ;
50290: LD_ADDR_VAR 0 2
50294: PUSH
50295: EMPTY
50296: ST_TO_ADDR
// for i := array downto 1 do
50297: LD_ADDR_VAR 0 3
50301: PUSH
50302: DOUBLE
50303: LD_VAR 0 1
50307: INC
50308: ST_TO_ADDR
50309: LD_INT 1
50311: PUSH
50312: FOR_DOWNTO
50313: IFFALSE 50343
// result := Join ( result , array [ i ] ) ;
50315: LD_ADDR_VAR 0 2
50319: PUSH
50320: LD_VAR 0 2
50324: PPUSH
50325: LD_VAR 0 1
50329: PUSH
50330: LD_VAR 0 3
50334: ARRAY
50335: PPUSH
50336: CALL 55187 0 2
50340: ST_TO_ADDR
50341: GO 50312
50343: POP
50344: POP
// end ;
50345: LD_VAR 0 2
50349: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50350: LD_INT 0
50352: PPUSH
50353: PPUSH
50354: PPUSH
50355: PPUSH
50356: PPUSH
50357: PPUSH
// if not unit or not hexes then
50358: LD_VAR 0 1
50362: NOT
50363: IFTRUE 50372
50365: PUSH
50366: LD_VAR 0 2
50370: NOT
50371: OR
50372: IFFALSE 50376
// exit ;
50374: GO 50499
// dist := 9999 ;
50376: LD_ADDR_VAR 0 5
50380: PUSH
50381: LD_INT 9999
50383: ST_TO_ADDR
// for i = 1 to hexes do
50384: LD_ADDR_VAR 0 4
50388: PUSH
50389: DOUBLE
50390: LD_INT 1
50392: DEC
50393: ST_TO_ADDR
50394: LD_VAR 0 2
50398: PUSH
50399: FOR_TO
50400: IFFALSE 50487
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50402: LD_ADDR_VAR 0 6
50406: PUSH
50407: LD_VAR 0 1
50411: PPUSH
50412: LD_VAR 0 2
50416: PUSH
50417: LD_VAR 0 4
50421: ARRAY
50422: PUSH
50423: LD_INT 1
50425: ARRAY
50426: PPUSH
50427: LD_VAR 0 2
50431: PUSH
50432: LD_VAR 0 4
50436: ARRAY
50437: PUSH
50438: LD_INT 2
50440: ARRAY
50441: PPUSH
50442: CALL_OW 297
50446: ST_TO_ADDR
// if tdist < dist then
50447: LD_VAR 0 6
50451: PUSH
50452: LD_VAR 0 5
50456: LESS
50457: IFFALSE 50485
// begin hex := hexes [ i ] ;
50459: LD_ADDR_VAR 0 8
50463: PUSH
50464: LD_VAR 0 2
50468: PUSH
50469: LD_VAR 0 4
50473: ARRAY
50474: ST_TO_ADDR
// dist := tdist ;
50475: LD_ADDR_VAR 0 5
50479: PUSH
50480: LD_VAR 0 6
50484: ST_TO_ADDR
// end ; end ;
50485: GO 50399
50487: POP
50488: POP
// result := hex ;
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: LD_VAR 0 8
50498: ST_TO_ADDR
// end ;
50499: LD_VAR 0 3
50503: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50504: LD_INT 0
50506: PPUSH
50507: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50508: LD_VAR 0 1
50512: NOT
50513: IFTRUE 50552
50515: PUSH
50516: LD_VAR 0 1
50520: PUSH
50521: LD_INT 21
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 23
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PPUSH
50545: CALL_OW 69
50549: IN
50550: NOT
50551: OR
50552: IFFALSE 50556
// exit ;
50554: GO 50603
// for i = 1 to 3 do
50556: LD_ADDR_VAR 0 3
50560: PUSH
50561: DOUBLE
50562: LD_INT 1
50564: DEC
50565: ST_TO_ADDR
50566: LD_INT 3
50568: PUSH
50569: FOR_TO
50570: IFFALSE 50601
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50572: LD_VAR 0 1
50576: PPUSH
50577: CALL_OW 250
50581: PPUSH
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 251
50591: PPUSH
50592: LD_INT 1
50594: PPUSH
50595: CALL_OW 453
50599: GO 50569
50601: POP
50602: POP
// end ;
50603: LD_VAR 0 2
50607: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50608: LD_INT 0
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
// if not unit or not enemy_unit then
50616: LD_VAR 0 1
50620: NOT
50621: IFTRUE 50630
50623: PUSH
50624: LD_VAR 0 2
50628: NOT
50629: OR
50630: IFFALSE 50634
// exit ;
50632: GO 51105
// if GetLives ( i ) < 250 then
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 256
50643: PUSH
50644: LD_INT 250
50646: LESS
50647: IFFALSE 50660
// begin ComAutodestruct ( i ) ;
50649: LD_VAR 0 4
50653: PPUSH
50654: CALL 50504 0 1
// exit ;
50658: GO 51105
// end ; x := GetX ( enemy_unit ) ;
50660: LD_ADDR_VAR 0 7
50664: PUSH
50665: LD_VAR 0 2
50669: PPUSH
50670: CALL_OW 250
50674: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50675: LD_ADDR_VAR 0 8
50679: PUSH
50680: LD_VAR 0 2
50684: PPUSH
50685: CALL_OW 251
50689: ST_TO_ADDR
// if not x or not y then
50690: LD_VAR 0 7
50694: NOT
50695: IFTRUE 50704
50697: PUSH
50698: LD_VAR 0 8
50702: NOT
50703: OR
50704: IFFALSE 50708
// exit ;
50706: GO 51105
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50708: LD_ADDR_VAR 0 6
50712: PUSH
50713: LD_VAR 0 7
50717: PPUSH
50718: LD_INT 0
50720: PPUSH
50721: LD_INT 4
50723: PPUSH
50724: CALL_OW 272
50728: PUSH
50729: LD_VAR 0 8
50733: PPUSH
50734: LD_INT 0
50736: PPUSH
50737: LD_INT 4
50739: PPUSH
50740: CALL_OW 273
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_VAR 0 7
50753: PPUSH
50754: LD_INT 1
50756: PPUSH
50757: LD_INT 4
50759: PPUSH
50760: CALL_OW 272
50764: PUSH
50765: LD_VAR 0 8
50769: PPUSH
50770: LD_INT 1
50772: PPUSH
50773: LD_INT 4
50775: PPUSH
50776: CALL_OW 273
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_VAR 0 7
50789: PPUSH
50790: LD_INT 2
50792: PPUSH
50793: LD_INT 4
50795: PPUSH
50796: CALL_OW 272
50800: PUSH
50801: LD_VAR 0 8
50805: PPUSH
50806: LD_INT 2
50808: PPUSH
50809: LD_INT 4
50811: PPUSH
50812: CALL_OW 273
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_VAR 0 7
50825: PPUSH
50826: LD_INT 3
50828: PPUSH
50829: LD_INT 4
50831: PPUSH
50832: CALL_OW 272
50836: PUSH
50837: LD_VAR 0 8
50841: PPUSH
50842: LD_INT 3
50844: PPUSH
50845: LD_INT 4
50847: PPUSH
50848: CALL_OW 273
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_VAR 0 7
50861: PPUSH
50862: LD_INT 4
50864: PPUSH
50865: LD_INT 4
50867: PPUSH
50868: CALL_OW 272
50872: PUSH
50873: LD_VAR 0 8
50877: PPUSH
50878: LD_INT 4
50880: PPUSH
50881: LD_INT 4
50883: PPUSH
50884: CALL_OW 273
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_VAR 0 7
50897: PPUSH
50898: LD_INT 5
50900: PPUSH
50901: LD_INT 4
50903: PPUSH
50904: CALL_OW 272
50908: PUSH
50909: LD_VAR 0 8
50913: PPUSH
50914: LD_INT 5
50916: PPUSH
50917: LD_INT 4
50919: PPUSH
50920: CALL_OW 273
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// for i = tmp downto 1 do
50937: LD_ADDR_VAR 0 4
50941: PUSH
50942: DOUBLE
50943: LD_VAR 0 6
50947: INC
50948: ST_TO_ADDR
50949: LD_INT 1
50951: PUSH
50952: FOR_DOWNTO
50953: IFFALSE 51056
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50955: LD_VAR 0 6
50959: PUSH
50960: LD_VAR 0 4
50964: ARRAY
50965: PUSH
50966: LD_INT 1
50968: ARRAY
50969: PPUSH
50970: LD_VAR 0 6
50974: PUSH
50975: LD_VAR 0 4
50979: ARRAY
50980: PUSH
50981: LD_INT 2
50983: ARRAY
50984: PPUSH
50985: CALL_OW 488
50989: NOT
50990: IFTRUE 51032
50992: PUSH
50993: LD_VAR 0 6
50997: PUSH
50998: LD_VAR 0 4
51002: ARRAY
51003: PUSH
51004: LD_INT 1
51006: ARRAY
51007: PPUSH
51008: LD_VAR 0 6
51012: PUSH
51013: LD_VAR 0 4
51017: ARRAY
51018: PUSH
51019: LD_INT 2
51021: ARRAY
51022: PPUSH
51023: CALL_OW 428
51027: PUSH
51028: LD_INT 0
51030: NONEQUAL
51031: OR
51032: IFFALSE 51054
// tmp := Delete ( tmp , i ) ;
51034: LD_ADDR_VAR 0 6
51038: PUSH
51039: LD_VAR 0 6
51043: PPUSH
51044: LD_VAR 0 4
51048: PPUSH
51049: CALL_OW 3
51053: ST_TO_ADDR
51054: GO 50952
51056: POP
51057: POP
// j := GetClosestHex ( unit , tmp ) ;
51058: LD_ADDR_VAR 0 5
51062: PUSH
51063: LD_VAR 0 1
51067: PPUSH
51068: LD_VAR 0 6
51072: PPUSH
51073: CALL 50350 0 2
51077: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51078: LD_VAR 0 1
51082: PPUSH
51083: LD_VAR 0 5
51087: PUSH
51088: LD_INT 1
51090: ARRAY
51091: PPUSH
51092: LD_VAR 0 5
51096: PUSH
51097: LD_INT 2
51099: ARRAY
51100: PPUSH
51101: CALL_OW 111
// end ;
51105: LD_VAR 0 3
51109: RET
// export function PrepareApemanSoldier ( ) ; begin
51110: LD_INT 0
51112: PPUSH
// uc_nation := 0 ;
51113: LD_ADDR_OWVAR 21
51117: PUSH
51118: LD_INT 0
51120: ST_TO_ADDR
// hc_sex := sex_male ;
51121: LD_ADDR_OWVAR 27
51125: PUSH
51126: LD_INT 1
51128: ST_TO_ADDR
// hc_name :=  ;
51129: LD_ADDR_OWVAR 26
51133: PUSH
51134: LD_STRING 
51136: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51137: LD_ADDR_OWVAR 28
51141: PUSH
51142: LD_INT 15
51144: ST_TO_ADDR
// hc_gallery :=  ;
51145: LD_ADDR_OWVAR 33
51149: PUSH
51150: LD_STRING 
51152: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51153: LD_ADDR_OWVAR 31
51157: PUSH
51158: LD_INT 0
51160: PPUSH
51161: LD_INT 3
51163: PPUSH
51164: CALL_OW 12
51168: PUSH
51169: LD_INT 0
51171: PPUSH
51172: LD_INT 3
51174: PPUSH
51175: CALL_OW 12
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51192: LD_ADDR_OWVAR 29
51196: PUSH
51197: LD_INT 12
51199: PUSH
51200: LD_INT 12
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: ST_TO_ADDR
// end ;
51207: LD_VAR 0 1
51211: RET
// export function PrepareApemanEngineer ( ) ; begin
51212: LD_INT 0
51214: PPUSH
// uc_nation := 0 ;
51215: LD_ADDR_OWVAR 21
51219: PUSH
51220: LD_INT 0
51222: ST_TO_ADDR
// hc_sex := sex_male ;
51223: LD_ADDR_OWVAR 27
51227: PUSH
51228: LD_INT 1
51230: ST_TO_ADDR
// hc_name :=  ;
51231: LD_ADDR_OWVAR 26
51235: PUSH
51236: LD_STRING 
51238: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51239: LD_ADDR_OWVAR 28
51243: PUSH
51244: LD_INT 16
51246: ST_TO_ADDR
// hc_gallery :=  ;
51247: LD_ADDR_OWVAR 33
51251: PUSH
51252: LD_STRING 
51254: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51255: LD_ADDR_OWVAR 31
51259: PUSH
51260: LD_INT 0
51262: PPUSH
51263: LD_INT 3
51265: PPUSH
51266: CALL_OW 12
51270: PUSH
51271: LD_INT 0
51273: PPUSH
51274: LD_INT 3
51276: PPUSH
51277: CALL_OW 12
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51294: LD_ADDR_OWVAR 29
51298: PUSH
51299: LD_INT 12
51301: PUSH
51302: LD_INT 12
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// end ;
51309: LD_VAR 0 1
51313: RET
// export function PrepareApeman ( agressivity ) ; begin
51314: LD_INT 0
51316: PPUSH
// uc_side := 0 ;
51317: LD_ADDR_OWVAR 20
51321: PUSH
51322: LD_INT 0
51324: ST_TO_ADDR
// uc_nation := 0 ;
51325: LD_ADDR_OWVAR 21
51329: PUSH
51330: LD_INT 0
51332: ST_TO_ADDR
// hc_sex := sex_male ;
51333: LD_ADDR_OWVAR 27
51337: PUSH
51338: LD_INT 1
51340: ST_TO_ADDR
// hc_class := class_apeman ;
51341: LD_ADDR_OWVAR 28
51345: PUSH
51346: LD_INT 12
51348: ST_TO_ADDR
// hc_gallery :=  ;
51349: LD_ADDR_OWVAR 33
51353: PUSH
51354: LD_STRING 
51356: ST_TO_ADDR
// hc_name :=  ;
51357: LD_ADDR_OWVAR 26
51361: PUSH
51362: LD_STRING 
51364: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51365: LD_ADDR_OWVAR 29
51369: PUSH
51370: LD_INT 12
51372: PUSH
51373: LD_INT 12
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// if agressivity = 0 then
51380: LD_VAR 0 1
51384: PUSH
51385: LD_INT 0
51387: EQUAL
51388: IFFALSE 51400
// hc_agressivity := 0 else
51390: LD_ADDR_OWVAR 35
51394: PUSH
51395: LD_INT 0
51397: ST_TO_ADDR
51398: GO 51421
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51400: LD_ADDR_OWVAR 35
51404: PUSH
51405: LD_VAR 0 1
51409: NEG
51410: PPUSH
51411: LD_VAR 0 1
51415: PPUSH
51416: CALL_OW 12
51420: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51421: LD_ADDR_OWVAR 31
51425: PUSH
51426: LD_INT 0
51428: PPUSH
51429: LD_INT 3
51431: PPUSH
51432: CALL_OW 12
51436: PUSH
51437: LD_INT 0
51439: PPUSH
51440: LD_INT 3
51442: PPUSH
51443: CALL_OW 12
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// end ;
51460: LD_VAR 0 2
51464: RET
// export function PrepareTiger ( agressivity ) ; begin
51465: LD_INT 0
51467: PPUSH
// uc_side := 0 ;
51468: LD_ADDR_OWVAR 20
51472: PUSH
51473: LD_INT 0
51475: ST_TO_ADDR
// uc_nation := 0 ;
51476: LD_ADDR_OWVAR 21
51480: PUSH
51481: LD_INT 0
51483: ST_TO_ADDR
// InitHc ;
51484: CALL_OW 19
// hc_class := class_tiger ;
51488: LD_ADDR_OWVAR 28
51492: PUSH
51493: LD_INT 14
51495: ST_TO_ADDR
// hc_gallery :=  ;
51496: LD_ADDR_OWVAR 33
51500: PUSH
51501: LD_STRING 
51503: ST_TO_ADDR
// hc_name :=  ;
51504: LD_ADDR_OWVAR 26
51508: PUSH
51509: LD_STRING 
51511: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51512: LD_ADDR_OWVAR 35
51516: PUSH
51517: LD_VAR 0 1
51521: NEG
51522: PPUSH
51523: LD_VAR 0 1
51527: PPUSH
51528: CALL_OW 12
51532: ST_TO_ADDR
// end ;
51533: LD_VAR 0 2
51537: RET
// export function PrepareEnchidna ( ) ; begin
51538: LD_INT 0
51540: PPUSH
// uc_side := 0 ;
51541: LD_ADDR_OWVAR 20
51545: PUSH
51546: LD_INT 0
51548: ST_TO_ADDR
// uc_nation := 0 ;
51549: LD_ADDR_OWVAR 21
51553: PUSH
51554: LD_INT 0
51556: ST_TO_ADDR
// InitHc ;
51557: CALL_OW 19
// hc_class := class_baggie ;
51561: LD_ADDR_OWVAR 28
51565: PUSH
51566: LD_INT 13
51568: ST_TO_ADDR
// hc_gallery :=  ;
51569: LD_ADDR_OWVAR 33
51573: PUSH
51574: LD_STRING 
51576: ST_TO_ADDR
// hc_name :=  ;
51577: LD_ADDR_OWVAR 26
51581: PUSH
51582: LD_STRING 
51584: ST_TO_ADDR
// end ;
51585: LD_VAR 0 1
51589: RET
// export function PrepareFrog ( ) ; begin
51590: LD_INT 0
51592: PPUSH
// uc_side := 0 ;
51593: LD_ADDR_OWVAR 20
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// uc_nation := 0 ;
51601: LD_ADDR_OWVAR 21
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// InitHc ;
51609: CALL_OW 19
// hc_class := class_frog ;
51613: LD_ADDR_OWVAR 28
51617: PUSH
51618: LD_INT 19
51620: ST_TO_ADDR
// hc_gallery :=  ;
51621: LD_ADDR_OWVAR 33
51625: PUSH
51626: LD_STRING 
51628: ST_TO_ADDR
// hc_name :=  ;
51629: LD_ADDR_OWVAR 26
51633: PUSH
51634: LD_STRING 
51636: ST_TO_ADDR
// end ;
51637: LD_VAR 0 1
51641: RET
// export function PrepareFish ( ) ; begin
51642: LD_INT 0
51644: PPUSH
// uc_side := 0 ;
51645: LD_ADDR_OWVAR 20
51649: PUSH
51650: LD_INT 0
51652: ST_TO_ADDR
// uc_nation := 0 ;
51653: LD_ADDR_OWVAR 21
51657: PUSH
51658: LD_INT 0
51660: ST_TO_ADDR
// InitHc ;
51661: CALL_OW 19
// hc_class := class_fish ;
51665: LD_ADDR_OWVAR 28
51669: PUSH
51670: LD_INT 20
51672: ST_TO_ADDR
// hc_gallery :=  ;
51673: LD_ADDR_OWVAR 33
51677: PUSH
51678: LD_STRING 
51680: ST_TO_ADDR
// hc_name :=  ;
51681: LD_ADDR_OWVAR 26
51685: PUSH
51686: LD_STRING 
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 1
51693: RET
// export function PrepareBird ( ) ; begin
51694: LD_INT 0
51696: PPUSH
// uc_side := 0 ;
51697: LD_ADDR_OWVAR 20
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// uc_nation := 0 ;
51705: LD_ADDR_OWVAR 21
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// InitHc ;
51713: CALL_OW 19
// hc_class := class_phororhacos ;
51717: LD_ADDR_OWVAR 28
51721: PUSH
51722: LD_INT 18
51724: ST_TO_ADDR
// hc_gallery :=  ;
51725: LD_ADDR_OWVAR 33
51729: PUSH
51730: LD_STRING 
51732: ST_TO_ADDR
// hc_name :=  ;
51733: LD_ADDR_OWVAR 26
51737: PUSH
51738: LD_STRING 
51740: ST_TO_ADDR
// end ;
51741: LD_VAR 0 1
51745: RET
// export function PrepareHorse ( ) ; begin
51746: LD_INT 0
51748: PPUSH
// uc_side := 0 ;
51749: LD_ADDR_OWVAR 20
51753: PUSH
51754: LD_INT 0
51756: ST_TO_ADDR
// uc_nation := 0 ;
51757: LD_ADDR_OWVAR 21
51761: PUSH
51762: LD_INT 0
51764: ST_TO_ADDR
// InitHc ;
51765: CALL_OW 19
// hc_class := class_horse ;
51769: LD_ADDR_OWVAR 28
51773: PUSH
51774: LD_INT 21
51776: ST_TO_ADDR
// hc_gallery :=  ;
51777: LD_ADDR_OWVAR 33
51781: PUSH
51782: LD_STRING 
51784: ST_TO_ADDR
// hc_name :=  ;
51785: LD_ADDR_OWVAR 26
51789: PUSH
51790: LD_STRING 
51792: ST_TO_ADDR
// end ;
51793: LD_VAR 0 1
51797: RET
// export function PrepareMastodont ( ) ; begin
51798: LD_INT 0
51800: PPUSH
// uc_side := 0 ;
51801: LD_ADDR_OWVAR 20
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// uc_nation := 0 ;
51809: LD_ADDR_OWVAR 21
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51817: LD_ADDR_OWVAR 37
51821: PUSH
51822: LD_INT 31
51824: ST_TO_ADDR
// vc_control := control_rider ;
51825: LD_ADDR_OWVAR 38
51829: PUSH
51830: LD_INT 4
51832: ST_TO_ADDR
// end ;
51833: LD_VAR 0 1
51837: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51838: LD_INT 0
51840: PPUSH
51841: PPUSH
51842: PPUSH
// uc_side = 0 ;
51843: LD_ADDR_OWVAR 20
51847: PUSH
51848: LD_INT 0
51850: ST_TO_ADDR
// uc_nation = 0 ;
51851: LD_ADDR_OWVAR 21
51855: PUSH
51856: LD_INT 0
51858: ST_TO_ADDR
// InitHc_All ( ) ;
51859: CALL_OW 584
// InitVc ;
51863: CALL_OW 20
// if mastodonts then
51867: LD_VAR 0 6
51871: IFFALSE 51938
// for i = 1 to mastodonts do
51873: LD_ADDR_VAR 0 11
51877: PUSH
51878: DOUBLE
51879: LD_INT 1
51881: DEC
51882: ST_TO_ADDR
51883: LD_VAR 0 6
51887: PUSH
51888: FOR_TO
51889: IFFALSE 51936
// begin vc_chassis := 31 ;
51891: LD_ADDR_OWVAR 37
51895: PUSH
51896: LD_INT 31
51898: ST_TO_ADDR
// vc_control := control_rider ;
51899: LD_ADDR_OWVAR 38
51903: PUSH
51904: LD_INT 4
51906: ST_TO_ADDR
// animal := CreateVehicle ;
51907: LD_ADDR_VAR 0 12
51911: PUSH
51912: CALL_OW 45
51916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51917: LD_VAR 0 12
51921: PPUSH
51922: LD_VAR 0 8
51926: PPUSH
51927: LD_INT 0
51929: PPUSH
51930: CALL 54080 0 3
// end ;
51934: GO 51888
51936: POP
51937: POP
// if horses then
51938: LD_VAR 0 5
51942: IFFALSE 52009
// for i = 1 to horses do
51944: LD_ADDR_VAR 0 11
51948: PUSH
51949: DOUBLE
51950: LD_INT 1
51952: DEC
51953: ST_TO_ADDR
51954: LD_VAR 0 5
51958: PUSH
51959: FOR_TO
51960: IFFALSE 52007
// begin hc_class := 21 ;
51962: LD_ADDR_OWVAR 28
51966: PUSH
51967: LD_INT 21
51969: ST_TO_ADDR
// hc_gallery :=  ;
51970: LD_ADDR_OWVAR 33
51974: PUSH
51975: LD_STRING 
51977: ST_TO_ADDR
// animal := CreateHuman ;
51978: LD_ADDR_VAR 0 12
51982: PUSH
51983: CALL_OW 44
51987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51988: LD_VAR 0 12
51992: PPUSH
51993: LD_VAR 0 8
51997: PPUSH
51998: LD_INT 0
52000: PPUSH
52001: CALL 54080 0 3
// end ;
52005: GO 51959
52007: POP
52008: POP
// if birds then
52009: LD_VAR 0 1
52013: IFFALSE 52080
// for i = 1 to birds do
52015: LD_ADDR_VAR 0 11
52019: PUSH
52020: DOUBLE
52021: LD_INT 1
52023: DEC
52024: ST_TO_ADDR
52025: LD_VAR 0 1
52029: PUSH
52030: FOR_TO
52031: IFFALSE 52078
// begin hc_class := 18 ;
52033: LD_ADDR_OWVAR 28
52037: PUSH
52038: LD_INT 18
52040: ST_TO_ADDR
// hc_gallery =  ;
52041: LD_ADDR_OWVAR 33
52045: PUSH
52046: LD_STRING 
52048: ST_TO_ADDR
// animal := CreateHuman ;
52049: LD_ADDR_VAR 0 12
52053: PUSH
52054: CALL_OW 44
52058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52059: LD_VAR 0 12
52063: PPUSH
52064: LD_VAR 0 8
52068: PPUSH
52069: LD_INT 0
52071: PPUSH
52072: CALL 54080 0 3
// end ;
52076: GO 52030
52078: POP
52079: POP
// if tigers then
52080: LD_VAR 0 2
52084: IFFALSE 52168
// for i = 1 to tigers do
52086: LD_ADDR_VAR 0 11
52090: PUSH
52091: DOUBLE
52092: LD_INT 1
52094: DEC
52095: ST_TO_ADDR
52096: LD_VAR 0 2
52100: PUSH
52101: FOR_TO
52102: IFFALSE 52166
// begin hc_class = class_tiger ;
52104: LD_ADDR_OWVAR 28
52108: PUSH
52109: LD_INT 14
52111: ST_TO_ADDR
// hc_gallery =  ;
52112: LD_ADDR_OWVAR 33
52116: PUSH
52117: LD_STRING 
52119: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52120: LD_ADDR_OWVAR 35
52124: PUSH
52125: LD_INT 7
52127: NEG
52128: PPUSH
52129: LD_INT 7
52131: PPUSH
52132: CALL_OW 12
52136: ST_TO_ADDR
// animal := CreateHuman ;
52137: LD_ADDR_VAR 0 12
52141: PUSH
52142: CALL_OW 44
52146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52147: LD_VAR 0 12
52151: PPUSH
52152: LD_VAR 0 8
52156: PPUSH
52157: LD_INT 0
52159: PPUSH
52160: CALL 54080 0 3
// end ;
52164: GO 52101
52166: POP
52167: POP
// if apemans then
52168: LD_VAR 0 3
52172: IFFALSE 52295
// for i = 1 to apemans do
52174: LD_ADDR_VAR 0 11
52178: PUSH
52179: DOUBLE
52180: LD_INT 1
52182: DEC
52183: ST_TO_ADDR
52184: LD_VAR 0 3
52188: PUSH
52189: FOR_TO
52190: IFFALSE 52293
// begin hc_class = class_apeman ;
52192: LD_ADDR_OWVAR 28
52196: PUSH
52197: LD_INT 12
52199: ST_TO_ADDR
// hc_gallery =  ;
52200: LD_ADDR_OWVAR 33
52204: PUSH
52205: LD_STRING 
52207: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52208: LD_ADDR_OWVAR 35
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PPUSH
52217: LD_INT 2
52219: PPUSH
52220: CALL_OW 12
52224: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52225: LD_ADDR_OWVAR 31
52229: PUSH
52230: LD_INT 1
52232: PPUSH
52233: LD_INT 3
52235: PPUSH
52236: CALL_OW 12
52240: PUSH
52241: LD_INT 1
52243: PPUSH
52244: LD_INT 3
52246: PPUSH
52247: CALL_OW 12
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// animal := CreateHuman ;
52264: LD_ADDR_VAR 0 12
52268: PUSH
52269: CALL_OW 44
52273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52274: LD_VAR 0 12
52278: PPUSH
52279: LD_VAR 0 8
52283: PPUSH
52284: LD_INT 0
52286: PPUSH
52287: CALL 54080 0 3
// end ;
52291: GO 52189
52293: POP
52294: POP
// if enchidnas then
52295: LD_VAR 0 4
52299: IFFALSE 52366
// for i = 1 to enchidnas do
52301: LD_ADDR_VAR 0 11
52305: PUSH
52306: DOUBLE
52307: LD_INT 1
52309: DEC
52310: ST_TO_ADDR
52311: LD_VAR 0 4
52315: PUSH
52316: FOR_TO
52317: IFFALSE 52364
// begin hc_class = 13 ;
52319: LD_ADDR_OWVAR 28
52323: PUSH
52324: LD_INT 13
52326: ST_TO_ADDR
// hc_gallery =  ;
52327: LD_ADDR_OWVAR 33
52331: PUSH
52332: LD_STRING 
52334: ST_TO_ADDR
// animal := CreateHuman ;
52335: LD_ADDR_VAR 0 12
52339: PUSH
52340: CALL_OW 44
52344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52345: LD_VAR 0 12
52349: PPUSH
52350: LD_VAR 0 8
52354: PPUSH
52355: LD_INT 0
52357: PPUSH
52358: CALL 54080 0 3
// end ;
52362: GO 52316
52364: POP
52365: POP
// if fishes then
52366: LD_VAR 0 7
52370: IFFALSE 52437
// for i = 1 to fishes do
52372: LD_ADDR_VAR 0 11
52376: PUSH
52377: DOUBLE
52378: LD_INT 1
52380: DEC
52381: ST_TO_ADDR
52382: LD_VAR 0 7
52386: PUSH
52387: FOR_TO
52388: IFFALSE 52435
// begin hc_class = 20 ;
52390: LD_ADDR_OWVAR 28
52394: PUSH
52395: LD_INT 20
52397: ST_TO_ADDR
// hc_gallery =  ;
52398: LD_ADDR_OWVAR 33
52402: PUSH
52403: LD_STRING 
52405: ST_TO_ADDR
// animal := CreateHuman ;
52406: LD_ADDR_VAR 0 12
52410: PUSH
52411: CALL_OW 44
52415: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52416: LD_VAR 0 12
52420: PPUSH
52421: LD_VAR 0 9
52425: PPUSH
52426: LD_INT 0
52428: PPUSH
52429: CALL 54080 0 3
// end ;
52433: GO 52387
52435: POP
52436: POP
// end ;
52437: LD_VAR 0 10
52441: RET
// export function WantHeal ( sci , unit ) ; begin
52442: LD_INT 0
52444: PPUSH
// if GetTaskList ( sci ) > 0 then
52445: LD_VAR 0 1
52449: PPUSH
52450: CALL_OW 437
52454: PUSH
52455: LD_INT 0
52457: GREATER
52458: IFFALSE 52530
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 437
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: PUSH
52478: LD_STRING l
52480: EQUAL
52481: IFFALSE 52508
52483: PUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: CALL_OW 437
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: PUSH
52498: LD_INT 4
52500: ARRAY
52501: PUSH
52502: LD_VAR 0 2
52506: EQUAL
52507: AND
52508: IFFALSE 52520
// result := true else
52510: LD_ADDR_VAR 0 3
52514: PUSH
52515: LD_INT 1
52517: ST_TO_ADDR
52518: GO 52528
// result := false ;
52520: LD_ADDR_VAR 0 3
52524: PUSH
52525: LD_INT 0
52527: ST_TO_ADDR
// end else
52528: GO 52538
// result := false ;
52530: LD_ADDR_VAR 0 3
52534: PUSH
52535: LD_INT 0
52537: ST_TO_ADDR
// end ;
52538: LD_VAR 0 3
52542: RET
// export function HealTarget ( sci ) ; begin
52543: LD_INT 0
52545: PPUSH
// if not sci then
52546: LD_VAR 0 1
52550: NOT
52551: IFFALSE 52555
// exit ;
52553: GO 52620
// result := 0 ;
52555: LD_ADDR_VAR 0 2
52559: PUSH
52560: LD_INT 0
52562: ST_TO_ADDR
// if GetTaskList ( sci ) then
52563: LD_VAR 0 1
52567: PPUSH
52568: CALL_OW 437
52572: IFFALSE 52620
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 437
52583: PUSH
52584: LD_INT 1
52586: ARRAY
52587: PUSH
52588: LD_INT 1
52590: ARRAY
52591: PUSH
52592: LD_STRING l
52594: EQUAL
52595: IFFALSE 52620
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52597: LD_ADDR_VAR 0 2
52601: PUSH
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 437
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PUSH
52616: LD_INT 4
52618: ARRAY
52619: ST_TO_ADDR
// end ;
52620: LD_VAR 0 2
52624: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52625: LD_INT 0
52627: PPUSH
52628: PPUSH
52629: PPUSH
52630: PPUSH
// if not base_units then
52631: LD_VAR 0 1
52635: NOT
52636: IFFALSE 52640
// exit ;
52638: GO 52727
// result := false ;
52640: LD_ADDR_VAR 0 2
52644: PUSH
52645: LD_INT 0
52647: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52648: LD_ADDR_VAR 0 5
52652: PUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: LD_INT 21
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PPUSH
52668: CALL_OW 72
52672: ST_TO_ADDR
// if not tmp then
52673: LD_VAR 0 5
52677: NOT
52678: IFFALSE 52682
// exit ;
52680: GO 52727
// for i in tmp do
52682: LD_ADDR_VAR 0 3
52686: PUSH
52687: LD_VAR 0 5
52691: PUSH
52692: FOR_IN
52693: IFFALSE 52725
// begin result := EnemyInRange ( i , 22 ) ;
52695: LD_ADDR_VAR 0 2
52699: PUSH
52700: LD_VAR 0 3
52704: PPUSH
52705: LD_INT 22
52707: PPUSH
52708: CALL 50152 0 2
52712: ST_TO_ADDR
// if result then
52713: LD_VAR 0 2
52717: IFFALSE 52723
// exit ;
52719: POP
52720: POP
52721: GO 52727
// end ;
52723: GO 52692
52725: POP
52726: POP
// end ;
52727: LD_VAR 0 2
52731: RET
// export function FilterByTag ( units , tag ) ; begin
52732: LD_INT 0
52734: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52735: LD_ADDR_VAR 0 3
52739: PUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: LD_INT 120
52747: PUSH
52748: LD_VAR 0 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 72
52761: ST_TO_ADDR
// end ;
52762: LD_VAR 0 3
52766: RET
// export function IsDriver ( un ) ; begin
52767: LD_INT 0
52769: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52770: LD_ADDR_VAR 0 2
52774: PUSH
52775: LD_VAR 0 1
52779: PUSH
52780: LD_INT 55
52782: PUSH
52783: EMPTY
52784: LIST
52785: PPUSH
52786: CALL_OW 69
52790: IN
52791: ST_TO_ADDR
// end ;
52792: LD_VAR 0 2
52796: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52797: LD_INT 0
52799: PPUSH
52800: PPUSH
// list := [ ] ;
52801: LD_ADDR_VAR 0 5
52805: PUSH
52806: EMPTY
52807: ST_TO_ADDR
// case d of 0 :
52808: LD_VAR 0 3
52812: PUSH
52813: LD_INT 0
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52821
52819: GO 52954
52821: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52822: LD_ADDR_VAR 0 5
52826: PUSH
52827: LD_VAR 0 1
52831: PUSH
52832: LD_INT 4
52834: MINUS
52835: PUSH
52836: LD_VAR 0 2
52840: PUSH
52841: LD_INT 4
52843: MINUS
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: PUSH
52853: LD_VAR 0 1
52857: PUSH
52858: LD_INT 3
52860: MINUS
52861: PUSH
52862: LD_VAR 0 2
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: PUSH
52875: LD_VAR 0 1
52879: PUSH
52880: LD_INT 4
52882: PLUS
52883: PUSH
52884: LD_VAR 0 2
52888: PUSH
52889: LD_INT 4
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: PUSH
52897: LD_VAR 0 1
52901: PUSH
52902: LD_INT 3
52904: PLUS
52905: PUSH
52906: LD_VAR 0 2
52910: PUSH
52911: LD_INT 3
52913: PLUS
52914: PUSH
52915: LD_INT 5
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: PUSH
52923: LD_VAR 0 1
52927: PUSH
52928: LD_VAR 0 2
52932: PUSH
52933: LD_INT 4
52935: PLUS
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// end ; 1 :
52952: GO 53652
52954: LD_INT 1
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 53095
52962: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52963: LD_ADDR_VAR 0 5
52967: PUSH
52968: LD_VAR 0 1
52972: PUSH
52973: LD_VAR 0 2
52977: PUSH
52978: LD_INT 4
52980: MINUS
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 1
52994: PUSH
52995: LD_INT 3
52997: MINUS
52998: PUSH
52999: LD_VAR 0 2
53003: PUSH
53004: LD_INT 3
53006: MINUS
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: PUSH
53016: LD_VAR 0 1
53020: PUSH
53021: LD_INT 4
53023: MINUS
53024: PUSH
53025: LD_VAR 0 2
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_VAR 0 2
53047: PUSH
53048: LD_INT 3
53050: PLUS
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: PUSH
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 4
53067: PLUS
53068: PUSH
53069: LD_VAR 0 2
53073: PUSH
53074: LD_INT 4
53076: PLUS
53077: PUSH
53078: LD_INT 5
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: ST_TO_ADDR
// end ; 2 :
53093: GO 53652
53095: LD_INT 2
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53232
53103: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53104: LD_ADDR_VAR 0 5
53108: PUSH
53109: LD_VAR 0 1
53113: PUSH
53114: LD_VAR 0 2
53118: PUSH
53119: LD_INT 3
53121: MINUS
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: LD_VAR 0 1
53135: PUSH
53136: LD_INT 4
53138: PLUS
53139: PUSH
53140: LD_VAR 0 2
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: PUSH
53153: LD_VAR 0 1
53157: PUSH
53158: LD_VAR 0 2
53162: PUSH
53163: LD_INT 4
53165: PLUS
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: LD_VAR 0 1
53179: PUSH
53180: LD_INT 3
53182: MINUS
53183: PUSH
53184: LD_VAR 0 2
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: PUSH
53197: LD_VAR 0 1
53201: PUSH
53202: LD_INT 4
53204: MINUS
53205: PUSH
53206: LD_VAR 0 2
53210: PUSH
53211: LD_INT 4
53213: MINUS
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// end ; 3 :
53230: GO 53652
53232: LD_INT 3
53234: DOUBLE
53235: EQUAL
53236: IFTRUE 53240
53238: GO 53373
53240: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53241: LD_ADDR_VAR 0 5
53245: PUSH
53246: LD_VAR 0 1
53250: PUSH
53251: LD_INT 3
53253: PLUS
53254: PUSH
53255: LD_VAR 0 2
53259: PUSH
53260: LD_INT 4
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: PUSH
53268: LD_VAR 0 1
53272: PUSH
53273: LD_INT 4
53275: PLUS
53276: PUSH
53277: LD_VAR 0 2
53281: PUSH
53282: LD_INT 4
53284: PLUS
53285: PUSH
53286: LD_INT 5
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: PUSH
53294: LD_VAR 0 1
53298: PUSH
53299: LD_INT 4
53301: MINUS
53302: PUSH
53303: LD_VAR 0 2
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: PUSH
53316: LD_VAR 0 1
53320: PUSH
53321: LD_VAR 0 2
53325: PUSH
53326: LD_INT 4
53328: MINUS
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: PUSH
53338: LD_VAR 0 1
53342: PUSH
53343: LD_INT 3
53345: MINUS
53346: PUSH
53347: LD_VAR 0 2
53351: PUSH
53352: LD_INT 3
53354: MINUS
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// end ; 4 :
53371: GO 53652
53373: LD_INT 4
53375: DOUBLE
53376: EQUAL
53377: IFTRUE 53381
53379: GO 53514
53381: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_VAR 0 1
53391: PUSH
53392: LD_VAR 0 2
53396: PUSH
53397: LD_INT 4
53399: PLUS
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: PUSH
53409: LD_VAR 0 1
53413: PUSH
53414: LD_INT 3
53416: PLUS
53417: PUSH
53418: LD_VAR 0 2
53422: PUSH
53423: LD_INT 3
53425: PLUS
53426: PUSH
53427: LD_INT 5
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: PUSH
53435: LD_VAR 0 1
53439: PUSH
53440: LD_INT 4
53442: PLUS
53443: PUSH
53444: LD_VAR 0 2
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: PUSH
53457: LD_VAR 0 1
53461: PUSH
53462: LD_VAR 0 2
53466: PUSH
53467: LD_INT 3
53469: MINUS
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: PUSH
53479: LD_VAR 0 1
53483: PUSH
53484: LD_INT 4
53486: MINUS
53487: PUSH
53488: LD_VAR 0 2
53492: PUSH
53493: LD_INT 4
53495: MINUS
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// end ; 5 :
53512: GO 53652
53514: LD_INT 5
53516: DOUBLE
53517: EQUAL
53518: IFTRUE 53522
53520: GO 53651
53522: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53523: LD_ADDR_VAR 0 5
53527: PUSH
53528: LD_VAR 0 1
53532: PUSH
53533: LD_INT 4
53535: MINUS
53536: PUSH
53537: LD_VAR 0 2
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: PUSH
53550: LD_VAR 0 1
53554: PUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_INT 4
53562: MINUS
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: PUSH
53572: LD_VAR 0 1
53576: PUSH
53577: LD_INT 4
53579: PLUS
53580: PUSH
53581: LD_VAR 0 2
53585: PUSH
53586: LD_INT 4
53588: PLUS
53589: PUSH
53590: LD_INT 5
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: PUSH
53598: LD_VAR 0 1
53602: PUSH
53603: LD_INT 3
53605: PLUS
53606: PUSH
53607: LD_VAR 0 2
53611: PUSH
53612: LD_INT 4
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: PUSH
53620: LD_VAR 0 1
53624: PUSH
53625: LD_VAR 0 2
53629: PUSH
53630: LD_INT 3
53632: PLUS
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// end ; end ;
53649: GO 53652
53651: POP
// result := list ;
53652: LD_ADDR_VAR 0 4
53656: PUSH
53657: LD_VAR 0 5
53661: ST_TO_ADDR
// end ;
53662: LD_VAR 0 4
53666: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53667: LD_INT 0
53669: PPUSH
53670: PPUSH
53671: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53672: LD_VAR 0 1
53676: NOT
53677: IFTRUE 53705
53679: PUSH
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 4
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: IN
53703: NOT
53704: OR
53705: IFFALSE 53709
// exit ;
53707: GO 53792
// tmp := [ ] ;
53709: LD_ADDR_VAR 0 5
53713: PUSH
53714: EMPTY
53715: ST_TO_ADDR
// for i in units do
53716: LD_ADDR_VAR 0 4
53720: PUSH
53721: LD_VAR 0 1
53725: PUSH
53726: FOR_IN
53727: IFFALSE 53761
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53729: LD_ADDR_VAR 0 5
53733: PUSH
53734: LD_VAR 0 5
53738: PPUSH
53739: LD_VAR 0 4
53743: PPUSH
53744: LD_VAR 0 2
53748: PPUSH
53749: CALL_OW 259
53753: PPUSH
53754: CALL 55187 0 2
53758: ST_TO_ADDR
53759: GO 53726
53761: POP
53762: POP
// if not tmp then
53763: LD_VAR 0 5
53767: NOT
53768: IFFALSE 53772
// exit ;
53770: GO 53792
// result := SortListByListDesc ( units , tmp ) ;
53772: LD_ADDR_VAR 0 3
53776: PUSH
53777: LD_VAR 0 1
53781: PPUSH
53782: LD_VAR 0 5
53786: PPUSH
53787: CALL_OW 77
53791: ST_TO_ADDR
// end ;
53792: LD_VAR 0 3
53796: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53797: LD_INT 0
53799: PPUSH
53800: PPUSH
53801: PPUSH
// result := false ;
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 0
53809: ST_TO_ADDR
// if not building then
53810: LD_VAR 0 2
53814: NOT
53815: IFFALSE 53819
// exit ;
53817: GO 53963
// x := GetX ( building ) ;
53819: LD_ADDR_VAR 0 4
53823: PUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: CALL_OW 250
53833: ST_TO_ADDR
// y := GetY ( building ) ;
53834: LD_ADDR_VAR 0 5
53838: PUSH
53839: LD_VAR 0 2
53843: PPUSH
53844: CALL_OW 251
53848: ST_TO_ADDR
// if not x or not y then
53849: LD_VAR 0 4
53853: NOT
53854: IFTRUE 53863
53856: PUSH
53857: LD_VAR 0 5
53861: NOT
53862: OR
53863: IFFALSE 53867
// exit ;
53865: GO 53963
// if GetTaskList ( unit ) then
53867: LD_VAR 0 1
53871: PPUSH
53872: CALL_OW 437
53876: IFFALSE 53963
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53878: LD_STRING e
53880: PUSH
53881: LD_VAR 0 1
53885: PPUSH
53886: CALL_OW 437
53890: PUSH
53891: LD_INT 1
53893: ARRAY
53894: PUSH
53895: LD_INT 1
53897: ARRAY
53898: EQUAL
53899: IFFALSE 53926
53901: PUSH
53902: LD_VAR 0 4
53906: PUSH
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL_OW 437
53916: PUSH
53917: LD_INT 1
53919: ARRAY
53920: PUSH
53921: LD_INT 2
53923: ARRAY
53924: EQUAL
53925: AND
53926: IFFALSE 53953
53928: PUSH
53929: LD_VAR 0 5
53933: PUSH
53934: LD_VAR 0 1
53938: PPUSH
53939: CALL_OW 437
53943: PUSH
53944: LD_INT 1
53946: ARRAY
53947: PUSH
53948: LD_INT 3
53950: ARRAY
53951: EQUAL
53952: AND
53953: IFFALSE 53963
// result := true end ;
53955: LD_ADDR_VAR 0 3
53959: PUSH
53960: LD_INT 1
53962: ST_TO_ADDR
// end ;
53963: LD_VAR 0 3
53967: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53968: LD_INT 0
53970: PPUSH
// result := false ;
53971: LD_ADDR_VAR 0 4
53975: PUSH
53976: LD_INT 0
53978: ST_TO_ADDR
// if GetTaskList ( unit ) then
53979: LD_VAR 0 1
53983: PPUSH
53984: CALL_OW 437
53988: IFFALSE 54075
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53990: LD_STRING M
53992: PUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 437
54002: PUSH
54003: LD_INT 1
54005: ARRAY
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: EQUAL
54011: IFFALSE 54038
54013: PUSH
54014: LD_VAR 0 2
54018: PUSH
54019: LD_VAR 0 1
54023: PPUSH
54024: CALL_OW 437
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PUSH
54033: LD_INT 2
54035: ARRAY
54036: EQUAL
54037: AND
54038: IFFALSE 54065
54040: PUSH
54041: LD_VAR 0 3
54045: PUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 437
54055: PUSH
54056: LD_INT 1
54058: ARRAY
54059: PUSH
54060: LD_INT 3
54062: ARRAY
54063: EQUAL
54064: AND
54065: IFFALSE 54075
// result := true ;
54067: LD_ADDR_VAR 0 4
54071: PUSH
54072: LD_INT 1
54074: ST_TO_ADDR
// end ; end ;
54075: LD_VAR 0 4
54079: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54080: LD_INT 0
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
// if not unit or not area then
54086: LD_VAR 0 1
54090: NOT
54091: IFTRUE 54100
54093: PUSH
54094: LD_VAR 0 2
54098: NOT
54099: OR
54100: IFFALSE 54104
// exit ;
54102: GO 54280
// tmp := AreaToList ( area , i ) ;
54104: LD_ADDR_VAR 0 6
54108: PUSH
54109: LD_VAR 0 2
54113: PPUSH
54114: LD_VAR 0 5
54118: PPUSH
54119: CALL_OW 517
54123: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54124: LD_ADDR_VAR 0 5
54128: PUSH
54129: DOUBLE
54130: LD_INT 1
54132: DEC
54133: ST_TO_ADDR
54134: LD_VAR 0 6
54138: PUSH
54139: LD_INT 1
54141: ARRAY
54142: PUSH
54143: FOR_TO
54144: IFFALSE 54278
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54146: LD_ADDR_VAR 0 7
54150: PUSH
54151: LD_VAR 0 6
54155: PUSH
54156: LD_INT 1
54158: ARRAY
54159: PUSH
54160: LD_VAR 0 5
54164: ARRAY
54165: PUSH
54166: LD_VAR 0 6
54170: PUSH
54171: LD_INT 2
54173: ARRAY
54174: PUSH
54175: LD_VAR 0 5
54179: ARRAY
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54185: LD_INT 92
54187: PUSH
54188: LD_VAR 0 7
54192: PUSH
54193: LD_INT 1
54195: ARRAY
54196: PUSH
54197: LD_VAR 0 7
54201: PUSH
54202: LD_INT 2
54204: ARRAY
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: PPUSH
54215: CALL_OW 69
54219: PUSH
54220: LD_INT 0
54222: EQUAL
54223: IFFALSE 54276
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_VAR 0 7
54234: PUSH
54235: LD_INT 1
54237: ARRAY
54238: PPUSH
54239: LD_VAR 0 7
54243: PUSH
54244: LD_INT 2
54246: ARRAY
54247: PPUSH
54248: LD_VAR 0 3
54252: PPUSH
54253: CALL_OW 48
// result := IsPlaced ( unit ) ;
54257: LD_ADDR_VAR 0 4
54261: PUSH
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 305
54271: ST_TO_ADDR
// exit ;
54272: POP
54273: POP
54274: GO 54280
// end ; end ;
54276: GO 54143
54278: POP
54279: POP
// end ;
54280: LD_VAR 0 4
54284: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54285: LD_INT 0
54287: PPUSH
54288: PPUSH
54289: PPUSH
// if not side or side > 8 then
54290: LD_VAR 0 1
54294: NOT
54295: IFTRUE 54307
54297: PUSH
54298: LD_VAR 0 1
54302: PUSH
54303: LD_INT 8
54305: GREATER
54306: OR
54307: IFFALSE 54311
// exit ;
54309: GO 54498
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54311: LD_ADDR_VAR 0 4
54315: PUSH
54316: LD_INT 22
54318: PUSH
54319: LD_VAR 0 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 21
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PPUSH
54342: CALL_OW 69
54346: ST_TO_ADDR
// if not tmp then
54347: LD_VAR 0 4
54351: NOT
54352: IFFALSE 54356
// exit ;
54354: GO 54498
// enable_addtolog := true ;
54356: LD_ADDR_OWVAR 81
54360: PUSH
54361: LD_INT 1
54363: ST_TO_ADDR
// AddToLog ( [ ) ;
54364: LD_STRING [
54366: PPUSH
54367: CALL_OW 561
// for i in tmp do
54371: LD_ADDR_VAR 0 3
54375: PUSH
54376: LD_VAR 0 4
54380: PUSH
54381: FOR_IN
54382: IFFALSE 54489
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54384: LD_STRING [
54386: PUSH
54387: LD_VAR 0 3
54391: PPUSH
54392: CALL_OW 266
54396: STR
54397: PUSH
54398: LD_STRING , 
54400: STR
54401: PUSH
54402: LD_VAR 0 3
54406: PPUSH
54407: CALL_OW 250
54411: STR
54412: PUSH
54413: LD_STRING , 
54415: STR
54416: PUSH
54417: LD_VAR 0 3
54421: PPUSH
54422: CALL_OW 251
54426: STR
54427: PUSH
54428: LD_STRING , 
54430: STR
54431: PUSH
54432: LD_VAR 0 3
54436: PPUSH
54437: CALL_OW 254
54441: STR
54442: PUSH
54443: LD_STRING , 
54445: STR
54446: PUSH
54447: LD_VAR 0 3
54451: PPUSH
54452: LD_INT 1
54454: PPUSH
54455: CALL_OW 268
54459: STR
54460: PUSH
54461: LD_STRING , 
54463: STR
54464: PUSH
54465: LD_VAR 0 3
54469: PPUSH
54470: LD_INT 2
54472: PPUSH
54473: CALL_OW 268
54477: STR
54478: PUSH
54479: LD_STRING ],
54481: STR
54482: PPUSH
54483: CALL_OW 561
// end ;
54487: GO 54381
54489: POP
54490: POP
// AddToLog ( ]; ) ;
54491: LD_STRING ];
54493: PPUSH
54494: CALL_OW 561
// end ;
54498: LD_VAR 0 2
54502: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54503: LD_INT 0
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
54509: PPUSH
// if not area or not rate or not max then
54510: LD_VAR 0 1
54514: NOT
54515: IFTRUE 54524
54517: PUSH
54518: LD_VAR 0 2
54522: NOT
54523: OR
54524: IFTRUE 54533
54526: PUSH
54527: LD_VAR 0 4
54531: NOT
54532: OR
54533: IFFALSE 54537
// exit ;
54535: GO 54726
// while 1 do
54537: LD_INT 1
54539: IFFALSE 54726
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54541: LD_ADDR_VAR 0 9
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: LD_INT 1
54553: PPUSH
54554: CALL_OW 287
54558: PUSH
54559: LD_INT 10
54561: MUL
54562: ST_TO_ADDR
// r := rate / 10 ;
54563: LD_ADDR_VAR 0 7
54567: PUSH
54568: LD_VAR 0 2
54572: PUSH
54573: LD_INT 10
54575: DIVREAL
54576: ST_TO_ADDR
// time := 1 1$00 ;
54577: LD_ADDR_VAR 0 8
54581: PUSH
54582: LD_INT 2100
54584: ST_TO_ADDR
// if amount < min then
54585: LD_VAR 0 9
54589: PUSH
54590: LD_VAR 0 3
54594: LESS
54595: IFFALSE 54613
// r := r * 2 else
54597: LD_ADDR_VAR 0 7
54601: PUSH
54602: LD_VAR 0 7
54606: PUSH
54607: LD_INT 2
54609: MUL
54610: ST_TO_ADDR
54611: GO 54639
// if amount > max then
54613: LD_VAR 0 9
54617: PUSH
54618: LD_VAR 0 4
54622: GREATER
54623: IFFALSE 54639
// r := r / 2 ;
54625: LD_ADDR_VAR 0 7
54629: PUSH
54630: LD_VAR 0 7
54634: PUSH
54635: LD_INT 2
54637: DIVREAL
54638: ST_TO_ADDR
// time := time / r ;
54639: LD_ADDR_VAR 0 8
54643: PUSH
54644: LD_VAR 0 8
54648: PUSH
54649: LD_VAR 0 7
54653: DIVREAL
54654: ST_TO_ADDR
// if time < 0 then
54655: LD_VAR 0 8
54659: PUSH
54660: LD_INT 0
54662: LESS
54663: IFFALSE 54680
// time := time * - 1 ;
54665: LD_ADDR_VAR 0 8
54669: PUSH
54670: LD_VAR 0 8
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: MUL
54679: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54680: LD_VAR 0 8
54684: PUSH
54685: LD_INT 35
54687: PPUSH
54688: LD_INT 875
54690: PPUSH
54691: CALL_OW 12
54695: PLUS
54696: PPUSH
54697: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54701: LD_INT 1
54703: PPUSH
54704: LD_INT 5
54706: PPUSH
54707: CALL_OW 12
54711: PPUSH
54712: LD_VAR 0 1
54716: PPUSH
54717: LD_INT 1
54719: PPUSH
54720: CALL_OW 55
// end ;
54724: GO 54537
// end ;
54726: LD_VAR 0 5
54730: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54731: LD_INT 0
54733: PPUSH
54734: PPUSH
54735: PPUSH
54736: PPUSH
54737: PPUSH
54738: PPUSH
54739: PPUSH
54740: PPUSH
// if not turrets or not factories then
54741: LD_VAR 0 1
54745: NOT
54746: IFTRUE 54755
54748: PUSH
54749: LD_VAR 0 2
54753: NOT
54754: OR
54755: IFFALSE 54759
// exit ;
54757: GO 55066
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54759: LD_ADDR_VAR 0 10
54763: PUSH
54764: LD_INT 5
54766: PUSH
54767: LD_INT 6
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 4
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 24
54801: PUSH
54802: LD_INT 25
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 23
54811: PUSH
54812: LD_INT 27
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 42
54825: PUSH
54826: LD_INT 43
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 44
54835: PUSH
54836: LD_INT 46
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 45
54845: PUSH
54846: LD_INT 47
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// result := [ ] ;
54863: LD_ADDR_VAR 0 3
54867: PUSH
54868: EMPTY
54869: ST_TO_ADDR
// for i in turrets do
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_VAR 0 1
54879: PUSH
54880: FOR_IN
54881: IFFALSE 55064
// begin nat := GetNation ( i ) ;
54883: LD_ADDR_VAR 0 7
54887: PUSH
54888: LD_VAR 0 4
54892: PPUSH
54893: CALL_OW 248
54897: ST_TO_ADDR
// weapon := 0 ;
54898: LD_ADDR_VAR 0 8
54902: PUSH
54903: LD_INT 0
54905: ST_TO_ADDR
// if not nat then
54906: LD_VAR 0 7
54910: NOT
54911: IFFALSE 54915
// continue ;
54913: GO 54880
// for j in list [ nat ] do
54915: LD_ADDR_VAR 0 5
54919: PUSH
54920: LD_VAR 0 10
54924: PUSH
54925: LD_VAR 0 7
54929: ARRAY
54930: PUSH
54931: FOR_IN
54932: IFFALSE 54973
// if GetBWeapon ( i ) = j [ 1 ] then
54934: LD_VAR 0 4
54938: PPUSH
54939: CALL_OW 269
54943: PUSH
54944: LD_VAR 0 5
54948: PUSH
54949: LD_INT 1
54951: ARRAY
54952: EQUAL
54953: IFFALSE 54971
// begin weapon := j [ 2 ] ;
54955: LD_ADDR_VAR 0 8
54959: PUSH
54960: LD_VAR 0 5
54964: PUSH
54965: LD_INT 2
54967: ARRAY
54968: ST_TO_ADDR
// break ;
54969: GO 54973
// end ;
54971: GO 54931
54973: POP
54974: POP
// if not weapon then
54975: LD_VAR 0 8
54979: NOT
54980: IFFALSE 54984
// continue ;
54982: GO 54880
// for k in factories do
54984: LD_ADDR_VAR 0 6
54988: PUSH
54989: LD_VAR 0 2
54993: PUSH
54994: FOR_IN
54995: IFFALSE 55060
// begin weapons := AvailableWeaponList ( k ) ;
54997: LD_ADDR_VAR 0 9
55001: PUSH
55002: LD_VAR 0 6
55006: PPUSH
55007: CALL_OW 478
55011: ST_TO_ADDR
// if not weapons then
55012: LD_VAR 0 9
55016: NOT
55017: IFFALSE 55021
// continue ;
55019: GO 54994
// if weapon in weapons then
55021: LD_VAR 0 8
55025: PUSH
55026: LD_VAR 0 9
55030: IN
55031: IFFALSE 55058
// begin result := [ i , weapon ] ;
55033: LD_ADDR_VAR 0 3
55037: PUSH
55038: LD_VAR 0 4
55042: PUSH
55043: LD_VAR 0 8
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// exit ;
55052: POP
55053: POP
55054: POP
55055: POP
55056: GO 55066
// end ; end ;
55058: GO 54994
55060: POP
55061: POP
// end ;
55062: GO 54880
55064: POP
55065: POP
// end ;
55066: LD_VAR 0 3
55070: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55071: LD_INT 0
55073: PPUSH
// if not side or side > 8 then
55074: LD_VAR 0 3
55078: NOT
55079: IFTRUE 55091
55081: PUSH
55082: LD_VAR 0 3
55086: PUSH
55087: LD_INT 8
55089: GREATER
55090: OR
55091: IFFALSE 55095
// exit ;
55093: GO 55154
// if not range then
55095: LD_VAR 0 4
55099: NOT
55100: IFFALSE 55111
// range := - 12 ;
55102: LD_ADDR_VAR 0 4
55106: PUSH
55107: LD_INT 12
55109: NEG
55110: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55111: LD_VAR 0 1
55115: PPUSH
55116: LD_VAR 0 2
55120: PPUSH
55121: LD_VAR 0 3
55125: PPUSH
55126: LD_VAR 0 4
55130: PPUSH
55131: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55135: LD_VAR 0 1
55139: PPUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: LD_VAR 0 3
55149: PPUSH
55150: CALL_OW 331
// end ;
55154: LD_VAR 0 5
55158: RET
// export function Video ( mode ) ; begin
55159: LD_INT 0
55161: PPUSH
// ingame_video = mode ;
55162: LD_ADDR_OWVAR 52
55166: PUSH
55167: LD_VAR 0 1
55171: ST_TO_ADDR
// interface_hidden = mode ;
55172: LD_ADDR_OWVAR 54
55176: PUSH
55177: LD_VAR 0 1
55181: ST_TO_ADDR
// end ;
55182: LD_VAR 0 2
55186: RET
// export function Join ( array , element ) ; begin
55187: LD_INT 0
55189: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55190: LD_ADDR_VAR 0 3
55194: PUSH
55195: LD_VAR 0 1
55199: PPUSH
55200: LD_VAR 0 1
55204: PUSH
55205: LD_INT 1
55207: PLUS
55208: PPUSH
55209: LD_VAR 0 2
55213: PPUSH
55214: CALL_OW 1
55218: ST_TO_ADDR
// end ;
55219: LD_VAR 0 3
55223: RET
// export function JoinUnion ( array , element ) ; begin
55224: LD_INT 0
55226: PPUSH
// result := array union element ;
55227: LD_ADDR_VAR 0 3
55231: PUSH
55232: LD_VAR 0 1
55236: PUSH
55237: LD_VAR 0 2
55241: UNION
55242: ST_TO_ADDR
// end ;
55243: LD_VAR 0 3
55247: RET
// export function GetBehemoths ( side ) ; begin
55248: LD_INT 0
55250: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55251: LD_ADDR_VAR 0 2
55255: PUSH
55256: LD_INT 22
55258: PUSH
55259: LD_VAR 0 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 31
55270: PUSH
55271: LD_INT 25
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PPUSH
55282: CALL_OW 69
55286: ST_TO_ADDR
// end ;
55287: LD_VAR 0 2
55291: RET
// export function Shuffle ( array ) ; var i , index ; begin
55292: LD_INT 0
55294: PPUSH
55295: PPUSH
55296: PPUSH
// result := [ ] ;
55297: LD_ADDR_VAR 0 2
55301: PUSH
55302: EMPTY
55303: ST_TO_ADDR
// if not array then
55304: LD_VAR 0 1
55308: NOT
55309: IFFALSE 55313
// exit ;
55311: GO 55412
// Randomize ;
55313: CALL_OW 10
// for i = array downto 1 do
55317: LD_ADDR_VAR 0 3
55321: PUSH
55322: DOUBLE
55323: LD_VAR 0 1
55327: INC
55328: ST_TO_ADDR
55329: LD_INT 1
55331: PUSH
55332: FOR_DOWNTO
55333: IFFALSE 55410
// begin index := rand ( 1 , array ) ;
55335: LD_ADDR_VAR 0 4
55339: PUSH
55340: LD_INT 1
55342: PPUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: CALL_OW 12
55352: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55353: LD_ADDR_VAR 0 2
55357: PUSH
55358: LD_VAR 0 2
55362: PPUSH
55363: LD_VAR 0 2
55367: PUSH
55368: LD_INT 1
55370: PLUS
55371: PPUSH
55372: LD_VAR 0 1
55376: PUSH
55377: LD_VAR 0 4
55381: ARRAY
55382: PPUSH
55383: CALL_OW 2
55387: ST_TO_ADDR
// array := Delete ( array , index ) ;
55388: LD_ADDR_VAR 0 1
55392: PUSH
55393: LD_VAR 0 1
55397: PPUSH
55398: LD_VAR 0 4
55402: PPUSH
55403: CALL_OW 3
55407: ST_TO_ADDR
// end ;
55408: GO 55332
55410: POP
55411: POP
// end ;
55412: LD_VAR 0 2
55416: RET
// export function GetBaseMaterials ( base ) ; begin
55417: LD_INT 0
55419: PPUSH
// result := [ 0 , 0 , 0 ] ;
55420: LD_ADDR_VAR 0 2
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// if not base then
55439: LD_VAR 0 1
55443: NOT
55444: IFFALSE 55448
// exit ;
55446: GO 55497
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55448: LD_ADDR_VAR 0 2
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: LD_INT 1
55460: PPUSH
55461: CALL_OW 275
55465: PUSH
55466: LD_VAR 0 1
55470: PPUSH
55471: LD_INT 2
55473: PPUSH
55474: CALL_OW 275
55478: PUSH
55479: LD_VAR 0 1
55483: PPUSH
55484: LD_INT 3
55486: PPUSH
55487: CALL_OW 275
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// end ;
55497: LD_VAR 0 2
55501: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55502: LD_INT 0
55504: PPUSH
55505: PPUSH
// result := array ;
55506: LD_ADDR_VAR 0 3
55510: PUSH
55511: LD_VAR 0 1
55515: ST_TO_ADDR
// if size >= result then
55516: LD_VAR 0 2
55520: PUSH
55521: LD_VAR 0 3
55525: GREATEREQUAL
55526: IFFALSE 55530
// exit ;
55528: GO 55580
// if size then
55530: LD_VAR 0 2
55534: IFFALSE 55580
// for i := array downto size do
55536: LD_ADDR_VAR 0 4
55540: PUSH
55541: DOUBLE
55542: LD_VAR 0 1
55546: INC
55547: ST_TO_ADDR
55548: LD_VAR 0 2
55552: PUSH
55553: FOR_DOWNTO
55554: IFFALSE 55578
// result := Delete ( result , result ) ;
55556: LD_ADDR_VAR 0 3
55560: PUSH
55561: LD_VAR 0 3
55565: PPUSH
55566: LD_VAR 0 3
55570: PPUSH
55571: CALL_OW 3
55575: ST_TO_ADDR
55576: GO 55553
55578: POP
55579: POP
// end ;
55580: LD_VAR 0 3
55584: RET
// export function ComExit ( unit ) ; var tmp ; begin
55585: LD_INT 0
55587: PPUSH
55588: PPUSH
// if not IsInUnit ( unit ) then
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 310
55598: NOT
55599: IFFALSE 55603
// exit ;
55601: GO 55663
// tmp := IsInUnit ( unit ) ;
55603: LD_ADDR_VAR 0 3
55607: PUSH
55608: LD_VAR 0 1
55612: PPUSH
55613: CALL_OW 310
55617: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55618: LD_VAR 0 3
55622: PPUSH
55623: CALL_OW 247
55627: PUSH
55628: LD_INT 2
55630: EQUAL
55631: IFFALSE 55644
// ComExitVehicle ( unit ) else
55633: LD_VAR 0 1
55637: PPUSH
55638: CALL_OW 121
55642: GO 55653
// ComExitBuilding ( unit ) ;
55644: LD_VAR 0 1
55648: PPUSH
55649: CALL_OW 122
// result := tmp ;
55653: LD_ADDR_VAR 0 2
55657: PUSH
55658: LD_VAR 0 3
55662: ST_TO_ADDR
// end ;
55663: LD_VAR 0 2
55667: RET
// export function ComExitAll ( units ) ; var i ; begin
55668: LD_INT 0
55670: PPUSH
55671: PPUSH
// if not units then
55672: LD_VAR 0 1
55676: NOT
55677: IFFALSE 55681
// exit ;
55679: GO 55707
// for i in units do
55681: LD_ADDR_VAR 0 3
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: FOR_IN
55692: IFFALSE 55705
// ComExit ( i ) ;
55694: LD_VAR 0 3
55698: PPUSH
55699: CALL 55585 0 1
55703: GO 55691
55705: POP
55706: POP
// end ;
55707: LD_VAR 0 2
55711: RET
// export function ResetHc ; begin
55712: LD_INT 0
55714: PPUSH
// InitHc ;
55715: CALL_OW 19
// hc_importance := 0 ;
55719: LD_ADDR_OWVAR 32
55723: PUSH
55724: LD_INT 0
55726: ST_TO_ADDR
// end ;
55727: LD_VAR 0 1
55731: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55732: LD_INT 0
55734: PPUSH
55735: PPUSH
55736: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55737: LD_ADDR_VAR 0 6
55741: PUSH
55742: LD_VAR 0 1
55746: PUSH
55747: LD_VAR 0 3
55751: PLUS
55752: PUSH
55753: LD_INT 2
55755: DIV
55756: ST_TO_ADDR
// if _x < 0 then
55757: LD_VAR 0 6
55761: PUSH
55762: LD_INT 0
55764: LESS
55765: IFFALSE 55782
// _x := _x * - 1 ;
55767: LD_ADDR_VAR 0 6
55771: PUSH
55772: LD_VAR 0 6
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: MUL
55781: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55782: LD_ADDR_VAR 0 7
55786: PUSH
55787: LD_VAR 0 2
55791: PUSH
55792: LD_VAR 0 4
55796: PLUS
55797: PUSH
55798: LD_INT 2
55800: DIV
55801: ST_TO_ADDR
// if _y < 0 then
55802: LD_VAR 0 7
55806: PUSH
55807: LD_INT 0
55809: LESS
55810: IFFALSE 55827
// _y := _y * - 1 ;
55812: LD_ADDR_VAR 0 7
55816: PUSH
55817: LD_VAR 0 7
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: MUL
55826: ST_TO_ADDR
// result := [ _x , _y ] ;
55827: LD_ADDR_VAR 0 5
55831: PUSH
55832: LD_VAR 0 6
55836: PUSH
55837: LD_VAR 0 7
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// end ;
55846: LD_VAR 0 5
55850: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55851: LD_INT 0
55853: PPUSH
55854: PPUSH
55855: PPUSH
55856: PPUSH
// task := GetTaskList ( unit ) ;
55857: LD_ADDR_VAR 0 7
55861: PUSH
55862: LD_VAR 0 1
55866: PPUSH
55867: CALL_OW 437
55871: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55872: LD_VAR 0 7
55876: NOT
55877: IFFALSE 55896
55879: PUSH
55880: LD_VAR 0 1
55884: PPUSH
55885: LD_VAR 0 2
55889: PPUSH
55890: CALL_OW 308
55894: NOT
55895: AND
55896: IFFALSE 55900
// exit ;
55898: GO 56018
// if IsInArea ( unit , area ) then
55900: LD_VAR 0 1
55904: PPUSH
55905: LD_VAR 0 2
55909: PPUSH
55910: CALL_OW 308
55914: IFFALSE 55932
// begin ComMoveToArea ( unit , goAway ) ;
55916: LD_VAR 0 1
55920: PPUSH
55921: LD_VAR 0 3
55925: PPUSH
55926: CALL_OW 113
// exit ;
55930: GO 56018
// end ; if task [ 1 ] [ 1 ] <> M then
55932: LD_VAR 0 7
55936: PUSH
55937: LD_INT 1
55939: ARRAY
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PUSH
55945: LD_STRING M
55947: NONEQUAL
55948: IFFALSE 55952
// exit ;
55950: GO 56018
// x := task [ 1 ] [ 2 ] ;
55952: LD_ADDR_VAR 0 5
55956: PUSH
55957: LD_VAR 0 7
55961: PUSH
55962: LD_INT 1
55964: ARRAY
55965: PUSH
55966: LD_INT 2
55968: ARRAY
55969: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55970: LD_ADDR_VAR 0 6
55974: PUSH
55975: LD_VAR 0 7
55979: PUSH
55980: LD_INT 1
55982: ARRAY
55983: PUSH
55984: LD_INT 3
55986: ARRAY
55987: ST_TO_ADDR
// if InArea ( x , y , area ) then
55988: LD_VAR 0 5
55992: PPUSH
55993: LD_VAR 0 6
55997: PPUSH
55998: LD_VAR 0 2
56002: PPUSH
56003: CALL_OW 309
56007: IFFALSE 56018
// ComStop ( unit ) ;
56009: LD_VAR 0 1
56013: PPUSH
56014: CALL_OW 141
// end ;
56018: LD_VAR 0 4
56022: RET
// export function Abs ( value ) ; begin
56023: LD_INT 0
56025: PPUSH
// result := value ;
56026: LD_ADDR_VAR 0 2
56030: PUSH
56031: LD_VAR 0 1
56035: ST_TO_ADDR
// if value < 0 then
56036: LD_VAR 0 1
56040: PUSH
56041: LD_INT 0
56043: LESS
56044: IFFALSE 56061
// result := value * - 1 ;
56046: LD_ADDR_VAR 0 2
56050: PUSH
56051: LD_VAR 0 1
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: MUL
56060: ST_TO_ADDR
// end ;
56061: LD_VAR 0 2
56065: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56066: LD_INT 0
56068: PPUSH
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
// if not unit or not building then
56076: LD_VAR 0 1
56080: NOT
56081: IFTRUE 56090
56083: PUSH
56084: LD_VAR 0 2
56088: NOT
56089: OR
56090: IFFALSE 56094
// exit ;
56092: GO 56322
// x := GetX ( building ) ;
56094: LD_ADDR_VAR 0 4
56098: PUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: CALL_OW 250
56108: ST_TO_ADDR
// y := GetY ( building ) ;
56109: LD_ADDR_VAR 0 6
56113: PUSH
56114: LD_VAR 0 2
56118: PPUSH
56119: CALL_OW 251
56123: ST_TO_ADDR
// d := GetDir ( building ) ;
56124: LD_ADDR_VAR 0 8
56128: PUSH
56129: LD_VAR 0 2
56133: PPUSH
56134: CALL_OW 254
56138: ST_TO_ADDR
// r := 4 ;
56139: LD_ADDR_VAR 0 9
56143: PUSH
56144: LD_INT 4
56146: ST_TO_ADDR
// for i := 1 to 5 do
56147: LD_ADDR_VAR 0 10
56151: PUSH
56152: DOUBLE
56153: LD_INT 1
56155: DEC
56156: ST_TO_ADDR
56157: LD_INT 5
56159: PUSH
56160: FOR_TO
56161: IFFALSE 56320
// begin _x := ShiftX ( x , d , r + i ) ;
56163: LD_ADDR_VAR 0 5
56167: PUSH
56168: LD_VAR 0 4
56172: PPUSH
56173: LD_VAR 0 8
56177: PPUSH
56178: LD_VAR 0 9
56182: PUSH
56183: LD_VAR 0 10
56187: PLUS
56188: PPUSH
56189: CALL_OW 272
56193: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56194: LD_ADDR_VAR 0 7
56198: PUSH
56199: LD_VAR 0 6
56203: PPUSH
56204: LD_VAR 0 8
56208: PPUSH
56209: LD_VAR 0 9
56213: PUSH
56214: LD_VAR 0 10
56218: PLUS
56219: PPUSH
56220: CALL_OW 273
56224: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56225: LD_VAR 0 5
56229: PPUSH
56230: LD_VAR 0 7
56234: PPUSH
56235: CALL_OW 488
56239: IFFALSE 56274
56241: PUSH
56242: LD_VAR 0 5
56246: PPUSH
56247: LD_VAR 0 7
56251: PPUSH
56252: CALL_OW 428
56256: PPUSH
56257: CALL_OW 247
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: IN
56272: NOT
56273: AND
56274: IFFALSE 56318
// begin ComMoveXY ( unit , _x , _y ) ;
56276: LD_VAR 0 1
56280: PPUSH
56281: LD_VAR 0 5
56285: PPUSH
56286: LD_VAR 0 7
56290: PPUSH
56291: CALL_OW 111
// result := [ _x , _y ] ;
56295: LD_ADDR_VAR 0 3
56299: PUSH
56300: LD_VAR 0 5
56304: PUSH
56305: LD_VAR 0 7
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// exit ;
56314: POP
56315: POP
56316: GO 56322
// end ; end ;
56318: GO 56160
56320: POP
56321: POP
// end ;
56322: LD_VAR 0 3
56326: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56327: LD_INT 0
56329: PPUSH
56330: PPUSH
56331: PPUSH
// result := 0 ;
56332: LD_ADDR_VAR 0 3
56336: PUSH
56337: LD_INT 0
56339: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56340: LD_VAR 0 1
56344: PUSH
56345: LD_INT 0
56347: LESS
56348: IFTRUE 56360
56350: PUSH
56351: LD_VAR 0 1
56355: PUSH
56356: LD_INT 8
56358: GREATER
56359: OR
56360: IFTRUE 56372
56362: PUSH
56363: LD_VAR 0 2
56367: PUSH
56368: LD_INT 0
56370: LESS
56371: OR
56372: IFTRUE 56384
56374: PUSH
56375: LD_VAR 0 2
56379: PUSH
56380: LD_INT 8
56382: GREATER
56383: OR
56384: IFFALSE 56388
// exit ;
56386: GO 56463
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56388: LD_ADDR_VAR 0 4
56392: PUSH
56393: LD_INT 22
56395: PUSH
56396: LD_VAR 0 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PPUSH
56405: CALL_OW 69
56409: PUSH
56410: FOR_IN
56411: IFFALSE 56461
// begin un := UnitShoot ( i ) ;
56413: LD_ADDR_VAR 0 5
56417: PUSH
56418: LD_VAR 0 4
56422: PPUSH
56423: CALL_OW 504
56427: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56428: LD_VAR 0 5
56432: PPUSH
56433: CALL_OW 255
56437: PUSH
56438: LD_VAR 0 1
56442: EQUAL
56443: IFFALSE 56459
// begin result := un ;
56445: LD_ADDR_VAR 0 3
56449: PUSH
56450: LD_VAR 0 5
56454: ST_TO_ADDR
// exit ;
56455: POP
56456: POP
56457: GO 56463
// end ; end ;
56459: GO 56410
56461: POP
56462: POP
// end ;
56463: LD_VAR 0 3
56467: RET
// export function GetCargoBay ( units ) ; begin
56468: LD_INT 0
56470: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56471: LD_ADDR_VAR 0 2
56475: PUSH
56476: LD_VAR 0 1
56480: PPUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 34
56486: PUSH
56487: LD_INT 12
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 34
56496: PUSH
56497: LD_INT 51
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 34
56506: PUSH
56507: LD_INT 32
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 34
56516: PUSH
56517: LD_INT 89
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: PPUSH
56531: CALL_OW 72
56535: ST_TO_ADDR
// end ;
56536: LD_VAR 0 2
56540: RET
// export function Negate ( value ) ; begin
56541: LD_INT 0
56543: PPUSH
// result := not value ;
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: LD_VAR 0 1
56553: NOT
56554: ST_TO_ADDR
// end ;
56555: LD_VAR 0 2
56559: RET
// export function Inc ( value ) ; begin
56560: LD_INT 0
56562: PPUSH
// result := value + 1 ;
56563: LD_ADDR_VAR 0 2
56567: PUSH
56568: LD_VAR 0 1
56572: PUSH
56573: LD_INT 1
56575: PLUS
56576: ST_TO_ADDR
// end ;
56577: LD_VAR 0 2
56581: RET
// export function Dec ( value ) ; begin
56582: LD_INT 0
56584: PPUSH
// result := value - 1 ;
56585: LD_ADDR_VAR 0 2
56589: PUSH
56590: LD_VAR 0 1
56594: PUSH
56595: LD_INT 1
56597: MINUS
56598: ST_TO_ADDR
// end ;
56599: LD_VAR 0 2
56603: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56604: LD_INT 0
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
56612: PPUSH
56613: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56614: LD_VAR 0 1
56618: PPUSH
56619: LD_VAR 0 2
56623: PPUSH
56624: CALL_OW 488
56628: NOT
56629: IFTRUE 56648
56631: PUSH
56632: LD_VAR 0 3
56636: PPUSH
56637: LD_VAR 0 4
56641: PPUSH
56642: CALL_OW 488
56646: NOT
56647: OR
56648: IFFALSE 56661
// begin result := - 1 ;
56650: LD_ADDR_VAR 0 5
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: ST_TO_ADDR
// exit ;
56659: GO 56896
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56661: LD_ADDR_VAR 0 12
56665: PUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_VAR 0 2
56675: PPUSH
56676: LD_VAR 0 3
56680: PPUSH
56681: LD_VAR 0 4
56685: PPUSH
56686: CALL 55732 0 4
56690: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56691: LD_ADDR_VAR 0 11
56695: PUSH
56696: LD_VAR 0 1
56700: PPUSH
56701: LD_VAR 0 2
56705: PPUSH
56706: LD_VAR 0 12
56710: PUSH
56711: LD_INT 1
56713: ARRAY
56714: PPUSH
56715: LD_VAR 0 12
56719: PUSH
56720: LD_INT 2
56722: ARRAY
56723: PPUSH
56724: CALL_OW 298
56728: ST_TO_ADDR
// distance := 9999 ;
56729: LD_ADDR_VAR 0 10
56733: PUSH
56734: LD_INT 9999
56736: ST_TO_ADDR
// for i := 0 to 5 do
56737: LD_ADDR_VAR 0 6
56741: PUSH
56742: DOUBLE
56743: LD_INT 0
56745: DEC
56746: ST_TO_ADDR
56747: LD_INT 5
56749: PUSH
56750: FOR_TO
56751: IFFALSE 56894
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56753: LD_ADDR_VAR 0 7
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: LD_VAR 0 6
56767: PPUSH
56768: LD_VAR 0 11
56772: PPUSH
56773: CALL_OW 272
56777: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56778: LD_ADDR_VAR 0 8
56782: PUSH
56783: LD_VAR 0 2
56787: PPUSH
56788: LD_VAR 0 6
56792: PPUSH
56793: LD_VAR 0 11
56797: PPUSH
56798: CALL_OW 273
56802: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56803: LD_VAR 0 7
56807: PPUSH
56808: LD_VAR 0 8
56812: PPUSH
56813: CALL_OW 488
56817: NOT
56818: IFFALSE 56822
// continue ;
56820: GO 56750
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56822: LD_ADDR_VAR 0 9
56826: PUSH
56827: LD_VAR 0 12
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: PPUSH
56836: LD_VAR 0 12
56840: PUSH
56841: LD_INT 2
56843: ARRAY
56844: PPUSH
56845: LD_VAR 0 7
56849: PPUSH
56850: LD_VAR 0 8
56854: PPUSH
56855: CALL_OW 298
56859: ST_TO_ADDR
// if tmp < distance then
56860: LD_VAR 0 9
56864: PUSH
56865: LD_VAR 0 10
56869: LESS
56870: IFFALSE 56892
// begin result := i ;
56872: LD_ADDR_VAR 0 5
56876: PUSH
56877: LD_VAR 0 6
56881: ST_TO_ADDR
// distance := tmp ;
56882: LD_ADDR_VAR 0 10
56886: PUSH
56887: LD_VAR 0 9
56891: ST_TO_ADDR
// end ; end ;
56892: GO 56750
56894: POP
56895: POP
// end ;
56896: LD_VAR 0 5
56900: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
// if not driver or not IsInUnit ( driver ) then
56905: LD_VAR 0 1
56909: NOT
56910: IFTRUE 56924
56912: PUSH
56913: LD_VAR 0 1
56917: PPUSH
56918: CALL_OW 310
56922: NOT
56923: OR
56924: IFFALSE 56928
// exit ;
56926: GO 57018
// vehicle := IsInUnit ( driver ) ;
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_VAR 0 1
56937: PPUSH
56938: CALL_OW 310
56942: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56943: LD_VAR 0 1
56947: PPUSH
56948: LD_STRING \
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: PUSH
56978: LD_STRING E
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_VAR 0 3
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PPUSH
57014: CALL_OW 446
// end ;
57018: LD_VAR 0 2
57022: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57023: LD_INT 0
57025: PPUSH
57026: PPUSH
// if not driver or not IsInUnit ( driver ) then
57027: LD_VAR 0 1
57031: NOT
57032: IFTRUE 57046
57034: PUSH
57035: LD_VAR 0 1
57039: PPUSH
57040: CALL_OW 310
57044: NOT
57045: OR
57046: IFFALSE 57050
// exit ;
57048: GO 57140
// vehicle := IsInUnit ( driver ) ;
57050: LD_ADDR_VAR 0 3
57054: PUSH
57055: LD_VAR 0 1
57059: PPUSH
57060: CALL_OW 310
57064: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57065: LD_VAR 0 1
57069: PPUSH
57070: LD_STRING \
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: PUSH
57100: LD_STRING E
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_VAR 0 3
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PPUSH
57136: CALL_OW 447
// end ;
57140: LD_VAR 0 2
57144: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57145: LD_INT 0
57147: PPUSH
57148: PPUSH
57149: PPUSH
// tmp := [ ] ;
57150: LD_ADDR_VAR 0 5
57154: PUSH
57155: EMPTY
57156: ST_TO_ADDR
// for i in units do
57157: LD_ADDR_VAR 0 4
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: FOR_IN
57168: IFFALSE 57206
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57170: LD_ADDR_VAR 0 5
57174: PUSH
57175: LD_VAR 0 5
57179: PPUSH
57180: LD_VAR 0 5
57184: PUSH
57185: LD_INT 1
57187: PLUS
57188: PPUSH
57189: LD_VAR 0 4
57193: PPUSH
57194: CALL_OW 256
57198: PPUSH
57199: CALL_OW 2
57203: ST_TO_ADDR
57204: GO 57167
57206: POP
57207: POP
// if not tmp then
57208: LD_VAR 0 5
57212: NOT
57213: IFFALSE 57217
// exit ;
57215: GO 57265
// if asc then
57217: LD_VAR 0 2
57221: IFFALSE 57245
// result := SortListByListAsc ( units , tmp ) else
57223: LD_ADDR_VAR 0 3
57227: PUSH
57228: LD_VAR 0 1
57232: PPUSH
57233: LD_VAR 0 5
57237: PPUSH
57238: CALL_OW 76
57242: ST_TO_ADDR
57243: GO 57265
// result := SortListByListDesc ( units , tmp ) ;
57245: LD_ADDR_VAR 0 3
57249: PUSH
57250: LD_VAR 0 1
57254: PPUSH
57255: LD_VAR 0 5
57259: PPUSH
57260: CALL_OW 77
57264: ST_TO_ADDR
// end ;
57265: LD_VAR 0 3
57269: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57270: LD_INT 0
57272: PPUSH
57273: PPUSH
// task := GetTaskList ( mech ) ;
57274: LD_ADDR_VAR 0 4
57278: PUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL_OW 437
57288: ST_TO_ADDR
// if not task then
57289: LD_VAR 0 4
57293: NOT
57294: IFFALSE 57298
// exit ;
57296: GO 57342
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57298: LD_ADDR_VAR 0 3
57302: PUSH
57303: LD_VAR 0 4
57307: PUSH
57308: LD_INT 1
57310: ARRAY
57311: PUSH
57312: LD_INT 1
57314: ARRAY
57315: PUSH
57316: LD_STRING r
57318: EQUAL
57319: IFFALSE 57341
57321: PUSH
57322: LD_VAR 0 4
57326: PUSH
57327: LD_INT 1
57329: ARRAY
57330: PUSH
57331: LD_INT 4
57333: ARRAY
57334: PUSH
57335: LD_VAR 0 2
57339: EQUAL
57340: AND
57341: ST_TO_ADDR
// end ;
57342: LD_VAR 0 3
57346: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57347: LD_INT 0
57349: PPUSH
// SetDir ( unit , d ) ;
57350: LD_VAR 0 1
57354: PPUSH
57355: LD_VAR 0 4
57359: PPUSH
57360: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57364: LD_ADDR_VAR 0 6
57368: PUSH
57369: LD_VAR 0 1
57373: PPUSH
57374: LD_VAR 0 2
57378: PPUSH
57379: LD_VAR 0 3
57383: PPUSH
57384: LD_VAR 0 5
57388: PPUSH
57389: CALL_OW 48
57393: ST_TO_ADDR
// end ;
57394: LD_VAR 0 6
57398: RET
// export function ToNaturalNumber ( number ) ; begin
57399: LD_INT 0
57401: PPUSH
// result := number div 1 ;
57402: LD_ADDR_VAR 0 2
57406: PUSH
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 1
57414: DIV
57415: ST_TO_ADDR
// if number < 0 then
57416: LD_VAR 0 1
57420: PUSH
57421: LD_INT 0
57423: LESS
57424: IFFALSE 57434
// result := 0 ;
57426: LD_ADDR_VAR 0 2
57430: PUSH
57431: LD_INT 0
57433: ST_TO_ADDR
// end ;
57434: LD_VAR 0 2
57438: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57439: LD_INT 0
57441: PPUSH
57442: PPUSH
57443: PPUSH
// if not buildings then
57444: LD_VAR 0 1
57448: NOT
57449: IFFALSE 57453
// exit ;
57451: GO 57568
// tmp := [ ] ;
57453: LD_ADDR_VAR 0 5
57457: PUSH
57458: EMPTY
57459: ST_TO_ADDR
// for b in buildings do
57460: LD_ADDR_VAR 0 4
57464: PUSH
57465: LD_VAR 0 1
57469: PUSH
57470: FOR_IN
57471: IFFALSE 57509
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57473: LD_ADDR_VAR 0 5
57477: PUSH
57478: LD_VAR 0 5
57482: PPUSH
57483: LD_VAR 0 5
57487: PUSH
57488: LD_INT 1
57490: PLUS
57491: PPUSH
57492: LD_VAR 0 4
57496: PPUSH
57497: CALL_OW 266
57501: PPUSH
57502: CALL_OW 1
57506: ST_TO_ADDR
57507: GO 57470
57509: POP
57510: POP
// if not tmp then
57511: LD_VAR 0 5
57515: NOT
57516: IFFALSE 57520
// exit ;
57518: GO 57568
// if asc then
57520: LD_VAR 0 2
57524: IFFALSE 57548
// result := SortListByListAsc ( buildings , tmp ) else
57526: LD_ADDR_VAR 0 3
57530: PUSH
57531: LD_VAR 0 1
57535: PPUSH
57536: LD_VAR 0 5
57540: PPUSH
57541: CALL_OW 76
57545: ST_TO_ADDR
57546: GO 57568
// result := SortListByListDesc ( buildings , tmp ) ;
57548: LD_ADDR_VAR 0 3
57552: PUSH
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_VAR 0 5
57562: PPUSH
57563: CALL_OW 77
57567: ST_TO_ADDR
// end ;
57568: LD_VAR 0 3
57572: RET
// export function SortByClass ( units , class ) ; var un ; begin
57573: LD_INT 0
57575: PPUSH
57576: PPUSH
// if not units or not class then
57577: LD_VAR 0 1
57581: NOT
57582: IFTRUE 57591
57584: PUSH
57585: LD_VAR 0 2
57589: NOT
57590: OR
57591: IFFALSE 57595
// exit ;
57593: GO 57690
// result := [ ] ;
57595: LD_ADDR_VAR 0 3
57599: PUSH
57600: EMPTY
57601: ST_TO_ADDR
// for un in units do
57602: LD_ADDR_VAR 0 4
57606: PUSH
57607: LD_VAR 0 1
57611: PUSH
57612: FOR_IN
57613: IFFALSE 57688
// if GetClass ( un ) = class then
57615: LD_VAR 0 4
57619: PPUSH
57620: CALL_OW 257
57624: PUSH
57625: LD_VAR 0 2
57629: EQUAL
57630: IFFALSE 57657
// result := Insert ( result , 1 , un ) else
57632: LD_ADDR_VAR 0 3
57636: PUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: LD_INT 1
57644: PPUSH
57645: LD_VAR 0 4
57649: PPUSH
57650: CALL_OW 2
57654: ST_TO_ADDR
57655: GO 57686
// result := Replace ( result , result + 1 , un ) ;
57657: LD_ADDR_VAR 0 3
57661: PUSH
57662: LD_VAR 0 3
57666: PPUSH
57667: LD_VAR 0 3
57671: PUSH
57672: LD_INT 1
57674: PLUS
57675: PPUSH
57676: LD_VAR 0 4
57680: PPUSH
57681: CALL_OW 1
57685: ST_TO_ADDR
57686: GO 57612
57688: POP
57689: POP
// end ;
57690: LD_VAR 0 3
57694: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57695: LD_INT 0
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
// result := [ ] ;
57704: LD_ADDR_VAR 0 4
57708: PUSH
57709: EMPTY
57710: ST_TO_ADDR
// if x - r < 0 then
57711: LD_VAR 0 1
57715: PUSH
57716: LD_VAR 0 3
57720: MINUS
57721: PUSH
57722: LD_INT 0
57724: LESS
57725: IFFALSE 57737
// min_x := 0 else
57727: LD_ADDR_VAR 0 8
57731: PUSH
57732: LD_INT 0
57734: ST_TO_ADDR
57735: GO 57753
// min_x := x - r ;
57737: LD_ADDR_VAR 0 8
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: LD_VAR 0 3
57751: MINUS
57752: ST_TO_ADDR
// if y - r < 0 then
57753: LD_VAR 0 2
57757: PUSH
57758: LD_VAR 0 3
57762: MINUS
57763: PUSH
57764: LD_INT 0
57766: LESS
57767: IFFALSE 57779
// min_y := 0 else
57769: LD_ADDR_VAR 0 7
57773: PUSH
57774: LD_INT 0
57776: ST_TO_ADDR
57777: GO 57795
// min_y := y - r ;
57779: LD_ADDR_VAR 0 7
57783: PUSH
57784: LD_VAR 0 2
57788: PUSH
57789: LD_VAR 0 3
57793: MINUS
57794: ST_TO_ADDR
// max_x := x + r ;
57795: LD_ADDR_VAR 0 9
57799: PUSH
57800: LD_VAR 0 1
57804: PUSH
57805: LD_VAR 0 3
57809: PLUS
57810: ST_TO_ADDR
// max_y := y + r ;
57811: LD_ADDR_VAR 0 10
57815: PUSH
57816: LD_VAR 0 2
57820: PUSH
57821: LD_VAR 0 3
57825: PLUS
57826: ST_TO_ADDR
// for _x = min_x to max_x do
57827: LD_ADDR_VAR 0 5
57831: PUSH
57832: DOUBLE
57833: LD_VAR 0 8
57837: DEC
57838: ST_TO_ADDR
57839: LD_VAR 0 9
57843: PUSH
57844: FOR_TO
57845: IFFALSE 57946
// for _y = min_y to max_y do
57847: LD_ADDR_VAR 0 6
57851: PUSH
57852: DOUBLE
57853: LD_VAR 0 7
57857: DEC
57858: ST_TO_ADDR
57859: LD_VAR 0 10
57863: PUSH
57864: FOR_TO
57865: IFFALSE 57942
// begin if not ValidHex ( _x , _y ) then
57867: LD_VAR 0 5
57871: PPUSH
57872: LD_VAR 0 6
57876: PPUSH
57877: CALL_OW 488
57881: NOT
57882: IFFALSE 57886
// continue ;
57884: GO 57864
// if GetResourceTypeXY ( _x , _y ) then
57886: LD_VAR 0 5
57890: PPUSH
57891: LD_VAR 0 6
57895: PPUSH
57896: CALL_OW 283
57900: IFFALSE 57940
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57902: LD_ADDR_VAR 0 4
57906: PUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: LD_VAR 0 4
57916: PUSH
57917: LD_INT 1
57919: PLUS
57920: PPUSH
57921: LD_VAR 0 5
57925: PUSH
57926: LD_VAR 0 6
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PPUSH
57935: CALL_OW 1
57939: ST_TO_ADDR
// end ;
57940: GO 57864
57942: POP
57943: POP
57944: GO 57844
57946: POP
57947: POP
// end ;
57948: LD_VAR 0 4
57952: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57953: LD_INT 0
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
57959: PPUSH
57960: PPUSH
57961: PPUSH
57962: PPUSH
// if not units then
57963: LD_VAR 0 1
57967: NOT
57968: IFFALSE 57972
// exit ;
57970: GO 58504
// result := UnitFilter ( units , [ f_ok ] ) ;
57972: LD_ADDR_VAR 0 3
57976: PUSH
57977: LD_VAR 0 1
57981: PPUSH
57982: LD_INT 50
57984: PUSH
57985: EMPTY
57986: LIST
57987: PPUSH
57988: CALL_OW 72
57992: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57993: LD_ADDR_VAR 0 8
57997: PUSH
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 1
58005: ARRAY
58006: PPUSH
58007: CALL_OW 255
58011: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58012: LD_ADDR_VAR 0 10
58016: PUSH
58017: LD_INT 29
58019: PUSH
58020: LD_INT 91
58022: PUSH
58023: LD_INT 49
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// if not result then
58031: LD_VAR 0 3
58035: NOT
58036: IFFALSE 58040
// exit ;
58038: GO 58504
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58040: LD_ADDR_VAR 0 5
58044: PUSH
58045: LD_INT 81
58047: PUSH
58048: LD_VAR 0 8
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PPUSH
58057: CALL_OW 69
58061: ST_TO_ADDR
// for i in result do
58062: LD_ADDR_VAR 0 4
58066: PUSH
58067: LD_VAR 0 3
58071: PUSH
58072: FOR_IN
58073: IFFALSE 58502
// begin tag := GetTag ( i ) + 1 ;
58075: LD_ADDR_VAR 0 9
58079: PUSH
58080: LD_VAR 0 4
58084: PPUSH
58085: CALL_OW 110
58089: PUSH
58090: LD_INT 1
58092: PLUS
58093: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58094: LD_ADDR_VAR 0 7
58098: PUSH
58099: LD_VAR 0 4
58103: PPUSH
58104: CALL_OW 250
58108: PPUSH
58109: LD_VAR 0 4
58113: PPUSH
58114: CALL_OW 251
58118: PPUSH
58119: LD_INT 4
58121: PPUSH
58122: CALL 57695 0 3
58126: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58127: LD_VAR 0 4
58131: PPUSH
58132: CALL_OW 247
58136: PUSH
58137: LD_INT 2
58139: EQUAL
58140: IFFALSE 58152
58142: PUSH
58143: LD_VAR 0 7
58147: PUSH
58148: LD_INT 2
58150: GREATER
58151: AND
58152: IFFALSE 58172
58154: PUSH
58155: LD_VAR 0 4
58159: PPUSH
58160: CALL_OW 264
58164: PUSH
58165: LD_VAR 0 10
58169: IN
58170: NOT
58171: AND
58172: IFFALSE 58211
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58174: LD_VAR 0 4
58178: PPUSH
58179: LD_VAR 0 7
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PUSH
58188: LD_INT 1
58190: ARRAY
58191: PPUSH
58192: LD_VAR 0 7
58196: PUSH
58197: LD_INT 1
58199: ARRAY
58200: PUSH
58201: LD_INT 2
58203: ARRAY
58204: PPUSH
58205: CALL_OW 116
58209: GO 58500
// if path > tag then
58211: LD_VAR 0 2
58215: PUSH
58216: LD_VAR 0 9
58220: GREATER
58221: IFFALSE 58429
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58223: LD_ADDR_VAR 0 6
58227: PUSH
58228: LD_VAR 0 5
58232: PPUSH
58233: LD_INT 91
58235: PUSH
58236: LD_VAR 0 4
58240: PUSH
58241: LD_INT 8
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: PPUSH
58249: CALL_OW 72
58253: ST_TO_ADDR
// if nearEnemy then
58254: LD_VAR 0 6
58258: IFFALSE 58327
// begin if GetWeapon ( i ) = ru_time_lapser then
58260: LD_VAR 0 4
58264: PPUSH
58265: CALL_OW 264
58269: PUSH
58270: LD_INT 49
58272: EQUAL
58273: IFFALSE 58301
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58275: LD_VAR 0 4
58279: PPUSH
58280: LD_VAR 0 6
58284: PPUSH
58285: LD_VAR 0 4
58289: PPUSH
58290: CALL_OW 74
58294: PPUSH
58295: CALL_OW 112
58299: GO 58325
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58301: LD_VAR 0 4
58305: PPUSH
58306: LD_VAR 0 6
58310: PPUSH
58311: LD_VAR 0 4
58315: PPUSH
58316: CALL_OW 74
58320: PPUSH
58321: CALL 59585 0 2
// end else
58325: GO 58427
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58327: LD_VAR 0 4
58331: PPUSH
58332: LD_VAR 0 2
58336: PUSH
58337: LD_VAR 0 9
58341: ARRAY
58342: PUSH
58343: LD_INT 1
58345: ARRAY
58346: PPUSH
58347: LD_VAR 0 2
58351: PUSH
58352: LD_VAR 0 9
58356: ARRAY
58357: PUSH
58358: LD_INT 2
58360: ARRAY
58361: PPUSH
58362: CALL_OW 297
58366: PUSH
58367: LD_INT 6
58369: GREATER
58370: IFFALSE 58413
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58372: LD_VAR 0 4
58376: PPUSH
58377: LD_VAR 0 2
58381: PUSH
58382: LD_VAR 0 9
58386: ARRAY
58387: PUSH
58388: LD_INT 1
58390: ARRAY
58391: PPUSH
58392: LD_VAR 0 2
58396: PUSH
58397: LD_VAR 0 9
58401: ARRAY
58402: PUSH
58403: LD_INT 2
58405: ARRAY
58406: PPUSH
58407: CALL_OW 114
58411: GO 58427
// SetTag ( i , tag ) ;
58413: LD_VAR 0 4
58417: PPUSH
58418: LD_VAR 0 9
58422: PPUSH
58423: CALL_OW 109
// end else
58427: GO 58500
// if enemy then
58429: LD_VAR 0 5
58433: IFFALSE 58500
// begin if GetWeapon ( i ) = ru_time_lapser then
58435: LD_VAR 0 4
58439: PPUSH
58440: CALL_OW 264
58444: PUSH
58445: LD_INT 49
58447: EQUAL
58448: IFFALSE 58476
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58450: LD_VAR 0 4
58454: PPUSH
58455: LD_VAR 0 5
58459: PPUSH
58460: LD_VAR 0 4
58464: PPUSH
58465: CALL_OW 74
58469: PPUSH
58470: CALL_OW 112
58474: GO 58500
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58476: LD_VAR 0 4
58480: PPUSH
58481: LD_VAR 0 5
58485: PPUSH
58486: LD_VAR 0 4
58490: PPUSH
58491: CALL_OW 74
58495: PPUSH
58496: CALL 59585 0 2
// end ; end ;
58500: GO 58072
58502: POP
58503: POP
// end ;
58504: LD_VAR 0 3
58508: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58509: LD_INT 0
58511: PPUSH
58512: PPUSH
58513: PPUSH
// if not unit or IsInUnit ( unit ) then
58514: LD_VAR 0 1
58518: NOT
58519: IFTRUE 58532
58521: PUSH
58522: LD_VAR 0 1
58526: PPUSH
58527: CALL_OW 310
58531: OR
58532: IFFALSE 58536
// exit ;
58534: GO 58627
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58536: LD_ADDR_VAR 0 4
58540: PUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: CALL_OW 250
58550: PPUSH
58551: LD_VAR 0 2
58555: PPUSH
58556: LD_INT 1
58558: PPUSH
58559: CALL_OW 272
58563: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58564: LD_ADDR_VAR 0 5
58568: PUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: CALL_OW 251
58578: PPUSH
58579: LD_VAR 0 2
58583: PPUSH
58584: LD_INT 1
58586: PPUSH
58587: CALL_OW 273
58591: ST_TO_ADDR
// if ValidHex ( x , y ) then
58592: LD_VAR 0 4
58596: PPUSH
58597: LD_VAR 0 5
58601: PPUSH
58602: CALL_OW 488
58606: IFFALSE 58627
// ComTurnXY ( unit , x , y ) ;
58608: LD_VAR 0 1
58612: PPUSH
58613: LD_VAR 0 4
58617: PPUSH
58618: LD_VAR 0 5
58622: PPUSH
58623: CALL_OW 118
// end ;
58627: LD_VAR 0 3
58631: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58632: LD_INT 0
58634: PPUSH
58635: PPUSH
// result := false ;
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: LD_INT 0
58643: ST_TO_ADDR
// if not units then
58644: LD_VAR 0 2
58648: NOT
58649: IFFALSE 58653
// exit ;
58651: GO 58698
// for i in units do
58653: LD_ADDR_VAR 0 4
58657: PUSH
58658: LD_VAR 0 2
58662: PUSH
58663: FOR_IN
58664: IFFALSE 58696
// if See ( side , i ) then
58666: LD_VAR 0 1
58670: PPUSH
58671: LD_VAR 0 4
58675: PPUSH
58676: CALL_OW 292
58680: IFFALSE 58694
// begin result := true ;
58682: LD_ADDR_VAR 0 3
58686: PUSH
58687: LD_INT 1
58689: ST_TO_ADDR
// exit ;
58690: POP
58691: POP
58692: GO 58698
// end ;
58694: GO 58663
58696: POP
58697: POP
// end ;
58698: LD_VAR 0 3
58702: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58703: LD_INT 0
58705: PPUSH
58706: PPUSH
58707: PPUSH
58708: PPUSH
// if not unit or not points then
58709: LD_VAR 0 1
58713: NOT
58714: IFTRUE 58723
58716: PUSH
58717: LD_VAR 0 2
58721: NOT
58722: OR
58723: IFFALSE 58727
// exit ;
58725: GO 58817
// dist := 99999 ;
58727: LD_ADDR_VAR 0 5
58731: PUSH
58732: LD_INT 99999
58734: ST_TO_ADDR
// for i in points do
58735: LD_ADDR_VAR 0 4
58739: PUSH
58740: LD_VAR 0 2
58744: PUSH
58745: FOR_IN
58746: IFFALSE 58815
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58748: LD_ADDR_VAR 0 6
58752: PUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: LD_VAR 0 4
58762: PUSH
58763: LD_INT 1
58765: ARRAY
58766: PPUSH
58767: LD_VAR 0 4
58771: PUSH
58772: LD_INT 2
58774: ARRAY
58775: PPUSH
58776: CALL_OW 297
58780: ST_TO_ADDR
// if tmpDist < dist then
58781: LD_VAR 0 6
58785: PUSH
58786: LD_VAR 0 5
58790: LESS
58791: IFFALSE 58813
// begin result := i ;
58793: LD_ADDR_VAR 0 3
58797: PUSH
58798: LD_VAR 0 4
58802: ST_TO_ADDR
// dist := tmpDist ;
58803: LD_ADDR_VAR 0 5
58807: PUSH
58808: LD_VAR 0 6
58812: ST_TO_ADDR
// end ; end ;
58813: GO 58745
58815: POP
58816: POP
// end ;
58817: LD_VAR 0 3
58821: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58822: LD_INT 0
58824: PPUSH
// uc_side := side ;
58825: LD_ADDR_OWVAR 20
58829: PUSH
58830: LD_VAR 0 1
58834: ST_TO_ADDR
// uc_nation := 3 ;
58835: LD_ADDR_OWVAR 21
58839: PUSH
58840: LD_INT 3
58842: ST_TO_ADDR
// vc_chassis := 25 ;
58843: LD_ADDR_OWVAR 37
58847: PUSH
58848: LD_INT 25
58850: ST_TO_ADDR
// vc_engine := engine_siberite ;
58851: LD_ADDR_OWVAR 39
58855: PUSH
58856: LD_INT 3
58858: ST_TO_ADDR
// vc_control := control_computer ;
58859: LD_ADDR_OWVAR 38
58863: PUSH
58864: LD_INT 3
58866: ST_TO_ADDR
// vc_weapon := 59 ;
58867: LD_ADDR_OWVAR 40
58871: PUSH
58872: LD_INT 59
58874: ST_TO_ADDR
// result := CreateVehicle ;
58875: LD_ADDR_VAR 0 5
58879: PUSH
58880: CALL_OW 45
58884: ST_TO_ADDR
// SetDir ( result , d ) ;
58885: LD_VAR 0 5
58889: PPUSH
58890: LD_VAR 0 4
58894: PPUSH
58895: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58899: LD_VAR 0 5
58903: PPUSH
58904: LD_VAR 0 2
58908: PPUSH
58909: LD_VAR 0 3
58913: PPUSH
58914: LD_INT 0
58916: PPUSH
58917: CALL_OW 48
// end ;
58921: LD_VAR 0 5
58925: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58926: LD_INT 0
58928: PPUSH
58929: PPUSH
58930: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58931: LD_ADDR_VAR 0 2
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58954: LD_VAR 0 1
58958: NOT
58959: IFTRUE 58992
58961: PUSH
58962: LD_VAR 0 1
58966: PPUSH
58967: CALL_OW 264
58971: PUSH
58972: LD_INT 12
58974: PUSH
58975: LD_INT 51
58977: PUSH
58978: LD_INT 32
58980: PUSH
58981: LD_INT 89
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: IN
58990: NOT
58991: OR
58992: IFFALSE 58996
// exit ;
58994: GO 59094
// for i := 1 to 3 do
58996: LD_ADDR_VAR 0 3
59000: PUSH
59001: DOUBLE
59002: LD_INT 1
59004: DEC
59005: ST_TO_ADDR
59006: LD_INT 3
59008: PUSH
59009: FOR_TO
59010: IFFALSE 59092
// begin tmp := GetCargo ( cargo , i ) ;
59012: LD_ADDR_VAR 0 4
59016: PUSH
59017: LD_VAR 0 1
59021: PPUSH
59022: LD_VAR 0 3
59026: PPUSH
59027: CALL_OW 289
59031: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59032: LD_ADDR_VAR 0 2
59036: PUSH
59037: LD_VAR 0 2
59041: PPUSH
59042: LD_VAR 0 3
59046: PPUSH
59047: LD_VAR 0 4
59051: PPUSH
59052: CALL_OW 1
59056: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59057: LD_ADDR_VAR 0 2
59061: PUSH
59062: LD_VAR 0 2
59066: PPUSH
59067: LD_INT 4
59069: PPUSH
59070: LD_VAR 0 2
59074: PUSH
59075: LD_INT 4
59077: ARRAY
59078: PUSH
59079: LD_VAR 0 4
59083: PLUS
59084: PPUSH
59085: CALL_OW 1
59089: ST_TO_ADDR
// end ;
59090: GO 59009
59092: POP
59093: POP
// end ;
59094: LD_VAR 0 2
59098: RET
// export function Length ( array ) ; begin
59099: LD_INT 0
59101: PPUSH
// result := array + 0 ;
59102: LD_ADDR_VAR 0 2
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: LD_INT 0
59114: PLUS
59115: ST_TO_ADDR
// end ;
59116: LD_VAR 0 2
59120: RET
// export function PrepareArray ( array ) ; begin
59121: LD_INT 0
59123: PPUSH
// result := array diff 0 ;
59124: LD_ADDR_VAR 0 2
59128: PUSH
59129: LD_VAR 0 1
59133: PUSH
59134: LD_INT 0
59136: DIFF
59137: ST_TO_ADDR
// if not result [ 1 ] then
59138: LD_VAR 0 2
59142: PUSH
59143: LD_INT 1
59145: ARRAY
59146: NOT
59147: IFFALSE 59167
// result := Delete ( result , 1 ) ;
59149: LD_ADDR_VAR 0 2
59153: PUSH
59154: LD_VAR 0 2
59158: PPUSH
59159: LD_INT 1
59161: PPUSH
59162: CALL_OW 3
59166: ST_TO_ADDR
// end ;
59167: LD_VAR 0 2
59171: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59172: LD_INT 0
59174: PPUSH
59175: PPUSH
59176: PPUSH
59177: PPUSH
// sibRocketRange := 25 ;
59178: LD_ADDR_VAR 0 6
59182: PUSH
59183: LD_INT 25
59185: ST_TO_ADDR
// result := false ;
59186: LD_ADDR_VAR 0 4
59190: PUSH
59191: LD_INT 0
59193: ST_TO_ADDR
// for i := 0 to 5 do
59194: LD_ADDR_VAR 0 5
59198: PUSH
59199: DOUBLE
59200: LD_INT 0
59202: DEC
59203: ST_TO_ADDR
59204: LD_INT 5
59206: PUSH
59207: FOR_TO
59208: IFFALSE 59275
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59210: LD_VAR 0 1
59214: PPUSH
59215: LD_VAR 0 5
59219: PPUSH
59220: LD_VAR 0 6
59224: PPUSH
59225: CALL_OW 272
59229: PPUSH
59230: LD_VAR 0 2
59234: PPUSH
59235: LD_VAR 0 5
59239: PPUSH
59240: LD_VAR 0 6
59244: PPUSH
59245: CALL_OW 273
59249: PPUSH
59250: LD_VAR 0 3
59254: PPUSH
59255: CALL_OW 309
59259: IFFALSE 59273
// begin result := true ;
59261: LD_ADDR_VAR 0 4
59265: PUSH
59266: LD_INT 1
59268: ST_TO_ADDR
// exit ;
59269: POP
59270: POP
59271: GO 59277
// end ;
59273: GO 59207
59275: POP
59276: POP
// end ;
59277: LD_VAR 0 4
59281: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59282: LD_INT 0
59284: PPUSH
59285: PPUSH
59286: PPUSH
// if btype = b_depot then
59287: LD_VAR 0 2
59291: PUSH
59292: LD_INT 0
59294: EQUAL
59295: IFFALSE 59307
// begin result := true ;
59297: LD_ADDR_VAR 0 3
59301: PUSH
59302: LD_INT 1
59304: ST_TO_ADDR
// exit ;
59305: GO 59427
// end ; pom := GetBase ( depot ) ;
59307: LD_ADDR_VAR 0 4
59311: PUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 274
59321: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59322: LD_ADDR_VAR 0 5
59326: PUSH
59327: LD_VAR 0 2
59331: PPUSH
59332: LD_VAR 0 1
59336: PPUSH
59337: CALL_OW 248
59341: PPUSH
59342: CALL_OW 450
59346: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59347: LD_ADDR_VAR 0 3
59351: PUSH
59352: LD_VAR 0 4
59356: PPUSH
59357: LD_INT 1
59359: PPUSH
59360: CALL_OW 275
59364: PUSH
59365: LD_VAR 0 5
59369: PUSH
59370: LD_INT 1
59372: ARRAY
59373: GREATEREQUAL
59374: IFFALSE 59400
59376: PUSH
59377: LD_VAR 0 4
59381: PPUSH
59382: LD_INT 2
59384: PPUSH
59385: CALL_OW 275
59389: PUSH
59390: LD_VAR 0 5
59394: PUSH
59395: LD_INT 2
59397: ARRAY
59398: GREATEREQUAL
59399: AND
59400: IFFALSE 59426
59402: PUSH
59403: LD_VAR 0 4
59407: PPUSH
59408: LD_INT 3
59410: PPUSH
59411: CALL_OW 275
59415: PUSH
59416: LD_VAR 0 5
59420: PUSH
59421: LD_INT 3
59423: ARRAY
59424: GREATEREQUAL
59425: AND
59426: ST_TO_ADDR
// end ;
59427: LD_VAR 0 3
59431: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59432: LD_INT 0
59434: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59435: LD_VAR 0 1
59439: PPUSH
59440: LD_VAR 0 2
59444: PPUSH
59445: LD_INT 0
59447: PPUSH
59448: LD_INT 0
59450: PPUSH
59451: LD_INT 1
59453: PPUSH
59454: LD_INT 0
59456: PPUSH
59457: CALL_OW 587
// end ;
59461: LD_VAR 0 3
59465: RET
// export function CenterOnNow ( unit ) ; begin
59466: LD_INT 0
59468: PPUSH
// result := IsInUnit ( unit ) ;
59469: LD_ADDR_VAR 0 2
59473: PUSH
59474: LD_VAR 0 1
59478: PPUSH
59479: CALL_OW 310
59483: ST_TO_ADDR
// if not result then
59484: LD_VAR 0 2
59488: NOT
59489: IFFALSE 59501
// result := unit ;
59491: LD_ADDR_VAR 0 2
59495: PUSH
59496: LD_VAR 0 1
59500: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL_OW 87
// end ;
59510: LD_VAR 0 2
59514: RET
// export function ComMoveHex ( unit , hex ) ; begin
59515: LD_INT 0
59517: PPUSH
// if not hex then
59518: LD_VAR 0 2
59522: NOT
59523: IFFALSE 59527
// exit ;
59525: GO 59580
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59527: LD_VAR 0 2
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PPUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_INT 2
59543: ARRAY
59544: PPUSH
59545: CALL_OW 428
59549: IFFALSE 59553
// exit ;
59551: GO 59580
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_INT 1
59565: ARRAY
59566: PPUSH
59567: LD_VAR 0 2
59571: PUSH
59572: LD_INT 2
59574: ARRAY
59575: PPUSH
59576: CALL_OW 111
// end ;
59580: LD_VAR 0 3
59584: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59585: LD_INT 0
59587: PPUSH
59588: PPUSH
59589: PPUSH
// if not unit or not enemy then
59590: LD_VAR 0 1
59594: NOT
59595: IFTRUE 59604
59597: PUSH
59598: LD_VAR 0 2
59602: NOT
59603: OR
59604: IFFALSE 59608
// exit ;
59606: GO 59734
// x := GetX ( enemy ) ;
59608: LD_ADDR_VAR 0 4
59612: PUSH
59613: LD_VAR 0 2
59617: PPUSH
59618: CALL_OW 250
59622: ST_TO_ADDR
// y := GetY ( enemy ) ;
59623: LD_ADDR_VAR 0 5
59627: PUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: CALL_OW 251
59637: ST_TO_ADDR
// if ValidHex ( x , y ) then
59638: LD_VAR 0 4
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: CALL_OW 488
59652: IFFALSE 59734
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59654: LD_VAR 0 2
59658: PPUSH
59659: CALL_OW 247
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: IN
59674: IFTRUE 59697
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL_OW 255
59686: PPUSH
59687: LD_VAR 0 2
59691: PPUSH
59692: CALL_OW 292
59696: OR
59697: IFFALSE 59715
// ComAttackUnit ( unit , enemy ) else
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_VAR 0 2
59708: PPUSH
59709: CALL_OW 115
59713: GO 59734
// ComAgressiveMove ( unit , x , y ) ;
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_VAR 0 4
59724: PPUSH
59725: LD_VAR 0 5
59729: PPUSH
59730: CALL_OW 114
// end ;
59734: LD_VAR 0 3
59738: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59739: LD_INT 0
59741: PPUSH
59742: PPUSH
59743: PPUSH
// list := AreaToList ( area , 0 ) ;
59744: LD_ADDR_VAR 0 5
59748: PUSH
59749: LD_VAR 0 1
59753: PPUSH
59754: LD_INT 0
59756: PPUSH
59757: CALL_OW 517
59761: ST_TO_ADDR
// if not list then
59762: LD_VAR 0 5
59766: NOT
59767: IFFALSE 59771
// exit ;
59769: GO 59901
// if all then
59771: LD_VAR 0 2
59775: IFFALSE 59863
// begin for i := 1 to list [ 1 ] do
59777: LD_ADDR_VAR 0 4
59781: PUSH
59782: DOUBLE
59783: LD_INT 1
59785: DEC
59786: ST_TO_ADDR
59787: LD_VAR 0 5
59791: PUSH
59792: LD_INT 1
59794: ARRAY
59795: PUSH
59796: FOR_TO
59797: IFFALSE 59859
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: LD_VAR 0 3
59808: PPUSH
59809: LD_VAR 0 3
59813: PUSH
59814: LD_INT 1
59816: PLUS
59817: PPUSH
59818: LD_VAR 0 5
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PUSH
59827: LD_VAR 0 4
59831: ARRAY
59832: PUSH
59833: LD_VAR 0 5
59837: PUSH
59838: LD_INT 2
59840: ARRAY
59841: PUSH
59842: LD_VAR 0 4
59846: ARRAY
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PPUSH
59852: CALL_OW 1
59856: ST_TO_ADDR
59857: GO 59796
59859: POP
59860: POP
// exit ;
59861: GO 59901
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59863: LD_ADDR_VAR 0 3
59867: PUSH
59868: LD_VAR 0 5
59872: PUSH
59873: LD_INT 1
59875: ARRAY
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: PUSH
59881: LD_VAR 0 5
59885: PUSH
59886: LD_INT 2
59888: ARRAY
59889: PUSH
59890: LD_INT 1
59892: ARRAY
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: ST_TO_ADDR
// end ;
59901: LD_VAR 0 3
59905: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59906: LD_INT 0
59908: PPUSH
59909: PPUSH
// list := AreaToList ( area , 0 ) ;
59910: LD_ADDR_VAR 0 4
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_INT 0
59922: PPUSH
59923: CALL_OW 517
59927: ST_TO_ADDR
// if not list then
59928: LD_VAR 0 4
59932: NOT
59933: IFFALSE 59937
// exit ;
59935: GO 59978
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: LD_VAR 0 4
59946: PUSH
59947: LD_INT 1
59949: ARRAY
59950: PUSH
59951: LD_INT 1
59953: ARRAY
59954: PUSH
59955: LD_VAR 0 4
59959: PUSH
59960: LD_INT 2
59962: ARRAY
59963: PUSH
59964: LD_INT 1
59966: ARRAY
59967: PUSH
59968: LD_VAR 0 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// end ;
59978: LD_VAR 0 3
59982: RET
// export function First ( array ) ; begin
59983: LD_INT 0
59985: PPUSH
// if not array then
59986: LD_VAR 0 1
59990: NOT
59991: IFFALSE 59995
// exit ;
59993: GO 60009
// result := array [ 1 ] ;
59995: LD_ADDR_VAR 0 2
59999: PUSH
60000: LD_VAR 0 1
60004: PUSH
60005: LD_INT 1
60007: ARRAY
60008: ST_TO_ADDR
// end ;
60009: LD_VAR 0 2
60013: RET
// export function Last ( array ) ; begin
60014: LD_INT 0
60016: PPUSH
// if not array then
60017: LD_VAR 0 1
60021: NOT
60022: IFFALSE 60026
// exit ;
60024: GO 60042
// result := array [ array ] ;
60026: LD_ADDR_VAR 0 2
60030: PUSH
60031: LD_VAR 0 1
60035: PUSH
60036: LD_VAR 0 1
60040: ARRAY
60041: ST_TO_ADDR
// end ;
60042: LD_VAR 0 2
60046: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60047: LD_INT 0
60049: PPUSH
60050: PPUSH
// result := [ ] ;
60051: LD_ADDR_VAR 0 5
60055: PUSH
60056: EMPTY
60057: ST_TO_ADDR
// if not array then
60058: LD_VAR 0 1
60062: NOT
60063: IFFALSE 60067
// exit ;
60065: GO 60179
// for i := 1 to array do
60067: LD_ADDR_VAR 0 6
60071: PUSH
60072: DOUBLE
60073: LD_INT 1
60075: DEC
60076: ST_TO_ADDR
60077: LD_VAR 0 1
60081: PUSH
60082: FOR_TO
60083: IFFALSE 60177
// if array [ i ] [ index ] = value then
60085: LD_VAR 0 1
60089: PUSH
60090: LD_VAR 0 6
60094: ARRAY
60095: PUSH
60096: LD_VAR 0 2
60100: ARRAY
60101: PUSH
60102: LD_VAR 0 3
60106: EQUAL
60107: IFFALSE 60175
// begin if indexColumn then
60109: LD_VAR 0 4
60113: IFFALSE 60149
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60115: LD_ADDR_VAR 0 5
60119: PUSH
60120: LD_VAR 0 5
60124: PPUSH
60125: LD_VAR 0 1
60129: PUSH
60130: LD_VAR 0 6
60134: ARRAY
60135: PUSH
60136: LD_VAR 0 4
60140: ARRAY
60141: PPUSH
60142: CALL 55187 0 2
60146: ST_TO_ADDR
60147: GO 60175
// result := Join ( result , array [ i ] ) ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_VAR 0 5
60158: PPUSH
60159: LD_VAR 0 1
60163: PUSH
60164: LD_VAR 0 6
60168: ARRAY
60169: PPUSH
60170: CALL 55187 0 2
60174: ST_TO_ADDR
// end ;
60175: GO 60082
60177: POP
60178: POP
// end ;
60179: LD_VAR 0 5
60183: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60184: LD_INT 0
60186: PPUSH
// if not vehicles or not parkingPoint then
60187: LD_VAR 0 1
60191: NOT
60192: IFTRUE 60201
60194: PUSH
60195: LD_VAR 0 2
60199: NOT
60200: OR
60201: IFFALSE 60205
// exit ;
60203: GO 60303
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60205: LD_ADDR_VAR 0 1
60209: PUSH
60210: LD_VAR 0 1
60214: PPUSH
60215: LD_INT 50
60217: PUSH
60218: EMPTY
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: LD_INT 92
60226: PUSH
60227: LD_VAR 0 2
60231: PUSH
60232: LD_INT 1
60234: ARRAY
60235: PUSH
60236: LD_VAR 0 2
60240: PUSH
60241: LD_INT 2
60243: ARRAY
60244: PUSH
60245: LD_INT 8
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PPUSH
60262: CALL_OW 72
60266: ST_TO_ADDR
// if not vehicles then
60267: LD_VAR 0 1
60271: NOT
60272: IFFALSE 60276
// exit ;
60274: GO 60303
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60276: LD_VAR 0 1
60280: PPUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_INT 1
60288: ARRAY
60289: PPUSH
60290: LD_VAR 0 2
60294: PUSH
60295: LD_INT 2
60297: ARRAY
60298: PPUSH
60299: CALL_OW 111
// end ;
60303: LD_VAR 0 3
60307: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60308: LD_INT 0
60310: PPUSH
60311: PPUSH
60312: PPUSH
// if not side or not area then
60313: LD_VAR 0 1
60317: NOT
60318: IFTRUE 60327
60320: PUSH
60321: LD_VAR 0 2
60325: NOT
60326: OR
60327: IFFALSE 60331
// exit ;
60329: GO 60450
// tmp := AreaToList ( area , 0 ) ;
60331: LD_ADDR_VAR 0 5
60335: PUSH
60336: LD_VAR 0 2
60340: PPUSH
60341: LD_INT 0
60343: PPUSH
60344: CALL_OW 517
60348: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60349: LD_ADDR_VAR 0 4
60353: PUSH
60354: DOUBLE
60355: LD_INT 1
60357: DEC
60358: ST_TO_ADDR
60359: LD_VAR 0 5
60363: PUSH
60364: LD_INT 1
60366: ARRAY
60367: PUSH
60368: FOR_TO
60369: IFFALSE 60448
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60371: LD_VAR 0 5
60375: PUSH
60376: LD_INT 1
60378: ARRAY
60379: PUSH
60380: LD_VAR 0 4
60384: ARRAY
60385: PPUSH
60386: LD_VAR 0 5
60390: PUSH
60391: LD_INT 2
60393: ARRAY
60394: PUSH
60395: LD_VAR 0 4
60399: ARRAY
60400: PPUSH
60401: CALL_OW 351
60405: IFFALSE 60446
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60407: LD_VAR 0 5
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: PUSH
60416: LD_VAR 0 4
60420: ARRAY
60421: PPUSH
60422: LD_VAR 0 5
60426: PUSH
60427: LD_INT 2
60429: ARRAY
60430: PUSH
60431: LD_VAR 0 4
60435: ARRAY
60436: PPUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 244
// end ;
60446: GO 60368
60448: POP
60449: POP
// end ;
60450: LD_VAR 0 3
60454: RET
// export function UniqueArray ( array ) ; var i ; begin
60455: LD_INT 0
60457: PPUSH
60458: PPUSH
// result := [ ] ;
60459: LD_ADDR_VAR 0 2
60463: PUSH
60464: EMPTY
60465: ST_TO_ADDR
// if not array then
60466: LD_VAR 0 1
60470: NOT
60471: IFFALSE 60475
// exit ;
60473: GO 60536
// for i := 1 to array do
60475: LD_ADDR_VAR 0 3
60479: PUSH
60480: DOUBLE
60481: LD_INT 1
60483: DEC
60484: ST_TO_ADDR
60485: LD_VAR 0 1
60489: PUSH
60490: FOR_TO
60491: IFFALSE 60534
// if not array [ i ] in result then
60493: LD_VAR 0 1
60497: PUSH
60498: LD_VAR 0 3
60502: ARRAY
60503: PUSH
60504: LD_VAR 0 2
60508: IN
60509: NOT
60510: IFFALSE 60532
// result := Join ( result , i ) ;
60512: LD_ADDR_VAR 0 2
60516: PUSH
60517: LD_VAR 0 2
60521: PPUSH
60522: LD_VAR 0 3
60526: PPUSH
60527: CALL 55187 0 2
60531: ST_TO_ADDR
60532: GO 60490
60534: POP
60535: POP
// end ; end_of_file
60536: LD_VAR 0 2
60540: RET
// export function SOS_UnitDestroyed ( un ) ; begin
60541: LD_INT 0
60543: PPUSH
// ComRadiation ( un ) ;
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL 61630 0 1
// end ;
60553: LD_VAR 0 2
60557: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60558: LD_INT 0
60560: PPUSH
// ComRadiation ( un ) ;
60561: LD_VAR 0 1
60565: PPUSH
60566: CALL 61630 0 1
// end ;
60570: LD_VAR 0 2
60574: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60575: LD_INT 0
60577: PPUSH
// end ;
60578: LD_VAR 0 4
60582: RET
// export function SOS_Command ( cmd ) ; begin
60583: LD_INT 0
60585: PPUSH
// end ;
60586: LD_VAR 0 2
60590: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60591: LD_INT 0
60593: PPUSH
// end ;
60594: LD_VAR 0 6
60598: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
60599: LD_INT 0
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
// if not vehicle or not factory then
60605: LD_VAR 0 1
60609: NOT
60610: IFTRUE 60619
60612: PUSH
60613: LD_VAR 0 2
60617: NOT
60618: OR
60619: IFFALSE 60623
// exit ;
60621: GO 61205
// if not factoryWaypoints then
60623: LD_EXP 64
60627: NOT
60628: IFFALSE 60632
// exit ;
60630: GO 61205
// for i := 1 to Count ( factoryWaypoints ) do
60632: LD_ADDR_VAR 0 4
60636: PUSH
60637: DOUBLE
60638: LD_INT 1
60640: DEC
60641: ST_TO_ADDR
60642: LD_EXP 64
60646: PPUSH
60647: CALL 19255 0 1
60651: PUSH
60652: FOR_TO
60653: IFFALSE 61203
// if factoryWaypoints [ i ] [ 2 ] = factory then
60655: LD_EXP 64
60659: PUSH
60660: LD_VAR 0 4
60664: ARRAY
60665: PUSH
60666: LD_INT 2
60668: ARRAY
60669: PUSH
60670: LD_VAR 0 2
60674: EQUAL
60675: IFFALSE 61201
// begin if GetControl ( vehicle ) = control_manual then
60677: LD_VAR 0 1
60681: PPUSH
60682: CALL_OW 263
60686: PUSH
60687: LD_INT 1
60689: EQUAL
60690: IFFALSE 61054
// begin driver := IsDrivenBy ( vehicle ) ;
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: CALL_OW 311
60706: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60707: LD_VAR 0 5
60711: PUSH
60712: LD_EXP 65
60716: IN
60717: IFTRUE 60731
60719: PUSH
60720: LD_VAR 0 1
60724: PUSH
60725: LD_EXP 65
60729: IN
60730: OR
60731: IFFALSE 60737
// exit ;
60733: POP
60734: POP
60735: GO 61205
// if not HasTask ( driver ) then
60737: LD_VAR 0 5
60741: PPUSH
60742: CALL_OW 314
60746: NOT
60747: IFFALSE 61052
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60749: LD_ADDR_EXP 65
60753: PUSH
60754: LD_EXP 65
60758: PPUSH
60759: LD_VAR 0 5
60763: PPUSH
60764: CALL 55187 0 2
60768: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60769: LD_ADDR_EXP 65
60773: PUSH
60774: LD_EXP 65
60778: PPUSH
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL 55187 0 2
60788: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60789: LD_ADDR_VAR 0 6
60793: PUSH
60794: LD_EXP 64
60798: PUSH
60799: LD_VAR 0 4
60803: ARRAY
60804: PUSH
60805: LD_INT 3
60807: ARRAY
60808: PPUSH
60809: LD_EXP 64
60813: PUSH
60814: LD_VAR 0 4
60818: ARRAY
60819: PUSH
60820: LD_INT 4
60822: ARRAY
60823: PPUSH
60824: CALL_OW 428
60828: ST_TO_ADDR
// if hex then
60829: LD_VAR 0 6
60833: IFFALSE 60851
// ComMoveUnit ( driver , hex ) else
60835: LD_VAR 0 5
60839: PPUSH
60840: LD_VAR 0 6
60844: PPUSH
60845: CALL_OW 112
60849: GO 60935
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60851: LD_VAR 0 1
60855: PPUSH
60856: LD_EXP 64
60860: PUSH
60861: LD_VAR 0 4
60865: ARRAY
60866: PUSH
60867: LD_INT 3
60869: ARRAY
60870: PPUSH
60871: LD_EXP 64
60875: PUSH
60876: LD_VAR 0 4
60880: ARRAY
60881: PUSH
60882: LD_INT 4
60884: ARRAY
60885: PPUSH
60886: CALL_OW 297
60890: PUSH
60891: LD_INT 0
60893: GREATER
60894: IFFALSE 60935
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60896: LD_VAR 0 5
60900: PPUSH
60901: LD_EXP 64
60905: PUSH
60906: LD_VAR 0 4
60910: ARRAY
60911: PUSH
60912: LD_INT 3
60914: ARRAY
60915: PPUSH
60916: LD_EXP 64
60920: PUSH
60921: LD_VAR 0 4
60925: ARRAY
60926: PUSH
60927: LD_INT 4
60929: ARRAY
60930: PPUSH
60931: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60935: LD_VAR 0 5
60939: PPUSH
60940: CALL_OW 181
// if Multiplayer then
60944: LD_OWVAR 4
60948: IFFALSE 60997
// begin repeat wait ( 10 ) ;
60950: LD_INT 10
60952: PPUSH
60953: CALL_OW 67
// until not IsInUnit ( driver ) ;
60957: LD_VAR 0 5
60961: PPUSH
60962: CALL_OW 310
60966: NOT
60967: IFFALSE 60950
// if not HasTask ( driver ) then
60969: LD_VAR 0 5
60973: PPUSH
60974: CALL_OW 314
60978: NOT
60979: IFFALSE 60995
// ComEnterUnit ( driver , factory ) ;
60981: LD_VAR 0 5
60985: PPUSH
60986: LD_VAR 0 2
60990: PPUSH
60991: CALL_OW 120
// end else
60995: GO 61011
// AddComEnterUnit ( driver , factory ) ;
60997: LD_VAR 0 5
61001: PPUSH
61002: LD_VAR 0 2
61006: PPUSH
61007: CALL_OW 180
// wait ( 0 0$1 ) ;
61011: LD_INT 35
61013: PPUSH
61014: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
61018: LD_ADDR_EXP 65
61022: PUSH
61023: LD_EXP 65
61027: PUSH
61028: LD_VAR 0 5
61032: DIFF
61033: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
61034: LD_ADDR_EXP 65
61038: PUSH
61039: LD_EXP 65
61043: PUSH
61044: LD_VAR 0 1
61048: DIFF
61049: ST_TO_ADDR
// break ;
61050: GO 61203
// end ; end else
61052: GO 61201
// if GetControl ( vehicle ) = control_remote then
61054: LD_VAR 0 1
61058: PPUSH
61059: CALL_OW 263
61063: PUSH
61064: LD_INT 2
61066: EQUAL
61067: IFFALSE 61153
// begin wait ( 0 0$2 ) ;
61069: LD_INT 70
61071: PPUSH
61072: CALL_OW 67
// repeat wait ( 10 ) ;
61076: LD_INT 10
61078: PPUSH
61079: CALL_OW 67
// Connect ( vehicle ) ;
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL 25499 0 1
// until IsControledBy ( vehicle ) ;
61092: LD_VAR 0 1
61096: PPUSH
61097: CALL_OW 312
61101: IFFALSE 61076
// wait ( 10 ) ;
61103: LD_INT 10
61105: PPUSH
61106: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61110: LD_VAR 0 1
61114: PPUSH
61115: LD_EXP 64
61119: PUSH
61120: LD_VAR 0 4
61124: ARRAY
61125: PUSH
61126: LD_INT 3
61128: ARRAY
61129: PPUSH
61130: LD_EXP 64
61134: PUSH
61135: LD_VAR 0 4
61139: ARRAY
61140: PUSH
61141: LD_INT 4
61143: ARRAY
61144: PPUSH
61145: CALL_OW 111
// break ;
61149: GO 61203
// end else
61151: GO 61201
// begin wait ( 0 0$3 ) ;
61153: LD_INT 105
61155: PPUSH
61156: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_EXP 64
61169: PUSH
61170: LD_VAR 0 4
61174: ARRAY
61175: PUSH
61176: LD_INT 3
61178: ARRAY
61179: PPUSH
61180: LD_EXP 64
61184: PUSH
61185: LD_VAR 0 4
61189: ARRAY
61190: PUSH
61191: LD_INT 4
61193: ARRAY
61194: PPUSH
61195: CALL_OW 111
// break ;
61199: GO 61203
// end ; end ;
61201: GO 60652
61203: POP
61204: POP
// end ;
61205: LD_VAR 0 3
61209: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61210: LD_INT 0
61212: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61213: LD_VAR 0 1
61217: PUSH
61218: LD_INT 250
61220: EQUAL
61221: IFFALSE 61238
61223: PUSH
61224: LD_VAR 0 2
61228: PPUSH
61229: CALL_OW 264
61233: PUSH
61234: LD_INT 81
61236: EQUAL
61237: AND
61238: IFFALSE 61259
// MinerPlaceMine ( unit , x , y ) ;
61240: LD_VAR 0 2
61244: PPUSH
61245: LD_VAR 0 4
61249: PPUSH
61250: LD_VAR 0 5
61254: PPUSH
61255: CALL 64391 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61259: LD_VAR 0 1
61263: PUSH
61264: LD_INT 251
61266: EQUAL
61267: IFFALSE 61284
61269: PUSH
61270: LD_VAR 0 2
61274: PPUSH
61275: CALL_OW 264
61279: PUSH
61280: LD_INT 81
61282: EQUAL
61283: AND
61284: IFFALSE 61305
// MinerDetonateMine ( unit , x , y ) ;
61286: LD_VAR 0 2
61290: PPUSH
61291: LD_VAR 0 4
61295: PPUSH
61296: LD_VAR 0 5
61300: PPUSH
61301: CALL 64670 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61305: LD_VAR 0 1
61309: PUSH
61310: LD_INT 252
61312: EQUAL
61313: IFFALSE 61330
61315: PUSH
61316: LD_VAR 0 2
61320: PPUSH
61321: CALL_OW 264
61325: PUSH
61326: LD_INT 81
61328: EQUAL
61329: AND
61330: IFFALSE 61351
// MinerCreateMinefield ( unit , x , y ) ;
61332: LD_VAR 0 2
61336: PPUSH
61337: LD_VAR 0 4
61341: PPUSH
61342: LD_VAR 0 5
61346: PPUSH
61347: CALL 65089 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61351: LD_VAR 0 1
61355: PUSH
61356: LD_INT 253
61358: EQUAL
61359: IFFALSE 61376
61361: PUSH
61362: LD_VAR 0 2
61366: PPUSH
61367: CALL_OW 257
61371: PUSH
61372: LD_INT 5
61374: EQUAL
61375: AND
61376: IFFALSE 61397
// ComBinocular ( unit , x , y ) ;
61378: LD_VAR 0 2
61382: PPUSH
61383: LD_VAR 0 4
61387: PPUSH
61388: LD_VAR 0 5
61392: PPUSH
61393: CALL 65464 0 3
// if selectedUnit then
61397: LD_VAR 0 3
61401: IFFALSE 61461
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61403: LD_VAR 0 1
61407: PUSH
61408: LD_INT 254
61410: EQUAL
61411: IFFALSE 61428
61413: PUSH
61414: LD_VAR 0 2
61418: PPUSH
61419: CALL_OW 264
61423: PUSH
61424: LD_INT 99
61426: EQUAL
61427: AND
61428: IFFALSE 61445
61430: PUSH
61431: LD_VAR 0 3
61435: PPUSH
61436: CALL_OW 263
61440: PUSH
61441: LD_INT 3
61443: EQUAL
61444: AND
61445: IFFALSE 61461
// HackDestroyVehicle ( unit , selectedUnit ) ;
61447: LD_VAR 0 2
61451: PPUSH
61452: LD_VAR 0 3
61456: PPUSH
61457: CALL 63751 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61461: LD_VAR 0 1
61465: PUSH
61466: LD_INT 255
61468: EQUAL
61469: IFFALSE 61493
61471: PUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: CALL_OW 264
61481: PUSH
61482: LD_INT 14
61484: PUSH
61485: LD_INT 53
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: IN
61492: AND
61493: IFFALSE 61511
61495: PUSH
61496: LD_VAR 0 4
61500: PPUSH
61501: LD_VAR 0 5
61505: PPUSH
61506: CALL_OW 488
61510: AND
61511: IFFALSE 61535
// CutTreeXYR ( unit , x , y , 12 ) ;
61513: LD_VAR 0 2
61517: PPUSH
61518: LD_VAR 0 4
61522: PPUSH
61523: LD_VAR 0 5
61527: PPUSH
61528: LD_INT 12
61530: PPUSH
61531: CALL 61726 0 4
// if cmd = 256 then
61535: LD_VAR 0 1
61539: PUSH
61540: LD_INT 256
61542: EQUAL
61543: IFFALSE 61564
// SetFactoryWaypoint ( unit , x , y ) ;
61545: LD_VAR 0 2
61549: PPUSH
61550: LD_VAR 0 4
61554: PPUSH
61555: LD_VAR 0 5
61559: PPUSH
61560: CALL 66786 0 3
// if cmd = 257 then
61564: LD_VAR 0 1
61568: PUSH
61569: LD_INT 257
61571: EQUAL
61572: IFFALSE 61593
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61574: LD_VAR 0 2
61578: PPUSH
61579: LD_VAR 0 4
61583: PPUSH
61584: LD_VAR 0 5
61588: PPUSH
61589: CALL 67282 0 3
// if cmd = 258 then
61593: LD_VAR 0 1
61597: PUSH
61598: LD_INT 258
61600: EQUAL
61601: IFFALSE 61625
// BurnTreeXYR ( unit , x , y , 8 ) ;
61603: LD_VAR 0 2
61607: PPUSH
61608: LD_VAR 0 4
61612: PPUSH
61613: LD_VAR 0 5
61617: PPUSH
61618: LD_INT 8
61620: PPUSH
61621: CALL 62126 0 4
// end ;
61625: LD_VAR 0 6
61629: RET
// export function ComRadiation ( un ) ; var eff ; begin
61630: LD_INT 0
61632: PPUSH
61633: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61634: LD_VAR 0 1
61638: PPUSH
61639: CALL_OW 264
61643: PUSH
61644: LD_INT 91
61646: NONEQUAL
61647: IFFALSE 61651
// exit ;
61649: GO 61721
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61651: LD_INT 68
61653: PPUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: CALL_OW 255
61663: PPUSH
61664: CALL_OW 321
61668: PUSH
61669: LD_INT 2
61671: EQUAL
61672: IFFALSE 61684
// eff := 50 else
61674: LD_ADDR_VAR 0 3
61678: PUSH
61679: LD_INT 50
61681: ST_TO_ADDR
61682: GO 61692
// eff := 25 ;
61684: LD_ADDR_VAR 0 3
61688: PUSH
61689: LD_INT 25
61691: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61692: LD_VAR 0 1
61696: PPUSH
61697: CALL_OW 250
61701: PPUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 251
61711: PPUSH
61712: LD_VAR 0 3
61716: PPUSH
61717: CALL_OW 495
// end ;
61721: LD_VAR 0 2
61725: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61726: LD_INT 0
61728: PPUSH
61729: PPUSH
61730: PPUSH
61731: PPUSH
61732: PPUSH
61733: PPUSH
61734: PPUSH
61735: PPUSH
61736: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61737: LD_VAR 0 1
61741: PPUSH
61742: CALL_OW 302
61746: NOT
61747: IFTRUE 61766
61749: PUSH
61750: LD_VAR 0 2
61754: PPUSH
61755: LD_VAR 0 3
61759: PPUSH
61760: CALL_OW 488
61764: NOT
61765: OR
61766: IFTRUE 61775
61768: PUSH
61769: LD_VAR 0 4
61773: NOT
61774: OR
61775: IFFALSE 61779
// exit ;
61777: GO 62121
// list := [ ] ;
61779: LD_ADDR_VAR 0 13
61783: PUSH
61784: EMPTY
61785: ST_TO_ADDR
// if x - r < 0 then
61786: LD_VAR 0 2
61790: PUSH
61791: LD_VAR 0 4
61795: MINUS
61796: PUSH
61797: LD_INT 0
61799: LESS
61800: IFFALSE 61812
// min_x := 0 else
61802: LD_ADDR_VAR 0 7
61806: PUSH
61807: LD_INT 0
61809: ST_TO_ADDR
61810: GO 61828
// min_x := x - r ;
61812: LD_ADDR_VAR 0 7
61816: PUSH
61817: LD_VAR 0 2
61821: PUSH
61822: LD_VAR 0 4
61826: MINUS
61827: ST_TO_ADDR
// if y - r < 0 then
61828: LD_VAR 0 3
61832: PUSH
61833: LD_VAR 0 4
61837: MINUS
61838: PUSH
61839: LD_INT 0
61841: LESS
61842: IFFALSE 61854
// min_y := 0 else
61844: LD_ADDR_VAR 0 8
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
61852: GO 61870
// min_y := y - r ;
61854: LD_ADDR_VAR 0 8
61858: PUSH
61859: LD_VAR 0 3
61863: PUSH
61864: LD_VAR 0 4
61868: MINUS
61869: ST_TO_ADDR
// max_x := x + r ;
61870: LD_ADDR_VAR 0 9
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_VAR 0 4
61884: PLUS
61885: ST_TO_ADDR
// max_y := y + r ;
61886: LD_ADDR_VAR 0 10
61890: PUSH
61891: LD_VAR 0 3
61895: PUSH
61896: LD_VAR 0 4
61900: PLUS
61901: ST_TO_ADDR
// for _x = min_x to max_x do
61902: LD_ADDR_VAR 0 11
61906: PUSH
61907: DOUBLE
61908: LD_VAR 0 7
61912: DEC
61913: ST_TO_ADDR
61914: LD_VAR 0 9
61918: PUSH
61919: FOR_TO
61920: IFFALSE 62039
// for _y = min_y to max_y do
61922: LD_ADDR_VAR 0 12
61926: PUSH
61927: DOUBLE
61928: LD_VAR 0 8
61932: DEC
61933: ST_TO_ADDR
61934: LD_VAR 0 10
61938: PUSH
61939: FOR_TO
61940: IFFALSE 62035
// begin if not ValidHex ( _x , _y ) then
61942: LD_VAR 0 11
61946: PPUSH
61947: LD_VAR 0 12
61951: PPUSH
61952: CALL_OW 488
61956: NOT
61957: IFFALSE 61961
// continue ;
61959: GO 61939
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61961: LD_VAR 0 11
61965: PPUSH
61966: LD_VAR 0 12
61970: PPUSH
61971: CALL_OW 351
61975: IFFALSE 61993
61977: PUSH
61978: LD_VAR 0 11
61982: PPUSH
61983: LD_VAR 0 12
61987: PPUSH
61988: CALL_OW 554
61992: AND
61993: IFFALSE 62033
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61995: LD_ADDR_VAR 0 13
61999: PUSH
62000: LD_VAR 0 13
62004: PPUSH
62005: LD_VAR 0 13
62009: PUSH
62010: LD_INT 1
62012: PLUS
62013: PPUSH
62014: LD_VAR 0 11
62018: PUSH
62019: LD_VAR 0 12
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PPUSH
62028: CALL_OW 2
62032: ST_TO_ADDR
// end ;
62033: GO 61939
62035: POP
62036: POP
62037: GO 61919
62039: POP
62040: POP
// if not list then
62041: LD_VAR 0 13
62045: NOT
62046: IFFALSE 62050
// exit ;
62048: GO 62121
// for i in list do
62050: LD_ADDR_VAR 0 6
62054: PUSH
62055: LD_VAR 0 13
62059: PUSH
62060: FOR_IN
62061: IFFALSE 62119
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62063: LD_VAR 0 1
62067: PPUSH
62068: LD_STRING M
62070: PUSH
62071: LD_VAR 0 6
62075: PUSH
62076: LD_INT 1
62078: ARRAY
62079: PUSH
62080: LD_VAR 0 6
62084: PUSH
62085: LD_INT 2
62087: ARRAY
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: PPUSH
62113: CALL_OW 447
62117: GO 62060
62119: POP
62120: POP
// end ;
62121: LD_VAR 0 5
62125: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
62126: LD_INT 0
62128: PPUSH
62129: PPUSH
62130: PPUSH
62131: PPUSH
62132: PPUSH
62133: PPUSH
62134: PPUSH
62135: PPUSH
62136: PPUSH
62137: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 302
62147: NOT
62148: IFTRUE 62167
62150: PUSH
62151: LD_VAR 0 2
62155: PPUSH
62156: LD_VAR 0 3
62160: PPUSH
62161: CALL_OW 488
62165: NOT
62166: OR
62167: IFTRUE 62176
62169: PUSH
62170: LD_VAR 0 4
62174: NOT
62175: OR
62176: IFFALSE 62180
// exit ;
62178: GO 62697
// list := [ ] ;
62180: LD_ADDR_VAR 0 13
62184: PUSH
62185: EMPTY
62186: ST_TO_ADDR
// if x - r < 0 then
62187: LD_VAR 0 2
62191: PUSH
62192: LD_VAR 0 4
62196: MINUS
62197: PUSH
62198: LD_INT 0
62200: LESS
62201: IFFALSE 62213
// min_x := 0 else
62203: LD_ADDR_VAR 0 7
62207: PUSH
62208: LD_INT 0
62210: ST_TO_ADDR
62211: GO 62229
// min_x := x - r ;
62213: LD_ADDR_VAR 0 7
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_VAR 0 4
62227: MINUS
62228: ST_TO_ADDR
// if y - r < 0 then
62229: LD_VAR 0 3
62233: PUSH
62234: LD_VAR 0 4
62238: MINUS
62239: PUSH
62240: LD_INT 0
62242: LESS
62243: IFFALSE 62255
// min_y := 0 else
62245: LD_ADDR_VAR 0 8
62249: PUSH
62250: LD_INT 0
62252: ST_TO_ADDR
62253: GO 62271
// min_y := y - r ;
62255: LD_ADDR_VAR 0 8
62259: PUSH
62260: LD_VAR 0 3
62264: PUSH
62265: LD_VAR 0 4
62269: MINUS
62270: ST_TO_ADDR
// max_x := x + r ;
62271: LD_ADDR_VAR 0 9
62275: PUSH
62276: LD_VAR 0 2
62280: PUSH
62281: LD_VAR 0 4
62285: PLUS
62286: ST_TO_ADDR
// max_y := y + r ;
62287: LD_ADDR_VAR 0 10
62291: PUSH
62292: LD_VAR 0 3
62296: PUSH
62297: LD_VAR 0 4
62301: PLUS
62302: ST_TO_ADDR
// for _x = min_x to max_x do
62303: LD_ADDR_VAR 0 11
62307: PUSH
62308: DOUBLE
62309: LD_VAR 0 7
62313: DEC
62314: ST_TO_ADDR
62315: LD_VAR 0 9
62319: PUSH
62320: FOR_TO
62321: IFFALSE 62440
// for _y = min_y to max_y do
62323: LD_ADDR_VAR 0 12
62327: PUSH
62328: DOUBLE
62329: LD_VAR 0 8
62333: DEC
62334: ST_TO_ADDR
62335: LD_VAR 0 10
62339: PUSH
62340: FOR_TO
62341: IFFALSE 62436
// begin if not ValidHex ( _x , _y ) then
62343: LD_VAR 0 11
62347: PPUSH
62348: LD_VAR 0 12
62352: PPUSH
62353: CALL_OW 488
62357: NOT
62358: IFFALSE 62362
// continue ;
62360: GO 62340
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62362: LD_VAR 0 11
62366: PPUSH
62367: LD_VAR 0 12
62371: PPUSH
62372: CALL_OW 351
62376: IFFALSE 62394
62378: PUSH
62379: LD_VAR 0 11
62383: PPUSH
62384: LD_VAR 0 12
62388: PPUSH
62389: CALL_OW 554
62393: AND
62394: IFFALSE 62434
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62396: LD_ADDR_VAR 0 13
62400: PUSH
62401: LD_VAR 0 13
62405: PPUSH
62406: LD_VAR 0 13
62410: PUSH
62411: LD_INT 1
62413: PLUS
62414: PPUSH
62415: LD_VAR 0 11
62419: PUSH
62420: LD_VAR 0 12
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PPUSH
62429: CALL_OW 2
62433: ST_TO_ADDR
// end ;
62434: GO 62340
62436: POP
62437: POP
62438: GO 62320
62440: POP
62441: POP
// if not list then
62442: LD_VAR 0 13
62446: NOT
62447: IFFALSE 62451
// exit ;
62449: GO 62697
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62451: LD_ADDR_VAR 0 13
62455: PUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: LD_VAR 0 13
62465: PPUSH
62466: LD_INT 1
62468: PPUSH
62469: LD_INT 1
62471: PPUSH
62472: CALL 22627 0 4
62476: ST_TO_ADDR
// ComStop ( flame ) ;
62477: LD_VAR 0 1
62481: PPUSH
62482: CALL_OW 141
// for i in list do
62486: LD_ADDR_VAR 0 6
62490: PUSH
62491: LD_VAR 0 13
62495: PUSH
62496: FOR_IN
62497: IFFALSE 62528
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62499: LD_VAR 0 1
62503: PPUSH
62504: LD_VAR 0 6
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PPUSH
62513: LD_VAR 0 6
62517: PUSH
62518: LD_INT 2
62520: ARRAY
62521: PPUSH
62522: CALL_OW 176
62526: GO 62496
62528: POP
62529: POP
// repeat wait ( 0 0$1 ) ;
62530: LD_INT 35
62532: PPUSH
62533: CALL_OW 67
// task := GetTaskList ( flame ) ;
62537: LD_ADDR_VAR 0 14
62541: PUSH
62542: LD_VAR 0 1
62546: PPUSH
62547: CALL_OW 437
62551: ST_TO_ADDR
// if not task then
62552: LD_VAR 0 14
62556: NOT
62557: IFFALSE 62561
// exit ;
62559: GO 62697
// if task [ 1 ] [ 1 ] <> | then
62561: LD_VAR 0 14
62565: PUSH
62566: LD_INT 1
62568: ARRAY
62569: PUSH
62570: LD_INT 1
62572: ARRAY
62573: PUSH
62574: LD_STRING |
62576: NONEQUAL
62577: IFFALSE 62581
// exit ;
62579: GO 62697
// _x := task [ 1 ] [ 2 ] ;
62581: LD_ADDR_VAR 0 11
62585: PUSH
62586: LD_VAR 0 14
62590: PUSH
62591: LD_INT 1
62593: ARRAY
62594: PUSH
62595: LD_INT 2
62597: ARRAY
62598: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62599: LD_ADDR_VAR 0 12
62603: PUSH
62604: LD_VAR 0 14
62608: PUSH
62609: LD_INT 1
62611: ARRAY
62612: PUSH
62613: LD_INT 3
62615: ARRAY
62616: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62617: LD_VAR 0 11
62621: PPUSH
62622: LD_VAR 0 12
62626: PPUSH
62627: CALL_OW 351
62631: NOT
62632: IFTRUE 62651
62634: PUSH
62635: LD_VAR 0 11
62639: PPUSH
62640: LD_VAR 0 12
62644: PPUSH
62645: CALL_OW 554
62649: NOT
62650: OR
62651: IFFALSE 62685
// begin task := Delete ( task , 1 ) ;
62653: LD_ADDR_VAR 0 14
62657: PUSH
62658: LD_VAR 0 14
62662: PPUSH
62663: LD_INT 1
62665: PPUSH
62666: CALL_OW 3
62670: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62671: LD_VAR 0 1
62675: PPUSH
62676: LD_VAR 0 14
62680: PPUSH
62681: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62685: LD_VAR 0 1
62689: PPUSH
62690: CALL_OW 314
62694: NOT
62695: IFFALSE 62530
// end ;
62697: LD_VAR 0 5
62701: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62702: LD_EXP 54
62706: NOT
62707: IFFALSE 62757
62709: GO 62711
62711: DISABLE
// begin initHack := true ;
62712: LD_ADDR_EXP 54
62716: PUSH
62717: LD_INT 1
62719: ST_TO_ADDR
// hackTanks := [ ] ;
62720: LD_ADDR_EXP 55
62724: PUSH
62725: EMPTY
62726: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62727: LD_ADDR_EXP 56
62731: PUSH
62732: EMPTY
62733: ST_TO_ADDR
// hackLimit := 3 ;
62734: LD_ADDR_EXP 57
62738: PUSH
62739: LD_INT 3
62741: ST_TO_ADDR
// hackDist := 12 ;
62742: LD_ADDR_EXP 58
62746: PUSH
62747: LD_INT 12
62749: ST_TO_ADDR
// hackCounter := [ ] ;
62750: LD_ADDR_EXP 59
62754: PUSH
62755: EMPTY
62756: ST_TO_ADDR
// end ;
62757: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62758: LD_EXP 54
62762: IFFALSE 62780
62764: PUSH
62765: LD_INT 34
62767: PUSH
62768: LD_INT 99
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PPUSH
62775: CALL_OW 69
62779: AND
62780: IFFALSE 63033
62782: GO 62784
62784: DISABLE
62785: LD_INT 0
62787: PPUSH
62788: PPUSH
// begin enable ;
62789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62790: LD_ADDR_VAR 0 1
62794: PUSH
62795: LD_INT 34
62797: PUSH
62798: LD_INT 99
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PPUSH
62805: CALL_OW 69
62809: PUSH
62810: FOR_IN
62811: IFFALSE 63031
// begin if not i in hackTanks then
62813: LD_VAR 0 1
62817: PUSH
62818: LD_EXP 55
62822: IN
62823: NOT
62824: IFFALSE 62907
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62826: LD_ADDR_EXP 55
62830: PUSH
62831: LD_EXP 55
62835: PPUSH
62836: LD_EXP 55
62840: PUSH
62841: LD_INT 1
62843: PLUS
62844: PPUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 1
62854: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62855: LD_ADDR_EXP 56
62859: PUSH
62860: LD_EXP 56
62864: PPUSH
62865: LD_EXP 56
62869: PUSH
62870: LD_INT 1
62872: PLUS
62873: PPUSH
62874: EMPTY
62875: PPUSH
62876: CALL_OW 1
62880: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62881: LD_ADDR_EXP 59
62885: PUSH
62886: LD_EXP 59
62890: PPUSH
62891: LD_EXP 59
62895: PUSH
62896: LD_INT 1
62898: PLUS
62899: PPUSH
62900: EMPTY
62901: PPUSH
62902: CALL_OW 1
62906: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62907: LD_VAR 0 1
62911: PPUSH
62912: CALL_OW 302
62916: NOT
62917: IFFALSE 62930
// begin HackUnlinkAll ( i ) ;
62919: LD_VAR 0 1
62923: PPUSH
62924: CALL 63036 0 1
// continue ;
62928: GO 62810
// end ; HackCheckCapturedStatus ( i ) ;
62930: LD_VAR 0 1
62934: PPUSH
62935: CALL 63481 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62939: LD_ADDR_VAR 0 2
62943: PUSH
62944: LD_INT 81
62946: PUSH
62947: LD_VAR 0 1
62951: PPUSH
62952: CALL_OW 255
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 33
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 91
62973: PUSH
62974: LD_VAR 0 1
62978: PUSH
62979: LD_EXP 58
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 50
62991: PUSH
62992: EMPTY
62993: LIST
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: PPUSH
63001: CALL_OW 69
63005: ST_TO_ADDR
// if not tmp then
63006: LD_VAR 0 2
63010: NOT
63011: IFFALSE 63015
// continue ;
63013: GO 62810
// HackLink ( i , tmp ) ;
63015: LD_VAR 0 1
63019: PPUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: CALL 63172 0 2
// end ;
63029: GO 62810
63031: POP
63032: POP
// end ;
63033: PPOPN 2
63035: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63036: LD_INT 0
63038: PPUSH
63039: PPUSH
63040: PPUSH
// if not hack in hackTanks then
63041: LD_VAR 0 1
63045: PUSH
63046: LD_EXP 55
63050: IN
63051: NOT
63052: IFFALSE 63056
// exit ;
63054: GO 63167
// index := GetElementIndex ( hackTanks , hack ) ;
63056: LD_ADDR_VAR 0 4
63060: PUSH
63061: LD_EXP 55
63065: PPUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL 21922 0 2
63075: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63076: LD_EXP 56
63080: PUSH
63081: LD_VAR 0 4
63085: ARRAY
63086: IFFALSE 63167
// begin for i in hackTanksCaptured [ index ] do
63088: LD_ADDR_VAR 0 3
63092: PUSH
63093: LD_EXP 56
63097: PUSH
63098: LD_VAR 0 4
63102: ARRAY
63103: PUSH
63104: FOR_IN
63105: IFFALSE 63131
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63107: LD_VAR 0 3
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: PPUSH
63116: LD_VAR 0 3
63120: PUSH
63121: LD_INT 2
63123: ARRAY
63124: PPUSH
63125: CALL_OW 235
63129: GO 63104
63131: POP
63132: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63133: LD_ADDR_EXP 56
63137: PUSH
63138: LD_EXP 56
63142: PPUSH
63143: LD_VAR 0 4
63147: PPUSH
63148: EMPTY
63149: PPUSH
63150: CALL_OW 1
63154: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63155: LD_VAR 0 1
63159: PPUSH
63160: LD_INT 0
63162: PPUSH
63163: CALL_OW 505
// end ; end ;
63167: LD_VAR 0 2
63171: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63172: LD_INT 0
63174: PPUSH
63175: PPUSH
63176: PPUSH
// if not hack in hackTanks or not vehicles then
63177: LD_VAR 0 1
63181: PUSH
63182: LD_EXP 55
63186: IN
63187: NOT
63188: IFTRUE 63197
63190: PUSH
63191: LD_VAR 0 2
63195: NOT
63196: OR
63197: IFFALSE 63201
// exit ;
63199: GO 63476
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63201: LD_ADDR_VAR 0 2
63205: PUSH
63206: LD_VAR 0 1
63210: PPUSH
63211: LD_VAR 0 2
63215: PPUSH
63216: LD_INT 1
63218: PPUSH
63219: LD_INT 1
63221: PPUSH
63222: CALL 22574 0 4
63226: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63227: LD_ADDR_VAR 0 5
63231: PUSH
63232: LD_EXP 55
63236: PPUSH
63237: LD_VAR 0 1
63241: PPUSH
63242: CALL 21922 0 2
63246: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63247: LD_EXP 56
63251: PUSH
63252: LD_VAR 0 5
63256: ARRAY
63257: PUSH
63258: LD_EXP 57
63262: LESS
63263: IFFALSE 63452
// begin for i := 1 to vehicles do
63265: LD_ADDR_VAR 0 4
63269: PUSH
63270: DOUBLE
63271: LD_INT 1
63273: DEC
63274: ST_TO_ADDR
63275: LD_VAR 0 2
63279: PUSH
63280: FOR_TO
63281: IFFALSE 63450
// begin if hackTanksCaptured [ index ] = hackLimit then
63283: LD_EXP 56
63287: PUSH
63288: LD_VAR 0 5
63292: ARRAY
63293: PUSH
63294: LD_EXP 57
63298: EQUAL
63299: IFFALSE 63303
// break ;
63301: GO 63450
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63303: LD_ADDR_EXP 59
63307: PUSH
63308: LD_EXP 59
63312: PPUSH
63313: LD_VAR 0 5
63317: PPUSH
63318: LD_EXP 59
63322: PUSH
63323: LD_VAR 0 5
63327: ARRAY
63328: PUSH
63329: LD_INT 1
63331: PLUS
63332: PPUSH
63333: CALL_OW 1
63337: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63338: LD_ADDR_EXP 56
63342: PUSH
63343: LD_EXP 56
63347: PPUSH
63348: LD_VAR 0 5
63352: PUSH
63353: LD_EXP 56
63357: PUSH
63358: LD_VAR 0 5
63362: ARRAY
63363: PUSH
63364: LD_INT 1
63366: PLUS
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PPUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_VAR 0 4
63381: ARRAY
63382: PUSH
63383: LD_VAR 0 2
63387: PUSH
63388: LD_VAR 0 4
63392: ARRAY
63393: PPUSH
63394: CALL_OW 255
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PPUSH
63403: CALL 22139 0 3
63407: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63408: LD_VAR 0 2
63412: PUSH
63413: LD_VAR 0 4
63417: ARRAY
63418: PPUSH
63419: LD_VAR 0 1
63423: PPUSH
63424: CALL_OW 255
63428: PPUSH
63429: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63433: LD_VAR 0 2
63437: PUSH
63438: LD_VAR 0 4
63442: ARRAY
63443: PPUSH
63444: CALL_OW 141
// end ;
63448: GO 63280
63450: POP
63451: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63452: LD_VAR 0 1
63456: PPUSH
63457: LD_EXP 56
63461: PUSH
63462: LD_VAR 0 5
63466: ARRAY
63467: PUSH
63468: LD_INT 0
63470: PLUS
63471: PPUSH
63472: CALL_OW 505
// end ;
63476: LD_VAR 0 3
63480: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
63485: PPUSH
63486: PPUSH
// if not hack in hackTanks then
63487: LD_VAR 0 1
63491: PUSH
63492: LD_EXP 55
63496: IN
63497: NOT
63498: IFFALSE 63502
// exit ;
63500: GO 63746
// index := GetElementIndex ( hackTanks , hack ) ;
63502: LD_ADDR_VAR 0 4
63506: PUSH
63507: LD_EXP 55
63511: PPUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: CALL 21922 0 2
63521: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63522: LD_ADDR_VAR 0 3
63526: PUSH
63527: DOUBLE
63528: LD_EXP 56
63532: PUSH
63533: LD_VAR 0 4
63537: ARRAY
63538: INC
63539: ST_TO_ADDR
63540: LD_INT 1
63542: PUSH
63543: FOR_DOWNTO
63544: IFFALSE 63720
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63546: LD_ADDR_VAR 0 5
63550: PUSH
63551: LD_EXP 56
63555: PUSH
63556: LD_VAR 0 4
63560: ARRAY
63561: PUSH
63562: LD_VAR 0 3
63566: ARRAY
63567: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63568: LD_VAR 0 5
63572: PUSH
63573: LD_INT 1
63575: ARRAY
63576: PPUSH
63577: CALL_OW 302
63581: NOT
63582: IFTRUE 63610
63584: PUSH
63585: LD_VAR 0 5
63589: PUSH
63590: LD_INT 1
63592: ARRAY
63593: PPUSH
63594: CALL_OW 255
63598: PUSH
63599: LD_VAR 0 1
63603: PPUSH
63604: CALL_OW 255
63608: NONEQUAL
63609: OR
63610: IFFALSE 63718
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63612: LD_VAR 0 5
63616: PUSH
63617: LD_INT 1
63619: ARRAY
63620: PPUSH
63621: CALL_OW 305
63625: IFFALSE 63653
63627: PUSH
63628: LD_VAR 0 5
63632: PUSH
63633: LD_INT 1
63635: ARRAY
63636: PPUSH
63637: CALL_OW 255
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 255
63651: EQUAL
63652: AND
63653: IFFALSE 63677
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63655: LD_VAR 0 5
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: PPUSH
63664: LD_VAR 0 5
63668: PUSH
63669: LD_INT 2
63671: ARRAY
63672: PPUSH
63673: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63677: LD_ADDR_EXP 56
63681: PUSH
63682: LD_EXP 56
63686: PPUSH
63687: LD_VAR 0 4
63691: PPUSH
63692: LD_EXP 56
63696: PUSH
63697: LD_VAR 0 4
63701: ARRAY
63702: PPUSH
63703: LD_VAR 0 3
63707: PPUSH
63708: CALL_OW 3
63712: PPUSH
63713: CALL_OW 1
63717: ST_TO_ADDR
// end ; end ;
63718: GO 63543
63720: POP
63721: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63722: LD_VAR 0 1
63726: PPUSH
63727: LD_EXP 56
63731: PUSH
63732: LD_VAR 0 4
63736: ARRAY
63737: PUSH
63738: LD_INT 0
63740: PLUS
63741: PPUSH
63742: CALL_OW 505
// end ;
63746: LD_VAR 0 2
63750: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63751: LD_INT 0
63753: PPUSH
63754: PPUSH
63755: PPUSH
63756: PPUSH
// if not hack in hackTanks then
63757: LD_VAR 0 1
63761: PUSH
63762: LD_EXP 55
63766: IN
63767: NOT
63768: IFFALSE 63772
// exit ;
63770: GO 63857
// index := GetElementIndex ( hackTanks , hack ) ;
63772: LD_ADDR_VAR 0 5
63776: PUSH
63777: LD_EXP 55
63781: PPUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL 21922 0 2
63791: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63792: LD_ADDR_VAR 0 4
63796: PUSH
63797: DOUBLE
63798: LD_INT 1
63800: DEC
63801: ST_TO_ADDR
63802: LD_EXP 56
63806: PUSH
63807: LD_VAR 0 5
63811: ARRAY
63812: PUSH
63813: FOR_TO
63814: IFFALSE 63855
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63816: LD_EXP 56
63820: PUSH
63821: LD_VAR 0 5
63825: ARRAY
63826: PUSH
63827: LD_VAR 0 4
63831: ARRAY
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PUSH
63837: LD_VAR 0 2
63841: EQUAL
63842: IFFALSE 63853
// KillUnit ( vehicle ) ;
63844: LD_VAR 0 2
63848: PPUSH
63849: CALL_OW 66
63853: GO 63813
63855: POP
63856: POP
// end ;
63857: LD_VAR 0 3
63861: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63862: LD_EXP 60
63866: NOT
63867: IFFALSE 63902
63869: GO 63871
63871: DISABLE
// begin initMiner := true ;
63872: LD_ADDR_EXP 60
63876: PUSH
63877: LD_INT 1
63879: ST_TO_ADDR
// minersList := [ ] ;
63880: LD_ADDR_EXP 61
63884: PUSH
63885: EMPTY
63886: ST_TO_ADDR
// minerMinesList := [ ] ;
63887: LD_ADDR_EXP 62
63891: PUSH
63892: EMPTY
63893: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63894: LD_ADDR_EXP 63
63898: PUSH
63899: LD_INT 5
63901: ST_TO_ADDR
// end ;
63902: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63903: LD_EXP 60
63907: IFFALSE 63925
63909: PUSH
63910: LD_INT 34
63912: PUSH
63913: LD_INT 81
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PPUSH
63920: CALL_OW 69
63924: AND
63925: IFFALSE 64388
63927: GO 63929
63929: DISABLE
63930: LD_INT 0
63932: PPUSH
63933: PPUSH
63934: PPUSH
63935: PPUSH
// begin enable ;
63936: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63937: LD_ADDR_VAR 0 1
63941: PUSH
63942: LD_INT 34
63944: PUSH
63945: LD_INT 81
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PPUSH
63952: CALL_OW 69
63956: PUSH
63957: FOR_IN
63958: IFFALSE 64030
// begin if not i in minersList then
63960: LD_VAR 0 1
63964: PUSH
63965: LD_EXP 61
63969: IN
63970: NOT
63971: IFFALSE 64028
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63973: LD_ADDR_EXP 61
63977: PUSH
63978: LD_EXP 61
63982: PPUSH
63983: LD_EXP 61
63987: PUSH
63988: LD_INT 1
63990: PLUS
63991: PPUSH
63992: LD_VAR 0 1
63996: PPUSH
63997: CALL_OW 1
64001: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64002: LD_ADDR_EXP 62
64006: PUSH
64007: LD_EXP 62
64011: PPUSH
64012: LD_EXP 62
64016: PUSH
64017: LD_INT 1
64019: PLUS
64020: PPUSH
64021: EMPTY
64022: PPUSH
64023: CALL_OW 1
64027: ST_TO_ADDR
// end end ;
64028: GO 63957
64030: POP
64031: POP
// for i := minerMinesList downto 1 do
64032: LD_ADDR_VAR 0 1
64036: PUSH
64037: DOUBLE
64038: LD_EXP 62
64042: INC
64043: ST_TO_ADDR
64044: LD_INT 1
64046: PUSH
64047: FOR_DOWNTO
64048: IFFALSE 64386
// begin if IsLive ( minersList [ i ] ) then
64050: LD_EXP 61
64054: PUSH
64055: LD_VAR 0 1
64059: ARRAY
64060: PPUSH
64061: CALL_OW 300
64065: IFFALSE 64093
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64067: LD_EXP 61
64071: PUSH
64072: LD_VAR 0 1
64076: ARRAY
64077: PPUSH
64078: LD_EXP 62
64082: PUSH
64083: LD_VAR 0 1
64087: ARRAY
64088: PPUSH
64089: CALL_OW 505
// if not minerMinesList [ i ] then
64093: LD_EXP 62
64097: PUSH
64098: LD_VAR 0 1
64102: ARRAY
64103: NOT
64104: IFFALSE 64108
// continue ;
64106: GO 64047
// for j := minerMinesList [ i ] downto 1 do
64108: LD_ADDR_VAR 0 2
64112: PUSH
64113: DOUBLE
64114: LD_EXP 62
64118: PUSH
64119: LD_VAR 0 1
64123: ARRAY
64124: INC
64125: ST_TO_ADDR
64126: LD_INT 1
64128: PUSH
64129: FOR_DOWNTO
64130: IFFALSE 64382
// begin side := GetSide ( minersList [ i ] ) ;
64132: LD_ADDR_VAR 0 3
64136: PUSH
64137: LD_EXP 61
64141: PUSH
64142: LD_VAR 0 1
64146: ARRAY
64147: PPUSH
64148: CALL_OW 255
64152: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64153: LD_ADDR_VAR 0 4
64157: PUSH
64158: LD_EXP 62
64162: PUSH
64163: LD_VAR 0 1
64167: ARRAY
64168: PUSH
64169: LD_VAR 0 2
64173: ARRAY
64174: PUSH
64175: LD_INT 1
64177: ARRAY
64178: PPUSH
64179: LD_EXP 62
64183: PUSH
64184: LD_VAR 0 1
64188: ARRAY
64189: PUSH
64190: LD_VAR 0 2
64194: ARRAY
64195: PUSH
64196: LD_INT 2
64198: ARRAY
64199: PPUSH
64200: CALL_OW 428
64204: ST_TO_ADDR
// if not tmp then
64205: LD_VAR 0 4
64209: NOT
64210: IFFALSE 64214
// continue ;
64212: GO 64129
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64214: LD_VAR 0 4
64218: PUSH
64219: LD_INT 81
64221: PUSH
64222: LD_VAR 0 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PPUSH
64231: CALL_OW 69
64235: IN
64236: IFFALSE 64286
64238: PUSH
64239: LD_EXP 62
64243: PUSH
64244: LD_VAR 0 1
64248: ARRAY
64249: PUSH
64250: LD_VAR 0 2
64254: ARRAY
64255: PUSH
64256: LD_INT 1
64258: ARRAY
64259: PPUSH
64260: LD_EXP 62
64264: PUSH
64265: LD_VAR 0 1
64269: ARRAY
64270: PUSH
64271: LD_VAR 0 2
64275: ARRAY
64276: PUSH
64277: LD_INT 2
64279: ARRAY
64280: PPUSH
64281: CALL_OW 458
64285: AND
64286: IFFALSE 64380
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64288: LD_EXP 62
64292: PUSH
64293: LD_VAR 0 1
64297: ARRAY
64298: PUSH
64299: LD_VAR 0 2
64303: ARRAY
64304: PUSH
64305: LD_INT 1
64307: ARRAY
64308: PPUSH
64309: LD_EXP 62
64313: PUSH
64314: LD_VAR 0 1
64318: ARRAY
64319: PUSH
64320: LD_VAR 0 2
64324: ARRAY
64325: PUSH
64326: LD_INT 2
64328: ARRAY
64329: PPUSH
64330: LD_VAR 0 3
64334: PPUSH
64335: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64339: LD_ADDR_EXP 62
64343: PUSH
64344: LD_EXP 62
64348: PPUSH
64349: LD_VAR 0 1
64353: PPUSH
64354: LD_EXP 62
64358: PUSH
64359: LD_VAR 0 1
64363: ARRAY
64364: PPUSH
64365: LD_VAR 0 2
64369: PPUSH
64370: CALL_OW 3
64374: PPUSH
64375: CALL_OW 1
64379: ST_TO_ADDR
// end ; end ;
64380: GO 64129
64382: POP
64383: POP
// end ;
64384: GO 64047
64386: POP
64387: POP
// end ;
64388: PPOPN 4
64390: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64391: LD_INT 0
64393: PPUSH
64394: PPUSH
// result := false ;
64395: LD_ADDR_VAR 0 4
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 264
64412: PUSH
64413: LD_INT 81
64415: EQUAL
64416: NOT
64417: IFFALSE 64421
// exit ;
64419: GO 64665
// index := GetElementIndex ( minersList , unit ) ;
64421: LD_ADDR_VAR 0 5
64425: PUSH
64426: LD_EXP 61
64430: PPUSH
64431: LD_VAR 0 1
64435: PPUSH
64436: CALL 21922 0 2
64440: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64441: LD_EXP 62
64445: PUSH
64446: LD_VAR 0 5
64450: ARRAY
64451: PUSH
64452: LD_EXP 63
64456: GREATEREQUAL
64457: IFFALSE 64461
// exit ;
64459: GO 64665
// ComMoveXY ( unit , x , y ) ;
64461: LD_VAR 0 1
64465: PPUSH
64466: LD_VAR 0 2
64470: PPUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64480: LD_INT 35
64482: PPUSH
64483: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64487: LD_VAR 0 1
64491: PPUSH
64492: LD_VAR 0 2
64496: PPUSH
64497: LD_VAR 0 3
64501: PPUSH
64502: CALL 53968 0 3
64506: NOT
64507: IFFALSE 64520
64509: PUSH
64510: LD_VAR 0 1
64514: PPUSH
64515: CALL_OW 314
64519: AND
64520: IFFALSE 64524
// exit ;
64522: GO 64665
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64524: LD_VAR 0 2
64528: PPUSH
64529: LD_VAR 0 3
64533: PPUSH
64534: CALL_OW 428
64538: PUSH
64539: LD_VAR 0 1
64543: EQUAL
64544: IFFALSE 64558
64546: PUSH
64547: LD_VAR 0 1
64551: PPUSH
64552: CALL_OW 314
64556: NOT
64557: AND
64558: IFFALSE 64480
// PlaySoundXY ( x , y , PlantMine ) ;
64560: LD_VAR 0 2
64564: PPUSH
64565: LD_VAR 0 3
64569: PPUSH
64570: LD_STRING PlantMine
64572: PPUSH
64573: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64577: LD_VAR 0 2
64581: PPUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_VAR 0 1
64591: PPUSH
64592: CALL_OW 255
64596: PPUSH
64597: LD_INT 0
64599: PPUSH
64600: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64604: LD_ADDR_EXP 62
64608: PUSH
64609: LD_EXP 62
64613: PPUSH
64614: LD_VAR 0 5
64618: PUSH
64619: LD_EXP 62
64623: PUSH
64624: LD_VAR 0 5
64628: ARRAY
64629: PUSH
64630: LD_INT 1
64632: PLUS
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PPUSH
64638: LD_VAR 0 2
64642: PUSH
64643: LD_VAR 0 3
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PPUSH
64652: CALL 22139 0 3
64656: ST_TO_ADDR
// result := true ;
64657: LD_ADDR_VAR 0 4
64661: PUSH
64662: LD_INT 1
64664: ST_TO_ADDR
// end ;
64665: LD_VAR 0 4
64669: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64670: LD_INT 0
64672: PPUSH
64673: PPUSH
64674: PPUSH
// if not unit in minersList then
64675: LD_VAR 0 1
64679: PUSH
64680: LD_EXP 61
64684: IN
64685: NOT
64686: IFFALSE 64690
// exit ;
64688: GO 65084
// index := GetElementIndex ( minersList , unit ) ;
64690: LD_ADDR_VAR 0 6
64694: PUSH
64695: LD_EXP 61
64699: PPUSH
64700: LD_VAR 0 1
64704: PPUSH
64705: CALL 21922 0 2
64709: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64710: LD_ADDR_VAR 0 5
64714: PUSH
64715: DOUBLE
64716: LD_EXP 62
64720: PUSH
64721: LD_VAR 0 6
64725: ARRAY
64726: INC
64727: ST_TO_ADDR
64728: LD_INT 1
64730: PUSH
64731: FOR_DOWNTO
64732: IFFALSE 64895
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64734: LD_EXP 62
64738: PUSH
64739: LD_VAR 0 6
64743: ARRAY
64744: PUSH
64745: LD_VAR 0 5
64749: ARRAY
64750: PUSH
64751: LD_INT 1
64753: ARRAY
64754: PUSH
64755: LD_VAR 0 2
64759: EQUAL
64760: IFFALSE 64790
64762: PUSH
64763: LD_EXP 62
64767: PUSH
64768: LD_VAR 0 6
64772: ARRAY
64773: PUSH
64774: LD_VAR 0 5
64778: ARRAY
64779: PUSH
64780: LD_INT 2
64782: ARRAY
64783: PUSH
64784: LD_VAR 0 3
64788: EQUAL
64789: AND
64790: IFFALSE 64893
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64792: LD_EXP 62
64796: PUSH
64797: LD_VAR 0 6
64801: ARRAY
64802: PUSH
64803: LD_VAR 0 5
64807: ARRAY
64808: PUSH
64809: LD_INT 1
64811: ARRAY
64812: PPUSH
64813: LD_EXP 62
64817: PUSH
64818: LD_VAR 0 6
64822: ARRAY
64823: PUSH
64824: LD_VAR 0 5
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: PPUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 255
64843: PPUSH
64844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64848: LD_ADDR_EXP 62
64852: PUSH
64853: LD_EXP 62
64857: PPUSH
64858: LD_VAR 0 6
64862: PPUSH
64863: LD_EXP 62
64867: PUSH
64868: LD_VAR 0 6
64872: ARRAY
64873: PPUSH
64874: LD_VAR 0 5
64878: PPUSH
64879: CALL_OW 3
64883: PPUSH
64884: CALL_OW 1
64888: ST_TO_ADDR
// exit ;
64889: POP
64890: POP
64891: GO 65084
// end ; end ;
64893: GO 64731
64895: POP
64896: POP
// for i := minerMinesList [ index ] downto 1 do
64897: LD_ADDR_VAR 0 5
64901: PUSH
64902: DOUBLE
64903: LD_EXP 62
64907: PUSH
64908: LD_VAR 0 6
64912: ARRAY
64913: INC
64914: ST_TO_ADDR
64915: LD_INT 1
64917: PUSH
64918: FOR_DOWNTO
64919: IFFALSE 65082
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64921: LD_EXP 62
64925: PUSH
64926: LD_VAR 0 6
64930: ARRAY
64931: PUSH
64932: LD_VAR 0 5
64936: ARRAY
64937: PUSH
64938: LD_INT 1
64940: ARRAY
64941: PPUSH
64942: LD_EXP 62
64946: PUSH
64947: LD_VAR 0 6
64951: ARRAY
64952: PUSH
64953: LD_VAR 0 5
64957: ARRAY
64958: PUSH
64959: LD_INT 2
64961: ARRAY
64962: PPUSH
64963: LD_VAR 0 2
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: CALL_OW 298
64977: PUSH
64978: LD_INT 6
64980: LESS
64981: IFFALSE 65080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64983: LD_EXP 62
64987: PUSH
64988: LD_VAR 0 6
64992: ARRAY
64993: PUSH
64994: LD_VAR 0 5
64998: ARRAY
64999: PUSH
65000: LD_INT 1
65002: ARRAY
65003: PPUSH
65004: LD_EXP 62
65008: PUSH
65009: LD_VAR 0 6
65013: ARRAY
65014: PUSH
65015: LD_VAR 0 5
65019: ARRAY
65020: PUSH
65021: LD_INT 2
65023: ARRAY
65024: PPUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: CALL_OW 255
65034: PPUSH
65035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65039: LD_ADDR_EXP 62
65043: PUSH
65044: LD_EXP 62
65048: PPUSH
65049: LD_VAR 0 6
65053: PPUSH
65054: LD_EXP 62
65058: PUSH
65059: LD_VAR 0 6
65063: ARRAY
65064: PPUSH
65065: LD_VAR 0 5
65069: PPUSH
65070: CALL_OW 3
65074: PPUSH
65075: CALL_OW 1
65079: ST_TO_ADDR
// end ; end ;
65080: GO 64918
65082: POP
65083: POP
// end ;
65084: LD_VAR 0 4
65088: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65089: LD_INT 0
65091: PPUSH
65092: PPUSH
65093: PPUSH
65094: PPUSH
65095: PPUSH
65096: PPUSH
65097: PPUSH
65098: PPUSH
65099: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65100: LD_VAR 0 1
65104: PPUSH
65105: CALL_OW 264
65109: PUSH
65110: LD_INT 81
65112: EQUAL
65113: NOT
65114: IFTRUE 65129
65116: PUSH
65117: LD_VAR 0 1
65121: PUSH
65122: LD_EXP 61
65126: IN
65127: NOT
65128: OR
65129: IFFALSE 65133
// exit ;
65131: GO 65459
// index := GetElementIndex ( minersList , unit ) ;
65133: LD_ADDR_VAR 0 6
65137: PUSH
65138: LD_EXP 61
65142: PPUSH
65143: LD_VAR 0 1
65147: PPUSH
65148: CALL 21922 0 2
65152: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65153: LD_ADDR_VAR 0 8
65157: PUSH
65158: LD_EXP 63
65162: PUSH
65163: LD_EXP 62
65167: PUSH
65168: LD_VAR 0 6
65172: ARRAY
65173: MINUS
65174: ST_TO_ADDR
// if not minesFreeAmount then
65175: LD_VAR 0 8
65179: NOT
65180: IFFALSE 65184
// exit ;
65182: GO 65459
// tmp := [ ] ;
65184: LD_ADDR_VAR 0 7
65188: PUSH
65189: EMPTY
65190: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65191: LD_ADDR_VAR 0 5
65195: PUSH
65196: DOUBLE
65197: LD_INT 1
65199: DEC
65200: ST_TO_ADDR
65201: LD_VAR 0 8
65205: PUSH
65206: FOR_TO
65207: IFFALSE 65406
// begin _d := rand ( 0 , 5 ) ;
65209: LD_ADDR_VAR 0 11
65213: PUSH
65214: LD_INT 0
65216: PPUSH
65217: LD_INT 5
65219: PPUSH
65220: CALL_OW 12
65224: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65225: LD_ADDR_VAR 0 12
65229: PUSH
65230: LD_INT 2
65232: PPUSH
65233: LD_INT 6
65235: PPUSH
65236: CALL_OW 12
65240: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65241: LD_ADDR_VAR 0 9
65245: PUSH
65246: LD_VAR 0 2
65250: PPUSH
65251: LD_VAR 0 11
65255: PPUSH
65256: LD_VAR 0 12
65260: PPUSH
65261: CALL_OW 272
65265: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65266: LD_ADDR_VAR 0 10
65270: PUSH
65271: LD_VAR 0 3
65275: PPUSH
65276: LD_VAR 0 11
65280: PPUSH
65281: LD_VAR 0 12
65285: PPUSH
65286: CALL_OW 273
65290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65291: LD_VAR 0 9
65295: PPUSH
65296: LD_VAR 0 10
65300: PPUSH
65301: CALL_OW 488
65305: IFFALSE 65329
65307: PUSH
65308: LD_VAR 0 9
65312: PUSH
65313: LD_VAR 0 10
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_VAR 0 7
65326: IN
65327: NOT
65328: AND
65329: IFFALSE 65348
65331: PUSH
65332: LD_VAR 0 9
65336: PPUSH
65337: LD_VAR 0 10
65341: PPUSH
65342: CALL_OW 458
65346: NOT
65347: AND
65348: IFFALSE 65390
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65350: LD_ADDR_VAR 0 7
65354: PUSH
65355: LD_VAR 0 7
65359: PPUSH
65360: LD_VAR 0 7
65364: PUSH
65365: LD_INT 1
65367: PLUS
65368: PPUSH
65369: LD_VAR 0 9
65373: PUSH
65374: LD_VAR 0 10
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PPUSH
65383: CALL_OW 1
65387: ST_TO_ADDR
65388: GO 65404
// i := i - 1 ;
65390: LD_ADDR_VAR 0 5
65394: PUSH
65395: LD_VAR 0 5
65399: PUSH
65400: LD_INT 1
65402: MINUS
65403: ST_TO_ADDR
// end ;
65404: GO 65206
65406: POP
65407: POP
// for i in tmp do
65408: LD_ADDR_VAR 0 5
65412: PUSH
65413: LD_VAR 0 7
65417: PUSH
65418: FOR_IN
65419: IFFALSE 65457
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65421: LD_VAR 0 1
65425: PPUSH
65426: LD_VAR 0 5
65430: PUSH
65431: LD_INT 1
65433: ARRAY
65434: PPUSH
65435: LD_VAR 0 5
65439: PUSH
65440: LD_INT 2
65442: ARRAY
65443: PPUSH
65444: CALL 64391 0 3
65448: NOT
65449: IFFALSE 65455
// exit ;
65451: POP
65452: POP
65453: GO 65459
65455: GO 65418
65457: POP
65458: POP
// end ;
65459: LD_VAR 0 4
65463: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65464: LD_INT 0
65466: PPUSH
65467: PPUSH
65468: PPUSH
65469: PPUSH
65470: PPUSH
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
// if GetClass ( unit ) <> class_sniper then
65475: LD_VAR 0 1
65479: PPUSH
65480: CALL_OW 257
65484: PUSH
65485: LD_INT 5
65487: NONEQUAL
65488: IFFALSE 65492
// exit ;
65490: GO 65962
// dist := 8 ;
65492: LD_ADDR_VAR 0 5
65496: PUSH
65497: LD_INT 8
65499: ST_TO_ADDR
// viewRange := 12 ;
65500: LD_ADDR_VAR 0 8
65504: PUSH
65505: LD_INT 12
65507: ST_TO_ADDR
// side := GetSide ( unit ) ;
65508: LD_ADDR_VAR 0 6
65512: PUSH
65513: LD_VAR 0 1
65517: PPUSH
65518: CALL_OW 255
65522: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65523: LD_INT 61
65525: PPUSH
65526: LD_VAR 0 6
65530: PPUSH
65531: CALL_OW 321
65535: PUSH
65536: LD_INT 2
65538: EQUAL
65539: IFFALSE 65549
// viewRange := 16 ;
65541: LD_ADDR_VAR 0 8
65545: PUSH
65546: LD_INT 16
65548: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65549: LD_VAR 0 1
65553: PPUSH
65554: LD_VAR 0 2
65558: PPUSH
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL_OW 297
65568: PUSH
65569: LD_VAR 0 5
65573: GREATER
65574: IFFALSE 65653
// begin ComMoveXY ( unit , x , y ) ;
65576: LD_VAR 0 1
65580: PPUSH
65581: LD_VAR 0 2
65585: PPUSH
65586: LD_VAR 0 3
65590: PPUSH
65591: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65595: LD_INT 35
65597: PPUSH
65598: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65602: LD_VAR 0 1
65606: PPUSH
65607: LD_VAR 0 2
65611: PPUSH
65612: LD_VAR 0 3
65616: PPUSH
65617: CALL 53968 0 3
65621: NOT
65622: IFFALSE 65626
// exit ;
65624: GO 65962
// until GetDistUnitXY ( unit , x , y ) < dist ;
65626: LD_VAR 0 1
65630: PPUSH
65631: LD_VAR 0 2
65635: PPUSH
65636: LD_VAR 0 3
65640: PPUSH
65641: CALL_OW 297
65645: PUSH
65646: LD_VAR 0 5
65650: LESS
65651: IFFALSE 65595
// end ; ComTurnXY ( unit , x , y ) ;
65653: LD_VAR 0 1
65657: PPUSH
65658: LD_VAR 0 2
65662: PPUSH
65663: LD_VAR 0 3
65667: PPUSH
65668: CALL_OW 118
// repeat if Multiplayer then
65672: LD_OWVAR 4
65676: IFFALSE 65687
// wait ( 35 ) else
65678: LD_INT 35
65680: PPUSH
65681: CALL_OW 67
65685: GO 65694
// wait ( 5 ) ;
65687: LD_INT 5
65689: PPUSH
65690: CALL_OW 67
// _d := GetDir ( unit ) ;
65694: LD_ADDR_VAR 0 11
65698: PUSH
65699: LD_VAR 0 1
65703: PPUSH
65704: CALL_OW 254
65708: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65709: LD_ADDR_VAR 0 7
65713: PUSH
65714: LD_VAR 0 1
65718: PPUSH
65719: CALL_OW 250
65723: PPUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 251
65733: PPUSH
65734: LD_VAR 0 2
65738: PPUSH
65739: LD_VAR 0 3
65743: PPUSH
65744: CALL 56604 0 4
65748: ST_TO_ADDR
// until dir = _d ;
65749: LD_VAR 0 7
65753: PUSH
65754: LD_VAR 0 11
65758: EQUAL
65759: IFFALSE 65672
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65761: LD_ADDR_VAR 0 9
65765: PUSH
65766: LD_VAR 0 1
65770: PPUSH
65771: CALL_OW 250
65775: PPUSH
65776: LD_VAR 0 7
65780: PPUSH
65781: LD_VAR 0 5
65785: PPUSH
65786: CALL_OW 272
65790: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65791: LD_ADDR_VAR 0 10
65795: PUSH
65796: LD_VAR 0 1
65800: PPUSH
65801: CALL_OW 251
65805: PPUSH
65806: LD_VAR 0 7
65810: PPUSH
65811: LD_VAR 0 5
65815: PPUSH
65816: CALL_OW 273
65820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65821: LD_VAR 0 9
65825: PPUSH
65826: LD_VAR 0 10
65830: PPUSH
65831: CALL_OW 488
65835: NOT
65836: IFFALSE 65840
// exit ;
65838: GO 65962
// ComAnimCustom ( unit , 1 ) ;
65840: LD_VAR 0 1
65844: PPUSH
65845: LD_INT 1
65847: PPUSH
65848: CALL_OW 592
// p := 0 ;
65852: LD_ADDR_VAR 0 12
65856: PUSH
65857: LD_INT 0
65859: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65860: LD_VAR 0 9
65864: PPUSH
65865: LD_VAR 0 10
65869: PPUSH
65870: LD_VAR 0 6
65874: PPUSH
65875: LD_VAR 0 8
65879: PPUSH
65880: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65884: LD_INT 35
65886: PPUSH
65887: CALL_OW 67
// p := Inc ( p ) ;
65891: LD_ADDR_VAR 0 12
65895: PUSH
65896: LD_VAR 0 12
65900: PPUSH
65901: CALL 56560 0 1
65905: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65906: LD_VAR 0 12
65910: PUSH
65911: LD_INT 3
65913: EQUAL
65914: IFTRUE 65928
65916: PUSH
65917: LD_VAR 0 1
65921: PPUSH
65922: CALL_OW 302
65926: NOT
65927: OR
65928: IFTRUE 65941
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: CALL_OW 301
65940: OR
65941: IFFALSE 65884
// RemoveSeeing ( _x , _y , side ) ;
65943: LD_VAR 0 9
65947: PPUSH
65948: LD_VAR 0 10
65952: PPUSH
65953: LD_VAR 0 6
65957: PPUSH
65958: CALL_OW 331
// end ; end_of_file
65962: LD_VAR 0 4
65966: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 200
65974: DOUBLE
65975: GREATEREQUAL
65976: IFFALSE 65984
65978: LD_INT 299
65980: DOUBLE
65981: LESSEQUAL
65982: IFTRUE 65986
65984: GO 66018
65986: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65987: LD_VAR 0 1
65991: PPUSH
65992: LD_VAR 0 2
65996: PPUSH
65997: LD_VAR 0 3
66001: PPUSH
66002: LD_VAR 0 4
66006: PPUSH
66007: LD_VAR 0 5
66011: PPUSH
66012: CALL 61210 0 5
66016: GO 66095
66018: LD_INT 300
66020: DOUBLE
66021: GREATEREQUAL
66022: IFFALSE 66030
66024: LD_INT 399
66026: DOUBLE
66027: LESSEQUAL
66028: IFTRUE 66032
66030: GO 66094
66032: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66033: LD_VAR 0 1
66037: PPUSH
66038: LD_VAR 0 2
66042: PPUSH
66043: LD_VAR 0 3
66047: PPUSH
66048: LD_VAR 0 4
66052: PPUSH
66053: LD_VAR 0 5
66057: PPUSH
66058: LD_VAR 0 6
66062: PPUSH
66063: LD_VAR 0 7
66067: PPUSH
66068: LD_VAR 0 8
66072: PPUSH
66073: LD_VAR 0 9
66077: PPUSH
66078: LD_VAR 0 10
66082: PPUSH
66083: LD_VAR 0 11
66087: PPUSH
66088: CALL 66778 0 11
66092: GO 66095
66094: POP
// end ;
66095: PPOPN 11
66097: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66098: LD_VAR 0 1
66102: PPUSH
66103: LD_VAR 0 2
66107: PPUSH
66108: LD_VAR 0 3
66112: PPUSH
66113: LD_VAR 0 4
66117: PPUSH
66118: LD_VAR 0 5
66122: PPUSH
66123: CALL 60591 0 5
// end ; end_of_file
66127: PPOPN 5
66129: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
66130: PPOPN 6
66132: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
66133: LD_EXP 30
66137: PUSH
66138: LD_INT 4
66140: EQUAL
66141: IFFALSE 66177
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66143: LD_STRING setGameDifficulty(
66145: PUSH
66146: LD_OWVAR 67
66150: STR
66151: PUSH
66152: LD_STRING )
66154: STR
66155: PPUSH
66156: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
66160: LD_STRING displayDifficulty(
66162: PUSH
66163: LD_OWVAR 67
66167: STR
66168: PUSH
66169: LD_STRING )
66171: STR
66172: PPUSH
66173: CALL_OW 559
// end ; SOS_MapStart ( ) ;
66177: CALL 66206 0 0
// end ; end_of_file
66181: PPOPN 1
66183: END
// every 0 0$1 do
66184: GO 66186
66186: DISABLE
// begin enable ;
66187: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66188: LD_STRING updateTimer(
66190: PUSH
66191: LD_OWVAR 1
66195: STR
66196: PUSH
66197: LD_STRING );
66199: STR
66200: PPUSH
66201: CALL_OW 559
// end ;
66205: END
// export function SOS_MapStart ( ) ; begin
66206: LD_INT 0
66208: PPUSH
// UpdateFactoryWaypoints ( ) ;
66209: CALL 67140 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66213: CALL 67392 0 0
// ParseMultiDataToLua ( ) ;
66217: CALL 67539 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
66221: LD_STRING setSpecLogoNumber(
66223: PUSH
66224: LD_INT 2
66226: STR
66227: PUSH
66228: LD_STRING ,
66230: STR
66231: PUSH
66232: LD_INT 1
66234: STR
66235: PUSH
66236: LD_STRING )
66238: STR
66239: PPUSH
66240: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
66244: LD_STRING setSpecLogoNumber(
66246: PUSH
66247: LD_INT 3
66249: STR
66250: PUSH
66251: LD_STRING ,
66253: STR
66254: PUSH
66255: LD_INT 2
66257: STR
66258: PUSH
66259: LD_STRING )
66261: STR
66262: PPUSH
66263: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
66267: LD_STRING setSpecLogoNumber(
66269: PUSH
66270: LD_INT 4
66272: STR
66273: PUSH
66274: LD_STRING ,
66276: STR
66277: PUSH
66278: LD_INT 3
66280: STR
66281: PUSH
66282: LD_STRING )
66284: STR
66285: PPUSH
66286: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
66290: LD_STRING setSpecLogoNumber(
66292: PUSH
66293: LD_INT 5
66295: STR
66296: PUSH
66297: LD_STRING ,
66299: STR
66300: PUSH
66301: LD_INT 4
66303: STR
66304: PUSH
66305: LD_STRING )
66307: STR
66308: PPUSH
66309: CALL_OW 559
// end ;
66313: LD_VAR 0 1
66317: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
66318: LD_INT 0
66320: PPUSH
66321: PPUSH
66322: PPUSH
66323: PPUSH
66324: PPUSH
66325: PPUSH
66326: PPUSH
66327: PPUSH
66328: PPUSH
// for i := 1 to 8 do
66329: LD_ADDR_VAR 0 2
66333: PUSH
66334: DOUBLE
66335: LD_INT 1
66337: DEC
66338: ST_TO_ADDR
66339: LD_INT 8
66341: PUSH
66342: FOR_TO
66343: IFFALSE 66728
// begin if mpSidePositions [ i ] then
66345: LD_EXP 31
66349: PUSH
66350: LD_VAR 0 2
66354: ARRAY
66355: IFFALSE 66726
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66357: LD_ADDR_VAR 0 7
66361: PUSH
66362: LD_INT 22
66364: PUSH
66365: LD_VAR 0 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 21
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PPUSH
66388: CALL_OW 69
66392: PPUSH
66393: CALL 19255 0 1
66397: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66398: LD_ADDR_VAR 0 9
66402: PUSH
66403: LD_INT 22
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: LD_INT 30
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 30
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PPUSH
66447: CALL_OW 69
66451: ST_TO_ADDR
// crates := 0 ;
66452: LD_ADDR_VAR 0 4
66456: PUSH
66457: LD_INT 0
66459: ST_TO_ADDR
// oil := 0 ;
66460: LD_ADDR_VAR 0 5
66464: PUSH
66465: LD_INT 0
66467: ST_TO_ADDR
// sib := 0 ;
66468: LD_ADDR_VAR 0 6
66472: PUSH
66473: LD_INT 0
66475: ST_TO_ADDR
// if bases then
66476: LD_VAR 0 9
66480: IFFALSE 66586
// begin for j in bases do
66482: LD_ADDR_VAR 0 3
66486: PUSH
66487: LD_VAR 0 9
66491: PUSH
66492: FOR_IN
66493: IFFALSE 66584
// begin base := GetBase ( j ) ;
66495: LD_ADDR_VAR 0 8
66499: PUSH
66500: LD_VAR 0 3
66504: PPUSH
66505: CALL_OW 274
66509: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66510: LD_ADDR_VAR 0 4
66514: PUSH
66515: LD_VAR 0 4
66519: PUSH
66520: LD_VAR 0 8
66524: PPUSH
66525: LD_INT 1
66527: PPUSH
66528: CALL_OW 275
66532: PLUS
66533: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66534: LD_ADDR_VAR 0 5
66538: PUSH
66539: LD_VAR 0 5
66543: PUSH
66544: LD_VAR 0 8
66548: PPUSH
66549: LD_INT 2
66551: PPUSH
66552: CALL_OW 275
66556: PLUS
66557: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66558: LD_ADDR_VAR 0 6
66562: PUSH
66563: LD_VAR 0 6
66567: PUSH
66568: LD_VAR 0 8
66572: PPUSH
66573: LD_INT 3
66575: PPUSH
66576: CALL_OW 275
66580: PLUS
66581: ST_TO_ADDR
// end ;
66582: GO 66492
66584: POP
66585: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66586: LD_STRING setSpecText(
66588: PUSH
66589: LD_VAR 0 2
66593: STR
66594: PUSH
66595: LD_STRING ,
66597: STR
66598: PUSH
66599: LD_INT 2
66601: STR
66602: PUSH
66603: LD_STRING ,
66605: STR
66606: PUSH
66607: LD_VAR 0 4
66611: STR
66612: PUSH
66613: LD_STRING )
66615: STR
66616: PPUSH
66617: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66621: LD_STRING setSpecText(
66623: PUSH
66624: LD_VAR 0 2
66628: STR
66629: PUSH
66630: LD_STRING ,
66632: STR
66633: PUSH
66634: LD_INT 3
66636: STR
66637: PUSH
66638: LD_STRING ,
66640: STR
66641: PUSH
66642: LD_VAR 0 5
66646: STR
66647: PUSH
66648: LD_STRING )
66650: STR
66651: PPUSH
66652: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66656: LD_STRING setSpecText(
66658: PUSH
66659: LD_VAR 0 2
66663: STR
66664: PUSH
66665: LD_STRING ,
66667: STR
66668: PUSH
66669: LD_INT 4
66671: STR
66672: PUSH
66673: LD_STRING ,
66675: STR
66676: PUSH
66677: LD_VAR 0 6
66681: STR
66682: PUSH
66683: LD_STRING )
66685: STR
66686: PPUSH
66687: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66691: LD_STRING setSpecText(
66693: PUSH
66694: LD_VAR 0 2
66698: STR
66699: PUSH
66700: LD_STRING ,
66702: STR
66703: PUSH
66704: LD_INT 5
66706: STR
66707: PUSH
66708: LD_STRING ,
66710: STR
66711: PUSH
66712: LD_VAR 0 7
66716: STR
66717: PUSH
66718: LD_STRING )
66720: STR
66721: PPUSH
66722: CALL_OW 559
// end ; end ;
66726: GO 66342
66728: POP
66729: POP
// end ;
66730: LD_VAR 0 1
66734: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66735: LD_INT 2
66737: PUSH
66738: LD_INT 30
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 30
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: PPUSH
66763: CALL_OW 69
66767: IFFALSE 66777
66769: GO 66771
66771: DISABLE
// begin enable ;
66772: ENABLE
// UpdateSpectatorBar ;
66773: CALL 66318 0 0
// end ;
66777: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66778: LD_INT 0
66780: PPUSH
// end ;
66781: LD_VAR 0 12
66785: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66786: LD_INT 0
66788: PPUSH
66789: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66790: LD_VAR 0 1
66794: NOT
66795: IFTRUE 66814
66797: PUSH
66798: LD_VAR 0 2
66802: PPUSH
66803: LD_VAR 0 3
66807: PPUSH
66808: CALL_OW 488
66812: NOT
66813: OR
66814: IFTRUE 66849
66816: PUSH
66817: LD_VAR 0 1
66821: PPUSH
66822: CALL_OW 266
66826: PUSH
66827: LD_INT 3
66829: NONEQUAL
66830: IFFALSE 66848
66832: PUSH
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL_OW 247
66842: PUSH
66843: LD_INT 1
66845: EQUAL
66846: NOT
66847: AND
66848: OR
66849: IFFALSE 66853
// exit ;
66851: GO 67135
// if GetType ( factory ) = unit_human then
66853: LD_VAR 0 1
66857: PPUSH
66858: CALL_OW 247
66862: PUSH
66863: LD_INT 1
66865: EQUAL
66866: IFFALSE 66883
// factory := IsInUnit ( factory ) ;
66868: LD_ADDR_VAR 0 1
66872: PUSH
66873: LD_VAR 0 1
66877: PPUSH
66878: CALL_OW 310
66882: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 266
66892: PUSH
66893: LD_INT 3
66895: NONEQUAL
66896: IFFALSE 66900
// exit ;
66898: GO 67135
// for i := 1 to Count ( factoryWaypoints ) do
66900: LD_ADDR_VAR 0 5
66904: PUSH
66905: DOUBLE
66906: LD_INT 1
66908: DEC
66909: ST_TO_ADDR
66910: LD_EXP 64
66914: PPUSH
66915: CALL 19255 0 1
66919: PUSH
66920: FOR_TO
66921: IFFALSE 67083
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66923: LD_VAR 0 2
66927: PPUSH
66928: LD_VAR 0 3
66932: PPUSH
66933: CALL_OW 428
66937: PUSH
66938: LD_EXP 64
66942: PUSH
66943: LD_VAR 0 5
66947: ARRAY
66948: PUSH
66949: LD_INT 2
66951: ARRAY
66952: EQUAL
66953: IFFALSE 66985
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66955: LD_ADDR_EXP 64
66959: PUSH
66960: LD_EXP 64
66964: PPUSH
66965: LD_VAR 0 5
66969: PPUSH
66970: CALL_OW 3
66974: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66975: CALL 67140 0 0
// exit ;
66979: POP
66980: POP
66981: GO 67135
// end else
66983: GO 67081
// if factory = factoryWaypoints [ i ] [ 2 ] then
66985: LD_VAR 0 1
66989: PUSH
66990: LD_EXP 64
66994: PUSH
66995: LD_VAR 0 5
66999: ARRAY
67000: PUSH
67001: LD_INT 2
67003: ARRAY
67004: EQUAL
67005: IFFALSE 67081
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67007: LD_ADDR_EXP 64
67011: PUSH
67012: LD_EXP 64
67016: PPUSH
67017: LD_VAR 0 5
67021: PPUSH
67022: CALL_OW 3
67026: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67027: LD_ADDR_EXP 64
67031: PUSH
67032: LD_EXP 64
67036: PPUSH
67037: LD_VAR 0 1
67041: PPUSH
67042: CALL_OW 255
67046: PUSH
67047: LD_VAR 0 1
67051: PUSH
67052: LD_VAR 0 2
67056: PUSH
67057: LD_VAR 0 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: PPUSH
67068: CALL 55187 0 2
67072: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67073: CALL 67140 0 0
// exit ;
67077: POP
67078: POP
67079: GO 67135
// end ; end ;
67081: GO 66920
67083: POP
67084: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67085: LD_ADDR_EXP 64
67089: PUSH
67090: LD_EXP 64
67094: PPUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: CALL_OW 255
67104: PUSH
67105: LD_VAR 0 1
67109: PUSH
67110: LD_VAR 0 2
67114: PUSH
67115: LD_VAR 0 3
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: PPUSH
67126: CALL 55187 0 2
67130: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67131: CALL 67140 0 0
// end ;
67135: LD_VAR 0 4
67139: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67140: LD_INT 0
67142: PPUSH
67143: PPUSH
67144: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67145: LD_STRING resetFactoryWaypoint();
67147: PPUSH
67148: CALL_OW 559
// if factoryWaypoints then
67152: LD_EXP 64
67156: IFFALSE 67277
// begin list := factoryWaypoints ;
67158: LD_ADDR_VAR 0 3
67162: PUSH
67163: LD_EXP 64
67167: ST_TO_ADDR
// for i := 1 to list do
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: DOUBLE
67174: LD_INT 1
67176: DEC
67177: ST_TO_ADDR
67178: LD_VAR 0 3
67182: PUSH
67183: FOR_TO
67184: IFFALSE 67275
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67186: LD_STRING setFactoryWaypointXY(
67188: PUSH
67189: LD_VAR 0 3
67193: PUSH
67194: LD_VAR 0 2
67198: ARRAY
67199: PUSH
67200: LD_INT 1
67202: ARRAY
67203: STR
67204: PUSH
67205: LD_STRING ,
67207: STR
67208: PUSH
67209: LD_VAR 0 3
67213: PUSH
67214: LD_VAR 0 2
67218: ARRAY
67219: PUSH
67220: LD_INT 2
67222: ARRAY
67223: STR
67224: PUSH
67225: LD_STRING ,
67227: STR
67228: PUSH
67229: LD_VAR 0 3
67233: PUSH
67234: LD_VAR 0 2
67238: ARRAY
67239: PUSH
67240: LD_INT 3
67242: ARRAY
67243: STR
67244: PUSH
67245: LD_STRING ,
67247: STR
67248: PUSH
67249: LD_VAR 0 3
67253: PUSH
67254: LD_VAR 0 2
67258: ARRAY
67259: PUSH
67260: LD_INT 4
67262: ARRAY
67263: STR
67264: PUSH
67265: LD_STRING )
67267: STR
67268: PPUSH
67269: CALL_OW 559
67273: GO 67183
67275: POP
67276: POP
// end ; end ;
67277: LD_VAR 0 1
67281: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67282: LD_INT 0
67284: PPUSH
// if HexInfo ( x , y ) = warehouse then
67285: LD_VAR 0 2
67289: PPUSH
67290: LD_VAR 0 3
67294: PPUSH
67295: CALL_OW 428
67299: PUSH
67300: LD_VAR 0 1
67304: EQUAL
67305: IFFALSE 67332
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67307: LD_ADDR_EXP 66
67311: PUSH
67312: LD_EXP 66
67316: PPUSH
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_INT 0
67324: PPUSH
67325: CALL_OW 1
67329: ST_TO_ADDR
67330: GO 67383
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67332: LD_ADDR_EXP 66
67336: PUSH
67337: LD_EXP 66
67341: PPUSH
67342: LD_VAR 0 1
67346: PPUSH
67347: LD_VAR 0 1
67351: PPUSH
67352: CALL_OW 255
67356: PUSH
67357: LD_VAR 0 1
67361: PUSH
67362: LD_VAR 0 2
67366: PUSH
67367: LD_VAR 0 3
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: PPUSH
67378: CALL_OW 1
67382: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67383: CALL 67392 0 0
// end ;
67387: LD_VAR 0 4
67391: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67392: LD_INT 0
67394: PPUSH
67395: PPUSH
67396: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67397: LD_STRING resetWarehouseGatheringPoints();
67399: PPUSH
67400: CALL_OW 559
// if warehouseGatheringPoints then
67404: LD_EXP 66
67408: IFFALSE 67534
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67410: LD_ADDR_VAR 0 3
67414: PUSH
67415: LD_EXP 66
67419: PPUSH
67420: CALL 59121 0 1
67424: ST_TO_ADDR
// for i := 1 to list do
67425: LD_ADDR_VAR 0 2
67429: PUSH
67430: DOUBLE
67431: LD_INT 1
67433: DEC
67434: ST_TO_ADDR
67435: LD_VAR 0 3
67439: PUSH
67440: FOR_TO
67441: IFFALSE 67532
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67443: LD_STRING setWarehouseGatheringPointXY(
67445: PUSH
67446: LD_VAR 0 3
67450: PUSH
67451: LD_VAR 0 2
67455: ARRAY
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: STR
67461: PUSH
67462: LD_STRING ,
67464: STR
67465: PUSH
67466: LD_VAR 0 3
67470: PUSH
67471: LD_VAR 0 2
67475: ARRAY
67476: PUSH
67477: LD_INT 2
67479: ARRAY
67480: STR
67481: PUSH
67482: LD_STRING ,
67484: STR
67485: PUSH
67486: LD_VAR 0 3
67490: PUSH
67491: LD_VAR 0 2
67495: ARRAY
67496: PUSH
67497: LD_INT 3
67499: ARRAY
67500: STR
67501: PUSH
67502: LD_STRING ,
67504: STR
67505: PUSH
67506: LD_VAR 0 3
67510: PUSH
67511: LD_VAR 0 2
67515: ARRAY
67516: PUSH
67517: LD_INT 4
67519: ARRAY
67520: STR
67521: PUSH
67522: LD_STRING )
67524: STR
67525: PPUSH
67526: CALL_OW 559
67530: GO 67440
67532: POP
67533: POP
// end ; end ;
67534: LD_VAR 0 1
67538: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67539: LD_INT 0
67541: PPUSH
67542: PPUSH
// if not mpSidePositions then
67543: LD_EXP 31
67547: NOT
67548: IFFALSE 67552
// exit ;
67550: GO 67623
// result :=  ;
67552: LD_ADDR_VAR 0 1
67556: PUSH
67557: LD_STRING 
67559: ST_TO_ADDR
// for i := 1 to 8 do
67560: LD_ADDR_VAR 0 2
67564: PUSH
67565: DOUBLE
67566: LD_INT 1
67568: DEC
67569: ST_TO_ADDR
67570: LD_INT 8
67572: PUSH
67573: FOR_TO
67574: IFFALSE 67604
// begin result := result & mpSidePositions [ i ] & ; ;
67576: LD_ADDR_VAR 0 1
67580: PUSH
67581: LD_VAR 0 1
67585: PUSH
67586: LD_EXP 31
67590: PUSH
67591: LD_VAR 0 2
67595: ARRAY
67596: STR
67597: PUSH
67598: LD_STRING ;
67600: STR
67601: ST_TO_ADDR
// end ;
67602: GO 67573
67604: POP
67605: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67606: LD_STRING setMultiplayerRealPosition("
67608: PUSH
67609: LD_VAR 0 1
67613: STR
67614: PUSH
67615: LD_STRING ");
67617: STR
67618: PPUSH
67619: CALL_OW 559
// end ;
67623: LD_VAR 0 1
67627: RET
