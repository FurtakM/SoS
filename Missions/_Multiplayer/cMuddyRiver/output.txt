// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 325 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1705 0 1
  44: PPUSH
  45: CALL 5320 0 1
// Multiplayer_Start ;
  49: CALL 3610 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3726 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: IFFALSE 218
 211: PUSH
 212: LD_OWVAR 48
 216: NOT
 217: AND
 218: IFFALSE 234
 220: GO 222
 222: DISABLE
// begin enable ;
 223: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 224: LD_ADDR_OWVAR 47
 228: PUSH
 229: CALL 4238 0 0
 233: ST_TO_ADDR
// end ;
 234: END
// function Debuger ; var i ; begin
 235: LD_INT 0
 237: PPUSH
 238: PPUSH
// if not debug then
 239: LD_EXP 1
 243: NOT
 244: IFFALSE 248
// exit ;
 246: GO 320
// game_speed := 5 ;
 248: LD_ADDR_OWVAR 65
 252: PUSH
 253: LD_INT 5
 255: ST_TO_ADDR
// uc_side := 1 ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_INT 1
 263: ST_TO_ADDR
// uc_nation := 1 ;
 264: LD_ADDR_OWVAR 21
 268: PUSH
 269: LD_INT 1
 271: ST_TO_ADDR
// for i = 1 to 10 do
 272: LD_ADDR_VAR 0 2
 276: PUSH
 277: DOUBLE
 278: LD_INT 1
 280: DEC
 281: ST_TO_ADDR
 282: LD_INT 10
 284: PUSH
 285: FOR_TO
 286: IFFALSE 318
// begin PrepareHuman ( false , 1 , 10 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 10
 296: PPUSH
 297: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 301: CALL_OW 44
 305: PPUSH
 306: LD_INT 9
 308: PPUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 49
// end ;
 316: GO 285
 318: POP
 319: POP
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
// mpGameType := GameTypeCoop ;
 332: LD_ADDR_EXP 30
 336: PUSH
 337: LD_INT 4
 339: ST_TO_ADDR
// multi_settings_counter := 6 ;
 340: LD_ADDR_EXP 18
 344: PUSH
 345: LD_INT 6
 347: ST_TO_ADDR
// if Multiplayer then
 348: LD_OWVAR 4
 352: IFFALSE 532
// begin your_side := mp_player_side ;
 354: LD_ADDR_OWVAR 2
 358: PUSH
 359: LD_OWVAR 7
 363: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 364: LD_ADDR_EXP 6
 368: PUSH
 369: LD_OWVAR 6
 373: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 374: LD_ADDR_EXP 7
 378: PUSH
 379: LD_OWVAR 17
 383: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 384: LD_ADDR_EXP 8
 388: PUSH
 389: LD_OWVAR 15
 393: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 394: LD_ADDR_EXP 9
 398: PUSH
 399: LD_OWVAR 16
 403: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 404: LD_ADDR_EXP 10
 408: PUSH
 409: EMPTY
 410: PUSH
 411: EMPTY
 412: LIST
 413: ST_TO_ADDR
// for i in mp_teams do
 414: LD_ADDR_VAR 0 2
 418: PUSH
 419: LD_OWVAR 12
 423: PUSH
 424: FOR_IN
 425: IFFALSE 468
// if i then
 427: LD_VAR 0 2
 431: IFFALSE 466
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 433: LD_ADDR_EXP 10
 437: PUSH
 438: LD_EXP 10
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_EXP 10
 450: PUSH
 451: LD_INT 1
 453: ARRAY
 454: PUSH
 455: LD_VAR 0 2
 459: UNION
 460: PPUSH
 461: CALL_OW 1
 465: ST_TO_ADDR
 466: GO 424
 468: POP
 469: POP
// for i := 1 to multi_settings_counter do
 470: LD_ADDR_VAR 0 2
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_EXP 18
 484: PUSH
 485: FOR_TO
 486: IFFALSE 528
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 488: LD_ADDR_EXP 17
 492: PUSH
 493: LD_EXP 17
 497: PPUSH
 498: LD_EXP 17
 502: PUSH
 503: LD_INT 1
 505: PLUS
 506: PPUSH
 507: LD_VAR 0 2
 511: PPUSH
 512: CALL_OW 426
 516: PUSH
 517: LD_INT 1
 519: PLUS
 520: PPUSH
 521: CALL_OW 1
 525: ST_TO_ADDR
 526: GO 485
 528: POP
 529: POP
// end else
 530: GO 714
// begin your_side := 1 ;
 532: LD_ADDR_OWVAR 2
 536: PUSH
 537: LD_INT 1
 539: ST_TO_ADDR
// multi_gametype := 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 0
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: LD_INT 0
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: LD_INT 0
 570: PUSH
 571: LD_INT 0
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 587: LD_ADDR_EXP 8
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 0
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 0
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 626: LD_ADDR_EXP 9
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 0
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: LD_INT 0
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 665: LD_ADDR_EXP 10
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 683: LD_ADDR_EXP 17
 687: PUSH
 688: LD_INT 2
 690: PUSH
 691: LD_INT 2
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 714: LD_ADDR_EXP 31
 718: PUSH
 719: LD_EXP 7
 723: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 724: LD_ADDR_EXP 11
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 763: LD_ADDR_EXP 14
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: LD_INT 0
 773: PUSH
 774: LD_INT 0
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 802: LD_ADDR_EXP 25
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: LD_INT 0
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: ST_TO_ADDR
// multi_teamgame := true ;
 841: LD_ADDR_EXP 15
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 849: LD_ADDR_EXP 13
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: EMPTY
 858: LIST
 859: ST_TO_ADDR
// multi_custom_commanders := true ;
 860: LD_ADDR_EXP 16
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// multi_commanders := [ ] ;
 868: LD_ADDR_EXP 24
 872: PUSH
 873: EMPTY
 874: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 875: LD_ADDR_EXP 27
 879: PUSH
 880: EMPTY
 881: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 882: LD_ADDR_EXP 28
 886: PUSH
 887: LD_INT 0
 889: ST_TO_ADDR
// multi_players_amount := 0 ;
 890: LD_ADDR_EXP 26
 894: PUSH
 895: LD_INT 0
 897: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 898: LD_ADDR_EXP 12
 902: PUSH
 903: LD_INT 9
 905: PUSH
 906: LD_INT 8
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 26
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 29
 925: PUSH
 926: LD_INT 28
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: ST_TO_ADDR
// for i := 1 to 8 do
 938: LD_ADDR_VAR 0 2
 942: PUSH
 943: DOUBLE
 944: LD_INT 1
 946: DEC
 947: ST_TO_ADDR
 948: LD_INT 8
 950: PUSH
 951: FOR_TO
 952: IFFALSE 1287
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 954: LD_VAR 0 2
 958: PPUSH
 959: CALL_OW 530
 963: IFFALSE 1121
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 965: LD_ADDR_EXP 11
 969: PUSH
 970: LD_EXP 11
 974: PPUSH
 975: LD_VAR 0 2
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: CALL_OW 1
 987: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 988: LD_ADDR_EXP 9
 992: PUSH
 993: LD_EXP 9
 997: PPUSH
 998: LD_VAR 0 2
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 1
1010: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1011: LD_ADDR_EXP 7
1015: PUSH
1016: LD_EXP 7
1020: PPUSH
1021: LD_VAR 0 2
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 1
1033: ST_TO_ADDR
// for j = 1 to multi_teams do
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 10
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1119
// begin if i in multi_teams [ j ] then
1052: LD_VAR 0 2
1056: PUSH
1057: LD_EXP 10
1061: PUSH
1062: LD_VAR 0 3
1066: ARRAY
1067: IN
1068: IFFALSE 1117
// begin tmp := multi_teams [ j ] diff i ;
1070: LD_ADDR_VAR 0 5
1074: PUSH
1075: LD_EXP 10
1079: PUSH
1080: LD_VAR 0 3
1084: ARRAY
1085: PUSH
1086: LD_VAR 0 2
1090: DIFF
1091: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1092: LD_ADDR_EXP 10
1096: PUSH
1097: LD_EXP 10
1101: PPUSH
1102: LD_VAR 0 3
1106: PPUSH
1107: LD_VAR 0 5
1111: PPUSH
1112: CALL_OW 1
1116: ST_TO_ADDR
// end ; end ;
1117: GO 1049
1119: POP
1120: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1121: LD_EXP 9
1125: PUSH
1126: LD_VAR 0 2
1130: ARRAY
1131: IFFALSE 1152
1133: PUSH
1134: LD_EXP 9
1138: PUSH
1139: LD_VAR 0 2
1143: ARRAY
1144: PUSH
1145: LD_EXP 13
1149: IN
1150: NOT
1151: AND
1152: IFFALSE 1193
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1154: LD_ADDR_EXP 9
1158: PUSH
1159: LD_EXP 9
1163: PPUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_EXP 13
1173: PUSH
1174: LD_INT 1
1176: PPUSH
1177: LD_EXP 13
1181: PPUSH
1182: CALL_OW 12
1186: ARRAY
1187: PPUSH
1188: CALL_OW 1
1192: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1193: LD_EXP 9
1197: PUSH
1198: LD_VAR 0 2
1202: ARRAY
1203: NOT
1204: IFFALSE 1219
1206: PUSH
1207: LD_EXP 7
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: NOT
1218: AND
1219: IFFALSE 1234
1221: PUSH
1222: LD_EXP 11
1226: PUSH
1227: LD_VAR 0 2
1231: ARRAY
1232: NOT
1233: AND
1234: IFFALSE 1259
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1236: LD_ADDR_EXP 14
1240: PUSH
1241: LD_EXP 14
1245: PPUSH
1246: LD_VAR 0 2
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// if multi_sides [ i ] then
1259: LD_EXP 7
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: IFFALSE 1285
// multi_players_amount := multi_players_amount + 1 ;
1271: LD_ADDR_EXP 26
1275: PUSH
1276: LD_EXP 26
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ST_TO_ADDR
// end ;
1285: GO 951
1287: POP
1288: POP
// for i in multi_teams do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: LD_EXP 10
1298: PUSH
1299: FOR_IN
1300: IFFALSE 1408
// begin for j = 2 to i do
1302: LD_ADDR_VAR 0 3
1306: PUSH
1307: DOUBLE
1308: LD_INT 2
1310: DEC
1311: ST_TO_ADDR
1312: LD_VAR 0 2
1316: PUSH
1317: FOR_TO
1318: IFFALSE 1404
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1320: LD_VAR 0 2
1324: PUSH
1325: LD_VAR 0 3
1329: ARRAY
1330: PPUSH
1331: LD_VAR 0 2
1335: PUSH
1336: LD_INT 1
1338: ARRAY
1339: PPUSH
1340: CALL_OW 343
// for x = 1 to j - 1 do
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: DOUBLE
1350: LD_INT 1
1352: DEC
1353: ST_TO_ADDR
1354: LD_VAR 0 3
1358: PUSH
1359: LD_INT 1
1361: MINUS
1362: PUSH
1363: FOR_TO
1364: IFFALSE 1400
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1366: LD_VAR 0 2
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PPUSH
1377: LD_VAR 0 2
1381: PUSH
1382: LD_VAR 0 4
1386: ARRAY
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: CALL_OW 80
1398: GO 1363
1400: POP
1401: POP
// end ;
1402: GO 1317
1404: POP
1405: POP
// end ;
1406: GO 1299
1408: POP
1409: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1410: LD_ADDR_OWVAR 67
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 2
1420: PUSH
1421: LD_INT 3
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: LIST
1428: PUSH
1429: LD_EXP 17
1433: PUSH
1434: LD_INT 1
1436: ARRAY
1437: ARRAY
1438: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_INT 9
1446: PUSH
1447: LD_INT 12
1449: PUSH
1450: LD_INT 15
1452: PUSH
1453: LD_INT 18
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: PUSH
1462: LD_EXP 17
1466: PUSH
1467: LD_INT 2
1469: ARRAY
1470: ARRAY
1471: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1472: LD_ADDR_EXP 20
1476: PUSH
1477: LD_INT 5
1479: PUSH
1480: LD_INT 6
1482: PUSH
1483: LD_INT 8
1485: PUSH
1486: LD_INT 10
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: PUSH
1495: LD_EXP 17
1499: PUSH
1500: LD_INT 3
1502: ARRAY
1503: ARRAY
1504: ST_TO_ADDR
// multi_crates_spawn := [ [ 12000 , 0 0$32 ] , [ 15000 , 0 0$22 ] , [ 20000 , 0 0$14 ] , [ 24000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1505: LD_ADDR_EXP 21
1509: PUSH
1510: LD_INT 12000
1512: PUSH
1513: LD_INT 1120
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 15000
1522: PUSH
1523: LD_INT 770
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 20000
1532: PUSH
1533: LD_INT 490
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 24000
1542: PUSH
1543: LD_INT 420
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 17
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: ARRAY
1565: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1566: LD_ADDR_EXP 22
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 8
1576: PUSH
1577: LD_INT 10
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_EXP 17
1589: PUSH
1590: LD_INT 5
1592: ARRAY
1593: ARRAY
1594: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1595: LD_ADDR_EXP 23
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_EXP 17
1618: PUSH
1619: LD_INT 6
1621: ARRAY
1622: ARRAY
1623: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1624: LD_ADDR_EXP 29
1628: PUSH
1629: LD_INT 31500
1631: PUSH
1632: LD_INT 37800
1634: PUSH
1635: LD_INT 44100
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: ST_TO_ADDR
// if multi_ape_amount then
1649: LD_EXP 22
1653: IFFALSE 1700
// begin for i := 1 to multi_ape_amount do
1655: LD_ADDR_VAR 0 2
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_EXP 22
1669: PUSH
1670: FOR_TO
1671: IFFALSE 1698
// begin PrepareApeman ( - 5 ) ;
1673: LD_INT 5
1675: NEG
1676: PPUSH
1677: CALL 51470 0 1
// PlaceUnitArea ( CreateHuman , ape_area , false ) ;
1681: CALL_OW 44
1685: PPUSH
1686: LD_INT 50
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// end ;
1696: GO 1670
1698: POP
1699: POP
// end ; end ;
1700: LD_VAR 0 1
1704: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
// if not multi_sides [ 2 ] then
1709: LD_EXP 7
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: NOT
1718: IFFALSE 1732
// begin result := preferSide ;
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 1
1729: ST_TO_ADDR
// exit ;
1730: GO 1779
// end ; for i := 1 to 8 do
1732: LD_ADDR_VAR 0 3
1736: PUSH
1737: DOUBLE
1738: LD_INT 1
1740: DEC
1741: ST_TO_ADDR
1742: LD_INT 8
1744: PUSH
1745: FOR_TO
1746: IFFALSE 1777
// if not multi_sides [ i ] then
1748: LD_EXP 7
1752: PUSH
1753: LD_VAR 0 3
1757: ARRAY
1758: NOT
1759: IFFALSE 1775
// begin result := i ;
1761: LD_ADDR_VAR 0 2
1765: PUSH
1766: LD_VAR 0 3
1770: ST_TO_ADDR
// exit ;
1771: POP
1772: POP
1773: GO 1779
// end ;
1775: GO 1745
1777: POP
1778: POP
// end ;
1779: LD_VAR 0 2
1783: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1784: LD_INT 0
1786: PPUSH
// uc_side := side ;
1787: LD_ADDR_OWVAR 20
1791: PUSH
1792: LD_VAR 0 1
1796: ST_TO_ADDR
// uc_nation := 1 ;
1797: LD_ADDR_OWVAR 21
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// hc_importance := 100 ;
1805: LD_ADDR_OWVAR 32
1809: PUSH
1810: LD_INT 100
1812: ST_TO_ADDR
// hc_class := 1 ;
1813: LD_ADDR_OWVAR 28
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if num = 1 then
1821: LD_VAR 0 2
1825: PUSH
1826: LD_INT 1
1828: EQUAL
1829: IFFALSE 1911
// begin hc_gallery := us ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING us
1838: ST_TO_ADDR
// hc_face_number := 5 ;
1839: LD_ADDR_OWVAR 34
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// hc_name := John Macmilan ;
1847: LD_ADDR_OWVAR 26
1851: PUSH
1852: LD_STRING John Macmilan
1854: ST_TO_ADDR
// hc_sex := sex_male ;
1855: LD_ADDR_OWVAR 27
1859: PUSH
1860: LD_INT 1
1862: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1863: LD_ADDR_OWVAR 31
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: LD_INT 2
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 4
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1886: LD_ADDR_OWVAR 29
1890: PUSH
1891: LD_INT 11
1893: PUSH
1894: LD_INT 10
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: ST_TO_ADDR
// result := CreateHuman ;
1901: LD_ADDR_VAR 0 3
1905: PUSH
1906: CALL_OW 44
1910: ST_TO_ADDR
// end ; if num = 2 then
1911: LD_VAR 0 2
1915: PUSH
1916: LD_INT 2
1918: EQUAL
1919: IFFALSE 2001
// begin hc_gallery := us ;
1921: LD_ADDR_OWVAR 33
1925: PUSH
1926: LD_STRING us
1928: ST_TO_ADDR
// hc_face_number := 2 ;
1929: LD_ADDR_OWVAR 34
1933: PUSH
1934: LD_INT 2
1936: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1937: LD_ADDR_OWVAR 26
1941: PUSH
1942: LD_STRING Lucy Donaldson
1944: ST_TO_ADDR
// hc_sex := sex_female ;
1945: LD_ADDR_OWVAR 27
1949: PUSH
1950: LD_INT 2
1952: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1953: LD_ADDR_OWVAR 31
1957: PUSH
1958: LD_INT 6
1960: PUSH
1961: LD_INT 3
1963: PUSH
1964: LD_INT 4
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1976: LD_ADDR_OWVAR 29
1980: PUSH
1981: LD_INT 9
1983: PUSH
1984: LD_INT 12
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// result := CreateHuman ;
1991: LD_ADDR_VAR 0 3
1995: PUSH
1996: CALL_OW 44
2000: ST_TO_ADDR
// end ; if num = 3 then
2001: LD_VAR 0 2
2005: PUSH
2006: LD_INT 3
2008: EQUAL
2009: IFFALSE 2091
// begin hc_gallery := us ;
2011: LD_ADDR_OWVAR 33
2015: PUSH
2016: LD_STRING us
2018: ST_TO_ADDR
// hc_face_number := 3 ;
2019: LD_ADDR_OWVAR 34
2023: PUSH
2024: LD_INT 3
2026: ST_TO_ADDR
// hc_name := Lisa Lawson ;
2027: LD_ADDR_OWVAR 26
2031: PUSH
2032: LD_STRING Lisa Lawson
2034: ST_TO_ADDR
// hc_sex := sex_female ;
2035: LD_ADDR_OWVAR 27
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// hc_skills := [ 8 , 4 , 3 , 3 ] ;
2043: LD_ADDR_OWVAR 31
2047: PUSH
2048: LD_INT 8
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 3
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2066: LD_ADDR_OWVAR 29
2070: PUSH
2071: LD_INT 10
2073: PUSH
2074: LD_INT 11
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// result := CreateHuman ;
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: CALL_OW 44
2090: ST_TO_ADDR
// end ; end ;
2091: LD_VAR 0 3
2095: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2096: LD_INT 0
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
// for i := 1 to 8 do
2107: LD_ADDR_VAR 0 2
2111: PUSH
2112: DOUBLE
2113: LD_INT 1
2115: DEC
2116: ST_TO_ADDR
2117: LD_INT 8
2119: PUSH
2120: FOR_TO
2121: IFFALSE 3011
// begin if not multi_sides [ i ] then
2123: LD_EXP 7
2127: PUSH
2128: LD_VAR 0 2
2132: ARRAY
2133: NOT
2134: IFFALSE 2138
// continue ;
2136: GO 2120
// if multi_custom_commanders then
2138: LD_EXP 16
2142: IFFALSE 2234
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2144: LD_ADDR_VAR 0 5
2148: PUSH
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_EXP 7
2158: PUSH
2159: LD_VAR 0 2
2163: ARRAY
2164: PPUSH
2165: CALL 1784 0 2
2169: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2170: LD_ADDR_EXP 24
2174: PUSH
2175: LD_EXP 24
2179: PPUSH
2180: LD_EXP 24
2184: PUSH
2185: LD_INT 1
2187: PLUS
2188: PPUSH
2189: LD_VAR 0 5
2193: PPUSH
2194: CALL_OW 2
2198: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2199: LD_VAR 0 5
2203: PPUSH
2204: LD_EXP 12
2208: PUSH
2209: LD_EXP 7
2213: PUSH
2214: LD_VAR 0 2
2218: ARRAY
2219: ARRAY
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL_OW 49
// end else
2232: GO 2445
// begin uc_side := i ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_VAR 0 2
2243: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2244: LD_ADDR_OWVAR 21
2248: PUSH
2249: LD_EXP 9
2253: PUSH
2254: LD_VAR 0 2
2258: ARRAY
2259: ST_TO_ADDR
// hc_importance := 100 ;
2260: LD_ADDR_OWVAR 32
2264: PUSH
2265: LD_INT 100
2267: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2268: LD_INT 0
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_EXP 20
2278: PPUSH
2279: CALL_OW 380
// if multiplayer then
2283: LD_OWVAR 4
2287: IFFALSE 2345
// begin hc_name := mp_sides_players_names [ i ] ;
2289: LD_ADDR_OWVAR 26
2293: PUSH
2294: LD_OWVAR 19
2298: PUSH
2299: LD_VAR 0 2
2303: ARRAY
2304: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2305: LD_ADDR_OWVAR 33
2309: PUSH
2310: LD_STRING MULTIAVATARS
2312: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2313: LD_ADDR_OWVAR 34
2317: PUSH
2318: LD_VAR 0 2
2322: PPUSH
2323: CALL_OW 525
2327: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_VAR 0 2
2337: PPUSH
2338: CALL_OW 526
2342: ST_TO_ADDR
// end else
2343: GO 2377
// begin hc_gallery :=  ;
2345: LD_ADDR_OWVAR 33
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// hc_name :=  ;
2353: LD_ADDR_OWVAR 26
2357: PUSH
2358: LD_STRING 
2360: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2361: LD_ADDR_OWVAR 27
2365: PUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 2
2371: PPUSH
2372: CALL_OW 12
2376: ST_TO_ADDR
// end ; un := CreateHuman ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: CALL_OW 44
2386: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_EXP 12
2396: PUSH
2397: LD_EXP 7
2401: PUSH
2402: LD_VAR 0 2
2406: ARRAY
2407: ARRAY
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2420: LD_ADDR_EXP 24
2424: PUSH
2425: LD_EXP 24
2429: PPUSH
2430: LD_VAR 0 2
2434: PPUSH
2435: LD_VAR 0 5
2439: PPUSH
2440: CALL_OW 1
2444: ST_TO_ADDR
// end ; InitHc ;
2445: CALL_OW 19
// InitUc ;
2449: CALL_OW 18
// uc_side := i ;
2453: LD_ADDR_OWVAR 20
2457: PUSH
2458: LD_VAR 0 2
2462: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2463: LD_ADDR_OWVAR 21
2467: PUSH
2468: LD_EXP 9
2472: PUSH
2473: LD_VAR 0 2
2477: ARRAY
2478: ST_TO_ADDR
// hc_gallery :=  ;
2479: LD_ADDR_OWVAR 33
2483: PUSH
2484: LD_STRING 
2486: ST_TO_ADDR
// hc_name :=  ;
2487: LD_ADDR_OWVAR 26
2491: PUSH
2492: LD_STRING 
2494: ST_TO_ADDR
// hc_importance := 0 ;
2495: LD_ADDR_OWVAR 32
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// cl := 1 ;
2503: LD_ADDR_VAR 0 4
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2511: LD_ADDR_VAR 0 3
2515: PUSH
2516: DOUBLE
2517: LD_INT 2
2519: DEC
2520: ST_TO_ADDR
2521: LD_EXP 19
2525: PUSH
2526: FOR_TO
2527: IFFALSE 2899
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 1
2536: MINUS
2537: PUSH
2538: LD_EXP 19
2542: PUSH
2543: LD_INT 1
2545: MINUS
2546: PUSH
2547: LD_INT 4
2549: DIVREAL
2550: MOD
2551: PUSH
2552: LD_INT 0
2554: EQUAL
2555: IFFALSE 2571
// cl := cl + 1 ;
2557: LD_ADDR_VAR 0 4
2561: PUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: PLUS
2570: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2571: LD_INT 0
2573: PPUSH
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_EXP 20
2583: PPUSH
2584: CALL_OW 380
// un := CreateHuman ;
2588: LD_ADDR_VAR 0 5
2592: PUSH
2593: CALL_OW 44
2597: ST_TO_ADDR
// if j > copy then
2598: LD_VAR 0 3
2602: PUSH
2603: LD_VAR 0 8
2607: GREATER
2608: IFFALSE 2637
// copy := Replace ( copy , j , un ) else
2610: LD_ADDR_VAR 0 8
2614: PUSH
2615: LD_VAR 0 8
2619: PPUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_VAR 0 5
2629: PPUSH
2630: CALL_OW 1
2634: ST_TO_ADDR
2635: GO 2719
// begin CopySkills ( copy [ j ] , un ) ;
2637: LD_VAR 0 8
2641: PUSH
2642: LD_VAR 0 3
2646: ARRAY
2647: PPUSH
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2657: LD_VAR 0 5
2661: PPUSH
2662: LD_INT 2
2664: PPUSH
2665: LD_VAR 0 8
2669: PUSH
2670: LD_VAR 0 3
2674: ARRAY
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 260
2683: PPUSH
2684: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2688: LD_VAR 0 5
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_VAR 0 8
2700: PUSH
2701: LD_VAR 0 3
2705: ARRAY
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: CALL_OW 260
2714: PPUSH
2715: CALL_OW 239
// end ; if multi_pos_area then
2719: LD_EXP 12
2723: IFFALSE 2897
// begin if GetClass ( un ) = 3 then
2725: LD_VAR 0 5
2729: PPUSH
2730: CALL_OW 257
2734: PUSH
2735: LD_INT 3
2737: EQUAL
2738: IFFALSE 2864
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2740: LD_INT 3
2742: PUSH
2743: LD_INT 2
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_VAR 0 3
2754: PUSH
2755: LD_INT 2
2757: MOD
2758: PUSH
2759: LD_INT 1
2761: PLUS
2762: ARRAY
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 5
2772: PUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: PUSH
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 3
2791: MOD
2792: PUSH
2793: LD_INT 1
2795: PLUS
2796: ARRAY
2797: PPUSH
2798: LD_INT 100
2800: PPUSH
2801: CALL 22163 0 5
// veh := CreateVehicle ;
2805: LD_ADDR_VAR 0 6
2809: PUSH
2810: CALL_OW 45
2814: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2815: LD_VAR 0 6
2819: PPUSH
2820: LD_EXP 12
2824: PUSH
2825: LD_EXP 7
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ARRAY
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_INT 0
2843: PPUSH
2844: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2848: LD_VAR 0 5
2852: PPUSH
2853: LD_VAR 0 6
2857: PPUSH
2858: CALL_OW 52
// continue ;
2862: GO 2526
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2864: LD_VAR 0 5
2868: PPUSH
2869: LD_EXP 12
2873: PUSH
2874: LD_EXP 7
2878: PUSH
2879: LD_VAR 0 2
2883: ARRAY
2884: ARRAY
2885: PUSH
2886: LD_INT 1
2888: ARRAY
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 49
// end ; end ;
2897: GO 2526
2899: POP
2900: POP
// for j = 1 to 3 do
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_INT 3
2913: PUSH
2914: FOR_TO
2915: IFFALSE 3007
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2917: LD_INT 2
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 1
2929: PPUSH
2930: LD_INT 2
2932: PPUSH
2933: CALL_OW 12
2937: ARRAY
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 3
2944: PPUSH
2945: LD_INT 11
2947: PUSH
2948: LD_INT 7
2950: PUSH
2951: LD_INT 4
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_VAR 0 3
2963: ARRAY
2964: PPUSH
2965: LD_INT 100
2967: PPUSH
2968: CALL 22163 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2972: CALL_OW 45
2976: PPUSH
2977: LD_EXP 12
2981: PUSH
2982: LD_EXP 7
2986: PUSH
2987: LD_VAR 0 2
2991: ARRAY
2992: ARRAY
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_INT 0
3000: PPUSH
3001: CALL_OW 49
// end ;
3005: GO 2914
3007: POP
3008: POP
// end ;
3009: GO 2120
3011: POP
3012: POP
// end ;
3013: LD_VAR 0 1
3017: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3018: LD_INT 0
3020: PPUSH
3021: PPUSH
3022: PPUSH
3023: PPUSH
3024: PPUSH
// if not multi_support then
3025: LD_EXP 23
3029: NOT
3030: IFFALSE 3034
// exit ;
3032: GO 3605
// result := [ ] ;
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// for i := 1 to 8 do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: DOUBLE
3047: LD_INT 1
3049: DEC
3050: ST_TO_ADDR
3051: LD_INT 8
3053: PUSH
3054: FOR_TO
3055: IFFALSE 3603
// begin result := Replace ( result , i , [ ] ) ;
3057: LD_ADDR_VAR 0 1
3061: PUSH
3062: LD_VAR 0 1
3066: PPUSH
3067: LD_VAR 0 2
3071: PPUSH
3072: EMPTY
3073: PPUSH
3074: CALL_OW 1
3078: ST_TO_ADDR
// if multi_sides [ i ] then
3079: LD_EXP 7
3083: PUSH
3084: LD_VAR 0 2
3088: ARRAY
3089: IFFALSE 3601
// begin tmp := [ ] ;
3091: LD_ADDR_VAR 0 5
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// if multi_support = 1 then
3098: LD_EXP 23
3102: PUSH
3103: LD_INT 1
3105: EQUAL
3106: IFFALSE 3274
// begin uc_side := i ;
3108: LD_ADDR_OWVAR 20
3112: PUSH
3113: LD_VAR 0 2
3117: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3118: LD_ADDR_OWVAR 21
3122: PUSH
3123: LD_EXP 9
3127: PUSH
3128: LD_VAR 0 2
3132: ARRAY
3133: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 11
3145: PPUSH
3146: LD_INT 40
3148: PPUSH
3149: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3153: LD_ADDR_VAR 0 5
3157: PUSH
3158: LD_VAR 0 5
3162: PUSH
3163: CALL_OW 45
3167: ADD
3168: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3169: LD_INT 2
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: LD_INT 3
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: LD_INT 40
3183: PPUSH
3184: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_VAR 0 5
3197: PUSH
3198: CALL_OW 45
3202: ADD
3203: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3204: LD_INT 2
3206: PPUSH
3207: LD_INT 3
3209: PPUSH
3210: LD_INT 3
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 40
3218: PPUSH
3219: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3223: LD_ADDR_VAR 0 5
3227: PUSH
3228: LD_VAR 0 5
3232: PUSH
3233: CALL_OW 45
3237: ADD
3238: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 2
3244: PPUSH
3245: LD_INT 3
3247: PPUSH
3248: LD_INT 9
3250: PPUSH
3251: LD_INT 40
3253: PPUSH
3254: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3258: LD_ADDR_VAR 0 5
3262: PUSH
3263: LD_VAR 0 5
3267: PUSH
3268: CALL_OW 45
3272: ADD
3273: ST_TO_ADDR
// end ; if multi_support = 2 then
3274: LD_EXP 23
3278: PUSH
3279: LD_INT 2
3281: EQUAL
3282: IFFALSE 3576
// begin uc_side := i ;
3284: LD_ADDR_OWVAR 20
3288: PUSH
3289: LD_VAR 0 2
3293: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3294: LD_ADDR_OWVAR 21
3298: PUSH
3299: LD_EXP 9
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_INT 3
3318: PPUSH
3319: LD_INT 11
3321: PPUSH
3322: LD_INT 40
3324: PPUSH
3325: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3329: LD_ADDR_VAR 0 5
3333: PUSH
3334: LD_VAR 0 5
3338: PUSH
3339: CALL_OW 45
3343: ADD
3344: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3345: LD_INT 3
3347: PPUSH
3348: LD_INT 3
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_INT 12
3356: PPUSH
3357: LD_INT 40
3359: PPUSH
3360: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_VAR 0 5
3373: PUSH
3374: CALL_OW 45
3378: ADD
3379: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3380: LD_VAR 0 5
3384: PUSH
3385: LD_VAR 0 5
3389: ARRAY
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: LD_INT 100
3396: PPUSH
3397: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3401: LD_INT 2
3403: PPUSH
3404: LD_INT 3
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_INT 5
3412: PPUSH
3413: LD_INT 40
3415: PPUSH
3416: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: CALL_OW 45
3434: ADD
3435: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3436: LD_INT 4
3438: PPUSH
3439: LD_INT 1
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 6
3447: PPUSH
3448: LD_INT 40
3450: PPUSH
3451: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3455: LD_ADDR_VAR 0 5
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: CALL_OW 45
3469: ADD
3470: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3471: LD_INT 2
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_INT 9
3482: PPUSH
3483: LD_INT 40
3485: PPUSH
3486: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3490: LD_ADDR_VAR 0 5
3494: PUSH
3495: LD_VAR 0 5
3499: PUSH
3500: CALL_OW 45
3504: ADD
3505: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3506: LD_INT 2
3508: PPUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 9
3517: PPUSH
3518: LD_INT 40
3520: PPUSH
3521: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3525: LD_ADDR_VAR 0 5
3529: PUSH
3530: LD_VAR 0 5
3534: PUSH
3535: CALL_OW 45
3539: ADD
3540: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3541: LD_INT 4
3543: PPUSH
3544: LD_INT 1
3546: PPUSH
3547: LD_INT 3
3549: PPUSH
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 40
3555: PPUSH
3556: CALL 22163 0 5
// tmp := tmp ^ CreateVehicle ;
3560: LD_ADDR_VAR 0 5
3564: PUSH
3565: LD_VAR 0 5
3569: PUSH
3570: CALL_OW 45
3574: ADD
3575: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: LD_VAR 0 5
3595: PPUSH
3596: CALL_OW 1
3600: ST_TO_ADDR
// end ; end ;
3601: GO 3054
3603: POP
3604: POP
// end ;
3605: LD_VAR 0 1
3609: RET
// export function Multiplayer_Start ( ) ; begin
3610: LD_INT 0
3612: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3613: CALL 2096 0 0
// Multiplayer_InitPointSystem ( ) ;
3617: CALL 4327 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3621: LD_INT 20
3623: PPUSH
3624: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3628: LD_INT 150
3630: PPUSH
3631: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3635: LD_INT 5
3637: PPUSH
3638: CALL 4511 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3642: LD_INT 40
3644: NEG
3645: PPUSH
3646: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3650: LD_INT 200
3652: PPUSH
3653: CALL 4511 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3657: LD_INT 2
3659: PPUSH
3660: CALL 4511 0 1
// Multiplayer_SpawnArtifact ;
3664: CALL 4953 0 0
// if multi_support then
3668: LD_EXP 23
3672: IFFALSE 3684
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3674: LD_ADDR_EXP 27
3678: PUSH
3679: CALL 3018 0 0
3683: ST_TO_ADDR
// if multi_sides [ your_side ] then
3684: LD_EXP 7
3688: PUSH
3689: LD_OWVAR 2
3693: ARRAY
3694: IFFALSE 3721
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3696: LD_INT 22
3698: PUSH
3699: LD_OWVAR 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 87
// end ;
3721: LD_VAR 0 1
3725: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3726: LD_INT 0
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
3732: PPUSH
// reinforcements_arrive := 0 ;
3733: LD_ADDR_VAR 0 5
3737: PUSH
3738: LD_INT 0
3740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3741: LD_INT 35
3743: PPUSH
3744: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3748: LD_OWVAR 1
3752: PUSH
3753: LD_EXP 29
3757: GREATER
3758: IFFALSE 3767
3760: PUSH
3761: LD_EXP 28
3765: NOT
3766: AND
3767: IFFALSE 3775
3769: PUSH
3770: LD_EXP 23
3774: AND
3775: IFFALSE 3944
// begin multi_reinforcements_spawned := true ;
3777: LD_ADDR_EXP 28
3781: PUSH
3782: LD_INT 1
3784: ST_TO_ADDR
// for i := 1 to 8 do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: DOUBLE
3791: LD_INT 1
3793: DEC
3794: ST_TO_ADDR
3795: LD_INT 8
3797: PUSH
3798: FOR_TO
3799: IFFALSE 3932
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3801: LD_EXP 7
3805: PUSH
3806: LD_VAR 0 2
3810: ARRAY
3811: IFFALSE 3826
3813: PUSH
3814: LD_EXP 25
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: NOT
3825: AND
3826: IFFALSE 3840
3828: PUSH
3829: LD_EXP 27
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: AND
3840: IFFALSE 3930
// begin tmp := multi_reinforcements [ i ] ;
3842: LD_ADDR_VAR 0 4
3846: PUSH
3847: LD_EXP 27
3851: PUSH
3852: LD_VAR 0 2
3856: ARRAY
3857: ST_TO_ADDR
// for j in tmp do
3858: LD_ADDR_VAR 0 3
3862: PUSH
3863: LD_VAR 0 4
3867: PUSH
3868: FOR_IN
3869: IFFALSE 3906
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3871: LD_VAR 0 3
3875: PPUSH
3876: LD_EXP 12
3880: PUSH
3881: LD_EXP 7
3885: PUSH
3886: LD_VAR 0 2
3890: ARRAY
3891: ARRAY
3892: PUSH
3893: LD_INT 2
3895: ARRAY
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 49
3904: GO 3868
3906: POP
3907: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3908: LD_ADDR_EXP 27
3912: PUSH
3913: LD_EXP 27
3917: PPUSH
3918: LD_VAR 0 2
3922: PPUSH
3923: EMPTY
3924: PPUSH
3925: CALL_OW 1
3929: ST_TO_ADDR
// end ; end ;
3930: GO 3798
3932: POP
3933: POP
// reinforcements_arrive := tick ;
3934: LD_ADDR_VAR 0 5
3938: PUSH
3939: LD_OWVAR 1
3943: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3944: LD_EXP 16
3948: NOT
3949: IFFALSE 4064
// begin for i = 1 to 8 do
3951: LD_ADDR_VAR 0 2
3955: PUSH
3956: DOUBLE
3957: LD_INT 1
3959: DEC
3960: ST_TO_ADDR
3961: LD_INT 8
3963: PUSH
3964: FOR_TO
3965: IFFALSE 4038
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3967: LD_INT 22
3969: PUSH
3970: LD_VAR 0 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PUSH
3984: LD_INT 0
3986: EQUAL
3987: IFFALSE 4002
3989: PUSH
3990: LD_EXP 25
3994: PUSH
3995: LD_VAR 0 2
3999: ARRAY
4000: NOT
4001: AND
4002: IFFALSE 4036
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4004: LD_ADDR_EXP 25
4008: PUSH
4009: LD_EXP 25
4013: PPUSH
4014: LD_VAR 0 2
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: CALL_OW 1
4026: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4027: LD_VAR 0 2
4031: PPUSH
4032: CALL 4581 0 1
// end ; end ;
4036: GO 3964
4038: POP
4039: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4040: LD_EXP 25
4044: PPUSH
4045: CALL 19367 0 1
4049: PUSH
4050: LD_EXP 7
4054: PPUSH
4055: CALL 19367 0 1
4059: EQUAL
4060: IFFALSE 4064
// break ;
4062: GO 4124
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
4064: LD_INT 22
4066: PUSH
4067: LD_EXP 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 50
4088: PUSH
4089: EMPTY
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: LD_INT 0
4104: EQUAL
4105: IFFALSE 4113
4107: PUSH
4108: LD_EXP 2
4112: AND
4113: IFTRUE 4122
4115: PUSH
4116: LD_EXP 24
4120: NOT
4121: OR
4122: IFFALSE 3741
// game := false ;
4124: LD_ADDR_EXP 2
4128: PUSH
4129: LD_INT 0
4131: ST_TO_ADDR
// for i := 1 to 8 do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_INT 8
4144: PUSH
4145: FOR_TO
4146: IFFALSE 4182
// begin if multi_sides [ i ] then
4148: LD_EXP 7
4152: PUSH
4153: LD_VAR 0 2
4157: ARRAY
4158: IFFALSE 4180
// SetMultiScore ( i , multi_points [ i ] ) ;
4160: LD_VAR 0 2
4164: PPUSH
4165: LD_EXP 32
4169: PUSH
4170: LD_VAR 0 2
4174: ARRAY
4175: PPUSH
4176: CALL_OW 506
// end ;
4180: GO 4145
4182: POP
4183: POP
// if multi_loosers [ your_side ] then
4184: LD_EXP 25
4188: PUSH
4189: LD_OWVAR 2
4193: ARRAY
4194: IFFALSE 4217
// begin if Multiplayer then
4196: LD_OWVAR 4
4200: IFFALSE 4208
// YouLostInMultiplayer else
4202: CALL_OW 107
4206: GO 4215
// YouLost (  ) ;
4208: LD_STRING 
4210: PPUSH
4211: CALL_OW 104
// end else
4215: GO 4233
// begin if Multiplayer then
4217: LD_OWVAR 4
4221: IFFALSE 4229
// YouWinInMultiplayer else
4223: CALL_OW 106
4227: GO 4233
// YouWin ;
4229: CALL_OW 103
// end ; end ;
4233: LD_VAR 0 1
4237: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4238: LD_INT 0
4240: PPUSH
4241: PPUSH
// result := [ ] ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: EMPTY
4248: ST_TO_ADDR
// for i := 1 to 8 do
4249: LD_ADDR_VAR 0 2
4253: PUSH
4254: DOUBLE
4255: LD_INT 1
4257: DEC
4258: ST_TO_ADDR
4259: LD_INT 8
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4320
// begin if multi_sides [ i ] then
4265: LD_EXP 7
4269: PUSH
4270: LD_VAR 0 2
4274: ARRAY
4275: IFFALSE 4318
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_VAR 0 1
4286: PUSH
4287: LD_STRING #coop-points
4289: PUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_EXP 32
4304: PUSH
4305: LD_VAR 0 2
4309: ARRAY
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: ADD
4317: ST_TO_ADDR
// end ; end ;
4318: GO 4262
4320: POP
4321: POP
// end ;
4322: LD_VAR 0 1
4326: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4327: LD_INT 0
4329: PPUSH
4330: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4331: LD_ADDR_EXP 32
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: LD_INT 0
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: LD_INT 0
4350: PUSH
4351: LD_INT 0
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4370: LD_ADDR_EXP 33
4374: PUSH
4375: EMPTY
4376: ST_TO_ADDR
// end ;
4377: LD_VAR 0 1
4381: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4382: LD_INT 0
4384: PPUSH
// if not multi_points or not side or side > 8 then
4385: LD_EXP 32
4389: NOT
4390: IFTRUE 4399
4392: PUSH
4393: LD_VAR 0 1
4397: NOT
4398: OR
4399: IFTRUE 4411
4401: PUSH
4402: LD_VAR 0 1
4406: PUSH
4407: LD_INT 8
4409: GREATER
4410: OR
4411: IFFALSE 4415
// exit ;
4413: GO 4452
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4415: LD_ADDR_EXP 32
4419: PUSH
4420: LD_EXP 32
4424: PPUSH
4425: LD_VAR 0 1
4429: PPUSH
4430: LD_EXP 32
4434: PUSH
4435: LD_VAR 0 1
4439: ARRAY
4440: PUSH
4441: LD_VAR 0 2
4445: PLUS
4446: PPUSH
4447: CALL_OW 1
4451: ST_TO_ADDR
// end ;
4452: LD_VAR 0 3
4456: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4457: LD_INT 0
4459: PPUSH
// if not multi_points or not side or side > 8 then
4460: LD_EXP 32
4464: NOT
4465: IFTRUE 4474
4467: PUSH
4468: LD_VAR 0 1
4472: NOT
4473: OR
4474: IFTRUE 4486
4476: PUSH
4477: LD_VAR 0 1
4481: PUSH
4482: LD_INT 8
4484: GREATER
4485: OR
4486: IFFALSE 4490
// exit ;
4488: GO 4506
// result := multi_points [ side ] ;
4490: LD_ADDR_VAR 0 2
4494: PUSH
4495: LD_EXP 32
4499: PUSH
4500: LD_VAR 0 1
4504: ARRAY
4505: ST_TO_ADDR
// end ;
4506: LD_VAR 0 2
4510: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4511: LD_INT 0
4513: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4514: LD_ADDR_EXP 33
4518: PUSH
4519: LD_EXP 33
4523: PPUSH
4524: LD_EXP 33
4528: PUSH
4529: LD_INT 1
4531: PLUS
4532: PPUSH
4533: LD_VAR 0 1
4537: PPUSH
4538: CALL_OW 1
4542: ST_TO_ADDR
// end ;
4543: LD_VAR 0 2
4547: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4548: LD_INT 0
4550: PPUSH
// if not id then
4551: LD_VAR 0 1
4555: NOT
4556: IFFALSE 4560
// exit ;
4558: GO 4576
// result := multi_points_conditions [ id ] ;
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_EXP 33
4569: PUSH
4570: LD_VAR 0 1
4574: ARRAY
4575: ST_TO_ADDR
// end ;
4576: LD_VAR 0 2
4580: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
// players := [ ] ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: EMPTY
4594: ST_TO_ADDR
// for i = 1 to 8 do
4595: LD_ADDR_VAR 0 4
4599: PUSH
4600: DOUBLE
4601: LD_INT 1
4603: DEC
4604: ST_TO_ADDR
4605: LD_INT 8
4607: PUSH
4608: FOR_TO
4609: IFFALSE 4670
// begin if i = side then
4611: LD_VAR 0 4
4615: PUSH
4616: LD_VAR 0 1
4620: EQUAL
4621: IFFALSE 4625
// continue ;
4623: GO 4608
// if multi_sides [ i ] and not multi_loosers [ i ] then
4625: LD_EXP 7
4629: PUSH
4630: LD_VAR 0 4
4634: ARRAY
4635: IFFALSE 4650
4637: PUSH
4638: LD_EXP 25
4642: PUSH
4643: LD_VAR 0 4
4647: ARRAY
4648: NOT
4649: AND
4650: IFFALSE 4668
// players := players ^ i ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: LD_VAR 0 3
4661: PUSH
4662: LD_VAR 0 4
4666: ADD
4667: ST_TO_ADDR
// end ;
4668: GO 4608
4670: POP
4671: POP
// if not players then
4672: LD_VAR 0 3
4676: NOT
4677: IFFALSE 4681
// exit ;
4679: GO 4948
// if players = 1 then
4681: LD_VAR 0 3
4685: PUSH
4686: LD_INT 1
4688: EQUAL
4689: IFFALSE 4750
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4691: LD_ADDR_VAR 0 4
4695: PUSH
4696: LD_INT 22
4698: PUSH
4699: LD_VAR 0 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 51
4710: PUSH
4711: EMPTY
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4746
// SetSide ( i , players [ 1 ] ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_VAR 0 3
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
4744: GO 4723
4746: POP
4747: POP
// end else
4748: GO 4948
// begin j := 1 ;
4750: LD_ADDR_VAR 0 5
4754: PUSH
4755: LD_INT 1
4757: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: LD_INT 22
4765: PUSH
4766: LD_VAR 0 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 2
4777: PUSH
4778: LD_INT 21
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 51
4790: PUSH
4791: EMPTY
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 21
4800: PUSH
4801: LD_INT 2
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PPUSH
4817: CALL_OW 69
4821: PUSH
4822: FOR_IN
4823: IFFALSE 4946
// begin SetSide ( i , players [ j ] ) ;
4825: LD_VAR 0 4
4829: PPUSH
4830: LD_VAR 0 3
4834: PUSH
4835: LD_VAR 0 5
4839: ARRAY
4840: PPUSH
4841: CALL_OW 235
// if IsDrivenBy ( i ) then
4845: LD_VAR 0 4
4849: PPUSH
4850: CALL_OW 311
4854: IFFALSE 4881
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4856: LD_VAR 0 4
4860: PPUSH
4861: CALL_OW 311
4865: PPUSH
4866: LD_VAR 0 3
4870: PUSH
4871: LD_VAR 0 5
4875: ARRAY
4876: PPUSH
4877: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4881: LD_VAR 0 4
4885: PPUSH
4886: CALL_OW 310
4890: PPUSH
4891: CALL_OW 247
4895: PUSH
4896: LD_INT 3
4898: EQUAL
4899: IFFALSE 4910
// ComExitBuilding ( i ) ;
4901: LD_VAR 0 4
4905: PPUSH
4906: CALL_OW 122
// j := j + 1 ;
4910: LD_ADDR_VAR 0 5
4914: PUSH
4915: LD_VAR 0 5
4919: PUSH
4920: LD_INT 1
4922: PLUS
4923: ST_TO_ADDR
// if j > players then
4924: LD_VAR 0 5
4928: PUSH
4929: LD_VAR 0 3
4933: GREATER
4934: IFFALSE 4944
// j := 1 ;
4936: LD_ADDR_VAR 0 5
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// end ;
4944: GO 4822
4946: POP
4947: POP
// end ; end ;
4948: LD_VAR 0 2
4952: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
4957: PPUSH
// i := 3 ;
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_INT 3
4965: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4966: LD_ADDR_VAR 0 3
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 120
4983: PUSH
4984: LD_INT 2
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 101
4993: PUSH
4994: LD_INT 8
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 27
5003: PUSH
5004: LD_INT 4
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5017: LD_INT 4
5019: PPUSH
5020: LD_INT 5
5022: PPUSH
5023: LD_VAR 0 3
5027: PUSH
5028: LD_VAR 0 2
5032: ARRAY
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PPUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 2
5047: ARRAY
5048: PUSH
5049: LD_INT 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 0
5055: PPUSH
5056: CALL_OW 58
// end ;
5060: LD_VAR 0 1
5064: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5065: LD_INT 0
5067: PPUSH
// if not side or side > 8 then
5068: LD_VAR 0 1
5072: NOT
5073: IFTRUE 5085
5075: PUSH
5076: LD_VAR 0 1
5080: PUSH
5081: LD_INT 8
5083: GREATER
5084: OR
5085: IFFALSE 5089
// exit ;
5087: GO 5106
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5089: LD_VAR 0 1
5093: PPUSH
5094: LD_INT 6
5096: PPUSH
5097: CALL 4548 0 1
5101: PPUSH
5102: CALL 4382 0 2
// end ;
5106: LD_VAR 0 2
5110: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5111: LD_INT 0
5113: PPUSH
// if not side or side > 8 then
5114: LD_VAR 0 1
5118: NOT
5119: IFTRUE 5131
5121: PUSH
5122: LD_VAR 0 1
5126: PUSH
5127: LD_INT 8
5129: GREATER
5130: OR
5131: IFFALSE 5135
// exit ;
5133: GO 5152
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_INT 4
5142: PPUSH
5143: CALL 4548 0 1
5147: PPUSH
5148: CALL 4382 0 2
// end ;
5152: LD_VAR 0 2
5156: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5157: LD_INT 0
5159: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5160: LD_VAR 0 1
5164: NOT
5165: IFTRUE 5177
5167: PUSH
5168: LD_VAR 0 1
5172: PUSH
5173: LD_INT 8
5175: GREATER
5176: OR
5177: IFTRUE 5205
5179: PUSH
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 36
5193: PUSH
5194: LD_INT 0
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: IN
5203: NOT
5204: OR
5205: IFFALSE 5209
// exit ;
5207: GO 5226
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5209: LD_VAR 0 1
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL 4548 0 1
5221: PPUSH
5222: CALL 4382 0 2
// end ;
5226: LD_VAR 0 3
5230: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5231: LD_INT 0
5233: PPUSH
5234: PPUSH
// if not un then
5235: LD_VAR 0 1
5239: NOT
5240: IFFALSE 5244
// exit ;
5242: GO 5290
// if not points then
5244: LD_VAR 0 3
5248: NOT
5249: IFFALSE 5266
// gained_points := Multiplayer_GetCondition ( 1 ) else
5251: LD_ADDR_VAR 0 5
5255: PUSH
5256: LD_INT 1
5258: PPUSH
5259: CALL 4548 0 1
5263: ST_TO_ADDR
5264: GO 5276
// gained_points := points ;
5266: LD_ADDR_VAR 0 5
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5276: LD_VAR 0 2
5280: PPUSH
5281: LD_VAR 0 5
5285: PPUSH
5286: CALL 4382 0 2
5290: LD_VAR 0 4
5294: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5295: LD_INT 0
5297: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5298: LD_VAR 0 1
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: CALL 4548 0 1
5310: PPUSH
5311: CALL 4382 0 2
// end ; end_of_file
5315: LD_VAR 0 2
5319: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5320: LD_INT 0
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// side_bot := side ;
5332: LD_ADDR_EXP 3
5336: PUSH
5337: LD_VAR 0 1
5341: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5342: LD_ADDR_VAR 0 10
5346: PUSH
5347: LD_INT 11
5349: PUSH
5350: LD_INT 4
5352: PUSH
5353: LD_INT 3
5355: PUSH
5356: LD_INT 5
5358: PUSH
5359: LD_INT 66
5361: PUSH
5362: LD_INT 67
5364: PUSH
5365: LD_INT 53
5367: PUSH
5368: LD_INT 18
5370: PUSH
5371: LD_INT 40
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 72
5379: PUSH
5380: LD_INT 55
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: ST_TO_ADDR
// for i in techs do
5397: LD_ADDR_VAR 0 3
5401: PUSH
5402: LD_VAR 0 10
5406: PUSH
5407: FOR_IN
5408: IFFALSE 5429
// SetTech ( i , side , state_researched ) ;
5410: LD_VAR 0 3
5414: PPUSH
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_INT 2
5422: PPUSH
5423: CALL_OW 322
5427: GO 5407
5429: POP
5430: POP
// InitScriptBases ;
5431: CALL 7372 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5435: LD_ADDR_VAR 0 8
5439: PUSH
5440: LD_INT 5
5442: PUSH
5443: LD_INT 7
5445: PUSH
5446: LD_INT 10
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: ST_TO_ADDR
// uc_side := side ;
5460: LD_ADDR_OWVAR 20
5464: PUSH
5465: LD_VAR 0 1
5469: ST_TO_ADDR
// uc_nation := 2 ;
5470: LD_ADDR_OWVAR 21
5474: PUSH
5475: LD_INT 2
5477: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5478: LD_ADDR_EXP 36
5482: PUSH
5483: LD_INT 94
5485: PPUSH
5486: LD_INT 35
5488: PPUSH
5489: LD_STRING dammam
5491: PPUSH
5492: LD_VAR 0 8
5496: PPUSH
5497: LD_INT 10000
5499: PUSH
5500: LD_INT 1000
5502: PUSH
5503: LD_INT 900
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: PPUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 4
5516: PUSH
5517: LD_INT 1
5519: NEG
5520: PUSH
5521: LD_INT 4
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 26000 0 6
5534: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5535: LD_ADDR_EXP 37
5539: PUSH
5540: LD_INT 122
5542: PPUSH
5543: LD_INT 38
5545: PPUSH
5546: LD_STRING 
5548: PPUSH
5549: LD_VAR 0 8
5553: PPUSH
5554: LD_INT 500
5556: PUSH
5557: LD_INT 130
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: PPUSH
5568: LD_INT 16
5570: PUSH
5571: LD_INT 4
5573: PUSH
5574: LD_INT 3
5576: PUSH
5577: LD_INT 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL 26000 0 6
5590: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5591: LD_ADDR_EXP 34
5595: PUSH
5596: LD_INT 45
5598: PPUSH
5599: LD_INT 34
5601: PPUSH
5602: LD_STRING jeddah
5604: PPUSH
5605: LD_VAR 0 8
5609: PPUSH
5610: LD_INT 2100
5612: PUSH
5613: LD_INT 300
5615: PUSH
5616: LD_INT 10
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: PPUSH
5624: LD_INT 12
5626: PUSH
5627: LD_INT 4
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL 26000 0 6
5646: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5647: LD_ADDR_EXP 35
5651: PUSH
5652: LD_INT 7
5654: PPUSH
5655: LD_INT 33
5657: PPUSH
5658: LD_STRING riyadh
5660: PPUSH
5661: LD_VAR 0 8
5665: PPUSH
5666: LD_INT 500
5668: PUSH
5669: LD_INT 60
5671: PUSH
5672: LD_INT 0
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_INT 8
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL 26000 0 6
5702: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5703: LD_ADDR_EXP 38
5707: PUSH
5708: LD_INT 69
5710: PPUSH
5711: LD_INT 36
5713: PPUSH
5714: LD_STRING 
5716: PPUSH
5717: LD_VAR 0 8
5721: PPUSH
5722: LD_INT 500
5724: PUSH
5725: LD_INT 50
5727: PUSH
5728: LD_INT 0
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_INT 11
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 4
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL 26000 0 6
5758: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5759: LD_ADDR_OWVAR 37
5763: PUSH
5764: LD_INT 14
5766: ST_TO_ADDR
// vc_engine := engine_siberite ;
5767: LD_ADDR_OWVAR 39
5771: PUSH
5772: LD_INT 3
5774: ST_TO_ADDR
// vc_control := control_manual ;
5775: LD_ADDR_OWVAR 38
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5783: LD_ADDR_OWVAR 40
5787: PUSH
5788: LD_INT 31
5790: ST_TO_ADDR
// for i = 1 to 4 do
5791: LD_ADDR_VAR 0 3
5795: PUSH
5796: DOUBLE
5797: LD_INT 1
5799: DEC
5800: ST_TO_ADDR
5801: LD_INT 4
5803: PUSH
5804: FOR_TO
5805: IFFALSE 5954
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5807: LD_ADDR_VAR 0 5
5811: PUSH
5812: LD_INT 156
5814: PUSH
5815: LD_INT 15
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 12
5824: PUSH
5825: LD_INT 7
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 2
5843: MOD
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: ARRAY
5849: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5850: LD_INT 0
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_VAR 0 8
5860: PPUSH
5861: CALL_OW 380
// un := CreateVehicle ;
5865: LD_ADDR_VAR 0 6
5869: PUSH
5870: CALL_OW 45
5874: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5875: LD_VAR 0 6
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: LD_INT 5
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5895: LD_VAR 0 6
5899: PPUSH
5900: LD_VAR 0 5
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: LD_VAR 0 5
5913: PUSH
5914: LD_INT 2
5916: ARRAY
5917: PPUSH
5918: LD_INT 6
5920: PPUSH
5921: LD_INT 0
5923: PPUSH
5924: CALL_OW 50
// un2 := CreateHuman ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: CALL_OW 44
5937: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5938: LD_VAR 0 7
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL_OW 52
// end ;
5952: GO 5804
5954: POP
5955: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: LD_INT 22
5963: PUSH
5964: LD_EXP 3
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 30
5975: PUSH
5976: LD_INT 31
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 58
5985: PUSH
5986: EMPTY
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 69
5998: PUSH
5999: FOR_IN
6000: IFFALSE 6112
// begin d := GetDir ( i ) ;
6002: LD_ADDR_VAR 0 4
6006: PUSH
6007: LD_VAR 0 3
6011: PPUSH
6012: CALL_OW 254
6016: ST_TO_ADDR
// if d < 3 then
6017: LD_VAR 0 4
6021: PUSH
6022: LD_INT 3
6024: LESS
6025: IFFALSE 6043
// d := d + 3 else
6027: LD_ADDR_VAR 0 4
6031: PUSH
6032: LD_VAR 0 4
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
6041: GO 6057
// d := d - 3 ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 4
6052: PUSH
6053: LD_INT 3
6055: MINUS
6056: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6057: LD_INT 0
6059: PPUSH
6060: LD_INT 8
6062: PPUSH
6063: LD_VAR 0 8
6067: PPUSH
6068: CALL_OW 380
// un := CreateHuman ;
6072: LD_ADDR_VAR 0 6
6076: PUSH
6077: CALL_OW 44
6081: ST_TO_ADDR
// SetDir ( un , d ) ;
6082: LD_VAR 0 6
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6096: LD_VAR 0 6
6100: PPUSH
6101: LD_VAR 0 3
6105: PPUSH
6106: CALL_OW 52
// end ;
6110: GO 5999
6112: POP
6113: POP
// ar_force_tmp := [ ] ;
6114: LD_ADDR_EXP 39
6118: PUSH
6119: EMPTY
6120: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6121: LD_INT 1
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6136: LD_ADDR_OWVAR 33
6140: PUSH
6141: LD_STRING SecondCharsGal
6143: ST_TO_ADDR
// hc_face_number := 4 ;
6144: LD_ADDR_OWVAR 34
6148: PUSH
6149: LD_INT 4
6151: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6152: LD_ADDR_EXP 39
6156: PUSH
6157: LD_EXP 39
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: CALL_OW 44
6169: PPUSH
6170: CALL_OW 1
6174: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6175: LD_INT 2
6177: PPUSH
6178: LD_INT 4
6180: PPUSH
6181: LD_VAR 0 8
6185: PPUSH
6186: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6190: LD_ADDR_OWVAR 33
6194: PUSH
6195: LD_STRING SecondCharsGal
6197: ST_TO_ADDR
// hc_face_number := 15 ;
6198: LD_ADDR_OWVAR 34
6202: PUSH
6203: LD_INT 15
6205: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6206: LD_ADDR_EXP 39
6210: PUSH
6211: LD_EXP 39
6215: PPUSH
6216: LD_INT 2
6218: PPUSH
6219: CALL_OW 44
6223: PPUSH
6224: CALL_OW 1
6228: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6229: LD_INT 2
6231: PPUSH
6232: LD_INT 4
6234: PPUSH
6235: LD_VAR 0 8
6239: PPUSH
6240: CALL_OW 380
// hc_gallery :=  ;
6244: LD_ADDR_OWVAR 33
6248: PUSH
6249: LD_STRING 
6251: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6252: LD_ADDR_EXP 39
6256: PUSH
6257: LD_EXP 39
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: CALL_OW 44
6269: PPUSH
6270: CALL_OW 1
6274: ST_TO_ADDR
// hc_sex := sex_male ;
6275: LD_ADDR_OWVAR 27
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// hc_class = 11 ;
6283: LD_ADDR_OWVAR 28
6287: PUSH
6288: LD_INT 11
6290: ST_TO_ADDR
// hc_gallery = sandar ;
6291: LD_ADDR_OWVAR 33
6295: PUSH
6296: LD_STRING sandar
6298: ST_TO_ADDR
// hc_face_number = 33 ;
6299: LD_ADDR_OWVAR 34
6303: PUSH
6304: LD_INT 33
6306: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6307: LD_ADDR_OWVAR 26
6311: PUSH
6312: LD_STRING Thabit Muhair Saliba
6314: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6315: LD_ADDR_OWVAR 31
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: LD_INT 5
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
// Saliba := CreateHuman ;
6338: LD_ADDR_EXP 41
6342: PUSH
6343: CALL_OW 44
6347: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6348: LD_EXP 41
6352: PPUSH
6353: LD_INT 7
6355: PPUSH
6356: CALL_OW 52
// hc_name := Dietrich Gensher ;
6360: LD_ADDR_OWVAR 26
6364: PUSH
6365: LD_STRING Dietrich Gensher
6367: ST_TO_ADDR
// hc_class := 1 ;
6368: LD_ADDR_OWVAR 28
6372: PUSH
6373: LD_INT 1
6375: ST_TO_ADDR
// hc_gallery := sandar ;
6376: LD_ADDR_OWVAR 33
6380: PUSH
6381: LD_STRING sandar
6383: ST_TO_ADDR
// hc_face_number := 4 ;
6384: LD_ADDR_OWVAR 34
6388: PUSH
6389: LD_INT 4
6391: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6392: LD_ADDR_OWVAR 31
6396: PUSH
6397: LD_INT 10
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: LD_INT 4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// Gensher := CreateHuman ;
6415: LD_ADDR_EXP 42
6419: PUSH
6420: CALL_OW 44
6424: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6425: LD_EXP 42
6429: PPUSH
6430: LD_INT 45
6432: PPUSH
6433: CALL_OW 52
// hc_name := Abdul Shariff ;
6437: LD_ADDR_OWVAR 26
6441: PUSH
6442: LD_STRING Abdul Shariff
6444: ST_TO_ADDR
// hc_class := 11 ;
6445: LD_ADDR_OWVAR 28
6449: PUSH
6450: LD_INT 11
6452: ST_TO_ADDR
// hc_gallery := sandar ;
6453: LD_ADDR_OWVAR 33
6457: PUSH
6458: LD_STRING sandar
6460: ST_TO_ADDR
// hc_face_number := 5 ;
6461: LD_ADDR_OWVAR 34
6465: PUSH
6466: LD_INT 5
6468: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6469: LD_ADDR_OWVAR 31
6473: PUSH
6474: LD_INT 6
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: LD_INT 3
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: ST_TO_ADDR
// Shariff := CreateHuman ;
6492: LD_ADDR_EXP 43
6496: PUSH
6497: CALL_OW 44
6501: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6502: LD_EXP 43
6506: PPUSH
6507: LD_INT 94
6509: PPUSH
6510: CALL_OW 52
// InitHc ;
6514: CALL_OW 19
// for d := 1 to 5 do
6518: LD_ADDR_VAR 0 4
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 5
6530: PUSH
6531: FOR_TO
6532: IFFALSE 7016
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6534: LD_ADDR_VAR 0 11
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 4
6548: ARRAY
6549: PPUSH
6550: LD_INT 30
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PPUSH
6560: CALL_OW 70
6564: ST_TO_ADDR
// if fac then
6565: LD_VAR 0 11
6569: IFFALSE 6602
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6571: LD_ADDR_EXP 50
6575: PUSH
6576: LD_EXP 50
6580: PPUSH
6581: LD_VAR 0 4
6585: PPUSH
6586: LD_VAR 0 11
6590: PUSH
6591: LD_INT 1
6593: ARRAY
6594: PPUSH
6595: CALL_OW 1
6599: ST_TO_ADDR
6600: GO 6625
// arFactories := Replace ( arFactories , d , 0 ) ;
6602: LD_ADDR_EXP 50
6606: PUSH
6607: LD_EXP 50
6611: PPUSH
6612: LD_VAR 0 4
6616: PPUSH
6617: LD_INT 0
6619: PPUSH
6620: CALL_OW 1
6624: ST_TO_ADDR
// for i := 1 to 2 do
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: DOUBLE
6631: LD_INT 1
6633: DEC
6634: ST_TO_ADDR
6635: LD_INT 2
6637: PUSH
6638: FOR_TO
6639: IFFALSE 6782
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6641: LD_INT 14
6643: PPUSH
6644: LD_INT 3
6646: PPUSH
6647: LD_INT 2
6649: PPUSH
6650: LD_INT 88
6652: PPUSH
6653: LD_INT 100
6655: PPUSH
6656: CALL 22163 0 5
// un := CreateVehicle ;
6660: LD_ADDR_VAR 0 6
6664: PUSH
6665: CALL_OW 45
6669: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6670: LD_ADDR_EXP 47
6674: PUSH
6675: LD_EXP 47
6679: PPUSH
6680: LD_EXP 47
6684: PUSH
6685: LD_INT 1
6687: PLUS
6688: PPUSH
6689: LD_VAR 0 4
6693: PUSH
6694: LD_VAR 0 6
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 1
6707: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6708: LD_VAR 0 6
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6720: LD_VAR 0 6
6724: PPUSH
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 5
6730: PPUSH
6731: CALL_OW 12
6735: PPUSH
6736: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6740: LD_VAR 0 6
6744: PPUSH
6745: LD_INT 24
6747: PUSH
6748: LD_INT 20
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 46
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: LD_VAR 0 4
6771: ARRAY
6772: PPUSH
6773: LD_INT 0
6775: PPUSH
6776: CALL_OW 49
// end ;
6780: GO 6638
6782: POP
6783: POP
// for i := 1 to 4 do
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_INT 4
6796: PUSH
6797: FOR_TO
6798: IFFALSE 7012
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6800: LD_INT 14
6802: PPUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 1
6819: PPUSH
6820: LD_INT 3
6822: PPUSH
6823: CALL_OW 12
6827: ARRAY
6828: PPUSH
6829: LD_INT 1
6831: PUSH
6832: LD_INT 5
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 1
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: CALL_OW 12
6849: ARRAY
6850: PPUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 27
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 28
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: LD_VAR 0 3
6873: PUSH
6874: LD_INT 4
6876: MOD
6877: PUSH
6878: LD_INT 1
6880: PLUS
6881: ARRAY
6882: PPUSH
6883: LD_INT 100
6885: PPUSH
6886: CALL 22163 0 5
// un := CreateVehicle ;
6890: LD_ADDR_VAR 0 6
6894: PUSH
6895: CALL_OW 45
6899: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6900: LD_ADDR_EXP 47
6904: PUSH
6905: LD_EXP 47
6909: PPUSH
6910: LD_EXP 47
6914: PUSH
6915: LD_INT 1
6917: PLUS
6918: PPUSH
6919: LD_VAR 0 4
6923: PUSH
6924: LD_VAR 0 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 1
6937: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6938: LD_VAR 0 6
6942: PPUSH
6943: LD_INT 0
6945: PPUSH
6946: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6950: LD_VAR 0 6
6954: PPUSH
6955: LD_INT 0
6957: PPUSH
6958: LD_INT 5
6960: PPUSH
6961: CALL_OW 12
6965: PPUSH
6966: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6970: LD_VAR 0 6
6974: PPUSH
6975: LD_INT 24
6977: PUSH
6978: LD_INT 20
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 46
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_VAR 0 4
7001: ARRAY
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6797
7012: POP
7013: POP
// end ;
7014: GO 6531
7016: POP
7017: POP
// InitHc ;
7018: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
7022: LD_ADDR_VAR 0 9
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 2
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: ST_TO_ADDR
// if tmp and side <> 2 then
7042: LD_VAR 0 9
7046: IFFALSE 7058
7048: PUSH
7049: LD_VAR 0 1
7053: PUSH
7054: LD_INT 2
7056: NONEQUAL
7057: AND
7058: IFFALSE 7091
// begin for i in tmp do
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7089
// SetSide ( i , side ) ;
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_VAR 0 1
7082: PPUSH
7083: CALL_OW 235
7087: GO 7070
7089: POP
7090: POP
// end ; end ;
7091: LD_VAR 0 2
7095: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
7096: LD_INT 0
7098: PPUSH
7099: PPUSH
7100: PPUSH
7101: PPUSH
// tmp := AreaToList ( area , 0 ) ;
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: LD_VAR 0 1
7111: PPUSH
7112: LD_INT 0
7114: PPUSH
7115: CALL_OW 517
7119: ST_TO_ADDR
// if not tmp then
7120: LD_VAR 0 5
7124: NOT
7125: IFFALSE 7129
// exit ;
7127: GO 7367
// for i := 1 to n do
7129: LD_ADDR_VAR 0 4
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_VAR 0 2
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7365
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7147: LD_ADDR_VAR 0 6
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 5
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: CALL_OW 12
7168: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7169: LD_VAR 0 5
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PUSH
7178: LD_VAR 0 6
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 5
7188: PUSH
7189: LD_INT 2
7191: ARRAY
7192: PUSH
7193: LD_VAR 0 6
7197: ARRAY
7198: PPUSH
7199: LD_EXP 3
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7211: LD_ADDR_EXP 53
7215: PUSH
7216: LD_EXP 53
7220: PPUSH
7221: LD_EXP 53
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: PPUSH
7230: LD_VAR 0 5
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PUSH
7239: LD_VAR 0 6
7243: ARRAY
7244: PPUSH
7245: CALL_OW 2
7249: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7250: LD_ADDR_EXP 53
7254: PUSH
7255: LD_EXP 53
7259: PPUSH
7260: LD_EXP 53
7264: PUSH
7265: LD_INT 1
7267: PLUS
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 2
7276: ARRAY
7277: PUSH
7278: LD_VAR 0 6
7282: ARRAY
7283: PPUSH
7284: CALL_OW 2
7288: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7289: LD_ADDR_VAR 0 5
7293: PUSH
7294: LD_VAR 0 5
7298: PPUSH
7299: LD_INT 1
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 1
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 6
7315: PPUSH
7316: CALL_OW 3
7320: PPUSH
7321: CALL_OW 1
7325: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: LD_VAR 0 5
7335: PPUSH
7336: LD_INT 2
7338: PPUSH
7339: LD_VAR 0 5
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: LD_VAR 0 6
7352: PPUSH
7353: CALL_OW 3
7357: PPUSH
7358: CALL_OW 1
7362: ST_TO_ADDR
// end ;
7363: GO 7144
7365: POP
7366: POP
// end ;
7367: LD_VAR 0 3
7371: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7372: LD_INT 0
7374: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7375: LD_ADDR_EXP 44
7379: PUSH
7380: LD_EXP 3
7384: PPUSH
7385: LD_INT 2
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: CALL 17290 0 3
7395: ST_TO_ADDR
// arConstructList := [ ] ;
7396: LD_ADDR_EXP 45
7400: PUSH
7401: EMPTY
7402: ST_TO_ADDR
// arBuildings := [ ] ;
7403: LD_ADDR_EXP 46
7407: PUSH
7408: EMPTY
7409: ST_TO_ADDR
// arVehicles := [ ] ;
7410: LD_ADDR_EXP 47
7414: PUSH
7415: EMPTY
7416: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7417: LD_ADDR_EXP 48
7421: PUSH
7422: EMPTY
7423: ST_TO_ADDR
// arDrivers := [ ] ;
7424: LD_ADDR_EXP 49
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// arFactories := [ ] ;
7431: LD_ADDR_EXP 50
7435: PUSH
7436: EMPTY
7437: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7438: LD_ADDR_EXP 51
7442: PUSH
7443: LD_INT 33
7445: PUSH
7446: LD_INT 35
7448: PUSH
7449: LD_INT 34
7451: PUSH
7452: LD_INT 36
7454: PUSH
7455: LD_INT 38
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7465: LD_ADDR_EXP 52
7469: PUSH
7470: LD_INT 6
7472: PUSH
7473: LD_INT 6
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: LD_INT 6
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: ST_TO_ADDR
// arMinesList := [ ] ;
7492: LD_ADDR_EXP 53
7496: PUSH
7497: EMPTY
7498: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 7
7504: PUSH
7505: LD_INT 9
7507: PUSH
7508: LD_INT 11
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: LD_OWVAR 67
7520: ARRAY
7521: PPUSH
7522: CALL 7096 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7526: LD_INT 3
7528: PPUSH
7529: LD_INT 7
7531: PUSH
7532: LD_INT 9
7534: PUSH
7535: LD_INT 9
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: LD_OWVAR 67
7547: ARRAY
7548: PPUSH
7549: CALL 7096 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7553: LD_INT 2
7555: PPUSH
7556: LD_INT 6
7558: PUSH
7559: LD_INT 8
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_OWVAR 67
7574: ARRAY
7575: PPUSH
7576: CALL 7096 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7580: LD_INT 39
7582: PPUSH
7583: LD_INT 5
7585: PUSH
7586: LD_INT 7
7588: PUSH
7589: LD_INT 9
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_OWVAR 67
7601: ARRAY
7602: PPUSH
7603: CALL 7096 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7607: LD_INT 25
7609: PPUSH
7610: LD_INT 4
7612: PUSH
7613: LD_INT 6
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: LD_OWVAR 67
7628: ARRAY
7629: PPUSH
7630: CALL 7096 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7634: LD_INT 41
7636: PPUSH
7637: LD_INT 12
7639: PUSH
7640: LD_INT 14
7642: PUSH
7643: LD_INT 16
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: LD_OWVAR 67
7655: ARRAY
7656: PPUSH
7657: CALL 7096 0 2
// end ;
7661: LD_VAR 0 1
7665: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7666: LD_INT 0
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
// enable ;
7695: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7696: LD_ADDR_VAR 0 10
7700: PUSH
7701: LD_INT 81
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: ST_TO_ADDR
// if tmp then
7718: LD_VAR 0 10
7722: IFFALSE 7743
// enemySide := GetSide ( tmp [ 1 ] ) ;
7724: LD_ADDR_VAR 0 34
7728: PUSH
7729: LD_VAR 0 10
7733: PUSH
7734: LD_INT 1
7736: ARRAY
7737: PPUSH
7738: CALL_OW 255
7742: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7743: LD_ADDR_VAR 0 22
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 81
7755: PUSH
7756: LD_VAR 0 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 70
7769: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7770: LD_ADDR_VAR 0 23
7774: PUSH
7775: LD_VAR 0 4
7779: PPUSH
7780: LD_INT 81
7782: PUSH
7783: LD_VAR 0 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7797: LD_ADDR_VAR 0 26
7801: PUSH
7802: LD_EXP 47
7806: PPUSH
7807: LD_INT 1
7809: PPUSH
7810: LD_VAR 0 2
7814: PPUSH
7815: LD_INT 2
7817: PPUSH
7818: CALL 60203 0 4
7822: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7823: LD_ADDR_VAR 0 32
7827: PUSH
7828: LD_VAR 0 3
7832: PPUSH
7833: LD_INT 22
7835: PUSH
7836: LD_VAR 0 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 2
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 0
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 30
7860: PUSH
7861: LD_INT 1
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 70
7881: ST_TO_ADDR
// if depot then
7882: LD_VAR 0 32
7886: IFFALSE 7902
// depot := depot [ 1 ] ;
7888: LD_ADDR_VAR 0 32
7892: PUSH
7893: LD_VAR 0 32
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: ST_TO_ADDR
// if arTech then
7902: LD_EXP 44
7906: IFFALSE 8065
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7908: LD_ADDR_VAR 0 12
7912: PUSH
7913: LD_VAR 0 3
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_VAR 0 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 50
7932: PUSH
7933: EMPTY
7934: LIST
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 6
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 30
7951: PUSH
7952: LD_INT 7
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 30
7961: PUSH
7962: LD_INT 8
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 70
7984: ST_TO_ADDR
// if lab then
7985: LD_VAR 0 12
7989: IFFALSE 8065
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7991: LD_VAR 0 12
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PPUSH
8000: CALL_OW 461
8004: PUSH
8005: LD_INT 2
8007: EQUAL
8008: IFFALSE 8065
// begin for i in arTech do
8010: LD_ADDR_VAR 0 9
8014: PUSH
8015: LD_EXP 44
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8063
// if CanBeResearched ( lab [ 1 ] , i ) then
8023: LD_VAR 0 12
8027: PUSH
8028: LD_INT 1
8030: ARRAY
8031: PPUSH
8032: LD_VAR 0 9
8036: PPUSH
8037: CALL_OW 430
8041: IFFALSE 8061
// begin AddComResearch ( lab [ 1 ] , i ) ;
8043: LD_VAR 0 12
8047: PUSH
8048: LD_INT 1
8050: ARRAY
8051: PPUSH
8052: LD_VAR 0 9
8056: PPUSH
8057: CALL_OW 184
// end ;
8061: GO 8020
8063: POP
8064: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
8065: LD_ADDR_VAR 0 29
8069: PUSH
8070: LD_VAR 0 3
8074: PPUSH
8075: LD_INT 22
8077: PUSH
8078: LD_VAR 0 1
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 50
8099: PUSH
8100: EMPTY
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 70
8112: ST_TO_ADDR
// if fac then
8113: LD_VAR 0 29
8117: IFFALSE 8506
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8119: LD_VAR 0 29
8123: PUSH
8124: LD_INT 1
8126: ARRAY
8127: PPUSH
8128: CALL_OW 461
8132: PUSH
8133: LD_INT 2
8135: EQUAL
8136: IFFALSE 8506
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8138: LD_ADDR_VAR 0 30
8142: PUSH
8143: LD_VAR 0 3
8147: PPUSH
8148: LD_INT 2
8150: PUSH
8151: LD_INT 30
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 30
8163: PUSH
8164: LD_INT 33
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 35
8178: PUSH
8179: LD_INT 0
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 70
8194: ST_TO_ADDR
// if emptyTowers then
8195: LD_VAR 0 30
8199: IFFALSE 8249
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8201: LD_ADDR_VAR 0 31
8205: PUSH
8206: LD_VAR 0 30
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL 27692 0 2
8224: ST_TO_ADDR
// if weapon then
8225: LD_VAR 0 31
8229: IFFALSE 8249
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8231: LD_VAR 0 30
8235: PUSH
8236: LD_INT 1
8238: ARRAY
8239: PPUSH
8240: LD_VAR 0 31
8244: PPUSH
8245: CALL_OW 148
// end ; if arConstructList then
8249: LD_EXP 45
8253: IFFALSE 8506
// for i := 1 to Count ( arConstructList ) do
8255: LD_ADDR_VAR 0 9
8259: PUSH
8260: DOUBLE
8261: LD_INT 1
8263: DEC
8264: ST_TO_ADDR
8265: LD_EXP 45
8269: PPUSH
8270: CALL 19367 0 1
8274: PUSH
8275: FOR_TO
8276: IFFALSE 8504
// begin if arConstructList [ i ] [ 1 ] = base then
8278: LD_EXP 45
8282: PUSH
8283: LD_VAR 0 9
8287: ARRAY
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PUSH
8293: LD_VAR 0 2
8297: EQUAL
8298: IFFALSE 8502
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8300: LD_VAR 0 29
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_EXP 45
8313: PUSH
8314: LD_VAR 0 9
8318: ARRAY
8319: PUSH
8320: LD_INT 2
8322: ARRAY
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: LD_EXP 45
8332: PUSH
8333: LD_VAR 0 9
8337: ARRAY
8338: PUSH
8339: LD_INT 2
8341: ARRAY
8342: PUSH
8343: LD_INT 2
8345: ARRAY
8346: PPUSH
8347: LD_EXP 45
8351: PUSH
8352: LD_VAR 0 9
8356: ARRAY
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PUSH
8362: LD_INT 3
8364: ARRAY
8365: PPUSH
8366: LD_EXP 45
8370: PUSH
8371: LD_VAR 0 9
8375: ARRAY
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PUSH
8381: LD_INT 4
8383: ARRAY
8384: PPUSH
8385: CALL_OW 448
8389: IFFALSE 8502
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8391: LD_VAR 0 29
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_EXP 45
8404: PUSH
8405: LD_VAR 0 9
8409: ARRAY
8410: PUSH
8411: LD_INT 2
8413: ARRAY
8414: PUSH
8415: LD_INT 1
8417: ARRAY
8418: PPUSH
8419: LD_EXP 45
8423: PUSH
8424: LD_VAR 0 9
8428: ARRAY
8429: PUSH
8430: LD_INT 2
8432: ARRAY
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PPUSH
8438: LD_EXP 45
8442: PUSH
8443: LD_VAR 0 9
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PPUSH
8457: LD_EXP 45
8461: PUSH
8462: LD_VAR 0 9
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: PUSH
8472: LD_INT 4
8474: ARRAY
8475: PPUSH
8476: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8480: LD_ADDR_EXP 45
8484: PUSH
8485: LD_EXP 45
8489: PPUSH
8490: LD_VAR 0 9
8494: PPUSH
8495: CALL_OW 3
8499: ST_TO_ADDR
// break ;
8500: GO 8504
// end ; end ;
8502: GO 8275
8504: POP
8505: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8506: LD_ADDR_VAR 0 10
8510: PUSH
8511: LD_VAR 0 3
8515: PPUSH
8516: LD_INT 21
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 57
8531: PUSH
8532: EMPTY
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 1000
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 70
8565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8566: LD_ADDR_VAR 0 17
8570: PUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: CALL_OW 435
8580: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8581: LD_ADDR_VAR 0 14
8585: PUSH
8586: LD_VAR 0 5
8590: PPUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 50
8603: PUSH
8604: EMPTY
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 72
8615: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8616: LD_VAR 0 14
8620: PPUSH
8621: LD_INT 3
8623: PUSH
8624: LD_INT 120
8626: PUSH
8627: LD_INT 7
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 3
8640: PUSH
8641: LD_INT 54
8643: PUSH
8644: EMPTY
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: IFFALSE 8678
8661: PUSH
8662: LD_EXP 50
8666: PUSH
8667: LD_VAR 0 2
8671: ARRAY
8672: PPUSH
8673: CALL_OW 302
8677: AND
8678: IFFALSE 8739
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8680: LD_VAR 0 14
8684: PPUSH
8685: LD_INT 3
8687: PUSH
8688: LD_INT 120
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 54
8707: PUSH
8708: EMPTY
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 72
8723: PPUSH
8724: LD_EXP 50
8728: PUSH
8729: LD_VAR 0 2
8733: ARRAY
8734: PPUSH
8735: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8739: LD_ADDR_VAR 0 18
8743: PUSH
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 4
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 50
8761: PUSH
8762: EMPTY
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 72
8773: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8774: LD_ADDR_VAR 0 12
8778: PUSH
8779: LD_VAR 0 3
8783: PPUSH
8784: LD_INT 2
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 6
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 30
8799: PUSH
8800: LD_INT 7
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 8
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 70
8827: ST_TO_ADDR
// if sci then
8828: LD_VAR 0 18
8832: IFFALSE 8993
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8834: LD_ADDR_VAR 0 20
8838: PUSH
8839: LD_VAR 0 5
8843: PPUSH
8844: LD_INT 95
8846: PUSH
8847: LD_VAR 0 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 120
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 72
8874: ST_TO_ADDR
// if hurtUnits then
8875: LD_VAR 0 20
8879: IFFALSE 8940
// begin for i in sci do
8881: LD_ADDR_VAR 0 9
8885: PUSH
8886: LD_VAR 0 18
8890: PUSH
8891: FOR_IN
8892: IFFALSE 8936
// if IsInUnit ( i ) then
8894: LD_VAR 0 9
8898: PPUSH
8899: CALL_OW 310
8903: IFFALSE 8916
// ComExitBuilding ( i ) else
8905: LD_VAR 0 9
8909: PPUSH
8910: CALL_OW 122
8914: GO 8934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8916: LD_VAR 0 9
8920: PPUSH
8921: LD_VAR 0 20
8925: PUSH
8926: LD_INT 1
8928: ARRAY
8929: PPUSH
8930: CALL_OW 128
8934: GO 8891
8936: POP
8937: POP
// end else
8938: GO 8993
// if lab then
8940: LD_VAR 0 12
8944: IFFALSE 8993
// begin for i in sci do
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_VAR 0 18
8955: PUSH
8956: FOR_IN
8957: IFFALSE 8991
// if not IsInUnit ( i ) then
8959: LD_VAR 0 9
8963: PPUSH
8964: CALL_OW 310
8968: NOT
8969: IFFALSE 8989
// ComEnterUnit ( i , lab [ 1 ] ) ;
8971: LD_VAR 0 9
8975: PPUSH
8976: LD_VAR 0 12
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: PPUSH
8985: CALL_OW 120
8989: GO 8956
8991: POP
8992: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8993: LD_ADDR_VAR 0 13
8997: PUSH
8998: LD_VAR 0 5
9002: PPUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 2
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 72
9017: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
9018: LD_ADDR_VAR 0 33
9022: PUSH
9023: LD_EXP 46
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 2
9038: PPUSH
9039: CALL 60203 0 4
9043: ST_TO_ADDR
// if eng then
9044: LD_VAR 0 13
9048: IFFALSE 9896
// begin for i in eng do
9050: LD_ADDR_VAR 0 9
9054: PUSH
9055: LD_VAR 0 13
9059: PUSH
9060: FOR_IN
9061: IFFALSE 9894
// begin tag := GetTag ( i ) ;
9063: LD_ADDR_VAR 0 15
9067: PUSH
9068: LD_VAR 0 9
9072: PPUSH
9073: CALL_OW 110
9077: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
9078: LD_VAR 0 9
9082: PPUSH
9083: LD_VAR 0 4
9087: PPUSH
9088: CALL_OW 308
9092: IFFALSE 9123
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9094: LD_VAR 0 9
9098: PPUSH
9099: LD_VAR 0 7
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PPUSH
9108: LD_VAR 0 7
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PPUSH
9117: CALL_OW 111
// continue ;
9121: GO 9060
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9123: LD_VAR 0 9
9127: PPUSH
9128: CALL_OW 256
9132: PUSH
9133: LD_INT 800
9135: LESS
9136: IFFALSE 9148
9138: PUSH
9139: LD_VAR 0 15
9143: PUSH
9144: LD_INT 1
9146: NONEQUAL
9147: AND
9148: IFFALSE 9198
// begin SetTag ( i , tHeal ) ;
9150: LD_VAR 0 9
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9162: LD_VAR 0 9
9166: PPUSH
9167: LD_VAR 0 6
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: PPUSH
9176: LD_VAR 0 6
9180: PUSH
9181: LD_INT 2
9183: ARRAY
9184: PPUSH
9185: CALL_OW 111
// AddComHold ( i ) ;
9189: LD_VAR 0 9
9193: PPUSH
9194: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9198: LD_VAR 0 15
9202: PUSH
9203: LD_INT 1
9205: EQUAL
9206: IFFALSE 9223
9208: PUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 256
9218: PUSH
9219: LD_INT 1000
9221: EQUAL
9222: AND
9223: IFFALSE 9237
// SetTag ( i , 0 ) ;
9225: LD_VAR 0 9
9229: PPUSH
9230: LD_INT 0
9232: PPUSH
9233: CALL_OW 109
// if not tag then
9237: LD_VAR 0 15
9241: NOT
9242: IFFALSE 9413
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9244: LD_ADDR_VAR 0 11
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 57
9256: PUSH
9257: EMPTY
9258: LIST
9259: PPUSH
9260: CALL_OW 70
9264: ST_TO_ADDR
// if undone then
9265: LD_VAR 0 11
9269: IFFALSE 9291
// begin ComComplete ( i , undone [ 1 ] ) ;
9271: LD_VAR 0 9
9275: PPUSH
9276: LD_VAR 0 11
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: PPUSH
9285: CALL 25537 0 2
// continue ;
9289: GO 9060
// end ; if cr or tmp or buildingsToBuild then
9291: LD_VAR 0 17
9295: IFTRUE 9303
9297: PUSH
9298: LD_VAR 0 10
9302: OR
9303: IFTRUE 9311
9305: PUSH
9306: LD_VAR 0 33
9310: OR
9311: IFFALSE 9387
// begin if IsInUnit ( i ) then
9313: LD_VAR 0 9
9317: PPUSH
9318: CALL_OW 310
9322: IFFALSE 9333
// ComExitBuilding ( i ) ;
9324: LD_VAR 0 9
9328: PPUSH
9329: CALL_OW 122
// if tmp then
9333: LD_VAR 0 10
9337: IFFALSE 9353
// SetTag ( i , tRepair ) else
9339: LD_VAR 0 9
9343: PPUSH
9344: LD_INT 3
9346: PPUSH
9347: CALL_OW 109
9351: GO 9385
// if cr then
9353: LD_VAR 0 17
9357: IFFALSE 9373
// SetTag ( i , tCrates ) else
9359: LD_VAR 0 9
9363: PPUSH
9364: LD_INT 2
9366: PPUSH
9367: CALL_OW 109
9371: GO 9385
// SetTag ( i , tBuild ) ;
9373: LD_VAR 0 9
9377: PPUSH
9378: LD_INT 5
9380: PPUSH
9381: CALL_OW 109
// end else
9385: GO 9413
// if not IsInUnit ( i ) then
9387: LD_VAR 0 9
9391: PPUSH
9392: CALL_OW 310
9396: NOT
9397: IFFALSE 9413
// ComEnterUnit ( i , depot ) ;
9399: LD_VAR 0 9
9403: PPUSH
9404: LD_VAR 0 32
9408: PPUSH
9409: CALL_OW 120
// end ; if tag = tRepair then
9413: LD_VAR 0 15
9417: PUSH
9418: LD_INT 3
9420: EQUAL
9421: IFFALSE 9527
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 9
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9445
// begin ComExitBuilding ( i ) ;
9434: LD_VAR 0 9
9438: PPUSH
9439: CALL_OW 122
// continue ;
9443: GO 9060
// end ; if not tmp then
9445: LD_VAR 0 10
9449: NOT
9450: IFFALSE 9466
// begin SetTag ( i , 0 ) ;
9452: LD_VAR 0 9
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 109
// continue ;
9464: GO 9060
// end ; if not HasTask ( i ) then
9466: LD_VAR 0 9
9470: PPUSH
9471: CALL_OW 314
9475: NOT
9476: IFFALSE 9496
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9478: LD_VAR 0 9
9482: PPUSH
9483: LD_VAR 0 10
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: CALL_OW 130
// if not IsInArea ( i , area ) then
9496: LD_VAR 0 9
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: CALL_OW 308
9510: NOT
9511: IFFALSE 9527
// ComMoveToArea ( i , area ) ;
9513: LD_VAR 0 9
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: CALL_OW 113
// end ; if tag = tBuild then
9527: LD_VAR 0 15
9531: PUSH
9532: LD_INT 5
9534: EQUAL
9535: IFFALSE 9745
// begin if IsInUnit ( i ) then
9537: LD_VAR 0 9
9541: PPUSH
9542: CALL_OW 310
9546: IFFALSE 9559
// begin ComExitBuilding ( i ) ;
9548: LD_VAR 0 9
9552: PPUSH
9553: CALL_OW 122
// continue ;
9557: GO 9060
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9559: LD_VAR 0 33
9563: NOT
9564: IFTRUE 9572
9566: PUSH
9567: LD_VAR 0 22
9571: OR
9572: IFTRUE 9580
9574: PUSH
9575: LD_VAR 0 23
9579: OR
9580: IFFALSE 9598
// begin SetTag ( i , 0 ) ;
9582: LD_VAR 0 9
9586: PPUSH
9587: LD_INT 0
9589: PPUSH
9590: CALL_OW 109
// continue ;
9594: GO 9060
// end else
9596: GO 9637
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9598: LD_VAR 0 32
9602: PPUSH
9603: LD_VAR 0 33
9607: PUSH
9608: LD_INT 1
9610: ARRAY
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: CALL 59438 0 2
9620: NOT
9621: IFFALSE 9637
// begin SetTag ( i , 0 ) ;
9623: LD_VAR 0 9
9627: PPUSH
9628: LD_INT 0
9630: PPUSH
9631: CALL_OW 109
// continue ;
9635: GO 9060
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9637: LD_ADDR_VAR 0 11
9641: PUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 57
9649: PUSH
9650: EMPTY
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: ST_TO_ADDR
// if undone then
9658: LD_VAR 0 11
9662: IFFALSE 9684
// begin ComComplete ( i , undone [ 1 ] ) ;
9664: LD_VAR 0 9
9668: PPUSH
9669: LD_VAR 0 11
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: PPUSH
9678: CALL 25537 0 2
// continue ;
9682: GO 9060
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9684: LD_VAR 0 9
9688: PPUSH
9689: LD_VAR 0 33
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PUSH
9698: LD_INT 1
9700: ARRAY
9701: PPUSH
9702: LD_VAR 0 33
9706: PUSH
9707: LD_INT 1
9709: ARRAY
9710: PUSH
9711: LD_INT 2
9713: ARRAY
9714: PPUSH
9715: LD_VAR 0 33
9719: PUSH
9720: LD_INT 1
9722: ARRAY
9723: PUSH
9724: LD_INT 3
9726: ARRAY
9727: PPUSH
9728: LD_VAR 0 33
9732: PUSH
9733: LD_INT 1
9735: ARRAY
9736: PUSH
9737: LD_INT 4
9739: ARRAY
9740: PPUSH
9741: CALL_OW 145
// end ; if tag = tCrates then
9745: LD_VAR 0 15
9749: PUSH
9750: LD_INT 2
9752: EQUAL
9753: IFFALSE 9892
// begin if IsInUnit ( i ) then
9755: LD_VAR 0 9
9759: PPUSH
9760: CALL_OW 310
9764: IFFALSE 9777
// begin ComExitBuilding ( i ) ;
9766: LD_VAR 0 9
9770: PPUSH
9771: CALL_OW 122
// continue ;
9775: GO 9060
// end ; if not cr then
9777: LD_VAR 0 17
9781: NOT
9782: IFFALSE 9798
// begin SetTag ( i , 0 ) ;
9784: LD_VAR 0 9
9788: PPUSH
9789: LD_INT 0
9791: PPUSH
9792: CALL_OW 109
// continue ;
9796: GO 9060
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9798: LD_VAR 0 9
9802: PPUSH
9803: CALL_OW 314
9807: NOT
9808: IFFALSE 9863
9810: PUSH
9811: LD_INT 81
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 92
9825: PUSH
9826: LD_VAR 0 17
9830: PUSH
9831: LD_INT 1
9833: ARRAY
9834: PUSH
9835: LD_VAR 0 17
9839: PUSH
9840: LD_INT 2
9842: ARRAY
9843: PUSH
9844: LD_INT 12
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: NOT
9862: AND
9863: IFFALSE 9892
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9865: LD_VAR 0 9
9869: PPUSH
9870: LD_VAR 0 17
9874: PUSH
9875: LD_INT 1
9877: ARRAY
9878: PPUSH
9879: LD_VAR 0 17
9883: PUSH
9884: LD_INT 2
9886: ARRAY
9887: PPUSH
9888: CALL_OW 117
// end ; end ;
9892: GO 9060
9894: POP
9895: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9896: LD_ADDR_VAR 0 25
9900: PUSH
9901: LD_VAR 0 26
9905: PPUSH
9906: LD_INT 34
9908: PUSH
9909: LD_INT 88
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 50
9918: PUSH
9919: EMPTY
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PPUSH
9926: CALL_OW 72
9930: ST_TO_ADDR
// if cranes then
9931: LD_VAR 0 25
9935: IFFALSE 10000
// begin if tmp then
9937: LD_VAR 0 10
9941: IFFALSE 9986
// begin for i in cranes do
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_VAR 0 25
9952: PUSH
9953: FOR_IN
9954: IFFALSE 9982
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9956: LD_VAR 0 9
9960: PPUSH
9961: LD_VAR 0 10
9965: PPUSH
9966: LD_VAR 0 9
9970: PPUSH
9971: CALL_OW 74
9975: PPUSH
9976: CALL_OW 130
9980: GO 9953
9982: POP
9983: POP
// end else
9984: GO 10000
// ComBackOnParking ( cranes , parkingPoint ) ;
9986: LD_VAR 0 25
9990: PPUSH
9991: LD_VAR 0 7
9995: PPUSH
9996: CALL 60340 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
10000: LD_ADDR_VAR 0 27
10004: PUSH
10005: LD_EXP 48
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_INT 2
10020: PPUSH
10021: CALL 60203 0 4
10025: ST_TO_ADDR
// if vehicles2 then
10026: LD_VAR 0 27
10030: IFFALSE 10097
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10032: LD_ADDR_VAR 0 9
10036: PUSH
10037: LD_VAR 0 27
10041: PPUSH
10042: LD_INT 33
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 50
10054: PUSH
10055: EMPTY
10056: LIST
10057: PUSH
10058: LD_INT 3
10060: PUSH
10061: LD_INT 61
10063: PUSH
10064: EMPTY
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: PUSH
10081: FOR_IN
10082: IFFALSE 10095
// Connect ( i ) ;
10084: LD_VAR 0 9
10088: PPUSH
10089: CALL 25645 0 1
10093: GO 10081
10095: POP
10096: POP
// if vehicles then
10097: LD_VAR 0 26
10101: IFFALSE 11019
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10103: LD_ADDR_VAR 0 9
10107: PUSH
10108: LD_VAR 0 26
10112: PPUSH
10113: LD_INT 33
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 50
10125: PUSH
10126: EMPTY
10127: LIST
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 61
10134: PUSH
10135: EMPTY
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: PUSH
10152: FOR_IN
10153: IFFALSE 10166
// Connect ( i ) ;
10155: LD_VAR 0 9
10159: PPUSH
10160: CALL 25645 0 1
10164: GO 10152
10166: POP
10167: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10168: LD_ADDR_VAR 0 26
10172: PUSH
10173: LD_VAR 0 26
10177: PPUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: LD_INT 34
10186: PUSH
10187: LD_INT 88
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 34
10196: PUSH
10197: LD_INT 32
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 50
10215: PUSH
10216: EMPTY
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PPUSH
10223: CALL_OW 72
10227: ST_TO_ADDR
// if vehicles then
10228: LD_VAR 0 26
10232: IFFALSE 11019
// begin for i in vehicles do
10234: LD_ADDR_VAR 0 9
10238: PUSH
10239: LD_VAR 0 26
10243: PUSH
10244: FOR_IN
10245: IFFALSE 11017
// begin tag := GetTag ( i ) ;
10247: LD_ADDR_VAR 0 15
10251: PUSH
10252: LD_VAR 0 9
10256: PPUSH
10257: CALL_OW 110
10261: ST_TO_ADDR
// if not tag then
10262: LD_VAR 0 15
10266: NOT
10267: IFFALSE 10438
// begin if GetControl ( i ) = control_manual then
10269: LD_VAR 0 9
10273: PPUSH
10274: CALL_OW 263
10278: PUSH
10279: LD_INT 1
10281: EQUAL
10282: IFFALSE 10424
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10284: LD_ADDR_VAR 0 24
10288: PUSH
10289: LD_EXP 49
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 9
10301: PPUSH
10302: LD_INT 2
10304: PPUSH
10305: CALL 60203 0 4
10309: ST_TO_ADDR
// if not drivers then
10310: LD_VAR 0 24
10314: NOT
10315: IFFALSE 10404
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10317: LD_ADDR_VAR 0 24
10321: PUSH
10322: LD_VAR 0 14
10326: PPUSH
10327: LD_INT 3
10329: PUSH
10330: LD_INT 120
10332: PUSH
10333: LD_INT 7
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PPUSH
10344: CALL_OW 72
10348: ST_TO_ADDR
// if drivers then
10349: LD_VAR 0 24
10353: IFFALSE 10404
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10355: LD_VAR 0 24
10359: PUSH
10360: LD_INT 1
10362: ARRAY
10363: PPUSH
10364: LD_INT 7
10366: PPUSH
10367: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10371: LD_ADDR_EXP 49
10375: PUSH
10376: LD_EXP 49
10380: PPUSH
10381: LD_VAR 0 9
10385: PUSH
10386: LD_VAR 0 24
10390: PUSH
10391: LD_INT 1
10393: ARRAY
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL 55343 0 2
10403: ST_TO_ADDR
// end ; end ; if drivers then
10404: LD_VAR 0 24
10408: IFFALSE 10422
// SetTag ( i , tBusy ) ;
10410: LD_VAR 0 9
10414: PPUSH
10415: LD_INT 8
10417: PPUSH
10418: CALL_OW 109
// continue ;
10422: GO 10244
// end ; SetTag ( i , tBusy ) ;
10424: LD_VAR 0 9
10428: PPUSH
10429: LD_INT 8
10431: PPUSH
10432: CALL_OW 109
// end else
10436: GO 11015
// if tag = tBusy then
10438: LD_VAR 0 15
10442: PUSH
10443: LD_INT 8
10445: EQUAL
10446: IFFALSE 10682
// begin if GetLives ( i ) = 1000 then
10448: LD_VAR 0 9
10452: PPUSH
10453: CALL_OW 256
10457: PUSH
10458: LD_INT 1000
10460: EQUAL
10461: IFFALSE 10680
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10463: LD_VAR 0 9
10467: PPUSH
10468: CALL_OW 263
10472: PUSH
10473: LD_INT 1
10475: EQUAL
10476: IFFALSE 10490
10478: PUSH
10479: LD_VAR 0 9
10483: PPUSH
10484: CALL_OW 311
10488: NOT
10489: AND
10490: IFFALSE 10668
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10492: LD_ADDR_VAR 0 24
10496: PUSH
10497: LD_EXP 49
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_VAR 0 9
10509: PPUSH
10510: LD_INT 2
10512: PPUSH
10513: CALL 60203 0 4
10517: ST_TO_ADDR
// if not drivers then
10518: LD_VAR 0 24
10522: NOT
10523: IFFALSE 10539
// begin SetTag ( i , 0 ) ;
10525: LD_VAR 0 9
10529: PPUSH
10530: LD_INT 0
10532: PPUSH
10533: CALL_OW 109
// continue ;
10537: GO 10244
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10539: LD_VAR 0 24
10543: PUSH
10544: LD_INT 1
10546: ARRAY
10547: PPUSH
10548: CALL_OW 310
10552: IFFALSE 10570
10554: PUSH
10555: LD_VAR 0 24
10559: PUSH
10560: LD_INT 1
10562: ARRAY
10563: PPUSH
10564: CALL 52923 0 1
10568: NOT
10569: AND
10570: IFFALSE 10585
// ComExitBuilding ( drivers [ 1 ] ) ;
10572: LD_VAR 0 24
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10585: LD_VAR 0 26
10589: PPUSH
10590: LD_INT 120
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 72
10604: IFFALSE 10622
10606: PUSH
10607: LD_VAR 0 24
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: CALL_OW 314
10620: NOT
10621: AND
10622: IFTRUE 10646
10624: PUSH
10625: LD_VAR 0 26
10629: PPUSH
10630: LD_INT 120
10632: PUSH
10633: LD_INT 3
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 72
10644: NOT
10645: OR
10646: IFFALSE 10666
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10648: LD_VAR 0 24
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: LD_VAR 0 9
10661: PPUSH
10662: CALL_OW 120
// continue ;
10666: GO 10244
// end ; SetTag ( i , tAttack ) ;
10668: LD_VAR 0 9
10672: PPUSH
10673: LD_INT 13
10675: PPUSH
10676: CALL_OW 109
// end ; end else
10680: GO 11015
// if tag = tAttack then
10682: LD_VAR 0 15
10686: PUSH
10687: LD_INT 13
10689: EQUAL
10690: IFFALSE 10872
// begin enemy := enemyInBase ;
10692: LD_ADDR_VAR 0 21
10696: PUSH
10697: LD_VAR 0 22
10701: ST_TO_ADDR
// if not enemy then
10702: LD_VAR 0 21
10706: NOT
10707: IFFALSE 10719
// enemy := enemyOuterBase ;
10709: LD_ADDR_VAR 0 21
10713: PUSH
10714: LD_VAR 0 23
10718: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10719: LD_VAR 0 21
10723: NOT
10724: IFFALSE 10759
10726: PUSH
10727: LD_VAR 0 9
10731: PPUSH
10732: LD_VAR 0 7
10736: PUSH
10737: LD_INT 1
10739: ARRAY
10740: PPUSH
10741: LD_VAR 0 7
10745: PUSH
10746: LD_INT 2
10748: ARRAY
10749: PPUSH
10750: CALL_OW 297
10754: PUSH
10755: LD_INT 10
10757: GREATER
10758: AND
10759: IFFALSE 10790
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10761: LD_VAR 0 9
10765: PPUSH
10766: LD_VAR 0 7
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PPUSH
10775: LD_VAR 0 7
10779: PUSH
10780: LD_INT 2
10782: ARRAY
10783: PPUSH
10784: CALL_OW 111
// continue ;
10788: GO 10244
// end ; if GetLives ( i ) < 650 then
10790: LD_VAR 0 9
10794: PPUSH
10795: CALL_OW 256
10799: PUSH
10800: LD_INT 650
10802: LESS
10803: IFFALSE 10846
// begin SetTag ( i , tVehRepair ) ;
10805: LD_VAR 0 9
10809: PPUSH
10810: LD_INT 9
10812: PPUSH
10813: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10817: LD_VAR 0 9
10821: PPUSH
10822: LD_VAR 0 7
10826: PUSH
10827: LD_INT 1
10829: ARRAY
10830: PPUSH
10831: LD_VAR 0 7
10835: PUSH
10836: LD_INT 2
10838: ARRAY
10839: PPUSH
10840: CALL_OW 111
// continue ;
10844: GO 10244
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10846: LD_VAR 0 9
10850: PPUSH
10851: LD_VAR 0 21
10855: PPUSH
10856: LD_VAR 0 9
10860: PPUSH
10861: CALL_OW 74
10865: PPUSH
10866: CALL_OW 115
// end else
10870: GO 11015
// if tag = tVehRepair then
10872: LD_VAR 0 15
10876: PUSH
10877: LD_INT 9
10879: EQUAL
10880: IFFALSE 11015
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10882: LD_VAR 0 9
10886: PPUSH
10887: LD_VAR 0 7
10891: PUSH
10892: LD_INT 1
10894: ARRAY
10895: PPUSH
10896: LD_VAR 0 7
10900: PUSH
10901: LD_INT 2
10903: ARRAY
10904: PPUSH
10905: CALL_OW 297
10909: PUSH
10910: LD_INT 10
10912: GREATER
10913: IFFALSE 10944
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10915: LD_VAR 0 9
10919: PPUSH
10920: LD_VAR 0 7
10924: PUSH
10925: LD_INT 1
10927: ARRAY
10928: PPUSH
10929: LD_VAR 0 7
10933: PUSH
10934: LD_INT 2
10936: ARRAY
10937: PPUSH
10938: CALL_OW 111
// continue ;
10942: GO 10244
// end ; if GetLives ( i ) = 1000 then
10944: LD_VAR 0 9
10948: PPUSH
10949: CALL_OW 256
10953: PUSH
10954: LD_INT 1000
10956: EQUAL
10957: IFFALSE 10973
// begin SetTag ( i , tBusy ) ;
10959: LD_VAR 0 9
10963: PPUSH
10964: LD_INT 8
10966: PPUSH
10967: CALL_OW 109
// continue ;
10971: GO 10244
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10973: LD_VAR 0 9
10977: PPUSH
10978: CALL_OW 263
10982: PUSH
10983: LD_INT 1
10985: EQUAL
10986: IFFALSE 10999
10988: PUSH
10989: LD_VAR 0 9
10993: PPUSH
10994: CALL_OW 311
10998: AND
10999: IFFALSE 11015
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
11001: LD_VAR 0 9
11005: PPUSH
11006: CALL_OW 311
11010: PPUSH
11011: CALL 57057 0 1
// end ; end ;
11015: GO 10244
11017: POP
11018: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
11019: LD_ADDR_VAR 0 19
11023: PUSH
11024: LD_VAR 0 5
11028: PPUSH
11029: LD_INT 2
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 8
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 25
11054: PUSH
11055: LD_INT 5
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 25
11064: PUSH
11065: LD_INT 9
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 50
11081: PUSH
11082: EMPTY
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 72
11093: ST_TO_ADDR
// if sol then
11094: LD_VAR 0 19
11098: IFFALSE 11656
// begin if enemyInBase then
11100: LD_VAR 0 22
11104: IFFALSE 11283
// begin for i in sol do
11106: LD_ADDR_VAR 0 9
11110: PUSH
11111: LD_VAR 0 19
11115: PUSH
11116: FOR_IN
11117: IFFALSE 11279
// begin tw := IsInUnit ( i ) ;
11119: LD_ADDR_VAR 0 16
11123: PUSH
11124: LD_VAR 0 9
11128: PPUSH
11129: CALL_OW 310
11133: ST_TO_ADDR
// if tw then
11134: LD_VAR 0 16
11138: IFFALSE 11221
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11140: LD_VAR 0 16
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 101
11159: PUSH
11160: LD_VAR 0 34
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 30
11174: PUSH
11175: LD_INT 32
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 31
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: IN
11207: NOT
11208: IFFALSE 11219
// ComExitBuilding ( i ) ;
11210: LD_VAR 0 9
11214: PPUSH
11215: CALL_OW 122
// end else
11219: GO 11277
// if IsInArea ( i , area ) then
11221: LD_VAR 0 9
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: CALL_OW 308
11235: IFFALSE 11263
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11237: LD_VAR 0 9
11241: PPUSH
11242: LD_VAR 0 22
11246: PPUSH
11247: LD_VAR 0 9
11251: PPUSH
11252: CALL_OW 74
11256: PPUSH
11257: CALL_OW 115
11261: GO 11277
// ComMoveToArea ( i , area ) ;
11263: LD_VAR 0 9
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: CALL_OW 113
// end ;
11277: GO 11116
11279: POP
11280: POP
// end else
11281: GO 11656
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11283: LD_ADDR_VAR 0 28
11287: PUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 62
11298: PUSH
11299: EMPTY
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: LD_INT 32
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: LD_INT 4
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 31
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 70
11364: ST_TO_ADDR
// if empty then
11365: LD_VAR 0 28
11369: IFFALSE 11386
// empty := ReverseArray ( empty ) ;
11371: LD_ADDR_VAR 0 28
11375: PUSH
11376: LD_VAR 0 28
11380: PPUSH
11381: CALL 50423 0 1
11385: ST_TO_ADDR
// for i in sol do
11386: LD_ADDR_VAR 0 9
11390: PUSH
11391: LD_VAR 0 19
11395: PUSH
11396: FOR_IN
11397: IFFALSE 11654
// begin tag := GetTag ( i ) ;
11399: LD_ADDR_VAR 0 15
11403: PUSH
11404: LD_VAR 0 9
11408: PPUSH
11409: CALL_OW 110
11413: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11414: LD_VAR 0 9
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: IFFALSE 11439
11429: PUSH
11430: LD_VAR 0 15
11434: PUSH
11435: LD_INT 1
11437: NONEQUAL
11438: AND
11439: IFFALSE 11491
// begin SetTag ( i , tHeal ) ;
11441: LD_VAR 0 9
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11453: LD_VAR 0 9
11457: PPUSH
11458: LD_VAR 0 6
11462: PUSH
11463: LD_INT 1
11465: ARRAY
11466: PPUSH
11467: LD_VAR 0 6
11471: PUSH
11472: LD_INT 2
11474: ARRAY
11475: PPUSH
11476: CALL_OW 111
// AddComHold ( i ) ;
11480: LD_VAR 0 9
11484: PPUSH
11485: CALL_OW 200
// continue ;
11489: GO 11396
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11491: LD_VAR 0 9
11495: PPUSH
11496: CALL_OW 256
11500: PUSH
11501: LD_INT 1000
11503: EQUAL
11504: IFFALSE 11516
11506: PUSH
11507: LD_VAR 0 15
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: AND
11516: IFFALSE 11532
// begin SetTag ( i , 0 ) ;
11518: LD_VAR 0 9
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 109
// continue ;
11530: GO 11396
// end ; if HasTask ( i ) then
11532: LD_VAR 0 9
11536: PPUSH
11537: CALL_OW 314
11541: IFFALSE 11545
// continue ;
11543: GO 11396
// if not IsInUnit ( i ) and not tag and empty then
11545: LD_VAR 0 9
11549: PPUSH
11550: CALL_OW 310
11554: NOT
11555: IFFALSE 11564
11557: PUSH
11558: LD_VAR 0 15
11562: NOT
11563: AND
11564: IFFALSE 11572
11566: PUSH
11567: LD_VAR 0 28
11571: AND
11572: IFFALSE 11652
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11574: LD_VAR 0 9
11578: PPUSH
11579: LD_VAR 0 28
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: PPUSH
11588: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11592: LD_VAR 0 28
11596: PUSH
11597: LD_INT 1
11599: ARRAY
11600: PPUSH
11601: CALL_OW 266
11605: PUSH
11606: LD_INT 5
11608: EQUAL
11609: IFFALSE 11620
11611: PUSH
11612: LD_INT 50
11614: PPUSH
11615: CALL_OW 13
11619: AND
11620: IFFALSE 11634
// AddComChangeProfession ( i , class_mortar ) ;
11622: LD_VAR 0 9
11626: PPUSH
11627: LD_INT 8
11629: PPUSH
11630: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11634: LD_ADDR_VAR 0 28
11638: PUSH
11639: LD_VAR 0 28
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 3
11651: ST_TO_ADDR
// end ; end ;
11652: GO 11396
11654: POP
11655: POP
// end ; end ; end ;
11656: LD_VAR 0 8
11660: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11661: LD_EXP 35
11665: PPUSH
11666: LD_INT 50
11668: PUSH
11669: EMPTY
11670: LIST
11671: PPUSH
11672: CALL_OW 72
11676: IFFALSE 11725
11678: GO 11680
11680: DISABLE
// begin enable ;
11681: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11682: LD_EXP 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: LD_INT 33
11692: PPUSH
11693: LD_INT 40
11695: PPUSH
11696: LD_EXP 35
11700: PPUSH
11701: LD_INT 120
11703: PUSH
11704: LD_INT 129
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PPUSH
11711: LD_INT 126
11713: PUSH
11714: LD_INT 136
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL 7666 0 7
// end ;
11725: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11726: LD_EXP 36
11730: PPUSH
11731: LD_INT 50
11733: PUSH
11734: EMPTY
11735: LIST
11736: PPUSH
11737: CALL_OW 72
11741: IFFALSE 11790
11743: GO 11745
11745: DISABLE
// begin enable ;
11746: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11747: LD_EXP 3
11751: PPUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_INT 35
11757: PPUSH
11758: LD_INT 43
11760: PPUSH
11761: LD_EXP 36
11765: PPUSH
11766: LD_INT 116
11768: PUSH
11769: LD_INT 9
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PPUSH
11776: LD_INT 123
11778: PUSH
11779: LD_INT 12
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL 7666 0 7
// end ;
11790: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11791: LD_EXP 34
11795: PPUSH
11796: LD_INT 50
11798: PUSH
11799: EMPTY
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: IFFALSE 11855
11808: GO 11810
11810: DISABLE
// begin enable ;
11811: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11812: LD_EXP 3
11816: PPUSH
11817: LD_INT 3
11819: PPUSH
11820: LD_INT 34
11822: PPUSH
11823: LD_INT 42
11825: PPUSH
11826: LD_EXP 34
11830: PPUSH
11831: LD_INT 28
11833: PUSH
11834: LD_INT 10
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 17
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL 7666 0 7
// end ;
11855: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11856: LD_EXP 38
11860: PPUSH
11861: LD_INT 50
11863: PUSH
11864: EMPTY
11865: LIST
11866: PPUSH
11867: CALL_OW 72
11871: IFFALSE 11920
11873: GO 11875
11875: DISABLE
// begin enable ;
11876: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11877: LD_EXP 3
11881: PPUSH
11882: LD_INT 4
11884: PPUSH
11885: LD_INT 36
11887: PPUSH
11888: LD_INT 44
11890: PPUSH
11891: LD_EXP 38
11895: PPUSH
11896: LD_INT 173
11898: PUSH
11899: LD_INT 72
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: LD_INT 167
11908: PUSH
11909: LD_INT 83
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL 7666 0 7
// end ;
11920: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11921: LD_EXP 37
11925: PPUSH
11926: LD_INT 50
11928: PUSH
11929: EMPTY
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: IFFALSE 11985
11938: GO 11940
11940: DISABLE
// begin enable ;
11941: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11942: LD_EXP 3
11946: PPUSH
11947: LD_INT 5
11949: PPUSH
11950: LD_INT 38
11952: PPUSH
11953: LD_INT 45
11955: PPUSH
11956: LD_EXP 37
11960: PPUSH
11961: LD_INT 147
11963: PUSH
11964: LD_INT 50
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PPUSH
11971: LD_INT 159
11973: PUSH
11974: LD_INT 40
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL 7666 0 7
// end ;
11985: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11986: LD_EXP 53
11990: IFFALSE 12210
11992: GO 11994
11994: DISABLE
11995: LD_INT 0
11997: PPUSH
11998: PPUSH
11999: PPUSH
// begin enable ;
12000: ENABLE
// p := 1 ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: DOUBLE
12015: LD_INT 1
12017: DEC
12018: ST_TO_ADDR
12019: LD_EXP 53
12023: PPUSH
12024: CALL 19367 0 1
12028: PUSH
12029: LD_INT 2
12031: DIV
12032: PUSH
12033: FOR_TO
12034: IFFALSE 12208
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: LD_EXP 53
12045: PUSH
12046: LD_VAR 0 2
12050: ARRAY
12051: PPUSH
12052: LD_EXP 53
12056: PUSH
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ARRAY
12066: PPUSH
12067: CALL_OW 428
12071: ST_TO_ADDR
// if tmp then
12072: LD_VAR 0 3
12076: IFFALSE 12192
// if not GetSide ( tmp ) in [ 0 , side_bot ] then
12078: LD_VAR 0 3
12082: PPUSH
12083: CALL_OW 255
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: LD_EXP 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: IN
12100: NOT
12101: IFFALSE 12192
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
12103: LD_EXP 53
12107: PUSH
12108: LD_VAR 0 2
12112: ARRAY
12113: PPUSH
12114: LD_EXP 53
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 1
12126: PLUS
12127: ARRAY
12128: PPUSH
12129: LD_EXP 3
12133: PPUSH
12134: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
12138: LD_ADDR_EXP 53
12142: PUSH
12143: LD_EXP 53
12147: PPUSH
12148: LD_VAR 0 2
12152: PPUSH
12153: CALL_OW 3
12157: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12158: LD_ADDR_EXP 53
12162: PUSH
12163: LD_EXP 53
12167: PPUSH
12168: LD_VAR 0 2
12172: PPUSH
12173: CALL_OW 3
12177: ST_TO_ADDR
// p := p - 2 ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 2
12190: MINUS
12191: ST_TO_ADDR
// end ; p := p + 2 ;
12192: LD_ADDR_VAR 0 2
12196: PUSH
12197: LD_VAR 0 2
12201: PUSH
12202: LD_INT 2
12204: PLUS
12205: ST_TO_ADDR
// end ;
12206: GO 12033
12208: POP
12209: POP
// end ; end_of_file
12210: PPOPN 3
12212: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
// begin if artifact_get then
12217: LD_EXP 4
12221: IFFALSE 12225
// exit ;
12223: GO 12247
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 255
12234: PPUSH
12235: CALL 5295 0 1
// artifact_get := true ;
12239: LD_ADDR_EXP 4
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// end ;
12247: PPOPN 4
12249: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL_OW 255
12259: PUSH
12260: LD_EXP 3
12264: NONEQUAL
12265: IFFALSE 12269
// exit ;
12267: GO 12338
// if not un in [ Saliba , Gensher , Shariff ] then
12269: LD_VAR 0 1
12273: PUSH
12274: LD_EXP 41
12278: PUSH
12279: LD_EXP 42
12283: PUSH
12284: LD_EXP 43
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: IN
12294: NOT
12295: IFFALSE 12316
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_VAR 0 2
12306: PPUSH
12307: LD_INT 0
12309: PPUSH
12310: CALL 5231 0 3
12314: GO 12338
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12316: LD_VAR 0 1
12320: PPUSH
12321: LD_VAR 0 2
12325: PPUSH
12326: LD_INT 5
12328: PPUSH
12329: CALL 4548 0 1
12333: PPUSH
12334: CALL 5231 0 3
// end ;
12338: PPOPN 3
12340: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12341: LD_INT 0
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL 60697 0 1
// side := GetSide ( un ) ;
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 255
12376: ST_TO_ADDR
// if multi_sides [ side ] then
12377: LD_EXP 7
12381: PUSH
12382: LD_VAR 0 3
12386: ARRAY
12387: IFFALSE 12413
// if GetType ( un ) = unit_human then
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 247
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12413
// MultiplayerEvent_HumanLost ( side ) ;
12404: LD_VAR 0 3
12408: PPUSH
12409: CALL 5111 0 1
// if side = side_bot then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_EXP 3
12422: EQUAL
12423: IFFALSE 12869
// begin if GetType ( un ) = unit_building then
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 247
12434: PUSH
12435: LD_INT 3
12437: EQUAL
12438: IFFALSE 12668
// begin base := 0 ;
12440: LD_ADDR_VAR 0 4
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: DOUBLE
12454: LD_INT 1
12456: DEC
12457: ST_TO_ADDR
12458: LD_EXP 51
12462: PPUSH
12463: CALL 19367 0 1
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12507
// if IsInArea ( un , arAreas [ i ] ) then
12471: LD_VAR 0 1
12475: PPUSH
12476: LD_EXP 51
12480: PUSH
12481: LD_VAR 0 2
12485: ARRAY
12486: PPUSH
12487: CALL_OW 308
12491: IFFALSE 12505
// begin base := i ;
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: LD_VAR 0 2
12502: ST_TO_ADDR
// break ;
12503: GO 12507
// end ;
12505: GO 12468
12507: POP
12508: POP
// if not base then
12509: LD_VAR 0 4
12513: NOT
12514: IFFALSE 12518
// exit ;
12516: GO 12974
// btype := GetBType ( un ) ;
12518: LD_ADDR_VAR 0 11
12522: PUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 266
12532: ST_TO_ADDR
// if btype = b_barracks then
12533: LD_VAR 0 11
12537: PUSH
12538: LD_INT 5
12540: EQUAL
12541: IFFALSE 12551
// btype := b_armoury ;
12543: LD_ADDR_VAR 0 11
12547: PUSH
12548: LD_INT 4
12550: ST_TO_ADDR
// if btype = b_factory then
12551: LD_VAR 0 11
12555: PUSH
12556: LD_INT 3
12558: EQUAL
12559: IFFALSE 12569
// btype := b_workshop ;
12561: LD_ADDR_VAR 0 11
12565: PUSH
12566: LD_INT 2
12568: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12569: LD_VAR 0 11
12573: PUSH
12574: LD_INT 8
12576: PUSH
12577: LD_INT 7
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: IN
12584: IFFALSE 12594
// btype := b_lab ;
12586: LD_ADDR_VAR 0 11
12590: PUSH
12591: LD_INT 6
12593: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12594: LD_ADDR_EXP 46
12598: PUSH
12599: LD_EXP 46
12603: PPUSH
12604: LD_EXP 46
12608: PUSH
12609: LD_INT 1
12611: PLUS
12612: PPUSH
12613: LD_VAR 0 4
12617: PUSH
12618: LD_VAR 0 11
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 250
12632: PUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 251
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 254
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 1
12667: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 247
12677: PUSH
12678: LD_INT 2
12680: EQUAL
12681: IFFALSE 12869
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_EXP 47
12692: PPUSH
12693: LD_INT 2
12695: PPUSH
12696: LD_VAR 0 1
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL 60203 0 4
12708: ST_TO_ADDR
// if not base then
12709: LD_VAR 0 4
12713: NOT
12714: IFFALSE 12718
// exit ;
12716: GO 12974
// factory := arFactories [ base ] ;
12718: LD_ADDR_VAR 0 10
12722: PUSH
12723: LD_EXP 50
12727: PUSH
12728: LD_VAR 0 4
12732: ARRAY
12733: ST_TO_ADDR
// if not factory then
12734: LD_VAR 0 10
12738: NOT
12739: IFFALSE 12743
// exit ;
12741: GO 12974
// chassis := GetChassis ( un ) ;
12743: LD_ADDR_VAR 0 5
12747: PUSH
12748: LD_VAR 0 1
12752: PPUSH
12753: CALL_OW 265
12757: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12758: LD_ADDR_VAR 0 6
12762: PUSH
12763: LD_VAR 0 1
12767: PPUSH
12768: CALL_OW 262
12772: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12773: LD_ADDR_VAR 0 8
12777: PUSH
12778: LD_VAR 0 1
12782: PPUSH
12783: CALL_OW 264
12787: ST_TO_ADDR
// control := control_remote ;
12788: LD_ADDR_VAR 0 7
12792: PUSH
12793: LD_INT 2
12795: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12796: LD_ADDR_VAR 0 9
12800: PUSH
12801: LD_VAR 0 10
12805: PPUSH
12806: LD_VAR 0 5
12810: PPUSH
12811: LD_VAR 0 6
12815: PPUSH
12816: LD_VAR 0 7
12820: PPUSH
12821: LD_VAR 0 8
12825: PPUSH
12826: CALL 19725 0 5
12830: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12831: LD_ADDR_EXP 45
12835: PUSH
12836: LD_EXP 45
12840: PPUSH
12841: LD_EXP 45
12845: PUSH
12846: LD_INT 1
12848: PLUS
12849: PPUSH
12850: LD_VAR 0 4
12854: PUSH
12855: LD_VAR 0 9
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
12869: LD_EXP 24
12873: IFFALSE 12881
12875: PUSH
12876: LD_EXP 16
12880: AND
12881: IFFALSE 12896
12883: PUSH
12884: LD_EXP 25
12888: PUSH
12889: LD_VAR 0 3
12893: ARRAY
12894: NOT
12895: AND
12896: IFFALSE 12974
// if un in multi_commanders then
12898: LD_VAR 0 1
12902: PUSH
12903: LD_EXP 24
12907: IN
12908: IFFALSE 12974
// begin if side = your_side then
12910: LD_VAR 0 3
12914: PUSH
12915: LD_OWVAR 2
12919: EQUAL
12920: IFFALSE 12926
// Multiplayer_Loose_Message ;
12922: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12926: LD_ADDR_EXP 25
12930: PUSH
12931: LD_EXP 25
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 1
12948: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12949: LD_ADDR_EXP 24
12953: PUSH
12954: LD_EXP 24
12958: PUSH
12959: LD_VAR 0 1
12963: DIFF
12964: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12965: LD_VAR 0 3
12969: PPUSH
12970: CALL 4581 0 1
// end ; end ;
12974: PPOPN 11
12976: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
// begin side := GetSide ( building ) ;
12984: LD_ADDR_VAR 0 4
12988: PUSH
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 255
12998: ST_TO_ADDR
// if multi_sides [ side ] then
12999: LD_EXP 7
13003: PUSH
13004: LD_VAR 0 4
13008: ARRAY
13009: IFFALSE 13030
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
13011: LD_VAR 0 4
13015: PPUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 266
13025: PPUSH
13026: CALL 5157 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 266
13039: PUSH
13040: LD_INT 0
13042: EQUAL
13043: IFFALSE 13058
13045: PUSH
13046: LD_EXP 7
13050: PUSH
13051: LD_VAR 0 4
13055: ARRAY
13056: NOT
13057: AND
13058: IFFALSE 13066
13060: PUSH
13061: LD_EXP 5
13065: AND
13066: IFFALSE 13104
// begin SetBName ( building , base_names [ 1 ] ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_EXP 5
13077: PUSH
13078: LD_INT 1
13080: ARRAY
13081: PPUSH
13082: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
13086: LD_ADDR_EXP 5
13090: PUSH
13091: LD_EXP 5
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 3
13103: ST_TO_ADDR
// end ; if side = side_bot then
13104: LD_VAR 0 4
13108: PUSH
13109: LD_EXP 3
13113: EQUAL
13114: IFFALSE 13365
// begin base := 0 ;
13116: LD_ADDR_VAR 0 5
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: DOUBLE
13130: LD_INT 1
13132: DEC
13133: ST_TO_ADDR
13134: LD_EXP 51
13138: PPUSH
13139: CALL 19367 0 1
13143: PUSH
13144: FOR_TO
13145: IFFALSE 13183
// if IsInArea ( building , arAreas [ i ] ) then
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_EXP 51
13156: PUSH
13157: LD_VAR 0 2
13161: ARRAY
13162: PPUSH
13163: CALL_OW 308
13167: IFFALSE 13181
// begin base := i ;
13169: LD_ADDR_VAR 0 5
13173: PUSH
13174: LD_VAR 0 2
13178: ST_TO_ADDR
// break ;
13179: GO 13183
// end ;
13181: GO 13144
13183: POP
13184: POP
// if not base then
13185: LD_VAR 0 5
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13365
// for i := 1 to Count ( arBuildings ) do
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_EXP 46
13208: PPUSH
13209: CALL 19367 0 1
13213: PUSH
13214: FOR_TO
13215: IFFALSE 13267
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13217: LD_EXP 46
13221: PUSH
13222: LD_VAR 0 2
13226: ARRAY
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PUSH
13236: LD_VAR 0 5
13240: EQUAL
13241: IFFALSE 13265
// begin arBuildings := Delete ( arBuildings , i ) ;
13243: LD_ADDR_EXP 46
13247: PUSH
13248: LD_EXP 46
13252: PPUSH
13253: LD_VAR 0 2
13257: PPUSH
13258: CALL_OW 3
13262: ST_TO_ADDR
// break ;
13263: GO 13267
// end ;
13265: GO 13214
13267: POP
13268: POP
// btype := GetBType ( building ) ;
13269: LD_ADDR_VAR 0 6
13273: PUSH
13274: LD_VAR 0 1
13278: PPUSH
13279: CALL_OW 266
13283: ST_TO_ADDR
// case btype of b_armoury :
13284: LD_VAR 0 6
13288: PUSH
13289: LD_INT 4
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13309
13297: POP
// ComUpgrade ( building ) ; b_workshop :
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 146
13307: GO 13365
13309: LD_INT 2
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13329
13317: POP
// ComUpgrade ( building ) ; b_lab :
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 146
13327: GO 13365
13329: LD_INT 6
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13364
13337: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 10
13345: PPUSH
13346: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: LD_INT 15
13357: PPUSH
13358: CALL_OW 207
// end ; end ;
13362: GO 13365
13364: POP
// end ; end ;
13365: PPOPN 6
13367: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13375: LD_VAR 0 1
13379: PPUSH
13380: LD_VAR 0 2
13384: PPUSH
13385: CALL 60755 0 2
// side := GetSide ( vehicle ) ;
13389: LD_ADDR_VAR 0 4
13393: PUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 255
13403: ST_TO_ADDR
// if multi_sides [ side ] then
13404: LD_EXP 7
13408: PUSH
13409: LD_VAR 0 4
13413: ARRAY
13414: IFFALSE 13425
// MultiplayerEvent_Produced ( side ) ;
13416: LD_VAR 0 4
13420: PPUSH
13421: CALL 5065 0 1
// if side_bot = side then
13425: LD_EXP 3
13429: PUSH
13430: LD_VAR 0 4
13434: EQUAL
13435: IFFALSE 13629
// begin base := 0 ;
13437: LD_ADDR_VAR 0 6
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13445: LD_ADDR_VAR 0 3
13449: PUSH
13450: DOUBLE
13451: LD_INT 1
13453: DEC
13454: ST_TO_ADDR
13455: LD_EXP 50
13459: PPUSH
13460: CALL 19367 0 1
13464: PUSH
13465: FOR_TO
13466: IFFALSE 13500
// if arFactories [ i ] = factory then
13468: LD_EXP 50
13472: PUSH
13473: LD_VAR 0 3
13477: ARRAY
13478: PUSH
13479: LD_VAR 0 2
13483: EQUAL
13484: IFFALSE 13498
// begin base := i ;
13486: LD_ADDR_VAR 0 6
13490: PUSH
13491: LD_VAR 0 3
13495: ST_TO_ADDR
// break ;
13496: GO 13500
// end ;
13498: GO 13465
13500: POP
13501: POP
// if not base then
13502: LD_VAR 0 6
13506: NOT
13507: IFFALSE 13511
// exit ;
13509: GO 13629
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13511: LD_EXP 52
13515: PUSH
13516: LD_VAR 0 6
13520: ARRAY
13521: PUSH
13522: LD_EXP 47
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_VAR 0 6
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL 60203 0 4
13542: GREATER
13543: IFTRUE 13567
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 266
13555: PUSH
13556: LD_INT 32
13558: PUSH
13559: LD_INT 88
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: IN
13566: OR
13567: IFFALSE 13600
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13569: LD_ADDR_EXP 47
13573: PUSH
13574: LD_EXP 47
13578: PPUSH
13579: LD_VAR 0 6
13583: PUSH
13584: LD_VAR 0 1
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL 55343 0 2
13597: ST_TO_ADDR
13598: GO 13629
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13600: LD_ADDR_EXP 48
13604: PUSH
13605: LD_EXP 48
13609: PPUSH
13610: LD_VAR 0 6
13614: PUSH
13615: LD_VAR 0 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL 55343 0 2
13628: ST_TO_ADDR
// end ; end ;
13629: PPOPN 7
13631: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 110
13641: PUSH
13642: LD_INT 7
13644: EQUAL
13645: IFFALSE 13659
// SetTag ( driver , 0 ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 109
// end ;
13659: PPOPN 4
13661: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 255
13671: PUSH
13672: LD_EXP 3
13676: EQUAL
13677: IFFALSE 13707
// if tech in arTech then
13679: LD_VAR 0 1
13683: PUSH
13684: LD_EXP 44
13688: IN
13689: IFFALSE 13707
// arTech := arTech diff tech ;
13691: LD_ADDR_EXP 44
13695: PUSH
13696: LD_EXP 44
13700: PUSH
13701: LD_VAR 0 1
13705: DIFF
13706: ST_TO_ADDR
// end ;
13707: PPOPN 2
13709: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL 60714 0 1
// end ;
13719: PPOPN 1
13721: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
13722: LD_INT 0
13724: PPUSH
// begin side := GetSide ( factory ) ;
13725: LD_ADDR_VAR 0 6
13729: PUSH
13730: LD_VAR 0 1
13734: PPUSH
13735: CALL_OW 255
13739: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
13740: LD_VAR 0 5
13744: PUSH
13745: LD_INT 81
13747: EQUAL
13748: IFFALSE 13786
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_VAR 0 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 34
13765: PUSH
13766: LD_INT 81
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: PUSH
13782: LD_INT 0
13784: GREATER
13785: AND
13786: IFFALSE 13807
// begin ComCancel ( factory ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
13797: LD_STRING VehLimit
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 338
// end ; end ; end_of_file
13807: PPOPN 6
13809: END
// every 0 0$20 trigger game do
13810: LD_EXP 2
13814: IFFALSE 13859
13816: GO 13818
13818: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13819: LD_INT 7
13821: PUSH
13822: LD_INT 6
13824: PUSH
13825: LD_INT 4
13827: PUSH
13828: LD_INT 6
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: LD_EXP 21
13841: PUSH
13842: LD_INT 2
13844: ARRAY
13845: PPUSH
13846: LD_EXP 21
13850: PUSH
13851: LD_INT 1
13853: ARRAY
13854: PPUSH
13855: CALL 13860 0 3
13859: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
// if not areas then
13866: LD_VAR 0 1
13870: NOT
13871: IFFALSE 13875
// exit ;
13873: GO 14247
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13875: LD_ADDR_VAR 0 7
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: ST_TO_ADDR
// x := 5 ;
13894: LD_ADDR_VAR 0 6
13898: PUSH
13899: LD_INT 5
13901: ST_TO_ADDR
// repeat wait ( time ) ;
13902: LD_VAR 0 2
13906: PPUSH
13907: CALL_OW 67
// if tick < [ 55 55$00 , 43 43$00 , 31 31$00 ] [ Difficulty ] then
13911: LD_OWVAR 1
13915: PUSH
13916: LD_INT 115500
13918: PUSH
13919: LD_INT 90300
13921: PUSH
13922: LD_INT 65100
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: LD_OWVAR 67
13934: ARRAY
13935: LESS
13936: IFFALSE 14075
// begin for i := 1 to multi_sides do
13938: LD_ADDR_VAR 0 5
13942: PUSH
13943: DOUBLE
13944: LD_INT 1
13946: DEC
13947: ST_TO_ADDR
13948: LD_EXP 7
13952: PUSH
13953: FOR_TO
13954: IFFALSE 14066
// if multi_sides [ i ] then
13956: LD_EXP 7
13960: PUSH
13961: LD_VAR 0 5
13965: ARRAY
13966: IFFALSE 14064
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13968: LD_VAR 0 7
13972: PUSH
13973: LD_EXP 7
13977: PUSH
13978: LD_VAR 0 5
13982: ARRAY
13983: ARRAY
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: CALL_OW 287
13992: PUSH
13993: LD_INT 25
13995: PUSH
13996: LD_INT 22
13998: PUSH
13999: LD_INT 20
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: LD_OWVAR 67
14011: ARRAY
14012: LESS
14013: IFFALSE 14064
// begin amount := amount - ( x * 10 ) ;
14015: LD_ADDR_VAR 0 3
14019: PUSH
14020: LD_VAR 0 3
14024: PUSH
14025: LD_VAR 0 6
14029: PUSH
14030: LD_INT 10
14032: MUL
14033: MINUS
14034: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
14035: LD_VAR 0 6
14039: PPUSH
14040: LD_VAR 0 7
14044: PUSH
14045: LD_EXP 7
14049: PUSH
14050: LD_VAR 0 5
14054: ARRAY
14055: ARRAY
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 55
// end ; end ;
14064: GO 13953
14066: POP
14067: POP
// wait ( 0 0$10 ) ;
14068: LD_INT 350
14070: PPUSH
14071: CALL_OW 67
// end ; for i in areas do
14075: LD_ADDR_VAR 0 5
14079: PUSH
14080: LD_VAR 0 1
14084: PUSH
14085: FOR_IN
14086: IFFALSE 14162
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14088: LD_VAR 0 5
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: CALL_OW 287
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_INT 20
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_OWVAR 67
14119: ARRAY
14120: LESS
14121: IFFALSE 14160
// begin amount := amount - ( x * 10 ) ;
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_VAR 0 3
14132: PUSH
14133: LD_VAR 0 6
14137: PUSH
14138: LD_INT 10
14140: MUL
14141: MINUS
14142: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
14143: LD_VAR 0 6
14147: PPUSH
14148: LD_VAR 0 5
14152: PPUSH
14153: LD_INT 1
14155: PPUSH
14156: CALL_OW 55
// end ; end ;
14160: GO 14085
14162: POP
14163: POP
// time := time + 0 0$2 ;
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: LD_VAR 0 2
14173: PUSH
14174: LD_INT 70
14176: PLUS
14177: ST_TO_ADDR
// x := x - 1 ;
14178: LD_ADDR_VAR 0 6
14182: PUSH
14183: LD_VAR 0 6
14187: PUSH
14188: LD_INT 1
14190: MINUS
14191: ST_TO_ADDR
// if x = 0 then
14192: LD_VAR 0 6
14196: PUSH
14197: LD_INT 0
14199: EQUAL
14200: IFFALSE 14210
// x := 5 ;
14202: LD_ADDR_VAR 0 6
14206: PUSH
14207: LD_INT 5
14209: ST_TO_ADDR
// if time > 0 0$50 then
14210: LD_VAR 0 2
14214: PUSH
14215: LD_INT 1750
14217: GREATER
14218: IFFALSE 14228
// time := 0 0$25 ;
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_INT 875
14227: ST_TO_ADDR
// until not game or amount <= 0 ;
14228: LD_EXP 2
14232: NOT
14233: IFTRUE 14245
14235: PUSH
14236: LD_VAR 0 3
14240: PUSH
14241: LD_INT 0
14243: LESSEQUAL
14244: OR
14245: IFFALSE 13902
// end ; end_of_file
14247: LD_VAR 0 4
14251: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
14252: GO 14254
14254: DISABLE
14255: LD_INT 0
14257: PPUSH
// begin NorthBase := 2 ;
14258: LD_ADDR_LOC 1
14262: PUSH
14263: LD_INT 2
14265: ST_TO_ADDR
// WestBase := 3 ;
14266: LD_ADDR_LOC 2
14270: PUSH
14271: LD_INT 3
14273: ST_TO_ADDR
// end ;
14274: PPOPN 1
14276: END
// every 10 10$00 do var i ;
14277: GO 14279
14279: DISABLE
14280: LD_INT 0
14282: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: DOUBLE
14289: LD_INT 1
14291: DEC
14292: ST_TO_ADDR
14293: LD_INT 3
14295: PUSH
14296: LD_INT 4
14298: PUSH
14299: LD_INT 5
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_OWVAR 67
14311: ARRAY
14312: PUSH
14313: FOR_TO
14314: IFFALSE 14415
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14316: LD_ADDR_EXP 45
14320: PUSH
14321: LD_EXP 45
14325: PPUSH
14326: LD_EXP 45
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_LOC 1
14339: PUSH
14340: LD_INT 14
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 1
14355: PPUSH
14356: LD_INT 2
14358: PPUSH
14359: CALL_OW 12
14363: ARRAY
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: LD_INT 27
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 28
14376: PUSH
14377: LD_INT 29
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 1
14388: PPUSH
14389: LD_INT 4
14391: PPUSH
14392: CALL_OW 12
14396: ARRAY
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PPUSH
14408: CALL_OW 1
14412: ST_TO_ADDR
// end ;
14413: GO 14313
14415: POP
14416: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14417: LD_ADDR_VAR 0 1
14421: PUSH
14422: DOUBLE
14423: LD_INT 1
14425: DEC
14426: ST_TO_ADDR
14427: LD_INT 3
14429: PUSH
14430: LD_INT 4
14432: PUSH
14433: LD_INT 5
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: LD_OWVAR 67
14445: ARRAY
14446: PUSH
14447: FOR_TO
14448: IFFALSE 14530
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14450: LD_ADDR_EXP 45
14454: PUSH
14455: LD_EXP 45
14459: PPUSH
14460: LD_EXP 45
14464: PUSH
14465: LD_INT 1
14467: PLUS
14468: PPUSH
14469: LD_LOC 2
14473: PUSH
14474: LD_INT 14
14476: PUSH
14477: LD_INT 1
14479: PUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 27
14485: PUSH
14486: LD_INT 25
14488: PUSH
14489: LD_INT 28
14491: PUSH
14492: LD_INT 26
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 4
14506: PPUSH
14507: CALL_OW 12
14511: ARRAY
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 1
14527: ST_TO_ADDR
// end ;
14528: GO 14447
14530: POP
14531: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14532: LD_INT 16800
14534: PUSH
14535: LD_INT 2100
14537: PUSH
14538: LD_OWVAR 67
14542: MUL
14543: MINUS
14544: PPUSH
14545: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: DOUBLE
14555: LD_INT 1
14557: DEC
14558: ST_TO_ADDR
14559: LD_INT 5
14561: PUSH
14562: LD_INT 5
14564: PUSH
14565: LD_INT 6
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_OWVAR 67
14577: ARRAY
14578: PUSH
14579: FOR_TO
14580: IFFALSE 14681
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14582: LD_ADDR_EXP 45
14586: PUSH
14587: LD_EXP 45
14591: PPUSH
14592: LD_EXP 45
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_LOC 1
14605: PUSH
14606: LD_INT 14
14608: PUSH
14609: LD_INT 3
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 1
14621: PPUSH
14622: LD_INT 2
14624: PPUSH
14625: CALL_OW 12
14629: ARRAY
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: LD_INT 27
14636: PUSH
14637: LD_INT 25
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 29
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 1
14654: PPUSH
14655: LD_INT 4
14657: PPUSH
14658: CALL_OW 12
14662: ARRAY
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PPUSH
14674: CALL_OW 1
14678: ST_TO_ADDR
// end ;
14679: GO 14579
14681: POP
14682: POP
// if tick > 30 30$0 then
14683: LD_OWVAR 1
14687: PUSH
14688: LD_INT 63000
14690: GREATER
14691: IFFALSE 14767
// begin for i := 1 to tick div 30 30$0 do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: DOUBLE
14699: LD_INT 1
14701: DEC
14702: ST_TO_ADDR
14703: LD_OWVAR 1
14707: PUSH
14708: LD_INT 63000
14710: DIV
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14765
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14715: LD_ADDR_EXP 45
14719: PUSH
14720: LD_EXP 45
14724: PPUSH
14725: LD_EXP 45
14729: PUSH
14730: LD_INT 1
14732: PLUS
14733: PPUSH
14734: LD_LOC 1
14738: PUSH
14739: LD_INT 14
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 29
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 1
14762: ST_TO_ADDR
14763: GO 14712
14765: POP
14766: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14767: LD_ADDR_VAR 0 1
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_INT 5
14779: PUSH
14780: LD_INT 6
14782: PUSH
14783: LD_INT 6
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PUSH
14791: LD_OWVAR 67
14795: ARRAY
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14880
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14800: LD_ADDR_EXP 45
14804: PUSH
14805: LD_EXP 45
14809: PPUSH
14810: LD_EXP 45
14814: PUSH
14815: LD_INT 1
14817: PLUS
14818: PPUSH
14819: LD_LOC 2
14823: PUSH
14824: LD_INT 14
14826: PUSH
14827: LD_INT 1
14829: PUSH
14830: LD_INT 2
14832: PUSH
14833: LD_INT 27
14835: PUSH
14836: LD_INT 25
14838: PUSH
14839: LD_INT 28
14841: PUSH
14842: LD_INT 26
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 1
14853: PPUSH
14854: LD_INT 4
14856: PPUSH
14857: CALL_OW 12
14861: ARRAY
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 1
14877: ST_TO_ADDR
// end ;
14878: GO 14797
14880: POP
14881: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14882: LD_INT 21000
14884: PUSH
14885: LD_INT 18900
14887: PUSH
14888: LD_INT 16800
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: LD_OWVAR 67
14900: ARRAY
14901: PPUSH
14902: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14906: LD_ADDR_VAR 0 1
14910: PUSH
14911: DOUBLE
14912: LD_INT 1
14914: DEC
14915: ST_TO_ADDR
14916: LD_INT 5
14918: PUSH
14919: LD_INT 6
14921: PUSH
14922: LD_INT 7
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: PUSH
14930: LD_OWVAR 67
14934: ARRAY
14935: PUSH
14936: FOR_TO
14937: IFFALSE 15038
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14939: LD_ADDR_EXP 45
14943: PUSH
14944: LD_EXP 45
14948: PPUSH
14949: LD_EXP 45
14953: PUSH
14954: LD_INT 1
14956: PLUS
14957: PPUSH
14958: LD_LOC 1
14962: PUSH
14963: LD_INT 14
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: LD_INT 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 1
14978: PPUSH
14979: LD_INT 2
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: LD_INT 27
14993: PUSH
14994: LD_INT 25
14996: PUSH
14997: LD_INT 28
14999: PUSH
15000: LD_INT 29
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 1
15011: PPUSH
15012: LD_INT 4
15014: PPUSH
15015: CALL_OW 12
15019: ARRAY
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PPUSH
15031: CALL_OW 1
15035: ST_TO_ADDR
// end ;
15036: GO 14936
15038: POP
15039: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
15040: LD_ADDR_VAR 0 1
15044: PUSH
15045: DOUBLE
15046: LD_INT 1
15048: DEC
15049: ST_TO_ADDR
15050: LD_INT 4
15052: PUSH
15053: LD_INT 5
15055: PUSH
15056: LD_INT 6
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: LD_OWVAR 67
15068: ARRAY
15069: PUSH
15070: FOR_TO
15071: IFFALSE 15153
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
15073: LD_ADDR_EXP 45
15077: PUSH
15078: LD_EXP 45
15082: PPUSH
15083: LD_EXP 45
15087: PUSH
15088: LD_INT 1
15090: PLUS
15091: PPUSH
15092: LD_LOC 2
15096: PUSH
15097: LD_INT 14
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: LD_INT 27
15108: PUSH
15109: LD_INT 25
15111: PUSH
15112: LD_INT 28
15114: PUSH
15115: LD_INT 26
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 1
15126: PPUSH
15127: LD_INT 4
15129: PPUSH
15130: CALL_OW 12
15134: ARRAY
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 1
15150: ST_TO_ADDR
// end ;
15151: GO 15070
15153: POP
15154: POP
// until false ;
15155: LD_INT 0
15157: IFFALSE 14882
// end ;
15159: PPOPN 1
15161: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
15162: LD_EXP 48
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: LD_LOC 1
15174: PPUSH
15175: LD_INT 2
15177: PPUSH
15178: CALL 60203 0 4
15182: IFFALSE 15351
15184: GO 15186
15186: DISABLE
15187: LD_INT 0
15189: PPUSH
15190: PPUSH
// begin enable ;
15191: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
15192: LD_ADDR_VAR 0 2
15196: PUSH
15197: LD_EXP 48
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: LD_LOC 1
15209: PPUSH
15210: LD_INT 2
15212: PPUSH
15213: CALL 60203 0 4
15217: ST_TO_ADDR
// if not tmp then
15218: LD_VAR 0 2
15222: NOT
15223: IFFALSE 15227
// exit ;
15225: GO 15351
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15227: LD_ADDR_VAR 0 1
15231: PUSH
15232: DOUBLE
15233: LD_EXP 48
15237: PPUSH
15238: CALL 19367 0 1
15242: INC
15243: ST_TO_ADDR
15244: LD_INT 1
15246: PUSH
15247: FOR_DOWNTO
15248: IFFALSE 15294
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15250: LD_EXP 48
15254: PUSH
15255: LD_VAR 0 1
15259: ARRAY
15260: PUSH
15261: LD_INT 2
15263: ARRAY
15264: PUSH
15265: LD_VAR 0 2
15269: IN
15270: IFFALSE 15292
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15272: LD_ADDR_EXP 48
15276: PUSH
15277: LD_EXP 48
15281: PPUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 3
15291: ST_TO_ADDR
15292: GO 15247
15294: POP
15295: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_INT 164
15303: PUSH
15304: LD_INT 40
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 174
15313: PUSH
15314: LD_INT 72
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 174
15323: PUSH
15324: LD_INT 93
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 196
15333: PUSH
15334: LD_INT 110
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL 15546 0 2
// end ;
15351: PPOPN 2
15353: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15354: LD_EXP 48
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: LD_LOC 2
15366: PPUSH
15367: LD_INT 2
15369: PPUSH
15370: CALL 60203 0 4
15374: IFFALSE 15543
15376: GO 15378
15378: DISABLE
15379: LD_INT 0
15381: PPUSH
15382: PPUSH
// begin enable ;
15383: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_EXP 48
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_LOC 2
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL 60203 0 4
15409: ST_TO_ADDR
// if not tmp then
15410: LD_VAR 0 2
15414: NOT
15415: IFFALSE 15419
// exit ;
15417: GO 15543
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15419: LD_ADDR_VAR 0 1
15423: PUSH
15424: DOUBLE
15425: LD_EXP 48
15429: PPUSH
15430: CALL 19367 0 1
15434: INC
15435: ST_TO_ADDR
15436: LD_INT 1
15438: PUSH
15439: FOR_DOWNTO
15440: IFFALSE 15486
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15442: LD_EXP 48
15446: PUSH
15447: LD_VAR 0 1
15451: ARRAY
15452: PUSH
15453: LD_INT 2
15455: ARRAY
15456: PUSH
15457: LD_VAR 0 2
15461: IN
15462: IFFALSE 15484
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15464: LD_ADDR_EXP 48
15468: PUSH
15469: LD_EXP 48
15473: PPUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 3
15483: ST_TO_ADDR
15484: GO 15439
15486: POP
15487: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15488: LD_VAR 0 2
15492: PPUSH
15493: LD_INT 49
15495: PUSH
15496: LD_INT 37
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 54
15505: PUSH
15506: LD_INT 68
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 77
15515: PUSH
15516: LD_INT 91
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 95
15525: PUSH
15526: LD_INT 104
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL 15546 0 2
// end ;
15543: PPOPN 2
15545: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
// repeat wait ( 0 0$1 ) ;
15550: LD_INT 35
15552: PPUSH
15553: CALL_OW 67
// for i in attackers do
15557: LD_ADDR_VAR 0 4
15561: PUSH
15562: LD_VAR 0 1
15566: PUSH
15567: FOR_IN
15568: IFFALSE 15650
// begin if not IsOk ( i ) then
15570: LD_VAR 0 4
15574: PPUSH
15575: CALL_OW 302
15579: NOT
15580: IFFALSE 15611
// begin ComUnlink ( i ) ;
15582: LD_VAR 0 4
15586: PPUSH
15587: CALL_OW 136
// attackers := attackers diff i ;
15591: LD_ADDR_VAR 0 1
15595: PUSH
15596: LD_VAR 0 1
15600: PUSH
15601: LD_VAR 0 4
15605: DIFF
15606: ST_TO_ADDR
// continue ;
15607: GO 15567
// end else
15609: GO 15648
// if not IsControledBy ( i ) then
15611: LD_VAR 0 4
15615: PPUSH
15616: CALL_OW 312
15620: NOT
15621: IFFALSE 15634
// Connect ( i ) else
15623: LD_VAR 0 4
15627: PPUSH
15628: CALL 25645 0 1
15632: GO 15648
// AgressiveMove ( i , path ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_VAR 0 2
15643: PPUSH
15644: CALL 58109 0 2
// end ;
15648: GO 15567
15650: POP
15651: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_INT 50
15659: PUSH
15660: EMPTY
15661: LIST
15662: PPUSH
15663: CALL_OW 72
15667: NOT
15668: IFFALSE 15550
// end ;
15670: LD_VAR 0 3
15674: RET
// every 0 0$10 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and FilterAllUnits ( [ [ f_side , side_bot ] , [ f_ok ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) do var i , un , tmp , enemy ;
15675: LD_INT 7
15677: PPUSH
15678: CALL_OW 302
15682: NOT
15683: IFTRUE 15700
15685: PUSH
15686: LD_INT 7
15688: PPUSH
15689: CALL_OW 255
15693: PUSH
15694: LD_EXP 3
15698: NONEQUAL
15699: OR
15700: IFFALSE 15755
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_EXP 3
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 50
15717: PUSH
15718: EMPTY
15719: LIST
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: LD_INT 58
15726: PUSH
15727: EMPTY
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 34
15736: PUSH
15737: LD_INT 31
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: AND
15755: IFFALSE 16149
15757: GO 15759
15759: DISABLE
15760: LD_INT 0
15762: PPUSH
15763: PPUSH
15764: PPUSH
15765: PPUSH
// begin for i := 1 to 3 do
15766: LD_ADDR_VAR 0 1
15770: PUSH
15771: DOUBLE
15772: LD_INT 1
15774: DEC
15775: ST_TO_ADDR
15776: LD_INT 3
15778: PUSH
15779: FOR_TO
15780: IFFALSE 15941
// begin uc_side := 2 ;
15782: LD_ADDR_OWVAR 20
15786: PUSH
15787: LD_INT 2
15789: ST_TO_ADDR
// uc_nation := nation_arabian ;
15790: LD_ADDR_OWVAR 21
15794: PUSH
15795: LD_INT 2
15797: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15798: LD_INT 11
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: LD_INT 2
15806: PPUSH
15807: LD_INT 24
15809: PUSH
15810: LD_INT 23
15812: PUSH
15813: LD_INT 92
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_INT 3
15826: PPUSH
15827: CALL_OW 12
15831: ARRAY
15832: PPUSH
15833: LD_INT 100
15835: PPUSH
15836: CALL 22163 0 5
// un := CreateVehicle ;
15840: LD_ADDR_VAR 0 2
15844: PUSH
15845: CALL_OW 45
15849: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: LD_INT 2
15857: PPUSH
15858: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15862: LD_VAR 0 2
15866: PPUSH
15867: LD_INT 47
15869: PPUSH
15870: LD_INT 0
15872: PPUSH
15873: CALL_OW 49
// repeat Connect ( un ) ;
15877: LD_VAR 0 2
15881: PPUSH
15882: CALL 25645 0 1
// wait ( 0 0$0.3 ) ;
15886: LD_INT 10
15888: PPUSH
15889: CALL_OW 67
// until IsControledBy ( un ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 312
15902: IFFALSE 15877
// ComMoveXY ( un , 73 , 17 ) ;
15904: LD_VAR 0 2
15908: PPUSH
15909: LD_INT 73
15911: PPUSH
15912: LD_INT 17
15914: PPUSH
15915: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15919: LD_ADDR_VAR 0 3
15923: PUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_VAR 0 2
15933: PPUSH
15934: CALL 55343 0 2
15938: ST_TO_ADDR
// end ;
15939: GO 15779
15941: POP
15942: POP
// repeat wait ( 0 0$1 ) ;
15943: LD_INT 35
15945: PPUSH
15946: CALL_OW 67
// for i in tmp do
15950: LD_ADDR_VAR 0 1
15954: PUSH
15955: LD_VAR 0 3
15959: PUSH
15960: FOR_IN
15961: IFFALSE 16122
// begin if not IsOk ( i ) then
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 302
15972: NOT
15973: IFFALSE 16002
// begin ComAutodestruct ( i ) ;
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL 50650 0 1
// tmp := tmp diff i ;
15984: LD_ADDR_VAR 0 3
15988: PUSH
15989: LD_VAR 0 3
15993: PUSH
15994: LD_VAR 0 1
15998: DIFF
15999: ST_TO_ADDR
// continue ;
16000: GO 15960
// end ; if GetLives ( i ) < 750 then
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 256
16011: PUSH
16012: LD_INT 750
16014: LESS
16015: IFFALSE 16076
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_INT 81
16024: PUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 255
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PPUSH
16039: CALL_OW 69
16043: PPUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 74
16053: ST_TO_ADDR
// if enemy then
16054: LD_VAR 0 4
16058: IFFALSE 16074
// ComMoveUnit ( i , enemy ) ;
16060: LD_VAR 0 1
16064: PPUSH
16065: LD_VAR 0 4
16069: PPUSH
16070: CALL_OW 112
// end else
16074: GO 16120
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_INT 76
16083: PUSH
16084: LD_INT 31
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 93
16093: PUSH
16094: LD_INT 67
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 108
16103: PUSH
16104: LD_INT 97
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: PPUSH
16116: CALL 58109 0 2
// end ;
16120: GO 15960
16122: POP
16123: POP
// until not tmp ;
16124: LD_VAR 0 3
16128: NOT
16129: IFFALSE 15943
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
16131: LD_INT 16800
16133: PUSH
16134: LD_INT 2100
16136: PUSH
16137: LD_OWVAR 67
16141: MUL
16142: MINUS
16143: PPUSH
16144: CALL_OW 67
// enable ;
16148: ENABLE
// end ;
16149: PPOPN 4
16151: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
16152: LD_INT 7
16154: PPUSH
16155: CALL_OW 302
16159: NOT
16160: IFTRUE 16177
16162: PUSH
16163: LD_INT 7
16165: PPUSH
16166: CALL_OW 255
16170: PUSH
16171: LD_EXP 3
16175: NONEQUAL
16176: OR
16177: IFFALSE 16205
16179: PUSH
16180: LD_INT 45
16182: PPUSH
16183: CALL_OW 302
16187: IFFALSE 16204
16189: PUSH
16190: LD_INT 45
16192: PPUSH
16193: CALL_OW 255
16197: PUSH
16198: LD_EXP 3
16202: EQUAL
16203: AND
16204: AND
16205: IFFALSE 16562
16207: GO 16209
16209: DISABLE
16210: LD_INT 0
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
// begin enable ;
16216: ENABLE
// for i := 1 to 3 do
16217: LD_ADDR_VAR 0 1
16221: PUSH
16222: DOUBLE
16223: LD_INT 1
16225: DEC
16226: ST_TO_ADDR
16227: LD_INT 3
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16372
// begin uc_side := 2 ;
16233: LD_ADDR_OWVAR 20
16237: PUSH
16238: LD_INT 2
16240: ST_TO_ADDR
// uc_nation := nation_arabian ;
16241: LD_ADDR_OWVAR 21
16245: PUSH
16246: LD_INT 2
16248: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
16249: LD_INT 11
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: LD_INT 5
16257: PPUSH
16258: LD_INT 24
16260: PUSH
16261: LD_INT 23
16263: PUSH
16264: LD_INT 92
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 1
16274: PPUSH
16275: LD_INT 3
16277: PPUSH
16278: CALL_OW 12
16282: ARRAY
16283: PPUSH
16284: LD_INT 100
16286: PPUSH
16287: CALL 22163 0 5
// un := CreateVehicle ;
16291: LD_ADDR_VAR 0 2
16295: PUSH
16296: CALL_OW 45
16300: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16301: LD_VAR 0 2
16305: PPUSH
16306: LD_INT 2
16308: PPUSH
16309: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
16313: LD_VAR 0 2
16317: PPUSH
16318: LD_INT 47
16320: PPUSH
16321: LD_INT 0
16323: PPUSH
16324: CALL_OW 49
// wait ( 0 0$0.3 ) ;
16328: LD_INT 10
16330: PPUSH
16331: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
16335: LD_VAR 0 2
16339: PPUSH
16340: LD_INT 73
16342: PPUSH
16343: LD_INT 17
16345: PPUSH
16346: CALL_OW 111
// tmp := Join ( tmp , un ) ;
16350: LD_ADDR_VAR 0 3
16354: PUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_VAR 0 2
16364: PPUSH
16365: CALL 55343 0 2
16369: ST_TO_ADDR
// end ;
16370: GO 16230
16372: POP
16373: POP
// repeat wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// for i in tmp do
16381: LD_ADDR_VAR 0 1
16385: PUSH
16386: LD_VAR 0 3
16390: PUSH
16391: FOR_IN
16392: IFFALSE 16553
// begin if not IsOk ( i ) then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 302
16403: NOT
16404: IFFALSE 16433
// begin ComAutodestruct ( i ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL 50650 0 1
// tmp := tmp diff i ;
16415: LD_ADDR_VAR 0 3
16419: PUSH
16420: LD_VAR 0 3
16424: PUSH
16425: LD_VAR 0 1
16429: DIFF
16430: ST_TO_ADDR
// continue ;
16431: GO 16391
// end ; if GetLives ( i ) < 750 then
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 256
16442: PUSH
16443: LD_INT 750
16445: LESS
16446: IFFALSE 16507
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16448: LD_ADDR_VAR 0 4
16452: PUSH
16453: LD_INT 81
16455: PUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 255
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: PPUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 74
16484: ST_TO_ADDR
// if enemy then
16485: LD_VAR 0 4
16489: IFFALSE 16505
// ComMoveUnit ( i , enemy ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_VAR 0 4
16500: PPUSH
16501: CALL_OW 112
// end else
16505: GO 16551
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: LD_INT 76
16514: PUSH
16515: LD_INT 31
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 93
16524: PUSH
16525: LD_INT 67
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 108
16534: PUSH
16535: LD_INT 97
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL 58109 0 2
// end ;
16551: GO 16391
16553: POP
16554: POP
// until not tmp ;
16555: LD_VAR 0 3
16559: NOT
16560: IFFALSE 16374
// end ;
16562: PPOPN 4
16564: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16565: LD_INT 69
16567: PPUSH
16568: CALL_OW 302
16572: NOT
16573: IFTRUE 16590
16575: PUSH
16576: LD_INT 69
16578: PPUSH
16579: CALL_OW 255
16583: PUSH
16584: LD_EXP 3
16588: NONEQUAL
16589: OR
16590: IFFALSE 16851
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16601: LD_ADDR_VAR 0 1
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_INT 2
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 4
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: LD_OWVAR 67
16629: ARRAY
16630: PUSH
16631: FOR_TO
16632: IFFALSE 16723
// begin uc_side := side_bot ;
16634: LD_ADDR_OWVAR 20
16638: PUSH
16639: LD_EXP 3
16643: ST_TO_ADDR
// uc_nation := nation_nature ;
16644: LD_ADDR_OWVAR 21
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16652: CALL 51266 0 0
// hc_class := class_apeman_kamikaze ;
16656: LD_ADDR_OWVAR 28
16660: PUSH
16661: LD_INT 17
16663: ST_TO_ADDR
// un := CreateHuman ;
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: CALL_OW 44
16673: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16674: LD_VAR 0 2
16678: PPUSH
16679: LD_INT 4
16681: PPUSH
16682: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16686: LD_VAR 0 2
16690: PPUSH
16691: LD_INT 48
16693: PPUSH
16694: LD_INT 0
16696: PPUSH
16697: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_VAR 0 3
16710: PPUSH
16711: LD_VAR 0 2
16715: PPUSH
16716: CALL 55343 0 2
16720: ST_TO_ADDR
// end ;
16721: GO 16631
16723: POP
16724: POP
// repeat wait ( 0 0$1 ) ;
16725: LD_INT 35
16727: PPUSH
16728: CALL_OW 67
// for i in tmp do
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_VAR 0 3
16741: PUSH
16742: FOR_IN
16743: IFFALSE 16834
// begin if not IsOk ( i ) then
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 302
16754: NOT
16755: IFFALSE 16775
// begin tmp := tmp diff i ;
16757: LD_ADDR_VAR 0 3
16761: PUSH
16762: LD_VAR 0 3
16766: PUSH
16767: LD_VAR 0 1
16771: DIFF
16772: ST_TO_ADDR
// continue ;
16773: GO 16742
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16775: LD_ADDR_VAR 0 4
16779: PUSH
16780: LD_INT 81
16782: PUSH
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 255
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: PPUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 74
16811: ST_TO_ADDR
// if enemy then
16812: LD_VAR 0 4
16816: IFFALSE 16832
// ComAttackUnit ( i , enemy ) ;
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_VAR 0 4
16827: PPUSH
16828: CALL_OW 115
// end ;
16832: GO 16742
16834: POP
16835: POP
// until not tmp ;
16836: LD_VAR 0 3
16840: NOT
16841: IFFALSE 16725
// wait ( 10 10$00 ) ;
16843: LD_INT 21000
16845: PPUSH
16846: CALL_OW 67
// enable ;
16850: ENABLE
// end ;
16851: PPOPN 4
16853: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16854: LD_INT 45
16856: PPUSH
16857: CALL_OW 302
16861: NOT
16862: IFTRUE 16879
16864: PUSH
16865: LD_INT 45
16867: PPUSH
16868: CALL_OW 255
16872: PUSH
16873: LD_EXP 3
16877: NONEQUAL
16878: OR
16879: IFFALSE 17140
16881: GO 16883
16883: DISABLE
16884: LD_INT 0
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16890: LD_ADDR_VAR 0 1
16894: PUSH
16895: DOUBLE
16896: LD_INT 1
16898: DEC
16899: ST_TO_ADDR
16900: LD_INT 2
16902: PUSH
16903: LD_INT 3
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: LD_OWVAR 67
16918: ARRAY
16919: PUSH
16920: FOR_TO
16921: IFFALSE 17012
// begin uc_side := side_bot ;
16923: LD_ADDR_OWVAR 20
16927: PUSH
16928: LD_EXP 3
16932: ST_TO_ADDR
// uc_nation := nation_nature ;
16933: LD_ADDR_OWVAR 21
16937: PUSH
16938: LD_INT 0
16940: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16941: CALL 51266 0 0
// hc_class := class_apeman_kamikaze ;
16945: LD_ADDR_OWVAR 28
16949: PUSH
16950: LD_INT 17
16952: ST_TO_ADDR
// un := CreateHuman ;
16953: LD_ADDR_VAR 0 2
16957: PUSH
16958: CALL_OW 44
16962: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16975: LD_VAR 0 2
16979: PPUSH
16980: LD_INT 49
16982: PPUSH
16983: LD_INT 0
16985: PPUSH
16986: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16990: LD_ADDR_VAR 0 3
16994: PUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_VAR 0 2
17004: PPUSH
17005: CALL 55343 0 2
17009: ST_TO_ADDR
// end ;
17010: GO 16920
17012: POP
17013: POP
// repeat wait ( 0 0$1 ) ;
17014: LD_INT 35
17016: PPUSH
17017: CALL_OW 67
// for i in tmp do
17021: LD_ADDR_VAR 0 1
17025: PUSH
17026: LD_VAR 0 3
17030: PUSH
17031: FOR_IN
17032: IFFALSE 17123
// begin if not IsOk ( i ) then
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 302
17043: NOT
17044: IFFALSE 17064
// begin tmp := tmp diff i ;
17046: LD_ADDR_VAR 0 3
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_VAR 0 1
17060: DIFF
17061: ST_TO_ADDR
// continue ;
17062: GO 17031
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
17064: LD_ADDR_VAR 0 4
17068: PUSH
17069: LD_INT 81
17071: PUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 255
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 69
17090: PPUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 74
17100: ST_TO_ADDR
// if enemy then
17101: LD_VAR 0 4
17105: IFFALSE 17121
// ComAttackUnit ( i , enemy ) ;
17107: LD_VAR 0 1
17111: PPUSH
17112: LD_VAR 0 4
17116: PPUSH
17117: CALL_OW 115
// end ;
17121: GO 17031
17123: POP
17124: POP
// until not tmp ;
17125: LD_VAR 0 3
17129: NOT
17130: IFFALSE 17014
// wait ( 10 10$00 ) ;
17132: LD_INT 21000
17134: PPUSH
17135: CALL_OW 67
// enable ;
17139: ENABLE
// end ; end_of_file
17140: PPOPN 4
17142: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
// if exist_mode then
17147: LD_VAR 0 2
17151: IFFALSE 17197
// begin unit := CreateCharacter ( prefix & ident ) ;
17153: LD_ADDR_VAR 0 5
17157: PUSH
17158: LD_VAR 0 3
17162: PUSH
17163: LD_VAR 0 1
17167: STR
17168: PPUSH
17169: CALL_OW 34
17173: ST_TO_ADDR
// if unit then
17174: LD_VAR 0 5
17178: IFFALSE 17195
// DeleteCharacters ( prefix & ident ) ;
17180: LD_VAR 0 3
17184: PUSH
17185: LD_VAR 0 1
17189: STR
17190: PPUSH
17191: CALL_OW 40
// end else
17195: GO 17212
// unit := NewCharacter ( ident ) ;
17197: LD_ADDR_VAR 0 5
17201: PUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 25
17211: ST_TO_ADDR
// result := unit ;
17212: LD_ADDR_VAR 0 4
17216: PUSH
17217: LD_VAR 0 5
17221: ST_TO_ADDR
// end ;
17222: LD_VAR 0 4
17226: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17227: LD_INT 0
17229: PPUSH
17230: PPUSH
// if exist_mode then
17231: LD_VAR 0 2
17235: IFFALSE 17260
// unit := CreateCharacter ( prefix & ident ) else
17237: LD_ADDR_VAR 0 5
17241: PUSH
17242: LD_VAR 0 3
17246: PUSH
17247: LD_VAR 0 1
17251: STR
17252: PPUSH
17253: CALL_OW 34
17257: ST_TO_ADDR
17258: GO 17275
// unit := NewCharacter ( ident ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 25
17274: ST_TO_ADDR
// result := unit ;
17275: LD_ADDR_VAR 0 4
17279: PUSH
17280: LD_VAR 0 5
17284: ST_TO_ADDR
// end ;
17285: LD_VAR 0 4
17289: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
// if not side or not nation then
17294: LD_VAR 0 1
17298: NOT
17299: IFTRUE 17308
17301: PUSH
17302: LD_VAR 0 2
17306: NOT
17307: OR
17308: IFFALSE 17312
// exit ;
17310: GO 18106
// case nation of nation_american :
17312: LD_VAR 0 2
17316: PUSH
17317: LD_INT 1
17319: DOUBLE
17320: EQUAL
17321: IFTRUE 17325
17323: GO 17547
17325: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17326: LD_ADDR_VAR 0 4
17330: PUSH
17331: LD_INT 35
17333: PUSH
17334: LD_INT 45
17336: PUSH
17337: LD_INT 46
17339: PUSH
17340: LD_INT 47
17342: PUSH
17343: LD_INT 82
17345: PUSH
17346: LD_INT 83
17348: PUSH
17349: LD_INT 84
17351: PUSH
17352: LD_INT 85
17354: PUSH
17355: LD_INT 86
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 6
17366: PUSH
17367: LD_INT 15
17369: PUSH
17370: LD_INT 16
17372: PUSH
17373: LD_INT 7
17375: PUSH
17376: LD_INT 12
17378: PUSH
17379: LD_INT 13
17381: PUSH
17382: LD_INT 10
17384: PUSH
17385: LD_INT 14
17387: PUSH
17388: LD_INT 20
17390: PUSH
17391: LD_INT 21
17393: PUSH
17394: LD_INT 22
17396: PUSH
17397: LD_INT 25
17399: PUSH
17400: LD_INT 32
17402: PUSH
17403: LD_INT 27
17405: PUSH
17406: LD_INT 36
17408: PUSH
17409: LD_INT 69
17411: PUSH
17412: LD_INT 39
17414: PUSH
17415: LD_INT 34
17417: PUSH
17418: LD_INT 40
17420: PUSH
17421: LD_INT 48
17423: PUSH
17424: LD_INT 49
17426: PUSH
17427: LD_INT 50
17429: PUSH
17430: LD_INT 51
17432: PUSH
17433: LD_INT 52
17435: PUSH
17436: LD_INT 53
17438: PUSH
17439: LD_INT 54
17441: PUSH
17442: LD_INT 55
17444: PUSH
17445: LD_INT 56
17447: PUSH
17448: LD_INT 57
17450: PUSH
17451: LD_INT 58
17453: PUSH
17454: LD_INT 59
17456: PUSH
17457: LD_INT 60
17459: PUSH
17460: LD_INT 61
17462: PUSH
17463: LD_INT 62
17465: PUSH
17466: LD_INT 80
17468: PUSH
17469: LD_INT 82
17471: PUSH
17472: LD_INT 83
17474: PUSH
17475: LD_INT 84
17477: PUSH
17478: LD_INT 85
17480: PUSH
17481: LD_INT 86
17483: PUSH
17484: LD_INT 90
17486: PUSH
17487: LD_INT 93
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: ST_TO_ADDR
17545: GO 18028
17547: LD_INT 2
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17789
17555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17556: LD_ADDR_VAR 0 4
17560: PUSH
17561: LD_INT 35
17563: PUSH
17564: LD_INT 45
17566: PUSH
17567: LD_INT 46
17569: PUSH
17570: LD_INT 47
17572: PUSH
17573: LD_INT 82
17575: PUSH
17576: LD_INT 83
17578: PUSH
17579: LD_INT 84
17581: PUSH
17582: LD_INT 85
17584: PUSH
17585: LD_INT 87
17587: PUSH
17588: LD_INT 70
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: LD_INT 11
17596: PUSH
17597: LD_INT 3
17599: PUSH
17600: LD_INT 4
17602: PUSH
17603: LD_INT 5
17605: PUSH
17606: LD_INT 6
17608: PUSH
17609: LD_INT 15
17611: PUSH
17612: LD_INT 18
17614: PUSH
17615: LD_INT 7
17617: PUSH
17618: LD_INT 17
17620: PUSH
17621: LD_INT 8
17623: PUSH
17624: LD_INT 20
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: LD_INT 22
17632: PUSH
17633: LD_INT 72
17635: PUSH
17636: LD_INT 26
17638: PUSH
17639: LD_INT 69
17641: PUSH
17642: LD_INT 39
17644: PUSH
17645: LD_INT 40
17647: PUSH
17648: LD_INT 41
17650: PUSH
17651: LD_INT 42
17653: PUSH
17654: LD_INT 43
17656: PUSH
17657: LD_INT 48
17659: PUSH
17660: LD_INT 49
17662: PUSH
17663: LD_INT 50
17665: PUSH
17666: LD_INT 51
17668: PUSH
17669: LD_INT 52
17671: PUSH
17672: LD_INT 53
17674: PUSH
17675: LD_INT 54
17677: PUSH
17678: LD_INT 55
17680: PUSH
17681: LD_INT 56
17683: PUSH
17684: LD_INT 60
17686: PUSH
17687: LD_INT 61
17689: PUSH
17690: LD_INT 62
17692: PUSH
17693: LD_INT 66
17695: PUSH
17696: LD_INT 67
17698: PUSH
17699: LD_INT 68
17701: PUSH
17702: LD_INT 81
17704: PUSH
17705: LD_INT 82
17707: PUSH
17708: LD_INT 83
17710: PUSH
17711: LD_INT 84
17713: PUSH
17714: LD_INT 85
17716: PUSH
17717: LD_INT 87
17719: PUSH
17720: LD_INT 88
17722: PUSH
17723: LD_INT 92
17725: PUSH
17726: LD_INT 94
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: ST_TO_ADDR
17787: GO 18028
17789: LD_INT 3
17791: DOUBLE
17792: EQUAL
17793: IFTRUE 17797
17795: GO 18027
17797: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
17798: LD_ADDR_VAR 0 4
17802: PUSH
17803: LD_INT 46
17805: PUSH
17806: LD_INT 47
17808: PUSH
17809: LD_INT 1
17811: PUSH
17812: LD_INT 2
17814: PUSH
17815: LD_INT 82
17817: PUSH
17818: LD_INT 83
17820: PUSH
17821: LD_INT 84
17823: PUSH
17824: LD_INT 85
17826: PUSH
17827: LD_INT 86
17829: PUSH
17830: LD_INT 11
17832: PUSH
17833: LD_INT 9
17835: PUSH
17836: LD_INT 20
17838: PUSH
17839: LD_INT 19
17841: PUSH
17842: LD_INT 21
17844: PUSH
17845: LD_INT 24
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 28
17856: PUSH
17857: LD_INT 29
17859: PUSH
17860: LD_INT 30
17862: PUSH
17863: LD_INT 31
17865: PUSH
17866: LD_INT 37
17868: PUSH
17869: LD_INT 38
17871: PUSH
17872: LD_INT 32
17874: PUSH
17875: LD_INT 27
17877: PUSH
17878: LD_INT 33
17880: PUSH
17881: LD_INT 69
17883: PUSH
17884: LD_INT 39
17886: PUSH
17887: LD_INT 34
17889: PUSH
17890: LD_INT 40
17892: PUSH
17893: LD_INT 71
17895: PUSH
17896: LD_INT 23
17898: PUSH
17899: LD_INT 44
17901: PUSH
17902: LD_INT 48
17904: PUSH
17905: LD_INT 49
17907: PUSH
17908: LD_INT 50
17910: PUSH
17911: LD_INT 51
17913: PUSH
17914: LD_INT 52
17916: PUSH
17917: LD_INT 53
17919: PUSH
17920: LD_INT 54
17922: PUSH
17923: LD_INT 55
17925: PUSH
17926: LD_INT 56
17928: PUSH
17929: LD_INT 57
17931: PUSH
17932: LD_INT 58
17934: PUSH
17935: LD_INT 59
17937: PUSH
17938: LD_INT 63
17940: PUSH
17941: LD_INT 64
17943: PUSH
17944: LD_INT 65
17946: PUSH
17947: LD_INT 82
17949: PUSH
17950: LD_INT 83
17952: PUSH
17953: LD_INT 84
17955: PUSH
17956: LD_INT 85
17958: PUSH
17959: LD_INT 86
17961: PUSH
17962: LD_INT 89
17964: PUSH
17965: LD_INT 91
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: ST_TO_ADDR
18025: GO 18028
18027: POP
// if state > - 1 and state < 3 then
18028: LD_VAR 0 3
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: GREATER
18037: IFFALSE 18049
18039: PUSH
18040: LD_VAR 0 3
18044: PUSH
18045: LD_INT 3
18047: LESS
18048: AND
18049: IFFALSE 18106
// for i in result do
18051: LD_ADDR_VAR 0 5
18055: PUSH
18056: LD_VAR 0 4
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18104
// if GetTech ( i , side ) <> state then
18064: LD_VAR 0 5
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 321
18078: PUSH
18079: LD_VAR 0 3
18083: NONEQUAL
18084: IFFALSE 18102
// result := result diff i ;
18086: LD_ADDR_VAR 0 4
18090: PUSH
18091: LD_VAR 0 4
18095: PUSH
18096: LD_VAR 0 5
18100: DIFF
18101: ST_TO_ADDR
18102: GO 18061
18104: POP
18105: POP
// end ;
18106: LD_VAR 0 4
18110: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18111: LD_INT 0
18113: PPUSH
18114: PPUSH
18115: PPUSH
// result := true ;
18116: LD_ADDR_VAR 0 3
18120: PUSH
18121: LD_INT 1
18123: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18124: LD_ADDR_VAR 0 5
18128: PUSH
18129: LD_VAR 0 2
18133: PPUSH
18134: CALL_OW 480
18138: ST_TO_ADDR
// if not tmp then
18139: LD_VAR 0 5
18143: NOT
18144: IFFALSE 18148
// exit ;
18146: GO 18197
// for i in tmp do
18148: LD_ADDR_VAR 0 4
18152: PUSH
18153: LD_VAR 0 5
18157: PUSH
18158: FOR_IN
18159: IFFALSE 18195
// if GetTech ( i , side ) <> state_researched then
18161: LD_VAR 0 4
18165: PPUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 321
18175: PUSH
18176: LD_INT 2
18178: NONEQUAL
18179: IFFALSE 18193
// begin result := false ;
18181: LD_ADDR_VAR 0 3
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// exit ;
18189: POP
18190: POP
18191: GO 18197
// end ;
18193: GO 18158
18195: POP
18196: POP
// end ;
18197: LD_VAR 0 3
18201: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18202: LD_INT 0
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18217: LD_VAR 0 1
18221: NOT
18222: IFTRUE 18239
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 257
18234: PUSH
18235: LD_INT 9
18237: NONEQUAL
18238: OR
18239: IFFALSE 18243
// exit ;
18241: GO 18822
// side := GetSide ( unit ) ;
18243: LD_ADDR_VAR 0 9
18247: PUSH
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 255
18257: ST_TO_ADDR
// tech_space := tech_spacanom ;
18258: LD_ADDR_VAR 0 12
18262: PUSH
18263: LD_INT 29
18265: ST_TO_ADDR
// tech_time := tech_taurad ;
18266: LD_ADDR_VAR 0 13
18270: PUSH
18271: LD_INT 28
18273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18274: LD_ADDR_VAR 0 11
18278: PUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 310
18288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18289: LD_VAR 0 11
18293: PPUSH
18294: CALL_OW 247
18298: PUSH
18299: LD_INT 2
18301: EQUAL
18302: IFFALSE 18306
// exit ;
18304: GO 18822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18306: LD_ADDR_VAR 0 8
18310: PUSH
18311: LD_INT 81
18313: PUSH
18314: LD_VAR 0 9
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 3
18325: PUSH
18326: LD_INT 21
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PPUSH
18344: CALL_OW 69
18348: ST_TO_ADDR
// if not tmp then
18349: LD_VAR 0 8
18353: NOT
18354: IFFALSE 18358
// exit ;
18356: GO 18822
// if in_unit then
18358: LD_VAR 0 11
18362: IFFALSE 18386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18364: LD_ADDR_VAR 0 10
18368: PUSH
18369: LD_VAR 0 8
18373: PPUSH
18374: LD_VAR 0 11
18378: PPUSH
18379: CALL_OW 74
18383: ST_TO_ADDR
18384: GO 18406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18386: LD_ADDR_VAR 0 10
18390: PUSH
18391: LD_VAR 0 8
18395: PPUSH
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 74
18405: ST_TO_ADDR
// if not enemy then
18406: LD_VAR 0 10
18410: NOT
18411: IFFALSE 18415
// exit ;
18413: GO 18822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18415: LD_VAR 0 11
18419: IFFALSE 18441
18421: PUSH
18422: LD_VAR 0 11
18426: PPUSH
18427: LD_VAR 0 10
18431: PPUSH
18432: CALL_OW 296
18436: PUSH
18437: LD_INT 13
18439: GREATER
18440: AND
18441: IFTRUE 18463
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_VAR 0 10
18453: PPUSH
18454: CALL_OW 296
18458: PUSH
18459: LD_INT 12
18461: GREATER
18462: OR
18463: IFFALSE 18467
// exit ;
18465: GO 18822
// missile := [ 1 ] ;
18467: LD_ADDR_VAR 0 14
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: EMPTY
18476: LIST
18477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18478: LD_VAR 0 9
18482: PPUSH
18483: LD_VAR 0 12
18487: PPUSH
18488: CALL_OW 325
18492: IFFALSE 18521
// missile := Replace ( missile , missile + 1 , 2 ) ;
18494: LD_ADDR_VAR 0 14
18498: PUSH
18499: LD_VAR 0 14
18503: PPUSH
18504: LD_VAR 0 14
18508: PUSH
18509: LD_INT 1
18511: PLUS
18512: PPUSH
18513: LD_INT 2
18515: PPUSH
18516: CALL_OW 1
18520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18521: LD_VAR 0 9
18525: PPUSH
18526: LD_VAR 0 13
18530: PPUSH
18531: CALL_OW 325
18535: IFFALSE 18559
18537: PUSH
18538: LD_VAR 0 10
18542: PPUSH
18543: CALL_OW 255
18547: PPUSH
18548: LD_VAR 0 13
18552: PPUSH
18553: CALL_OW 325
18557: NOT
18558: AND
18559: IFFALSE 18588
// missile := Replace ( missile , missile + 1 , 3 ) ;
18561: LD_ADDR_VAR 0 14
18565: PUSH
18566: LD_VAR 0 14
18570: PPUSH
18571: LD_VAR 0 14
18575: PUSH
18576: LD_INT 1
18578: PLUS
18579: PPUSH
18580: LD_INT 3
18582: PPUSH
18583: CALL_OW 1
18587: ST_TO_ADDR
// if missile < 2 then
18588: LD_VAR 0 14
18592: PUSH
18593: LD_INT 2
18595: LESS
18596: IFFALSE 18600
// exit ;
18598: GO 18822
// x := GetX ( enemy ) ;
18600: LD_ADDR_VAR 0 4
18604: PUSH
18605: LD_VAR 0 10
18609: PPUSH
18610: CALL_OW 250
18614: ST_TO_ADDR
// y := GetY ( enemy ) ;
18615: LD_ADDR_VAR 0 5
18619: PUSH
18620: LD_VAR 0 10
18624: PPUSH
18625: CALL_OW 251
18629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18630: LD_ADDR_VAR 0 6
18634: PUSH
18635: LD_VAR 0 4
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 12
18651: PLUS
18652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18653: LD_ADDR_VAR 0 7
18657: PUSH
18658: LD_VAR 0 5
18662: PUSH
18663: LD_INT 1
18665: NEG
18666: PPUSH
18667: LD_INT 1
18669: PPUSH
18670: CALL_OW 12
18674: PLUS
18675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18676: LD_VAR 0 6
18680: PPUSH
18681: LD_VAR 0 7
18685: PPUSH
18686: CALL_OW 488
18690: NOT
18691: IFFALSE 18713
// begin _x := x ;
18693: LD_ADDR_VAR 0 6
18697: PUSH
18698: LD_VAR 0 4
18702: ST_TO_ADDR
// _y := y ;
18703: LD_ADDR_VAR 0 7
18707: PUSH
18708: LD_VAR 0 5
18712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18713: LD_ADDR_VAR 0 3
18717: PUSH
18718: LD_INT 1
18720: PPUSH
18721: LD_VAR 0 14
18725: PPUSH
18726: CALL_OW 12
18730: ST_TO_ADDR
// case i of 1 :
18731: LD_VAR 0 3
18735: PUSH
18736: LD_INT 1
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18761
18744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18745: LD_VAR 0 1
18749: PPUSH
18750: LD_VAR 0 10
18754: PPUSH
18755: CALL_OW 115
18759: GO 18822
18761: LD_INT 2
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18791
18769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18770: LD_VAR 0 1
18774: PPUSH
18775: LD_VAR 0 6
18779: PPUSH
18780: LD_VAR 0 7
18784: PPUSH
18785: CALL_OW 153
18789: GO 18822
18791: LD_INT 3
18793: DOUBLE
18794: EQUAL
18795: IFTRUE 18799
18797: GO 18821
18799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_VAR 0 6
18809: PPUSH
18810: LD_VAR 0 7
18814: PPUSH
18815: CALL_OW 154
18819: GO 18822
18821: POP
// end ;
18822: LD_VAR 0 2
18826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18827: LD_INT 0
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
// if not unit or not building then
18835: LD_VAR 0 1
18839: NOT
18840: IFTRUE 18849
18842: PUSH
18843: LD_VAR 0 2
18847: NOT
18848: OR
18849: IFFALSE 18853
// exit ;
18851: GO 19011
// x := GetX ( building ) ;
18853: LD_ADDR_VAR 0 5
18857: PUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: CALL_OW 250
18867: ST_TO_ADDR
// y := GetY ( building ) ;
18868: LD_ADDR_VAR 0 6
18872: PUSH
18873: LD_VAR 0 2
18877: PPUSH
18878: CALL_OW 251
18882: ST_TO_ADDR
// for i := 0 to 5 do
18883: LD_ADDR_VAR 0 4
18887: PUSH
18888: DOUBLE
18889: LD_INT 0
18891: DEC
18892: ST_TO_ADDR
18893: LD_INT 5
18895: PUSH
18896: FOR_TO
18897: IFFALSE 19009
// begin _x := ShiftX ( x , i , 3 ) ;
18899: LD_ADDR_VAR 0 7
18903: PUSH
18904: LD_VAR 0 5
18908: PPUSH
18909: LD_VAR 0 4
18913: PPUSH
18914: LD_INT 3
18916: PPUSH
18917: CALL_OW 272
18921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18922: LD_ADDR_VAR 0 8
18926: PUSH
18927: LD_VAR 0 6
18931: PPUSH
18932: LD_VAR 0 4
18936: PPUSH
18937: LD_INT 3
18939: PPUSH
18940: CALL_OW 273
18944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18945: LD_VAR 0 7
18949: PPUSH
18950: LD_VAR 0 8
18954: PPUSH
18955: CALL_OW 488
18959: NOT
18960: IFFALSE 18964
// continue ;
18962: GO 18896
// if HexInfo ( _x , _y ) = 0 then
18964: LD_VAR 0 7
18968: PPUSH
18969: LD_VAR 0 8
18973: PPUSH
18974: CALL_OW 428
18978: PUSH
18979: LD_INT 0
18981: EQUAL
18982: IFFALSE 19007
// begin ComMoveXY ( unit , _x , _y ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_VAR 0 7
18993: PPUSH
18994: LD_VAR 0 8
18998: PPUSH
18999: CALL_OW 111
// exit ;
19003: POP
19004: POP
19005: GO 19011
// end ; end ;
19007: GO 18896
19009: POP
19010: POP
// end ;
19011: LD_VAR 0 3
19015: RET
// export function ScanBase ( side , base_area ) ; begin
19016: LD_INT 0
19018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19019: LD_ADDR_VAR 0 3
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_INT 81
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL_OW 70
19045: ST_TO_ADDR
// end ;
19046: LD_VAR 0 3
19050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19051: LD_INT 0
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
// result := false ;
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 0
19064: ST_TO_ADDR
// side := GetSide ( unit ) ;
19065: LD_ADDR_VAR 0 3
19069: PUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: CALL_OW 255
19079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19080: LD_ADDR_VAR 0 4
19084: PUSH
19085: LD_VAR 0 1
19089: PPUSH
19090: CALL_OW 248
19094: ST_TO_ADDR
// case nat of 1 :
19095: LD_VAR 0 4
19099: PUSH
19100: LD_INT 1
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19119
19108: POP
// tech := tech_lassight ; 2 :
19109: LD_ADDR_VAR 0 5
19113: PUSH
19114: LD_INT 12
19116: ST_TO_ADDR
19117: GO 19158
19119: LD_INT 2
19121: DOUBLE
19122: EQUAL
19123: IFTRUE 19127
19125: GO 19138
19127: POP
// tech := tech_mortar ; 3 :
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_INT 41
19135: ST_TO_ADDR
19136: GO 19158
19138: LD_INT 3
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19157
19146: POP
// tech := tech_bazooka ; end ;
19147: LD_ADDR_VAR 0 5
19151: PUSH
19152: LD_INT 44
19154: ST_TO_ADDR
19155: GO 19158
19157: POP
// if Researched ( side , tech ) then
19158: LD_VAR 0 3
19162: PPUSH
19163: LD_VAR 0 5
19167: PPUSH
19168: CALL_OW 325
19172: IFFALSE 19199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19174: LD_ADDR_VAR 0 2
19178: PUSH
19179: LD_INT 5
19181: PUSH
19182: LD_INT 8
19184: PUSH
19185: LD_INT 9
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: PUSH
19193: LD_VAR 0 4
19197: ARRAY
19198: ST_TO_ADDR
// end ;
19199: LD_VAR 0 2
19203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
19208: PPUSH
// if not mines then
19209: LD_VAR 0 2
19213: NOT
19214: IFFALSE 19218
// exit ;
19216: GO 19362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19218: LD_ADDR_VAR 0 5
19222: PUSH
19223: LD_INT 81
19225: PUSH
19226: LD_VAR 0 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 3
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 3
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 69
19260: ST_TO_ADDR
// for i in mines do
19261: LD_ADDR_VAR 0 4
19265: PUSH
19266: LD_VAR 0 2
19270: PUSH
19271: FOR_IN
19272: IFFALSE 19360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19274: LD_VAR 0 4
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: LD_VAR 0 4
19287: PUSH
19288: LD_INT 2
19290: ARRAY
19291: PPUSH
19292: CALL_OW 458
19296: NOT
19297: IFFALSE 19301
// continue ;
19299: GO 19271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19301: LD_VAR 0 4
19305: PUSH
19306: LD_INT 1
19308: ARRAY
19309: PPUSH
19310: LD_VAR 0 4
19314: PUSH
19315: LD_INT 2
19317: ARRAY
19318: PPUSH
19319: CALL_OW 428
19323: PUSH
19324: LD_VAR 0 5
19328: IN
19329: IFFALSE 19358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19331: LD_VAR 0 4
19335: PUSH
19336: LD_INT 1
19338: ARRAY
19339: PPUSH
19340: LD_VAR 0 4
19344: PUSH
19345: LD_INT 2
19347: ARRAY
19348: PPUSH
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL_OW 456
// end ;
19358: GO 19271
19360: POP
19361: POP
// end ;
19362: LD_VAR 0 3
19366: RET
// export function Count ( array ) ; begin
19367: LD_INT 0
19369: PPUSH
// result := array + 0 ;
19370: LD_ADDR_VAR 0 2
19374: PUSH
19375: LD_VAR 0 1
19379: PUSH
19380: LD_INT 0
19382: PLUS
19383: ST_TO_ADDR
// end ;
19384: LD_VAR 0 2
19388: RET
// export function IsEmpty ( building ) ; begin
19389: LD_INT 0
19391: PPUSH
// if not building then
19392: LD_VAR 0 1
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19444
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 255
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 58
19430: PUSH
19431: EMPTY
19432: LIST
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PPUSH
19438: CALL_OW 69
19442: IN
19443: ST_TO_ADDR
// end ;
19444: LD_VAR 0 2
19448: RET
// export function IsNotFull ( building ) ; var places ; begin
19449: LD_INT 0
19451: PPUSH
19452: PPUSH
// if not building then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 19490
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19462: LD_ADDR_VAR 0 2
19466: PUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: LD_INT 3
19474: PUSH
19475: LD_INT 62
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 72
19489: ST_TO_ADDR
// end ;
19490: LD_VAR 0 2
19494: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
// tmp := [ ] ;
19501: LD_ADDR_VAR 0 3
19505: PUSH
19506: EMPTY
19507: ST_TO_ADDR
// list := [ ] ;
19508: LD_ADDR_VAR 0 5
19512: PUSH
19513: EMPTY
19514: ST_TO_ADDR
// for i = 16 to 25 do
19515: LD_ADDR_VAR 0 4
19519: PUSH
19520: DOUBLE
19521: LD_INT 16
19523: DEC
19524: ST_TO_ADDR
19525: LD_INT 25
19527: PUSH
19528: FOR_TO
19529: IFFALSE 19602
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 22
19543: PUSH
19544: LD_VAR 0 1
19548: PPUSH
19549: CALL_OW 255
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 91
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 6
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_VAR 0 4
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: ADD
19599: ST_TO_ADDR
19600: GO 19528
19602: POP
19603: POP
// for i = 1 to tmp do
19604: LD_ADDR_VAR 0 4
19608: PUSH
19609: DOUBLE
19610: LD_INT 1
19612: DEC
19613: ST_TO_ADDR
19614: LD_VAR 0 3
19618: PUSH
19619: FOR_TO
19620: IFFALSE 19708
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19622: LD_ADDR_VAR 0 5
19626: PUSH
19627: LD_VAR 0 5
19631: PUSH
19632: LD_VAR 0 3
19636: PUSH
19637: LD_VAR 0 4
19641: ARRAY
19642: PPUSH
19643: CALL_OW 266
19647: PUSH
19648: LD_VAR 0 3
19652: PUSH
19653: LD_VAR 0 4
19657: ARRAY
19658: PPUSH
19659: CALL_OW 250
19663: PUSH
19664: LD_VAR 0 3
19668: PUSH
19669: LD_VAR 0 4
19673: ARRAY
19674: PPUSH
19675: CALL_OW 251
19679: PUSH
19680: LD_VAR 0 3
19684: PUSH
19685: LD_VAR 0 4
19689: ARRAY
19690: PPUSH
19691: CALL_OW 254
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: ADD
19705: ST_TO_ADDR
19706: GO 19619
19708: POP
19709: POP
// result := list ;
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_VAR 0 5
19719: ST_TO_ADDR
// end ;
19720: LD_VAR 0 2
19724: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19725: LD_INT 0
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
// if not factory then
19734: LD_VAR 0 1
19738: NOT
19739: IFFALSE 19743
// exit ;
19741: GO 20346
// if control = control_apeman then
19743: LD_VAR 0 4
19747: PUSH
19748: LD_INT 5
19750: EQUAL
19751: IFFALSE 19860
// begin tmp := UnitsInside ( factory ) ;
19753: LD_ADDR_VAR 0 8
19757: PUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 313
19767: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19768: LD_VAR 0 8
19772: PPUSH
19773: LD_INT 25
19775: PUSH
19776: LD_INT 12
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PPUSH
19783: CALL_OW 72
19787: NOT
19788: IFFALSE 19798
// control := control_manual ;
19790: LD_ADDR_VAR 0 4
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19798: LD_ADDR_VAR 0 8
19802: PUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL 19495 0 1
19812: ST_TO_ADDR
// if tmp then
19813: LD_VAR 0 8
19817: IFFALSE 19860
// begin for i in tmp do
19819: LD_ADDR_VAR 0 7
19823: PUSH
19824: LD_VAR 0 8
19828: PUSH
19829: FOR_IN
19830: IFFALSE 19858
// if i [ 1 ] = b_ext_radio then
19832: LD_VAR 0 7
19836: PUSH
19837: LD_INT 1
19839: ARRAY
19840: PUSH
19841: LD_INT 22
19843: EQUAL
19844: IFFALSE 19856
// begin control := control_remote ;
19846: LD_ADDR_VAR 0 4
19850: PUSH
19851: LD_INT 2
19853: ST_TO_ADDR
// break ;
19854: GO 19858
// end ;
19856: GO 19829
19858: POP
19859: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: LD_VAR 0 4
19879: PPUSH
19880: LD_VAR 0 5
19884: PPUSH
19885: CALL_OW 448
19889: IFFALSE 19924
// begin result := [ chassis , engine , control , weapon ] ;
19891: LD_ADDR_VAR 0 6
19895: PUSH
19896: LD_VAR 0 2
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: LD_VAR 0 4
19910: PUSH
19911: LD_VAR 0 5
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
// exit ;
19922: GO 20346
// end ; _chassis := AvailableChassisList ( factory ) ;
19924: LD_ADDR_VAR 0 9
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 475
19938: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19939: LD_ADDR_VAR 0 11
19943: PUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 476
19953: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19954: LD_ADDR_VAR 0 12
19958: PUSH
19959: LD_VAR 0 1
19963: PPUSH
19964: CALL_OW 477
19968: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19969: LD_ADDR_VAR 0 10
19973: PUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 478
19983: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19984: LD_VAR 0 9
19988: NOT
19989: IFTRUE 19998
19991: PUSH
19992: LD_VAR 0 11
19996: NOT
19997: OR
19998: IFTRUE 20007
20000: PUSH
20001: LD_VAR 0 12
20005: NOT
20006: OR
20007: IFTRUE 20016
20009: PUSH
20010: LD_VAR 0 10
20014: NOT
20015: OR
20016: IFFALSE 20051
// begin result := [ chassis , engine , control , weapon ] ;
20018: LD_ADDR_VAR 0 6
20022: PUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_VAR 0 3
20032: PUSH
20033: LD_VAR 0 4
20037: PUSH
20038: LD_VAR 0 5
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: ST_TO_ADDR
// exit ;
20049: GO 20346
// end ; if not chassis in _chassis then
20051: LD_VAR 0 2
20055: PUSH
20056: LD_VAR 0 9
20060: IN
20061: NOT
20062: IFFALSE 20088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20064: LD_ADDR_VAR 0 2
20068: PUSH
20069: LD_VAR 0 9
20073: PUSH
20074: LD_INT 1
20076: PPUSH
20077: LD_VAR 0 9
20081: PPUSH
20082: CALL_OW 12
20086: ARRAY
20087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20088: LD_VAR 0 2
20092: PPUSH
20093: LD_VAR 0 3
20097: PPUSH
20098: CALL 20351 0 2
20102: NOT
20103: IFFALSE 20164
// repeat engine := _engine [ 1 ] ;
20105: LD_ADDR_VAR 0 3
20109: PUSH
20110: LD_VAR 0 11
20114: PUSH
20115: LD_INT 1
20117: ARRAY
20118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20119: LD_ADDR_VAR 0 11
20123: PUSH
20124: LD_VAR 0 11
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 3
20136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20137: LD_VAR 0 2
20141: PPUSH
20142: LD_VAR 0 3
20146: PPUSH
20147: CALL 20351 0 2
20151: IFTRUE 20162
20153: PUSH
20154: LD_VAR 0 11
20158: PUSH
20159: EMPTY
20160: EQUAL
20161: OR
20162: IFFALSE 20105
// if not control in _control then
20164: LD_VAR 0 4
20168: PUSH
20169: LD_VAR 0 12
20173: IN
20174: NOT
20175: IFFALSE 20201
// control := _control [ rand ( 1 , _control ) ] ;
20177: LD_ADDR_VAR 0 4
20181: PUSH
20182: LD_VAR 0 12
20186: PUSH
20187: LD_INT 1
20189: PPUSH
20190: LD_VAR 0 12
20194: PPUSH
20195: CALL_OW 12
20199: ARRAY
20200: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20201: LD_VAR 0 2
20205: PPUSH
20206: LD_VAR 0 5
20210: PPUSH
20211: CALL 20573 0 2
20215: NOT
20216: IFFALSE 20277
// repeat weapon := _weapon [ 1 ] ;
20218: LD_ADDR_VAR 0 5
20222: PUSH
20223: LD_VAR 0 10
20227: PUSH
20228: LD_INT 1
20230: ARRAY
20231: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20232: LD_ADDR_VAR 0 10
20236: PUSH
20237: LD_VAR 0 10
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 3
20249: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20250: LD_VAR 0 2
20254: PPUSH
20255: LD_VAR 0 5
20259: PPUSH
20260: CALL 20573 0 2
20264: IFTRUE 20275
20266: PUSH
20267: LD_VAR 0 10
20271: PUSH
20272: EMPTY
20273: EQUAL
20274: OR
20275: IFFALSE 20218
// result := [ ] ;
20277: LD_ADDR_VAR 0 6
20281: PUSH
20282: EMPTY
20283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_VAR 0 2
20293: PPUSH
20294: LD_VAR 0 3
20298: PPUSH
20299: LD_VAR 0 4
20303: PPUSH
20304: LD_VAR 0 5
20308: PPUSH
20309: CALL_OW 448
20313: IFFALSE 20346
// result := [ chassis , engine , control , weapon ] ;
20315: LD_ADDR_VAR 0 6
20319: PUSH
20320: LD_VAR 0 2
20324: PUSH
20325: LD_VAR 0 3
20329: PUSH
20330: LD_VAR 0 4
20334: PUSH
20335: LD_VAR 0 5
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: ST_TO_ADDR
// end ;
20346: LD_VAR 0 6
20350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20351: LD_INT 0
20353: PPUSH
// if not chassis or not engine then
20354: LD_VAR 0 1
20358: NOT
20359: IFTRUE 20368
20361: PUSH
20362: LD_VAR 0 2
20366: NOT
20367: OR
20368: IFFALSE 20372
// exit ;
20370: GO 20568
// case engine of engine_solar :
20372: LD_VAR 0 2
20376: PUSH
20377: LD_INT 2
20379: DOUBLE
20380: EQUAL
20381: IFTRUE 20385
20383: GO 20423
20385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: LD_INT 11
20393: PUSH
20394: LD_INT 12
20396: PUSH
20397: LD_INT 13
20399: PUSH
20400: LD_INT 14
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: ST_TO_ADDR
20421: GO 20552
20423: LD_INT 1
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20493
20431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_INT 11
20439: PUSH
20440: LD_INT 12
20442: PUSH
20443: LD_INT 13
20445: PUSH
20446: LD_INT 14
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 4
20460: PUSH
20461: LD_INT 5
20463: PUSH
20464: LD_INT 21
20466: PUSH
20467: LD_INT 23
20469: PUSH
20470: LD_INT 22
20472: PUSH
20473: LD_INT 24
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: ST_TO_ADDR
20491: GO 20552
20493: LD_INT 3
20495: DOUBLE
20496: EQUAL
20497: IFTRUE 20501
20499: GO 20551
20501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20502: LD_ADDR_VAR 0 3
20506: PUSH
20507: LD_INT 13
20509: PUSH
20510: LD_INT 14
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: LD_INT 4
20521: PUSH
20522: LD_INT 5
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 24
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
20549: GO 20552
20551: POP
// result := ( chassis in result ) ;
20552: LD_ADDR_VAR 0 3
20556: PUSH
20557: LD_VAR 0 1
20561: PUSH
20562: LD_VAR 0 3
20566: IN
20567: ST_TO_ADDR
// end ;
20568: LD_VAR 0 3
20572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20573: LD_INT 0
20575: PPUSH
// if not chassis or not weapon then
20576: LD_VAR 0 1
20580: NOT
20581: IFTRUE 20590
20583: PUSH
20584: LD_VAR 0 2
20588: NOT
20589: OR
20590: IFFALSE 20594
// exit ;
20592: GO 21688
// case weapon of us_machine_gun :
20594: LD_VAR 0 2
20598: PUSH
20599: LD_INT 2
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20637
20607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20608: LD_ADDR_VAR 0 3
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: LD_INT 4
20624: PUSH
20625: LD_INT 5
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 21672
20637: LD_INT 3
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20675
20645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 3
20659: PUSH
20660: LD_INT 4
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: ST_TO_ADDR
20673: GO 21672
20675: LD_INT 11
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20713
20683: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20684: LD_ADDR_VAR 0 3
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 3
20697: PUSH
20698: LD_INT 4
20700: PUSH
20701: LD_INT 5
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: ST_TO_ADDR
20711: GO 21672
20713: LD_INT 4
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20747
20721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 3
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: LD_INT 5
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 21672
20747: LD_INT 5
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20781
20755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20756: LD_ADDR_VAR 0 3
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
20779: GO 21672
20781: LD_INT 9
20783: DOUBLE
20784: EQUAL
20785: IFTRUE 20789
20787: GO 20815
20789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20790: LD_ADDR_VAR 0 3
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: LD_INT 4
20803: PUSH
20804: LD_INT 5
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: ST_TO_ADDR
20813: GO 21672
20815: LD_INT 7
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20849
20823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: LD_INT 4
20837: PUSH
20838: LD_INT 5
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: ST_TO_ADDR
20847: GO 21672
20849: LD_INT 12
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20883
20857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20858: LD_ADDR_VAR 0 3
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: LD_INT 4
20871: PUSH
20872: LD_INT 5
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: ST_TO_ADDR
20881: GO 21672
20883: LD_INT 13
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20917
20891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: LD_INT 3
20902: PUSH
20903: LD_INT 4
20905: PUSH
20906: LD_INT 5
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
20915: GO 21672
20917: LD_INT 14
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20943
20925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: ST_TO_ADDR
20941: GO 21672
20943: LD_INT 6
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20969
20951: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20952: LD_ADDR_VAR 0 3
20956: PUSH
20957: LD_INT 4
20959: PUSH
20960: LD_INT 5
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: ST_TO_ADDR
20967: GO 21672
20969: LD_INT 10
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 20995
20977: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20978: LD_ADDR_VAR 0 3
20982: PUSH
20983: LD_INT 4
20985: PUSH
20986: LD_INT 5
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: ST_TO_ADDR
20993: GO 21672
20995: LD_INT 22
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21029
21003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: LD_INT 11
21011: PUSH
21012: LD_INT 12
21014: PUSH
21015: LD_INT 13
21017: PUSH
21018: LD_INT 14
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
21027: GO 21672
21029: LD_INT 23
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21063
21037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21038: LD_ADDR_VAR 0 3
21042: PUSH
21043: LD_INT 11
21045: PUSH
21046: LD_INT 12
21048: PUSH
21049: LD_INT 13
21051: PUSH
21052: LD_INT 14
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: ST_TO_ADDR
21061: GO 21672
21063: LD_INT 24
21065: DOUBLE
21066: EQUAL
21067: IFTRUE 21071
21069: GO 21097
21071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21072: LD_ADDR_VAR 0 3
21076: PUSH
21077: LD_INT 11
21079: PUSH
21080: LD_INT 12
21082: PUSH
21083: LD_INT 13
21085: PUSH
21086: LD_INT 14
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: ST_TO_ADDR
21095: GO 21672
21097: LD_INT 30
21099: DOUBLE
21100: EQUAL
21101: IFTRUE 21105
21103: GO 21131
21105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21106: LD_ADDR_VAR 0 3
21110: PUSH
21111: LD_INT 11
21113: PUSH
21114: LD_INT 12
21116: PUSH
21117: LD_INT 13
21119: PUSH
21120: LD_INT 14
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: ST_TO_ADDR
21129: GO 21672
21131: LD_INT 25
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21157
21139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_INT 13
21147: PUSH
21148: LD_INT 14
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: ST_TO_ADDR
21155: GO 21672
21157: LD_INT 27
21159: DOUBLE
21160: EQUAL
21161: IFTRUE 21165
21163: GO 21183
21165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21166: LD_ADDR_VAR 0 3
21170: PUSH
21171: LD_INT 13
21173: PUSH
21174: LD_INT 14
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: ST_TO_ADDR
21181: GO 21672
21183: LD_INT 92
21185: DOUBLE
21186: EQUAL
21187: IFTRUE 21191
21189: GO 21217
21191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21192: LD_ADDR_VAR 0 3
21196: PUSH
21197: LD_INT 11
21199: PUSH
21200: LD_INT 12
21202: PUSH
21203: LD_INT 13
21205: PUSH
21206: LD_INT 14
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: ST_TO_ADDR
21215: GO 21672
21217: LD_INT 28
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21243
21225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21226: LD_ADDR_VAR 0 3
21230: PUSH
21231: LD_INT 13
21233: PUSH
21234: LD_INT 14
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: ST_TO_ADDR
21241: GO 21672
21243: LD_INT 29
21245: DOUBLE
21246: EQUAL
21247: IFTRUE 21251
21249: GO 21269
21251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21252: LD_ADDR_VAR 0 3
21256: PUSH
21257: LD_INT 13
21259: PUSH
21260: LD_INT 14
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: ST_TO_ADDR
21267: GO 21672
21269: LD_INT 31
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21295
21277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21278: LD_ADDR_VAR 0 3
21282: PUSH
21283: LD_INT 13
21285: PUSH
21286: LD_INT 14
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: ST_TO_ADDR
21293: GO 21672
21295: LD_INT 26
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21321
21303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: LD_INT 13
21311: PUSH
21312: LD_INT 14
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: ST_TO_ADDR
21319: GO 21672
21321: LD_INT 42
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21355
21329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21330: LD_ADDR_VAR 0 3
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 22
21340: PUSH
21341: LD_INT 23
21343: PUSH
21344: LD_INT 24
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: ST_TO_ADDR
21353: GO 21672
21355: LD_INT 43
21357: DOUBLE
21358: EQUAL
21359: IFTRUE 21363
21361: GO 21389
21363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21364: LD_ADDR_VAR 0 3
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 22
21374: PUSH
21375: LD_INT 23
21377: PUSH
21378: LD_INT 24
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: ST_TO_ADDR
21387: GO 21672
21389: LD_INT 44
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21423
21397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21398: LD_ADDR_VAR 0 3
21402: PUSH
21403: LD_INT 21
21405: PUSH
21406: LD_INT 22
21408: PUSH
21409: LD_INT 23
21411: PUSH
21412: LD_INT 24
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: ST_TO_ADDR
21421: GO 21672
21423: LD_INT 45
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21457
21431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21432: LD_ADDR_VAR 0 3
21436: PUSH
21437: LD_INT 21
21439: PUSH
21440: LD_INT 22
21442: PUSH
21443: LD_INT 23
21445: PUSH
21446: LD_INT 24
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: ST_TO_ADDR
21455: GO 21672
21457: LD_INT 49
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21491
21465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_INT 21
21473: PUSH
21474: LD_INT 22
21476: PUSH
21477: LD_INT 23
21479: PUSH
21480: LD_INT 24
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: ST_TO_ADDR
21489: GO 21672
21491: LD_INT 51
21493: DOUBLE
21494: EQUAL
21495: IFTRUE 21499
21497: GO 21525
21499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21500: LD_ADDR_VAR 0 3
21504: PUSH
21505: LD_INT 21
21507: PUSH
21508: LD_INT 22
21510: PUSH
21511: LD_INT 23
21513: PUSH
21514: LD_INT 24
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: ST_TO_ADDR
21523: GO 21672
21525: LD_INT 52
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21559
21533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21534: LD_ADDR_VAR 0 3
21538: PUSH
21539: LD_INT 21
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_INT 23
21547: PUSH
21548: LD_INT 24
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: ST_TO_ADDR
21557: GO 21672
21559: LD_INT 53
21561: DOUBLE
21562: EQUAL
21563: IFTRUE 21567
21565: GO 21585
21567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21568: LD_ADDR_VAR 0 3
21572: PUSH
21573: LD_INT 23
21575: PUSH
21576: LD_INT 24
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: ST_TO_ADDR
21583: GO 21672
21585: LD_INT 46
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21611
21593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21594: LD_ADDR_VAR 0 3
21598: PUSH
21599: LD_INT 23
21601: PUSH
21602: LD_INT 24
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: ST_TO_ADDR
21609: GO 21672
21611: LD_INT 47
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21637
21619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
21620: LD_ADDR_VAR 0 3
21624: PUSH
21625: LD_INT 23
21627: PUSH
21628: LD_INT 24
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: ST_TO_ADDR
21635: GO 21672
21637: LD_INT 98
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21671
21645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21646: LD_ADDR_VAR 0 3
21650: PUSH
21651: LD_INT 21
21653: PUSH
21654: LD_INT 22
21656: PUSH
21657: LD_INT 23
21659: PUSH
21660: LD_INT 24
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: ST_TO_ADDR
21669: GO 21672
21671: POP
// result := ( chassis in result ) ;
21672: LD_ADDR_VAR 0 3
21676: PUSH
21677: LD_VAR 0 1
21681: PUSH
21682: LD_VAR 0 3
21686: IN
21687: ST_TO_ADDR
// end ;
21688: LD_VAR 0 3
21692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21693: LD_INT 0
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
// result := array ;
21702: LD_ADDR_VAR 0 5
21706: PUSH
21707: LD_VAR 0 1
21711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21712: LD_VAR 0 1
21716: NOT
21717: IFTRUE 21726
21719: PUSH
21720: LD_VAR 0 2
21724: NOT
21725: OR
21726: IFTRUE 21735
21728: PUSH
21729: LD_VAR 0 3
21733: NOT
21734: OR
21735: IFTRUE 21749
21737: PUSH
21738: LD_VAR 0 2
21742: PUSH
21743: LD_VAR 0 1
21747: GREATER
21748: OR
21749: IFTRUE 21763
21751: PUSH
21752: LD_VAR 0 3
21756: PUSH
21757: LD_VAR 0 1
21761: GREATER
21762: OR
21763: IFFALSE 21767
// exit ;
21765: GO 22063
// if direction then
21767: LD_VAR 0 4
21771: IFFALSE 21835
// begin d := 1 ;
21773: LD_ADDR_VAR 0 9
21777: PUSH
21778: LD_INT 1
21780: ST_TO_ADDR
// if i_from > i_to then
21781: LD_VAR 0 2
21785: PUSH
21786: LD_VAR 0 3
21790: GREATER
21791: IFFALSE 21817
// length := ( array - i_from ) + i_to else
21793: LD_ADDR_VAR 0 11
21797: PUSH
21798: LD_VAR 0 1
21802: PUSH
21803: LD_VAR 0 2
21807: MINUS
21808: PUSH
21809: LD_VAR 0 3
21813: PLUS
21814: ST_TO_ADDR
21815: GO 21833
// length := i_to - i_from ;
21817: LD_ADDR_VAR 0 11
21821: PUSH
21822: LD_VAR 0 3
21826: PUSH
21827: LD_VAR 0 2
21831: MINUS
21832: ST_TO_ADDR
// end else
21833: GO 21896
// begin d := - 1 ;
21835: LD_ADDR_VAR 0 9
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: ST_TO_ADDR
// if i_from > i_to then
21844: LD_VAR 0 2
21848: PUSH
21849: LD_VAR 0 3
21853: GREATER
21854: IFFALSE 21874
// length := i_from - i_to else
21856: LD_ADDR_VAR 0 11
21860: PUSH
21861: LD_VAR 0 2
21865: PUSH
21866: LD_VAR 0 3
21870: MINUS
21871: ST_TO_ADDR
21872: GO 21896
// length := ( array - i_to ) + i_from ;
21874: LD_ADDR_VAR 0 11
21878: PUSH
21879: LD_VAR 0 1
21883: PUSH
21884: LD_VAR 0 3
21888: MINUS
21889: PUSH
21890: LD_VAR 0 2
21894: PLUS
21895: ST_TO_ADDR
// end ; if not length then
21896: LD_VAR 0 11
21900: NOT
21901: IFFALSE 21905
// exit ;
21903: GO 22063
// tmp := array ;
21905: LD_ADDR_VAR 0 10
21909: PUSH
21910: LD_VAR 0 1
21914: ST_TO_ADDR
// for i = 1 to length do
21915: LD_ADDR_VAR 0 6
21919: PUSH
21920: DOUBLE
21921: LD_INT 1
21923: DEC
21924: ST_TO_ADDR
21925: LD_VAR 0 11
21929: PUSH
21930: FOR_TO
21931: IFFALSE 22051
// begin for j = 1 to array do
21933: LD_ADDR_VAR 0 7
21937: PUSH
21938: DOUBLE
21939: LD_INT 1
21941: DEC
21942: ST_TO_ADDR
21943: LD_VAR 0 1
21947: PUSH
21948: FOR_TO
21949: IFFALSE 22037
// begin k := j + d ;
21951: LD_ADDR_VAR 0 8
21955: PUSH
21956: LD_VAR 0 7
21960: PUSH
21961: LD_VAR 0 9
21965: PLUS
21966: ST_TO_ADDR
// if k > array then
21967: LD_VAR 0 8
21971: PUSH
21972: LD_VAR 0 1
21976: GREATER
21977: IFFALSE 21987
// k := 1 ;
21979: LD_ADDR_VAR 0 8
21983: PUSH
21984: LD_INT 1
21986: ST_TO_ADDR
// if not k then
21987: LD_VAR 0 8
21991: NOT
21992: IFFALSE 22004
// k := array ;
21994: LD_ADDR_VAR 0 8
21998: PUSH
21999: LD_VAR 0 1
22003: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22004: LD_ADDR_VAR 0 10
22008: PUSH
22009: LD_VAR 0 10
22013: PPUSH
22014: LD_VAR 0 8
22018: PPUSH
22019: LD_VAR 0 1
22023: PUSH
22024: LD_VAR 0 7
22028: ARRAY
22029: PPUSH
22030: CALL_OW 1
22034: ST_TO_ADDR
// end ;
22035: GO 21948
22037: POP
22038: POP
// array := tmp ;
22039: LD_ADDR_VAR 0 1
22043: PUSH
22044: LD_VAR 0 10
22048: ST_TO_ADDR
// end ;
22049: GO 21930
22051: POP
22052: POP
// result := array ;
22053: LD_ADDR_VAR 0 5
22057: PUSH
22058: LD_VAR 0 1
22062: ST_TO_ADDR
// end ;
22063: LD_VAR 0 5
22067: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
// result := 0 ;
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// if not array or not value in array then
22080: LD_VAR 0 1
22084: NOT
22085: IFTRUE 22100
22087: PUSH
22088: LD_VAR 0 2
22092: PUSH
22093: LD_VAR 0 1
22097: IN
22098: NOT
22099: OR
22100: IFFALSE 22104
// exit ;
22102: GO 22158
// for i = 1 to array do
22104: LD_ADDR_VAR 0 4
22108: PUSH
22109: DOUBLE
22110: LD_INT 1
22112: DEC
22113: ST_TO_ADDR
22114: LD_VAR 0 1
22118: PUSH
22119: FOR_TO
22120: IFFALSE 22156
// if value = array [ i ] then
22122: LD_VAR 0 2
22126: PUSH
22127: LD_VAR 0 1
22131: PUSH
22132: LD_VAR 0 4
22136: ARRAY
22137: EQUAL
22138: IFFALSE 22154
// begin result := i ;
22140: LD_ADDR_VAR 0 3
22144: PUSH
22145: LD_VAR 0 4
22149: ST_TO_ADDR
// exit ;
22150: POP
22151: POP
22152: GO 22158
// end ;
22154: GO 22119
22156: POP
22157: POP
// end ;
22158: LD_VAR 0 3
22162: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22163: LD_INT 0
22165: PPUSH
// vc_chassis := chassis ;
22166: LD_ADDR_OWVAR 37
22170: PUSH
22171: LD_VAR 0 1
22175: ST_TO_ADDR
// vc_engine := engine ;
22176: LD_ADDR_OWVAR 39
22180: PUSH
22181: LD_VAR 0 2
22185: ST_TO_ADDR
// vc_control := control ;
22186: LD_ADDR_OWVAR 38
22190: PUSH
22191: LD_VAR 0 3
22195: ST_TO_ADDR
// vc_weapon := weapon ;
22196: LD_ADDR_OWVAR 40
22200: PUSH
22201: LD_VAR 0 4
22205: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22206: LD_ADDR_OWVAR 41
22210: PUSH
22211: LD_VAR 0 5
22215: ST_TO_ADDR
// end ;
22216: LD_VAR 0 6
22220: RET
// export function WantPlant ( unit ) ; var task ; begin
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
// result := false ;
22225: LD_ADDR_VAR 0 2
22229: PUSH
22230: LD_INT 0
22232: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22233: LD_ADDR_VAR 0 3
22237: PUSH
22238: LD_VAR 0 1
22242: PPUSH
22243: CALL_OW 437
22247: ST_TO_ADDR
// if task then
22248: LD_VAR 0 3
22252: IFFALSE 22280
// if task [ 1 ] [ 1 ] = p then
22254: LD_VAR 0 3
22258: PUSH
22259: LD_INT 1
22261: ARRAY
22262: PUSH
22263: LD_INT 1
22265: ARRAY
22266: PUSH
22267: LD_STRING p
22269: EQUAL
22270: IFFALSE 22280
// result := true ;
22272: LD_ADDR_VAR 0 2
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// end ;
22280: LD_VAR 0 2
22284: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22285: LD_INT 0
22287: PPUSH
22288: PPUSH
22289: PPUSH
22290: PPUSH
// if pos < 1 then
22291: LD_VAR 0 2
22295: PUSH
22296: LD_INT 1
22298: LESS
22299: IFFALSE 22303
// exit ;
22301: GO 22606
// if pos = 1 then
22303: LD_VAR 0 2
22307: PUSH
22308: LD_INT 1
22310: EQUAL
22311: IFFALSE 22344
// result := Replace ( arr , pos [ 1 ] , value ) else
22313: LD_ADDR_VAR 0 4
22317: PUSH
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_VAR 0 2
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: PPUSH
22332: LD_VAR 0 3
22336: PPUSH
22337: CALL_OW 1
22341: ST_TO_ADDR
22342: GO 22606
// begin tmp := arr ;
22344: LD_ADDR_VAR 0 6
22348: PUSH
22349: LD_VAR 0 1
22353: ST_TO_ADDR
// s_arr := [ tmp ] ;
22354: LD_ADDR_VAR 0 7
22358: PUSH
22359: LD_VAR 0 6
22363: PUSH
22364: EMPTY
22365: LIST
22366: ST_TO_ADDR
// for i = 1 to pos - 1 do
22367: LD_ADDR_VAR 0 5
22371: PUSH
22372: DOUBLE
22373: LD_INT 1
22375: DEC
22376: ST_TO_ADDR
22377: LD_VAR 0 2
22381: PUSH
22382: LD_INT 1
22384: MINUS
22385: PUSH
22386: FOR_TO
22387: IFFALSE 22432
// begin tmp := tmp [ pos [ i ] ] ;
22389: LD_ADDR_VAR 0 6
22393: PUSH
22394: LD_VAR 0 6
22398: PUSH
22399: LD_VAR 0 2
22403: PUSH
22404: LD_VAR 0 5
22408: ARRAY
22409: ARRAY
22410: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22411: LD_ADDR_VAR 0 7
22415: PUSH
22416: LD_VAR 0 7
22420: PUSH
22421: LD_VAR 0 6
22425: PUSH
22426: EMPTY
22427: LIST
22428: ADD
22429: ST_TO_ADDR
// end ;
22430: GO 22386
22432: POP
22433: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22434: LD_ADDR_VAR 0 6
22438: PUSH
22439: LD_VAR 0 6
22443: PPUSH
22444: LD_VAR 0 2
22448: PUSH
22449: LD_VAR 0 2
22453: ARRAY
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: CALL_OW 1
22464: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22465: LD_ADDR_VAR 0 7
22469: PUSH
22470: LD_VAR 0 7
22474: PPUSH
22475: LD_VAR 0 7
22479: PPUSH
22480: LD_VAR 0 6
22484: PPUSH
22485: CALL_OW 1
22489: ST_TO_ADDR
// for i = s_arr downto 2 do
22490: LD_ADDR_VAR 0 5
22494: PUSH
22495: DOUBLE
22496: LD_VAR 0 7
22500: INC
22501: ST_TO_ADDR
22502: LD_INT 2
22504: PUSH
22505: FOR_DOWNTO
22506: IFFALSE 22590
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22508: LD_ADDR_VAR 0 6
22512: PUSH
22513: LD_VAR 0 7
22517: PUSH
22518: LD_VAR 0 5
22522: PUSH
22523: LD_INT 1
22525: MINUS
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 2
22532: PUSH
22533: LD_VAR 0 5
22537: PUSH
22538: LD_INT 1
22540: MINUS
22541: ARRAY
22542: PPUSH
22543: LD_VAR 0 7
22547: PUSH
22548: LD_VAR 0 5
22552: ARRAY
22553: PPUSH
22554: CALL_OW 1
22558: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22559: LD_ADDR_VAR 0 7
22563: PUSH
22564: LD_VAR 0 7
22568: PPUSH
22569: LD_VAR 0 5
22573: PUSH
22574: LD_INT 1
22576: MINUS
22577: PPUSH
22578: LD_VAR 0 6
22582: PPUSH
22583: CALL_OW 1
22587: ST_TO_ADDR
// end ;
22588: GO 22505
22590: POP
22591: POP
// result := s_arr [ 1 ] ;
22592: LD_ADDR_VAR 0 4
22596: PUSH
22597: LD_VAR 0 7
22601: PUSH
22602: LD_INT 1
22604: ARRAY
22605: ST_TO_ADDR
// end ; end ;
22606: LD_VAR 0 4
22610: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22611: LD_INT 0
22613: PPUSH
22614: PPUSH
// if not list then
22615: LD_VAR 0 1
22619: NOT
22620: IFFALSE 22624
// exit ;
22622: GO 22715
// i := list [ pos1 ] ;
22624: LD_ADDR_VAR 0 5
22628: PUSH
22629: LD_VAR 0 1
22633: PUSH
22634: LD_VAR 0 2
22638: ARRAY
22639: ST_TO_ADDR
// if not i then
22640: LD_VAR 0 5
22644: NOT
22645: IFFALSE 22649
// exit ;
22647: GO 22715
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22649: LD_ADDR_VAR 0 1
22653: PUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: LD_VAR 0 2
22663: PPUSH
22664: LD_VAR 0 1
22668: PUSH
22669: LD_VAR 0 3
22673: ARRAY
22674: PPUSH
22675: CALL_OW 1
22679: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22680: LD_ADDR_VAR 0 1
22684: PUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: LD_VAR 0 5
22699: PPUSH
22700: CALL_OW 1
22704: ST_TO_ADDR
// result := list ;
22705: LD_ADDR_VAR 0 4
22709: PUSH
22710: LD_VAR 0 1
22714: ST_TO_ADDR
// end ;
22715: LD_VAR 0 4
22719: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22720: LD_INT 0
22722: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22723: LD_ADDR_VAR 0 5
22727: PUSH
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL_OW 250
22737: PPUSH
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 251
22747: PPUSH
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_VAR 0 4
22762: PPUSH
22763: CALL 23145 0 5
22767: ST_TO_ADDR
// end ;
22768: LD_VAR 0 5
22772: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22773: LD_INT 0
22775: PPUSH
22776: PPUSH
22777: PPUSH
22778: PPUSH
// if not list or not unit then
22779: LD_VAR 0 2
22783: NOT
22784: IFTRUE 22793
22786: PUSH
22787: LD_VAR 0 1
22791: NOT
22792: OR
22793: IFFALSE 22797
// exit ;
22795: GO 23140
// result := [ ] ;
22797: LD_ADDR_VAR 0 5
22801: PUSH
22802: EMPTY
22803: ST_TO_ADDR
// for i in list do
22804: LD_ADDR_VAR 0 6
22808: PUSH
22809: LD_VAR 0 2
22813: PUSH
22814: FOR_IN
22815: IFFALSE 23033
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22817: LD_ADDR_VAR 0 8
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_VAR 0 6
22831: PUSH
22832: LD_INT 1
22834: ARRAY
22835: PPUSH
22836: LD_VAR 0 6
22840: PUSH
22841: LD_INT 2
22843: ARRAY
22844: PPUSH
22845: CALL_OW 297
22849: ST_TO_ADDR
// if not Count ( result ) then
22850: LD_VAR 0 5
22854: PPUSH
22855: CALL 19367 0 1
22859: NOT
22860: IFFALSE 22893
// begin result := Join ( result , [ i , tmp ] ) ;
22862: LD_ADDR_VAR 0 5
22866: PUSH
22867: LD_VAR 0 5
22871: PPUSH
22872: LD_VAR 0 6
22876: PUSH
22877: LD_VAR 0 8
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL 55343 0 2
22890: ST_TO_ADDR
// continue ;
22891: GO 22814
// end ; if result [ result ] [ 2 ] <= tmp then
22893: LD_VAR 0 5
22897: PUSH
22898: LD_VAR 0 5
22902: ARRAY
22903: PUSH
22904: LD_INT 2
22906: ARRAY
22907: PUSH
22908: LD_VAR 0 8
22912: LESSEQUAL
22913: IFFALSE 22946
// result := Join ( result , [ i , tmp ] ) else
22915: LD_ADDR_VAR 0 5
22919: PUSH
22920: LD_VAR 0 5
22924: PPUSH
22925: LD_VAR 0 6
22929: PUSH
22930: LD_VAR 0 8
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PPUSH
22939: CALL 55343 0 2
22943: ST_TO_ADDR
22944: GO 23031
// begin for j := 1 to Count ( result ) do
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: DOUBLE
22952: LD_INT 1
22954: DEC
22955: ST_TO_ADDR
22956: LD_VAR 0 5
22960: PPUSH
22961: CALL 19367 0 1
22965: PUSH
22966: FOR_TO
22967: IFFALSE 23029
// begin if tmp < result [ j ] [ 2 ] then
22969: LD_VAR 0 8
22973: PUSH
22974: LD_VAR 0 5
22978: PUSH
22979: LD_VAR 0 7
22983: ARRAY
22984: PUSH
22985: LD_INT 2
22987: ARRAY
22988: LESS
22989: IFFALSE 23027
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22991: LD_ADDR_VAR 0 5
22995: PUSH
22996: LD_VAR 0 5
23000: PPUSH
23001: LD_VAR 0 7
23005: PPUSH
23006: LD_VAR 0 6
23010: PUSH
23011: LD_VAR 0 8
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PPUSH
23020: CALL_OW 2
23024: ST_TO_ADDR
// break ;
23025: GO 23029
// end ; end ;
23027: GO 22966
23029: POP
23030: POP
// end ; end ;
23031: GO 22814
23033: POP
23034: POP
// if result and not asc then
23035: LD_VAR 0 5
23039: IFFALSE 23048
23041: PUSH
23042: LD_VAR 0 3
23046: NOT
23047: AND
23048: IFFALSE 23065
// result := ReverseArray ( result ) ;
23050: LD_ADDR_VAR 0 5
23054: PUSH
23055: LD_VAR 0 5
23059: PPUSH
23060: CALL 50423 0 1
23064: ST_TO_ADDR
// tmp := [ ] ;
23065: LD_ADDR_VAR 0 8
23069: PUSH
23070: EMPTY
23071: ST_TO_ADDR
// if mode then
23072: LD_VAR 0 4
23076: IFFALSE 23140
// begin for i := 1 to result do
23078: LD_ADDR_VAR 0 6
23082: PUSH
23083: DOUBLE
23084: LD_INT 1
23086: DEC
23087: ST_TO_ADDR
23088: LD_VAR 0 5
23092: PUSH
23093: FOR_TO
23094: IFFALSE 23128
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23096: LD_ADDR_VAR 0 8
23100: PUSH
23101: LD_VAR 0 8
23105: PPUSH
23106: LD_VAR 0 5
23110: PUSH
23111: LD_VAR 0 6
23115: ARRAY
23116: PUSH
23117: LD_INT 1
23119: ARRAY
23120: PPUSH
23121: CALL 55343 0 2
23125: ST_TO_ADDR
23126: GO 23093
23128: POP
23129: POP
// result := tmp ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_VAR 0 8
23139: ST_TO_ADDR
// end ; end ;
23140: LD_VAR 0 5
23144: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23145: LD_INT 0
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
// if not list then
23151: LD_VAR 0 3
23155: NOT
23156: IFFALSE 23160
// exit ;
23158: GO 23550
// result := [ ] ;
23160: LD_ADDR_VAR 0 6
23164: PUSH
23165: EMPTY
23166: ST_TO_ADDR
// for i in list do
23167: LD_ADDR_VAR 0 7
23171: PUSH
23172: LD_VAR 0 3
23176: PUSH
23177: FOR_IN
23178: IFFALSE 23380
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23180: LD_ADDR_VAR 0 9
23184: PUSH
23185: LD_VAR 0 7
23189: PPUSH
23190: LD_VAR 0 1
23194: PPUSH
23195: LD_VAR 0 2
23199: PPUSH
23200: CALL_OW 297
23204: ST_TO_ADDR
// if not result then
23205: LD_VAR 0 6
23209: NOT
23210: IFFALSE 23236
// result := [ [ i , tmp ] ] else
23212: LD_ADDR_VAR 0 6
23216: PUSH
23217: LD_VAR 0 7
23221: PUSH
23222: LD_VAR 0 9
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: ST_TO_ADDR
23234: GO 23378
// begin if result [ result ] [ 2 ] <= tmp then
23236: LD_VAR 0 6
23240: PUSH
23241: LD_VAR 0 6
23245: ARRAY
23246: PUSH
23247: LD_INT 2
23249: ARRAY
23250: PUSH
23251: LD_VAR 0 9
23255: LESSEQUAL
23256: IFFALSE 23298
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23258: LD_ADDR_VAR 0 6
23262: PUSH
23263: LD_VAR 0 6
23267: PPUSH
23268: LD_VAR 0 6
23272: PUSH
23273: LD_INT 1
23275: PLUS
23276: PPUSH
23277: LD_VAR 0 7
23281: PUSH
23282: LD_VAR 0 9
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PPUSH
23291: CALL_OW 2
23295: ST_TO_ADDR
23296: GO 23378
// for j := 1 to result do
23298: LD_ADDR_VAR 0 8
23302: PUSH
23303: DOUBLE
23304: LD_INT 1
23306: DEC
23307: ST_TO_ADDR
23308: LD_VAR 0 6
23312: PUSH
23313: FOR_TO
23314: IFFALSE 23376
// begin if tmp < result [ j ] [ 2 ] then
23316: LD_VAR 0 9
23320: PUSH
23321: LD_VAR 0 6
23325: PUSH
23326: LD_VAR 0 8
23330: ARRAY
23331: PUSH
23332: LD_INT 2
23334: ARRAY
23335: LESS
23336: IFFALSE 23374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23338: LD_ADDR_VAR 0 6
23342: PUSH
23343: LD_VAR 0 6
23347: PPUSH
23348: LD_VAR 0 8
23352: PPUSH
23353: LD_VAR 0 7
23357: PUSH
23358: LD_VAR 0 9
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 2
23371: ST_TO_ADDR
// break ;
23372: GO 23376
// end ; end ;
23374: GO 23313
23376: POP
23377: POP
// end ; end ;
23378: GO 23177
23380: POP
23381: POP
// if result and not asc then
23382: LD_VAR 0 6
23386: IFFALSE 23395
23388: PUSH
23389: LD_VAR 0 4
23393: NOT
23394: AND
23395: IFFALSE 23470
// begin tmp := result ;
23397: LD_ADDR_VAR 0 9
23401: PUSH
23402: LD_VAR 0 6
23406: ST_TO_ADDR
// for i = tmp downto 1 do
23407: LD_ADDR_VAR 0 7
23411: PUSH
23412: DOUBLE
23413: LD_VAR 0 9
23417: INC
23418: ST_TO_ADDR
23419: LD_INT 1
23421: PUSH
23422: FOR_DOWNTO
23423: IFFALSE 23468
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23425: LD_ADDR_VAR 0 6
23429: PUSH
23430: LD_VAR 0 6
23434: PPUSH
23435: LD_VAR 0 9
23439: PUSH
23440: LD_VAR 0 7
23444: MINUS
23445: PUSH
23446: LD_INT 1
23448: PLUS
23449: PPUSH
23450: LD_VAR 0 9
23454: PUSH
23455: LD_VAR 0 7
23459: ARRAY
23460: PPUSH
23461: CALL_OW 1
23465: ST_TO_ADDR
23466: GO 23422
23468: POP
23469: POP
// end ; tmp := [ ] ;
23470: LD_ADDR_VAR 0 9
23474: PUSH
23475: EMPTY
23476: ST_TO_ADDR
// if mode then
23477: LD_VAR 0 5
23481: IFFALSE 23550
// begin for i = 1 to result do
23483: LD_ADDR_VAR 0 7
23487: PUSH
23488: DOUBLE
23489: LD_INT 1
23491: DEC
23492: ST_TO_ADDR
23493: LD_VAR 0 6
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23538
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23501: LD_ADDR_VAR 0 9
23505: PUSH
23506: LD_VAR 0 9
23510: PPUSH
23511: LD_VAR 0 7
23515: PPUSH
23516: LD_VAR 0 6
23520: PUSH
23521: LD_VAR 0 7
23525: ARRAY
23526: PUSH
23527: LD_INT 1
23529: ARRAY
23530: PPUSH
23531: CALL_OW 1
23535: ST_TO_ADDR
23536: GO 23498
23538: POP
23539: POP
// result := tmp ;
23540: LD_ADDR_VAR 0 6
23544: PUSH
23545: LD_VAR 0 9
23549: ST_TO_ADDR
// end ; end ;
23550: LD_VAR 0 6
23554: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
23559: PPUSH
23560: PPUSH
23561: PPUSH
23562: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23563: LD_ADDR_VAR 0 5
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: ST_TO_ADDR
// if not x or not y then
23585: LD_VAR 0 2
23589: NOT
23590: IFTRUE 23599
23592: PUSH
23593: LD_VAR 0 3
23597: NOT
23598: OR
23599: IFFALSE 23603
// exit ;
23601: GO 25259
// if not range then
23603: LD_VAR 0 4
23607: NOT
23608: IFFALSE 23618
// range := 10 ;
23610: LD_ADDR_VAR 0 4
23614: PUSH
23615: LD_INT 10
23617: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23618: LD_ADDR_VAR 0 8
23622: PUSH
23623: LD_INT 81
23625: PUSH
23626: LD_VAR 0 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 92
23637: PUSH
23638: LD_VAR 0 2
23642: PUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_VAR 0 4
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 21
23664: PUSH
23665: LD_INT 3
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: ST_TO_ADDR
// if not tmp then
23686: LD_VAR 0 8
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 25259
// for i in tmp do
23695: LD_ADDR_VAR 0 6
23699: PUSH
23700: LD_VAR 0 8
23704: PUSH
23705: FOR_IN
23706: IFFALSE 25234
// begin points := [ 0 , 0 , 0 ] ;
23708: LD_ADDR_VAR 0 9
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: ST_TO_ADDR
// bpoints := 1 ;
23727: LD_ADDR_VAR 0 10
23731: PUSH
23732: LD_INT 1
23734: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23735: LD_VAR 0 6
23739: PPUSH
23740: CALL_OW 247
23744: PUSH
23745: LD_INT 1
23747: DOUBLE
23748: EQUAL
23749: IFTRUE 23753
23751: GO 24335
23753: POP
// begin if GetClass ( i ) = 1 then
23754: LD_VAR 0 6
23758: PPUSH
23759: CALL_OW 257
23763: PUSH
23764: LD_INT 1
23766: EQUAL
23767: IFFALSE 23788
// points := [ 10 , 5 , 3 ] ;
23769: LD_ADDR_VAR 0 9
23773: PUSH
23774: LD_INT 10
23776: PUSH
23777: LD_INT 5
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23788: LD_VAR 0 6
23792: PPUSH
23793: CALL_OW 257
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: LD_INT 4
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: IN
23812: IFFALSE 23833
// points := [ 3 , 2 , 1 ] ;
23814: LD_ADDR_VAR 0 9
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23833: LD_VAR 0 6
23837: PPUSH
23838: CALL_OW 257
23842: PUSH
23843: LD_INT 5
23845: EQUAL
23846: IFFALSE 23867
// points := [ 130 , 5 , 2 ] ;
23848: LD_ADDR_VAR 0 9
23852: PUSH
23853: LD_INT 130
23855: PUSH
23856: LD_INT 5
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23867: LD_VAR 0 6
23871: PPUSH
23872: CALL_OW 257
23876: PUSH
23877: LD_INT 8
23879: EQUAL
23880: IFFALSE 23901
// points := [ 35 , 35 , 30 ] ;
23882: LD_ADDR_VAR 0 9
23886: PUSH
23887: LD_INT 35
23889: PUSH
23890: LD_INT 35
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23901: LD_VAR 0 6
23905: PPUSH
23906: CALL_OW 257
23910: PUSH
23911: LD_INT 9
23913: EQUAL
23914: IFFALSE 23935
// points := [ 20 , 55 , 40 ] ;
23916: LD_ADDR_VAR 0 9
23920: PUSH
23921: LD_INT 20
23923: PUSH
23924: LD_INT 55
23926: PUSH
23927: LD_INT 40
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23935: LD_VAR 0 6
23939: PPUSH
23940: CALL_OW 257
23944: PUSH
23945: LD_INT 12
23947: PUSH
23948: LD_INT 16
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: IN
23955: IFFALSE 23976
// points := [ 5 , 3 , 2 ] ;
23957: LD_ADDR_VAR 0 9
23961: PUSH
23962: LD_INT 5
23964: PUSH
23965: LD_INT 3
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23976: LD_VAR 0 6
23980: PPUSH
23981: CALL_OW 257
23985: PUSH
23986: LD_INT 17
23988: EQUAL
23989: IFFALSE 24010
// points := [ 100 , 50 , 75 ] ;
23991: LD_ADDR_VAR 0 9
23995: PUSH
23996: LD_INT 100
23998: PUSH
23999: LD_INT 50
24001: PUSH
24002: LD_INT 75
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24010: LD_VAR 0 6
24014: PPUSH
24015: CALL_OW 257
24019: PUSH
24020: LD_INT 15
24022: EQUAL
24023: IFFALSE 24044
// points := [ 10 , 5 , 3 ] ;
24025: LD_ADDR_VAR 0 9
24029: PUSH
24030: LD_INT 10
24032: PUSH
24033: LD_INT 5
24035: PUSH
24036: LD_INT 3
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24044: LD_VAR 0 6
24048: PPUSH
24049: CALL_OW 257
24053: PUSH
24054: LD_INT 14
24056: EQUAL
24057: IFFALSE 24078
// points := [ 10 , 0 , 0 ] ;
24059: LD_ADDR_VAR 0 9
24063: PUSH
24064: LD_INT 10
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24078: LD_VAR 0 6
24082: PPUSH
24083: CALL_OW 257
24087: PUSH
24088: LD_INT 11
24090: EQUAL
24091: IFFALSE 24112
// points := [ 30 , 10 , 5 ] ;
24093: LD_ADDR_VAR 0 9
24097: PUSH
24098: LD_INT 30
24100: PUSH
24101: LD_INT 10
24103: PUSH
24104: LD_INT 5
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 321
24124: PUSH
24125: LD_INT 2
24127: EQUAL
24128: IFFALSE 24145
// bpoints := bpoints * 1.8 ;
24130: LD_ADDR_VAR 0 10
24134: PUSH
24135: LD_VAR 0 10
24139: PUSH
24140: LD_REAL  1.80000000000000E+0000
24143: MUL
24144: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24145: LD_VAR 0 6
24149: PPUSH
24150: CALL_OW 257
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: IN
24173: IFFALSE 24193
24175: PUSH
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_INT 51
24183: PPUSH
24184: CALL_OW 321
24188: PUSH
24189: LD_INT 2
24191: EQUAL
24192: AND
24193: IFFALSE 24210
// bpoints := bpoints * 1.2 ;
24195: LD_ADDR_VAR 0 10
24199: PUSH
24200: LD_VAR 0 10
24204: PUSH
24205: LD_REAL  1.20000000000000E+0000
24208: MUL
24209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24210: LD_VAR 0 6
24214: PPUSH
24215: CALL_OW 257
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: LD_INT 7
24225: PUSH
24226: LD_INT 9
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: IN
24234: IFFALSE 24254
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: LD_INT 52
24244: PPUSH
24245: CALL_OW 321
24249: PUSH
24250: LD_INT 2
24252: EQUAL
24253: AND
24254: IFFALSE 24271
// bpoints := bpoints * 1.5 ;
24256: LD_ADDR_VAR 0 10
24260: PUSH
24261: LD_VAR 0 10
24265: PUSH
24266: LD_REAL  1.50000000000000E+0000
24269: MUL
24270: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24271: LD_VAR 0 1
24275: PPUSH
24276: LD_INT 66
24278: PPUSH
24279: CALL_OW 321
24283: PUSH
24284: LD_INT 2
24286: EQUAL
24287: IFFALSE 24304
// bpoints := bpoints * 1.1 ;
24289: LD_ADDR_VAR 0 10
24293: PUSH
24294: LD_VAR 0 10
24298: PUSH
24299: LD_REAL  1.10000000000000E+0000
24302: MUL
24303: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24304: LD_ADDR_VAR 0 10
24308: PUSH
24309: LD_VAR 0 10
24313: PUSH
24314: LD_VAR 0 6
24318: PPUSH
24319: LD_INT 1
24321: PPUSH
24322: CALL_OW 259
24326: PUSH
24327: LD_REAL  1.15000000000000E+0000
24330: MUL
24331: MUL
24332: ST_TO_ADDR
// end ; unit_vehicle :
24333: GO 25163
24335: LD_INT 2
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 25151
24343: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24344: LD_VAR 0 6
24348: PPUSH
24349: CALL_OW 264
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 42
24359: PUSH
24360: LD_INT 24
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: IN
24368: IFFALSE 24389
// points := [ 25 , 5 , 3 ] ;
24370: LD_ADDR_VAR 0 9
24374: PUSH
24375: LD_INT 25
24377: PUSH
24378: LD_INT 5
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24389: LD_VAR 0 6
24393: PPUSH
24394: CALL_OW 264
24398: PUSH
24399: LD_INT 4
24401: PUSH
24402: LD_INT 43
24404: PUSH
24405: LD_INT 25
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: IN
24413: IFFALSE 24434
// points := [ 40 , 15 , 5 ] ;
24415: LD_ADDR_VAR 0 9
24419: PUSH
24420: LD_INT 40
24422: PUSH
24423: LD_INT 15
24425: PUSH
24426: LD_INT 5
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24434: LD_VAR 0 6
24438: PPUSH
24439: CALL_OW 264
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: LD_INT 23
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: IN
24454: IFFALSE 24475
// points := [ 7 , 25 , 8 ] ;
24456: LD_ADDR_VAR 0 9
24460: PUSH
24461: LD_INT 7
24463: PUSH
24464: LD_INT 25
24466: PUSH
24467: LD_INT 8
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24475: LD_VAR 0 6
24479: PPUSH
24480: CALL_OW 264
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 27
24490: PUSH
24491: LD_INT 44
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: IN
24499: IFFALSE 24520
// points := [ 14 , 50 , 16 ] ;
24501: LD_ADDR_VAR 0 9
24505: PUSH
24506: LD_INT 14
24508: PUSH
24509: LD_INT 50
24511: PUSH
24512: LD_INT 16
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24520: LD_VAR 0 6
24524: PPUSH
24525: CALL_OW 264
24529: PUSH
24530: LD_INT 6
24532: PUSH
24533: LD_INT 46
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: IN
24540: IFFALSE 24561
// points := [ 32 , 120 , 70 ] ;
24542: LD_ADDR_VAR 0 9
24546: PUSH
24547: LD_INT 32
24549: PUSH
24550: LD_INT 120
24552: PUSH
24553: LD_INT 70
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24561: LD_VAR 0 6
24565: PPUSH
24566: CALL_OW 264
24570: PUSH
24571: LD_INT 7
24573: PUSH
24574: LD_INT 28
24576: PUSH
24577: LD_INT 45
24579: PUSH
24580: LD_INT 92
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: IN
24589: IFFALSE 24610
// points := [ 35 , 20 , 45 ] ;
24591: LD_ADDR_VAR 0 9
24595: PUSH
24596: LD_INT 35
24598: PUSH
24599: LD_INT 20
24601: PUSH
24602: LD_INT 45
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24610: LD_VAR 0 6
24614: PPUSH
24615: CALL_OW 264
24619: PUSH
24620: LD_INT 47
24622: PUSH
24623: EMPTY
24624: LIST
24625: IN
24626: IFFALSE 24647
// points := [ 67 , 45 , 75 ] ;
24628: LD_ADDR_VAR 0 9
24632: PUSH
24633: LD_INT 67
24635: PUSH
24636: LD_INT 45
24638: PUSH
24639: LD_INT 75
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24647: LD_VAR 0 6
24651: PPUSH
24652: CALL_OW 264
24656: PUSH
24657: LD_INT 26
24659: PUSH
24660: EMPTY
24661: LIST
24662: IN
24663: IFFALSE 24684
// points := [ 120 , 30 , 80 ] ;
24665: LD_ADDR_VAR 0 9
24669: PUSH
24670: LD_INT 120
24672: PUSH
24673: LD_INT 30
24675: PUSH
24676: LD_INT 80
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24684: LD_VAR 0 6
24688: PPUSH
24689: CALL_OW 264
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: EMPTY
24698: LIST
24699: IN
24700: IFFALSE 24721
// points := [ 40 , 1 , 1 ] ;
24702: LD_ADDR_VAR 0 9
24706: PUSH
24707: LD_INT 40
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24721: LD_VAR 0 6
24725: PPUSH
24726: CALL_OW 264
24730: PUSH
24731: LD_INT 29
24733: PUSH
24734: EMPTY
24735: LIST
24736: IN
24737: IFFALSE 24758
// points := [ 70 , 200 , 400 ] ;
24739: LD_ADDR_VAR 0 9
24743: PUSH
24744: LD_INT 70
24746: PUSH
24747: LD_INT 200
24749: PUSH
24750: LD_INT 400
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24758: LD_VAR 0 6
24762: PPUSH
24763: CALL_OW 264
24767: PUSH
24768: LD_INT 14
24770: PUSH
24771: LD_INT 53
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: IN
24778: IFFALSE 24799
// points := [ 40 , 10 , 20 ] ;
24780: LD_ADDR_VAR 0 9
24784: PUSH
24785: LD_INT 40
24787: PUSH
24788: LD_INT 10
24790: PUSH
24791: LD_INT 20
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24799: LD_VAR 0 6
24803: PPUSH
24804: CALL_OW 264
24808: PUSH
24809: LD_INT 9
24811: PUSH
24812: EMPTY
24813: LIST
24814: IN
24815: IFFALSE 24836
// points := [ 5 , 70 , 20 ] ;
24817: LD_ADDR_VAR 0 9
24821: PUSH
24822: LD_INT 5
24824: PUSH
24825: LD_INT 70
24827: PUSH
24828: LD_INT 20
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24836: LD_VAR 0 6
24840: PPUSH
24841: CALL_OW 264
24845: PUSH
24846: LD_INT 10
24848: PUSH
24849: EMPTY
24850: LIST
24851: IN
24852: IFFALSE 24873
// points := [ 35 , 110 , 70 ] ;
24854: LD_ADDR_VAR 0 9
24858: PUSH
24859: LD_INT 35
24861: PUSH
24862: LD_INT 110
24864: PUSH
24865: LD_INT 70
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: LIST
24872: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24873: LD_VAR 0 6
24877: PPUSH
24878: CALL_OW 265
24882: PUSH
24883: LD_INT 25
24885: EQUAL
24886: IFFALSE 24907
// points := [ 80 , 65 , 100 ] ;
24888: LD_ADDR_VAR 0 9
24892: PUSH
24893: LD_INT 80
24895: PUSH
24896: LD_INT 65
24898: PUSH
24899: LD_INT 100
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24907: LD_VAR 0 6
24911: PPUSH
24912: CALL_OW 263
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 24955
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24922: LD_ADDR_VAR 0 10
24926: PUSH
24927: LD_VAR 0 10
24931: PUSH
24932: LD_VAR 0 6
24936: PPUSH
24937: CALL_OW 311
24941: PPUSH
24942: LD_INT 3
24944: PPUSH
24945: CALL_OW 259
24949: PUSH
24950: LD_INT 4
24952: MUL
24953: MUL
24954: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24955: LD_VAR 0 6
24959: PPUSH
24960: CALL_OW 263
24964: PUSH
24965: LD_INT 2
24967: EQUAL
24968: IFFALSE 25019
// begin j := IsControledBy ( i ) ;
24970: LD_ADDR_VAR 0 7
24974: PUSH
24975: LD_VAR 0 6
24979: PPUSH
24980: CALL_OW 312
24984: ST_TO_ADDR
// if j then
24985: LD_VAR 0 7
24989: IFFALSE 25019
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24991: LD_ADDR_VAR 0 10
24995: PUSH
24996: LD_VAR 0 10
25000: PUSH
25001: LD_VAR 0 7
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL_OW 259
25013: PUSH
25014: LD_INT 3
25016: MUL
25017: MUL
25018: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25019: LD_VAR 0 6
25023: PPUSH
25024: CALL_OW 264
25028: PUSH
25029: LD_INT 5
25031: PUSH
25032: LD_INT 6
25034: PUSH
25035: LD_INT 46
25037: PUSH
25038: LD_INT 44
25040: PUSH
25041: LD_INT 47
25043: PUSH
25044: LD_INT 45
25046: PUSH
25047: LD_INT 28
25049: PUSH
25050: LD_INT 7
25052: PUSH
25053: LD_INT 27
25055: PUSH
25056: LD_INT 29
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: IN
25071: IFFALSE 25091
25073: PUSH
25074: LD_VAR 0 1
25078: PPUSH
25079: LD_INT 52
25081: PPUSH
25082: CALL_OW 321
25086: PUSH
25087: LD_INT 2
25089: EQUAL
25090: AND
25091: IFFALSE 25108
// bpoints := bpoints * 1.2 ;
25093: LD_ADDR_VAR 0 10
25097: PUSH
25098: LD_VAR 0 10
25102: PUSH
25103: LD_REAL  1.20000000000000E+0000
25106: MUL
25107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25108: LD_VAR 0 6
25112: PPUSH
25113: CALL_OW 264
25117: PUSH
25118: LD_INT 6
25120: PUSH
25121: LD_INT 46
25123: PUSH
25124: LD_INT 47
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: IN
25132: IFFALSE 25149
// bpoints := bpoints * 1.2 ;
25134: LD_ADDR_VAR 0 10
25138: PUSH
25139: LD_VAR 0 10
25143: PUSH
25144: LD_REAL  1.20000000000000E+0000
25147: MUL
25148: ST_TO_ADDR
// end ; unit_building :
25149: GO 25163
25151: LD_INT 3
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25162
25159: POP
// ; end ;
25160: GO 25163
25162: POP
// for j = 1 to 3 do
25163: LD_ADDR_VAR 0 7
25167: PUSH
25168: DOUBLE
25169: LD_INT 1
25171: DEC
25172: ST_TO_ADDR
25173: LD_INT 3
25175: PUSH
25176: FOR_TO
25177: IFFALSE 25230
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25179: LD_ADDR_VAR 0 5
25183: PUSH
25184: LD_VAR 0 5
25188: PPUSH
25189: LD_VAR 0 7
25193: PPUSH
25194: LD_VAR 0 5
25198: PUSH
25199: LD_VAR 0 7
25203: ARRAY
25204: PUSH
25205: LD_VAR 0 9
25209: PUSH
25210: LD_VAR 0 7
25214: ARRAY
25215: PUSH
25216: LD_VAR 0 10
25220: MUL
25221: PLUS
25222: PPUSH
25223: CALL_OW 1
25227: ST_TO_ADDR
25228: GO 25176
25230: POP
25231: POP
// end ;
25232: GO 23705
25234: POP
25235: POP
// result := Replace ( result , 4 , tmp ) ;
25236: LD_ADDR_VAR 0 5
25240: PUSH
25241: LD_VAR 0 5
25245: PPUSH
25246: LD_INT 4
25248: PPUSH
25249: LD_VAR 0 8
25253: PPUSH
25254: CALL_OW 1
25258: ST_TO_ADDR
// end ;
25259: LD_VAR 0 5
25263: RET
// export function DangerAtRange ( unit , range ) ; begin
25264: LD_INT 0
25266: PPUSH
// if not unit then
25267: LD_VAR 0 1
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25321
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_VAR 0 1
25285: PPUSH
25286: CALL_OW 255
25290: PPUSH
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 250
25300: PPUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 251
25310: PPUSH
25311: LD_VAR 0 2
25315: PPUSH
25316: CALL 23555 0 4
25320: ST_TO_ADDR
// end ;
25321: LD_VAR 0 3
25325: RET
// export function DangerInArea ( side , area ) ; begin
25326: LD_INT 0
25328: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_VAR 0 2
25338: PPUSH
25339: LD_INT 81
25341: PUSH
25342: LD_VAR 0 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 70
25355: ST_TO_ADDR
// end ;
25356: LD_VAR 0 3
25360: RET
// export function IsExtension ( b ) ; begin
25361: LD_INT 0
25363: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25364: LD_ADDR_VAR 0 2
25368: PUSH
25369: LD_VAR 0 1
25373: PUSH
25374: LD_INT 23
25376: PUSH
25377: LD_INT 20
25379: PUSH
25380: LD_INT 22
25382: PUSH
25383: LD_INT 17
25385: PUSH
25386: LD_INT 24
25388: PUSH
25389: LD_INT 21
25391: PUSH
25392: LD_INT 19
25394: PUSH
25395: LD_INT 16
25397: PUSH
25398: LD_INT 25
25400: PUSH
25401: LD_INT 18
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: IN
25416: ST_TO_ADDR
// end ;
25417: LD_VAR 0 2
25421: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25422: LD_INT 0
25424: PPUSH
25425: PPUSH
25426: PPUSH
// result := [ ] ;
25427: LD_ADDR_VAR 0 4
25431: PUSH
25432: EMPTY
25433: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25434: LD_ADDR_VAR 0 5
25438: PUSH
25439: LD_VAR 0 2
25443: PPUSH
25444: LD_INT 21
25446: PUSH
25447: LD_INT 3
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PPUSH
25454: CALL_OW 70
25458: ST_TO_ADDR
// if not tmp then
25459: LD_VAR 0 5
25463: NOT
25464: IFFALSE 25468
// exit ;
25466: GO 25532
// if checkLink then
25468: LD_VAR 0 3
25472: IFFALSE 25522
// begin for i in tmp do
25474: LD_ADDR_VAR 0 6
25478: PUSH
25479: LD_VAR 0 5
25483: PUSH
25484: FOR_IN
25485: IFFALSE 25520
// if GetBase ( i ) <> base then
25487: LD_VAR 0 6
25491: PPUSH
25492: CALL_OW 274
25496: PUSH
25497: LD_VAR 0 1
25501: NONEQUAL
25502: IFFALSE 25518
// ComLinkToBase ( base , i ) ;
25504: LD_VAR 0 1
25508: PPUSH
25509: LD_VAR 0 6
25513: PPUSH
25514: CALL_OW 169
25518: GO 25484
25520: POP
25521: POP
// end ; result := tmp ;
25522: LD_ADDR_VAR 0 4
25526: PUSH
25527: LD_VAR 0 5
25531: ST_TO_ADDR
// end ;
25532: LD_VAR 0 4
25536: RET
// export function ComComplete ( units , b ) ; var i ; begin
25537: LD_INT 0
25539: PPUSH
25540: PPUSH
// if not units then
25541: LD_VAR 0 1
25545: NOT
25546: IFFALSE 25550
// exit ;
25548: GO 25640
// for i in units do
25550: LD_ADDR_VAR 0 4
25554: PUSH
25555: LD_VAR 0 1
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25638
// if BuildingStatus ( b ) = bs_build then
25563: LD_VAR 0 2
25567: PPUSH
25568: CALL_OW 461
25572: PUSH
25573: LD_INT 1
25575: EQUAL
25576: IFFALSE 25636
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25578: LD_VAR 0 4
25582: PPUSH
25583: LD_STRING h
25585: PUSH
25586: LD_VAR 0 2
25590: PPUSH
25591: CALL_OW 250
25595: PUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: CALL_OW 251
25605: PUSH
25606: LD_VAR 0 2
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: PPUSH
25632: CALL_OW 446
25636: GO 25560
25638: POP
25639: POP
// end ;
25640: LD_VAR 0 3
25644: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
25649: PPUSH
25650: PPUSH
25651: PPUSH
25652: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25653: LD_VAR 0 1
25657: NOT
25658: IFTRUE 25675
25660: PUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 263
25670: PUSH
25671: LD_INT 2
25673: NONEQUAL
25674: OR
25675: IFFALSE 25679
// exit ;
25677: GO 25995
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25679: LD_ADDR_VAR 0 6
25683: PUSH
25684: LD_INT 22
25686: PUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 255
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 30
25706: PUSH
25707: LD_INT 36
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 34
25716: PUSH
25717: LD_INT 31
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PPUSH
25733: CALL_OW 69
25737: ST_TO_ADDR
// if not tmp then
25738: LD_VAR 0 6
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25995
// result := [ ] ;
25747: LD_ADDR_VAR 0 2
25751: PUSH
25752: EMPTY
25753: ST_TO_ADDR
// for i in tmp do
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_VAR 0 6
25763: PUSH
25764: FOR_IN
25765: IFFALSE 25836
// begin t := UnitsInside ( i ) ;
25767: LD_ADDR_VAR 0 4
25771: PUSH
25772: LD_VAR 0 3
25776: PPUSH
25777: CALL_OW 313
25781: ST_TO_ADDR
// if t then
25782: LD_VAR 0 4
25786: IFFALSE 25834
// for j in t do
25788: LD_ADDR_VAR 0 7
25792: PUSH
25793: LD_VAR 0 4
25797: PUSH
25798: FOR_IN
25799: IFFALSE 25832
// result := Replace ( result , result + 1 , j ) ;
25801: LD_ADDR_VAR 0 2
25805: PUSH
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_VAR 0 2
25815: PUSH
25816: LD_INT 1
25818: PLUS
25819: PPUSH
25820: LD_VAR 0 7
25824: PPUSH
25825: CALL_OW 1
25829: ST_TO_ADDR
25830: GO 25798
25832: POP
25833: POP
// end ;
25834: GO 25764
25836: POP
25837: POP
// if not result then
25838: LD_VAR 0 2
25842: NOT
25843: IFFALSE 25847
// exit ;
25845: GO 25995
// mech := result [ 1 ] ;
25847: LD_ADDR_VAR 0 5
25851: PUSH
25852: LD_VAR 0 2
25856: PUSH
25857: LD_INT 1
25859: ARRAY
25860: ST_TO_ADDR
// if result > 1 then
25861: LD_VAR 0 2
25865: PUSH
25866: LD_INT 1
25868: GREATER
25869: IFFALSE 25981
// begin for i = 2 to result do
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: DOUBLE
25877: LD_INT 2
25879: DEC
25880: ST_TO_ADDR
25881: LD_VAR 0 2
25885: PUSH
25886: FOR_TO
25887: IFFALSE 25979
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25889: LD_ADDR_VAR 0 4
25893: PUSH
25894: LD_VAR 0 2
25898: PUSH
25899: LD_VAR 0 3
25903: ARRAY
25904: PPUSH
25905: LD_INT 3
25907: PPUSH
25908: CALL_OW 259
25912: PUSH
25913: LD_VAR 0 2
25917: PUSH
25918: LD_VAR 0 3
25922: ARRAY
25923: PPUSH
25924: CALL_OW 432
25928: MINUS
25929: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25930: LD_VAR 0 4
25934: PUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: LD_INT 3
25942: PPUSH
25943: CALL_OW 259
25947: PUSH
25948: LD_VAR 0 5
25952: PPUSH
25953: CALL_OW 432
25957: MINUS
25958: GREATEREQUAL
25959: IFFALSE 25977
// mech := result [ i ] ;
25961: LD_ADDR_VAR 0 5
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: LD_VAR 0 3
25975: ARRAY
25976: ST_TO_ADDR
// end ;
25977: GO 25886
25979: POP
25980: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25981: LD_VAR 0 1
25985: PPUSH
25986: LD_VAR 0 5
25990: PPUSH
25991: CALL_OW 135
// end ;
25995: LD_VAR 0 2
25999: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26000: LD_INT 0
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
// result := [ ] ;
26015: LD_ADDR_VAR 0 7
26019: PUSH
26020: EMPTY
26021: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 266
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: IN
26042: NOT
26043: IFFALSE 26047
// exit ;
26045: GO 27687
// if name then
26047: LD_VAR 0 3
26051: IFFALSE 26067
// SetBName ( base_dep , name ) ;
26053: LD_VAR 0 1
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: CALL_OW 500
// base := GetBase ( base_dep ) ;
26067: LD_ADDR_VAR 0 15
26071: PUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 274
26081: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26082: LD_ADDR_VAR 0 16
26086: PUSH
26087: LD_VAR 0 1
26091: PPUSH
26092: CALL_OW 255
26096: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26097: LD_ADDR_VAR 0 17
26101: PUSH
26102: LD_VAR 0 1
26106: PPUSH
26107: CALL_OW 248
26111: ST_TO_ADDR
// if sources then
26112: LD_VAR 0 5
26116: IFFALSE 26163
// for i = 1 to 3 do
26118: LD_ADDR_VAR 0 8
26122: PUSH
26123: DOUBLE
26124: LD_INT 1
26126: DEC
26127: ST_TO_ADDR
26128: LD_INT 3
26130: PUSH
26131: FOR_TO
26132: IFFALSE 26161
// AddResourceType ( base , i , sources [ i ] ) ;
26134: LD_VAR 0 15
26138: PPUSH
26139: LD_VAR 0 8
26143: PPUSH
26144: LD_VAR 0 5
26148: PUSH
26149: LD_VAR 0 8
26153: ARRAY
26154: PPUSH
26155: CALL_OW 276
26159: GO 26131
26161: POP
26162: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26163: LD_ADDR_VAR 0 18
26167: PUSH
26168: LD_VAR 0 15
26172: PPUSH
26173: LD_VAR 0 2
26177: PPUSH
26178: LD_INT 1
26180: PPUSH
26181: CALL 25422 0 3
26185: ST_TO_ADDR
// InitHc ;
26186: CALL_OW 19
// InitUc ;
26190: CALL_OW 18
// uc_side := side ;
26194: LD_ADDR_OWVAR 20
26198: PUSH
26199: LD_VAR 0 16
26203: ST_TO_ADDR
// uc_nation := nation ;
26204: LD_ADDR_OWVAR 21
26208: PUSH
26209: LD_VAR 0 17
26213: ST_TO_ADDR
// if buildings then
26214: LD_VAR 0 18
26218: IFFALSE 27546
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26220: LD_ADDR_VAR 0 19
26224: PUSH
26225: LD_VAR 0 18
26229: PPUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 30
26235: PUSH
26236: LD_INT 29
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 30
26245: PUSH
26246: LD_INT 30
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 72
26262: ST_TO_ADDR
// if tmp then
26263: LD_VAR 0 19
26267: IFFALSE 26315
// for i in tmp do
26269: LD_ADDR_VAR 0 8
26273: PUSH
26274: LD_VAR 0 19
26278: PUSH
26279: FOR_IN
26280: IFFALSE 26313
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26282: LD_VAR 0 8
26286: PPUSH
26287: CALL_OW 250
26291: PPUSH
26292: LD_VAR 0 8
26296: PPUSH
26297: CALL_OW 251
26301: PPUSH
26302: LD_VAR 0 16
26306: PPUSH
26307: CALL_OW 441
26311: GO 26279
26313: POP
26314: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26315: LD_VAR 0 18
26319: PPUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 32
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: LD_INT 33
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: PPUSH
26348: CALL_OW 72
26352: IFFALSE 26440
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26354: LD_ADDR_VAR 0 8
26358: PUSH
26359: LD_VAR 0 18
26363: PPUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 30
26369: PUSH
26370: LD_INT 32
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 30
26379: PUSH
26380: LD_INT 33
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: PPUSH
26392: CALL_OW 72
26396: PUSH
26397: FOR_IN
26398: IFFALSE 26438
// begin if not GetBWeapon ( i ) then
26400: LD_VAR 0 8
26404: PPUSH
26405: CALL_OW 269
26409: NOT
26410: IFFALSE 26436
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26412: LD_VAR 0 8
26416: PPUSH
26417: LD_VAR 0 8
26421: PPUSH
26422: LD_VAR 0 2
26426: PPUSH
26427: CALL 27692 0 2
26431: PPUSH
26432: CALL_OW 431
// end ;
26436: GO 26397
26438: POP
26439: POP
// end ; for i = 1 to personel do
26440: LD_ADDR_VAR 0 8
26444: PUSH
26445: DOUBLE
26446: LD_INT 1
26448: DEC
26449: ST_TO_ADDR
26450: LD_VAR 0 6
26454: PUSH
26455: FOR_TO
26456: IFFALSE 27526
// begin if i > 4 then
26458: LD_VAR 0 8
26462: PUSH
26463: LD_INT 4
26465: GREATER
26466: IFFALSE 26470
// break ;
26468: GO 27526
// case i of 1 :
26470: LD_VAR 0 8
26474: PUSH
26475: LD_INT 1
26477: DOUBLE
26478: EQUAL
26479: IFTRUE 26483
26481: GO 26563
26483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26484: LD_ADDR_VAR 0 12
26488: PUSH
26489: LD_VAR 0 18
26493: PPUSH
26494: LD_INT 22
26496: PUSH
26497: LD_VAR 0 16
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 58
26508: PUSH
26509: EMPTY
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 32
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 4
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 30
26537: PUSH
26538: LD_INT 5
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: PPUSH
26556: CALL_OW 72
26560: ST_TO_ADDR
26561: GO 26785
26563: LD_INT 2
26565: DOUBLE
26566: EQUAL
26567: IFTRUE 26571
26569: GO 26633
26571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26572: LD_ADDR_VAR 0 12
26576: PUSH
26577: LD_VAR 0 18
26581: PPUSH
26582: LD_INT 22
26584: PUSH
26585: LD_VAR 0 16
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 30
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 30
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 72
26630: ST_TO_ADDR
26631: GO 26785
26633: LD_INT 3
26635: DOUBLE
26636: EQUAL
26637: IFTRUE 26641
26639: GO 26703
26641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26642: LD_ADDR_VAR 0 12
26646: PUSH
26647: LD_VAR 0 18
26651: PPUSH
26652: LD_INT 22
26654: PUSH
26655: LD_VAR 0 16
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: LD_INT 30
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PPUSH
26696: CALL_OW 72
26700: ST_TO_ADDR
26701: GO 26785
26703: LD_INT 4
26705: DOUBLE
26706: EQUAL
26707: IFTRUE 26711
26709: GO 26784
26711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26712: LD_ADDR_VAR 0 12
26716: PUSH
26717: LD_VAR 0 18
26721: PPUSH
26722: LD_INT 22
26724: PUSH
26725: LD_VAR 0 16
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 30
26739: PUSH
26740: LD_INT 6
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 30
26749: PUSH
26750: LD_INT 7
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 30
26759: PUSH
26760: LD_INT 8
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PPUSH
26777: CALL_OW 72
26781: ST_TO_ADDR
26782: GO 26785
26784: POP
// if i = 1 then
26785: LD_VAR 0 8
26789: PUSH
26790: LD_INT 1
26792: EQUAL
26793: IFFALSE 26904
// begin tmp := [ ] ;
26795: LD_ADDR_VAR 0 19
26799: PUSH
26800: EMPTY
26801: ST_TO_ADDR
// for j in f do
26802: LD_ADDR_VAR 0 9
26806: PUSH
26807: LD_VAR 0 12
26811: PUSH
26812: FOR_IN
26813: IFFALSE 26886
// if GetBType ( j ) = b_bunker then
26815: LD_VAR 0 9
26819: PPUSH
26820: CALL_OW 266
26824: PUSH
26825: LD_INT 32
26827: EQUAL
26828: IFFALSE 26855
// tmp := Insert ( tmp , 1 , j ) else
26830: LD_ADDR_VAR 0 19
26834: PUSH
26835: LD_VAR 0 19
26839: PPUSH
26840: LD_INT 1
26842: PPUSH
26843: LD_VAR 0 9
26847: PPUSH
26848: CALL_OW 2
26852: ST_TO_ADDR
26853: GO 26884
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26855: LD_ADDR_VAR 0 19
26859: PUSH
26860: LD_VAR 0 19
26864: PPUSH
26865: LD_VAR 0 19
26869: PUSH
26870: LD_INT 1
26872: PLUS
26873: PPUSH
26874: LD_VAR 0 9
26878: PPUSH
26879: CALL_OW 2
26883: ST_TO_ADDR
26884: GO 26812
26886: POP
26887: POP
// if tmp then
26888: LD_VAR 0 19
26892: IFFALSE 26904
// f := tmp ;
26894: LD_ADDR_VAR 0 12
26898: PUSH
26899: LD_VAR 0 19
26903: ST_TO_ADDR
// end ; x := personel [ i ] ;
26904: LD_ADDR_VAR 0 13
26908: PUSH
26909: LD_VAR 0 6
26913: PUSH
26914: LD_VAR 0 8
26918: ARRAY
26919: ST_TO_ADDR
// if x = - 1 then
26920: LD_VAR 0 13
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: EQUAL
26929: IFFALSE 27140
// begin for j in f do
26931: LD_ADDR_VAR 0 9
26935: PUSH
26936: LD_VAR 0 12
26940: PUSH
26941: FOR_IN
26942: IFFALSE 27136
// repeat InitHc ;
26944: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26948: LD_VAR 0 9
26952: PPUSH
26953: CALL_OW 266
26957: PUSH
26958: LD_INT 5
26960: EQUAL
26961: IFFALSE 27031
// begin if UnitsInside ( j ) < 3 then
26963: LD_VAR 0 9
26967: PPUSH
26968: CALL_OW 313
26972: PUSH
26973: LD_INT 3
26975: LESS
26976: IFFALSE 27012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26978: LD_INT 0
26980: PPUSH
26981: LD_INT 5
26983: PUSH
26984: LD_INT 8
26986: PUSH
26987: LD_INT 9
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: LIST
26994: PUSH
26995: LD_VAR 0 17
26999: ARRAY
27000: PPUSH
27001: LD_VAR 0 4
27005: PPUSH
27006: CALL_OW 380
27010: GO 27029
// PrepareHuman ( false , i , skill ) ;
27012: LD_INT 0
27014: PPUSH
27015: LD_VAR 0 8
27019: PPUSH
27020: LD_VAR 0 4
27024: PPUSH
27025: CALL_OW 380
// end else
27029: GO 27048
// PrepareHuman ( false , i , skill ) ;
27031: LD_INT 0
27033: PPUSH
27034: LD_VAR 0 8
27038: PPUSH
27039: LD_VAR 0 4
27043: PPUSH
27044: CALL_OW 380
// un := CreateHuman ;
27048: LD_ADDR_VAR 0 14
27052: PUSH
27053: CALL_OW 44
27057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27058: LD_ADDR_VAR 0 7
27062: PUSH
27063: LD_VAR 0 7
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: LD_VAR 0 14
27075: PPUSH
27076: CALL_OW 2
27080: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27081: LD_VAR 0 14
27085: PPUSH
27086: LD_VAR 0 9
27090: PPUSH
27091: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27095: LD_VAR 0 9
27099: PPUSH
27100: CALL_OW 313
27104: PUSH
27105: LD_INT 6
27107: EQUAL
27108: IFTRUE 27132
27110: PUSH
27111: LD_VAR 0 9
27115: PPUSH
27116: CALL_OW 266
27120: PUSH
27121: LD_INT 32
27123: PUSH
27124: LD_INT 31
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: IN
27131: OR
27132: IFFALSE 26944
27134: GO 26941
27136: POP
27137: POP
// end else
27138: GO 27524
// for j = 1 to x do
27140: LD_ADDR_VAR 0 9
27144: PUSH
27145: DOUBLE
27146: LD_INT 1
27148: DEC
27149: ST_TO_ADDR
27150: LD_VAR 0 13
27154: PUSH
27155: FOR_TO
27156: IFFALSE 27522
// begin InitHc ;
27158: CALL_OW 19
// if not f then
27162: LD_VAR 0 12
27166: NOT
27167: IFFALSE 27256
// begin PrepareHuman ( false , i , skill ) ;
27169: LD_INT 0
27171: PPUSH
27172: LD_VAR 0 8
27176: PPUSH
27177: LD_VAR 0 4
27181: PPUSH
27182: CALL_OW 380
// un := CreateHuman ;
27186: LD_ADDR_VAR 0 14
27190: PUSH
27191: CALL_OW 44
27195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27196: LD_ADDR_VAR 0 7
27200: PUSH
27201: LD_VAR 0 7
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: LD_VAR 0 14
27213: PPUSH
27214: CALL_OW 2
27218: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27219: LD_VAR 0 14
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL_OW 250
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 251
27243: PPUSH
27244: LD_INT 10
27246: PPUSH
27247: LD_INT 0
27249: PPUSH
27250: CALL_OW 50
// continue ;
27254: GO 27155
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27256: LD_VAR 0 12
27260: PUSH
27261: LD_INT 1
27263: ARRAY
27264: PPUSH
27265: CALL_OW 313
27269: IFFALSE 27297
27271: PUSH
27272: LD_VAR 0 12
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PPUSH
27281: CALL_OW 266
27285: PUSH
27286: LD_INT 32
27288: PUSH
27289: LD_INT 31
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: IN
27296: AND
27297: IFTRUE 27318
27299: PUSH
27300: LD_VAR 0 12
27304: PUSH
27305: LD_INT 1
27307: ARRAY
27308: PPUSH
27309: CALL_OW 313
27313: PUSH
27314: LD_INT 6
27316: EQUAL
27317: OR
27318: IFFALSE 27338
// f := Delete ( f , 1 ) ;
27320: LD_ADDR_VAR 0 12
27324: PUSH
27325: LD_VAR 0 12
27329: PPUSH
27330: LD_INT 1
27332: PPUSH
27333: CALL_OW 3
27337: ST_TO_ADDR
// if not f then
27338: LD_VAR 0 12
27342: NOT
27343: IFFALSE 27361
// begin x := x + 2 ;
27345: LD_ADDR_VAR 0 13
27349: PUSH
27350: LD_VAR 0 13
27354: PUSH
27355: LD_INT 2
27357: PLUS
27358: ST_TO_ADDR
// continue ;
27359: GO 27155
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27361: LD_VAR 0 12
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PPUSH
27370: CALL_OW 266
27374: PUSH
27375: LD_INT 5
27377: EQUAL
27378: IFFALSE 27452
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27380: LD_VAR 0 12
27384: PUSH
27385: LD_INT 1
27387: ARRAY
27388: PPUSH
27389: CALL_OW 313
27393: PUSH
27394: LD_INT 3
27396: LESS
27397: IFFALSE 27433
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27399: LD_INT 0
27401: PPUSH
27402: LD_INT 5
27404: PUSH
27405: LD_INT 8
27407: PUSH
27408: LD_INT 9
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: LD_VAR 0 17
27420: ARRAY
27421: PPUSH
27422: LD_VAR 0 4
27426: PPUSH
27427: CALL_OW 380
27431: GO 27450
// PrepareHuman ( false , i , skill ) ;
27433: LD_INT 0
27435: PPUSH
27436: LD_VAR 0 8
27440: PPUSH
27441: LD_VAR 0 4
27445: PPUSH
27446: CALL_OW 380
// end else
27450: GO 27469
// PrepareHuman ( false , i , skill ) ;
27452: LD_INT 0
27454: PPUSH
27455: LD_VAR 0 8
27459: PPUSH
27460: LD_VAR 0 4
27464: PPUSH
27465: CALL_OW 380
// un := CreateHuman ;
27469: LD_ADDR_VAR 0 14
27473: PUSH
27474: CALL_OW 44
27478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27479: LD_ADDR_VAR 0 7
27483: PUSH
27484: LD_VAR 0 7
27488: PPUSH
27489: LD_INT 1
27491: PPUSH
27492: LD_VAR 0 14
27496: PPUSH
27497: CALL_OW 2
27501: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27502: LD_VAR 0 14
27506: PPUSH
27507: LD_VAR 0 12
27511: PUSH
27512: LD_INT 1
27514: ARRAY
27515: PPUSH
27516: CALL_OW 52
// end ;
27520: GO 27155
27522: POP
27523: POP
// end ;
27524: GO 26455
27526: POP
27527: POP
// result := result ^ buildings ;
27528: LD_ADDR_VAR 0 7
27532: PUSH
27533: LD_VAR 0 7
27537: PUSH
27538: LD_VAR 0 18
27542: ADD
27543: ST_TO_ADDR
// end else
27544: GO 27687
// begin for i = 1 to personel do
27546: LD_ADDR_VAR 0 8
27550: PUSH
27551: DOUBLE
27552: LD_INT 1
27554: DEC
27555: ST_TO_ADDR
27556: LD_VAR 0 6
27560: PUSH
27561: FOR_TO
27562: IFFALSE 27685
// begin if i > 4 then
27564: LD_VAR 0 8
27568: PUSH
27569: LD_INT 4
27571: GREATER
27572: IFFALSE 27576
// break ;
27574: GO 27685
// x := personel [ i ] ;
27576: LD_ADDR_VAR 0 13
27580: PUSH
27581: LD_VAR 0 6
27585: PUSH
27586: LD_VAR 0 8
27590: ARRAY
27591: ST_TO_ADDR
// if x = - 1 then
27592: LD_VAR 0 13
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: EQUAL
27601: IFFALSE 27605
// continue ;
27603: GO 27561
// PrepareHuman ( false , i , skill ) ;
27605: LD_INT 0
27607: PPUSH
27608: LD_VAR 0 8
27612: PPUSH
27613: LD_VAR 0 4
27617: PPUSH
27618: CALL_OW 380
// un := CreateHuman ;
27622: LD_ADDR_VAR 0 14
27626: PUSH
27627: CALL_OW 44
27631: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27632: LD_VAR 0 14
27636: PPUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 250
27646: PPUSH
27647: LD_VAR 0 1
27651: PPUSH
27652: CALL_OW 251
27656: PPUSH
27657: LD_INT 10
27659: PPUSH
27660: LD_INT 0
27662: PPUSH
27663: CALL_OW 50
// result := result ^ un ;
27667: LD_ADDR_VAR 0 7
27671: PUSH
27672: LD_VAR 0 7
27676: PUSH
27677: LD_VAR 0 14
27681: ADD
27682: ST_TO_ADDR
// end ;
27683: GO 27561
27685: POP
27686: POP
// end ; end ;
27687: LD_VAR 0 7
27691: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27692: LD_INT 0
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
27699: PPUSH
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
// result := false ;
27710: LD_ADDR_VAR 0 3
27714: PUSH
27715: LD_INT 0
27717: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27718: LD_VAR 0 1
27722: NOT
27723: IFTRUE 27748
27725: PUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL_OW 266
27735: PUSH
27736: LD_INT 32
27738: PUSH
27739: LD_INT 33
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: IN
27746: NOT
27747: OR
27748: IFFALSE 27752
// exit ;
27750: GO 28887
// nat := GetNation ( tower ) ;
27752: LD_ADDR_VAR 0 12
27756: PUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 248
27766: ST_TO_ADDR
// side := GetSide ( tower ) ;
27767: LD_ADDR_VAR 0 16
27771: PUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 255
27781: ST_TO_ADDR
// x := GetX ( tower ) ;
27782: LD_ADDR_VAR 0 10
27786: PUSH
27787: LD_VAR 0 1
27791: PPUSH
27792: CALL_OW 250
27796: ST_TO_ADDR
// y := GetY ( tower ) ;
27797: LD_ADDR_VAR 0 11
27801: PUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 251
27811: ST_TO_ADDR
// if not x or not y then
27812: LD_VAR 0 10
27816: NOT
27817: IFTRUE 27826
27819: PUSH
27820: LD_VAR 0 11
27824: NOT
27825: OR
27826: IFFALSE 27830
// exit ;
27828: GO 28887
// weapon := 0 ;
27830: LD_ADDR_VAR 0 18
27834: PUSH
27835: LD_INT 0
27837: ST_TO_ADDR
// fac_list := [ ] ;
27838: LD_ADDR_VAR 0 17
27842: PUSH
27843: EMPTY
27844: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27845: LD_ADDR_VAR 0 6
27849: PUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: CALL_OW 274
27859: PPUSH
27860: LD_VAR 0 2
27864: PPUSH
27865: LD_INT 0
27867: PPUSH
27868: CALL 25422 0 3
27872: PPUSH
27873: LD_INT 30
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 72
27887: ST_TO_ADDR
// if not factories then
27888: LD_VAR 0 6
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 28887
// for i in factories do
27897: LD_ADDR_VAR 0 8
27901: PUSH
27902: LD_VAR 0 6
27906: PUSH
27907: FOR_IN
27908: IFFALSE 27933
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27910: LD_ADDR_VAR 0 17
27914: PUSH
27915: LD_VAR 0 17
27919: PUSH
27920: LD_VAR 0 8
27924: PPUSH
27925: CALL_OW 478
27929: UNION
27930: ST_TO_ADDR
27931: GO 27907
27933: POP
27934: POP
// if not fac_list then
27935: LD_VAR 0 17
27939: NOT
27940: IFFALSE 27944
// exit ;
27942: GO 28887
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27944: LD_ADDR_VAR 0 5
27948: PUSH
27949: LD_INT 4
27951: PUSH
27952: LD_INT 5
27954: PUSH
27955: LD_INT 9
27957: PUSH
27958: LD_INT 10
27960: PUSH
27961: LD_INT 6
27963: PUSH
27964: LD_INT 7
27966: PUSH
27967: LD_INT 11
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 27
27981: PUSH
27982: LD_INT 28
27984: PUSH
27985: LD_INT 26
27987: PUSH
27988: LD_INT 30
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 43
27999: PUSH
28000: LD_INT 44
28002: PUSH
28003: LD_INT 46
28005: PUSH
28006: LD_INT 45
28008: PUSH
28009: LD_INT 47
28011: PUSH
28012: LD_INT 49
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: LD_VAR 0 12
28032: ARRAY
28033: ST_TO_ADDR
// list := list isect fac_list ;
28034: LD_ADDR_VAR 0 5
28038: PUSH
28039: LD_VAR 0 5
28043: PUSH
28044: LD_VAR 0 17
28048: ISECT
28049: ST_TO_ADDR
// if not list then
28050: LD_VAR 0 5
28054: NOT
28055: IFFALSE 28059
// exit ;
28057: GO 28887
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28059: LD_VAR 0 12
28063: PUSH
28064: LD_INT 3
28066: EQUAL
28067: IFFALSE 28079
28069: PUSH
28070: LD_INT 49
28072: PUSH
28073: LD_VAR 0 5
28077: IN
28078: AND
28079: IFFALSE 28099
28081: PUSH
28082: LD_INT 31
28084: PPUSH
28085: LD_VAR 0 16
28089: PPUSH
28090: CALL_OW 321
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: AND
28099: IFFALSE 28159
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28101: LD_INT 22
28103: PUSH
28104: LD_VAR 0 16
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 35
28115: PUSH
28116: LD_INT 49
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 91
28125: PUSH
28126: LD_VAR 0 1
28130: PUSH
28131: LD_INT 10
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: PPUSH
28144: CALL_OW 69
28148: NOT
28149: IFFALSE 28159
// weapon := ru_time_lapser ;
28151: LD_ADDR_VAR 0 18
28155: PUSH
28156: LD_INT 49
28158: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28159: LD_VAR 0 12
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: IN
28174: IFFALSE 28198
28176: PUSH
28177: LD_INT 11
28179: PUSH
28180: LD_VAR 0 5
28184: IN
28185: IFTRUE 28197
28187: PUSH
28188: LD_INT 30
28190: PUSH
28191: LD_VAR 0 5
28195: IN
28196: OR
28197: AND
28198: IFFALSE 28218
28200: PUSH
28201: LD_INT 6
28203: PPUSH
28204: LD_VAR 0 16
28208: PPUSH
28209: CALL_OW 321
28213: PUSH
28214: LD_INT 2
28216: EQUAL
28217: AND
28218: IFFALSE 28385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28220: LD_INT 22
28222: PUSH
28223: LD_VAR 0 16
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 35
28237: PUSH
28238: LD_INT 11
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 35
28247: PUSH
28248: LD_INT 30
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 91
28262: PUSH
28263: LD_VAR 0 1
28267: PUSH
28268: LD_INT 18
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: NOT
28286: IFFALSE 28362
28288: PUSH
28289: LD_INT 22
28291: PUSH
28292: LD_VAR 0 16
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 30
28306: PUSH
28307: LD_INT 32
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 30
28316: PUSH
28317: LD_INT 33
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 91
28331: PUSH
28332: LD_VAR 0 1
28336: PUSH
28337: LD_INT 12
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: PUSH
28358: LD_INT 2
28360: GREATER
28361: AND
28362: IFFALSE 28385
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28364: LD_ADDR_VAR 0 18
28368: PUSH
28369: LD_INT 11
28371: PUSH
28372: LD_INT 30
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_VAR 0 12
28383: ARRAY
28384: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28385: LD_VAR 0 18
28389: NOT
28390: IFFALSE 28410
28392: PUSH
28393: LD_INT 40
28395: PPUSH
28396: LD_VAR 0 16
28400: PPUSH
28401: CALL_OW 321
28405: PUSH
28406: LD_INT 2
28408: EQUAL
28409: AND
28410: IFFALSE 28446
28412: PUSH
28413: LD_INT 7
28415: PUSH
28416: LD_VAR 0 5
28420: IN
28421: IFTRUE 28433
28423: PUSH
28424: LD_INT 28
28426: PUSH
28427: LD_VAR 0 5
28431: IN
28432: OR
28433: IFTRUE 28445
28435: PUSH
28436: LD_INT 45
28438: PUSH
28439: LD_VAR 0 5
28443: IN
28444: OR
28445: AND
28446: IFFALSE 28700
// begin hex := GetHexInfo ( x , y ) ;
28448: LD_ADDR_VAR 0 4
28452: PUSH
28453: LD_VAR 0 10
28457: PPUSH
28458: LD_VAR 0 11
28462: PPUSH
28463: CALL_OW 546
28467: ST_TO_ADDR
// if hex [ 1 ] then
28468: LD_VAR 0 4
28472: PUSH
28473: LD_INT 1
28475: ARRAY
28476: IFFALSE 28480
// exit ;
28478: GO 28887
// height := hex [ 2 ] ;
28480: LD_ADDR_VAR 0 15
28484: PUSH
28485: LD_VAR 0 4
28489: PUSH
28490: LD_INT 2
28492: ARRAY
28493: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28494: LD_ADDR_VAR 0 14
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 3
28507: PUSH
28508: LD_INT 5
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// for i in tmp do
28517: LD_ADDR_VAR 0 8
28521: PUSH
28522: LD_VAR 0 14
28526: PUSH
28527: FOR_IN
28528: IFFALSE 28698
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28530: LD_ADDR_VAR 0 9
28534: PUSH
28535: LD_VAR 0 10
28539: PPUSH
28540: LD_VAR 0 8
28544: PPUSH
28545: LD_INT 5
28547: PPUSH
28548: CALL_OW 272
28552: PUSH
28553: LD_VAR 0 11
28557: PPUSH
28558: LD_VAR 0 8
28562: PPUSH
28563: LD_INT 5
28565: PPUSH
28566: CALL_OW 273
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28575: LD_VAR 0 9
28579: PUSH
28580: LD_INT 1
28582: ARRAY
28583: PPUSH
28584: LD_VAR 0 9
28588: PUSH
28589: LD_INT 2
28591: ARRAY
28592: PPUSH
28593: CALL_OW 488
28597: IFFALSE 28696
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28599: LD_ADDR_VAR 0 4
28603: PUSH
28604: LD_VAR 0 9
28608: PUSH
28609: LD_INT 1
28611: ARRAY
28612: PPUSH
28613: LD_VAR 0 9
28617: PUSH
28618: LD_INT 2
28620: ARRAY
28621: PPUSH
28622: CALL_OW 546
28626: ST_TO_ADDR
// if hex [ 1 ] then
28627: LD_VAR 0 4
28631: PUSH
28632: LD_INT 1
28634: ARRAY
28635: IFFALSE 28639
// continue ;
28637: GO 28527
// h := hex [ 2 ] ;
28639: LD_ADDR_VAR 0 13
28643: PUSH
28644: LD_VAR 0 4
28648: PUSH
28649: LD_INT 2
28651: ARRAY
28652: ST_TO_ADDR
// if h + 7 < height then
28653: LD_VAR 0 13
28657: PUSH
28658: LD_INT 7
28660: PLUS
28661: PUSH
28662: LD_VAR 0 15
28666: LESS
28667: IFFALSE 28696
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28669: LD_ADDR_VAR 0 18
28673: PUSH
28674: LD_INT 7
28676: PUSH
28677: LD_INT 28
28679: PUSH
28680: LD_INT 45
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: PUSH
28688: LD_VAR 0 12
28692: ARRAY
28693: ST_TO_ADDR
// break ;
28694: GO 28698
// end ; end ; end ;
28696: GO 28527
28698: POP
28699: POP
// end ; if not weapon then
28700: LD_VAR 0 18
28704: NOT
28705: IFFALSE 28765
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 5
28716: PUSH
28717: LD_INT 11
28719: PUSH
28720: LD_INT 30
28722: PUSH
28723: LD_INT 49
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: DIFF
28731: ST_TO_ADDR
// if not list then
28732: LD_VAR 0 5
28736: NOT
28737: IFFALSE 28741
// exit ;
28739: GO 28887
// weapon := list [ rand ( 1 , list ) ] ;
28741: LD_ADDR_VAR 0 18
28745: PUSH
28746: LD_VAR 0 5
28750: PUSH
28751: LD_INT 1
28753: PPUSH
28754: LD_VAR 0 5
28758: PPUSH
28759: CALL_OW 12
28763: ARRAY
28764: ST_TO_ADDR
// end ; if weapon then
28765: LD_VAR 0 18
28769: IFFALSE 28887
// begin tmp := CostOfWeapon ( weapon ) ;
28771: LD_ADDR_VAR 0 14
28775: PUSH
28776: LD_VAR 0 18
28780: PPUSH
28781: CALL_OW 451
28785: ST_TO_ADDR
// j := GetBase ( tower ) ;
28786: LD_ADDR_VAR 0 9
28790: PUSH
28791: LD_VAR 0 1
28795: PPUSH
28796: CALL_OW 274
28800: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28801: LD_VAR 0 9
28805: PPUSH
28806: LD_INT 1
28808: PPUSH
28809: CALL_OW 275
28813: PUSH
28814: LD_VAR 0 14
28818: PUSH
28819: LD_INT 1
28821: ARRAY
28822: GREATEREQUAL
28823: IFFALSE 28849
28825: PUSH
28826: LD_VAR 0 9
28830: PPUSH
28831: LD_INT 2
28833: PPUSH
28834: CALL_OW 275
28838: PUSH
28839: LD_VAR 0 14
28843: PUSH
28844: LD_INT 2
28846: ARRAY
28847: GREATEREQUAL
28848: AND
28849: IFFALSE 28875
28851: PUSH
28852: LD_VAR 0 9
28856: PPUSH
28857: LD_INT 3
28859: PPUSH
28860: CALL_OW 275
28864: PUSH
28865: LD_VAR 0 14
28869: PUSH
28870: LD_INT 3
28872: ARRAY
28873: GREATEREQUAL
28874: AND
28875: IFFALSE 28887
// result := weapon ;
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: LD_VAR 0 18
28886: ST_TO_ADDR
// end ; end ;
28887: LD_VAR 0 3
28891: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28892: LD_INT 0
28894: PPUSH
28895: PPUSH
// result := true ;
28896: LD_ADDR_VAR 0 3
28900: PUSH
28901: LD_INT 1
28903: ST_TO_ADDR
// if array1 = array2 then
28904: LD_VAR 0 1
28908: PUSH
28909: LD_VAR 0 2
28913: EQUAL
28914: IFFALSE 28974
// begin for i = 1 to array1 do
28916: LD_ADDR_VAR 0 4
28920: PUSH
28921: DOUBLE
28922: LD_INT 1
28924: DEC
28925: ST_TO_ADDR
28926: LD_VAR 0 1
28930: PUSH
28931: FOR_TO
28932: IFFALSE 28970
// if array1 [ i ] <> array2 [ i ] then
28934: LD_VAR 0 1
28938: PUSH
28939: LD_VAR 0 4
28943: ARRAY
28944: PUSH
28945: LD_VAR 0 2
28949: PUSH
28950: LD_VAR 0 4
28954: ARRAY
28955: NONEQUAL
28956: IFFALSE 28968
// begin result := false ;
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: LD_INT 0
28965: ST_TO_ADDR
// break ;
28966: GO 28970
// end ;
28968: GO 28931
28970: POP
28971: POP
// end else
28972: GO 28982
// result := false ;
28974: LD_ADDR_VAR 0 3
28978: PUSH
28979: LD_INT 0
28981: ST_TO_ADDR
// end ;
28982: LD_VAR 0 3
28986: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
// if not array1 or not array2 then
28991: LD_VAR 0 1
28995: NOT
28996: IFTRUE 29005
28998: PUSH
28999: LD_VAR 0 2
29003: NOT
29004: OR
29005: IFFALSE 29009
// exit ;
29007: GO 29073
// result := true ;
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: LD_INT 1
29016: ST_TO_ADDR
// for i = 1 to array1 do
29017: LD_ADDR_VAR 0 4
29021: PUSH
29022: DOUBLE
29023: LD_INT 1
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 1
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29071
// if array1 [ i ] <> array2 [ i ] then
29035: LD_VAR 0 1
29039: PUSH
29040: LD_VAR 0 4
29044: ARRAY
29045: PUSH
29046: LD_VAR 0 2
29050: PUSH
29051: LD_VAR 0 4
29055: ARRAY
29056: NONEQUAL
29057: IFFALSE 29069
// begin result := false ;
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_INT 0
29066: ST_TO_ADDR
// break ;
29067: GO 29071
// end ;
29069: GO 29032
29071: POP
29072: POP
// end ;
29073: LD_VAR 0 3
29077: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29078: LD_INT 0
29080: PPUSH
29081: PPUSH
29082: PPUSH
// pom := GetBase ( fac ) ;
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 274
29097: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29098: LD_ADDR_VAR 0 4
29102: PUSH
29103: LD_VAR 0 2
29107: PUSH
29108: LD_INT 1
29110: ARRAY
29111: PPUSH
29112: LD_VAR 0 2
29116: PUSH
29117: LD_INT 2
29119: ARRAY
29120: PPUSH
29121: LD_VAR 0 2
29125: PUSH
29126: LD_INT 3
29128: ARRAY
29129: PPUSH
29130: LD_VAR 0 2
29134: PUSH
29135: LD_INT 4
29137: ARRAY
29138: PPUSH
29139: CALL_OW 449
29143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29144: LD_ADDR_VAR 0 3
29148: PUSH
29149: LD_VAR 0 5
29153: PPUSH
29154: LD_INT 1
29156: PPUSH
29157: CALL_OW 275
29161: PUSH
29162: LD_VAR 0 4
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: GREATEREQUAL
29171: IFFALSE 29197
29173: PUSH
29174: LD_VAR 0 5
29178: PPUSH
29179: LD_INT 2
29181: PPUSH
29182: CALL_OW 275
29186: PUSH
29187: LD_VAR 0 4
29191: PUSH
29192: LD_INT 2
29194: ARRAY
29195: GREATEREQUAL
29196: AND
29197: IFFALSE 29223
29199: PUSH
29200: LD_VAR 0 5
29204: PPUSH
29205: LD_INT 3
29207: PPUSH
29208: CALL_OW 275
29212: PUSH
29213: LD_VAR 0 4
29217: PUSH
29218: LD_INT 3
29220: ARRAY
29221: GREATEREQUAL
29222: AND
29223: ST_TO_ADDR
// end ;
29224: LD_VAR 0 3
29228: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29229: LD_INT 0
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
// pom := GetBase ( building ) ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 274
29249: ST_TO_ADDR
// if not pom then
29250: LD_VAR 0 3
29254: NOT
29255: IFFALSE 29259
// exit ;
29257: GO 29433
// btype := GetBType ( building ) ;
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 266
29273: ST_TO_ADDR
// if btype = b_armoury then
29274: LD_VAR 0 5
29278: PUSH
29279: LD_INT 4
29281: EQUAL
29282: IFFALSE 29292
// btype := b_barracks ;
29284: LD_ADDR_VAR 0 5
29288: PUSH
29289: LD_INT 5
29291: ST_TO_ADDR
// if btype = b_depot then
29292: LD_VAR 0 5
29296: PUSH
29297: LD_INT 0
29299: EQUAL
29300: IFFALSE 29310
// btype := b_warehouse ;
29302: LD_ADDR_VAR 0 5
29306: PUSH
29307: LD_INT 1
29309: ST_TO_ADDR
// if btype = b_workshop then
29310: LD_VAR 0 5
29314: PUSH
29315: LD_INT 2
29317: EQUAL
29318: IFFALSE 29328
// btype := b_factory ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: LD_INT 3
29327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29328: LD_ADDR_VAR 0 4
29332: PUSH
29333: LD_VAR 0 5
29337: PPUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 248
29347: PPUSH
29348: CALL_OW 450
29352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29353: LD_ADDR_VAR 0 2
29357: PUSH
29358: LD_VAR 0 3
29362: PPUSH
29363: LD_INT 1
29365: PPUSH
29366: CALL_OW 275
29370: PUSH
29371: LD_VAR 0 4
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: GREATEREQUAL
29380: IFFALSE 29406
29382: PUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: LD_INT 2
29390: PPUSH
29391: CALL_OW 275
29395: PUSH
29396: LD_VAR 0 4
29400: PUSH
29401: LD_INT 2
29403: ARRAY
29404: GREATEREQUAL
29405: AND
29406: IFFALSE 29432
29408: PUSH
29409: LD_VAR 0 3
29413: PPUSH
29414: LD_INT 3
29416: PPUSH
29417: CALL_OW 275
29421: PUSH
29422: LD_VAR 0 4
29426: PUSH
29427: LD_INT 3
29429: ARRAY
29430: GREATEREQUAL
29431: AND
29432: ST_TO_ADDR
// end ;
29433: LD_VAR 0 2
29437: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29438: LD_INT 0
29440: PPUSH
29441: PPUSH
29442: PPUSH
// pom := GetBase ( building ) ;
29443: LD_ADDR_VAR 0 4
29447: PUSH
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 274
29457: ST_TO_ADDR
// if not pom then
29458: LD_VAR 0 4
29462: NOT
29463: IFFALSE 29467
// exit ;
29465: GO 29572
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 248
29486: PPUSH
29487: CALL_OW 450
29491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_VAR 0 4
29501: PPUSH
29502: LD_INT 1
29504: PPUSH
29505: CALL_OW 275
29509: PUSH
29510: LD_VAR 0 5
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: GREATEREQUAL
29519: IFFALSE 29545
29521: PUSH
29522: LD_VAR 0 4
29526: PPUSH
29527: LD_INT 2
29529: PPUSH
29530: CALL_OW 275
29534: PUSH
29535: LD_VAR 0 5
29539: PUSH
29540: LD_INT 2
29542: ARRAY
29543: GREATEREQUAL
29544: AND
29545: IFFALSE 29571
29547: PUSH
29548: LD_VAR 0 4
29552: PPUSH
29553: LD_INT 3
29555: PPUSH
29556: CALL_OW 275
29560: PUSH
29561: LD_VAR 0 5
29565: PUSH
29566: LD_INT 3
29568: ARRAY
29569: GREATEREQUAL
29570: AND
29571: ST_TO_ADDR
// end ;
29572: LD_VAR 0 3
29576: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29577: LD_INT 0
29579: PPUSH
29580: PPUSH
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
29587: PPUSH
29588: PPUSH
29589: PPUSH
// result := false ;
29590: LD_ADDR_VAR 0 8
29594: PUSH
29595: LD_INT 0
29597: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29598: LD_VAR 0 5
29602: NOT
29603: IFTRUE 29612
29605: PUSH
29606: LD_VAR 0 1
29610: NOT
29611: OR
29612: IFTRUE 29621
29614: PUSH
29615: LD_VAR 0 2
29619: NOT
29620: OR
29621: IFTRUE 29630
29623: PUSH
29624: LD_VAR 0 3
29628: NOT
29629: OR
29630: IFFALSE 29634
// exit ;
29632: GO 30460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29634: LD_ADDR_VAR 0 14
29638: PUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: LD_VAR 0 2
29648: PPUSH
29649: LD_VAR 0 3
29653: PPUSH
29654: LD_VAR 0 4
29658: PPUSH
29659: LD_VAR 0 5
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PPUSH
29668: CALL_OW 248
29672: PPUSH
29673: LD_INT 0
29675: PPUSH
29676: CALL 31741 0 6
29680: ST_TO_ADDR
// if not hexes then
29681: LD_VAR 0 14
29685: NOT
29686: IFFALSE 29690
// exit ;
29688: GO 30460
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29690: LD_ADDR_VAR 0 17
29694: PUSH
29695: LD_VAR 0 5
29699: PPUSH
29700: LD_INT 22
29702: PUSH
29703: LD_VAR 0 13
29707: PPUSH
29708: CALL_OW 255
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 30
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 30
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PPUSH
29749: CALL_OW 72
29753: ST_TO_ADDR
// for i = 1 to hexes do
29754: LD_ADDR_VAR 0 9
29758: PUSH
29759: DOUBLE
29760: LD_INT 1
29762: DEC
29763: ST_TO_ADDR
29764: LD_VAR 0 14
29768: PUSH
29769: FOR_TO
29770: IFFALSE 30458
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29772: LD_ADDR_VAR 0 13
29776: PUSH
29777: LD_VAR 0 14
29781: PUSH
29782: LD_VAR 0 9
29786: ARRAY
29787: PUSH
29788: LD_INT 1
29790: ARRAY
29791: PPUSH
29792: LD_VAR 0 14
29796: PUSH
29797: LD_VAR 0 9
29801: ARRAY
29802: PUSH
29803: LD_INT 2
29805: ARRAY
29806: PPUSH
29807: CALL_OW 428
29811: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29812: LD_VAR 0 14
29816: PUSH
29817: LD_VAR 0 9
29821: ARRAY
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: LD_VAR 0 14
29831: PUSH
29832: LD_VAR 0 9
29836: ARRAY
29837: PUSH
29838: LD_INT 2
29840: ARRAY
29841: PPUSH
29842: CALL_OW 351
29846: IFTRUE 29885
29848: PUSH
29849: LD_VAR 0 14
29853: PUSH
29854: LD_VAR 0 9
29858: ARRAY
29859: PUSH
29860: LD_INT 1
29862: ARRAY
29863: PPUSH
29864: LD_VAR 0 14
29868: PUSH
29869: LD_VAR 0 9
29873: ARRAY
29874: PUSH
29875: LD_INT 2
29877: ARRAY
29878: PPUSH
29879: CALL_OW 488
29883: NOT
29884: OR
29885: IFTRUE 29902
29887: PUSH
29888: LD_VAR 0 13
29892: PPUSH
29893: CALL_OW 247
29897: PUSH
29898: LD_INT 3
29900: EQUAL
29901: OR
29902: IFFALSE 29908
// exit ;
29904: POP
29905: POP
29906: GO 30460
// if not tmp then
29908: LD_VAR 0 13
29912: NOT
29913: IFFALSE 29917
// continue ;
29915: GO 29769
// result := true ;
29917: LD_ADDR_VAR 0 8
29921: PUSH
29922: LD_INT 1
29924: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29925: LD_VAR 0 6
29929: IFFALSE 29946
29931: PUSH
29932: LD_VAR 0 13
29936: PPUSH
29937: CALL_OW 247
29941: PUSH
29942: LD_INT 2
29944: EQUAL
29945: AND
29946: IFFALSE 29963
29948: PUSH
29949: LD_VAR 0 13
29953: PPUSH
29954: CALL_OW 263
29958: PUSH
29959: LD_INT 1
29961: EQUAL
29962: AND
29963: IFFALSE 30127
// begin if IsDrivenBy ( tmp ) then
29965: LD_VAR 0 13
29969: PPUSH
29970: CALL_OW 311
29974: IFFALSE 29978
// continue ;
29976: GO 29769
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29978: LD_VAR 0 6
29982: PPUSH
29983: LD_INT 3
29985: PUSH
29986: LD_INT 60
29988: PUSH
29989: EMPTY
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 55
30001: PUSH
30002: EMPTY
30003: LIST
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 72
30017: IFFALSE 30125
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30019: LD_ADDR_VAR 0 18
30023: PUSH
30024: LD_VAR 0 6
30028: PPUSH
30029: LD_INT 3
30031: PUSH
30032: LD_INT 60
30034: PUSH
30035: EMPTY
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: LD_INT 55
30047: PUSH
30048: EMPTY
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL_OW 72
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: ST_TO_ADDR
// if IsInUnit ( driver ) then
30068: LD_VAR 0 18
30072: PPUSH
30073: CALL_OW 310
30077: IFFALSE 30088
// ComExit ( driver ) ;
30079: LD_VAR 0 18
30083: PPUSH
30084: CALL 55741 0 1
// AddComEnterUnit ( driver , tmp ) ;
30088: LD_VAR 0 18
30092: PPUSH
30093: LD_VAR 0 13
30097: PPUSH
30098: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30102: LD_VAR 0 18
30106: PPUSH
30107: LD_VAR 0 7
30111: PPUSH
30112: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30116: LD_VAR 0 18
30120: PPUSH
30121: CALL_OW 181
// end ; continue ;
30125: GO 29769
// end ; if not cleaners or not tmp in cleaners then
30127: LD_VAR 0 6
30131: NOT
30132: IFTRUE 30147
30134: PUSH
30135: LD_VAR 0 13
30139: PUSH
30140: LD_VAR 0 6
30144: IN
30145: NOT
30146: OR
30147: IFFALSE 30456
// begin if dep then
30149: LD_VAR 0 17
30153: IFFALSE 30289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30155: LD_ADDR_VAR 0 16
30159: PUSH
30160: LD_VAR 0 17
30164: PUSH
30165: LD_INT 1
30167: ARRAY
30168: PPUSH
30169: CALL_OW 250
30173: PPUSH
30174: LD_VAR 0 17
30178: PUSH
30179: LD_INT 1
30181: ARRAY
30182: PPUSH
30183: CALL_OW 254
30187: PPUSH
30188: LD_INT 5
30190: PPUSH
30191: CALL_OW 272
30195: PUSH
30196: LD_VAR 0 17
30200: PUSH
30201: LD_INT 1
30203: ARRAY
30204: PPUSH
30205: CALL_OW 251
30209: PPUSH
30210: LD_VAR 0 17
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 254
30223: PPUSH
30224: LD_INT 5
30226: PPUSH
30227: CALL_OW 273
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30236: LD_VAR 0 16
30240: PUSH
30241: LD_INT 1
30243: ARRAY
30244: PPUSH
30245: LD_VAR 0 16
30249: PUSH
30250: LD_INT 2
30252: ARRAY
30253: PPUSH
30254: CALL_OW 488
30258: IFFALSE 30289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30260: LD_VAR 0 13
30264: PPUSH
30265: LD_VAR 0 16
30269: PUSH
30270: LD_INT 1
30272: ARRAY
30273: PPUSH
30274: LD_VAR 0 16
30278: PUSH
30279: LD_INT 2
30281: ARRAY
30282: PPUSH
30283: CALL_OW 111
// continue ;
30287: GO 29769
// end ; end ; r := GetDir ( tmp ) ;
30289: LD_ADDR_VAR 0 15
30293: PUSH
30294: LD_VAR 0 13
30298: PPUSH
30299: CALL_OW 254
30303: ST_TO_ADDR
// if r = 5 then
30304: LD_VAR 0 15
30308: PUSH
30309: LD_INT 5
30311: EQUAL
30312: IFFALSE 30322
// r := 0 ;
30314: LD_ADDR_VAR 0 15
30318: PUSH
30319: LD_INT 0
30321: ST_TO_ADDR
// for j = r to 5 do
30322: LD_ADDR_VAR 0 10
30326: PUSH
30327: DOUBLE
30328: LD_VAR 0 15
30332: DEC
30333: ST_TO_ADDR
30334: LD_INT 5
30336: PUSH
30337: FOR_TO
30338: IFFALSE 30454
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30340: LD_ADDR_VAR 0 11
30344: PUSH
30345: LD_VAR 0 13
30349: PPUSH
30350: CALL_OW 250
30354: PPUSH
30355: LD_VAR 0 10
30359: PPUSH
30360: LD_INT 2
30362: PPUSH
30363: CALL_OW 272
30367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30368: LD_ADDR_VAR 0 12
30372: PUSH
30373: LD_VAR 0 13
30377: PPUSH
30378: CALL_OW 251
30382: PPUSH
30383: LD_VAR 0 10
30387: PPUSH
30388: LD_INT 2
30390: PPUSH
30391: CALL_OW 273
30395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30396: LD_VAR 0 11
30400: PPUSH
30401: LD_VAR 0 12
30405: PPUSH
30406: CALL_OW 488
30410: IFFALSE 30429
30412: PUSH
30413: LD_VAR 0 11
30417: PPUSH
30418: LD_VAR 0 12
30422: PPUSH
30423: CALL_OW 428
30427: NOT
30428: AND
30429: IFFALSE 30452
// begin ComMoveXY ( tmp , _x , _y ) ;
30431: LD_VAR 0 13
30435: PPUSH
30436: LD_VAR 0 11
30440: PPUSH
30441: LD_VAR 0 12
30445: PPUSH
30446: CALL_OW 111
// break ;
30450: GO 30454
// end ; end ;
30452: GO 30337
30454: POP
30455: POP
// end ; end ;
30456: GO 29769
30458: POP
30459: POP
// end ;
30460: LD_VAR 0 8
30464: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30465: LD_INT 0
30467: PPUSH
// result := true ;
30468: LD_ADDR_VAR 0 3
30472: PUSH
30473: LD_INT 1
30475: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30476: LD_VAR 0 2
30480: PUSH
30481: LD_INT 24
30483: DOUBLE
30484: EQUAL
30485: IFTRUE 30495
30487: LD_INT 33
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30520
30495: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30496: LD_ADDR_VAR 0 3
30500: PUSH
30501: LD_INT 32
30503: PPUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 321
30513: PUSH
30514: LD_INT 2
30516: EQUAL
30517: ST_TO_ADDR
30518: GO 30836
30520: LD_INT 20
30522: DOUBLE
30523: EQUAL
30524: IFTRUE 30528
30526: GO 30553
30528: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 6
30536: PPUSH
30537: LD_VAR 0 1
30541: PPUSH
30542: CALL_OW 321
30546: PUSH
30547: LD_INT 2
30549: EQUAL
30550: ST_TO_ADDR
30551: GO 30836
30553: LD_INT 22
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30567
30559: LD_INT 36
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30592
30567: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30568: LD_ADDR_VAR 0 3
30572: PUSH
30573: LD_INT 15
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 321
30585: PUSH
30586: LD_INT 2
30588: EQUAL
30589: ST_TO_ADDR
30590: GO 30836
30592: LD_INT 30
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30625
30600: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 20
30608: PPUSH
30609: LD_VAR 0 1
30613: PPUSH
30614: CALL_OW 321
30618: PUSH
30619: LD_INT 2
30621: EQUAL
30622: ST_TO_ADDR
30623: GO 30836
30625: LD_INT 28
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30639
30631: LD_INT 21
30633: DOUBLE
30634: EQUAL
30635: IFTRUE 30639
30637: GO 30664
30639: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 21
30647: PPUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 321
30657: PUSH
30658: LD_INT 2
30660: EQUAL
30661: ST_TO_ADDR
30662: GO 30836
30664: LD_INT 16
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30697
30672: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30673: LD_ADDR_VAR 0 3
30677: PUSH
30678: LD_INT 84
30680: PPUSH
30681: LD_VAR 0 1
30685: PPUSH
30686: CALL_OW 321
30690: PUSH
30691: LD_INT 2
30693: EQUAL
30694: ST_TO_ADDR
30695: GO 30836
30697: LD_INT 19
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30711
30703: LD_INT 23
30705: DOUBLE
30706: EQUAL
30707: IFTRUE 30711
30709: GO 30736
30711: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 83
30719: PPUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 321
30729: PUSH
30730: LD_INT 2
30732: EQUAL
30733: ST_TO_ADDR
30734: GO 30836
30736: LD_INT 17
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30769
30744: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30745: LD_ADDR_VAR 0 3
30749: PUSH
30750: LD_INT 39
30752: PPUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 321
30762: PUSH
30763: LD_INT 2
30765: EQUAL
30766: ST_TO_ADDR
30767: GO 30836
30769: LD_INT 18
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30802
30777: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30778: LD_ADDR_VAR 0 3
30782: PUSH
30783: LD_INT 40
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 321
30795: PUSH
30796: LD_INT 2
30798: EQUAL
30799: ST_TO_ADDR
30800: GO 30836
30802: LD_INT 27
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30835
30810: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30811: LD_ADDR_VAR 0 3
30815: PUSH
30816: LD_INT 35
30818: PPUSH
30819: LD_VAR 0 1
30823: PPUSH
30824: CALL_OW 321
30828: PUSH
30829: LD_INT 2
30831: EQUAL
30832: ST_TO_ADDR
30833: GO 30836
30835: POP
// end ;
30836: LD_VAR 0 3
30840: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30841: LD_INT 0
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
// result := false ;
30854: LD_ADDR_VAR 0 6
30858: PUSH
30859: LD_INT 0
30861: ST_TO_ADDR
// if btype = b_depot then
30862: LD_VAR 0 2
30866: PUSH
30867: LD_INT 0
30869: EQUAL
30870: IFFALSE 30882
// begin result := true ;
30872: LD_ADDR_VAR 0 6
30876: PUSH
30877: LD_INT 1
30879: ST_TO_ADDR
// exit ;
30880: GO 31736
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30882: LD_VAR 0 1
30886: NOT
30887: IFTRUE 30912
30889: PUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 266
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: IN
30910: NOT
30911: OR
30912: IFTRUE 30921
30914: PUSH
30915: LD_VAR 0 2
30919: NOT
30920: OR
30921: IFTRUE 30957
30923: PUSH
30924: LD_VAR 0 5
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 4
30943: PUSH
30944: LD_INT 5
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: IN
30955: NOT
30956: OR
30957: IFTRUE 30976
30959: PUSH
30960: LD_VAR 0 3
30964: PPUSH
30965: LD_VAR 0 4
30969: PPUSH
30970: CALL_OW 488
30974: NOT
30975: OR
30976: IFFALSE 30980
// exit ;
30978: GO 31736
// side := GetSide ( depot ) ;
30980: LD_ADDR_VAR 0 9
30984: PUSH
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 255
30994: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30995: LD_VAR 0 9
30999: PPUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: CALL 30465 0 2
31009: NOT
31010: IFFALSE 31014
// exit ;
31012: GO 31736
// pom := GetBase ( depot ) ;
31014: LD_ADDR_VAR 0 10
31018: PUSH
31019: LD_VAR 0 1
31023: PPUSH
31024: CALL_OW 274
31028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31029: LD_ADDR_VAR 0 11
31033: PUSH
31034: LD_VAR 0 2
31038: PPUSH
31039: LD_VAR 0 1
31043: PPUSH
31044: CALL_OW 248
31048: PPUSH
31049: CALL_OW 450
31053: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31054: LD_VAR 0 10
31058: PPUSH
31059: LD_INT 1
31061: PPUSH
31062: CALL_OW 275
31066: PUSH
31067: LD_VAR 0 11
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: GREATEREQUAL
31076: IFFALSE 31102
31078: PUSH
31079: LD_VAR 0 10
31083: PPUSH
31084: LD_INT 2
31086: PPUSH
31087: CALL_OW 275
31091: PUSH
31092: LD_VAR 0 11
31096: PUSH
31097: LD_INT 2
31099: ARRAY
31100: GREATEREQUAL
31101: AND
31102: IFFALSE 31128
31104: PUSH
31105: LD_VAR 0 10
31109: PPUSH
31110: LD_INT 3
31112: PPUSH
31113: CALL_OW 275
31117: PUSH
31118: LD_VAR 0 11
31122: PUSH
31123: LD_INT 3
31125: ARRAY
31126: GREATEREQUAL
31127: AND
31128: NOT
31129: IFFALSE 31133
// exit ;
31131: GO 31736
// if GetBType ( depot ) = b_depot then
31133: LD_VAR 0 1
31137: PPUSH
31138: CALL_OW 266
31142: PUSH
31143: LD_INT 0
31145: EQUAL
31146: IFFALSE 31158
// dist := 28 else
31148: LD_ADDR_VAR 0 14
31152: PUSH
31153: LD_INT 28
31155: ST_TO_ADDR
31156: GO 31166
// dist := 36 ;
31158: LD_ADDR_VAR 0 14
31162: PUSH
31163: LD_INT 36
31165: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31166: LD_VAR 0 1
31170: PPUSH
31171: LD_VAR 0 3
31175: PPUSH
31176: LD_VAR 0 4
31180: PPUSH
31181: CALL_OW 297
31185: PUSH
31186: LD_VAR 0 14
31190: GREATER
31191: IFFALSE 31195
// exit ;
31193: GO 31736
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31195: LD_ADDR_VAR 0 12
31199: PUSH
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: LD_VAR 0 4
31214: PPUSH
31215: LD_VAR 0 5
31219: PPUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL_OW 248
31229: PPUSH
31230: LD_INT 0
31232: PPUSH
31233: CALL 31741 0 6
31237: ST_TO_ADDR
// if not hexes then
31238: LD_VAR 0 12
31242: NOT
31243: IFFALSE 31247
// exit ;
31245: GO 31736
// hex := GetHexInfo ( x , y ) ;
31247: LD_ADDR_VAR 0 15
31251: PUSH
31252: LD_VAR 0 3
31256: PPUSH
31257: LD_VAR 0 4
31261: PPUSH
31262: CALL_OW 546
31266: ST_TO_ADDR
// if hex [ 1 ] then
31267: LD_VAR 0 15
31271: PUSH
31272: LD_INT 1
31274: ARRAY
31275: IFFALSE 31279
// exit ;
31277: GO 31736
// height := hex [ 2 ] ;
31279: LD_ADDR_VAR 0 13
31283: PUSH
31284: LD_VAR 0 15
31288: PUSH
31289: LD_INT 2
31291: ARRAY
31292: ST_TO_ADDR
// for i = 1 to hexes do
31293: LD_ADDR_VAR 0 7
31297: PUSH
31298: DOUBLE
31299: LD_INT 1
31301: DEC
31302: ST_TO_ADDR
31303: LD_VAR 0 12
31307: PUSH
31308: FOR_TO
31309: IFFALSE 31653
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31311: LD_VAR 0 12
31315: PUSH
31316: LD_VAR 0 7
31320: ARRAY
31321: PUSH
31322: LD_INT 1
31324: ARRAY
31325: PPUSH
31326: LD_VAR 0 12
31330: PUSH
31331: LD_VAR 0 7
31335: ARRAY
31336: PUSH
31337: LD_INT 2
31339: ARRAY
31340: PPUSH
31341: CALL_OW 488
31345: NOT
31346: IFTRUE 31388
31348: PUSH
31349: LD_VAR 0 12
31353: PUSH
31354: LD_VAR 0 7
31358: ARRAY
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: LD_VAR 0 12
31368: PUSH
31369: LD_VAR 0 7
31373: ARRAY
31374: PUSH
31375: LD_INT 2
31377: ARRAY
31378: PPUSH
31379: CALL_OW 428
31383: PUSH
31384: LD_INT 0
31386: GREATER
31387: OR
31388: IFTRUE 31426
31390: PUSH
31391: LD_VAR 0 12
31395: PUSH
31396: LD_VAR 0 7
31400: ARRAY
31401: PUSH
31402: LD_INT 1
31404: ARRAY
31405: PPUSH
31406: LD_VAR 0 12
31410: PUSH
31411: LD_VAR 0 7
31415: ARRAY
31416: PUSH
31417: LD_INT 2
31419: ARRAY
31420: PPUSH
31421: CALL_OW 351
31425: OR
31426: IFFALSE 31432
// exit ;
31428: POP
31429: POP
31430: GO 31736
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31432: LD_ADDR_VAR 0 8
31436: PUSH
31437: LD_VAR 0 12
31441: PUSH
31442: LD_VAR 0 7
31446: ARRAY
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: LD_VAR 0 12
31456: PUSH
31457: LD_VAR 0 7
31461: ARRAY
31462: PUSH
31463: LD_INT 2
31465: ARRAY
31466: PPUSH
31467: CALL_OW 546
31471: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31472: LD_VAR 0 8
31476: PUSH
31477: LD_INT 1
31479: ARRAY
31480: IFTRUE 31502
31482: PUSH
31483: LD_VAR 0 8
31487: PUSH
31488: LD_INT 2
31490: ARRAY
31491: PUSH
31492: LD_VAR 0 13
31496: PUSH
31497: LD_INT 2
31499: PLUS
31500: GREATER
31501: OR
31502: IFTRUE 31524
31504: PUSH
31505: LD_VAR 0 8
31509: PUSH
31510: LD_INT 2
31512: ARRAY
31513: PUSH
31514: LD_VAR 0 13
31518: PUSH
31519: LD_INT 2
31521: MINUS
31522: LESS
31523: OR
31524: IFTRUE 31592
31526: PUSH
31527: LD_VAR 0 8
31531: PUSH
31532: LD_INT 3
31534: ARRAY
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 8
31541: PUSH
31542: LD_INT 9
31544: PUSH
31545: LD_INT 10
31547: PUSH
31548: LD_INT 11
31550: PUSH
31551: LD_INT 12
31553: PUSH
31554: LD_INT 13
31556: PUSH
31557: LD_INT 16
31559: PUSH
31560: LD_INT 17
31562: PUSH
31563: LD_INT 18
31565: PUSH
31566: LD_INT 19
31568: PUSH
31569: LD_INT 20
31571: PUSH
31572: LD_INT 21
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: IN
31590: NOT
31591: OR
31592: IFTRUE 31605
31594: PUSH
31595: LD_VAR 0 8
31599: PUSH
31600: LD_INT 5
31602: ARRAY
31603: NOT
31604: OR
31605: IFTRUE 31645
31607: PUSH
31608: LD_VAR 0 8
31612: PUSH
31613: LD_INT 6
31615: ARRAY
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: LD_INT 7
31625: PUSH
31626: LD_INT 9
31628: PUSH
31629: LD_INT 10
31631: PUSH
31632: LD_INT 11
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: IN
31643: NOT
31644: OR
31645: IFFALSE 31651
// exit ;
31647: POP
31648: POP
31649: GO 31736
// end ;
31651: GO 31308
31653: POP
31654: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31655: LD_VAR 0 9
31659: PPUSH
31660: LD_VAR 0 3
31664: PPUSH
31665: LD_VAR 0 4
31669: PPUSH
31670: LD_INT 20
31672: PPUSH
31673: CALL 23555 0 4
31677: PUSH
31678: LD_INT 4
31680: ARRAY
31681: IFFALSE 31685
// exit ;
31683: GO 31736
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31685: LD_VAR 0 2
31689: PUSH
31690: LD_INT 29
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: IN
31700: IFFALSE 31724
31702: PUSH
31703: LD_VAR 0 3
31707: PPUSH
31708: LD_VAR 0 4
31712: PPUSH
31713: LD_VAR 0 9
31717: PPUSH
31718: CALL_OW 440
31722: NOT
31723: AND
31724: IFFALSE 31728
// exit ;
31726: GO 31736
// result := true ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_INT 1
31735: ST_TO_ADDR
// end ;
31736: LD_VAR 0 6
31740: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
31755: PPUSH
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
31796: PPUSH
31797: PPUSH
31798: PPUSH
31799: PPUSH
31800: PPUSH
// result = [ ] ;
31801: LD_ADDR_VAR 0 7
31805: PUSH
31806: EMPTY
31807: ST_TO_ADDR
// temp_list = [ ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: EMPTY
31814: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31815: LD_VAR 0 4
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: LD_INT 3
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: LD_INT 5
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: IN
31846: NOT
31847: IFTRUE 31890
31849: PUSH
31850: LD_VAR 0 1
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: IN
31865: IFFALSE 31889
31867: PUSH
31868: LD_VAR 0 5
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: IN
31887: NOT
31888: AND
31889: OR
31890: IFFALSE 31894
// exit ;
31892: GO 50293
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31894: LD_VAR 0 1
31898: PUSH
31899: LD_INT 6
31901: PUSH
31902: LD_INT 7
31904: PUSH
31905: LD_INT 8
31907: PUSH
31908: LD_INT 13
31910: PUSH
31911: LD_INT 12
31913: PUSH
31914: LD_INT 15
31916: PUSH
31917: LD_INT 11
31919: PUSH
31920: LD_INT 14
31922: PUSH
31923: LD_INT 10
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: IN
31937: IFFALSE 31947
// btype = b_lab ;
31939: LD_ADDR_VAR 0 1
31943: PUSH
31944: LD_INT 6
31946: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31947: LD_VAR 0 6
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: IN
31966: NOT
31967: IFTRUE 32035
31969: PUSH
31970: LD_VAR 0 1
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 6
31989: PUSH
31990: LD_INT 36
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 31
32001: PUSH
32002: LD_INT 32
32004: PUSH
32005: LD_INT 33
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: IN
32021: NOT
32022: IFFALSE 32034
32024: PUSH
32025: LD_VAR 0 6
32029: PUSH
32030: LD_INT 1
32032: EQUAL
32033: AND
32034: OR
32035: IFTRUE 32067
32037: PUSH
32038: LD_VAR 0 1
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: IN
32053: NOT
32054: IFFALSE 32066
32056: PUSH
32057: LD_VAR 0 6
32061: PUSH
32062: LD_INT 2
32064: EQUAL
32065: AND
32066: OR
32067: IFFALSE 32077
// mode = 0 ;
32069: LD_ADDR_VAR 0 6
32073: PUSH
32074: LD_INT 0
32076: ST_TO_ADDR
// case mode of 0 :
32077: LD_VAR 0 6
32081: PUSH
32082: LD_INT 0
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 43543
32090: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32091: LD_ADDR_VAR 0 11
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32284: LD_ADDR_VAR 0 12
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32480: LD_ADDR_VAR 0 13
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 3
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: LD_INT 2
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 3
32651: NEG
32652: PUSH
32653: LD_INT 3
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32679: LD_ADDR_VAR 0 14
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32875: LD_ADDR_VAR 0 15
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33068: LD_ADDR_VAR 0 16
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: NEG
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33261: LD_ADDR_VAR 0 17
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33491: LD_ADDR_VAR 0 18
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 2
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: NEG
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33721: LD_ADDR_VAR 0 19
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33951: LD_ADDR_VAR 0 20
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: NEG
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34181: LD_ADDR_VAR 0 21
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34411: LD_ADDR_VAR 0 22
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34641: LD_ADDR_VAR 0 23
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: NEG
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: LD_INT 3
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: LD_INT 3
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34921: LD_ADDR_VAR 0 24
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 2
35108: NEG
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35197: LD_ADDR_VAR 0 25
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 2
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 2
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: LD_INT 2
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 3
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35471: LD_ADDR_VAR 0 26
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: NEG
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35747: LD_ADDR_VAR 0 27
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 3
35992: NEG
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36027: LD_ADDR_VAR 0 28
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: LD_INT 3
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 3
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 3
36262: NEG
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36309: LD_ADDR_VAR 0 29
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 3
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 3
36553: NEG
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36588: LD_ADDR_VAR 0 30
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: LD_INT 2
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 3
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 3
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 3
36831: NEG
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36866: LD_ADDR_VAR 0 31
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 2
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 3
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 3
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37144: LD_ADDR_VAR 0 32
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 3
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 3
37387: NEG
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37422: LD_ADDR_VAR 0 33
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: LD_INT 3
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37701: LD_ADDR_VAR 0 34
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 3
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 3
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 3
37946: NEG
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37981: LD_ADDR_VAR 0 35
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38093: LD_ADDR_VAR 0 36
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38205: LD_ADDR_VAR 0 37
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38317: LD_ADDR_VAR 0 38
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38429: LD_ADDR_VAR 0 39
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38541: LD_ADDR_VAR 0 40
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38653: LD_ADDR_VAR 0 41
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: LD_INT 3
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: LD_INT 3
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: NEG
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 3
38962: NEG
38963: PUSH
38964: LD_INT 3
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39003: LD_ADDR_VAR 0 42
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: LD_INT 3
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 3
39312: NEG
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39353: LD_ADDR_VAR 0 43
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 3
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: LD_INT 3
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39701: LD_ADDR_VAR 0 44
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 3
39975: NEG
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 3
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 3
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: NEG
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40051: LD_ADDR_VAR 0 45
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 3
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 3
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 3
40360: NEG
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40401: LD_ADDR_VAR 0 46
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 3
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 3
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 3
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40749: LD_ADDR_VAR 0 47
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40900: LD_ADDR_VAR 0 48
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41047: LD_ADDR_VAR 0 49
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41191: LD_ADDR_VAR 0 50
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41335: LD_ADDR_VAR 0 51
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41482: LD_ADDR_VAR 0 52
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41633: LD_ADDR_VAR 0 53
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41863: LD_ADDR_VAR 0 54
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42093: LD_ADDR_VAR 0 55
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42323: LD_ADDR_VAR 0 56
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42553: LD_ADDR_VAR 0 57
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42783: LD_ADDR_VAR 0 58
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43013: LD_ADDR_VAR 0 59
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43101: LD_ADDR_VAR 0 60
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43189: LD_ADDR_VAR 0 61
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43277: LD_ADDR_VAR 0 62
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43365: LD_ADDR_VAR 0 63
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43453: LD_ADDR_VAR 0 64
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// end ; 1 :
43541: GO 49438
43543: LD_INT 1
43545: DOUBLE
43546: EQUAL
43547: IFTRUE 43551
43549: GO 46174
43551: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43552: LD_ADDR_VAR 0 11
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43596: LD_ADDR_VAR 0 12
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43637: LD_ADDR_VAR 0 13
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: PUSH
43655: LD_INT 3
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 3
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43677: LD_ADDR_VAR 0 14
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43718: LD_ADDR_VAR 0 15
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43762: LD_ADDR_VAR 0 16
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 3
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43808: LD_ADDR_VAR 0 17
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 3
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43852: LD_ADDR_VAR 0 18
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43893: LD_ADDR_VAR 0 19
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43933: LD_ADDR_VAR 0 20
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43974: LD_ADDR_VAR 0 21
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44018: LD_ADDR_VAR 0 22
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 3
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 3
44049: NEG
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44064: LD_ADDR_VAR 0 23
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 4
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 3
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44108: LD_ADDR_VAR 0 24
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 4
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44149: LD_ADDR_VAR 0 25
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 4
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: LD_INT 4
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44189: LD_ADDR_VAR 0 26
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 4
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44230: LD_ADDR_VAR 0 27
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 4
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44274: LD_ADDR_VAR 0 28
44278: PUSH
44279: LD_INT 3
44281: NEG
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: NEG
44294: PUSH
44295: LD_INT 4
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 4
44305: NEG
44306: PUSH
44307: LD_INT 3
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44320: LD_ADDR_VAR 0 29
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 3
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 4
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 4
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 3
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 5
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 5
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 4
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 6
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 6
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 5
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44475: LD_ADDR_VAR 0 30
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 4
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 4
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 4
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 5
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 5
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 6
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 6
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44618: LD_ADDR_VAR 0 31
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 4
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: LD_INT 4
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 5
44685: PUSH
44686: LD_INT 4
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 5
44695: PUSH
44696: LD_INT 5
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 6
44715: PUSH
44716: LD_INT 5
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 6
44725: PUSH
44726: LD_INT 6
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 5
44735: PUSH
44736: LD_INT 6
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44757: LD_ADDR_VAR 0 32
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 4
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 4
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 5
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 5
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 4
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 6
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 6
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 5
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44900: LD_ADDR_VAR 0 33
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: NEG
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 4
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 4
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 5
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 5
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 5
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 6
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 6
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45055: LD_ADDR_VAR 0 34
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 3
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: LD_INT 4
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 4
45110: NEG
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 4
45122: NEG
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 4
45134: NEG
45135: PUSH
45136: LD_INT 5
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 5
45146: NEG
45147: PUSH
45148: LD_INT 4
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 5
45158: NEG
45159: PUSH
45160: LD_INT 5
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 5
45170: NEG
45171: PUSH
45172: LD_INT 6
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 6
45182: NEG
45183: PUSH
45184: LD_INT 5
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 6
45194: NEG
45195: PUSH
45196: LD_INT 6
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45218: LD_ADDR_VAR 0 41
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45262: LD_ADDR_VAR 0 42
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 3
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45303: LD_ADDR_VAR 0 43
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45343: LD_ADDR_VAR 0 44
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45384: LD_ADDR_VAR 0 45
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45428: LD_ADDR_VAR 0 46
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45474: LD_ADDR_VAR 0 47
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45507: LD_ADDR_VAR 0 48
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45538: LD_ADDR_VAR 0 49
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45567: LD_ADDR_VAR 0 50
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45596: LD_ADDR_VAR 0 51
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45627: LD_ADDR_VAR 0 52
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45660: LD_ADDR_VAR 0 53
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 3
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 3
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45704: LD_ADDR_VAR 0 54
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 3
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45745: LD_ADDR_VAR 0 55
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 3
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45785: LD_ADDR_VAR 0 56
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45826: LD_ADDR_VAR 0 57
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45870: LD_ADDR_VAR 0 58
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45916: LD_ADDR_VAR 0 59
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45960: LD_ADDR_VAR 0 60
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46001: LD_ADDR_VAR 0 61
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46041: LD_ADDR_VAR 0 62
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46082: LD_ADDR_VAR 0 63
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46126: LD_ADDR_VAR 0 64
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// end ; 2 :
46172: GO 49438
46174: LD_INT 2
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 49437
46182: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46183: LD_ADDR_VAR 0 29
46187: PUSH
46188: LD_INT 4
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 4
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 5
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 5
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 4
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 4
46313: PUSH
46314: LD_INT 4
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 4
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 4
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 4
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 5
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 4
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 5
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 4
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 4
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 4
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 4
46568: NEG
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: LD_INT 5
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: LD_INT 3
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 5
46628: NEG
46629: PUSH
46630: LD_INT 4
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 5
46640: NEG
46641: PUSH
46642: LD_INT 5
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 5
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 5
46664: NEG
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46721: LD_ADDR_VAR 0 30
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 5
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 5
46758: PUSH
46759: LD_INT 5
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 5
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 3
46808: PUSH
46809: LD_INT 5
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 4
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 4
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 4
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 4
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: NEG
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 5
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 5
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 5
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: LD_INT 4
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 4
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: LD_INT 4
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 4
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 4
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 4
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 5
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 4
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 4
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 5
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 5
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47268: LD_ADDR_VAR 0 31
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 3
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 4
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 5
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 5
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 3
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 4
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 4
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 4
47470: NEG
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 4
47482: NEG
47483: PUSH
47484: LD_INT 5
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: LD_INT 4
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: NEG
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 5
47530: NEG
47531: PUSH
47532: LD_INT 4
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: NEG
47543: PUSH
47544: LD_INT 5
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 5
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 5
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 4
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 4
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 4
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 5
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 5
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 4
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 5
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47818: LD_ADDR_VAR 0 32
47822: PUSH
47823: LD_INT 4
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 4
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 4
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 5
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 5
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 5
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 4
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 4
47987: NEG
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 4
47999: NEG
48000: PUSH
48001: LD_INT 4
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 4
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 4
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 4
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 5
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 4
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 4
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 5
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 5
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: LD_INT 4
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 4
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 5
48250: PUSH
48251: LD_INT 4
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: PUSH
48271: LD_INT 5
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 5
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48365: LD_ADDR_VAR 0 33
48369: PUSH
48370: LD_INT 4
48372: NEG
48373: PUSH
48374: LD_INT 4
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 4
48384: NEG
48385: PUSH
48386: LD_INT 5
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: NEG
48397: PUSH
48398: LD_INT 4
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 4
48420: NEG
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 5
48432: NEG
48433: PUSH
48434: LD_INT 4
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 5
48444: NEG
48445: PUSH
48446: LD_INT 5
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: LD_INT 5
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 5
48468: NEG
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 4
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 4
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 4
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 4
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 4
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 5
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 5
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 4
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 5
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 3
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 4
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 4
48705: PUSH
48706: LD_INT 4
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 4
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 4
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 4
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 5
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 4
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 5
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48903: LD_ADDR_VAR 0 34
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 4
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 5
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 4
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 4
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 5
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 3
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 5
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 4
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 4
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 4
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 4
49105: PUSH
49106: LD_INT 4
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 4
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 5
49125: PUSH
49126: LD_INT 4
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 5
49135: PUSH
49136: LD_INT 5
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: PUSH
49146: LD_INT 5
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: LD_INT 4
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 5
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 5
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 3
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 4
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 4
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 4
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 4
49288: NEG
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 4
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 4
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 5
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 5
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 5
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// end ; end ;
49435: GO 49438
49437: POP
// case btype of b_depot , b_warehouse :
49438: LD_VAR 0 1
49442: PUSH
49443: LD_INT 0
49445: DOUBLE
49446: EQUAL
49447: IFTRUE 49457
49449: LD_INT 1
49451: DOUBLE
49452: EQUAL
49453: IFTRUE 49457
49455: GO 49658
49457: POP
// case nation of nation_american :
49458: LD_VAR 0 5
49462: PUSH
49463: LD_INT 1
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49471
49469: GO 49527
49471: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49472: LD_ADDR_VAR 0 9
49476: PUSH
49477: LD_VAR 0 11
49481: PUSH
49482: LD_VAR 0 12
49486: PUSH
49487: LD_VAR 0 13
49491: PUSH
49492: LD_VAR 0 14
49496: PUSH
49497: LD_VAR 0 15
49501: PUSH
49502: LD_VAR 0 16
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: PUSH
49515: LD_VAR 0 4
49519: PUSH
49520: LD_INT 1
49522: PLUS
49523: ARRAY
49524: ST_TO_ADDR
49525: GO 49656
49527: LD_INT 2
49529: DOUBLE
49530: EQUAL
49531: IFTRUE 49535
49533: GO 49591
49535: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49536: LD_ADDR_VAR 0 9
49540: PUSH
49541: LD_VAR 0 17
49545: PUSH
49546: LD_VAR 0 18
49550: PUSH
49551: LD_VAR 0 19
49555: PUSH
49556: LD_VAR 0 20
49560: PUSH
49561: LD_VAR 0 21
49565: PUSH
49566: LD_VAR 0 22
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: LD_VAR 0 4
49583: PUSH
49584: LD_INT 1
49586: PLUS
49587: ARRAY
49588: ST_TO_ADDR
49589: GO 49656
49591: LD_INT 3
49593: DOUBLE
49594: EQUAL
49595: IFTRUE 49599
49597: GO 49655
49599: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49600: LD_ADDR_VAR 0 9
49604: PUSH
49605: LD_VAR 0 23
49609: PUSH
49610: LD_VAR 0 24
49614: PUSH
49615: LD_VAR 0 25
49619: PUSH
49620: LD_VAR 0 26
49624: PUSH
49625: LD_VAR 0 27
49629: PUSH
49630: LD_VAR 0 28
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: PUSH
49643: LD_VAR 0 4
49647: PUSH
49648: LD_INT 1
49650: PLUS
49651: ARRAY
49652: ST_TO_ADDR
49653: GO 49656
49655: POP
49656: GO 50211
49658: LD_INT 2
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49672
49664: LD_INT 3
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49672
49670: GO 49728
49672: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49673: LD_ADDR_VAR 0 9
49677: PUSH
49678: LD_VAR 0 29
49682: PUSH
49683: LD_VAR 0 30
49687: PUSH
49688: LD_VAR 0 31
49692: PUSH
49693: LD_VAR 0 32
49697: PUSH
49698: LD_VAR 0 33
49702: PUSH
49703: LD_VAR 0 34
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: LD_VAR 0 4
49720: PUSH
49721: LD_INT 1
49723: PLUS
49724: ARRAY
49725: ST_TO_ADDR
49726: GO 50211
49728: LD_INT 16
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49790
49734: LD_INT 17
49736: DOUBLE
49737: EQUAL
49738: IFTRUE 49790
49740: LD_INT 18
49742: DOUBLE
49743: EQUAL
49744: IFTRUE 49790
49746: LD_INT 19
49748: DOUBLE
49749: EQUAL
49750: IFTRUE 49790
49752: LD_INT 22
49754: DOUBLE
49755: EQUAL
49756: IFTRUE 49790
49758: LD_INT 20
49760: DOUBLE
49761: EQUAL
49762: IFTRUE 49790
49764: LD_INT 21
49766: DOUBLE
49767: EQUAL
49768: IFTRUE 49790
49770: LD_INT 23
49772: DOUBLE
49773: EQUAL
49774: IFTRUE 49790
49776: LD_INT 24
49778: DOUBLE
49779: EQUAL
49780: IFTRUE 49790
49782: LD_INT 25
49784: DOUBLE
49785: EQUAL
49786: IFTRUE 49790
49788: GO 49846
49790: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49791: LD_ADDR_VAR 0 9
49795: PUSH
49796: LD_VAR 0 35
49800: PUSH
49801: LD_VAR 0 36
49805: PUSH
49806: LD_VAR 0 37
49810: PUSH
49811: LD_VAR 0 38
49815: PUSH
49816: LD_VAR 0 39
49820: PUSH
49821: LD_VAR 0 40
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: PUSH
49834: LD_VAR 0 4
49838: PUSH
49839: LD_INT 1
49841: PLUS
49842: ARRAY
49843: ST_TO_ADDR
49844: GO 50211
49846: LD_INT 6
49848: DOUBLE
49849: EQUAL
49850: IFTRUE 49902
49852: LD_INT 7
49854: DOUBLE
49855: EQUAL
49856: IFTRUE 49902
49858: LD_INT 8
49860: DOUBLE
49861: EQUAL
49862: IFTRUE 49902
49864: LD_INT 13
49866: DOUBLE
49867: EQUAL
49868: IFTRUE 49902
49870: LD_INT 12
49872: DOUBLE
49873: EQUAL
49874: IFTRUE 49902
49876: LD_INT 15
49878: DOUBLE
49879: EQUAL
49880: IFTRUE 49902
49882: LD_INT 11
49884: DOUBLE
49885: EQUAL
49886: IFTRUE 49902
49888: LD_INT 14
49890: DOUBLE
49891: EQUAL
49892: IFTRUE 49902
49894: LD_INT 10
49896: DOUBLE
49897: EQUAL
49898: IFTRUE 49902
49900: GO 49958
49902: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49903: LD_ADDR_VAR 0 9
49907: PUSH
49908: LD_VAR 0 41
49912: PUSH
49913: LD_VAR 0 42
49917: PUSH
49918: LD_VAR 0 43
49922: PUSH
49923: LD_VAR 0 44
49927: PUSH
49928: LD_VAR 0 45
49932: PUSH
49933: LD_VAR 0 46
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: PUSH
49946: LD_VAR 0 4
49950: PUSH
49951: LD_INT 1
49953: PLUS
49954: ARRAY
49955: ST_TO_ADDR
49956: GO 50211
49958: LD_INT 36
49960: DOUBLE
49961: EQUAL
49962: IFTRUE 49966
49964: GO 50022
49966: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49967: LD_ADDR_VAR 0 9
49971: PUSH
49972: LD_VAR 0 47
49976: PUSH
49977: LD_VAR 0 48
49981: PUSH
49982: LD_VAR 0 49
49986: PUSH
49987: LD_VAR 0 50
49991: PUSH
49992: LD_VAR 0 51
49996: PUSH
49997: LD_VAR 0 52
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: PUSH
50010: LD_VAR 0 4
50014: PUSH
50015: LD_INT 1
50017: PLUS
50018: ARRAY
50019: ST_TO_ADDR
50020: GO 50211
50022: LD_INT 4
50024: DOUBLE
50025: EQUAL
50026: IFTRUE 50048
50028: LD_INT 5
50030: DOUBLE
50031: EQUAL
50032: IFTRUE 50048
50034: LD_INT 34
50036: DOUBLE
50037: EQUAL
50038: IFTRUE 50048
50040: LD_INT 37
50042: DOUBLE
50043: EQUAL
50044: IFTRUE 50048
50046: GO 50104
50048: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50049: LD_ADDR_VAR 0 9
50053: PUSH
50054: LD_VAR 0 53
50058: PUSH
50059: LD_VAR 0 54
50063: PUSH
50064: LD_VAR 0 55
50068: PUSH
50069: LD_VAR 0 56
50073: PUSH
50074: LD_VAR 0 57
50078: PUSH
50079: LD_VAR 0 58
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: PUSH
50092: LD_VAR 0 4
50096: PUSH
50097: LD_INT 1
50099: PLUS
50100: ARRAY
50101: ST_TO_ADDR
50102: GO 50211
50104: LD_INT 31
50106: DOUBLE
50107: EQUAL
50108: IFTRUE 50154
50110: LD_INT 32
50112: DOUBLE
50113: EQUAL
50114: IFTRUE 50154
50116: LD_INT 33
50118: DOUBLE
50119: EQUAL
50120: IFTRUE 50154
50122: LD_INT 27
50124: DOUBLE
50125: EQUAL
50126: IFTRUE 50154
50128: LD_INT 26
50130: DOUBLE
50131: EQUAL
50132: IFTRUE 50154
50134: LD_INT 28
50136: DOUBLE
50137: EQUAL
50138: IFTRUE 50154
50140: LD_INT 29
50142: DOUBLE
50143: EQUAL
50144: IFTRUE 50154
50146: LD_INT 30
50148: DOUBLE
50149: EQUAL
50150: IFTRUE 50154
50152: GO 50210
50154: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50155: LD_ADDR_VAR 0 9
50159: PUSH
50160: LD_VAR 0 59
50164: PUSH
50165: LD_VAR 0 60
50169: PUSH
50170: LD_VAR 0 61
50174: PUSH
50175: LD_VAR 0 62
50179: PUSH
50180: LD_VAR 0 63
50184: PUSH
50185: LD_VAR 0 64
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: PUSH
50198: LD_VAR 0 4
50202: PUSH
50203: LD_INT 1
50205: PLUS
50206: ARRAY
50207: ST_TO_ADDR
50208: GO 50211
50210: POP
// temp_list2 = [ ] ;
50211: LD_ADDR_VAR 0 10
50215: PUSH
50216: EMPTY
50217: ST_TO_ADDR
// for i in temp_list do
50218: LD_ADDR_VAR 0 8
50222: PUSH
50223: LD_VAR 0 9
50227: PUSH
50228: FOR_IN
50229: IFFALSE 50281
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50231: LD_ADDR_VAR 0 10
50235: PUSH
50236: LD_VAR 0 10
50240: PUSH
50241: LD_VAR 0 8
50245: PUSH
50246: LD_INT 1
50248: ARRAY
50249: PUSH
50250: LD_VAR 0 2
50254: PLUS
50255: PUSH
50256: LD_VAR 0 8
50260: PUSH
50261: LD_INT 2
50263: ARRAY
50264: PUSH
50265: LD_VAR 0 3
50269: PLUS
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: ADD
50278: ST_TO_ADDR
50279: GO 50228
50281: POP
50282: POP
// result = temp_list2 ;
50283: LD_ADDR_VAR 0 7
50287: PUSH
50288: LD_VAR 0 10
50292: ST_TO_ADDR
// end ;
50293: LD_VAR 0 7
50297: RET
// export function EnemyInRange ( unit , dist ) ; begin
50298: LD_INT 0
50300: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50301: LD_ADDR_VAR 0 3
50305: PUSH
50306: LD_VAR 0 1
50310: PPUSH
50311: CALL_OW 255
50315: PPUSH
50316: LD_VAR 0 1
50320: PPUSH
50321: CALL_OW 250
50325: PPUSH
50326: LD_VAR 0 1
50330: PPUSH
50331: CALL_OW 251
50335: PPUSH
50336: LD_VAR 0 2
50340: PPUSH
50341: CALL 23555 0 4
50345: PUSH
50346: LD_INT 4
50348: ARRAY
50349: ST_TO_ADDR
// end ;
50350: LD_VAR 0 3
50354: RET
// export function PlayerSeeMe ( unit ) ; begin
50355: LD_INT 0
50357: PPUSH
// result := See ( your_side , unit ) ;
50358: LD_ADDR_VAR 0 2
50362: PUSH
50363: LD_OWVAR 2
50367: PPUSH
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 292
50377: ST_TO_ADDR
// end ;
50378: LD_VAR 0 2
50382: RET
// export function ReverseDir ( unit ) ; begin
50383: LD_INT 0
50385: PPUSH
// if not unit then
50386: LD_VAR 0 1
50390: NOT
50391: IFFALSE 50395
// exit ;
50393: GO 50418
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50395: LD_ADDR_VAR 0 2
50399: PUSH
50400: LD_VAR 0 1
50404: PPUSH
50405: CALL_OW 254
50409: PUSH
50410: LD_INT 3
50412: PLUS
50413: PUSH
50414: LD_INT 6
50416: MOD
50417: ST_TO_ADDR
// end ;
50418: LD_VAR 0 2
50422: RET
// export function ReverseArray ( array ) ; var i ; begin
50423: LD_INT 0
50425: PPUSH
50426: PPUSH
// if not array then
50427: LD_VAR 0 1
50431: NOT
50432: IFFALSE 50436
// exit ;
50434: GO 50491
// result := [ ] ;
50436: LD_ADDR_VAR 0 2
50440: PUSH
50441: EMPTY
50442: ST_TO_ADDR
// for i := array downto 1 do
50443: LD_ADDR_VAR 0 3
50447: PUSH
50448: DOUBLE
50449: LD_VAR 0 1
50453: INC
50454: ST_TO_ADDR
50455: LD_INT 1
50457: PUSH
50458: FOR_DOWNTO
50459: IFFALSE 50489
// result := Join ( result , array [ i ] ) ;
50461: LD_ADDR_VAR 0 2
50465: PUSH
50466: LD_VAR 0 2
50470: PPUSH
50471: LD_VAR 0 1
50475: PUSH
50476: LD_VAR 0 3
50480: ARRAY
50481: PPUSH
50482: CALL 55343 0 2
50486: ST_TO_ADDR
50487: GO 50458
50489: POP
50490: POP
// end ;
50491: LD_VAR 0 2
50495: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50496: LD_INT 0
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
// if not unit or not hexes then
50504: LD_VAR 0 1
50508: NOT
50509: IFTRUE 50518
50511: PUSH
50512: LD_VAR 0 2
50516: NOT
50517: OR
50518: IFFALSE 50522
// exit ;
50520: GO 50645
// dist := 9999 ;
50522: LD_ADDR_VAR 0 5
50526: PUSH
50527: LD_INT 9999
50529: ST_TO_ADDR
// for i = 1 to hexes do
50530: LD_ADDR_VAR 0 4
50534: PUSH
50535: DOUBLE
50536: LD_INT 1
50538: DEC
50539: ST_TO_ADDR
50540: LD_VAR 0 2
50544: PUSH
50545: FOR_TO
50546: IFFALSE 50633
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50548: LD_ADDR_VAR 0 6
50552: PUSH
50553: LD_VAR 0 1
50557: PPUSH
50558: LD_VAR 0 2
50562: PUSH
50563: LD_VAR 0 4
50567: ARRAY
50568: PUSH
50569: LD_INT 1
50571: ARRAY
50572: PPUSH
50573: LD_VAR 0 2
50577: PUSH
50578: LD_VAR 0 4
50582: ARRAY
50583: PUSH
50584: LD_INT 2
50586: ARRAY
50587: PPUSH
50588: CALL_OW 297
50592: ST_TO_ADDR
// if tdist < dist then
50593: LD_VAR 0 6
50597: PUSH
50598: LD_VAR 0 5
50602: LESS
50603: IFFALSE 50631
// begin hex := hexes [ i ] ;
50605: LD_ADDR_VAR 0 8
50609: PUSH
50610: LD_VAR 0 2
50614: PUSH
50615: LD_VAR 0 4
50619: ARRAY
50620: ST_TO_ADDR
// dist := tdist ;
50621: LD_ADDR_VAR 0 5
50625: PUSH
50626: LD_VAR 0 6
50630: ST_TO_ADDR
// end ; end ;
50631: GO 50545
50633: POP
50634: POP
// result := hex ;
50635: LD_ADDR_VAR 0 3
50639: PUSH
50640: LD_VAR 0 8
50644: ST_TO_ADDR
// end ;
50645: LD_VAR 0 3
50649: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50650: LD_INT 0
50652: PPUSH
50653: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50654: LD_VAR 0 1
50658: NOT
50659: IFTRUE 50698
50661: PUSH
50662: LD_VAR 0 1
50666: PUSH
50667: LD_INT 21
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 23
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PPUSH
50691: CALL_OW 69
50695: IN
50696: NOT
50697: OR
50698: IFFALSE 50702
// exit ;
50700: GO 50749
// for i = 1 to 3 do
50702: LD_ADDR_VAR 0 3
50706: PUSH
50707: DOUBLE
50708: LD_INT 1
50710: DEC
50711: ST_TO_ADDR
50712: LD_INT 3
50714: PUSH
50715: FOR_TO
50716: IFFALSE 50747
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50718: LD_VAR 0 1
50722: PPUSH
50723: CALL_OW 250
50727: PPUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 251
50737: PPUSH
50738: LD_INT 1
50740: PPUSH
50741: CALL_OW 453
50745: GO 50715
50747: POP
50748: POP
// end ;
50749: LD_VAR 0 2
50753: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50754: LD_INT 0
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
// if not unit or not enemy_unit then
50762: LD_VAR 0 1
50766: NOT
50767: IFTRUE 50776
50769: PUSH
50770: LD_VAR 0 2
50774: NOT
50775: OR
50776: IFFALSE 50780
// exit ;
50778: GO 51261
// if GetLives ( i ) < 250 then
50780: LD_VAR 0 4
50784: PPUSH
50785: CALL_OW 256
50789: PUSH
50790: LD_INT 250
50792: LESS
50793: IFFALSE 50806
// begin ComAutodestruct ( i ) ;
50795: LD_VAR 0 4
50799: PPUSH
50800: CALL 50650 0 1
// exit ;
50804: GO 51261
// end ; x := GetX ( enemy_unit ) ;
50806: LD_ADDR_VAR 0 7
50810: PUSH
50811: LD_VAR 0 2
50815: PPUSH
50816: CALL_OW 250
50820: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50821: LD_ADDR_VAR 0 8
50825: PUSH
50826: LD_VAR 0 2
50830: PPUSH
50831: CALL_OW 251
50835: ST_TO_ADDR
// if not x or not y then
50836: LD_VAR 0 7
50840: NOT
50841: IFTRUE 50850
50843: PUSH
50844: LD_VAR 0 8
50848: NOT
50849: OR
50850: IFFALSE 50854
// exit ;
50852: GO 51261
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50854: LD_ADDR_VAR 0 6
50858: PUSH
50859: LD_VAR 0 7
50863: PPUSH
50864: LD_INT 0
50866: PPUSH
50867: LD_INT 4
50869: PPUSH
50870: CALL_OW 272
50874: PUSH
50875: LD_VAR 0 8
50879: PPUSH
50880: LD_INT 0
50882: PPUSH
50883: LD_INT 4
50885: PPUSH
50886: CALL_OW 273
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_VAR 0 7
50899: PPUSH
50900: LD_INT 1
50902: PPUSH
50903: LD_INT 4
50905: PPUSH
50906: CALL_OW 272
50910: PUSH
50911: LD_VAR 0 8
50915: PPUSH
50916: LD_INT 1
50918: PPUSH
50919: LD_INT 4
50921: PPUSH
50922: CALL_OW 273
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_VAR 0 7
50935: PPUSH
50936: LD_INT 2
50938: PPUSH
50939: LD_INT 4
50941: PPUSH
50942: CALL_OW 272
50946: PUSH
50947: LD_VAR 0 8
50951: PPUSH
50952: LD_INT 2
50954: PPUSH
50955: LD_INT 4
50957: PPUSH
50958: CALL_OW 273
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_VAR 0 7
50971: PPUSH
50972: LD_INT 3
50974: PPUSH
50975: LD_INT 4
50977: PPUSH
50978: CALL_OW 272
50982: PUSH
50983: LD_VAR 0 8
50987: PPUSH
50988: LD_INT 3
50990: PPUSH
50991: LD_INT 4
50993: PPUSH
50994: CALL_OW 273
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_VAR 0 7
51007: PPUSH
51008: LD_INT 4
51010: PPUSH
51011: LD_INT 4
51013: PPUSH
51014: CALL_OW 272
51018: PUSH
51019: LD_VAR 0 8
51023: PPUSH
51024: LD_INT 4
51026: PPUSH
51027: LD_INT 4
51029: PPUSH
51030: CALL_OW 273
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 7
51043: PPUSH
51044: LD_INT 5
51046: PPUSH
51047: LD_INT 4
51049: PPUSH
51050: CALL_OW 272
51054: PUSH
51055: LD_VAR 0 8
51059: PPUSH
51060: LD_INT 5
51062: PPUSH
51063: LD_INT 4
51065: PPUSH
51066: CALL_OW 273
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// for i = tmp downto 1 do
51083: LD_ADDR_VAR 0 4
51087: PUSH
51088: DOUBLE
51089: LD_VAR 0 6
51093: INC
51094: ST_TO_ADDR
51095: LD_INT 1
51097: PUSH
51098: FOR_DOWNTO
51099: IFFALSE 51202
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51101: LD_VAR 0 6
51105: PUSH
51106: LD_VAR 0 4
51110: ARRAY
51111: PUSH
51112: LD_INT 1
51114: ARRAY
51115: PPUSH
51116: LD_VAR 0 6
51120: PUSH
51121: LD_VAR 0 4
51125: ARRAY
51126: PUSH
51127: LD_INT 2
51129: ARRAY
51130: PPUSH
51131: CALL_OW 488
51135: NOT
51136: IFTRUE 51178
51138: PUSH
51139: LD_VAR 0 6
51143: PUSH
51144: LD_VAR 0 4
51148: ARRAY
51149: PUSH
51150: LD_INT 1
51152: ARRAY
51153: PPUSH
51154: LD_VAR 0 6
51158: PUSH
51159: LD_VAR 0 4
51163: ARRAY
51164: PUSH
51165: LD_INT 2
51167: ARRAY
51168: PPUSH
51169: CALL_OW 428
51173: PUSH
51174: LD_INT 0
51176: NONEQUAL
51177: OR
51178: IFFALSE 51200
// tmp := Delete ( tmp , i ) ;
51180: LD_ADDR_VAR 0 6
51184: PUSH
51185: LD_VAR 0 6
51189: PPUSH
51190: LD_VAR 0 4
51194: PPUSH
51195: CALL_OW 3
51199: ST_TO_ADDR
51200: GO 51098
51202: POP
51203: POP
// j := GetClosestHex ( unit , tmp ) ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: LD_VAR 0 6
51218: PPUSH
51219: CALL 50496 0 2
51223: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51224: LD_VAR 0 1
51228: PPUSH
51229: LD_VAR 0 5
51233: PUSH
51234: LD_INT 1
51236: ARRAY
51237: PPUSH
51238: LD_VAR 0 5
51242: PUSH
51243: LD_INT 2
51245: ARRAY
51246: PPUSH
51247: CALL_OW 111
// result := j ;
51251: LD_ADDR_VAR 0 3
51255: PUSH
51256: LD_VAR 0 5
51260: ST_TO_ADDR
// end ;
51261: LD_VAR 0 3
51265: RET
// export function PrepareApemanSoldier ( ) ; begin
51266: LD_INT 0
51268: PPUSH
// uc_nation := 0 ;
51269: LD_ADDR_OWVAR 21
51273: PUSH
51274: LD_INT 0
51276: ST_TO_ADDR
// hc_sex := sex_male ;
51277: LD_ADDR_OWVAR 27
51281: PUSH
51282: LD_INT 1
51284: ST_TO_ADDR
// hc_name :=  ;
51285: LD_ADDR_OWVAR 26
51289: PUSH
51290: LD_STRING 
51292: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51293: LD_ADDR_OWVAR 28
51297: PUSH
51298: LD_INT 15
51300: ST_TO_ADDR
// hc_gallery :=  ;
51301: LD_ADDR_OWVAR 33
51305: PUSH
51306: LD_STRING 
51308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51309: LD_ADDR_OWVAR 31
51313: PUSH
51314: LD_INT 0
51316: PPUSH
51317: LD_INT 3
51319: PPUSH
51320: CALL_OW 12
51324: PUSH
51325: LD_INT 0
51327: PPUSH
51328: LD_INT 3
51330: PPUSH
51331: CALL_OW 12
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51348: LD_ADDR_OWVAR 29
51352: PUSH
51353: LD_INT 12
51355: PUSH
51356: LD_INT 12
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: ST_TO_ADDR
// end ;
51363: LD_VAR 0 1
51367: RET
// export function PrepareApemanEngineer ( ) ; begin
51368: LD_INT 0
51370: PPUSH
// uc_nation := 0 ;
51371: LD_ADDR_OWVAR 21
51375: PUSH
51376: LD_INT 0
51378: ST_TO_ADDR
// hc_sex := sex_male ;
51379: LD_ADDR_OWVAR 27
51383: PUSH
51384: LD_INT 1
51386: ST_TO_ADDR
// hc_name :=  ;
51387: LD_ADDR_OWVAR 26
51391: PUSH
51392: LD_STRING 
51394: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51395: LD_ADDR_OWVAR 28
51399: PUSH
51400: LD_INT 16
51402: ST_TO_ADDR
// hc_gallery :=  ;
51403: LD_ADDR_OWVAR 33
51407: PUSH
51408: LD_STRING 
51410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51411: LD_ADDR_OWVAR 31
51415: PUSH
51416: LD_INT 0
51418: PPUSH
51419: LD_INT 3
51421: PPUSH
51422: CALL_OW 12
51426: PUSH
51427: LD_INT 0
51429: PPUSH
51430: LD_INT 3
51432: PPUSH
51433: CALL_OW 12
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51450: LD_ADDR_OWVAR 29
51454: PUSH
51455: LD_INT 12
51457: PUSH
51458: LD_INT 12
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// end ;
51465: LD_VAR 0 1
51469: RET
// export function PrepareApeman ( agressivity ) ; begin
51470: LD_INT 0
51472: PPUSH
// uc_side := 0 ;
51473: LD_ADDR_OWVAR 20
51477: PUSH
51478: LD_INT 0
51480: ST_TO_ADDR
// uc_nation := 0 ;
51481: LD_ADDR_OWVAR 21
51485: PUSH
51486: LD_INT 0
51488: ST_TO_ADDR
// hc_sex := sex_male ;
51489: LD_ADDR_OWVAR 27
51493: PUSH
51494: LD_INT 1
51496: ST_TO_ADDR
// hc_class := class_apeman ;
51497: LD_ADDR_OWVAR 28
51501: PUSH
51502: LD_INT 12
51504: ST_TO_ADDR
// hc_gallery :=  ;
51505: LD_ADDR_OWVAR 33
51509: PUSH
51510: LD_STRING 
51512: ST_TO_ADDR
// hc_name :=  ;
51513: LD_ADDR_OWVAR 26
51517: PUSH
51518: LD_STRING 
51520: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51521: LD_ADDR_OWVAR 29
51525: PUSH
51526: LD_INT 12
51528: PUSH
51529: LD_INT 12
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// if agressivity = 0 then
51536: LD_VAR 0 1
51540: PUSH
51541: LD_INT 0
51543: EQUAL
51544: IFFALSE 51556
// hc_agressivity := 0 else
51546: LD_ADDR_OWVAR 35
51550: PUSH
51551: LD_INT 0
51553: ST_TO_ADDR
51554: GO 51577
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51556: LD_ADDR_OWVAR 35
51560: PUSH
51561: LD_VAR 0 1
51565: NEG
51566: PPUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 12
51576: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51577: LD_ADDR_OWVAR 31
51581: PUSH
51582: LD_INT 0
51584: PPUSH
51585: LD_INT 3
51587: PPUSH
51588: CALL_OW 12
51592: PUSH
51593: LD_INT 0
51595: PPUSH
51596: LD_INT 3
51598: PPUSH
51599: CALL_OW 12
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// end ;
51616: LD_VAR 0 2
51620: RET
// export function PrepareTiger ( agressivity ) ; begin
51621: LD_INT 0
51623: PPUSH
// uc_side := 0 ;
51624: LD_ADDR_OWVAR 20
51628: PUSH
51629: LD_INT 0
51631: ST_TO_ADDR
// uc_nation := 0 ;
51632: LD_ADDR_OWVAR 21
51636: PUSH
51637: LD_INT 0
51639: ST_TO_ADDR
// InitHc ;
51640: CALL_OW 19
// hc_class := class_tiger ;
51644: LD_ADDR_OWVAR 28
51648: PUSH
51649: LD_INT 14
51651: ST_TO_ADDR
// hc_gallery :=  ;
51652: LD_ADDR_OWVAR 33
51656: PUSH
51657: LD_STRING 
51659: ST_TO_ADDR
// hc_name :=  ;
51660: LD_ADDR_OWVAR 26
51664: PUSH
51665: LD_STRING 
51667: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51668: LD_ADDR_OWVAR 35
51672: PUSH
51673: LD_VAR 0 1
51677: NEG
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 12
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 2
51693: RET
// export function PrepareEnchidna ( ) ; begin
51694: LD_INT 0
51696: PPUSH
// uc_side := 0 ;
51697: LD_ADDR_OWVAR 20
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// uc_nation := 0 ;
51705: LD_ADDR_OWVAR 21
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// InitHc ;
51713: CALL_OW 19
// hc_class := class_baggie ;
51717: LD_ADDR_OWVAR 28
51721: PUSH
51722: LD_INT 13
51724: ST_TO_ADDR
// hc_gallery :=  ;
51725: LD_ADDR_OWVAR 33
51729: PUSH
51730: LD_STRING 
51732: ST_TO_ADDR
// hc_name :=  ;
51733: LD_ADDR_OWVAR 26
51737: PUSH
51738: LD_STRING 
51740: ST_TO_ADDR
// end ;
51741: LD_VAR 0 1
51745: RET
// export function PrepareFrog ( ) ; begin
51746: LD_INT 0
51748: PPUSH
// uc_side := 0 ;
51749: LD_ADDR_OWVAR 20
51753: PUSH
51754: LD_INT 0
51756: ST_TO_ADDR
// uc_nation := 0 ;
51757: LD_ADDR_OWVAR 21
51761: PUSH
51762: LD_INT 0
51764: ST_TO_ADDR
// InitHc ;
51765: CALL_OW 19
// hc_class := class_frog ;
51769: LD_ADDR_OWVAR 28
51773: PUSH
51774: LD_INT 19
51776: ST_TO_ADDR
// hc_gallery :=  ;
51777: LD_ADDR_OWVAR 33
51781: PUSH
51782: LD_STRING 
51784: ST_TO_ADDR
// hc_name :=  ;
51785: LD_ADDR_OWVAR 26
51789: PUSH
51790: LD_STRING 
51792: ST_TO_ADDR
// end ;
51793: LD_VAR 0 1
51797: RET
// export function PrepareFish ( ) ; begin
51798: LD_INT 0
51800: PPUSH
// uc_side := 0 ;
51801: LD_ADDR_OWVAR 20
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// uc_nation := 0 ;
51809: LD_ADDR_OWVAR 21
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// InitHc ;
51817: CALL_OW 19
// hc_class := class_fish ;
51821: LD_ADDR_OWVAR 28
51825: PUSH
51826: LD_INT 20
51828: ST_TO_ADDR
// hc_gallery :=  ;
51829: LD_ADDR_OWVAR 33
51833: PUSH
51834: LD_STRING 
51836: ST_TO_ADDR
// hc_name :=  ;
51837: LD_ADDR_OWVAR 26
51841: PUSH
51842: LD_STRING 
51844: ST_TO_ADDR
// end ;
51845: LD_VAR 0 1
51849: RET
// export function PrepareBird ( ) ; begin
51850: LD_INT 0
51852: PPUSH
// uc_side := 0 ;
51853: LD_ADDR_OWVAR 20
51857: PUSH
51858: LD_INT 0
51860: ST_TO_ADDR
// uc_nation := 0 ;
51861: LD_ADDR_OWVAR 21
51865: PUSH
51866: LD_INT 0
51868: ST_TO_ADDR
// InitHc ;
51869: CALL_OW 19
// hc_class := class_phororhacos ;
51873: LD_ADDR_OWVAR 28
51877: PUSH
51878: LD_INT 18
51880: ST_TO_ADDR
// hc_gallery :=  ;
51881: LD_ADDR_OWVAR 33
51885: PUSH
51886: LD_STRING 
51888: ST_TO_ADDR
// hc_name :=  ;
51889: LD_ADDR_OWVAR 26
51893: PUSH
51894: LD_STRING 
51896: ST_TO_ADDR
// end ;
51897: LD_VAR 0 1
51901: RET
// export function PrepareHorse ( ) ; begin
51902: LD_INT 0
51904: PPUSH
// uc_side := 0 ;
51905: LD_ADDR_OWVAR 20
51909: PUSH
51910: LD_INT 0
51912: ST_TO_ADDR
// uc_nation := 0 ;
51913: LD_ADDR_OWVAR 21
51917: PUSH
51918: LD_INT 0
51920: ST_TO_ADDR
// InitHc ;
51921: CALL_OW 19
// hc_class := class_horse ;
51925: LD_ADDR_OWVAR 28
51929: PUSH
51930: LD_INT 21
51932: ST_TO_ADDR
// hc_gallery :=  ;
51933: LD_ADDR_OWVAR 33
51937: PUSH
51938: LD_STRING 
51940: ST_TO_ADDR
// hc_name :=  ;
51941: LD_ADDR_OWVAR 26
51945: PUSH
51946: LD_STRING 
51948: ST_TO_ADDR
// end ;
51949: LD_VAR 0 1
51953: RET
// export function PrepareMastodont ( ) ; begin
51954: LD_INT 0
51956: PPUSH
// uc_side := 0 ;
51957: LD_ADDR_OWVAR 20
51961: PUSH
51962: LD_INT 0
51964: ST_TO_ADDR
// uc_nation := 0 ;
51965: LD_ADDR_OWVAR 21
51969: PUSH
51970: LD_INT 0
51972: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51973: LD_ADDR_OWVAR 37
51977: PUSH
51978: LD_INT 31
51980: ST_TO_ADDR
// vc_control := control_rider ;
51981: LD_ADDR_OWVAR 38
51985: PUSH
51986: LD_INT 4
51988: ST_TO_ADDR
// end ;
51989: LD_VAR 0 1
51993: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51994: LD_INT 0
51996: PPUSH
51997: PPUSH
51998: PPUSH
// uc_side = 0 ;
51999: LD_ADDR_OWVAR 20
52003: PUSH
52004: LD_INT 0
52006: ST_TO_ADDR
// uc_nation = 0 ;
52007: LD_ADDR_OWVAR 21
52011: PUSH
52012: LD_INT 0
52014: ST_TO_ADDR
// InitHc_All ( ) ;
52015: CALL_OW 584
// InitVc ;
52019: CALL_OW 20
// if mastodonts then
52023: LD_VAR 0 6
52027: IFFALSE 52094
// for i = 1 to mastodonts do
52029: LD_ADDR_VAR 0 11
52033: PUSH
52034: DOUBLE
52035: LD_INT 1
52037: DEC
52038: ST_TO_ADDR
52039: LD_VAR 0 6
52043: PUSH
52044: FOR_TO
52045: IFFALSE 52092
// begin vc_chassis := 31 ;
52047: LD_ADDR_OWVAR 37
52051: PUSH
52052: LD_INT 31
52054: ST_TO_ADDR
// vc_control := control_rider ;
52055: LD_ADDR_OWVAR 38
52059: PUSH
52060: LD_INT 4
52062: ST_TO_ADDR
// animal := CreateVehicle ;
52063: LD_ADDR_VAR 0 12
52067: PUSH
52068: CALL_OW 45
52072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52073: LD_VAR 0 12
52077: PPUSH
52078: LD_VAR 0 8
52082: PPUSH
52083: LD_INT 0
52085: PPUSH
52086: CALL 54236 0 3
// end ;
52090: GO 52044
52092: POP
52093: POP
// if horses then
52094: LD_VAR 0 5
52098: IFFALSE 52165
// for i = 1 to horses do
52100: LD_ADDR_VAR 0 11
52104: PUSH
52105: DOUBLE
52106: LD_INT 1
52108: DEC
52109: ST_TO_ADDR
52110: LD_VAR 0 5
52114: PUSH
52115: FOR_TO
52116: IFFALSE 52163
// begin hc_class := 21 ;
52118: LD_ADDR_OWVAR 28
52122: PUSH
52123: LD_INT 21
52125: ST_TO_ADDR
// hc_gallery :=  ;
52126: LD_ADDR_OWVAR 33
52130: PUSH
52131: LD_STRING 
52133: ST_TO_ADDR
// animal := CreateHuman ;
52134: LD_ADDR_VAR 0 12
52138: PUSH
52139: CALL_OW 44
52143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52144: LD_VAR 0 12
52148: PPUSH
52149: LD_VAR 0 8
52153: PPUSH
52154: LD_INT 0
52156: PPUSH
52157: CALL 54236 0 3
// end ;
52161: GO 52115
52163: POP
52164: POP
// if birds then
52165: LD_VAR 0 1
52169: IFFALSE 52236
// for i = 1 to birds do
52171: LD_ADDR_VAR 0 11
52175: PUSH
52176: DOUBLE
52177: LD_INT 1
52179: DEC
52180: ST_TO_ADDR
52181: LD_VAR 0 1
52185: PUSH
52186: FOR_TO
52187: IFFALSE 52234
// begin hc_class := 18 ;
52189: LD_ADDR_OWVAR 28
52193: PUSH
52194: LD_INT 18
52196: ST_TO_ADDR
// hc_gallery =  ;
52197: LD_ADDR_OWVAR 33
52201: PUSH
52202: LD_STRING 
52204: ST_TO_ADDR
// animal := CreateHuman ;
52205: LD_ADDR_VAR 0 12
52209: PUSH
52210: CALL_OW 44
52214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52215: LD_VAR 0 12
52219: PPUSH
52220: LD_VAR 0 8
52224: PPUSH
52225: LD_INT 0
52227: PPUSH
52228: CALL 54236 0 3
// end ;
52232: GO 52186
52234: POP
52235: POP
// if tigers then
52236: LD_VAR 0 2
52240: IFFALSE 52324
// for i = 1 to tigers do
52242: LD_ADDR_VAR 0 11
52246: PUSH
52247: DOUBLE
52248: LD_INT 1
52250: DEC
52251: ST_TO_ADDR
52252: LD_VAR 0 2
52256: PUSH
52257: FOR_TO
52258: IFFALSE 52322
// begin hc_class = class_tiger ;
52260: LD_ADDR_OWVAR 28
52264: PUSH
52265: LD_INT 14
52267: ST_TO_ADDR
// hc_gallery =  ;
52268: LD_ADDR_OWVAR 33
52272: PUSH
52273: LD_STRING 
52275: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52276: LD_ADDR_OWVAR 35
52280: PUSH
52281: LD_INT 7
52283: NEG
52284: PPUSH
52285: LD_INT 7
52287: PPUSH
52288: CALL_OW 12
52292: ST_TO_ADDR
// animal := CreateHuman ;
52293: LD_ADDR_VAR 0 12
52297: PUSH
52298: CALL_OW 44
52302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52303: LD_VAR 0 12
52307: PPUSH
52308: LD_VAR 0 8
52312: PPUSH
52313: LD_INT 0
52315: PPUSH
52316: CALL 54236 0 3
// end ;
52320: GO 52257
52322: POP
52323: POP
// if apemans then
52324: LD_VAR 0 3
52328: IFFALSE 52451
// for i = 1 to apemans do
52330: LD_ADDR_VAR 0 11
52334: PUSH
52335: DOUBLE
52336: LD_INT 1
52338: DEC
52339: ST_TO_ADDR
52340: LD_VAR 0 3
52344: PUSH
52345: FOR_TO
52346: IFFALSE 52449
// begin hc_class = class_apeman ;
52348: LD_ADDR_OWVAR 28
52352: PUSH
52353: LD_INT 12
52355: ST_TO_ADDR
// hc_gallery =  ;
52356: LD_ADDR_OWVAR 33
52360: PUSH
52361: LD_STRING 
52363: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52364: LD_ADDR_OWVAR 35
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PPUSH
52373: LD_INT 2
52375: PPUSH
52376: CALL_OW 12
52380: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52381: LD_ADDR_OWVAR 31
52385: PUSH
52386: LD_INT 1
52388: PPUSH
52389: LD_INT 3
52391: PPUSH
52392: CALL_OW 12
52396: PUSH
52397: LD_INT 1
52399: PPUSH
52400: LD_INT 3
52402: PPUSH
52403: CALL_OW 12
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// animal := CreateHuman ;
52420: LD_ADDR_VAR 0 12
52424: PUSH
52425: CALL_OW 44
52429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52430: LD_VAR 0 12
52434: PPUSH
52435: LD_VAR 0 8
52439: PPUSH
52440: LD_INT 0
52442: PPUSH
52443: CALL 54236 0 3
// end ;
52447: GO 52345
52449: POP
52450: POP
// if enchidnas then
52451: LD_VAR 0 4
52455: IFFALSE 52522
// for i = 1 to enchidnas do
52457: LD_ADDR_VAR 0 11
52461: PUSH
52462: DOUBLE
52463: LD_INT 1
52465: DEC
52466: ST_TO_ADDR
52467: LD_VAR 0 4
52471: PUSH
52472: FOR_TO
52473: IFFALSE 52520
// begin hc_class = 13 ;
52475: LD_ADDR_OWVAR 28
52479: PUSH
52480: LD_INT 13
52482: ST_TO_ADDR
// hc_gallery =  ;
52483: LD_ADDR_OWVAR 33
52487: PUSH
52488: LD_STRING 
52490: ST_TO_ADDR
// animal := CreateHuman ;
52491: LD_ADDR_VAR 0 12
52495: PUSH
52496: CALL_OW 44
52500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52501: LD_VAR 0 12
52505: PPUSH
52506: LD_VAR 0 8
52510: PPUSH
52511: LD_INT 0
52513: PPUSH
52514: CALL 54236 0 3
// end ;
52518: GO 52472
52520: POP
52521: POP
// if fishes then
52522: LD_VAR 0 7
52526: IFFALSE 52593
// for i = 1 to fishes do
52528: LD_ADDR_VAR 0 11
52532: PUSH
52533: DOUBLE
52534: LD_INT 1
52536: DEC
52537: ST_TO_ADDR
52538: LD_VAR 0 7
52542: PUSH
52543: FOR_TO
52544: IFFALSE 52591
// begin hc_class = 20 ;
52546: LD_ADDR_OWVAR 28
52550: PUSH
52551: LD_INT 20
52553: ST_TO_ADDR
// hc_gallery =  ;
52554: LD_ADDR_OWVAR 33
52558: PUSH
52559: LD_STRING 
52561: ST_TO_ADDR
// animal := CreateHuman ;
52562: LD_ADDR_VAR 0 12
52566: PUSH
52567: CALL_OW 44
52571: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52572: LD_VAR 0 12
52576: PPUSH
52577: LD_VAR 0 9
52581: PPUSH
52582: LD_INT 0
52584: PPUSH
52585: CALL 54236 0 3
// end ;
52589: GO 52543
52591: POP
52592: POP
// end ;
52593: LD_VAR 0 10
52597: RET
// export function WantHeal ( sci , unit ) ; begin
52598: LD_INT 0
52600: PPUSH
// if GetTaskList ( sci ) > 0 then
52601: LD_VAR 0 1
52605: PPUSH
52606: CALL_OW 437
52610: PUSH
52611: LD_INT 0
52613: GREATER
52614: IFFALSE 52686
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52616: LD_VAR 0 1
52620: PPUSH
52621: CALL_OW 437
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: PUSH
52630: LD_INT 1
52632: ARRAY
52633: PUSH
52634: LD_STRING l
52636: EQUAL
52637: IFFALSE 52664
52639: PUSH
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 437
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: PUSH
52654: LD_INT 4
52656: ARRAY
52657: PUSH
52658: LD_VAR 0 2
52662: EQUAL
52663: AND
52664: IFFALSE 52676
// result := true else
52666: LD_ADDR_VAR 0 3
52670: PUSH
52671: LD_INT 1
52673: ST_TO_ADDR
52674: GO 52684
// result := false ;
52676: LD_ADDR_VAR 0 3
52680: PUSH
52681: LD_INT 0
52683: ST_TO_ADDR
// end else
52684: GO 52694
// result := false ;
52686: LD_ADDR_VAR 0 3
52690: PUSH
52691: LD_INT 0
52693: ST_TO_ADDR
// end ;
52694: LD_VAR 0 3
52698: RET
// export function HealTarget ( sci ) ; begin
52699: LD_INT 0
52701: PPUSH
// if not sci then
52702: LD_VAR 0 1
52706: NOT
52707: IFFALSE 52711
// exit ;
52709: GO 52776
// result := 0 ;
52711: LD_ADDR_VAR 0 2
52715: PUSH
52716: LD_INT 0
52718: ST_TO_ADDR
// if GetTaskList ( sci ) then
52719: LD_VAR 0 1
52723: PPUSH
52724: CALL_OW 437
52728: IFFALSE 52776
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52730: LD_VAR 0 1
52734: PPUSH
52735: CALL_OW 437
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PUSH
52744: LD_INT 1
52746: ARRAY
52747: PUSH
52748: LD_STRING l
52750: EQUAL
52751: IFFALSE 52776
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52753: LD_ADDR_VAR 0 2
52757: PUSH
52758: LD_VAR 0 1
52762: PPUSH
52763: CALL_OW 437
52767: PUSH
52768: LD_INT 1
52770: ARRAY
52771: PUSH
52772: LD_INT 4
52774: ARRAY
52775: ST_TO_ADDR
// end ;
52776: LD_VAR 0 2
52780: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52781: LD_INT 0
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
// if not base_units then
52787: LD_VAR 0 1
52791: NOT
52792: IFFALSE 52796
// exit ;
52794: GO 52883
// result := false ;
52796: LD_ADDR_VAR 0 2
52800: PUSH
52801: LD_INT 0
52803: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52804: LD_ADDR_VAR 0 5
52808: PUSH
52809: LD_VAR 0 1
52813: PPUSH
52814: LD_INT 21
52816: PUSH
52817: LD_INT 3
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PPUSH
52824: CALL_OW 72
52828: ST_TO_ADDR
// if not tmp then
52829: LD_VAR 0 5
52833: NOT
52834: IFFALSE 52838
// exit ;
52836: GO 52883
// for i in tmp do
52838: LD_ADDR_VAR 0 3
52842: PUSH
52843: LD_VAR 0 5
52847: PUSH
52848: FOR_IN
52849: IFFALSE 52881
// begin result := EnemyInRange ( i , 22 ) ;
52851: LD_ADDR_VAR 0 2
52855: PUSH
52856: LD_VAR 0 3
52860: PPUSH
52861: LD_INT 22
52863: PPUSH
52864: CALL 50298 0 2
52868: ST_TO_ADDR
// if result then
52869: LD_VAR 0 2
52873: IFFALSE 52879
// exit ;
52875: POP
52876: POP
52877: GO 52883
// end ;
52879: GO 52848
52881: POP
52882: POP
// end ;
52883: LD_VAR 0 2
52887: RET
// export function FilterByTag ( units , tag ) ; begin
52888: LD_INT 0
52890: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52891: LD_ADDR_VAR 0 3
52895: PUSH
52896: LD_VAR 0 1
52900: PPUSH
52901: LD_INT 120
52903: PUSH
52904: LD_VAR 0 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PPUSH
52913: CALL_OW 72
52917: ST_TO_ADDR
// end ;
52918: LD_VAR 0 3
52922: RET
// export function IsDriver ( un ) ; begin
52923: LD_INT 0
52925: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52926: LD_ADDR_VAR 0 2
52930: PUSH
52931: LD_VAR 0 1
52935: PUSH
52936: LD_INT 55
52938: PUSH
52939: EMPTY
52940: LIST
52941: PPUSH
52942: CALL_OW 69
52946: IN
52947: ST_TO_ADDR
// end ;
52948: LD_VAR 0 2
52952: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52953: LD_INT 0
52955: PPUSH
52956: PPUSH
// list := [ ] ;
52957: LD_ADDR_VAR 0 5
52961: PUSH
52962: EMPTY
52963: ST_TO_ADDR
// case d of 0 :
52964: LD_VAR 0 3
52968: PUSH
52969: LD_INT 0
52971: DOUBLE
52972: EQUAL
52973: IFTRUE 52977
52975: GO 53110
52977: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52978: LD_ADDR_VAR 0 5
52982: PUSH
52983: LD_VAR 0 1
52987: PUSH
52988: LD_INT 4
52990: MINUS
52991: PUSH
52992: LD_VAR 0 2
52996: PUSH
52997: LD_INT 4
52999: MINUS
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: LD_VAR 0 1
53013: PUSH
53014: LD_INT 3
53016: MINUS
53017: PUSH
53018: LD_VAR 0 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: PUSH
53031: LD_VAR 0 1
53035: PUSH
53036: LD_INT 4
53038: PLUS
53039: PUSH
53040: LD_VAR 0 2
53044: PUSH
53045: LD_INT 4
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: PUSH
53053: LD_VAR 0 1
53057: PUSH
53058: LD_INT 3
53060: PLUS
53061: PUSH
53062: LD_VAR 0 2
53066: PUSH
53067: LD_INT 3
53069: PLUS
53070: PUSH
53071: LD_INT 5
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: PUSH
53079: LD_VAR 0 1
53083: PUSH
53084: LD_VAR 0 2
53088: PUSH
53089: LD_INT 4
53091: PLUS
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// end ; 1 :
53108: GO 53808
53110: LD_INT 1
53112: DOUBLE
53113: EQUAL
53114: IFTRUE 53118
53116: GO 53251
53118: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53119: LD_ADDR_VAR 0 5
53123: PUSH
53124: LD_VAR 0 1
53128: PUSH
53129: LD_VAR 0 2
53133: PUSH
53134: LD_INT 4
53136: MINUS
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: PUSH
53146: LD_VAR 0 1
53150: PUSH
53151: LD_INT 3
53153: MINUS
53154: PUSH
53155: LD_VAR 0 2
53159: PUSH
53160: LD_INT 3
53162: MINUS
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: PUSH
53172: LD_VAR 0 1
53176: PUSH
53177: LD_INT 4
53179: MINUS
53180: PUSH
53181: LD_VAR 0 2
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: PUSH
53194: LD_VAR 0 1
53198: PUSH
53199: LD_VAR 0 2
53203: PUSH
53204: LD_INT 3
53206: PLUS
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: PUSH
53216: LD_VAR 0 1
53220: PUSH
53221: LD_INT 4
53223: PLUS
53224: PUSH
53225: LD_VAR 0 2
53229: PUSH
53230: LD_INT 4
53232: PLUS
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// end ; 2 :
53249: GO 53808
53251: LD_INT 2
53253: DOUBLE
53254: EQUAL
53255: IFTRUE 53259
53257: GO 53388
53259: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53260: LD_ADDR_VAR 0 5
53264: PUSH
53265: LD_VAR 0 1
53269: PUSH
53270: LD_VAR 0 2
53274: PUSH
53275: LD_INT 3
53277: MINUS
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: PUSH
53287: LD_VAR 0 1
53291: PUSH
53292: LD_INT 4
53294: PLUS
53295: PUSH
53296: LD_VAR 0 2
53300: PUSH
53301: LD_INT 4
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: PUSH
53309: LD_VAR 0 1
53313: PUSH
53314: LD_VAR 0 2
53318: PUSH
53319: LD_INT 4
53321: PLUS
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: PUSH
53331: LD_VAR 0 1
53335: PUSH
53336: LD_INT 3
53338: MINUS
53339: PUSH
53340: LD_VAR 0 2
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: PUSH
53353: LD_VAR 0 1
53357: PUSH
53358: LD_INT 4
53360: MINUS
53361: PUSH
53362: LD_VAR 0 2
53366: PUSH
53367: LD_INT 4
53369: MINUS
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// end ; 3 :
53386: GO 53808
53388: LD_INT 3
53390: DOUBLE
53391: EQUAL
53392: IFTRUE 53396
53394: GO 53529
53396: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53397: LD_ADDR_VAR 0 5
53401: PUSH
53402: LD_VAR 0 1
53406: PUSH
53407: LD_INT 3
53409: PLUS
53410: PUSH
53411: LD_VAR 0 2
53415: PUSH
53416: LD_INT 4
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: PUSH
53424: LD_VAR 0 1
53428: PUSH
53429: LD_INT 4
53431: PLUS
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_INT 4
53440: PLUS
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: PUSH
53450: LD_VAR 0 1
53454: PUSH
53455: LD_INT 4
53457: MINUS
53458: PUSH
53459: LD_VAR 0 2
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: PUSH
53472: LD_VAR 0 1
53476: PUSH
53477: LD_VAR 0 2
53481: PUSH
53482: LD_INT 4
53484: MINUS
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: PUSH
53494: LD_VAR 0 1
53498: PUSH
53499: LD_INT 3
53501: MINUS
53502: PUSH
53503: LD_VAR 0 2
53507: PUSH
53508: LD_INT 3
53510: MINUS
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// end ; 4 :
53527: GO 53808
53529: LD_INT 4
53531: DOUBLE
53532: EQUAL
53533: IFTRUE 53537
53535: GO 53670
53537: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53538: LD_ADDR_VAR 0 5
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: LD_VAR 0 2
53552: PUSH
53553: LD_INT 4
53555: PLUS
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: PUSH
53565: LD_VAR 0 1
53569: PUSH
53570: LD_INT 3
53572: PLUS
53573: PUSH
53574: LD_VAR 0 2
53578: PUSH
53579: LD_INT 3
53581: PLUS
53582: PUSH
53583: LD_INT 5
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: LD_VAR 0 1
53595: PUSH
53596: LD_INT 4
53598: PLUS
53599: PUSH
53600: LD_VAR 0 2
53604: PUSH
53605: LD_INT 4
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: LD_VAR 0 1
53617: PUSH
53618: LD_VAR 0 2
53622: PUSH
53623: LD_INT 3
53625: MINUS
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: PUSH
53635: LD_VAR 0 1
53639: PUSH
53640: LD_INT 4
53642: MINUS
53643: PUSH
53644: LD_VAR 0 2
53648: PUSH
53649: LD_INT 4
53651: MINUS
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// end ; 5 :
53668: GO 53808
53670: LD_INT 5
53672: DOUBLE
53673: EQUAL
53674: IFTRUE 53678
53676: GO 53807
53678: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53679: LD_ADDR_VAR 0 5
53683: PUSH
53684: LD_VAR 0 1
53688: PUSH
53689: LD_INT 4
53691: MINUS
53692: PUSH
53693: LD_VAR 0 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: PUSH
53706: LD_VAR 0 1
53710: PUSH
53711: LD_VAR 0 2
53715: PUSH
53716: LD_INT 4
53718: MINUS
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: PUSH
53728: LD_VAR 0 1
53732: PUSH
53733: LD_INT 4
53735: PLUS
53736: PUSH
53737: LD_VAR 0 2
53741: PUSH
53742: LD_INT 4
53744: PLUS
53745: PUSH
53746: LD_INT 5
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: PUSH
53754: LD_VAR 0 1
53758: PUSH
53759: LD_INT 3
53761: PLUS
53762: PUSH
53763: LD_VAR 0 2
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: PUSH
53776: LD_VAR 0 1
53780: PUSH
53781: LD_VAR 0 2
53785: PUSH
53786: LD_INT 3
53788: PLUS
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: ST_TO_ADDR
// end ; end ;
53805: GO 53808
53807: POP
// result := list ;
53808: LD_ADDR_VAR 0 4
53812: PUSH
53813: LD_VAR 0 5
53817: ST_TO_ADDR
// end ;
53818: LD_VAR 0 4
53822: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53823: LD_INT 0
53825: PPUSH
53826: PPUSH
53827: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53828: LD_VAR 0 1
53832: NOT
53833: IFTRUE 53861
53835: PUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 4
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: IN
53859: NOT
53860: OR
53861: IFFALSE 53865
// exit ;
53863: GO 53948
// tmp := [ ] ;
53865: LD_ADDR_VAR 0 5
53869: PUSH
53870: EMPTY
53871: ST_TO_ADDR
// for i in units do
53872: LD_ADDR_VAR 0 4
53876: PUSH
53877: LD_VAR 0 1
53881: PUSH
53882: FOR_IN
53883: IFFALSE 53917
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53885: LD_ADDR_VAR 0 5
53889: PUSH
53890: LD_VAR 0 5
53894: PPUSH
53895: LD_VAR 0 4
53899: PPUSH
53900: LD_VAR 0 2
53904: PPUSH
53905: CALL_OW 259
53909: PPUSH
53910: CALL 55343 0 2
53914: ST_TO_ADDR
53915: GO 53882
53917: POP
53918: POP
// if not tmp then
53919: LD_VAR 0 5
53923: NOT
53924: IFFALSE 53928
// exit ;
53926: GO 53948
// result := SortListByListDesc ( units , tmp ) ;
53928: LD_ADDR_VAR 0 3
53932: PUSH
53933: LD_VAR 0 1
53937: PPUSH
53938: LD_VAR 0 5
53942: PPUSH
53943: CALL_OW 77
53947: ST_TO_ADDR
// end ;
53948: LD_VAR 0 3
53952: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53953: LD_INT 0
53955: PPUSH
53956: PPUSH
53957: PPUSH
// result := false ;
53958: LD_ADDR_VAR 0 3
53962: PUSH
53963: LD_INT 0
53965: ST_TO_ADDR
// if not building then
53966: LD_VAR 0 2
53970: NOT
53971: IFFALSE 53975
// exit ;
53973: GO 54119
// x := GetX ( building ) ;
53975: LD_ADDR_VAR 0 4
53979: PUSH
53980: LD_VAR 0 2
53984: PPUSH
53985: CALL_OW 250
53989: ST_TO_ADDR
// y := GetY ( building ) ;
53990: LD_ADDR_VAR 0 5
53994: PUSH
53995: LD_VAR 0 2
53999: PPUSH
54000: CALL_OW 251
54004: ST_TO_ADDR
// if not x or not y then
54005: LD_VAR 0 4
54009: NOT
54010: IFTRUE 54019
54012: PUSH
54013: LD_VAR 0 5
54017: NOT
54018: OR
54019: IFFALSE 54023
// exit ;
54021: GO 54119
// if GetTaskList ( unit ) then
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 437
54032: IFFALSE 54119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54034: LD_STRING e
54036: PUSH
54037: LD_VAR 0 1
54041: PPUSH
54042: CALL_OW 437
54046: PUSH
54047: LD_INT 1
54049: ARRAY
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: EQUAL
54055: IFFALSE 54082
54057: PUSH
54058: LD_VAR 0 4
54062: PUSH
54063: LD_VAR 0 1
54067: PPUSH
54068: CALL_OW 437
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: PUSH
54077: LD_INT 2
54079: ARRAY
54080: EQUAL
54081: AND
54082: IFFALSE 54109
54084: PUSH
54085: LD_VAR 0 5
54089: PUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: CALL_OW 437
54099: PUSH
54100: LD_INT 1
54102: ARRAY
54103: PUSH
54104: LD_INT 3
54106: ARRAY
54107: EQUAL
54108: AND
54109: IFFALSE 54119
// result := true end ;
54111: LD_ADDR_VAR 0 3
54115: PUSH
54116: LD_INT 1
54118: ST_TO_ADDR
// end ;
54119: LD_VAR 0 3
54123: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54124: LD_INT 0
54126: PPUSH
// result := false ;
54127: LD_ADDR_VAR 0 4
54131: PUSH
54132: LD_INT 0
54134: ST_TO_ADDR
// if GetTaskList ( unit ) then
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 437
54144: IFFALSE 54231
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54146: LD_STRING M
54148: PUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: CALL_OW 437
54158: PUSH
54159: LD_INT 1
54161: ARRAY
54162: PUSH
54163: LD_INT 1
54165: ARRAY
54166: EQUAL
54167: IFFALSE 54194
54169: PUSH
54170: LD_VAR 0 2
54174: PUSH
54175: LD_VAR 0 1
54179: PPUSH
54180: CALL_OW 437
54184: PUSH
54185: LD_INT 1
54187: ARRAY
54188: PUSH
54189: LD_INT 2
54191: ARRAY
54192: EQUAL
54193: AND
54194: IFFALSE 54221
54196: PUSH
54197: LD_VAR 0 3
54201: PUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 437
54211: PUSH
54212: LD_INT 1
54214: ARRAY
54215: PUSH
54216: LD_INT 3
54218: ARRAY
54219: EQUAL
54220: AND
54221: IFFALSE 54231
// result := true ;
54223: LD_ADDR_VAR 0 4
54227: PUSH
54228: LD_INT 1
54230: ST_TO_ADDR
// end ; end ;
54231: LD_VAR 0 4
54235: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54236: LD_INT 0
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
// if not unit or not area then
54242: LD_VAR 0 1
54246: NOT
54247: IFTRUE 54256
54249: PUSH
54250: LD_VAR 0 2
54254: NOT
54255: OR
54256: IFFALSE 54260
// exit ;
54258: GO 54436
// tmp := AreaToList ( area , i ) ;
54260: LD_ADDR_VAR 0 6
54264: PUSH
54265: LD_VAR 0 2
54269: PPUSH
54270: LD_VAR 0 5
54274: PPUSH
54275: CALL_OW 517
54279: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54280: LD_ADDR_VAR 0 5
54284: PUSH
54285: DOUBLE
54286: LD_INT 1
54288: DEC
54289: ST_TO_ADDR
54290: LD_VAR 0 6
54294: PUSH
54295: LD_INT 1
54297: ARRAY
54298: PUSH
54299: FOR_TO
54300: IFFALSE 54434
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54302: LD_ADDR_VAR 0 7
54306: PUSH
54307: LD_VAR 0 6
54311: PUSH
54312: LD_INT 1
54314: ARRAY
54315: PUSH
54316: LD_VAR 0 5
54320: ARRAY
54321: PUSH
54322: LD_VAR 0 6
54326: PUSH
54327: LD_INT 2
54329: ARRAY
54330: PUSH
54331: LD_VAR 0 5
54335: ARRAY
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54341: LD_INT 92
54343: PUSH
54344: LD_VAR 0 7
54348: PUSH
54349: LD_INT 1
54351: ARRAY
54352: PUSH
54353: LD_VAR 0 7
54357: PUSH
54358: LD_INT 2
54360: ARRAY
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: PPUSH
54371: CALL_OW 69
54375: PUSH
54376: LD_INT 0
54378: EQUAL
54379: IFFALSE 54432
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54381: LD_VAR 0 1
54385: PPUSH
54386: LD_VAR 0 7
54390: PUSH
54391: LD_INT 1
54393: ARRAY
54394: PPUSH
54395: LD_VAR 0 7
54399: PUSH
54400: LD_INT 2
54402: ARRAY
54403: PPUSH
54404: LD_VAR 0 3
54408: PPUSH
54409: CALL_OW 48
// result := IsPlaced ( unit ) ;
54413: LD_ADDR_VAR 0 4
54417: PUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 305
54427: ST_TO_ADDR
// exit ;
54428: POP
54429: POP
54430: GO 54436
// end ; end ;
54432: GO 54299
54434: POP
54435: POP
// end ;
54436: LD_VAR 0 4
54440: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54441: LD_INT 0
54443: PPUSH
54444: PPUSH
54445: PPUSH
// if not side or side > 8 then
54446: LD_VAR 0 1
54450: NOT
54451: IFTRUE 54463
54453: PUSH
54454: LD_VAR 0 1
54458: PUSH
54459: LD_INT 8
54461: GREATER
54462: OR
54463: IFFALSE 54467
// exit ;
54465: GO 54654
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54467: LD_ADDR_VAR 0 4
54471: PUSH
54472: LD_INT 22
54474: PUSH
54475: LD_VAR 0 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 21
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PPUSH
54498: CALL_OW 69
54502: ST_TO_ADDR
// if not tmp then
54503: LD_VAR 0 4
54507: NOT
54508: IFFALSE 54512
// exit ;
54510: GO 54654
// enable_addtolog := true ;
54512: LD_ADDR_OWVAR 81
54516: PUSH
54517: LD_INT 1
54519: ST_TO_ADDR
// AddToLog ( [ ) ;
54520: LD_STRING [
54522: PPUSH
54523: CALL_OW 561
// for i in tmp do
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: LD_VAR 0 4
54536: PUSH
54537: FOR_IN
54538: IFFALSE 54645
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54540: LD_STRING [
54542: PUSH
54543: LD_VAR 0 3
54547: PPUSH
54548: CALL_OW 266
54552: STR
54553: PUSH
54554: LD_STRING , 
54556: STR
54557: PUSH
54558: LD_VAR 0 3
54562: PPUSH
54563: CALL_OW 250
54567: STR
54568: PUSH
54569: LD_STRING , 
54571: STR
54572: PUSH
54573: LD_VAR 0 3
54577: PPUSH
54578: CALL_OW 251
54582: STR
54583: PUSH
54584: LD_STRING , 
54586: STR
54587: PUSH
54588: LD_VAR 0 3
54592: PPUSH
54593: CALL_OW 254
54597: STR
54598: PUSH
54599: LD_STRING , 
54601: STR
54602: PUSH
54603: LD_VAR 0 3
54607: PPUSH
54608: LD_INT 1
54610: PPUSH
54611: CALL_OW 268
54615: STR
54616: PUSH
54617: LD_STRING , 
54619: STR
54620: PUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: LD_INT 2
54628: PPUSH
54629: CALL_OW 268
54633: STR
54634: PUSH
54635: LD_STRING ],
54637: STR
54638: PPUSH
54639: CALL_OW 561
// end ;
54643: GO 54537
54645: POP
54646: POP
// AddToLog ( ]; ) ;
54647: LD_STRING ];
54649: PPUSH
54650: CALL_OW 561
// end ;
54654: LD_VAR 0 2
54658: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54659: LD_INT 0
54661: PPUSH
54662: PPUSH
54663: PPUSH
54664: PPUSH
54665: PPUSH
// if not area or not rate or not max then
54666: LD_VAR 0 1
54670: NOT
54671: IFTRUE 54680
54673: PUSH
54674: LD_VAR 0 2
54678: NOT
54679: OR
54680: IFTRUE 54689
54682: PUSH
54683: LD_VAR 0 4
54687: NOT
54688: OR
54689: IFFALSE 54693
// exit ;
54691: GO 54882
// while 1 do
54693: LD_INT 1
54695: IFFALSE 54882
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54697: LD_ADDR_VAR 0 9
54701: PUSH
54702: LD_VAR 0 1
54706: PPUSH
54707: LD_INT 1
54709: PPUSH
54710: CALL_OW 287
54714: PUSH
54715: LD_INT 10
54717: MUL
54718: ST_TO_ADDR
// r := rate / 10 ;
54719: LD_ADDR_VAR 0 7
54723: PUSH
54724: LD_VAR 0 2
54728: PUSH
54729: LD_INT 10
54731: DIVREAL
54732: ST_TO_ADDR
// time := 1 1$00 ;
54733: LD_ADDR_VAR 0 8
54737: PUSH
54738: LD_INT 2100
54740: ST_TO_ADDR
// if amount < min then
54741: LD_VAR 0 9
54745: PUSH
54746: LD_VAR 0 3
54750: LESS
54751: IFFALSE 54769
// r := r * 2 else
54753: LD_ADDR_VAR 0 7
54757: PUSH
54758: LD_VAR 0 7
54762: PUSH
54763: LD_INT 2
54765: MUL
54766: ST_TO_ADDR
54767: GO 54795
// if amount > max then
54769: LD_VAR 0 9
54773: PUSH
54774: LD_VAR 0 4
54778: GREATER
54779: IFFALSE 54795
// r := r / 2 ;
54781: LD_ADDR_VAR 0 7
54785: PUSH
54786: LD_VAR 0 7
54790: PUSH
54791: LD_INT 2
54793: DIVREAL
54794: ST_TO_ADDR
// time := time / r ;
54795: LD_ADDR_VAR 0 8
54799: PUSH
54800: LD_VAR 0 8
54804: PUSH
54805: LD_VAR 0 7
54809: DIVREAL
54810: ST_TO_ADDR
// if time < 0 then
54811: LD_VAR 0 8
54815: PUSH
54816: LD_INT 0
54818: LESS
54819: IFFALSE 54836
// time := time * - 1 ;
54821: LD_ADDR_VAR 0 8
54825: PUSH
54826: LD_VAR 0 8
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: MUL
54835: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54836: LD_VAR 0 8
54840: PUSH
54841: LD_INT 35
54843: PPUSH
54844: LD_INT 875
54846: PPUSH
54847: CALL_OW 12
54851: PLUS
54852: PPUSH
54853: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54857: LD_INT 1
54859: PPUSH
54860: LD_INT 5
54862: PPUSH
54863: CALL_OW 12
54867: PPUSH
54868: LD_VAR 0 1
54872: PPUSH
54873: LD_INT 1
54875: PPUSH
54876: CALL_OW 55
// end ;
54880: GO 54693
// end ;
54882: LD_VAR 0 5
54886: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54887: LD_INT 0
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
// if not turrets or not factories then
54897: LD_VAR 0 1
54901: NOT
54902: IFTRUE 54911
54904: PUSH
54905: LD_VAR 0 2
54909: NOT
54910: OR
54911: IFFALSE 54915
// exit ;
54913: GO 55222
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54915: LD_ADDR_VAR 0 10
54919: PUSH
54920: LD_INT 5
54922: PUSH
54923: LD_INT 6
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 4
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: LD_INT 5
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 24
54957: PUSH
54958: LD_INT 25
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 23
54967: PUSH
54968: LD_INT 27
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 42
54981: PUSH
54982: LD_INT 43
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 44
54991: PUSH
54992: LD_INT 46
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 45
55001: PUSH
55002: LD_INT 47
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// result := [ ] ;
55019: LD_ADDR_VAR 0 3
55023: PUSH
55024: EMPTY
55025: ST_TO_ADDR
// for i in turrets do
55026: LD_ADDR_VAR 0 4
55030: PUSH
55031: LD_VAR 0 1
55035: PUSH
55036: FOR_IN
55037: IFFALSE 55220
// begin nat := GetNation ( i ) ;
55039: LD_ADDR_VAR 0 7
55043: PUSH
55044: LD_VAR 0 4
55048: PPUSH
55049: CALL_OW 248
55053: ST_TO_ADDR
// weapon := 0 ;
55054: LD_ADDR_VAR 0 8
55058: PUSH
55059: LD_INT 0
55061: ST_TO_ADDR
// if not nat then
55062: LD_VAR 0 7
55066: NOT
55067: IFFALSE 55071
// continue ;
55069: GO 55036
// for j in list [ nat ] do
55071: LD_ADDR_VAR 0 5
55075: PUSH
55076: LD_VAR 0 10
55080: PUSH
55081: LD_VAR 0 7
55085: ARRAY
55086: PUSH
55087: FOR_IN
55088: IFFALSE 55129
// if GetBWeapon ( i ) = j [ 1 ] then
55090: LD_VAR 0 4
55094: PPUSH
55095: CALL_OW 269
55099: PUSH
55100: LD_VAR 0 5
55104: PUSH
55105: LD_INT 1
55107: ARRAY
55108: EQUAL
55109: IFFALSE 55127
// begin weapon := j [ 2 ] ;
55111: LD_ADDR_VAR 0 8
55115: PUSH
55116: LD_VAR 0 5
55120: PUSH
55121: LD_INT 2
55123: ARRAY
55124: ST_TO_ADDR
// break ;
55125: GO 55129
// end ;
55127: GO 55087
55129: POP
55130: POP
// if not weapon then
55131: LD_VAR 0 8
55135: NOT
55136: IFFALSE 55140
// continue ;
55138: GO 55036
// for k in factories do
55140: LD_ADDR_VAR 0 6
55144: PUSH
55145: LD_VAR 0 2
55149: PUSH
55150: FOR_IN
55151: IFFALSE 55216
// begin weapons := AvailableWeaponList ( k ) ;
55153: LD_ADDR_VAR 0 9
55157: PUSH
55158: LD_VAR 0 6
55162: PPUSH
55163: CALL_OW 478
55167: ST_TO_ADDR
// if not weapons then
55168: LD_VAR 0 9
55172: NOT
55173: IFFALSE 55177
// continue ;
55175: GO 55150
// if weapon in weapons then
55177: LD_VAR 0 8
55181: PUSH
55182: LD_VAR 0 9
55186: IN
55187: IFFALSE 55214
// begin result := [ i , weapon ] ;
55189: LD_ADDR_VAR 0 3
55193: PUSH
55194: LD_VAR 0 4
55198: PUSH
55199: LD_VAR 0 8
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// exit ;
55208: POP
55209: POP
55210: POP
55211: POP
55212: GO 55222
// end ; end ;
55214: GO 55150
55216: POP
55217: POP
// end ;
55218: GO 55036
55220: POP
55221: POP
// end ;
55222: LD_VAR 0 3
55226: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55227: LD_INT 0
55229: PPUSH
// if not side or side > 8 then
55230: LD_VAR 0 3
55234: NOT
55235: IFTRUE 55247
55237: PUSH
55238: LD_VAR 0 3
55242: PUSH
55243: LD_INT 8
55245: GREATER
55246: OR
55247: IFFALSE 55251
// exit ;
55249: GO 55310
// if not range then
55251: LD_VAR 0 4
55255: NOT
55256: IFFALSE 55267
// range := - 12 ;
55258: LD_ADDR_VAR 0 4
55262: PUSH
55263: LD_INT 12
55265: NEG
55266: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55267: LD_VAR 0 1
55271: PPUSH
55272: LD_VAR 0 2
55276: PPUSH
55277: LD_VAR 0 3
55281: PPUSH
55282: LD_VAR 0 4
55286: PPUSH
55287: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55291: LD_VAR 0 1
55295: PPUSH
55296: LD_VAR 0 2
55300: PPUSH
55301: LD_VAR 0 3
55305: PPUSH
55306: CALL_OW 331
// end ;
55310: LD_VAR 0 5
55314: RET
// export function Video ( mode ) ; begin
55315: LD_INT 0
55317: PPUSH
// ingame_video = mode ;
55318: LD_ADDR_OWVAR 52
55322: PUSH
55323: LD_VAR 0 1
55327: ST_TO_ADDR
// interface_hidden = mode ;
55328: LD_ADDR_OWVAR 54
55332: PUSH
55333: LD_VAR 0 1
55337: ST_TO_ADDR
// end ;
55338: LD_VAR 0 2
55342: RET
// export function Join ( array , element ) ; begin
55343: LD_INT 0
55345: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55346: LD_ADDR_VAR 0 3
55350: PUSH
55351: LD_VAR 0 1
55355: PPUSH
55356: LD_VAR 0 1
55360: PUSH
55361: LD_INT 1
55363: PLUS
55364: PPUSH
55365: LD_VAR 0 2
55369: PPUSH
55370: CALL_OW 1
55374: ST_TO_ADDR
// end ;
55375: LD_VAR 0 3
55379: RET
// export function JoinUnion ( array , element ) ; begin
55380: LD_INT 0
55382: PPUSH
// result := array union element ;
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: LD_VAR 0 1
55392: PUSH
55393: LD_VAR 0 2
55397: UNION
55398: ST_TO_ADDR
// end ;
55399: LD_VAR 0 3
55403: RET
// export function GetBehemoths ( side ) ; begin
55404: LD_INT 0
55406: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55407: LD_ADDR_VAR 0 2
55411: PUSH
55412: LD_INT 22
55414: PUSH
55415: LD_VAR 0 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 31
55426: PUSH
55427: LD_INT 25
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PPUSH
55438: CALL_OW 69
55442: ST_TO_ADDR
// end ;
55443: LD_VAR 0 2
55447: RET
// export function Shuffle ( array ) ; var i , index ; begin
55448: LD_INT 0
55450: PPUSH
55451: PPUSH
55452: PPUSH
// result := [ ] ;
55453: LD_ADDR_VAR 0 2
55457: PUSH
55458: EMPTY
55459: ST_TO_ADDR
// if not array then
55460: LD_VAR 0 1
55464: NOT
55465: IFFALSE 55469
// exit ;
55467: GO 55568
// Randomize ;
55469: CALL_OW 10
// for i = array downto 1 do
55473: LD_ADDR_VAR 0 3
55477: PUSH
55478: DOUBLE
55479: LD_VAR 0 1
55483: INC
55484: ST_TO_ADDR
55485: LD_INT 1
55487: PUSH
55488: FOR_DOWNTO
55489: IFFALSE 55566
// begin index := rand ( 1 , array ) ;
55491: LD_ADDR_VAR 0 4
55495: PUSH
55496: LD_INT 1
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: CALL_OW 12
55508: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55509: LD_ADDR_VAR 0 2
55513: PUSH
55514: LD_VAR 0 2
55518: PPUSH
55519: LD_VAR 0 2
55523: PUSH
55524: LD_INT 1
55526: PLUS
55527: PPUSH
55528: LD_VAR 0 1
55532: PUSH
55533: LD_VAR 0 4
55537: ARRAY
55538: PPUSH
55539: CALL_OW 2
55543: ST_TO_ADDR
// array := Delete ( array , index ) ;
55544: LD_ADDR_VAR 0 1
55548: PUSH
55549: LD_VAR 0 1
55553: PPUSH
55554: LD_VAR 0 4
55558: PPUSH
55559: CALL_OW 3
55563: ST_TO_ADDR
// end ;
55564: GO 55488
55566: POP
55567: POP
// end ;
55568: LD_VAR 0 2
55572: RET
// export function GetBaseMaterials ( base ) ; begin
55573: LD_INT 0
55575: PPUSH
// result := [ 0 , 0 , 0 ] ;
55576: LD_ADDR_VAR 0 2
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// if not base then
55595: LD_VAR 0 1
55599: NOT
55600: IFFALSE 55604
// exit ;
55602: GO 55653
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55604: LD_ADDR_VAR 0 2
55608: PUSH
55609: LD_VAR 0 1
55613: PPUSH
55614: LD_INT 1
55616: PPUSH
55617: CALL_OW 275
55621: PUSH
55622: LD_VAR 0 1
55626: PPUSH
55627: LD_INT 2
55629: PPUSH
55630: CALL_OW 275
55634: PUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: LD_INT 3
55642: PPUSH
55643: CALL_OW 275
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// end ;
55653: LD_VAR 0 2
55657: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55658: LD_INT 0
55660: PPUSH
55661: PPUSH
// result := array ;
55662: LD_ADDR_VAR 0 3
55666: PUSH
55667: LD_VAR 0 1
55671: ST_TO_ADDR
// if size >= result then
55672: LD_VAR 0 2
55676: PUSH
55677: LD_VAR 0 3
55681: GREATEREQUAL
55682: IFFALSE 55686
// exit ;
55684: GO 55736
// if size then
55686: LD_VAR 0 2
55690: IFFALSE 55736
// for i := array downto size do
55692: LD_ADDR_VAR 0 4
55696: PUSH
55697: DOUBLE
55698: LD_VAR 0 1
55702: INC
55703: ST_TO_ADDR
55704: LD_VAR 0 2
55708: PUSH
55709: FOR_DOWNTO
55710: IFFALSE 55734
// result := Delete ( result , result ) ;
55712: LD_ADDR_VAR 0 3
55716: PUSH
55717: LD_VAR 0 3
55721: PPUSH
55722: LD_VAR 0 3
55726: PPUSH
55727: CALL_OW 3
55731: ST_TO_ADDR
55732: GO 55709
55734: POP
55735: POP
// end ;
55736: LD_VAR 0 3
55740: RET
// export function ComExit ( unit ) ; var tmp ; begin
55741: LD_INT 0
55743: PPUSH
55744: PPUSH
// if not IsInUnit ( unit ) then
55745: LD_VAR 0 1
55749: PPUSH
55750: CALL_OW 310
55754: NOT
55755: IFFALSE 55759
// exit ;
55757: GO 55819
// tmp := IsInUnit ( unit ) ;
55759: LD_ADDR_VAR 0 3
55763: PUSH
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL_OW 310
55773: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55774: LD_VAR 0 3
55778: PPUSH
55779: CALL_OW 247
55783: PUSH
55784: LD_INT 2
55786: EQUAL
55787: IFFALSE 55800
// ComExitVehicle ( unit ) else
55789: LD_VAR 0 1
55793: PPUSH
55794: CALL_OW 121
55798: GO 55809
// ComExitBuilding ( unit ) ;
55800: LD_VAR 0 1
55804: PPUSH
55805: CALL_OW 122
// result := tmp ;
55809: LD_ADDR_VAR 0 2
55813: PUSH
55814: LD_VAR 0 3
55818: ST_TO_ADDR
// end ;
55819: LD_VAR 0 2
55823: RET
// export function ComExitAll ( units ) ; var i ; begin
55824: LD_INT 0
55826: PPUSH
55827: PPUSH
// if not units then
55828: LD_VAR 0 1
55832: NOT
55833: IFFALSE 55837
// exit ;
55835: GO 55863
// for i in units do
55837: LD_ADDR_VAR 0 3
55841: PUSH
55842: LD_VAR 0 1
55846: PUSH
55847: FOR_IN
55848: IFFALSE 55861
// ComExit ( i ) ;
55850: LD_VAR 0 3
55854: PPUSH
55855: CALL 55741 0 1
55859: GO 55847
55861: POP
55862: POP
// end ;
55863: LD_VAR 0 2
55867: RET
// export function ResetHc ; begin
55868: LD_INT 0
55870: PPUSH
// InitHc ;
55871: CALL_OW 19
// hc_importance := 0 ;
55875: LD_ADDR_OWVAR 32
55879: PUSH
55880: LD_INT 0
55882: ST_TO_ADDR
// end ;
55883: LD_VAR 0 1
55887: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55888: LD_INT 0
55890: PPUSH
55891: PPUSH
55892: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55893: LD_ADDR_VAR 0 6
55897: PUSH
55898: LD_VAR 0 1
55902: PUSH
55903: LD_VAR 0 3
55907: PLUS
55908: PUSH
55909: LD_INT 2
55911: DIV
55912: ST_TO_ADDR
// if _x < 0 then
55913: LD_VAR 0 6
55917: PUSH
55918: LD_INT 0
55920: LESS
55921: IFFALSE 55938
// _x := _x * - 1 ;
55923: LD_ADDR_VAR 0 6
55927: PUSH
55928: LD_VAR 0 6
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: MUL
55937: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55938: LD_ADDR_VAR 0 7
55942: PUSH
55943: LD_VAR 0 2
55947: PUSH
55948: LD_VAR 0 4
55952: PLUS
55953: PUSH
55954: LD_INT 2
55956: DIV
55957: ST_TO_ADDR
// if _y < 0 then
55958: LD_VAR 0 7
55962: PUSH
55963: LD_INT 0
55965: LESS
55966: IFFALSE 55983
// _y := _y * - 1 ;
55968: LD_ADDR_VAR 0 7
55972: PUSH
55973: LD_VAR 0 7
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: MUL
55982: ST_TO_ADDR
// result := [ _x , _y ] ;
55983: LD_ADDR_VAR 0 5
55987: PUSH
55988: LD_VAR 0 6
55992: PUSH
55993: LD_VAR 0 7
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// end ;
56002: LD_VAR 0 5
56006: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56007: LD_INT 0
56009: PPUSH
56010: PPUSH
56011: PPUSH
56012: PPUSH
// task := GetTaskList ( unit ) ;
56013: LD_ADDR_VAR 0 7
56017: PUSH
56018: LD_VAR 0 1
56022: PPUSH
56023: CALL_OW 437
56027: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56028: LD_VAR 0 7
56032: NOT
56033: IFFALSE 56052
56035: PUSH
56036: LD_VAR 0 1
56040: PPUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: CALL_OW 308
56050: NOT
56051: AND
56052: IFFALSE 56056
// exit ;
56054: GO 56174
// if IsInArea ( unit , area ) then
56056: LD_VAR 0 1
56060: PPUSH
56061: LD_VAR 0 2
56065: PPUSH
56066: CALL_OW 308
56070: IFFALSE 56088
// begin ComMoveToArea ( unit , goAway ) ;
56072: LD_VAR 0 1
56076: PPUSH
56077: LD_VAR 0 3
56081: PPUSH
56082: CALL_OW 113
// exit ;
56086: GO 56174
// end ; if task [ 1 ] [ 1 ] <> M then
56088: LD_VAR 0 7
56092: PUSH
56093: LD_INT 1
56095: ARRAY
56096: PUSH
56097: LD_INT 1
56099: ARRAY
56100: PUSH
56101: LD_STRING M
56103: NONEQUAL
56104: IFFALSE 56108
// exit ;
56106: GO 56174
// x := task [ 1 ] [ 2 ] ;
56108: LD_ADDR_VAR 0 5
56112: PUSH
56113: LD_VAR 0 7
56117: PUSH
56118: LD_INT 1
56120: ARRAY
56121: PUSH
56122: LD_INT 2
56124: ARRAY
56125: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56126: LD_ADDR_VAR 0 6
56130: PUSH
56131: LD_VAR 0 7
56135: PUSH
56136: LD_INT 1
56138: ARRAY
56139: PUSH
56140: LD_INT 3
56142: ARRAY
56143: ST_TO_ADDR
// if InArea ( x , y , area ) then
56144: LD_VAR 0 5
56148: PPUSH
56149: LD_VAR 0 6
56153: PPUSH
56154: LD_VAR 0 2
56158: PPUSH
56159: CALL_OW 309
56163: IFFALSE 56174
// ComStop ( unit ) ;
56165: LD_VAR 0 1
56169: PPUSH
56170: CALL_OW 141
// end ;
56174: LD_VAR 0 4
56178: RET
// export function Abs ( value ) ; begin
56179: LD_INT 0
56181: PPUSH
// result := value ;
56182: LD_ADDR_VAR 0 2
56186: PUSH
56187: LD_VAR 0 1
56191: ST_TO_ADDR
// if value < 0 then
56192: LD_VAR 0 1
56196: PUSH
56197: LD_INT 0
56199: LESS
56200: IFFALSE 56217
// result := value * - 1 ;
56202: LD_ADDR_VAR 0 2
56206: PUSH
56207: LD_VAR 0 1
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: MUL
56216: ST_TO_ADDR
// end ;
56217: LD_VAR 0 2
56221: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56222: LD_INT 0
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
56229: PPUSH
56230: PPUSH
56231: PPUSH
// if not unit or not building then
56232: LD_VAR 0 1
56236: NOT
56237: IFTRUE 56246
56239: PUSH
56240: LD_VAR 0 2
56244: NOT
56245: OR
56246: IFFALSE 56250
// exit ;
56248: GO 56478
// x := GetX ( building ) ;
56250: LD_ADDR_VAR 0 4
56254: PUSH
56255: LD_VAR 0 2
56259: PPUSH
56260: CALL_OW 250
56264: ST_TO_ADDR
// y := GetY ( building ) ;
56265: LD_ADDR_VAR 0 6
56269: PUSH
56270: LD_VAR 0 2
56274: PPUSH
56275: CALL_OW 251
56279: ST_TO_ADDR
// d := GetDir ( building ) ;
56280: LD_ADDR_VAR 0 8
56284: PUSH
56285: LD_VAR 0 2
56289: PPUSH
56290: CALL_OW 254
56294: ST_TO_ADDR
// r := 4 ;
56295: LD_ADDR_VAR 0 9
56299: PUSH
56300: LD_INT 4
56302: ST_TO_ADDR
// for i := 1 to 5 do
56303: LD_ADDR_VAR 0 10
56307: PUSH
56308: DOUBLE
56309: LD_INT 1
56311: DEC
56312: ST_TO_ADDR
56313: LD_INT 5
56315: PUSH
56316: FOR_TO
56317: IFFALSE 56476
// begin _x := ShiftX ( x , d , r + i ) ;
56319: LD_ADDR_VAR 0 5
56323: PUSH
56324: LD_VAR 0 4
56328: PPUSH
56329: LD_VAR 0 8
56333: PPUSH
56334: LD_VAR 0 9
56338: PUSH
56339: LD_VAR 0 10
56343: PLUS
56344: PPUSH
56345: CALL_OW 272
56349: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56350: LD_ADDR_VAR 0 7
56354: PUSH
56355: LD_VAR 0 6
56359: PPUSH
56360: LD_VAR 0 8
56364: PPUSH
56365: LD_VAR 0 9
56369: PUSH
56370: LD_VAR 0 10
56374: PLUS
56375: PPUSH
56376: CALL_OW 273
56380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56381: LD_VAR 0 5
56385: PPUSH
56386: LD_VAR 0 7
56390: PPUSH
56391: CALL_OW 488
56395: IFFALSE 56430
56397: PUSH
56398: LD_VAR 0 5
56402: PPUSH
56403: LD_VAR 0 7
56407: PPUSH
56408: CALL_OW 428
56412: PPUSH
56413: CALL_OW 247
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: IN
56428: NOT
56429: AND
56430: IFFALSE 56474
// begin ComMoveXY ( unit , _x , _y ) ;
56432: LD_VAR 0 1
56436: PPUSH
56437: LD_VAR 0 5
56441: PPUSH
56442: LD_VAR 0 7
56446: PPUSH
56447: CALL_OW 111
// result := [ _x , _y ] ;
56451: LD_ADDR_VAR 0 3
56455: PUSH
56456: LD_VAR 0 5
56460: PUSH
56461: LD_VAR 0 7
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// exit ;
56470: POP
56471: POP
56472: GO 56478
// end ; end ;
56474: GO 56316
56476: POP
56477: POP
// end ;
56478: LD_VAR 0 3
56482: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56483: LD_INT 0
56485: PPUSH
56486: PPUSH
56487: PPUSH
// result := 0 ;
56488: LD_ADDR_VAR 0 3
56492: PUSH
56493: LD_INT 0
56495: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56496: LD_VAR 0 1
56500: PUSH
56501: LD_INT 0
56503: LESS
56504: IFTRUE 56516
56506: PUSH
56507: LD_VAR 0 1
56511: PUSH
56512: LD_INT 8
56514: GREATER
56515: OR
56516: IFTRUE 56528
56518: PUSH
56519: LD_VAR 0 2
56523: PUSH
56524: LD_INT 0
56526: LESS
56527: OR
56528: IFTRUE 56540
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: LD_INT 8
56538: GREATER
56539: OR
56540: IFFALSE 56544
// exit ;
56542: GO 56619
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56544: LD_ADDR_VAR 0 4
56548: PUSH
56549: LD_INT 22
56551: PUSH
56552: LD_VAR 0 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PPUSH
56561: CALL_OW 69
56565: PUSH
56566: FOR_IN
56567: IFFALSE 56617
// begin un := UnitShoot ( i ) ;
56569: LD_ADDR_VAR 0 5
56573: PUSH
56574: LD_VAR 0 4
56578: PPUSH
56579: CALL_OW 504
56583: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56584: LD_VAR 0 5
56588: PPUSH
56589: CALL_OW 255
56593: PUSH
56594: LD_VAR 0 1
56598: EQUAL
56599: IFFALSE 56615
// begin result := un ;
56601: LD_ADDR_VAR 0 3
56605: PUSH
56606: LD_VAR 0 5
56610: ST_TO_ADDR
// exit ;
56611: POP
56612: POP
56613: GO 56619
// end ; end ;
56615: GO 56566
56617: POP
56618: POP
// end ;
56619: LD_VAR 0 3
56623: RET
// export function GetCargoBay ( units ) ; begin
56624: LD_INT 0
56626: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56627: LD_ADDR_VAR 0 2
56631: PUSH
56632: LD_VAR 0 1
56636: PPUSH
56637: LD_INT 2
56639: PUSH
56640: LD_INT 34
56642: PUSH
56643: LD_INT 12
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 34
56652: PUSH
56653: LD_INT 51
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 34
56662: PUSH
56663: LD_INT 32
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 34
56672: PUSH
56673: LD_INT 89
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: PPUSH
56687: CALL_OW 72
56691: ST_TO_ADDR
// end ;
56692: LD_VAR 0 2
56696: RET
// export function Negate ( value ) ; begin
56697: LD_INT 0
56699: PPUSH
// result := not value ;
56700: LD_ADDR_VAR 0 2
56704: PUSH
56705: LD_VAR 0 1
56709: NOT
56710: ST_TO_ADDR
// end ;
56711: LD_VAR 0 2
56715: RET
// export function Inc ( value ) ; begin
56716: LD_INT 0
56718: PPUSH
// result := value + 1 ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: LD_VAR 0 1
56728: PUSH
56729: LD_INT 1
56731: PLUS
56732: ST_TO_ADDR
// end ;
56733: LD_VAR 0 2
56737: RET
// export function Dec ( value ) ; begin
56738: LD_INT 0
56740: PPUSH
// result := value - 1 ;
56741: LD_ADDR_VAR 0 2
56745: PUSH
56746: LD_VAR 0 1
56750: PUSH
56751: LD_INT 1
56753: MINUS
56754: ST_TO_ADDR
// end ;
56755: LD_VAR 0 2
56759: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56760: LD_INT 0
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
56766: PPUSH
56767: PPUSH
56768: PPUSH
56769: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56770: LD_VAR 0 1
56774: PPUSH
56775: LD_VAR 0 2
56779: PPUSH
56780: CALL_OW 488
56784: NOT
56785: IFTRUE 56804
56787: PUSH
56788: LD_VAR 0 3
56792: PPUSH
56793: LD_VAR 0 4
56797: PPUSH
56798: CALL_OW 488
56802: NOT
56803: OR
56804: IFFALSE 56817
// begin result := - 1 ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: ST_TO_ADDR
// exit ;
56815: GO 57052
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56817: LD_ADDR_VAR 0 12
56821: PUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: LD_VAR 0 2
56831: PPUSH
56832: LD_VAR 0 3
56836: PPUSH
56837: LD_VAR 0 4
56841: PPUSH
56842: CALL 55888 0 4
56846: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56847: LD_ADDR_VAR 0 11
56851: PUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_VAR 0 2
56861: PPUSH
56862: LD_VAR 0 12
56866: PUSH
56867: LD_INT 1
56869: ARRAY
56870: PPUSH
56871: LD_VAR 0 12
56875: PUSH
56876: LD_INT 2
56878: ARRAY
56879: PPUSH
56880: CALL_OW 298
56884: ST_TO_ADDR
// distance := 9999 ;
56885: LD_ADDR_VAR 0 10
56889: PUSH
56890: LD_INT 9999
56892: ST_TO_ADDR
// for i := 0 to 5 do
56893: LD_ADDR_VAR 0 6
56897: PUSH
56898: DOUBLE
56899: LD_INT 0
56901: DEC
56902: ST_TO_ADDR
56903: LD_INT 5
56905: PUSH
56906: FOR_TO
56907: IFFALSE 57050
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56909: LD_ADDR_VAR 0 7
56913: PUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: LD_VAR 0 6
56923: PPUSH
56924: LD_VAR 0 11
56928: PPUSH
56929: CALL_OW 272
56933: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56934: LD_ADDR_VAR 0 8
56938: PUSH
56939: LD_VAR 0 2
56943: PPUSH
56944: LD_VAR 0 6
56948: PPUSH
56949: LD_VAR 0 11
56953: PPUSH
56954: CALL_OW 273
56958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56959: LD_VAR 0 7
56963: PPUSH
56964: LD_VAR 0 8
56968: PPUSH
56969: CALL_OW 488
56973: NOT
56974: IFFALSE 56978
// continue ;
56976: GO 56906
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56978: LD_ADDR_VAR 0 9
56982: PUSH
56983: LD_VAR 0 12
56987: PUSH
56988: LD_INT 1
56990: ARRAY
56991: PPUSH
56992: LD_VAR 0 12
56996: PUSH
56997: LD_INT 2
56999: ARRAY
57000: PPUSH
57001: LD_VAR 0 7
57005: PPUSH
57006: LD_VAR 0 8
57010: PPUSH
57011: CALL_OW 298
57015: ST_TO_ADDR
// if tmp < distance then
57016: LD_VAR 0 9
57020: PUSH
57021: LD_VAR 0 10
57025: LESS
57026: IFFALSE 57048
// begin result := i ;
57028: LD_ADDR_VAR 0 5
57032: PUSH
57033: LD_VAR 0 6
57037: ST_TO_ADDR
// distance := tmp ;
57038: LD_ADDR_VAR 0 10
57042: PUSH
57043: LD_VAR 0 9
57047: ST_TO_ADDR
// end ; end ;
57048: GO 56906
57050: POP
57051: POP
// end ;
57052: LD_VAR 0 5
57056: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57057: LD_INT 0
57059: PPUSH
57060: PPUSH
// if not driver or not IsInUnit ( driver ) then
57061: LD_VAR 0 1
57065: NOT
57066: IFTRUE 57080
57068: PUSH
57069: LD_VAR 0 1
57073: PPUSH
57074: CALL_OW 310
57078: NOT
57079: OR
57080: IFFALSE 57084
// exit ;
57082: GO 57174
// vehicle := IsInUnit ( driver ) ;
57084: LD_ADDR_VAR 0 3
57088: PUSH
57089: LD_VAR 0 1
57093: PPUSH
57094: CALL_OW 310
57098: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57099: LD_VAR 0 1
57103: PPUSH
57104: LD_STRING \
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: PUSH
57134: LD_STRING E
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_VAR 0 3
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PPUSH
57170: CALL_OW 446
// end ;
57174: LD_VAR 0 2
57178: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57179: LD_INT 0
57181: PPUSH
57182: PPUSH
// if not driver or not IsInUnit ( driver ) then
57183: LD_VAR 0 1
57187: NOT
57188: IFTRUE 57202
57190: PUSH
57191: LD_VAR 0 1
57195: PPUSH
57196: CALL_OW 310
57200: NOT
57201: OR
57202: IFFALSE 57206
// exit ;
57204: GO 57296
// vehicle := IsInUnit ( driver ) ;
57206: LD_ADDR_VAR 0 3
57210: PUSH
57211: LD_VAR 0 1
57215: PPUSH
57216: CALL_OW 310
57220: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57221: LD_VAR 0 1
57225: PPUSH
57226: LD_STRING \
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: LD_STRING E
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_VAR 0 3
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PPUSH
57292: CALL_OW 447
// end ;
57296: LD_VAR 0 2
57300: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57301: LD_INT 0
57303: PPUSH
57304: PPUSH
57305: PPUSH
// tmp := [ ] ;
57306: LD_ADDR_VAR 0 5
57310: PUSH
57311: EMPTY
57312: ST_TO_ADDR
// for i in units do
57313: LD_ADDR_VAR 0 4
57317: PUSH
57318: LD_VAR 0 1
57322: PUSH
57323: FOR_IN
57324: IFFALSE 57362
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57326: LD_ADDR_VAR 0 5
57330: PUSH
57331: LD_VAR 0 5
57335: PPUSH
57336: LD_VAR 0 5
57340: PUSH
57341: LD_INT 1
57343: PLUS
57344: PPUSH
57345: LD_VAR 0 4
57349: PPUSH
57350: CALL_OW 256
57354: PPUSH
57355: CALL_OW 2
57359: ST_TO_ADDR
57360: GO 57323
57362: POP
57363: POP
// if not tmp then
57364: LD_VAR 0 5
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57421
// if asc then
57373: LD_VAR 0 2
57377: IFFALSE 57401
// result := SortListByListAsc ( units , tmp ) else
57379: LD_ADDR_VAR 0 3
57383: PUSH
57384: LD_VAR 0 1
57388: PPUSH
57389: LD_VAR 0 5
57393: PPUSH
57394: CALL_OW 76
57398: ST_TO_ADDR
57399: GO 57421
// result := SortListByListDesc ( units , tmp ) ;
57401: LD_ADDR_VAR 0 3
57405: PUSH
57406: LD_VAR 0 1
57410: PPUSH
57411: LD_VAR 0 5
57415: PPUSH
57416: CALL_OW 77
57420: ST_TO_ADDR
// end ;
57421: LD_VAR 0 3
57425: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57426: LD_INT 0
57428: PPUSH
57429: PPUSH
// task := GetTaskList ( mech ) ;
57430: LD_ADDR_VAR 0 4
57434: PUSH
57435: LD_VAR 0 1
57439: PPUSH
57440: CALL_OW 437
57444: ST_TO_ADDR
// if not task then
57445: LD_VAR 0 4
57449: NOT
57450: IFFALSE 57454
// exit ;
57452: GO 57498
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57454: LD_ADDR_VAR 0 3
57458: PUSH
57459: LD_VAR 0 4
57463: PUSH
57464: LD_INT 1
57466: ARRAY
57467: PUSH
57468: LD_INT 1
57470: ARRAY
57471: PUSH
57472: LD_STRING r
57474: EQUAL
57475: IFFALSE 57497
57477: PUSH
57478: LD_VAR 0 4
57482: PUSH
57483: LD_INT 1
57485: ARRAY
57486: PUSH
57487: LD_INT 4
57489: ARRAY
57490: PUSH
57491: LD_VAR 0 2
57495: EQUAL
57496: AND
57497: ST_TO_ADDR
// end ;
57498: LD_VAR 0 3
57502: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57503: LD_INT 0
57505: PPUSH
// SetDir ( unit , d ) ;
57506: LD_VAR 0 1
57510: PPUSH
57511: LD_VAR 0 4
57515: PPUSH
57516: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57520: LD_ADDR_VAR 0 6
57524: PUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: LD_VAR 0 2
57534: PPUSH
57535: LD_VAR 0 3
57539: PPUSH
57540: LD_VAR 0 5
57544: PPUSH
57545: CALL_OW 48
57549: ST_TO_ADDR
// end ;
57550: LD_VAR 0 6
57554: RET
// export function ToNaturalNumber ( number ) ; begin
57555: LD_INT 0
57557: PPUSH
// result := number div 1 ;
57558: LD_ADDR_VAR 0 2
57562: PUSH
57563: LD_VAR 0 1
57567: PUSH
57568: LD_INT 1
57570: DIV
57571: ST_TO_ADDR
// if number < 0 then
57572: LD_VAR 0 1
57576: PUSH
57577: LD_INT 0
57579: LESS
57580: IFFALSE 57590
// result := 0 ;
57582: LD_ADDR_VAR 0 2
57586: PUSH
57587: LD_INT 0
57589: ST_TO_ADDR
// end ;
57590: LD_VAR 0 2
57594: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57595: LD_INT 0
57597: PPUSH
57598: PPUSH
57599: PPUSH
// if not buildings then
57600: LD_VAR 0 1
57604: NOT
57605: IFFALSE 57609
// exit ;
57607: GO 57724
// tmp := [ ] ;
57609: LD_ADDR_VAR 0 5
57613: PUSH
57614: EMPTY
57615: ST_TO_ADDR
// for b in buildings do
57616: LD_ADDR_VAR 0 4
57620: PUSH
57621: LD_VAR 0 1
57625: PUSH
57626: FOR_IN
57627: IFFALSE 57665
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57629: LD_ADDR_VAR 0 5
57633: PUSH
57634: LD_VAR 0 5
57638: PPUSH
57639: LD_VAR 0 5
57643: PUSH
57644: LD_INT 1
57646: PLUS
57647: PPUSH
57648: LD_VAR 0 4
57652: PPUSH
57653: CALL_OW 266
57657: PPUSH
57658: CALL_OW 1
57662: ST_TO_ADDR
57663: GO 57626
57665: POP
57666: POP
// if not tmp then
57667: LD_VAR 0 5
57671: NOT
57672: IFFALSE 57676
// exit ;
57674: GO 57724
// if asc then
57676: LD_VAR 0 2
57680: IFFALSE 57704
// result := SortListByListAsc ( buildings , tmp ) else
57682: LD_ADDR_VAR 0 3
57686: PUSH
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_VAR 0 5
57696: PPUSH
57697: CALL_OW 76
57701: ST_TO_ADDR
57702: GO 57724
// result := SortListByListDesc ( buildings , tmp ) ;
57704: LD_ADDR_VAR 0 3
57708: PUSH
57709: LD_VAR 0 1
57713: PPUSH
57714: LD_VAR 0 5
57718: PPUSH
57719: CALL_OW 77
57723: ST_TO_ADDR
// end ;
57724: LD_VAR 0 3
57728: RET
// export function SortByClass ( units , class ) ; var un ; begin
57729: LD_INT 0
57731: PPUSH
57732: PPUSH
// if not units or not class then
57733: LD_VAR 0 1
57737: NOT
57738: IFTRUE 57747
57740: PUSH
57741: LD_VAR 0 2
57745: NOT
57746: OR
57747: IFFALSE 57751
// exit ;
57749: GO 57846
// result := [ ] ;
57751: LD_ADDR_VAR 0 3
57755: PUSH
57756: EMPTY
57757: ST_TO_ADDR
// for un in units do
57758: LD_ADDR_VAR 0 4
57762: PUSH
57763: LD_VAR 0 1
57767: PUSH
57768: FOR_IN
57769: IFFALSE 57844
// if GetClass ( un ) = class then
57771: LD_VAR 0 4
57775: PPUSH
57776: CALL_OW 257
57780: PUSH
57781: LD_VAR 0 2
57785: EQUAL
57786: IFFALSE 57813
// result := Insert ( result , 1 , un ) else
57788: LD_ADDR_VAR 0 3
57792: PUSH
57793: LD_VAR 0 3
57797: PPUSH
57798: LD_INT 1
57800: PPUSH
57801: LD_VAR 0 4
57805: PPUSH
57806: CALL_OW 2
57810: ST_TO_ADDR
57811: GO 57842
// result := Replace ( result , result + 1 , un ) ;
57813: LD_ADDR_VAR 0 3
57817: PUSH
57818: LD_VAR 0 3
57822: PPUSH
57823: LD_VAR 0 3
57827: PUSH
57828: LD_INT 1
57830: PLUS
57831: PPUSH
57832: LD_VAR 0 4
57836: PPUSH
57837: CALL_OW 1
57841: ST_TO_ADDR
57842: GO 57768
57844: POP
57845: POP
// end ;
57846: LD_VAR 0 3
57850: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57851: LD_INT 0
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
57859: PPUSH
// result := [ ] ;
57860: LD_ADDR_VAR 0 4
57864: PUSH
57865: EMPTY
57866: ST_TO_ADDR
// if x - r < 0 then
57867: LD_VAR 0 1
57871: PUSH
57872: LD_VAR 0 3
57876: MINUS
57877: PUSH
57878: LD_INT 0
57880: LESS
57881: IFFALSE 57893
// min_x := 0 else
57883: LD_ADDR_VAR 0 8
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
57891: GO 57909
// min_x := x - r ;
57893: LD_ADDR_VAR 0 8
57897: PUSH
57898: LD_VAR 0 1
57902: PUSH
57903: LD_VAR 0 3
57907: MINUS
57908: ST_TO_ADDR
// if y - r < 0 then
57909: LD_VAR 0 2
57913: PUSH
57914: LD_VAR 0 3
57918: MINUS
57919: PUSH
57920: LD_INT 0
57922: LESS
57923: IFFALSE 57935
// min_y := 0 else
57925: LD_ADDR_VAR 0 7
57929: PUSH
57930: LD_INT 0
57932: ST_TO_ADDR
57933: GO 57951
// min_y := y - r ;
57935: LD_ADDR_VAR 0 7
57939: PUSH
57940: LD_VAR 0 2
57944: PUSH
57945: LD_VAR 0 3
57949: MINUS
57950: ST_TO_ADDR
// max_x := x + r ;
57951: LD_ADDR_VAR 0 9
57955: PUSH
57956: LD_VAR 0 1
57960: PUSH
57961: LD_VAR 0 3
57965: PLUS
57966: ST_TO_ADDR
// max_y := y + r ;
57967: LD_ADDR_VAR 0 10
57971: PUSH
57972: LD_VAR 0 2
57976: PUSH
57977: LD_VAR 0 3
57981: PLUS
57982: ST_TO_ADDR
// for _x = min_x to max_x do
57983: LD_ADDR_VAR 0 5
57987: PUSH
57988: DOUBLE
57989: LD_VAR 0 8
57993: DEC
57994: ST_TO_ADDR
57995: LD_VAR 0 9
57999: PUSH
58000: FOR_TO
58001: IFFALSE 58102
// for _y = min_y to max_y do
58003: LD_ADDR_VAR 0 6
58007: PUSH
58008: DOUBLE
58009: LD_VAR 0 7
58013: DEC
58014: ST_TO_ADDR
58015: LD_VAR 0 10
58019: PUSH
58020: FOR_TO
58021: IFFALSE 58098
// begin if not ValidHex ( _x , _y ) then
58023: LD_VAR 0 5
58027: PPUSH
58028: LD_VAR 0 6
58032: PPUSH
58033: CALL_OW 488
58037: NOT
58038: IFFALSE 58042
// continue ;
58040: GO 58020
// if GetResourceTypeXY ( _x , _y ) then
58042: LD_VAR 0 5
58046: PPUSH
58047: LD_VAR 0 6
58051: PPUSH
58052: CALL_OW 283
58056: IFFALSE 58096
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58058: LD_ADDR_VAR 0 4
58062: PUSH
58063: LD_VAR 0 4
58067: PPUSH
58068: LD_VAR 0 4
58072: PUSH
58073: LD_INT 1
58075: PLUS
58076: PPUSH
58077: LD_VAR 0 5
58081: PUSH
58082: LD_VAR 0 6
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PPUSH
58091: CALL_OW 1
58095: ST_TO_ADDR
// end ;
58096: GO 58020
58098: POP
58099: POP
58100: GO 58000
58102: POP
58103: POP
// end ;
58104: LD_VAR 0 4
58108: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58109: LD_INT 0
58111: PPUSH
58112: PPUSH
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
58117: PPUSH
58118: PPUSH
// if not units then
58119: LD_VAR 0 1
58123: NOT
58124: IFFALSE 58128
// exit ;
58126: GO 58660
// result := UnitFilter ( units , [ f_ok ] ) ;
58128: LD_ADDR_VAR 0 3
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: LD_INT 50
58140: PUSH
58141: EMPTY
58142: LIST
58143: PPUSH
58144: CALL_OW 72
58148: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58149: LD_ADDR_VAR 0 8
58153: PUSH
58154: LD_VAR 0 1
58158: PUSH
58159: LD_INT 1
58161: ARRAY
58162: PPUSH
58163: CALL_OW 255
58167: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58168: LD_ADDR_VAR 0 10
58172: PUSH
58173: LD_INT 29
58175: PUSH
58176: LD_INT 91
58178: PUSH
58179: LD_INT 49
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// if not result then
58187: LD_VAR 0 3
58191: NOT
58192: IFFALSE 58196
// exit ;
58194: GO 58660
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58196: LD_ADDR_VAR 0 5
58200: PUSH
58201: LD_INT 81
58203: PUSH
58204: LD_VAR 0 8
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PPUSH
58213: CALL_OW 69
58217: ST_TO_ADDR
// for i in result do
58218: LD_ADDR_VAR 0 4
58222: PUSH
58223: LD_VAR 0 3
58227: PUSH
58228: FOR_IN
58229: IFFALSE 58658
// begin tag := GetTag ( i ) + 1 ;
58231: LD_ADDR_VAR 0 9
58235: PUSH
58236: LD_VAR 0 4
58240: PPUSH
58241: CALL_OW 110
58245: PUSH
58246: LD_INT 1
58248: PLUS
58249: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58250: LD_ADDR_VAR 0 7
58254: PUSH
58255: LD_VAR 0 4
58259: PPUSH
58260: CALL_OW 250
58264: PPUSH
58265: LD_VAR 0 4
58269: PPUSH
58270: CALL_OW 251
58274: PPUSH
58275: LD_INT 4
58277: PPUSH
58278: CALL 57851 0 3
58282: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58283: LD_VAR 0 4
58287: PPUSH
58288: CALL_OW 247
58292: PUSH
58293: LD_INT 2
58295: EQUAL
58296: IFFALSE 58308
58298: PUSH
58299: LD_VAR 0 7
58303: PUSH
58304: LD_INT 2
58306: GREATER
58307: AND
58308: IFFALSE 58328
58310: PUSH
58311: LD_VAR 0 4
58315: PPUSH
58316: CALL_OW 264
58320: PUSH
58321: LD_VAR 0 10
58325: IN
58326: NOT
58327: AND
58328: IFFALSE 58367
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58330: LD_VAR 0 4
58334: PPUSH
58335: LD_VAR 0 7
58339: PUSH
58340: LD_INT 1
58342: ARRAY
58343: PUSH
58344: LD_INT 1
58346: ARRAY
58347: PPUSH
58348: LD_VAR 0 7
58352: PUSH
58353: LD_INT 1
58355: ARRAY
58356: PUSH
58357: LD_INT 2
58359: ARRAY
58360: PPUSH
58361: CALL_OW 116
58365: GO 58656
// if path > tag then
58367: LD_VAR 0 2
58371: PUSH
58372: LD_VAR 0 9
58376: GREATER
58377: IFFALSE 58585
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58379: LD_ADDR_VAR 0 6
58383: PUSH
58384: LD_VAR 0 5
58388: PPUSH
58389: LD_INT 91
58391: PUSH
58392: LD_VAR 0 4
58396: PUSH
58397: LD_INT 8
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: PPUSH
58405: CALL_OW 72
58409: ST_TO_ADDR
// if nearEnemy then
58410: LD_VAR 0 6
58414: IFFALSE 58483
// begin if GetWeapon ( i ) = ru_time_lapser then
58416: LD_VAR 0 4
58420: PPUSH
58421: CALL_OW 264
58425: PUSH
58426: LD_INT 49
58428: EQUAL
58429: IFFALSE 58457
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58431: LD_VAR 0 4
58435: PPUSH
58436: LD_VAR 0 6
58440: PPUSH
58441: LD_VAR 0 4
58445: PPUSH
58446: CALL_OW 74
58450: PPUSH
58451: CALL_OW 112
58455: GO 58481
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58457: LD_VAR 0 4
58461: PPUSH
58462: LD_VAR 0 6
58466: PPUSH
58467: LD_VAR 0 4
58471: PPUSH
58472: CALL_OW 74
58476: PPUSH
58477: CALL 59741 0 2
// end else
58481: GO 58583
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58483: LD_VAR 0 4
58487: PPUSH
58488: LD_VAR 0 2
58492: PUSH
58493: LD_VAR 0 9
58497: ARRAY
58498: PUSH
58499: LD_INT 1
58501: ARRAY
58502: PPUSH
58503: LD_VAR 0 2
58507: PUSH
58508: LD_VAR 0 9
58512: ARRAY
58513: PUSH
58514: LD_INT 2
58516: ARRAY
58517: PPUSH
58518: CALL_OW 297
58522: PUSH
58523: LD_INT 6
58525: GREATER
58526: IFFALSE 58569
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58528: LD_VAR 0 4
58532: PPUSH
58533: LD_VAR 0 2
58537: PUSH
58538: LD_VAR 0 9
58542: ARRAY
58543: PUSH
58544: LD_INT 1
58546: ARRAY
58547: PPUSH
58548: LD_VAR 0 2
58552: PUSH
58553: LD_VAR 0 9
58557: ARRAY
58558: PUSH
58559: LD_INT 2
58561: ARRAY
58562: PPUSH
58563: CALL_OW 114
58567: GO 58583
// SetTag ( i , tag ) ;
58569: LD_VAR 0 4
58573: PPUSH
58574: LD_VAR 0 9
58578: PPUSH
58579: CALL_OW 109
// end else
58583: GO 58656
// if enemy then
58585: LD_VAR 0 5
58589: IFFALSE 58656
// begin if GetWeapon ( i ) = ru_time_lapser then
58591: LD_VAR 0 4
58595: PPUSH
58596: CALL_OW 264
58600: PUSH
58601: LD_INT 49
58603: EQUAL
58604: IFFALSE 58632
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58606: LD_VAR 0 4
58610: PPUSH
58611: LD_VAR 0 5
58615: PPUSH
58616: LD_VAR 0 4
58620: PPUSH
58621: CALL_OW 74
58625: PPUSH
58626: CALL_OW 112
58630: GO 58656
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58632: LD_VAR 0 4
58636: PPUSH
58637: LD_VAR 0 5
58641: PPUSH
58642: LD_VAR 0 4
58646: PPUSH
58647: CALL_OW 74
58651: PPUSH
58652: CALL 59741 0 2
// end ; end ;
58656: GO 58228
58658: POP
58659: POP
// end ;
58660: LD_VAR 0 3
58664: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58665: LD_INT 0
58667: PPUSH
58668: PPUSH
58669: PPUSH
// if not unit or IsInUnit ( unit ) then
58670: LD_VAR 0 1
58674: NOT
58675: IFTRUE 58688
58677: PUSH
58678: LD_VAR 0 1
58682: PPUSH
58683: CALL_OW 310
58687: OR
58688: IFFALSE 58692
// exit ;
58690: GO 58783
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58692: LD_ADDR_VAR 0 4
58696: PUSH
58697: LD_VAR 0 1
58701: PPUSH
58702: CALL_OW 250
58706: PPUSH
58707: LD_VAR 0 2
58711: PPUSH
58712: LD_INT 1
58714: PPUSH
58715: CALL_OW 272
58719: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58720: LD_ADDR_VAR 0 5
58724: PUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 251
58734: PPUSH
58735: LD_VAR 0 2
58739: PPUSH
58740: LD_INT 1
58742: PPUSH
58743: CALL_OW 273
58747: ST_TO_ADDR
// if ValidHex ( x , y ) then
58748: LD_VAR 0 4
58752: PPUSH
58753: LD_VAR 0 5
58757: PPUSH
58758: CALL_OW 488
58762: IFFALSE 58783
// ComTurnXY ( unit , x , y ) ;
58764: LD_VAR 0 1
58768: PPUSH
58769: LD_VAR 0 4
58773: PPUSH
58774: LD_VAR 0 5
58778: PPUSH
58779: CALL_OW 118
// end ;
58783: LD_VAR 0 3
58787: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58788: LD_INT 0
58790: PPUSH
58791: PPUSH
// result := false ;
58792: LD_ADDR_VAR 0 3
58796: PUSH
58797: LD_INT 0
58799: ST_TO_ADDR
// if not units then
58800: LD_VAR 0 2
58804: NOT
58805: IFFALSE 58809
// exit ;
58807: GO 58854
// for i in units do
58809: LD_ADDR_VAR 0 4
58813: PUSH
58814: LD_VAR 0 2
58818: PUSH
58819: FOR_IN
58820: IFFALSE 58852
// if See ( side , i ) then
58822: LD_VAR 0 1
58826: PPUSH
58827: LD_VAR 0 4
58831: PPUSH
58832: CALL_OW 292
58836: IFFALSE 58850
// begin result := true ;
58838: LD_ADDR_VAR 0 3
58842: PUSH
58843: LD_INT 1
58845: ST_TO_ADDR
// exit ;
58846: POP
58847: POP
58848: GO 58854
// end ;
58850: GO 58819
58852: POP
58853: POP
// end ;
58854: LD_VAR 0 3
58858: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58859: LD_INT 0
58861: PPUSH
58862: PPUSH
58863: PPUSH
58864: PPUSH
// if not unit or not points then
58865: LD_VAR 0 1
58869: NOT
58870: IFTRUE 58879
58872: PUSH
58873: LD_VAR 0 2
58877: NOT
58878: OR
58879: IFFALSE 58883
// exit ;
58881: GO 58973
// dist := 99999 ;
58883: LD_ADDR_VAR 0 5
58887: PUSH
58888: LD_INT 99999
58890: ST_TO_ADDR
// for i in points do
58891: LD_ADDR_VAR 0 4
58895: PUSH
58896: LD_VAR 0 2
58900: PUSH
58901: FOR_IN
58902: IFFALSE 58971
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58904: LD_ADDR_VAR 0 6
58908: PUSH
58909: LD_VAR 0 1
58913: PPUSH
58914: LD_VAR 0 4
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PPUSH
58923: LD_VAR 0 4
58927: PUSH
58928: LD_INT 2
58930: ARRAY
58931: PPUSH
58932: CALL_OW 297
58936: ST_TO_ADDR
// if tmpDist < dist then
58937: LD_VAR 0 6
58941: PUSH
58942: LD_VAR 0 5
58946: LESS
58947: IFFALSE 58969
// begin result := i ;
58949: LD_ADDR_VAR 0 3
58953: PUSH
58954: LD_VAR 0 4
58958: ST_TO_ADDR
// dist := tmpDist ;
58959: LD_ADDR_VAR 0 5
58963: PUSH
58964: LD_VAR 0 6
58968: ST_TO_ADDR
// end ; end ;
58969: GO 58901
58971: POP
58972: POP
// end ;
58973: LD_VAR 0 3
58977: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58978: LD_INT 0
58980: PPUSH
// uc_side := side ;
58981: LD_ADDR_OWVAR 20
58985: PUSH
58986: LD_VAR 0 1
58990: ST_TO_ADDR
// uc_nation := 3 ;
58991: LD_ADDR_OWVAR 21
58995: PUSH
58996: LD_INT 3
58998: ST_TO_ADDR
// vc_chassis := 25 ;
58999: LD_ADDR_OWVAR 37
59003: PUSH
59004: LD_INT 25
59006: ST_TO_ADDR
// vc_engine := engine_siberite ;
59007: LD_ADDR_OWVAR 39
59011: PUSH
59012: LD_INT 3
59014: ST_TO_ADDR
// vc_control := control_computer ;
59015: LD_ADDR_OWVAR 38
59019: PUSH
59020: LD_INT 3
59022: ST_TO_ADDR
// vc_weapon := 59 ;
59023: LD_ADDR_OWVAR 40
59027: PUSH
59028: LD_INT 59
59030: ST_TO_ADDR
// result := CreateVehicle ;
59031: LD_ADDR_VAR 0 5
59035: PUSH
59036: CALL_OW 45
59040: ST_TO_ADDR
// SetDir ( result , d ) ;
59041: LD_VAR 0 5
59045: PPUSH
59046: LD_VAR 0 4
59050: PPUSH
59051: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59055: LD_VAR 0 5
59059: PPUSH
59060: LD_VAR 0 2
59064: PPUSH
59065: LD_VAR 0 3
59069: PPUSH
59070: LD_INT 0
59072: PPUSH
59073: CALL_OW 48
// end ;
59077: LD_VAR 0 5
59081: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59082: LD_INT 0
59084: PPUSH
59085: PPUSH
59086: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59087: LD_ADDR_VAR 0 2
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59110: LD_VAR 0 1
59114: NOT
59115: IFTRUE 59148
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 264
59127: PUSH
59128: LD_INT 12
59130: PUSH
59131: LD_INT 51
59133: PUSH
59134: LD_INT 32
59136: PUSH
59137: LD_INT 89
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: IN
59146: NOT
59147: OR
59148: IFFALSE 59152
// exit ;
59150: GO 59250
// for i := 1 to 3 do
59152: LD_ADDR_VAR 0 3
59156: PUSH
59157: DOUBLE
59158: LD_INT 1
59160: DEC
59161: ST_TO_ADDR
59162: LD_INT 3
59164: PUSH
59165: FOR_TO
59166: IFFALSE 59248
// begin tmp := GetCargo ( cargo , i ) ;
59168: LD_ADDR_VAR 0 4
59172: PUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: LD_VAR 0 3
59182: PPUSH
59183: CALL_OW 289
59187: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59188: LD_ADDR_VAR 0 2
59192: PUSH
59193: LD_VAR 0 2
59197: PPUSH
59198: LD_VAR 0 3
59202: PPUSH
59203: LD_VAR 0 4
59207: PPUSH
59208: CALL_OW 1
59212: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59213: LD_ADDR_VAR 0 2
59217: PUSH
59218: LD_VAR 0 2
59222: PPUSH
59223: LD_INT 4
59225: PPUSH
59226: LD_VAR 0 2
59230: PUSH
59231: LD_INT 4
59233: ARRAY
59234: PUSH
59235: LD_VAR 0 4
59239: PLUS
59240: PPUSH
59241: CALL_OW 1
59245: ST_TO_ADDR
// end ;
59246: GO 59165
59248: POP
59249: POP
// end ;
59250: LD_VAR 0 2
59254: RET
// export function Length ( array ) ; begin
59255: LD_INT 0
59257: PPUSH
// result := array + 0 ;
59258: LD_ADDR_VAR 0 2
59262: PUSH
59263: LD_VAR 0 1
59267: PUSH
59268: LD_INT 0
59270: PLUS
59271: ST_TO_ADDR
// end ;
59272: LD_VAR 0 2
59276: RET
// export function PrepareArray ( array ) ; begin
59277: LD_INT 0
59279: PPUSH
// result := array diff 0 ;
59280: LD_ADDR_VAR 0 2
59284: PUSH
59285: LD_VAR 0 1
59289: PUSH
59290: LD_INT 0
59292: DIFF
59293: ST_TO_ADDR
// if not result [ 1 ] then
59294: LD_VAR 0 2
59298: PUSH
59299: LD_INT 1
59301: ARRAY
59302: NOT
59303: IFFALSE 59323
// result := Delete ( result , 1 ) ;
59305: LD_ADDR_VAR 0 2
59309: PUSH
59310: LD_VAR 0 2
59314: PPUSH
59315: LD_INT 1
59317: PPUSH
59318: CALL_OW 3
59322: ST_TO_ADDR
// end ;
59323: LD_VAR 0 2
59327: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59328: LD_INT 0
59330: PPUSH
59331: PPUSH
59332: PPUSH
59333: PPUSH
// sibRocketRange := 25 ;
59334: LD_ADDR_VAR 0 6
59338: PUSH
59339: LD_INT 25
59341: ST_TO_ADDR
// result := false ;
59342: LD_ADDR_VAR 0 4
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// for i := 0 to 5 do
59350: LD_ADDR_VAR 0 5
59354: PUSH
59355: DOUBLE
59356: LD_INT 0
59358: DEC
59359: ST_TO_ADDR
59360: LD_INT 5
59362: PUSH
59363: FOR_TO
59364: IFFALSE 59431
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59366: LD_VAR 0 1
59370: PPUSH
59371: LD_VAR 0 5
59375: PPUSH
59376: LD_VAR 0 6
59380: PPUSH
59381: CALL_OW 272
59385: PPUSH
59386: LD_VAR 0 2
59390: PPUSH
59391: LD_VAR 0 5
59395: PPUSH
59396: LD_VAR 0 6
59400: PPUSH
59401: CALL_OW 273
59405: PPUSH
59406: LD_VAR 0 3
59410: PPUSH
59411: CALL_OW 309
59415: IFFALSE 59429
// begin result := true ;
59417: LD_ADDR_VAR 0 4
59421: PUSH
59422: LD_INT 1
59424: ST_TO_ADDR
// exit ;
59425: POP
59426: POP
59427: GO 59433
// end ;
59429: GO 59363
59431: POP
59432: POP
// end ;
59433: LD_VAR 0 4
59437: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59438: LD_INT 0
59440: PPUSH
59441: PPUSH
59442: PPUSH
// if btype = b_depot then
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 0
59450: EQUAL
59451: IFFALSE 59463
// begin result := true ;
59453: LD_ADDR_VAR 0 3
59457: PUSH
59458: LD_INT 1
59460: ST_TO_ADDR
// exit ;
59461: GO 59583
// end ; pom := GetBase ( depot ) ;
59463: LD_ADDR_VAR 0 4
59467: PUSH
59468: LD_VAR 0 1
59472: PPUSH
59473: CALL_OW 274
59477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59478: LD_ADDR_VAR 0 5
59482: PUSH
59483: LD_VAR 0 2
59487: PPUSH
59488: LD_VAR 0 1
59492: PPUSH
59493: CALL_OW 248
59497: PPUSH
59498: CALL_OW 450
59502: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59503: LD_ADDR_VAR 0 3
59507: PUSH
59508: LD_VAR 0 4
59512: PPUSH
59513: LD_INT 1
59515: PPUSH
59516: CALL_OW 275
59520: PUSH
59521: LD_VAR 0 5
59525: PUSH
59526: LD_INT 1
59528: ARRAY
59529: GREATEREQUAL
59530: IFFALSE 59556
59532: PUSH
59533: LD_VAR 0 4
59537: PPUSH
59538: LD_INT 2
59540: PPUSH
59541: CALL_OW 275
59545: PUSH
59546: LD_VAR 0 5
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: GREATEREQUAL
59555: AND
59556: IFFALSE 59582
59558: PUSH
59559: LD_VAR 0 4
59563: PPUSH
59564: LD_INT 3
59566: PPUSH
59567: CALL_OW 275
59571: PUSH
59572: LD_VAR 0 5
59576: PUSH
59577: LD_INT 3
59579: ARRAY
59580: GREATEREQUAL
59581: AND
59582: ST_TO_ADDR
// end ;
59583: LD_VAR 0 3
59587: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59588: LD_INT 0
59590: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59591: LD_VAR 0 1
59595: PPUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: LD_INT 0
59603: PPUSH
59604: LD_INT 0
59606: PPUSH
59607: LD_INT 1
59609: PPUSH
59610: LD_INT 0
59612: PPUSH
59613: CALL_OW 587
// end ;
59617: LD_VAR 0 3
59621: RET
// export function CenterOnNow ( unit ) ; begin
59622: LD_INT 0
59624: PPUSH
// result := IsInUnit ( unit ) ;
59625: LD_ADDR_VAR 0 2
59629: PUSH
59630: LD_VAR 0 1
59634: PPUSH
59635: CALL_OW 310
59639: ST_TO_ADDR
// if not result then
59640: LD_VAR 0 2
59644: NOT
59645: IFFALSE 59657
// result := unit ;
59647: LD_ADDR_VAR 0 2
59651: PUSH
59652: LD_VAR 0 1
59656: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL_OW 87
// end ;
59666: LD_VAR 0 2
59670: RET
// export function ComMoveHex ( unit , hex ) ; begin
59671: LD_INT 0
59673: PPUSH
// if not hex then
59674: LD_VAR 0 2
59678: NOT
59679: IFFALSE 59683
// exit ;
59681: GO 59736
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 1
59690: ARRAY
59691: PPUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_INT 2
59699: ARRAY
59700: PPUSH
59701: CALL_OW 428
59705: IFFALSE 59709
// exit ;
59707: GO 59736
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59709: LD_VAR 0 1
59713: PPUSH
59714: LD_VAR 0 2
59718: PUSH
59719: LD_INT 1
59721: ARRAY
59722: PPUSH
59723: LD_VAR 0 2
59727: PUSH
59728: LD_INT 2
59730: ARRAY
59731: PPUSH
59732: CALL_OW 111
// end ;
59736: LD_VAR 0 3
59740: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59741: LD_INT 0
59743: PPUSH
59744: PPUSH
59745: PPUSH
// if not unit or not enemy then
59746: LD_VAR 0 1
59750: NOT
59751: IFTRUE 59760
59753: PUSH
59754: LD_VAR 0 2
59758: NOT
59759: OR
59760: IFFALSE 59764
// exit ;
59762: GO 59890
// x := GetX ( enemy ) ;
59764: LD_ADDR_VAR 0 4
59768: PUSH
59769: LD_VAR 0 2
59773: PPUSH
59774: CALL_OW 250
59778: ST_TO_ADDR
// y := GetY ( enemy ) ;
59779: LD_ADDR_VAR 0 5
59783: PUSH
59784: LD_VAR 0 2
59788: PPUSH
59789: CALL_OW 251
59793: ST_TO_ADDR
// if ValidHex ( x , y ) then
59794: LD_VAR 0 4
59798: PPUSH
59799: LD_VAR 0 5
59803: PPUSH
59804: CALL_OW 488
59808: IFFALSE 59890
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59810: LD_VAR 0 2
59814: PPUSH
59815: CALL_OW 247
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: IN
59830: IFTRUE 59853
59832: PUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 255
59842: PPUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: CALL_OW 292
59852: OR
59853: IFFALSE 59871
// ComAttackUnit ( unit , enemy ) else
59855: LD_VAR 0 1
59859: PPUSH
59860: LD_VAR 0 2
59864: PPUSH
59865: CALL_OW 115
59869: GO 59890
// ComAgressiveMove ( unit , x , y ) ;
59871: LD_VAR 0 1
59875: PPUSH
59876: LD_VAR 0 4
59880: PPUSH
59881: LD_VAR 0 5
59885: PPUSH
59886: CALL_OW 114
// end ;
59890: LD_VAR 0 3
59894: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59895: LD_INT 0
59897: PPUSH
59898: PPUSH
59899: PPUSH
// list := AreaToList ( area , 0 ) ;
59900: LD_ADDR_VAR 0 5
59904: PUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_INT 0
59912: PPUSH
59913: CALL_OW 517
59917: ST_TO_ADDR
// if not list then
59918: LD_VAR 0 5
59922: NOT
59923: IFFALSE 59927
// exit ;
59925: GO 60057
// if all then
59927: LD_VAR 0 2
59931: IFFALSE 60019
// begin for i := 1 to list [ 1 ] do
59933: LD_ADDR_VAR 0 4
59937: PUSH
59938: DOUBLE
59939: LD_INT 1
59941: DEC
59942: ST_TO_ADDR
59943: LD_VAR 0 5
59947: PUSH
59948: LD_INT 1
59950: ARRAY
59951: PUSH
59952: FOR_TO
59953: IFFALSE 60015
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59955: LD_ADDR_VAR 0 3
59959: PUSH
59960: LD_VAR 0 3
59964: PPUSH
59965: LD_VAR 0 3
59969: PUSH
59970: LD_INT 1
59972: PLUS
59973: PPUSH
59974: LD_VAR 0 5
59978: PUSH
59979: LD_INT 1
59981: ARRAY
59982: PUSH
59983: LD_VAR 0 4
59987: ARRAY
59988: PUSH
59989: LD_VAR 0 5
59993: PUSH
59994: LD_INT 2
59996: ARRAY
59997: PUSH
59998: LD_VAR 0 4
60002: ARRAY
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PPUSH
60008: CALL_OW 1
60012: ST_TO_ADDR
60013: GO 59952
60015: POP
60016: POP
// exit ;
60017: GO 60057
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60019: LD_ADDR_VAR 0 3
60023: PUSH
60024: LD_VAR 0 5
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PUSH
60033: LD_INT 1
60035: ARRAY
60036: PUSH
60037: LD_VAR 0 5
60041: PUSH
60042: LD_INT 2
60044: ARRAY
60045: PUSH
60046: LD_INT 1
60048: ARRAY
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: ST_TO_ADDR
// end ;
60057: LD_VAR 0 3
60061: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60062: LD_INT 0
60064: PPUSH
60065: PPUSH
// list := AreaToList ( area , 0 ) ;
60066: LD_ADDR_VAR 0 4
60070: PUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: LD_INT 0
60078: PPUSH
60079: CALL_OW 517
60083: ST_TO_ADDR
// if not list then
60084: LD_VAR 0 4
60088: NOT
60089: IFFALSE 60093
// exit ;
60091: GO 60134
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60093: LD_ADDR_VAR 0 3
60097: PUSH
60098: LD_VAR 0 4
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PUSH
60107: LD_INT 1
60109: ARRAY
60110: PUSH
60111: LD_VAR 0 4
60115: PUSH
60116: LD_INT 2
60118: ARRAY
60119: PUSH
60120: LD_INT 1
60122: ARRAY
60123: PUSH
60124: LD_VAR 0 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// end ;
60134: LD_VAR 0 3
60138: RET
// export function First ( array ) ; begin
60139: LD_INT 0
60141: PPUSH
// if not array then
60142: LD_VAR 0 1
60146: NOT
60147: IFFALSE 60151
// exit ;
60149: GO 60165
// result := array [ 1 ] ;
60151: LD_ADDR_VAR 0 2
60155: PUSH
60156: LD_VAR 0 1
60160: PUSH
60161: LD_INT 1
60163: ARRAY
60164: ST_TO_ADDR
// end ;
60165: LD_VAR 0 2
60169: RET
// export function Last ( array ) ; begin
60170: LD_INT 0
60172: PPUSH
// if not array then
60173: LD_VAR 0 1
60177: NOT
60178: IFFALSE 60182
// exit ;
60180: GO 60198
// result := array [ array ] ;
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: LD_VAR 0 1
60191: PUSH
60192: LD_VAR 0 1
60196: ARRAY
60197: ST_TO_ADDR
// end ;
60198: LD_VAR 0 2
60202: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60203: LD_INT 0
60205: PPUSH
60206: PPUSH
// result := [ ] ;
60207: LD_ADDR_VAR 0 5
60211: PUSH
60212: EMPTY
60213: ST_TO_ADDR
// if not array then
60214: LD_VAR 0 1
60218: NOT
60219: IFFALSE 60223
// exit ;
60221: GO 60335
// for i := 1 to array do
60223: LD_ADDR_VAR 0 6
60227: PUSH
60228: DOUBLE
60229: LD_INT 1
60231: DEC
60232: ST_TO_ADDR
60233: LD_VAR 0 1
60237: PUSH
60238: FOR_TO
60239: IFFALSE 60333
// if array [ i ] [ index ] = value then
60241: LD_VAR 0 1
60245: PUSH
60246: LD_VAR 0 6
60250: ARRAY
60251: PUSH
60252: LD_VAR 0 2
60256: ARRAY
60257: PUSH
60258: LD_VAR 0 3
60262: EQUAL
60263: IFFALSE 60331
// begin if indexColumn then
60265: LD_VAR 0 4
60269: IFFALSE 60305
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60271: LD_ADDR_VAR 0 5
60275: PUSH
60276: LD_VAR 0 5
60280: PPUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_VAR 0 6
60290: ARRAY
60291: PUSH
60292: LD_VAR 0 4
60296: ARRAY
60297: PPUSH
60298: CALL 55343 0 2
60302: ST_TO_ADDR
60303: GO 60331
// result := Join ( result , array [ i ] ) ;
60305: LD_ADDR_VAR 0 5
60309: PUSH
60310: LD_VAR 0 5
60314: PPUSH
60315: LD_VAR 0 1
60319: PUSH
60320: LD_VAR 0 6
60324: ARRAY
60325: PPUSH
60326: CALL 55343 0 2
60330: ST_TO_ADDR
// end ;
60331: GO 60238
60333: POP
60334: POP
// end ;
60335: LD_VAR 0 5
60339: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60340: LD_INT 0
60342: PPUSH
// if not vehicles or not parkingPoint then
60343: LD_VAR 0 1
60347: NOT
60348: IFTRUE 60357
60350: PUSH
60351: LD_VAR 0 2
60355: NOT
60356: OR
60357: IFFALSE 60361
// exit ;
60359: GO 60459
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60361: LD_ADDR_VAR 0 1
60365: PUSH
60366: LD_VAR 0 1
60370: PPUSH
60371: LD_INT 50
60373: PUSH
60374: EMPTY
60375: LIST
60376: PUSH
60377: LD_INT 3
60379: PUSH
60380: LD_INT 92
60382: PUSH
60383: LD_VAR 0 2
60387: PUSH
60388: LD_INT 1
60390: ARRAY
60391: PUSH
60392: LD_VAR 0 2
60396: PUSH
60397: LD_INT 2
60399: ARRAY
60400: PUSH
60401: LD_INT 8
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PPUSH
60418: CALL_OW 72
60422: ST_TO_ADDR
// if not vehicles then
60423: LD_VAR 0 1
60427: NOT
60428: IFFALSE 60432
// exit ;
60430: GO 60459
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60432: LD_VAR 0 1
60436: PPUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_INT 1
60444: ARRAY
60445: PPUSH
60446: LD_VAR 0 2
60450: PUSH
60451: LD_INT 2
60453: ARRAY
60454: PPUSH
60455: CALL_OW 111
// end ;
60459: LD_VAR 0 3
60463: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60464: LD_INT 0
60466: PPUSH
60467: PPUSH
60468: PPUSH
// if not side or not area then
60469: LD_VAR 0 1
60473: NOT
60474: IFTRUE 60483
60476: PUSH
60477: LD_VAR 0 2
60481: NOT
60482: OR
60483: IFFALSE 60487
// exit ;
60485: GO 60606
// tmp := AreaToList ( area , 0 ) ;
60487: LD_ADDR_VAR 0 5
60491: PUSH
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_INT 0
60499: PPUSH
60500: CALL_OW 517
60504: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60505: LD_ADDR_VAR 0 4
60509: PUSH
60510: DOUBLE
60511: LD_INT 1
60513: DEC
60514: ST_TO_ADDR
60515: LD_VAR 0 5
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: PUSH
60524: FOR_TO
60525: IFFALSE 60604
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60527: LD_VAR 0 5
60531: PUSH
60532: LD_INT 1
60534: ARRAY
60535: PUSH
60536: LD_VAR 0 4
60540: ARRAY
60541: PPUSH
60542: LD_VAR 0 5
60546: PUSH
60547: LD_INT 2
60549: ARRAY
60550: PUSH
60551: LD_VAR 0 4
60555: ARRAY
60556: PPUSH
60557: CALL_OW 351
60561: IFFALSE 60602
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60563: LD_VAR 0 5
60567: PUSH
60568: LD_INT 1
60570: ARRAY
60571: PUSH
60572: LD_VAR 0 4
60576: ARRAY
60577: PPUSH
60578: LD_VAR 0 5
60582: PUSH
60583: LD_INT 2
60585: ARRAY
60586: PUSH
60587: LD_VAR 0 4
60591: ARRAY
60592: PPUSH
60593: LD_VAR 0 1
60597: PPUSH
60598: CALL_OW 244
// end ;
60602: GO 60524
60604: POP
60605: POP
// end ;
60606: LD_VAR 0 3
60610: RET
// export function UniqueArray ( array ) ; var i ; begin
60611: LD_INT 0
60613: PPUSH
60614: PPUSH
// result := [ ] ;
60615: LD_ADDR_VAR 0 2
60619: PUSH
60620: EMPTY
60621: ST_TO_ADDR
// if not array then
60622: LD_VAR 0 1
60626: NOT
60627: IFFALSE 60631
// exit ;
60629: GO 60692
// for i := 1 to array do
60631: LD_ADDR_VAR 0 3
60635: PUSH
60636: DOUBLE
60637: LD_INT 1
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 1
60645: PUSH
60646: FOR_TO
60647: IFFALSE 60690
// if not array [ i ] in result then
60649: LD_VAR 0 1
60653: PUSH
60654: LD_VAR 0 3
60658: ARRAY
60659: PUSH
60660: LD_VAR 0 2
60664: IN
60665: NOT
60666: IFFALSE 60688
// result := Join ( result , i ) ;
60668: LD_ADDR_VAR 0 2
60672: PUSH
60673: LD_VAR 0 2
60677: PPUSH
60678: LD_VAR 0 3
60682: PPUSH
60683: CALL 55343 0 2
60687: ST_TO_ADDR
60688: GO 60646
60690: POP
60691: POP
// end ; end_of_file
60692: LD_VAR 0 2
60696: RET
// export function SOS_UnitDestroyed ( un ) ; begin
60697: LD_INT 0
60699: PPUSH
// ComRadiation ( un ) ;
60700: LD_VAR 0 1
60704: PPUSH
60705: CALL 61867 0 1
// end ;
60709: LD_VAR 0 2
60713: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60714: LD_INT 0
60716: PPUSH
// ComRadiation ( un ) ;
60717: LD_VAR 0 1
60721: PPUSH
60722: CALL 61867 0 1
// end ;
60726: LD_VAR 0 2
60730: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60731: LD_INT 0
60733: PPUSH
// end ;
60734: LD_VAR 0 4
60738: RET
// export function SOS_Command ( cmd ) ; begin
60739: LD_INT 0
60741: PPUSH
// end ;
60742: LD_VAR 0 2
60746: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60747: LD_INT 0
60749: PPUSH
// end ;
60750: LD_VAR 0 6
60754: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
60755: LD_INT 0
60757: PPUSH
60758: PPUSH
60759: PPUSH
60760: PPUSH
60761: PPUSH
// if not vehicle or not factory then
60762: LD_VAR 0 1
60766: NOT
60767: IFTRUE 60776
60769: PUSH
60770: LD_VAR 0 2
60774: NOT
60775: OR
60776: IFFALSE 60780
// exit ;
60778: GO 61442
// weapon := GetWeapon ( vehicle ) ;
60780: LD_ADDR_VAR 0 7
60784: PUSH
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 264
60794: ST_TO_ADDR
// if weapon = ar_miner then
60795: LD_VAR 0 7
60799: PUSH
60800: LD_INT 81
60802: EQUAL
60803: IFFALSE 60860
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
60805: LD_ADDR_EXP 61
60809: PUSH
60810: LD_EXP 61
60814: PPUSH
60815: LD_EXP 61
60819: PUSH
60820: LD_INT 1
60822: PLUS
60823: PPUSH
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 1
60833: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60834: LD_ADDR_EXP 62
60838: PUSH
60839: LD_EXP 62
60843: PPUSH
60844: LD_EXP 62
60848: PUSH
60849: LD_INT 1
60851: PLUS
60852: PPUSH
60853: EMPTY
60854: PPUSH
60855: CALL_OW 1
60859: ST_TO_ADDR
// end ; if not factoryWaypoints then
60860: LD_EXP 64
60864: NOT
60865: IFFALSE 60869
// exit ;
60867: GO 61442
// for i := 1 to Count ( factoryWaypoints ) do
60869: LD_ADDR_VAR 0 4
60873: PUSH
60874: DOUBLE
60875: LD_INT 1
60877: DEC
60878: ST_TO_ADDR
60879: LD_EXP 64
60883: PPUSH
60884: CALL 19367 0 1
60888: PUSH
60889: FOR_TO
60890: IFFALSE 61440
// if factoryWaypoints [ i ] [ 2 ] = factory then
60892: LD_EXP 64
60896: PUSH
60897: LD_VAR 0 4
60901: ARRAY
60902: PUSH
60903: LD_INT 2
60905: ARRAY
60906: PUSH
60907: LD_VAR 0 2
60911: EQUAL
60912: IFFALSE 61438
// begin if GetControl ( vehicle ) = control_manual then
60914: LD_VAR 0 1
60918: PPUSH
60919: CALL_OW 263
60923: PUSH
60924: LD_INT 1
60926: EQUAL
60927: IFFALSE 61291
// begin driver := IsDrivenBy ( vehicle ) ;
60929: LD_ADDR_VAR 0 5
60933: PUSH
60934: LD_VAR 0 1
60938: PPUSH
60939: CALL_OW 311
60943: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60944: LD_VAR 0 5
60948: PUSH
60949: LD_EXP 65
60953: IN
60954: IFTRUE 60968
60956: PUSH
60957: LD_VAR 0 1
60961: PUSH
60962: LD_EXP 65
60966: IN
60967: OR
60968: IFFALSE 60974
// exit ;
60970: POP
60971: POP
60972: GO 61442
// if not HasTask ( driver ) then
60974: LD_VAR 0 5
60978: PPUSH
60979: CALL_OW 314
60983: NOT
60984: IFFALSE 61289
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60986: LD_ADDR_EXP 65
60990: PUSH
60991: LD_EXP 65
60995: PPUSH
60996: LD_VAR 0 5
61000: PPUSH
61001: CALL 55343 0 2
61005: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
61006: LD_ADDR_EXP 65
61010: PUSH
61011: LD_EXP 65
61015: PPUSH
61016: LD_VAR 0 1
61020: PPUSH
61021: CALL 55343 0 2
61025: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61026: LD_ADDR_VAR 0 6
61030: PUSH
61031: LD_EXP 64
61035: PUSH
61036: LD_VAR 0 4
61040: ARRAY
61041: PUSH
61042: LD_INT 3
61044: ARRAY
61045: PPUSH
61046: LD_EXP 64
61050: PUSH
61051: LD_VAR 0 4
61055: ARRAY
61056: PUSH
61057: LD_INT 4
61059: ARRAY
61060: PPUSH
61061: CALL_OW 428
61065: ST_TO_ADDR
// if hex then
61066: LD_VAR 0 6
61070: IFFALSE 61088
// ComMoveUnit ( driver , hex ) else
61072: LD_VAR 0 5
61076: PPUSH
61077: LD_VAR 0 6
61081: PPUSH
61082: CALL_OW 112
61086: GO 61172
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
61088: LD_VAR 0 1
61092: PPUSH
61093: LD_EXP 64
61097: PUSH
61098: LD_VAR 0 4
61102: ARRAY
61103: PUSH
61104: LD_INT 3
61106: ARRAY
61107: PPUSH
61108: LD_EXP 64
61112: PUSH
61113: LD_VAR 0 4
61117: ARRAY
61118: PUSH
61119: LD_INT 4
61121: ARRAY
61122: PPUSH
61123: CALL_OW 297
61127: PUSH
61128: LD_INT 0
61130: GREATER
61131: IFFALSE 61172
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61133: LD_VAR 0 5
61137: PPUSH
61138: LD_EXP 64
61142: PUSH
61143: LD_VAR 0 4
61147: ARRAY
61148: PUSH
61149: LD_INT 3
61151: ARRAY
61152: PPUSH
61153: LD_EXP 64
61157: PUSH
61158: LD_VAR 0 4
61162: ARRAY
61163: PUSH
61164: LD_INT 4
61166: ARRAY
61167: PPUSH
61168: CALL_OW 111
// AddComExitVehicle ( driver ) ;
61172: LD_VAR 0 5
61176: PPUSH
61177: CALL_OW 181
// if Multiplayer then
61181: LD_OWVAR 4
61185: IFFALSE 61234
// begin repeat wait ( 10 ) ;
61187: LD_INT 10
61189: PPUSH
61190: CALL_OW 67
// until not IsInUnit ( driver ) ;
61194: LD_VAR 0 5
61198: PPUSH
61199: CALL_OW 310
61203: NOT
61204: IFFALSE 61187
// if not HasTask ( driver ) then
61206: LD_VAR 0 5
61210: PPUSH
61211: CALL_OW 314
61215: NOT
61216: IFFALSE 61232
// ComEnterUnit ( driver , factory ) ;
61218: LD_VAR 0 5
61222: PPUSH
61223: LD_VAR 0 2
61227: PPUSH
61228: CALL_OW 120
// end else
61232: GO 61248
// AddComEnterUnit ( driver , factory ) ;
61234: LD_VAR 0 5
61238: PPUSH
61239: LD_VAR 0 2
61243: PPUSH
61244: CALL_OW 180
// wait ( 0 0$1 ) ;
61248: LD_INT 35
61250: PPUSH
61251: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
61255: LD_ADDR_EXP 65
61259: PUSH
61260: LD_EXP 65
61264: PUSH
61265: LD_VAR 0 5
61269: DIFF
61270: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
61271: LD_ADDR_EXP 65
61275: PUSH
61276: LD_EXP 65
61280: PUSH
61281: LD_VAR 0 1
61285: DIFF
61286: ST_TO_ADDR
// break ;
61287: GO 61440
// end ; end else
61289: GO 61438
// if GetControl ( vehicle ) = control_remote then
61291: LD_VAR 0 1
61295: PPUSH
61296: CALL_OW 263
61300: PUSH
61301: LD_INT 2
61303: EQUAL
61304: IFFALSE 61390
// begin wait ( 0 0$2 ) ;
61306: LD_INT 70
61308: PPUSH
61309: CALL_OW 67
// repeat wait ( 10 ) ;
61313: LD_INT 10
61315: PPUSH
61316: CALL_OW 67
// Connect ( vehicle ) ;
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL 25645 0 1
// until IsControledBy ( vehicle ) ;
61329: LD_VAR 0 1
61333: PPUSH
61334: CALL_OW 312
61338: IFFALSE 61313
// wait ( 10 ) ;
61340: LD_INT 10
61342: PPUSH
61343: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61347: LD_VAR 0 1
61351: PPUSH
61352: LD_EXP 64
61356: PUSH
61357: LD_VAR 0 4
61361: ARRAY
61362: PUSH
61363: LD_INT 3
61365: ARRAY
61366: PPUSH
61367: LD_EXP 64
61371: PUSH
61372: LD_VAR 0 4
61376: ARRAY
61377: PUSH
61378: LD_INT 4
61380: ARRAY
61381: PPUSH
61382: CALL_OW 111
// break ;
61386: GO 61440
// end else
61388: GO 61438
// begin wait ( 0 0$3 ) ;
61390: LD_INT 105
61392: PPUSH
61393: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61397: LD_VAR 0 1
61401: PPUSH
61402: LD_EXP 64
61406: PUSH
61407: LD_VAR 0 4
61411: ARRAY
61412: PUSH
61413: LD_INT 3
61415: ARRAY
61416: PPUSH
61417: LD_EXP 64
61421: PUSH
61422: LD_VAR 0 4
61426: ARRAY
61427: PUSH
61428: LD_INT 4
61430: ARRAY
61431: PPUSH
61432: CALL_OW 111
// break ;
61436: GO 61440
// end ; end ;
61438: GO 60889
61440: POP
61441: POP
// end ;
61442: LD_VAR 0 3
61446: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61447: LD_INT 0
61449: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61450: LD_VAR 0 1
61454: PUSH
61455: LD_INT 250
61457: EQUAL
61458: IFFALSE 61475
61460: PUSH
61461: LD_VAR 0 2
61465: PPUSH
61466: CALL_OW 264
61470: PUSH
61471: LD_INT 81
61473: EQUAL
61474: AND
61475: IFFALSE 61496
// MinerPlaceMine ( unit , x , y ) ;
61477: LD_VAR 0 2
61481: PPUSH
61482: LD_VAR 0 4
61486: PPUSH
61487: LD_VAR 0 5
61491: PPUSH
61492: CALL 64777 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61496: LD_VAR 0 1
61500: PUSH
61501: LD_INT 251
61503: EQUAL
61504: IFFALSE 61521
61506: PUSH
61507: LD_VAR 0 2
61511: PPUSH
61512: CALL_OW 264
61516: PUSH
61517: LD_INT 81
61519: EQUAL
61520: AND
61521: IFFALSE 61542
// MinerDetonateMine ( unit , x , y ) ;
61523: LD_VAR 0 2
61527: PPUSH
61528: LD_VAR 0 4
61532: PPUSH
61533: LD_VAR 0 5
61537: PPUSH
61538: CALL 65184 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61542: LD_VAR 0 1
61546: PUSH
61547: LD_INT 252
61549: EQUAL
61550: IFFALSE 61567
61552: PUSH
61553: LD_VAR 0 2
61557: PPUSH
61558: CALL_OW 264
61562: PUSH
61563: LD_INT 81
61565: EQUAL
61566: AND
61567: IFFALSE 61588
// MinerCreateMinefield ( unit , x , y ) ;
61569: LD_VAR 0 2
61573: PPUSH
61574: LD_VAR 0 4
61578: PPUSH
61579: LD_VAR 0 5
61583: PPUSH
61584: CALL 65416 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61588: LD_VAR 0 1
61592: PUSH
61593: LD_INT 253
61595: EQUAL
61596: IFFALSE 61613
61598: PUSH
61599: LD_VAR 0 2
61603: PPUSH
61604: CALL_OW 257
61608: PUSH
61609: LD_INT 5
61611: EQUAL
61612: AND
61613: IFFALSE 61634
// ComBinocular ( unit , x , y ) ;
61615: LD_VAR 0 2
61619: PPUSH
61620: LD_VAR 0 4
61624: PPUSH
61625: LD_VAR 0 5
61629: PPUSH
61630: CALL 65791 0 3
// if selectedUnit then
61634: LD_VAR 0 3
61638: IFFALSE 61698
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61640: LD_VAR 0 1
61644: PUSH
61645: LD_INT 254
61647: EQUAL
61648: IFFALSE 61665
61650: PUSH
61651: LD_VAR 0 2
61655: PPUSH
61656: CALL_OW 264
61660: PUSH
61661: LD_INT 99
61663: EQUAL
61664: AND
61665: IFFALSE 61682
61667: PUSH
61668: LD_VAR 0 3
61672: PPUSH
61673: CALL_OW 263
61677: PUSH
61678: LD_INT 3
61680: EQUAL
61681: AND
61682: IFFALSE 61698
// HackDestroyVehicle ( unit , selectedUnit ) ;
61684: LD_VAR 0 2
61688: PPUSH
61689: LD_VAR 0 3
61693: PPUSH
61694: CALL 63988 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61698: LD_VAR 0 1
61702: PUSH
61703: LD_INT 255
61705: EQUAL
61706: IFFALSE 61730
61708: PUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: CALL_OW 264
61718: PUSH
61719: LD_INT 14
61721: PUSH
61722: LD_INT 53
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: IN
61729: AND
61730: IFFALSE 61748
61732: PUSH
61733: LD_VAR 0 4
61737: PPUSH
61738: LD_VAR 0 5
61742: PPUSH
61743: CALL_OW 488
61747: AND
61748: IFFALSE 61772
// CutTreeXYR ( unit , x , y , 12 ) ;
61750: LD_VAR 0 2
61754: PPUSH
61755: LD_VAR 0 4
61759: PPUSH
61760: LD_VAR 0 5
61764: PPUSH
61765: LD_INT 12
61767: PPUSH
61768: CALL 61963 0 4
// if cmd = 256 then
61772: LD_VAR 0 1
61776: PUSH
61777: LD_INT 256
61779: EQUAL
61780: IFFALSE 61801
// SetFactoryWaypoint ( unit , x , y ) ;
61782: LD_VAR 0 2
61786: PPUSH
61787: LD_VAR 0 4
61791: PPUSH
61792: LD_VAR 0 5
61796: PPUSH
61797: CALL 67939 0 3
// if cmd = 257 then
61801: LD_VAR 0 1
61805: PUSH
61806: LD_INT 257
61808: EQUAL
61809: IFFALSE 61830
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61811: LD_VAR 0 2
61815: PPUSH
61816: LD_VAR 0 4
61820: PPUSH
61821: LD_VAR 0 5
61825: PPUSH
61826: CALL 68435 0 3
// if cmd = 258 then
61830: LD_VAR 0 1
61834: PUSH
61835: LD_INT 258
61837: EQUAL
61838: IFFALSE 61862
// BurnTreeXYR ( unit , x , y , 8 ) ;
61840: LD_VAR 0 2
61844: PPUSH
61845: LD_VAR 0 4
61849: PPUSH
61850: LD_VAR 0 5
61854: PPUSH
61855: LD_INT 8
61857: PPUSH
61858: CALL 62363 0 4
// end ;
61862: LD_VAR 0 6
61866: RET
// export function ComRadiation ( un ) ; var eff ; begin
61867: LD_INT 0
61869: PPUSH
61870: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61871: LD_VAR 0 1
61875: PPUSH
61876: CALL_OW 264
61880: PUSH
61881: LD_INT 91
61883: NONEQUAL
61884: IFFALSE 61888
// exit ;
61886: GO 61958
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61888: LD_INT 68
61890: PPUSH
61891: LD_VAR 0 1
61895: PPUSH
61896: CALL_OW 255
61900: PPUSH
61901: CALL_OW 321
61905: PUSH
61906: LD_INT 2
61908: EQUAL
61909: IFFALSE 61921
// eff := 50 else
61911: LD_ADDR_VAR 0 3
61915: PUSH
61916: LD_INT 50
61918: ST_TO_ADDR
61919: GO 61929
// eff := 25 ;
61921: LD_ADDR_VAR 0 3
61925: PUSH
61926: LD_INT 25
61928: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61929: LD_VAR 0 1
61933: PPUSH
61934: CALL_OW 250
61938: PPUSH
61939: LD_VAR 0 1
61943: PPUSH
61944: CALL_OW 251
61948: PPUSH
61949: LD_VAR 0 3
61953: PPUSH
61954: CALL_OW 495
// end ;
61958: LD_VAR 0 2
61962: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61963: LD_INT 0
61965: PPUSH
61966: PPUSH
61967: PPUSH
61968: PPUSH
61969: PPUSH
61970: PPUSH
61971: PPUSH
61972: PPUSH
61973: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL_OW 302
61983: NOT
61984: IFTRUE 62003
61986: PUSH
61987: LD_VAR 0 2
61991: PPUSH
61992: LD_VAR 0 3
61996: PPUSH
61997: CALL_OW 488
62001: NOT
62002: OR
62003: IFTRUE 62012
62005: PUSH
62006: LD_VAR 0 4
62010: NOT
62011: OR
62012: IFFALSE 62016
// exit ;
62014: GO 62358
// list := [ ] ;
62016: LD_ADDR_VAR 0 13
62020: PUSH
62021: EMPTY
62022: ST_TO_ADDR
// if x - r < 0 then
62023: LD_VAR 0 2
62027: PUSH
62028: LD_VAR 0 4
62032: MINUS
62033: PUSH
62034: LD_INT 0
62036: LESS
62037: IFFALSE 62049
// min_x := 0 else
62039: LD_ADDR_VAR 0 7
62043: PUSH
62044: LD_INT 0
62046: ST_TO_ADDR
62047: GO 62065
// min_x := x - r ;
62049: LD_ADDR_VAR 0 7
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_VAR 0 4
62063: MINUS
62064: ST_TO_ADDR
// if y - r < 0 then
62065: LD_VAR 0 3
62069: PUSH
62070: LD_VAR 0 4
62074: MINUS
62075: PUSH
62076: LD_INT 0
62078: LESS
62079: IFFALSE 62091
// min_y := 0 else
62081: LD_ADDR_VAR 0 8
62085: PUSH
62086: LD_INT 0
62088: ST_TO_ADDR
62089: GO 62107
// min_y := y - r ;
62091: LD_ADDR_VAR 0 8
62095: PUSH
62096: LD_VAR 0 3
62100: PUSH
62101: LD_VAR 0 4
62105: MINUS
62106: ST_TO_ADDR
// max_x := x + r ;
62107: LD_ADDR_VAR 0 9
62111: PUSH
62112: LD_VAR 0 2
62116: PUSH
62117: LD_VAR 0 4
62121: PLUS
62122: ST_TO_ADDR
// max_y := y + r ;
62123: LD_ADDR_VAR 0 10
62127: PUSH
62128: LD_VAR 0 3
62132: PUSH
62133: LD_VAR 0 4
62137: PLUS
62138: ST_TO_ADDR
// for _x = min_x to max_x do
62139: LD_ADDR_VAR 0 11
62143: PUSH
62144: DOUBLE
62145: LD_VAR 0 7
62149: DEC
62150: ST_TO_ADDR
62151: LD_VAR 0 9
62155: PUSH
62156: FOR_TO
62157: IFFALSE 62276
// for _y = min_y to max_y do
62159: LD_ADDR_VAR 0 12
62163: PUSH
62164: DOUBLE
62165: LD_VAR 0 8
62169: DEC
62170: ST_TO_ADDR
62171: LD_VAR 0 10
62175: PUSH
62176: FOR_TO
62177: IFFALSE 62272
// begin if not ValidHex ( _x , _y ) then
62179: LD_VAR 0 11
62183: PPUSH
62184: LD_VAR 0 12
62188: PPUSH
62189: CALL_OW 488
62193: NOT
62194: IFFALSE 62198
// continue ;
62196: GO 62176
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62198: LD_VAR 0 11
62202: PPUSH
62203: LD_VAR 0 12
62207: PPUSH
62208: CALL_OW 351
62212: IFFALSE 62230
62214: PUSH
62215: LD_VAR 0 11
62219: PPUSH
62220: LD_VAR 0 12
62224: PPUSH
62225: CALL_OW 554
62229: AND
62230: IFFALSE 62270
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62232: LD_ADDR_VAR 0 13
62236: PUSH
62237: LD_VAR 0 13
62241: PPUSH
62242: LD_VAR 0 13
62246: PUSH
62247: LD_INT 1
62249: PLUS
62250: PPUSH
62251: LD_VAR 0 11
62255: PUSH
62256: LD_VAR 0 12
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PPUSH
62265: CALL_OW 2
62269: ST_TO_ADDR
// end ;
62270: GO 62176
62272: POP
62273: POP
62274: GO 62156
62276: POP
62277: POP
// if not list then
62278: LD_VAR 0 13
62282: NOT
62283: IFFALSE 62287
// exit ;
62285: GO 62358
// for i in list do
62287: LD_ADDR_VAR 0 6
62291: PUSH
62292: LD_VAR 0 13
62296: PUSH
62297: FOR_IN
62298: IFFALSE 62356
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62300: LD_VAR 0 1
62304: PPUSH
62305: LD_STRING M
62307: PUSH
62308: LD_VAR 0 6
62312: PUSH
62313: LD_INT 1
62315: ARRAY
62316: PUSH
62317: LD_VAR 0 6
62321: PUSH
62322: LD_INT 2
62324: ARRAY
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: PPUSH
62350: CALL_OW 447
62354: GO 62297
62356: POP
62357: POP
// end ;
62358: LD_VAR 0 5
62362: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
62363: LD_INT 0
62365: PPUSH
62366: PPUSH
62367: PPUSH
62368: PPUSH
62369: PPUSH
62370: PPUSH
62371: PPUSH
62372: PPUSH
62373: PPUSH
62374: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
62375: LD_VAR 0 1
62379: PPUSH
62380: CALL_OW 302
62384: NOT
62385: IFTRUE 62404
62387: PUSH
62388: LD_VAR 0 2
62392: PPUSH
62393: LD_VAR 0 3
62397: PPUSH
62398: CALL_OW 488
62402: NOT
62403: OR
62404: IFTRUE 62413
62406: PUSH
62407: LD_VAR 0 4
62411: NOT
62412: OR
62413: IFFALSE 62417
// exit ;
62415: GO 62934
// list := [ ] ;
62417: LD_ADDR_VAR 0 13
62421: PUSH
62422: EMPTY
62423: ST_TO_ADDR
// if x - r < 0 then
62424: LD_VAR 0 2
62428: PUSH
62429: LD_VAR 0 4
62433: MINUS
62434: PUSH
62435: LD_INT 0
62437: LESS
62438: IFFALSE 62450
// min_x := 0 else
62440: LD_ADDR_VAR 0 7
62444: PUSH
62445: LD_INT 0
62447: ST_TO_ADDR
62448: GO 62466
// min_x := x - r ;
62450: LD_ADDR_VAR 0 7
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_VAR 0 4
62464: MINUS
62465: ST_TO_ADDR
// if y - r < 0 then
62466: LD_VAR 0 3
62470: PUSH
62471: LD_VAR 0 4
62475: MINUS
62476: PUSH
62477: LD_INT 0
62479: LESS
62480: IFFALSE 62492
// min_y := 0 else
62482: LD_ADDR_VAR 0 8
62486: PUSH
62487: LD_INT 0
62489: ST_TO_ADDR
62490: GO 62508
// min_y := y - r ;
62492: LD_ADDR_VAR 0 8
62496: PUSH
62497: LD_VAR 0 3
62501: PUSH
62502: LD_VAR 0 4
62506: MINUS
62507: ST_TO_ADDR
// max_x := x + r ;
62508: LD_ADDR_VAR 0 9
62512: PUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_VAR 0 4
62522: PLUS
62523: ST_TO_ADDR
// max_y := y + r ;
62524: LD_ADDR_VAR 0 10
62528: PUSH
62529: LD_VAR 0 3
62533: PUSH
62534: LD_VAR 0 4
62538: PLUS
62539: ST_TO_ADDR
// for _x = min_x to max_x do
62540: LD_ADDR_VAR 0 11
62544: PUSH
62545: DOUBLE
62546: LD_VAR 0 7
62550: DEC
62551: ST_TO_ADDR
62552: LD_VAR 0 9
62556: PUSH
62557: FOR_TO
62558: IFFALSE 62677
// for _y = min_y to max_y do
62560: LD_ADDR_VAR 0 12
62564: PUSH
62565: DOUBLE
62566: LD_VAR 0 8
62570: DEC
62571: ST_TO_ADDR
62572: LD_VAR 0 10
62576: PUSH
62577: FOR_TO
62578: IFFALSE 62673
// begin if not ValidHex ( _x , _y ) then
62580: LD_VAR 0 11
62584: PPUSH
62585: LD_VAR 0 12
62589: PPUSH
62590: CALL_OW 488
62594: NOT
62595: IFFALSE 62599
// continue ;
62597: GO 62577
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62599: LD_VAR 0 11
62603: PPUSH
62604: LD_VAR 0 12
62608: PPUSH
62609: CALL_OW 351
62613: IFFALSE 62631
62615: PUSH
62616: LD_VAR 0 11
62620: PPUSH
62621: LD_VAR 0 12
62625: PPUSH
62626: CALL_OW 554
62630: AND
62631: IFFALSE 62671
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62633: LD_ADDR_VAR 0 13
62637: PUSH
62638: LD_VAR 0 13
62642: PPUSH
62643: LD_VAR 0 13
62647: PUSH
62648: LD_INT 1
62650: PLUS
62651: PPUSH
62652: LD_VAR 0 11
62656: PUSH
62657: LD_VAR 0 12
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PPUSH
62666: CALL_OW 2
62670: ST_TO_ADDR
// end ;
62671: GO 62577
62673: POP
62674: POP
62675: GO 62557
62677: POP
62678: POP
// if not list then
62679: LD_VAR 0 13
62683: NOT
62684: IFFALSE 62688
// exit ;
62686: GO 62934
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62688: LD_ADDR_VAR 0 13
62692: PUSH
62693: LD_VAR 0 1
62697: PPUSH
62698: LD_VAR 0 13
62702: PPUSH
62703: LD_INT 1
62705: PPUSH
62706: LD_INT 1
62708: PPUSH
62709: CALL 22773 0 4
62713: ST_TO_ADDR
// ComStop ( flame ) ;
62714: LD_VAR 0 1
62718: PPUSH
62719: CALL_OW 141
// for i in list do
62723: LD_ADDR_VAR 0 6
62727: PUSH
62728: LD_VAR 0 13
62732: PUSH
62733: FOR_IN
62734: IFFALSE 62765
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_VAR 0 6
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: PPUSH
62750: LD_VAR 0 6
62754: PUSH
62755: LD_INT 2
62757: ARRAY
62758: PPUSH
62759: CALL_OW 176
62763: GO 62733
62765: POP
62766: POP
// repeat wait ( 0 0$1 ) ;
62767: LD_INT 35
62769: PPUSH
62770: CALL_OW 67
// task := GetTaskList ( flame ) ;
62774: LD_ADDR_VAR 0 14
62778: PUSH
62779: LD_VAR 0 1
62783: PPUSH
62784: CALL_OW 437
62788: ST_TO_ADDR
// if not task then
62789: LD_VAR 0 14
62793: NOT
62794: IFFALSE 62798
// exit ;
62796: GO 62934
// if task [ 1 ] [ 1 ] <> | then
62798: LD_VAR 0 14
62802: PUSH
62803: LD_INT 1
62805: ARRAY
62806: PUSH
62807: LD_INT 1
62809: ARRAY
62810: PUSH
62811: LD_STRING |
62813: NONEQUAL
62814: IFFALSE 62818
// exit ;
62816: GO 62934
// _x := task [ 1 ] [ 2 ] ;
62818: LD_ADDR_VAR 0 11
62822: PUSH
62823: LD_VAR 0 14
62827: PUSH
62828: LD_INT 1
62830: ARRAY
62831: PUSH
62832: LD_INT 2
62834: ARRAY
62835: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62836: LD_ADDR_VAR 0 12
62840: PUSH
62841: LD_VAR 0 14
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PUSH
62850: LD_INT 3
62852: ARRAY
62853: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62854: LD_VAR 0 11
62858: PPUSH
62859: LD_VAR 0 12
62863: PPUSH
62864: CALL_OW 351
62868: NOT
62869: IFTRUE 62888
62871: PUSH
62872: LD_VAR 0 11
62876: PPUSH
62877: LD_VAR 0 12
62881: PPUSH
62882: CALL_OW 554
62886: NOT
62887: OR
62888: IFFALSE 62922
// begin task := Delete ( task , 1 ) ;
62890: LD_ADDR_VAR 0 14
62894: PUSH
62895: LD_VAR 0 14
62899: PPUSH
62900: LD_INT 1
62902: PPUSH
62903: CALL_OW 3
62907: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62908: LD_VAR 0 1
62912: PPUSH
62913: LD_VAR 0 14
62917: PPUSH
62918: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL_OW 314
62931: NOT
62932: IFFALSE 62767
// end ;
62934: LD_VAR 0 5
62938: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62939: LD_EXP 54
62943: NOT
62944: IFFALSE 62994
62946: GO 62948
62948: DISABLE
// begin initHack := true ;
62949: LD_ADDR_EXP 54
62953: PUSH
62954: LD_INT 1
62956: ST_TO_ADDR
// hackTanks := [ ] ;
62957: LD_ADDR_EXP 55
62961: PUSH
62962: EMPTY
62963: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62964: LD_ADDR_EXP 56
62968: PUSH
62969: EMPTY
62970: ST_TO_ADDR
// hackLimit := 3 ;
62971: LD_ADDR_EXP 57
62975: PUSH
62976: LD_INT 3
62978: ST_TO_ADDR
// hackDist := 12 ;
62979: LD_ADDR_EXP 58
62983: PUSH
62984: LD_INT 12
62986: ST_TO_ADDR
// hackCounter := [ ] ;
62987: LD_ADDR_EXP 59
62991: PUSH
62992: EMPTY
62993: ST_TO_ADDR
// end ;
62994: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62995: LD_EXP 54
62999: IFFALSE 63017
63001: PUSH
63002: LD_INT 34
63004: PUSH
63005: LD_INT 99
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PPUSH
63012: CALL_OW 69
63016: AND
63017: IFFALSE 63270
63019: GO 63021
63021: DISABLE
63022: LD_INT 0
63024: PPUSH
63025: PPUSH
// begin enable ;
63026: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63027: LD_ADDR_VAR 0 1
63031: PUSH
63032: LD_INT 34
63034: PUSH
63035: LD_INT 99
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PPUSH
63042: CALL_OW 69
63046: PUSH
63047: FOR_IN
63048: IFFALSE 63268
// begin if not i in hackTanks then
63050: LD_VAR 0 1
63054: PUSH
63055: LD_EXP 55
63059: IN
63060: NOT
63061: IFFALSE 63144
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63063: LD_ADDR_EXP 55
63067: PUSH
63068: LD_EXP 55
63072: PPUSH
63073: LD_EXP 55
63077: PUSH
63078: LD_INT 1
63080: PLUS
63081: PPUSH
63082: LD_VAR 0 1
63086: PPUSH
63087: CALL_OW 1
63091: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63092: LD_ADDR_EXP 56
63096: PUSH
63097: LD_EXP 56
63101: PPUSH
63102: LD_EXP 56
63106: PUSH
63107: LD_INT 1
63109: PLUS
63110: PPUSH
63111: EMPTY
63112: PPUSH
63113: CALL_OW 1
63117: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63118: LD_ADDR_EXP 59
63122: PUSH
63123: LD_EXP 59
63127: PPUSH
63128: LD_EXP 59
63132: PUSH
63133: LD_INT 1
63135: PLUS
63136: PPUSH
63137: EMPTY
63138: PPUSH
63139: CALL_OW 1
63143: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63144: LD_VAR 0 1
63148: PPUSH
63149: CALL_OW 302
63153: NOT
63154: IFFALSE 63167
// begin HackUnlinkAll ( i ) ;
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL 63273 0 1
// continue ;
63165: GO 63047
// end ; HackCheckCapturedStatus ( i ) ;
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL 63718 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63176: LD_ADDR_VAR 0 2
63180: PUSH
63181: LD_INT 81
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 255
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 33
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 91
63210: PUSH
63211: LD_VAR 0 1
63215: PUSH
63216: LD_EXP 58
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 50
63228: PUSH
63229: EMPTY
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: PPUSH
63238: CALL_OW 69
63242: ST_TO_ADDR
// if not tmp then
63243: LD_VAR 0 2
63247: NOT
63248: IFFALSE 63252
// continue ;
63250: GO 63047
// HackLink ( i , tmp ) ;
63252: LD_VAR 0 1
63256: PPUSH
63257: LD_VAR 0 2
63261: PPUSH
63262: CALL 63409 0 2
// end ;
63266: GO 63047
63268: POP
63269: POP
// end ;
63270: PPOPN 2
63272: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63273: LD_INT 0
63275: PPUSH
63276: PPUSH
63277: PPUSH
// if not hack in hackTanks then
63278: LD_VAR 0 1
63282: PUSH
63283: LD_EXP 55
63287: IN
63288: NOT
63289: IFFALSE 63293
// exit ;
63291: GO 63404
// index := GetElementIndex ( hackTanks , hack ) ;
63293: LD_ADDR_VAR 0 4
63297: PUSH
63298: LD_EXP 55
63302: PPUSH
63303: LD_VAR 0 1
63307: PPUSH
63308: CALL 22068 0 2
63312: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63313: LD_EXP 56
63317: PUSH
63318: LD_VAR 0 4
63322: ARRAY
63323: IFFALSE 63404
// begin for i in hackTanksCaptured [ index ] do
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_EXP 56
63334: PUSH
63335: LD_VAR 0 4
63339: ARRAY
63340: PUSH
63341: FOR_IN
63342: IFFALSE 63368
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63344: LD_VAR 0 3
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PPUSH
63353: LD_VAR 0 3
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PPUSH
63362: CALL_OW 235
63366: GO 63341
63368: POP
63369: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63370: LD_ADDR_EXP 56
63374: PUSH
63375: LD_EXP 56
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: EMPTY
63386: PPUSH
63387: CALL_OW 1
63391: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63392: LD_VAR 0 1
63396: PPUSH
63397: LD_INT 0
63399: PPUSH
63400: CALL_OW 505
// end ; end ;
63404: LD_VAR 0 2
63408: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63409: LD_INT 0
63411: PPUSH
63412: PPUSH
63413: PPUSH
// if not hack in hackTanks or not vehicles then
63414: LD_VAR 0 1
63418: PUSH
63419: LD_EXP 55
63423: IN
63424: NOT
63425: IFTRUE 63434
63427: PUSH
63428: LD_VAR 0 2
63432: NOT
63433: OR
63434: IFFALSE 63438
// exit ;
63436: GO 63713
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63438: LD_ADDR_VAR 0 2
63442: PUSH
63443: LD_VAR 0 1
63447: PPUSH
63448: LD_VAR 0 2
63452: PPUSH
63453: LD_INT 1
63455: PPUSH
63456: LD_INT 1
63458: PPUSH
63459: CALL 22720 0 4
63463: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63464: LD_ADDR_VAR 0 5
63468: PUSH
63469: LD_EXP 55
63473: PPUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: CALL 22068 0 2
63483: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63484: LD_EXP 56
63488: PUSH
63489: LD_VAR 0 5
63493: ARRAY
63494: PUSH
63495: LD_EXP 57
63499: LESS
63500: IFFALSE 63689
// begin for i := 1 to vehicles do
63502: LD_ADDR_VAR 0 4
63506: PUSH
63507: DOUBLE
63508: LD_INT 1
63510: DEC
63511: ST_TO_ADDR
63512: LD_VAR 0 2
63516: PUSH
63517: FOR_TO
63518: IFFALSE 63687
// begin if hackTanksCaptured [ index ] = hackLimit then
63520: LD_EXP 56
63524: PUSH
63525: LD_VAR 0 5
63529: ARRAY
63530: PUSH
63531: LD_EXP 57
63535: EQUAL
63536: IFFALSE 63540
// break ;
63538: GO 63687
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63540: LD_ADDR_EXP 59
63544: PUSH
63545: LD_EXP 59
63549: PPUSH
63550: LD_VAR 0 5
63554: PPUSH
63555: LD_EXP 59
63559: PUSH
63560: LD_VAR 0 5
63564: ARRAY
63565: PUSH
63566: LD_INT 1
63568: PLUS
63569: PPUSH
63570: CALL_OW 1
63574: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63575: LD_ADDR_EXP 56
63579: PUSH
63580: LD_EXP 56
63584: PPUSH
63585: LD_VAR 0 5
63589: PUSH
63590: LD_EXP 56
63594: PUSH
63595: LD_VAR 0 5
63599: ARRAY
63600: PUSH
63601: LD_INT 1
63603: PLUS
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PPUSH
63609: LD_VAR 0 2
63613: PUSH
63614: LD_VAR 0 4
63618: ARRAY
63619: PUSH
63620: LD_VAR 0 2
63624: PUSH
63625: LD_VAR 0 4
63629: ARRAY
63630: PPUSH
63631: CALL_OW 255
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PPUSH
63640: CALL 22285 0 3
63644: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63645: LD_VAR 0 2
63649: PUSH
63650: LD_VAR 0 4
63654: ARRAY
63655: PPUSH
63656: LD_VAR 0 1
63660: PPUSH
63661: CALL_OW 255
63665: PPUSH
63666: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63670: LD_VAR 0 2
63674: PUSH
63675: LD_VAR 0 4
63679: ARRAY
63680: PPUSH
63681: CALL_OW 141
// end ;
63685: GO 63517
63687: POP
63688: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63689: LD_VAR 0 1
63693: PPUSH
63694: LD_EXP 56
63698: PUSH
63699: LD_VAR 0 5
63703: ARRAY
63704: PUSH
63705: LD_INT 0
63707: PLUS
63708: PPUSH
63709: CALL_OW 505
// end ;
63713: LD_VAR 0 3
63717: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63718: LD_INT 0
63720: PPUSH
63721: PPUSH
63722: PPUSH
63723: PPUSH
// if not hack in hackTanks then
63724: LD_VAR 0 1
63728: PUSH
63729: LD_EXP 55
63733: IN
63734: NOT
63735: IFFALSE 63739
// exit ;
63737: GO 63983
// index := GetElementIndex ( hackTanks , hack ) ;
63739: LD_ADDR_VAR 0 4
63743: PUSH
63744: LD_EXP 55
63748: PPUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: CALL 22068 0 2
63758: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63759: LD_ADDR_VAR 0 3
63763: PUSH
63764: DOUBLE
63765: LD_EXP 56
63769: PUSH
63770: LD_VAR 0 4
63774: ARRAY
63775: INC
63776: ST_TO_ADDR
63777: LD_INT 1
63779: PUSH
63780: FOR_DOWNTO
63781: IFFALSE 63957
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63783: LD_ADDR_VAR 0 5
63787: PUSH
63788: LD_EXP 56
63792: PUSH
63793: LD_VAR 0 4
63797: ARRAY
63798: PUSH
63799: LD_VAR 0 3
63803: ARRAY
63804: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63805: LD_VAR 0 5
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: PPUSH
63814: CALL_OW 302
63818: NOT
63819: IFTRUE 63847
63821: PUSH
63822: LD_VAR 0 5
63826: PUSH
63827: LD_INT 1
63829: ARRAY
63830: PPUSH
63831: CALL_OW 255
63835: PUSH
63836: LD_VAR 0 1
63840: PPUSH
63841: CALL_OW 255
63845: NONEQUAL
63846: OR
63847: IFFALSE 63955
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63849: LD_VAR 0 5
63853: PUSH
63854: LD_INT 1
63856: ARRAY
63857: PPUSH
63858: CALL_OW 305
63862: IFFALSE 63890
63864: PUSH
63865: LD_VAR 0 5
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PPUSH
63874: CALL_OW 255
63878: PUSH
63879: LD_VAR 0 1
63883: PPUSH
63884: CALL_OW 255
63888: EQUAL
63889: AND
63890: IFFALSE 63914
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63892: LD_VAR 0 5
63896: PUSH
63897: LD_INT 1
63899: ARRAY
63900: PPUSH
63901: LD_VAR 0 5
63905: PUSH
63906: LD_INT 2
63908: ARRAY
63909: PPUSH
63910: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63914: LD_ADDR_EXP 56
63918: PUSH
63919: LD_EXP 56
63923: PPUSH
63924: LD_VAR 0 4
63928: PPUSH
63929: LD_EXP 56
63933: PUSH
63934: LD_VAR 0 4
63938: ARRAY
63939: PPUSH
63940: LD_VAR 0 3
63944: PPUSH
63945: CALL_OW 3
63949: PPUSH
63950: CALL_OW 1
63954: ST_TO_ADDR
// end ; end ;
63955: GO 63780
63957: POP
63958: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_EXP 56
63968: PUSH
63969: LD_VAR 0 4
63973: ARRAY
63974: PUSH
63975: LD_INT 0
63977: PLUS
63978: PPUSH
63979: CALL_OW 505
// end ;
63983: LD_VAR 0 2
63987: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63988: LD_INT 0
63990: PPUSH
63991: PPUSH
63992: PPUSH
63993: PPUSH
// if not hack in hackTanks then
63994: LD_VAR 0 1
63998: PUSH
63999: LD_EXP 55
64003: IN
64004: NOT
64005: IFFALSE 64009
// exit ;
64007: GO 64094
// index := GetElementIndex ( hackTanks , hack ) ;
64009: LD_ADDR_VAR 0 5
64013: PUSH
64014: LD_EXP 55
64018: PPUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: CALL 22068 0 2
64028: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64029: LD_ADDR_VAR 0 4
64033: PUSH
64034: DOUBLE
64035: LD_INT 1
64037: DEC
64038: ST_TO_ADDR
64039: LD_EXP 56
64043: PUSH
64044: LD_VAR 0 5
64048: ARRAY
64049: PUSH
64050: FOR_TO
64051: IFFALSE 64092
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64053: LD_EXP 56
64057: PUSH
64058: LD_VAR 0 5
64062: ARRAY
64063: PUSH
64064: LD_VAR 0 4
64068: ARRAY
64069: PUSH
64070: LD_INT 1
64072: ARRAY
64073: PUSH
64074: LD_VAR 0 2
64078: EQUAL
64079: IFFALSE 64090
// KillUnit ( vehicle ) ;
64081: LD_VAR 0 2
64085: PPUSH
64086: CALL_OW 66
64090: GO 64050
64092: POP
64093: POP
// end ;
64094: LD_VAR 0 3
64098: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
64099: LD_EXP 60
64103: NOT
64104: IFFALSE 64237
64106: GO 64108
64108: DISABLE
64109: LD_INT 0
64111: PPUSH
// begin initMiner := true ;
64112: LD_ADDR_EXP 60
64116: PUSH
64117: LD_INT 1
64119: ST_TO_ADDR
// minersList := [ ] ;
64120: LD_ADDR_EXP 61
64124: PUSH
64125: EMPTY
64126: ST_TO_ADDR
// minerMinesList := [ ] ;
64127: LD_ADDR_EXP 62
64131: PUSH
64132: EMPTY
64133: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
64134: LD_ADDR_EXP 63
64138: PUSH
64139: LD_INT 6
64141: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64142: LD_ADDR_VAR 0 1
64146: PUSH
64147: LD_INT 34
64149: PUSH
64150: LD_INT 81
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PPUSH
64157: CALL_OW 69
64161: PUSH
64162: FOR_IN
64163: IFFALSE 64235
// begin if not i in minersList then
64165: LD_VAR 0 1
64169: PUSH
64170: LD_EXP 61
64174: IN
64175: NOT
64176: IFFALSE 64233
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64178: LD_ADDR_EXP 61
64182: PUSH
64183: LD_EXP 61
64187: PPUSH
64188: LD_EXP 61
64192: PUSH
64193: LD_INT 1
64195: PLUS
64196: PPUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 1
64206: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64207: LD_ADDR_EXP 62
64211: PUSH
64212: LD_EXP 62
64216: PPUSH
64217: LD_EXP 62
64221: PUSH
64222: LD_INT 1
64224: PLUS
64225: PPUSH
64226: EMPTY
64227: PPUSH
64228: CALL_OW 1
64232: ST_TO_ADDR
// end end ;
64233: GO 64162
64235: POP
64236: POP
// end ;
64237: PPOPN 1
64239: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
64240: LD_EXP 60
64244: IFFALSE 64275
64246: PUSH
64247: LD_EXP 62
64251: PPUSH
64252: CALL 19367 0 1
64256: IFTRUE 64274
64258: PUSH
64259: LD_INT 34
64261: PUSH
64262: LD_INT 81
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PPUSH
64269: CALL_OW 69
64273: OR
64274: AND
64275: IFFALSE 64774
64277: GO 64279
64279: DISABLE
64280: LD_INT 0
64282: PPUSH
64283: PPUSH
64284: PPUSH
64285: PPUSH
// begin enable ;
64286: ENABLE
// for i := minerMinesList downto 1 do
64287: LD_ADDR_VAR 0 1
64291: PUSH
64292: DOUBLE
64293: LD_EXP 62
64297: INC
64298: ST_TO_ADDR
64299: LD_INT 1
64301: PUSH
64302: FOR_DOWNTO
64303: IFFALSE 64772
// begin if IsLive ( minersList [ i ] ) then
64305: LD_EXP 61
64309: PUSH
64310: LD_VAR 0 1
64314: ARRAY
64315: PPUSH
64316: CALL_OW 300
64320: IFFALSE 64353
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
64322: LD_EXP 61
64326: PUSH
64327: LD_VAR 0 1
64331: ARRAY
64332: PPUSH
64333: LD_EXP 62
64337: PUSH
64338: LD_VAR 0 1
64342: ARRAY
64343: PPUSH
64344: CALL 19367 0 1
64348: PPUSH
64349: CALL_OW 505
// if not minerMinesList [ i ] then
64353: LD_EXP 62
64357: PUSH
64358: LD_VAR 0 1
64362: ARRAY
64363: NOT
64364: IFFALSE 64368
// continue ;
64366: GO 64302
// for j := minerMinesList [ i ] downto 1 do
64368: LD_ADDR_VAR 0 2
64372: PUSH
64373: DOUBLE
64374: LD_EXP 62
64378: PUSH
64379: LD_VAR 0 1
64383: ARRAY
64384: INC
64385: ST_TO_ADDR
64386: LD_INT 1
64388: PUSH
64389: FOR_DOWNTO
64390: IFFALSE 64768
// begin side := GetSide ( minersList [ i ] ) ;
64392: LD_ADDR_VAR 0 3
64396: PUSH
64397: LD_EXP 61
64401: PUSH
64402: LD_VAR 0 1
64406: ARRAY
64407: PPUSH
64408: CALL_OW 255
64412: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
64413: LD_EXP 61
64417: PUSH
64418: LD_VAR 0 1
64422: ARRAY
64423: PPUSH
64424: CALL_OW 301
64428: IFTRUE 64448
64430: PUSH
64431: LD_EXP 61
64435: PUSH
64436: LD_VAR 0 1
64440: ARRAY
64441: PPUSH
64442: CALL_OW 305
64446: NOT
64447: OR
64448: IFFALSE 64539
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64450: LD_EXP 62
64454: PUSH
64455: LD_VAR 0 1
64459: ARRAY
64460: PUSH
64461: LD_VAR 0 2
64465: ARRAY
64466: PUSH
64467: LD_INT 1
64469: ARRAY
64470: PPUSH
64471: LD_EXP 62
64475: PUSH
64476: LD_VAR 0 1
64480: ARRAY
64481: PUSH
64482: LD_VAR 0 2
64486: ARRAY
64487: PUSH
64488: LD_INT 2
64490: ARRAY
64491: PPUSH
64492: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64496: LD_ADDR_EXP 62
64500: PUSH
64501: LD_EXP 62
64505: PPUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: LD_EXP 62
64515: PUSH
64516: LD_VAR 0 1
64520: ARRAY
64521: PPUSH
64522: LD_VAR 0 2
64526: PPUSH
64527: CALL_OW 3
64531: PPUSH
64532: CALL_OW 1
64536: ST_TO_ADDR
// continue ;
64537: GO 64389
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64539: LD_ADDR_VAR 0 4
64543: PUSH
64544: LD_EXP 62
64548: PUSH
64549: LD_VAR 0 1
64553: ARRAY
64554: PUSH
64555: LD_VAR 0 2
64559: ARRAY
64560: PUSH
64561: LD_INT 1
64563: ARRAY
64564: PPUSH
64565: LD_EXP 62
64569: PUSH
64570: LD_VAR 0 1
64574: ARRAY
64575: PUSH
64576: LD_VAR 0 2
64580: ARRAY
64581: PUSH
64582: LD_INT 2
64584: ARRAY
64585: PPUSH
64586: CALL_OW 428
64590: ST_TO_ADDR
// if not tmp then
64591: LD_VAR 0 4
64595: NOT
64596: IFFALSE 64600
// continue ;
64598: GO 64389
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64600: LD_VAR 0 4
64604: PUSH
64605: LD_INT 81
64607: PUSH
64608: LD_VAR 0 3
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PPUSH
64617: CALL_OW 69
64621: IN
64622: IFFALSE 64672
64624: PUSH
64625: LD_EXP 62
64629: PUSH
64630: LD_VAR 0 1
64634: ARRAY
64635: PUSH
64636: LD_VAR 0 2
64640: ARRAY
64641: PUSH
64642: LD_INT 1
64644: ARRAY
64645: PPUSH
64646: LD_EXP 62
64650: PUSH
64651: LD_VAR 0 1
64655: ARRAY
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: PPUSH
64667: CALL_OW 458
64671: AND
64672: IFFALSE 64766
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64674: LD_EXP 62
64678: PUSH
64679: LD_VAR 0 1
64683: ARRAY
64684: PUSH
64685: LD_VAR 0 2
64689: ARRAY
64690: PUSH
64691: LD_INT 1
64693: ARRAY
64694: PPUSH
64695: LD_EXP 62
64699: PUSH
64700: LD_VAR 0 1
64704: ARRAY
64705: PUSH
64706: LD_VAR 0 2
64710: ARRAY
64711: PUSH
64712: LD_INT 2
64714: ARRAY
64715: PPUSH
64716: LD_VAR 0 3
64720: PPUSH
64721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64725: LD_ADDR_EXP 62
64729: PUSH
64730: LD_EXP 62
64734: PPUSH
64735: LD_VAR 0 1
64739: PPUSH
64740: LD_EXP 62
64744: PUSH
64745: LD_VAR 0 1
64749: ARRAY
64750: PPUSH
64751: LD_VAR 0 2
64755: PPUSH
64756: CALL_OW 3
64760: PPUSH
64761: CALL_OW 1
64765: ST_TO_ADDR
// end ; end ;
64766: GO 64389
64768: POP
64769: POP
// end ;
64770: GO 64302
64772: POP
64773: POP
// end ;
64774: PPOPN 4
64776: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
64777: LD_INT 0
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
// result := false ;
64783: LD_ADDR_VAR 0 4
64787: PUSH
64788: LD_INT 0
64790: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64791: LD_VAR 0 1
64795: PPUSH
64796: CALL_OW 264
64800: PUSH
64801: LD_INT 81
64803: EQUAL
64804: NOT
64805: IFFALSE 64809
// exit ;
64807: GO 65179
// side := GetSide ( unit ) ;
64809: LD_ADDR_VAR 0 6
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 255
64823: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
64824: LD_ADDR_VAR 0 5
64828: PUSH
64829: LD_EXP 61
64833: PPUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL 22068 0 2
64843: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64844: LD_EXP 62
64848: PUSH
64849: LD_VAR 0 5
64853: ARRAY
64854: PUSH
64855: LD_EXP 63
64859: GREATEREQUAL
64860: IFFALSE 64864
// exit ;
64862: GO 65179
// ComMoveXY ( unit , x , y ) ;
64864: LD_VAR 0 1
64868: PPUSH
64869: LD_VAR 0 2
64873: PPUSH
64874: LD_VAR 0 3
64878: PPUSH
64879: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64883: LD_INT 35
64885: PPUSH
64886: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64890: LD_VAR 0 1
64894: PPUSH
64895: LD_VAR 0 2
64899: PPUSH
64900: LD_VAR 0 3
64904: PPUSH
64905: CALL 54124 0 3
64909: NOT
64910: IFFALSE 64923
64912: PUSH
64913: LD_VAR 0 1
64917: PPUSH
64918: CALL_OW 314
64922: AND
64923: IFFALSE 64927
// exit ;
64925: GO 65179
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64927: LD_VAR 0 2
64931: PPUSH
64932: LD_VAR 0 3
64936: PPUSH
64937: CALL_OW 428
64941: PUSH
64942: LD_VAR 0 1
64946: EQUAL
64947: IFFALSE 64961
64949: PUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 314
64959: NOT
64960: AND
64961: IFFALSE 64883
// if MineAtPos ( x , y ) then
64963: LD_VAR 0 2
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: CALL_OW 458
64977: IFFALSE 64981
// exit ;
64979: GO 65179
// if your_side = side then
64981: LD_OWVAR 2
64985: PUSH
64986: LD_VAR 0 6
64990: EQUAL
64991: IFFALSE 65010
// PlaySoundXY ( x , y , PlantMine ) ;
64993: LD_VAR 0 2
64997: PPUSH
64998: LD_VAR 0 3
65002: PPUSH
65003: LD_STRING PlantMine
65005: PPUSH
65006: CALL_OW 366
// repeat wait ( 1 ) ;
65010: LD_INT 1
65012: PPUSH
65013: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_VAR 0 3
65026: PPUSH
65027: LD_VAR 0 6
65031: PPUSH
65032: LD_INT 0
65034: PPUSH
65035: CALL_OW 454
65039: IFFALSE 65010
// if MineAtPos ( x , y ) then
65041: LD_VAR 0 2
65045: PPUSH
65046: LD_VAR 0 3
65050: PPUSH
65051: CALL_OW 458
65055: IFFALSE 65171
// begin for i in minerMinesList [ index ] do
65057: LD_ADDR_VAR 0 7
65061: PUSH
65062: LD_EXP 62
65066: PUSH
65067: LD_VAR 0 5
65071: ARRAY
65072: PUSH
65073: FOR_IN
65074: IFFALSE 65116
// if i [ 1 ] = x and i [ 2 ] = y then
65076: LD_VAR 0 7
65080: PUSH
65081: LD_INT 1
65083: ARRAY
65084: PUSH
65085: LD_VAR 0 2
65089: EQUAL
65090: IFFALSE 65108
65092: PUSH
65093: LD_VAR 0 7
65097: PUSH
65098: LD_INT 2
65100: ARRAY
65101: PUSH
65102: LD_VAR 0 3
65106: EQUAL
65107: AND
65108: IFFALSE 65114
// exit ;
65110: POP
65111: POP
65112: GO 65179
65114: GO 65073
65116: POP
65117: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65118: LD_ADDR_EXP 62
65122: PUSH
65123: LD_EXP 62
65127: PPUSH
65128: LD_VAR 0 5
65132: PUSH
65133: LD_EXP 62
65137: PUSH
65138: LD_VAR 0 5
65142: ARRAY
65143: PUSH
65144: LD_INT 1
65146: PLUS
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PPUSH
65152: LD_VAR 0 2
65156: PUSH
65157: LD_VAR 0 3
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PPUSH
65166: CALL 22285 0 3
65170: ST_TO_ADDR
// end ; result := true ;
65171: LD_ADDR_VAR 0 4
65175: PUSH
65176: LD_INT 1
65178: ST_TO_ADDR
// end ;
65179: LD_VAR 0 4
65183: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65184: LD_INT 0
65186: PPUSH
65187: PPUSH
65188: PPUSH
// if not unit in minersList then
65189: LD_VAR 0 1
65193: PUSH
65194: LD_EXP 61
65198: IN
65199: NOT
65200: IFFALSE 65204
// exit ;
65202: GO 65411
// index := GetElementIndex ( minersList , unit ) ;
65204: LD_ADDR_VAR 0 6
65208: PUSH
65209: LD_EXP 61
65213: PPUSH
65214: LD_VAR 0 1
65218: PPUSH
65219: CALL 22068 0 2
65223: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65224: LD_ADDR_VAR 0 5
65228: PUSH
65229: DOUBLE
65230: LD_EXP 62
65234: PUSH
65235: LD_VAR 0 6
65239: ARRAY
65240: INC
65241: ST_TO_ADDR
65242: LD_INT 1
65244: PUSH
65245: FOR_DOWNTO
65246: IFFALSE 65409
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65248: LD_EXP 62
65252: PUSH
65253: LD_VAR 0 6
65257: ARRAY
65258: PUSH
65259: LD_VAR 0 5
65263: ARRAY
65264: PUSH
65265: LD_INT 1
65267: ARRAY
65268: PPUSH
65269: LD_EXP 62
65273: PUSH
65274: LD_VAR 0 6
65278: ARRAY
65279: PUSH
65280: LD_VAR 0 5
65284: ARRAY
65285: PUSH
65286: LD_INT 2
65288: ARRAY
65289: PPUSH
65290: LD_VAR 0 2
65294: PPUSH
65295: LD_VAR 0 3
65299: PPUSH
65300: CALL_OW 298
65304: PUSH
65305: LD_INT 6
65307: LESS
65308: IFFALSE 65407
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65310: LD_EXP 62
65314: PUSH
65315: LD_VAR 0 6
65319: ARRAY
65320: PUSH
65321: LD_VAR 0 5
65325: ARRAY
65326: PUSH
65327: LD_INT 1
65329: ARRAY
65330: PPUSH
65331: LD_EXP 62
65335: PUSH
65336: LD_VAR 0 6
65340: ARRAY
65341: PUSH
65342: LD_VAR 0 5
65346: ARRAY
65347: PUSH
65348: LD_INT 2
65350: ARRAY
65351: PPUSH
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 255
65361: PPUSH
65362: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65366: LD_ADDR_EXP 62
65370: PUSH
65371: LD_EXP 62
65375: PPUSH
65376: LD_VAR 0 6
65380: PPUSH
65381: LD_EXP 62
65385: PUSH
65386: LD_VAR 0 6
65390: ARRAY
65391: PPUSH
65392: LD_VAR 0 5
65396: PPUSH
65397: CALL_OW 3
65401: PPUSH
65402: CALL_OW 1
65406: ST_TO_ADDR
// end ; end ;
65407: GO 65245
65409: POP
65410: POP
// end ;
65411: LD_VAR 0 4
65415: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65416: LD_INT 0
65418: PPUSH
65419: PPUSH
65420: PPUSH
65421: PPUSH
65422: PPUSH
65423: PPUSH
65424: PPUSH
65425: PPUSH
65426: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65427: LD_VAR 0 1
65431: PPUSH
65432: CALL_OW 264
65436: PUSH
65437: LD_INT 81
65439: EQUAL
65440: NOT
65441: IFTRUE 65456
65443: PUSH
65444: LD_VAR 0 1
65448: PUSH
65449: LD_EXP 61
65453: IN
65454: NOT
65455: OR
65456: IFFALSE 65460
// exit ;
65458: GO 65786
// index := GetElementIndex ( minersList , unit ) ;
65460: LD_ADDR_VAR 0 6
65464: PUSH
65465: LD_EXP 61
65469: PPUSH
65470: LD_VAR 0 1
65474: PPUSH
65475: CALL 22068 0 2
65479: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65480: LD_ADDR_VAR 0 8
65484: PUSH
65485: LD_EXP 63
65489: PUSH
65490: LD_EXP 62
65494: PUSH
65495: LD_VAR 0 6
65499: ARRAY
65500: MINUS
65501: ST_TO_ADDR
// if not minesFreeAmount then
65502: LD_VAR 0 8
65506: NOT
65507: IFFALSE 65511
// exit ;
65509: GO 65786
// tmp := [ ] ;
65511: LD_ADDR_VAR 0 7
65515: PUSH
65516: EMPTY
65517: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65518: LD_ADDR_VAR 0 5
65522: PUSH
65523: DOUBLE
65524: LD_INT 1
65526: DEC
65527: ST_TO_ADDR
65528: LD_VAR 0 8
65532: PUSH
65533: FOR_TO
65534: IFFALSE 65733
// begin _d := rand ( 0 , 5 ) ;
65536: LD_ADDR_VAR 0 11
65540: PUSH
65541: LD_INT 0
65543: PPUSH
65544: LD_INT 5
65546: PPUSH
65547: CALL_OW 12
65551: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65552: LD_ADDR_VAR 0 12
65556: PUSH
65557: LD_INT 2
65559: PPUSH
65560: LD_INT 6
65562: PPUSH
65563: CALL_OW 12
65567: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65568: LD_ADDR_VAR 0 9
65572: PUSH
65573: LD_VAR 0 2
65577: PPUSH
65578: LD_VAR 0 11
65582: PPUSH
65583: LD_VAR 0 12
65587: PPUSH
65588: CALL_OW 272
65592: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65593: LD_ADDR_VAR 0 10
65597: PUSH
65598: LD_VAR 0 3
65602: PPUSH
65603: LD_VAR 0 11
65607: PPUSH
65608: LD_VAR 0 12
65612: PPUSH
65613: CALL_OW 273
65617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65618: LD_VAR 0 9
65622: PPUSH
65623: LD_VAR 0 10
65627: PPUSH
65628: CALL_OW 488
65632: IFFALSE 65656
65634: PUSH
65635: LD_VAR 0 9
65639: PUSH
65640: LD_VAR 0 10
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_VAR 0 7
65653: IN
65654: NOT
65655: AND
65656: IFFALSE 65675
65658: PUSH
65659: LD_VAR 0 9
65663: PPUSH
65664: LD_VAR 0 10
65668: PPUSH
65669: CALL_OW 458
65673: NOT
65674: AND
65675: IFFALSE 65717
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65677: LD_ADDR_VAR 0 7
65681: PUSH
65682: LD_VAR 0 7
65686: PPUSH
65687: LD_VAR 0 7
65691: PUSH
65692: LD_INT 1
65694: PLUS
65695: PPUSH
65696: LD_VAR 0 9
65700: PUSH
65701: LD_VAR 0 10
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PPUSH
65710: CALL_OW 1
65714: ST_TO_ADDR
65715: GO 65731
// i := i - 1 ;
65717: LD_ADDR_VAR 0 5
65721: PUSH
65722: LD_VAR 0 5
65726: PUSH
65727: LD_INT 1
65729: MINUS
65730: ST_TO_ADDR
// end ;
65731: GO 65533
65733: POP
65734: POP
// for i in tmp do
65735: LD_ADDR_VAR 0 5
65739: PUSH
65740: LD_VAR 0 7
65744: PUSH
65745: FOR_IN
65746: IFFALSE 65784
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65748: LD_VAR 0 1
65752: PPUSH
65753: LD_VAR 0 5
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PPUSH
65762: LD_VAR 0 5
65766: PUSH
65767: LD_INT 2
65769: ARRAY
65770: PPUSH
65771: CALL 64777 0 3
65775: NOT
65776: IFFALSE 65782
// exit ;
65778: POP
65779: POP
65780: GO 65786
65782: GO 65745
65784: POP
65785: POP
// end ;
65786: LD_VAR 0 4
65790: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65791: LD_INT 0
65793: PPUSH
65794: PPUSH
65795: PPUSH
65796: PPUSH
65797: PPUSH
65798: PPUSH
65799: PPUSH
65800: PPUSH
65801: PPUSH
// if GetClass ( unit ) <> class_sniper then
65802: LD_VAR 0 1
65806: PPUSH
65807: CALL_OW 257
65811: PUSH
65812: LD_INT 5
65814: NONEQUAL
65815: IFFALSE 65819
// exit ;
65817: GO 66289
// dist := 8 ;
65819: LD_ADDR_VAR 0 5
65823: PUSH
65824: LD_INT 8
65826: ST_TO_ADDR
// viewRange := 12 ;
65827: LD_ADDR_VAR 0 8
65831: PUSH
65832: LD_INT 12
65834: ST_TO_ADDR
// side := GetSide ( unit ) ;
65835: LD_ADDR_VAR 0 6
65839: PUSH
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 255
65849: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65850: LD_INT 61
65852: PPUSH
65853: LD_VAR 0 6
65857: PPUSH
65858: CALL_OW 321
65862: PUSH
65863: LD_INT 2
65865: EQUAL
65866: IFFALSE 65876
// viewRange := 16 ;
65868: LD_ADDR_VAR 0 8
65872: PUSH
65873: LD_INT 16
65875: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65876: LD_VAR 0 1
65880: PPUSH
65881: LD_VAR 0 2
65885: PPUSH
65886: LD_VAR 0 3
65890: PPUSH
65891: CALL_OW 297
65895: PUSH
65896: LD_VAR 0 5
65900: GREATER
65901: IFFALSE 65980
// begin ComMoveXY ( unit , x , y ) ;
65903: LD_VAR 0 1
65907: PPUSH
65908: LD_VAR 0 2
65912: PPUSH
65913: LD_VAR 0 3
65917: PPUSH
65918: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65922: LD_INT 35
65924: PPUSH
65925: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65929: LD_VAR 0 1
65933: PPUSH
65934: LD_VAR 0 2
65938: PPUSH
65939: LD_VAR 0 3
65943: PPUSH
65944: CALL 54124 0 3
65948: NOT
65949: IFFALSE 65953
// exit ;
65951: GO 66289
// until GetDistUnitXY ( unit , x , y ) < dist ;
65953: LD_VAR 0 1
65957: PPUSH
65958: LD_VAR 0 2
65962: PPUSH
65963: LD_VAR 0 3
65967: PPUSH
65968: CALL_OW 297
65972: PUSH
65973: LD_VAR 0 5
65977: LESS
65978: IFFALSE 65922
// end ; ComTurnXY ( unit , x , y ) ;
65980: LD_VAR 0 1
65984: PPUSH
65985: LD_VAR 0 2
65989: PPUSH
65990: LD_VAR 0 3
65994: PPUSH
65995: CALL_OW 118
// repeat if Multiplayer then
65999: LD_OWVAR 4
66003: IFFALSE 66014
// wait ( 35 ) else
66005: LD_INT 35
66007: PPUSH
66008: CALL_OW 67
66012: GO 66021
// wait ( 5 ) ;
66014: LD_INT 5
66016: PPUSH
66017: CALL_OW 67
// _d := GetDir ( unit ) ;
66021: LD_ADDR_VAR 0 11
66025: PUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: CALL_OW 254
66035: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
66036: LD_ADDR_VAR 0 7
66040: PUSH
66041: LD_VAR 0 1
66045: PPUSH
66046: CALL_OW 250
66050: PPUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: CALL_OW 251
66060: PPUSH
66061: LD_VAR 0 2
66065: PPUSH
66066: LD_VAR 0 3
66070: PPUSH
66071: CALL 56760 0 4
66075: ST_TO_ADDR
// until dir = _d ;
66076: LD_VAR 0 7
66080: PUSH
66081: LD_VAR 0 11
66085: EQUAL
66086: IFFALSE 65999
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
66088: LD_ADDR_VAR 0 9
66092: PUSH
66093: LD_VAR 0 1
66097: PPUSH
66098: CALL_OW 250
66102: PPUSH
66103: LD_VAR 0 7
66107: PPUSH
66108: LD_VAR 0 5
66112: PPUSH
66113: CALL_OW 272
66117: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
66118: LD_ADDR_VAR 0 10
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 251
66132: PPUSH
66133: LD_VAR 0 7
66137: PPUSH
66138: LD_VAR 0 5
66142: PPUSH
66143: CALL_OW 273
66147: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66148: LD_VAR 0 9
66152: PPUSH
66153: LD_VAR 0 10
66157: PPUSH
66158: CALL_OW 488
66162: NOT
66163: IFFALSE 66167
// exit ;
66165: GO 66289
// ComAnimCustom ( unit , 1 ) ;
66167: LD_VAR 0 1
66171: PPUSH
66172: LD_INT 1
66174: PPUSH
66175: CALL_OW 592
// p := 0 ;
66179: LD_ADDR_VAR 0 12
66183: PUSH
66184: LD_INT 0
66186: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66187: LD_VAR 0 9
66191: PPUSH
66192: LD_VAR 0 10
66196: PPUSH
66197: LD_VAR 0 6
66201: PPUSH
66202: LD_VAR 0 8
66206: PPUSH
66207: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
66211: LD_INT 35
66213: PPUSH
66214: CALL_OW 67
// p := Inc ( p ) ;
66218: LD_ADDR_VAR 0 12
66222: PUSH
66223: LD_VAR 0 12
66227: PPUSH
66228: CALL 56716 0 1
66232: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
66233: LD_VAR 0 12
66237: PUSH
66238: LD_INT 3
66240: EQUAL
66241: IFTRUE 66255
66243: PUSH
66244: LD_VAR 0 1
66248: PPUSH
66249: CALL_OW 302
66253: NOT
66254: OR
66255: IFTRUE 66268
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 301
66267: OR
66268: IFFALSE 66211
// RemoveSeeing ( _x , _y , side ) ;
66270: LD_VAR 0 9
66274: PPUSH
66275: LD_VAR 0 10
66279: PPUSH
66280: LD_VAR 0 6
66284: PPUSH
66285: CALL_OW 331
// end ;
66289: LD_VAR 0 4
66293: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
66304: PPUSH
66305: PPUSH
66306: PPUSH
// if not unit then
66307: LD_VAR 0 1
66311: NOT
66312: IFFALSE 66316
// exit ;
66314: GO 66587
// side := GetSide ( unit ) ;
66316: LD_ADDR_VAR 0 3
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 255
66330: ST_TO_ADDR
// x := GetX ( unit ) ;
66331: LD_ADDR_VAR 0 5
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL_OW 250
66345: ST_TO_ADDR
// y := GetY ( unit ) ;
66346: LD_ADDR_VAR 0 6
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: CALL_OW 251
66360: ST_TO_ADDR
// r := 8 ;
66361: LD_ADDR_VAR 0 4
66365: PUSH
66366: LD_INT 8
66368: ST_TO_ADDR
// if x - r < 0 then
66369: LD_VAR 0 5
66373: PUSH
66374: LD_VAR 0 4
66378: MINUS
66379: PUSH
66380: LD_INT 0
66382: LESS
66383: IFFALSE 66395
// min_x := 0 else
66385: LD_ADDR_VAR 0 7
66389: PUSH
66390: LD_INT 0
66392: ST_TO_ADDR
66393: GO 66411
// min_x := x - r ;
66395: LD_ADDR_VAR 0 7
66399: PUSH
66400: LD_VAR 0 5
66404: PUSH
66405: LD_VAR 0 4
66409: MINUS
66410: ST_TO_ADDR
// if y - r < 0 then
66411: LD_VAR 0 6
66415: PUSH
66416: LD_VAR 0 4
66420: MINUS
66421: PUSH
66422: LD_INT 0
66424: LESS
66425: IFFALSE 66437
// min_y := 0 else
66427: LD_ADDR_VAR 0 8
66431: PUSH
66432: LD_INT 0
66434: ST_TO_ADDR
66435: GO 66453
// min_y := y - r ;
66437: LD_ADDR_VAR 0 8
66441: PUSH
66442: LD_VAR 0 6
66446: PUSH
66447: LD_VAR 0 4
66451: MINUS
66452: ST_TO_ADDR
// max_x := x + r ;
66453: LD_ADDR_VAR 0 9
66457: PUSH
66458: LD_VAR 0 5
66462: PUSH
66463: LD_VAR 0 4
66467: PLUS
66468: ST_TO_ADDR
// max_y := y + r ;
66469: LD_ADDR_VAR 0 10
66473: PUSH
66474: LD_VAR 0 6
66478: PUSH
66479: LD_VAR 0 4
66483: PLUS
66484: ST_TO_ADDR
// for _x = min_x to max_x do
66485: LD_ADDR_VAR 0 11
66489: PUSH
66490: DOUBLE
66491: LD_VAR 0 7
66495: DEC
66496: ST_TO_ADDR
66497: LD_VAR 0 9
66501: PUSH
66502: FOR_TO
66503: IFFALSE 66585
// for _y = min_y to max_y do
66505: LD_ADDR_VAR 0 12
66509: PUSH
66510: DOUBLE
66511: LD_VAR 0 8
66515: DEC
66516: ST_TO_ADDR
66517: LD_VAR 0 10
66521: PUSH
66522: FOR_TO
66523: IFFALSE 66581
// begin if not ValidHex ( _x , _y ) then
66525: LD_VAR 0 11
66529: PPUSH
66530: LD_VAR 0 12
66534: PPUSH
66535: CALL_OW 488
66539: NOT
66540: IFFALSE 66544
// continue ;
66542: GO 66522
// if MineAtPos ( _x , _y ) then
66544: LD_VAR 0 11
66548: PPUSH
66549: LD_VAR 0 12
66553: PPUSH
66554: CALL_OW 458
66558: IFFALSE 66579
// ViewMineAtPos ( _x , _y , side ) ;
66560: LD_VAR 0 11
66564: PPUSH
66565: LD_VAR 0 12
66569: PPUSH
66570: LD_VAR 0 3
66574: PPUSH
66575: CALL_OW 457
// end ;
66579: GO 66522
66581: POP
66582: POP
66583: GO 66502
66585: POP
66586: POP
// end ;
66587: LD_VAR 0 2
66591: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
66598: PPUSH
66599: PPUSH
// if not units then
66600: LD_VAR 0 1
66604: NOT
66605: IFFALSE 66609
// exit ;
66607: GO 67039
// scaners := [ ] ;
66609: LD_ADDR_VAR 0 6
66613: PUSH
66614: EMPTY
66615: ST_TO_ADDR
// for i in units do
66616: LD_ADDR_VAR 0 3
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: FOR_IN
66627: IFFALSE 66784
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
66629: LD_VAR 0 3
66633: PPUSH
66634: CALL_OW 264
66638: PUSH
66639: LD_INT 11
66641: NONEQUAL
66642: IFTRUE 66656
66644: PUSH
66645: LD_VAR 0 3
66649: PPUSH
66650: CALL_OW 302
66654: NOT
66655: OR
66656: IFTRUE 66673
66658: PUSH
66659: LD_VAR 0 3
66663: PPUSH
66664: CALL_OW 110
66668: PUSH
66669: LD_INT 502
66671: EQUAL
66672: OR
66673: IFFALSE 66677
// continue ;
66675: GO 66626
// ComStop ( i ) ;
66677: LD_VAR 0 3
66681: PPUSH
66682: CALL_OW 141
// x := GetX ( i ) ;
66686: LD_ADDR_VAR 0 4
66690: PUSH
66691: LD_VAR 0 3
66695: PPUSH
66696: CALL_OW 250
66700: ST_TO_ADDR
// y := GetY ( i ) ;
66701: LD_ADDR_VAR 0 5
66705: PUSH
66706: LD_VAR 0 3
66710: PPUSH
66711: CALL_OW 251
66715: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66716: LD_VAR 0 3
66720: PPUSH
66721: CALL_OW 255
66725: PUSH
66726: LD_OWVAR 2
66730: EQUAL
66731: IFFALSE 66750
// PlaySoundXY ( x , y , mineDetector ) ;
66733: LD_VAR 0 4
66737: PPUSH
66738: LD_VAR 0 5
66742: PPUSH
66743: LD_STRING mineDetector
66745: PPUSH
66746: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66750: LD_ADDR_VAR 0 6
66754: PUSH
66755: LD_VAR 0 6
66759: PPUSH
66760: LD_VAR 0 3
66764: PPUSH
66765: CALL 55343 0 2
66769: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66770: LD_VAR 0 3
66774: PPUSH
66775: LD_INT 502
66777: PPUSH
66778: CALL_OW 109
// end ;
66782: GO 66626
66784: POP
66785: POP
// if not scaners then
66786: LD_VAR 0 6
66790: NOT
66791: IFFALSE 66795
// exit ;
66793: GO 67039
// wait ( 3 ) ;
66795: LD_INT 3
66797: PPUSH
66798: CALL_OW 67
// timer := 6 ;
66802: LD_ADDR_VAR 0 7
66806: PUSH
66807: LD_INT 6
66809: ST_TO_ADDR
// repeat for i in scaners do
66810: LD_ADDR_VAR 0 3
66814: PUSH
66815: LD_VAR 0 6
66819: PUSH
66820: FOR_IN
66821: IFFALSE 66937
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66823: LD_VAR 0 3
66827: PPUSH
66828: CALL_OW 302
66832: NOT
66833: IFTRUE 66846
66835: PUSH
66836: LD_VAR 0 3
66840: PPUSH
66841: CALL_OW 314
66845: OR
66846: IFTRUE 66877
66848: PUSH
66849: LD_VAR 0 3
66853: PPUSH
66854: CALL_OW 263
66858: PUSH
66859: LD_INT 1
66861: EQUAL
66862: IFFALSE 66876
66864: PUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: CALL_OW 311
66874: NOT
66875: AND
66876: OR
66877: IFFALSE 66921
// begin SetUnitDisplayNumber ( i , 0 ) ;
66879: LD_VAR 0 3
66883: PPUSH
66884: LD_INT 0
66886: PPUSH
66887: CALL_OW 505
// SetTag ( i , 0 ) ;
66891: LD_VAR 0 3
66895: PPUSH
66896: LD_INT 0
66898: PPUSH
66899: CALL_OW 109
// scaners := scaners diff i ;
66903: LD_ADDR_VAR 0 6
66907: PUSH
66908: LD_VAR 0 6
66912: PUSH
66913: LD_VAR 0 3
66917: DIFF
66918: ST_TO_ADDR
// continue ;
66919: GO 66820
// end ; SetUnitDisplayNumber ( i , timer ) ;
66921: LD_VAR 0 3
66925: PPUSH
66926: LD_VAR 0 7
66930: PPUSH
66931: CALL_OW 505
// end ;
66935: GO 66820
66937: POP
66938: POP
// if not scaners then
66939: LD_VAR 0 6
66943: NOT
66944: IFFALSE 66948
// exit ;
66946: GO 67039
// timer := Dec ( timer ) ;
66948: LD_ADDR_VAR 0 7
66952: PUSH
66953: LD_VAR 0 7
66957: PPUSH
66958: CALL 56738 0 1
66962: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66963: LD_INT 35
66965: PPUSH
66966: CALL_OW 67
// until timer = 0 ;
66970: LD_VAR 0 7
66974: PUSH
66975: LD_INT 0
66977: EQUAL
66978: IFFALSE 66810
// if not scaners then
66980: LD_VAR 0 6
66984: NOT
66985: IFFALSE 66989
// exit ;
66987: GO 67039
// for i in scaners do
66989: LD_ADDR_VAR 0 3
66993: PUSH
66994: LD_VAR 0 6
66998: PUSH
66999: FOR_IN
67000: IFFALSE 67037
// begin SetUnitDisplayNumber ( i , 0 ) ;
67002: LD_VAR 0 3
67006: PPUSH
67007: LD_INT 0
67009: PPUSH
67010: CALL_OW 505
// SetTag ( i , 0 ) ;
67014: LD_VAR 0 3
67018: PPUSH
67019: LD_INT 0
67021: PPUSH
67022: CALL_OW 109
// RevealDetectorMine ( i ) ;
67026: LD_VAR 0 3
67030: PPUSH
67031: CALL 66294 0 1
// end ;
67035: GO 66999
67037: POP
67038: POP
// end ;
67039: LD_VAR 0 2
67043: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
67044: LD_INT 0
67046: PPUSH
// if p1 = mine_detector_mode then
67047: LD_VAR 0 2
67051: PUSH
67052: LD_INT 103
67054: EQUAL
67055: IFFALSE 67066
// DetectMine ( units ) ;
67057: LD_VAR 0 1
67061: PPUSH
67062: CALL 66592 0 1
// end ; end_of_file
67066: LD_VAR 0 7
67070: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67071: LD_VAR 0 1
67075: PUSH
67076: LD_INT 200
67078: DOUBLE
67079: GREATEREQUAL
67080: IFFALSE 67088
67082: LD_INT 299
67084: DOUBLE
67085: LESSEQUAL
67086: IFTRUE 67090
67088: GO 67122
67090: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67091: LD_VAR 0 1
67095: PPUSH
67096: LD_VAR 0 2
67100: PPUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: LD_VAR 0 4
67110: PPUSH
67111: LD_VAR 0 5
67115: PPUSH
67116: CALL 61447 0 5
67120: GO 67199
67122: LD_INT 300
67124: DOUBLE
67125: GREATEREQUAL
67126: IFFALSE 67134
67128: LD_INT 399
67130: DOUBLE
67131: LESSEQUAL
67132: IFTRUE 67136
67134: GO 67198
67136: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67137: LD_VAR 0 1
67141: PPUSH
67142: LD_VAR 0 2
67146: PPUSH
67147: LD_VAR 0 3
67151: PPUSH
67152: LD_VAR 0 4
67156: PPUSH
67157: LD_VAR 0 5
67161: PPUSH
67162: LD_VAR 0 6
67166: PPUSH
67167: LD_VAR 0 7
67171: PPUSH
67172: LD_VAR 0 8
67176: PPUSH
67177: LD_VAR 0 9
67181: PPUSH
67182: LD_VAR 0 10
67186: PPUSH
67187: LD_VAR 0 11
67191: PPUSH
67192: CALL 67931 0 11
67196: GO 67199
67198: POP
// end ;
67199: PPOPN 11
67201: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67202: LD_VAR 0 1
67206: PPUSH
67207: LD_VAR 0 2
67211: PPUSH
67212: LD_VAR 0 3
67216: PPUSH
67217: LD_VAR 0 4
67221: PPUSH
67222: LD_VAR 0 5
67226: PPUSH
67227: CALL 60747 0 5
// end ; end_of_file
67231: PPOPN 5
67233: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
67234: PPOPN 6
67236: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67237: LD_INT 0
67239: PPUSH
// begin if not units then
67240: LD_VAR 0 1
67244: NOT
67245: IFFALSE 67249
// exit ;
67247: GO 67283
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
67249: LD_VAR 0 1
67253: PPUSH
67254: LD_VAR 0 2
67258: PPUSH
67259: LD_VAR 0 3
67263: PPUSH
67264: LD_VAR 0 4
67268: PPUSH
67269: LD_VAR 0 5
67273: PPUSH
67274: LD_VAR 0 6
67278: PPUSH
67279: CALL 67044 0 6
// end ;
67283: PPOPN 7
67285: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
67286: LD_EXP 30
67290: PUSH
67291: LD_INT 4
67293: EQUAL
67294: IFFALSE 67330
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
67296: LD_STRING setGameDifficulty(
67298: PUSH
67299: LD_OWVAR 67
67303: STR
67304: PUSH
67305: LD_STRING )
67307: STR
67308: PPUSH
67309: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
67313: LD_STRING displayDifficulty(
67315: PUSH
67316: LD_OWVAR 67
67320: STR
67321: PUSH
67322: LD_STRING )
67324: STR
67325: PPUSH
67326: CALL_OW 559
// end ; SOS_MapStart ( ) ;
67330: CALL 67359 0 0
// end ; end_of_file
67334: PPOPN 1
67336: END
// every 0 0$1 do
67337: GO 67339
67339: DISABLE
// begin enable ;
67340: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67341: LD_STRING updateTimer(
67343: PUSH
67344: LD_OWVAR 1
67348: STR
67349: PUSH
67350: LD_STRING );
67352: STR
67353: PPUSH
67354: CALL_OW 559
// end ;
67358: END
// export function SOS_MapStart ( ) ; begin
67359: LD_INT 0
67361: PPUSH
// UpdateFactoryWaypoints ( ) ;
67362: CALL 68293 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67366: CALL 68545 0 0
// ParseMultiDataToLua ( ) ;
67370: CALL 68692 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
67374: LD_STRING setSpecLogoNumber(
67376: PUSH
67377: LD_INT 2
67379: STR
67380: PUSH
67381: LD_STRING ,
67383: STR
67384: PUSH
67385: LD_INT 1
67387: STR
67388: PUSH
67389: LD_STRING )
67391: STR
67392: PPUSH
67393: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
67397: LD_STRING setSpecLogoNumber(
67399: PUSH
67400: LD_INT 3
67402: STR
67403: PUSH
67404: LD_STRING ,
67406: STR
67407: PUSH
67408: LD_INT 2
67410: STR
67411: PUSH
67412: LD_STRING )
67414: STR
67415: PPUSH
67416: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
67420: LD_STRING setSpecLogoNumber(
67422: PUSH
67423: LD_INT 4
67425: STR
67426: PUSH
67427: LD_STRING ,
67429: STR
67430: PUSH
67431: LD_INT 3
67433: STR
67434: PUSH
67435: LD_STRING )
67437: STR
67438: PPUSH
67439: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
67443: LD_STRING setSpecLogoNumber(
67445: PUSH
67446: LD_INT 5
67448: STR
67449: PUSH
67450: LD_STRING ,
67452: STR
67453: PUSH
67454: LD_INT 4
67456: STR
67457: PUSH
67458: LD_STRING )
67460: STR
67461: PPUSH
67462: CALL_OW 559
// end ;
67466: LD_VAR 0 1
67470: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
67471: LD_INT 0
67473: PPUSH
67474: PPUSH
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
67479: PPUSH
67480: PPUSH
67481: PPUSH
// for i := 1 to 8 do
67482: LD_ADDR_VAR 0 2
67486: PUSH
67487: DOUBLE
67488: LD_INT 1
67490: DEC
67491: ST_TO_ADDR
67492: LD_INT 8
67494: PUSH
67495: FOR_TO
67496: IFFALSE 67881
// begin if mpSidePositions [ i ] then
67498: LD_EXP 31
67502: PUSH
67503: LD_VAR 0 2
67507: ARRAY
67508: IFFALSE 67879
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
67510: LD_ADDR_VAR 0 7
67514: PUSH
67515: LD_INT 22
67517: PUSH
67518: LD_VAR 0 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 21
67529: PUSH
67530: LD_INT 1
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PPUSH
67541: CALL_OW 69
67545: PPUSH
67546: CALL 19367 0 1
67550: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67551: LD_ADDR_VAR 0 9
67555: PUSH
67556: LD_INT 22
67558: PUSH
67559: LD_VAR 0 2
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 2
67570: PUSH
67571: LD_INT 30
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 30
67583: PUSH
67584: LD_INT 1
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PPUSH
67600: CALL_OW 69
67604: ST_TO_ADDR
// crates := 0 ;
67605: LD_ADDR_VAR 0 4
67609: PUSH
67610: LD_INT 0
67612: ST_TO_ADDR
// oil := 0 ;
67613: LD_ADDR_VAR 0 5
67617: PUSH
67618: LD_INT 0
67620: ST_TO_ADDR
// sib := 0 ;
67621: LD_ADDR_VAR 0 6
67625: PUSH
67626: LD_INT 0
67628: ST_TO_ADDR
// if bases then
67629: LD_VAR 0 9
67633: IFFALSE 67739
// begin for j in bases do
67635: LD_ADDR_VAR 0 3
67639: PUSH
67640: LD_VAR 0 9
67644: PUSH
67645: FOR_IN
67646: IFFALSE 67737
// begin base := GetBase ( j ) ;
67648: LD_ADDR_VAR 0 8
67652: PUSH
67653: LD_VAR 0 3
67657: PPUSH
67658: CALL_OW 274
67662: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: LD_VAR 0 4
67672: PUSH
67673: LD_VAR 0 8
67677: PPUSH
67678: LD_INT 1
67680: PPUSH
67681: CALL_OW 275
67685: PLUS
67686: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
67687: LD_ADDR_VAR 0 5
67691: PUSH
67692: LD_VAR 0 5
67696: PUSH
67697: LD_VAR 0 8
67701: PPUSH
67702: LD_INT 2
67704: PPUSH
67705: CALL_OW 275
67709: PLUS
67710: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
67711: LD_ADDR_VAR 0 6
67715: PUSH
67716: LD_VAR 0 6
67720: PUSH
67721: LD_VAR 0 8
67725: PPUSH
67726: LD_INT 3
67728: PPUSH
67729: CALL_OW 275
67733: PLUS
67734: ST_TO_ADDR
// end ;
67735: GO 67645
67737: POP
67738: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
67739: LD_STRING setSpecText(
67741: PUSH
67742: LD_VAR 0 2
67746: STR
67747: PUSH
67748: LD_STRING ,
67750: STR
67751: PUSH
67752: LD_INT 2
67754: STR
67755: PUSH
67756: LD_STRING ,
67758: STR
67759: PUSH
67760: LD_VAR 0 4
67764: STR
67765: PUSH
67766: LD_STRING )
67768: STR
67769: PPUSH
67770: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
67774: LD_STRING setSpecText(
67776: PUSH
67777: LD_VAR 0 2
67781: STR
67782: PUSH
67783: LD_STRING ,
67785: STR
67786: PUSH
67787: LD_INT 3
67789: STR
67790: PUSH
67791: LD_STRING ,
67793: STR
67794: PUSH
67795: LD_VAR 0 5
67799: STR
67800: PUSH
67801: LD_STRING )
67803: STR
67804: PPUSH
67805: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
67809: LD_STRING setSpecText(
67811: PUSH
67812: LD_VAR 0 2
67816: STR
67817: PUSH
67818: LD_STRING ,
67820: STR
67821: PUSH
67822: LD_INT 4
67824: STR
67825: PUSH
67826: LD_STRING ,
67828: STR
67829: PUSH
67830: LD_VAR 0 6
67834: STR
67835: PUSH
67836: LD_STRING )
67838: STR
67839: PPUSH
67840: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
67844: LD_STRING setSpecText(
67846: PUSH
67847: LD_VAR 0 2
67851: STR
67852: PUSH
67853: LD_STRING ,
67855: STR
67856: PUSH
67857: LD_INT 5
67859: STR
67860: PUSH
67861: LD_STRING ,
67863: STR
67864: PUSH
67865: LD_VAR 0 7
67869: STR
67870: PUSH
67871: LD_STRING )
67873: STR
67874: PPUSH
67875: CALL_OW 559
// end ; end ;
67879: GO 67495
67881: POP
67882: POP
// end ;
67883: LD_VAR 0 1
67887: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
67888: LD_INT 2
67890: PUSH
67891: LD_INT 30
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 30
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: PPUSH
67916: CALL_OW 69
67920: IFFALSE 67930
67922: GO 67924
67924: DISABLE
// begin enable ;
67925: ENABLE
// UpdateSpectatorBar ;
67926: CALL 67471 0 0
// end ;
67930: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67931: LD_INT 0
67933: PPUSH
// end ;
67934: LD_VAR 0 12
67938: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67939: LD_INT 0
67941: PPUSH
67942: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67943: LD_VAR 0 1
67947: NOT
67948: IFTRUE 67967
67950: PUSH
67951: LD_VAR 0 2
67955: PPUSH
67956: LD_VAR 0 3
67960: PPUSH
67961: CALL_OW 488
67965: NOT
67966: OR
67967: IFTRUE 68002
67969: PUSH
67970: LD_VAR 0 1
67974: PPUSH
67975: CALL_OW 266
67979: PUSH
67980: LD_INT 3
67982: NONEQUAL
67983: IFFALSE 68001
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: CALL_OW 247
67995: PUSH
67996: LD_INT 1
67998: EQUAL
67999: NOT
68000: AND
68001: OR
68002: IFFALSE 68006
// exit ;
68004: GO 68288
// if GetType ( factory ) = unit_human then
68006: LD_VAR 0 1
68010: PPUSH
68011: CALL_OW 247
68015: PUSH
68016: LD_INT 1
68018: EQUAL
68019: IFFALSE 68036
// factory := IsInUnit ( factory ) ;
68021: LD_ADDR_VAR 0 1
68025: PUSH
68026: LD_VAR 0 1
68030: PPUSH
68031: CALL_OW 310
68035: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68036: LD_VAR 0 1
68040: PPUSH
68041: CALL_OW 266
68045: PUSH
68046: LD_INT 3
68048: NONEQUAL
68049: IFFALSE 68053
// exit ;
68051: GO 68288
// for i := 1 to Count ( factoryWaypoints ) do
68053: LD_ADDR_VAR 0 5
68057: PUSH
68058: DOUBLE
68059: LD_INT 1
68061: DEC
68062: ST_TO_ADDR
68063: LD_EXP 64
68067: PPUSH
68068: CALL 19367 0 1
68072: PUSH
68073: FOR_TO
68074: IFFALSE 68236
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
68076: LD_VAR 0 2
68080: PPUSH
68081: LD_VAR 0 3
68085: PPUSH
68086: CALL_OW 428
68090: PUSH
68091: LD_EXP 64
68095: PUSH
68096: LD_VAR 0 5
68100: ARRAY
68101: PUSH
68102: LD_INT 2
68104: ARRAY
68105: EQUAL
68106: IFFALSE 68138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68108: LD_ADDR_EXP 64
68112: PUSH
68113: LD_EXP 64
68117: PPUSH
68118: LD_VAR 0 5
68122: PPUSH
68123: CALL_OW 3
68127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68128: CALL 68293 0 0
// exit ;
68132: POP
68133: POP
68134: GO 68288
// end else
68136: GO 68234
// if factory = factoryWaypoints [ i ] [ 2 ] then
68138: LD_VAR 0 1
68142: PUSH
68143: LD_EXP 64
68147: PUSH
68148: LD_VAR 0 5
68152: ARRAY
68153: PUSH
68154: LD_INT 2
68156: ARRAY
68157: EQUAL
68158: IFFALSE 68234
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68160: LD_ADDR_EXP 64
68164: PUSH
68165: LD_EXP 64
68169: PPUSH
68170: LD_VAR 0 5
68174: PPUSH
68175: CALL_OW 3
68179: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68180: LD_ADDR_EXP 64
68184: PUSH
68185: LD_EXP 64
68189: PPUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: CALL_OW 255
68199: PUSH
68200: LD_VAR 0 1
68204: PUSH
68205: LD_VAR 0 2
68209: PUSH
68210: LD_VAR 0 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: PPUSH
68221: CALL 55343 0 2
68225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68226: CALL 68293 0 0
// exit ;
68230: POP
68231: POP
68232: GO 68288
// end ; end ;
68234: GO 68073
68236: POP
68237: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68238: LD_ADDR_EXP 64
68242: PUSH
68243: LD_EXP 64
68247: PPUSH
68248: LD_VAR 0 1
68252: PPUSH
68253: CALL_OW 255
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_VAR 0 2
68267: PUSH
68268: LD_VAR 0 3
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: PPUSH
68279: CALL 55343 0 2
68283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68284: CALL 68293 0 0
// end ;
68288: LD_VAR 0 4
68292: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68293: LD_INT 0
68295: PPUSH
68296: PPUSH
68297: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68298: LD_STRING resetFactoryWaypoint();
68300: PPUSH
68301: CALL_OW 559
// if factoryWaypoints then
68305: LD_EXP 64
68309: IFFALSE 68430
// begin list := factoryWaypoints ;
68311: LD_ADDR_VAR 0 3
68315: PUSH
68316: LD_EXP 64
68320: ST_TO_ADDR
// for i := 1 to list do
68321: LD_ADDR_VAR 0 2
68325: PUSH
68326: DOUBLE
68327: LD_INT 1
68329: DEC
68330: ST_TO_ADDR
68331: LD_VAR 0 3
68335: PUSH
68336: FOR_TO
68337: IFFALSE 68428
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68339: LD_STRING setFactoryWaypointXY(
68341: PUSH
68342: LD_VAR 0 3
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: STR
68357: PUSH
68358: LD_STRING ,
68360: STR
68361: PUSH
68362: LD_VAR 0 3
68366: PUSH
68367: LD_VAR 0 2
68371: ARRAY
68372: PUSH
68373: LD_INT 2
68375: ARRAY
68376: STR
68377: PUSH
68378: LD_STRING ,
68380: STR
68381: PUSH
68382: LD_VAR 0 3
68386: PUSH
68387: LD_VAR 0 2
68391: ARRAY
68392: PUSH
68393: LD_INT 3
68395: ARRAY
68396: STR
68397: PUSH
68398: LD_STRING ,
68400: STR
68401: PUSH
68402: LD_VAR 0 3
68406: PUSH
68407: LD_VAR 0 2
68411: ARRAY
68412: PUSH
68413: LD_INT 4
68415: ARRAY
68416: STR
68417: PUSH
68418: LD_STRING )
68420: STR
68421: PPUSH
68422: CALL_OW 559
68426: GO 68336
68428: POP
68429: POP
// end ; end ;
68430: LD_VAR 0 1
68434: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68435: LD_INT 0
68437: PPUSH
// if HexInfo ( x , y ) = warehouse then
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: CALL_OW 428
68452: PUSH
68453: LD_VAR 0 1
68457: EQUAL
68458: IFFALSE 68485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68460: LD_ADDR_EXP 66
68464: PUSH
68465: LD_EXP 66
68469: PPUSH
68470: LD_VAR 0 1
68474: PPUSH
68475: LD_INT 0
68477: PPUSH
68478: CALL_OW 1
68482: ST_TO_ADDR
68483: GO 68536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68485: LD_ADDR_EXP 66
68489: PUSH
68490: LD_EXP 66
68494: PPUSH
68495: LD_VAR 0 1
68499: PPUSH
68500: LD_VAR 0 1
68504: PPUSH
68505: CALL_OW 255
68509: PUSH
68510: LD_VAR 0 1
68514: PUSH
68515: LD_VAR 0 2
68519: PUSH
68520: LD_VAR 0 3
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: PPUSH
68531: CALL_OW 1
68535: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68536: CALL 68545 0 0
// end ;
68540: LD_VAR 0 4
68544: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68545: LD_INT 0
68547: PPUSH
68548: PPUSH
68549: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68550: LD_STRING resetWarehouseGatheringPoints();
68552: PPUSH
68553: CALL_OW 559
// if warehouseGatheringPoints then
68557: LD_EXP 66
68561: IFFALSE 68687
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68563: LD_ADDR_VAR 0 3
68567: PUSH
68568: LD_EXP 66
68572: PPUSH
68573: CALL 59277 0 1
68577: ST_TO_ADDR
// for i := 1 to list do
68578: LD_ADDR_VAR 0 2
68582: PUSH
68583: DOUBLE
68584: LD_INT 1
68586: DEC
68587: ST_TO_ADDR
68588: LD_VAR 0 3
68592: PUSH
68593: FOR_TO
68594: IFFALSE 68685
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68596: LD_STRING setWarehouseGatheringPointXY(
68598: PUSH
68599: LD_VAR 0 3
68603: PUSH
68604: LD_VAR 0 2
68608: ARRAY
68609: PUSH
68610: LD_INT 1
68612: ARRAY
68613: STR
68614: PUSH
68615: LD_STRING ,
68617: STR
68618: PUSH
68619: LD_VAR 0 3
68623: PUSH
68624: LD_VAR 0 2
68628: ARRAY
68629: PUSH
68630: LD_INT 2
68632: ARRAY
68633: STR
68634: PUSH
68635: LD_STRING ,
68637: STR
68638: PUSH
68639: LD_VAR 0 3
68643: PUSH
68644: LD_VAR 0 2
68648: ARRAY
68649: PUSH
68650: LD_INT 3
68652: ARRAY
68653: STR
68654: PUSH
68655: LD_STRING ,
68657: STR
68658: PUSH
68659: LD_VAR 0 3
68663: PUSH
68664: LD_VAR 0 2
68668: ARRAY
68669: PUSH
68670: LD_INT 4
68672: ARRAY
68673: STR
68674: PUSH
68675: LD_STRING )
68677: STR
68678: PPUSH
68679: CALL_OW 559
68683: GO 68593
68685: POP
68686: POP
// end ; end ;
68687: LD_VAR 0 1
68691: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
// if not mpSidePositions then
68696: LD_EXP 31
68700: NOT
68701: IFFALSE 68705
// exit ;
68703: GO 68776
// result :=  ;
68705: LD_ADDR_VAR 0 1
68709: PUSH
68710: LD_STRING 
68712: ST_TO_ADDR
// for i := 1 to 8 do
68713: LD_ADDR_VAR 0 2
68717: PUSH
68718: DOUBLE
68719: LD_INT 1
68721: DEC
68722: ST_TO_ADDR
68723: LD_INT 8
68725: PUSH
68726: FOR_TO
68727: IFFALSE 68757
// begin result := result & mpSidePositions [ i ] & ; ;
68729: LD_ADDR_VAR 0 1
68733: PUSH
68734: LD_VAR 0 1
68738: PUSH
68739: LD_EXP 31
68743: PUSH
68744: LD_VAR 0 2
68748: ARRAY
68749: STR
68750: PUSH
68751: LD_STRING ;
68753: STR
68754: ST_TO_ADDR
// end ;
68755: GO 68726
68757: POP
68758: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
68759: LD_STRING setMultiplayerRealPosition("
68761: PUSH
68762: LD_VAR 0 1
68766: STR
68767: PUSH
68768: LD_STRING ");
68770: STR
68771: PPUSH
68772: CALL_OW 559
// end ;
68776: LD_VAR 0 1
68780: RET
